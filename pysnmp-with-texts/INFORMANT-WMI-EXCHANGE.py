#
# PySNMP MIB module INFORMANT-WMI-EXCHANGE (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INFORMANT-WMI-EXCHANGE
# Produced by pysmi-0.3.4 at Wed May  1 13:53:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Bits, NotificationType, Counter32, Counter64, TimeTicks, Unsigned32, IpAddress, Gauge32, Integer32, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "NotificationType", "Counter32", "Counter64", "TimeTicks", "Unsigned32", "IpAddress", "Gauge32", "Integer32", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
TextualConvention, TruthValue, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "DateAndTime")
informant, WtcsDisplayString = mibBuilder.importSymbols("WTCS", "informant", "WtcsDisplayString")
wmiExchange = ModuleIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 23))
wmiExchange.setRevisions(('2008-04-14 17:17', '2005-04-11 04:09',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wmiExchange.setRevisionsDescriptions(('Updated the description fields based on the WMI entries. Added the following missing Exchange WMI classes: exchangeQueuedSMTPMessageTable, exchangeQueuedX400MessageTable, exchangeQueueSMTPVirtualSrvTable, exchangeQueueX400VirtualSrvTable, exchangeScheduleIntervalTable, exchangeSMTPLinkTable, exchangeSMTPQueueTable, exchangeX400LinkTable, and exchangeX400QueueTable', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: wmiExchange.setLastUpdated('200804141717Z')
if mibBuilder.loadTexts: wmiExchange.setOrganization('Informant Systems, Inc.')
if mibBuilder.loadTexts: wmiExchange.setContactInfo('Garth Williams 11135-23A Ave Edmonton, AB T6J4W5 Canada Tel: +1 780 434 4113 E-mail: garth.williams@wtcs.org')
if mibBuilder.loadTexts: wmiExchange.setDescription('The MIB module for informant exchange WMI entities.')
exchangeClusterResourceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 1), )
if mibBuilder.loadTexts: exchangeClusterResourceTable.setStatus('current')
if mibBuilder.loadTexts: exchangeClusterResourceTable.setDescription('The ExchangeClusterResource WMI class has properties that return information about a Microsoft Exchange cluster resource.')
exchangeClusterResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 1, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "excrIndex"))
if mibBuilder.loadTexts: exchangeClusterResourceEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeClusterResourceEntry.setDescription('None')
excrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excrIndex.setStatus('current')
if mibBuilder.loadTexts: excrIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
excrName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 1, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excrName.setStatus('current')
if mibBuilder.loadTexts: excrName.setDescription('The Name property returns the name of the Microsoft Exchange cluster resource. The Name property is read-only, and is a key property of this class.')
excrOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 1, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excrOwner.setStatus('current')
if mibBuilder.loadTexts: excrOwner.setDescription('The Owner property for a cluster resource specifies the cluster node of which the resource is a part. The Owner property is read-only.')
excrState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excrState.setStatus('current')
if mibBuilder.loadTexts: excrState.setDescription('The State property specifies the current state of the cluster resource.')
excrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 1, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excrType.setStatus('current')
if mibBuilder.loadTexts: excrType.setDescription('The Type property specifies the resource type.')
excrVirtualMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 1, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excrVirtualMachine.setStatus('current')
if mibBuilder.loadTexts: excrVirtualMachine.setDescription('The Type property specifies the resource type.')
exchangeConnectorStateTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 2), )
if mibBuilder.loadTexts: exchangeConnectorStateTable.setStatus('current')
if mibBuilder.loadTexts: exchangeConnectorStateTable.setDescription('The ExchangeConnectorState WMI class has properties that return information about a Microsoft Exchange connector.')
exchangeConnectorStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 2, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "excsIndex"))
if mibBuilder.loadTexts: exchangeConnectorStateEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeConnectorStateEntry.setDescription('None')
excsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excsIndex.setStatus('current')
if mibBuilder.loadTexts: excsIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
excsDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 2, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excsDN.setStatus('current')
if mibBuilder.loadTexts: excsDN.setDescription('The DN property specifies the Microsoft Active Directory distinguished name (DN) of the Exchange Connector object.')
excsGroupDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 2, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excsGroupDN.setStatus('current')
if mibBuilder.loadTexts: excsGroupDN.setDescription('The GroupDN property specifies the distinguished name (DN) in Active Directory of the routing group.')
excsGroupGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 2, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excsGroupGUID.setStatus('current')
if mibBuilder.loadTexts: excsGroupGUID.setDescription('The GroupGUID property specifies the globally unique identifier (GUID) of the routing group.')
excsGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 2, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excsGUID.setStatus('current')
if mibBuilder.loadTexts: excsGUID.setDescription('The GUID property specifies the GUID of the Exchange Connector.')
excsIsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excsIsUp.setStatus('current')
if mibBuilder.loadTexts: excsIsUp.setDescription('The IsUp property, when True, specifies that the Exchange Connector is operating normally.')
excsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 2, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excsName.setStatus('current')
if mibBuilder.loadTexts: excsName.setDescription('The Name property specifies the name of the Exchange Connector.')
exchangeLinkTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3), )
if mibBuilder.loadTexts: exchangeLinkTable.setStatus('current')
if mibBuilder.loadTexts: exchangeLinkTable.setDescription('The ExchangeLink WMI class has properties that return information about message-handling links between mail servers. A link can contain zero or more ExchangeQueue objects, depending on the current message traffic along the link. In the Exchange System Manager, these links are called queues.')
exchangeLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exlIndex"))
if mibBuilder.loadTexts: exchangeLinkEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeLinkEntry.setDescription('None')
exlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlIndex.setStatus('current')
if mibBuilder.loadTexts: exlIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exlActionFreeze = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlActionFreeze.setStatus('current')
if mibBuilder.loadTexts: exlActionFreeze.setDescription('The ActionFreeze property, when True, specifies that the link supports freezing messages in its queues. The ActionFreeze property corresponds to the sixth bit (0x00000020) of the SupportedLinkActions property.')
exlActionKick = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlActionKick.setStatus('current')
if mibBuilder.loadTexts: exlActionKick.setDescription('The ActionKick property, when True, specifies that the link can trigger its queues to retry transmitting waiting messages immediately, instead of waiting for the default protocol timeout before retrying the transmission. The ActionKick property corresponds to the first bit (0x00000001) of the SupportedLinkActions property.')
exlActionThaw = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlActionThaw.setStatus('current')
if mibBuilder.loadTexts: exlActionThaw.setDescription("The ActionThaw property, when True, specifies that the link supports thawing messages in its queues. Thawing a queue is also known as 'unfreezing' that queue. The ActionThaw property corresponds to the seventh bit (0x00000040) of the SupportedLinkActions property.")
exlExtendedStateInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlExtendedStateInfo.setStatus('current')
if mibBuilder.loadTexts: exlExtendedStateInfo.setDescription('The ExtendedStateInfo property specifies the text description of the current link status.')
exlGlobalStop = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlGlobalStop.setStatus('current')
if mibBuilder.loadTexts: exlGlobalStop.setDescription('The GlobalStop property specifies whether the link is currently stopped.')
exlIncreasingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlIncreasingTime.setStatus('current')
if mibBuilder.loadTexts: exlIncreasingTime.setDescription('The IncreasingTime property specifies the amount of time, in milliseconds, that the number of messages waiting to be transferred by the link has been increasing.')
exlLinkDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlLinkDN.setStatus('current')
if mibBuilder.loadTexts: exlLinkDN.setDescription('The LinkDN property specifies the Active Directory globally unique identifier (GUID) of the connector object that generated the link.')
exlLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlLinkName.setStatus('current')
if mibBuilder.loadTexts: exlLinkName.setDescription('The LinkName property specifies the name of the link.')
exlNextScheduledConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlNextScheduledConnection.setStatus('current')
if mibBuilder.loadTexts: exlNextScheduledConnection.setDescription('The NextScheduledConnection property specifies the date and time when a connection will be attempted to transfer waiting messages.')
exlNumberOfMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlNumberOfMessages.setStatus('current')
if mibBuilder.loadTexts: exlNumberOfMessages.setDescription('The NumberOfMessages property specifies the number of messages that are waiting for transmission across the link.')
exlOldestMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlOldestMessage.setStatus('current')
if mibBuilder.loadTexts: exlOldestMessage.setDescription('The OldestMessage property specifies the date and time that the oldest message that is still waiting to be transmitted was received into the link.')
exlProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlProtocolName.setStatus('current')
if mibBuilder.loadTexts: exlProtocolName.setDescription('The ProtocolName property specifies the transmission protocol for the link.')
exlSizeOfQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlSizeOfQueue.setStatus('current')
if mibBuilder.loadTexts: exlSizeOfQueue.setDescription('The SizeOfQueue property specifies the total size of the messages in the link, in bytes.')
exlStateActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlStateActive.setStatus('current')
if mibBuilder.loadTexts: exlStateActive.setDescription('The StateActive property, when True, specifies that the link is active. The StateActive property corresponds to first bit (0x00000001) of the StateFlags property.')
exlStateFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlStateFlags.setStatus('current')
if mibBuilder.loadTexts: exlStateFlags.setDescription('The StateFlags property specifies the state of the link. The individual bits of this property are available as the link State. and Type. properties of this class.')
exlStateFrozen = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlStateFrozen.setStatus('current')
if mibBuilder.loadTexts: exlStateFrozen.setDescription('The StateFrozen property indicates whether the link is currently frozen. The StateFrozen property corresponds to the sixth bit (0x00000020) of the StateFlags property.')
exlStateReady = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlStateReady.setStatus('current')
if mibBuilder.loadTexts: exlStateReady.setDescription('The StateReady property, when True, specifies that the link is ready to accept new messages. The StateReady property corresponds to the second bit (0x00000002) of the StateFlags property.')
exlStateRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlStateRemote.setStatus('current')
if mibBuilder.loadTexts: exlStateRemote.setDescription('The StateRemote property, when True, specifies that the destination for messages in this link is on a remote server, instead of the messages being delivered to a local store. The StateRemote property corresponds to the fifth bit (0x00000010) of the StateFlags property.')
exlStateRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlStateRetry.setStatus('current')
if mibBuilder.loadTexts: exlStateRetry.setDescription('The StateRetry property, when True, specifies that the link is retrying a transmission that was unsuccessful. The StateRetry property corresponds to the third bit (0x00000004) of the StateFlags property.')
exlStateScheduled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlStateScheduled.setStatus('current')
if mibBuilder.loadTexts: exlStateScheduled.setDescription('The StateScheduled property, when True, specifies that the link is scheduled for periodic activation, as compared with asynchronous, on-demand activation. The StateScheduled property corresponds to the fourth bit (0x00000008) of the StateFlags property.')
exlSupportedLinkActions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlSupportedLinkActions.setStatus('current')
if mibBuilder.loadTexts: exlSupportedLinkActions.setDescription('The SupportedLinkActions property specifies the actions supported by the link. The individual bits of this property are available as the Action. properties in this class.')
exlTypeCurrentlyUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlTypeCurrentlyUnreachable.setStatus('current')
if mibBuilder.loadTexts: exlTypeCurrentlyUnreachable.setDescription('The TypeCurrentlyUnreachable property, when True, specifies that the link holds messages for destinations that currently cannot be reached. The TypeCurrentlyUnreachable property corresponds to the thirteenth bit (0x00001000) of the StateFlags property.')
exlTypeDeferredDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlTypeDeferredDelivery.setStatus('current')
if mibBuilder.loadTexts: exlTypeDeferredDelivery.setDescription('The TypeDeferredDelivery property, when True, specifies that the link holds mail that is awaiting a trigger to start transmission. The TypeDeferredDelivery property corresponds to the fourteenth bit (0x00002000) of the StateFlags property.')
exlTypeInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlTypeInternal.setStatus('current')
if mibBuilder.loadTexts: exlTypeInternal.setDescription('The TypeInternal property indicates that the link is used for internal message processing. The TypeInternal property corresponds to the fifteenth bit (0x00004000) of the StateFlags property.')
exlTypeLocalDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlTypeLocalDelivery.setStatus('current')
if mibBuilder.loadTexts: exlTypeLocalDelivery.setDescription('The TypeLocalDelivery property, when True, specifies that the link handles local mail delivery. The TypeLocalDelivery property corresponds to the tenth bit (0x00000200) of the StateFlags property.')
exlTypePendingCategorization = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlTypePendingCategorization.setStatus('current')
if mibBuilder.loadTexts: exlTypePendingCategorization.setDescription('The TypePendingCategorization property, when True, specifies that the link is resolving addresses against entries in Active Directory. The TypePendingCategorization property corresponds to the twelfth bit (0x00000800) of the StateFlags property.')
exlTypePendingRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlTypePendingRouting.setStatus('current')
if mibBuilder.loadTexts: exlTypePendingRouting.setDescription('The TypePendingRouting property, when True, specifies that the link is determining the routing of the next message that is waiting to be transmitted. The TypePendingRouting property corresponds to the eleventh bit (0x00000400) of the StateFlags property.')
exlTypePendingSubmission = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlTypePendingSubmission.setStatus('current')
if mibBuilder.loadTexts: exlTypePendingSubmission.setDescription('The TypePendingSubmission property, when True, specifies that the link handles messages that have not yet been submitted to the routing engine. The TypePendingSubmission property corresponds to the sixteenth bit (0x00008000) of the StateFlags property.')
exlTypeRemoteDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlTypeRemoteDelivery.setStatus('current')
if mibBuilder.loadTexts: exlTypeRemoteDelivery.setDescription('The TypeRemoteDelivery property, when True, specifies that the link is currently handling a remote message delivery. The TypeRemoteDelivery property corresponds to the ninth bit (0x00000100) of the StateFlags property.')
exlVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlVersion.setStatus('current')
if mibBuilder.loadTexts: exlVersion.setDescription('The Version property specifies the version number of the underlying link control software.')
exlVirtualMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlVirtualMachine.setStatus('current')
if mibBuilder.loadTexts: exlVirtualMachine.setDescription('The VirtualMachine property specifies the name of the virtual machine that is the source of the link.')
exlVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 3, 1, 33), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exlVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: exlVirtualServerName.setDescription('The value of the VirtualServerName property is the integer number of the virtual machine that is the source of the link. This number is the Microsoft Active Directorycommon name (CN) for the virtual server object.')
exchangeQueueTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4), )
if mibBuilder.loadTexts: exchangeQueueTable.setStatus('current')
if mibBuilder.loadTexts: exchangeQueueTable.setDescription('The ExchangeQueue WMI class has properties that return information about the dynamic queues created to transfer individual messages between mail servers. An ExchangeQueue is part of an ExchangeLink. ExchangeQueue objects are not the same as the queues listed in the Exchange System Manager.')
exchangeQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exqIndex"))
if mibBuilder.loadTexts: exchangeQueueEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeQueueEntry.setDescription('None')
exqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqIndex.setStatus('current')
if mibBuilder.loadTexts: exqIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exqCanEnumAll = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqCanEnumAll.setStatus('current')
if mibBuilder.loadTexts: exqCanEnumAll.setDescription('The CanEnumAll property, when True, specifies that the queue can enumerate all of the messages that it has waiting for transmission. The CanEnumAll property corresponds to the thirty-first bit (0x40000000) of the MsgEnumFlagsSupported property.')
exqCanEnumFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqCanEnumFailed.setStatus('current')
if mibBuilder.loadTexts: exqCanEnumFailed.setDescription('The CanEnumFailed property, when True, specifies that the queue can enumerate the messages that it has waiting for transmission that it was unable to transfer. The CanEnumFailed property corresponds to the ninth bit (0x00000100) of the MsgEnumFlagsSupported property.')
exqCanEnumFirstNMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqCanEnumFirstNMessages.setStatus('current')
if mibBuilder.loadTexts: exqCanEnumFirstNMessages.setDescription('The CanEnumFirstNMessages property, when True, specifies that the queue can enumerate the first N messages that it has waiting for transmission. The CanEnumFirstNMessages property corresponds to the first bit (0x00000001) of the MsgEnumFlagsSupported property.')
exqCanEnumFrozen = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqCanEnumFrozen.setStatus('current')
if mibBuilder.loadTexts: exqCanEnumFrozen.setDescription('The CanEnumFrozen property, when True, specifies that the queue can enumerate messages that it has waiting for transmission that have been frozen. The CanEnumFrozen property corresponds to the sixth bit (0x00000020) of the MsgEnumFlagsSupported property.')
exqCanEnumInvertSense = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqCanEnumInvertSense.setStatus('current')
if mibBuilder.loadTexts: exqCanEnumInvertSense.setDescription('The CanEnumInvertSense property, when True, specifies that the queue can enumerate messages that it has waiting for transmission that do not match the criteria requested. For example, requesting the oldest messages while inverting the request sense would return the newest messages. The CanEnumInvertSense property corresponds to the thirty-second bit (0x80000000) of the MsgEnumFlagsSupported property.')
exqCanEnumLargerThan = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqCanEnumLargerThan.setStatus('current')
if mibBuilder.loadTexts: exqCanEnumLargerThan.setDescription('The CanEnumLargerThan property, when True, specifies that the queue can enumerate the messages that it has waiting for transmission that are larger than a specified value. The CanEnumLargerThan property corresponds to the fourth bit (0x00000008) of the MsgEnumFlagsSupported property.')
exqCanEnumNLargestMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqCanEnumNLargestMessages.setStatus('current')
if mibBuilder.loadTexts: exqCanEnumNLargestMessages.setDescription('The CanEnumNLargestMessages property, when True, specifies that the queue can enumerate the specified number of the largest messages that it has waiting for transmission. The CanEnumNLargestMessages property corresponds to the seventh bit (0x00000040) of the MsgEnumFlagsSupported property.')
exqCanEnumNOldestMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqCanEnumNOldestMessages.setStatus('current')
if mibBuilder.loadTexts: exqCanEnumNOldestMessages.setDescription('The CanEnumNOldestMessages property, when True, specifies that the queue can enumerate the specified number of the oldest messages that it has waiting for transmission. The CanEnumNOldestMessages property corresponds to the eighth bit (0x00000080) of the MsgEnumFlagsSupported property.')
exqCanEnumOlderThan = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqCanEnumOlderThan.setStatus('current')
if mibBuilder.loadTexts: exqCanEnumOlderThan.setDescription('The CanEnumOlderThan property, when True, specifies that the queue can enumerate the messages that it has waiting for transmission that arrived before a specified date and time. The CanEnumOlderThan property corresponds to the fifth bit (0x00000010) of the MsgEnumFlagsSupported property.')
exqCanEnumRecipient = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqCanEnumRecipient.setStatus('current')
if mibBuilder.loadTexts: exqCanEnumRecipient.setDescription('The CanEnumRecipient property, when True, specifies that the queue can enumerate the recipients of messages that it has waiting for transmission. The CanEnumRecipient property corresponds to the fourth bit (0x00000004) of the MsgEnumFlagsSupported property.')
exqCanEnumSender = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqCanEnumSender.setStatus('current')
if mibBuilder.loadTexts: exqCanEnumSender.setDescription('The CanEnumSender property, when True, specifies that the queue can enumerate the senders of messages that it has waiting for transmission. The CanEnumSender property corresponds to the second bit (0x00000002) of the MsgEnumFlagsSupported property.')
exqGlobalStop = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqGlobalStop.setStatus('current')
if mibBuilder.loadTexts: exqGlobalStop.setDescription('The GlobalStop property specifies whether the queue is currently stopped.')
exqIncreasingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqIncreasingTime.setStatus('current')
if mibBuilder.loadTexts: exqIncreasingTime.setDescription('The IncreasingTime property specifies the amount of time, in milliseconds, that the number of messages waiting to be transferred by the queue has been increasing.')
exqLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqLinkName.setStatus('current')
if mibBuilder.loadTexts: exqLinkName.setDescription('The LinkName property specifies the name of the link in which this queue is contained.')
exqMsgEnumFlagsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqMsgEnumFlagsSupported.setStatus('current')
if mibBuilder.loadTexts: exqMsgEnumFlagsSupported.setDescription('The MsgEnumFlagsSupported property specifies a bit-mapped set of flags that indicate what types of objects can be enumerated. The individual bits of this property are available as the queue CanEnum. properties in this class.')
exqNumberOfMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqNumberOfMessages.setStatus('current')
if mibBuilder.loadTexts: exqNumberOfMessages.setDescription('The NumberOfMessages property specifies the number of messages that are waiting for transmission by the queue.')
exqProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqProtocolName.setStatus('current')
if mibBuilder.loadTexts: exqProtocolName.setDescription('The ProtocolName property specifies the transmission protocol for the queue.')
exqQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqQueueName.setStatus('current')
if mibBuilder.loadTexts: exqQueueName.setDescription('The QueueName property specifies the name of the queue.')
exqSizeOfQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqSizeOfQueue.setStatus('current')
if mibBuilder.loadTexts: exqSizeOfQueue.setDescription('The SizeOfQueue property specifies the total size of all messages in the queue, in bytes.')
exqVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqVersion.setStatus('current')
if mibBuilder.loadTexts: exqVersion.setDescription('The Version property specifies the version number of the Microsoft Exchange software.')
exqVirtualMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqVirtualMachine.setStatus('current')
if mibBuilder.loadTexts: exqVirtualMachine.setDescription('The VirtualMachine property specifies the name of the virtual machine that is the source of the link.')
exqVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 4, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: exqVirtualServerName.setDescription('The value of the VirtualServerName property is the integer number of the virtual machine that is the source of the queue. This number is the Microsoft Active Directory common name (CN) for the virtual server object.')
exchangeServerStateTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5), )
if mibBuilder.loadTexts: exchangeServerStateTable.setStatus('current')
if mibBuilder.loadTexts: exchangeServerStateTable.setDescription('The ExchangeServerState WMI class has properties that return information about the computer running Microsoft Exchange 2000 Server.')
exchangeServerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exssIndex"))
if mibBuilder.loadTexts: exchangeServerStateEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeServerStateEntry.setDescription('None')
exssIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssIndex.setStatus('current')
if mibBuilder.loadTexts: exssIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exssClusterState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("ok", 1), ("warning", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssClusterState.setStatus('current')
if mibBuilder.loadTexts: exssClusterState.setDescription('When the ExchangeServerState instance represents a clustered Exchange server, the ClusterState property specifies the state of the clustered resources on that server.')
exssClusterStateString = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssClusterStateString.setStatus('current')
if mibBuilder.loadTexts: exssClusterStateString.setDescription('When the ExchangeServerState instance represents a clustered Exchange server, the ClusterStateString property specifies the state of the cluster resources on that server.')
exssCPUState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("ok", 1), ("warning", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssCPUState.setStatus('current')
if mibBuilder.loadTexts: exssCPUState.setDescription('The CPUState property specifies the current state of the CPU on the Exchange server. This is the same state information shown on the Monitoring and Status Properties page of the Exchange System Manager.')
exssCPUStateString = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssCPUStateString.setStatus('current')
if mibBuilder.loadTexts: exssCPUStateString.setDescription('The CPUStateString property specifies the current state of the CPU on the Exchange server.')
exssDisksState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("ok", 1), ("warning", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssDisksState.setStatus('current')
if mibBuilder.loadTexts: exssDisksState.setDescription('The DisksState property specifies the current state of the disk storage on the computer running Exchange 2000 Server.')
exssDisksStateString = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssDisksStateString.setStatus('current')
if mibBuilder.loadTexts: exssDisksStateString.setDescription('The DisksStateString property specifies the current state of the disk storage on the computer running Exchange 2000 Server.')
exssDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssDN.setStatus('current')
if mibBuilder.loadTexts: exssDN.setDescription('The DN property specifies the Microsoft Active Directory distinguished name (DN) of the Exchange server object.')
exssGroupDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssGroupDN.setStatus('current')
if mibBuilder.loadTexts: exssGroupDN.setDescription('The GroupDN property specifies the DN of the Exchange 2000 Server routing group in Active Directory.')
exssGroupGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssGroupGUID.setStatus('current')
if mibBuilder.loadTexts: exssGroupGUID.setDescription('The GroupGUID property specifies the globally unique identifier (GUID) of the Exchange 2000 Server routing group in Active Directory.')
exssGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssGUID.setStatus('current')
if mibBuilder.loadTexts: exssGUID.setDescription('The GUID property specifies the GUID of the Exchange 2000 Server server object in Active Directory.')
exssMemoryState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("ok", 1), ("warning", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssMemoryState.setStatus('current')
if mibBuilder.loadTexts: exssMemoryState.setDescription('The MemoryState property specifies the current state of the memory on the computer running Exchange 2000 Server.')
exssMemoryStateString = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssMemoryStateString.setStatus('current')
if mibBuilder.loadTexts: exssMemoryStateString.setDescription('The MemoryStateString property specifies the current state of the memory on the computer running Exchange 2000 Server.')
exssName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssName.setStatus('current')
if mibBuilder.loadTexts: exssName.setDescription('The Name property specifies the name of the computer running Exchange 2000 Server.')
exssQueuesState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("ok", 1), ("warning", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssQueuesState.setStatus('current')
if mibBuilder.loadTexts: exssQueuesState.setDescription('The QueuesState property specifies the current state of the queues on the computer running Exchange 2000 Server.')
exssQueuesStateString = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssQueuesStateString.setStatus('current')
if mibBuilder.loadTexts: exssQueuesStateString.setDescription('The QueuesStateString property specifies the current state of the queues on the computer running Exchange 2000 Server.')
exssServerMaintenance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssServerMaintenance.setStatus('current')
if mibBuilder.loadTexts: exssServerMaintenance.setDescription('The ServerMaintenance property, when True, specifies that the notifications set up in the Exchange 2000 Server System Manager Monitoring and Status page have been disabled.')
exssServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("ok", 1), ("warning", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssServerState.setStatus('current')
if mibBuilder.loadTexts: exssServerState.setDescription('The ServerState property specifies the current state of the computer running Exchange 2000 Server.')
exssServerStateString = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssServerStateString.setStatus('current')
if mibBuilder.loadTexts: exssServerStateString.setDescription('The ServerStateString property specifies the current state of the computer running Exchange 2000 Server.')
exssServicesState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("ok", 1), ("warning", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssServicesState.setStatus('current')
if mibBuilder.loadTexts: exssServicesState.setDescription('The ServicesState property specifies the current state of the monitoring services running on the Exchange 2000 Server computer.')
exssServicesStateString = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssServicesStateString.setStatus('current')
if mibBuilder.loadTexts: exssServicesStateString.setDescription('The ServicesStateString property specifies the current state of the monitoring services running on the Exchange 2000 Server computer.')
exssUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssUnreachable.setStatus('current')
if mibBuilder.loadTexts: exssUnreachable.setDescription('The Unreachable property, when True, specifies that the Exchange 2000 Server computer is currently unreachable.')
exssVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 5, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exssVersion.setStatus('current')
if mibBuilder.loadTexts: exssVersion.setDescription('The Version property indicates the version of the Exchange server.')
exchangeDSAccessDCTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 6), )
if mibBuilder.loadTexts: exchangeDSAccessDCTable.setStatus('current')
if mibBuilder.loadTexts: exchangeDSAccessDCTable.setDescription('The properties of the Exchange_DSAccessDC class provide information about Microsoft Active Directory and Microsoft Exchange Server 5.5 domain controllers that are accessible to the Exchange 2000 Server DSAccess service.')
exchangeDSAccessDCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 6, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exdsIndex"))
if mibBuilder.loadTexts: exchangeDSAccessDCEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeDSAccessDCEntry.setDescription('None')
exdsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exdsIndex.setStatus('current')
if mibBuilder.loadTexts: exdsIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exdsConfigurationType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("manual", 0), ("automatic", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exdsConfigurationType.setStatus('current')
if mibBuilder.loadTexts: exdsConfigurationType.setDescription('The ConfigurationType property indicates whether the instance describes a domain controller that was detected automatically, or one that was specified manually.')
exdsIsFast = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 6, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exdsIsFast.setStatus('current')
if mibBuilder.loadTexts: exdsIsFast.setDescription('The IsFast property indicates, when True, that the domain controller response time has been less than two seconds.')
exdsIsInSync = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 6, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exdsIsInSync.setStatus('current')
if mibBuilder.loadTexts: exdsIsInSync.setDescription('The IsInSync property indicates whether the domain controller is synchronized with the Global Catalog server and with the Configuration domain controller.')
exdsIsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 6, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exdsIsUp.setStatus('current')
if mibBuilder.loadTexts: exdsIsUp.setDescription('The IsUp property indicates whether the domain controller was available the last time Exchange attempted to access it.')
exdsLDAPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exdsLDAPPort.setStatus('current')
if mibBuilder.loadTexts: exdsLDAPPort.setDescription('The LDAPPort property specifies the TCP/IP port on which the domain controller listens for LDAP requests.')
exdsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 6, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exdsName.setStatus('current')
if mibBuilder.loadTexts: exdsName.setDescription('The Name property specifies the computer name of the domain controller.')
exdsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("configurationDomainController", 0), ("localDomainController", 1), ("globalCatalog", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exdsType.setStatus('current')
if mibBuilder.loadTexts: exdsType.setDescription('The Type property specifies the role that the domain controller plays in the Exchange system.')
exchangeFolderTreeTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 7), )
if mibBuilder.loadTexts: exchangeFolderTreeTable.setStatus('current')
if mibBuilder.loadTexts: exchangeFolderTreeTable.setDescription('Instances of the Exchange_FolderTree WMI class provide information about public and private folder trees on Microsoft Exchange servers.')
exchangeFolderTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 7, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exftIndex"))
if mibBuilder.loadTexts: exchangeFolderTreeEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeFolderTreeEntry.setDescription('None')
exftIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exftIndex.setStatus('current')
if mibBuilder.loadTexts: exftIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exftAdministrativeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 7, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exftAdministrativeGroup.setStatus('current')
if mibBuilder.loadTexts: exftAdministrativeGroup.setDescription('The AdministrativeGroup property indicates the name of the administrative group that the top-level hierarchy (TLH) resides under in Active Directory.')
exftAdministrativeNote = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 7, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exftAdministrativeNote.setStatus('current')
if mibBuilder.loadTexts: exftAdministrativeNote.setDescription('The AdministrativeNote property indicates the administrative note attached to the Microsoft Active Directory object representing the tree.')
exftAssociatedPublicStores = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 7, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exftAssociatedPublicStores.setStatus('current')
if mibBuilder.loadTexts: exftAssociatedPublicStores.setDescription('The AssociatedPublicStores property indicates the list of MDBs associated with the top-level hierarchy (TLH).')
exftCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 7, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exftCreationTime.setStatus('current')
if mibBuilder.loadTexts: exftCreationTime.setDescription('The CreationTime property indicates when the tree was created.')
exftGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 7, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exftGUID.setStatus('current')
if mibBuilder.loadTexts: exftGUID.setDescription('The GUID property indicates the globally unique identifier (GUID) attribute of the top-level hierarchy (TLH) object in Active Directory.')
exftHasLocalPublicStore = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 7, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exftHasLocalPublicStore.setStatus('current')
if mibBuilder.loadTexts: exftHasLocalPublicStore.setDescription('The HasLocalPublicStore property indicates whether the computer contains the Exchange store associated with the folder tree.')
exftLastModificationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 7, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exftLastModificationTime.setStatus('current')
if mibBuilder.loadTexts: exftLastModificationTime.setDescription('The LastModificationTime property indicates when the tree was last modified.')
exftMapiFolderTree = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 7, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exftMapiFolderTree.setStatus('current')
if mibBuilder.loadTexts: exftMapiFolderTree.setDescription('The MapiFolderTree property indicates whether this is the MAPI top-level hierarchy (TLH).')
exftName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 7, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exftName.setStatus('current')
if mibBuilder.loadTexts: exftName.setDescription('The Name property indicates the name of the top-level hierarchy (TLH).')
exftRootFolderURL = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 7, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exftRootFolderURL.setStatus('current')
if mibBuilder.loadTexts: exftRootFolderURL.setDescription('The RootFolderURL property indicates the URL to the root of the tree referenced through the Exchange administration IIS virtual directory.')
exchangeLinkV2Table = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8), )
if mibBuilder.loadTexts: exchangeLinkV2Table.setStatus('current')
if mibBuilder.loadTexts: exchangeLinkV2Table.setDescription('The Exchange_Link WMI class has properties that return information about message-handling links between mail servers. A link can contain zero or more Exchange_Queue objects, depending on the current message traffic along the link. In the Microsoft Exchange System Manager, these links are called queues.')
exchangeLinkV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exl2Index"))
if mibBuilder.loadTexts: exchangeLinkV2Entry.setStatus('current')
if mibBuilder.loadTexts: exchangeLinkV2Entry.setDescription('None')
exl2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2Index.setStatus('current')
if mibBuilder.loadTexts: exl2Index.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exl2ActionFreeze = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2ActionFreeze.setStatus('current')
if mibBuilder.loadTexts: exl2ActionFreeze.setDescription('The ActionFreeze property, when TRUE, specifies that the link supports freezing messages in its queues. The ActionFreeze property corresponds to the sixth bit (0x00000020) of the SupportedLinkActions property.')
exl2ActionKick = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2ActionKick.setStatus('current')
if mibBuilder.loadTexts: exl2ActionKick.setDescription('The ActionKick property, when TRUE, specifies that the link can trigger its queues to retry transmitting waiting messages immediately, instead of waiting for the default protocol timeout before retrying the transmission. The ActionKick property corresponds to the first bit (0x00000001) of the SupportedLinkActions property.')
exl2ActionThaw = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2ActionThaw.setStatus('current')
if mibBuilder.loadTexts: exl2ActionThaw.setDescription("The ActionThaw property, when TRUE, specifies that the link supports thawing messages in its queues. Thawing a queue is also known as 'unfreezing' that queue. The ActionThaw property corresponds to the seventh bit (0x00000040) of the SupportedLinkActions property.")
exl2ExtendedStateInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2ExtendedStateInfo.setStatus('current')
if mibBuilder.loadTexts: exl2ExtendedStateInfo.setDescription('The ExtendedStateInfo property provides the text description of the current link status, including extended error reporting and troubleshooting information.')
exl2GlobalStop = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2GlobalStop.setStatus('current')
if mibBuilder.loadTexts: exl2GlobalStop.setDescription('The GlobalStop property indicates whether the virtual server for the link is in disabled mode. If True, the virtual server is disabled.')
exl2LinkDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2LinkDN.setStatus('current')
if mibBuilder.loadTexts: exl2LinkDN.setDescription('The LinkDN property specifies the name of the link.')
exl2LinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2LinkId.setStatus('current')
if mibBuilder.loadTexts: exl2LinkId.setDescription('The LinkId property indicates the identifier for the link.')
exl2LinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2LinkName.setStatus('current')
if mibBuilder.loadTexts: exl2LinkName.setDescription('The LinkName property indicates the name of the link.')
exl2MessageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2MessageCount.setStatus('current')
if mibBuilder.loadTexts: exl2MessageCount.setDescription('The MessageCount property specifies the number of messages that are waiting for transmission across the link.')
exl2NextScheduledConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2NextScheduledConnection.setStatus('current')
if mibBuilder.loadTexts: exl2NextScheduledConnection.setDescription('The NextScheduledConnection property indicates the next time a connection will be attempted.')
exl2OldestMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2OldestMessage.setStatus('current')
if mibBuilder.loadTexts: exl2OldestMessage.setDescription('The OldestMessage property specifies the date and time that the oldest message that is still waiting to be transmitted was received into the link.')
exl2ProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2ProtocolName.setStatus('current')
if mibBuilder.loadTexts: exl2ProtocolName.setDescription('The ProtocolName property indicates the transmission protocol used by the link.')
exl2Size = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2Size.setStatus('current')
if mibBuilder.loadTexts: exl2Size.setDescription('The Size property specifies the total size of the messages in the link, in bytes.')
exl2StateActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2StateActive.setStatus('current')
if mibBuilder.loadTexts: exl2StateActive.setDescription('The StateActive property, when TRUE, specifies that the link is active. The StateActive property corresponds to first bit (0x00000001) of the StateFlags property.')
exl2StateFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2StateFlags.setStatus('current')
if mibBuilder.loadTexts: exl2StateFlags.setDescription('The StateFlags property specifies the state of the link. The individual bits of this property are available as the link State. and Type. properties of this class.')
exl2StateFrozen = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2StateFrozen.setStatus('current')
if mibBuilder.loadTexts: exl2StateFrozen.setDescription('The StateFrozen property indicates whether the link is currently frozen. The StateFrozen property corresponds to the sixth bit (0x00000020) of the StateFlags property.')
exl2StateReady = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2StateReady.setStatus('current')
if mibBuilder.loadTexts: exl2StateReady.setDescription('The StateReady property, when TRUE, specifies that the link is ready to accept new messages. The StateReady property corresponds to the second bit (0x00000002) of the StateFlags property.')
exl2StateRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2StateRemote.setStatus('current')
if mibBuilder.loadTexts: exl2StateRemote.setDescription('The StateRemote property, when TRUE, specifies that the destination for messages in this link is on a remote server, instead of the messages being delivered to a local store. The StateRemote property corresponds to the fifth bit (0x00000010) of the StateFlags property.')
exl2StateRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2StateRetry.setStatus('current')
if mibBuilder.loadTexts: exl2StateRetry.setDescription('The StateRetry property, when TRUE, specifies that the link is retrying a transmission that was unsuccessful. The StateRetry property corresponds to the third bit (0x00000004) of the StateFlags property.')
exl2StateScheduled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2StateScheduled.setStatus('current')
if mibBuilder.loadTexts: exl2StateScheduled.setDescription('The StateScheduled property, when TRUE, specifies that the link is scheduled for periodic activation, as compared with asynchronous, on-demand activation. The StateScheduled property corresponds to the fourth bit (0x00000008) of the StateFlags property.')
exl2SupportedLinkActions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2SupportedLinkActions.setStatus('current')
if mibBuilder.loadTexts: exl2SupportedLinkActions.setDescription('The SupportedLinkActions property specifies the actions supported by the link. The individual bits of this property are available as the Action. properties in this class.')
exl2TypeCurrentlyUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2TypeCurrentlyUnreachable.setStatus('current')
if mibBuilder.loadTexts: exl2TypeCurrentlyUnreachable.setDescription('The TypeCurrentlyUnreachable property, when TRUE, specifies that the link holds messages for destinations that currently cannot be reached. The TypeCurrentlyUnreachable property corresponds to the thirteenth bit (0x00001000) of the StateFlags property.')
exl2TypeDeferredDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2TypeDeferredDelivery.setStatus('current')
if mibBuilder.loadTexts: exl2TypeDeferredDelivery.setDescription('The TypeDeferredDelivery property, when TRUE, specifies that the link holds mail that is awaiting a trigger to start transmission. The TypeDeferredDelivery property corresponds to the fourteenth bit (0x00002000) of the StateFlags property.')
exl2TypeInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2TypeInternal.setStatus('current')
if mibBuilder.loadTexts: exl2TypeInternal.setDescription('The TypeInternal property indicates that the link is used for internal message processing. The TypeInternal property corresponds to the fifteenth bit (0x00004000) of the StateFlags property.')
exl2TypeLocalDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2TypeLocalDelivery.setStatus('current')
if mibBuilder.loadTexts: exl2TypeLocalDelivery.setDescription('The TypeLocalDelivery property, when TRUE, specifies that the link handles local mail delivery. The TypeLocalDelivery property corresponds to the tenth bit (0x00000200) of the StateFlags property.')
exl2TypePendingCategorization = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2TypePendingCategorization.setStatus('current')
if mibBuilder.loadTexts: exl2TypePendingCategorization.setDescription('The TypePendingCategorization property, when TRUE, specifies that the link is resolving addresses against entries in Active Directory. The TypePendingCategorization property corresponds to the twelfth bit (0x00000800) of the StateFlags property.')
exl2TypePendingRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2TypePendingRouting.setStatus('current')
if mibBuilder.loadTexts: exl2TypePendingRouting.setDescription('The TypePendingRouting property, when TRUE, specifies that the link is determining the routing of the next message that is waiting to be transmitted. The TypePendingRouting property corresponds to the eleventh bit (0x00000400) of the StateFlags property.')
exl2TypePendingSubmission = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2TypePendingSubmission.setStatus('current')
if mibBuilder.loadTexts: exl2TypePendingSubmission.setDescription('The TypePendingSubmission property, when TRUE, specifies that the link handles messages that have not yet been submitted to the routing engine. The TypePendingSubmission property corresponds to the sixteenth bit (0x00008000) of the StateFlags property.')
exl2TypeRemoteDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2TypeRemoteDelivery.setStatus('current')
if mibBuilder.loadTexts: exl2TypeRemoteDelivery.setDescription('The TypeRemoteDelivery property, when TRUE, specifies that the link is currently handling a remote message delivery. The TypeRemoteDelivery property corresponds to the ninth bit (0x00000100) of the StateFlags property.')
exl2Version = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2Version.setStatus('current')
if mibBuilder.loadTexts: exl2Version.setDescription('The Version property specifies the version number of the underlying link control software.')
exl2VirtualMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 32), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2VirtualMachine.setStatus('current')
if mibBuilder.loadTexts: exl2VirtualMachine.setDescription('The VirtualMachine property indicates the name of the virtual machine that is the source of the link.')
exl2VirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 8, 1, 33), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exl2VirtualServerName.setStatus('current')
if mibBuilder.loadTexts: exl2VirtualServerName.setDescription('The value of the VirtualServerName property is the integer number of the virtual machine that is the source of the link. This number is the Microsoft Active Directory common name (CN) for the virtual server object.')
exchangeLogonTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9), )
if mibBuilder.loadTexts: exchangeLogonTable.setStatus('current')
if mibBuilder.loadTexts: exchangeLogonTable.setDescription('Instances of Exchange_Logon represent the users currently logged on to Microsoft Exchange.')
exchangeLogonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exloIndex"))
if mibBuilder.loadTexts: exchangeLogonEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeLogonEntry.setDescription('None')
exloIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloIndex.setStatus('current')
if mibBuilder.loadTexts: exloIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exloAdapterSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 2), Gauge32()).setUnits('Kbits/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: exloAdapterSpeed.setStatus('current')
if mibBuilder.loadTexts: exloAdapterSpeed.setDescription('The AdapterSpeed property indicates the speed of the client network interface card, in kilobits/second')
exloClientIP = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloClientIP.setStatus('current')
if mibBuilder.loadTexts: exloClientIP.setDescription('The ClientIP property indicates the IP address of the client computer.')
exloClientMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("classicOnline", 1), ("cached", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloClientMode.setStatus('current')
if mibBuilder.loadTexts: exloClientMode.setDescription('The ClientMode property indicates whether the client is using local data caching.')
exloClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloClientName.setStatus('current')
if mibBuilder.loadTexts: exloClientName.setDescription('The ClientName property indicates the client computer name.')
exloClientVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloClientVersion.setStatus('current')
if mibBuilder.loadTexts: exloClientVersion.setDescription('The ClientVersion property indicates the version of the client used to log on.')
exloCodePageID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloCodePageID.setStatus('current')
if mibBuilder.loadTexts: exloCodePageID.setDescription('The CodePageID property indicates the code page of the client.')
exloFolderOperationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 8), Gauge32()).setUnits('per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: exloFolderOperationRate.setStatus('current')
if mibBuilder.loadTexts: exloFolderOperationRate.setDescription('The FolderOperationRate property indicates the folder operation rate (per second) performed by the store on behalf of the client.')
exloHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloHostAddress.setStatus('current')
if mibBuilder.loadTexts: exloHostAddress.setDescription('The HostAddress property indicates the client-specific identification information.')
exloLastOperationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloLastOperationTime.setStatus('current')
if mibBuilder.loadTexts: exloLastOperationTime.setDescription('The LastOperationTime property indicates the time when the last operation was performed.')
exloLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 11), Gauge32()).setUnits('msec').setMaxAccess("readonly")
if mibBuilder.loadTexts: exloLatency.setStatus('current')
if mibBuilder.loadTexts: exloLatency.setDescription('The Latency property indicates the server response latency time reported by the client, in milliseconds.')
exloLocaleID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloLocaleID.setStatus('current')
if mibBuilder.loadTexts: exloLocaleID.setDescription('The LocaleID property indicates the Windows locale of the client.')
exloLoggedOnUserAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloLoggedOnUserAccount.setStatus('current')
if mibBuilder.loadTexts: exloLoggedOnUserAccount.setDescription('The LoggedOnUserAccount property indicates the name of the user account that logged on in the format DOMAIN\\SAMAccountName.')
exloLoggedOnUsersMailboxLegacyDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloLoggedOnUsersMailboxLegacyDN.setStatus('current')
if mibBuilder.loadTexts: exloLoggedOnUsersMailboxLegacyDN.setDescription('The LoggedOnUsersMailboxLegacyDN property indicates the legacyDN of the user who is currently logged on.')
exloLogonTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloLogonTime.setStatus('current')
if mibBuilder.loadTexts: exloLogonTime.setDescription('The LogonTime property indicates the time that the user logged on.')
exloMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloMacAddress.setStatus('current')
if mibBuilder.loadTexts: exloMacAddress.setDescription('The MacAddress property indicates the network interface card Media Access Connector address of the client computer.')
exloMailboxDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloMailboxDisplayName.setStatus('current')
if mibBuilder.loadTexts: exloMailboxDisplayName.setDescription('The MailboxDisplayName property indicates the name of the mailbox.')
exloMailboxLegacyDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloMailboxLegacyDN.setStatus('current')
if mibBuilder.loadTexts: exloMailboxLegacyDN.setDescription('The MailboxLegacyDN property indicates the legacyDN of the mailbox.')
exloMessagingOperationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 19), Gauge32()).setUnits('per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: exloMessagingOperationRate.setStatus('current')
if mibBuilder.loadTexts: exloMessagingOperationRate.setDescription('The MessagingOperationRate property indicates the rate of send/receive operations performed per second by the store on behalf of the client.')
exloOpenAttachmentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloOpenAttachmentCount.setStatus('current')
if mibBuilder.loadTexts: exloOpenAttachmentCount.setDescription('The OpenAttachmentCount property indicates the number of attachments currently opened by the client.')
exloOpenFolderCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloOpenFolderCount.setStatus('current')
if mibBuilder.loadTexts: exloOpenFolderCount.setDescription('The OpenFolderCount property indicates the number of folders currently opened by the client.')
exloOpenMessageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloOpenMessageCount.setStatus('current')
if mibBuilder.loadTexts: exloOpenMessageCount.setDescription('The OpenMessageCount property indicates the number of messages currently opened by the client.')
exloOtherOperationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 23), Gauge32()).setUnits('per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: exloOtherOperationRate.setStatus('current')
if mibBuilder.loadTexts: exloOtherOperationRate.setDescription('The OtherOperationRate property indicates the rate of operations performed on the store, in response to client requests that are not within the other categories of operation-request properties.')
exloProgressOperationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 24), Gauge32()).setUnits('per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: exloProgressOperationRate.setStatus('current')
if mibBuilder.loadTexts: exloProgressOperationRate.setDescription('The ProgressOperationRate property indicates the rate of progress operations performed per second by the store on behalf of the client.')
exloRowID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloRowID.setStatus('current')
if mibBuilder.loadTexts: exloRowID.setDescription('The RowID property indicates that a random identifier is generated per query to ensure uniqueness.')
exloRPCSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloRPCSucceeded.setStatus('current')
if mibBuilder.loadTexts: exloRPCSucceeded.setDescription('The RPCSucceeded property indicates the number of successful RPC requests made by the client.')
exloServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 27), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloServerName.setStatus('current')
if mibBuilder.loadTexts: exloServerName.setDescription('The ServerName property indicates the name of the server where the mailbox resides.')
exloStorageGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloStorageGroupName.setStatus('current')
if mibBuilder.loadTexts: exloStorageGroupName.setDescription('The StorageGroupName property indicates the name of the storage group that contains the mailbox.')
exloStoreName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 29), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloStoreName.setStatus('current')
if mibBuilder.loadTexts: exloStoreName.setDescription('The StoreName property indicates the name of the MDB that contains the mailbox.')
exloStoreType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mailboxStore", 1), ("publicStore", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exloStoreType.setStatus('current')
if mibBuilder.loadTexts: exloStoreType.setDescription('The StoreType property indicates whether the store contains mailboxes or public folders.')
exloStreamOperationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 31), Gauge32()).setUnits('per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: exloStreamOperationRate.setStatus('current')
if mibBuilder.loadTexts: exloStreamOperationRate.setDescription('The StreamOperationRate property indicates the rate of stream operations performed per second by the store on behalf of the client.')
exloTableOperationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 32), Gauge32()).setUnits('per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: exloTableOperationRate.setStatus('current')
if mibBuilder.loadTexts: exloTableOperationRate.setDescription('The TableOperationRate property indicates the rate of table operations performed per second by the store on behalf of the client.')
exloTotalOperationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 33), Gauge32()).setUnits('per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: exloTotalOperationRate.setStatus('current')
if mibBuilder.loadTexts: exloTotalOperationRate.setDescription('The TotalOperationRate property indicates the rate of all operations performed per second by the store on behalf of the client.')
exloTransferOperationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 9, 1, 34), Gauge32()).setUnits('per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: exloTransferOperationRate.setStatus('current')
if mibBuilder.loadTexts: exloTransferOperationRate.setDescription('The TransferOperationRate property indicates the rate of transfer operations performed per second by the store on behalf of the client.')
exchangeMailboxTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 10), )
if mibBuilder.loadTexts: exchangeMailboxTable.setStatus('current')
if mibBuilder.loadTexts: exchangeMailboxTable.setDescription('The Exchange_Mailbox WMI class has properties that return information about Microsoft Exchange mailboxes.')
exchangeMailboxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 10, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exmIndex"))
if mibBuilder.loadTexts: exchangeMailboxEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeMailboxEntry.setDescription('None')
exmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmIndex.setStatus('current')
if mibBuilder.loadTexts: exmIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exmAssocContentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 10, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmAssocContentCount.setStatus('current')
if mibBuilder.loadTexts: exmAssocContentCount.setDescription('The AssocContentCount property indicates the total number of messages associated with the mailbox folders.')
exmDateDiscoveredAbsentInDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 10, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmDateDiscoveredAbsentInDS.setStatus('current')
if mibBuilder.loadTexts: exmDateDiscoveredAbsentInDS.setDescription('The DateDiscoveredAbsentInDS property indicates when the store detected that the mailbox no longer had a corresponding user entry in Microsoft Active Directory.')
exmDeletedMessageSizeExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 10, 1, 4), WtcsDisplayString()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: exmDeletedMessageSizeExtended.setStatus('current')
if mibBuilder.loadTexts: exmDeletedMessageSizeExtended.setDescription('The DeletedMessageSizeExtended property indicates the cumulative size of all deleted messages that are still being retained according to retention policy settings.')
exmLastLoggedOnUserAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 10, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmLastLoggedOnUserAccount.setStatus('current')
if mibBuilder.loadTexts: exmLastLoggedOnUserAccount.setDescription('The LastLoggedOnUserAccount property indicates the account name last used to log on to the mailbox.')
exmLastLogoffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 10, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmLastLogoffTime.setStatus('current')
if mibBuilder.loadTexts: exmLastLogoffTime.setDescription('The LastLogoffTime property indicates the time that the last user logged off.')
exmLastLogonTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 10, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmLastLogonTime.setStatus('current')
if mibBuilder.loadTexts: exmLastLogonTime.setDescription('The LastLogonTime property indicates the time that the last user logged on.')
exmLegacyDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 10, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmLegacyDN.setStatus('current')
if mibBuilder.loadTexts: exmLegacyDN.setDescription('The LegacyDN property indicates the legacyDN of the mailbox and matches the legacyDN attribute of the user object in Microsoft Active Directory.')
exmMailboxDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 10, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmMailboxDisplayName.setStatus('current')
if mibBuilder.loadTexts: exmMailboxDisplayName.setDescription('The MailboxDisplayName property indicates the display name of the mailbox and matches the displayName attribute in Microsoft Active Directory.')
exmMailboxGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 10, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmMailboxGUID.setStatus('current')
if mibBuilder.loadTexts: exmMailboxGUID.setDescription('The MailboxGUID property indicates the globally unique identifier (GUID) that links the mailbox to a user in Microsoft Active Directory.')
exmServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 10, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmServerName.setStatus('current')
if mibBuilder.loadTexts: exmServerName.setDescription('The ServerName property indicates the name of the server where the mailbox resides.')
exmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 10, 1, 12), WtcsDisplayString()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: exmSize.setStatus('current')
if mibBuilder.loadTexts: exmSize.setDescription('The Size property indicates the cumulative size of all of the messages in the mailbox, in bytes.')
exmStorageGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 10, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmStorageGroupName.setStatus('current')
if mibBuilder.loadTexts: exmStorageGroupName.setDescription('The StorageGroupName property indicates the name of the storage group that contains the mailbox.')
exmStorageLimitInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))).clone(namedValues=NamedValues(("belowLimit", 1), ("issueWarning", 2), ("prohibitSend", 4), ("noChecking", 8), ("mailboxDisabled", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmStorageLimitInfo.setStatus('current')
if mibBuilder.loadTexts: exmStorageLimitInfo.setDescription('The StorageLimitInfo property contains the storage limit settings on the mailbox.')
exmStoreName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 10, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmStoreName.setStatus('current')
if mibBuilder.loadTexts: exmStoreName.setDescription('The StoreName property indicates the name of the MDB that contains the mailbox.')
exmTotalItems = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 10, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmTotalItems.setStatus('current')
if mibBuilder.loadTexts: exmTotalItems.setDescription('The TotalItems property indicates the total number of messages in the mailbox.')
exchangeMessageTrackingTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11), )
if mibBuilder.loadTexts: exchangeMessageTrackingTable.setStatus('current')
if mibBuilder.loadTexts: exchangeMessageTrackingTable.setDescription('Instances of the Exchange_MessageTrackingEntry class provide information about events that have occurred to the message during the time it was under the control of the computer running Microsoft Exchange 2000 Server.')
exchangeMessageTrackingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exmtIndex"))
if mibBuilder.loadTexts: exchangeMessageTrackingEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeMessageTrackingEntry.setDescription('None')
exmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtIndex.setStatus('current')
if mibBuilder.loadTexts: exmtIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exmtAttemptedPartnerServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtAttemptedPartnerServer.setStatus('current')
if mibBuilder.loadTexts: exmtAttemptedPartnerServer.setDescription('The AttemptedPartnerServer property indicates the server to which Exchange tried to send a message, but was unable to complete the transfer.')
exmtClientIP = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtClientIP.setStatus('current')
if mibBuilder.loadTexts: exmtClientIP.setDescription('The ClientIP property indicates the TCP/IP address of the messaging client that originally submitted the message.')
exmtClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtClientName.setStatus('current')
if mibBuilder.loadTexts: exmtClientName.setDescription('The ClientName property indicates the name of the messaging client application that submitted the message.')
exmtCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtCost.setStatus('current')
if mibBuilder.loadTexts: exmtCost.setDescription('The Cost property indicates the relative effort required to transfer the message. There are no specific units used in this property. Higher values indicate that slower network connections must be used, or that a greater number of transfers is required to transfer the message.')
exmtDeliveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 6), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtDeliveryTime.setStatus('current')
if mibBuilder.loadTexts: exmtDeliveryTime.setDescription('The DeliveryTime property indicates the amount of time, in seconds, required to deliver the message.')
exmtEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtEncrypted.setStatus('current')
if mibBuilder.loadTexts: exmtEncrypted.setDescription('The Encrypted property indicates, when True, that the message is encrypted.')
exmtEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtEntryType.setStatus('current')
if mibBuilder.loadTexts: exmtEntryType.setDescription('The EntryType property indicates what occurred to cause the message tracking log entry to be created.')
exmtExpansionDL = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtExpansionDL.setStatus('current')
if mibBuilder.loadTexts: exmtExpansionDL.setDescription('The ExpansionDL property indicates the name of the Exchange distribution list that was expanded. After the distribution list is expanded, the message recipient list includes the names of the individual members of that distribution list.')
exmtKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtKeyID.setStatus('current')
if mibBuilder.loadTexts: exmtKeyID.setDescription('The KeyID property uniquely identifies the message log entry.')
exmtLinkedMessageID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtLinkedMessageID.setStatus('current')
if mibBuilder.loadTexts: exmtLinkedMessageID.setDescription('The LinkedMessageID property is the string identifier assigned to the message when it is received by the PartnerServer property. This property sometimes has the same value as the MessageID Property.')
exmtMessageID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtMessageID.setStatus('current')
if mibBuilder.loadTexts: exmtMessageID.setDescription('The MessageID property indicates the identifier string for the message. The identifier may be assigned by the messaging client application or by the Exchange server.')
exmtOriginationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtOriginationTime.setStatus('current')
if mibBuilder.loadTexts: exmtOriginationTime.setDescription('The OriginationTime property indicates the date and time, in UTC, when the message was received by Exchange.')
exmtPartnerServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtPartnerServer.setStatus('current')
if mibBuilder.loadTexts: exmtPartnerServer.setDescription('The PartnerServer property indicates the server to which Exchange transferred the message.')
exmtPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtPriority.setStatus('current')
if mibBuilder.loadTexts: exmtPriority.setDescription('The Priority property specifies the importance of the message, as displayed by the messaging client application.')
exmtRecipientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtRecipientAddress.setStatus('current')
if mibBuilder.loadTexts: exmtRecipientAddress.setDescription('The RecipientAddress property returns an array. Each array element contains the e-mail address of one of the message recipients.')
exmtRecipientCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtRecipientCount.setStatus('current')
if mibBuilder.loadTexts: exmtRecipientCount.setDescription('The RecipientCount property indicates how many recipients are in the recipients list for the message.')
exmtRecipientStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtRecipientStatus.setStatus('current')
if mibBuilder.loadTexts: exmtRecipientStatus.setDescription('Each element of the RecipientStatus array indicates the message type sent to the recipient specified in the corresponding element of the RecipientAddress array.')
exmtSenderAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtSenderAddress.setStatus('current')
if mibBuilder.loadTexts: exmtSenderAddress.setDescription('The SenderAddress property specifies the e-mail address of the message sender.')
exmtServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtServerIP.setStatus('current')
if mibBuilder.loadTexts: exmtServerIP.setDescription('The ServerIP property indicates the TCP/IP protocol address of the Exchange server.')
exmtServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtServerName.setStatus('current')
if mibBuilder.loadTexts: exmtServerName.setDescription('The ServerName property indicates the name of the virtual server instance that created the message tracking log entry.')
exmtSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtSize.setStatus('current')
if mibBuilder.loadTexts: exmtSize.setDescription('The Size property indicates the message size, including attachments, in bytes.')
exmtSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtSubject.setStatus('current')
if mibBuilder.loadTexts: exmtSubject.setDescription('The Subject property indicates the subject of the message, as found in the Subject: message header.')
exmtSubjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtSubjectID.setStatus('current')
if mibBuilder.loadTexts: exmtSubjectID.setDescription('The SubjectID property specifies an identifier created by the messaging client application.')
exmtTimeLogged = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtTimeLogged.setStatus('current')
if mibBuilder.loadTexts: exmtTimeLogged.setDescription('The TimeLogged property indicates the date and time, in UTC, when the message tracking log entry was created.')
exmtVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 11, 1, 26), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exmtVersion.setStatus('current')
if mibBuilder.loadTexts: exmtVersion.setDescription('The Version property indicates the version of the service that created the message tracking log entry.')
exchangePublicFolderTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12), )
if mibBuilder.loadTexts: exchangePublicFolderTable.setStatus('current')
if mibBuilder.loadTexts: exchangePublicFolderTable.setDescription('The Exchange_PublicFolder WMI class provides properties and methods for working with Microsoft Exchange public folders.')
exchangePublicFolderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "expfIndex"))
if mibBuilder.loadTexts: exchangePublicFolderEntry.setStatus('current')
if mibBuilder.loadTexts: exchangePublicFolderEntry.setDescription('None')
expfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfIndex.setStatus('current')
if mibBuilder.loadTexts: expfIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
expfAddressBookName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfAddressBookName.setStatus('current')
if mibBuilder.loadTexts: expfAddressBookName.setDescription('The AddressBookName property specifies the address book name of the folder.')
expfAdministrativeNote = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfAdministrativeNote.setStatus('current')
if mibBuilder.loadTexts: expfAdministrativeNote.setDescription('The AdministrativeNote property specifies the administrative note associated with the folder.')
expfAdminSecurityDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfAdminSecurityDescriptor.setStatus('current')
if mibBuilder.loadTexts: expfAdminSecurityDescriptor.setDescription('The AdminSecurityDescriptor property specifies the security descriptor that is used when a user logs on to the store with administrative privileges.')
expfADProxyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfADProxyPath.setStatus('current')
if mibBuilder.loadTexts: expfADProxyPath.setDescription('The ADProxyPath property indicates the globally unique identifier (GUID) of the Active Directory mail proxy for the folder.')
expfAssociatedMessageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfAssociatedMessageCount.setStatus('current')
if mibBuilder.loadTexts: expfAssociatedMessageCount.setDescription('The AssociatedMessageCount property is a MAPI property that contains the total number of associated messages in the public folder.')
expfAttachmentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfAttachmentCount.setStatus('current')
if mibBuilder.loadTexts: expfAttachmentCount.setDescription('The AttachmentCount property indicates the total number of attachments on all normal messages in a folder.')
expfCategorizationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfCategorizationCount.setStatus('current')
if mibBuilder.loadTexts: expfCategorizationCount.setDescription('The CategorizationCount property indicates the total number of categorizations on the public folder.')
expfComment = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfComment.setStatus('current')
if mibBuilder.loadTexts: expfComment.setDescription('The Comment property specifies the folder comment.')
expfContactCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfContactCount.setStatus('current')
if mibBuilder.loadTexts: expfContactCount.setDescription('The ContactCount property indicates the number of contacts in a public folder.')
expfContainsRules = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfContainsRules.setStatus('current')
if mibBuilder.loadTexts: expfContainsRules.setDescription('The ContainsRules property indicates whether the public folder contains rules.')
expfCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfCreationTime.setStatus('current')
if mibBuilder.loadTexts: expfCreationTime.setDescription('The CreationTime property indicates when the folder was created.')
expfDeletedItemLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 13), Gauge32()).setUnits('days').setMaxAccess("readonly")
if mibBuilder.loadTexts: expfDeletedItemLifetime.setStatus('current')
if mibBuilder.loadTexts: expfDeletedItemLifetime.setDescription('The DeletedItemLifetime property specifies how long, in days, that deleted messages can be recovered.')
expfFolderTree = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfFolderTree.setStatus('current')
if mibBuilder.loadTexts: expfFolderTree.setDescription('The FolderTree property indicates the WMI path to the top-level hierarchy object to which the folder belongs.')
expfFriendlyUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfFriendlyUrl.setStatus('current')
if mibBuilder.loadTexts: expfFriendlyUrl.setDescription('The FriendlyUrl property indicates the path-based URL to the folder.')
expfHasChildren = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfHasChildren.setStatus('current')
if mibBuilder.loadTexts: expfHasChildren.setDescription('The HasChildren property indicates whether the folder has subfolders.')
expfHasLocalReplica = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfHasLocalReplica.setStatus('current')
if mibBuilder.loadTexts: expfHasLocalReplica.setDescription('The HasLocalReplica property indicates whether the folder has a local replica.')
expfIsMailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfIsMailEnabled.setStatus('current')
if mibBuilder.loadTexts: expfIsMailEnabled.setDescription('The IsMailEnabled property specifies whether the folder is mail-enabled.')
expfIsNormalFolder = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfIsNormalFolder.setStatus('current')
if mibBuilder.loadTexts: expfIsNormalFolder.setDescription('The IsNormalFolder property indicates whether the public folder is a normal folder.')
expfIsPerUserReadDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfIsPerUserReadDisabled.setStatus('current')
if mibBuilder.loadTexts: expfIsPerUserReadDisabled.setDescription('The IsPerUserReadDisabled property specifies whether the folder tracks per-user read information for messages.')
expfIsSearchFolder = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfIsSearchFolder.setStatus('current')
if mibBuilder.loadTexts: expfIsSearchFolder.setDescription('The IsSearchFolder property indicates whether the public folder is a search folder.')
expfIsSecureInSite = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfIsSecureInSite.setStatus('current')
if mibBuilder.loadTexts: expfIsSecureInSite.setDescription('The IsSecureInSite property specifies whether administrative access is limited to the home site of the folder.')
expfLastAccessTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfLastAccessTime.setStatus('current')
if mibBuilder.loadTexts: expfLastAccessTime.setDescription('The LastAccessTime property indicates the last date that the replica of a public folder was accessed.')
expfLastModificationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfLastModificationTime.setStatus('current')
if mibBuilder.loadTexts: expfLastModificationTime.setDescription('The LastModificationTime property indicates when the folder was last modified.')
expfMaximumItemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 25), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: expfMaximumItemSize.setStatus('current')
if mibBuilder.loadTexts: expfMaximumItemSize.setDescription('The MaximumItemSize property specifies the maximum size, in kilobytes, that is allowed for an individual post to the folder.')
expfMessageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfMessageCount.setStatus('current')
if mibBuilder.loadTexts: expfMessageCount.setDescription('The MessageCount property indicates the number of messages in a public folder.')
expfMessageWithAttachmentsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfMessageWithAttachmentsCount.setStatus('current')
if mibBuilder.loadTexts: expfMessageWithAttachmentsCount.setDescription('The MessageWithAttachmentsCount property indicates the total number of normal messages with attachments in the public folder.')
expfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfName.setStatus('current')
if mibBuilder.loadTexts: expfName.setDescription('The Name property indicates the name of the folder.')
expfNormalMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 29), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: expfNormalMessageSize.setStatus('current')
if mibBuilder.loadTexts: expfNormalMessageSize.setDescription('The NormalMessageSize property indicates the total size, in bytes, of all of the normal messages in the public folder.')
expfOwnerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfOwnerCount.setStatus('current')
if mibBuilder.loadTexts: expfOwnerCount.setDescription('The OwnerCount property indicates the number of owners of the public folder.')
expfParentFriendlyUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 31), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfParentFriendlyUrl.setStatus('current')
if mibBuilder.loadTexts: expfParentFriendlyUrl.setDescription('The ParentFriendlyUrl property indicates the folder path-based URL to the parent of the folder.')
expfPath = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 32), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfPath.setStatus('current')
if mibBuilder.loadTexts: expfPath.setDescription('The Path property indicates the folder path minus the URL http://server/vroot header portion.')
expfProhibitPostLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 33), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: expfProhibitPostLimit.setStatus('current')
if mibBuilder.loadTexts: expfProhibitPostLimit.setDescription('The ProhibitPostLimit property specifies the folder size limit, in kilobytes, when posting is prevented.')
expfPublishInAddressBook = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfPublishInAddressBook.setStatus('current')
if mibBuilder.loadTexts: expfPublishInAddressBook.setDescription('The PublishInAddressBook property specifies whether the folder will show up in the global address list if it is mail-enabled.')
expfRecipientCountOnAssociateMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfRecipientCountOnAssociateMsg.setStatus('current')
if mibBuilder.loadTexts: expfRecipientCountOnAssociateMsg.setDescription('The RecipientCountOnAssociatedMessages property indicates the total number of recipients on the associated messages in the public folder.')
expfRecipientCountOnNormalMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfRecipientCountOnNormalMsg.setStatus('current')
if mibBuilder.loadTexts: expfRecipientCountOnNormalMsg.setDescription('The RecipientCountOnNormalMessages property indicates the total number of recipients on the normal messages in the public folder.')
expfReplicaAgeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 37), Gauge32()).setUnits('days').setMaxAccess("readonly")
if mibBuilder.loadTexts: expfReplicaAgeLimit.setStatus('current')
if mibBuilder.loadTexts: expfReplicaAgeLimit.setDescription('The ReplicaAgeLimit property specifies the age limit for messages across all replicas.')
expfReplicaList = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 38), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfReplicaList.setStatus('current')
if mibBuilder.loadTexts: expfReplicaList.setDescription('The ReplicaList property indicates the list of distinguished names of the MDBs to which the folder is replicated.')
expfReplicationMessagePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notUrgent", 0), ("normal", 1), ("urgent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfReplicationMessagePriority.setStatus('current')
if mibBuilder.loadTexts: expfReplicationMessagePriority.setDescription('The ReplicationMessagePriority property specifies the priority level for replicating folder messages.')
expfReplicationSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 40), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfReplicationSchedule.setStatus('current')
if mibBuilder.loadTexts: expfReplicationSchedule.setDescription('The array elements of the ReplicationSchedule property specify the replication schedule of the folder.')
expfReplicationStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("custom", 0), ("never", 1), ("always", 2), ("everyHour", 3), ("everyTwoHours", 4), ("everyFourHours", 5), ("usePublicStoreSchedule", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfReplicationStyle.setStatus('current')
if mibBuilder.loadTexts: expfReplicationStyle.setDescription('The ReplicationStyle property specifies how often the folder contents are replicated.')
expfRestrictionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfRestrictionCount.setStatus('current')
if mibBuilder.loadTexts: expfRestrictionCount.setDescription('The RestrictionCount property indicates the total number of restrictions on the public folder.')
expfSecurityDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 43), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfSecurityDescriptor.setStatus('current')
if mibBuilder.loadTexts: expfSecurityDescriptor.setDescription('The SecurityDescriptor property specifies the administrative security descriptor for the folder.')
expfStorageLimitStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("usePublicStoreStyle", 0), ("useSpecifiedQuota", 1), ("noQuota", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfStorageLimitStyle.setStatus('current')
if mibBuilder.loadTexts: expfStorageLimitStyle.setDescription('The StorageLimitStyle property specifies whether the folder should use public store storage limits, have no quota, or use quota values set on the folder.')
expfTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 45), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfTargetAddress.setStatus('current')
if mibBuilder.loadTexts: expfTargetAddress.setDescription('The TargetAddress property is a MAPI property that contains the e-mail address of the public folder.')
expfTotalMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 46), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: expfTotalMessageSize.setStatus('current')
if mibBuilder.loadTexts: expfTotalMessageSize.setDescription('The TotalMessageSize property indicates the total size, in bytes, of all of the normal messages in the public folder. The TotalMessageSize property is an 8-byte version of the NormalMessageSize property.')
expfUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 47), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfUrl.setStatus('current')
if mibBuilder.loadTexts: expfUrl.setDescription('The Url property indicates the folder URL, constructed using the folder globally unique identifier (GUID).')
expfUsePublicStoreAgeLimits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 48), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfUsePublicStoreAgeLimits.setStatus('current')
if mibBuilder.loadTexts: expfUsePublicStoreAgeLimits.setDescription('The UsePublicStoreAgeLimits property specifies whether the folder should use the age limits of the MDB in which it is stored.')
expfUsePublicStoreDelItemLifetm = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 49), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expfUsePublicStoreDelItemLifetm.setStatus('current')
if mibBuilder.loadTexts: expfUsePublicStoreDelItemLifetm.setDescription('The UsePublicStoreDeletedItemLifetime property specifies whether the folder should use the deleted item lifetime of the local public MDB.')
expfWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 12, 1, 50), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: expfWarningLimit.setStatus('current')
if mibBuilder.loadTexts: expfWarningLimit.setDescription('The WarningLimit property specifies the folder size limit, in kilobytes, when warning messages are sent.')
exchangeQueueV2Table = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 13), )
if mibBuilder.loadTexts: exchangeQueueV2Table.setStatus('current')
if mibBuilder.loadTexts: exchangeQueueV2Table.setDescription('The Exchange_Queue WMI class provides properties and methods for working with Microsoft Exchange queues.')
exchangeQueueV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 13, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exq2Index"))
if mibBuilder.loadTexts: exchangeQueueV2Entry.setStatus('current')
if mibBuilder.loadTexts: exchangeQueueV2Entry.setDescription('None')
exq2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exq2Index.setStatus('current')
if mibBuilder.loadTexts: exq2Index.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exq2CanEnumAll = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 13, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exq2CanEnumAll.setStatus('current')
if mibBuilder.loadTexts: exq2CanEnumAll.setDescription('The CanEnumAll property indicates whether the queue can enumerate all of the messages that it has waiting for transmission.')
exq2GlobalStop = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 13, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exq2GlobalStop.setStatus('current')
if mibBuilder.loadTexts: exq2GlobalStop.setDescription('The GlobalStop property indicates whether the virtual server for the queue is in disabled mode. If True, the virtual server is disabled.')
exq2LinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 13, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exq2LinkId.setStatus('current')
if mibBuilder.loadTexts: exq2LinkId.setDescription('The LinkId property indicates the identifier for the link that contains the queue.')
exq2LinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 13, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exq2LinkName.setStatus('current')
if mibBuilder.loadTexts: exq2LinkName.setDescription('The LinkName property indicates the name of the link that contains the queue.')
exq2MessageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 13, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exq2MessageCount.setStatus('current')
if mibBuilder.loadTexts: exq2MessageCount.setDescription('The MessageCount property indicates the number of messages in the queue.')
exq2MsgEnumFlagsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 13, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exq2MsgEnumFlagsSupported.setStatus('current')
if mibBuilder.loadTexts: exq2MsgEnumFlagsSupported.setDescription('The MsgEnumFlagsSupported property contains a mask of all enumeration flags for the queue.')
exq2ProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 13, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exq2ProtocolName.setStatus('current')
if mibBuilder.loadTexts: exq2ProtocolName.setDescription('The ProtocolName property indicates the transmission protocol for the queue.')
exq2QueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 13, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exq2QueueId.setStatus('current')
if mibBuilder.loadTexts: exq2QueueId.setDescription('The QueueId property indicates the identifier of the queue.')
exq2QueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 13, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exq2QueueName.setStatus('current')
if mibBuilder.loadTexts: exq2QueueName.setDescription('The QueueName property indicates the name of the queue.')
exq2Size = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 13, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exq2Size.setStatus('current')
if mibBuilder.loadTexts: exq2Size.setDescription('The Size property indicates the message size, including attachments, in bytes.')
exq2Version = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 13, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exq2Version.setStatus('current')
if mibBuilder.loadTexts: exq2Version.setDescription('The Version property indicates the version of the service that created the message tracking log entry.')
exq2VirtualMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 13, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exq2VirtualMachine.setStatus('current')
if mibBuilder.loadTexts: exq2VirtualMachine.setDescription('The VirtualMachine property indicates the name of the virtual machine that contains the queue.')
exq2VirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 13, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exq2VirtualServerName.setStatus('current')
if mibBuilder.loadTexts: exq2VirtualServerName.setDescription('The VirtualServerName property indicates the name of the virtual server the queue is on.')
exchangeQueueCacheReloadEvtTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 14), )
if mibBuilder.loadTexts: exchangeQueueCacheReloadEvtTable.setStatus('current')
if mibBuilder.loadTexts: exchangeQueueCacheReloadEvtTable.setDescription("Instances of the Exchange_QueueCacheReloadEvent class provide information about when the queue's cache was reloaded.")
exchangeQueueCacheReloadEvtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 14, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exqcreIndex"))
if mibBuilder.loadTexts: exchangeQueueCacheReloadEvtEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeQueueCacheReloadEvtEntry.setDescription('None')
exqcreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqcreIndex.setStatus('current')
if mibBuilder.loadTexts: exqcreIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exqcreReloadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 14, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqcreReloadTime.setStatus('current')
if mibBuilder.loadTexts: exqcreReloadTime.setDescription('The ReloadTime property indicates the last time that the queue provider updated its data.')
exchangeQueuedMessageTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15), )
if mibBuilder.loadTexts: exchangeQueuedMessageTable.setStatus('current')
if mibBuilder.loadTexts: exchangeQueuedMessageTable.setDescription('The Exchange_QueuedMessage WMI class is the base class for the Exchange_QueuedX400Message and Exchange_QueuedSMTPMessage classes. The Exchange_QueuedMessage class provides information about messages that reside in Microsoft Exchange queues.')
exchangeQueuedMessageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exqmIndex"))
if mibBuilder.loadTexts: exchangeQueuedMessageEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeQueuedMessageEntry.setDescription('None')
exqmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmIndex.setStatus('current')
if mibBuilder.loadTexts: exqmIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exqmActionDeleteNDR = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmActionDeleteNDR.setStatus('current')
if mibBuilder.loadTexts: exqmActionDeleteNDR.setDescription('The ActionDeleteNDR property indicates whether the message supports the DeleteWithNDR method.')
exqmActionDeleteNoNDR = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmActionDeleteNoNDR.setStatus('current')
if mibBuilder.loadTexts: exqmActionDeleteNoNDR.setDescription('The ActionDeleteNoNDR property indicates whether the message supports the DeleteWithoutNDR method.')
exqmActionFreeze = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmActionFreeze.setStatus('current')
if mibBuilder.loadTexts: exqmActionFreeze.setDescription('The ActionFreeze property indicates whether the message supports the Freeze method.')
exqmActionThaw = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmActionThaw.setStatus('current')
if mibBuilder.loadTexts: exqmActionThaw.setDescription('The ActionThaw property indicates whether the message supports the Thaw method.')
exqmExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmExpiry.setStatus('current')
if mibBuilder.loadTexts: exqmExpiry.setDescription('The Expiry property indicates the expiration time stamp for the message.')
exqmHighPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmHighPriority.setStatus('current')
if mibBuilder.loadTexts: exqmHighPriority.setDescription('The HighPriority property indicates whether the message has high priority.')
exqmLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmLinkId.setStatus('current')
if mibBuilder.loadTexts: exqmLinkId.setDescription('The LinkId property indicates the identifier for the link that contains the queued message.')
exqmLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmLinkName.setStatus('current')
if mibBuilder.loadTexts: exqmLinkName.setDescription('The LinkName property indicates the name of the link that contains the queued message.')
exqmLowPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmLowPriority.setStatus('current')
if mibBuilder.loadTexts: exqmLowPriority.setDescription('The LowPriority property indicates whether the message has low priority.')
exqmMessageId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmMessageId.setStatus('current')
if mibBuilder.loadTexts: exqmMessageId.setDescription('The MessageId property indicates the identifier of the queued message.')
exqmNormalPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmNormalPriority.setStatus('current')
if mibBuilder.loadTexts: exqmNormalPriority.setDescription('The NormalPriority property indicates whether the message has normal priority.')
exqmProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmProtocolName.setStatus('current')
if mibBuilder.loadTexts: exqmProtocolName.setDescription('The ProtocolName property indicates the transmission protocol for the queued message.')
exqmQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmQueueId.setStatus('current')
if mibBuilder.loadTexts: exqmQueueId.setDescription('The QueueId property indicates the identifier of the queue that the queued message is on.')
exqmQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmQueueName.setStatus('current')
if mibBuilder.loadTexts: exqmQueueName.setDescription('The QueueName property indicates the name of the queue that contains the message.')
exqmReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmReceived.setStatus('current')
if mibBuilder.loadTexts: exqmReceived.setDescription('The Received property indicates the received time stamp for the message.')
exqmRecipientCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmRecipientCount.setStatus('current')
if mibBuilder.loadTexts: exqmRecipientCount.setDescription('The RecipientCount property indicates the number of recipients in the message.')
exqmRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmRecipients.setStatus('current')
if mibBuilder.loadTexts: exqmRecipients.setDescription('The Recipients property indicates the recipients of the message.')
exqmSender = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmSender.setStatus('current')
if mibBuilder.loadTexts: exqmSender.setDescription('The Sender property indicates the name of the sender.')
exqmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 20), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmSize.setStatus('current')
if mibBuilder.loadTexts: exqmSize.setDescription('The Size property indicates the size of the message.')
exqmStateFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmStateFlags.setStatus('current')
if mibBuilder.loadTexts: exqmStateFlags.setDescription('The StateFlags property contains a mask of all of the state flags for the message.')
exqmStateFrozen = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmStateFrozen.setStatus('current')
if mibBuilder.loadTexts: exqmStateFrozen.setDescription('The StateFrozen property indicates whether the message is in a frozen state.')
exqmStateRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmStateRetry.setStatus('current')
if mibBuilder.loadTexts: exqmStateRetry.setDescription('The StateRetry property indicates that transmission is being retried for a message that was not delivered successfully.')
exqmSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmSubject.setStatus('current')
if mibBuilder.loadTexts: exqmSubject.setDescription('The Subject property indicates the subject of the message.')
exqmSubmission = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmSubmission.setStatus('current')
if mibBuilder.loadTexts: exqmSubmission.setDescription('The Submission property indicates the submission time stamp for the message.')
exqmVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmVersion.setStatus('current')
if mibBuilder.loadTexts: exqmVersion.setDescription('The Version property indicates the version of the Queue Application Programming Interface (QAPI) used to generate the WMI object.')
exqmVirtualMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 27), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmVirtualMachine.setStatus('current')
if mibBuilder.loadTexts: exqmVirtualMachine.setDescription('The VirtualMachine property indicates the name of the virtual machine that contains the queued message.')
exqmVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 15, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqmVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: exqmVirtualServerName.setDescription('The VirtualServerName property indicates the name of the virtual server that contains the queued message.')
exchangeQueueVirtualServerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 16), )
if mibBuilder.loadTexts: exchangeQueueVirtualServerTable.setStatus('current')
if mibBuilder.loadTexts: exchangeQueueVirtualServerTable.setDescription('The Exchange_QueueVirtualServer Class is the Base class for the Exchange_QueueSMTPVirtualServer and Exchange_QueueX400VirtualServer classes.')
exchangeQueueVirtualServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 16, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exvsIndex"))
if mibBuilder.loadTexts: exchangeQueueVirtualServerEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeQueueVirtualServerEntry.setDescription('None')
exvsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exvsIndex.setStatus('current')
if mibBuilder.loadTexts: exvsIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exvsGlobalActionsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 16, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exvsGlobalActionsSupported.setStatus('current')
if mibBuilder.loadTexts: exvsGlobalActionsSupported.setDescription('The GlobalActionsSupported property indicates whether all remote connections for the virtual server can be controlled.')
exvsGlobalStop = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 16, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exvsGlobalStop.setStatus('current')
if mibBuilder.loadTexts: exvsGlobalStop.setDescription('The GlobalStop property indicates whether the virtual server for the link is in disabled mode. If True, the virtual server is disabled.')
exvsProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 16, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exvsProtocolName.setStatus('current')
if mibBuilder.loadTexts: exvsProtocolName.setDescription('The ProtocolName property indicates the name of the protocol for the virtual server.')
exvsVirtualMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 16, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exvsVirtualMachine.setStatus('current')
if mibBuilder.loadTexts: exvsVirtualMachine.setDescription('The VirtualMachine property indicates the name of the virtual machine that contains the virtual server.')
exvsVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 16, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exvsVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: exvsVirtualServerName.setDescription('The VirtualServerName property indicates the name of the virtual server.')
exchangeServerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 17), )
if mibBuilder.loadTexts: exchangeServerTable.setStatus('current')
if mibBuilder.loadTexts: exchangeServerTable.setDescription('Instances of the Exchange_Server WMI class provide properties and methods for working with Exchange servers.')
exchangeServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 17, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exsIndex"))
if mibBuilder.loadTexts: exchangeServerEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeServerEntry.setDescription('None')
exsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsIndex.setStatus('current')
if mibBuilder.loadTexts: exsIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exsAdministrativeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 17, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsAdministrativeGroup.setStatus('current')
if mibBuilder.loadTexts: exsAdministrativeGroup.setDescription('The AdministrativeGroup property indicates the name of the Exchange 2000 administrator group to which the server belongs.')
exsAdministrativeNote = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 17, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsAdministrativeNote.setStatus('current')
if mibBuilder.loadTexts: exsAdministrativeNote.setDescription('The AdministrativeNote property specifies the administrative note for the server.')
exsCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 17, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsCreationTime.setStatus('current')
if mibBuilder.loadTexts: exsCreationTime.setDescription('The CreationTime property indicates when the Active Directory object was created.')
exsDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 17, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsDN.setStatus('current')
if mibBuilder.loadTexts: exsDN.setDescription('The DN property indicates the distinguished name attribute on the server object in Microsoft Active Directory.')
exsExchangeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 17, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsExchangeVersion.setStatus('current')
if mibBuilder.loadTexts: exsExchangeVersion.setDescription('The ExchangeVersion property indicates the product version information, including build and service pack number.')
exsFQDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 17, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsFQDN.setStatus('current')
if mibBuilder.loadTexts: exsFQDN.setDescription('The FQDN property indicates the fully qualified domain name of the Exchange server.')
exsGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 17, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsGUID.setStatus('current')
if mibBuilder.loadTexts: exsGUID.setDescription('The GUID property indicates the globally unique identifier (GUID) attribute of the server object in Microsoft Active Directory.')
exsIsFrontEndServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 17, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsIsFrontEndServer.setStatus('current')
if mibBuilder.loadTexts: exsIsFrontEndServer.setDescription('The IsFrontEndServer property indicates whether the server is a front-end server.')
exsLastModificationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 17, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsLastModificationTime.setStatus('current')
if mibBuilder.loadTexts: exsLastModificationTime.setDescription('The LastModificationTime property indicates when the Active Directory object was last modified.')
exsMessageTrackingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 17, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsMessageTrackingEnabled.setStatus('current')
if mibBuilder.loadTexts: exsMessageTrackingEnabled.setDescription('The MessageTrackingEnabled property indicates whether message tracking is enabled on the server.')
exsMessageTrackingLogFileLifetm = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 17, 1, 12), Gauge32()).setUnits('days').setMaxAccess("readonly")
if mibBuilder.loadTexts: exsMessageTrackingLogFileLifetm.setStatus('current')
if mibBuilder.loadTexts: exsMessageTrackingLogFileLifetm.setDescription('The MessageTrackingLogFileLifetime property specifies how long message tracking logs are to be kept.')
exsMessageTrackingLogFilePath = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 17, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsMessageTrackingLogFilePath.setStatus('current')
if mibBuilder.loadTexts: exsMessageTrackingLogFilePath.setDescription('The MessageTrackingLogFilePath property indicates the location where message tracking logs are stored')
exsMonitoringEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 17, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsMonitoringEnabled.setStatus('current')
if mibBuilder.loadTexts: exsMonitoringEnabled.setDescription('The MonitoringEnabled property specifies whether monitoring is enabled on the server.')
exsMTADataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 17, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsMTADataPath.setStatus('current')
if mibBuilder.loadTexts: exsMTADataPath.setDescription('The MTADataPath property indicates the location of the MTA queue files.')
exsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 17, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsName.setStatus('current')
if mibBuilder.loadTexts: exsName.setDescription('The Name property indicates the NetBIOS name of the Exchange server.')
exsRoutingGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 17, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsRoutingGroup.setStatus('current')
if mibBuilder.loadTexts: exsRoutingGroup.setDescription('The RoutingGroup property indicates the name of the Exchange 2000 routing group to which the server belongs.')
exsSubjectLoggingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 17, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsSubjectLoggingEnabled.setStatus('current')
if mibBuilder.loadTexts: exsSubjectLoggingEnabled.setDescription('The SubjectLoggingEnabled property controls whether message subjects are included in message tracking logs. It also controls whether subjects are displayed in the queue viewer.')
exsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 17, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("standard", 0), ("enterprise", 1), ("conferencing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsType.setStatus('current')
if mibBuilder.loadTexts: exsType.setDescription('The Type property indicates the server type.')
exchangeQueuedSMTPMessageTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18), )
if mibBuilder.loadTexts: exchangeQueuedSMTPMessageTable.setStatus('current')
if mibBuilder.loadTexts: exchangeQueuedSMTPMessageTable.setDescription('The Exchange_QueuedSMTPMessage class provides methods to work with Microsoft Exchange messages currently in an SMTP queue.')
exchangeQueuedSMTPMessageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exqsmIndex"))
if mibBuilder.loadTexts: exchangeQueuedSMTPMessageEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeQueuedSMTPMessageEntry.setDescription('None')
exqsmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmIndex.setStatus('current')
if mibBuilder.loadTexts: exqsmIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exqsmActionDeleteNDR = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmActionDeleteNDR.setStatus('current')
if mibBuilder.loadTexts: exqsmActionDeleteNDR.setDescription('The ActionDeleteNDR property indicates whether the message supports the DeleteWithNDR method.')
exqsmActionDeleteNoNDR = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmActionDeleteNoNDR.setStatus('current')
if mibBuilder.loadTexts: exqsmActionDeleteNoNDR.setDescription('The ActionDeleteNoNDR property indicates whether the message supports the DeleteWithoutNDR method.')
exqsmActionFreeze = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmActionFreeze.setStatus('current')
if mibBuilder.loadTexts: exqsmActionFreeze.setDescription('The ActionFreeze property indicates whether the message supports the Freeze method.')
exqsmActionThaw = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmActionThaw.setStatus('current')
if mibBuilder.loadTexts: exqsmActionThaw.setDescription('The ActionThaw property indicates whether the message supports the Thaw method.')
exqsmExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmExpiry.setStatus('current')
if mibBuilder.loadTexts: exqsmExpiry.setDescription('The Expiry property indicates the expiration time stamp for the message.')
exqsmHighPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmHighPriority.setStatus('current')
if mibBuilder.loadTexts: exqsmHighPriority.setDescription('The HighPriority property indicates whether the message has high priority.')
exqsmLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmLinkId.setStatus('current')
if mibBuilder.loadTexts: exqsmLinkId.setDescription('The LinkId property indicates the identifier for the link that contains the queued message.')
exqsmLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmLinkName.setStatus('current')
if mibBuilder.loadTexts: exqsmLinkName.setDescription('The LinkName property indicates the name of the link that contains the queued message.')
exqsmLowPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmLowPriority.setStatus('current')
if mibBuilder.loadTexts: exqsmLowPriority.setDescription('The LowPriority property indicates whether the message has low priority.')
exqsmMessageId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmMessageId.setStatus('current')
if mibBuilder.loadTexts: exqsmMessageId.setDescription('The MessageId property indicates the identifier of the queued message.')
exqsmNormalPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmNormalPriority.setStatus('current')
if mibBuilder.loadTexts: exqsmNormalPriority.setDescription('The NormalPriority property indicates whether the message has normal priority.')
exqsmProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmProtocolName.setStatus('current')
if mibBuilder.loadTexts: exqsmProtocolName.setDescription('The ProtocolName property indicates the transmission protocol for the queued message.')
exqsmQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmQueueId.setStatus('current')
if mibBuilder.loadTexts: exqsmQueueId.setDescription('The QueueId property indicates the identifier of the queue that the queued message is on.')
exqsmQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmQueueName.setStatus('current')
if mibBuilder.loadTexts: exqsmQueueName.setDescription('The QueueName property indicates the name of the queue that contains the message.')
exqsmReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmReceived.setStatus('current')
if mibBuilder.loadTexts: exqsmReceived.setDescription('The Received property indicates the received time stamp for the message.')
exqsmRecipientCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmRecipientCount.setStatus('current')
if mibBuilder.loadTexts: exqsmRecipientCount.setDescription('The RecipientCount property indicates the number of recipients in the message.')
exqsmRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmRecipients.setStatus('current')
if mibBuilder.loadTexts: exqsmRecipients.setDescription('The Recipients property indicates the recipients of the message.')
exqsmSender = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmSender.setStatus('current')
if mibBuilder.loadTexts: exqsmSender.setDescription('The Sender property indicates the name of the sender.')
exqsmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 20), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmSize.setStatus('current')
if mibBuilder.loadTexts: exqsmSize.setDescription('The Size property indicates the size of the message.')
exqsmStateFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmStateFlags.setStatus('current')
if mibBuilder.loadTexts: exqsmStateFlags.setDescription('The StateFlags property contains a mask of all of the state flags for the message.')
exqsmStateFrozen = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmStateFrozen.setStatus('current')
if mibBuilder.loadTexts: exqsmStateFrozen.setDescription('The StateFrozen property indicates whether the message is in a frozen state.')
exqsmStateRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmStateRetry.setStatus('current')
if mibBuilder.loadTexts: exqsmStateRetry.setDescription('The StateRetry property indicates that transmission is being retried for a message that was not successfully delivered.')
exqsmSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmSubject.setStatus('current')
if mibBuilder.loadTexts: exqsmSubject.setDescription('The Subject property indicates the subject of the message.')
exqsmSubmission = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmSubmission.setStatus('current')
if mibBuilder.loadTexts: exqsmSubmission.setDescription('The Submission property indicates the submission time stamp for the message.')
exqsmVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmVersion.setStatus('current')
if mibBuilder.loadTexts: exqsmVersion.setDescription('The Version property indicates the version of the QAPI used to generate the WMI object.')
exqsmVirtualMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 27), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmVirtualMachine.setStatus('current')
if mibBuilder.loadTexts: exqsmVirtualMachine.setDescription('The VirtualMachine property indicates the name of the virtual machine that contains the queued message.')
exqsmVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 18, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsmVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: exqsmVirtualServerName.setDescription('The VirtualServerName property indicates the name of the virtual server that contains the queued message.')
exchangeQueuedX400MessageTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19), )
if mibBuilder.loadTexts: exchangeQueuedX400MessageTable.setStatus('current')
if mibBuilder.loadTexts: exchangeQueuedX400MessageTable.setDescription('The Exchange_QueuedX400Message class provides methods to work with Microsoft Exchange messages currently in an X400 queue.')
exchangeQueuedX400MessageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exqxmIndex"))
if mibBuilder.loadTexts: exchangeQueuedX400MessageEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeQueuedX400MessageEntry.setDescription('None')
exqxmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmIndex.setStatus('current')
if mibBuilder.loadTexts: exqxmIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exqxmActionDeleteNDR = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmActionDeleteNDR.setStatus('current')
if mibBuilder.loadTexts: exqxmActionDeleteNDR.setDescription('The ActionDeleteNDR property indicates whether the message supports the DeleteWithNDR method.')
exqxmActionDeleteNoNDR = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmActionDeleteNoNDR.setStatus('current')
if mibBuilder.loadTexts: exqxmActionDeleteNoNDR.setDescription('The ActionDeleteNoNDR property indicates whether the message supports the DeleteWithoutNDR method.')
exqxmActionFreeze = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmActionFreeze.setStatus('current')
if mibBuilder.loadTexts: exqxmActionFreeze.setDescription('The ActionFreeze property indicates whether the message supports the Freeze method.')
exqxmActionThaw = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmActionThaw.setStatus('current')
if mibBuilder.loadTexts: exqxmActionThaw.setDescription('The ActionThaw property indicates whether the message supports the Thaw method.')
exqxmExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmExpiry.setStatus('current')
if mibBuilder.loadTexts: exqxmExpiry.setDescription('The Expiry property indicates the expiration time stamp for the message.')
exqxmHighPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmHighPriority.setStatus('current')
if mibBuilder.loadTexts: exqxmHighPriority.setDescription('The HighPriority property indicates whether the message has high priority.')
exqxmLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmLinkId.setStatus('current')
if mibBuilder.loadTexts: exqxmLinkId.setDescription('The LinkId property indicates the identifier for the link that contains the queued message.')
exqxmLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmLinkName.setStatus('current')
if mibBuilder.loadTexts: exqxmLinkName.setDescription('The LinkName property indicates the name of the link that contains the queued message.')
exqxmLowPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmLowPriority.setStatus('current')
if mibBuilder.loadTexts: exqxmLowPriority.setDescription('The LowPriority property indicates whether the message has low priority.')
exqxmMessageId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmMessageId.setStatus('current')
if mibBuilder.loadTexts: exqxmMessageId.setDescription('The MessageId property indicates the identifier of the queued message.')
exqxmNormalPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmNormalPriority.setStatus('current')
if mibBuilder.loadTexts: exqxmNormalPriority.setDescription('The NormalPriority property indicates whether the message has normal priority.')
exqxmProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmProtocolName.setStatus('current')
if mibBuilder.loadTexts: exqxmProtocolName.setDescription('The ProtocolName property indicates the transmission protocol for the queued message.')
exqxmQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmQueueId.setStatus('current')
if mibBuilder.loadTexts: exqxmQueueId.setDescription('The QueueId property indicates the identifier of the queue that the queued message is on.')
exqxmQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmQueueName.setStatus('current')
if mibBuilder.loadTexts: exqxmQueueName.setDescription('The QueueName property indicates the name of the queue that contains the message.')
exqxmReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmReceived.setStatus('current')
if mibBuilder.loadTexts: exqxmReceived.setDescription('The Received property indicates the received time stamp for the message.')
exqxmRecipientCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmRecipientCount.setStatus('current')
if mibBuilder.loadTexts: exqxmRecipientCount.setDescription('The RecipientCount property indicates the number of recipients in the message.')
exqxmRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmRecipients.setStatus('current')
if mibBuilder.loadTexts: exqxmRecipients.setDescription('The Recipients property indicates the recipients of the message.')
exqxmSender = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmSender.setStatus('current')
if mibBuilder.loadTexts: exqxmSender.setDescription('The Sender property indicates the name of the sender.')
exqxmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 20), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmSize.setStatus('current')
if mibBuilder.loadTexts: exqxmSize.setDescription('The Size property indicates the size of the message.')
exqxmStateFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmStateFlags.setStatus('current')
if mibBuilder.loadTexts: exqxmStateFlags.setDescription('The StateFlags property contains a mask of all of the state flags for the message.')
exqxmStateFrozen = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmStateFrozen.setStatus('current')
if mibBuilder.loadTexts: exqxmStateFrozen.setDescription('The StateFrozen property indicates whether the message is in a frozen state.')
exqxmStateRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmStateRetry.setStatus('current')
if mibBuilder.loadTexts: exqxmStateRetry.setDescription('The StateRetry property indicates that transmission is being retried for a message that was not successfully delivered.')
exqxmSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmSubject.setStatus('current')
if mibBuilder.loadTexts: exqxmSubject.setDescription('The Subject property indicates the subject of the message.')
exqxmSubmission = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmSubmission.setStatus('current')
if mibBuilder.loadTexts: exqxmSubmission.setDescription('The Submission property indicates the submission time stamp for the message.')
exqxmVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmVersion.setStatus('current')
if mibBuilder.loadTexts: exqxmVersion.setDescription('The Version property indicates the version of the QAPI used to generate the WMI object.')
exqxmVirtualMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 27), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmVirtualMachine.setStatus('current')
if mibBuilder.loadTexts: exqxmVirtualMachine.setDescription('The VirtualMachine property indicates the name of the virtual machine that contains the queued message.')
exqxmVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 19, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxmVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: exqxmVirtualServerName.setDescription('The VirtualServerName property indicates the name of the virtual server that contains the queued message.')
exchangeQueueSMTPVirtualSrvTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 20), )
if mibBuilder.loadTexts: exchangeQueueSMTPVirtualSrvTable.setStatus('current')
if mibBuilder.loadTexts: exchangeQueueSMTPVirtualSrvTable.setDescription('The Exchange_QueueSMTPVirtualServer class returns properties for SMTP queue virtual servers. This class provides two methods in addition to the properties it inherits from the Exchange_QueueVirtualServer class.')
exchangeQueueSMTPVirtualSrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 20, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exqsvsIndex"))
if mibBuilder.loadTexts: exchangeQueueSMTPVirtualSrvEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeQueueSMTPVirtualSrvEntry.setDescription('None')
exqsvsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsvsIndex.setStatus('current')
if mibBuilder.loadTexts: exqsvsIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exqsvsGlobalActionsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 20, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsvsGlobalActionsSupported.setStatus('current')
if mibBuilder.loadTexts: exqsvsGlobalActionsSupported.setDescription('The GlobalActionsSupported property indicates whether all remote connections for the virtual server can be controlled.')
exqsvsGlobalStop = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 20, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsvsGlobalStop.setStatus('current')
if mibBuilder.loadTexts: exqsvsGlobalStop.setDescription('The GlobalStop property indicates whether the virtual server for the link is in disabled mode. If True, the virtual server is disabled.')
exqsvsProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 20, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsvsProtocolName.setStatus('current')
if mibBuilder.loadTexts: exqsvsProtocolName.setDescription('The ProtocolName property indicates the name of the protocol for the virtual server.')
exqsvsVirtualMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 20, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsvsVirtualMachine.setStatus('current')
if mibBuilder.loadTexts: exqsvsVirtualMachine.setDescription('The VirtualMachine property indicates the name of the virtual machine that contains the virtual server.')
exqsvsVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 20, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqsvsVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: exqsvsVirtualServerName.setDescription('The VirtualServerName property indicates the name of the virtual server.')
exchangeQueueX400VirtualSrvTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 21), )
if mibBuilder.loadTexts: exchangeQueueX400VirtualSrvTable.setStatus('current')
if mibBuilder.loadTexts: exchangeQueueX400VirtualSrvTable.setDescription('The Exchange_QueueX400VirtualServer class returns properties for X400 queue virtual servers. This class inherits all its properties from the Exchange_QueueVirtualServer class.')
exchangeQueueX400VirtualSrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 21, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exqxvsIndex"))
if mibBuilder.loadTexts: exchangeQueueX400VirtualSrvEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeQueueX400VirtualSrvEntry.setDescription('None')
exqxvsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxvsIndex.setStatus('current')
if mibBuilder.loadTexts: exqxvsIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exqxvsGlobalActionsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 21, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxvsGlobalActionsSupported.setStatus('current')
if mibBuilder.loadTexts: exqxvsGlobalActionsSupported.setDescription('The GlobalActionsSupported property indicates whether all remote connections for the virtual server can be controlled.')
exqxvsGlobalStop = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 21, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxvsGlobalStop.setStatus('current')
if mibBuilder.loadTexts: exqxvsGlobalStop.setDescription('The GlobalStop property indicates whether the virtual server for the link is in disabled mode. If True, the virtual server is disabled.')
exqxvsProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 21, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxvsProtocolName.setStatus('current')
if mibBuilder.loadTexts: exqxvsProtocolName.setDescription('The ProtocolName property indicates the name of the protocol for the virtual server.')
exqxvsVirtualMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 21, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxvsVirtualMachine.setStatus('current')
if mibBuilder.loadTexts: exqxvsVirtualMachine.setDescription('The VirtualMachine property indicates the name of the virtual machine that contains the virtual server.')
exqxvsVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 21, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exqxvsVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: exqxvsVirtualServerName.setDescription('The VirtualServerName property indicates the name of the virtual server.')
exchangeScheduleIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 22), )
if mibBuilder.loadTexts: exchangeScheduleIntervalTable.setStatus('current')
if mibBuilder.loadTexts: exchangeScheduleIntervalTable.setDescription('The Exchange_ScheduleInterval WMI class provides information about the start and stop time of the public folder replication schedule. Instances of the Exchange_ScheduleInterval class are returned as members of an array from the ReplicationSchedule Property.')
exchangeScheduleIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 22, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exsiIndex"))
if mibBuilder.loadTexts: exchangeScheduleIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeScheduleIntervalEntry.setDescription('None')
exsiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsiIndex.setStatus('current')
if mibBuilder.loadTexts: exsiIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exsiStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 22, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsiStartTime.setStatus('current')
if mibBuilder.loadTexts: exsiStartTime.setDescription('The StartTime property indicates the start time, formatted as 0000dd-hhmm00:000000.')
exsiStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 22, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsiStopTime.setStatus('current')
if mibBuilder.loadTexts: exsiStopTime.setDescription('The StopTime property indicates the stop time, formatted as 0000dd-hhmm00:000000.')
exchangeSMTPLinkTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23), )
if mibBuilder.loadTexts: exchangeSMTPLinkTable.setStatus('current')
if mibBuilder.loadTexts: exchangeSMTPLinkTable.setDescription('The Exchange_SMTPLink Class provides methods for controlling an Microsoft Exchange Link. The Exchange_SMTPLink class inherits all the properties of the Exchange_Link class.')
exchangeSMTPLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exslIndex"))
if mibBuilder.loadTexts: exchangeSMTPLinkEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeSMTPLinkEntry.setDescription('None')
exslIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslIndex.setStatus('current')
if mibBuilder.loadTexts: exslIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exslActionFreeze = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslActionFreeze.setStatus('current')
if mibBuilder.loadTexts: exslActionFreeze.setDescription('The ActionFreeze property indicates whether the link supports the Freeze method.')
exslActionKick = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslActionKick.setStatus('current')
if mibBuilder.loadTexts: exslActionKick.setDescription('The ActionKick property indicates whether the link supports the ForceConnection method.')
exslActionThaw = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslActionThaw.setStatus('current')
if mibBuilder.loadTexts: exslActionThaw.setDescription('The ActionThaw property indicates whether the link supports the Thaw method.')
exslExtendedStateInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslExtendedStateInfo.setStatus('current')
if mibBuilder.loadTexts: exslExtendedStateInfo.setDescription('The ExtendedStateInfo property indicates extended error and reporting troubleshooting information.')
exslGlobalStop = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslGlobalStop.setStatus('current')
if mibBuilder.loadTexts: exslGlobalStop.setDescription('The GlobalStop property indicates whether the virtual server for the link is in disabled mode. If True, the virtual server is disabled.')
exslLinkDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslLinkDN.setStatus('current')
if mibBuilder.loadTexts: exslLinkDN.setDescription('The LinkDN property indicates the distinguished name (DN) of the link.')
exslLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslLinkId.setStatus('current')
if mibBuilder.loadTexts: exslLinkId.setDescription('The LinkId property indicates the identifier for the link.')
exslLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslLinkName.setStatus('current')
if mibBuilder.loadTexts: exslLinkName.setDescription('The LinkName property indicates the name of the link.')
exslMessageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslMessageCount.setStatus('current')
if mibBuilder.loadTexts: exslMessageCount.setDescription('The MessageCount property indicates the number of messages in the link.')
exslNextScheduledConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslNextScheduledConnection.setStatus('current')
if mibBuilder.loadTexts: exslNextScheduledConnection.setDescription('The NextScheduledConnection property indicates the next time a connection will be attempted.')
exslOldestMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslOldestMessage.setStatus('current')
if mibBuilder.loadTexts: exslOldestMessage.setDescription('The OldestMessage property indicates the time stamp of the oldest message.')
exslProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslProtocolName.setStatus('current')
if mibBuilder.loadTexts: exslProtocolName.setDescription('The ProtocolName property indicates the name of the protocol used by the link.')
exslKSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 14), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: exslKSize.setStatus('current')
if mibBuilder.loadTexts: exslKSize.setDescription('The Size property indicates the size of the link (in kilobytes).')
exslMSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 15), Gauge32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: exslMSize.setStatus('current')
if mibBuilder.loadTexts: exslMSize.setDescription('The Size property indicates the size of the link (in megabytes).')
exslStateActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslStateActive.setStatus('current')
if mibBuilder.loadTexts: exslStateActive.setDescription('The StateActive property indicates that the link is active.')
exslStateFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslStateFlags.setStatus('current')
if mibBuilder.loadTexts: exslStateFlags.setDescription('The StateFlags property contains a mask of all of the state flags for the link.')
exslStateFrozen = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslStateFrozen.setStatus('current')
if mibBuilder.loadTexts: exslStateFrozen.setDescription('The StateFrozen property indicates whether the link is currently frozen.')
exslStateReady = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslStateReady.setStatus('current')
if mibBuilder.loadTexts: exslStateReady.setDescription('The StateReady property indicates that the link is ready to accept new messages.')
exslStateRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslStateRemote.setStatus('current')
if mibBuilder.loadTexts: exslStateRemote.setDescription('The StateRemote property indicates that the destination for messages in the link is on a remote server.')
exslStateRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslStateRetry.setStatus('current')
if mibBuilder.loadTexts: exslStateRetry.setDescription('The StateRetry property indicates that the link is retrying a transmission that was unsuccessful.')
exslStateScheduled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslStateScheduled.setStatus('current')
if mibBuilder.loadTexts: exslStateScheduled.setDescription('The StateScheduled property indicates that the link is scheduled for periodic activation.')
exslSupportedLinkActions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslSupportedLinkActions.setStatus('current')
if mibBuilder.loadTexts: exslSupportedLinkActions.setDescription('The SupportedLinkActions property indicates the actions that are supported on the link.')
exslTypeCurrentlyUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslTypeCurrentlyUnreachable.setStatus('current')
if mibBuilder.loadTexts: exslTypeCurrentlyUnreachable.setDescription('The TypeCurrentlyUnreachable property indicates that the link holds messages for destinations that are currently unreachable.')
exslTypeDeferredDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslTypeDeferredDelivery.setStatus('current')
if mibBuilder.loadTexts: exslTypeDeferredDelivery.setDescription('The TypeDeferredDelivery property indicates that the link holds mail that is awaiting a trigger to start transmission.')
exslTypeInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslTypeInternal.setStatus('current')
if mibBuilder.loadTexts: exslTypeInternal.setDescription('The TypeInternal property indicates that the link is used for internal message processing.')
exslTypeLocalDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslTypeLocalDelivery.setStatus('current')
if mibBuilder.loadTexts: exslTypeLocalDelivery.setDescription('The TypeLocalDelivery property indicates whether the link is used for local delivery.')
exslTypePendingCategorization = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslTypePendingCategorization.setStatus('current')
if mibBuilder.loadTexts: exslTypePendingCategorization.setDescription('The TypePendingCategorization property indicates that the link is for messages whose recipient addresses require resolution in Microsoft Active Directory.')
exslTypePendingRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslTypePendingRouting.setStatus('current')
if mibBuilder.loadTexts: exslTypePendingRouting.setDescription('The TypePendingRouting property indicates that the link is for routing the next message that is waiting to be transmitted.')
exslTypePendingSubmission = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslTypePendingSubmission.setStatus('current')
if mibBuilder.loadTexts: exslTypePendingSubmission.setDescription('The TypePendingSubmission property indicates that the link handles messages that have not yet been submitted to the routing engine.')
exslTypeRemoteDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslTypeRemoteDelivery.setStatus('current')
if mibBuilder.loadTexts: exslTypeRemoteDelivery.setDescription('The TypeRemoteDelivery property indicates whether the link is currently handling a remote message delivery.')
exslVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslVersion.setStatus('current')
if mibBuilder.loadTexts: exslVersion.setDescription('The Version property indicates the version of the QAPI used to generate the WMI object.')
exslVirtualMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 33), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslVirtualMachine.setStatus('current')
if mibBuilder.loadTexts: exslVirtualMachine.setDescription('The VirtualMachine property indicates the name of the virtual machine that is the source of the link.')
exslVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 23, 1, 34), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exslVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: exslVirtualServerName.setDescription('The VirtualServerName property indicates the name of the virtual server that is the source of the link.')
exchangeSMTPQueueTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 24), )
if mibBuilder.loadTexts: exchangeSMTPQueueTable.setStatus('current')
if mibBuilder.loadTexts: exchangeSMTPQueueTable.setDescription('The Exchange_SMTPQueue class returns properties for SMTP queues.')
exchangeSMTPQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 24, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exsqIndex"))
if mibBuilder.loadTexts: exchangeSMTPQueueEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeSMTPQueueEntry.setDescription('None')
exsqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsqIndex.setStatus('current')
if mibBuilder.loadTexts: exsqIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exsqCanEnumAll = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 24, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsqCanEnumAll.setStatus('current')
if mibBuilder.loadTexts: exsqCanEnumAll.setDescription('The CanEnumAll property indicates whether the queue can enumerate all of the messages that it has waiting for transmission.')
exsqGlobalStop = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 24, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsqGlobalStop.setStatus('current')
if mibBuilder.loadTexts: exsqGlobalStop.setDescription('The GlobalStop property indicates whether the virtual server for the queue is in disabled mode. If True, the virtual server is disabled.')
exsqLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 24, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsqLinkId.setStatus('current')
if mibBuilder.loadTexts: exsqLinkId.setDescription('The LinkId property indicates the identifier for the link that contains the queue.')
exsqLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 24, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsqLinkName.setStatus('current')
if mibBuilder.loadTexts: exsqLinkName.setDescription('The LinkName property indicates the name of the link that contains the queue.')
exsqMessageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 24, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsqMessageCount.setStatus('current')
if mibBuilder.loadTexts: exsqMessageCount.setDescription('The MessageCount property indicates the number of messages in the queue.')
exsqMsgEnumFlagsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 24, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsqMsgEnumFlagsSupported.setStatus('current')
if mibBuilder.loadTexts: exsqMsgEnumFlagsSupported.setDescription('The MsgEnumFlagsSupported property contains a mask of all enumeration flags for the queue.')
exsqProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 24, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsqProtocolName.setStatus('current')
if mibBuilder.loadTexts: exsqProtocolName.setDescription('The ProtocolName property indicates transmission protocol for the queue.')
exsqQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 24, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsqQueueId.setStatus('current')
if mibBuilder.loadTexts: exsqQueueId.setDescription('The QueueId property indicates the identifier of the queue.')
exsqQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 24, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsqQueueName.setStatus('current')
if mibBuilder.loadTexts: exsqQueueName.setDescription('The QueueName property indicates the name of the queue.')
exsqKSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 24, 1, 11), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: exsqKSize.setStatus('current')
if mibBuilder.loadTexts: exsqKSize.setDescription('The Size property indicates the size of the queue (in kilobytes).')
exsqMSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 24, 1, 12), Gauge32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: exsqMSize.setStatus('current')
if mibBuilder.loadTexts: exsqMSize.setDescription('The Size property indicates the size of the queue (in megabytes).')
exsqVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 24, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsqVersion.setStatus('current')
if mibBuilder.loadTexts: exsqVersion.setDescription('The Version property indicates the version of the QAPI used to generate the WMI object.')
exsqVirtualMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 24, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsqVirtualMachine.setStatus('current')
if mibBuilder.loadTexts: exsqVirtualMachine.setDescription('The VirtualMachine property indicates the name of the virtual machine that contains the queue.')
exsqVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 24, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exsqVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: exsqVirtualServerName.setDescription('The VirtualServerName property indicates the name of the virtual server the queue is on.')
exchangeX400LinkTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25), )
if mibBuilder.loadTexts: exchangeX400LinkTable.setStatus('current')
if mibBuilder.loadTexts: exchangeX400LinkTable.setDescription('The Exchange_X400Link Class provides methods for controlling an Microsoft Exchange Link. The Exchange_SMTPLink class inherits all the properties of the Exchange_Link class.')
exchangeX400LinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exxlIndex"))
if mibBuilder.loadTexts: exchangeX400LinkEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeX400LinkEntry.setDescription('None')
exxlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlIndex.setStatus('current')
if mibBuilder.loadTexts: exxlIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exxlActionFreeze = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlActionFreeze.setStatus('current')
if mibBuilder.loadTexts: exxlActionFreeze.setDescription('The ActionFreeze property indicates whether the link supports the Freeze method.')
exxlActionKick = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlActionKick.setStatus('current')
if mibBuilder.loadTexts: exxlActionKick.setDescription('The ActionKick property indicates whether the link supports the ForceConnection method.')
exxlActionThaw = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlActionThaw.setStatus('current')
if mibBuilder.loadTexts: exxlActionThaw.setDescription('The ActionThaw property indicates whether the link supports the Thaw method.')
exxlExtendedStateInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlExtendedStateInfo.setStatus('current')
if mibBuilder.loadTexts: exxlExtendedStateInfo.setDescription('The ExtendedStateInfo property indicates extended error and reporting troubleshooting information.')
exxlGlobalStop = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlGlobalStop.setStatus('current')
if mibBuilder.loadTexts: exxlGlobalStop.setDescription('The GlobalStop property indicates whether the virtual server for the link is in disabled mode. If True, the virtual server is disabled.')
exxlLinkDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlLinkDN.setStatus('current')
if mibBuilder.loadTexts: exxlLinkDN.setDescription('The LinkDN property indicates the distinguished name (DN) of the link.')
exxlLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlLinkId.setStatus('current')
if mibBuilder.loadTexts: exxlLinkId.setDescription('The LinkId property indicates the identifier for the link.')
exxlLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlLinkName.setStatus('current')
if mibBuilder.loadTexts: exxlLinkName.setDescription('The LinkName property indicates the name of the link.')
exxlMessageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlMessageCount.setStatus('current')
if mibBuilder.loadTexts: exxlMessageCount.setDescription('The MessageCount property indicates the number of messages in the link.')
exxlNextScheduledConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlNextScheduledConnection.setStatus('current')
if mibBuilder.loadTexts: exxlNextScheduledConnection.setDescription('The NextScheduledConnection property indicates the next time a connection will be attempted.')
exxlOldestMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlOldestMessage.setStatus('current')
if mibBuilder.loadTexts: exxlOldestMessage.setDescription('The OldestMessage property indicates the time stamp of the oldest message.')
exxlProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlProtocolName.setStatus('current')
if mibBuilder.loadTexts: exxlProtocolName.setDescription('The ProtocolName property indicates the name of the protocol used by the link.')
exxlKSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 14), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlKSize.setStatus('current')
if mibBuilder.loadTexts: exxlKSize.setDescription('The Size property indicates the size of the link (in kilobytes).')
exxlMSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 15), Gauge32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlMSize.setStatus('current')
if mibBuilder.loadTexts: exxlMSize.setDescription('The Size property indicates the size of the link (in megabytes).')
exxlStateActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlStateActive.setStatus('current')
if mibBuilder.loadTexts: exxlStateActive.setDescription('The StateActive property indicates that the link is active.')
exxlStateFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlStateFlags.setStatus('current')
if mibBuilder.loadTexts: exxlStateFlags.setDescription('The StateFlags property contains a mask of all of the state flags for the link.')
exxlStateFrozen = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlStateFrozen.setStatus('current')
if mibBuilder.loadTexts: exxlStateFrozen.setDescription('The StateFrozen property indicates whether the link is currently frozen.')
exxlStateReady = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlStateReady.setStatus('current')
if mibBuilder.loadTexts: exxlStateReady.setDescription('The StateReady property indicates that the link is ready to accept new messages.')
exxlStateRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlStateRemote.setStatus('current')
if mibBuilder.loadTexts: exxlStateRemote.setDescription('The StateRemote property indicates that the destination for messages in the link is on a remote server.')
exxlStateRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlStateRetry.setStatus('current')
if mibBuilder.loadTexts: exxlStateRetry.setDescription('The StateRetry property indicates that the link is retrying a transmission that was unsuccessful.')
exxlStateScheduled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlStateScheduled.setStatus('current')
if mibBuilder.loadTexts: exxlStateScheduled.setDescription('The StateScheduled property indicates that the link is scheduled for periodic activation.')
exxlSupportedLinkActions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlSupportedLinkActions.setStatus('current')
if mibBuilder.loadTexts: exxlSupportedLinkActions.setDescription('The SupportedLinkActions property indicates the actions that are supported on the link.')
exxlTypeCurrentlyUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlTypeCurrentlyUnreachable.setStatus('current')
if mibBuilder.loadTexts: exxlTypeCurrentlyUnreachable.setDescription('The TypeCurrentlyUnreachable property indicates that the link holds messages for destinations that are currently unreachable.')
exxlTypeDeferredDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlTypeDeferredDelivery.setStatus('current')
if mibBuilder.loadTexts: exxlTypeDeferredDelivery.setDescription('The TypeDeferredDelivery property indicates that the link holds mail that is awaiting a trigger to start transmission.')
exxlTypeInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlTypeInternal.setStatus('current')
if mibBuilder.loadTexts: exxlTypeInternal.setDescription('The TypeInternal property indicates that the link is used for internal message processing.')
exxlTypeLocalDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlTypeLocalDelivery.setStatus('current')
if mibBuilder.loadTexts: exxlTypeLocalDelivery.setDescription('The TypeLocalDelivery property indicates whether the link is used for local delivery.')
exxlTypePendingCategorization = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlTypePendingCategorization.setStatus('current')
if mibBuilder.loadTexts: exxlTypePendingCategorization.setDescription('The TypePendingCategorization property indicates that the link is for messages whose recipient addresses require resolution in Microsoft Active Directory.')
exxlTypePendingRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlTypePendingRouting.setStatus('current')
if mibBuilder.loadTexts: exxlTypePendingRouting.setDescription('The TypePendingRouting property indicates that the link is for routing the next message that is waiting to be transmitted.')
exxlTypePendingSubmission = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlTypePendingSubmission.setStatus('current')
if mibBuilder.loadTexts: exxlTypePendingSubmission.setDescription('The TypePendingSubmission property indicates that the link handles messages that have not yet been submitted to the routing engine.')
exxlTypeRemoteDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlTypeRemoteDelivery.setStatus('current')
if mibBuilder.loadTexts: exxlTypeRemoteDelivery.setDescription('The TypeRemoteDelivery property indicates whether the link is currently handling a remote message delivery.')
exxlVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlVersion.setStatus('current')
if mibBuilder.loadTexts: exxlVersion.setDescription('The Version property indicates the version of the QAPI used to generate the WMI object.')
exxlVirtualMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 33), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlVirtualMachine.setStatus('current')
if mibBuilder.loadTexts: exxlVirtualMachine.setDescription('The VirtualMachine property indicates the name of the virtual machine that is the source of the link.')
exxlVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 25, 1, 34), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxlVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: exxlVirtualServerName.setDescription('The VirtualServerName property indicates the name of the virtual server that is the source of the link.')
exchangeX400QueueTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 23, 26), )
if mibBuilder.loadTexts: exchangeX400QueueTable.setStatus('current')
if mibBuilder.loadTexts: exchangeX400QueueTable.setDescription('The Exchange_X400Queue class returns properties for X400 queues.')
exchangeX400QueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 23, 26, 1), ).setIndexNames((0, "INFORMANT-WMI-EXCHANGE", "exxqIndex"))
if mibBuilder.loadTexts: exchangeX400QueueEntry.setStatus('current')
if mibBuilder.loadTexts: exchangeX400QueueEntry.setDescription('None')
exxqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxqIndex.setStatus('current')
if mibBuilder.loadTexts: exxqIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
exxqCanEnumAll = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 26, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxqCanEnumAll.setStatus('current')
if mibBuilder.loadTexts: exxqCanEnumAll.setDescription('The CanEnumAll property indicates whether the queue can enumerate all of the messages that it has waiting for transmission.')
exxqGlobalStop = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 26, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxqGlobalStop.setStatus('current')
if mibBuilder.loadTexts: exxqGlobalStop.setDescription('The GlobalStop property indicates whether the virtual server for the queue is in disabled mode. If True, the virtual server is disabled.')
exxqLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 26, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxqLinkId.setStatus('current')
if mibBuilder.loadTexts: exxqLinkId.setDescription('The LinkId property indicates the identifier for the link that contains the queue.')
exxqLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 26, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxqLinkName.setStatus('current')
if mibBuilder.loadTexts: exxqLinkName.setDescription('The LinkName property indicates the name of the link that contains the queue.')
exxqMessageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 26, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxqMessageCount.setStatus('current')
if mibBuilder.loadTexts: exxqMessageCount.setDescription('The MessageCount property indicates the number of messages in the queue.')
exxqMsgEnumFlagsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 26, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxqMsgEnumFlagsSupported.setStatus('current')
if mibBuilder.loadTexts: exxqMsgEnumFlagsSupported.setDescription('The MsgEnumFlagsSupported property contains a mask of all enumeration flags for the queue.')
exxqProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 26, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxqProtocolName.setStatus('current')
if mibBuilder.loadTexts: exxqProtocolName.setDescription('The ProtocolName property indicates transmission protocol for the queue.')
exxqQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 26, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxqQueueId.setStatus('current')
if mibBuilder.loadTexts: exxqQueueId.setDescription('The QueueId property indicates the identifier of the queue.')
exxqQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 26, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxqQueueName.setStatus('current')
if mibBuilder.loadTexts: exxqQueueName.setDescription('The QueueName property indicates the name of the queue.')
exxqKSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 26, 1, 11), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: exxqKSize.setStatus('current')
if mibBuilder.loadTexts: exxqKSize.setDescription('The Size property indicates the size of the queue (in kilobytes).')
exxqMSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 26, 1, 12), Gauge32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: exxqMSize.setStatus('current')
if mibBuilder.loadTexts: exxqMSize.setDescription('The Size property indicates the size of the queue (in megabytes).')
exxqVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 26, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxqVersion.setStatus('current')
if mibBuilder.loadTexts: exxqVersion.setDescription('The Version property indicates the version of the QAPI used to generate the WMI object.')
exxqVirtualMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 26, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxqVirtualMachine.setStatus('current')
if mibBuilder.loadTexts: exxqVirtualMachine.setDescription('The VirtualMachine property indicates the name of the virtual machine that contains the queue.')
exxqVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 23, 26, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exxqVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: exxqVirtualServerName.setDescription('The VirtualServerName property indicates the name of the virtual server the queue is on.')
mibBuilder.exportSymbols("INFORMANT-WMI-EXCHANGE", exchangeMessageTrackingTable=exchangeMessageTrackingTable, exslExtendedStateInfo=exslExtendedStateInfo, exxqGlobalStop=exxqGlobalStop, exqcreReloadTime=exqcreReloadTime, exqxmProtocolName=exqxmProtocolName, exqxmRecipients=exqxmRecipients, exqxmSize=exqxmSize, expfReplicaList=expfReplicaList, exvsGlobalActionsSupported=exvsGlobalActionsSupported, exloTransferOperationRate=exloTransferOperationRate, expfName=expfName, exqmActionFreeze=exqmActionFreeze, exsqIndex=exsqIndex, exchangeQueuedMessageEntry=exchangeQueuedMessageEntry, exssDN=exssDN, exssGUID=exssGUID, expfComment=expfComment, exmtLinkedMessageID=exmtLinkedMessageID, exchangeLinkV2Entry=exchangeLinkV2Entry, exsqLinkName=exsqLinkName, exqCanEnumFrozen=exqCanEnumFrozen, exmtDeliveryTime=exmtDeliveryTime, exlStateRemote=exlStateRemote, exqsmIndex=exqsmIndex, exslLinkDN=exslLinkDN, exloStorageGroupName=exloStorageGroupName, exloTableOperationRate=exloTableOperationRate, exxlTypePendingRouting=exxlTypePendingRouting, exslLinkName=exslLinkName, exmtClientIP=exmtClientIP, exmtExpansionDL=exmtExpansionDL, exftRootFolderURL=exftRootFolderURL, exsMessageTrackingEnabled=exsMessageTrackingEnabled, excsGUID=excsGUID, expfMaximumItemSize=expfMaximumItemSize, exqmRecipients=exqmRecipients, exssGroupDN=exssGroupDN, exqsmActionDeleteNoNDR=exqsmActionDeleteNoNDR, excsGroupGUID=excsGroupGUID, exqsmMessageId=exqsmMessageId, exdsName=exdsName, exchangeFolderTreeTable=exchangeFolderTreeTable, exsqVirtualMachine=exsqVirtualMachine, exl2StateRetry=exl2StateRetry, exqxmSubject=exqxmSubject, exchangeQueueSMTPVirtualSrvEntry=exchangeQueueSMTPVirtualSrvEntry, exchangeDSAccessDCEntry=exchangeDSAccessDCEntry, exxlExtendedStateInfo=exxlExtendedStateInfo, exmDateDiscoveredAbsentInDS=exmDateDiscoveredAbsentInDS, exdsLDAPPort=exdsLDAPPort, expfHasLocalReplica=expfHasLocalReplica, exxqMessageCount=exxqMessageCount, exslStateActive=exslStateActive, expfStorageLimitStyle=expfStorageLimitStyle, expfReplicaAgeLimit=expfReplicaAgeLimit, exq2ProtocolName=exq2ProtocolName, wmiExchange=wmiExchange, exsiStartTime=exsiStartTime, exchangeQueueTable=exchangeQueueTable, exqmLinkId=exqmLinkId, exlActionKick=exlActionKick, exxlTypeInternal=exxlTypeInternal, exqmMessageId=exqmMessageId, exftGUID=exftGUID, expfADProxyPath=expfADProxyPath, exlActionFreeze=exlActionFreeze, exssGroupGUID=exssGroupGUID, exchangeQueuedSMTPMessageTable=exchangeQueuedSMTPMessageTable, exslMSize=exslMSize, exxlActionKick=exxlActionKick, exl2LinkName=exl2LinkName, exlGlobalStop=exlGlobalStop, exl2StateActive=exl2StateActive, exslTypeCurrentlyUnreachable=exslTypeCurrentlyUnreachable, exlVirtualServerName=exlVirtualServerName, exlTypeRemoteDelivery=exlTypeRemoteDelivery, exl2Index=exl2Index, exmLastLogoffTime=exmLastLogoffTime, exmtVersion=exmtVersion, exsName=exsName, exxlMessageCount=exxlMessageCount, exqsvsProtocolName=exqsvsProtocolName, exqsvsVirtualServerName=exqsvsVirtualServerName, exxqCanEnumAll=exxqCanEnumAll, exqxmIndex=exqxmIndex, exlTypeDeferredDelivery=exlTypeDeferredDelivery, exqsmStateFlags=exqsmStateFlags, exqxmQueueName=exqxmQueueName, exxlStateRemote=exxlStateRemote, exssQueuesState=exssQueuesState, exloClientName=exloClientName, exqmProtocolName=exqmProtocolName, exsType=exsType, exqxmStateFrozen=exqxmStateFrozen, exslOldestMessage=exslOldestMessage, exl2LinkDN=exl2LinkDN, exslProtocolName=exslProtocolName, exlTypeInternal=exlTypeInternal, exssDisksState=exssDisksState, exloAdapterSpeed=exloAdapterSpeed, exloOpenMessageCount=exloOpenMessageCount, exlTypeLocalDelivery=exlTypeLocalDelivery, exl2StateFrozen=exl2StateFrozen, exqmHighPriority=exqmHighPriority, exqCanEnumOlderThan=exqCanEnumOlderThan, exslNextScheduledConnection=exslNextScheduledConnection, exloLastOperationTime=exloLastOperationTime, exlVirtualMachine=exlVirtualMachine, exqsmActionDeleteNDR=exqsmActionDeleteNDR, exchangeQueueX400VirtualSrvEntry=exchangeQueueX400VirtualSrvEntry, exloClientIP=exloClientIP, exsRoutingGroup=exsRoutingGroup, exchangeX400LinkEntry=exchangeX400LinkEntry, exmtRecipientCount=exmtRecipientCount, exslTypePendingCategorization=exslTypePendingCategorization, exssServicesStateString=exssServicesStateString, exqmIndex=exqmIndex, exmtKeyID=exmtKeyID, exloOtherOperationRate=exloOtherOperationRate, exl2TypeCurrentlyUnreachable=exl2TypeCurrentlyUnreachable, exmtSubject=exmtSubject, exqsmQueueId=exqsmQueueId, exqxmActionDeleteNDR=exqxmActionDeleteNDR, exftAssociatedPublicStores=exftAssociatedPublicStores, exmtCost=exmtCost, exl2VirtualServerName=exl2VirtualServerName, exqxmMessageId=exqxmMessageId, exqxmRecipientCount=exqxmRecipientCount, exslVirtualServerName=exslVirtualServerName, exqsmStateRetry=exqsmStateRetry, exqIndex=exqIndex, exqmVersion=exqmVersion, exqCanEnumNLargestMessages=exqCanEnumNLargestMessages, exl2TypeInternal=exl2TypeInternal, exqxvsVirtualServerName=exqxvsVirtualServerName, exchangeX400LinkTable=exchangeX400LinkTable, exxlActionThaw=exxlActionThaw, exchangeSMTPQueueEntry=exchangeSMTPQueueEntry, exqxmHighPriority=exqxmHighPriority, exloLogonTime=exloLogonTime, exloFolderOperationRate=exloFolderOperationRate, exxqVirtualServerName=exxqVirtualServerName, exloMailboxLegacyDN=exloMailboxLegacyDN, exlNumberOfMessages=exlNumberOfMessages, exftLastModificationTime=exftLastModificationTime, exchangeLogonTable=exchangeLogonTable, exmtRecipientStatus=exmtRecipientStatus, exftAdministrativeNote=exftAdministrativeNote, exqmQueueName=exqmQueueName, expfReplicationSchedule=expfReplicationSchedule, expfCategorizationCount=expfCategorizationCount, expfRecipientCountOnAssociateMsg=expfRecipientCountOnAssociateMsg, exlProtocolName=exlProtocolName, exqsvsGlobalStop=exqsvsGlobalStop, exslActionThaw=exslActionThaw, exslTypeDeferredDelivery=exslTypeDeferredDelivery, expfParentFriendlyUrl=expfParentFriendlyUrl, exslTypeLocalDelivery=exslTypeLocalDelivery, exxlMSize=exxlMSize, exloStoreName=exloStoreName, exqCanEnumAll=exqCanEnumAll, exchangeMessageTrackingEntry=exchangeMessageTrackingEntry, exloStreamOperationRate=exloStreamOperationRate, exlSupportedLinkActions=exlSupportedLinkActions, exchangeLinkV2Table=exchangeLinkV2Table, expfContactCount=expfContactCount, exlActionThaw=exlActionThaw, exxlTypePendingSubmission=exxlTypePendingSubmission, exchangeServerEntry=exchangeServerEntry, expfReplicationStyle=expfReplicationStyle, exftHasLocalPublicStore=exftHasLocalPublicStore, excrOwner=excrOwner, exchangeLogonEntry=exchangeLogonEntry, exslStateFlags=exslStateFlags, exqxmVirtualMachine=exqxmVirtualMachine, exlTypePendingCategorization=exlTypePendingCategorization, exssCPUStateString=exssCPUStateString, exxlStateReady=exxlStateReady, exmTotalItems=exmTotalItems, exlLinkDN=exlLinkDN, exxlStateScheduled=exxlStateScheduled, exlVersion=exlVersion, exxqLinkName=exxqLinkName, exftIndex=exftIndex, exqmActionThaw=exqmActionThaw, exvsVirtualServerName=exvsVirtualServerName, exsqGlobalStop=exsqGlobalStop, exqsmQueueName=exqsmQueueName, exqGlobalStop=exqGlobalStop, exqLinkName=exqLinkName, exslLinkId=exslLinkId, exqsmActionFreeze=exqsmActionFreeze, exsqMessageCount=exsqMessageCount, exchangePublicFolderTable=exchangePublicFolderTable, exl2StateReady=exl2StateReady, expfFriendlyUrl=expfFriendlyUrl, exqsmSize=exqsmSize, exqsmVirtualMachine=exqsmVirtualMachine, exmtServerIP=exmtServerIP, exsqVirtualServerName=exsqVirtualServerName, exslVersion=exslVersion, exslStateReady=exslStateReady, expfAddressBookName=expfAddressBookName, exsSubjectLoggingEnabled=exsSubjectLoggingEnabled, PYSNMP_MODULE_ID=wmiExchange, exslTypePendingRouting=exslTypePendingRouting, exslTypeInternal=exslTypeInternal, exsqKSize=exsqKSize, exsLastModificationTime=exsLastModificationTime, exqsmStateFrozen=exqsmStateFrozen, exchangeMailboxTable=exchangeMailboxTable, exsAdministrativeGroup=exsAdministrativeGroup, exchangeSMTPQueueTable=exchangeSMTPQueueTable, exxlKSize=exxlKSize, exslTypeRemoteDelivery=exslTypeRemoteDelivery, exsAdministrativeNote=exsAdministrativeNote, expfReplicationMessagePriority=expfReplicationMessagePriority, excsName=excsName, expfPublishInAddressBook=expfPublishInAddressBook, exxlIndex=exxlIndex, excsGroupDN=excsGroupDN, excrName=excrName, exlTypeCurrentlyUnreachable=exlTypeCurrentlyUnreachable, exmLegacyDN=exmLegacyDN, exlStateScheduled=exlStateScheduled, exqxmLinkId=exqxmLinkId, exloOpenAttachmentCount=exloOpenAttachmentCount, exmtOriginationTime=exmtOriginationTime, exmStoreName=exmStoreName, exftCreationTime=exftCreationTime, exl2VirtualMachine=exl2VirtualMachine, exlLinkName=exlLinkName, exchangeClusterResourceTable=exchangeClusterResourceTable, exqmStateRetry=exqmStateRetry, exqCanEnumInvertSense=exqCanEnumInvertSense, exsMessageTrackingLogFileLifetm=exsMessageTrackingLogFileLifetm, exslActionKick=exslActionKick, exloTotalOperationRate=exloTotalOperationRate, exqsmSender=exqsmSender, exq2GlobalStop=exq2GlobalStop, exl2MessageCount=exl2MessageCount, exsqCanEnumAll=exsqCanEnumAll, exqmActionDeleteNDR=exqmActionDeleteNDR, exqIncreasingTime=exqIncreasingTime, exchangeQueuedSMTPMessageEntry=exchangeQueuedSMTPMessageEntry, expfNormalMessageSize=expfNormalMessageSize, exvsIndex=exvsIndex, exssServicesState=exssServicesState, exchangeScheduleIntervalEntry=exchangeScheduleIntervalEntry, exqmQueueId=exqmQueueId, exq2Size=exq2Size, exslActionFreeze=exslActionFreeze, exmtEntryType=exmtEntryType, exq2LinkName=exq2LinkName)
mibBuilder.exportSymbols("INFORMANT-WMI-EXCHANGE", exmtSenderAddress=exmtSenderAddress, expfCreationTime=expfCreationTime, exsiIndex=exsiIndex, exsIsFrontEndServer=exsIsFrontEndServer, exdsIsFast=exdsIsFast, exchangeServerTable=exchangeServerTable, expfTargetAddress=expfTargetAddress, exq2MessageCount=exq2MessageCount, exsqMsgEnumFlagsSupported=exsqMsgEnumFlagsSupported, exslIndex=exslIndex, exqmSubject=exqmSubject, exdsConfigurationType=exdsConfigurationType, exchangeSMTPLinkEntry=exchangeSMTPLinkEntry, exsqQueueName=exsqQueueName, exsFQDN=exsFQDN, exxlTypePendingCategorization=exxlTypePendingCategorization, exloMessagingOperationRate=exloMessagingOperationRate, exslStateFrozen=exslStateFrozen, excrType=excrType, exloIndex=exloIndex, exslSupportedLinkActions=exslSupportedLinkActions, exdsIsUp=exdsIsUp, exqCanEnumFirstNMessages=exqCanEnumFirstNMessages, exqsmVirtualServerName=exqsmVirtualServerName, exmMailboxGUID=exmMailboxGUID, exlOldestMessage=exlOldestMessage, exqxmActionThaw=exqxmActionThaw, exxlGlobalStop=exxlGlobalStop, exqxvsVirtualMachine=exqxvsVirtualMachine, exxqKSize=exxqKSize, exmtPriority=exmtPriority, exqCanEnumFailed=exqCanEnumFailed, exqxmSubmission=exqxmSubmission, expfIsMailEnabled=expfIsMailEnabled, exchangeQueueCacheReloadEvtEntry=exchangeQueueCacheReloadEvtEntry, exqsmActionThaw=exqsmActionThaw, exqxvsProtocolName=exqxvsProtocolName, expfFolderTree=expfFolderTree, expfAdministrativeNote=expfAdministrativeNote, exsExchangeVersion=exsExchangeVersion, exqxvsGlobalActionsSupported=exqxvsGlobalActionsSupported, exl2Size=exl2Size, exslVirtualMachine=exslVirtualMachine, expfAttachmentCount=expfAttachmentCount, exxlLinkName=exxlLinkName, exmServerName=exmServerName, expfMessageCount=expfMessageCount, exqxmSender=exqxmSender, exq2Index=exq2Index, exqxmQueueId=exqxmQueueId, exchangeQueueV2Entry=exchangeQueueV2Entry, exloHostAddress=exloHostAddress, expfAdminSecurityDescriptor=expfAdminSecurityDescriptor, exxlLinkDN=exxlLinkDN, exqsmLinkName=exqsmLinkName, exxlOldestMessage=exxlOldestMessage, exqCanEnumRecipient=exqCanEnumRecipient, exssVersion=exssVersion, exxlNextScheduledConnection=exxlNextScheduledConnection, expfUrl=expfUrl, exxlActionFreeze=exxlActionFreeze, exmIndex=exmIndex, exqxmStateFlags=exqxmStateFlags, exxqQueueName=exxqQueueName, exsqLinkId=exsqLinkId, exslMessageCount=exslMessageCount, exchangeConnectorStateEntry=exchangeConnectorStateEntry, exchangeQueueCacheReloadEvtTable=exchangeQueueCacheReloadEvtTable, exl2ProtocolName=exl2ProtocolName, exqmActionDeleteNoNDR=exqmActionDeleteNoNDR, excrIndex=excrIndex, exchangeQueueVirtualServerEntry=exchangeQueueVirtualServerEntry, exqxmNormalPriority=exqxmNormalPriority, exloLoggedOnUsersMailboxLegacyDN=exloLoggedOnUsersMailboxLegacyDN, exqsvsVirtualMachine=exqsvsVirtualMachine, exftName=exftName, exmSize=exmSize, exqsvsGlobalActionsSupported=exqsvsGlobalActionsSupported, exmtClientName=exmtClientName, exchangeServerStateEntry=exchangeServerStateEntry, exssServerStateString=exssServerStateString, exmDeletedMessageSizeExtended=exmDeletedMessageSizeExtended, exl2TypePendingCategorization=exl2TypePendingCategorization, exslStateRetry=exslStateRetry, exslTypePendingSubmission=exslTypePendingSubmission, exsMonitoringEnabled=exsMonitoringEnabled, exchangeSMTPLinkTable=exchangeSMTPLinkTable, exmtTimeLogged=exmtTimeLogged, excrState=excrState, exq2CanEnumAll=exq2CanEnumAll, exsqVersion=exsqVersion, exxlStateActive=exxlStateActive, exqQueueName=exqQueueName, exqCanEnumLargerThan=exqCanEnumLargerThan, expfUsePublicStoreDelItemLifetm=expfUsePublicStoreDelItemLifetm, exmtEncrypted=exmtEncrypted, exsCreationTime=exsCreationTime, expfDeletedItemLifetime=expfDeletedItemLifetime, exqxmActionFreeze=exqxmActionFreeze, exchangeServerStateTable=exchangeServerStateTable, exqsmSubject=exqsmSubject, exlIndex=exlIndex, exxlTypeLocalDelivery=exxlTypeLocalDelivery, exqmNormalPriority=exqmNormalPriority, exqmSender=exqmSender, exmLastLogonTime=exmLastLogonTime, exssMemoryState=exssMemoryState, exqVirtualMachine=exqVirtualMachine, exloRowID=exloRowID, exmtSize=exmtSize, exloMailboxDisplayName=exloMailboxDisplayName, excrVirtualMachine=excrVirtualMachine, expfRestrictionCount=expfRestrictionCount, exqVirtualServerName=exqVirtualServerName, exl2TypeRemoteDelivery=exl2TypeRemoteDelivery, exl2ActionFreeze=exl2ActionFreeze, exsqProtocolName=exsqProtocolName, exqsmSubmission=exqsmSubmission, expfLastAccessTime=expfLastAccessTime, expfIsSearchFolder=expfIsSearchFolder, exchangeQueueV2Table=exchangeQueueV2Table, exq2VirtualMachine=exq2VirtualMachine, exl2Version=exl2Version, exmtSubjectID=exmtSubjectID, exsMTADataPath=exsMTADataPath, exloMacAddress=exloMacAddress, exqmVirtualServerName=exqmVirtualServerName, exchangeQueuedX400MessageTable=exchangeQueuedX400MessageTable, exloClientMode=exloClientMode, exchangeQueueSMTPVirtualSrvTable=exchangeQueueSMTPVirtualSrvTable, exlStateFrozen=exlStateFrozen, exsqQueueId=exsqQueueId, exqcreIndex=exqcreIndex, exqxmStateRetry=exqxmStateRetry, exxqLinkId=exxqLinkId, exftAdministrativeGroup=exftAdministrativeGroup, exloCodePageID=exloCodePageID, exsGUID=exsGUID, exl2StateRemote=exl2StateRemote, exmtIndex=exmtIndex, exqsmNormalPriority=exqsmNormalPriority, exchangeDSAccessDCTable=exchangeDSAccessDCTable, exmtPartnerServer=exmtPartnerServer, exmStorageGroupName=exmStorageGroupName, exxqVersion=exxqVersion, exchangeScheduleIntervalTable=exchangeScheduleIntervalTable, exqsmExpiry=exqsmExpiry, exlExtendedStateInfo=exlExtendedStateInfo, exssDisksStateString=exssDisksStateString, exqmRecipientCount=exqmRecipientCount, exsiStopTime=exsiStopTime, exxqMsgEnumFlagsSupported=exxqMsgEnumFlagsSupported, exloStoreType=exloStoreType, exqmSize=exqmSize, exlStateReady=exlStateReady, exdsIsInSync=exdsIsInSync, exssMemoryStateString=exssMemoryStateString, exloLatency=exloLatency, exslGlobalStop=exslGlobalStop, exl2ActionKick=exl2ActionKick, exftMapiFolderTree=exftMapiFolderTree, exq2Version=exq2Version, exxqIndex=exxqIndex, exqsmRecipients=exqsmRecipients, exxlStateRetry=exxlStateRetry, exchangeQueueX400VirtualSrvTable=exchangeQueueX400VirtualSrvTable, exchangeFolderTreeEntry=exchangeFolderTreeEntry, exl2ExtendedStateInfo=exl2ExtendedStateInfo, exqmVirtualMachine=exqmVirtualMachine, exxlVersion=exxlVersion, exssClusterState=exssClusterState, expfContainsRules=expfContainsRules, exl2OldestMessage=exl2OldestMessage, exl2StateScheduled=exl2StateScheduled, exqmSubmission=exqmSubmission, exqxmLinkName=exqxmLinkName, exchangeConnectorStateTable=exchangeConnectorStateTable, exqsmRecipientCount=exqsmRecipientCount, exxqProtocolName=exxqProtocolName, exchangeQueueEntry=exchangeQueueEntry, exlTypePendingSubmission=exlTypePendingSubmission, exssQueuesStateString=exssQueuesStateString, exloLoggedOnUserAccount=exloLoggedOnUserAccount, expfIndex=expfIndex, exssCPUState=exssCPUState, exslKSize=exslKSize, expfProhibitPostLimit=expfProhibitPostLimit, exloLocaleID=exloLocaleID, exxlStateFrozen=exxlStateFrozen, exl2StateFlags=exl2StateFlags, exxlTypeCurrentlyUnreachable=exxlTypeCurrentlyUnreachable, exqmStateFrozen=exqmStateFrozen, expfOwnerCount=expfOwnerCount, expfSecurityDescriptor=expfSecurityDescriptor, exl2TypeDeferredDelivery=exl2TypeDeferredDelivery, exl2ActionThaw=exl2ActionThaw, exqmStateFlags=exqmStateFlags, exqProtocolName=exqProtocolName, exssIndex=exssIndex, expfIsSecureInSite=expfIsSecureInSite, exqNumberOfMessages=exqNumberOfMessages, exchangeMailboxEntry=exchangeMailboxEntry, exloOpenFolderCount=exloOpenFolderCount, exqxmLowPriority=exqxmLowPriority, exqVersion=exqVersion, exsMessageTrackingLogFilePath=exsMessageTrackingLogFilePath, exmtMessageID=exmtMessageID, exxlLinkId=exxlLinkId, exq2MsgEnumFlagsSupported=exq2MsgEnumFlagsSupported, exqmLowPriority=exqmLowPriority, expfIsNormalFolder=expfIsNormalFolder, exqxmExpiry=exqxmExpiry, expfAssociatedMessageCount=expfAssociatedMessageCount, exlSizeOfQueue=exlSizeOfQueue, expfMessageWithAttachmentsCount=expfMessageWithAttachmentsCount, exchangePublicFolderEntry=exchangePublicFolderEntry, expfRecipientCountOnNormalMsg=expfRecipientCountOnNormalMsg, exxqMSize=exxqMSize, exmStorageLimitInfo=exmStorageLimitInfo, exqxvsIndex=exqxvsIndex, exxqQueueId=exxqQueueId, exlNextScheduledConnection=exlNextScheduledConnection, exxlProtocolName=exxlProtocolName, excsIndex=excsIndex, exsIndex=exsIndex, exqsvsIndex=exqsvsIndex, exchangeQueuedMessageTable=exchangeQueuedMessageTable, expfIsPerUserReadDisabled=expfIsPerUserReadDisabled, exlStateFlags=exlStateFlags, exqSizeOfQueue=exqSizeOfQueue, exmLastLoggedOnUserAccount=exmLastLoggedOnUserAccount, expfWarningLimit=expfWarningLimit, exl2LinkId=exl2LinkId, excsIsUp=excsIsUp, exloClientVersion=exloClientVersion, exchangeQueueVirtualServerTable=exchangeQueueVirtualServerTable, exchangeLinkEntry=exchangeLinkEntry, exqxmActionDeleteNoNDR=exqxmActionDeleteNoNDR, exsqMSize=exsqMSize, exxlTypeRemoteDelivery=exxlTypeRemoteDelivery, exl2TypeLocalDelivery=exl2TypeLocalDelivery, exqsmReceived=exqsmReceived, exssServerState=exssServerState, exxlStateFlags=exxlStateFlags, exvsProtocolName=exvsProtocolName, exqsmProtocolName=exqsmProtocolName, exqCanEnumSender=exqCanEnumSender, expfTotalMessageSize=expfTotalMessageSize, exchangeX400QueueTable=exchangeX400QueueTable, exlIncreasingTime=exlIncreasingTime, exq2LinkId=exq2LinkId, exssClusterStateString=exssClusterStateString, exl2SupportedLinkActions=exl2SupportedLinkActions, exsDN=exsDN)
mibBuilder.exportSymbols("INFORMANT-WMI-EXCHANGE", exloRPCSucceeded=exloRPCSucceeded, expfPath=expfPath, exchangeQueuedX400MessageEntry=exchangeQueuedX400MessageEntry, exqmReceived=exqmReceived, exmMailboxDisplayName=exmMailboxDisplayName, exl2NextScheduledConnection=exl2NextScheduledConnection, exxqVirtualMachine=exxqVirtualMachine, exvsVirtualMachine=exvsVirtualMachine, exqCanEnumNOldestMessages=exqCanEnumNOldestMessages, exdsType=exdsType, exmtServerName=exmtServerName, exchangeLinkTable=exchangeLinkTable, exslStateScheduled=exslStateScheduled, exl2TypePendingRouting=exl2TypePendingRouting, exdsIndex=exdsIndex, excsDN=excsDN, exqxmVersion=exqxmVersion, exchangeClusterResourceEntry=exchangeClusterResourceEntry, exslStateRemote=exslStateRemote, exxlSupportedLinkActions=exxlSupportedLinkActions, exq2QueueName=exq2QueueName, exqsmVersion=exqsmVersion, exxlVirtualMachine=exxlVirtualMachine, exlStateRetry=exlStateRetry, exq2VirtualServerName=exq2VirtualServerName, exmtAttemptedPartnerServer=exmtAttemptedPartnerServer, exqmLinkName=exqmLinkName, expfLastModificationTime=expfLastModificationTime, exqsmLinkId=exqsmLinkId, exqsmLowPriority=exqsmLowPriority, exlStateActive=exlStateActive, exchangeX400QueueEntry=exchangeX400QueueEntry, exlTypePendingRouting=exlTypePendingRouting, exssName=exssName, exl2GlobalStop=exl2GlobalStop, exl2TypePendingSubmission=exl2TypePendingSubmission, expfUsePublicStoreAgeLimits=expfUsePublicStoreAgeLimits, exmAssocContentCount=exmAssocContentCount, exq2QueueId=exq2QueueId, exqxvsGlobalStop=exqxvsGlobalStop, exloServerName=exloServerName, exssUnreachable=exssUnreachable, exxlVirtualServerName=exxlVirtualServerName, exloProgressOperationRate=exloProgressOperationRate, exvsGlobalStop=exvsGlobalStop, exqxmVirtualServerName=exqxmVirtualServerName, exqsmHighPriority=exqsmHighPriority, exxlTypeDeferredDelivery=exxlTypeDeferredDelivery, expfHasChildren=expfHasChildren, exqmExpiry=exqmExpiry, exssServerMaintenance=exssServerMaintenance, exmtRecipientAddress=exmtRecipientAddress, exqMsgEnumFlagsSupported=exqMsgEnumFlagsSupported, exqxmReceived=exqxmReceived)
