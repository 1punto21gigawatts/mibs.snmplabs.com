#
# PySNMP MIB module Unisphere-Data-ROUTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Unisphere-Data-ROUTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:30:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter32, iso, Bits, Unsigned32, MibIdentifier, TimeTicks, NotificationType, IpAddress, Gauge32, ModuleIdentity, ObjectIdentity, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "Bits", "Unsigned32", "MibIdentifier", "TimeTicks", "NotificationType", "IpAddress", "Gauge32", "ModuleIdentity", "ObjectIdentity", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TruthValue")
UsdIpPolicyName, UsdIpPolicyExtendedCommunity = mibBuilder.importSymbols("Unisphere-Data-IP-POLICY-MIB", "UsdIpPolicyName", "UsdIpPolicyExtendedCommunity")
usDataMibs, = mibBuilder.importSymbols("Unisphere-Data-MIBs", "usDataMibs")
UsdName, = mibBuilder.importSymbols("Unisphere-Data-TC", "UsdName")
usdRouterMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32))
usdRouterMIB.setRevisions(('2002-05-10 18:16', '2001-01-24 18:25', '2000-01-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: usdRouterMIB.setRevisionsDescriptions(('Added support for router context name string.', 'Added support for VRF - virtual router forwarder. Support is defined by these objects/table: usdRouterVrf usdRouterVrfTable usdRouterVrfRouteTargetTable', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: usdRouterMIB.setLastUpdated('200205101816Z')
if mibBuilder.loadTexts: usdRouterMIB.setOrganization('Unisphere Networks, Inc.')
if mibBuilder.loadTexts: usdRouterMIB.setContactInfo(' Unisphere Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886 USA Tel: +1 978 589 5800 Email: mib@UnisphereNetworks.com')
if mibBuilder.loadTexts: usdRouterMIB.setDescription('The Router MIB is used to manage the creation and deletion as well as the administrative states of the protocols and functions that run within a designated router.')
class UsdNextRouterIndex(TextualConvention, Unsigned32):
    description = 'Coordinates routerIndex value allocation for entries in an associated router table. Clients must first read the routerIndex value from this object, then create an entry having the routerIndex value in the associated router table. The DESCRIPTION clause for an object of this type must identify the associated router table. A GET of this object returns the next available routerIndex value to be used to create an entry in the associated router table; or zero, if no valid routerIndex value is available. This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that routerIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously. Unless specified otherwise by its MAX-ACCESS and DESCRIPTION clauses, an object of this type is read-only, and a SET of such an object returns a notWritable error.'
    status = 'current'

class UsdRouterProtocolIndex(TextualConvention, Integer32):
    description = 'Identifies the router protocol.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))
    namedValues = NamedValues(("ip", 1), ("osi", 2), ("icmp", 3), ("igmp", 4), ("tcp", 5), ("udp", 6), ("bgp", 7), ("ospf", 8), ("isis", 9), ("rip", 10), ("snmp", 11), ("ntp", 12), ("generator", 13), ("localAddressServer", 14), ("dhcpProxy", 15), ("dhcpRelay", 16), ("nameResolver", 17), ("policyManager", 18), ("sscClient", 19), ("cops", 20), ("mgtm", 21), ("dvmrp", 22), ("pim", 23), ("msdp", 24), ("mpls", 25), ("radius", 26), ("mplsMgr", 27), ("dhcpLocalServer", 28))

usdRouterObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1))
usdRouterNextRouterIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 1), UsdNextRouterIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRouterNextRouterIndex.setStatus('current')
if mibBuilder.loadTexts: usdRouterNextRouterIndex.setDescription('Coordinates routerIndex and usdRouterVrfIndex value allocation for entries in the usdRouterTable and usdRouterVrfTable, respectively. A GET of this object returns the next available routerIndex value to be used to create an entry in the associated router table; or zero, if no valid routerIndex value is available. This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that routerIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously.')
usdRouterTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 2), )
if mibBuilder.loadTexts: usdRouterTable.setStatus('current')
if mibBuilder.loadTexts: usdRouterTable.setDescription('This table contains entries for routers present in the system.')
usdRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 2, 1), ).setIndexNames((0, "Unisphere-Data-ROUTER-MIB", "usdRouterIndex"))
if mibBuilder.loadTexts: usdRouterEntry.setStatus('current')
if mibBuilder.loadTexts: usdRouterEntry.setDescription('Each entry in this table represents a single router. Creating and/or deleting entries in this table causes corresponding entries to be created or deleted in the usdRouterProtocolTable. Note that VRFs also appear as entries in this table and can be differentiated by the usdRouterVrf object. The usdRouterVrfTable shows the parent / child relationship between routers and VRFs present in the system.')
usdRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: usdRouterIndex.setStatus('current')
if mibBuilder.loadTexts: usdRouterIndex.setDescription('The routerIndex of this router. When creating entries in this table, suitable values for this object are determined by reading usdRouterNextRouterIndex.')
usdRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 2, 1, 2), UsdName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRouterName.setStatus('current')
if mibBuilder.loadTexts: usdRouterName.setDescription('The administratively assigned name given to this router. The name must be unique within the context of this table and cannot be changed after the router instance is created.')
usdRouterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRouterRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdRouterRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdRouterRowStatus usdRouterName In addition, when creating an entry the following conditions must hold: A value for usdRouterIndex must have been determined previously by reading usdRouterNextRouterIndex. A corresponding entries in usdRouterProtocolTable are created/destroyed as a result of creating/destroying an entry in this table.')
usdRouterVrf = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRouterVrf.setStatus('current')
if mibBuilder.loadTexts: usdRouterVrf.setDescription('Identifies whether this router is a VRF or not. A value of true(1) indicates that this is a VRF; a value of false(2) indicates that it is not.')
usdRouterContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdRouterContextName.setStatus('current')
if mibBuilder.loadTexts: usdRouterContextName.setDescription('An internally derived/assigned name given to this router with a specific format: routerN where N is a decimal number (with no leading zeroes) in the range 1..16777215 corresponding to the value of the least significant 24 bits of the usdRouterIndex (the router UID). The name is unique within the context of this table.')
usdRouterProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 3), )
if mibBuilder.loadTexts: usdRouterProtocolTable.setStatus('current')
if mibBuilder.loadTexts: usdRouterProtocolTable.setDescription('This table contains entries for each protocol supported by the router entry created in the usdRouterTable.')
usdRouterProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 3, 1), ).setIndexNames((0, "Unisphere-Data-ROUTER-MIB", "usdRouterProtocolRouterIndex"), (0, "Unisphere-Data-ROUTER-MIB", "usdRouterProtocolProtocolIndex"))
if mibBuilder.loadTexts: usdRouterProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: usdRouterProtocolEntry.setDescription('Each entry provides administrative control on a router protocol for the router designated by the first indice to this table. The second indice identifies the router protocol. Entries in this table are created as a side-effect of row creation in the usdRouterTable or usdRouterVrfTable.')
usdRouterProtocolRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: usdRouterProtocolRouterIndex.setStatus('current')
if mibBuilder.loadTexts: usdRouterProtocolRouterIndex.setDescription('The routerIndex of this router. This object is the same as the usdRouterIndex object defined in the usdRouterTable.')
usdRouterProtocolProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 3, 1, 2), UsdRouterProtocolIndex())
if mibBuilder.loadTexts: usdRouterProtocolProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: usdRouterProtocolProtocolIndex.setDescription('Identities the router protocol.')
usdRouterProtocolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdRouterProtocolRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdRouterProtocolRowStatus.setDescription('Administrative control and status of a protocol on a router. The following values can be read from this object: active(1) - Indicates that the protocol on the designated router is created, configured, and running. notReady(3) - Indicates that the protocol requires additional configuration in a protocol specific MIB module. Examples include the BGP and OSPF protocols, which require additional configuration of protocol specific parameters such as: Autonomous System (AS) for BGP, and Process Id for OSPF. destroy(6) - The destroy(3) operation can fail if there are executing applications dependent on the protocol. If an attempt is made to destroy(6) an active(1) protocol that other applications are dependent on, the rowStatus will read destroy(6). Normally, when a row is destroyed, the agent will cleaup and remove the entry. The following values can be written to this object: active(1) - Activate protocol on the designated router. createAndGo(4) - Create protocol on designated router. The router indicated by usdRouterProtocolRouterIndex must already exist in the usdRouterTable. The value of the usdRouterProtocolProtocolIndex must be from the set of protocol values defined by the UsdRouterProtocolIndex type. destroy(6) - Destroy protocol on designated router. If the operation is successful, the agent will remove the entry. If the operation failed, the row will remain in the table with a rowStatus value of destroy(6). Conditions on destroy(6): 1) The default router can not be deleted. 2) The local router can not be deleted. A local router is defined as the router that sourced the SNMP request. Upon creation of a router in the usdRouterTable, some protocol entries will appear in this table by default, which indicates that these protocols are created by the action of creating a router. It is important to note, that this behavior may change over time by protocol type.')
usdRouterVrfTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4), )
if mibBuilder.loadTexts: usdRouterVrfTable.setStatus('current')
if mibBuilder.loadTexts: usdRouterVrfTable.setDescription('This table contains entries for each VRF on each router entry created in the usdRouterTable.')
usdRouterVrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1), ).setIndexNames((0, "Unisphere-Data-ROUTER-MIB", "usdRouterVrfRouterIndex"), (0, "Unisphere-Data-ROUTER-MIB", "usdRouterVrfRouterVrfIndex"))
if mibBuilder.loadTexts: usdRouterVrfEntry.setStatus('current')
if mibBuilder.loadTexts: usdRouterVrfEntry.setDescription('Each entry provides administrative control on a router VRF for the router designated by the first indice of this table. The second indice identifies the router VRF. The parent router must exist in the usdRouterTable before performing VRF row creation in this table')
usdRouterVrfRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: usdRouterVrfRouterIndex.setStatus('current')
if mibBuilder.loadTexts: usdRouterVrfRouterIndex.setDescription('The router index of this router, also referred to as the parent of the VRF. This object is the same as the usdRouterIndex object defined in the usdRouterTable.')
usdRouterVrfRouterVrfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: usdRouterVrfRouterVrfIndex.setStatus('current')
if mibBuilder.loadTexts: usdRouterVrfRouterVrfIndex.setDescription('The VRF router index for this entry, also referred as the child of the parent router, which is identified by the first indice to this table.')
usdRouterVrfImportRouteMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 3), UsdIpPolicyName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRouterVrfImportRouteMap.setStatus('current')
if mibBuilder.loadTexts: usdRouterVrfImportRouteMap.setDescription('The VRF router import route map.')
usdRouterVrfExportRouteMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 4), UsdIpPolicyName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRouterVrfExportRouteMap.setStatus('current')
if mibBuilder.loadTexts: usdRouterVrfExportRouteMap.setDescription('The VRF router export route map.')
usdRouterVrfRouteDistinguisher = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 5), UsdIpPolicyExtendedCommunity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRouterVrfRouteDistinguisher.setStatus('current')
if mibBuilder.loadTexts: usdRouterVrfRouteDistinguisher.setDescription('The VRF router route distinguisher.')
usdRouterVrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRouterVrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdRouterVrfRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy *** LIMITED CONFIGURATION LEVEL *** RowStatus createAndGo/destroy operations have the following special-purpose semantics: createAndGo Create an entry having the specified configuration and append it to the target list, i.e. create an usdRouterVrfEntry table entry with the associated characteristics. destroy Destroy the specified element. Entries in this table can be modified once the row has been created. To create an entry in this table, the following entry objects MUST be explicitly configured: A value for usdRouterVrfRouterIndex must have been determined previously by reading usdRouterNextRouterIndex. A parent router must exist in the usdRouterTable.')
usdRouterVrfRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 8), UsdName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRouterVrfRouterName.setStatus('current')
if mibBuilder.loadTexts: usdRouterVrfRouterName.setDescription('The administratively assigned name given to this VRF router. The name must be unique within the context of this table and cannot be changed after the router instance is created.')
usdRouterVrfRouterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRouterVrfRouterDescription.setStatus('current')
if mibBuilder.loadTexts: usdRouterVrfRouterDescription.setDescription('The administratively assigned description given to this VRF router.')
usdRouterVrfRouteTargetTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 5), )
if mibBuilder.loadTexts: usdRouterVrfRouteTargetTable.setStatus('current')
if mibBuilder.loadTexts: usdRouterVrfRouteTargetTable.setDescription('This table contains entries for each route target for the router/VRF entry created in the usdRouterTable and usdRouterVrfTable.')
usdRouterVrfRouteTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 5, 1), ).setIndexNames((0, "Unisphere-Data-ROUTER-MIB", "usdRouterVrfRouteTargetRouterIndex"), (0, "Unisphere-Data-ROUTER-MIB", "usdRouterVrfRouteTargetRouterVrfIndex"), (0, "Unisphere-Data-ROUTER-MIB", "usdRouterVrfRouteTargetAddrFormat"), (0, "Unisphere-Data-ROUTER-MIB", "usdRouterVrfRouteTargetRouteTarget"))
if mibBuilder.loadTexts: usdRouterVrfRouteTargetEntry.setStatus('current')
if mibBuilder.loadTexts: usdRouterVrfRouteTargetEntry.setDescription('Each entry provides administrative control on VRF route targets for the router/VRF pair designated by the first and second indice of this table. The third indice identifies the route target. The parent router must exist in the usdRouterTable and the VRF router must exist in the usdRouterVrfTable before performing creation of the route target in this table.')
usdRouterVrfRouteTargetRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: usdRouterVrfRouteTargetRouterIndex.setStatus('current')
if mibBuilder.loadTexts: usdRouterVrfRouteTargetRouterIndex.setDescription('The routerIndex of this router, also referred to as the parent of the VRF. This object is the same as the usdRouterIndex object defined in the usdRouterTable.')
usdRouterVrfRouteTargetRouterVrfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: usdRouterVrfRouteTargetRouterVrfIndex.setStatus('current')
if mibBuilder.loadTexts: usdRouterVrfRouteTargetRouterVrfIndex.setDescription('The VRF router index for this entry, also referred as the child of the parent router, which is identified by the first indice to this table.')
usdRouterVrfRouteTargetAddrFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("routeTargetFormatAsn", 0), ("routeTargetFormateIp", 1))))
if mibBuilder.loadTexts: usdRouterVrfRouteTargetAddrFormat.setStatus('current')
if mibBuilder.loadTexts: usdRouterVrfRouteTargetAddrFormat.setDescription('The address format of the route target.')
usdRouterVrfRouteTargetRouteTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 5, 1, 4), UsdIpPolicyExtendedCommunity())
if mibBuilder.loadTexts: usdRouterVrfRouteTargetRouteTarget.setStatus('current')
if mibBuilder.loadTexts: usdRouterVrfRouteTargetRouteTarget.setDescription('The VRF router route target.')
usdRouterVrfRouteTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("routeTargetInvalid", 0), ("routeTargetImport", 1), ("routeTargetExport", 2), ("routeTargetBoth", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRouterVrfRouteTargetType.setStatus('current')
if mibBuilder.loadTexts: usdRouterVrfRouteTargetType.setDescription('The VRF router route target type.')
usdRouterVrfRouteTargetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdRouterVrfRouteTargetRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdRouterVrfRouteTargetRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy *** LIMITED CONFIGURATION LEVEL *** RowStatus createAndGo/destroy operations have the following special-purpose semantics: createAndGo Create an entry having the specified configuration and append it to the target list, i.e., create an usdRouterVrfRouteTargetEntry table entry with the associated characteristics. destroy Destroy the specified element. To create an entry in this table, the following entry objects MUST be explicitly configured: A parent router must exist in the usdRouterTable. A VRF router must exist in the usdRouterVrfTable.')
usdRouterConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4))
usdRouterCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 1))
usdRouterGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 2))
usdRouterCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 1, 1)).setObjects(("Unisphere-Data-ROUTER-MIB", "usdRouterGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRouterCompliance = usdRouterCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: usdRouterCompliance.setDescription('An obsolete compliance statement for entities which implement the Unisphere Router MIB. This statement became obsolete when support was added for VRFs within routers.')
usdRouterCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 1, 2)).setObjects(("Unisphere-Data-ROUTER-MIB", "usdRouterGroup2"), ("Unisphere-Data-ROUTER-MIB", "usdRouterVrfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRouterCompliance2 = usdRouterCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: usdRouterCompliance2.setDescription('An obsolete compliance statement for entities which implement the Unisphere Router MIB. This statement became obsolete when support was added for the router context name.')
usdRouterCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 1, 3)).setObjects(("Unisphere-Data-ROUTER-MIB", "usdRouterGroup3"), ("Unisphere-Data-ROUTER-MIB", "usdRouterVrfGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRouterCompliance3 = usdRouterCompliance3.setStatus('current')
if mibBuilder.loadTexts: usdRouterCompliance3.setDescription('The compliance statement for entities which implement the Unisphere Router MIB.')
usdRouterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 2, 1)).setObjects(("Unisphere-Data-ROUTER-MIB", "usdRouterNextRouterIndex"), ("Unisphere-Data-ROUTER-MIB", "usdRouterName"), ("Unisphere-Data-ROUTER-MIB", "usdRouterRowStatus"), ("Unisphere-Data-ROUTER-MIB", "usdRouterProtocolRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRouterGroup = usdRouterGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdRouterGroup.setDescription('An obsolete collection of objects providing management of routers and routing protocols in a Unisphere product. This group became obsolete when support was added for VRFs within routers.')
usdRouterGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 2, 2)).setObjects(("Unisphere-Data-ROUTER-MIB", "usdRouterNextRouterIndex"), ("Unisphere-Data-ROUTER-MIB", "usdRouterName"), ("Unisphere-Data-ROUTER-MIB", "usdRouterRowStatus"), ("Unisphere-Data-ROUTER-MIB", "usdRouterVrf"), ("Unisphere-Data-ROUTER-MIB", "usdRouterProtocolRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRouterGroup2 = usdRouterGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: usdRouterGroup2.setDescription('An obsolete collection of objects providing management of routers and routing protocols in a Unisphere product. This group became obsolete when support was added for the router context name.')
usdRouterVrfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 2, 3)).setObjects(("Unisphere-Data-ROUTER-MIB", "usdRouterVrfImportRouteMap"), ("Unisphere-Data-ROUTER-MIB", "usdRouterVrfExportRouteMap"), ("Unisphere-Data-ROUTER-MIB", "usdRouterVrfRouteDistinguisher"), ("Unisphere-Data-ROUTER-MIB", "usdRouterVrfRowStatus"), ("Unisphere-Data-ROUTER-MIB", "usdRouterVrfRouterName"), ("Unisphere-Data-ROUTER-MIB", "usdRouterVrfRouteTargetType"), ("Unisphere-Data-ROUTER-MIB", "usdRouterVrfRouteTargetRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRouterVrfGroup = usdRouterVrfGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdRouterVrfGroup.setDescription('A collection of objects providing management of VRFs within routers in a Unisphere product.')
usdRouterGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 2, 4)).setObjects(("Unisphere-Data-ROUTER-MIB", "usdRouterNextRouterIndex"), ("Unisphere-Data-ROUTER-MIB", "usdRouterName"), ("Unisphere-Data-ROUTER-MIB", "usdRouterRowStatus"), ("Unisphere-Data-ROUTER-MIB", "usdRouterVrf"), ("Unisphere-Data-ROUTER-MIB", "usdRouterProtocolRowStatus"), ("Unisphere-Data-ROUTER-MIB", "usdRouterContextName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRouterGroup3 = usdRouterGroup3.setStatus('current')
if mibBuilder.loadTexts: usdRouterGroup3.setDescription('A collection of objects providing management of routers and routing protocols in a Unisphere product.')
usdRouterVrfGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 2, 5)).setObjects(("Unisphere-Data-ROUTER-MIB", "usdRouterVrfImportRouteMap"), ("Unisphere-Data-ROUTER-MIB", "usdRouterVrfExportRouteMap"), ("Unisphere-Data-ROUTER-MIB", "usdRouterVrfRouteDistinguisher"), ("Unisphere-Data-ROUTER-MIB", "usdRouterVrfRowStatus"), ("Unisphere-Data-ROUTER-MIB", "usdRouterVrfRouterName"), ("Unisphere-Data-ROUTER-MIB", "usdRouterVrfRouterDescription"), ("Unisphere-Data-ROUTER-MIB", "usdRouterVrfRouteTargetType"), ("Unisphere-Data-ROUTER-MIB", "usdRouterVrfRouteTargetRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdRouterVrfGroup2 = usdRouterVrfGroup2.setStatus('current')
if mibBuilder.loadTexts: usdRouterVrfGroup2.setDescription('A collection of objects providing management of VRFs within routers in a Unisphere product.')
mibBuilder.exportSymbols("Unisphere-Data-ROUTER-MIB", usdRouterVrfRouteTargetRouterVrfIndex=usdRouterVrfRouteTargetRouterVrfIndex, usdRouterCompliances=usdRouterCompliances, usdRouterVrfRouteTargetRouterIndex=usdRouterVrfRouteTargetRouterIndex, usdRouterVrfEntry=usdRouterVrfEntry, usdRouterVrfExportRouteMap=usdRouterVrfExportRouteMap, usdRouterVrfRouterDescription=usdRouterVrfRouterDescription, usdRouterVrfRouteTargetAddrFormat=usdRouterVrfRouteTargetAddrFormat, usdRouterCompliance2=usdRouterCompliance2, usdRouterCompliance=usdRouterCompliance, usdRouterGroup3=usdRouterGroup3, usdRouterVrfGroup=usdRouterVrfGroup, usdRouterVrfRouteTargetRowStatus=usdRouterVrfRouteTargetRowStatus, usdRouterVrfRouteDistinguisher=usdRouterVrfRouteDistinguisher, usdRouterTable=usdRouterTable, usdRouterProtocolTable=usdRouterProtocolTable, usdRouterProtocolRouterIndex=usdRouterProtocolRouterIndex, usdRouterCompliance3=usdRouterCompliance3, usdRouterMIB=usdRouterMIB, usdRouterVrfRouterIndex=usdRouterVrfRouterIndex, usdRouterName=usdRouterName, usdRouterIndex=usdRouterIndex, usdRouterVrfRouteTargetType=usdRouterVrfRouteTargetType, usdRouterVrf=usdRouterVrf, UsdNextRouterIndex=UsdNextRouterIndex, PYSNMP_MODULE_ID=usdRouterMIB, usdRouterEntry=usdRouterEntry, usdRouterRowStatus=usdRouterRowStatus, usdRouterVrfTable=usdRouterVrfTable, usdRouterProtocolRowStatus=usdRouterProtocolRowStatus, usdRouterVrfRouteTargetEntry=usdRouterVrfRouteTargetEntry, usdRouterVrfGroup2=usdRouterVrfGroup2, usdRouterProtocolProtocolIndex=usdRouterProtocolProtocolIndex, usdRouterVrfRouterName=usdRouterVrfRouterName, usdRouterVrfRouteTargetRouteTarget=usdRouterVrfRouteTargetRouteTarget, usdRouterConformance=usdRouterConformance, usdRouterGroup=usdRouterGroup, usdRouterProtocolEntry=usdRouterProtocolEntry, usdRouterGroup2=usdRouterGroup2, usdRouterVrfImportRouteMap=usdRouterVrfImportRouteMap, usdRouterGroups=usdRouterGroups, usdRouterNextRouterIndex=usdRouterNextRouterIndex, UsdRouterProtocolIndex=UsdRouterProtocolIndex, usdRouterVrfRowStatus=usdRouterVrfRowStatus, usdRouterVrfRouteTargetTable=usdRouterVrfRouteTargetTable, usdRouterObjects=usdRouterObjects, usdRouterContextName=usdRouterContextName, usdRouterVrfRouterVrfIndex=usdRouterVrfRouterVrfIndex)
