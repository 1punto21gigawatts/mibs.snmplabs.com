#
# PySNMP MIB module PCE-PCEP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PCE-PCEP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:37:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, mib_2, NotificationType, IpAddress, Integer32, Counter32, Bits, Unsigned32, TimeTicks, MibIdentifier, ObjectIdentity, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "mib-2", "NotificationType", "IpAddress", "Integer32", "Counter32", "Bits", "Unsigned32", "TimeTicks", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "iso")
TimeStamp, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TruthValue", "DisplayString", "TextualConvention")
pcePcepMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 227))
pcePcepMIB.setRevisions(('2014-12-17 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pcePcepMIB.setRevisionsDescriptions(('Initial version, published as RFC 7420.',))
if mibBuilder.loadTexts: pcePcepMIB.setLastUpdated('201412171200Z')
if mibBuilder.loadTexts: pcePcepMIB.setOrganization('IETF Path Computation Element (PCE) Working Group')
if mibBuilder.loadTexts: pcePcepMIB.setContactInfo('Email: pce@ietf.org WG charter: http://datatracker.ietf.org/wg/pce/charter/')
if mibBuilder.loadTexts: pcePcepMIB.setDescription("This MIB module defines a collection of objects for managing the Path Computation Element Communication Protocol (PCEP). Copyright (c) 2014 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info).")
pcePcepNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 227, 0))
pcePcepObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 227, 1))
pcePcepConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 227, 2))
pcePcepEntityTable = MibTable((1, 3, 6, 1, 2, 1, 227, 1, 1), )
if mibBuilder.loadTexts: pcePcepEntityTable.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityTable.setDescription('This table contains information about local PCEP entities. The entries in this table are read-only.')
pcePcepEntityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 227, 1, 1, 1), ).setIndexNames((0, "PCE-PCEP-MIB", "pcePcepEntityIndex"))
if mibBuilder.loadTexts: pcePcepEntityEntry.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityEntry.setDescription('This entry represents a local PCEP entity.')
pcePcepEntityIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: pcePcepEntityIndex.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityIndex.setDescription('This index is used to uniquely identify the PCEP entity.')
pcePcepEntityAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("adminStatusUp", 1), ("adminStatusDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntityAdminStatus.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityAdminStatus.setDescription('The administrative status of this PCEP entity. This is the desired operational status as currently set by an operator or by default in the implementation. The value of pcePcepEntityOperStatus represents the current status of an attempt to reach this desired status.')
pcePcepEntityOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("operStatusUp", 1), ("operStatusDown", 2), ("operStatusGoingUp", 3), ("operStatusGoingDown", 4), ("operStatusFailed", 5), ("operStatusFailedPerm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntityOperStatus.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityOperStatus.setDescription('The operational status of the PCEP entity. It takes one of the following values. - operStatusUp(1): the PCEP entity is active. - operStatusDown(2): the PCEP entity is inactive. - operStatusGoingUp(3): the PCEP entity is activating. - operStatusGoingDown(4): the PCEP entity is deactivating. - operStatusFailed(5): the PCEP entity has failed and will recover when possible. - operStatusFailedPerm(6): the PCEP entity has failed and will not recover without operator intervention.')
pcePcepEntityAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntityAddrType.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityAddrType.setDescription("The type of the PCEP entity's Internet address. This object specifies how the value of the pcePcepEntityAddr object should be interpreted. Only values unknown(0), ipv4(1), or ipv6(2) are supported.")
pcePcepEntityAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntityAddr.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityAddr.setDescription('The local Internet address of this PCEP entity. The type is given by pcePcepEntityAddrType. If operating as a PCE server, the PCEP entity listens on this address. If operating as a PCC, the PCEP entity binds outgoing TCP connections to this address. It is possible for the PCEP entity to operate both as a PCC and a PCE server, in which case it uses this address both to listen for incoming TCP connections and to bind outgoing TCP connections.')
pcePcepEntityConnectTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntityConnectTimer.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityConnectTimer.setDescription('The time that the PCEP entity will wait to establish a TCP connection with a peer. If a TCP connection is not established within this time, then PCEP aborts the session setup attempt.')
pcePcepEntityConnectMaxRetry = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntityConnectMaxRetry.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityConnectMaxRetry.setDescription('The maximum number of times the system tries to establish a TCP connection to a peer before the session with the peer transitions to the idle state. When the session transitions to the idle state: - pcePcepPeerSessionExists transitions to false(2). - the associated PcePcepSessEntry is deleted. - a backoff timer runs before the session is tried again.')
pcePcepEntityInitBackoffTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntityInitBackoffTimer.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityInitBackoffTimer.setDescription('The initial backoff time for retrying a failed session setup attempt to a peer. The backoff time increases for each failed session setup attempt, until a maximum backoff time is reached. The maximum backoff time is pcePcepEntityMaxBackoffTimer.')
pcePcepEntityMaxBackoffTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntityMaxBackoffTimer.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityMaxBackoffTimer.setDescription('The maximum backoff time for retrying a failed session setup attempt to a peer. The backoff time increases for each failed session setup attempt, until this maximum value is reached. Session setup attempts then repeats periodically without any further increase in backoff time.')
pcePcepEntityOpenWaitTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntityOpenWaitTimer.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityOpenWaitTimer.setDescription('The time that the PCEP entity will wait to receive an Open message from a peer after the TCP connection has come up. If no Open message is received within this time, then PCEP terminates the TCP connection and deletes the associated PcePcepSessEntry.')
pcePcepEntityKeepWaitTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntityKeepWaitTimer.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityKeepWaitTimer.setDescription('The time that the PCEP entity will wait to receive a Keepalive or PCErr message from a peer during session initialization after receiving an Open message. If no Keepalive or PCErr message is received within this time, then PCEP terminates the TCP connection and deletes the associated PcePcepSessEntry.')
pcePcepEntityKeepAliveTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntityKeepAliveTimer.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityKeepAliveTimer.setDescription('The Keepalive transmission timer that this PCEP entity will propose in the initial OPEN message of each session it is involved in. This is the maximum time between two consecutive messages sent to a peer. Zero means that the PCEP entity prefers not to send Keepalives at all. Note that the actual Keepalive transmission intervals, in either direction of an active PCEP session, are determined by negotiation between the peers as specified by RFC 5440, and so may differ from this configured value. For the actually negotiated values (per session), see pcePcepSessKeepaliveTimer and pcePcepSessPeerKeepaliveTimer.')
pcePcepEntityDeadTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntityDeadTimer.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityDeadTimer.setDescription('The DeadTimer that this PCEP entity will propose in the initial OPEN message of each session it is involved in. This is the time after which a peer should declare a session down if it does not receive any PCEP messages. Zero suggests that the peer does not run a DeadTimer at all.')
pcePcepEntityAllowNegotiation = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntityAllowNegotiation.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityAllowNegotiation.setDescription('Whether the PCEP entity will permit negotiation of session parameters.')
pcePcepEntityMaxKeepAliveTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntityMaxKeepAliveTimer.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityMaxKeepAliveTimer.setDescription('In PCEP session parameter negotiation, the maximum value that this PCEP entity will accept from a peer for the interval between Keepalive transmissions. Zero means that the PCEP entity will allow no Keepalive transmission at all.')
pcePcepEntityMaxDeadTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntityMaxDeadTimer.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityMaxDeadTimer.setDescription('In PCEP session parameter negotiation, the maximum value that this PCEP entity will accept from a peer for the DeadTimer. Zero means that the PCEP entity will allow not running a DeadTimer.')
pcePcepEntityMinKeepAliveTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntityMinKeepAliveTimer.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityMinKeepAliveTimer.setDescription('In PCEP session parameter negotiation, the minimum value that this PCEP entity will accept for the interval between Keepalive transmissions. Zero means that the PCEP entity insists on no Keepalive transmission at all.')
pcePcepEntityMinDeadTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntityMinDeadTimer.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityMinDeadTimer.setDescription('In PCEP session parameter negotiation, the minimum value that this PCEP entity will accept for the DeadTimer. Zero means that the PCEP entity insists on not running a DeadTimer.')
pcePcepEntitySyncTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntitySyncTimer.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntitySyncTimer.setDescription('The value of SyncTimer is used in the case of a synchronized path computation request using the SVEC object. Consider the case where a PCReq message is received by a PCE that contains the SVEC object referring to M synchronized path computation requests. If after the expiration of the SyncTimer all the M path computation requests have not been received, a protocol error is triggered and the PCE MUST cancel the whole set of path computation requests. The aim of the SyncTimer is to avoid the storage of unused synchronized requests should one of them get lost for some reason (for example, a misbehaving PCC). A value of zero is returned if and only if the entity does not use the SyncTimer.')
pcePcepEntityRequestTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntityRequestTimer.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityRequestTimer.setDescription('The maximum time that the PCEP entity will wait for a response to a PCReq message.')
pcePcepEntityMaxSessions = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntityMaxSessions.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityMaxSessions.setDescription('The maximum number of sessions involving this PCEP entity that can exist at any time.')
pcePcepEntityMaxUnknownReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntityMaxUnknownReqs.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityMaxUnknownReqs.setDescription('The maximum number of unrecognized requests and replies that any session on this PCEP entity is willing to accept per minute before terminating the session. A PCRep message contains an unrecognized reply if it contains an RP object whose request ID does not correspond to any in-progress request sent by this PCEP entity. A PCReq message contains an unrecognized request if it contains an RP object whose request ID is zero.')
pcePcepEntityMaxUnknownMsgs = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepEntityMaxUnknownMsgs.setStatus('current')
if mibBuilder.loadTexts: pcePcepEntityMaxUnknownMsgs.setDescription('The maximum number of unknown messages that any session on this PCEP entity is willing to accept per minute before terminating the session.')
pcePcepPeerTable = MibTable((1, 3, 6, 1, 2, 1, 227, 1, 2), )
if mibBuilder.loadTexts: pcePcepPeerTable.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerTable.setDescription('This table contains information about peers known by the local PCEP entity. The entries in this table are read-only. This table gives peer information that spans PCEP sessions. Information about current PCEP sessions can be found in the pcePcepSessTable table.')
pcePcepPeerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 227, 1, 2, 1), ).setIndexNames((0, "PCE-PCEP-MIB", "pcePcepEntityIndex"), (0, "PCE-PCEP-MIB", "pcePcepPeerAddrType"), (0, "PCE-PCEP-MIB", "pcePcepPeerAddr"))
if mibBuilder.loadTexts: pcePcepPeerEntry.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerEntry.setDescription('Information about a single peer that spans all PCEP sessions to that peer.')
pcePcepPeerAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: pcePcepPeerAddrType.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerAddrType.setDescription("The type of the peer's Internet address. This object specifies how the value of the pcePcepPeerAddr object should be interpreted. Only values unknown(0), ipv4(1), or ipv6(2) are supported.")
pcePcepPeerAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: pcePcepPeerAddr.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerAddr.setDescription('The Internet address of the peer. The type is given by pcePcepPeerAddrType.')
pcePcepPeerRole = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("pcc", 1), ("pce", 2), ("pccAndPce", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerRole.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerRole.setDescription("The role that this peer took the last time a session was established. It takes one of the following values. - unknown(0): this peer's role is not known. - pcc(1): this peer is a Path Computation Client (PCC). - pce(2): this peer is a Path Computation Element (PCE). - pccAndPce(3): this peer is both a PCC and a PCE.")
pcePcepPeerDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerDiscontinuityTime.setDescription('The value of sysUpTime at the time that the information and statistics in this row were last reset.')
pcePcepPeerInitiateSession = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerInitiateSession.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerInitiateSession.setDescription('Indicates whether the local PCEP entity initiates sessions to this peer or waits for the peer to initiate a session.')
pcePcepPeerSessionExists = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerSessionExists.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerSessionExists.setDescription('Indicates whether a session with this peer currently exists.')
pcePcepPeerNumSessSetupOK = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumSessSetupOK.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumSessSetupOK.setDescription('The number of PCEP sessions successfully established with the peer, including any current session. This counter is incremented each time a session with this peer is successfully established.')
pcePcepPeerNumSessSetupFail = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumSessSetupFail.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumSessSetupFail.setDescription('The number of PCEP sessions with the peer that have been attempted but failed before being fully established. This counter is incremented each time a session retry to this peer fails.')
pcePcepPeerSessionUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerSessionUpTime.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerSessionUpTime.setDescription('The value of sysUpTime the last time a session with this peer was successfully established. If pcePcepPeerNumSessSetupOK is zero, then this object contains zero.')
pcePcepPeerSessionFailTime = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerSessionFailTime.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerSessionFailTime.setDescription('The value of sysUpTime the last time a session with this peer failed to be established. If pcePcepPeerNumSessSetupFail is zero, then this object contains zero.')
pcePcepPeerSessionFailUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerSessionFailUpTime.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerSessionFailUpTime.setDescription('The value of sysUpTime the last time a session with this peer failed from active. If pcePcepPeerNumSessSetupOK is zero, then this object contains zero.')
pcePcepPeerAvgRspTime = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 12), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerAvgRspTime.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerAvgRspTime.setDescription('The average response time for this peer. If an average response time has not been calculated for this peer, then this object has the value zero. If pcePcepPeerRole is pcc, then this field is meaningless and is set to zero.')
pcePcepPeerLWMRspTime = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 13), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerLWMRspTime.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerLWMRspTime.setDescription('The smallest (low-water mark) response time seen from this peer. If no responses have been received from this peer, then this object has the value zero. If pcePcepPeerRole is pcc, then this field is meaningless and is set to zero.')
pcePcepPeerHWMRspTime = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 14), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerHWMRspTime.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerHWMRspTime.setDescription('The greatest (high-water mark) response time seen from this peer. If no responses have been received from this peer, then this object has the value zero. If pcePcepPeerRole is pcc, then this field is meaningless and is set to zero.')
pcePcepPeerNumPCReqSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumPCReqSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumPCReqSent.setDescription('The number of PCReq messages sent to this peer.')
pcePcepPeerNumPCReqRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumPCReqRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumPCReqRcvd.setDescription('The number of PCReq messages received from this peer.')
pcePcepPeerNumPCRepSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumPCRepSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumPCRepSent.setDescription('The number of PCRep messages sent to this peer.')
pcePcepPeerNumPCRepRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumPCRepRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumPCRepRcvd.setDescription('The number of PCRep messages received from this peer.')
pcePcepPeerNumPCErrSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumPCErrSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumPCErrSent.setDescription('The number of PCErr messages sent to this peer.')
pcePcepPeerNumPCErrRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumPCErrRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumPCErrRcvd.setDescription('The number of PCErr messages received from this peer.')
pcePcepPeerNumPCNtfSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumPCNtfSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumPCNtfSent.setDescription('The number of PCNtf messages sent to this peer.')
pcePcepPeerNumPCNtfRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumPCNtfRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumPCNtfRcvd.setDescription('The number of PCNtf messages received from this peer.')
pcePcepPeerNumKeepaliveSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumKeepaliveSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumKeepaliveSent.setDescription('The number of Keepalive messages sent to this peer.')
pcePcepPeerNumKeepaliveRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumKeepaliveRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumKeepaliveRcvd.setDescription('The number of Keepalive messages received from this peer.')
pcePcepPeerNumUnknownRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumUnknownRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumUnknownRcvd.setDescription('The number of unknown messages received from this peer.')
pcePcepPeerNumCorruptRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumCorruptRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumCorruptRcvd.setDescription('The number of corrupted PCEP messages received from this peer.')
pcePcepPeerNumReqSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumReqSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumReqSent.setDescription('The number of requests sent to this peer. A request corresponds 1:1 with an RP object in a PCReq message. This might be greater than pcePcepPeerNumPCReqSent because multiple requests can be batched into a single PCReq message.')
pcePcepPeerNumSvecSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumSvecSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumSvecSent.setDescription('The number of SVEC objects sent to this peer in PCReq messages. An SVEC object represents a set of synchronized requests.')
pcePcepPeerNumSvecReqSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumSvecReqSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumSvecReqSent.setDescription('The number of requests sent to this peer that appeared in one or more SVEC objects.')
pcePcepPeerNumReqSentPendRep = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumReqSentPendRep.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumReqSentPendRep.setDescription('The number of requests that have been sent to this peer for which a response is still pending.')
pcePcepPeerNumReqSentEroRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumReqSentEroRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumReqSentEroRcvd.setDescription('The number of requests that have been sent to this peer for which a response with an ERO was received. Such responses indicate that a path was successfully computed by the peer.')
pcePcepPeerNumReqSentNoPathRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumReqSentNoPathRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumReqSentNoPathRcvd.setDescription('The number of requests that have been sent to this peer for which a response with a NO-PATH object was received. Such responses indicate that the peer could not find a path to satisfy the request.')
pcePcepPeerNumReqSentCancelRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumReqSentCancelRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumReqSentCancelRcvd.setDescription('The number of requests that were canceled by the peer with a PCNtf message. This might be different than pcePcepPeerNumPCNtfRcvd because not all PCNtf messages are used to cancel requests, and a single PCNtf message can cancel multiple requests.')
pcePcepPeerNumReqSentErrorRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumReqSentErrorRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumReqSentErrorRcvd.setDescription('The number of requests that were rejected by the peer with a PCErr message. This might be different than pcePcepPeerNumPCErrRcvd because not all PCErr messages are used to reject requests, and a single PCErr message can reject multiple requests.')
pcePcepPeerNumReqSentTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumReqSentTimeout.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumReqSentTimeout.setDescription('The number of requests that have been sent to a peer and have been abandoned because the peer has taken too long to respond to them.')
pcePcepPeerNumReqSentCancelSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumReqSentCancelSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumReqSentCancelSent.setDescription('The number of requests that were sent to the peer and explicitly canceled by the local PCEP entity sending a PCNtf.')
pcePcepPeerNumReqSentClosed = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumReqSentClosed.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumReqSentClosed.setDescription('The number of requests that were sent to the peer and implicitly canceled when the session they were sent over was closed.')
pcePcepPeerNumReqRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumReqRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumReqRcvd.setDescription('The number of requests received from this peer. A request corresponds 1:1 with an RP object in a PCReq message. This might be greater than pcePcepPeerNumPCReqRcvd because multiple requests can be batched into a single PCReq message.')
pcePcepPeerNumSvecRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumSvecRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumSvecRcvd.setDescription('The number of SVEC objects received from this peer in PCReq messages. An SVEC object represents a set of synchronized requests.')
pcePcepPeerNumSvecReqRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumSvecReqRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumSvecReqRcvd.setDescription('The number of requests received from this peer that appeared in one or more SVEC objects.')
pcePcepPeerNumReqRcvdPendRep = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumReqRcvdPendRep.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumReqRcvdPendRep.setDescription('The number of requests that have been received from this peer for which a response is still pending.')
pcePcepPeerNumReqRcvdEroSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumReqRcvdEroSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumReqRcvdEroSent.setDescription('The number of requests that have been received from this peer for which a response with an ERO was sent. Such responses indicate that a path was successfully computed by the local PCEP entity.')
pcePcepPeerNumReqRcvdNoPathSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumReqRcvdNoPathSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumReqRcvdNoPathSent.setDescription('The number of requests that have been received from this peer for which a response with a NO-PATH object was sent. Such responses indicate that the local PCEP entity could not find a path to satisfy the request.')
pcePcepPeerNumReqRcvdCancelSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumReqRcvdCancelSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumReqRcvdCancelSent.setDescription('The number of requests received from this peer that were canceled by the local PCEP entity sending a PCNtf message. This might be different than pcePcepPeerNumPCNtfSent because not all PCNtf messages are used to cancel requests, and a single PCNtf message can cancel multiple requests.')
pcePcepPeerNumReqRcvdErrorSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumReqRcvdErrorSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumReqRcvdErrorSent.setDescription('The number of requests received from this peer that were rejected by the local PCEP entity sending a PCErr message. This might be different than pcePcepPeerNumPCErrSent because not all PCErr messages are used to reject requests, and a single PCErr message can reject multiple requests.')
pcePcepPeerNumReqRcvdCancelRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumReqRcvdCancelRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumReqRcvdCancelRcvd.setDescription('The number of requests that were received from the peer and explicitly canceled by the peer sending a PCNtf.')
pcePcepPeerNumReqRcvdClosed = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumReqRcvdClosed.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumReqRcvdClosed.setDescription('The number of requests that were received from the peer and implicitly canceled when the session they were received over was closed.')
pcePcepPeerNumRepRcvdUnknown = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumRepRcvdUnknown.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumRepRcvdUnknown.setDescription('The number of responses to unknown requests received from this peer. A response to an unknown request is a response whose RP object does not contain the request ID of any request that is currently outstanding on the session.')
pcePcepPeerNumReqRcvdUnknown = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerNumReqRcvdUnknown.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerNumReqRcvdUnknown.setDescription('The number of unknown requests that have been received from a peer. An unknown request is a request whose RP object contains a request ID of zero.')
pcePcepSessTable = MibTable((1, 3, 6, 1, 2, 1, 227, 1, 3), )
if mibBuilder.loadTexts: pcePcepSessTable.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessTable.setDescription('A table of PCEP sessions that involve the local PCEP entity. Each entry in this table represents a single session. The entries in this table are read-only. An entry appears in this table when the corresponding PCEP session transitions out of idle state. If the PCEP session transitions back into an idle state, then the corresponding entry in this table is removed.')
pcePcepSessEntry = MibTableRow((1, 3, 6, 1, 2, 1, 227, 1, 3, 1), ).setIndexNames((0, "PCE-PCEP-MIB", "pcePcepEntityIndex"), (0, "PCE-PCEP-MIB", "pcePcepPeerAddrType"), (0, "PCE-PCEP-MIB", "pcePcepPeerAddr"), (0, "PCE-PCEP-MIB", "pcePcepSessInitiator"))
if mibBuilder.loadTexts: pcePcepSessEntry.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessEntry.setDescription('This entry represents a single PCEP session in which the local PCEP entity participates. This entry exists only if the corresponding PCEP session has been initialized by some event, such as manual user configuration, auto-discovery of a peer, or an incoming TCP connection.')
pcePcepSessInitiator = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2))))
if mibBuilder.loadTexts: pcePcepSessInitiator.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessInitiator.setDescription('The initiator of the session; that is, whether the TCP connection was initiated by the local PCEP entity or the peer. There is a window during session initialization where two sessions can exist between a pair of PCEP speakers, each initiated by one of the speakers. One of these sessions is always discarded before it leaves OpenWait state. However, before it is discarded, two sessions to the given peer appear transiently in this MIB module. The sessions are distinguished by who initiated them, and so this field is an index for pcePcepSessTable.')
pcePcepSessStateLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessStateLastChange.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessStateLastChange.setDescription('The value of sysUpTime at the time this session entered its current state as denoted by the pcePcepSessState object.')
pcePcepSessState = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tcpPending", 1), ("openWait", 2), ("keepWait", 3), ("sessionUp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessState.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessState.setDescription('The current state of the session. The set of possible states excludes the idle state since entries do not exist in this table in the idle state.')
pcePcepSessConnectRetry = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessConnectRetry.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessConnectRetry.setDescription('The number of times that the local PCEP entity has attempted to establish a TCP connection for this session without success. The PCEP entity gives up when this reaches pcePcepEntityConnectMaxRetry.')
pcePcepSessLocalID = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessLocalID.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessLocalID.setDescription('The value of the PCEP session ID used by the local PCEP entity in the Open message for this session. If pcePcepSessState is tcpPending, then this is the session ID that will be used in the Open message. Otherwise, this is the session ID that was sent in the Open message.')
pcePcepSessRemoteID = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessRemoteID.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessRemoteID.setDescription('The value of the PCEP session ID used by the peer in its Open message for this session. If pcePcepSessState is tcpPending or openWait, then this field is not used and MUST be set to zero.')
pcePcepSessKeepaliveTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessKeepaliveTimer.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessKeepaliveTimer.setDescription('The agreed maximum interval at which the local PCEP entity transmits PCEP messages on this PCEP session. Zero means that the local PCEP entity never sends Keepalives on this session. This field is used if and only if pcePcepSessState is sessionUp. Otherwise, it is not used and MUST be set to zero.')
pcePcepSessPeerKeepaliveTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessPeerKeepaliveTimer.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessPeerKeepaliveTimer.setDescription('The agreed maximum interval at which the peer transmits PCEP messages on this PCEP session. Zero means that the peer never sends Keepalives on this session. This field is used if and only if pcePcepSessState is sessionUp. Otherwise, it is not used and MUST be set to zero.')
pcePcepSessDeadTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessDeadTimer.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessDeadTimer.setDescription('The DeadTimer interval for this PCEP session.')
pcePcepSessPeerDeadTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessPeerDeadTimer.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessPeerDeadTimer.setDescription("The peer's DeadTimer interval for this PCEP session. If pcePcepSessState is tcpPending or openWait, then this field is not used and MUST be set to zero.")
pcePcepSessKAHoldTimeRem = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessKAHoldTimeRem.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessKAHoldTimeRem.setDescription('The Keepalive hold time remaining for this session. If pcePcepSessState is tcpPending or openWait, then this field is not used and MUST be set to zero.')
pcePcepSessOverloaded = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessOverloaded.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessOverloaded.setDescription('If the local PCEP entity has informed the peer that it is currently overloaded, then this is set to true. Otherwise, it is set to false.')
pcePcepSessOverloadTime = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 13), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessOverloadTime.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessOverloadTime.setDescription('The interval of time that is remaining until the local PCEP entity will cease to be overloaded on this session. This field is only used if pcePcepSessOverloaded is set to true. Otherwise, it is not used and MUST be set to zero.')
pcePcepSessPeerOverloaded = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessPeerOverloaded.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessPeerOverloaded.setDescription('If the peer has informed the local PCEP entity that it is currently overloaded, then this is set to true. Otherwise, it is set to false.')
pcePcepSessPeerOverloadTime = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 15), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessPeerOverloadTime.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessPeerOverloadTime.setDescription('The interval of time that is remaining until the peer will cease to be overloaded. If it is not known how long the peer will stay in overloaded state, this field is set to zero. This field is only used if pcePcepSessPeerOverloaded is set to true. Otherwise, it is not used and MUST be set to zero.')
pcePcepSessDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessDiscontinuityTime.setDescription('The value of sysUpTime at the time that the statistics in this row were last reset.')
pcePcepSessAvgRspTime = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 17), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessAvgRspTime.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessAvgRspTime.setDescription('The average response time for this peer on this session. If an average response time has not been calculated for this peer, then this object has the value zero.')
pcePcepSessLWMRspTime = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 18), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessLWMRspTime.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessLWMRspTime.setDescription('The smallest (low-water mark) response time seen from this peer on this session. If no responses have been received from this peer, then this object has the value zero.')
pcePcepSessHWMRspTime = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 19), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessHWMRspTime.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessHWMRspTime.setDescription('The greatest (high-water mark) response time seen from this peer on this session. If no responses have been received from this peer, then this object has the value zero.')
pcePcepSessNumPCReqSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumPCReqSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumPCReqSent.setDescription('The number of PCReq messages sent on this session.')
pcePcepSessNumPCReqRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumPCReqRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumPCReqRcvd.setDescription('The number of PCReq messages received on this session.')
pcePcepSessNumPCRepSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumPCRepSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumPCRepSent.setDescription('The number of PCRep messages sent on this session.')
pcePcepSessNumPCRepRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumPCRepRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumPCRepRcvd.setDescription('The number of PCRep messages received on this session.')
pcePcepSessNumPCErrSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumPCErrSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumPCErrSent.setDescription('The number of PCErr messages sent on this session.')
pcePcepSessNumPCErrRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumPCErrRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumPCErrRcvd.setDescription('The number of PCErr messages received on this session.')
pcePcepSessNumPCNtfSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumPCNtfSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumPCNtfSent.setDescription('The number of PCNtf messages sent on this session.')
pcePcepSessNumPCNtfRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumPCNtfRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumPCNtfRcvd.setDescription('The number of PCNtf messages received on this session.')
pcePcepSessNumKeepaliveSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumKeepaliveSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumKeepaliveSent.setDescription('The number of Keepalive messages sent on this session.')
pcePcepSessNumKeepaliveRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumKeepaliveRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumKeepaliveRcvd.setDescription('The number of Keepalive messages received on this session.')
pcePcepSessNumUnknownRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumUnknownRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumUnknownRcvd.setDescription('The number of unknown messages received on this session.')
pcePcepSessNumCorruptRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumCorruptRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumCorruptRcvd.setDescription('The number of corrupted PCEP messages received on this session.')
pcePcepSessNumReqSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumReqSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumReqSent.setDescription('The number of requests sent on this session. A request corresponds 1:1 with an RP object in a PCReq message. This might be greater than pcePcepSessNumPCReqSent because multiple requests can be batched into a single PCReq message.')
pcePcepSessNumSvecSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumSvecSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumSvecSent.setDescription('The number of SVEC objects sent on this session in PCReq messages. An SVEC object represents a set of synchronized requests.')
pcePcepSessNumSvecReqSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumSvecReqSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumSvecReqSent.setDescription('The number of requests sent on this session that appeared in one or more SVEC objects.')
pcePcepSessNumReqSentPendRep = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumReqSentPendRep.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumReqSentPendRep.setDescription('The number of requests that have been sent on this session for which a response is still pending.')
pcePcepSessNumReqSentEroRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumReqSentEroRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumReqSentEroRcvd.setDescription('The number of successful responses received on this session. A response corresponds 1:1 with an RP object in a PCRep message. A successful response is a response for which an ERO was successfully computed.')
pcePcepSessNumReqSentNoPathRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumReqSentNoPathRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumReqSentNoPathRcvd.setDescription('The number of unsuccessful responses received on this session. A response corresponds 1:1 with an RP object in a PCRep message. An unsuccessful response is a response with a NO-PATH object.')
pcePcepSessNumReqSentCancelRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumReqSentCancelRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumReqSentCancelRcvd.setDescription('The number of requests sent on this session that were canceled by the peer with a PCNtf message. This might be different than pcePcepSessNumPCNtfRcvd because not all PCNtf messages are used to cancel requests, and a single PCNtf message can cancel multiple requests.')
pcePcepSessNumReqSentErrorRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumReqSentErrorRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumReqSentErrorRcvd.setDescription('The number of requests sent on this session that were rejected by the peer with a PCErr message. This might be different than pcePcepSessNumPCErrRcvd because not all PCErr messages are used to reject requests, and a single PCErr message can reject multiple requests.')
pcePcepSessNumReqSentTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumReqSentTimeout.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumReqSentTimeout.setDescription('The number of requests sent on this session that have been sent to a peer and have been abandoned because the peer has taken too long to respond to them.')
pcePcepSessNumReqSentCancelSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumReqSentCancelSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumReqSentCancelSent.setDescription('The number of requests sent on this session that were sent to the peer and explicitly canceled by the local PCEP entity sending a PCNtf.')
pcePcepSessNumReqRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumReqRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumReqRcvd.setDescription('The number of requests received on this session. A request corresponds 1:1 with an RP object in a PCReq message. This might be greater than pcePcepSessNumPCReqRcvd because multiple requests can be batched into a single PCReq message.')
pcePcepSessNumSvecRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumSvecRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumSvecRcvd.setDescription('The number of SVEC objects received on this session in PCReq messages. An SVEC object represents a set of synchronized requests.')
pcePcepSessNumSvecReqRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumSvecReqRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumSvecReqRcvd.setDescription('The number of requests received on this session that appeared in one or more SVEC objects.')
pcePcepSessNumReqRcvdPendRep = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumReqRcvdPendRep.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumReqRcvdPendRep.setDescription('The number of requests that have been received on this session for which a response is still pending.')
pcePcepSessNumReqRcvdEroSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumReqRcvdEroSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumReqRcvdEroSent.setDescription('The number of successful responses sent on this session. A response corresponds 1:1 with an RP object in a PCRep message. A successful response is a response for which an ERO was successfully computed.')
pcePcepSessNumReqRcvdNoPathSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumReqRcvdNoPathSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumReqRcvdNoPathSent.setDescription('The number of unsuccessful responses sent on this session. A response corresponds 1:1 with an RP object in a PCRep message. An unsuccessful response is a response with a NO-PATH object.')
pcePcepSessNumReqRcvdCancelSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumReqRcvdCancelSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumReqRcvdCancelSent.setDescription('The number of requests received on this session that were canceled by the local PCEP entity sending a PCNtf message. This might be different than pcePcepSessNumPCNtfSent because not all PCNtf messages are used to cancel requests, and a single PCNtf message can cancel multiple requests.')
pcePcepSessNumReqRcvdErrorSent = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumReqRcvdErrorSent.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumReqRcvdErrorSent.setDescription('The number of requests received on this session that were rejected by the local PCEP entity sending a PCErr message. This might be different than pcePcepSessNumPCErrSent because not all PCErr messages are used to reject requests, and a single PCErr message can reject multiple requests.')
pcePcepSessNumReqRcvdCancelRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumReqRcvdCancelRcvd.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumReqRcvdCancelRcvd.setDescription('The number of requests that were received on this session and explicitly canceled by the peer sending a PCNtf.')
pcePcepSessNumRepRcvdUnknown = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumRepRcvdUnknown.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumRepRcvdUnknown.setDescription('The number of responses to unknown requests received on this session. A response to an unknown request is a response whose RP object does not contain the request ID of any request that is currently outstanding on the session.')
pcePcepSessNumReqRcvdUnknown = MibTableColumn((1, 3, 6, 1, 2, 1, 227, 1, 3, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessNumReqRcvdUnknown.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessNumReqRcvdUnknown.setDescription('The number of unknown requests that have been received on this session. An unknown request is a request whose RP object contains a request ID of zero.')
pcePcepNotificationsMaxRate = MibScalar((1, 3, 6, 1, 2, 1, 227, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcePcepNotificationsMaxRate.setStatus('current')
if mibBuilder.loadTexts: pcePcepNotificationsMaxRate.setDescription('This variable indicates the maximum number of notifications issued per second. If events occur more rapidly, the implementation may simply fail to emit these notifications during that period or may queue them until an appropriate time. A value of zero means no notifications are emitted and all should be discarded (that is, not queued).')
pcePcepSessUp = NotificationType((1, 3, 6, 1, 2, 1, 227, 0, 1)).setObjects(("PCE-PCEP-MIB", "pcePcepSessState"), ("PCE-PCEP-MIB", "pcePcepSessStateLastChange"))
if mibBuilder.loadTexts: pcePcepSessUp.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessUp.setDescription('This notification is sent when the value of pcePcepSessState enters the sessionUp state.')
pcePcepSessDown = NotificationType((1, 3, 6, 1, 2, 1, 227, 0, 2)).setObjects(("PCE-PCEP-MIB", "pcePcepSessState"), ("PCE-PCEP-MIB", "pcePcepSessStateLastChange"))
if mibBuilder.loadTexts: pcePcepSessDown.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessDown.setDescription('This notification is sent when the value of pcePcepSessState leaves the sessionUp state.')
pcePcepSessLocalOverload = NotificationType((1, 3, 6, 1, 2, 1, 227, 0, 3)).setObjects(("PCE-PCEP-MIB", "pcePcepSessOverloaded"), ("PCE-PCEP-MIB", "pcePcepSessOverloadTime"))
if mibBuilder.loadTexts: pcePcepSessLocalOverload.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessLocalOverload.setDescription('This notification is sent when the local PCEP entity enters overload state for a peer.')
pcePcepSessLocalOverloadClear = NotificationType((1, 3, 6, 1, 2, 1, 227, 0, 4)).setObjects(("PCE-PCEP-MIB", "pcePcepSessOverloaded"))
if mibBuilder.loadTexts: pcePcepSessLocalOverloadClear.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessLocalOverloadClear.setDescription('This notification is sent when the local PCEP entity leaves overload state for a peer.')
pcePcepSessPeerOverload = NotificationType((1, 3, 6, 1, 2, 1, 227, 0, 5)).setObjects(("PCE-PCEP-MIB", "pcePcepSessPeerOverloaded"), ("PCE-PCEP-MIB", "pcePcepSessPeerOverloadTime"))
if mibBuilder.loadTexts: pcePcepSessPeerOverload.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessPeerOverload.setDescription('This notification is sent when a peer enters overload state.')
pcePcepSessPeerOverloadClear = NotificationType((1, 3, 6, 1, 2, 1, 227, 0, 6)).setObjects(("PCE-PCEP-MIB", "pcePcepSessPeerOverloaded"))
if mibBuilder.loadTexts: pcePcepSessPeerOverloadClear.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessPeerOverloadClear.setDescription('This notification is sent when a peer leaves overload state.')
pcePcepCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 227, 2, 1))
pcePcepGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 227, 2, 2))
pcePcepModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 227, 2, 1, 1)).setObjects(("PCE-PCEP-MIB", "pcePcepGeneralGroup"), ("PCE-PCEP-MIB", "pcePcepNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcePcepModuleReadOnlyCompliance = pcePcepModuleReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: pcePcepModuleReadOnlyCompliance.setDescription('The module is implemented with support for read-only. In other words, only monitoring is available by implementing this MODULE-COMPLIANCE.')
pcePcepGeneralGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 227, 2, 2, 1)).setObjects(("PCE-PCEP-MIB", "pcePcepEntityAdminStatus"), ("PCE-PCEP-MIB", "pcePcepEntityOperStatus"), ("PCE-PCEP-MIB", "pcePcepEntityAddrType"), ("PCE-PCEP-MIB", "pcePcepEntityAddr"), ("PCE-PCEP-MIB", "pcePcepEntityConnectTimer"), ("PCE-PCEP-MIB", "pcePcepEntityConnectMaxRetry"), ("PCE-PCEP-MIB", "pcePcepEntityInitBackoffTimer"), ("PCE-PCEP-MIB", "pcePcepEntityMaxBackoffTimer"), ("PCE-PCEP-MIB", "pcePcepEntityOpenWaitTimer"), ("PCE-PCEP-MIB", "pcePcepEntityKeepWaitTimer"), ("PCE-PCEP-MIB", "pcePcepEntityKeepAliveTimer"), ("PCE-PCEP-MIB", "pcePcepEntityDeadTimer"), ("PCE-PCEP-MIB", "pcePcepEntityAllowNegotiation"), ("PCE-PCEP-MIB", "pcePcepEntityMaxKeepAliveTimer"), ("PCE-PCEP-MIB", "pcePcepEntityMaxDeadTimer"), ("PCE-PCEP-MIB", "pcePcepEntityMinKeepAliveTimer"), ("PCE-PCEP-MIB", "pcePcepEntityMinDeadTimer"), ("PCE-PCEP-MIB", "pcePcepEntitySyncTimer"), ("PCE-PCEP-MIB", "pcePcepEntityRequestTimer"), ("PCE-PCEP-MIB", "pcePcepEntityMaxSessions"), ("PCE-PCEP-MIB", "pcePcepEntityMaxUnknownReqs"), ("PCE-PCEP-MIB", "pcePcepEntityMaxUnknownMsgs"), ("PCE-PCEP-MIB", "pcePcepPeerRole"), ("PCE-PCEP-MIB", "pcePcepPeerDiscontinuityTime"), ("PCE-PCEP-MIB", "pcePcepPeerInitiateSession"), ("PCE-PCEP-MIB", "pcePcepPeerSessionExists"), ("PCE-PCEP-MIB", "pcePcepPeerNumSessSetupOK"), ("PCE-PCEP-MIB", "pcePcepPeerNumSessSetupFail"), ("PCE-PCEP-MIB", "pcePcepPeerSessionUpTime"), ("PCE-PCEP-MIB", "pcePcepPeerSessionFailTime"), ("PCE-PCEP-MIB", "pcePcepPeerSessionFailUpTime"), ("PCE-PCEP-MIB", "pcePcepPeerAvgRspTime"), ("PCE-PCEP-MIB", "pcePcepPeerLWMRspTime"), ("PCE-PCEP-MIB", "pcePcepPeerHWMRspTime"), ("PCE-PCEP-MIB", "pcePcepPeerNumPCReqSent"), ("PCE-PCEP-MIB", "pcePcepPeerNumPCReqRcvd"), ("PCE-PCEP-MIB", "pcePcepPeerNumPCRepSent"), ("PCE-PCEP-MIB", "pcePcepPeerNumPCRepRcvd"), ("PCE-PCEP-MIB", "pcePcepPeerNumPCErrSent"), ("PCE-PCEP-MIB", "pcePcepPeerNumPCErrRcvd"), ("PCE-PCEP-MIB", "pcePcepPeerNumPCNtfSent"), ("PCE-PCEP-MIB", "pcePcepPeerNumPCNtfRcvd"), ("PCE-PCEP-MIB", "pcePcepPeerNumKeepaliveSent"), ("PCE-PCEP-MIB", "pcePcepPeerNumKeepaliveRcvd"), ("PCE-PCEP-MIB", "pcePcepPeerNumUnknownRcvd"), ("PCE-PCEP-MIB", "pcePcepPeerNumCorruptRcvd"), ("PCE-PCEP-MIB", "pcePcepPeerNumReqSent"), ("PCE-PCEP-MIB", "pcePcepPeerNumSvecSent"), ("PCE-PCEP-MIB", "pcePcepPeerNumSvecReqSent"), ("PCE-PCEP-MIB", "pcePcepPeerNumReqSentPendRep"), ("PCE-PCEP-MIB", "pcePcepPeerNumReqSentEroRcvd"), ("PCE-PCEP-MIB", "pcePcepPeerNumReqSentNoPathRcvd"), ("PCE-PCEP-MIB", "pcePcepPeerNumReqSentCancelRcvd"), ("PCE-PCEP-MIB", "pcePcepPeerNumReqSentErrorRcvd"), ("PCE-PCEP-MIB", "pcePcepPeerNumReqSentTimeout"), ("PCE-PCEP-MIB", "pcePcepPeerNumReqSentCancelSent"), ("PCE-PCEP-MIB", "pcePcepPeerNumReqSentClosed"), ("PCE-PCEP-MIB", "pcePcepPeerNumReqRcvd"), ("PCE-PCEP-MIB", "pcePcepPeerNumSvecRcvd"), ("PCE-PCEP-MIB", "pcePcepPeerNumSvecReqRcvd"), ("PCE-PCEP-MIB", "pcePcepPeerNumReqRcvdPendRep"), ("PCE-PCEP-MIB", "pcePcepPeerNumReqRcvdEroSent"), ("PCE-PCEP-MIB", "pcePcepPeerNumReqRcvdNoPathSent"), ("PCE-PCEP-MIB", "pcePcepPeerNumReqRcvdCancelSent"), ("PCE-PCEP-MIB", "pcePcepPeerNumReqRcvdErrorSent"), ("PCE-PCEP-MIB", "pcePcepPeerNumReqRcvdCancelRcvd"), ("PCE-PCEP-MIB", "pcePcepPeerNumReqRcvdClosed"), ("PCE-PCEP-MIB", "pcePcepPeerNumRepRcvdUnknown"), ("PCE-PCEP-MIB", "pcePcepPeerNumReqRcvdUnknown"), ("PCE-PCEP-MIB", "pcePcepSessStateLastChange"), ("PCE-PCEP-MIB", "pcePcepSessState"), ("PCE-PCEP-MIB", "pcePcepSessConnectRetry"), ("PCE-PCEP-MIB", "pcePcepSessLocalID"), ("PCE-PCEP-MIB", "pcePcepSessRemoteID"), ("PCE-PCEP-MIB", "pcePcepSessKeepaliveTimer"), ("PCE-PCEP-MIB", "pcePcepSessPeerKeepaliveTimer"), ("PCE-PCEP-MIB", "pcePcepSessDeadTimer"), ("PCE-PCEP-MIB", "pcePcepSessPeerDeadTimer"), ("PCE-PCEP-MIB", "pcePcepSessKAHoldTimeRem"), ("PCE-PCEP-MIB", "pcePcepSessOverloaded"), ("PCE-PCEP-MIB", "pcePcepSessOverloadTime"), ("PCE-PCEP-MIB", "pcePcepSessPeerOverloaded"), ("PCE-PCEP-MIB", "pcePcepSessPeerOverloadTime"), ("PCE-PCEP-MIB", "pcePcepSessDiscontinuityTime"), ("PCE-PCEP-MIB", "pcePcepSessAvgRspTime"), ("PCE-PCEP-MIB", "pcePcepSessLWMRspTime"), ("PCE-PCEP-MIB", "pcePcepSessHWMRspTime"), ("PCE-PCEP-MIB", "pcePcepSessNumPCReqSent"), ("PCE-PCEP-MIB", "pcePcepSessNumPCReqRcvd"), ("PCE-PCEP-MIB", "pcePcepSessNumPCRepSent"), ("PCE-PCEP-MIB", "pcePcepSessNumPCRepRcvd"), ("PCE-PCEP-MIB", "pcePcepSessNumPCErrSent"), ("PCE-PCEP-MIB", "pcePcepSessNumPCErrRcvd"), ("PCE-PCEP-MIB", "pcePcepSessNumPCNtfSent"), ("PCE-PCEP-MIB", "pcePcepSessNumPCNtfRcvd"), ("PCE-PCEP-MIB", "pcePcepSessNumKeepaliveSent"), ("PCE-PCEP-MIB", "pcePcepSessNumKeepaliveRcvd"), ("PCE-PCEP-MIB", "pcePcepSessNumUnknownRcvd"), ("PCE-PCEP-MIB", "pcePcepSessNumCorruptRcvd"), ("PCE-PCEP-MIB", "pcePcepSessNumReqSent"), ("PCE-PCEP-MIB", "pcePcepSessNumSvecSent"), ("PCE-PCEP-MIB", "pcePcepSessNumSvecReqSent"), ("PCE-PCEP-MIB", "pcePcepSessNumReqSentPendRep"), ("PCE-PCEP-MIB", "pcePcepSessNumReqSentEroRcvd"), ("PCE-PCEP-MIB", "pcePcepSessNumReqSentNoPathRcvd"), ("PCE-PCEP-MIB", "pcePcepSessNumReqSentCancelRcvd"), ("PCE-PCEP-MIB", "pcePcepSessNumReqSentErrorRcvd"), ("PCE-PCEP-MIB", "pcePcepSessNumReqSentTimeout"), ("PCE-PCEP-MIB", "pcePcepSessNumReqSentCancelSent"), ("PCE-PCEP-MIB", "pcePcepSessNumReqRcvd"), ("PCE-PCEP-MIB", "pcePcepSessNumSvecRcvd"), ("PCE-PCEP-MIB", "pcePcepSessNumSvecReqRcvd"), ("PCE-PCEP-MIB", "pcePcepSessNumReqRcvdPendRep"), ("PCE-PCEP-MIB", "pcePcepSessNumReqRcvdEroSent"), ("PCE-PCEP-MIB", "pcePcepSessNumReqRcvdNoPathSent"), ("PCE-PCEP-MIB", "pcePcepSessNumReqRcvdCancelSent"), ("PCE-PCEP-MIB", "pcePcepSessNumReqRcvdErrorSent"), ("PCE-PCEP-MIB", "pcePcepSessNumReqRcvdCancelRcvd"), ("PCE-PCEP-MIB", "pcePcepSessNumRepRcvdUnknown"), ("PCE-PCEP-MIB", "pcePcepSessNumReqRcvdUnknown"), ("PCE-PCEP-MIB", "pcePcepNotificationsMaxRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcePcepGeneralGroup = pcePcepGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: pcePcepGeneralGroup.setDescription('Objects that apply to all PCEP MIB module implementations.')
pcePcepNotificationsGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 227, 2, 2, 2)).setObjects(("PCE-PCEP-MIB", "pcePcepSessUp"), ("PCE-PCEP-MIB", "pcePcepSessDown"), ("PCE-PCEP-MIB", "pcePcepSessLocalOverload"), ("PCE-PCEP-MIB", "pcePcepSessLocalOverloadClear"), ("PCE-PCEP-MIB", "pcePcepSessPeerOverload"), ("PCE-PCEP-MIB", "pcePcepSessPeerOverloadClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcePcepNotificationsGroup = pcePcepNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: pcePcepNotificationsGroup.setDescription('The notifications for a PCEP MIB module implementation.')
mibBuilder.exportSymbols("PCE-PCEP-MIB", pcePcepEntityConnectMaxRetry=pcePcepEntityConnectMaxRetry, pcePcepPeerNumReqSentCancelSent=pcePcepPeerNumReqSentCancelSent, pcePcepSessLocalID=pcePcepSessLocalID, pcePcepSessAvgRspTime=pcePcepSessAvgRspTime, pcePcepPeerNumSvecRcvd=pcePcepPeerNumSvecRcvd, pcePcepSessPeerOverload=pcePcepSessPeerOverload, pcePcepPeerSessionFailTime=pcePcepPeerSessionFailTime, pcePcepEntityRequestTimer=pcePcepEntityRequestTimer, PYSNMP_MODULE_ID=pcePcepMIB, pcePcepEntityOpenWaitTimer=pcePcepEntityOpenWaitTimer, pcePcepPeerNumKeepaliveRcvd=pcePcepPeerNumKeepaliveRcvd, pcePcepEntityMaxUnknownMsgs=pcePcepEntityMaxUnknownMsgs, pcePcepEntityAddrType=pcePcepEntityAddrType, pcePcepPeerNumReqSentPendRep=pcePcepPeerNumReqSentPendRep, pcePcepPeerNumReqRcvdNoPathSent=pcePcepPeerNumReqRcvdNoPathSent, pcePcepPeerNumPCReqRcvd=pcePcepPeerNumPCReqRcvd, pcePcepPeerSessionExists=pcePcepPeerSessionExists, pcePcepPeerNumPCErrSent=pcePcepPeerNumPCErrSent, pcePcepEntityMinKeepAliveTimer=pcePcepEntityMinKeepAliveTimer, pcePcepSessNumSvecReqSent=pcePcepSessNumSvecReqSent, pcePcepNotifications=pcePcepNotifications, pcePcepPeerNumReqRcvdUnknown=pcePcepPeerNumReqRcvdUnknown, pcePcepPeerAddrType=pcePcepPeerAddrType, pcePcepPeerNumUnknownRcvd=pcePcepPeerNumUnknownRcvd, pcePcepSessTable=pcePcepSessTable, pcePcepPeerSessionUpTime=pcePcepPeerSessionUpTime, pcePcepSessNumUnknownRcvd=pcePcepSessNumUnknownRcvd, pcePcepEntitySyncTimer=pcePcepEntitySyncTimer, pcePcepObjects=pcePcepObjects, pcePcepSessEntry=pcePcepSessEntry, pcePcepCompliances=pcePcepCompliances, pcePcepSessNumPCNtfSent=pcePcepSessNumPCNtfSent, pcePcepSessHWMRspTime=pcePcepSessHWMRspTime, pcePcepSessPeerOverloadClear=pcePcepSessPeerOverloadClear, pcePcepPeerHWMRspTime=pcePcepPeerHWMRspTime, pcePcepSessPeerDeadTimer=pcePcepSessPeerDeadTimer, pcePcepSessInitiator=pcePcepSessInitiator, pcePcepSessPeerKeepaliveTimer=pcePcepSessPeerKeepaliveTimer, pcePcepPeerNumSvecReqRcvd=pcePcepPeerNumSvecReqRcvd, pcePcepPeerNumReqRcvdCancelRcvd=pcePcepPeerNumReqRcvdCancelRcvd, pcePcepSessConnectRetry=pcePcepSessConnectRetry, pcePcepSessNumReqRcvdNoPathSent=pcePcepSessNumReqRcvdNoPathSent, pcePcepGroups=pcePcepGroups, pcePcepSessNumReqSentCancelRcvd=pcePcepSessNumReqSentCancelRcvd, pcePcepSessNumSvecReqRcvd=pcePcepSessNumSvecReqRcvd, pcePcepPeerNumReqSentErrorRcvd=pcePcepPeerNumReqSentErrorRcvd, pcePcepSessNumReqRcvdCancelSent=pcePcepSessNumReqRcvdCancelSent, pcePcepEntityMinDeadTimer=pcePcepEntityMinDeadTimer, pcePcepPeerNumReqRcvdPendRep=pcePcepPeerNumReqRcvdPendRep, pcePcepSessDiscontinuityTime=pcePcepSessDiscontinuityTime, pcePcepSessNumPCErrRcvd=pcePcepSessNumPCErrRcvd, pcePcepEntityKeepWaitTimer=pcePcepEntityKeepWaitTimer, pcePcepSessStateLastChange=pcePcepSessStateLastChange, pcePcepEntityEntry=pcePcepEntityEntry, pcePcepPeerSessionFailUpTime=pcePcepPeerSessionFailUpTime, pcePcepSessNumReqSentPendRep=pcePcepSessNumReqSentPendRep, pcePcepSessNumReqSentCancelSent=pcePcepSessNumReqSentCancelSent, pcePcepPeerNumReqRcvdEroSent=pcePcepPeerNumReqRcvdEroSent, pcePcepPeerNumReqRcvdCancelSent=pcePcepPeerNumReqRcvdCancelSent, pcePcepPeerTable=pcePcepPeerTable, pcePcepSessKAHoldTimeRem=pcePcepSessKAHoldTimeRem, pcePcepSessNumKeepaliveSent=pcePcepSessNumKeepaliveSent, pcePcepSessNumRepRcvdUnknown=pcePcepSessNumRepRcvdUnknown, pcePcepEntityKeepAliveTimer=pcePcepEntityKeepAliveTimer, pcePcepModuleReadOnlyCompliance=pcePcepModuleReadOnlyCompliance, pcePcepPeerNumPCErrRcvd=pcePcepPeerNumPCErrRcvd, pcePcepMIB=pcePcepMIB, pcePcepSessUp=pcePcepSessUp, pcePcepConformance=pcePcepConformance, pcePcepPeerNumReqRcvd=pcePcepPeerNumReqRcvd, pcePcepPeerNumKeepaliveSent=pcePcepPeerNumKeepaliveSent, pcePcepPeerNumReqSentNoPathRcvd=pcePcepPeerNumReqSentNoPathRcvd, pcePcepSessNumCorruptRcvd=pcePcepSessNumCorruptRcvd, pcePcepPeerLWMRspTime=pcePcepPeerLWMRspTime, pcePcepEntityAllowNegotiation=pcePcepEntityAllowNegotiation, pcePcepPeerInitiateSession=pcePcepPeerInitiateSession, pcePcepSessState=pcePcepSessState, pcePcepSessNumReqSentTimeout=pcePcepSessNumReqSentTimeout, pcePcepEntityTable=pcePcepEntityTable, pcePcepSessNumReqRcvd=pcePcepSessNumReqRcvd, pcePcepSessNumReqRcvdPendRep=pcePcepSessNumReqRcvdPendRep, pcePcepEntityDeadTimer=pcePcepEntityDeadTimer, pcePcepPeerRole=pcePcepPeerRole, pcePcepPeerNumSvecSent=pcePcepPeerNumSvecSent, pcePcepSessLocalOverloadClear=pcePcepSessLocalOverloadClear, pcePcepEntityAdminStatus=pcePcepEntityAdminStatus, pcePcepEntityMaxDeadTimer=pcePcepEntityMaxDeadTimer, pcePcepSessLocalOverload=pcePcepSessLocalOverload, pcePcepPeerNumPCNtfRcvd=pcePcepPeerNumPCNtfRcvd, pcePcepSessNumReqRcvdEroSent=pcePcepSessNumReqRcvdEroSent, pcePcepSessNumSvecRcvd=pcePcepSessNumSvecRcvd, pcePcepPeerNumPCNtfSent=pcePcepPeerNumPCNtfSent, pcePcepSessPeerOverloadTime=pcePcepSessPeerOverloadTime, pcePcepPeerNumReqSent=pcePcepPeerNumReqSent, pcePcepPeerEntry=pcePcepPeerEntry, pcePcepEntityMaxKeepAliveTimer=pcePcepEntityMaxKeepAliveTimer, pcePcepNotificationsMaxRate=pcePcepNotificationsMaxRate, pcePcepEntityConnectTimer=pcePcepEntityConnectTimer, pcePcepSessNumKeepaliveRcvd=pcePcepSessNumKeepaliveRcvd, pcePcepPeerDiscontinuityTime=pcePcepPeerDiscontinuityTime, pcePcepPeerNumReqSentClosed=pcePcepPeerNumReqSentClosed, pcePcepSessPeerOverloaded=pcePcepSessPeerOverloaded, pcePcepPeerNumCorruptRcvd=pcePcepPeerNumCorruptRcvd, pcePcepSessNumPCRepRcvd=pcePcepSessNumPCRepRcvd, pcePcepSessNumPCRepSent=pcePcepSessNumPCRepSent, pcePcepEntityAddr=pcePcepEntityAddr, pcePcepSessNumReqSent=pcePcepSessNumReqSent, pcePcepPeerNumReqSentEroRcvd=pcePcepPeerNumReqSentEroRcvd, pcePcepEntityMaxSessions=pcePcepEntityMaxSessions, pcePcepSessNumReqSentNoPathRcvd=pcePcepSessNumReqSentNoPathRcvd, pcePcepSessNumSvecSent=pcePcepSessNumSvecSent, pcePcepSessRemoteID=pcePcepSessRemoteID, pcePcepNotificationsGroup=pcePcepNotificationsGroup, pcePcepSessNumPCErrSent=pcePcepSessNumPCErrSent, pcePcepSessKeepaliveTimer=pcePcepSessKeepaliveTimer, pcePcepEntityMaxUnknownReqs=pcePcepEntityMaxUnknownReqs, pcePcepSessNumReqSentEroRcvd=pcePcepSessNumReqSentEroRcvd, pcePcepSessOverloaded=pcePcepSessOverloaded, pcePcepSessNumReqSentErrorRcvd=pcePcepSessNumReqSentErrorRcvd, pcePcepPeerAddr=pcePcepPeerAddr, pcePcepPeerNumReqSentCancelRcvd=pcePcepPeerNumReqSentCancelRcvd, pcePcepPeerNumReqSentTimeout=pcePcepPeerNumReqSentTimeout, pcePcepPeerNumPCRepRcvd=pcePcepPeerNumPCRepRcvd, pcePcepEntityMaxBackoffTimer=pcePcepEntityMaxBackoffTimer, pcePcepPeerNumReqRcvdClosed=pcePcepPeerNumReqRcvdClosed, pcePcepPeerNumSessSetupFail=pcePcepPeerNumSessSetupFail, pcePcepEntityOperStatus=pcePcepEntityOperStatus, pcePcepSessLWMRspTime=pcePcepSessLWMRspTime, pcePcepSessNumReqRcvdCancelRcvd=pcePcepSessNumReqRcvdCancelRcvd, pcePcepEntityIndex=pcePcepEntityIndex, pcePcepPeerNumPCReqSent=pcePcepPeerNumPCReqSent, pcePcepEntityInitBackoffTimer=pcePcepEntityInitBackoffTimer, pcePcepPeerNumSessSetupOK=pcePcepPeerNumSessSetupOK, pcePcepPeerNumSvecReqSent=pcePcepPeerNumSvecReqSent, pcePcepPeerNumPCRepSent=pcePcepPeerNumPCRepSent, pcePcepSessDeadTimer=pcePcepSessDeadTimer, pcePcepSessNumPCReqRcvd=pcePcepSessNumPCReqRcvd, pcePcepSessNumReqRcvdErrorSent=pcePcepSessNumReqRcvdErrorSent, pcePcepPeerNumRepRcvdUnknown=pcePcepPeerNumRepRcvdUnknown, pcePcepSessDown=pcePcepSessDown, pcePcepPeerNumReqRcvdErrorSent=pcePcepPeerNumReqRcvdErrorSent, pcePcepSessNumPCNtfRcvd=pcePcepSessNumPCNtfRcvd, pcePcepSessNumReqRcvdUnknown=pcePcepSessNumReqRcvdUnknown, pcePcepGeneralGroup=pcePcepGeneralGroup, pcePcepSessOverloadTime=pcePcepSessOverloadTime, pcePcepPeerAvgRspTime=pcePcepPeerAvgRspTime, pcePcepSessNumPCReqSent=pcePcepSessNumPCReqSent)
