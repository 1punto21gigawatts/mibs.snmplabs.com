#
# PySNMP MIB module Nortel-Magellan-Passport-VirtualRouterMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-VirtualRouterMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:26:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
InterfaceIndex, DisplayString, StorageType, Gauge32, Counter32, Integer32, RowPointer, RowStatus, Unsigned32 = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "InterfaceIndex", "DisplayString", "StorageType", "Gauge32", "Counter32", "Integer32", "RowPointer", "RowStatus", "Unsigned32")
AsciiStringIndex, HexString, IntegerSequence, Link, AsciiString, NonReplicated = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "AsciiStringIndex", "HexString", "IntegerSequence", "Link", "AsciiString", "NonReplicated")
components, passportMIBs = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "components", "passportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, TimeTicks, Gauge32, Counter32, MibIdentifier, Integer32, IpAddress, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "TimeTicks", "Gauge32", "Counter32", "MibIdentifier", "Integer32", "IpAddress", "Unsigned32", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
virtualRouterMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 26))
vr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100))
vrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 1), )
if mibBuilder.loadTexts: vrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrRowStatusTable.setDescription('This entry controls the addition and deletion of vr components.')
vrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"))
if mibBuilder.loadTexts: vrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrRowStatusEntry.setDescription('A single entry in the table represents a single vr component.')
vrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrRowStatus.setDescription('This variable is used as the basis for SNMP naming of vr components. These components can be added and deleted.')
vrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrStorageType.setDescription('This variable represents the storage type value for the vr tables.')
vrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: vrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrIndex.setDescription('This variable represents the index for the vr tables.')
vrAdminContorlTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 100), )
if mibBuilder.loadTexts: vrAdminContorlTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrAdminContorlTable.setDescription('This group includes the Administrative Control attribute. This attribute defines the current administrative state of this component.')
vrAdminContorlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"))
if mibBuilder.loadTexts: vrAdminContorlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrAdminContorlEntry.setDescription('An entry in the vrAdminContorlTable.')
vrSnmpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpAdminStatus.setDescription('This sets the desired state of this VirtualRouter. The up state indicates the Vr is operational. The down state indicates the Vr is not operational. The down state is only valid when the managementAccess attribute is disabled. Testing is an invalid state for the Vr.')
vrManagementAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrManagementAccess.setStatus('mandatory')
if mibBuilder.loadTexts: vrManagementAccess.setDescription('This attributes defines the routing capabilities of this Virtual Router and controls the tcp access into that Vr. External access is only permitted through the Vr that has this attribute enabled. The attribute allows the following subcomponents to be provisioned: Ipx, Bridging, Sna, Sres, NetSentry, and Snmp. Exactly one Vr must have this attribute enabled. The first provisioned Vr will have the attribute enabled by default. Subsequent Vrs will have the attribute disabled.')
vrVirtualPrivateIntranetIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 100, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrVirtualPrivateIntranetIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: vrVirtualPrivateIntranetIdentifier.setDescription('Identifies the Virtual Private Intranet (VPI) associated with this Virtual Router. The vpiId must be unique for each VR on a Passport and ach interconnected VR must have the same vpiId.')
vrCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 101), )
if mibBuilder.loadTexts: vrCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
vrCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 101, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"))
if mibBuilder.loadTexts: vrCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrCidDataEntry.setDescription('An entry in the vrCidDataTable.')
vrCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 101, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: vrCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
vrOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 103), )
if mibBuilder.loadTexts: vrOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
vrOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 103, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"))
if mibBuilder.loadTexts: vrOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrOperStatusEntry.setDescription('An entry in the vrOperStatusTable.')
vrSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 103, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
vrStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 104), )
if mibBuilder.loadTexts: vrStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
vrStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 104, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"))
if mibBuilder.loadTexts: vrStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrStateEntry.setDescription('An entry in the vrStateTable.')
vrAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 104, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: vrAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
vrOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 104, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: vrOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
vrUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 104, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: vrUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
vrIfNumberOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 105), )
if mibBuilder.loadTexts: vrIfNumberOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfNumberOperTable.setDescription('This group contains the ifNumber attribute.')
vrIfNumberOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 105, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"))
if mibBuilder.loadTexts: vrIfNumberOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfNumberOperEntry.setDescription('An entry in the vrIfNumberOperTable.')
vrIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 105, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfNumber.setDescription('This attribute defines the number of IfEntries in the IfTable.')
vrMm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2))
vrMmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 1), )
if mibBuilder.loadTexts: vrMmRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmRowStatusTable.setDescription('This entry controls the addition and deletion of vrMm components.')
vrMmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrMmIndex"))
if mibBuilder.loadTexts: vrMmRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmRowStatusEntry.setDescription('A single entry in the table represents a single vrMm component.')
vrMmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrMmRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrMm components. These components cannot be added nor deleted.')
vrMmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrMmComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrMmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrMmStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmStorageType.setDescription('This variable represents the storage type value for the vrMm tables.')
vrMmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vrMmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmIndex.setDescription('This variable represents the index for the vrMm tables.')
vrMmProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 10), )
if mibBuilder.loadTexts: vrMmProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmProvTable.setDescription('The group includes all provisioned attributes for the MemoryManagement component.')
vrMmProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrMmIndex"))
if mibBuilder.loadTexts: vrMmProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmProvEntry.setDescription('An entry in the vrMmProvTable.')
vrMmVrMaxHeapSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrMmVrMaxHeapSpace.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmVrMaxHeapSpace.setDescription('The maximum percentage of the total system heap space that is allowed for use by this Virtual Router. Memory allocation for this VR which attempts to exceed this limit will fail causing a shut down of the requesting process.')
vrMmIpMaxHeapSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrMmIpMaxHeapSpace.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmIpMaxHeapSpace.setDescription("The maximum percentage of this VR's dynamic memory which can be allocated to this VR's IP. An attempt to allocate memory in excess of this limit forces IP to shut down.")
vrMmIpxMaxHeapSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrMmIpxMaxHeapSpace.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmIpxMaxHeapSpace.setDescription("The maximum percentage of this VR's dynamic memory which can be allocated to this VR's IPX. An attempt to allocate memory in excess of this limit forces IPX to shut down.")
vrMmBridgingMaxHeapSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrMmBridgingMaxHeapSpace.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmBridgingMaxHeapSpace.setDescription("The maximum percentage of this VR's dynamic memory which can be allocated to this VR's Bridging. An attempt to allocate memory in excess of this limit forces Bridging to shut down.")
vrMmNetSentryMaxHeapSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrMmNetSentryMaxHeapSpace.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmNetSentryMaxHeapSpace.setDescription("The maximum percentage of this VR's dynamic memory which can be allocated to this VR's NetSentry. An attempt to allocate memory in excess of this limit forces NetSentry to shut down.")
vrMmSresMaxHeapSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrMmSresMaxHeapSpace.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmSresMaxHeapSpace.setDescription("The maximum percentage of this VR's dynamic memory which can be allocated to this VR's SourceRouteEndStation. An attempt to allocate memory in excess of this limit forces SourceRouteEndStation to shut down.")
vrMmSnaMaxHeapSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrMmSnaMaxHeapSpace.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmSnaMaxHeapSpace.setDescription("The maximum percentage of this VR's dynamic memory which can be allocated to this VR's SNA. An attempt to allocate memory in excess of this limit forces SNA to shut down.")
vrMmOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 11), )
if mibBuilder.loadTexts: vrMmOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmOperTable.setDescription('The group includes all operational attributes for the MemoryManagement component.')
vrMmOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrMmIndex"))
if mibBuilder.loadTexts: vrMmOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmOperEntry.setDescription('An entry in the vrMmOperTable.')
vrMmVrHeapSpaceBytesAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrMmVrHeapSpaceBytesAllocated.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmVrHeapSpaceBytesAllocated.setDescription('The number of bytes of system dynamic memory which has been allocated by this Virtual Router.')
vrMmVrHeapSpaceAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrMmVrHeapSpaceAllocated.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmVrHeapSpaceAllocated.setDescription('The percentage of system dynamic memory which is currently allocated to this Virtual Router.')
vrMmIpHeapSpaceAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrMmIpHeapSpaceAllocated.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmIpHeapSpaceAllocated.setDescription("The percentage of this Virtual Router's dynamic memory which is currently allocated to this Virtual Router's IP.")
vrMmIpxHeapSpaceAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrMmIpxHeapSpaceAllocated.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmIpxHeapSpaceAllocated.setDescription("The percentage of this Virtual Router's dynamic memory which is currently allocated to this Virtual Router's IPX.")
vrMmBridgingHeapSpaceAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrMmBridgingHeapSpaceAllocated.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmBridgingHeapSpaceAllocated.setDescription("The percentage of this Virtual Router's dynamic memory which is currently allocated to this Virtual Router's Bridging.")
vrMmNetSentryHeapSpaceAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrMmNetSentryHeapSpaceAllocated.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmNetSentryHeapSpaceAllocated.setDescription("The percentage of this Virtual Router's dynamic memory which is currently allocated to this Virtual Router's NetSentry.")
vrMmSresHeapSpaceAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 11, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrMmSresHeapSpaceAllocated.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmSresHeapSpaceAllocated.setDescription("The percentage of this Virtual Router's dynamic memory which is currently allocated to this Virtual Router's Source Route End Station.")
vrMmSnaHeapSpaceAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 2, 11, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrMmSnaHeapSpaceAllocated.setStatus('mandatory')
if mibBuilder.loadTexts: vrMmSnaHeapSpaceAllocated.setDescription("The percentage of this Virtual Router's dynamic memory which is currently allocated to this Virtual Router's SNA.")
vrPp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3))
vrPpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 1), )
if mibBuilder.loadTexts: vrPpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpRowStatusTable.setDescription('This entry controls the addition and deletion of vrPp components.')
vrPpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrPpIndex"))
if mibBuilder.loadTexts: vrPpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpRowStatusEntry.setDescription('A single entry in the table represents a single vrPp component.')
vrPpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrPpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrPp components. These components can be added and deleted.')
vrPpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrPpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpStorageType.setDescription('This variable represents the storage type value for the vrPp tables.')
vrPpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: vrPpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIndex.setDescription('This variable represents the index for the vrPp tables.')
vrPpAdminControlTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 100), )
if mibBuilder.loadTexts: vrPpAdminControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpAdminControlTable.setDescription('This group includes the Administrative Control attribute. This attribute defines the current administrative state of this component.')
vrPpAdminControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrPpIndex"))
if mibBuilder.loadTexts: vrPpAdminControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpAdminControlEntry.setDescription('An entry in the vrPpAdminControlTable.')
vrPpSnmpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrPpSnmpAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpSnmpAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational and packet forwarding is allowed. The down state indicates the interface is not operational and packet forwarding is unavailable. The testing state indicates that no operational packets can be passed.')
vrPpProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 101), )
if mibBuilder.loadTexts: vrPpProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpProvTable.setDescription('This group includes provisioned attributes specific to the ProtocolPort component.')
vrPpProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 101, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrPpIndex"))
if mibBuilder.loadTexts: vrPpProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpProvEntry.setDescription('An entry in the vrPpProvTable.')
vrPpLinkToMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 101, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrPpLinkToMedia.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpLinkToMedia.setDescription('This attribute defines the Media Application which this Protocol Port is using as an interface to the network.')
vrPpOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 102), )
if mibBuilder.loadTexts: vrPpOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
vrPpOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 102, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrPpIndex"))
if mibBuilder.loadTexts: vrPpOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpOperStatusEntry.setDescription('An entry in the vrPpOperStatusTable.')
vrPpSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 102, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPpSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
vrPpStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 103), )
if mibBuilder.loadTexts: vrPpStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
vrPpStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 103, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrPpIndex"))
if mibBuilder.loadTexts: vrPpStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpStateEntry.setDescription('An entry in the vrPpStateTable.')
vrPpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 103, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPpAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
vrPpOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 103, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPpOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
vrPpUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 103, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPpUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
vrPpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 104), )
if mibBuilder.loadTexts: vrPpOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpOperTable.setDescription('This group includes operational attributes specific to the ProtocolPort component.')
vrPpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 104, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrPpIndex"))
if mibBuilder.loadTexts: vrPpOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpOperEntry.setDescription('An entry in the vrPpOperTable.')
vrPpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 104, 1, 1), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIfIndex.setDescription('This represents the SNMP ifIndex which is associated with this PP. This ifIndex can be used to extract detailed information about the PP from the ifTable.')
vrPpNbmaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 105), )
if mibBuilder.loadTexts: vrPpNbmaAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpNbmaAddressTable.setDescription('This group contains the operational attributes of the ProtocolPort component specific to NHRP.')
vrPpNbmaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 105, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrPpIndex"))
if mibBuilder.loadTexts: vrPpNbmaAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpNbmaAddressEntry.setDescription('An entry in the vrPpNbmaAddressTable.')
vrPpAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 105, 1, 1), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPpAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpAtmAddress.setDescription('This attribute indicates the ATM address which is associated with this protocol port. NHRP uses this address to establish shortcut connections. This attribute is not displayed if NHRP is not provisioned on this protocol port.')
vrIfTableEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10))
vrIfTableEntryRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 1), )
if mibBuilder.loadTexts: vrIfTableEntryRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of vrIfTableEntry components.')
vrIfTableEntryRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIfTableEntryIndex"))
if mibBuilder.loadTexts: vrIfTableEntryRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryRowStatusEntry.setDescription('A single entry in the table represents a single vrIfTableEntry component.')
vrIfTableEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrIfTableEntry components. These components cannot be added nor deleted.')
vrIfTableEntryComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrIfTableEntryStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryStorageType.setDescription('This variable represents the storage type value for the vrIfTableEntry tables.')
vrIfTableEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: vrIfTableEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIndex.setDescription('This variable represents the index for the vrIfTableEntry tables.')
vrIfTableEntryIftTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10), )
if mibBuilder.loadTexts: vrIfTableEntryIftTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIftTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group represents the SNMP interface table entry.')
vrIfTableEntryIftEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIfTableEntryIndex"))
if mibBuilder.loadTexts: vrIfTableEntryIftEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIftEntry.setDescription('An entry in the vrIfTableEntryIftTable.')
vrIfTableEntryIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIfAdminStatus.setDescription('The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
vrIfTableEntryIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryIfOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIfOperStatus.setDescription('This attribute provides the current operational status of the interface. The testing state indicates that no operational packets can be passed.')
vrIfTableEntryIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryIfLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIfLastChange.setDescription('The value of sysUpTime at the time the interface entered its current operational state. If the current state was entered prior to the last re- initialization of the local network management subsystem, then this object contains a zero value.')
vrIfTableEntryIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryIfInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIfInOctets.setDescription('The total number of octets received on the interface, including framing characters.')
vrIfTableEntryIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryIfOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIfOutOctets.setDescription('The total number of octets transmitted out the interface, including framing characters')
vrIfTableEntryIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryIfInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIfInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher layer protocol. One possible reason for discarding such a packet could be to free up buffer space.')
vrIfTableEntryIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryIfOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIfOutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
vrIfTableEntryIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryIfInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIfInErrors.setDescription('The number of inbound packet that contained errors preventing them from being deliverable to a higher layer protocol.')
vrIfTableEntryIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryIfOutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIfOutErrors.setDescription('The number of outbound packets that could not be transmitted because of errors.')
vrIfTableEntryIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryIfInUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIfInUcastPkts.setDescription('The number of subnetwork-unicast packets delivered to a higher-layer protocol.')
vrIfTableEntryIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryIfOutUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIfOutUcastPkts.setDescription('The total number of packets that higher level protocols requested be transmitted to a subnetwork-unicast address, including those that were discarded or not sent.')
vrIfTableEntryIfInNuCastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryIfInNuCastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIfInNuCastPkts.setDescription('The number of non-unicast (i.e., subnetwork- broadcast or subnetwork-multicast) packets delivered to a higher-layer protocol.')
vrIfTableEntryIfOutNuCastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryIfOutNuCastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIfOutNuCastPkts.setDescription('The total number of packets that higher level protocols request be transmitted to a non-unicast address, including those that were discarded or not sent.')
vrIfTableEntryIfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryIfInUnknownProtos.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIfInUnknownProtos.setDescription('The number of packets received via the interface which were discarded because of an unknown or unsupported protocol.')
vrIfTableEntryIfOutQlength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1, 16), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryIfOutQlength.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIfOutQlength.setDescription('The length of the output packet queue (in packets)')
vrIfTableEntryIfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1, 17), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryIfDescription.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIfDescription.setDescription('A textual string containing information about the interface. This string includes the name of the manufacturer, the product name and the version of the hardware interface.')
vrIfTableEntryIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 30, 31, 32, 44, 45, 46, 59, 60, 64, 1039, 1040, 1041, 1042, 1043))).clone(namedValues=NamedValues(("other", 1), ("ddnX25", 4), ("rfc877x25", 5), ("ethernetCsmacd", 6), ("ethernet8023", 7), ("tokenBus8024", 8), ("tokenring8025", 9), ("man802", 10), ("starLan", 11), ("hyperChannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicIsdn", 20), ("primaryIsdn", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("ds3", 30), ("smds", 31), ("frameRelay", 32), ("frameRelayService", 44), ("v35", 45), ("hssi", 46), ("aflane8023", 59), ("aflane8025", 60), ("v11", 64), ("atmMpeVcEncap", 1039), ("atmMpeLlcEncap", 1040), ("ilsForwarder", 1041), ("ipTunnel", 1042), ("virtualMedia", 1043)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryIfType.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIfType.setDescription('The type of interface, distinguished according to the physical/link protocol(s) immediately below the network layer in the protocol stack')
vrIfTableEntryIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryIfMtu.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIfMtu.setDescription('The size of the largest datagram which can be sent/received on the interface, specified in octets. For interfaces that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the interface.')
vrIfTableEntryIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryIfSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIfSpeed.setDescription("An estimate of the interface's current bandwidth in bits per second. For interfaces which do not vary in bandwidth or for those where no accurate estimation can be made, this object should contain the nominal bandwidth.")
vrIfTableEntryIfPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1, 21), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryIfPhysicalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIfPhysicalAddress.setDescription("The interface's address at the protocol layer immediately `below' the network layer in the protocol stack. For interfaces which do not have such an address (e.g., a serial line), this object should be an octet string of zero length.")
vrIfTableEntryIfSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 10, 1, 22), IntegerSequence()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryIfSpecific.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryIfSpecific.setDescription('A reference to MIB definitions specific to the particular media being used to realize the interface. For example, if the interface is realized by an ethernet, then the value of this object refers to a document defining objects specific to ethernet. If this information is not present, its value should be set to the OBJECT IDENTIFIER 0.0, which is a syntactically valid object identifier, and any conformant implementation of ASN.1 and BER must be able to generate and recognize this value.')
vrIfTableEntryAdditionalInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 11), )
if mibBuilder.loadTexts: vrIfTableEntryAdditionalInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryAdditionalInfoTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains additional information associated with this ifEntry.')
vrIfTableEntryAdditionalInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIfTableEntryIndex"))
if mibBuilder.loadTexts: vrIfTableEntryAdditionalInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryAdditionalInfoEntry.setDescription('An entry in the vrIfTableEntryAdditionalInfoTable.')
vrIfTableEntryStdComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 10, 11, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIfTableEntryStdComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrIfTableEntryStdComponentName.setDescription('This attribute provides a component name associated with this ifEntry. This component is the source of the data stored in this entry. More data may be determined about this entry by looking at the component associated with this component name.')
vrQosP = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 15))
vrQosPRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 15, 1), )
if mibBuilder.loadTexts: vrQosPRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrQosPRowStatusTable.setDescription('This entry controls the addition and deletion of vrQosP components.')
vrQosPRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 15, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrQosPIndex"))
if mibBuilder.loadTexts: vrQosPRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrQosPRowStatusEntry.setDescription('A single entry in the table represents a single vrQosP component.')
vrQosPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 15, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrQosPRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrQosPRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrQosP components. These components can be added and deleted.')
vrQosPComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 15, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrQosPComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrQosPComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrQosPStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 15, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrQosPStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrQosPStorageType.setDescription('This variable represents the storage type value for the vrQosP tables.')
vrQosPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: vrQosPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrQosPIndex.setDescription('This variable represents the index for the vrQosP tables.')
vrQosPProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 15, 10), )
if mibBuilder.loadTexts: vrQosPProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrQosPProvTable.setDescription('This group includes all attributes that can be provisioned to define an InwQualityofServiceProfile instance.')
vrQosPProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 15, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrQosPIndex"))
if mibBuilder.loadTexts: vrQosPProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrQosPProvEntry.setDescription('An entry in the vrQosPProvTable.')
vrQosPVnsDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 15, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrQosPVnsDiscardPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vrQosPVnsDiscardPriority.setDescription('This attribute specifies the throughput importance of the packets when forwarded over VNS connections. In times of congestion the discard priority of a packet is used to determine whether the packet should be discarded to reduce the heavy traffic load. Packets with lower discard priority (numerically higher vdp) are more likely to be discarded than packets with higher discard priority (numerically lower vdp). Discard priority one (vdp 1) should be used for the most important traffic, whereas discard priority three (vdp 3) should be used for the least important traffic.')
vrQosPVnsEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 15, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrQosPVnsEmissionPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vrQosPVnsEmissionPriority.setDescription('This attribute specifies the delay importance of the packets when forwarded over VNS connections. Packets with higher emission priority (vep 1) are transmitted before packets with lower emission priority (vep 2). Delay sensitive packets should be sent with emission priority one (vep 1).')
vrQosPWanEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 15, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrQosPWanEmissionPriority.setStatus('obsolete')
if mibBuilder.loadTexts: vrQosPWanEmissionPriority.setDescription('This attribute specifies the delay importance of the packets when forwarded over WAN connections. Packets with higher emission priority (wep 1) are transmitted before packets with lower emission priority (wep 2). Delay sensitive packets should be sent with emission priority one (wep 1). This attribute has been obsoleted and is replaced by emissionPriority attribute under Vr/n Ip Pg/n CosTreatment/n component.')
virtualRouterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 26, 1))
virtualRouterGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 26, 1, 5))
virtualRouterGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 26, 1, 5, 2))
virtualRouterGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 26, 1, 5, 2, 2))
virtualRouterCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 26, 3))
virtualRouterCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 26, 3, 5))
virtualRouterCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 26, 3, 5, 2))
virtualRouterCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 26, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-VirtualRouterMIB", vrIfTableEntryIfOutQlength=vrIfTableEntryIfOutQlength, vrCustomerIdentifier=vrCustomerIdentifier, vrIfNumberOperTable=vrIfNumberOperTable, vrStateTable=vrStateTable, vrPpIfIndex=vrPpIfIndex, vrPpNbmaAddressEntry=vrPpNbmaAddressEntry, vrIfTableEntryIfDescription=vrIfTableEntryIfDescription, virtualRouterGroupBE01A=virtualRouterGroupBE01A, vrRowStatusEntry=vrRowStatusEntry, vrMmBridgingHeapSpaceAllocated=vrMmBridgingHeapSpaceAllocated, vrMm=vrMm, vrIfTableEntryIfInUcastPkts=vrIfTableEntryIfInUcastPkts, vrPpOperStatusTable=vrPpOperStatusTable, vrManagementAccess=vrManagementAccess, virtualRouterMIB=virtualRouterMIB, vrVirtualPrivateIntranetIdentifier=vrVirtualPrivateIntranetIdentifier, vrIfTableEntryRowStatusTable=vrIfTableEntryRowStatusTable, vrIfTableEntryIfOutUcastPkts=vrIfTableEntryIfOutUcastPkts, vrMmSnaMaxHeapSpace=vrMmSnaMaxHeapSpace, vrQosPRowStatusTable=vrQosPRowStatusTable, vrCidDataEntry=vrCidDataEntry, virtualRouterGroupBE01=virtualRouterGroupBE01, vrRowStatusTable=vrRowStatusTable, vrPpComponentName=vrPpComponentName, vrPpSnmpOperStatus=vrPpSnmpOperStatus, vrQosPComponentName=vrQosPComponentName, vrIfTableEntryIfLastChange=vrIfTableEntryIfLastChange, vrPpOperationalState=vrPpOperationalState, vrIfTableEntryIfMtu=vrIfTableEntryIfMtu, vrIfTableEntryStdComponentName=vrIfTableEntryStdComponentName, vrIfTableEntryIfSpeed=vrIfTableEntryIfSpeed, vrIfTableEntryIfOperStatus=vrIfTableEntryIfOperStatus, vrMmIpHeapSpaceAllocated=vrMmIpHeapSpaceAllocated, vrMmProvEntry=vrMmProvEntry, vrOperStatusEntry=vrOperStatusEntry, vrPpOperTable=vrPpOperTable, vrMmProvTable=vrMmProvTable, vrPpAdminControlEntry=vrPpAdminControlEntry, vrIfTableEntryIfPhysicalAddress=vrIfTableEntryIfPhysicalAddress, vrMmStorageType=vrMmStorageType, vrOperStatusTable=vrOperStatusTable, vrPpAdminState=vrPpAdminState, vrMmNetSentryHeapSpaceAllocated=vrMmNetSentryHeapSpaceAllocated, vrIfTableEntryRowStatusEntry=vrIfTableEntryRowStatusEntry, vrMmSnaHeapSpaceAllocated=vrMmSnaHeapSpaceAllocated, vrIfTableEntryIfOutErrors=vrIfTableEntryIfOutErrors, vrPpRowStatusEntry=vrPpRowStatusEntry, vrPpRowStatusTable=vrPpRowStatusTable, vrQosPProvTable=vrQosPProvTable, virtualRouterGroup=virtualRouterGroup, vrMmIpxMaxHeapSpace=vrMmIpxMaxHeapSpace, vrStorageType=vrStorageType, vrPpStorageType=vrPpStorageType, vrMmBridgingMaxHeapSpace=vrMmBridgingMaxHeapSpace, vrPpProvEntry=vrPpProvEntry, vrOperationalState=vrOperationalState, vrPpSnmpAdminStatus=vrPpSnmpAdminStatus, virtualRouterGroupBE=virtualRouterGroupBE, virtualRouterCapabilities=virtualRouterCapabilities, virtualRouterCapabilitiesBE01A=virtualRouterCapabilitiesBE01A, vrMmRowStatus=vrMmRowStatus, vrIfTableEntryIfOutOctets=vrIfTableEntryIfOutOctets, vrQosPRowStatus=vrQosPRowStatus, vrSnmpOperStatus=vrSnmpOperStatus, vrMmRowStatusTable=vrMmRowStatusTable, vrMmRowStatusEntry=vrMmRowStatusEntry, vrQosPProvEntry=vrQosPProvEntry, vrMmIpxHeapSpaceAllocated=vrMmIpxHeapSpaceAllocated, vrIfTableEntryIfInErrors=vrIfTableEntryIfInErrors, vrPpOperStatusEntry=vrPpOperStatusEntry, vrIfTableEntryAdditionalInfoTable=vrIfTableEntryAdditionalInfoTable, vrQosP=vrQosP, vrPpLinkToMedia=vrPpLinkToMedia, vrIfNumber=vrIfNumber, vrPpStateEntry=vrPpStateEntry, vrIfTableEntryIfOutDiscards=vrIfTableEntryIfOutDiscards, vrIfTableEntryIfInOctets=vrIfTableEntryIfInOctets, vrIfTableEntryComponentName=vrIfTableEntryComponentName, vrMmVrHeapSpaceBytesAllocated=vrMmVrHeapSpaceBytesAllocated, vrQosPVnsDiscardPriority=vrQosPVnsDiscardPriority, vrIfNumberOperEntry=vrIfNumberOperEntry, vrIfTableEntryRowStatus=vrIfTableEntryRowStatus, vrStateEntry=vrStateEntry, vrPp=vrPp, vrPpAdminControlTable=vrPpAdminControlTable, vrPpOperEntry=vrPpOperEntry, vrUsageState=vrUsageState, vrMmIpMaxHeapSpace=vrMmIpMaxHeapSpace, vrQosPVnsEmissionPriority=vrQosPVnsEmissionPriority, vrMmOperEntry=vrMmOperEntry, vrQosPRowStatusEntry=vrQosPRowStatusEntry, vrPpUsageState=vrPpUsageState, vr=vr, vrPpStateTable=vrPpStateTable, vrIfTableEntryIfOutNuCastPkts=vrIfTableEntryIfOutNuCastPkts, vrAdminContorlEntry=vrAdminContorlEntry, vrPpProvTable=vrPpProvTable, vrPpAtmAddress=vrPpAtmAddress, vrMmNetSentryMaxHeapSpace=vrMmNetSentryMaxHeapSpace, vrMmVrMaxHeapSpace=vrMmVrMaxHeapSpace, vrPpNbmaAddressTable=vrPpNbmaAddressTable, vrAdminState=vrAdminState, vrMmIndex=vrMmIndex, vrMmSresHeapSpaceAllocated=vrMmSresHeapSpaceAllocated, vrIfTableEntryIfInUnknownProtos=vrIfTableEntryIfInUnknownProtos, vrIfTableEntryIfInNuCastPkts=vrIfTableEntryIfInNuCastPkts, vrIfTableEntryStorageType=vrIfTableEntryStorageType, vrPpIndex=vrPpIndex, vrSnmpAdminStatus=vrSnmpAdminStatus, vrAdminContorlTable=vrAdminContorlTable, vrIfTableEntryIfType=vrIfTableEntryIfType, vrIfTableEntryIfInDiscards=vrIfTableEntryIfInDiscards, vrIfTableEntryIftTable=vrIfTableEntryIftTable, virtualRouterCapabilitiesBE01=virtualRouterCapabilitiesBE01, vrMmComponentName=vrMmComponentName, vrMmVrHeapSpaceAllocated=vrMmVrHeapSpaceAllocated, vrCidDataTable=vrCidDataTable, virtualRouterCapabilitiesBE=virtualRouterCapabilitiesBE, vrIfTableEntryAdditionalInfoEntry=vrIfTableEntryAdditionalInfoEntry, vrQosPWanEmissionPriority=vrQosPWanEmissionPriority, vrRowStatus=vrRowStatus, vrMmOperTable=vrMmOperTable, vrComponentName=vrComponentName, vrIfTableEntryIndex=vrIfTableEntryIndex, vrIfTableEntryIfSpecific=vrIfTableEntryIfSpecific, vrIfTableEntry=vrIfTableEntry, vrIfTableEntryIfAdminStatus=vrIfTableEntryIfAdminStatus, vrMmSresMaxHeapSpace=vrMmSresMaxHeapSpace, vrPpRowStatus=vrPpRowStatus, vrIfTableEntryIftEntry=vrIfTableEntryIftEntry, vrQosPIndex=vrQosPIndex, vrIndex=vrIndex, vrQosPStorageType=vrQosPStorageType)
