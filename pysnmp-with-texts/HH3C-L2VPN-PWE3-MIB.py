#
# PySNMP MIB module HH3C-L2VPN-PWE3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-L2VPN-PWE3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:27:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, TimeTicks, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32, Gauge32, Counter64, Unsigned32, ModuleIdentity, IpAddress, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32", "Gauge32", "Counter64", "Unsigned32", "ModuleIdentity", "IpAddress", "ObjectIdentity", "Bits")
DisplayString, RowStatus, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TruthValue", "TextualConvention")
hh3cL2VpnPwe3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 78))
if mibBuilder.loadTexts: hh3cL2VpnPwe3.setLastUpdated('200703310000Z')
if mibBuilder.loadTexts: hh3cL2VpnPwe3.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cL2VpnPwe3.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cL2VpnPwe3.setDescription('This MIB contains objects to manage PWE3.')
class Hh3cL2VpnVcEncapsType(TextualConvention, Integer32):
    description = "An indication of the L2Vpn's VC encapsulation type: Frame Relay DLCI ( Martini Mode ) (1) ATM AAL5 SDU VCC transport (2) ATM transparent cell transport (3) Ethernet Tagged Mode (4) Ethernet (5) HDLC (6) PPP (7) SONET/SDH Circuit Emulation Service Over MPLS (CEM) (8) ATM n-to-one VCC cell transport (9) ATM n-to-one VPC cell transport (10) IP Layer2 Transport (11) ATM one-to-one VCC Cell Mode (12) ATM one-to-one VPC Cell Mode (13) ATM AAL5 PDU VCC transport (14) Frame-Relay Port mode (15) SONET/SDH Circuit Emulation over Packet (CEP) (16) Structure-agnostic E1 over Packet (SAE1oP) (17) Structure-agnostic T1 (DS1) over Packet (SAT1oP) (18) Structure-agnostic E3 over Packet (SAE3oP) (19) Structure-agnostic T3 (DS3) over Packet (SAT3oP) (20) CESoPSN basic mode (21) TDMoIP basic mode (22) CESoPSN TDM with CAS (23) TDMoIP TDM with CAS (24) Frame Relay DLCI (25) IP-interworking (64) unknown (255) "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 64, 255))
    namedValues = NamedValues(("frameRelayDlciMartini", 1), ("atmAal5SduVccTransport", 2), ("atmTransparentCellTransport", 3), ("ethernetTagged", 4), ("ethernet", 5), ("hdlc", 6), ("ppp", 7), ("cem", 8), ("atmN2OneVccCellTransport", 9), ("atmN2OneVpcCellTransport", 10), ("ipLayer2Transport", 11), ("atmOne2OneVccCellMode", 12), ("atmOne2OneVpcCellMode", 13), ("atmAal5PduVccTransport", 14), ("frameRelayPortMode", 15), ("cep", 16), ("saE1oP", 17), ("saT1oP", 18), ("saE3oP", 19), ("saT3oP", 20), ("cESoPsnBasicMode", 21), ("tDMoIPbasicMode", 22), ("l2VpnCESoPSNTDMwithCAS", 23), ("l2VpnTDMoIPTDMwithCAS", 24), ("frameRelayDlci", 25), ("ipInterworking", 64), ("unknown", 255))

hh3cL2VpnPwe3ScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 78, 1))
hh3cPwVcTrapOpen = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 78, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPwVcTrapOpen.setStatus('current')
if mibBuilder.loadTexts: hh3cPwVcTrapOpen.setDescription('Whether pwe3 trap is globally enabled. false: disable; true: enable.')
hh3cL2VpnPwe3Table = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 78, 2))
hh3cPwVcTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 78, 2, 1), )
if mibBuilder.loadTexts: hh3cPwVcTable.setStatus('current')
if mibBuilder.loadTexts: hh3cPwVcTable.setDescription('This table is the VC configuration table. Users can create or delete a VC by it.')
hh3cPwVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 78, 2, 1, 1), ).setIndexNames((0, "HH3C-L2VPN-PWE3-MIB", "hh3cPwVcIndex"))
if mibBuilder.loadTexts: hh3cPwVcEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cPwVcEntry.setDescription('Provides the information of a VC entry.')
hh3cPwVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 78, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cPwVcIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cPwVcIndex.setDescription('Index for the conceptual row identifying a PW within this PW Emulation table.')
hh3cPwVcID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 78, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPwVcID.setStatus('current')
if mibBuilder.loadTexts: hh3cPwVcID.setDescription("Used in the outgoing PW ID field within the 'Virtual Circuit FEC Element'.")
hh3cPwVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 78, 2, 1, 1, 3), Hh3cL2VpnVcEncapsType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPwVcType.setStatus('current')
if mibBuilder.loadTexts: hh3cPwVcType.setDescription("Indication of the L2Vpn's VC encapsulation type.")
hh3cPwVcPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 78, 2, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPwVcPeerAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cPwVcPeerAddr.setDescription('This object contain the value of the peer ip address of the Martini VLL PW.')
hh3cPwVcMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 78, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPwVcMtu.setStatus('current')
if mibBuilder.loadTexts: hh3cPwVcMtu.setDescription('If not equal zero, the optional Mtu object in the signaling protocol will be sent with this value, representing the locally supported MTU size over the interface (or the virtual interface) associated with the PW. The default value is 1500.')
hh3cPwVcCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 78, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2), ("multiPort", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPwVcCfgType.setStatus('current')
if mibBuilder.loadTexts: hh3cPwVcCfgType.setDescription('Indicates the type of the pw: 1: primary; 2: backup; 3: multiPort.')
hh3cPwVcInboundLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 78, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPwVcInboundLabel.setStatus('current')
if mibBuilder.loadTexts: hh3cPwVcInboundLabel.setDescription('For Martini VLL, the value will be created by system automatically.')
hh3cPwVcOutboundLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 78, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPwVcOutboundLabel.setStatus('current')
if mibBuilder.loadTexts: hh3cPwVcOutboundLabel.setDescription('For Martini VLL, the value will be created by the peer automatically.')
hh3cPwVcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 78, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPwVcIfIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cPwVcIfIndex.setDescription('Index of the interface (or the virtual interface) associated with the PW.')
hh3cPwVcAcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 78, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPwVcAcStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cPwVcAcStatus.setDescription('Local AC(Attachment Circuit) status: 1: down; 2: up.')
hh3cPwVcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 78, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPwVcStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cPwVcStatus.setDescription('Indicates the status of the PW in the local node. 1: down; 2: up.')
hh3cPwVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 78, 2, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPwVcRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cPwVcRowStatus.setDescription('This object is responsible for managing the creation, deletion and modification of rows, which support active status and CreatAndGo, destroy operation. To create a new row, hh3cPwVcID, hh3cPwVcType, hh3cPwVcPeerAddr hh3cPwVcMtu, hh3cPwVcCfgType and hh3cPwVcIfIndex must be specified.')
hh3cL2VpnPwe3Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 78, 3))
hh3cPwVcSwitchWtoP = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 78, 3, 1)).setObjects(("HH3C-L2VPN-PWE3-MIB", "hh3cPwVcID"), ("HH3C-L2VPN-PWE3-MIB", "hh3cPwVcType"), ("HH3C-L2VPN-PWE3-MIB", "hh3cPwVcPeerAddr"), ("HH3C-L2VPN-PWE3-MIB", "hh3cPwVcID"), ("HH3C-L2VPN-PWE3-MIB", "hh3cPwVcType"), ("HH3C-L2VPN-PWE3-MIB", "hh3cPwVcPeerAddr"))
if mibBuilder.loadTexts: hh3cPwVcSwitchWtoP.setStatus('current')
if mibBuilder.loadTexts: hh3cPwVcSwitchWtoP.setDescription('This notification is generated when switch from working pw to protect pw happens. The first group of hh3cPwVcID/hh3cPwVcType/hh3cPwVcPeerAddr is parameter of the work PW , and the second group of hh3cPwVcID/hh3cPwVcType/hh3cPwVcPeerAddr is parameter of the protect PW.')
hh3cPwVcSwitchPtoW = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 78, 3, 2)).setObjects(("HH3C-L2VPN-PWE3-MIB", "hh3cPwVcID"), ("HH3C-L2VPN-PWE3-MIB", "hh3cPwVcType"), ("HH3C-L2VPN-PWE3-MIB", "hh3cPwVcPeerAddr"), ("HH3C-L2VPN-PWE3-MIB", "hh3cPwVcID"), ("HH3C-L2VPN-PWE3-MIB", "hh3cPwVcType"), ("HH3C-L2VPN-PWE3-MIB", "hh3cPwVcPeerAddr"))
if mibBuilder.loadTexts: hh3cPwVcSwitchPtoW.setStatus('current')
if mibBuilder.loadTexts: hh3cPwVcSwitchPtoW.setDescription('This notification is generated when switch from protect pw to working pw happens. The first group of hh3cPwVcID/h3cPwVcTypehh3cPwVcPeerAddr is parameter of the protect PW , and the second group of hh3cPwVcID/hh3cPwVcType/hh3cPwVcPeerAddr is parameter of the work PW.')
hh3cPwVcDown = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 78, 3, 3)).setObjects(("HH3C-L2VPN-PWE3-MIB", "hh3cPwVcID"), ("HH3C-L2VPN-PWE3-MIB", "hh3cPwVcType"), ("HH3C-L2VPN-PWE3-MIB", "hh3cPwVcPeerAddr"))
if mibBuilder.loadTexts: hh3cPwVcDown.setStatus('current')
if mibBuilder.loadTexts: hh3cPwVcDown.setDescription("This notification indicates the VC's state changes to down.")
hh3cPwVcUp = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 78, 3, 4)).setObjects(("HH3C-L2VPN-PWE3-MIB", "hh3cPwVcID"), ("HH3C-L2VPN-PWE3-MIB", "hh3cPwVcType"), ("HH3C-L2VPN-PWE3-MIB", "hh3cPwVcPeerAddr"))
if mibBuilder.loadTexts: hh3cPwVcUp.setStatus('current')
if mibBuilder.loadTexts: hh3cPwVcUp.setDescription("This notification indicates the VC's state changes to up.")
hh3cPwVcDeleted = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 78, 3, 5)).setObjects(("HH3C-L2VPN-PWE3-MIB", "hh3cPwVcID"), ("HH3C-L2VPN-PWE3-MIB", "hh3cPwVcType"), ("HH3C-L2VPN-PWE3-MIB", "hh3cPwVcPeerAddr"))
if mibBuilder.loadTexts: hh3cPwVcDeleted.setStatus('current')
if mibBuilder.loadTexts: hh3cPwVcDeleted.setDescription('This notification indicates the VC is deleted.')
mibBuilder.exportSymbols("HH3C-L2VPN-PWE3-MIB", hh3cPwVcMtu=hh3cPwVcMtu, hh3cPwVcAcStatus=hh3cPwVcAcStatus, PYSNMP_MODULE_ID=hh3cL2VpnPwe3, hh3cPwVcInboundLabel=hh3cPwVcInboundLabel, hh3cL2VpnPwe3=hh3cL2VpnPwe3, hh3cPwVcStatus=hh3cPwVcStatus, hh3cL2VpnPwe3ScalarGroup=hh3cL2VpnPwe3ScalarGroup, hh3cPwVcTrapOpen=hh3cPwVcTrapOpen, hh3cPwVcCfgType=hh3cPwVcCfgType, hh3cPwVcPeerAddr=hh3cPwVcPeerAddr, hh3cPwVcIndex=hh3cPwVcIndex, hh3cPwVcUp=hh3cPwVcUp, hh3cPwVcOutboundLabel=hh3cPwVcOutboundLabel, hh3cPwVcSwitchWtoP=hh3cPwVcSwitchWtoP, hh3cPwVcSwitchPtoW=hh3cPwVcSwitchPtoW, hh3cPwVcDeleted=hh3cPwVcDeleted, hh3cPwVcTable=hh3cPwVcTable, hh3cPwVcRowStatus=hh3cPwVcRowStatus, hh3cPwVcIfIndex=hh3cPwVcIfIndex, Hh3cL2VpnVcEncapsType=Hh3cL2VpnVcEncapsType, hh3cL2VpnPwe3Notifications=hh3cL2VpnPwe3Notifications, hh3cPwVcDown=hh3cPwVcDown, hh3cPwVcType=hh3cPwVcType, hh3cPwVcEntry=hh3cPwVcEntry, hh3cPwVcID=hh3cPwVcID, hh3cL2VpnPwe3Table=hh3cL2VpnPwe3Table)
