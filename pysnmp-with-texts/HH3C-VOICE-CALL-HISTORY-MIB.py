#
# PySNMP MIB module HH3C-VOICE-CALL-HISTORY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-VOICE-CALL-HISTORY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:30:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
AbsoluteCounter32, = mibBuilder.importSymbols("DIAL-CONTROL-MIB", "AbsoluteCounter32")
hh3cVoice, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cVoice")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, IpAddress, Gauge32, Bits, MibIdentifier, ObjectIdentity, ModuleIdentity, Integer32, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "Gauge32", "Bits", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Integer32", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "TimeTicks")
TextualConvention, TimeStamp, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "DisplayString")
hh3cVoCallHistory = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16))
hh3cVoCallHistory.setRevisions(('2008-02-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cVoCallHistory.setRevisionsDescriptions(('The initial version of this MIB file.',))
if mibBuilder.loadTexts: hh3cVoCallHistory.setLastUpdated('200802170000Z')
if mibBuilder.loadTexts: hh3cVoCallHistory.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: hh3cVoCallHistory.setContactInfo('Platform Team Hangzhou H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China Http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: hh3cVoCallHistory.setDescription('This MIB file is to provide the definition of voice call history record information.')
class Hh3cGUid(TextualConvention, OctetString):
    description = 'Represents a global call identifier. The global call identifier is used as a unique identifier for an end-to-end call. A zero length Hh3cGUid indicates no value for the global call identifier.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class Hh3cCodecType(TextualConvention, Integer32):
    description = 'Type of Codec.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("g711a", 1), ("g711u", 2), ("g723r53", 3), ("g723r63", 4), ("g729r8", 5), ("g729a", 6), ("g726r16", 7), ("g726r24", 8), ("g726r32", 9), ("g726r40", 10), ("unknown", 11), ("g729br8", 12))

hh3cVoiceCallHistoryObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1))
hh3cCallHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 1), )
if mibBuilder.loadTexts: hh3cCallHistoryTable.setStatus('current')
if mibBuilder.loadTexts: hh3cCallHistoryTable.setDescription('A table containing information about specific calls to a specific destination.')
hh3cCallHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 1, 1), ).setIndexNames((0, "HH3C-VOICE-CALL-HISTORY-MIB", "hh3cCallHistoryIndex"))
if mibBuilder.loadTexts: hh3cCallHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cCallHistoryEntry.setDescription('The information regarding a single connection.')
hh3cCallHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hh3cCallHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cCallHistoryIndex.setDescription("The index of the call history table. It's a monotonically increasing integer for the sole purpose of indexing call disconnection events. When it reaches to the maximum value, the value will back to 1.")
hh3cCallHistorySetupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCallHistorySetupTime.setStatus('current')
if mibBuilder.loadTexts: hh3cCallHistorySetupTime.setDescription('The value of sysUpTime when the call was started.')
hh3cCallHistoryConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCallHistoryConnectTime.setStatus('current')
if mibBuilder.loadTexts: hh3cCallHistoryConnectTime.setDescription('The value of sysUpTime when the call was connected. If the call is not connected, this object will have a value of zero.')
hh3cCallHistoryTerminateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 1, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCallHistoryTerminateTime.setStatus('current')
if mibBuilder.loadTexts: hh3cCallHistoryTerminateTime.setDescription('The value of sysUpTime when the call was terminated.')
hh3cCallHistoryPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCallHistoryPeerAddress.setStatus('current')
if mibBuilder.loadTexts: hh3cCallHistoryPeerAddress.setDescription('The number this call was connected to. If the number is not available, it will have a length of zero.')
hh3cCallHistoryPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCallHistoryPeerId.setStatus('current')
if mibBuilder.loadTexts: hh3cCallHistoryPeerId.setDescription('This object identifies a single peer. This is the Id value of the peer table entry to which this call was made. If a peer table entry for this call does not exist or is unknown, the value of this object will be zero.')
hh3cCallHistoryLogicalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 1, 1, 7), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCallHistoryLogicalIfIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cCallHistoryLogicalIfIndex.setDescription('This is the ifIndex value of the logical interface through which this call was made. For ISDN media, this would be the ifIndex of the B channel which was used for this call. If the ifIndex value is unknown, the value of this object will be zero.')
hh3cCallHistoryCallOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("originate", 1), ("answer", 2), ("callback", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCallHistoryCallOrigin.setStatus('current')
if mibBuilder.loadTexts: hh3cCallHistoryCallOrigin.setDescription("The call origin. originate The call that is initiated. answer The call that is accepted. callback Either rejects the call and then calls back, or uses the 'Reverse charging' information element if it is available. Note that callback(3) is supposed to control charging, not security, and applies to callback prior to accepting a call. Callback for security reasons can be handled using PPP callback.")
hh3cCallHistoryChargedUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 1, 1, 9), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCallHistoryChargedUnits.setStatus('current')
if mibBuilder.loadTexts: hh3cCallHistoryChargedUnits.setDescription('The number of charged units for this connection. For incoming calls or if charging information is not supplied by the switch, the value of this object will be zero.')
hh3cCallHistoryInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("speech", 2), ("unrestrictedDigital", 3), ("unrestrictedDigital56", 4), ("restrictedDigital", 5), ("audio31", 6), ("audio7", 7), ("video", 8), ("packetSwitched", 9), ("fax", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCallHistoryInfoType.setStatus('current')
if mibBuilder.loadTexts: hh3cCallHistoryInfoType.setDescription('The information type for this call. other E.g. for non-isdn media. speech Speech. unrestrictedDigital Unrestricted digital information with 64k rate adaption. unrestrictedDigital56 Unrestricted digital information with 56k rate adaption. restrictedDigital Restricted digital information. audio31 3.1 kHz audio. audio7 7 kHz audio. video Video. packetSwitched Packetswitch. fax Fax.')
hh3cCallHistoryTransmitPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 1, 1, 11), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCallHistoryTransmitPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cCallHistoryTransmitPackets.setDescription('The number of packets which were transmitted while this call was active.')
hh3cCallHistoryTransmitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 1, 1, 12), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCallHistoryTransmitBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cCallHistoryTransmitBytes.setDescription('The number of bytes which were transmitted for this call.')
hh3cCallHistoryReceivePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 1, 1, 13), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCallHistoryReceivePackets.setStatus('current')
if mibBuilder.loadTexts: hh3cCallHistoryReceivePackets.setDescription('The number of packets which were received for this call.')
hh3cCallHistoryReceiveBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 1, 1, 14), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCallHistoryReceiveBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cCallHistoryReceiveBytes.setDescription('The number of bytes which were received for this call.')
hh3cVoiceCallHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 2), )
if mibBuilder.loadTexts: hh3cVoiceCallHistoryTable.setStatus('current')
if mibBuilder.loadTexts: hh3cVoiceCallHistoryTable.setDescription('This table is the voice extension to the call history table of DIAL-CONTROL-MIB. It contains voice encapsulation call leg information that is derived from the statistics of lower layer telephony interface.')
hh3cVoiceCallHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 2, 1), ).setIndexNames((0, "HH3C-VOICE-CALL-HISTORY-MIB", "hh3cCallHistoryIndex"))
if mibBuilder.loadTexts: hh3cVoiceCallHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cVoiceCallHistoryEntry.setDescription('The information regarding a extended voice call history information.')
hh3cVoCallHistoryConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 2, 1, 1), Hh3cGUid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVoCallHistoryConnectionId.setStatus('current')
if mibBuilder.loadTexts: hh3cVoCallHistoryConnectionId.setDescription('The global call identifier of circuit switched network for the gateway call.')
hh3cVoCallHistoryTxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVoCallHistoryTxDuration.setStatus('current')
if mibBuilder.loadTexts: hh3cVoCallHistoryTxDuration.setDescription('Duration of transmit path open from this peer to the voice gateway for the call. The units is milliseconds.')
hh3cVoCallHistoryVoiceTxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVoCallHistoryVoiceTxDuration.setStatus('current')
if mibBuilder.loadTexts: hh3cVoCallHistoryVoiceTxDuration.setDescription('Duration of voice transmitted from this peer to voice gateway for this call. The voice utilization rate can be obtained by dividing this by hh3cVoCallHistoryTxDuration object. The units is milliseconds.')
hh3cVoCallHistoryFaxTxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVoCallHistoryFaxTxDuration.setStatus('current')
if mibBuilder.loadTexts: hh3cVoCallHistoryFaxTxDuration.setDescription('Duration of fax transmitted from this peer to voice gateway for this call. The fax utilization rate can be obtained by dividing this by hh3cVoCallHistoryTxDuration object. The units is milliseconds.')
hh3cVoCallHistoryCoderType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 2, 1, 5), Hh3cCodecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVoCallHistoryCoderType.setStatus('current')
if mibBuilder.loadTexts: hh3cVoCallHistoryCoderType.setDescription('The negotiated coder type. It specifies the encode type to the PSTN leg of a call.')
hh3cVoCallHistoryImgPageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVoCallHistoryImgPageCount.setStatus('current')
if mibBuilder.loadTexts: hh3cVoCallHistoryImgPageCount.setDescription('The number of fax related image pages are received or transmitted via the peer for the call. The units is page.')
hh3cVoiceVoIPCallHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 3), )
if mibBuilder.loadTexts: hh3cVoiceVoIPCallHistoryTable.setStatus('current')
if mibBuilder.loadTexts: hh3cVoiceVoIPCallHistoryTable.setDescription('This table is the VoIP extension to the call active table of DIAL-CONTROL-MIB. It contains VoIP call leg information about specific VoIP call destination.')
hh3cVoiceVoIPCallHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 3, 1), ).setIndexNames((0, "HH3C-VOICE-CALL-HISTORY-MIB", "hh3cCallHistoryIndex"))
if mibBuilder.loadTexts: hh3cVoiceVoIPCallHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cVoiceVoIPCallHistoryEntry.setDescription('The information regarding a extended VoIP call history information.')
hh3cVoVoIPCallHistoryConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 3, 1, 1), Hh3cGUid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVoVoIPCallHistoryConnectionId.setStatus('current')
if mibBuilder.loadTexts: hh3cVoVoIPCallHistoryConnectionId.setDescription('The global call identifier of packet-switched network for the gateway call.')
hh3cVoVoIPCallHistoryRemSigIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVoVoIPCallHistoryRemSigIPType.setStatus('current')
if mibBuilder.loadTexts: hh3cVoVoIPCallHistoryRemSigIPType.setDescription('The type of remote system signalling IP address for the VoIP call.')
hh3cVoVoIPCallHistoryRemSigIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 3, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVoVoIPCallHistoryRemSigIPAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cVoVoIPCallHistoryRemSigIPAddr.setDescription('Remote system signalling IP address for the VoIP call.')
hh3cVoVoIPCallHistoryRemSigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVoVoIPCallHistoryRemSigPort.setStatus('current')
if mibBuilder.loadTexts: hh3cVoVoIPCallHistoryRemSigPort.setDescription('Remote system UDP listener signalling port to which to transmit voice packets.')
hh3cVoVoIPCallHistoryRemMedIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 3, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVoVoIPCallHistoryRemMedIPType.setStatus('current')
if mibBuilder.loadTexts: hh3cVoVoIPCallHistoryRemMedIPType.setDescription('The type of remote system media IP address for the VoIP call.')
hh3cVoVoIPCallHistoryRemMedIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 3, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVoVoIPCallHistoryRemMedIPAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cVoVoIPCallHistoryRemMedIPAddr.setDescription('Remote system media IP address for the VoIP call.')
hh3cVoVoIPCallHistoryRemMedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVoVoIPCallHistoryRemMedPort.setStatus('current')
if mibBuilder.loadTexts: hh3cVoVoIPCallHistoryRemMedPort.setDescription('Remote system UDP listener media port to which to transmit voice packets.')
hh3cVoVoIPCallHistorySessProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("h323", 2), ("sip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVoVoIPCallHistorySessProtocol.setStatus('current')
if mibBuilder.loadTexts: hh3cVoVoIPCallHistorySessProtocol.setDescription('The object specifies the session protocol to be used for internet call between local and remote router via IP backbone. unknown The protocol is unknown. h323 The protocol is H323. sip The protocol is session initiation.')
hh3cVoVoIPCallHistoryCoderType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 39, 16, 1, 3, 1, 9), Hh3cCodecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVoVoIPCallHistoryCoderType.setStatus('current')
if mibBuilder.loadTexts: hh3cVoVoIPCallHistoryCoderType.setDescription('The negotiated coder type. It specifies the encode type to the VoIP leg of a call.')
mibBuilder.exportSymbols("HH3C-VOICE-CALL-HISTORY-MIB", hh3cCallHistorySetupTime=hh3cCallHistorySetupTime, hh3cCallHistoryIndex=hh3cCallHistoryIndex, hh3cVoVoIPCallHistoryRemSigPort=hh3cVoVoIPCallHistoryRemSigPort, hh3cVoiceCallHistoryObjects=hh3cVoiceCallHistoryObjects, hh3cCallHistoryPeerAddress=hh3cCallHistoryPeerAddress, hh3cVoCallHistoryImgPageCount=hh3cVoCallHistoryImgPageCount, hh3cCallHistoryReceiveBytes=hh3cCallHistoryReceiveBytes, hh3cVoVoIPCallHistoryCoderType=hh3cVoVoIPCallHistoryCoderType, hh3cVoCallHistoryConnectionId=hh3cVoCallHistoryConnectionId, hh3cVoCallHistoryFaxTxDuration=hh3cVoCallHistoryFaxTxDuration, hh3cVoVoIPCallHistoryRemSigIPAddr=hh3cVoVoIPCallHistoryRemSigIPAddr, hh3cCallHistoryCallOrigin=hh3cCallHistoryCallOrigin, hh3cCallHistoryTransmitBytes=hh3cCallHistoryTransmitBytes, hh3cCallHistoryConnectTime=hh3cCallHistoryConnectTime, hh3cVoCallHistoryCoderType=hh3cVoCallHistoryCoderType, hh3cVoVoIPCallHistoryConnectionId=hh3cVoVoIPCallHistoryConnectionId, hh3cCallHistoryLogicalIfIndex=hh3cCallHistoryLogicalIfIndex, hh3cVoVoIPCallHistorySessProtocol=hh3cVoVoIPCallHistorySessProtocol, hh3cVoVoIPCallHistoryRemMedIPAddr=hh3cVoVoIPCallHistoryRemMedIPAddr, hh3cVoVoIPCallHistoryRemMedIPType=hh3cVoVoIPCallHistoryRemMedIPType, hh3cVoiceVoIPCallHistoryTable=hh3cVoiceVoIPCallHistoryTable, hh3cCallHistoryTerminateTime=hh3cCallHistoryTerminateTime, hh3cCallHistoryReceivePackets=hh3cCallHistoryReceivePackets, hh3cVoCallHistoryTxDuration=hh3cVoCallHistoryTxDuration, hh3cVoCallHistoryVoiceTxDuration=hh3cVoCallHistoryVoiceTxDuration, hh3cVoVoIPCallHistoryRemSigIPType=hh3cVoVoIPCallHistoryRemSigIPType, Hh3cGUid=Hh3cGUid, hh3cCallHistoryChargedUnits=hh3cCallHistoryChargedUnits, hh3cVoiceCallHistoryTable=hh3cVoiceCallHistoryTable, hh3cVoiceVoIPCallHistoryEntry=hh3cVoiceVoIPCallHistoryEntry, Hh3cCodecType=Hh3cCodecType, hh3cVoCallHistory=hh3cVoCallHistory, hh3cCallHistoryInfoType=hh3cCallHistoryInfoType, hh3cCallHistoryTransmitPackets=hh3cCallHistoryTransmitPackets, hh3cCallHistoryPeerId=hh3cCallHistoryPeerId, hh3cCallHistoryEntry=hh3cCallHistoryEntry, PYSNMP_MODULE_ID=hh3cVoCallHistory, hh3cCallHistoryTable=hh3cCallHistoryTable, hh3cVoVoIPCallHistoryRemMedPort=hh3cVoVoIPCallHistoryRemMedPort, hh3cVoiceCallHistoryEntry=hh3cVoiceCallHistoryEntry)
