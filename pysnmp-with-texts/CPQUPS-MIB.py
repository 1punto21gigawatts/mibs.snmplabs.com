#
# PySNMP MIB module CPQUPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQUPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:28:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
compaq, cpqHoTrapFlags = mibBuilder.importSymbols("CPQHOST-MIB", "compaq", "cpqHoTrapFlags")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32, NotificationType, Counter64, Unsigned32, enterprises, NotificationType, ObjectIdentity, iso, Integer32, Bits, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32", "NotificationType", "Counter64", "Unsigned32", "enterprises", "NotificationType", "ObjectIdentity", "iso", "Integer32", "Bits", "MibIdentifier", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cpqUps = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 12))
cpqUpsMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 12, 1))
cpqUpsComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 12, 2))
cpqUpsInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 12, 2, 1))
cpqUpsBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 12, 2, 2))
cpqUpsFamily = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 12, 2, 3))
cpqUpsOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 12, 2, 1, 4))
cpqUpsMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqUpsMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsMibRevMajor.setDescription('The Major Revision level of the MIB. A change in the major revision level represents a major change in the architecture of the MIB. A change in the major revision level may indicate a significant change in the information supported and/or the meaning of the supported information, correct interpretation of data may require a MIB document with the same major revision level.')
cpqUpsMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqUpsMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsMibRevMinor.setDescription('The Minor Revision level of the MIB. A change in the minor revision level may represent some minor additional support, no changes to any pre-existing information has occurred.')
cpqUpsMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqUpsMibCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsMibCondition.setDescription('The overall condition. This object represents the overall status of the UPS system represented by this MIB.')
cpqUpsOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 12, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqUpsOsCommonPollFreq.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsOsCommonPollFreq.setDescription("The Insight Agent's polling frequency. The frequency, in seconds, at which the Insight Agent requests information from the device driver. A frequency of zero (0) indicates that the Insight Agent retrieves the information upon request of a management station, it does not poll the device driver at a specific interval. If the poll frequency is zero (0) all attempts to write to this object will fail. If the poll frequency is non-zero, setting this value will change the polling frequency of the Insight Agent. Setting the poll frequency to zero (0) will always fail, an agent may also choose to fail any request to change the poll frequency to a value that would severely impact system performance.")
cpqUpsOsCommonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 12, 2, 1, 4, 2), )
if mibBuilder.loadTexts: cpqUpsOsCommonModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsOsCommonModuleTable.setDescription('A table of software modules/ that provide an interface to the device this MIB describes.')
cpqUpsOsCommonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 12, 2, 1, 4, 2, 1), ).setIndexNames((0, "CPQUPS-MIB", "cpqUpsOsCommonModuleIndex"))
if mibBuilder.loadTexts: cpqUpsOsCommonModuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsOsCommonModuleEntry.setDescription('A description of a software module that provides an interface to the device this MIB describes.')
cpqUpsOsCommonModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 12, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqUpsOsCommonModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsOsCommonModuleIndex.setDescription('A unique index for this module description.')
cpqUpsOsCommonModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 12, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqUpsOsCommonModuleName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsOsCommonModuleName.setDescription('The module name.')
cpqUpsOsCommonModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 12, 2, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqUpsOsCommonModuleVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsOsCommonModuleVersion.setDescription('The module version in XX.YY format. Where XX is the major version number and YY is the minor version number. This field will be a null (size 0) string if the agent cannot provide the module version.')
cpqUpsOsCommonModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 12, 2, 1, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqUpsOsCommonModuleDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsOsCommonModuleDate.setDescription('The module date. field octets contents range ===== ====== ======= ===== 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) This field will be set to year = 0 if the agent cannot provide the module date. The hour, minute, and second field will be set to zero (0) if they are not relevant. The year field is set with the most significant octet first.')
cpqUpsOsCommonModulePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 12, 2, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqUpsOsCommonModulePurpose.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsOsCommonModulePurpose.setDescription('The purpose of the module described in this entry.')
cpqUpsLineStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 12, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqUpsLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsLineStatus.setDescription('The status of the AC line input to the UPS.')
cpqUpsName = MibScalar((1, 3, 6, 1, 4, 1, 232, 12, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqUpsName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsName.setDescription('The UPS name (type).')
cpqUpsEstimatedBatteryLife = MibScalar((1, 3, 6, 1, 4, 1, 232, 12, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqUpsEstimatedBatteryLife.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsEstimatedBatteryLife.setDescription('The estimated time, in minutes, of battery power available. The value will be negative one (-1) if the agent is unable to determine this information. A UPS may not provide this information when AC power is available.')
cpqUpsAutoShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 232, 12, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqUpsAutoShutdownDelay.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsAutoShutdownDelay.setDescription('The number of minutes of battery power remaining before the UPS driver will begin a graceful shutdown of the OS. A value of -1 indicates that no automatic shutdown will occur.')
cpqUpsLaunchCommand = MibScalar((1, 3, 6, 1, 4, 1, 232, 12, 2, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqUpsLaunchCommand.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsLaunchCommand.setDescription('Application to launch for UPS support.')
cpqUpsAlarm = MibScalar((1, 3, 6, 1, 4, 1, 232, 12, 2, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqUpsAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsAlarm.setDescription('This variable contains the UPS alarm text.')
cpqUpsMemberTable = MibTable((1, 3, 6, 1, 4, 1, 232, 12, 2, 3, 1), )
if mibBuilder.loadTexts: cpqUpsMemberTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsMemberTable.setDescription('A table of entries that describes the family of rack-mounted servers that a single UPS supports.')
cpqUpsMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 12, 2, 3, 1, 1), ).setIndexNames((0, "CPQUPS-MIB", "cpqUpsMemberIndex"))
if mibBuilder.loadTexts: cpqUpsMemberEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsMemberEntry.setDescription('A table of entries that describes the family of rack-mounted servers that a single UPS supports.')
cpqUpsMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 12, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqUpsMemberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsMemberIndex.setDescription('A unique index for this module description.')
cpqUpsMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 12, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqUpsMemberName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsMemberName.setDescription('The name or address of one of the individual servers that is served by the rack-mounted UPS. Set cpqUpsMemberName to 0 to delete this row.')
cpqUpsMemberCommunityStr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 12, 2, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqUpsMemberCommunityStr.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsMemberCommunityStr.setDescription('The Community string for this individual server.')
cpqUpsAddMemberName = MibScalar((1, 3, 6, 1, 4, 1, 232, 12, 2, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqUpsAddMemberName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsAddMemberName.setDescription('To add a row to the cpqUpsMemberTable, this variable must be set, followed immediately by the set of the cpqUpsAddMemberCommunityStr. Sets must occur in this order, or else a new row will not be added to the table. ')
cpqUpsAddMemberCommunityStr = MibScalar((1, 3, 6, 1, 4, 1, 232, 12, 2, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqUpsAddMemberCommunityStr.setStatus('mandatory')
if mibBuilder.loadTexts: cpqUpsAddMemberCommunityStr.setDescription('To add a row to the cpqUpsMemberTable, the cpqUpsAddMemberName must be set, followed immediately by a set of this variable. Sets must occur in this order, or else a new row will not be added to the cpqUpsMemberTable.')
cpqUpsLineFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,12001)).setObjects(("CPQUPS-MIB", "cpqUpsEstimatedBatteryLife"))
if mibBuilder.loadTexts: cpqUpsLineFailed.setDescription('AC Line power failure. The UPS reports that the AC line power has failed.')
cpqUpsLineOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,12002))
if mibBuilder.loadTexts: cpqUpsLineOk.setDescription('AC line power ok. The UPS reports that the AC line power has returned.')
cpqUpsShutdown = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,12003))
if mibBuilder.loadTexts: cpqUpsShutdown.setDescription('UPS initiating graceful server shutdown. The UPS software is initiating a graceful server shutdown. Every attempt to preserve the state of the file system will be made. The server shutdown will be initiated due to a power anomaly.')
cpqUpsConfirmation = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,12004))
if mibBuilder.loadTexts: cpqUpsConfirmation.setDescription('Server now operational after power down. This server has previously been shutdown due to a power anomaly and has just become operational again.')
cpqUpsBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,12005))
if mibBuilder.loadTexts: cpqUpsBatteryLow.setDescription('UPS Battery Low. The server will soon lose power.')
cpqUps2LineFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,12006)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQUPS-MIB", "cpqUpsEstimatedBatteryLife"))
if mibBuilder.loadTexts: cpqUps2LineFailed.setDescription('AC Line power failure. The UPS reports that the AC line power has failed.')
cpqUps2LineOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,12007)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
if mibBuilder.loadTexts: cpqUps2LineOk.setDescription('AC line power ok. The UPS reports that the AC line power has returned.')
cpqUps2Shutdown = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,12008)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
if mibBuilder.loadTexts: cpqUps2Shutdown.setDescription('UPS initiating graceful server shutdown. The UPS software is initiating a graceful server shutdown. Every attempt to preserve the state of the file system will be made. The server shutdown will be initiated due to a power anomaly.')
cpqUps2Confirmation = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,12009)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
if mibBuilder.loadTexts: cpqUps2Confirmation.setDescription('Server now operational after power down. This server has previously been shutdown due to a power anomaly and has just become operational again.')
cpqUps2BatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,12010)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
if mibBuilder.loadTexts: cpqUps2BatteryLow.setDescription('UPS Battery Low. The server will soon lose power.')
cpqUpsOverload = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,12011)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
if mibBuilder.loadTexts: cpqUpsOverload.setDescription('The UPS has entered an overload condition. A failure may occur unless the overload is corrected.')
cpqUpsPendingBatteryFailure = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,12012)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
if mibBuilder.loadTexts: cpqUpsPendingBatteryFailure.setDescription('The UPS battery is about to fail. Replace as soon as possible.')
cpqUpsGenericCritical = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,12013)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQUPS-MIB", "cpqUpsAlarm"))
if mibBuilder.loadTexts: cpqUpsGenericCritical.setDescription('Generic UPS critical alarm.')
cpqUpsGenericInfo = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,12014)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQUPS-MIB", "cpqUpsAlarm"))
if mibBuilder.loadTexts: cpqUpsGenericInfo.setDescription('Generic UPS informational alarm.')
mibBuilder.exportSymbols("CPQUPS-MIB", cpqUpsGenericInfo=cpqUpsGenericInfo, cpqUpsLineFailed=cpqUpsLineFailed, cpqUps2Confirmation=cpqUps2Confirmation, cpqUpsMibRevMajor=cpqUpsMibRevMajor, cpqUpsOsCommonModuleName=cpqUpsOsCommonModuleName, cpqUpsName=cpqUpsName, cpqUps2Shutdown=cpqUps2Shutdown, cpqUps2LineOk=cpqUps2LineOk, cpqUpsMibRev=cpqUpsMibRev, cpqUpsAutoShutdownDelay=cpqUpsAutoShutdownDelay, cpqUpsMemberTable=cpqUpsMemberTable, cpqUpsInterface=cpqUpsInterface, cpqUpsOsCommonModuleVersion=cpqUpsOsCommonModuleVersion, cpqUpsLineStatus=cpqUpsLineStatus, cpqUpsMemberIndex=cpqUpsMemberIndex, cpqUpsOverload=cpqUpsOverload, cpqUps=cpqUps, cpqUpsConfirmation=cpqUpsConfirmation, cpqUpsBasic=cpqUpsBasic, cpqUpsOsCommonPollFreq=cpqUpsOsCommonPollFreq, cpqUpsAddMemberName=cpqUpsAddMemberName, cpqUpsMemberName=cpqUpsMemberName, cpqUpsOsCommonModuleDate=cpqUpsOsCommonModuleDate, cpqUpsShutdown=cpqUpsShutdown, cpqUpsMibCondition=cpqUpsMibCondition, cpqUps2LineFailed=cpqUps2LineFailed, cpqUpsEstimatedBatteryLife=cpqUpsEstimatedBatteryLife, cpqUpsOsCommonModuleEntry=cpqUpsOsCommonModuleEntry, cpqUps2BatteryLow=cpqUps2BatteryLow, cpqUpsOsCommonModuleIndex=cpqUpsOsCommonModuleIndex, cpqUpsOsCommonModuleTable=cpqUpsOsCommonModuleTable, cpqUpsPendingBatteryFailure=cpqUpsPendingBatteryFailure, cpqUpsAddMemberCommunityStr=cpqUpsAddMemberCommunityStr, cpqUpsMemberCommunityStr=cpqUpsMemberCommunityStr, cpqUpsGenericCritical=cpqUpsGenericCritical, cpqUpsOsCommonModulePurpose=cpqUpsOsCommonModulePurpose, cpqUpsMemberEntry=cpqUpsMemberEntry, cpqUpsComponent=cpqUpsComponent, cpqUpsFamily=cpqUpsFamily, cpqUpsLaunchCommand=cpqUpsLaunchCommand, cpqUpsOsCommon=cpqUpsOsCommon, cpqUpsAlarm=cpqUpsAlarm, cpqUpsBatteryLow=cpqUpsBatteryLow, cpqUpsMibRevMinor=cpqUpsMibRevMinor, cpqUpsLineOk=cpqUpsLineOk)
