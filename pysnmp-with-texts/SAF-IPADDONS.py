#
# PySNMP MIB module SAF-IPADDONS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SAF-IPADDONS
# Produced by pysmi-0.3.4 at Wed May  1 14:59:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter32, Gauge32, ModuleIdentity, Unsigned32, Integer32, NotificationType, enterprises, Bits, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "Gauge32", "ModuleIdentity", "Unsigned32", "Integer32", "NotificationType", "enterprises", "Bits", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "NotificationType", "ObjectIdentity")
TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime")
saf = MibIdentifier((1, 3, 6, 1, 4, 1, 7571))
tehnika = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100))
microwaveRadio = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1))
pointToPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1))
safip = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5))
safipaddons = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15))
ipaddSys = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 1))
ipaddIfB = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2))
ipaddIfM = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 3))
modemTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: modemTemperature.setDescription('Unit temperature in degrees by Celsius. degrees')
iduInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iduInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: iduInputVoltage.setDescription('IDU input voltage [V]')
iduInputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iduInputCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: iduInputCurrent.setDescription('IDU input current [A]')
iduPowerConsumption = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iduPowerConsumption.setStatus('mandatory')
if mibBuilder.loadTexts: iduPowerConsumption.setDescription('IDU power consumption [W]')
oduTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: oduTemperature.setDescription('Odu or radio temperature in degrees by Celsius.')
oduPsuState = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("init", 1), ("off", 2), ("idle", 3), ("ok", 4), ("overload", 5), ("short", 6), ("fault", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduPsuState.setStatus('mandatory')
if mibBuilder.loadTexts: oduPsuState.setDescription('Odu or radio PSU state')
iduOutputVoltageToOdu = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iduOutputVoltageToOdu.setStatus('mandatory')
if mibBuilder.loadTexts: iduOutputVoltageToOdu.setDescription('IDU output voltage to radio [V]')
iduOutputCurrentToOdu = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iduOutputCurrentToOdu.setStatus('mandatory')
if mibBuilder.loadTexts: iduOutputCurrentToOdu.setDescription('IDU output current to radio [A]')
oduPowerConsumption = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduPowerConsumption.setStatus('mandatory')
if mibBuilder.loadTexts: oduPowerConsumption.setDescription('ODU (radio) power consumption [W]')
oduCableAttenuation = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduCableAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: oduCableAttenuation.setDescription('ODU cable attenuation [dB]')
ipaddIfBTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2), )
if mibBuilder.loadTexts: ipaddIfBTable.setStatus('current')
if mibBuilder.loadTexts: ipaddIfBTable.setDescription('IF addons table.')
ipaddIfBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2, 1), ).setIndexNames((0, "SAF-IPADDONS", "ipaddIfBIndex"))
if mibBuilder.loadTexts: ipaddIfBEntry.setStatus('current')
if mibBuilder.loadTexts: ipaddIfBEntry.setDescription('Entries of table.')
ipaddIfBIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfBIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfBIndex.setDescription('INDEX the same value as ifIndex')
ipaddIfBduplex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("half", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfBduplex.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfBduplex.setDescription('')
ipaddIfBRxFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfBRxFlow.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfBRxFlow.setDescription('')
ipaddIfBTxFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfBTxFlow.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfBTxFlow.setDescription('')
ipaddIfBRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfBRxState.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfBRxState.setDescription('')
ipaddIfBTxTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfBTxTxState.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfBTxTxState.setDescription('')
ipaddIfBTxQ0PKT = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfBTxQ0PKT.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfBTxQ0PKT.setDescription('')
ipaddIfBTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfBTxCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfBTxCollisions.setDescription('')
ipaddIfBTxSingleCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfBTxSingleCollision.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfBTxSingleCollision.setDescription('')
ipaddIfBTxMultiCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfBTxMultiCollision.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfBTxMultiCollision.setDescription('')
ipaddIfBRxPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfBRxPausePkts.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfBRxPausePkts.setDescription('')
ipaddIfBRxFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfBRxFCSErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfBRxFCSErrors.setDescription('')
ipaddIfBRxGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfBRxGoodOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfBRxGoodOctets.setDescription('')
ipaddIfBRxSAChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfBRxSAChanges.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfBRxSAChanges.setDescription('')
ipaddIfBRxExcessSizeDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfBRxExcessSizeDisc.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfBRxExcessSizeDisc.setDescription('')
ipaddIfBRxSymbolError = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfBRxSymbolError.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfBRxSymbolError.setDescription('')
ipaddIfBRxPkts1523to2047Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfBRxPkts1523to2047Octets.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfBRxPkts1523to2047Octets.setDescription('')
ipaddIfBRxPkts2048to4095Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfBRxPkts2048to4095Octets.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfBRxPkts2048to4095Octets.setDescription('')
ipaddIfBRxPkts4096to8191Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfBRxPkts4096to8191Octets.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfBRxPkts4096to8191Octets.setDescription('')
ipaddIfBRxPkts8192to9728Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 2, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfBRxPkts8192to9728Octets.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfBRxPkts8192to9728Octets.setDescription('')
ipaddIfMTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 3, 2), )
if mibBuilder.loadTexts: ipaddIfMTable.setStatus('current')
if mibBuilder.loadTexts: ipaddIfMTable.setDescription('IF addons table.')
ipaddIfMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 3, 2, 1), ).setIndexNames((0, "SAF-IPADDONS", "ipaddIfMIndex"))
if mibBuilder.loadTexts: ipaddIfMEntry.setStatus('current')
if mibBuilder.loadTexts: ipaddIfMEntry.setDescription('Entries of table.')
ipaddIfMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfMIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfMIndex.setDescription('Index')
ipaddIfMduplex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("half", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfMduplex.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfMduplex.setDescription('')
ipaddIfMFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfMFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfMFlowControl.setDescription('')
ipaddIfMRxLoPriorityByte = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfMRxLoPriorityByte.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfMRxLoPriorityByte.setDescription('')
ipaddIfMRxHiPriorityByte = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfMRxHiPriorityByte.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfMRxHiPriorityByte.setDescription('')
ipaddIfMRxSymbolError = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfMRxSymbolError.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfMRxSymbolError.setDescription('')
ipaddIfMRxCRCerror = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfMRxCRCerror.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfMRxCRCerror.setDescription('')
ipaddIfMRxControl8808Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfMRxControl8808Pkts.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfMRxControl8808Pkts.setDescription('')
ipaddIfMRxPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfMRxPausePkts.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfMRxPausePkts.setDescription('')
ipaddIfMTxLoPriorityByte = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfMTxLoPriorityByte.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfMTxLoPriorityByte.setDescription('')
ipaddIfMTxHiPriorityByte = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfMTxHiPriorityByte.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfMTxHiPriorityByte.setDescription('')
ipaddIfMTxLateCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfMTxLateCollision.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfMTxLateCollision.setDescription('')
ipaddIfMTxPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfMTxPausePkts.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfMTxPausePkts.setDescription('')
ipaddIfMTxDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfMTxDeferred.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfMTxDeferred.setDescription('')
ipaddIfMTxTotalCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfMTxTotalCollision.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfMTxTotalCollision.setDescription('')
ipaddIfMTxExcessiveCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfMTxExcessiveCollision.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfMTxExcessiveCollision.setDescription('')
ipaddIfMTxSingleCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfMTxSingleCollision.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfMTxSingleCollision.setDescription('')
ipaddIfMTxMultipleCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 1, 1, 5, 15, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddIfMTxMultipleCollision.setStatus('mandatory')
if mibBuilder.loadTexts: ipaddIfMTxMultipleCollision.setDescription('')
mibBuilder.exportSymbols("SAF-IPADDONS", oduCableAttenuation=oduCableAttenuation, ipaddIfBTxQ0PKT=ipaddIfBTxQ0PKT, ipaddIfBRxFCSErrors=ipaddIfBRxFCSErrors, ipaddIfMTable=ipaddIfMTable, ipaddIfMTxDeferred=ipaddIfMTxDeferred, iduOutputVoltageToOdu=iduOutputVoltageToOdu, ipaddIfMTxSingleCollision=ipaddIfMTxSingleCollision, ipaddIfMTxPausePkts=ipaddIfMTxPausePkts, ipaddIfMEntry=ipaddIfMEntry, ipaddIfMIndex=ipaddIfMIndex, ipaddSys=ipaddSys, tehnika=tehnika, ipaddIfBRxState=ipaddIfBRxState, ipaddIfBRxGoodOctets=ipaddIfBRxGoodOctets, ipaddIfMFlowControl=ipaddIfMFlowControl, saf=saf, ipaddIfBRxFlow=ipaddIfBRxFlow, ipaddIfMTxHiPriorityByte=ipaddIfMTxHiPriorityByte, oduPowerConsumption=oduPowerConsumption, ipaddIfBRxPkts4096to8191Octets=ipaddIfBRxPkts4096to8191Octets, ipaddIfMRxPausePkts=ipaddIfMRxPausePkts, ipaddIfMRxLoPriorityByte=ipaddIfMRxLoPriorityByte, ipaddIfBRxSAChanges=ipaddIfBRxSAChanges, ipaddIfMRxControl8808Pkts=ipaddIfMRxControl8808Pkts, ipaddIfMTxMultipleCollision=ipaddIfMTxMultipleCollision, iduOutputCurrentToOdu=iduOutputCurrentToOdu, ipaddIfBTxTxState=ipaddIfBTxTxState, safipaddons=safipaddons, iduInputCurrent=iduInputCurrent, ipaddIfMRxSymbolError=ipaddIfMRxSymbolError, safip=safip, oduPsuState=oduPsuState, ipaddIfMTxLateCollision=ipaddIfMTxLateCollision, ipaddIfBTxCollisions=ipaddIfBTxCollisions, ipaddIfMRxCRCerror=ipaddIfMRxCRCerror, ipaddIfMTxLoPriorityByte=ipaddIfMTxLoPriorityByte, ipaddIfBTxMultiCollision=ipaddIfBTxMultiCollision, ipaddIfMduplex=ipaddIfMduplex, oduTemperature=oduTemperature, microwaveRadio=microwaveRadio, ipaddIfBTxSingleCollision=ipaddIfBTxSingleCollision, ipaddIfBRxSymbolError=ipaddIfBRxSymbolError, ipaddIfMTxTotalCollision=ipaddIfMTxTotalCollision, ipaddIfBEntry=ipaddIfBEntry, iduPowerConsumption=iduPowerConsumption, iduInputVoltage=iduInputVoltage, ipaddIfBRxPausePkts=ipaddIfBRxPausePkts, ipaddIfBRxExcessSizeDisc=ipaddIfBRxExcessSizeDisc, ipaddIfBTable=ipaddIfBTable, ipaddIfBRxPkts8192to9728Octets=ipaddIfBRxPkts8192to9728Octets, ipaddIfMRxHiPriorityByte=ipaddIfMRxHiPriorityByte, ipaddIfMTxExcessiveCollision=ipaddIfMTxExcessiveCollision, modemTemperature=modemTemperature, ipaddIfBRxPkts2048to4095Octets=ipaddIfBRxPkts2048to4095Octets, ipaddIfBTxFlow=ipaddIfBTxFlow, pointToPoint=pointToPoint, ipaddIfB=ipaddIfB, ipaddIfBduplex=ipaddIfBduplex, ipaddIfBRxPkts1523to2047Octets=ipaddIfBRxPkts1523to2047Octets, ipaddIfM=ipaddIfM, ipaddIfBIndex=ipaddIfBIndex)
