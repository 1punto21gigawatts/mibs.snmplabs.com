#
# PySNMP MIB module REDSTONE-PPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/REDSTONE-PPP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:55:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ifIndex, InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex", "InterfaceIndexOrZero")
rsMgmt, = mibBuilder.importSymbols("REDSTONE-SMI", "rsMgmt")
RsEnable, RsNextIfIndex = mibBuilder.importSymbols("REDSTONE-TC", "RsEnable", "RsNextIfIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32, MibIdentifier, IpAddress, Unsigned32, Integer32, TimeTicks, Counter64, ModuleIdentity, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32", "MibIdentifier", "IpAddress", "Unsigned32", "Integer32", "TimeTicks", "Counter64", "ModuleIdentity", "Bits", "Gauge32")
RowStatus, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TextualConvention", "DisplayString")
rsPppMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2773, 2, 11))
rsPppMIB.setRevisions(('1999-07-01 00:00', '1998-01-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsPppMIB.setRevisionsDescriptions(('Additional objects added to support remote access capabilities, including termination reason, authentication protocol, option negotiation status.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: rsPppMIB.setLastUpdated('9907010000Z')
if mibBuilder.loadTexts: rsPppMIB.setOrganization('Redstone Communications, Inc.')
if mibBuilder.loadTexts: rsPppMIB.setContactInfo(' Redstone Communications, Inc. 5 Carlisle Road Westford MA 01886 USA Tel: +1-978-692-1999 Email: mib@redstonecom.com ')
if mibBuilder.loadTexts: rsPppMIB.setDescription('The PPP MIB for the Redstone Communications Inc. enterprise.')
class RsPppAuthentication(TextualConvention, Integer32):
    description = 'Specifies the type(s) of PPP authentication used, if any: none No authentication is negotiated. pap PAP negotiation only. chap CHAP negotiation only. papChap PAP negotiation is attempted first; if fails, attempt CHAP. chapPap CHAP negotiation is attempted first; if fails, attempt PAP.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("none", 0), ("pap", 1), ("chap", 2), ("papChap", 3), ("chapPap", 4))

rsPppObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1))
rsPppLcp = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1))
rsPppSec = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 2))
rsPppIp = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 3))
rsPppOsi = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 4))
rsPppSession = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 5))
rsPppLinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1, 1), )
if mibBuilder.loadTexts: rsPppLinkStatusTable.setStatus('current')
if mibBuilder.loadTexts: rsPppLinkStatusTable.setDescription('This table contains entries for PPP interfaces present in the system.')
rsPppLinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rsPppLinkStatusEntry.setStatus('current')
if mibBuilder.loadTexts: rsPppLinkStatusEntry.setDescription('Each entry describes the characteristics of a PPP interface.')
rsPppLinkStatusTerminateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("adminDisable", 2), ("lowerLayerDown", 3), ("noUpperInterface", 4), ("authenticationFailure", 5), ("peerTerminated", 6), ("peerRenegotiated", 7), ("maxRetriesExceeded", 8), ("negotiationFailure", 9), ("keepaliveFailure", 10), ("sessionTimeout", 11), ("inactivityTimeout", 12), ("addressLeaseExpired", 13), ("adminLogout", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppLinkStatusTerminateReason.setStatus('current')
if mibBuilder.loadTexts: rsPppLinkStatusTerminateReason.setDescription('Reason the PPP link was terminated: none None. other Not specified. adminDisable Interface administratively disabled. lowerLayerDown Underlying interface is down. noUpperInterface No interface above PPP. authenticationFailure Authentication failed. peerTerminated Peer initiated termination. peerRenegotiated Peer initiated renegotiation. maxRetriesExceeded Maximum number of config retries exceeded. negotiationFailure Failed to negotiate LCP option. See rsPppLinkStatusTerminateNegFailOption. keepaliveFailure Keepalive failed. sessionTimeout Maximum session period expired. inactivityTimeout Maximum inactivity period expired. addressLeaseExpired Lease for network address expired. adminLogout Session administratively terminated.')
rsPppLinkStatusTerminateNegFailOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("localMru", 2), ("remoteMru", 3), ("localMagicNumber", 4), ("remoteMagicNumber", 5), ("localAuthentication", 6), ("localToRemoteProtocolCompression", 7), ("localToRemoteACCompression", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppLinkStatusTerminateNegFailOption.setStatus('current')
if mibBuilder.loadTexts: rsPppLinkStatusTerminateNegFailOption.setDescription("Reports the PPP LCP option for which negotiation failed, when rsPppLinkStatusTerminateReason has the value 'negotiationFailure'.")
rsPppLinkStatusInKeepaliveRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppLinkStatusInKeepaliveRequests.setStatus('current')
if mibBuilder.loadTexts: rsPppLinkStatusInKeepaliveRequests.setDescription('Number of keepalive requests received.')
rsPppLinkStatusOutKeepaliveRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppLinkStatusOutKeepaliveRequests.setStatus('current')
if mibBuilder.loadTexts: rsPppLinkStatusOutKeepaliveRequests.setDescription('Number of keepalive requests transmitted.')
rsPppLinkStatusInKeepaliveReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppLinkStatusInKeepaliveReplies.setStatus('current')
if mibBuilder.loadTexts: rsPppLinkStatusInKeepaliveReplies.setDescription('Number of keepalive replies received.')
rsPppLinkStatusOutKeepaliveReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppLinkStatusOutKeepaliveReplies.setStatus('current')
if mibBuilder.loadTexts: rsPppLinkStatusOutKeepaliveReplies.setDescription('Number of keepalive replies transmitted.')
rsPppLinkStatusKeepaliveFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppLinkStatusKeepaliveFailures.setStatus('current')
if mibBuilder.loadTexts: rsPppLinkStatusKeepaliveFailures.setDescription('Number of keepalive failures detected.')
rsPppLinkStatusLocalMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppLinkStatusLocalMagicNumber.setStatus('current')
if mibBuilder.loadTexts: rsPppLinkStatusLocalMagicNumber.setDescription('Magic number negotiated for the local side.')
rsPppLinkStatusRemoteMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppLinkStatusRemoteMagicNumber.setStatus('current')
if mibBuilder.loadTexts: rsPppLinkStatusRemoteMagicNumber.setDescription('Magic number negotiated for the remote side.')
rsPppLinkStatusLocalAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1, 1, 1, 10), RsPppAuthentication()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppLinkStatusLocalAuthentication.setStatus('current')
if mibBuilder.loadTexts: rsPppLinkStatusLocalAuthentication.setDescription('Authentication protocol negotiated for the local side.')
rsPppLinkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1, 2), )
if mibBuilder.loadTexts: rsPppLinkConfigTable.setStatus('current')
if mibBuilder.loadTexts: rsPppLinkConfigTable.setDescription('This table contains entries for PPP interfaces present in the system.')
rsPppLinkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1, 2, 1), ).setIndexNames((0, "REDSTONE-PPP-MIB", "rsPppLinkConfigIfIndex"))
if mibBuilder.loadTexts: rsPppLinkConfigEntry.setStatus('current')
if mibBuilder.loadTexts: rsPppLinkConfigEntry.setDescription('Each entry describes the characteristics of a PPP interface. Creating/deleting entries in this table causes corresponding entries for be created /deleted in ifTable/ifXTable/rsIfTable.')
rsPppLinkConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rsPppLinkConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: rsPppLinkConfigIfIndex.setDescription('The ifIndex of the PPP interface. When creating entries in this table, suitable values for this object are determined by reading rsPppNextIfIndex.')
rsPppLinkConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsPppLinkConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: rsPppLinkConfigRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: rsPppLinkConfigRowStatus rsPppLinkConfigLowerIfIndex In addition, when creating an entry the following conditions must hold: A value for rsPppLinkConfigIndex must have been determined previously, by reading rsPppNextIfIndex. The interface identified by rsPppLinkConfigLowerIfIndex must exist. A corresponding entry in ifTable/ifXTable/rsIfTable is created/destroyed as a result of creating/destroying an entry in this table. ')
rsPppLinkConfigLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1, 2, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsPppLinkConfigLowerIfIndex.setStatus('current')
if mibBuilder.loadTexts: rsPppLinkConfigLowerIfIndex.setDescription('The ifIndex of an interface over which this PPP interface is to be layered. A value of zero indicates no layering. An implementation may choose to require that a nonzero value be configured at entry creation.')
rsPppLinkConfigKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(30, 300), )).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsPppLinkConfigKeepalive.setStatus('current')
if mibBuilder.loadTexts: rsPppLinkConfigKeepalive.setDescription('Keepalive interval in seconds. A value of zero disables keepalive. Keepalive is performed using LCP Echo.')
rsPppLinkConfigAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1, 2, 1, 5), RsPppAuthentication().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsPppLinkConfigAuthentication.setStatus('current')
if mibBuilder.loadTexts: rsPppLinkConfigAuthentication.setDescription('Specifies the type(s) of authentication, if any, to be negotiated with the peer: none No authentication is negotiated. pap PAP negotiation only. chap CHAP negotiation only. papChap PAP negotiation is attempted first; if fails, attempt CHAP. chapPap CHAP negotiation is attempted first; if fails, attempt PAP.')
rsPppLinkConfigMaxAuthenRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsPppLinkConfigMaxAuthenRetries.setStatus('current')
if mibBuilder.loadTexts: rsPppLinkConfigMaxAuthenRetries.setDescription('The number of authentication retries permitted, in addition to a failed initial attempt. If all retries fail, the link is reset.')
rsPppNextIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 1, 3), RsNextIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppNextIfIndex.setStatus('current')
if mibBuilder.loadTexts: rsPppNextIfIndex.setDescription('Coordinate ifIndex value allocation for entries in rsPppLinkConfigTable. A GET of this object returns the next available ifIndex value to be used to create an entry in the associated interface table; or zero, if no valid ifIndex value is available. This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that ifIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously.')
rsPppIpTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 3, 1), )
if mibBuilder.loadTexts: rsPppIpTable.setStatus('current')
if mibBuilder.loadTexts: rsPppIpTable.setDescription('Table containing the IP parameters for the local PPP entity.')
rsPppIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rsPppIpEntry.setStatus('current')
if mibBuilder.loadTexts: rsPppIpEntry.setDescription('IPCP status information for a particular PPP link.')
rsPppIpServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 3, 1, 1, 1), RsEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppIpServiceStatus.setStatus('current')
if mibBuilder.loadTexts: rsPppIpServiceStatus.setDescription('Indicates whether IP protocol service is operating over this PPP link. Service is established on this link through means outside this MIB.')
rsPppIpTerminateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("noService", 2), ("admin", 3), ("linkDown", 4), ("peerTerminated", 5), ("peerRenegotiated", 6), ("maxRetriesExceeded", 7), ("negotiationFailure", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppIpTerminateReason.setStatus('current')
if mibBuilder.loadTexts: rsPppIpTerminateReason.setDescription('Reason the IPCP link was terminated: none None. other Not specified. noService No IP service configured on this PPP link. admin Administratively disabled. linkDown Underlying link is down. peerTerminated Peer initiated termination. peerRenegotiated Peer initiated renegotiation. maxRetriesExceeded Maximum number of config retries exceeded. negotiationFailure Failed to negotiate IPCP option. See rsPppIpTerminateNegFailOption.')
rsPppIpTerminateNegFailOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("localIpAddress", 2), ("remoteIpAddress", 3), ("remotePrimaryDnsAddress", 4), ("remoteSecondaryDnsAddress", 5), ("remotePrimaryWinsAddress", 6), ("remoteSecondaryWinsAddress", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppIpTerminateNegFailOption.setStatus('current')
if mibBuilder.loadTexts: rsPppIpTerminateNegFailOption.setDescription("Reports the PPP IPCP option for which negotiation failed, when rsPppIpTerminateReason has the value 'negotiationFailure'.")
rsPppIpLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppIpLocalIpAddress.setStatus('current')
if mibBuilder.loadTexts: rsPppIpLocalIpAddress.setDescription('IP Address used by the local side.')
rsPppIpRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 3, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppIpRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: rsPppIpRemoteIpAddress.setDescription('IP Address used by the remote side.')
rsPppIpRemotePrimaryDnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 3, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppIpRemotePrimaryDnsAddress.setStatus('current')
if mibBuilder.loadTexts: rsPppIpRemotePrimaryDnsAddress.setDescription('Primary DNS server used by the remote side.')
rsPppIpRemoteSecondaryDnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 3, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppIpRemoteSecondaryDnsAddress.setStatus('current')
if mibBuilder.loadTexts: rsPppIpRemoteSecondaryDnsAddress.setDescription('Secondary DNS server used by the remote side.')
rsPppIpRemotePrimaryWinsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 3, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppIpRemotePrimaryWinsAddress.setStatus('current')
if mibBuilder.loadTexts: rsPppIpRemotePrimaryWinsAddress.setDescription('Primary WINS server used by the remote side.')
rsPppIpRemoteSecondaryWinsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 3, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppIpRemoteSecondaryWinsAddress.setStatus('current')
if mibBuilder.loadTexts: rsPppIpRemoteSecondaryWinsAddress.setDescription('Secondary WINS server used by the remote side.')
rsPppIpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 3, 2), )
if mibBuilder.loadTexts: rsPppIpConfigTable.setStatus('current')
if mibBuilder.loadTexts: rsPppIpConfigTable.setDescription('Table containing the IP parameters for the local PPP entity.')
rsPppIpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rsPppIpConfigEntry.setStatus('current')
if mibBuilder.loadTexts: rsPppIpConfigEntry.setDescription('IPCP configuration information for a particular PPP link.')
rsPppIpConfigPeerDnsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 3, 2, 1, 1), RsEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsPppIpConfigPeerDnsPriority.setStatus('current')
if mibBuilder.loadTexts: rsPppIpConfigPeerDnsPriority.setDescription("When enabled, allows peer's DNS address to prevail in the event of a negotiation conflict; when disabled, the local PPP interface's DNS address prevails.")
rsPppIpConfigPeerWinsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 3, 2, 1, 2), RsEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsPppIpConfigPeerWinsPriority.setStatus('current')
if mibBuilder.loadTexts: rsPppIpConfigPeerWinsPriority.setDescription("When enabled, allows peer's WINS address to prevail in the event of a negotiation conflict; when disabled, the local PPP interface's WINS address prevails.")
rsPppOsiTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 4, 1), )
if mibBuilder.loadTexts: rsPppOsiTable.setStatus('current')
if mibBuilder.loadTexts: rsPppOsiTable.setDescription('Table containing the OSI parameters for the local PPP entity.')
rsPppOsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rsPppOsiEntry.setStatus('current')
if mibBuilder.loadTexts: rsPppOsiEntry.setDescription('OSICP status information for a particular PPP link.')
rsPppOsiServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 4, 1, 1, 1), RsEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppOsiServiceStatus.setStatus('current')
if mibBuilder.loadTexts: rsPppOsiServiceStatus.setDescription('Indicates whether OSI protocol service is operating over this PPP link. Service is established on this link through means outside this MIB.')
rsPppOsiOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("not-opened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppOsiOperStatus.setStatus('current')
if mibBuilder.loadTexts: rsPppOsiOperStatus.setDescription('The operational status of the OSI network protocol. If the value of this object is up then the finite state machine for the OSI network protocol has reached the Opened state.')
rsPppOsiTerminateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("noService", 2), ("admin", 3), ("linkDown", 4), ("peerTerminated", 5), ("peerRenegotiated", 6), ("maxRetriesExceeded", 7), ("negotiationFailure", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppOsiTerminateReason.setStatus('current')
if mibBuilder.loadTexts: rsPppOsiTerminateReason.setDescription('Reason the OSICP link was terminated: none None. other Not specified. noService No OSI service configured on this PPP link. admin Administratively disabled. linkDown Underlying link is down. peerTerminated Peer initiated termination. peerRenegotiated Peer initiated renegotiation. maxRetriesExceeded Maximum number of config retries exceeded. negotiationFailure Failed to negotiate IPCP option. See rsPppOsiTerminateNegFailOption.')
rsPppOsiTerminateNegFailOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("localAlignNpdu", 2), ("remoteAlignNpdu", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppOsiTerminateNegFailOption.setStatus('current')
if mibBuilder.loadTexts: rsPppOsiTerminateNegFailOption.setDescription("Reports the PPP OSICP option for which negotiation failed, when rsPppOsiTerminateReason has the value 'negotiationFailure'.")
rsPppOsiLocalAlignNpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("none", 0), ("oneModulo4", 1), ("twoModulo4", 2), ("threeModulo4", 3), ("fourModulo4", 4), ("even", 254), ("odd", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppOsiLocalAlignNpdu.setStatus('current')
if mibBuilder.loadTexts: rsPppOsiLocalAlignNpdu.setDescription('Local alignment of network PDU: none No alignment specified. oneModulo4 Alignment on first octet (out of four). twoModulo4 Alignment on second octet (out of four). threeModulo4 Alignment on third octet (out of four). fourModulo4 Alignment on fourth octet (out of four). even Alignment on even-octet boundary. odd Alignment on odd-octet boundary.')
rsPppOsiRemoteAlignNpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("none", 0), ("oneModulo4", 1), ("twoModulo4", 2), ("threeModulo4", 3), ("fourModulo4", 4), ("even", 254), ("odd", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppOsiRemoteAlignNpdu.setStatus('current')
if mibBuilder.loadTexts: rsPppOsiRemoteAlignNpdu.setDescription('Remote alignment of network PDU. none No alignment specified. oneModulo4 Alignment on first octet (out of four). twoModulo4 Alignment on second octet (out of four). threeModulo4 Alignment on third octet (out of four). fourModulo4 Alignment on fourth octet (out of four). even Alignment on even-octet boundary. odd Alignment on odd-octet boundary.')
rsPppOsiConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 4, 2), )
if mibBuilder.loadTexts: rsPppOsiConfigTable.setStatus('current')
if mibBuilder.loadTexts: rsPppOsiConfigTable.setDescription('Table containing configuration variables for the OSICP for the local PPP entity.')
rsPppOsiConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rsPppOsiConfigEntry.setStatus('current')
if mibBuilder.loadTexts: rsPppOsiConfigEntry.setDescription('OSICP information for a particular PPP link.')
rsPppOsiConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsPppOsiConfigAdminStatus.setStatus('current')
if mibBuilder.loadTexts: rsPppOsiConfigAdminStatus.setDescription("The immediate desired status of the OSI network protocol. Setting this object to open will inject an administrative open event into the OSI network protocol's finite state machine. Setting this object to close will inject an administrative close event into the OSI network protocol's finite state machine.")
rsPppSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 5, 1), )
if mibBuilder.loadTexts: rsPppSessionTable.setStatus('current')
if mibBuilder.loadTexts: rsPppSessionTable.setDescription('This table contains entries for PPP interfaces present in the system.')
rsPppSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rsPppSessionEntry.setStatus('current')
if mibBuilder.loadTexts: rsPppSessionEntry.setDescription('Each entry describes the characteristics of a PPP interface.')
rsPppSessionGrant = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 5, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppSessionGrant.setStatus('current')
if mibBuilder.loadTexts: rsPppSessionGrant.setDescription('Indicates whether a session has been granted via the authentication mechanism.')
rsPppSessionTerminateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("userRequest", 2), ("keepaliveFailure", 3), ("sessionTimeout", 4), ("inactivityTimeout", 5), ("adminDisable", 6), ("lowerLayerDown", 7), ("noUpperInterface", 8), ("deny", 9), ("noHardware", 10), ("noResources", 11), ("noInterface", 12), ("challengeTimeout", 13), ("requestTimeout", 14), ("authenticatorTimeout", 15), ("addressLeaseExpired", 16), ("adminLogout", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppSessionTerminateReason.setStatus('current')
if mibBuilder.loadTexts: rsPppSessionTerminateReason.setDescription('The reason the session was terminated.')
rsPppSessionStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 5, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppSessionStartTime.setStatus('current')
if mibBuilder.loadTexts: rsPppSessionStartTime.setDescription('The value of sysUpTime when this session last became active.')
rsPppSessionInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppSessionInOctets.setStatus('current')
if mibBuilder.loadTexts: rsPppSessionInOctets.setDescription('Number of octets received since this session last became active, as denoted by rsPppSessionStartTime.')
rsPppSessionOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppSessionOutOctets.setStatus('current')
if mibBuilder.loadTexts: rsPppSessionOutOctets.setDescription('Number of octets sent since this session last became active, as denoted by rsPppSessionStartTime.')
rsPppSessionInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppSessionInPackets.setStatus('current')
if mibBuilder.loadTexts: rsPppSessionInPackets.setDescription('Number of packets received since this session last became active, as denoted by rsPppSessionStartTime.')
rsPppSessionOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppSessionOutPackets.setStatus('current')
if mibBuilder.loadTexts: rsPppSessionOutPackets.setDescription('Number of packets sent since this session last became active, as denoted by rsPppSessionStartTime.')
rsPppSessionSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 5, 1, 1, 8), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppSessionSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: rsPppSessionSessionTimeout.setDescription('Maximum duration for the session, after which the session terminates automatically.')
rsPppSessionInactivityTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 5, 1, 1, 9), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppSessionInactivityTimeout.setStatus('current')
if mibBuilder.loadTexts: rsPppSessionInactivityTimeout.setDescription('Maximum inactivity duration for the session, after which the session terminates automatically.')
rsPppSessionAccountingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 5, 1, 1, 10), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppSessionAccountingInterval.setStatus('current')
if mibBuilder.loadTexts: rsPppSessionAccountingInterval.setDescription('Interval that must elapse between generation of accounting records for this session.')
rsPppSessionRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 5, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppSessionRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: rsPppSessionRemoteIpAddress.setDescription('Remote IP address, obtained from the authentication service, to be used during IPCP negotiation with the remote side.')
rsPppSessionRemotePrimaryDnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 5, 1, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppSessionRemotePrimaryDnsAddress.setStatus('current')
if mibBuilder.loadTexts: rsPppSessionRemotePrimaryDnsAddress.setDescription('Remote primary DNS IP address, obtained from the authentication service, to be used during IPCP negotiation with the remote side.')
rsPppSessionRemoteSecondaryDnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 5, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppSessionRemoteSecondaryDnsAddress.setStatus('current')
if mibBuilder.loadTexts: rsPppSessionRemoteSecondaryDnsAddress.setDescription('Remote secondary DNS IP address, obtained from the authentication service, to be used during IPCP negotiation with the remote side.')
rsPppSessionRemotePrimaryWinsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 5, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppSessionRemotePrimaryWinsAddress.setStatus('current')
if mibBuilder.loadTexts: rsPppSessionRemotePrimaryWinsAddress.setDescription('Remote primary WINS IP address, obtained from the authentication service, to be used during IPCP negotiation with the remote side.')
rsPppSessionRemoteSecondaryWinsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 11, 1, 5, 1, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPppSessionRemoteSecondaryWinsAddress.setStatus('current')
if mibBuilder.loadTexts: rsPppSessionRemoteSecondaryWinsAddress.setDescription('Remote secondary WINS IP address, obtained from the authentication service, to be used during IPCP negotiation with the remote side.')
rsPppConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 11, 4))
rsPppCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 11, 4, 1))
rsPppGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 11, 4, 2))
rsPppCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2773, 2, 11, 4, 1, 1)).setObjects(("REDSTONE-PPP-MIB", "rsPppLcpGroup"), ("REDSTONE-PPP-MIB", "rsPppIpGroup"), ("REDSTONE-PPP-MIB", "rsPppOsiGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsPppCompliance = rsPppCompliance.setStatus('current')
if mibBuilder.loadTexts: rsPppCompliance.setDescription('The compliance statement for entities which implement the Redstone PPP MIB.')
rsPppCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2773, 2, 11, 4, 1, 2)).setObjects(("REDSTONE-PPP-MIB", "rsPppLcpGroup2"), ("REDSTONE-PPP-MIB", "rsPppIpGroup2"), ("REDSTONE-PPP-MIB", "rsPppOsiGroup2"), ("REDSTONE-PPP-MIB", "rsPppSessionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsPppCompliance2 = rsPppCompliance2.setStatus('current')
if mibBuilder.loadTexts: rsPppCompliance2.setDescription('The compliance statement for entities which implement the Redstone PPP MIB.')
rsPppLcpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2773, 2, 11, 4, 2, 1)).setObjects(("REDSTONE-PPP-MIB", "rsPppLinkConfigRowStatus"), ("REDSTONE-PPP-MIB", "rsPppLinkConfigLowerIfIndex"), ("REDSTONE-PPP-MIB", "rsPppNextIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsPppLcpGroup = rsPppLcpGroup.setStatus('current')
if mibBuilder.loadTexts: rsPppLcpGroup.setDescription('A collection of objects providing management of link-layer functionality (LCP) of PPP interfaces in a Redstone product.')
rsPppIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2773, 2, 11, 4, 2, 2)).setObjects(("REDSTONE-PPP-MIB", "rsPppIpServiceStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsPppIpGroup = rsPppIpGroup.setStatus('current')
if mibBuilder.loadTexts: rsPppIpGroup.setDescription('A collection of objects providing management of IP network control protocol functionality (IPCP) of PPP interfaces in a Redstone product.')
rsPppOsiGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2773, 2, 11, 4, 2, 3)).setObjects(("REDSTONE-PPP-MIB", "rsPppOsiServiceStatus"), ("REDSTONE-PPP-MIB", "rsPppOsiOperStatus"), ("REDSTONE-PPP-MIB", "rsPppOsiConfigAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsPppOsiGroup = rsPppOsiGroup.setStatus('current')
if mibBuilder.loadTexts: rsPppOsiGroup.setDescription('A collection of objects providing management of OSI network control protocol functionality (OSICP) of PPP interfaces in a Redstone product.')
rsPppLcpGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2773, 2, 11, 4, 2, 4)).setObjects(("REDSTONE-PPP-MIB", "rsPppLinkStatusTerminateReason"), ("REDSTONE-PPP-MIB", "rsPppLinkStatusTerminateNegFailOption"), ("REDSTONE-PPP-MIB", "rsPppLinkStatusInKeepaliveRequests"), ("REDSTONE-PPP-MIB", "rsPppLinkStatusOutKeepaliveRequests"), ("REDSTONE-PPP-MIB", "rsPppLinkStatusInKeepaliveReplies"), ("REDSTONE-PPP-MIB", "rsPppLinkStatusOutKeepaliveReplies"), ("REDSTONE-PPP-MIB", "rsPppLinkStatusKeepaliveFailures"), ("REDSTONE-PPP-MIB", "rsPppLinkStatusLocalMagicNumber"), ("REDSTONE-PPP-MIB", "rsPppLinkStatusRemoteMagicNumber"), ("REDSTONE-PPP-MIB", "rsPppLinkStatusLocalAuthentication"), ("REDSTONE-PPP-MIB", "rsPppLinkConfigRowStatus"), ("REDSTONE-PPP-MIB", "rsPppLinkConfigLowerIfIndex"), ("REDSTONE-PPP-MIB", "rsPppLinkConfigKeepalive"), ("REDSTONE-PPP-MIB", "rsPppLinkConfigAuthentication"), ("REDSTONE-PPP-MIB", "rsPppLinkConfigMaxAuthenRetries"), ("REDSTONE-PPP-MIB", "rsPppNextIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsPppLcpGroup2 = rsPppLcpGroup2.setStatus('current')
if mibBuilder.loadTexts: rsPppLcpGroup2.setDescription('A collection of objects providing management of link-layer functionality (LCP) of PPP interfaces in a Redstone product.')
rsPppIpGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2773, 2, 11, 4, 2, 5)).setObjects(("REDSTONE-PPP-MIB", "rsPppIpServiceStatus"), ("REDSTONE-PPP-MIB", "rsPppIpTerminateReason"), ("REDSTONE-PPP-MIB", "rsPppIpTerminateNegFailOption"), ("REDSTONE-PPP-MIB", "rsPppIpRemoteIpAddress"), ("REDSTONE-PPP-MIB", "rsPppIpRemotePrimaryDnsAddress"), ("REDSTONE-PPP-MIB", "rsPppIpRemoteSecondaryDnsAddress"), ("REDSTONE-PPP-MIB", "rsPppIpRemotePrimaryWinsAddress"), ("REDSTONE-PPP-MIB", "rsPppIpRemoteSecondaryWinsAddress"), ("REDSTONE-PPP-MIB", "rsPppIpConfigPeerDnsPriority"), ("REDSTONE-PPP-MIB", "rsPppIpConfigPeerWinsPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsPppIpGroup2 = rsPppIpGroup2.setStatus('current')
if mibBuilder.loadTexts: rsPppIpGroup2.setDescription('A collection of objects providing management of IP network control protocol functionality (IPCP) of PPP interfaces in a Redstone product.')
rsPppOsiGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2773, 2, 11, 4, 2, 6)).setObjects(("REDSTONE-PPP-MIB", "rsPppOsiServiceStatus"), ("REDSTONE-PPP-MIB", "rsPppOsiOperStatus"), ("REDSTONE-PPP-MIB", "rsPppOsiTerminateReason"), ("REDSTONE-PPP-MIB", "rsPppOsiTerminateNegFailOption"), ("REDSTONE-PPP-MIB", "rsPppOsiLocalAlignNpdu"), ("REDSTONE-PPP-MIB", "rsPppOsiRemoteAlignNpdu"), ("REDSTONE-PPP-MIB", "rsPppOsiConfigAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsPppOsiGroup2 = rsPppOsiGroup2.setStatus('current')
if mibBuilder.loadTexts: rsPppOsiGroup2.setDescription('A collection of objects providing management of OSI network control protocol functionality (OSICP) of PPP interfaces in a Redstone product.')
rsPppSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2773, 2, 11, 4, 2, 7)).setObjects(("REDSTONE-PPP-MIB", "rsPppSessionGrant"), ("REDSTONE-PPP-MIB", "rsPppSessionTerminateReason"), ("REDSTONE-PPP-MIB", "rsPppSessionStartTime"), ("REDSTONE-PPP-MIB", "rsPppSessionInOctets"), ("REDSTONE-PPP-MIB", "rsPppSessionOutOctets"), ("REDSTONE-PPP-MIB", "rsPppSessionInPackets"), ("REDSTONE-PPP-MIB", "rsPppSessionOutPackets"), ("REDSTONE-PPP-MIB", "rsPppSessionSessionTimeout"), ("REDSTONE-PPP-MIB", "rsPppSessionInactivityTimeout"), ("REDSTONE-PPP-MIB", "rsPppSessionAccountingInterval"), ("REDSTONE-PPP-MIB", "rsPppSessionRemoteIpAddress"), ("REDSTONE-PPP-MIB", "rsPppSessionRemotePrimaryDnsAddress"), ("REDSTONE-PPP-MIB", "rsPppSessionRemoteSecondaryDnsAddress"), ("REDSTONE-PPP-MIB", "rsPppSessionRemotePrimaryWinsAddress"), ("REDSTONE-PPP-MIB", "rsPppSessionRemoteSecondaryWinsAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsPppSessionGroup = rsPppSessionGroup.setStatus('current')
if mibBuilder.loadTexts: rsPppSessionGroup.setDescription('A collection of objects providing management of PPP session functionality of PPP interfaces in a Redstone product.')
mibBuilder.exportSymbols("REDSTONE-PPP-MIB", rsPppSessionStartTime=rsPppSessionStartTime, rsPppLinkConfigIfIndex=rsPppLinkConfigIfIndex, rsPppOsiTable=rsPppOsiTable, rsPppSessionInactivityTimeout=rsPppSessionInactivityTimeout, rsPppSessionInPackets=rsPppSessionInPackets, rsPppSessionAccountingInterval=rsPppSessionAccountingInterval, rsPppSessionRemoteSecondaryWinsAddress=rsPppSessionRemoteSecondaryWinsAddress, rsPppOsiConfigEntry=rsPppOsiConfigEntry, rsPppCompliance2=rsPppCompliance2, rsPppIpConfigTable=rsPppIpConfigTable, rsPppNextIfIndex=rsPppNextIfIndex, rsPppSessionTerminateReason=rsPppSessionTerminateReason, rsPppOsiTerminateReason=rsPppOsiTerminateReason, rsPppSessionInOctets=rsPppSessionInOctets, rsPppSessionGrant=rsPppSessionGrant, PYSNMP_MODULE_ID=rsPppMIB, rsPppMIB=rsPppMIB, rsPppSessionRemotePrimaryWinsAddress=rsPppSessionRemotePrimaryWinsAddress, rsPppSessionOutOctets=rsPppSessionOutOctets, rsPppOsiTerminateNegFailOption=rsPppOsiTerminateNegFailOption, rsPppIpRemotePrimaryDnsAddress=rsPppIpRemotePrimaryDnsAddress, rsPppIpGroup2=rsPppIpGroup2, rsPppOsiLocalAlignNpdu=rsPppOsiLocalAlignNpdu, rsPppLinkStatusOutKeepaliveRequests=rsPppLinkStatusOutKeepaliveRequests, rsPppSec=rsPppSec, rsPppSessionOutPackets=rsPppSessionOutPackets, rsPppSessionRemoteIpAddress=rsPppSessionRemoteIpAddress, rsPppLinkStatusKeepaliveFailures=rsPppLinkStatusKeepaliveFailures, rsPppCompliance=rsPppCompliance, rsPppLinkStatusTable=rsPppLinkStatusTable, rsPppIpGroup=rsPppIpGroup, rsPppLinkStatusRemoteMagicNumber=rsPppLinkStatusRemoteMagicNumber, rsPppLinkConfigAuthentication=rsPppLinkConfigAuthentication, rsPppLinkConfigEntry=rsPppLinkConfigEntry, rsPppLinkStatusInKeepaliveRequests=rsPppLinkStatusInKeepaliveRequests, rsPppSessionTable=rsPppSessionTable, rsPppSessionSessionTimeout=rsPppSessionSessionTimeout, rsPppLcp=rsPppLcp, rsPppOsiGroup=rsPppOsiGroup, rsPppConformance=rsPppConformance, rsPppLinkStatusTerminateReason=rsPppLinkStatusTerminateReason, rsPppLinkStatusOutKeepaliveReplies=rsPppLinkStatusOutKeepaliveReplies, rsPppLcpGroup2=rsPppLcpGroup2, rsPppLinkStatusTerminateNegFailOption=rsPppLinkStatusTerminateNegFailOption, rsPppIpRemoteSecondaryWinsAddress=rsPppIpRemoteSecondaryWinsAddress, rsPppOsiConfigAdminStatus=rsPppOsiConfigAdminStatus, rsPppGroups=rsPppGroups, rsPppLcpGroup=rsPppLcpGroup, rsPppSessionGroup=rsPppSessionGroup, RsPppAuthentication=RsPppAuthentication, rsPppOsiServiceStatus=rsPppOsiServiceStatus, rsPppSession=rsPppSession, rsPppIpEntry=rsPppIpEntry, rsPppIpConfigPeerWinsPriority=rsPppIpConfigPeerWinsPriority, rsPppOsi=rsPppOsi, rsPppIpLocalIpAddress=rsPppIpLocalIpAddress, rsPppOsiOperStatus=rsPppOsiOperStatus, rsPppOsiGroup2=rsPppOsiGroup2, rsPppIpRemoteIpAddress=rsPppIpRemoteIpAddress, rsPppIpTerminateNegFailOption=rsPppIpTerminateNegFailOption, rsPppLinkConfigMaxAuthenRetries=rsPppLinkConfigMaxAuthenRetries, rsPppIpConfigEntry=rsPppIpConfigEntry, rsPppLinkStatusLocalMagicNumber=rsPppLinkStatusLocalMagicNumber, rsPppOsiEntry=rsPppOsiEntry, rsPppLinkStatusLocalAuthentication=rsPppLinkStatusLocalAuthentication, rsPppIpTerminateReason=rsPppIpTerminateReason, rsPppLinkConfigKeepalive=rsPppLinkConfigKeepalive, rsPppOsiConfigTable=rsPppOsiConfigTable, rsPppOsiRemoteAlignNpdu=rsPppOsiRemoteAlignNpdu, rsPppLinkStatusInKeepaliveReplies=rsPppLinkStatusInKeepaliveReplies, rsPppCompliances=rsPppCompliances, rsPppLinkConfigLowerIfIndex=rsPppLinkConfigLowerIfIndex, rsPppIpTable=rsPppIpTable, rsPppLinkConfigRowStatus=rsPppLinkConfigRowStatus, rsPppObjects=rsPppObjects, rsPppIpConfigPeerDnsPriority=rsPppIpConfigPeerDnsPriority, rsPppLinkConfigTable=rsPppLinkConfigTable, rsPppLinkStatusEntry=rsPppLinkStatusEntry, rsPppSessionRemoteSecondaryDnsAddress=rsPppSessionRemoteSecondaryDnsAddress, rsPppIpServiceStatus=rsPppIpServiceStatus, rsPppIpRemotePrimaryWinsAddress=rsPppIpRemotePrimaryWinsAddress, rsPppSessionRemotePrimaryDnsAddress=rsPppSessionRemotePrimaryDnsAddress, rsPppIp=rsPppIp, rsPppIpRemoteSecondaryDnsAddress=rsPppIpRemoteSecondaryDnsAddress, rsPppSessionEntry=rsPppSessionEntry)
