#
# PySNMP MIB module HH3C-OBJP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-OBJP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:28:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter32, Integer32, TimeTicks, NotificationType, ObjectIdentity, Counter64, IpAddress, Gauge32, ModuleIdentity, iso, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "Integer32", "TimeTicks", "NotificationType", "ObjectIdentity", "Counter64", "IpAddress", "Gauge32", "ModuleIdentity", "iso", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hh3cObjp = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 155))
hh3cObjp.setRevisions(('2014-03-10 15:36',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cObjp.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hh3cObjp.setLastUpdated('201403101536Z')
if mibBuilder.loadTexts: hh3cObjp.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: hh3cObjp.setContactInfo('Platform Team Hangzhou H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cObjp.setDescription('Object-policy management information base for managing devices that support object policy. ')
hh3cObjpZonePairObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 155, 1))
hh3cObjpZonePairRunningInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 155, 1, 1), )
if mibBuilder.loadTexts: hh3cObjpZonePairRunningInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cObjpZonePairRunningInfoTable.setDescription('Object policy of zone pair running information base.')
hh3cObjpZonePairRunningInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 155, 1, 1, 1), ).setIndexNames((0, "HH3C-OBJP-MIB", "hh3cObjpZonePairSrcZone"), (0, "HH3C-OBJP-MIB", "hh3cObjpZonePairDstZone"), (0, "HH3C-OBJP-MIB", "hh3cObjpZonePairIPVersion"), (0, "HH3C-OBJP-MIB", "hh3cObjpZonePairRuleID"))
if mibBuilder.loadTexts: hh3cObjpZonePairRunningInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cObjpZonePairRunningInfoEntry.setDescription('Object policy of zone pair running information entry.')
hh3cObjpZonePairSrcZone = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 155, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hh3cObjpZonePairSrcZone.setStatus('current')
if mibBuilder.loadTexts: hh3cObjpZonePairSrcZone.setDescription('Name of the source security zone.')
hh3cObjpZonePairDstZone = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 155, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hh3cObjpZonePairDstZone.setStatus('current')
if mibBuilder.loadTexts: hh3cObjpZonePairDstZone.setDescription('Name of the destination security zone.')
hh3cObjpZonePairIPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 155, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: hh3cObjpZonePairIPVersion.setStatus('current')
if mibBuilder.loadTexts: hh3cObjpZonePairIPVersion.setDescription('IP protocol version.')
hh3cObjpZonePairRuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 155, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)))
if mibBuilder.loadTexts: hh3cObjpZonePairRuleID.setStatus('current')
if mibBuilder.loadTexts: hh3cObjpZonePairRuleID.setDescription('Rule ID of object policy.')
hh3cObjpZonePairMatchPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 155, 1, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cObjpZonePairMatchPacketCount.setStatus('current')
if mibBuilder.loadTexts: hh3cObjpZonePairMatchPacketCount.setDescription('Number of packets matching the rule.')
hh3cObjpZonePairLastMatchTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 155, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cObjpZonePairLastMatchTime.setStatus('current')
if mibBuilder.loadTexts: hh3cObjpZonePairLastMatchTime.setDescription('Interval in seconds between the last match and 1970/1/1 00:00:00.')
mibBuilder.exportSymbols("HH3C-OBJP-MIB", hh3cObjpZonePairLastMatchTime=hh3cObjpZonePairLastMatchTime, hh3cObjpZonePairRuleID=hh3cObjpZonePairRuleID, PYSNMP_MODULE_ID=hh3cObjp, hh3cObjpZonePairDstZone=hh3cObjpZonePairDstZone, hh3cObjpZonePairObjects=hh3cObjpZonePairObjects, hh3cObjp=hh3cObjp, hh3cObjpZonePairSrcZone=hh3cObjpZonePairSrcZone, hh3cObjpZonePairRunningInfoEntry=hh3cObjpZonePairRunningInfoEntry, hh3cObjpZonePairMatchPacketCount=hh3cObjpZonePairMatchPacketCount, hh3cObjpZonePairIPVersion=hh3cObjpZonePairIPVersion, hh3cObjpZonePairRunningInfoTable=hh3cObjpZonePairRunningInfoTable)
