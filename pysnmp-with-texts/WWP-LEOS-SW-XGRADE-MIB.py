#
# PySNMP MIB module WWP-LEOS-SW-XGRADE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-SW-XGRADE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, MibIdentifier, IpAddress, ModuleIdentity, Counter32, Gauge32, Integer32, Bits, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "MibIdentifier", "IpAddress", "ModuleIdentity", "Counter32", "Gauge32", "Integer32", "Bits", "iso", "TimeTicks")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosSwXgradeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10))
wwpLeosSwXgradeMIB.setRevisions(('2012-06-27 00:00', '2011-08-01 00:00', '2011-07-07 00:01', '2011-07-07 00:00', '2003-04-21 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosSwXgradeMIB.setRevisionsDescriptions(('Corrected string lengths.', 'Added xftp server configuration.', 'Added objects wwpLeosSwXgradeDestPath, wwpLeosSwXgradePackagePathName,wwpLeosSwXgradeTftpServer, wwpLeosSwXgradeRevertTimeout,wwpLeosSwXgradeOptype , wwpLeosSwXgradeBootOrder, wwpLeosSwXgradeStatus and wwpLeosBladeInstPackageRlsStatus. Added a new trap wwpLeosSwXgradeCompletion.', 'Updated to support 2 stage upgrades.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosSwXgradeMIB.setLastUpdated('201206270000Z')
if mibBuilder.loadTexts: wwpLeosSwXgradeMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosSwXgradeMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosSwXgradeMIB.setDescription('The MIB module for downloading and installing packages.')
wwpLeosSwXgradeMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1))
wwpLeosSwXgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1))
wwpLeosSwXgradeMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 2))
wwpLeosSwXgradeMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 2, 0))
wwpLeosSwXgradeMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 3))
wwpLeosSwXgradeMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 3, 1))
wwpLeosSwXgradeMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 3, 2))
class SwDownloadState(TextualConvention, Integer32):
    description = 'The state of a package download operation. The description of each state is given below: idle: No package download operation is in place. downloading: this state signifies that the package is being downloaded from the TFTP server. downloadComplete: the state when a package download is successfully completed. downloadFailed: the package download was unsuccessful. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("idle", 1), ("downloading", 2), ("downloadComplete", 3), ("downloadFailed", 4))

class SwDownloadFailCause(TextualConvention, Integer32):
    description = 'The reason a package download or Xgrade request failed.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("downloadSuccess", 0), ("invalidPkgFile", 1), ("couldNotGetFile", 2), ("tftpServerNotFound", 3), ("cmdFileParseError", 4), ("internalFilesystemError", 5), ("flashOffline", 6), ("noStatus", 7), ("badFileCrc", 8), ("alreadyUpgradeMode", 9), ("unknownError", 10))

class SwXgradeOp(TextualConvention, Integer32):
    description = 'The possible options for upgrading the software. The description of each option is given below: none: No upgrade option is selected. install: This option will install the software on the specified blade, if the software is not currently installed there. inServiceActivate : This option will activate any new software installed on the specified blade (or all the blades) only if the installation is not service affecting. The option will fail if the blade cannot be activated without affecting service. serviceAffectingActivate : This option will activate any new software installed on the specified blade. It will attempt to do so without affecting service, but will override if necessary. inServiceXgrade: This option will Xgrade the specified blade without affecting the services. If inServiceXgrade is not possible for the blade, then setting this option will result in Error and a service affecting report will be generated. serviceAffectingXgrade: This option will Xgrade the specified blade with minimum service affecting downtime. servAffectingXgradeReport: This option will generate a service affecting report for a blade to go to the specified package. Report file will be stored in local flash at following location (/flash0/software/xgrade-sequence.txt) servNonAffectingXgradeReport: This option will generate a service non affecting report for a blade to go to the specified package. Report file will be stored in local flash at following location (/flash0/software/xgrade-sequence.txt) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("none", 0), ("install", 1), ("inServiceActivate", 2), ("serviceAffectingActivate", 3), ("inServiceXgrade", 4), ("serviceAffectingXgrade", 5), ("servAffectingXgradeReport", 6), ("servNonAffectingXgradeReport", 7), ("download", 8), ("cancelDownload", 9))

wwpLeosSwDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 1))
wwpLeosSwDownloadServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 1, 1), AddressFamilyNumbers()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSwDownloadServerAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosSwDownloadServerAddrType.setDescription('Specifies the wwpLeosSwDownloadServerAddr type. It can be set to 1 for IPV4 type addresses or can be set to 16 for host name. This MIB object is not supported. Any operation on this MIB object will fail!!!')
wwpLeosSwDownloadServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSwDownloadServerAddr.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosSwDownloadServerAddr.setDescription('The ip address of the TFTP server or the host name from which the software package should be downloaded. Address must be a unicast address or host name that is reachable from the agent and no firewalls/acls preventing TFTP datagrams from being transferred. This MIB object is not supported. Any operation on this MIB object will fail!!!')
wwpLeosSwDownloadPackageName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSwDownloadPackageName.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosSwDownloadPackageName.setDescription('The package name (including the path, if applicable) to be retrieved from the TFTP server. Length of package string must not exceed 128 alpha-numeric characters, no spaces in filenames. This MIB object is not supported. Any operation on this MIB object will fail!!!')
wwpLeosSwDownLoadActivate = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSwDownLoadActivate.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosSwDownLoadActivate.setDescription("Activate the software download operation with a value of True(1). The object will return to 'false' once the software download is completed. Poll wwpLeosSwDownloadStatus for current status. Default value is False. WwpSwDownLoadServerAddr and wwpLeosSwDownloadPackageName must be valid prior to setting this object to True. The management station will not be able to set this object to 'true' if the package name does not follow the correct syntax (i.e. wwp/cmd/pmf-1.0.gz). This MIB object is not supported. Any operation on this MIB object will fail!!!")
wwpLeosSwDownloadNotifOnCompletion = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSwDownloadNotifOnCompletion.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosSwDownloadNotifOnCompletion.setDescription('Specifies whether or not a wwpLeosSwDownloadCompletion notification should be issued on completion of the TFTP transfer. If such a notification is desired, it is the responsibility of the management entity to ensure that the SNMP administrative model is configured in such a way as to allow the notification to be delivered. This MIB object is not supported. Any operation on this MIB object will fail!!!')
wwpLeosSwDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 1, 6), SwDownloadState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosSwDownloadStatus.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosSwDownloadStatus.setDescription("Specifies the state of this package download request. If no package download request is being processed, then the wwpLeosSwDownloadStatus should be 'idle'. This MIB object is not supported. Any operation on this MIB object will fail!!!")
wwpLeosSwDownloadFailCause = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 1, 7), SwDownloadFailCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosSwDownloadFailCause.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosSwDownloadFailCause.setDescription("The reason why the software download operation failed. If no software download transfer request is being processed, then the wwpLeosSwDownloadFailCause should be 'noStatus'. This MIB object is not supported. Any operation on this MIB object will fail!!!")
wwpLeosSwDownloadNotificationInfo = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosSwDownloadNotificationInfo.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosSwDownloadNotificationInfo.setDescription('The string explaining the error code in detail or the additional info for the software download completion. This MIB object is not supported. Any operation on this MIB object will fail!!!')
wwpLeosSwXgradeBladeTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 2), )
if mibBuilder.loadTexts: wwpLeosSwXgradeBladeTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradeBladeTable.setDescription('The (conceptual) table applies for all the blades.')
wwpLeosSwXgradeBladeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 2, 1), ).setIndexNames((0, "WWP-LEOS-SW-XGRADE-MIB", "wwpLeosSwXgradeBladeId"))
if mibBuilder.loadTexts: wwpLeosSwXgradeBladeEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradeBladeEntry.setDescription('An entry (conceptual row) in the wwpLeosSwXgradeTable.')
wwpLeosSwXgradeBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosSwXgradeBladeId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradeBladeId.setDescription('The object indicates the unique id for the blade. The id zero is reserved for chassis and the corresponding Xgrade entry will be applied to all the blades.')
wwpLeosSwXgradePackage = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSwXgradePackage.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradePackage.setDescription('The package name to be Xgraded.')
wwpLeosSwXgradeOp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 2, 1, 3), SwXgradeOp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSwXgradeOp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradeOp.setDescription('The Xgrade operation to be performed on the specified blade. Following option can be set. none: No upgrade option is selected. install: This option will install the software on the specified blade, if the software is not currently installed there. inServiceActivate : This option will activate any new software installed on the specified blade (or all the blades) only if the installation is not service affecting. The option will fail if the blade cannot be activated without affecting service. serviceAffectingActivate : This option will activate any new software installed on the specified blade. It will attempt to do so without affecting service, but will override if necessary. inServiceXgrade: This option will Xgrade the specified blade without affecting the services. If inServiceXgrade is not possible for the blade, then setting this option will result in Error and a service affecting report will be generated. serviceAffectingXgrade: This option will Xgrade the specified blade with minimum service affecting downtime. servAffectingXgradeReport: This option will generate a service affecting report for a blade to go to the specified package. Report file will be stored in local flash at following location (/flash0/software/xgrade-sequence.txt) servNonAffectingXgradeReport: This option will generate a service non affecting report for a blade to go to the specified package. Report file will be stored in local flash at following location (/flash0/software/xgrade-sequence.txt) ')
wwpLeosSwXgradeTftpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 2, 1, 4), AddressFamilyNumbers()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSwXgradeTftpAddrType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradeTftpAddrType.setDescription('Specifies the wwpLeosSwXgradeTftpAddr type. It can be set to 1 for IPV4 type addresses or can be set to 16 for host name.')
wwpLeosSwXgradeTftpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSwXgradeTftpAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradeTftpAddr.setDescription('The ip address of the TFTP server or the host name from which the software package should be downloaded. This is optional. Address must be a unicast address or host name that is reachable from the agent and no firewalls/acls preventing TFTP datagrams from being transferred.')
wwpLeosSwXgradeOpActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSwXgradeOpActivate.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradeOpActivate.setDescription("Setting this object to 'true' will activate the Xgrade operation for the blade.")
wwpLeosSwXgradeOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("processing", 2), ("success", 3), ("failure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosSwXgradeOpStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradeOpStatus.setDescription('Display the result of the wwpLeosSwXgradeOpActivate.')
wwpLeosSwXgradePackagePath = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSwXgradePackagePath.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradePackagePath.setDescription('Specifies the path for the package. If this object is set, then device will prepend the package name specified by wwpLeosSwXgradePackage object with wwpLeosSwXgradePackagePath. To reset this object set it to 0')
wwpLeosSwXgradeTransferMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("tftp", 1), ("ftp", 2), ("sftp", 3), ("defaultTftp", 4), ("defaultFtp", 5), ("defaultSftp", 6), ("default", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSwXgradeTransferMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradeTransferMode.setDescription('The type of server to use.')
wwpLeosSwXgradeLoginId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSwXgradeLoginId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradeLoginId.setDescription('The username to use for xftp downloads.')
wwpLeosSwXgradePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSwXgradePassword.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradePassword.setDescription('The password to use for xftp downloads.')
wwpLeosSwXgradeSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSwXgradeSecret.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradeSecret.setDescription('The secret to use for xftp downloads.')
wwpLeosBladePackageInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 3), )
if mibBuilder.loadTexts: wwpLeosBladePackageInfoTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBladePackageInfoTable.setDescription('The (conceptual) table applies for all the blades.')
wwpLeosBladePackageInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 3, 1), ).setIndexNames((0, "WWP-LEOS-SW-XGRADE-MIB", "wwpLeosSwXgradeBladeId"))
if mibBuilder.loadTexts: wwpLeosBladePackageInfoEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBladePackageInfoEntry.setDescription('An entry (conceptual row) in the wwpLeosSwXgradeTable.')
wwpLeosBladeInstPackageVer = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBladeInstPackageVer.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBladeInstPackageVer.setDescription('This displays the installed package version of the blade.')
wwpLeosBladeRunPackageVer = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBladeRunPackageVer.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBladeRunPackageVer.setDescription('This displays the running package version of the blade.')
wwpLeosBladeDnldPackageVer = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBladeDnldPackageVer.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBladeDnldPackageVer.setDescription('This displays the downloaded package version on the blade.')
wwpLeosBladeInstPackageRlsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBladeInstPackageRlsStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBladeInstPackageRlsStatus.setDescription('This displays the running release status of the blade.')
wwpLeosSwXgradeGlobalAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 4))
wwpLeosSwMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosSwMIBVersion.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwMIBVersion.setDescription('This MIB object shows the MIB version currently supported by the device.')
wwpLeosSwXgradeDestPath = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSwXgradeDestPath.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradeDestPath.setDescription('This object can be used to specify the destination path where file is transferred to from the TFTP server. Length of destination string must not exceed 128 alpha-numeric characters, no spaces in filenames. ')
wwpLeosSwXgradePackagePathName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 4, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSwXgradePackagePathName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradePackagePathName.setDescription('This object can be used to specify the path for the package to be retrieved from the TFTP server. Length of package path string must not exceed 128 alpha-numeric characters, no spaces in filenames. ')
wwpLeosSwXgradeTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 4, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSwXgradeTftpServer.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradeTftpServer.setDescription('The dotted IP address of the TFTP server or the host name from which the software package should be downloaded. This is optional. The default TFTP server will be used if this object is set to empty string. Address must be a unicast address or host name that is reachable from the agent and no firewalls/acls preventing TFTP datagrams from being transferred.')
wwpLeosSwXgradeRevertTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSwXgradeRevertTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradeRevertTimeout.setDescription('The value in seconds that the system will revert to previous software package if the protect operation is not issued follows the activate operation. Value of 0 implies the system will not revert automatically and it will remain in the unprotected state.')
wwpLeosSwXgradeBootOrder = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("localFlash", 1), ("localFlashThenCompactFlash", 2), ("compactFlashThenLocalFlash", 3), ("unknown", 4))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSwXgradeBootOrder.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradeBootOrder.setDescription('Set system boot order.')
wwpLeosSwXgradeOptype = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("install", 2), ("activate", 3), ("protect", 4), ("revert", 5), ("validate", 6), ("run", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSwXgradeOptype.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradeOptype.setDescription('The possible operations upgrading the software. The description of each option is given below: none : No upgrade operation is selected. download : This operation to initiate the file transfer of software package from TFTP server specified by wwpLeosTceSwXgradePackagePath to wwpLeosTceSwXgradeDestPath. The default TFTP server will be used for file transfer if the wwpLeosTceSwXgradeTftpServer is set to empty string. install : This operation to install the software to the standby CM (if present) and all line cards. The image files are either stored in the TFTP server specified by wwpLeosTceSwXgradePackagePath and wwpLeosTceSwXgradeTftpServer or the compact flash of the active CM. activate : This operation to activate any new software installed on all the blades. the system will automatically revert to the previous software package if a protect operation is not set within a time period specified by wwpLeosTceSwXgradeRevertTimeout. If no time period is specified (wwpLeosTceSwXgradeRevertTimeout value 0) then the system will not revert automatically and it will remain in the unprotected state indefinitely. WARNING: Activating software requires a system restart. protect : This operation to protect a new software package. If the protect operation is not entered before the protect timeout is reached specified by wwpLeosTceSwXgradeRevertTimeout, the system will automatically revert to the previous software package. revert : This operation to revert to the previous software package. validate : This operation to validate the software package at the location specified by the wwpLeosTceSwXgradePackagePath. Setting the wwpLeosTceSwXgradePackagePath to empty string will validate the installed software. run : This operation refers to the downloading, parsing, and executing of a specified command file as initiated through CLI, DHCP or the file transfer MIB module. This is used in appropriate notifications to report completion of such event. An error will be returned when this object is attempted to be set to this value using an SNMP set-request. ')
wwpLeosSwXgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("success", 1), ("failed", 2), ("unknown", 3), ("processing", 4), ("invalidCfgRule", 5), ("invalidFileName", 6), ("fileSystemError", 7), ("cannotResolveHostName", 8), ("tftpClientTimeout", 9), ("tftpServerError", 10), ("tftpBadTag", 11), ("tftpBadValue", 12), ("networkError", 13), ("platformTypeNotSupported", 14), ("swMgrBusy", 15), ("needBackupSw", 16), ("internalError", 17), ("fileNotExist", 18), ("missingAttribute", 19), ("invalidXgradeOp", 20), ("noDefaultTftpConfigured", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosSwXgradeStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradeStatus.setDescription('Display the result of the last wwpLeosTceSwXgradeOp. ')
wwpLeosSwDownloadCompletion = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 2, 0, 1)).setObjects(("WWP-LEOS-SW-XGRADE-MIB", "wwpLeosSwDownloadPackageName"), ("WWP-LEOS-SW-XGRADE-MIB", "wwpLeosSwDownloadFailCause"), ("WWP-LEOS-SW-XGRADE-MIB", "wwpLeosSwDownloadNotificationInfo"))
if mibBuilder.loadTexts: wwpLeosSwDownloadCompletion.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwDownloadCompletion.setDescription('A wwpLeosSwDownloadCompletion notification is sent at the completion of a software download request.')
wwpLeosSwXgradeOpCompletion = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 2, 0, 2)).setObjects(("WWP-LEOS-SW-XGRADE-MIB", "wwpLeosSwXgradeBladeId"), ("WWP-LEOS-SW-XGRADE-MIB", "wwpLeosSwXgradePackage"), ("WWP-LEOS-SW-XGRADE-MIB", "wwpLeosSwXgradeOp"), ("WWP-LEOS-SW-XGRADE-MIB", "wwpLeosSwXgradeOpStatus"))
if mibBuilder.loadTexts: wwpLeosSwXgradeOpCompletion.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradeOpCompletion.setDescription('A wwpLeosSwXgradeOpCompletion notification is sent at the completion of a install/activate/Xgrade request.')
wwpLeosSwXgradeBladePkgIncorrect = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 2, 0, 3)).setObjects(("WWP-LEOS-SW-XGRADE-MIB", "wwpLeosSwXgradeBladeId"))
if mibBuilder.loadTexts: wwpLeosSwXgradeBladePkgIncorrect.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradeBladePkgIncorrect.setDescription('A wwpLeosSwXgradeBladePkgIncorrect notification is sent if device recognizes that it is running incorrect software version.')
wwpLeosSwXgradeCompletion = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 10, 2, 0, 4)).setObjects(("WWP-LEOS-SW-XGRADE-MIB", "wwpLeosSwXgradeOp"), ("WWP-LEOS-SW-XGRADE-MIB", "wwpLeosSwXgradeStatus"))
if mibBuilder.loadTexts: wwpLeosSwXgradeCompletion.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSwXgradeCompletion.setDescription('A wwpLeosTceSwXgradeCompletion notification is sent at the completion of a wwpLeosTceSwXgradeOp (download/install/ activate/... etc). ')
mibBuilder.exportSymbols("WWP-LEOS-SW-XGRADE-MIB", wwpLeosSwXgradeMIBConformance=wwpLeosSwXgradeMIBConformance, wwpLeosSwXgradeTftpAddr=wwpLeosSwXgradeTftpAddr, wwpLeosSwXgradePackagePathName=wwpLeosSwXgradePackagePathName, wwpLeosSwXgradeOpCompletion=wwpLeosSwXgradeOpCompletion, wwpLeosSwXgradeBladePkgIncorrect=wwpLeosSwXgradeBladePkgIncorrect, wwpLeosSwXgradeOp=wwpLeosSwXgradeOp, wwpLeosSwXgradeMIBNotificationPrefix=wwpLeosSwXgradeMIBNotificationPrefix, wwpLeosSwXgradePassword=wwpLeosSwXgradePassword, wwpLeosSwXgradeGlobalAttrs=wwpLeosSwXgradeGlobalAttrs, wwpLeosBladeInstPackageVer=wwpLeosBladeInstPackageVer, wwpLeosSwDownloadServerAddr=wwpLeosSwDownloadServerAddr, wwpLeosSwXgradeSecret=wwpLeosSwXgradeSecret, wwpLeosSwDownloadStatus=wwpLeosSwDownloadStatus, wwpLeosSwXgradeBladeId=wwpLeosSwXgradeBladeId, wwpLeosBladeDnldPackageVer=wwpLeosBladeDnldPackageVer, wwpLeosSwXgradeMIBObjects=wwpLeosSwXgradeMIBObjects, wwpLeosBladePackageInfoTable=wwpLeosBladePackageInfoTable, wwpLeosSwDownloadCompletion=wwpLeosSwDownloadCompletion, wwpLeosSwXgradeTransferMode=wwpLeosSwXgradeTransferMode, wwpLeosSwDownloadNotificationInfo=wwpLeosSwDownloadNotificationInfo, wwpLeosSwXgradeTftpServer=wwpLeosSwXgradeTftpServer, wwpLeosSwXgradeDestPath=wwpLeosSwXgradeDestPath, wwpLeosSwXgradeOptype=wwpLeosSwXgradeOptype, wwpLeosSwXgradeMIBCompliances=wwpLeosSwXgradeMIBCompliances, wwpLeosSwDownloadNotifOnCompletion=wwpLeosSwDownloadNotifOnCompletion, SwDownloadState=SwDownloadState, wwpLeosSwXgrade=wwpLeosSwXgrade, wwpLeosBladePackageInfoEntry=wwpLeosBladePackageInfoEntry, wwpLeosSwDownload=wwpLeosSwDownload, wwpLeosSwXgradeRevertTimeout=wwpLeosSwXgradeRevertTimeout, wwpLeosSwXgradeStatus=wwpLeosSwXgradeStatus, wwpLeosSwXgradeLoginId=wwpLeosSwXgradeLoginId, SwDownloadFailCause=SwDownloadFailCause, wwpLeosSwMIBVersion=wwpLeosSwMIBVersion, wwpLeosSwXgradeTftpAddrType=wwpLeosSwXgradeTftpAddrType, wwpLeosSwXgradeOpActivate=wwpLeosSwXgradeOpActivate, SwXgradeOp=SwXgradeOp, wwpLeosSwXgradePackagePath=wwpLeosSwXgradePackagePath, wwpLeosSwXgradeCompletion=wwpLeosSwXgradeCompletion, wwpLeosSwXgradeBootOrder=wwpLeosSwXgradeBootOrder, wwpLeosSwXgradeMIBGroups=wwpLeosSwXgradeMIBGroups, wwpLeosSwXgradeBladeEntry=wwpLeosSwXgradeBladeEntry, wwpLeosBladeInstPackageRlsStatus=wwpLeosBladeInstPackageRlsStatus, PYSNMP_MODULE_ID=wwpLeosSwXgradeMIB, wwpLeosSwXgradePackage=wwpLeosSwXgradePackage, wwpLeosSwXgradeMIB=wwpLeosSwXgradeMIB, wwpLeosSwXgradeOpStatus=wwpLeosSwXgradeOpStatus, wwpLeosSwDownLoadActivate=wwpLeosSwDownLoadActivate, wwpLeosBladeRunPackageVer=wwpLeosBladeRunPackageVer, wwpLeosSwDownloadFailCause=wwpLeosSwDownloadFailCause, wwpLeosSwXgradeBladeTable=wwpLeosSwXgradeBladeTable, wwpLeosSwDownloadPackageName=wwpLeosSwDownloadPackageName, wwpLeosSwDownloadServerAddrType=wwpLeosSwDownloadServerAddrType, wwpLeosSwXgradeMIBNotifications=wwpLeosSwXgradeMIBNotifications)
