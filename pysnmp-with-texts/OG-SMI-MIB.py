#
# PySNMP MIB module OG-SMI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OG-SMI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:32:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Bits, ModuleIdentity, TimeTicks, MibIdentifier, Gauge32, Unsigned32, Counter32, Counter64, iso, enterprises, ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "ModuleIdentity", "TimeTicks", "MibIdentifier", "Gauge32", "Unsigned32", "Counter32", "Counter64", "iso", "enterprises", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
opengear = ModuleIdentity((1, 3, 6, 1, 4, 1, 25049))
opengear.setRevisions(('2013-11-15 00:00', '2013-08-11 00:00', '2010-03-22 11:27', '2005-02-24 01:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: opengear.setRevisionsDescriptions(('Re-structured MIB adding more information pertaining to monitored/managed devices.', 'Renamed from OPENGEAR-SMI-MIB to OG-SMI-MIB to fix naming discrepancy.', 'Renamed from OPENGEAR-SMI to OPENGEAR-SMI-MIB and fixed imports.', 'Initial Version.',))
if mibBuilder.loadTexts: opengear.setLastUpdated('201311150000Z')
if mibBuilder.loadTexts: opengear.setOrganization('Opengear Inc.')
if mibBuilder.loadTexts: opengear.setContactInfo('Opengear Inc. 630 West 9560 South, Sandy, UT 84070 support@opengear.com')
if mibBuilder.loadTexts: opengear.setDescription('Opengear Structure of Management Information MIB')
ogProducts = ObjectIdentity((1, 3, 6, 1, 4, 1, 25049, 1))
if mibBuilder.loadTexts: ogProducts.setStatus('current')
if mibBuilder.loadTexts: ogProducts.setDescription('ogProducts is the root OBJECT IDENTIFIER from which sysObjectID values are assigned. Actual values are defined in OG-PRODUCTS-MIB.')
ogLegacyMgmt = ObjectIdentity((1, 3, 6, 1, 4, 1, 25049, 2))
if mibBuilder.loadTexts: ogLegacyMgmt.setStatus('current')
if mibBuilder.loadTexts: ogLegacyMgmt.setDescription('Subtree reserved for legacy MIBS.')
ogExperimental = ObjectIdentity((1, 3, 6, 1, 4, 1, 25049, 3))
if mibBuilder.loadTexts: ogExperimental.setStatus('current')
if mibBuilder.loadTexts: ogExperimental.setDescription('Subtree reserved for experimental MIBS.')
ogInternal = ObjectIdentity((1, 3, 6, 1, 4, 1, 25049, 4))
if mibBuilder.loadTexts: ogInternal.setStatus('current')
if mibBuilder.loadTexts: ogInternal.setDescription('Subtree reserved for use by Opengear internal groups')
ogReserved1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25049, 5))
if mibBuilder.loadTexts: ogReserved1.setStatus('current')
if mibBuilder.loadTexts: ogReserved1.setDescription('Reserved for future use')
ogReserved2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25049, 6))
if mibBuilder.loadTexts: ogReserved2.setStatus('current')
if mibBuilder.loadTexts: ogReserved2.setDescription('Reserved for future use')
otherEnterprises = ObjectIdentity((1, 3, 6, 1, 4, 1, 25049, 7))
if mibBuilder.loadTexts: otherEnterprises.setStatus('current')
if mibBuilder.loadTexts: otherEnterprises.setDescription('otherEnterprises provides a root object identifier from which mibs produced by other companies may be placed. mibs produced by other enterprises are typicially implemented with the object identifiers as defined in the mib, but if the mib is deemed to be uncontrolled, we may reroot the mib at this subtree in order to have a controlled version.')
ogAgentCapability = ObjectIdentity((1, 3, 6, 1, 4, 1, 25049, 8))
if mibBuilder.loadTexts: ogAgentCapability.setStatus('current')
if mibBuilder.loadTexts: ogAgentCapability.setDescription('ogAgentCapability provides a root object identifier from which AGENT-CAPABILITIES values may be assigned.')
ogConfig = ObjectIdentity((1, 3, 6, 1, 4, 1, 25049, 9))
if mibBuilder.loadTexts: ogConfig.setStatus('current')
if mibBuilder.loadTexts: ogConfig.setDescription('ogConfig is the main subtree for configuration mibs.')
ogMgmt = ObjectIdentity((1, 3, 6, 1, 4, 1, 25049, 10))
if mibBuilder.loadTexts: ogMgmt.setStatus('current')
if mibBuilder.loadTexts: ogMgmt.setDescription('The main subtree for MIB development.')
ogModules = ObjectIdentity((1, 3, 6, 1, 4, 1, 25049, 11))
if mibBuilder.loadTexts: ogModules.setStatus('current')
if mibBuilder.loadTexts: ogModules.setDescription('ogModules provides a root object identifier from which MODULE-IDENTITY values may be assigned.')
mibBuilder.exportSymbols("OG-SMI-MIB", ogExperimental=ogExperimental, ogConfig=ogConfig, otherEnterprises=otherEnterprises, ogModules=ogModules, ogMgmt=ogMgmt, ogReserved2=ogReserved2, opengear=opengear, ogLegacyMgmt=ogLegacyMgmt, ogInternal=ogInternal, ogAgentCapability=ogAgentCapability, PYSNMP_MODULE_ID=opengear, ogProducts=ogProducts, ogReserved1=ogReserved1)
