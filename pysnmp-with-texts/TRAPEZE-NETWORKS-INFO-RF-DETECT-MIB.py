#
# PySNMP MIB module TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:27:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
iso, IpAddress, Unsigned32, TimeTicks, ModuleIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, NotificationType, ObjectIdentity, Integer32, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "Unsigned32", "TimeTicks", "ModuleIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "NotificationType", "ObjectIdentity", "Integer32", "Counter64", "Counter32")
TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress")
TrpzApNum, TrpzRadioRateEx, TrpzApRadioIndex, TrpzChannelNum, TrpzRssi = mibBuilder.importSymbols("TRAPEZE-NETWORKS-AP-TC", "TrpzApNum", "TrpzRadioRateEx", "TrpzApRadioIndex", "TrpzChannelNum", "TrpzRssi")
TrpzRFDetectNetworkingMode, TrpzRFDetectClassificationReason, TrpzRFDetectClassification, TrpzRFDetectDot11ModulationStandard = mibBuilder.importSymbols("TRAPEZE-NETWORKS-RF-DETECT-TC", "TrpzRFDetectNetworkingMode", "TrpzRFDetectClassificationReason", "TrpzRFDetectClassification", "TrpzRFDetectDot11ModulationStandard")
trpzMibs, = mibBuilder.importSymbols("TRAPEZE-NETWORKS-ROOT-MIB", "trpzMibs")
trpzInfoRFDetectMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 14525, 4, 9))
trpzInfoRFDetectMib.setRevisions(('2011-07-27 00:22', '2009-08-18 00:21', '2007-06-27 00:11', '2007-04-18 00:10', '2006-10-11 00:03',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: trpzInfoRFDetectMib.setRevisionsDescriptions(('v1.3.2: Revised for 7.7 release.', 'v1.3.1: Added one table: trpzInfoRFDetectClientTable to support detected Clients and RFID tags (for 7.7 release).', 'v1.2.0: Added one scalar: trpzInfoRFDetectCurrentXmtrTableSize (for 6.2 release)', 'v1.1.0: Added three new columnar objects: - trpzInfoRFDetectXmtrNetworkingMode, - trpzInfoRFDetectXmtrClassification, - trpzInfoRFDetectXmtrClassificationReason (for 6.2 release)', 'v1.0.3: Initial version, for 6.0 release',))
if mibBuilder.loadTexts: trpzInfoRFDetectMib.setLastUpdated('201107270022Z')
if mibBuilder.loadTexts: trpzInfoRFDetectMib.setOrganization('Trapeze Networks')
if mibBuilder.loadTexts: trpzInfoRFDetectMib.setContactInfo('Trapeze Networks Technical Support www.trapezenetworks.com US: 866.TRPZ.TAC International: 925.474.2400 support@trapezenetworks.com')
if mibBuilder.loadTexts: trpzInfoRFDetectMib.setDescription("RF Detect MIB. Copyright 2007-2011 Trapeze Networks, Inc. All rights reserved. This Trapeze Networks SNMP Management Information Base Specification (Specification) embodies Trapeze Networks' confidential and proprietary intellectual property. Trapeze Networks retains all title and ownership in the Specification, including any revisions. This Specification is supplied 'AS IS' and Trapeze Networks makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
trpzInfoRFDetectObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1))
trpzInfoRFDetectDataObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1))
trpzInfoRFDetectXmtrTable = MibTable((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 1), )
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrTable.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrTable.setDescription('Transmitter table. May contain tens of thousands of entries (different Transmitter-Listener-Channel combinations).')
trpzInfoRFDetectXmtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 1, 1), ).setIndexNames((0, "TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectXmtrTransmitterMacAddress"), (0, "TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectXmtrListenerMacAddress"), (0, "TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectXmtrChannelNum"))
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrEntry.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrEntry.setDescription('Transmitter-Listener-Channel combination.')
trpzInfoRFDetectXmtrTransmitterMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrTransmitterMacAddress.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrTransmitterMacAddress.setDescription('The MAC Address of this Transmitter.')
trpzInfoRFDetectXmtrListenerMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrListenerMacAddress.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrListenerMacAddress.setDescription('The MAC Address of this Listener.')
trpzInfoRFDetectXmtrChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 1, 1, 3), TrpzChannelNum())
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrChannelNum.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrChannelNum.setDescription('Channel Number this transmitter was using when this listener detected it.')
trpzInfoRFDetectXmtrRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 1, 1, 4), TrpzRssi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrRssi.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrRssi.setDescription('Received Signal Strength Indicator at this listener.')
trpzInfoRFDetectXmtrSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrSsid.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrSsid.setDescription('The service/SSID name this transmitter was using. Zero-length string when unknown or not applicable.')
trpzInfoRFDetectXmtrNetworkingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 1, 1, 6), TrpzRFDetectNetworkingMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrNetworkingMode.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrNetworkingMode.setDescription('The way this transmitter is doing wireless networking: ad-hoc mode networking or infrastructure mode networking.')
trpzInfoRFDetectXmtrClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 1, 1, 7), TrpzRFDetectClassification()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrClassification.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrClassification.setDescription('The RF classification of this transmitter.')
trpzInfoRFDetectXmtrClassificationReason = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 1, 1, 8), TrpzRFDetectClassificationReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrClassificationReason.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrClassificationReason.setDescription('The reason why this transmitter was classified by RF detection the way it is.')
trpzInfoRFDetectClientTable = MibTable((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 3), )
if mibBuilder.loadTexts: trpzInfoRFDetectClientTable.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectClientTable.setDescription('Client table, including RFID tags. Contains Client-Listener combinations.')
trpzInfoRFDetectClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 3, 1), ).setIndexNames((0, "TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectClientMacAddress"), (0, "TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectClientListenerMacAddress"))
if mibBuilder.loadTexts: trpzInfoRFDetectClientEntry.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectClientEntry.setDescription('Information about a particular Client, as it was detected by a particular listener (AP radio).')
trpzInfoRFDetectClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: trpzInfoRFDetectClientMacAddress.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectClientMacAddress.setDescription('The MAC Address of this Client.')
trpzInfoRFDetectClientListenerMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 3, 1, 2), MacAddress())
if mibBuilder.loadTexts: trpzInfoRFDetectClientListenerMacAddress.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectClientListenerMacAddress.setDescription('The MAC Address of this Listener (AP radio).')
trpzInfoRFDetectClientConnectedBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzInfoRFDetectClientConnectedBssid.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectClientConnectedBssid.setDescription('The service MAC address (a.k.a. BSSID) this Client was Connected to when last detected by this listener. If this information is not available, the value will be 0:0:0:0:0:0.')
trpzInfoRFDetectClientApNum = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 3, 1, 4), TrpzApNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzInfoRFDetectClientApNum.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectClientApNum.setDescription('Number of the AP (listener) that detected this Client.')
trpzInfoRFDetectClientApRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 3, 1, 5), TrpzApRadioIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzInfoRFDetectClientApRadioIndex.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectClientApRadioIndex.setDescription('Number of the AP Radio (listener) that detected this Client.')
trpzInfoRFDetectClientModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 3, 1, 6), TrpzRFDetectDot11ModulationStandard()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzInfoRFDetectClientModulation.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectClientModulation.setDescription('802.11 Modulation standard this Client was using when last detected by this listener (a, b, g, n/a, n/g).')
trpzInfoRFDetectClientChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 3, 1, 7), TrpzChannelNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzInfoRFDetectClientChannelNum.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectClientChannelNum.setDescription('Channel Number this Client was using when last detected by this listener.')
trpzInfoRFDetectClientRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 3, 1, 8), TrpzRadioRateEx()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzInfoRFDetectClientRate.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectClientRate.setDescription('Packet data rate this Client was using when last detected by this listener.')
trpzInfoRFDetectClientRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 3, 1, 9), TrpzRssi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzInfoRFDetectClientRssi.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectClientRssi.setDescription('Received Signal Strength Indicator for this Client when last detected by this listener.')
trpzInfoRFDetectClientClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 3, 1, 10), TrpzRFDetectClassification()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzInfoRFDetectClientClassification.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectClientClassification.setDescription('The RF classification of this Client.')
trpzInfoRFDetectCurrentXmtrTableSize = MibScalar((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzInfoRFDetectCurrentXmtrTableSize.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectCurrentXmtrTableSize.setDescription('Current number of Transmitter-Listener-Channel combinations found and recorded by RF detection.')
trpzInfoRFDetectConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 2))
trpzInfoRFDetectCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 2, 1))
trpzInfoRFDetectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 2, 2))
trpzInfoRFDetectCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 2, 1, 1)).setObjects(("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectXmtrGroup"), ("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectXmtrClassificationGroup"), ("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectCurrentXmtrTableSizeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzInfoRFDetectCompliance = trpzInfoRFDetectCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: trpzInfoRFDetectCompliance.setDescription('The compliance statement for devices that implement the RF Detect MIB. This compliance statement is for releases 6.0 to 7.6 of AC (wireless switch) software.')
trpzInfoRFDetectComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 2, 1, 2)).setObjects(("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectXmtrGroup"), ("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectXmtrClassificationGroup"), ("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectCurrentXmtrTableSizeGroup"), ("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectClientGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzInfoRFDetectComplianceRev2 = trpzInfoRFDetectComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectComplianceRev2.setDescription('The compliance statement for devices that implement the RF Detect MIB. This compliance statement is for releases 7.7 and greater of AC (wireless switch) software.')
trpzInfoRFDetectXmtrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 2, 2, 1)).setObjects(("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectXmtrRssi"), ("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectXmtrSsid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzInfoRFDetectXmtrGroup = trpzInfoRFDetectXmtrGroup.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrGroup.setDescription('Mandatory group of objects implemented to provide RF Detect Transmitter info.')
trpzInfoRFDetectXmtrClassificationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 2, 2, 2)).setObjects(("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectXmtrNetworkingMode"), ("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectXmtrClassification"), ("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectXmtrClassificationReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzInfoRFDetectXmtrClassificationGroup = trpzInfoRFDetectXmtrClassificationGroup.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectXmtrClassificationGroup.setDescription('Group of objects implemented to provide RF Detect Classification info. Introduced in 6.2 release.')
trpzInfoRFDetectCurrentXmtrTableSizeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 2, 2, 3)).setObjects(("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectCurrentXmtrTableSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzInfoRFDetectCurrentXmtrTableSizeGroup = trpzInfoRFDetectCurrentXmtrTableSizeGroup.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectCurrentXmtrTableSizeGroup.setDescription('Group for one object that provides the current number of Transmitter-Listener-Channel combinations found and recorded by RF detection. Introduced in 6.2 release.')
trpzInfoRFDetectClientGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 9, 1, 2, 2, 4)).setObjects(("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectClientConnectedBssid"), ("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectClientApNum"), ("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectClientApRadioIndex"), ("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectClientModulation"), ("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectClientChannelNum"), ("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectClientRate"), ("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectClientRssi"), ("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", "trpzInfoRFDetectClientClassification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzInfoRFDetectClientGroup = trpzInfoRFDetectClientGroup.setStatus('current')
if mibBuilder.loadTexts: trpzInfoRFDetectClientGroup.setDescription('Mandatory group of objects implemented to provide RF Detect Client info in releases 7.7 and greater.')
mibBuilder.exportSymbols("TRAPEZE-NETWORKS-INFO-RF-DETECT-MIB", trpzInfoRFDetectClientConnectedBssid=trpzInfoRFDetectClientConnectedBssid, trpzInfoRFDetectXmtrTable=trpzInfoRFDetectXmtrTable, trpzInfoRFDetectXmtrClassification=trpzInfoRFDetectXmtrClassification, trpzInfoRFDetectClientClassification=trpzInfoRFDetectClientClassification, trpzInfoRFDetectClientRssi=trpzInfoRFDetectClientRssi, trpzInfoRFDetectMib=trpzInfoRFDetectMib, trpzInfoRFDetectCurrentXmtrTableSizeGroup=trpzInfoRFDetectCurrentXmtrTableSizeGroup, trpzInfoRFDetectXmtrListenerMacAddress=trpzInfoRFDetectXmtrListenerMacAddress, trpzInfoRFDetectXmtrClassificationGroup=trpzInfoRFDetectXmtrClassificationGroup, trpzInfoRFDetectClientListenerMacAddress=trpzInfoRFDetectClientListenerMacAddress, trpzInfoRFDetectXmtrChannelNum=trpzInfoRFDetectXmtrChannelNum, trpzInfoRFDetectXmtrTransmitterMacAddress=trpzInfoRFDetectXmtrTransmitterMacAddress, trpzInfoRFDetectClientRate=trpzInfoRFDetectClientRate, trpzInfoRFDetectClientChannelNum=trpzInfoRFDetectClientChannelNum, trpzInfoRFDetectClientGroup=trpzInfoRFDetectClientGroup, trpzInfoRFDetectObjects=trpzInfoRFDetectObjects, trpzInfoRFDetectClientEntry=trpzInfoRFDetectClientEntry, trpzInfoRFDetectClientApNum=trpzInfoRFDetectClientApNum, trpzInfoRFDetectClientTable=trpzInfoRFDetectClientTable, trpzInfoRFDetectXmtrSsid=trpzInfoRFDetectXmtrSsid, trpzInfoRFDetectCurrentXmtrTableSize=trpzInfoRFDetectCurrentXmtrTableSize, trpzInfoRFDetectXmtrRssi=trpzInfoRFDetectXmtrRssi, trpzInfoRFDetectComplianceRev2=trpzInfoRFDetectComplianceRev2, PYSNMP_MODULE_ID=trpzInfoRFDetectMib, trpzInfoRFDetectXmtrClassificationReason=trpzInfoRFDetectXmtrClassificationReason, trpzInfoRFDetectCompliance=trpzInfoRFDetectCompliance, trpzInfoRFDetectCompliances=trpzInfoRFDetectCompliances, trpzInfoRFDetectXmtrEntry=trpzInfoRFDetectXmtrEntry, trpzInfoRFDetectConformance=trpzInfoRFDetectConformance, trpzInfoRFDetectClientApRadioIndex=trpzInfoRFDetectClientApRadioIndex, trpzInfoRFDetectGroups=trpzInfoRFDetectGroups, trpzInfoRFDetectXmtrNetworkingMode=trpzInfoRFDetectXmtrNetworkingMode, trpzInfoRFDetectClientMacAddress=trpzInfoRFDetectClientMacAddress, trpzInfoRFDetectClientModulation=trpzInfoRFDetectClientModulation, trpzInfoRFDetectDataObjects=trpzInfoRFDetectDataObjects, trpzInfoRFDetectXmtrGroup=trpzInfoRFDetectXmtrGroup)
