#
# PySNMP MIB module OMNI-gx2Dm870-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2Dm870-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:33:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
gx2Dm870, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Dm870")
gi, motproxies = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "gi", "motproxies")
trapNetworkElemModelNumber, trapNetworkElemOperState, trapNetworkElemAdminState, trapPerceivedSeverity, trapNetworkElemAlarmStatus, trapChangedValueInteger, trapChangedValueDisplayString, trapNetworkElemAvailStatus, trapChangedObjectId, trapIdentifier, trapNetworkElemSerialNum, trapText, trapNETrapLastTrapTimeStamp = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber", "trapNetworkElemOperState", "trapNetworkElemAdminState", "trapPerceivedSeverity", "trapNetworkElemAlarmStatus", "trapChangedValueInteger", "trapChangedValueDisplayString", "trapNetworkElemAvailStatus", "trapChangedObjectId", "trapIdentifier", "trapNetworkElemSerialNum", "trapText", "trapNETrapLastTrapTimeStamp")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
ObjectIdentity, iso, ModuleIdentity, Unsigned32, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, TimeTicks, MibIdentifier, Bits, IpAddress, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "ModuleIdentity", "Unsigned32", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "TimeTicks", "MibIdentifier", "Bits", "IpAddress", "Counter32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class Float(Counter32):
    pass

gx2Dm870Descriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 1))
gx2Dm870AnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2), )
if mibBuilder.loadTexts: gx2Dm870AnalogTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Dm870AnalogTable.setDescription('This table contains gx2Dm870 specific parameters with nominal and current values.')
gx2Dm870AnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1), ).setIndexNames((0, "OMNI-gx2Dm870-MIB", "gx2Dm870AnalogTableIndex"))
if mibBuilder.loadTexts: gx2Dm870AnalogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Dm870AnalogEntry.setDescription('This list contains the analog parameters and descriptions.')
gx2Dm870DigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3), )
if mibBuilder.loadTexts: gx2Dm870DigitalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Dm870DigitalTable.setDescription('This table contains gx2Dm870m specific parameters with nominal and current values.')
gx2Dm870DigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2), ).setIndexNames((0, "OMNI-gx2Dm870-MIB", "gx2Dm870DigitalTableIndex"))
if mibBuilder.loadTexts: gx2Dm870DigitalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Dm870DigitalEntry.setDescription('This list contains digital parameters and descriptions.')
gx2Dm870StatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 4), )
if mibBuilder.loadTexts: gx2Dm870StatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Dm870StatusTable.setDescription('This table contains gx2Dm870 specific parameters with nominal and current values.')
gx2Dm870StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 4, 3), ).setIndexNames((0, "OMNI-gx2Dm870-MIB", "gx2Dm870StatusTableIndex"))
if mibBuilder.loadTexts: gx2Dm870StatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Dm870StatusEntry.setDescription('This list contains Status parameters and descriptions.')
gx2Dm870FactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 5), )
if mibBuilder.loadTexts: gx2Dm870FactoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Dm870FactoryTable.setDescription('This table contains gx2Dm870 specific parameters with nominal and current values.')
gx2Dm870FactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 5, 4), ).setIndexNames((0, "OMNI-gx2Dm870-MIB", "gx2Dm870FactoryTableIndex"))
if mibBuilder.loadTexts: gx2Dm870FactoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Dm870FactoryEntry.setDescription('This list contains Factory parameters and descriptions.')
gx2Dm870AnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Dm870AnalogTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Dm870AnalogTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
dm870labelOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870labelOffsetNomMonitor.setStatus('optional')
if mibBuilder.loadTexts: dm870labelOffsetNomMonitor.setDescription('The value of this object provides the label of the Offset Monitor Analog parameter.')
dm870uomOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870uomOffsetNomMonitor.setStatus('optional')
if mibBuilder.loadTexts: dm870uomOffsetNomMonitor.setDescription('The value of this object provides the Unit of Measure of the Offset Monitor Analog parameter.')
dm870majorHighOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870majorHighOffsetNomMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: dm870majorHighOffsetNomMonitor.setDescription("The value of this object provides the Major High alarm value of the Offset Monitor Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870majorLowOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870majorLowOffsetNomMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: dm870majorLowOffsetNomMonitor.setDescription("The value of this object provides the Major Low alarm value of the Offset Monitor Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870minorHighOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minorHighOffsetNomMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: dm870minorHighOffsetNomMonitor.setDescription("The value of this object provides the Minor High alarm value of the Offset Monitor Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870minorLowOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minorLowOffsetNomMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: dm870minorLowOffsetNomMonitor.setDescription("The value of this object provides the Minor Low alarm value of the Offset Monitor Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870currentValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870currentValueOffsetNomMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: dm870currentValueOffsetNomMonitor.setDescription('The value of this object provides the Current value of the Offset Monitor Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870stateFlagOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870stateFlagOffsetNomMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: dm870stateFlagOffsetNomMonitor.setDescription('The value of this object provides the state of the Offset Monitor Power Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
dm870minValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minValueOffsetNomMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: dm870minValueOffsetNomMonitor.setDescription('The value of this object provides the minimum value the Offset Monitor Power Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870maxValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870maxValueOffsetNomMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: dm870maxValueOffsetNomMonitor.setDescription('The value of this object provides the maximum value the Offset Monitor Power Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870alarmStateOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870alarmStateOffsetNomMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: dm870alarmStateOffsetNomMonitor.setDescription('The value of this object provides the curent alarm state of the Offset Monitor Power Analog parameter.')
dm870labelOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870labelOffsetNomCnt.setStatus('optional')
if mibBuilder.loadTexts: dm870labelOffsetNomCnt.setDescription('The value of this object provides the label of the Offset Control Analog parameter.')
dm870uomOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870uomOffsetNomCnt.setStatus('optional')
if mibBuilder.loadTexts: dm870uomOffsetNomCnt.setDescription('The value of this object provides the Unit of Measure of the Offset Control Analog parameter..')
dm870majorHighOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870majorHighOffsetNomCnt.setStatus('obsolete')
if mibBuilder.loadTexts: dm870majorHighOffsetNomCnt.setDescription("The value of this object provides the Major High alarm value of the Offset Control Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870majorLowOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870majorLowOffsetNomCnt.setStatus('obsolete')
if mibBuilder.loadTexts: dm870majorLowOffsetNomCnt.setDescription("The value of this object provides the Major Low alarm value of the Offset Control Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870minorHighOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minorHighOffsetNomCnt.setStatus('obsolete')
if mibBuilder.loadTexts: dm870minorHighOffsetNomCnt.setDescription("The value of this object provides the Minor High alarm value of the Offset Control Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870minorLowOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minorLowOffsetNomCnt.setStatus('obsolete')
if mibBuilder.loadTexts: dm870minorLowOffsetNomCnt.setDescription("The value of this object provides the Minor Low alarm value of the Offset Control Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870currentValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 19), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm870currentValueOffsetNomCnt.setStatus('mandatory')
if mibBuilder.loadTexts: dm870currentValueOffsetNomCnt.setDescription('The value of this object provides the Current value of the Offset Control Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870stateFlagOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870stateFlagOffsetNomCnt.setStatus('mandatory')
if mibBuilder.loadTexts: dm870stateFlagOffsetNomCnt.setDescription('The value of this object provides the state of the Offset Control Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
dm870minValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minValueOffsetNomCnt.setStatus('mandatory')
if mibBuilder.loadTexts: dm870minValueOffsetNomCnt.setDescription('The value of this object provides the minimum value the Offset Control Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870maxValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870maxValueOffsetNomCnt.setStatus('mandatory')
if mibBuilder.loadTexts: dm870maxValueOffsetNomCnt.setDescription('The value of this object provides the maximum value the Offset Control Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870alarmStateOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870alarmStateOffsetNomCnt.setStatus('obsolete')
if mibBuilder.loadTexts: dm870alarmStateOffsetNomCnt.setDescription('The value of this object provides the curent alarm state of the Offset Control Analog parameter.')
dm870labelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870labelAttenSetting.setStatus('optional')
if mibBuilder.loadTexts: dm870labelAttenSetting.setDescription('The value of this object provides the label of the Attenuator Setting Current Analog parameter.')
dm870uomAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870uomAttenSetting.setStatus('optional')
if mibBuilder.loadTexts: dm870uomAttenSetting.setDescription('The value of this object provides the Unit of Measure of the Attenuator Setting Analog parameter.')
dm870majorHighAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870majorHighAttenSetting.setStatus('obsolete')
if mibBuilder.loadTexts: dm870majorHighAttenSetting.setDescription("The value of this object provides the Major High alarm value of the Attenuator Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870majorLowAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870majorLowAttenSetting.setStatus('obsolete')
if mibBuilder.loadTexts: dm870majorLowAttenSetting.setDescription("The value of this object provides the Major Low alarm value of the Attenuator Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870minorHighAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minorHighAttenSetting.setStatus('obsolete')
if mibBuilder.loadTexts: dm870minorHighAttenSetting.setDescription("The value of this object provides the Minor High alarm value of the Attenuator Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870minorLowAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minorLowAttenSetting.setStatus('obsolete')
if mibBuilder.loadTexts: dm870minorLowAttenSetting.setDescription("The value of this object provides the Minor Low alarm value of the Attenuator Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870currentValueAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 30), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm870currentValueAttenSetting.setStatus('mandatory')
if mibBuilder.loadTexts: dm870currentValueAttenSetting.setDescription('The value of this object provides the Current value of the Attenuator Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870stateFlagAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870stateFlagAttenSetting.setStatus('mandatory')
if mibBuilder.loadTexts: dm870stateFlagAttenSetting.setDescription('The value of this object provides the state of the Attenuator Setting Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
dm870minValueAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minValueAttenSetting.setStatus('mandatory')
if mibBuilder.loadTexts: dm870minValueAttenSetting.setDescription('The value of this object provides the minimum value the Attenuator Setting Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870maxValueAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870maxValueAttenSetting.setStatus('mandatory')
if mibBuilder.loadTexts: dm870maxValueAttenSetting.setDescription('The value of this object provides the maximum value the Attenuator Setting Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870alarmStateAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870alarmStateAttenSetting.setStatus('mandatory')
if mibBuilder.loadTexts: dm870alarmStateAttenSetting.setDescription('The value of this object provides the curent alarm state of the Attenuator Setting Analog parameter.')
dm870labelLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870labelLaserPower.setStatus('optional')
if mibBuilder.loadTexts: dm870labelLaserPower.setDescription('The value of this object provides the label of the Laser Optical Power Analog parameter.')
dm870uomLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870uomLaserPower.setStatus('optional')
if mibBuilder.loadTexts: dm870uomLaserPower.setDescription('The value of this object provides the Unit of Measure of the Laser Optical Power Analog parameter.')
dm870majorHighLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870majorHighLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: dm870majorHighLaserPower.setDescription("The value of this object provides the Major High alarm value of the Laser Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870majorLowLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870majorLowLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: dm870majorLowLaserPower.setDescription("The value of this object provides the Major Low alarm value of the Laser Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870minorHighLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minorHighLaserPower.setStatus('obsolete')
if mibBuilder.loadTexts: dm870minorHighLaserPower.setDescription("The value of this object provides the Minor High alarm value of the Laser Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870minorLowLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minorLowLaserPower.setStatus('obsolete')
if mibBuilder.loadTexts: dm870minorLowLaserPower.setDescription("The value of this object provides the Minor Low alarm value of the Laser Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870currentValueLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870currentValueLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: dm870currentValueLaserPower.setDescription('The value of this object provides the Current value of the Laser Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870stateFlagLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870stateFlagLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: dm870stateFlagLaserPower.setDescription('The value of this object provides the state of the Laser Optical Power Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
dm870minValueLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minValueLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: dm870minValueLaserPower.setDescription('The value of this object provides the minimum value the Laser Optical Power Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870maxValueLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870maxValueLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: dm870maxValueLaserPower.setDescription('The value of this object provides the maximum value the Laser Optical Power Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870alarmStateLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870alarmStateLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: dm870alarmStateLaserPower.setDescription('The value of this object provides the curent alarm state of the Laser Optical Power Analog parameter.')
dm870labelLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870labelLaserTemp.setStatus('optional')
if mibBuilder.loadTexts: dm870labelLaserTemp.setDescription('The value of this object provides the label of the Laser Temperature Analog parameter.')
dm870uomLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870uomLaserTemp.setStatus('optional')
if mibBuilder.loadTexts: dm870uomLaserTemp.setDescription('The value of this object provides the Unit of Measure of the Laser Temperature Analog parameter..')
dm870majorHighLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870majorHighLaserTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dm870majorHighLaserTemp.setDescription("The value of this object provides the Major High alarm value of the Laser Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870majorLowLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870majorLowLaserTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dm870majorLowLaserTemp.setDescription("The value of this object provides the Major Low alarm value of the Laser Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870minorHighLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minorHighLaserTemp.setStatus('obsolete')
if mibBuilder.loadTexts: dm870minorHighLaserTemp.setDescription("The value of this object provides the Minor High alarm value of the Laser Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870minorLowLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minorLowLaserTemp.setStatus('obsolete')
if mibBuilder.loadTexts: dm870minorLowLaserTemp.setDescription("The value of this object provides the Minor Low alarm value of the Laser Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870currentValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870currentValueLaserTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dm870currentValueLaserTemp.setDescription('The value of this object provides the Current value of the Laser Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870stateFlagLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870stateFlagLaserTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dm870stateFlagLaserTemp.setDescription('The value of this object provides the state of the Laser Temperature Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
dm870minValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minValueLaserTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dm870minValueLaserTemp.setDescription('The value of this object provides the minimum value the Laser Temperature Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870maxValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870maxValueLaserTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dm870maxValueLaserTemp.setDescription('The value of this object provides the maximum value the Laser Temperature Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870alarmStateLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870alarmStateLaserTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dm870alarmStateLaserTemp.setDescription('The value of this object provides the curent alarm state of the Laser Temperature Analog parameter.')
dm870labelLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870labelLaserCurrent.setStatus('optional')
if mibBuilder.loadTexts: dm870labelLaserCurrent.setDescription('The value of this object provides the label of the Laser Bias Current Analog parameter.')
dm870uomLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870uomLaserCurrent.setStatus('optional')
if mibBuilder.loadTexts: dm870uomLaserCurrent.setDescription('The value of this object provides the Unit of Measure of the Laser Bias Current Analog parameter.')
dm870majorHighLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870majorHighLaserCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dm870majorHighLaserCurrent.setDescription("The value of this object provides the Major High alarm value of the Laser Bias Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870majorLowLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870majorLowLaserCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dm870majorLowLaserCurrent.setDescription("The value of this object provides the Major Low alarm value of the Laser Bias Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870minorHighLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minorHighLaserCurrent.setStatus('obsolete')
if mibBuilder.loadTexts: dm870minorHighLaserCurrent.setDescription("The value of this object provides the Minor High alarm value of the Laser Bias Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870minorLowLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minorLowLaserCurrent.setStatus('obsolete')
if mibBuilder.loadTexts: dm870minorLowLaserCurrent.setDescription("The value of this object provides the Minor Low alarm value of the Laser Bias Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870currentValueLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870currentValueLaserCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dm870currentValueLaserCurrent.setDescription('The value of this object provides the Current value of the Laser Bias Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870stateFlagLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870stateFlagLaserCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dm870stateFlagLaserCurrent.setDescription('The value of this object provides the state of the Laser Bias Current Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
dm870minValueLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minValueLaserCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dm870minValueLaserCurrent.setDescription('The value of this object provides the minimum value the Laser Bias Current Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870maxValueLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870maxValueLaserCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dm870maxValueLaserCurrent.setDescription('The value of this object provides the maximum value the Laser Bias Current Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870alarmStateLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870alarmStateLaserCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dm870alarmStateLaserCurrent.setDescription('The value of this object provides the curent alarm state of the Laser Bias Current Analog parameter.')
dm870labelTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870labelTecCurrent.setStatus('optional')
if mibBuilder.loadTexts: dm870labelTecCurrent.setDescription('The value of this object provides the label of the TEC Current Analog parameter.')
dm870uomTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870uomTecCurrent.setStatus('optional')
if mibBuilder.loadTexts: dm870uomTecCurrent.setDescription('The value of this object provides the Unit of Measure of the TEC Current Analog parameter.')
dm870majorHighTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870majorHighTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dm870majorHighTecCurrent.setDescription("The value of this object provides the Major High alarm value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870majorLowTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870majorLowTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dm870majorLowTecCurrent.setDescription("The value of this object provides the Major Low alarm value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870minorHighTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minorHighTecCurrent.setStatus('obsolete')
if mibBuilder.loadTexts: dm870minorHighTecCurrent.setDescription("The value of this object provides the Minor High alarm value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870minorLowTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minorLowTecCurrent.setStatus('obsolete')
if mibBuilder.loadTexts: dm870minorLowTecCurrent.setDescription("The value of this object provides the Minor Low alarm value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870currentValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870currentValueTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dm870currentValueTecCurrent.setDescription('The value of this object provides the Current value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870stateFlagTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870stateFlagTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dm870stateFlagTecCurrent.setDescription('The value of this object provides the state of the TEC Current Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
dm870minValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minValueTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dm870minValueTecCurrent.setDescription('The value of this object provides the minimum value the TEC Current Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870maxValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870maxValueTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dm870maxValueTecCurrent.setDescription('The value of this object provides the maximum value the TEC Current Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870alarmStateTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870alarmStateTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dm870alarmStateTecCurrent.setDescription('The value of this object provides the curent alarm state of the TEC Current Analog parameter.')
dm870labelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870labelModTemp.setStatus('optional')
if mibBuilder.loadTexts: dm870labelModTemp.setDescription('The value of this object provides the label of the Module Temperature Analog parameter.')
dm870uomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870uomModTemp.setStatus('optional')
if mibBuilder.loadTexts: dm870uomModTemp.setDescription('The value of this object provides the Unit of Measure of the Module Temperature Analog parameter.')
dm870majorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 81), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870majorHighModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dm870majorHighModTemp.setDescription("The value of this object provides the Major High alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870majorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 82), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870majorLowModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dm870majorLowModTemp.setDescription("The value of this object provides the Major Low alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870minorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 83), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minorHighModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dm870minorHighModTemp.setDescription("The value of this object provides the Minor High alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870minorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 84), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minorLowModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dm870minorLowModTemp.setDescription("The value of this object provides the Minor Low alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870currentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 85), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870currentValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dm870currentValueModTemp.setDescription('The value of this object provides the Current value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870stateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870stateFlagModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dm870stateFlagModTemp.setDescription('The value of this object provides the state of the Module Temperature Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
dm870minValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 87), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dm870minValueModTemp.setDescription('The value of this object provides the minimum value the Module Temperature Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870maxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 88), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870maxValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dm870maxValueModTemp.setDescription('The value of this object provides the maximum value the Module Temperature Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870alarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870alarmStateModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dm870alarmStateModTemp.setDescription('The value of this object provides the curent alarm state of the Module Temperature Analog parameter.')
dm870labelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870labelFanCurrent.setStatus('optional')
if mibBuilder.loadTexts: dm870labelFanCurrent.setDescription('The value of this object provides the label of the Fan Current Analog parameter.')
dm870uomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870uomFanCurrent.setStatus('optional')
if mibBuilder.loadTexts: dm870uomFanCurrent.setDescription('The value of this object provides the Unit of Measure of the Fan Current Analog parameter.')
dm870majorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 92), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870majorHighFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dm870majorHighFanCurrent.setDescription("The value of this object provides the Major High alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870majorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 93), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870majorLowFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dm870majorLowFanCurrent.setDescription("The value of this object provides the Major Low alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870minorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 94), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minorHighFanCurrent.setStatus('obsolete')
if mibBuilder.loadTexts: dm870minorHighFanCurrent.setDescription("The value of this object provides the Minor High alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870minorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 95), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minorLowFanCurrent.setStatus('obsolete')
if mibBuilder.loadTexts: dm870minorLowFanCurrent.setDescription("The value of this object provides the Minor Low alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
dm870currentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 96), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870currentValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dm870currentValueFanCurrent.setDescription('The value of this object provides the Current value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870stateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870stateFlagFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dm870stateFlagFanCurrent.setDescription('The value of this object provides the state of the Fan Current Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
dm870minValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 98), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870minValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dm870minValueFanCurrent.setDescription('The value of this object provides the minimum value the Fan Current Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870maxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 99), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870maxValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dm870maxValueFanCurrent.setDescription('The value of this object provides the maximum value the Fan Current Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
dm870alarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870alarmStateFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dm870alarmStateFanCurrent.setDescription('The value of this object provides the curent alarm state of the Fan Current Analog parameter.')
gx2Dm870DigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Dm870DigitalTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Dm870DigitalTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
dm870labelRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870labelRfInput.setStatus('optional')
if mibBuilder.loadTexts: dm870labelRfInput.setDescription('The value of this object provides the label of the RF Input Control Digital parameter.')
dm870enumRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870enumRfInput.setStatus('optional')
if mibBuilder.loadTexts: dm870enumRfInput.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
dm870valueRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm870valueRfInput.setStatus('mandatory')
if mibBuilder.loadTexts: dm870valueRfInput.setDescription('The value of this object is the current value of the parameter.')
dm870stateflagRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870stateflagRfInput.setStatus('mandatory')
if mibBuilder.loadTexts: dm870stateflagRfInput.setDescription('The value of this object provides the state of the RF Input Control Digital parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
dm870labelOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870labelOptOutput.setStatus('optional')
if mibBuilder.loadTexts: dm870labelOptOutput.setDescription('The value of this object provides the label of the Optical Output Control Digital parameter.')
dm870enumOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870enumOptOutput.setStatus('optional')
if mibBuilder.loadTexts: dm870enumOptOutput.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
dm870valueOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm870valueOptOutput.setStatus('mandatory')
if mibBuilder.loadTexts: dm870valueOptOutput.setDescription('The value of this object is the current value of the parameter.')
dm870stateflagOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870stateflagOptOutput.setStatus('mandatory')
if mibBuilder.loadTexts: dm870stateflagOptOutput.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
dm870labelSbsControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870labelSbsControl.setStatus('optional')
if mibBuilder.loadTexts: dm870labelSbsControl.setDescription('The value of this object provides the label of the SBS Control Digital parameter.')
dm870enumSbsControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870enumSbsControl.setStatus('optional')
if mibBuilder.loadTexts: dm870enumSbsControl.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
dm870valueSbsControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm870valueSbsControl.setStatus('mandatory')
if mibBuilder.loadTexts: dm870valueSbsControl.setDescription('The value of this object is the current value of the parameter.')
dm870stateflagSbsControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870stateflagSbsControl.setStatus('mandatory')
if mibBuilder.loadTexts: dm870stateflagSbsControl.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
dm870labelLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870labelLaserMode.setStatus('optional')
if mibBuilder.loadTexts: dm870labelLaserMode.setDescription('The value of this object provides the label of the Laser Mode Digital parameter.')
dm870enumLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870enumLaserMode.setStatus('optional')
if mibBuilder.loadTexts: dm870enumLaserMode.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
dm870valueLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("preset", 1), ("set", 2), ("setEquate", 3), ("manual", 4), ("manualEquate", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm870valueLaserMode.setStatus('mandatory')
if mibBuilder.loadTexts: dm870valueLaserMode.setDescription('The value of this object is the current value of the parameter.')
dm870stateflagLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870stateflagLaserMode.setStatus('mandatory')
if mibBuilder.loadTexts: dm870stateflagLaserMode.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
dm870labelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870labelFactoryDefault.setStatus('optional')
if mibBuilder.loadTexts: dm870labelFactoryDefault.setDescription('The value of this object provides the label of the Factory Default Digital parameter.')
dm870enumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870enumFactoryDefault.setStatus('optional')
if mibBuilder.loadTexts: dm870enumFactoryDefault.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1..')
dm870valueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm870valueFactoryDefault.setStatus('mandatory')
if mibBuilder.loadTexts: dm870valueFactoryDefault.setDescription('The value of this object is the current value of the parameter. Return value is meaningless')
dm870stateflagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 3, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870stateflagFactoryDefault.setStatus('mandatory')
if mibBuilder.loadTexts: dm870stateflagFactoryDefault.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
gx2Dm870StatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Dm870StatusTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Dm870StatusTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
dm870labelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870labelBoot.setStatus('optional')
if mibBuilder.loadTexts: dm870labelBoot.setDescription('The value of this object provides the label of the Boot Status Status parameter.')
dm870valueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870valueBoot.setStatus('mandatory')
if mibBuilder.loadTexts: dm870valueBoot.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
dm870stateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870stateflagBoot.setStatus('mandatory')
if mibBuilder.loadTexts: dm870stateflagBoot.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
dm870labelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870labelFlash.setStatus('optional')
if mibBuilder.loadTexts: dm870labelFlash.setDescription('The value of this object provides the label of the Flash Status Status parameter.')
dm870valueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870valueFlash.setStatus('mandatory')
if mibBuilder.loadTexts: dm870valueFlash.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
dm870stateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870stateflagFlash.setStatus('mandatory')
if mibBuilder.loadTexts: dm870stateflagFlash.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
dm870labelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870labelFactoryDataCRC.setStatus('optional')
if mibBuilder.loadTexts: dm870labelFactoryDataCRC.setDescription('The value of this object provides the label of the Factory Data CRC Status parameter.')
dm870valueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870valueFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: dm870valueFactoryDataCRC.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
dm870stateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870stateflagFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: dm870stateflagFactoryDataCRC.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
dm870labelLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870labelLaserDataCRC.setStatus('optional')
if mibBuilder.loadTexts: dm870labelLaserDataCRC.setDescription('The value of this object provides the label of the Laser Data CRC Status parameter.')
dm870valueLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870valueLaserDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: dm870valueLaserDataCRC.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
dm870stateflagLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870stateflagLaserDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: dm870stateflagLaserDataCRC.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
dm870labelAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870labelAlarmDataCrc.setStatus('optional')
if mibBuilder.loadTexts: dm870labelAlarmDataCrc.setDescription('The value of this object provides the label of the Alarm Data Crc parameter.')
dm870valueAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870valueAlarmDataCrc.setStatus('mandatory')
if mibBuilder.loadTexts: dm870valueAlarmDataCrc.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
dm870stateflagAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870stateflagAlarmDataCrc.setStatus('mandatory')
if mibBuilder.loadTexts: dm870stateflagAlarmDataCrc.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
dm870labelRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870labelRFInputStatus.setStatus('optional')
if mibBuilder.loadTexts: dm870labelRFInputStatus.setDescription('The value of this object provides the label of the Alarm Data Crc parameter.')
dm870valueRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870valueRFInputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dm870valueRFInputStatus.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
dm870stateflagRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870stateflagRFInputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dm870stateflagRFInputStatus.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
gx2Dm870FactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Dm870FactoryTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Dm870FactoryTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
dm870bootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870bootControlByte.setStatus('mandatory')
if mibBuilder.loadTexts: dm870bootControlByte.setDescription('The value of this object indicates which bank the firmware is currently being boot from.')
dm870bootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870bootStatusByte.setStatus('mandatory')
if mibBuilder.loadTexts: dm870bootStatusByte.setDescription('This object indicates the status of the last boot. Bit 2 = Bank 0/1 Active (0 = Bank 0, 1 = Bank 1), Bit 1 = Bank 1 Fail and Bit 0 = Bank 0 Fail (0 = Pass, 1 = Fail)')
dm870bank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870bank1CRC.setStatus('mandatory')
if mibBuilder.loadTexts: dm870bank1CRC.setDescription('This object provides the CRC code of bank 0. The display formate for the data is Hex.')
dm870bank2CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870bank2CRC.setStatus('mandatory')
if mibBuilder.loadTexts: dm870bank2CRC.setDescription('This object provides the CRC code of bank 1.The display formate for the data is Hex.')
dm870prgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870prgEEPROMByte.setStatus('mandatory')
if mibBuilder.loadTexts: dm870prgEEPROMByte.setDescription('This object indicates if the EEPROM has been programmed')
dm870factoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870factoryCRC.setStatus('mandatory')
if mibBuilder.loadTexts: dm870factoryCRC.setDescription('This object provides the CRC code for the Factory data.')
dm870calculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("na", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870calculateCRC.setStatus('obsolete')
if mibBuilder.loadTexts: dm870calculateCRC.setDescription('This object indicates which of the Enums will have the CRC calculated.')
dm870hourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870hourMeter.setStatus('mandatory')
if mibBuilder.loadTexts: dm870hourMeter.setDescription('This object provides the hour meter reading of the module.')
dm870flashPrgCntA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870flashPrgCntA.setStatus('mandatory')
if mibBuilder.loadTexts: dm870flashPrgCntA.setDescription('This object provides the number of times Bank 1 flash has been programmed.')
dm870flashPrgCntB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870flashPrgCntB.setStatus('mandatory')
if mibBuilder.loadTexts: dm870flashPrgCntB.setDescription('This object provides the number of times Bank 1 flash has been programmed.')
dm870flashBankARev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870flashBankARev.setStatus('mandatory')
if mibBuilder.loadTexts: dm870flashBankARev.setDescription('This object provides the revision of flash bank 0. The rev is 2 characters.')
dm870flashBankBRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm870flashBankBRev.setStatus('mandatory')
if mibBuilder.loadTexts: dm870flashBankBRev.setDescription('This object provides the revision of flash bank 1. The rev is 2 characters.')
trapDM870ConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapDM870ConfigChangeInteger.setDescription("This trap is issued if configuration of a single variable with integer type was changed (via ANY interface). TrapChangedValueInteger variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapDM870ConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapDM870ConfigChangeDisplayString.setDescription("This trap is issued if configuration of a single variable with DispalayString type was changed (via ANY interface). TrapChangedValueDisplayString variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapDM870fanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapDM870fanCurrentAlarm.setDescription('This trap is issued when the Fan Current parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapDM870ModuleTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapDM870ModuleTempAlarm.setDescription('This trap is issued when the Module Temperature parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapDM870omiOffsetAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapDM870omiOffsetAlarm.setDescription('This trap is issued when the OMI Offset goes out of range.')
trapDM870tecCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapDM870tecCurrentAlarm.setDescription('This trap is issued when the TEC Current parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapDM870LaserCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapDM870LaserCurrentAlarm.setDescription('This trap is issued when the Laser Current parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapDM870LaserTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapDM870LaserTempAlarm.setDescription('This trap is issued when the Laser Temp parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapDM870LaserPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapDM870LaserPowerAlarm.setDescription('This trap is issued when the Laser Power parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapDM870FlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapDM870FlashAlarm.setDescription('This trap is issued when the Laser Modules detects an error during Flash memory operations.')
trapDM870BankBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapDM870BankBootAlarm.setDescription('This trap is issued when the Laser Modules detects an error while booting from bank 0 or bank 1.')
trapDM870AlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapDM870AlarmDataCRCAlarm.setDescription('This trap is issued when the Alarm Data CRC is incorrect.')
trapDM870FactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapDM870FactoryDataCRCAlarm.setDescription('This trap is issued when the Factory Data CRC is incorrect.')
trapDM870CalDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapDM870CalDataCRCAlarm.setDescription('This trap is issued when the Cal Data CRC is incorrect.')
trapDM870ResetFacDefault = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapDM870ResetFacDefault.setDescription('This trap is issued when the DM870 resets to factory defaults')
trapDM870UserRFOffAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapDM870UserRFOffAlarm.setDescription('This trap is issued when the the User RF is turned off.')
trapDM870UserOpticalOffAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16) + (0,17)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapDM870UserOpticalOffAlarm.setDescription('This trap is issued when the User Optical Power is turned off.')
trapDM870UserSBSOffAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16) + (0,18)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapDM870UserSBSOffAlarm.setDescription('This trap is issued when the User SBS is turned off.')
trapDM870RFInputAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16) + (0,19)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapDM870RFInputAlarm.setDescription('This trap is issued when the Laser Modules RF input parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapDM870RFOverloadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 16) + (0,20)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapDM870RFOverloadAlarm.setDescription('This trap is issued when the Laser Modules RF overload parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
mibBuilder.exportSymbols("OMNI-gx2Dm870-MIB", dm870minorHighFanCurrent=dm870minorHighFanCurrent, dm870minorLowTecCurrent=dm870minorLowTecCurrent, dm870currentValueTecCurrent=dm870currentValueTecCurrent, trapDM870ConfigChangeDisplayString=trapDM870ConfigChangeDisplayString, trapDM870fanCurrentAlarm=trapDM870fanCurrentAlarm, dm870labelFactoryDataCRC=dm870labelFactoryDataCRC, gx2Dm870FactoryEntry=gx2Dm870FactoryEntry, dm870valueFlash=dm870valueFlash, dm870maxValueOffsetNomCnt=dm870maxValueOffsetNomCnt, trapDM870RFInputAlarm=trapDM870RFInputAlarm, dm870minValueOffsetNomMonitor=dm870minValueOffsetNomMonitor, dm870alarmStateOffsetNomCnt=dm870alarmStateOffsetNomCnt, trapDM870RFOverloadAlarm=trapDM870RFOverloadAlarm, dm870valueBoot=dm870valueBoot, dm870minorHighTecCurrent=dm870minorHighTecCurrent, dm870enumSbsControl=dm870enumSbsControl, gx2Dm870DigitalTable=gx2Dm870DigitalTable, dm870alarmStateLaserTemp=dm870alarmStateLaserTemp, dm870currentValueOffsetNomCnt=dm870currentValueOffsetNomCnt, dm870minorLowFanCurrent=dm870minorLowFanCurrent, dm870alarmStateLaserCurrent=dm870alarmStateLaserCurrent, trapDM870BankBootAlarm=trapDM870BankBootAlarm, dm870majorLowLaserCurrent=dm870majorLowLaserCurrent, dm870majorLowFanCurrent=dm870majorLowFanCurrent, dm870minorLowAttenSetting=dm870minorLowAttenSetting, dm870stateflagFactoryDataCRC=dm870stateflagFactoryDataCRC, dm870valueFactoryDataCRC=dm870valueFactoryDataCRC, dm870majorLowAttenSetting=dm870majorLowAttenSetting, dm870labelOffsetNomMonitor=dm870labelOffsetNomMonitor, dm870alarmStateFanCurrent=dm870alarmStateFanCurrent, dm870flashBankBRev=dm870flashBankBRev, dm870labelOffsetNomCnt=dm870labelOffsetNomCnt, trapDM870UserRFOffAlarm=trapDM870UserRFOffAlarm, trapDM870AlarmDataCRCAlarm=trapDM870AlarmDataCRCAlarm, dm870majorHighLaserCurrent=dm870majorHighLaserCurrent, dm870valueSbsControl=dm870valueSbsControl, trapDM870FlashAlarm=trapDM870FlashAlarm, dm870maxValueOffsetNomMonitor=dm870maxValueOffsetNomMonitor, dm870bank1CRC=dm870bank1CRC, dm870labelFactoryDefault=dm870labelFactoryDefault, dm870enumFactoryDefault=dm870enumFactoryDefault, dm870currentValueOffsetNomMonitor=dm870currentValueOffsetNomMonitor, dm870stateflagSbsControl=dm870stateflagSbsControl, dm870majorHighOffsetNomCnt=dm870majorHighOffsetNomCnt, dm870maxValueAttenSetting=dm870maxValueAttenSetting, dm870majorHighLaserPower=dm870majorHighLaserPower, dm870prgEEPROMByte=dm870prgEEPROMByte, gx2Dm870FactoryTable=gx2Dm870FactoryTable, dm870stateFlagLaserTemp=dm870stateFlagLaserTemp, dm870currentValueFanCurrent=dm870currentValueFanCurrent, dm870uomAttenSetting=dm870uomAttenSetting, dm870labelModTemp=dm870labelModTemp, dm870stateflagFlash=dm870stateflagFlash, dm870labelSbsControl=dm870labelSbsControl, dm870minorLowLaserPower=dm870minorLowLaserPower, trapDM870tecCurrentAlarm=trapDM870tecCurrentAlarm, dm870minorHighLaserTemp=dm870minorHighLaserTemp, dm870maxValueModTemp=dm870maxValueModTemp, trapDM870LaserPowerAlarm=trapDM870LaserPowerAlarm, dm870stateFlagModTemp=dm870stateFlagModTemp, dm870labelFlash=dm870labelFlash, dm870labelLaserPower=dm870labelLaserPower, trapDM870ResetFacDefault=trapDM870ResetFacDefault, dm870minorHighLaserCurrent=dm870minorHighLaserCurrent, dm870alarmStateTecCurrent=dm870alarmStateTecCurrent, gx2Dm870DigitalTableIndex=gx2Dm870DigitalTableIndex, dm870minValueModTemp=dm870minValueModTemp, dm870valueFactoryDefault=dm870valueFactoryDefault, dm870stateFlagTecCurrent=dm870stateFlagTecCurrent, dm870alarmStateLaserPower=dm870alarmStateLaserPower, dm870majorLowOffsetNomMonitor=dm870majorLowOffsetNomMonitor, trapDM870UserSBSOffAlarm=trapDM870UserSBSOffAlarm, dm870labelTecCurrent=dm870labelTecCurrent, dm870flashPrgCntA=dm870flashPrgCntA, gx2Dm870StatusTable=gx2Dm870StatusTable, dm870alarmStateOffsetNomMonitor=dm870alarmStateOffsetNomMonitor, gx2Dm870StatusTableIndex=gx2Dm870StatusTableIndex, dm870minorLowLaserTemp=dm870minorLowLaserTemp, gx2Dm870FactoryTableIndex=gx2Dm870FactoryTableIndex, dm870minorLowOffsetNomMonitor=dm870minorLowOffsetNomMonitor, dm870majorLowOffsetNomCnt=dm870majorLowOffsetNomCnt, dm870valueRFInputStatus=dm870valueRFInputStatus, dm870bootControlByte=dm870bootControlByte, dm870minorLowOffsetNomCnt=dm870minorLowOffsetNomCnt, dm870uomOffsetNomCnt=dm870uomOffsetNomCnt, dm870minorHighAttenSetting=dm870minorHighAttenSetting, dm870stateflagRFInputStatus=dm870stateflagRFInputStatus, dm870currentValueLaserTemp=dm870currentValueLaserTemp, dm870minorLowLaserCurrent=dm870minorLowLaserCurrent, dm870majorLowTecCurrent=dm870majorLowTecCurrent, trapDM870ModuleTempAlarm=trapDM870ModuleTempAlarm, dm870stateflagAlarmDataCrc=dm870stateflagAlarmDataCrc, dm870labelRfInput=dm870labelRfInput, dm870majorHighLaserTemp=dm870majorHighLaserTemp, dm870stateFlagFanCurrent=dm870stateFlagFanCurrent, dm870currentValueModTemp=dm870currentValueModTemp, dm870minorHighOffsetNomMonitor=dm870minorHighOffsetNomMonitor, dm870bank2CRC=dm870bank2CRC, dm870minorHighOffsetNomCnt=dm870minorHighOffsetNomCnt, trapDM870LaserCurrentAlarm=trapDM870LaserCurrentAlarm, trapDM870UserOpticalOffAlarm=trapDM870UserOpticalOffAlarm, dm870stateflagFactoryDefault=dm870stateflagFactoryDefault, dm870minValueFanCurrent=dm870minValueFanCurrent, gx2Dm870AnalogEntry=gx2Dm870AnalogEntry, dm870stateFlagLaserCurrent=dm870stateFlagLaserCurrent, dm870majorHighAttenSetting=dm870majorHighAttenSetting, dm870minValueAttenSetting=dm870minValueAttenSetting, dm870bootStatusByte=dm870bootStatusByte, Float=Float, dm870labelLaserCurrent=dm870labelLaserCurrent, dm870labelRFInputStatus=dm870labelRFInputStatus, dm870stateFlagAttenSetting=dm870stateFlagAttenSetting, dm870stateFlagOffsetNomCnt=dm870stateFlagOffsetNomCnt, dm870maxValueLaserCurrent=dm870maxValueLaserCurrent, dm870stateflagBoot=dm870stateflagBoot, dm870uomModTemp=dm870uomModTemp, dm870alarmStateAttenSetting=dm870alarmStateAttenSetting, dm870stateFlagOffsetNomMonitor=dm870stateFlagOffsetNomMonitor, dm870uomLaserTemp=dm870uomLaserTemp, dm870majorHighModTemp=dm870majorHighModTemp, dm870valueRfInput=dm870valueRfInput, gx2Dm870StatusEntry=gx2Dm870StatusEntry, dm870alarmStateModTemp=dm870alarmStateModTemp, gx2Dm870DigitalEntry=gx2Dm870DigitalEntry, dm870enumOptOutput=dm870enumOptOutput, dm870stateflagRfInput=dm870stateflagRfInput, dm870uomFanCurrent=dm870uomFanCurrent, dm870valueLaserDataCRC=dm870valueLaserDataCRC, dm870minValueLaserPower=dm870minValueLaserPower, trapDM870FactoryDataCRCAlarm=trapDM870FactoryDataCRCAlarm, dm870labelLaserTemp=dm870labelLaserTemp, dm870flashBankARev=dm870flashBankARev, dm870flashPrgCntB=dm870flashPrgCntB, dm870minValueLaserTemp=dm870minValueLaserTemp, dm870currentValueLaserCurrent=dm870currentValueLaserCurrent, dm870stateflagLaserDataCRC=dm870stateflagLaserDataCRC, dm870maxValueLaserPower=dm870maxValueLaserPower, gx2Dm870Descriptor=gx2Dm870Descriptor, trapDM870omiOffsetAlarm=trapDM870omiOffsetAlarm, dm870maxValueTecCurrent=dm870maxValueTecCurrent, dm870minorLowModTemp=dm870minorLowModTemp, dm870valueAlarmDataCrc=dm870valueAlarmDataCrc, dm870enumRfInput=dm870enumRfInput, dm870enumLaserMode=dm870enumLaserMode, dm870majorHighFanCurrent=dm870majorHighFanCurrent, gx2Dm870AnalogTable=gx2Dm870AnalogTable, dm870majorLowModTemp=dm870majorLowModTemp, dm870majorHighOffsetNomMonitor=dm870majorHighOffsetNomMonitor, dm870labelAttenSetting=dm870labelAttenSetting, dm870majorLowLaserPower=dm870majorLowLaserPower, dm870majorLowLaserTemp=dm870majorLowLaserTemp, gx2Dm870AnalogTableIndex=gx2Dm870AnalogTableIndex, dm870valueLaserMode=dm870valueLaserMode, dm870stateFlagLaserPower=dm870stateFlagLaserPower, dm870calculateCRC=dm870calculateCRC, dm870hourMeter=dm870hourMeter, trapDM870CalDataCRCAlarm=trapDM870CalDataCRCAlarm, trapDM870ConfigChangeInteger=trapDM870ConfigChangeInteger, trapDM870LaserTempAlarm=trapDM870LaserTempAlarm, dm870currentValueAttenSetting=dm870currentValueAttenSetting, dm870labelAlarmDataCrc=dm870labelAlarmDataCrc, dm870currentValueLaserPower=dm870currentValueLaserPower, dm870valueOptOutput=dm870valueOptOutput, dm870labelOptOutput=dm870labelOptOutput, dm870minValueOffsetNomCnt=dm870minValueOffsetNomCnt, dm870uomLaserCurrent=dm870uomLaserCurrent, dm870stateflagLaserMode=dm870stateflagLaserMode, dm870labelLaserDataCRC=dm870labelLaserDataCRC, dm870stateflagOptOutput=dm870stateflagOptOutput, dm870uomLaserPower=dm870uomLaserPower, dm870minValueTecCurrent=dm870minValueTecCurrent, dm870minorHighLaserPower=dm870minorHighLaserPower, dm870factoryCRC=dm870factoryCRC, dm870uomTecCurrent=dm870uomTecCurrent, dm870labelFanCurrent=dm870labelFanCurrent, dm870uomOffsetNomMonitor=dm870uomOffsetNomMonitor, dm870labelBoot=dm870labelBoot, dm870majorHighTecCurrent=dm870majorHighTecCurrent, dm870maxValueFanCurrent=dm870maxValueFanCurrent, dm870minorHighModTemp=dm870minorHighModTemp, dm870labelLaserMode=dm870labelLaserMode, dm870maxValueLaserTemp=dm870maxValueLaserTemp, dm870minValueLaserCurrent=dm870minValueLaserCurrent)
