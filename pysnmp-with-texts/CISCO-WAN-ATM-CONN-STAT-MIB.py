#
# PySNMP MIB module CISCO-WAN-ATM-CONN-STAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-ATM-CONN-STAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:20:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
cwaChanVpi, cwaChanVci = mibBuilder.importSymbols("CISCO-WAN-ATM-CONN-MIB", "cwaChanVpi", "cwaChanVci")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, Integer32, Counter32, Counter64, ModuleIdentity, NotificationType, ObjectIdentity, iso, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "Counter32", "Counter64", "ModuleIdentity", "NotificationType", "ObjectIdentity", "iso", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32", "MibIdentifier")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
ciscoWanAtmConnStatMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 2))
ciscoWanAtmConnStatMIB.setRevisions(('2005-08-25 00:00', '2004-09-10 00:00', '2003-04-18 00:00', '2003-04-01 00:00', '2002-10-21 00:00', '2002-07-09 00:00', '2002-07-02 00:00', '2001-05-02 00:00', '1998-12-04 14:45',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWanAtmConnStatMIB.setRevisionsDescriptions(('Added cwacsBearerPVCTable.', 'Added 2 objects to cwacsExtStatsTable (extension of cwacsTable): cwacsTotalCR, cwacsAisSuppressCount.', 'Added 3 more objects to cwacsExtStatsTable (extension of cwacsTable): cwacsUsedConns, cwacsUtilizedCR, cwacsUsedVadConns.', 'Indentation/Editorial changes made across the MIB.', 'Added cwacsExtStatsTable (extension of cwacsTable).', '1. Added Following objects to cwacsTable, as upper 32-bits for 64-bit wide counters: cwacsHighIngRcvCLP0, cwacsHighIngRcvCLP1, cwacsHighIngXmtCLP0, cwacsHighIngXmtCLP1, cwacsHighIngCLP0CoSDiscard, cwacsHighIngCLP1CoSDiscard, cwacsHighIngCLP0UpcDiscard, cwacsHighIngCLP1UpcDiscard, cwacsHighIngCLP0UpcTagged, cwacsHighIngRcvEFCI0, cwacsHighIngRcvEFCI1, cwacsHighIngEFCI0Discard, cwacsHighIngEFCI1Discard, cwacsHighIngRcvEOF1, cwacsHighIngEOF1Discard, cwacsHighEgrRcvCLP0, cwacsHighEgrRcvCLP1, cwacsHighEgrXmtCLP0, cwacsHighEgrXmtCLP1, cwacsHighEgrCLP0CoSDiscard, cwacsHighEgrCLP1CoSDiscard, cwacsHighEgrRcvEFCI0, cwacsHighEgrRcvEFCI1, cwacsHighEgrEFCI0Discard, cwacsHighEgrEFCI1Discard, cwacsHighEgrRcvEOF1, cwacsHighEgrEOF1Discard. 2. Added cwacsXTable which contains 64-bits wide counters.', '1. Added cwaConnStatsTable for real time statistical counter objects. This table applies to only atm service module such as BXM.', '1. Added cwacsStatsClear object to cwacsEntry to clear channel connection statistic counters.', 'Initial version of the MIB module.',))
if mibBuilder.loadTexts: ciscoWanAtmConnStatMIB.setLastUpdated('200508250000Z')
if mibBuilder.loadTexts: ciscoWanAtmConnStatMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoWanAtmConnStatMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoWanAtmConnStatMIB.setDescription('This module contains ATM switch connection related real time statistical counter objects.')
ciscoWanAtmConnStatMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 2, 1))
cwacs = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1))
cwacsTable = MibTable((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1), )
if mibBuilder.loadTexts: cwacsTable.setStatus('current')
if mibBuilder.loadTexts: cwacsTable.setDescription('Contains traffic statistic information for every Channel entry in the atmTable. It is used to monitor the usage of the Channel in terms of Ingress(incoming direction) cells and Egress (outgoing direction) cells. In each direction counters are collected before and after the traffic management entity.')
cwacsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WAN-ATM-CONN-MIB", "cwaChanVpi"), (0, "CISCO-WAN-ATM-CONN-MIB", "cwaChanVci"))
if mibBuilder.loadTexts: cwacsEntry.setStatus('current')
if mibBuilder.loadTexts: cwacsEntry.setDescription('An entry in the ATM connection Channel statistic table. An entry is created for every Channel.')
cwacsIngRcvCLP0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 1), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngRcvCLP0.setStatus('current')
if mibBuilder.loadTexts: cwacsIngRcvCLP0.setDescription('The number of valid CLP=0 ATM cells in the ingress direction of this Channel prior to the traffic management entity.')
cwacsIngRcvCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 2), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngRcvCLP1.setStatus('current')
if mibBuilder.loadTexts: cwacsIngRcvCLP1.setDescription('The number of valid CLP=1 ATM cells in the ingress direction of this Channel prior to the traffic management entity.')
cwacsIngXmtCLP0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 3), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngXmtCLP0.setStatus('current')
if mibBuilder.loadTexts: cwacsIngXmtCLP0.setDescription('The number of valid CLP=0 ATM cells in the ingress direction of this Channel after the traffic management entity.')
cwacsIngXmtCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 4), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngXmtCLP1.setStatus('current')
if mibBuilder.loadTexts: cwacsIngXmtCLP1.setDescription('The number of valid CLP=1 ATM cells in the ingress direction of this Channel after the traffic management entity.')
cwacsIngCLP0CoSDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 5), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngCLP0CoSDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsIngCLP0CoSDiscard.setDescription('The number of valid CLP=0 cells in the ingress direction of this Channel that are discarded at the class of service queue due to overflow.')
cwacsIngCLP1CoSDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 6), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngCLP1CoSDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsIngCLP1CoSDiscard.setDescription('The number of valid CLP=1 cells in the ingress direction of this Channel that are discarded at the class of service queue due to overflow.')
cwacsIngCLP0UpcDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 7), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngCLP0UpcDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsIngCLP0UpcDiscard.setDescription('The number of valid CLP=0 cells in the ingress direction of this Channel that are discarded at the traffic policing entity due to UPC/PCR parameter violation. UPC(Usage Parameter Control) operation checks the validity of the user traffic on a connection. If incoming cells violate established user-network contract .If cell violates PCR(Peak Cell Rate) parameter for the connection it is discarded. Or else the cell is marked low priority by setting CLP=1.')
cwacsIngCLP1UpcDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 8), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngCLP1UpcDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsIngCLP1UpcDiscard.setDescription('The number of valid CLP=1 cells in the ingress direction of this Channel that are discarded at the traffic policing entity due to UPC/PCR parameter violation.')
cwacsIngCLP0UpcTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 9), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngCLP0UpcTagged.setStatus('current')
if mibBuilder.loadTexts: cwacsIngCLP0UpcTagged.setDescription('The number of valid CLP=0 cells in the ingress direction of this Channel that are tagged as low priority by UPC.')
cwacsIngRcvEFCI0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 10), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngRcvEFCI0.setStatus('current')
if mibBuilder.loadTexts: cwacsIngRcvEFCI0.setDescription('The number of valid EFCI=0 cells in the ingress direction of this Channel before class of service queue. EFCI(Explicit Forward Congestion Indication) is an ATM header bit.')
cwacsIngRcvEFCI1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 11), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngRcvEFCI1.setStatus('current')
if mibBuilder.loadTexts: cwacsIngRcvEFCI1.setDescription('The number of valid EFCI=1 cells in the ingress direction of this Channel before the class of service queue.')
cwacsIngEFCI0Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 12), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngEFCI0Discard.setStatus('current')
if mibBuilder.loadTexts: cwacsIngEFCI0Discard.setDescription('The number of valid UPC/PCR parameter compliant EFCI=0 cells in the ingress direction of this Channel that are discarded at the CoS queue.')
cwacsIngEFCI1Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 13), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngEFCI1Discard.setStatus('current')
if mibBuilder.loadTexts: cwacsIngEFCI1Discard.setDescription('The number of valid UPC/PCR parameter compliant EFCI=1 cells in the ingress direction of this Channel that are discarded at the CoS queue.')
cwacsIngRcvOAM = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 14), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngRcvOAM.setStatus('current')
if mibBuilder.loadTexts: cwacsIngRcvOAM.setDescription('The number of valid OAM cells in the ingress direction of this Channel before the CoS queue.')
cwacsIngOAMDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 15), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngOAMDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsIngOAMDiscard.setDescription('The number of valid OAM cells in the ingress direction of this Channel that are discarded at the CoS queue.')
cwacsIngRcvRM = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 16), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngRcvRM.setStatus('current')
if mibBuilder.loadTexts: cwacsIngRcvRM.setDescription('The number of valid RM cells in the ingress direction of this Channel before the CoS queue.')
cwacsIngRMDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 17), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngRMDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsIngRMDiscard.setDescription('The number of valid RM cells in the ingress direction of this Channel that are discarded at the CoS queue due to overflow.')
cwacsIngXmtFRm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 18), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngXmtFRm.setStatus('current')
if mibBuilder.loadTexts: cwacsIngXmtFRm.setDescription('The number of FRm(Forward RM) ATM cells in the ingress direction of this Channel PRIOR to the traffic management entity.')
cwacsIngXmtBRmFsRm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 19), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngXmtBRmFsRm.setStatus('current')
if mibBuilder.loadTexts: cwacsIngXmtBRmFsRm.setDescription('The total number of BRm(backward RM cells) and FsRm (foresight RM cells) ATM cells in the ingress direction of this Channel AFTER the traffic management entity.')
cwacsIngRcvEOF1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 20), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngRcvEOF1.setStatus('current')
if mibBuilder.loadTexts: cwacsIngRcvEOF1.setDescription('The number of valid EOF=1 ATM cells in the ingress direction of this Channel PRIOR to the traffic management entity.')
cwacsIngEOF1Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 21), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngEOF1Discard.setStatus('current')
if mibBuilder.loadTexts: cwacsIngEOF1Discard.setDescription('The number of valid EOF=1 ATM cells in the ingress direction of this Channel which are discard at the traffic management entity.')
cwacsIngACR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 22), Gauge32()).setUnits('cells/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngACR.setStatus('current')
if mibBuilder.loadTexts: cwacsIngACR.setDescription('Current value of the ingress ACR(Allowed Cell Rate) parameter. It is an ABR service parameter and is the current rate in cells/sec at which a source is allowed to send packets. For traffic type other than ABR this parameter is not instantiated. This variable is used for shaping the traffic going onto the backplane.')
cwacsIngVCQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 23), Gauge32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngVCQueueDepth.setStatus('current')
if mibBuilder.loadTexts: cwacsIngVCQueueDepth.setDescription('Current length of the ingress queue of this Channel in terms of number of cells.')
cwacsEgrRcvCLP0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 24), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrRcvCLP0.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrRcvCLP0.setDescription('The number of valid CLP=0 ATM cells in the egress direction of this Channel PRIOR to the traffic management entity.')
cwacsEgrRcvCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 25), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrRcvCLP1.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrRcvCLP1.setDescription('The number of valid CLP=1 ATM cells in the egress direction of this Channel PRIOR to the traffic management entity.')
cwacsEgrXmtCLP0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 26), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrXmtCLP0.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrXmtCLP0.setDescription('The number of valid CLP=0 ATM cells in the egress direction of this Channel AFTER the traffic management entity.')
cwacsEgrXmtCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 27), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrXmtCLP1.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrXmtCLP1.setDescription('The number of valid CLP=1 ATM cells in the egress direction of this Channel AFTER the traffic management entity.')
cwacsEgrCLP0CoSDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 28), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrCLP0CoSDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrCLP0CoSDiscard.setDescription('The number of valid CLP=0 cells in the egress direction of this Channel that are discarded at the CoS queue due to overflow.')
cwacsEgrCLP1CoSDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 29), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrCLP1CoSDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrCLP1CoSDiscard.setDescription('The number of valid CLP=1 cells in the egress direction of this Channel that are discarded at the CoS queue due to overflow.')
cwacsEgrRcvEFCI0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 30), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrRcvEFCI0.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrRcvEFCI0.setDescription('The number of valid EFCI=0 cells in the egress direction of this Channel before CoS queue.')
cwacsEgrRcvEFCI1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 31), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrRcvEFCI1.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrRcvEFCI1.setDescription('The number of valid EFCI=1 cells in the egress direction of this Channel before the class of service queue.')
cwacsEgrEFCI0Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 32), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrEFCI0Discard.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrEFCI0Discard.setDescription('The number of valid EFCI=0 cells in the egress direction of this Channel that are discarded at the CoS queue.')
cwacsEgrEFCI1Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 33), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrEFCI1Discard.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrEFCI1Discard.setDescription('The number of valid EFCI=1 cells in the egress direction of this Channel that are discarded at the CoS queue.')
cwacsEgrRcvOAM = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 34), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrRcvOAM.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrRcvOAM.setDescription('The number of valid OAM cells in the egress direction of this Channel before the CoS queue.')
cwacsEgrOAMDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 35), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrOAMDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrOAMDiscard.setDescription('The number of valid OAM cells in the egress direction of this Channel that are discarded at the CoS queue.')
cwacsEgrRcvRM = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 36), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrRcvRM.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrRcvRM.setDescription('The number of valid RM cells in the egress direction of this Channel before the CoS queue.')
cwacsEgrRMDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 37), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrRMDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrRMDiscard.setDescription('The number of valid RM cells in the egress direction of this Channel that are discarded at the CoS queue due to overflow.')
cwacsEgrXmtFRm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 38), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrXmtFRm.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrXmtFRm.setDescription('The number of FRm ATM cells in the egress direction of this Channel PRIOR to the traffic management entity.')
cwacsEgrXmtBRmFsRm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 39), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrXmtBRmFsRm.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrXmtBRmFsRm.setDescription('The total number of BRm and FsRm ATM cells in the egress direction of this Channel AFTER the traffic management entity.')
cwacsEgrRcvEOF1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 40), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrRcvEOF1.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrRcvEOF1.setDescription('The number of valid EOF=1 ATM cells in the egress direction of this Channel PRIOR to the traffic management entity.')
cwacsEgrEOF1Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 41), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrEOF1Discard.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrEOF1Discard.setDescription('The number of valid EOF=1 ATM cells in the egress direction of this Channel which are discard at the traffic management entity.')
cwacsEgrACR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 42), Gauge32()).setUnits('cells/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrACR.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrACR.setDescription('Current value of the egress ACR(Allowed Cell Rate) parameter. It is an ABR service parameter and is the current rate in cells/sec at which a source is allowed to send packets. For traffic type other than ABR this parameter is not instantiated. This variable is used for shaping the traffic going onto the backplane.')
cwacsEgrVCQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 43), Gauge32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrVCQueueDepth.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrVCQueueDepth.setDescription('Current length of the egress queue of this Channel in terms of number of cells.')
cwacsStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 44), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwacsStatsClear.setStatus('current')
if mibBuilder.loadTexts: cwacsStatsClear.setDescription('The agent clears the channel statistics collection if it receives a set to value of true(1) request from a manager. Setting a value of false(2) has no implication.')
cwacsHighIngRcvCLP0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 45), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighIngRcvCLP0.setStatus('current')
if mibBuilder.loadTexts: cwacsHighIngRcvCLP0.setDescription('The number of valid CLP=0 ATM cells in the ingress direction of this Channel PRIOR to the traffic management entity. This counter carries upper 32-bits of cwacsHCIngRcvCLP0. The lower 32-bits will be present in cwacsIngRcvCLP0.')
cwacsHighIngRcvCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 46), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighIngRcvCLP1.setStatus('current')
if mibBuilder.loadTexts: cwacsHighIngRcvCLP1.setDescription('The number of valid CLP=1 ATM cells in the ingress direction of this Channel PRIOR to the traffic management entity. This counter carries upper 32-bits of cwacsHCIngRcvCLP1. The lower 32-bits will be present in cwacsIngRcvCLP1.')
cwacsHighIngXmtCLP0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 47), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighIngXmtCLP0.setStatus('current')
if mibBuilder.loadTexts: cwacsHighIngXmtCLP0.setDescription('The number of valid CLP=0 ATM cells in the ingress direction of this Channel AFTER the traffic management entity. This counter carries upper 32-bits of cwacsHCIngXmtCLP0. The lower 32-bits will be present in cwacsIngXmtCLP0.')
cwacsHighIngXmtCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 48), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighIngXmtCLP1.setStatus('current')
if mibBuilder.loadTexts: cwacsHighIngXmtCLP1.setDescription('The number of valid CLP=1 ATM cells in the ingress direction of this Channel AFTER the traffic management entity. This counter carries upper 32-bits of cwacsHCIngXmtCLP1. The lower 32-bits will be present in cwacsIngXmtCLP1.')
cwacsHighIngCLP0CoSDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 49), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighIngCLP0CoSDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsHighIngCLP0CoSDiscard.setDescription('The number of valid CLP=0 cells in the ingress direction of this Channel that are discarded at the class of service queue due to overflow. This counter carries upper 32-bits of cwacsHCIngCLP0CoSDiscard. The lower 32-bits will be present in cwacsIngCLP0CoSDiscard.')
cwacsHighIngCLP1CoSDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 50), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighIngCLP1CoSDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsHighIngCLP1CoSDiscard.setDescription('The number of valid CLP=1 cells in the ingress direction of this Channel that are discarded at the class of service queue due to overflow. This counter carries upper 32-bits of cwacsHCIngCLP1CoSDiscard. The lower 32-bits will be present in cwacsIngCLP1CoSDiscard.')
cwacsHighIngCLP0UpcDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 51), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighIngCLP0UpcDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsHighIngCLP0UpcDiscard.setDescription('The number of valid CLP=0 cells in the ingress direction of this Channel that are discarded at the traffic policing entity due to UPC/PCR parameter violation. This counter carries upper 32-bits of cwacsHCIngCLP0UpcDiscard. The lower 32-bits will be present in cwacsIngCLP0UpcDiscard.')
cwacsHighIngCLP1UpcDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 52), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighIngCLP1UpcDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsHighIngCLP1UpcDiscard.setDescription('The number of valid CLP=1 cells in the ingress direction of this Channel that are discarded at the traffic policing entity due to UPC/PCR parameter violation. This counter carries upper 32-bits of cwacsHCIngCLP1UpcDiscard. The lower 32-bits will be present in cwacsIngCLP1UpcDiscard.')
cwacsHighIngCLP0UpcTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 53), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighIngCLP0UpcTagged.setStatus('current')
if mibBuilder.loadTexts: cwacsHighIngCLP0UpcTagged.setDescription('The number of valid CLP=0 cells in the ingress direction of this Channel that are tagged as low priority by UPC. This counter carries upper 32-bits of cwacsHCIngCLP0UpcTagged. The lower 32-bits will be present in cwacsIngCLP0UpcTagged.')
cwacsHighIngRcvEFCI0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 54), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighIngRcvEFCI0.setStatus('current')
if mibBuilder.loadTexts: cwacsHighIngRcvEFCI0.setDescription('The number of valid EFCI=0 cells in the ingress direction of this Channel before class of service queue. EFCI(Explicit Forward Congestion Indication) is an ATM header bit. This counter carries upper 32-bits of cwacsHCIngRcvEFCI0. The lower 32-bits will be present in cwacsIngRcvEFCI0.')
cwacsHighIngRcvEFCI1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 55), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighIngRcvEFCI1.setStatus('current')
if mibBuilder.loadTexts: cwacsHighIngRcvEFCI1.setDescription('The number of valid EFCI=1 cells in the ingress direction of this Channel before the class of service queue. This counter carries upper 32-bits of cwacsHCIngRcvEFCI1. The lower 32-bits will be present in cwacsIngRcvEFCI1')
cwacsHighIngEFCI0Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 56), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighIngEFCI0Discard.setStatus('current')
if mibBuilder.loadTexts: cwacsHighIngEFCI0Discard.setDescription('The number of valid UPC/PCR parameter compliant EFCI=0 cells in the ingress direction of this Channel that are discarded at the CoS queue. This counter carries upper 32-bits of cwacsHCIngEFCI0Discard. The lower 32-bits will be present in cwacsIngEFCI0Discard.')
cwacsHighIngEFCI1Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 57), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighIngEFCI1Discard.setStatus('current')
if mibBuilder.loadTexts: cwacsHighIngEFCI1Discard.setDescription('The number of valid UPC/PCR parameter compliant EFCI=1 cells in the ingress direction of this Channel that are discarded at the CoS queue. This counter carries upper 32-bits of cwacsHCIngEFCI1Discard. The lower 32-bits will be present in cwacsIngEFCI1Discard.')
cwacsHighIngRcvEOF1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 58), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighIngRcvEOF1.setStatus('current')
if mibBuilder.loadTexts: cwacsHighIngRcvEOF1.setDescription('The number of valid EOF=1 ATM cells in the ingress direction of this Channel PRIOR to the traffic management entity. This counter carries upper 32-bits of cwacsHCIngRcvEOF1. The lower 32-bits will be present in cwacsIngRcvEOF1.')
cwacsHighIngEOF1Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 59), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighIngEOF1Discard.setStatus('current')
if mibBuilder.loadTexts: cwacsHighIngEOF1Discard.setDescription('The number of valid EOF=1 ATM cells in the ingress direction of this Channel which are discarded at the traffic management entity. This counter carries upper 32-bits of cwacsHCIngEOF1Discard. The lower 32-bits will be present in cwacsIngEOF1Discard.')
cwacsHighEgrRcvCLP0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 60), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighEgrRcvCLP0.setStatus('current')
if mibBuilder.loadTexts: cwacsHighEgrRcvCLP0.setDescription('The number of valid CLP=0 ATM cells in the egress direction of this Channel PRIOR to the traffic management entity. This counter carries upper 32-bits of cwacsHCEgrRcvCLP0. The lower 32-bits will be present in cwacsEgrRcvCLP0.')
cwacsHighEgrRcvCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 61), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighEgrRcvCLP1.setStatus('current')
if mibBuilder.loadTexts: cwacsHighEgrRcvCLP1.setDescription('The number of valid CLP=1 ATM cells in the egress direction of this Channel PRIOR to the traffic management entity. This counter carries upper 32-bits of cwacsHCEgrRcvCLP1. The lower 32-bits will be present in cwacsEgrRcvCLP1.')
cwacsHighEgrXmtCLP0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 62), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighEgrXmtCLP0.setStatus('current')
if mibBuilder.loadTexts: cwacsHighEgrXmtCLP0.setDescription('The number of valid CLP=0 ATM cells in the egress direction of this Channel AFTER the traffic management entity. This counter carries upper 32-bits of cwacsHCEgrXmtCLP0. The lower 32-bits will be present in cwacsEgrXmtCLP0.')
cwacsHighEgrXmtCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 63), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighEgrXmtCLP1.setStatus('current')
if mibBuilder.loadTexts: cwacsHighEgrXmtCLP1.setDescription('The number of valid CLP=1 ATM cells in the egress direction of this Channel AFTER the traffic management entity. This counter carries upper 32-bits of cwacsHCEgrXmtCLP1. The lower 32-bits will be present in cwacsEgrXmtCLP1.')
cwacsHighEgrCLP0CoSDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 64), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighEgrCLP0CoSDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsHighEgrCLP0CoSDiscard.setDescription('The number of valid CLP=0 cells in the egress direction of this Channel that are discarded at the CoS queue due to overflow. This counter carries upper 32-bits of cwacsHCEgrCLP0CoSDiscard. The lower 32-bits will be present in cwacsEgrCLP0CoSDiscard.')
cwacsHighEgrCLP1CoSDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 65), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighEgrCLP1CoSDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsHighEgrCLP1CoSDiscard.setDescription('The number of valid CLP=1 cells in the egress direction of this Channel that are discarded at the CoS queue due to overflow. This counter carries upper 32-bits of cwacsHCEgrCLP1CoSDiscard. The lower 32-bits will be present in cwacsEgrCLP1CoSDiscard.')
cwacsHighEgrRcvEFCI0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 66), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighEgrRcvEFCI0.setStatus('current')
if mibBuilder.loadTexts: cwacsHighEgrRcvEFCI0.setDescription('The number of valid EFCI=0 cells in the egress direction of this Channel before CoS queue. This counter carries upper 32-bits of cwacsHCEgrRcvEFCI0. The lower 32-bits will be present in cwacsEgrRcvEFCI0.')
cwacsHighEgrRcvEFCI1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 67), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighEgrRcvEFCI1.setStatus('current')
if mibBuilder.loadTexts: cwacsHighEgrRcvEFCI1.setDescription('The number of valid EFCI=1 cells in the egress direction of this Channel before the class of service queue. This counter carries upper 32-bits of cwacsHCEgrRcvEFCI1. The lower 32-bits will be present in cwacsEgrRcvEFCI1.')
cwacsHighEgrEFCI0Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 68), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighEgrEFCI0Discard.setStatus('current')
if mibBuilder.loadTexts: cwacsHighEgrEFCI0Discard.setDescription('The number of valid EFCI=0 cells in the egress direction of this Channel that are discarded at the CoS queue. This counter carries upper 32-bits of cwacsHCEgrEFCI0Discard. The lower 32-bits will be present in cwacsEgrEFCI0Discard.')
cwacsHighEgrEFCI1Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 69), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighEgrEFCI1Discard.setStatus('current')
if mibBuilder.loadTexts: cwacsHighEgrEFCI1Discard.setDescription('The number of valid EFCI=1 cells in the egress direction of this Channel that are discarded at the CoS queue. This counter carries upper 32-bits of cwacsHCEgrEFCI1Discard. The lower 32-bits will be present in cwacsEgrEFCI1Discard.')
cwacsHighEgrRcvEOF1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 70), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighEgrRcvEOF1.setStatus('current')
if mibBuilder.loadTexts: cwacsHighEgrRcvEOF1.setDescription('The number of valid EOF=1 ATM cells in the egress direction of this Channel PRIOR to the traffic management entity. This counter carries upper 32-bits of cwacsHCEgrRcvEOF1. The lower 32-bits will be present in cwacsEgrRcvEOF1.')
cwacsHighEgrEOF1Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 1, 1, 71), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHighEgrEOF1Discard.setStatus('current')
if mibBuilder.loadTexts: cwacsHighEgrEOF1Discard.setDescription('The number of valid EOF=1 ATM cells in the egress direction of this Channel which are discarded at the traffic management entity. This counter carries upper 32-bits of cwacsHCEgrEOF1Discard. The lower 32-bits will be present in cwacsEgrEOF1Discard.')
cwacsXTable = MibTable((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2), )
if mibBuilder.loadTexts: cwacsXTable.setStatus('current')
if mibBuilder.loadTexts: cwacsXTable.setDescription('Contains traffic statistic information for every Channel entry in the atmTable. It is used to monitor the usage of the Channel in terms of Ingress(incoming direction) cells and Egress (outgoing direction) cells. In each direction counters are collected before and after the traffic management entity. The objects will carry 64-bit values for the statistics counters.')
cwacsXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1), )
cwacsEntry.registerAugmentions(("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsXEntry"))
cwacsXEntry.setIndexNames(*cwacsEntry.getIndexNames())
if mibBuilder.loadTexts: cwacsXEntry.setStatus('current')
if mibBuilder.loadTexts: cwacsXEntry.setDescription('An entry in the ATM connection Channel statistic table. An entry is created for every Channel.')
cwacsHCIngRcvCLP0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 1), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCIngRcvCLP0.setStatus('current')
if mibBuilder.loadTexts: cwacsHCIngRcvCLP0.setDescription('The number of valid CLP=0 ATM cells in the ingress direction of this Channel PRIOR to the traffic management entity. This counter carries 64-bit value of this statistic.')
cwacsHCIngRcvCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 2), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCIngRcvCLP1.setStatus('current')
if mibBuilder.loadTexts: cwacsHCIngRcvCLP1.setDescription('The number of valid CLP=1 ATM cells in the ingress direction of this Channel PRIOR to the traffic management entity. This counter carries 64-bit value of this statistic.')
cwacsHCIngXmtCLP0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 3), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCIngXmtCLP0.setStatus('current')
if mibBuilder.loadTexts: cwacsHCIngXmtCLP0.setDescription('The number of valid CLP=0 ATM cells in the ingress direction of this Channel AFTER the traffic management entity. This counter carries 64-bit value of this statistic.')
cwacsHCIngXmtCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 4), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCIngXmtCLP1.setStatus('current')
if mibBuilder.loadTexts: cwacsHCIngXmtCLP1.setDescription('The number of valid CLP=1 ATM cells in the ingress direction of this Channel AFTER the traffic management entity. This counter carries 64-bit value of this statistic.')
cwacsHCIngCLP0CoSDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 5), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCIngCLP0CoSDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsHCIngCLP0CoSDiscard.setDescription('The number of valid CLP=0 cells in the ingress direction of this Channel that are discarded at the class of service queue due to overflow. This counter carries 64-bit value of this statistic.')
cwacsHCIngCLP1CoSDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 6), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCIngCLP1CoSDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsHCIngCLP1CoSDiscard.setDescription('The number of valid CLP=1 cells in the ingress direction of this Channel that are discarded at the class of service queue due to overflow.')
cwacsHCIngCLP0UpcDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 7), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCIngCLP0UpcDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsHCIngCLP0UpcDiscard.setDescription('The number of valid CLP=0 cells in the ingress direction of this Channel that are discarded at the traffic policing entity due to UPC/PCR parameter violation. This counter carries 64-bit value of this statistic.')
cwacsHCIngCLP1UpcDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 8), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCIngCLP1UpcDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsHCIngCLP1UpcDiscard.setDescription('The number of valid CLP=1 cells in the ingress direction of this Channel that are discarded at the traffic policing entity due to UPC/PCR parameter violation. This counter carries 64-bit value of this statistic.')
cwacsHCIngCLP0UpcTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 9), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCIngCLP0UpcTagged.setStatus('current')
if mibBuilder.loadTexts: cwacsHCIngCLP0UpcTagged.setDescription('The number of valid CLP=0 cells in the ingress direction of this Channel that are tagged as low priority by UPC. This counter carries 64-bit value of this statistic.')
cwacsHCIngRcvEFCI0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 10), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCIngRcvEFCI0.setStatus('current')
if mibBuilder.loadTexts: cwacsHCIngRcvEFCI0.setDescription('The number of valid EFCI=0 cells in the ingress direction of this Channel before class of service queue. EFCI(Explicit Forward Congestion Indication) is an ATM header bit. This counter carries 64-bit value of this statistic.')
cwacsHCIngRcvEFCI1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 11), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCIngRcvEFCI1.setStatus('current')
if mibBuilder.loadTexts: cwacsHCIngRcvEFCI1.setDescription('The number of valid EFCI=1 cells in the ingress direction of this Channel before the class of service queue. This counter carries 64-bit value of this statistic.')
cwacsHCIngEFCI0Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 12), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCIngEFCI0Discard.setStatus('current')
if mibBuilder.loadTexts: cwacsHCIngEFCI0Discard.setDescription('The number of valid UPC/PCR parameter compliant EFCI=0 cells in the ingress direction of this Channel that are discarded at the CoS queue. This counter carries 64-bit value of this statistic.')
cwacsHCIngEFCI1Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 13), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCIngEFCI1Discard.setStatus('current')
if mibBuilder.loadTexts: cwacsHCIngEFCI1Discard.setDescription('The number of valid UPC/PCR parameter compliant EFCI=1 cells in the ingress direction of this Channel that are discarded at the CoS queue. This counter carries 64-bit value of this statistic.')
cwacsHCIngRcvEOF1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 14), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCIngRcvEOF1.setStatus('current')
if mibBuilder.loadTexts: cwacsHCIngRcvEOF1.setDescription('The number of valid EOF=1 ATM cells in the ingress direction of this Channel PRIOR to the traffic management entity. This counter carries 64-bit value of this statistic.')
cwacsHCIngEOF1Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 15), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCIngEOF1Discard.setStatus('current')
if mibBuilder.loadTexts: cwacsHCIngEOF1Discard.setDescription('The number of valid EOF=1 ATM cells in the ingress direction of this Channel which are discard at the traffic management entity. This counter carries 64-bit value of this statistic.')
cwacsHCEgrRcvCLP0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 16), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCEgrRcvCLP0.setStatus('current')
if mibBuilder.loadTexts: cwacsHCEgrRcvCLP0.setDescription('The number of valid CLP=0 ATM cells in the egress direction of this Channel PRIOR to the traffic management entity. This counter carries 64-bit value of this statistic.')
cwacsHCEgrRcvCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 17), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCEgrRcvCLP1.setStatus('current')
if mibBuilder.loadTexts: cwacsHCEgrRcvCLP1.setDescription('The number of valid CLP=1 ATM cells in the egress direction of this Channel PRIOR to the traffic management entity. This counter carries 64-bit value of this statistic.')
cwacsHCEgrXmtCLP0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 18), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCEgrXmtCLP0.setStatus('current')
if mibBuilder.loadTexts: cwacsHCEgrXmtCLP0.setDescription('The number of valid CLP=0 ATM cells in the egress direction of this Channel AFTER the traffic management entity. This counter carries 64-bit value of this statistic.')
cwacsHCEgrXmtCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 19), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCEgrXmtCLP1.setStatus('current')
if mibBuilder.loadTexts: cwacsHCEgrXmtCLP1.setDescription('The number of valid CLP=1 ATM cells in the egress direction of this Channel AFTER the traffic management entity. This counter carries 64-bit value of this statistic.')
cwacsHCEgrCLP0CoSDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 20), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCEgrCLP0CoSDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsHCEgrCLP0CoSDiscard.setDescription('The number of valid CLP=0 cells in the egress direction of this Channel that are discarded at the CoS queue due to overflow. This counter carries 64-bit value of this statistic.')
cwacsHCEgrCLP1CoSDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 21), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCEgrCLP1CoSDiscard.setStatus('current')
if mibBuilder.loadTexts: cwacsHCEgrCLP1CoSDiscard.setDescription('The number of valid CLP=1 cells in the egress direction of this Channel that are discarded at the CoS queue due to overflow. This counter carries 64-bit value of this statistic.')
cwacsHCEgrRcvEFCI0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 22), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCEgrRcvEFCI0.setStatus('current')
if mibBuilder.loadTexts: cwacsHCEgrRcvEFCI0.setDescription('The number of valid EFCI=0 cells in the egress direction of this Channel before CoS queue. This counter carries 64-bit value of this statistic.')
cwacsHCEgrRcvEFCI1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 23), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCEgrRcvEFCI1.setStatus('current')
if mibBuilder.loadTexts: cwacsHCEgrRcvEFCI1.setDescription('The number of valid EFCI=1 cells in the egress direction of this Channel before the class of service queue. This counter carries 64-bit value of this statistic.')
cwacsHCEgrEFCI0Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 24), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCEgrEFCI0Discard.setStatus('current')
if mibBuilder.loadTexts: cwacsHCEgrEFCI0Discard.setDescription('The number of valid EFCI=0 cells in the egress direction of this Channel that are discarded at the CoS queue. This counter carries 64-bit value of this statistic.')
cwacsHCEgrEFCI1Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 25), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCEgrEFCI1Discard.setStatus('current')
if mibBuilder.loadTexts: cwacsHCEgrEFCI1Discard.setDescription('The number of valid EFCI=1 cells in the egress direction of this Channel that are discarded at the CoS queue. This counter carries 64-bit value of this statistic.')
cwacsHCEgrRcvEOF1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 26), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCEgrRcvEOF1.setStatus('current')
if mibBuilder.loadTexts: cwacsHCEgrRcvEOF1.setDescription('The number of valid EOF=1 ATM cells in the egress direction of this Channel PRIOR to the traffic management entity. This counter carries 64-bit value of this statistic.')
cwacsHCEgrEOF1Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 2, 1, 27), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsHCEgrEOF1Discard.setStatus('current')
if mibBuilder.loadTexts: cwacsHCEgrEOF1Discard.setDescription('The number of valid EOF=1 ATM cells in the egress direction of this Channel which are discarded at the traffic management entity. This counter carries 64-bit value of this statistic.')
cwaConnStatsTable = MibTable((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 3), )
if mibBuilder.loadTexts: cwaConnStatsTable.setStatus('current')
if mibBuilder.loadTexts: cwaConnStatsTable.setDescription('Contains traffic statistic information for every Channel entry in the atmTable. It is used to monitor the usage of the Channel in terms of Ingress(incoming direction) cells and Egress (outgoing direction) cells. In each direction counters are collected before and after the traffic management entity. This table only applies to ATM service module such as BXM.')
cwaConnStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WAN-ATM-CONN-MIB", "cwaChanVpi"), (0, "CISCO-WAN-ATM-CONN-MIB", "cwaChanVci"))
if mibBuilder.loadTexts: cwaConnStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cwaConnStatsEntry.setDescription('An entry in the ATM connection Channel statistic table. An entry is created for every Channel. These counters applies to Channels on ATM service module such as BXM.')
cwaConnStatsIngRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 3, 1, 1), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwaConnStatsIngRcv.setStatus('current')
if mibBuilder.loadTexts: cwaConnStatsIngRcv.setDescription('The number of valid CLP=0 and CLP=1 ATM cells in the ingress direction of this Channel prior to the traffic management entity.')
cwaConnStatsIngCLP0Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 3, 1, 2), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwaConnStatsIngCLP0Discard.setStatus('current')
if mibBuilder.loadTexts: cwaConnStatsIngCLP0Discard.setDescription('The number of valid CLP=0 cells in the ingress direction of this Channel that are discarded at the traffic policing entity due to UPC parameter violation and at the class of service queue due to overflow.')
cwaConnStatsIngCLP1Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 3, 1, 3), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwaConnStatsIngCLP1Discard.setStatus('current')
if mibBuilder.loadTexts: cwaConnStatsIngCLP1Discard.setDescription('The number of valid CLP=1 cells in the ingress direction of this Channel that are discarded at the traffic policing entity due to UPC parameter violation and at the class of service queue due to overflow.')
cwaConnStatsIngTotalDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 3, 1, 4), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwaConnStatsIngTotalDiscard.setStatus('current')
if mibBuilder.loadTexts: cwaConnStatsIngTotalDiscard.setDescription('Total number of CLP=0 cells, CLP=1 cells, OAM cells, and RM cells in the ingress direction of this Channel that are discarded due to UPC parameter violation and the class of service queue overflow.')
cwaConnStatsEgrXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 3, 1, 5), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwaConnStatsEgrXmt.setStatus('current')
if mibBuilder.loadTexts: cwaConnStatsEgrXmt.setDescription('The number of valid CLP=0 and CLP=1 ATM cells in the egress direction of this Channel prior to the traffic management entity.')
cwaConnStatsEgrCLP0Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 3, 1, 6), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwaConnStatsEgrCLP0Discard.setStatus('current')
if mibBuilder.loadTexts: cwaConnStatsEgrCLP0Discard.setDescription('The number of valid CLP=0 cells in the egress direction of this Channel that are discarded at the class of service queue due to overflow.')
cwaConnStatsEgrCLP1Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 3, 1, 7), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwaConnStatsEgrCLP1Discard.setStatus('current')
if mibBuilder.loadTexts: cwaConnStatsEgrCLP1Discard.setDescription('The number of valid CLP=1 cells in the egress direction of this Channel that are discarded at the the class of service queue due to overflow.')
cwaConnStatsEgrTotalDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 3, 1, 8), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwaConnStatsEgrTotalDiscard.setStatus('current')
if mibBuilder.loadTexts: cwaConnStatsEgrTotalDiscard.setDescription('Total number of CLP=0 cells, CLP=1 cells, OAM cells, and RM cells in the egress direction of this Channel that are discarded due to the class of service queue overflow.')
cwaConnStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 3, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwaConnStatsClear.setStatus('current')
if mibBuilder.loadTexts: cwaConnStatsClear.setDescription('The agent clears the channel statistics collection if it receives a set to value of true(1) request from a manager. Setting a value of false(2) has no implication.')
cwacsExtStatsTable = MibTable((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 4), )
if mibBuilder.loadTexts: cwacsExtStatsTable.setStatus('current')
if mibBuilder.loadTexts: cwacsExtStatsTable.setDescription('This table is extension of cwacsTable and is used to store traffic statistic information for each channel. The information in this table is related to voice over aal2(VoAtm).')
cwacsExtStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 4, 1), )
cwacsEntry.registerAugmentions(("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsExtStatsEntry"))
cwacsExtStatsEntry.setIndexNames(*cwacsEntry.getIndexNames())
if mibBuilder.loadTexts: cwacsExtStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cwacsExtStatsEntry.setDescription('An entry in cwacsTable.')
cwacsEgrAal2HecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 4, 1, 1), Counter32()).setUnits('PDUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrAal2HecErrors.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrAal2HecErrors.setDescription('The number of egress AAL2 CPS(Common Part Sub-layer) PDUs dropped due to HEC (Header Error Control) error.')
cwacsEgrAal2InvalidOsfCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 4, 1, 2), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrAal2InvalidOsfCells.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrAal2InvalidOsfCells.setDescription('The Number of AAL2 cells dropped due to invalid OSF (OffSet Field) in the egress direction.')
cwacsEgrAal2InvalidParCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 4, 1, 3), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrAal2InvalidParCells.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrAal2InvalidParCells.setDescription('The Number of AAL2 cells dropped due to invalid Parity bit field in the egress direction.')
cwacsAal2CpsSentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 4, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsAal2CpsSentPkts.setStatus('current')
if mibBuilder.loadTexts: cwacsAal2CpsSentPkts.setDescription('The number of AAL2 CPS packets sent to the network.')
cwacsAal2CpsRcvdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 4, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsAal2CpsRcvdPkts.setStatus('current')
if mibBuilder.loadTexts: cwacsAal2CpsRcvdPkts.setDescription('The number of AAL2 CPS packets received from the network. This does not include the packets which are counted as error packets.')
cwacsEgrAal2CpsInvalidCidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 4, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsEgrAal2CpsInvalidCidPkts.setStatus('current')
if mibBuilder.loadTexts: cwacsEgrAal2CpsInvalidCidPkts.setDescription('The number of AAL2 CPS packets dropped in the egress direction due to invalid CID. The CID may be considered as invalid if - a) It is out of range. b) It is not configured CID is Channel ID of a voice channel which set-up within PVC/SVC(only AAL2) and the CID is unique within the context of PVC/SVC.')
cwacsCacPassedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsCacPassedCalls.setStatus('current')
if mibBuilder.loadTexts: cwacsCacPassedCalls.setDescription('The number of calls that passed successfully the CAC function. For example, CAC functionality is applied either due to: 1) The CRCX message sent to Voice Gateway from the Call Agent to set up a new connection OR AAL2 trunking application. or 2) Upspeed request due to Fax/modem tone detection on a connection configured for compression. For the initial version of Alabama release, only case 2 is valid.')
cwacsCacRejectedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsCacRejectedCalls.setStatus('current')
if mibBuilder.loadTexts: cwacsCacRejectedCalls.setDescription('The number of calls that got rejected due to CAC function. The CAC rejection was due to the bandwidth not being available on a given ATM connection.')
cwacsIngXmtOAM = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 4, 1, 9), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsIngXmtOAM.setStatus('current')
if mibBuilder.loadTexts: cwacsIngXmtOAM.setDescription('The number of valid OAM cells in the ingress direction of this Channel after the traffic management entity.')
cwacsUsedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsUsedConns.setStatus('current')
if mibBuilder.loadTexts: cwacsUsedConns.setDescription('This attribute indicates the number of connections currently in used.')
cwacsUtilizedCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 4, 1, 11), Gauge32()).setUnits('cells per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsUtilizedCR.setStatus('current')
if mibBuilder.loadTexts: cwacsUtilizedCR.setDescription('This attribute indicates the current utilized CR (cell Rate) applied for PVC connection.')
cwacsUsedVadConns = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 4, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsUsedVadConns.setStatus('current')
if mibBuilder.loadTexts: cwacsUsedVadConns.setDescription('This attribute indicates the number of connections currently using VAD (Voice Activity Detection).')
cwacsTotalCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 4, 1, 13), Gauge32()).setUnits('cells per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsTotalCR.setStatus('current')
if mibBuilder.loadTexts: cwacsTotalCR.setDescription('This attribute indicates the Total CR (cell Rate) applied for PVC connection.')
cwacsAisSuppressCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsAisSuppressCount.setStatus('current')
if mibBuilder.loadTexts: cwacsAisSuppressCount.setDescription('This object holds the number of times that ATM network alarms were successfully suppressed and prevented from propagating onto the TDM side for this PVC.')
cwacsBearerPVCTable = MibTable((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 5), )
if mibBuilder.loadTexts: cwacsBearerPVCTable.setStatus('current')
if mibBuilder.loadTexts: cwacsBearerPVCTable.setDescription('This table stores the bearer PVC statistic information.')
cwacsBearerPVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WAN-ATM-CONN-MIB", "cwaChanVpi"), (0, "CISCO-WAN-ATM-CONN-MIB", "cwaChanVci"))
if mibBuilder.loadTexts: cwacsBearerPVCEntry.setStatus('current')
if mibBuilder.loadTexts: cwacsBearerPVCEntry.setDescription('Each entry represents a valid bearer PVC. An entry is added/deleted automatically when a bearer PVC is added/deleted. A bearer PVC excludes the secondary one in a dual PVC pair.')
cwacsAvailableBearerPVCBWMin = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 5, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsAvailableBearerPVCBWMin.setStatus('current')
if mibBuilder.loadTexts: cwacsAvailableBearerPVCBWMin.setDescription('The minimum available bandwidth of a bearer PVC in the statistics interval.')
cwacsAvailableBearerPVCBWMax = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 5, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsAvailableBearerPVCBWMax.setStatus('current')
if mibBuilder.loadTexts: cwacsAvailableBearerPVCBWMax.setDescription('The maximum available bandwidth of a bearer PVC in the statistics interval.')
cwacsAvailableBearerPVCBWAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 5, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsAvailableBearerPVCBWAvg.setStatus('current')
if mibBuilder.loadTexts: cwacsAvailableBearerPVCBWAvg.setDescription('The average available bandwidth of a bearer PVC in the statistics interval.')
cwacsBearerPVCSinceLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 2, 1, 1, 5, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwacsBearerPVCSinceLastReset.setStatus('current')
if mibBuilder.loadTexts: cwacsBearerPVCSinceLastReset.setDescription('The elapsed time (in seconds) since the last periodic reset.')
ciscoWanAtmConnStatMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 2, 2))
ciscoWanAtmConnStatMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 2, 2, 0))
ciscoWanAtmConnStatMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 2, 3))
ciscoWanAtmConnStatMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 2, 3, 1))
ciscoWanAtmConnStatMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 2, 3, 2))
ciscoWanAtmConnStatMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 2, 3, 1, 1)).setObjects(("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanAtmConnStatMIBCompliance = ciscoWanAtmConnStatMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoWanAtmConnStatMIBCompliance.setDescription('The compliance statement for the Cisco statistics MIB.')
ciscoWanAtmConnStatMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 2, 3, 1, 2)).setObjects(("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsGroup"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwaConnStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanAtmConnStatMIBCompliance2 = ciscoWanAtmConnStatMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoWanAtmConnStatMIBCompliance2.setDescription('The compliance statement for the Cisco statistics MIB.')
ciscoWanAtmConnStatMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 2, 3, 1, 3)).setObjects(("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsGroup1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwaConnStatsGroup"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanAtmConnStatMIBCompliance3 = ciscoWanAtmConnStatMIBCompliance3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoWanAtmConnStatMIBCompliance3.setDescription('The compliance statement for the Cisco statistics MIB.')
ciscoWanAtmConnStatMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 2, 3, 1, 4)).setObjects(("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsGroup1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwaConnStatsGroup"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCGroup"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsAal2Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanAtmConnStatMIBCompliance4 = ciscoWanAtmConnStatMIBCompliance4.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoWanAtmConnStatMIBCompliance4.setDescription('The compliance statement for the Cisco statistics MIB.')
ciscoWanAtmConnStatMIBCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 2, 3, 1, 5)).setObjects(("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsGroup1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwaConnStatsGroup"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCGroup"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsAal2GroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanAtmConnStatMIBCompliance5 = ciscoWanAtmConnStatMIBCompliance5.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoWanAtmConnStatMIBCompliance5.setDescription('The compliance statement for the Cisco statistics MIB.')
ciscoWanAtmConnStatMIBCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 2, 3, 1, 6)).setObjects(("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsGroup1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwaConnStatsGroup"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCGroup"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsAal2GroupRev1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsBearerPVCGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanAtmConnStatMIBCompliance6 = ciscoWanAtmConnStatMIBCompliance6.setStatus('current')
if mibBuilder.loadTexts: ciscoWanAtmConnStatMIBCompliance6.setDescription('The compliance statement for the Cisco statistics MIB.')
cwacsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 2, 3, 2, 1)).setObjects(("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngRcvCLP0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngRcvCLP1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngXmtCLP0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngXmtCLP1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngCLP0CoSDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngCLP1CoSDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngCLP0UpcDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngCLP1UpcDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngCLP0UpcTagged"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngRcvEFCI0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngRcvEFCI1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngEFCI0Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngEFCI1Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngRcvOAM"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngOAMDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngRcvRM"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngRMDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngXmtFRm"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngXmtBRmFsRm"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngRcvEOF1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngEOF1Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngACR"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngVCQueueDepth"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrRcvCLP0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrRcvCLP1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrXmtCLP0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrXmtCLP1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrCLP0CoSDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrCLP1CoSDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrRcvEFCI0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrRcvEFCI1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrEFCI0Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrEFCI1Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrRcvOAM"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrOAMDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrRcvRM"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrRMDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrXmtFRm"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrXmtBRmFsRm"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrRcvEOF1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrEOF1Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrACR"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrVCQueueDepth"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsStatsClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwacsGroup = cwacsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cwacsGroup.setDescription('These are the objects which provide traffic statistic information related to an ATM Channel.')
cwaConnStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 2, 3, 2, 2)).setObjects(("CISCO-WAN-ATM-CONN-STAT-MIB", "cwaConnStatsIngRcv"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwaConnStatsIngCLP0Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwaConnStatsIngCLP1Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwaConnStatsIngTotalDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwaConnStatsEgrXmt"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwaConnStatsEgrCLP0Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwaConnStatsEgrCLP1Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwaConnStatsEgrTotalDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwaConnStatsClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwaConnStatsGroup = cwaConnStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cwaConnStatsGroup.setDescription('These are the objects which provide traffic statistic information related to an ATM Channel.')
cwacsGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 2, 3, 2, 3)).setObjects(("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngRcvCLP0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngRcvCLP1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngXmtCLP0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngXmtCLP1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngCLP0CoSDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngCLP1CoSDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngCLP0UpcDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngCLP1UpcDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngCLP0UpcTagged"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngRcvEFCI0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngRcvEFCI1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngEFCI0Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngEFCI1Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngRcvOAM"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngOAMDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngRcvRM"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngRMDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngXmtFRm"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngXmtBRmFsRm"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngRcvEOF1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngEOF1Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngACR"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngVCQueueDepth"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrRcvCLP0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrRcvCLP1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrXmtCLP0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrXmtCLP1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrCLP0CoSDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrCLP1CoSDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrRcvEFCI0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrRcvEFCI1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrEFCI0Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrEFCI1Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrRcvOAM"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrOAMDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrRcvRM"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrRMDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrXmtFRm"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrXmtBRmFsRm"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrRcvEOF1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrEOF1Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrACR"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrVCQueueDepth"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsStatsClear"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighIngRcvCLP0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighIngRcvCLP1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighIngXmtCLP0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighIngXmtCLP1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighIngCLP0CoSDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighIngCLP1CoSDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighIngCLP0UpcDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighIngCLP1UpcDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighIngCLP0UpcTagged"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighIngRcvEFCI0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighIngRcvEFCI1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighIngEFCI0Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighIngEFCI1Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighIngRcvEOF1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighIngEOF1Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighEgrRcvCLP0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighEgrRcvCLP1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighEgrXmtCLP0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighEgrXmtCLP1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighEgrCLP0CoSDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighEgrCLP1CoSDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighEgrRcvEFCI0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighEgrRcvEFCI1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighEgrEFCI0Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighEgrEFCI1Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighEgrRcvEOF1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHighEgrEOF1Discard"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwacsGroup1 = cwacsGroup1.setStatus('current')
if mibBuilder.loadTexts: cwacsGroup1.setDescription('These are the objects, which provide traffic statistic information related to an ATM Channel.')
cwacsHCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 2, 3, 2, 4)).setObjects(("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCIngRcvCLP0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCIngRcvCLP1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCIngXmtCLP0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCIngXmtCLP1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCIngCLP0CoSDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCIngCLP1CoSDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCIngCLP0UpcDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCIngCLP1UpcDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCIngCLP0UpcTagged"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCIngRcvEFCI0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCIngRcvEFCI1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCIngEFCI0Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCIngEFCI1Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCIngRcvEOF1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCIngEOF1Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCEgrRcvCLP0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCEgrRcvCLP1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCEgrXmtCLP0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCEgrXmtCLP1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCEgrCLP0CoSDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCEgrCLP1CoSDiscard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCEgrRcvEFCI0"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCEgrRcvEFCI1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCEgrEFCI0Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCEgrEFCI1Discard"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCEgrRcvEOF1"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsHCEgrEOF1Discard"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwacsHCGroup = cwacsHCGroup.setStatus('current')
if mibBuilder.loadTexts: cwacsHCGroup.setDescription('These are the objects, which provide traffic statistic information related to an ATM Channel. These are the 64-bit versions of these statistics.')
cwacsAal2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 2, 3, 2, 5)).setObjects(("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrAal2HecErrors"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrAal2InvalidOsfCells"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrAal2InvalidParCells"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsAal2CpsSentPkts"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsAal2CpsRcvdPkts"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrAal2CpsInvalidCidPkts"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsCacPassedCalls"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsCacRejectedCalls"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngXmtOAM"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsUsedConns"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsUtilizedCR"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsUsedVadConns"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwacsAal2Group = cwacsAal2Group.setStatus('deprecated')
if mibBuilder.loadTexts: cwacsAal2Group.setDescription('These are objects provide statistic information of ATM connection related to voice gateway. This group has been replaced by cwacsAal2GroupRev1.')
cwacsAal2GroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 2, 3, 2, 6)).setObjects(("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrAal2HecErrors"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrAal2InvalidOsfCells"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrAal2InvalidParCells"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsAal2CpsSentPkts"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsAal2CpsRcvdPkts"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsEgrAal2CpsInvalidCidPkts"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsCacPassedCalls"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsCacRejectedCalls"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsIngXmtOAM"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsUsedConns"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsUtilizedCR"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsUsedVadConns"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsTotalCR"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsAisSuppressCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwacsAal2GroupRev1 = cwacsAal2GroupRev1.setStatus('current')
if mibBuilder.loadTexts: cwacsAal2GroupRev1.setDescription('These are objects provide statistic information of ATM connection related to voice gateway.')
cwacsBearerPVCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 2, 3, 2, 7)).setObjects(("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsAvailableBearerPVCBWMin"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsAvailableBearerPVCBWMax"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsAvailableBearerPVCBWAvg"), ("CISCO-WAN-ATM-CONN-STAT-MIB", "cwacsBearerPVCSinceLastReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwacsBearerPVCGroup = cwacsBearerPVCGroup.setStatus('current')
if mibBuilder.loadTexts: cwacsBearerPVCGroup.setDescription('These are objects provide Bearer PVC statistic information related to voice gateway.')
mibBuilder.exportSymbols("CISCO-WAN-ATM-CONN-STAT-MIB", cwacsEgrXmtCLP1=cwacsEgrXmtCLP1, cwaConnStatsGroup=cwaConnStatsGroup, cwacsHCIngRcvCLP0=cwacsHCIngRcvCLP0, cwacsIngCLP1UpcDiscard=cwacsIngCLP1UpcDiscard, ciscoWanAtmConnStatMIBCompliances=ciscoWanAtmConnStatMIBCompliances, cwacsHCGroup=cwacsHCGroup, cwacsGroup1=cwacsGroup1, cwacsHCEgrRcvCLP0=cwacsHCEgrRcvCLP0, cwacsHCEgrEFCI0Discard=cwacsHCEgrEFCI0Discard, cwacsTotalCR=cwacsTotalCR, cwacsEgrRcvRM=cwacsEgrRcvRM, cwacsHighIngXmtCLP0=cwacsHighIngXmtCLP0, cwacsXEntry=cwacsXEntry, cwacsIngEFCI0Discard=cwacsIngEFCI0Discard, cwacsHighIngCLP0UpcDiscard=cwacsHighIngCLP0UpcDiscard, cwacsHCIngCLP1UpcDiscard=cwacsHCIngCLP1UpcDiscard, cwacsHighIngRcvEFCI1=cwacsHighIngRcvEFCI1, cwaConnStatsEgrTotalDiscard=cwaConnStatsEgrTotalDiscard, cwacsHighIngRcvCLP0=cwacsHighIngRcvCLP0, cwacsEgrXmtCLP0=cwacsEgrXmtCLP0, cwaConnStatsEgrCLP1Discard=cwaConnStatsEgrCLP1Discard, cwacsUsedConns=cwacsUsedConns, cwacsHCIngRcvCLP1=cwacsHCIngRcvCLP1, cwacsUtilizedCR=cwacsUtilizedCR, cwacsEgrEFCI0Discard=cwacsEgrEFCI0Discard, cwacsEgrRcvCLP1=cwacsEgrRcvCLP1, cwacsIngACR=cwacsIngACR, cwacsEgrRcvEFCI0=cwacsEgrRcvEFCI0, cwacsHighEgrRcvCLP0=cwacsHighEgrRcvCLP0, cwacsAal2CpsSentPkts=cwacsAal2CpsSentPkts, cwacsHCIngRcvEFCI0=cwacsHCIngRcvEFCI0, cwaConnStatsIngCLP0Discard=cwaConnStatsIngCLP0Discard, cwacsHighIngCLP1CoSDiscard=cwacsHighIngCLP1CoSDiscard, cwacsHCEgrRcvEFCI1=cwacsHCEgrRcvEFCI1, cwacsHCIngXmtCLP1=cwacsHCIngXmtCLP1, cwacsEgrVCQueueDepth=cwacsEgrVCQueueDepth, cwacsGroup=cwacsGroup, cwacsHighEgrRcvEOF1=cwacsHighEgrRcvEOF1, cwacsHighEgrRcvCLP1=cwacsHighEgrRcvCLP1, cwacsIngXmtCLP1=cwacsIngXmtCLP1, cwacsEgrRMDiscard=cwacsEgrRMDiscard, ciscoWanAtmConnStatMIBCompliance2=ciscoWanAtmConnStatMIBCompliance2, cwacsEgrRcvOAM=cwacsEgrRcvOAM, cwaConnStatsIngCLP1Discard=cwaConnStatsIngCLP1Discard, cwacsUsedVadConns=cwacsUsedVadConns, cwacsIngRcvEFCI1=cwacsIngRcvEFCI1, cwacsAvailableBearerPVCBWMin=cwacsAvailableBearerPVCBWMin, cwacsHighIngCLP1UpcDiscard=cwacsHighIngCLP1UpcDiscard, cwacsHCEgrRcvEOF1=cwacsHCEgrRcvEOF1, PYSNMP_MODULE_ID=ciscoWanAtmConnStatMIB, cwacsExtStatsTable=cwacsExtStatsTable, cwacsEgrAal2HecErrors=cwacsEgrAal2HecErrors, cwacsAvailableBearerPVCBWMax=cwacsAvailableBearerPVCBWMax, cwacsCacRejectedCalls=cwacsCacRejectedCalls, cwacsBearerPVCEntry=cwacsBearerPVCEntry, cwacsEgrACR=cwacsEgrACR, cwacsHighEgrEOF1Discard=cwacsHighEgrEOF1Discard, cwacsHighEgrEFCI0Discard=cwacsHighEgrEFCI0Discard, cwacsIngRcvCLP0=cwacsIngRcvCLP0, cwacsIngCLP0CoSDiscard=cwacsIngCLP0CoSDiscard, cwacsHighEgrCLP1CoSDiscard=cwacsHighEgrCLP1CoSDiscard, ciscoWanAtmConnStatMIBObjects=ciscoWanAtmConnStatMIBObjects, cwacsIngRcvEOF1=cwacsIngRcvEOF1, cwacsXTable=cwacsXTable, cwacsHCEgrEFCI1Discard=cwacsHCEgrEFCI1Discard, cwacsAisSuppressCount=cwacsAisSuppressCount, cwacsIngRcvRM=cwacsIngRcvRM, cwacsHCIngCLP0UpcTagged=cwacsHCIngCLP0UpcTagged, cwacsHighIngXmtCLP1=cwacsHighIngXmtCLP1, cwacsIngEFCI1Discard=cwacsIngEFCI1Discard, cwacsIngEOF1Discard=cwacsIngEOF1Discard, cwaConnStatsEntry=cwaConnStatsEntry, cwacsHighEgrCLP0CoSDiscard=cwacsHighEgrCLP0CoSDiscard, cwacsHighEgrXmtCLP0=cwacsHighEgrXmtCLP0, ciscoWanAtmConnStatMIBNotificationPrefix=ciscoWanAtmConnStatMIBNotificationPrefix, cwacsEgrAal2InvalidParCells=cwacsEgrAal2InvalidParCells, ciscoWanAtmConnStatMIBCompliance3=ciscoWanAtmConnStatMIBCompliance3, cwacsHCIngCLP0UpcDiscard=cwacsHCIngCLP0UpcDiscard, cwacsCacPassedCalls=cwacsCacPassedCalls, cwacsBearerPVCGroup=cwacsBearerPVCGroup, ciscoWanAtmConnStatMIBGroups=ciscoWanAtmConnStatMIBGroups, cwacsHCIngCLP0CoSDiscard=cwacsHCIngCLP0CoSDiscard, cwacsHCEgrEOF1Discard=cwacsHCEgrEOF1Discard, cwacsEgrAal2CpsInvalidCidPkts=cwacsEgrAal2CpsInvalidCidPkts, cwacsStatsClear=cwacsStatsClear, cwacsHighEgrRcvEFCI0=cwacsHighEgrRcvEFCI0, cwacsHCEgrCLP0CoSDiscard=cwacsHCEgrCLP0CoSDiscard, ciscoWanAtmConnStatMIBCompliance6=ciscoWanAtmConnStatMIBCompliance6, cwacsAal2GroupRev1=cwacsAal2GroupRev1, cwacsIngVCQueueDepth=cwacsIngVCQueueDepth, cwacsAvailableBearerPVCBWAvg=cwacsAvailableBearerPVCBWAvg, cwacsIngRcvCLP1=cwacsIngRcvCLP1, cwacsEgrRcvEOF1=cwacsEgrRcvEOF1, cwaConnStatsIngRcv=cwaConnStatsIngRcv, cwacsBearerPVCSinceLastReset=cwacsBearerPVCSinceLastReset, cwacsHCEgrXmtCLP1=cwacsHCEgrXmtCLP1, cwacsEgrCLP0CoSDiscard=cwacsEgrCLP0CoSDiscard, cwacsEgrXmtFRm=cwacsEgrXmtFRm, cwacsHCIngRcvEFCI1=cwacsHCIngRcvEFCI1, cwacsHCIngRcvEOF1=cwacsHCIngRcvEOF1, cwacsHighEgrXmtCLP1=cwacsHighEgrXmtCLP1, cwacsExtStatsEntry=cwacsExtStatsEntry, cwacsEgrCLP1CoSDiscard=cwacsEgrCLP1CoSDiscard, cwacsIngRcvOAM=cwacsIngRcvOAM, cwacsEgrXmtBRmFsRm=cwacsEgrXmtBRmFsRm, cwacsHighIngRcvCLP1=cwacsHighIngRcvCLP1, cwacsBearerPVCTable=cwacsBearerPVCTable, cwacsIngXmtBRmFsRm=cwacsIngXmtBRmFsRm, cwacsHighIngEFCI1Discard=cwacsHighIngEFCI1Discard, cwacsEgrRcvCLP0=cwacsEgrRcvCLP0, cwacs=cwacs, cwacsIngXmtOAM=cwacsIngXmtOAM, cwacsHighIngEFCI0Discard=cwacsHighIngEFCI0Discard, cwacsHCIngCLP1CoSDiscard=cwacsHCIngCLP1CoSDiscard, cwacsHighIngRcvEOF1=cwacsHighIngRcvEOF1, cwacsEgrEFCI1Discard=cwacsEgrEFCI1Discard, cwacsIngRcvEFCI0=cwacsIngRcvEFCI0, cwaConnStatsClear=cwaConnStatsClear, cwaConnStatsEgrCLP0Discard=cwaConnStatsEgrCLP0Discard, ciscoWanAtmConnStatMIBCompliance4=ciscoWanAtmConnStatMIBCompliance4, cwacsEgrEOF1Discard=cwacsEgrEOF1Discard, ciscoWanAtmConnStatMIBCompliance5=ciscoWanAtmConnStatMIBCompliance5, cwacsEgrOAMDiscard=cwacsEgrOAMDiscard, cwacsHighIngCLP0CoSDiscard=cwacsHighIngCLP0CoSDiscard, cwacsEgrAal2InvalidOsfCells=cwacsEgrAal2InvalidOsfCells, cwacsHCEgrRcvCLP1=cwacsHCEgrRcvCLP1, cwacsIngOAMDiscard=cwacsIngOAMDiscard, ciscoWanAtmConnStatMIBCompliance=ciscoWanAtmConnStatMIBCompliance, ciscoWanAtmConnStatMIB=ciscoWanAtmConnStatMIB, cwacsIngRMDiscard=cwacsIngRMDiscard, cwacsHighIngEOF1Discard=cwacsHighIngEOF1Discard, cwacsHCIngXmtCLP0=cwacsHCIngXmtCLP0, cwaConnStatsIngTotalDiscard=cwaConnStatsIngTotalDiscard, cwacsHighEgrRcvEFCI1=cwacsHighEgrRcvEFCI1, cwacsAal2CpsRcvdPkts=cwacsAal2CpsRcvdPkts, cwacsHighEgrEFCI1Discard=cwacsHighEgrEFCI1Discard, cwacsEntry=cwacsEntry, cwacsHCEgrRcvEFCI0=cwacsHCEgrRcvEFCI0, cwacsAal2Group=cwacsAal2Group, cwacsHCIngEOF1Discard=cwacsHCIngEOF1Discard, cwacsHCIngEFCI1Discard=cwacsHCIngEFCI1Discard, cwacsHCEgrXmtCLP0=cwacsHCEgrXmtCLP0, cwacsIngXmtCLP0=cwacsIngXmtCLP0, cwaConnStatsTable=cwaConnStatsTable, cwacsIngCLP0UpcTagged=cwacsIngCLP0UpcTagged, cwacsHCIngEFCI0Discard=cwacsHCIngEFCI0Discard, ciscoWanAtmConnStatMIBNotifications=ciscoWanAtmConnStatMIBNotifications, cwacsIngXmtFRm=cwacsIngXmtFRm, cwaConnStatsEgrXmt=cwaConnStatsEgrXmt, cwacsHCEgrCLP1CoSDiscard=cwacsHCEgrCLP1CoSDiscard, cwacsTable=cwacsTable, cwacsIngCLP1CoSDiscard=cwacsIngCLP1CoSDiscard, cwacsHighIngCLP0UpcTagged=cwacsHighIngCLP0UpcTagged, cwacsEgrRcvEFCI1=cwacsEgrRcvEFCI1, cwacsHighIngRcvEFCI0=cwacsHighIngRcvEFCI0, ciscoWanAtmConnStatMIBConformance=ciscoWanAtmConnStatMIBConformance, cwacsIngCLP0UpcDiscard=cwacsIngCLP0UpcDiscard)
