#
# PySNMP MIB module BIANCA-BRICK-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-QOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:38:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, ObjectIdentity, TimeTicks, Unsigned32, Gauge32, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, Counter64, ModuleIdentity, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "TimeTicks", "Unsigned32", "Gauge32", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "Counter64", "ModuleIdentity", "Bits", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
qos = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 27))
qosIfTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 27, 1), )
if mibBuilder.loadTexts: qosIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosIfTable.setDescription("The qosIfTable enables QoS policies on the interface specified by qosIfIndex (interface index). Creating entries: Entries are created by assigning a value to the qosIfIndex object. Deleting entries: Entries are removed by setting an entry's qosIfType object to 'delete'.")
qosIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 27, 1, 1), ).setIndexNames((0, "BIANCA-BRICK-QOS-MIB", "qosIfIndex"))
if mibBuilder.loadTexts: qosIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosIfEntry.setDescription('')
qosIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qosIfIndex.setDescription('Unique interface index')
qosIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 8, 9))).clone(namedValues=NamedValues(("pq", 1), ("wrr", 2), ("wfq", 3), ("disabled", 8), ("delete", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosIfType.setStatus('mandatory')
if mibBuilder.loadTexts: qosIfType.setDescription('This object defines the queueing and scheduling algorithm used on the related interface, possible values: pq(1) = priority queueing wrr(2) = weighted round-robin scheduling wfq(3) = weighted fair queuing scheduling disable(8) = disable this entry delete(9) = delete this entry.')
qosIfMaxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosIfMaxTxRate.setStatus('mandatory')
if mibBuilder.loadTexts: qosIfMaxTxRate.setDescription('This object enables traffic shaping on the related interface, if set to zero (0) there is no shaping active. Otherwise this variable defines the maximum amount of bits per second to be transmitted.')
qosIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 27, 2), )
if mibBuilder.loadTexts: qosIfStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosIfStatTable.setDescription('The qosIfStatTable contains statistical QoS-specific information for the interface specified by qosIfStatIndex (interface index). Only the system can add or delete entries to this table.')
qosIfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 27, 2, 1), ).setIndexNames((0, "BIANCA-BRICK-QOS-MIB", "qosIfStatIndex"))
if mibBuilder.loadTexts: qosIfStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosIfStatEntry.setDescription('')
qosIfStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfStatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qosIfStatIndex.setDescription('The unique interface index.')
qosIfStatOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfStatOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: qosIfStatOutPkts.setDescription("The number of packets transmitted on the related interface since its last change to the 'up' state.")
qosIfStatOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfStatOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: qosIfStatOutOctets.setDescription("The number of octets transmitted on the related interface since its last change to the 'up' state.")
qosIfStatPktsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfStatPktsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: qosIfStatPktsQueued.setDescription('The number of data packets enqueued and waiting to be sent across the related interface.')
qosIfStatOctetsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfStatOctetsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: qosIfStatOctetsQueued.setDescription('The amount of data (in octets) enqueued waiting to be sent across the related interface.')
qosIfStatPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfStatPktsDropped.setStatus('mandatory')
if mibBuilder.loadTexts: qosIfStatPktsDropped.setDescription('The number of data packets dropped during congestion.')
qosIfStatOctetsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfStatOctetsDropped.setStatus('mandatory')
if mibBuilder.loadTexts: qosIfStatOctetsDropped.setDescription('The representation of qosIfStatPktsDropped in octets.')
qosPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 27, 3), )
if mibBuilder.loadTexts: qosPolicyTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyTable.setDescription("The qosPolicyTable enables QoS policies for the packet class specified by qosPolicyIfIndex (interface index), qosPolicyType and qosPolicyClassId. Creating entries: Entries are created by assigning a value to the qosPolicyIfIndex object. Deleting entries: Entries are removed by setting an entry's qosPolicyType object to 'delete'.")
qosPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1), ).setIndexNames((0, "BIANCA-BRICK-QOS-MIB", "qosPolicyIfIndex"))
if mibBuilder.loadTexts: qosPolicyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyEntry.setDescription('')
qosPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyIfIndex.setDescription('The unique interface index')
qosPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("class-based", 1), ("high-priority", 2), ("default", 3), ("delete", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyType.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyType.setDescription('This objects defines in conjunction with ipQoSClassId and qosPolicyClassId the related type of packet classes for this QoS policy, possible values: class-based(1) = policy for non-high-priority packets high-priority(2) = policy for high-priority packets default(3) = policy for packets not matching otherwise.')
qosPolicyClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyClassId.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyClassId.setDescription('Defines in conjunction with ipQoSClassId and qosPolicyType the QoS policy to be applied on the classified IP traffic.')
qosPolicyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyPriority.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyPriority.setDescription('The relative priority for this packet class to be used for the packet scheduling as described via qosIfType.')
qosPolicyWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyWeight.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyWeight.setDescription('The relative weight for this packet class to be used for the packet scheduling as described via qosIfType.')
qosPolicyShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("token-bucket", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyShaper.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyShaper.setDescription('This objects describes the traffic-shaping algorithm to be used in order to limit the bandwidth for the related packet class, possible values: none(1) = no shaping defined token-bucket(2) = token-bucket traffic shaper.')
qosPolicyCongestionAvoidance = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("weighted-random", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyCongestionAvoidance.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyCongestionAvoidance.setDescription('This objects defines a packet dropping algorithm to use if more than qosPolicyLowerThreshold octets are enqueued.')
qosPolicyDropAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tail-drop", 1), ("head-drop", 2), ("random-drop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyDropAlgorithm.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyDropAlgorithm.setDescription('This objects defines the packet dropping algorithm to apply if more than qosPolicyUpperThreshold octets are currently enqueued, possible values: tail-drop(1) = drop all newly arriving packets head-drop(2) = drop packets at the queue head enqueue newly arriving packets random-drop(3) = drop arriving or enqueued packets randomly.')
qosPolicyTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyTxRate.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyTxRate.setDescription('This object enables bandwidth limitation for the related class, if set to zero (0) there is no limitation policy. Otherwise this variable defines the maximum amount of bits per second to be send.')
qosPolicyTxRateLimitation = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-bounded", 1), ("bounded", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyTxRateLimitation.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyTxRateLimitation.setDescription('This objects determines the policy for the related class if the transmission rate limit defined by qosPolicyTxRate is reached. When set to not-bounded(1) allocation of remaining bandwidth not consumed by other classes is allowed. When set to bounded(2), qosPolicyTxRate is strict limitation for the long-term bandwidth consumption.')
qosPolicyTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyTxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyTxBurstSize.setDescription('The maximum number of octets in a single transmission burst.')
qosPolicyLowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262143))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyLowerThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyLowerThreshold.setDescription('This variable defines the lower or minimum queue depth threshold for packet dropping algorithm used for congestion avoidance (see qosPolicyCongestionAvoidance).')
qosPolicyUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262143))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyUpperThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyUpperThreshold.setDescription('This variable defines the upper or maximum queue depth threshold at which - depending on qosPolicyDropAlgorithm - all newly arriving or packets enqueued former will be dropped.')
qosPolicyStatTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 27, 4), )
if mibBuilder.loadTexts: qosPolicyStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyStatTable.setDescription('The qosPolicyStatTable contains statistical QoS-specific information for the policy specified by qosPolicyStatIfIndex (interface index), qosPolicyStatType and qosPolicyStatClassId. Only the system can add or delete entries to this table.')
qosPolicyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 27, 4, 1), ).setIndexNames((0, "BIANCA-BRICK-QOS-MIB", "qosPolicyStatIfIndex"))
if mibBuilder.loadTexts: qosPolicyStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyStatEntry.setDescription('')
qosPolicyStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyStatIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyStatIfIndex.setDescription('The unique interface index')
qosPolicyStatType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("class-based", 1), ("high-priority", 2), ("default", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyStatType.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyStatType.setDescription('The related type of packet classes for this QoS policy (see qosPolicyType for further explanation).')
qosPolicyStatClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyStatClassId.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyStatClassId.setDescription('Unique packet class ID')
qosPolicyStatOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyStatOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyStatOutPkts.setDescription('The number of packets sent belonging to the related packet class.')
qosPolicyStatOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyStatOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyStatOutOctets.setDescription('The representation of qosPolicyStatOutPkts in octets.')
qosPolicyStatPktsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyStatPktsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyStatPktsQueued.setDescription('The number of data packets of the related class enqueued and waiting to be sent.')
qosPolicyStatOctetsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyStatOctetsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyStatOctetsQueued.setDescription('The representation of qosPolicyStatPktsQueued in octets.')
qosPolicyStatPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyStatPktsDropped.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyStatPktsDropped.setDescription('The number of data packets of the related class dropped during congestion.')
qosPolicyStatOctetsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyStatOctetsDropped.setStatus('mandatory')
if mibBuilder.loadTexts: qosPolicyStatOctetsDropped.setDescription('The representation of qosPolicyStatPktsDropped in octets')
mibBuilder.exportSymbols("BIANCA-BRICK-QOS-MIB", qosPolicyTable=qosPolicyTable, qosPolicyStatClassId=qosPolicyStatClassId, qosPolicyStatPktsQueued=qosPolicyStatPktsQueued, qosPolicyUpperThreshold=qosPolicyUpperThreshold, qosPolicyTxRateLimitation=qosPolicyTxRateLimitation, qosPolicyStatIfIndex=qosPolicyStatIfIndex, qosPolicyEntry=qosPolicyEntry, private=private, qosPolicyStatTable=qosPolicyStatTable, qosIfStatTable=qosIfStatTable, qosPolicyType=qosPolicyType, qosIfStatEntry=qosIfStatEntry, qosPolicyTxRate=qosPolicyTxRate, enterprises=enterprises, qosPolicyStatPktsDropped=qosPolicyStatPktsDropped, qosIfStatOctetsQueued=qosIfStatOctetsQueued, qosPolicyIfIndex=qosPolicyIfIndex, qosPolicyStatOutPkts=qosPolicyStatOutPkts, qosIfIndex=qosIfIndex, qosPolicyDropAlgorithm=qosPolicyDropAlgorithm, qosPolicyStatOctetsDropped=qosPolicyStatOctetsDropped, qosPolicyWeight=qosPolicyWeight, qosPolicyCongestionAvoidance=qosPolicyCongestionAvoidance, qosPolicyTxBurstSize=qosPolicyTxBurstSize, qosIfStatOutPkts=qosIfStatOutPkts, bibo=bibo, qosIfStatIndex=qosIfStatIndex, qosPolicyShaper=qosPolicyShaper, qosIfEntry=qosIfEntry, qosIfStatOctetsDropped=qosIfStatOctetsDropped, qosPolicyStatOctetsQueued=qosPolicyStatOctetsQueued, qosIfTable=qosIfTable, bintec=bintec, qosPolicyClassId=qosPolicyClassId, qosPolicyStatEntry=qosPolicyStatEntry, org=org, qos=qos, qosIfMaxTxRate=qosIfMaxTxRate, qosPolicyPriority=qosPolicyPriority, qosIfType=qosIfType, dod=dod, qosIfStatOutOctets=qosIfStatOutOctets, qosPolicyLowerThreshold=qosPolicyLowerThreshold, qosIfStatPktsDropped=qosIfStatPktsDropped, qosPolicyStatOutOctets=qosPolicyStatOutOctets, qosIfStatPktsQueued=qosIfStatPktsQueued, qosPolicyStatType=qosPolicyStatType, internet=internet)
