#
# PySNMP MIB module SCCRAID7-PROXY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SCCRAID7-PROXY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:01:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
raid7proxy, = mibBuilder.importSymbols("SCC-ENTERPRISE-MIB", "raid7proxy")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Bits, Counter64, NotificationType, MibIdentifier, ModuleIdentity, ObjectIdentity, Counter32, Integer32, iso, Gauge32, NotificationType, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "Counter64", "NotificationType", "MibIdentifier", "ModuleIdentity", "ObjectIdentity", "Counter32", "Integer32", "iso", "Gauge32", "NotificationType", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
raid7Agent = MibIdentifier((1, 3, 6, 1, 4, 1, 1386, 2, 2, 1))
raid7Link = MibIdentifier((1, 3, 6, 1, 4, 1, 1386, 2, 2, 2))
raid7proxyMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7proxyMibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: raid7proxyMibVersion.setDescription('The version of this proxy MIB.')
raid7proxyAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7proxyAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: raid7proxyAgentVersion.setDescription('The version of the Proxy Agent software')
raid7CacheLifetime = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7CacheLifetime.setStatus('mandatory')
if mibBuilder.loadTexts: raid7CacheLifetime.setDescription('The time in seconds that the agent will treat a value from the RAID7 as valid. When this time is exceeded for any object, the value of that object will be considered invalid and will return GenError (NoSuchObject will be returned only for oids that are never valid).')
raid7CacheTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7CacheTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: raid7CacheTimeouts.setDescription('The number of times that an error has been returned for an SNMP operation because the raid7CacheLifetime has been exceeded for some object.')
raid7BadValues = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7BadValues.setStatus('mandatory')
if mibBuilder.loadTexts: raid7BadValues.setDescription('This counts the number of times that the agent has discarded a data value from the RAID7 because it was out of range. This may indicate a version incompatibility between the agent and the array, or a serial link problem.')
raid7LinkName = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7LinkName.setStatus('mandatory')
if mibBuilder.loadTexts: raid7LinkName.setDescription('The device name on the proxy agent platform for the link between the proxy agent and the RAID7.')
raid7LinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("operational", 1), ("openfailed", 2), ("quiet", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7LinkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: raid7LinkStatus.setDescription('This object indicates the status of the serial link to the RAID7: operational indicates that the device is open and frames are being received from the RAID7. openfailed indicates that there is a problem local to the agent that is preventing the agent process from opening; see the log file on the agent system. quiet indicates that the port was opened, but no data is being received from the RAID7.')
raid7LinkUp = NotificationType((1, 3, 6, 1, 4, 1, 1386, 2, 2) + (0,1)).setObjects(("SCCRAID7-PROXY-MIB", "raid7LinkName"), ("SCCRAID7-PROXY-MIB", "raid7LinkStatus"))
if mibBuilder.loadTexts: raid7LinkUp.setDescription('This trap is sent whenever the link becomes operational.')
raid7LinkDown = NotificationType((1, 3, 6, 1, 4, 1, 1386, 2, 2) + (0,2)).setObjects(("SCCRAID7-PROXY-MIB", "raid7LinkName"), ("SCCRAID7-PROXY-MIB", "raid7LinkStatus"))
if mibBuilder.loadTexts: raid7LinkDown.setDescription('This trap is sent whenever the link status changes from operational to quiet.')
raid7LinkInactivityTime = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 2, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7LinkInactivityTime.setStatus('mandatory')
if mibBuilder.loadTexts: raid7LinkInactivityTime.setDescription('The number of seconds allowed between characters received from the RAID7 before the raid7LinkStatus is changed to quiet.')
raid7LinkRcvBytes = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7LinkRcvBytes.setStatus('mandatory')
if mibBuilder.loadTexts: raid7LinkRcvBytes.setDescription('Number of bytes received from the RAID7; this includes those bytes later discarded due to errors, and counts both bytes of an escaped value sequence.')
raid7LinkXmtBytes = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7LinkXmtBytes.setStatus('mandatory')
if mibBuilder.loadTexts: raid7LinkXmtBytes.setDescription('Number of bytes sent to the RAID7; this counts both bytes of an escaped value sequence.')
raid7LinkRcvFrames = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7LinkRcvFrames.setStatus('mandatory')
if mibBuilder.loadTexts: raid7LinkRcvFrames.setDescription('Number of frames recognized from the RAID7; this includes those frames later discarded due to errors counted below.')
raid7LinkXmtFrames = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7LinkXmtFrames.setStatus('mandatory')
if mibBuilder.loadTexts: raid7LinkXmtFrames.setDescription('Number of framees sent to the RAID7.')
raid7LinkFramingErrors = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7LinkFramingErrors.setStatus('mandatory')
if mibBuilder.loadTexts: raid7LinkFramingErrors.setDescription('This counts frames from the RAID7 discarded by the agent because the length received did not match the message length field in the header.')
raid7LinkChecksumErrors = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7LinkChecksumErrors.setStatus('mandatory')
if mibBuilder.loadTexts: raid7LinkChecksumErrors.setDescription('This counts frames from the RAID7 discarded by the agent because the checksum was not correct.')
raid7LinkBadVersions = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 2, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7LinkBadVersions.setStatus('mandatory')
if mibBuilder.loadTexts: raid7LinkBadVersions.setDescription('This counts frames from the RAID7 discarded by the agent because the protocol version number in the header was not a version supported by the proxy software.')
raid7LinkBadIds = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 2, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7LinkBadIds.setStatus('mandatory')
if mibBuilder.loadTexts: raid7LinkBadIds.setDescription('This counts frames from the RAID7 discarded by the agent because the type/class/group header field was not a value supported by the proxy software.')
raid7LinkBadInstances = MibScalar((1, 3, 6, 1, 4, 1, 1386, 2, 2, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raid7LinkBadInstances.setStatus('mandatory')
if mibBuilder.loadTexts: raid7LinkBadInstances.setDescription('This counts frames from the RAID7 discarded by the agent because the instance header field was out of range.')
mibBuilder.exportSymbols("SCCRAID7-PROXY-MIB", raid7LinkBadIds=raid7LinkBadIds, raid7LinkChecksumErrors=raid7LinkChecksumErrors, raid7LinkDown=raid7LinkDown, raid7BadValues=raid7BadValues, raid7LinkRcvBytes=raid7LinkRcvBytes, raid7CacheTimeouts=raid7CacheTimeouts, raid7LinkXmtFrames=raid7LinkXmtFrames, raid7LinkBadInstances=raid7LinkBadInstances, raid7LinkUp=raid7LinkUp, raid7LinkStatus=raid7LinkStatus, raid7LinkName=raid7LinkName, raid7LinkFramingErrors=raid7LinkFramingErrors, raid7Agent=raid7Agent, raid7LinkBadVersions=raid7LinkBadVersions, raid7LinkRcvFrames=raid7LinkRcvFrames, raid7Link=raid7Link, raid7LinkXmtBytes=raid7LinkXmtBytes, raid7LinkInactivityTime=raid7LinkInactivityTime, raid7proxyMibVersion=raid7proxyMibVersion, raid7CacheLifetime=raid7CacheLifetime, raid7proxyAgentVersion=raid7proxyAgentVersion)
