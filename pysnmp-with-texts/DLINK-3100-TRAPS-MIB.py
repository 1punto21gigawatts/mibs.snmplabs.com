#
# PySNMP MIB module DLINK-3100-TRAPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLINK-3100-TRAPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:49:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
rldot1dStpTrapVrblifIndex, rldot1dStpTrapVrblVID = mibBuilder.importSymbols("DLINK-3100-BRIDGEMIBOBJECTS-MIB", "rldot1dStpTrapVrblifIndex", "rldot1dStpTrapVrblVID")
rndErrorDesc, rndErrorSeverity = mibBuilder.importSymbols("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc", "rndErrorSeverity")
rndNotifications, = mibBuilder.importSymbols("DLINK-3100-MIB", "rndNotifications")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, iso, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, NotificationType, Counter32, ObjectIdentity, TimeTicks, Bits, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "NotificationType", "Counter32", "ObjectIdentity", "TimeTicks", "Bits", "Unsigned32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rxOverflowHWFault = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 3)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rxOverflowHWFault.setStatus('current')
if mibBuilder.loadTexts: rxOverflowHWFault.setDescription('An RX buffer overflow has occurred in one of the LAN or link interfaces. The bound variable rndErrorDesc provides the interface number.')
txOverflowHWFault = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 4)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: txOverflowHWFault.setStatus('current')
if mibBuilder.loadTexts: txOverflowHWFault.setDescription('Interport queue overflow has occurred in one of the LAN or link interfaces. The bound variable rndErrorDesc provides the interface number.')
routeTableOverflow = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 5)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: routeTableOverflow.setStatus('current')
if mibBuilder.loadTexts: routeTableOverflow.setDescription('An overflow condition has occurred in the Routing Table. The Routing Table is used for IP routing algorithm (RIP).')
resetRequired = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 10)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: resetRequired.setStatus('current')
if mibBuilder.loadTexts: resetRequired.setDescription('This trap indicates that in order to perform the last SET request, a reset operation of the router/bridge is required. This occurs when the layer 2 routing algorithm is changed between SPF and Spanning Tree. The reset can be performed manually or using the variable rndAction.')
endTftp = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 12)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: endTftp.setStatus('current')
if mibBuilder.loadTexts: endTftp.setDescription('This trap indicates that in the device finished a TFTP transaction with the management station. variable rndErrorDesc and rndErrorSeverity provides the actual message text and severity respectively.')
abortTftp = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 13)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: abortTftp.setStatus('current')
if mibBuilder.loadTexts: abortTftp.setDescription('This trap indicates that in the device aborted a TFTP session with the management station. Variable rndErrorDesc and rndErrorSeverity provides the actual message text and severity respectively.')
startTftp = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 14)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: startTftp.setStatus('current')
if mibBuilder.loadTexts: startTftp.setDescription('Informational trap indicating that the device has intiated a TFTP session. rndErrorDesc will contain the file type in question')
faultBackUp = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 23)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: faultBackUp.setStatus('current')
if mibBuilder.loadTexts: faultBackUp.setDescription('Automantic switchover to backup link because of main link fault.')
mainLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 24)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: mainLinkUp.setStatus('current')
if mibBuilder.loadTexts: mainLinkUp.setDescription('Communication returened to main link.')
ipxRipTblOverflow = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 36)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: ipxRipTblOverflow.setStatus('current')
if mibBuilder.loadTexts: ipxRipTblOverflow.setDescription('This trap indicates that in an OpenGate IPX RIP table overflow. The bound variable rndErrorDesc, rndErrorSeverity provides the actual message text and severity respectively.')
ipxSapTblOverflow = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 37)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: ipxSapTblOverflow.setStatus('current')
if mibBuilder.loadTexts: ipxSapTblOverflow.setDescription('This trap indicates that in an OpenGate IPX SAP table overflow. The bound variable rndErrorDesc, rndErrorSeverity provides the actual message text and severity respectively.')
facsAccessVoilation = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 49)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: facsAccessVoilation.setStatus('current')
if mibBuilder.loadTexts: facsAccessVoilation.setDescription('This trap indicates that message that fits FACS statenebt with operation blockAndReport was forward to the interface. The bound variable rndErrorDesc, rndErrorSeverity(== info ) and interface Number.')
autoConfigurationCompleted = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 50)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: autoConfigurationCompleted.setStatus('current')
if mibBuilder.loadTexts: autoConfigurationCompleted.setDescription('This trap indicates that auto comfiguration completetd succssefully. The bound variable rndErrorDesc, rndErrorSeverity(== info )')
forwardingTabOverflow = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 51)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: forwardingTabOverflow.setStatus('current')
if mibBuilder.loadTexts: forwardingTabOverflow.setDescription('This trap indicates that an overflow condition has occurred in the layer II Forward Table. The bound variable rndErrorDesc, rndErrorSeverity(== warning )')
framRelaySwitchConnectionUp = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 53)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: framRelaySwitchConnectionUp.setStatus('current')
if mibBuilder.loadTexts: framRelaySwitchConnectionUp.setDescription('This trap indicates that a connection establish between the Frame relay Switch and the WanGate. The bound variable rndErrorDesc, rndErrorSeverity(== warning )')
framRelaySwitchConnectionDown = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 54)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: framRelaySwitchConnectionDown.setStatus('current')
if mibBuilder.loadTexts: framRelaySwitchConnectionDown.setDescription('This trap indicates that a connection between the Frame Relay Switch and the WanGate failed. The bound variable rndErrorDesc, rndErrorSeverity(== warning )')
errorsDuringInit = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 61)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: errorsDuringInit.setStatus('current')
if mibBuilder.loadTexts: errorsDuringInit.setDescription('This trap indicates that the an error occured during initialization The bound variable rndErrorDesc, rndErrorSeverity(== error )')
vlanDynPortAdded = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 66)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: vlanDynPortAdded.setStatus('current')
if mibBuilder.loadTexts: vlanDynPortAdded.setDescription('')
vlanDynPortRemoved = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 67)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: vlanDynPortRemoved.setStatus('current')
if mibBuilder.loadTexts: vlanDynPortRemoved.setDescription('')
rsSDclientsTableOverflow = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 68)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rsSDclientsTableOverflow.setStatus('current')
if mibBuilder.loadTexts: rsSDclientsTableOverflow.setDescription('This warning is generated when an overflow occurs in the clients table.')
rsSDinactiveServer = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 69)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rsSDinactiveServer.setStatus('current')
if mibBuilder.loadTexts: rsSDinactiveServer.setDescription('This warning is generated when a server does not respond to the dispatchers polling and is thought to be inactive.')
rsIpZhrConnectionsTableOverflow = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 70)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rsIpZhrConnectionsTableOverflow.setStatus('current')
if mibBuilder.loadTexts: rsIpZhrConnectionsTableOverflow.setDescription('The Zero Hop Routing connections Table has been overflown.')
rsIpZhrReqStaticConnNotAccepted = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 71)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rsIpZhrReqStaticConnNotAccepted.setStatus('current')
if mibBuilder.loadTexts: rsIpZhrReqStaticConnNotAccepted.setDescription('The requested static connection was not accepted because there is no available IP virtual address to allocate to it.')
rsIpZhrVirtualIpAsSource = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 72)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rsIpZhrVirtualIpAsSource.setStatus('current')
if mibBuilder.loadTexts: rsIpZhrVirtualIpAsSource.setDescription('The virtual IP address appeared as a source IP. All the connections using it will be deleted and it will not be further allocated to new connections.')
rsIpZhrNotAllocVirtualIp = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 73)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rsIpZhrNotAllocVirtualIp.setStatus('current')
if mibBuilder.loadTexts: rsIpZhrNotAllocVirtualIp.setDescription('The source IP address sent an ARP specifying a virtual IP which was not allocated for this source. This virtual IP will not be allocated to connections of this specific source IP.')
rsSnmpSetRequestInSpecialCfgState = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 74)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rsSnmpSetRequestInSpecialCfgState.setStatus('current')
if mibBuilder.loadTexts: rsSnmpSetRequestInSpecialCfgState.setDescription('An incoming SNMP SET request was rejected because no such requests (except action requests) are accepted after start of new configuration reception or during sending the current configuration to an NMS.')
rsPingCompletion = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 136)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rsPingCompletion.setStatus('current')
if mibBuilder.loadTexts: rsPingCompletion.setDescription('A rsPingCompleted trap is sent at the completion of a sequence of pings if such a trap was requested when the sequence was initiated. The trap severity is info. The trap text will specify the following information: rsPingCompletionStatus, rsPingSentPackets, rsPingReceivedPackets In addition to the above listed objects (which are always present), the message will also specify the following quantities: if any responses were received: rsPingMinReturnTime rsPingAvgReturnTime rsPingMaxReturnTime')
pppSecurityViolation = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 137)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: pppSecurityViolation.setStatus('current')
if mibBuilder.loadTexts: pppSecurityViolation.setDescription('This trap indicates that a PPP link got an unrecognized secret. The bound variables rndErrorDesc, rndErrorSeverity(== warning ), interface Number. and pppSecurityIdentity')
frDLCIStatudChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 138)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: frDLCIStatudChange.setStatus('current')
if mibBuilder.loadTexts: frDLCIStatudChange.setDescription('')
papFailedCommunication = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 139)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: papFailedCommunication.setStatus('current')
if mibBuilder.loadTexts: papFailedCommunication.setDescription('')
chapFailedCommunication = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 140)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: chapFailedCommunication.setStatus('current')
if mibBuilder.loadTexts: chapFailedCommunication.setDescription('')
rsWSDRedundancySwitch = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 141)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rsWSDRedundancySwitch.setStatus('current')
if mibBuilder.loadTexts: rsWSDRedundancySwitch.setDescription('Whenever main server fails and backup takes over or server comes up after failure a trap of this type is issued.')
rsDhcpAllocationFailure = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 142)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rsDhcpAllocationFailure.setStatus('current')
if mibBuilder.loadTexts: rsDhcpAllocationFailure.setDescription('DHCP failed to allocate an IP address to a requesting host because of memory shortage or inadequate configuration of available IP addresses.')
rlIpFftStnOverflow = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 145)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlIpFftStnOverflow.setStatus('current')
if mibBuilder.loadTexts: rlIpFftStnOverflow.setDescription('The IP SFFT overflow.')
rlIpFftSubOverflow = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 146)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlIpFftSubOverflow.setStatus('current')
if mibBuilder.loadTexts: rlIpFftSubOverflow.setDescription('The IP NFFT overflow.')
rlIpxFftStnOverflow = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 147)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlIpxFftStnOverflow.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftStnOverflow.setDescription('The IPX SFFT overflow.')
rlIpxFftSubOverflow = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 148)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlIpxFftSubOverflow.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftSubOverflow.setDescription('The IPX NFFT overflow.')
rlIpmFftOverflow = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 149)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlIpmFftOverflow.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftOverflow.setDescription('The IPM FFT overflow.')
rlPhysicalDescriptionChanged = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 150)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlPhysicalDescriptionChanged.setStatus('current')
if mibBuilder.loadTexts: rlPhysicalDescriptionChanged.setDescription('Indicates that the physical decription of the device has changed')
rldot1dStpPortStateForwarding = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 151)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"), ("DLINK-3100-BRIDGEMIBOBJECTS-MIB", "rldot1dStpTrapVrblifIndex"), ("DLINK-3100-BRIDGEMIBOBJECTS-MIB", "rldot1dStpTrapVrblVID"))
if mibBuilder.loadTexts: rldot1dStpPortStateForwarding.setStatus('current')
if mibBuilder.loadTexts: rldot1dStpPortStateForwarding.setDescription('The trap is sent by a bridge when any of its configured ports transitions from the Learning state to the Forwarding state.')
rldot1dStpPortStateNotForwarding = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 152)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"), ("DLINK-3100-BRIDGEMIBOBJECTS-MIB", "rldot1dStpTrapVrblifIndex"), ("DLINK-3100-BRIDGEMIBOBJECTS-MIB", "rldot1dStpTrapVrblVID"))
if mibBuilder.loadTexts: rldot1dStpPortStateNotForwarding.setStatus('current')
if mibBuilder.loadTexts: rldot1dStpPortStateNotForwarding.setDescription('The trap is sent by a bridge when any of its configured ports transitions from the Forwarding state to the Blocking state.')
rlPolicyDropPacketTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 153)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlPolicyDropPacketTrap.setStatus('current')
if mibBuilder.loadTexts: rlPolicyDropPacketTrap.setDescription('Indicates that the packet drop due to the policy ')
rlPolicyForwardPacketTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 154)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlPolicyForwardPacketTrap.setStatus('current')
if mibBuilder.loadTexts: rlPolicyForwardPacketTrap.setDescription('Indicates that the packet has forward based on policy')
rlIgmpProxyTableOverflow = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 156)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlIgmpProxyTableOverflow.setStatus('current')
if mibBuilder.loadTexts: rlIgmpProxyTableOverflow.setDescription('An IGMP PROXY Table overflow.')
rlIgmpV1MsgReceived = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 157)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlIgmpV1MsgReceived.setStatus('current')
if mibBuilder.loadTexts: rlIgmpV1MsgReceived.setDescription('An IGMP Message of v1 received on ifIndex. ')
rlVrrpEntriesDeleted = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 158)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlVrrpEntriesDeleted.setStatus('current')
if mibBuilder.loadTexts: rlVrrpEntriesDeleted.setDescription('One or more VRRP entries deleted due to IP interface deletion or transition. ')
rlHotSwapTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 159)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlHotSwapTrap.setStatus('current')
if mibBuilder.loadTexts: rlHotSwapTrap.setDescription('Hot swap trap.')
rlTrunkPortAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 160)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlTrunkPortAddedTrap.setStatus('current')
if mibBuilder.loadTexts: rlTrunkPortAddedTrap.setDescription('Informational trap indicating that a port is added to a trunk')
rlTrunkPortRemovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 161)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlTrunkPortRemovedTrap.setStatus('current')
if mibBuilder.loadTexts: rlTrunkPortRemovedTrap.setDescription('This warning is generated when a port removed from a trunk.')
rlTrunkPortNotCapableTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 162)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlTrunkPortNotCapableTrap.setStatus('current')
if mibBuilder.loadTexts: rlTrunkPortNotCapableTrap.setDescription('Informational trap indicating that a port can not be added to a trunk because of device limitations or diffrent swIfType.')
rlLockPortTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 170)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlLockPortTrap.setStatus('current')
if mibBuilder.loadTexts: rlLockPortTrap.setDescription('Informational trap indicating that a locked port receive a frame with new source Mac Address.')
vlanDynVlanAdded = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 171)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: vlanDynVlanAdded.setStatus('current')
if mibBuilder.loadTexts: vlanDynVlanAdded.setDescription('add gvrp dynamic vlan')
vlanDynVlanRemoved = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 172)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: vlanDynVlanRemoved.setStatus('current')
if mibBuilder.loadTexts: vlanDynVlanRemoved.setDescription('remove gvrp dynamic vlan')
vlanDynamicToStatic = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 173)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: vlanDynamicToStatic.setStatus('current')
if mibBuilder.loadTexts: vlanDynamicToStatic.setDescription('vlan status was changed from dynamic to static')
vlanStaticToDynamic = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 174)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: vlanStaticToDynamic.setStatus('current')
if mibBuilder.loadTexts: vlanStaticToDynamic.setDescription('vlan status was changed from static to dynamic')
dstrSysLog = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 175)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: dstrSysLog.setStatus('current')
if mibBuilder.loadTexts: dstrSysLog.setDescription('Master receive trap from slave , and forward it as trap')
rlEnvMonFanStateChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 176)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlEnvMonFanStateChange.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonFanStateChange.setDescription('Trap indicating the fan state. rndErrorSeverity will be: 0 for fan state nomal, notPresent 1 for fan state warning, notFunctioning 2 for fan state critical 3 for fan state fatal The error text will specify the fan index, fan description and the exact fan state')
rlEnvMonPowerSupplyStateChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 177)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlEnvMonPowerSupplyStateChange.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonPowerSupplyStateChange.setDescription('Trap indicating the power supply state. rndErrorSeverity will be: 0 for power supply state nomal, notPresent 1 for power supply state warning, notFunctioning 2 for power supply state critical 3 for power supply state fatal The error text will specify the power supply index, power supply description and the exact power supply state')
rlStackStateChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 178)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlStackStateChange.setStatus('current')
if mibBuilder.loadTexts: rlStackStateChange.setDescription('Trap indicating the stack connection state 0 for stack state connected, 1 for stack state disconnected ')
rlEnvMonTemperatureRisingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 179)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlEnvMonTemperatureRisingAlarm.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonTemperatureRisingAlarm.setDescription('Trap indicating that the temperature in the device has exceeded the device specific safe temperature threshold.')
rlBrgMacAddFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 183)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlBrgMacAddFailedTrap.setStatus('current')
if mibBuilder.loadTexts: rlBrgMacAddFailedTrap.setDescription('Informational trap indicating that adding dynamic mac/s failed due to full hash chain.')
rldot1xPortStatusAuthorizedTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 184)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rldot1xPortStatusAuthorizedTrap.setStatus('current')
if mibBuilder.loadTexts: rldot1xPortStatusAuthorizedTrap.setDescription('Informational trap indicating that port 802.1x status is authorized.')
rldot1xPortStatusUnauthorizedTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 185)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rldot1xPortStatusUnauthorizedTrap.setStatus('current')
if mibBuilder.loadTexts: rldot1xPortStatusUnauthorizedTrap.setDescription('Warning trap is indicating that port 802.1x status is unAuthorized.')
swIfTablePortLock = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 192)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: swIfTablePortLock.setStatus('current')
if mibBuilder.loadTexts: swIfTablePortLock.setDescription('Warning trap is indicating port lock hase began.')
swIfTablePortUnLock = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 193)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: swIfTablePortUnLock.setStatus('current')
if mibBuilder.loadTexts: swIfTablePortUnLock.setDescription('Warning trap is indicating port lock has ended.')
rlAAAUserLocked = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 194)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlAAAUserLocked.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserLocked.setDescription('Warning trap indicating that the user was locked after number of consecutives unsuccessful login attempts.')
bpduGuardPortSuspended = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 202)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: bpduGuardPortSuspended.setStatus('current')
if mibBuilder.loadTexts: bpduGuardPortSuspended.setDescription('Warning trap indicating - Port was suspended because there was BPDU Guard violation.')
rldot1xSupplicantMacAuthorizedTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 203)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rldot1xSupplicantMacAuthorizedTrap.setStatus('current')
if mibBuilder.loadTexts: rldot1xSupplicantMacAuthorizedTrap.setDescription('Informational trap indicating that MAC authentication supplicant is authenticated and is allowed to access the network.')
rldot1xSupplicantMacUnauthorizedTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 204)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rldot1xSupplicantMacUnauthorizedTrap.setStatus('current')
if mibBuilder.loadTexts: rldot1xSupplicantMacUnauthorizedTrap.setDescription('Warning trap is indicating that Radius server rejects MAC authentication supplicant.')
stpLoopbackDetection = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 205)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: stpLoopbackDetection.setStatus('current')
if mibBuilder.loadTexts: stpLoopbackDetection.setDescription('Warning trap indicating - A loopback was detected on port.')
stpLoopbackDetectionResolved = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 206)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: stpLoopbackDetectionResolved.setStatus('current')
if mibBuilder.loadTexts: stpLoopbackDetectionResolved.setDescription('Warning trap indicating - A loopback detection resolved on port.')
loopbackDetectionPortSuspended = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 207)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: loopbackDetectionPortSuspended.setStatus('current')
if mibBuilder.loadTexts: loopbackDetectionPortSuspended.setDescription('Warning trap indicating - A port has been suspended by Loopback Detection.')
rlSwStormControlSuspend = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 213)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlSwStormControlSuspend.setStatus('current')
if mibBuilder.loadTexts: rlSwStormControlSuspend.setDescription('Warning trap indicating - Port was suspended because there was storm violation.')
mibBuilder.exportSymbols("DLINK-3100-TRAPS-MIB", framRelaySwitchConnectionDown=framRelaySwitchConnectionDown, rlIgmpProxyTableOverflow=rlIgmpProxyTableOverflow, rsWSDRedundancySwitch=rsWSDRedundancySwitch, rldot1xSupplicantMacUnauthorizedTrap=rldot1xSupplicantMacUnauthorizedTrap, rsSnmpSetRequestInSpecialCfgState=rsSnmpSetRequestInSpecialCfgState, frDLCIStatudChange=frDLCIStatudChange, rlIpxFftSubOverflow=rlIpxFftSubOverflow, rlVrrpEntriesDeleted=rlVrrpEntriesDeleted, facsAccessVoilation=facsAccessVoilation, rldot1dStpPortStateNotForwarding=rldot1dStpPortStateNotForwarding, autoConfigurationCompleted=autoConfigurationCompleted, rldot1xPortStatusUnauthorizedTrap=rldot1xPortStatusUnauthorizedTrap, framRelaySwitchConnectionUp=framRelaySwitchConnectionUp, rsIpZhrConnectionsTableOverflow=rsIpZhrConnectionsTableOverflow, rlHotSwapTrap=rlHotSwapTrap, rsSDinactiveServer=rsSDinactiveServer, papFailedCommunication=papFailedCommunication, rlIgmpV1MsgReceived=rlIgmpV1MsgReceived, rldot1dStpPortStateForwarding=rldot1dStpPortStateForwarding, routeTableOverflow=routeTableOverflow, rldot1xPortStatusAuthorizedTrap=rldot1xPortStatusAuthorizedTrap, stpLoopbackDetection=stpLoopbackDetection, rlIpFftSubOverflow=rlIpFftSubOverflow, mainLinkUp=mainLinkUp, ipxSapTblOverflow=ipxSapTblOverflow, rlTrunkPortAddedTrap=rlTrunkPortAddedTrap, vlanStaticToDynamic=vlanStaticToDynamic, rlEnvMonFanStateChange=rlEnvMonFanStateChange, pppSecurityViolation=pppSecurityViolation, loopbackDetectionPortSuspended=loopbackDetectionPortSuspended, faultBackUp=faultBackUp, chapFailedCommunication=chapFailedCommunication, vlanDynVlanRemoved=vlanDynVlanRemoved, abortTftp=abortTftp, rlIpmFftOverflow=rlIpmFftOverflow, bpduGuardPortSuspended=bpduGuardPortSuspended, rlEnvMonTemperatureRisingAlarm=rlEnvMonTemperatureRisingAlarm, ipxRipTblOverflow=ipxRipTblOverflow, rlBrgMacAddFailedTrap=rlBrgMacAddFailedTrap, rlEnvMonPowerSupplyStateChange=rlEnvMonPowerSupplyStateChange, forwardingTabOverflow=forwardingTabOverflow, rldot1xSupplicantMacAuthorizedTrap=rldot1xSupplicantMacAuthorizedTrap, rlSwStormControlSuspend=rlSwStormControlSuspend, vlanDynVlanAdded=vlanDynVlanAdded, rsDhcpAllocationFailure=rsDhcpAllocationFailure, rxOverflowHWFault=rxOverflowHWFault, rlIpxFftStnOverflow=rlIpxFftStnOverflow, vlanDynPortRemoved=vlanDynPortRemoved, vlanDynPortAdded=vlanDynPortAdded, rlPolicyForwardPacketTrap=rlPolicyForwardPacketTrap, rsIpZhrVirtualIpAsSource=rsIpZhrVirtualIpAsSource, resetRequired=resetRequired, txOverflowHWFault=txOverflowHWFault, rsPingCompletion=rsPingCompletion, swIfTablePortLock=swIfTablePortLock, rlAAAUserLocked=rlAAAUserLocked, errorsDuringInit=errorsDuringInit, rlLockPortTrap=rlLockPortTrap, endTftp=endTftp, rlPhysicalDescriptionChanged=rlPhysicalDescriptionChanged, rlTrunkPortNotCapableTrap=rlTrunkPortNotCapableTrap, swIfTablePortUnLock=swIfTablePortUnLock, stpLoopbackDetectionResolved=stpLoopbackDetectionResolved, rsIpZhrReqStaticConnNotAccepted=rsIpZhrReqStaticConnNotAccepted, startTftp=startTftp, rsSDclientsTableOverflow=rsSDclientsTableOverflow, rlIpFftStnOverflow=rlIpFftStnOverflow, vlanDynamicToStatic=vlanDynamicToStatic, dstrSysLog=dstrSysLog, rlStackStateChange=rlStackStateChange, rlTrunkPortRemovedTrap=rlTrunkPortRemovedTrap, rlPolicyDropPacketTrap=rlPolicyDropPacketTrap, rsIpZhrNotAllocVirtualIp=rsIpZhrNotAllocVirtualIp)
