#
# PySNMP MIB module BAS-RBP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-RBP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:34:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
BasLogicalPortId, basRbp, BasInterfaceId, BasSlotId, BasChassisId = mibBuilder.importSymbols("BAS-MIB", "BasLogicalPortId", "basRbp", "BasInterfaceId", "BasSlotId", "BasChassisId")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Bits, TimeTicks, Integer32, NotificationType, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, MibIdentifier, Counter32, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "TimeTicks", "Integer32", "NotificationType", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "MibIdentifier", "Counter32", "Counter64", "iso")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
basRbpMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1))
if mibBuilder.loadTexts: basRbpMib.setLastUpdated('9810071415Z')
if mibBuilder.loadTexts: basRbpMib.setOrganization('Broadband Access Systems')
if mibBuilder.loadTexts: basRbpMib.setContactInfo(' Tech Support Broadband Access Systems 201 Forest Street Marlboro, MA 01752 U.S.A. 508-485-8200 support@basystems.com')
if mibBuilder.loadTexts: basRbpMib.setDescription('This MIB module defines the configuration MIB objects for a Broadband Access System Reliable Broadcast Protocol.')
basRbpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1))
basRbpTargetTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 1), )
if mibBuilder.loadTexts: basRbpTargetTable.setStatus('current')
if mibBuilder.loadTexts: basRbpTargetTable.setDescription('RBP target list MIB. List of slots that registered to accept RBP broadcasts.')
basRbpTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 1, 1), ).setIndexNames((0, "BAS-RBP-MIB", "basRbpChassis"), (0, "BAS-RBP-MIB", "basRbpSlot"), (0, "BAS-RBP-MIB", "basRbpIf"), (0, "BAS-RBP-MIB", "basRbpLPort"), (0, "BAS-RBP-MIB", "basRbpTargetChassis"), (0, "BAS-RBP-MIB", "basRbpTargetSlot"), (0, "BAS-RBP-MIB", "basRbpTargetIf"), (0, "BAS-RBP-MIB", "basRbpTargetLPort"))
if mibBuilder.loadTexts: basRbpTargetEntry.setStatus('current')
if mibBuilder.loadTexts: basRbpTargetEntry.setDescription('Slot receiving RBP broadcasts.')
basRbpChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 1, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basRbpChassis.setStatus('current')
if mibBuilder.loadTexts: basRbpChassis.setDescription('The BAS Chassis ID of the RBP host.')
basRbpSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 1, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basRbpSlot.setStatus('current')
if mibBuilder.loadTexts: basRbpSlot.setDescription('The BAS Slot ID of the RBP host.')
basRbpIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 1, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basRbpIf.setStatus('current')
if mibBuilder.loadTexts: basRbpIf.setDescription('The BAS interface ID of the RBP host.')
basRbpLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 1, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basRbpLPort.setStatus('current')
if mibBuilder.loadTexts: basRbpLPort.setDescription('The BAS logical port ID of the RBP host.')
basRbpTargetChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 1, 1, 5), BasChassisId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basRbpTargetChassis.setStatus('current')
if mibBuilder.loadTexts: basRbpTargetChassis.setDescription('The BAS Chassis ID of the target receiving RBP.')
basRbpTargetSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 1, 1, 6), BasSlotId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basRbpTargetSlot.setStatus('current')
if mibBuilder.loadTexts: basRbpTargetSlot.setDescription('The BAS Slot ID of the target receiving RBP.')
basRbpTargetIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 1, 1, 7), BasInterfaceId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basRbpTargetIf.setStatus('current')
if mibBuilder.loadTexts: basRbpTargetIf.setDescription('The BAS interface ID of the target receiving RBP.')
basRbpTargetLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 1, 1, 8), BasLogicalPortId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basRbpTargetLPort.setStatus('current')
if mibBuilder.loadTexts: basRbpTargetLPort.setDescription('The BAS logical port ID of the target receiving RBP.')
basRbpTargetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basRbpTargetStatus.setStatus('current')
if mibBuilder.loadTexts: basRbpTargetStatus.setDescription('The row status object used to create and delete a conceptual row according to RowStatus conventions.')
basRbpAppTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 2), )
if mibBuilder.loadTexts: basRbpAppTable.setStatus('current')
if mibBuilder.loadTexts: basRbpAppTable.setDescription('Table of application using RBP.')
basRbpAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 2, 1), ).setIndexNames((0, "BAS-RBP-MIB", "basRbpAppChassis"), (0, "BAS-RBP-MIB", "basRbpAppSlot"), (0, "BAS-RBP-MIB", "basRbpAppIf"), (0, "BAS-RBP-MIB", "basRbpAppLPort"), (0, "BAS-RBP-MIB", "basRbpAppType"))
if mibBuilder.loadTexts: basRbpAppEntry.setStatus('current')
if mibBuilder.loadTexts: basRbpAppEntry.setDescription('Application using RBP.')
basRbpAppChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 2, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basRbpAppChassis.setStatus('current')
if mibBuilder.loadTexts: basRbpAppChassis.setDescription('The BAS Chassis ID of the RBP host.')
basRbpAppSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 2, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basRbpAppSlot.setStatus('current')
if mibBuilder.loadTexts: basRbpAppSlot.setDescription('The BAS Slot ID of the RBP host.')
basRbpAppIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 2, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basRbpAppIf.setStatus('current')
if mibBuilder.loadTexts: basRbpAppIf.setDescription('The BAS interface ID of the RBP host.')
basRbpAppLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 2, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basRbpAppLPort.setStatus('current')
if mibBuilder.loadTexts: basRbpAppLPort.setDescription('The BAS logical port ID of the RBP host.')
basRbpAppType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rbpFwdType", 1), ("rbpMcastType", 2), ("rbpGFilterType", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRbpAppType.setStatus('current')
if mibBuilder.loadTexts: basRbpAppType.setDescription('Application sending/receiving the RBP updates.')
basRbpAppBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("busy", 1), ("notBusy", 2))).clone('notBusy')).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRbpAppBusy.setStatus('current')
if mibBuilder.loadTexts: basRbpAppBusy.setDescription('Is RBP busy sending a request for this application ?')
basRbpAppBroadcastPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRbpAppBroadcastPktSent.setStatus('current')
if mibBuilder.loadTexts: basRbpAppBroadcastPktSent.setDescription('Broadcast RBPs sent for this application.')
basRbpAppPktRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRbpAppPktRcv.setStatus('current')
if mibBuilder.loadTexts: basRbpAppPktRcv.setDescription('Counter of packets that RBP received for this application.')
basRbpAppUnicastPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRbpAppUnicastPktSent.setStatus('current')
if mibBuilder.loadTexts: basRbpAppUnicastPktSent.setDescription('Counter of unicast packets RBP sent fro this application.')
basRbpAppAckRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRbpAppAckRcv.setStatus('current')
if mibBuilder.loadTexts: basRbpAppAckRcv.setDescription('Counter of acknowledgemenst RBP recieved for this application.')
basRbpAppAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRbpAppAckSent.setStatus('current')
if mibBuilder.loadTexts: basRbpAppAckSent.setDescription('Counter of acknowledgements sent for this application.')
basRbpAppRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRbpAppRetryCount.setStatus('current')
if mibBuilder.loadTexts: basRbpAppRetryCount.setDescription('Counter of retries for this application.')
basRbpAppRequestFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 6, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRbpAppRequestFailCount.setStatus('current')
if mibBuilder.loadTexts: basRbpAppRequestFailCount.setDescription('Counter of failed requests for this application.')
mibBuilder.exportSymbols("BAS-RBP-MIB", basRbpAppBusy=basRbpAppBusy, basRbpAppRequestFailCount=basRbpAppRequestFailCount, basRbpTargetStatus=basRbpTargetStatus, basRbpTargetIf=basRbpTargetIf, basRbpIf=basRbpIf, basRbpAppSlot=basRbpAppSlot, basRbpAppEntry=basRbpAppEntry, basRbpAppAckRcv=basRbpAppAckRcv, basRbpTargetChassis=basRbpTargetChassis, basRbpChassis=basRbpChassis, PYSNMP_MODULE_ID=basRbpMib, basRbpTargetTable=basRbpTargetTable, basRbpAppPktRcv=basRbpAppPktRcv, basRbpTargetLPort=basRbpTargetLPort, basRbpAppChassis=basRbpAppChassis, basRbpAppBroadcastPktSent=basRbpAppBroadcastPktSent, basRbpAppUnicastPktSent=basRbpAppUnicastPktSent, basRbpAppType=basRbpAppType, basRbpSlot=basRbpSlot, basRbpAppRetryCount=basRbpAppRetryCount, basRbpConfig=basRbpConfig, basRbpTargetEntry=basRbpTargetEntry, basRbpAppLPort=basRbpAppLPort, basRbpLPort=basRbpLPort, basRbpTargetSlot=basRbpTargetSlot, basRbpAppIf=basRbpAppIf, basRbpAppAckSent=basRbpAppAckSent, basRbpMib=basRbpMib, basRbpAppTable=basRbpAppTable)
