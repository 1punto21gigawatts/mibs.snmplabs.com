#
# PySNMP MIB module SVRCLU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SVRCLU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:12:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Gauge32, Unsigned32, enterprises, IpAddress, NotificationType, mgmt, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, ModuleIdentity, MibIdentifier, NotificationType, Counter64, ObjectIdentity, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "Unsigned32", "enterprises", "IpAddress", "NotificationType", "mgmt", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "ModuleIdentity", "MibIdentifier", "NotificationType", "Counter64", "ObjectIdentity", "iso", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dec = MibIdentifier((1, 3, 6, 1, 4, 1, 36))
ema = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2))
class ClusterType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 3601, 3602, 3603, 3604, 23200, 23201))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("digitalNT", 3), ("microsoftNT", 4), ("digitalUnixASE", 5), ("digitalUnixTCR", 6), ("openVMS", 7), ("compaqTruClusterAvailableServer", 3601), ("compaqTruClusterProductionServer", 3602), ("compaqTruClusterServer", 3603), ("compaqOpenVms", 3604), ("cpqclusterMSCS", 23200), ("compaqMSCS", 23201))

class ClusterStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("notInstalled", 3), ("notRunning", 4), ("initializing", 5), ("running", 6), ("suspended", 7), ("failed", 8))

class MemberStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("new", 3), ("normal", 4), ("removed", 5))

mib_extensions_1 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18)).setLabel("mib-extensions-1")
svrSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22))
svrCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4))
svrClu = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1))
svrCluObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1))
svrCluConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 2))
svrCluMibInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 1))
svrCluClusterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2))
svrCluMibMajorRev = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCluMibMajorRev.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluMibMajorRev.setDescription('Major revision of this MIB. Should equal 2.')
svrCluMibMinorRev = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCluMibMinorRev.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluMibMinorRev.setDescription('Minor Revision of the MIB. Should equal 0.')
svrCluSoftwareVendor = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCluSoftwareVendor.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluSoftwareVendor.setDescription('Cluster software vendor name.')
svrCluSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCluSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluSoftwareVersion.setDescription('Cluster software version.')
svrCluSoftwareStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 3), ClusterStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCluSoftwareStatus.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluSoftwareStatus.setDescription('Status of the cluster software: installed, running, failed, etc.')
svrCluClusterType = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 4), ClusterType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCluClusterType.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluClusterType.setDescription('Type of cluster which is running. Must use formula defined at ClusterType enumeration list.')
svrCluExtensionOID = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCluExtensionOID.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluExtensionOID.setDescription('The authoritative identification for the MIB that further instruments this specific cluster technology. If no such identifier exists, the value {0.0} should be returned.')
svrCluThisMember = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCluThisMember.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluThisMember.setDescription('Index into the member table (svrCluMemberTable) which corresponds to this node.')
svrCluClusterName = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCluClusterName.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluClusterName.setDescription('The name/alias for this cluster. This must be a unique name not equal to any of the member names or any network name')
svrCluClusterAddressTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 8), )
if mibBuilder.loadTexts: svrCluClusterAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluClusterAddressTable.setDescription('This table represents the cluster (aliases) IP addresses. ')
svrCluClusterAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 8, 1), ).setIndexNames((0, "SVRCLU-MIB", "svrCluClusterAddressIndex"))
if mibBuilder.loadTexts: svrCluClusterAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluClusterAddressEntry.setDescription('Cluster alias IP addresses')
svrCluClusterAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCluClusterAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluClusterAddressIndex.setDescription('The index for this address.')
svrCluClusterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCluClusterAddress.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluClusterAddress.setDescription('An IP address of this cluster alias.')
svrCluServiceName = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCluServiceName.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluServiceName.setDescription('Returns the service name of the cluster. Examples are MSCS, NCS, NHAS.')
svrCluMemberTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 11), )
if mibBuilder.loadTexts: svrCluMemberTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluMemberTable.setDescription('Table of cluster members.')
svrCluMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 11, 1), ).setIndexNames((0, "SVRCLU-MIB", "svrCluMemberIndex"))
if mibBuilder.loadTexts: svrCluMemberEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluMemberEntry.setDescription('An entry pertaining to one particular member node.')
svrCluMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCluMemberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluMemberIndex.setDescription("A unique index for the entry. Values of svrCluMemberIndex must remain constant at least between reboots of the network management system on the managed node. Where possible, this value should reflect the system's native member identifier.")
svrCluMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCluMemberName.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluMemberName.setDescription("The host name of this cluster member. A zero-length value means the member's host name is unknown. This name may not necessarily resolve to an address.")
svrCluMemberComment = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCluMemberComment.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluMemberComment.setDescription('Description of the node.')
svrCluMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 11, 1, 4), MemberStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCluMemberStatus.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluMemberStatus.setDescription('Status of this member: new, normal, removed, etc.')
svrCluMemberAddressTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 12), )
if mibBuilder.loadTexts: svrCluMemberAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluMemberAddressTable.setDescription("This table represents the managed nodes's knowledge of the IP addressed configured on the other cluster members. This provides a hint for reaching the other members, and a low-level mechanism for identifying members of the same cluster. Note that the managed node's addressing information is already available in ipAddrTable, so is not required to be present in this table")
svrCluMemberAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 12, 1), ).setIndexNames((0, "SVRCLU-MIB", "svrCluMemberIndex"), (0, "SVRCLU-MIB", "svrCluMemberAddressIndex"))
if mibBuilder.loadTexts: svrCluMemberAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluMemberAddressEntry.setDescription('A particular cluster member IP address')
svrCluMemberAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCluMemberAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluMemberAddressIndex.setDescription('The index for this address.')
svrCluMemberAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1, 1, 2, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCluMemberAddress.setStatus('mandatory')
if mibBuilder.loadTexts: svrCluMemberAddress.setDescription('An IP address of this cluster member. This address may not be reachable from nodes that are not configured into the cluster.')
svrCluMemberAdded = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1) + (0,100)).setObjects(("SVRCLU-MIB", "svrCluMemberIndex"), ("SVRCLU-MIB", "svrCluMemberName"))
if mibBuilder.loadTexts: svrCluMemberAdded.setDescription('Generated when a cluster member is added')
svrCluMemberDeleted = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 1) + (0,101)).setObjects(("SVRCLU-MIB", "svrCluMemberIndex"), ("SVRCLU-MIB", "svrCluMemberName"))
if mibBuilder.loadTexts: svrCluMemberDeleted.setDescription('Generated when a cluster member is deleted')
mibBuilder.exportSymbols("SVRCLU-MIB", ema=ema, svrCluClusterAddressTable=svrCluClusterAddressTable, svrCluSoftwareVendor=svrCluSoftwareVendor, svrClu=svrClu, svrCluMibMajorRev=svrCluMibMajorRev, svrCluMemberAdded=svrCluMemberAdded, ClusterStatus=ClusterStatus, svrCluMemberIndex=svrCluMemberIndex, svrCluExtensionOID=svrCluExtensionOID, svrCluMibMinorRev=svrCluMibMinorRev, svrCluMemberEntry=svrCluMemberEntry, svrCluMemberAddress=svrCluMemberAddress, svrCluClusterType=svrCluClusterType, svrCluSoftwareStatus=svrCluSoftwareStatus, svrCluMemberDeleted=svrCluMemberDeleted, MemberStatus=MemberStatus, mib_extensions_1=mib_extensions_1, svrCluClusterAddress=svrCluClusterAddress, svrCluServiceName=svrCluServiceName, svrCluMemberAddressTable=svrCluMemberAddressTable, svrCluster=svrCluster, ClusterType=ClusterType, svrCluClusterName=svrCluClusterName, svrCluThisMember=svrCluThisMember, svrCluClusterInfo=svrCluClusterInfo, svrCluMemberName=svrCluMemberName, svrCluClusterAddressEntry=svrCluClusterAddressEntry, svrCluMemberStatus=svrCluMemberStatus, svrCluConformance=svrCluConformance, svrCluMemberComment=svrCluMemberComment, svrCluClusterAddressIndex=svrCluClusterAddressIndex, svrCluMemberAddressEntry=svrCluMemberAddressEntry, svrCluObjects=svrCluObjects, svrSystem=svrSystem, dec=dec, svrCluSoftwareVersion=svrCluSoftwareVersion, svrCluMibInfo=svrCluMibInfo, svrCluMemberTable=svrCluMemberTable, svrCluMemberAddressIndex=svrCluMemberAddressIndex)
