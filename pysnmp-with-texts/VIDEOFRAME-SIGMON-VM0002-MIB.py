#
# PySNMP MIB module VIDEOFRAME-SIGMON-VM0002-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VIDEOFRAME-SIGMON-VM0002-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:34:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, Gauge32, MibIdentifier, ObjectIdentity, TimeTicks, IpAddress, Integer32, Counter32, iso, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "Gauge32", "MibIdentifier", "ObjectIdentity", "TimeTicks", "IpAddress", "Integer32", "Counter32", "iso", "Bits", "Unsigned32")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
vfBoxId, = mibBuilder.importSymbols("VIDEOFRAME-GENERIC-MIB", "vfBoxId")
vfMIBModules, = mibBuilder.importSymbols("VIDEOFRAME-REGISTRATIONS-MIB", "vfMIBModules")
vfProductsVF200Reg, vfSigmonFrameModuleTypes, vfFrameSlotNumber = mibBuilder.importSymbols("VIDEOFRAME-SIGMON-MIB", "vfProductsVF200Reg", "vfSigmonFrameModuleTypes", "vfFrameSlotNumber")
videoframeSigmonVm0002MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4596, 6, 1, 5))
videoframeSigmonVm0002MIB.setRevisions(('1901-08-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: videoframeSigmonVm0002MIB.setRevisionsDescriptions(('First release.',))
if mibBuilder.loadTexts: videoframeSigmonVm0002MIB.setLastUpdated('0108300000Z')
if mibBuilder.loadTexts: videoframeSigmonVm0002MIB.setOrganization('Videoframe Systems')
if mibBuilder.loadTexts: videoframeSigmonVm0002MIB.setContactInfo('Videoframe Systems P.O. Box 1991, Grass Valley, CA 95945, USA. +1 (530) 477-2000 http://www.videoframesystems.com')
if mibBuilder.loadTexts: videoframeSigmonVm0002MIB.setDescription('This MIB describes the device specific objects of the VM0002 Analog Video Monitoring module, and augments MIB-2, VF-GENERIC, and VF-SIGMON in the identification of this Videoframe Systems managed device. This module will be extended or modified as required. Videoframe Systems reserves the right to make changes in specification and other information contained in this document without prior notice. The reader should consult Videoframe Systems to determine whether any such changes have been made. In no event shall Videoframe Systems be liable for any incidental, indirect, special, or consequential damages whatsoever (including but not limited to lost profits) arising out of or related to this document or the information contained in it. Videoframe Systems grants vendors, end users, and other interested parties a non-exclusive license to use this specification in connection with the management of Videoframe Systems products. Copyright 2001 Videoframe, Inc.')
vfProductsVM0002Reg = ObjectIdentity((1, 3, 6, 1, 4, 1, 4596, 6, 2, 5, 2))
if mibBuilder.loadTexts: vfProductsVM0002Reg.setStatus('current')
if mibBuilder.loadTexts: vfProductsVM0002Reg.setDescription('Videoframe VM0002 Analog Video Monitoring Module.')
vm0002AnalogVideo = MibIdentifier((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2))
vm0002Table = MibTable((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 1), )
if mibBuilder.loadTexts: vm0002Table.setStatus('current')
if mibBuilder.loadTexts: vm0002Table.setDescription('Each row contains information about one VM0002 Analog Video module in the managed VF200 frame.')
vm0002Entry = MibTableRow((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 1, 1), ).setIndexNames((0, "VIDEOFRAME-SIGMON-MIB", "vfFrameSlotNumber"))
if mibBuilder.loadTexts: vm0002Entry.setStatus('current')
if mibBuilder.loadTexts: vm0002Entry.setDescription('An Analog Video module entry.')
vm0002SlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vm0002SlotNumber.setStatus('current')
if mibBuilder.loadTexts: vm0002SlotNumber.setDescription('The slot that this entry represents.')
vm0002Active = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vm0002Active.setStatus('current')
if mibBuilder.loadTexts: vm0002Active.setDescription('Indicates whether this entry is active (this module is in this slot).')
vm0002FirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vm0002FirmwareRev.setStatus('current')
if mibBuilder.loadTexts: vm0002FirmwareRev.setDescription('The revision level of the firmware on this module.')
vm0002Locate = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flash", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002Locate.setStatus('current')
if mibBuilder.loadTexts: vm0002Locate.setDescription('Controls the locate indicator on the module and indicates its current state. Set to flash (1) to cause the locate LED on the front of the module to begin flashing. Set to off to stop flashing.')
vm0002SignalTable = MibTable((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2), )
if mibBuilder.loadTexts: vm0002SignalTable.setStatus('current')
if mibBuilder.loadTexts: vm0002SignalTable.setDescription('Each row contains information about one channel of one VM0002 Analog Video module in the managed VF200 frame.')
vm0002SignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1), ).setIndexNames((0, "VIDEOFRAME-SIGMON-MIB", "vfFrameSlotNumber"), (0, "VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SignalNumber"))
if mibBuilder.loadTexts: vm0002SignalEntry.setStatus('current')
if mibBuilder.loadTexts: vm0002SignalEntry.setDescription('An Analog Video module channel entry.')
vm0002SignalSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vm0002SignalSlotNumber.setStatus('current')
if mibBuilder.loadTexts: vm0002SignalSlotNumber.setDescription('The frame slot number that this entry represents.')
vm0002SignalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vm0002SignalNumber.setStatus('current')
if mibBuilder.loadTexts: vm0002SignalNumber.setDescription('The channel within the module to which this signal is connected.')
vm0002SignalName = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002SignalName.setStatus('current')
if mibBuilder.loadTexts: vm0002SignalName.setDescription('The name of the signal connected to this channel.')
vm0002SignalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002SignalDescription.setStatus('current')
if mibBuilder.loadTexts: vm0002SignalDescription.setDescription('Descriptive identification of the signal connected to this channel.')
vm0002VSyncLossThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65075262))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002VSyncLossThreshold.setStatus('current')
if mibBuilder.loadTexts: vm0002VSyncLossThreshold.setDescription('Number of frames with VSync errors to tolerate within the VSyncLossPeriod before alarming for this channel.')
vm0002VSyncLossPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002VSyncLossPeriod.setStatus('current')
if mibBuilder.loadTexts: vm0002VSyncLossPeriod.setDescription('The period, in milliseconds, over which vertical sync errors are accumulated for this channel.')
vm0002VSyncLossAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("triggered", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vm0002VSyncLossAlarmState.setStatus('current')
if mibBuilder.loadTexts: vm0002VSyncLossAlarmState.setDescription('The current state of the vertical sync loss alarm for this channel.')
vm0002VSyncLossAlarmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("unacknowledged", 2), ("acknowledge", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002VSyncLossAlarmAck.setStatus('current')
if mibBuilder.loadTexts: vm0002VSyncLossAlarmAck.setDescription('Set to acknowledge (3) to acknowledge a triggered vertical sync loss alarm for this channel.')
vm0002VSyncLossTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002VSyncLossTrapEnable.setStatus('current')
if mibBuilder.loadTexts: vm0002VSyncLossTrapEnable.setDescription('Set to enabled (1) to enable the vertical sync loss alarm trap for this channel.')
vm0002HSyncLossThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65075262))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002HSyncLossThreshold.setStatus('current')
if mibBuilder.loadTexts: vm0002HSyncLossThreshold.setDescription('Number of frames with horizontal sync errors to tolerate within the HSyncLossPeriod before alarming for this channel.')
vm0002HSyncLossPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002HSyncLossPeriod.setStatus('current')
if mibBuilder.loadTexts: vm0002HSyncLossPeriod.setDescription('The period, in milliseconds, over which horizontal sync loss errors are accumulated for this channel.')
vm0002HSyncLossAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("triggered", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vm0002HSyncLossAlarmState.setStatus('current')
if mibBuilder.loadTexts: vm0002HSyncLossAlarmState.setDescription('The current state of the horizontal sync loss alarm for this channel.')
vm0002HSyncLossAlarmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("unacknowledged", 2), ("acknowledge", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002HSyncLossAlarmAck.setStatus('current')
if mibBuilder.loadTexts: vm0002HSyncLossAlarmAck.setDescription('Set to acknowledge (3) to acknowledge a triggered horizontal sync loss alarm for this channel.')
vm0002HSyncLossTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002HSyncLossTrapEnable.setStatus('current')
if mibBuilder.loadTexts: vm0002HSyncLossTrapEnable.setDescription('Set to enabled (1) to enable the horizontal sync loss alarm trap for this channel.')
vm0002PedestalHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002PedestalHighThreshold.setStatus('current')
if mibBuilder.loadTexts: vm0002PedestalHighThreshold.setDescription('Pedestal level above which to alarm for this channel, in units of 1/10th IRE.')
vm0002PedestalHighPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002PedestalHighPeriod.setStatus('current')
if mibBuilder.loadTexts: vm0002PedestalHighPeriod.setDescription('The period, in milliseconds, that the pedestal must remain above the threshold to alarm for this channel.')
vm0002MeasuredPedestal = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002MeasuredPedestal.setStatus('current')
if mibBuilder.loadTexts: vm0002MeasuredPedestal.setDescription('The current measured pedestal level on this channel, in units of 1/10th IRE.')
vm0002PedestalHighAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("triggered", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vm0002PedestalHighAlarmState.setStatus('current')
if mibBuilder.loadTexts: vm0002PedestalHighAlarmState.setDescription('The current state of the pedestal high alarm for this channel.')
vm0002PedestalHighAlarmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("unacknowledged", 2), ("acknowledge", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002PedestalHighAlarmAck.setStatus('current')
if mibBuilder.loadTexts: vm0002PedestalHighAlarmAck.setDescription('Set to acknowledge (3) to acknowledge a triggered pedestal high alarm for this channel.')
vm0002PedestalHighTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002PedestalHighTrapEnable.setStatus('current')
if mibBuilder.loadTexts: vm0002PedestalHighTrapEnable.setDescription('Set to enabled (1) to enable the pedestal high alarm trap for this channel.')
vm0002CurrentAplRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vm0002CurrentAplRaw.setStatus('current')
if mibBuilder.loadTexts: vm0002CurrentAplRaw.setDescription('The current average luminance value on this channel, as a raw 10-bit sample value.')
vm0002n100IRECalibrationSet = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("go", 2), ("notReady", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002n100IRECalibrationSet.setStatus('current')
if mibBuilder.loadTexts: vm0002n100IRECalibrationSet.setDescription("Set to 'go' (2) to set the value of the 100 IRE channel calibration to the current average luminance value on this channel.")
vm0002n100IRECalibrationValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vm0002n100IRECalibrationValue.setStatus('current')
if mibBuilder.loadTexts: vm0002n100IRECalibrationValue.setDescription('The current raw luminance value used as the 100 IRE reference on this channel.')
vm0002AplHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002AplHighThreshold.setStatus('current')
if mibBuilder.loadTexts: vm0002AplHighThreshold.setDescription('The high APL alarm threshold for this channel, in IRE.')
vm0002AplHighDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002AplHighDuration.setStatus('current')
if mibBuilder.loadTexts: vm0002AplHighDuration.setDescription('The high APL duration, in milliseconds, at which to alarm, for this channel.')
vm0002AplHighAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("triggered", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vm0002AplHighAlarmState.setStatus('current')
if mibBuilder.loadTexts: vm0002AplHighAlarmState.setDescription('The current state of the high APL alarm for this channel.')
vm0002AplHighAlarmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("unacknowledged", 2), ("acknowledge", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002AplHighAlarmAck.setStatus('current')
if mibBuilder.loadTexts: vm0002AplHighAlarmAck.setDescription('Set to acknowledge (3) to acknowledge a triggered high APL alarm for this channel.')
vm0002AplHighTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002AplHighTrapEnable.setStatus('current')
if mibBuilder.loadTexts: vm0002AplHighTrapEnable.setDescription('Set to enabled (1) to enable the high APL alarm trap for this channel.')
vm0002AplLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002AplLowThreshold.setStatus('current')
if mibBuilder.loadTexts: vm0002AplLowThreshold.setDescription('The low APL alarm threshold for this channel, in IRE.')
vm0002AplLowDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002AplLowDuration.setStatus('current')
if mibBuilder.loadTexts: vm0002AplLowDuration.setDescription('The low APL duration, in milliseconds, at which to alarm, for this channel.')
vm0002AplLowAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("triggered", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vm0002AplLowAlarmState.setStatus('current')
if mibBuilder.loadTexts: vm0002AplLowAlarmState.setDescription('The current state of the low APL alarm for this channel.')
vm0002AplLowAlarmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("unacknowledged", 2), ("acknowledge", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002AplLowAlarmAck.setStatus('current')
if mibBuilder.loadTexts: vm0002AplLowAlarmAck.setDescription('Set to acknowledge (3) to acknowledge a triggered low APL alarm for this channel.')
vm0002AplLowTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002AplLowTrapEnable.setStatus('current')
if mibBuilder.loadTexts: vm0002AplLowTrapEnable.setDescription('Set to enabled (1) to enable the low APL alarm trap for this channel.')
vm0002FrozenImageFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002FrozenImageFilter.setStatus('current')
if mibBuilder.loadTexts: vm0002FrozenImageFilter.setDescription('The algorithm to use for the frozen image alarm for this channel.')
vm0002MaxFrozenDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002MaxFrozenDuration.setStatus('current')
if mibBuilder.loadTexts: vm0002MaxFrozenDuration.setDescription('The frozen image duration, in milliseconds, at which to alarm, for this channel.')
vm0002FrozenAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("triggered", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vm0002FrozenAlarmState.setStatus('current')
if mibBuilder.loadTexts: vm0002FrozenAlarmState.setDescription('The current state of the frozen image alarm for this channel.')
vm0002FrozenAlarmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("unacknowledged", 2), ("acknowledge", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002FrozenAlarmAck.setStatus('current')
if mibBuilder.loadTexts: vm0002FrozenAlarmAck.setDescription('Set to acknowledge (3) to acknowledge a triggered frozen image alarm for this channel.')
vm0002FrozenTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002FrozenTrapEnable.setStatus('current')
if mibBuilder.loadTexts: vm0002FrozenTrapEnable.setDescription('Set to enabled (1) to enable the frozen image alarm trap for this channel.')
vm0002BurstPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vm0002BurstPresent.setStatus('current')
if mibBuilder.loadTexts: vm0002BurstPresent.setDescription('Indicates whether color burst is present on this channel.')
vm0002AnalogVideoEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 3))
vm0002AnalogVideoEventsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 3, 0))
analogVideoVSyncLossAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 3, 0, 1)).setObjects(("VIDEOFRAME-GENERIC-MIB", "vfBoxId"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SlotNumber"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SignalNumber"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SignalName"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SignalDescription"))
if mibBuilder.loadTexts: analogVideoVSyncLossAlarm.setStatus('current')
if mibBuilder.loadTexts: analogVideoVSyncLossAlarm.setDescription('An Analog Video vertical sync loss alarm was triggered.')
analogVideoHSyncLossAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 3, 0, 2)).setObjects(("VIDEOFRAME-GENERIC-MIB", "vfBoxId"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SlotNumber"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SignalNumber"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SignalName"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SignalDescription"))
if mibBuilder.loadTexts: analogVideoHSyncLossAlarm.setStatus('current')
if mibBuilder.loadTexts: analogVideoHSyncLossAlarm.setDescription('An Analog Video horizontal sync loss alarm was triggered.')
analogVideoPedestalHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 3, 0, 3)).setObjects(("VIDEOFRAME-GENERIC-MIB", "vfBoxId"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SlotNumber"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SignalNumber"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SignalName"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SignalDescription"))
if mibBuilder.loadTexts: analogVideoPedestalHighAlarm.setStatus('current')
if mibBuilder.loadTexts: analogVideoPedestalHighAlarm.setDescription('An Analog Video pedestal high alarm was triggered.')
analogVideoAPLHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 3, 0, 4)).setObjects(("VIDEOFRAME-GENERIC-MIB", "vfBoxId"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SlotNumber"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SignalNumber"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SignalName"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SignalDescription"))
if mibBuilder.loadTexts: analogVideoAPLHighAlarm.setStatus('current')
if mibBuilder.loadTexts: analogVideoAPLHighAlarm.setDescription('An Analog Video APL high alarm was triggered.')
analogVideoAPLLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 3, 0, 5)).setObjects(("VIDEOFRAME-GENERIC-MIB", "vfBoxId"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SlotNumber"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SignalNumber"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SignalName"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SignalDescription"))
if mibBuilder.loadTexts: analogVideoAPLLowAlarm.setStatus('current')
if mibBuilder.loadTexts: analogVideoAPLLowAlarm.setDescription('An Analog Video APL low alarm was triggered.')
analogVideoFrozenImageAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1, 2, 3, 0, 6)).setObjects(("VIDEOFRAME-GENERIC-MIB", "vfBoxId"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SlotNumber"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SignalNumber"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SignalName"), ("VIDEOFRAME-SIGMON-VM0002-MIB", "vm0002SignalDescription"))
if mibBuilder.loadTexts: analogVideoFrozenImageAlarm.setStatus('current')
if mibBuilder.loadTexts: analogVideoFrozenImageAlarm.setDescription('An Analog Video frozen image alarm was triggered.')
mibBuilder.exportSymbols("VIDEOFRAME-SIGMON-VM0002-MIB", vm0002PedestalHighAlarmAck=vm0002PedestalHighAlarmAck, vm0002FrozenAlarmState=vm0002FrozenAlarmState, videoframeSigmonVm0002MIB=videoframeSigmonVm0002MIB, vm0002MaxFrozenDuration=vm0002MaxFrozenDuration, analogVideoAPLHighAlarm=analogVideoAPLHighAlarm, vm0002VSyncLossTrapEnable=vm0002VSyncLossTrapEnable, vm0002BurstPresent=vm0002BurstPresent, vm0002Entry=vm0002Entry, analogVideoFrozenImageAlarm=analogVideoFrozenImageAlarm, vm0002AnalogVideoEvents=vm0002AnalogVideoEvents, vm0002FrozenAlarmAck=vm0002FrozenAlarmAck, vm0002HSyncLossAlarmState=vm0002HSyncLossAlarmState, vm0002HSyncLossPeriod=vm0002HSyncLossPeriod, vm0002n100IRECalibrationValue=vm0002n100IRECalibrationValue, vm0002VSyncLossThreshold=vm0002VSyncLossThreshold, analogVideoVSyncLossAlarm=analogVideoVSyncLossAlarm, vm0002AplHighThreshold=vm0002AplHighThreshold, vm0002SignalTable=vm0002SignalTable, vm0002VSyncLossAlarmState=vm0002VSyncLossAlarmState, vm0002PedestalHighPeriod=vm0002PedestalHighPeriod, vm0002n100IRECalibrationSet=vm0002n100IRECalibrationSet, vm0002VSyncLossPeriod=vm0002VSyncLossPeriod, vm0002AplHighDuration=vm0002AplHighDuration, vm0002Table=vm0002Table, vm0002AplHighAlarmAck=vm0002AplHighAlarmAck, vm0002AplLowThreshold=vm0002AplLowThreshold, vm0002SignalNumber=vm0002SignalNumber, vm0002AplHighAlarmState=vm0002AplHighAlarmState, vm0002FrozenImageFilter=vm0002FrozenImageFilter, vm0002SignalName=vm0002SignalName, vm0002FrozenTrapEnable=vm0002FrozenTrapEnable, vm0002PedestalHighThreshold=vm0002PedestalHighThreshold, vm0002AnalogVideo=vm0002AnalogVideo, vm0002SignalSlotNumber=vm0002SignalSlotNumber, vm0002HSyncLossAlarmAck=vm0002HSyncLossAlarmAck, PYSNMP_MODULE_ID=videoframeSigmonVm0002MIB, vm0002CurrentAplRaw=vm0002CurrentAplRaw, analogVideoHSyncLossAlarm=analogVideoHSyncLossAlarm, analogVideoPedestalHighAlarm=analogVideoPedestalHighAlarm, vm0002AplLowAlarmState=vm0002AplLowAlarmState, vm0002AplHighTrapEnable=vm0002AplHighTrapEnable, vm0002AplLowDuration=vm0002AplLowDuration, vm0002Locate=vm0002Locate, vm0002SlotNumber=vm0002SlotNumber, analogVideoAPLLowAlarm=analogVideoAPLLowAlarm, vm0002MeasuredPedestal=vm0002MeasuredPedestal, vm0002FirmwareRev=vm0002FirmwareRev, vm0002SignalEntry=vm0002SignalEntry, vm0002HSyncLossThreshold=vm0002HSyncLossThreshold, vm0002Active=vm0002Active, vm0002AplLowAlarmAck=vm0002AplLowAlarmAck, vm0002SignalDescription=vm0002SignalDescription, vm0002PedestalHighAlarmState=vm0002PedestalHighAlarmState, vm0002VSyncLossAlarmAck=vm0002VSyncLossAlarmAck, vm0002PedestalHighTrapEnable=vm0002PedestalHighTrapEnable, vm0002HSyncLossTrapEnable=vm0002HSyncLossTrapEnable, vm0002AplLowTrapEnable=vm0002AplLowTrapEnable, vm0002AnalogVideoEventsV2=vm0002AnalogVideoEventsV2, vfProductsVM0002Reg=vfProductsVM0002Reg)
