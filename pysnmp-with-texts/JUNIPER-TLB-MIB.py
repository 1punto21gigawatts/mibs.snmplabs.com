#
# PySNMP MIB module JUNIPER-TLB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-TLB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:01:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressIPv4, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressIPv4", "InetAddressType")
jnxSDKApplicationsRoot, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxSDKApplicationsRoot")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
sysContact, sysName, sysLocation = mibBuilder.importSymbols("SNMPv2-MIB", "sysContact", "sysName", "sysLocation")
iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, MibIdentifier, Counter64, NotificationType, ModuleIdentity, ObjectIdentity, TimeTicks, Integer32, Gauge32, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "MibIdentifier", "Counter64", "NotificationType", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Integer32", "Gauge32", "IpAddress", "Bits")
TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime")
jnxTLBMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1))
jnxTLBMIB.setRevisions(('2014-02-12 20:22',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxTLBMIB.setRevisionsDescriptions(('Creation Date',))
if mibBuilder.loadTexts: jnxTLBMIB.setLastUpdated('201402122022Z')
if mibBuilder.loadTexts: jnxTLBMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxTLBMIB.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: jnxTLBMIB.setDescription('This module defines the object that are used to monitor traffic load balancer attributes.')
jnxTLBrealServer = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1))
jnxTLBvirtualService = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2))
jnxTLBserverGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 3))
jnxTLBNetworkMonitorProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 6))
jnxTLBRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1), )
if mibBuilder.loadTexts: jnxTLBRealServerTable.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRealServerTable.setDescription('This table exposes Traffic-load-balance real server statistics. ')
jnxTLBRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1, 1), ).setIndexNames((0, "JUNIPER-TLB-MIB", "jnxTLBRealServerNameKey"))
if mibBuilder.loadTexts: jnxTLBRealServerEntry.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRealServerEntry.setDescription('real server entries. It is indexed by virtual-service-name.real-server-name.')
jnxTLBRealServerNameKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxTLBRealServerNameKey.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRealServerNameKey.setDescription('The name of virtual-service.real-server used as key.')
jnxTLBRealServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBRealServerName.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRealServerName.setDescription('The name of Real Server. ')
jnxTLBRealServerInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBRealServerInstance.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRealServerInstance.setDescription('The instance of Real Server. ')
jnxTLBRealServerIPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBRealServerIPVersion.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRealServerIPVersion.setDescription('The type of IP address For TLB MIB, supporting ipv4(1) and ipv6(2) only.')
jnxTLBRealServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBRealServerIP.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRealServerIP.setDescription('IP of Real Server. ')
jnxTLBRealServerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBRealServerOperStatus.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRealServerOperStatus.setDescription('The operation status For TLB MIB, supporting up(1) and down(2) only.')
jnxTLBRealServerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBRealServerAdminStatus.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRealServerAdminStatus.setDescription('The admin status For TLB MIB, supporting up(1) and down(2) only.')
jnxTLBRealServerSubUnitNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBRealServerSubUnitNo.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRealServerSubUnitNo.setDescription('Subunit number of Real Server')
jnxTLBRealServerFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBRealServerFailures.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRealServerFailures.setDescription('Number of Real Server Failures')
jnxTLBRSClientPacketForwardCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBRSClientPacketForwardCount.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRSClientPacketForwardCount.setDescription('Forward Packet Count')
jnxTLBRSClientByteForwardCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBRSClientByteForwardCount.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRSClientByteForwardCount.setDescription('Forward Byte Count')
jnxTLBRSClientPacketReverseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBRSClientPacketReverseCount.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRSClientPacketReverseCount.setDescription('Reverse Packet Count')
jnxTLBRSClientByteReverseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBRSClientByteReverseCount.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRSClientByteReverseCount.setDescription('Reverse Byte Count')
jnxTLBRSTotalUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBRSTotalUpCount.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRSTotalUpCount.setDescription('Total number of Real Server Up')
jnxTLBRSTotalDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBRSTotalDownCount.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRSTotalDownCount.setDescription('Total number of Real Server Down')
jnxTLBRSTotalRejoinCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBRSTotalRejoinCount.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRSTotalRejoinCount.setDescription('Number of times Real Server Rejoined.')
jnxTLBRSTotalProbeSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBRSTotalProbeSent.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRSTotalProbeSent.setDescription('Total number of Probe Sent')
jnxTLBRSTotalProbeSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBRSTotalProbeSuccess.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRSTotalProbeSuccess.setDescription('Total Number of Probe Successful')
jnxTLBRSTotalProbeFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBRSTotalProbeFail.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRSTotalProbeFail.setDescription('Total Number of Probe Failed')
jnxTLBRSTotalProbeSentFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 1, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBRSTotalProbeSentFail.setStatus('current')
if mibBuilder.loadTexts: jnxTLBRSTotalProbeSentFail.setDescription('Total number of Probe Sent Failed')
jnxTLBVirtualServiceTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1), )
if mibBuilder.loadTexts: jnxTLBVirtualServiceTable.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceTable.setDescription('This table exposes Traffic-load-balance virtual service statistics. ')
jnxTLBVirtualServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1), ).setIndexNames((0, "JUNIPER-TLB-MIB", "jnxTLBVirtualServiceNameKey"))
if mibBuilder.loadTexts: jnxTLBVirtualServiceEntry.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceEntry.setDescription('virtual service entries. It is indexed by virtual service name.')
jnxTLBVirtualServiceNameKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxTLBVirtualServiceNameKey.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceNameKey.setDescription('The name of Virtual Service used as key. ')
jnxTLBVirtualServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVirtualServiceName.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceName.setDescription('The name of Virtual Service. ')
jnxTLBVirtualServiceTranslationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVirtualServiceTranslationMode.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceTranslationMode.setDescription('Translation mode of Virtual Service. ')
jnxTLBVirtualServiceInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVirtualServiceInstance.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceInstance.setDescription('The instance name of Virtual Service. ')
jnxTLBVirtualServiceIPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVirtualServiceIPVersion.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceIPVersion.setDescription('The type of IP address For TLB MIB, supporting ipv4(1) and ipv6(2) only.')
jnxTLBVirtualServiceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVirtualServiceIP.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceIP.setDescription('IP of Virtual Service.')
jnxTLBVirtualServiceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVirtualServiceOperStatus.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceOperStatus.setDescription('The operation status For TLB MIB, supporting up(1) and down(2) only.')
jnxTLBVirtualServiceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVirtualServiceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceAdminStatus.setDescription('The admin status For TLB MIB, supporting up(1) and down(2) only.')
jnxTLBVirtualServiceSubUnitNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVirtualServiceSubUnitNo.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceSubUnitNo.setDescription('Subunit number of virtual Service')
jnxTLBVirtualServiceFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVirtualServiceFailures.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceFailures.setDescription('Nunber of virtual service failures.')
jnxTLBVSClientPacketForwardCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVSClientPacketForwardCount.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVSClientPacketForwardCount.setDescription('Forward packet count.')
jnxTLBVSClientByteForwardCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVSClientByteForwardCount.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVSClientByteForwardCount.setDescription('Forward byte count.')
jnxTLBVSClientPacketReverseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVSClientPacketReverseCount.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVSClientPacketReverseCount.setDescription('Reverse packet count')
jnxTLBVSClientByteReverseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVSClientByteReverseCount.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVSClientByteReverseCount.setDescription('Reverse byte count')
jnxTLBVSTotalUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVSTotalUpCount.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVSTotalUpCount.setDescription('Total number of real server up.')
jnxTLBVSTotalDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVSTotalDownCount.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVSTotalDownCount.setDescription('Total number of real server down.')
jnxTLBVSTotalRealServerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVSTotalRealServerCount.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVSTotalRealServerCount.setDescription('Total number of real server.')
jnxTLBVSServiceUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVSServiceUpTime.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVSServiceUpTime.setDescription('Service up time.')
jnxTLBVSActiveRealServerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVSActiveRealServerCount.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVSActiveRealServerCount.setDescription('Number of active real server.')
jnxTLBVSNetworkMonitorProfileCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVSNetworkMonitorProfileCount.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVSNetworkMonitorProfileCount.setDescription('Monitor Profile count.')
jnxTLBVirtualServiceVirtualPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVirtualServiceVirtualPort.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceVirtualPort.setDescription('Virtual port used.')
jnxTLBVirtualServiceRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVirtualServiceRealPort.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceRealPort.setDescription('Real port used.')
jnxTLBVirtualServiceNextHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVirtualServiceNextHopIndex.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceNextHopIndex.setDescription('Virtual service nexthop index.')
jnxTLBVirtualServiceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVirtualServiceProtocol.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceProtocol.setDescription('Virtual Service protocol used.')
jnxTLBVirtualServiceDemuxNextHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVirtualServiceDemuxNextHopIndex.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceDemuxNextHopIndex.setDescription('Virtual service nexthop index.')
jnxTLBVirtualServiceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVirtualServiceInterface.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceInterface.setDescription('Virtual Service Interface used. ')
jnxTLBVirtualServiceRoutingInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVirtualServiceRoutingInstance.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceRoutingInstance.setDescription('Routing Instance of virtual service. ')
jnxTLBVirtualServiceHashMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVirtualServiceHashMethod.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceHashMethod.setDescription('Hash method used.')
jnxTLBVirtualServiceRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVirtualServiceRouteMetric.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceRouteMetric.setDescription('Raute metric of virtual service.')
jnxTLBVirtualServiceAutoRejoin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("true", 0), ("false", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVirtualServiceAutoRejoin.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceAutoRejoin.setDescription('Virtual Service Auto Rejoin option')
jnxTLBVirtualServiceRouteHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVirtualServiceRouteHoldTimer.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceRouteHoldTimer.setDescription('Virtual Service Route Hold Timer')
jnxTLBVirtualServiceWarmUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 2, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBVirtualServiceWarmUpTime.setStatus('current')
if mibBuilder.loadTexts: jnxTLBVirtualServiceWarmUpTime.setDescription('Virtual Service Warm Up Time.')
jnxTLBServerGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 3, 1), )
if mibBuilder.loadTexts: jnxTLBServerGroupTable.setStatus('current')
if mibBuilder.loadTexts: jnxTLBServerGroupTable.setDescription('This table monitors server group ')
jnxTLBServerGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 3, 1, 1), ).setIndexNames((0, "JUNIPER-TLB-MIB", "jnxTLBServerGroupNameKey"))
if mibBuilder.loadTexts: jnxTLBServerGroupEntry.setStatus('current')
if mibBuilder.loadTexts: jnxTLBServerGroupEntry.setDescription('Server group entries. It is indexed by server group name.')
jnxTLBServerGroupNameKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxTLBServerGroupNameKey.setStatus('current')
if mibBuilder.loadTexts: jnxTLBServerGroupNameKey.setDescription('Server Group Name used as Key. ')
jnxTLBServerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBServerGroupName.setStatus('current')
if mibBuilder.loadTexts: jnxTLBServerGroupName.setDescription('Server Group Name')
jnxTLBServerGroupInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBServerGroupInstance.setStatus('current')
if mibBuilder.loadTexts: jnxTLBServerGroupInstance.setDescription('Instance of Server Group ')
jnxTLBServerGroupIPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBServerGroupIPVersion.setStatus('current')
if mibBuilder.loadTexts: jnxTLBServerGroupIPVersion.setDescription('Server Group IP Version ')
jnxTLBServerGroupOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBServerGroupOperStatus.setStatus('current')
if mibBuilder.loadTexts: jnxTLBServerGroupOperStatus.setDescription('Server Group Operation Status ')
jnxTLBServerGroupAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBServerGroupAdminStatus.setStatus('current')
if mibBuilder.loadTexts: jnxTLBServerGroupAdminStatus.setDescription('Server Group Admin Status ')
jnxTLBServerGroupFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBServerGroupFailures.setStatus('current')
if mibBuilder.loadTexts: jnxTLBServerGroupFailures.setDescription('Number of Server Group Failures ')
jnxTLBServerGroupLastTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBServerGroupLastTimeUp.setStatus('current')
if mibBuilder.loadTexts: jnxTLBServerGroupLastTimeUp.setDescription('Server Group Last Time Up ')
jnxTLBServerGroupLastTimeDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBServerGroupLastTimeDown.setStatus('current')
if mibBuilder.loadTexts: jnxTLBServerGroupLastTimeDown.setDescription('Server Group Last Time Down ')
jnxTLBServerGroupTotalUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 3, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBServerGroupTotalUpCount.setStatus('current')
if mibBuilder.loadTexts: jnxTLBServerGroupTotalUpCount.setDescription('Total Number of Server Group UP.')
jnxTLBServerGroupTotalDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBServerGroupTotalDownCount.setStatus('current')
if mibBuilder.loadTexts: jnxTLBServerGroupTotalDownCount.setDescription('Total number of Server Group Down')
jnxTLBNetworkMonitorProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 6, 1), )
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileTable.setStatus('current')
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileTable.setDescription('This table monitors server group ')
jnxTLBNetworkMonitorProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 6, 1, 1), ).setIndexNames((0, "JUNIPER-TLB-MIB", "jnxTLBNetworkMonitorProfileNameKey"))
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileEntry.setStatus('current')
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileEntry.setDescription('Network Monitor Profile Entries. It is indexed by virtual-service-name.real-server-name.profile-index. ')
jnxTLBNetworkMonitorProfileNameKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 6, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileNameKey.setStatus('current')
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileNameKey.setDescription('Network Monitor Profile Key Name. virtual-service-name.real-server-name.profile-index. ')
jnxTLBNetworkMonitorProfileVirtualServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileVirtualServiceName.setStatus('current')
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileVirtualServiceName.setDescription('Virtual Service Name.')
jnxTLBNetworkMonitorProfileRealServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileRealServerName.setStatus('current')
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileRealServerName.setDescription('Real Server Name.')
jnxTLBNetworkMonitorProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 6, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileIndex.setStatus('current')
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileIndex.setDescription('Network Monitor Profile Index.')
jnxTLBNetworkMonitorProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 6, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileName.setStatus('current')
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileName.setDescription('Network Monitor Profile name.')
jnxTLBNetworkMonitorProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 6, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileType.setStatus('current')
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileType.setDescription('Network Monitor Profile type.')
jnxTLBNetworkMonitorProfileProbeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 6, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileProbeInterval.setStatus('current')
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileProbeInterval.setDescription('Network Monitor Profile Probe Interval.')
jnxTLBNetworkMonitorProfileFailureRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 6, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileFailureRetry.setStatus('current')
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileFailureRetry.setDescription('Network Monitor Failure Retry.')
jnxTLBNetworkMonitorProfileRecoverRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 6, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileRecoverRetry.setStatus('current')
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileRecoverRetry.setDescription('Network Monitor Profile Recover Retry.')
jnxTLBNetworkMonitorProfilePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 6, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfilePortNumber.setStatus('current')
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfilePortNumber.setDescription('Network Monitor Profile Port Number.')
jnxTLBNetworkMonitorProfileProbeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("probeStateUp", 1), ("probeStateDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileProbeState.setStatus('current')
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileProbeState.setDescription('Probe State of the Network Monitor Profile.')
jnxTLBNetworkMonitorProfileProbeSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 6, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileProbeSent.setStatus('current')
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileProbeSent.setDescription('Count of probes sent for this Network Monitor profile.')
jnxTLBNetworkMonitorProfileProbeSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 6, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileProbeSuccess.setStatus('current')
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileProbeSuccess.setDescription('Count of Successful probes for this Network Monitor profile.')
jnxTLBNetworkMonitorProfileProbeFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 6, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileProbeFail.setStatus('current')
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileProbeFail.setDescription('Count of Failed probes for this Network Monitor profile.')
jnxTLBNetworkMonitorProfileProbeConsecutiveSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 6, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileProbeConsecutiveSuccess.setStatus('current')
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileProbeConsecutiveSuccess.setDescription('Count of Consecutive Successful probes for this Network Monitor profile.')
jnxTLBNetworkMonitorProfileProbeConsecutiveFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 6, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileProbeConsecutiveFail.setStatus('current')
if mibBuilder.loadTexts: jnxTLBNetworkMonitorProfileProbeConsecutiveFail.setDescription('Count of Consecutive Failed probes for this Network Monitor profile.')
tlbDataMib = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 4))
if mibBuilder.loadTexts: tlbDataMib.setStatus('current')
if mibBuilder.loadTexts: tlbDataMib.setDescription("The root of Juniper's Traffic Load Balance data OIDs.")
tlbTrapMib = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5))
if mibBuilder.loadTexts: tlbTrapMib.setStatus('current')
if mibBuilder.loadTexts: tlbTrapMib.setDescription("The root of Juniper's Traffic Load Balance trap OIDs.")
tlbNotificationObjMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 3))
tlbNotificationMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 4))
tlbInstanceName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 3, 1001), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlbInstanceName.setStatus('current')
if mibBuilder.loadTexts: tlbInstanceName.setDescription('The name which uniquely identifies the TLB instance.')
tlbRealServerName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 3, 1002), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlbRealServerName.setStatus('current')
if mibBuilder.loadTexts: tlbRealServerName.setDescription('The name which uniquely identifies the real server.')
tlbRealServerGroupName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 3, 1003), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlbRealServerGroupName.setStatus('current')
if mibBuilder.loadTexts: tlbRealServerGroupName.setDescription('The name which uniquely identifies the real server group.')
tlbRealServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 3, 1004), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlbRealServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: tlbRealServerIpAddress.setDescription('The IP address of the real server.')
tlbVirtualServiceName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 3, 1005), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlbVirtualServiceName.setStatus('current')
if mibBuilder.loadTexts: tlbVirtualServiceName.setDescription('The name which uniquely identifies the virtual service.')
tlbVirtualServiceIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 3, 1006), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlbVirtualServiceIpAddr.setStatus('current')
if mibBuilder.loadTexts: tlbVirtualServiceIpAddr.setDescription('The IP address of the virtual service.')
tlbVirtualServicePort = MibScalar((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 3, 1007), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlbVirtualServicePort.setStatus('current')
if mibBuilder.loadTexts: tlbVirtualServicePort.setDescription('The port number of the virtual service.')
tlbProfileName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 3, 1008), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlbProfileName.setStatus('current')
if mibBuilder.loadTexts: tlbProfileName.setDescription('The name of service probe profile.')
tlbMultiserviceInterface = MibScalar((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 3, 1009), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlbMultiserviceInterface.setStatus('current')
if mibBuilder.loadTexts: tlbMultiserviceInterface.setDescription('Name of the multiservice interface.')
tlbMultiServicePIC = MibScalar((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 3, 1010), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlbMultiServicePIC.setStatus('current')
if mibBuilder.loadTexts: tlbMultiServicePIC.setDescription('PIC ID.')
tlbNetmonCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 3, 1011), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlbNetmonCpuUsage.setStatus('current')
if mibBuilder.loadTexts: tlbNetmonCpuUsage.setDescription('CPU usage of Netmond')
tlbMonitorMode = MibScalar((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 3, 1099), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlbMonitorMode.setStatus('current')
if mibBuilder.loadTexts: tlbMonitorMode.setDescription('RE or PIC based net-monitord.')
tlbRealServerUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 4, 1)).setObjects(("JUNIPER-TLB-MIB", "tlbInstanceName"), ("JUNIPER-TLB-MIB", "tlbRealServerName"), ("JUNIPER-TLB-MIB", "tlbRealServerIpAddress"), ("JUNIPER-TLB-MIB", "tlbRealServerGroupName"), ("JUNIPER-TLB-MIB", "tlbMonitorMode"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: tlbRealServerUp.setStatus('current')
if mibBuilder.loadTexts: tlbRealServerUp.setDescription('The trap will be sent when real server starts up.')
tlbRealServerDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 4, 2)).setObjects(("JUNIPER-TLB-MIB", "tlbInstanceName"), ("JUNIPER-TLB-MIB", "tlbRealServerName"), ("JUNIPER-TLB-MIB", "tlbRealServerIpAddress"), ("JUNIPER-TLB-MIB", "tlbRealServerGroupName"), ("JUNIPER-TLB-MIB", "tlbMonitorMode"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: tlbRealServerDown.setStatus('current')
if mibBuilder.loadTexts: tlbRealServerDown.setDescription('The trap will be sent when real server is down.')
tlbRealServerRejoined = NotificationType((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 4, 3)).setObjects(("JUNIPER-TLB-MIB", "tlbInstanceName"), ("JUNIPER-TLB-MIB", "tlbRealServerName"), ("JUNIPER-TLB-MIB", "tlbRealServerIpAddress"), ("JUNIPER-TLB-MIB", "tlbRealServerGroupName"), ("JUNIPER-TLB-MIB", "tlbMonitorMode"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: tlbRealServerRejoined.setStatus('current')
if mibBuilder.loadTexts: tlbRealServerRejoined.setDescription('The trap will be sent when real server rejoins a group.')
tlbVirtualServiceUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 4, 5)).setObjects(("JUNIPER-TLB-MIB", "tlbInstanceName"), ("JUNIPER-TLB-MIB", "tlbVirtualServiceName"), ("JUNIPER-TLB-MIB", "tlbVirtualServiceIpAddr"), ("JUNIPER-TLB-MIB", "tlbRealServerGroupName"), ("JUNIPER-TLB-MIB", "tlbMonitorMode"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: tlbVirtualServiceUp.setStatus('current')
if mibBuilder.loadTexts: tlbVirtualServiceUp.setDescription('The trap will be sent when at least one service is up for the virtual-server IP address.')
tlbVirtualServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 4, 6)).setObjects(("JUNIPER-TLB-MIB", "tlbInstanceName"), ("JUNIPER-TLB-MIB", "tlbVirtualServiceName"), ("JUNIPER-TLB-MIB", "tlbVirtualServiceIpAddr"), ("JUNIPER-TLB-MIB", "tlbRealServerGroupName"), ("JUNIPER-TLB-MIB", "tlbMonitorMode"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: tlbVirtualServiceDown.setStatus('current')
if mibBuilder.loadTexts: tlbVirtualServiceDown.setDescription('The trap will be sent when all services is down for a virtual-server IP address.')
tlbRealServerServiceUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 4, 7)).setObjects(("JUNIPER-TLB-MIB", "tlbInstanceName"), ("JUNIPER-TLB-MIB", "tlbRealServerName"), ("JUNIPER-TLB-MIB", "tlbRealServerIpAddress"), ("JUNIPER-TLB-MIB", "tlbRealServerGroupName"), ("JUNIPER-TLB-MIB", "tlbMonitorMode"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: tlbRealServerServiceUp.setStatus('current')
if mibBuilder.loadTexts: tlbRealServerServiceUp.setDescription('The trap will be sent when real server service is up.')
tlbRealServerServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 4, 8)).setObjects(("JUNIPER-TLB-MIB", "tlbInstanceName"), ("JUNIPER-TLB-MIB", "tlbRealServerName"), ("JUNIPER-TLB-MIB", "tlbRealServerIpAddress"), ("JUNIPER-TLB-MIB", "tlbRealServerGroupName"), ("JUNIPER-TLB-MIB", "tlbMonitorMode"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: tlbRealServerServiceDown.setStatus('current')
if mibBuilder.loadTexts: tlbRealServerServiceDown.setDescription('The trap will be sent when real server service is down.')
tlbVirtualServerServiceUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 4, 9)).setObjects(("JUNIPER-TLB-MIB", "tlbInstanceName"), ("JUNIPER-TLB-MIB", "tlbVirtualServiceName"), ("JUNIPER-TLB-MIB", "tlbVirtualServiceIpAddr"), ("JUNIPER-TLB-MIB", "tlbRealServerGroupName"), ("JUNIPER-TLB-MIB", "tlbVirtualServicePort"), ("JUNIPER-TLB-MIB", "tlbMonitorMode"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: tlbVirtualServerServiceUp.setStatus('current')
if mibBuilder.loadTexts: tlbVirtualServerServiceUp.setDescription('The trap will be sent when virtual service is up.')
tlbVirtualServerServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 4, 10)).setObjects(("JUNIPER-TLB-MIB", "tlbInstanceName"), ("JUNIPER-TLB-MIB", "tlbVirtualServiceName"), ("JUNIPER-TLB-MIB", "tlbVirtualServiceIpAddr"), ("JUNIPER-TLB-MIB", "tlbRealServerGroupName"), ("JUNIPER-TLB-MIB", "tlbVirtualServicePort"), ("JUNIPER-TLB-MIB", "tlbMonitorMode"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: tlbVirtualServerServiceDown.setStatus('current')
if mibBuilder.loadTexts: tlbVirtualServerServiceDown.setDescription('The trap will be sent when virtual service is down.')
tlbUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 4, 11)).setObjects(("JUNIPER-TLB-MIB", "tlbMonitorMode"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: tlbUp.setStatus('current')
if mibBuilder.loadTexts: tlbUp.setDescription('The trap will be sent when TLB is started or restarted.')
tlbShutdown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 4, 12)).setObjects(("JUNIPER-TLB-MIB", "tlbMonitorMode"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: tlbShutdown.setStatus('current')
if mibBuilder.loadTexts: tlbShutdown.setDescription('The trap will be sent when TLB is shutdown or restarted.')
tlbPicConnected = NotificationType((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 4, 13)).setObjects(("JUNIPER-TLB-MIB", "tlbMonitorMode"), ("JUNIPER-TLB-MIB", "tlbMultiserviceInterface"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: tlbPicConnected.setStatus('current')
if mibBuilder.loadTexts: tlbPicConnected.setDescription('The trap will be sent when TLB connects to a PIC.')
tlbPicDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 4, 14)).setObjects(("JUNIPER-TLB-MIB", "tlbMonitorMode"), ("JUNIPER-TLB-MIB", "tlbMultiserviceInterface"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: tlbPicDisconnected.setStatus('current')
if mibBuilder.loadTexts: tlbPicDisconnected.setDescription('The trap will be sent when TLB disconnects from a PIC.')
tlbCpuHigh = NotificationType((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 4, 15)).setObjects(("JUNIPER-TLB-MIB", "tlbMonitorMode"), ("JUNIPER-TLB-MIB", "tlbNetmonCpuUsage"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: tlbCpuHigh.setStatus('current')
if mibBuilder.loadTexts: tlbCpuHigh.setDescription('The trap will be sent when TLB uses more than a predefined max percentage of CPU.')
tlbCpuNormal = NotificationType((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 4, 16)).setObjects(("JUNIPER-TLB-MIB", "tlbMonitorMode"), ("JUNIPER-TLB-MIB", "tlbNetmonCpuUsage"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: tlbCpuNormal.setStatus('current')
if mibBuilder.loadTexts: tlbCpuNormal.setDescription('The trap will be sent when TLB drops below a predefined max percentage of CPU.')
tlbUnlicensedPic = NotificationType((1, 3, 6, 1, 4, 1, 2636, 1, 7, 1, 5, 4, 17)).setObjects(("JUNIPER-TLB-MIB", "tlbMonitorMode"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: tlbUnlicensedPic.setStatus('current')
if mibBuilder.loadTexts: tlbUnlicensedPic.setDescription('The trap will be sent if no license is installed and it is required.')
mibBuilder.exportSymbols("JUNIPER-TLB-MIB", jnxTLBRSTotalProbeSentFail=jnxTLBRSTotalProbeSentFail, tlbRealServerServiceDown=tlbRealServerServiceDown, jnxTLBVirtualServiceName=jnxTLBVirtualServiceName, jnxTLBRSTotalProbeSent=jnxTLBRSTotalProbeSent, jnxTLBNetworkMonitorProfileTable=jnxTLBNetworkMonitorProfileTable, tlbCpuNormal=tlbCpuNormal, jnxTLBVirtualServiceIPVersion=jnxTLBVirtualServiceIPVersion, tlbRealServerRejoined=tlbRealServerRejoined, tlbPicDisconnected=tlbPicDisconnected, jnxTLBServerGroupName=jnxTLBServerGroupName, jnxTLBVirtualServiceRealPort=jnxTLBVirtualServiceRealPort, jnxTLBNetworkMonitorProfileProbeSent=jnxTLBNetworkMonitorProfileProbeSent, jnxTLBVirtualServiceRouteMetric=jnxTLBVirtualServiceRouteMetric, jnxTLBVirtualServiceWarmUpTime=jnxTLBVirtualServiceWarmUpTime, jnxTLBNetworkMonitorProfileVirtualServiceName=jnxTLBNetworkMonitorProfileVirtualServiceName, jnxTLBVSServiceUpTime=jnxTLBVSServiceUpTime, jnxTLBMIB=jnxTLBMIB, tlbNotificationMib=tlbNotificationMib, jnxTLBRealServerTable=jnxTLBRealServerTable, tlbVirtualServiceName=tlbVirtualServiceName, tlbProfileName=tlbProfileName, jnxTLBNetworkMonitorProfileRealServerName=jnxTLBNetworkMonitorProfileRealServerName, jnxTLBNetworkMonitorProfileProbeState=jnxTLBNetworkMonitorProfileProbeState, jnxTLBServerGroupLastTimeDown=jnxTLBServerGroupLastTimeDown, jnxTLBRealServerAdminStatus=jnxTLBRealServerAdminStatus, jnxTLBVirtualServiceHashMethod=jnxTLBVirtualServiceHashMethod, tlbVirtualServiceDown=tlbVirtualServiceDown, jnxTLBServerGroupTable=jnxTLBServerGroupTable, jnxTLBNetworkMonitorProfileType=jnxTLBNetworkMonitorProfileType, jnxTLBVSTotalUpCount=jnxTLBVSTotalUpCount, jnxTLBVirtualServiceAdminStatus=jnxTLBVirtualServiceAdminStatus, jnxTLBVirtualServiceTable=jnxTLBVirtualServiceTable, jnxTLBServerGroupTotalUpCount=jnxTLBServerGroupTotalUpCount, tlbTrapMib=tlbTrapMib, tlbVirtualServiceIpAddr=tlbVirtualServiceIpAddr, tlbMonitorMode=tlbMonitorMode, jnxTLBRSClientByteForwardCount=jnxTLBRSClientByteForwardCount, tlbRealServerName=tlbRealServerName, jnxTLBNetworkMonitorProfilePortNumber=jnxTLBNetworkMonitorProfilePortNumber, tlbNotificationObjMib=tlbNotificationObjMib, jnxTLBServerGroupLastTimeUp=jnxTLBServerGroupLastTimeUp, jnxTLBNetworkMonitorProfileProbeSuccess=jnxTLBNetworkMonitorProfileProbeSuccess, tlbPicConnected=tlbPicConnected, tlbRealServerUp=tlbRealServerUp, tlbVirtualServerServiceDown=tlbVirtualServerServiceDown, tlbNetmonCpuUsage=tlbNetmonCpuUsage, jnxTLBVirtualServiceTranslationMode=jnxTLBVirtualServiceTranslationMode, jnxTLBRealServerNameKey=jnxTLBRealServerNameKey, jnxTLBvirtualService=jnxTLBvirtualService, jnxTLBVirtualServiceRouteHoldTimer=jnxTLBVirtualServiceRouteHoldTimer, jnxTLBRealServerName=jnxTLBRealServerName, jnxTLBVSClientByteForwardCount=jnxTLBVSClientByteForwardCount, jnxTLBRealServerFailures=jnxTLBRealServerFailures, jnxTLBVirtualServiceInterface=jnxTLBVirtualServiceInterface, jnxTLBrealServer=jnxTLBrealServer, jnxTLBNetworkMonitorProfile=jnxTLBNetworkMonitorProfile, jnxTLBRSTotalDownCount=jnxTLBRSTotalDownCount, jnxTLBNetworkMonitorProfileProbeConsecutiveSuccess=jnxTLBNetworkMonitorProfileProbeConsecutiveSuccess, tlbVirtualServerServiceUp=tlbVirtualServerServiceUp, tlbCpuHigh=tlbCpuHigh, jnxTLBVirtualServiceIP=jnxTLBVirtualServiceIP, jnxTLBServerGroupFailures=jnxTLBServerGroupFailures, jnxTLBRSClientPacketReverseCount=jnxTLBRSClientPacketReverseCount, jnxTLBServerGroupAdminStatus=jnxTLBServerGroupAdminStatus, jnxTLBVSClientPacketReverseCount=jnxTLBVSClientPacketReverseCount, jnxTLBVirtualServiceProtocol=jnxTLBVirtualServiceProtocol, jnxTLBRSClientByteReverseCount=jnxTLBRSClientByteReverseCount, jnxTLBNetworkMonitorProfileNameKey=jnxTLBNetworkMonitorProfileNameKey, jnxTLBNetworkMonitorProfileFailureRetry=jnxTLBNetworkMonitorProfileFailureRetry, jnxTLBVirtualServiceAutoRejoin=jnxTLBVirtualServiceAutoRejoin, tlbMultiserviceInterface=tlbMultiserviceInterface, jnxTLBVirtualServiceSubUnitNo=jnxTLBVirtualServiceSubUnitNo, jnxTLBRSTotalProbeSuccess=jnxTLBRSTotalProbeSuccess, tlbVirtualServicePort=tlbVirtualServicePort, tlbVirtualServiceUp=tlbVirtualServiceUp, tlbUp=tlbUp, tlbRealServerGroupName=tlbRealServerGroupName, jnxTLBServerGroupOperStatus=jnxTLBServerGroupOperStatus, jnxTLBServerGroupInstance=jnxTLBServerGroupInstance, jnxTLBVirtualServiceInstance=jnxTLBVirtualServiceInstance, jnxTLBNetworkMonitorProfileProbeConsecutiveFail=jnxTLBNetworkMonitorProfileProbeConsecutiveFail, jnxTLBNetworkMonitorProfileProbeFail=jnxTLBNetworkMonitorProfileProbeFail, tlbInstanceName=tlbInstanceName, tlbMultiServicePIC=tlbMultiServicePIC, jnxTLBVSClientPacketForwardCount=jnxTLBVSClientPacketForwardCount, tlbRealServerDown=tlbRealServerDown, jnxTLBVSTotalDownCount=jnxTLBVSTotalDownCount, tlbShutdown=tlbShutdown, jnxTLBRSTotalRejoinCount=jnxTLBRSTotalRejoinCount, jnxTLBServerGroupIPVersion=jnxTLBServerGroupIPVersion, jnxTLBServerGroupEntry=jnxTLBServerGroupEntry, tlbDataMib=tlbDataMib, jnxTLBserverGroup=jnxTLBserverGroup, jnxTLBVSClientByteReverseCount=jnxTLBVSClientByteReverseCount, jnxTLBVirtualServiceOperStatus=jnxTLBVirtualServiceOperStatus, tlbUnlicensedPic=tlbUnlicensedPic, PYSNMP_MODULE_ID=jnxTLBMIB, jnxTLBRealServerSubUnitNo=jnxTLBRealServerSubUnitNo, jnxTLBVirtualServiceNameKey=jnxTLBVirtualServiceNameKey, jnxTLBRealServerIP=jnxTLBRealServerIP, jnxTLBVirtualServiceDemuxNextHopIndex=jnxTLBVirtualServiceDemuxNextHopIndex, jnxTLBRealServerOperStatus=jnxTLBRealServerOperStatus, jnxTLBServerGroupNameKey=jnxTLBServerGroupNameKey, jnxTLBRealServerEntry=jnxTLBRealServerEntry, jnxTLBNetworkMonitorProfileIndex=jnxTLBNetworkMonitorProfileIndex, jnxTLBVirtualServiceEntry=jnxTLBVirtualServiceEntry, jnxTLBVSActiveRealServerCount=jnxTLBVSActiveRealServerCount, jnxTLBVSNetworkMonitorProfileCount=jnxTLBVSNetworkMonitorProfileCount, jnxTLBVirtualServiceNextHopIndex=jnxTLBVirtualServiceNextHopIndex, tlbRealServerIpAddress=tlbRealServerIpAddress, jnxTLBNetworkMonitorProfileEntry=jnxTLBNetworkMonitorProfileEntry, jnxTLBRSClientPacketForwardCount=jnxTLBRSClientPacketForwardCount, jnxTLBVirtualServiceVirtualPort=jnxTLBVirtualServiceVirtualPort, jnxTLBRealServerIPVersion=jnxTLBRealServerIPVersion, jnxTLBServerGroupTotalDownCount=jnxTLBServerGroupTotalDownCount, jnxTLBRSTotalProbeFail=jnxTLBRSTotalProbeFail, jnxTLBNetworkMonitorProfileName=jnxTLBNetworkMonitorProfileName, jnxTLBVSTotalRealServerCount=jnxTLBVSTotalRealServerCount, jnxTLBNetworkMonitorProfileProbeInterval=jnxTLBNetworkMonitorProfileProbeInterval, jnxTLBVirtualServiceFailures=jnxTLBVirtualServiceFailures, jnxTLBNetworkMonitorProfileRecoverRetry=jnxTLBNetworkMonitorProfileRecoverRetry, jnxTLBRSTotalUpCount=jnxTLBRSTotalUpCount, tlbRealServerServiceUp=tlbRealServerServiceUp, jnxTLBRealServerInstance=jnxTLBRealServerInstance, jnxTLBVirtualServiceRoutingInstance=jnxTLBVirtualServiceRoutingInstance)
