#
# PySNMP MIB module CISCO-LWAPP-DOT11-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-DOT11-CLIENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:05:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
cLApLocation, cLApIfLoadChannelUtilization, cLApName, cLAPGroupVlanName, cLApDot11IfSlotId, cLApDot11RadioChannelNumber, cLApSubMode = mibBuilder.importSymbols("CISCO-LWAPP-AP-MIB", "cLApLocation", "cLApIfLoadChannelUtilization", "cLApName", "cLAPGroupVlanName", "cLApDot11IfSlotId", "cLApDot11RadioChannelNumber", "cLApSubMode")
cLMobilityExtMCClientAnchorMCPrivateAddressType, cLMobilityExtMCClientAssociatedMAAddress, cLMobilityExtMCClientAssociatedMCGroupId, cLMobilityExtMCClientAnchorMCGroupId, cLMobilityExtMCClientAssociatedMAAddressType, cLMobilityExtMCClientAssociatedMCAddress, cLMobilityExtMCClientAssociatedMCAddressType, cLMobilityExtMCClientAnchorMCPrivateAddress = mibBuilder.importSymbols("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAnchorMCPrivateAddressType", "cLMobilityExtMCClientAssociatedMAAddress", "cLMobilityExtMCClientAssociatedMCGroupId", "cLMobilityExtMCClientAnchorMCGroupId", "cLMobilityExtMCClientAssociatedMAAddressType", "cLMobilityExtMCClientAssociatedMCAddress", "cLMobilityExtMCClientAssociatedMCAddressType", "cLMobilityExtMCClientAnchorMCPrivateAddress")
CLApIfType, CLClientPowerSaveMode, CcxServiceVersion, CLDot11ClientStatus = mibBuilder.importSymbols("CISCO-LWAPP-TC-MIB", "CLApIfType", "CLClientPowerSaveMode", "CcxServiceVersion", "CLDot11ClientStatus")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoURLStringOrEmpty, = mibBuilder.importSymbols("CISCO-TC", "CiscoURLStringOrEmpty")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
iso, MibIdentifier, NotificationType, ObjectIdentity, Unsigned32, TimeTicks, Integer32, Bits, Counter32, Gauge32, Counter64, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "NotificationType", "ObjectIdentity", "Unsigned32", "TimeTicks", "Integer32", "Bits", "Counter32", "Gauge32", "Counter64", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, MacAddress, TimeInterval, TruthValue, TextualConvention, RowStatus, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TimeInterval", "TruthValue", "TextualConvention", "RowStatus", "TimeStamp")
ciscoLwappDot11ClientMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 599))
ciscoLwappDot11ClientMIB.setRevisions(('2011-04-29 00:00', '2006-11-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappDot11ClientMIB.setRevisionsDescriptions(('Added ciscoLwappDot11ClientMIBStatusGroupRev2, ciscoLwappDot11ClientMIBNotifsGroupRev2, and ciscoLwappDot11ClientMIBNotifControlGroup. Deprecated ciscoLwappDot11ClientMIBCompliance and added ciscoLwappDot11ClientMIBComplianceRev2', 'Initial version of this MIB module. ',))
if mibBuilder.loadTexts: ciscoLwappDot11ClientMIB.setLastUpdated('201104290000Z')
if mibBuilder.loadTexts: ciscoLwappDot11ClientMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappDot11ClientMIB.setContactInfo(' Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappDot11ClientMIB.setDescription('This MIB is intended to be implemented on all those devices operating as Central controllers, that terminate the Light Weight Access Point Protocol tunnel from Cisco Light-weight LWAPP Access Points. Information provided by this MIB is about the configuration and monitoring of 802.11 wireless clients in the network. The relationship between CC and the LWAPP APs can be depicted as followshe LWAPP tunnel exists between the controller and the APs. The MNs communicate with the APs through the protocol defined by the 802.11 standard. LWAPP APs, upon bootup, discover and join one of the controllers and the controller pushes the configuration, that includes the WLAN parameters, to the LWAPP APs. The APs then encapsulate all the 802.11 frames from wireless clients inside LWAPP frames and forward the LWAPP frames to the controller. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends them to the controller to which it is logically connected. Basic Service Set ( BSS ) Coverage area of one access point is called a BSS. An access point (AP) acts as a master to control the clients within that BSS. Clear To Send (CTS) Refer to the description of RTS. Light Weight Access Point Protocol ( LWAPP ) This is a generic protocol that defines the communication between the Access Points and the Central Controller. MAC Service Data Units ( MSDU ) The MSDU is that unit of data received from the logical link control ( LLC ) sub-layer which lies above the medium access control ( MAC ) sub-layer in a protocol stack. Message Integrity Code ( MIC ) A value generated by a symmetric key cryptographic function. If the input data are changed, a new value cannot be correctly computed without knowledge of the symmetric key. Thus, the secret key protects the input data from undetectable alteration. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. Mobile Node, Mobile Station(Ms) and client are used interchangeably. Request To Send ( RTS ) A client wishing to send data initiates the process by sending a Request To Send (RTS) frame. The destination client replies with a Clear To Send (CTS) frame. Wireless local-area network ( WLAN ) A local-area network that uses high-frequency radio waves rather than wires to communicate between nodes. Service Set Identifier (SSID) A service set identifier is a name that identifies a particular 802.11 wireless LAN. A client device receives broadcast messages from all access points within range advertising their SSIDs. The client device can then either manually or automatically based on configuration select the network with which to associate. The SSID can be up to 32 characters long. Hybrid Remote Edge Access Point (HREAP) HREAP is a wireless solution for branch office and remote office deployments. It enables customers to configure and control access points in a branch or remote office from the corporate office through a wide area network (WAN) link without deploying a controller in each office. Workgroup Bridge ( WGB ) A WGB can provide a wireless infrastructure connection for a Ethernet-enabled devices. Devices that do not have a wireless client adapter in order to connect to the wireless network can be connected to a WGB through Ethernet port. KTS (Key Telephone System) Key Telephone System is an alternative to a private branch exchange (PBX) phone system. A KTS is equipped with several buttons that allow a caller to directly select outgoing lines or incoming calls, and use intercom and conference facilities. REFERENCE [1] Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications [2] Draft-obara-capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol ')
ciscoLwappDot11ClientMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 0))
ciscoLwappDot11ClientMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 1))
ciscoLwappDot11ClientMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 2))
ciscoLwappDot11ClientCcxMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 3))
cldcConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 1))
cldcNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2))
cldcStatusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3))
cldcStatisticObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4))
cldcCcxObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 1))
cldcClientTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1), )
if mibBuilder.loadTexts: cldcClientTable.setStatus('current')
if mibBuilder.loadTexts: cldcClientTable.setDescription("This table represents the 802.11 wireless clients that are associated with the APs that have joined this controller. An entry is created automatically by the controller when the client gets associated to the AP. An existing entry gets deleted when the association gets dropped. Each client added to this table is uniquely identified by the client's MAC address.")
cldcClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"))
if mibBuilder.loadTexts: cldcClientEntry.setStatus('current')
if mibBuilder.loadTexts: cldcClientEntry.setDescription("Each entry represents a conceptual row in this table and provides the information about the clients associated to the APs that have joined the controller. An entry is identified the client's MAC address.")
cldcClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: cldcClientMacAddress.setStatus('current')
if mibBuilder.loadTexts: cldcClientMacAddress.setDescription('This object specifies the MAC address of the client for this entry and uniquely identifies this entry. ')
cldcClientStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 2), CLDot11ClientStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientStatus.setStatus('current')
if mibBuilder.loadTexts: cldcClientStatus.setDescription('The object that represents the current status of the client.')
cldcClientWlanProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientWlanProfileName.setStatus('current')
if mibBuilder.loadTexts: cldcClientWlanProfileName.setDescription('This object specifies the WLAN Profile name this 802.11 wireless client is connected to.')
cldcClientWgbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("regClient", 1), ("wgbClient", 2), ("wgb", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientWgbStatus.setStatus('current')
if mibBuilder.loadTexts: cldcClientWgbStatus.setDescription("The object that represents the work group bridging status of a DOT11 client. 'regClient' - The client is a wireless client 'wgbClient' - The client is connected via a WGB 'wgb' - The client is the WGB itself.")
cldcClientWgbMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientWgbMacAddress.setStatus('current')
if mibBuilder.loadTexts: cldcClientWgbMacAddress.setDescription('This object specifies the MAC address of the WGB this 802.11 wireless client to which it is connected. This returns a non-zero value when the cldcClientWgbStatus is wgbClient.')
cldcClientProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("dot11a", 1), ("dot11b", 2), ("dot11g", 3), ("unknown", 4), ("mobile", 5), ("dot11n24", 6), ("dot11n5", 7), ("ethernet", 8), ("dot3", 9), ("dot11ac5", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientProtocol.setStatus('current')
if mibBuilder.loadTexts: cldcClientProtocol.setDescription("The 802.11 protocol type of the client. 'dot11a' - The client is using 802.11a standard to connect to the access point (AP) 'dot11b' - The client is using 802.11b standard to connect to the access point (AP) 'dot11g' - The client is using 802.11g standard to connect to the access point (AP) 'unknown' - The client protocol is unknown 'mobile' - The client using mobile wireless to connect to the access point (AP). 'dot11n24' - The client is using 802.11n standard with 2.4 GHz frequency to connect to the access point (AP) 'dot11n5' - The client is using 802.11n standard with 5 GHz frequency to connect to the access point (AP). 'ethernet' - The client is using ethernet standard to connect to the access point (AP). 'dot3' - The client is using dot3 standard to connect to the access point (AP). 'dot11ac5' - The client is using 802.11ac standard with 5 GHz frequency to connect to the access point (AP).")
cldcAssociationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("wep", 2), ("wpa", 3), ("wpa2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcAssociationMode.setStatus('current')
if mibBuilder.loadTexts: cldcAssociationMode.setDescription('The association mode for which the key decrypt error occurred.')
cldcApMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcApMacAddress.setStatus('current')
if mibBuilder.loadTexts: cldcApMacAddress.setDescription('This object specifies the radio MAC address of a LWAPP AP. ')
cldcIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 9), CLApIfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcIfType.setStatus('current')
if mibBuilder.loadTexts: cldcIfType.setDescription('This object specifies the wireless interface type.')
cldcClientIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientIPAddress.setStatus('current')
if mibBuilder.loadTexts: cldcClientIPAddress.setDescription(" This object specified client's IP address. ")
cldcClientNacState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("quarantine", 1), ("access", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldcClientNacState.setStatus('current')
if mibBuilder.loadTexts: cldcClientNacState.setDescription("This object specifies the client's network admission control state. 'quarantine' - The client goes through posture analysis and the client traffic is sent by controller in quarantine vlan. 'access' - The client traffic is sent by controller in access vlan. The client should have completed posture analysis. Posture Analysis is a state change where the client applies the configured policies to validate access to the network.")
cldcClientQuarantineVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 12), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientQuarantineVLAN.setStatus('current')
if mibBuilder.loadTexts: cldcClientQuarantineVLAN.setDescription('This object indicates the quarantine VLAN for client. The quarantine VLAN only allows limited access to the network.')
cldcClientAccessVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 13), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientAccessVLAN.setStatus('current')
if mibBuilder.loadTexts: cldcClientAccessVLAN.setDescription('This object indicates the access VLAN for client. The access VLAN allows unlimited access to the network.')
cldcClientLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientLoginTime.setStatus('current')
if mibBuilder.loadTexts: cldcClientLoginTime.setDescription('This object indicates the value of sysUpTime when the client logged in.')
cldcClientUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 15), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientUpTime.setStatus('current')
if mibBuilder.loadTexts: cldcClientUpTime.setDescription('This object indicates the duration for which the client has been associated with this device.')
cldcClientPowerSaveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 16), CLClientPowerSaveMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientPowerSaveMode.setStatus('current')
if mibBuilder.loadTexts: cldcClientPowerSaveMode.setDescription('This object indicates the power management mode of the client.')
cldcClientCurrentTxRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientCurrentTxRateSet.setReference('RFC 5416')
if mibBuilder.loadTexts: cldcClientCurrentTxRateSet.setStatus('current')
if mibBuilder.loadTexts: cldcClientCurrentTxRateSet.setDescription('This object indicates the current data rate at which the client transmits and receives data. The data rate field is a 16-bit unsigned value expressing the data rate of the packets received by the client.')
cldcClientDataRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientDataRateSet.setReference('RFC 5416')
if mibBuilder.loadTexts: cldcClientDataRateSet.setStatus('current')
if mibBuilder.loadTexts: cldcClientDataRateSet.setDescription('This object indicates the set of data rates at which the client may transmit data. Each client can support up to 126 rates. Each octet contains an integer value representing one of these 126 rates ranging from 1 Mb/s to 63.5 Mb/s. One of the supported rates will be chosen by the access point for trasnmission with the client.')
cldcClientHreapApAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientHreapApAuth.setStatus('current')
if mibBuilder.loadTexts: cldcClientHreapApAuth.setDescription("This object indicates whether the client is locally authenticated or authenticated by the controller. Local authentication is done only if the Access Point connected to the client is of hreap mode. A value of 'true' indicates that the client is locally authenticated. A value of 'false' indicates that the client is authenticated by the controller. A value of 'notApplicable' indicates that client is not connected to a HREAP.")
cldcClient80211uCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClient80211uCapable.setReference('IEEE 802.11u')
if mibBuilder.loadTexts: cldcClient80211uCapable.setStatus('current')
if mibBuilder.loadTexts: cldcClient80211uCapable.setDescription("This object indicates whether the client supports 802.11u feature. The 802.11u standard allows devices such as laptop computers or cellular phones to join a wireless LAN widely used in the home, office and some commercial establishments. A value of 'true' indicates that the client supports the 802.11u feature. A value of 'false' indicates that the client does not support the 802.11u feature.")
cldcClientPostureState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientPostureState.setStatus('current')
if mibBuilder.loadTexts: cldcClientPostureState.setDescription("This object indicates the Posture state of the client. Posture Analysis is a state change where the client applies the configured policies to validate access to the network. A value of 'true' indicates that the client supports the Posture feature. A value of 'false' indicates that the client does not support the Posture feature.")
cldcClientAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 22), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientAclName.setStatus('current')
if mibBuilder.loadTexts: cldcClientAclName.setDescription('This object indicates the ACL Name for the client.')
cldcClientAclApplied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientAclApplied.setStatus('current')
if mibBuilder.loadTexts: cldcClientAclApplied.setDescription("This object indicates the ACL applied status for the client. A value of 'true' indicates that the ACL is applied. A value of 'false' indicates that the ACL is not applied. A value of 'notAvailable' indicates that applied status is not available")
cldcClientRedirectUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 24), CiscoURLStringOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRedirectUrl.setStatus('current')
if mibBuilder.loadTexts: cldcClientRedirectUrl.setDescription('This object indicates the AAA override redirect URL for a client with cldcClientPostureState enabled. The object has a valid value when the WLAN, with which the client has associated requires Conditional or Splash-Page Web Redirection. This object is otherwise not applicable, and contains a zero-length string.')
cldcClientAaaOverrideAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 25), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientAaaOverrideAclName.setStatus('current')
if mibBuilder.loadTexts: cldcClientAaaOverrideAclName.setDescription('This object indicates the AAA Override ACL Name for the client if cldcClientPostureState is enabled on the wlan.')
cldcClientAaaOverrideAclApplied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientAaaOverrideAclApplied.setStatus('current')
if mibBuilder.loadTexts: cldcClientAaaOverrideAclApplied.setDescription("This object indicates the AAA Override ACL applied status for the client if cldcClientPostureState is enabled on the wlan. A value of 'true' indicates that the ACL is applied. A value of 'false' indicates that the ACL is not applied. A value of 'notAvailable' indicates that applied status is not available")
cldcClientUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 27), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientUsername.setStatus('current')
if mibBuilder.loadTexts: cldcClientUsername.setDescription('This object represents the username used by the client.')
cldcClientSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 28), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientSSID.setStatus('current')
if mibBuilder.loadTexts: cldcClientSSID.setDescription('This object represents the SSID of the WLAN to which the client is associated.')
cldcClientSecurityTagId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientSecurityTagId.setStatus('current')
if mibBuilder.loadTexts: cldcClientSecurityTagId.setDescription('This object represents the security group tag of the client. This parameter will have a non-zero value when the client is DOT1X authenticated.')
cldcClientTypeKTS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientTypeKTS.setStatus('current')
if mibBuilder.loadTexts: cldcClientTypeKTS.setDescription("This object indicates whether the Client is NEC KTS Client or not. A value of 'true' indicates that the client follows NEC KTS SIP protocol. A value of 'false' indicates that the client does not follow NEC KTS SIP protocol.")
cldcClientIpv6AclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientIpv6AclName.setStatus('current')
if mibBuilder.loadTexts: cldcClientIpv6AclName.setDescription('This object specifies the ACL Name for the Ipv6 client.')
cldcClientIpv6AclApplied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientIpv6AclApplied.setStatus('current')
if mibBuilder.loadTexts: cldcClientIpv6AclApplied.setDescription("This object indicates the ACL applied status for the IPv6 client. A value of 'true' indicates that the ACL is applied. A value of 'false' indicates that the ACL is not applied. A value of 'NotAvailable' indicates that applied status is not avaliable")
cldcClientDataSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("central", 2), ("local", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientDataSwitching.setStatus('current')
if mibBuilder.loadTexts: cldcClientDataSwitching.setDescription('This object specifies whether client is switching data locally or centrally.')
cldcClientAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("central", 2), ("local", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientAuthentication.setStatus('current')
if mibBuilder.loadTexts: cldcClientAuthentication.setDescription('This object specifies whether client is authentiated locally or centrally.')
cldcClientChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientChannel.setStatus('current')
if mibBuilder.loadTexts: cldcClientChannel.setDescription("This object specifies the access point's channel to which the client is associated.")
cldcClientAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 0), ("psk", 1), ("radius", 2), ("cckm", 3), ("wapipsk", 4), ("wapicert", 5), ("ftDot1x", 6), ("ftPsk", 7), ("pmfDot1x", 8), ("pmfPsk", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientAuthMode.setStatus('current')
if mibBuilder.loadTexts: cldcClientAuthMode.setDescription('Represents the Authentication Mode of Client.')
cldcClientReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 40, 41, 42, 43, 44, 45, 46, 99, 101, 105, 106, 200, 201, 202, 203))).clone(namedValues=NamedValues(("unspecified", 1), ("previousAuthNotValid", 2), ("deauthenticationLeaving", 3), ("disassociationDueToInactivity", 4), ("disassociationAPBusy", 5), ("class2FrameFromNonAuthStation", 6), ("class2FrameFromNonAssStation", 7), ("disassociationStaHasLeft", 8), ("staReqAssociationWithoutAuth", 9), ("invalidInformationElement", 40), ("groupCipherInvalid", 41), ("unicastCipherInvalid", 42), ("akmpInvalid", 43), ("unsupportedRsnVersion", 44), ("invalidRsnIeCapabilities", 45), ("cipherSuiteRejected", 46), ("missingReasonCode", 99), ("maxAssociatedClientsReached", 101), ("maxAssociatedClientsReachedOnRadio", 105), ("maxAssociatedClientsReachedOnWlan", 106), ("unSpecifiedQosFailure", 200), ("qosPolicyMismatch", 201), ("inSufficientBandwidth", 202), ("inValidQosParams", 203)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientReasonCode.setStatus('current')
if mibBuilder.loadTexts: cldcClientReasonCode.setDescription('unspecified - Unspecified. previousAuthNotValid - Previous Authentication was not valid. deauthenticationLeaving - Leaving due to deauthentication. disassociationDueToInactivity - Disassociation due to Inactivity. disassociationAPBusy - Disassociation since AP was busy. class2FrameFromNonAuthStation - Class 2 frame from non authenticated station. class2FrameFromNonAssStation - Class 2 frame from non associated station. disassociationStaHasLeft - Station has left due to disassociation. staReqAssociationWithoutAuth - Station send association request without authentication. invalidInformationElement - Invalid information element. groupCipherInvalid - Invalid group Cipher. unicastCipherInvalid - Invalid unicast cipher. akmpInvalid - Invalid AKMP. unsupportedRsnVersion - Unsupported RSN version. invalidRsnIeCapabilities - Invalid RSN IE capabilities. cipherSuiteRejected - Cipher suite rejected. missingReasonCode - Reason code is missing. maxAssociatedClientsReached - Maximum allowed associated client number has reached. maxAssociatedClientsReachedOnRadio - Maximum allowed associated client number has reached on radio. maxAssociatedClientsReachedOnWlan - Maximum allowed associated client number has reached on wlan. unSpecifiedQosFailure - Unsupported QOS failure. qosPolicyMismatch - Mismatch on QOS policy. inSufficientBandwidth - Insufficient bandwidth. inValidQosParams - Invalid QOS parameters.')
cldcClientSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 38), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientSessionID.setStatus('current')
if mibBuilder.loadTexts: cldcClientSessionID.setDescription('This object indicates the session to which the client is associated.')
cldcClientApRoamMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 39), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientApRoamMacAddress.setStatus('current')
if mibBuilder.loadTexts: cldcClientApRoamMacAddress.setDescription('This object indicates the MAC address of the AP to which the client has roamed.')
cldcClientMdnsProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 40), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientMdnsProfile.setStatus('current')
if mibBuilder.loadTexts: cldcClientMdnsProfile.setDescription('This object specifies the mDNS Profile name this 802.11 wireless client is mapped to. It could be mapped to the WLAN to which the client is connected to, or the interface/interface groups mapped to the WLAN.')
cldcClientMdnsAdvCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientMdnsAdvCount.setStatus('current')
if mibBuilder.loadTexts: cldcClientMdnsAdvCount.setDescription('This object specifies the number of mDNS advertisements received on the client.')
cldcClientPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 42), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientPolicyName.setStatus('current')
if mibBuilder.loadTexts: cldcClientPolicyName.setDescription('This object indicates the local classification policy to which the client is associated.')
cldcClientAAARole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 43), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientAAARole.setStatus('current')
if mibBuilder.loadTexts: cldcClientAAARole.setDescription('This object indicates the role string of the client that is used as match criterion for local policy profiling. This string is returned during authentication. ')
cldcClientDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 44), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientDeviceType.setStatus('current')
if mibBuilder.loadTexts: cldcClientDeviceType.setDescription('This object specifies the device type of the client. This is identified once the profiling operation is completed.')
cldcUserAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("open", 1), ("wepPsk", 2), ("portal", 3), ("simPeap", 4), ("other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcUserAuthType.setStatus('current')
if mibBuilder.loadTexts: cldcUserAuthType.setDescription('Represents the Authentication Type of User.')
cldcClientByIpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 2), )
if mibBuilder.loadTexts: cldcClientByIpTable.setStatus('current')
if mibBuilder.loadTexts: cldcClientByIpTable.setDescription('This table represents the 802.11 wireless clients that are associated with the APs that have joined this controller and are indexed by cldcClientByIpAddressType and cldcClientByIpAddress. An entry is created automatically by the controller when the client gets associated to the AP. An existing entry gets deleted when the association gets dropped.')
cldcClientByIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), (0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressType"), (0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddress"))
if mibBuilder.loadTexts: cldcClientByIpEntry.setStatus('current')
if mibBuilder.loadTexts: cldcClientByIpEntry.setDescription("Each entry represents a conceptual row in this table and provides the information about the clients associated to the APs that have joined the controller. An entry is identified by the client's IP address.")
cldcClientByIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cldcClientByIpAddressType.setStatus('current')
if mibBuilder.loadTexts: cldcClientByIpAddressType.setDescription("This object represents the type of the Client's address made available through cldcClientByIpAddress.")
cldcClientByIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 2, 1, 3), InetAddress())
if mibBuilder.loadTexts: cldcClientByIpAddress.setStatus('current')
if mibBuilder.loadTexts: cldcClientByIpAddress.setDescription('This object represents the inet address of the Client')
cldcClientByIpAddressDiscoverType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 1), ("ndp", 2), ("dhcp", 3), ("packet", 4), ("local", 5), ("static", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientByIpAddressDiscoverType.setStatus('current')
if mibBuilder.loadTexts: cldcClientByIpAddressDiscoverType.setDescription("This object represents the discovery type of the Client's address invalid(1) = unknown ndp(2) = Address learnt by neighbor discovery protocol dhcp(3) = Address learnt via DHCP packet(4) = Address learnt by data packet addressing learning local(5) = Address applied to local interface static(6) = Address assigned statically ")
cldcClientByIpAddressLastSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientByIpAddressLastSeen.setStatus('current')
if mibBuilder.loadTexts: cldcClientByIpAddressLastSeen.setDescription('This object indicates timestamp of the time when an address was last seen in REACHABLE state')
cldcSleepingClientTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 3), )
if mibBuilder.loadTexts: cldcSleepingClientTable.setStatus('current')
if mibBuilder.loadTexts: cldcSleepingClientTable.setDescription(' This table represents the information about Sleeping clients')
cldcSleepingClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcSleepingClientMacAddress"))
if mibBuilder.loadTexts: cldcSleepingClientEntry.setStatus('current')
if mibBuilder.loadTexts: cldcSleepingClientEntry.setDescription('An entry containing the information about sleeping clients.')
cldcSleepingClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: cldcSleepingClientMacAddress.setStatus('current')
if mibBuilder.loadTexts: cldcSleepingClientMacAddress.setDescription('This object specifies the MAC address of the sleeping client and uniquely identifies the entry.')
cldcSleepingClientSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcSleepingClientSsid.setStatus('current')
if mibBuilder.loadTexts: cldcSleepingClientSsid.setDescription('This object represents the SSID of the WLAN to which the sleeping client is associated.')
cldcSleepingClientUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcSleepingClientUserName.setStatus('current')
if mibBuilder.loadTexts: cldcSleepingClientUserName.setDescription('This object represents the username used by the sleeping client.')
cldcSleepingClientRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 3, 1, 4), TimeInterval()).setUnits('Hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcSleepingClientRemainingTime.setStatus('current')
if mibBuilder.loadTexts: cldcSleepingClientRemainingTime.setDescription('This object indicates the remaining session time for the sleeping client.')
cldcSleepingClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldcSleepingClientRowStatus.setStatus('current')
if mibBuilder.loadTexts: cldcSleepingClientRowStatus.setDescription('This is the status column for this row and used to delete specific instances of row in the table.')
cldcClientStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1), )
if mibBuilder.loadTexts: cldcClientStatisticTable.setStatus('current')
if mibBuilder.loadTexts: cldcClientStatisticTable.setDescription('This table lists statistics and status of the 802.11 wireless clients associated with the access points attached to the controller.')
cldcClientStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"))
if mibBuilder.loadTexts: cldcClientStatisticEntry.setStatus('current')
if mibBuilder.loadTexts: cldcClientStatisticEntry.setDescription('An entry in this table provides traffic statistics of the associated client based upon its Mac address.')
cldcClientDataRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 1), Counter64()).setUnits('Retries').setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientDataRetries.setStatus('current')
if mibBuilder.loadTexts: cldcClientDataRetries.setDescription('This object indicates the number of attempts made by the client before transmitting the MSDU successfully.')
cldcClientRtsRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 2), Counter64()).setUnits('Retries').setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRtsRetries.setStatus('current')
if mibBuilder.loadTexts: cldcClientRtsRetries.setDescription('This object indicates the number of times the client has attempted to send RTS packets before receiving CTS packets.')
cldcClientDuplicatePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 3), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientDuplicatePackets.setStatus('current')
if mibBuilder.loadTexts: cldcClientDuplicatePackets.setDescription('This object indicates the number of times a duplicate packet is received for the client.')
cldcClientDecryptFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 4), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientDecryptFailures.setStatus('current')
if mibBuilder.loadTexts: cldcClientDecryptFailures.setDescription('This object indicates the number of packets received from the client that failed to decrypt properly.')
cldcClientMicErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 5), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientMicErrors.setStatus('current')
if mibBuilder.loadTexts: cldcClientMicErrors.setDescription('This object indicates the number of MIC errors experienced by the client.')
cldcClientMicMissingFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientMicMissingFrames.setStatus('current')
if mibBuilder.loadTexts: cldcClientMicMissingFrames.setDescription('This object indicates the number of missing MIC packets for the client.')
cldcClientRaPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRaPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: cldcClientRaPacketsDropped.setDescription('This is the number of RA Packets dropped for this client.')
cldcClientInterimUpdatesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientInterimUpdatesCount.setStatus('current')
if mibBuilder.loadTexts: cldcClientInterimUpdatesCount.setDescription('This is the number of interim updates count sent for this client.')
cldcClientDataBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientDataBytesReceived.setStatus('current')
if mibBuilder.loadTexts: cldcClientDataBytesReceived.setDescription('This is the number data bytes received for this mobile station')
cldcClientRealtimeBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRealtimeBytesReceived.setStatus('current')
if mibBuilder.loadTexts: cldcClientRealtimeBytesReceived.setDescription('This is the number realtime bytes received for this mobile station')
cldcClientRxDataBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRxDataBytesDropped.setStatus('current')
if mibBuilder.loadTexts: cldcClientRxDataBytesDropped.setDescription('This is the number Rx data bytes dropped for this mobile station')
cldcClientRxRealtimeBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRxRealtimeBytesDropped.setStatus('current')
if mibBuilder.loadTexts: cldcClientRxRealtimeBytesDropped.setDescription('This is the number Rx realtime bytes dropped for this mobile station')
cldcClientDataBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientDataBytesSent.setStatus('current')
if mibBuilder.loadTexts: cldcClientDataBytesSent.setDescription('This is the number data bytes Sent for this mobile station')
cldcClientRealtimeBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRealtimeBytesSent.setStatus('current')
if mibBuilder.loadTexts: cldcClientRealtimeBytesSent.setDescription('This is the number realtime bytes Sent for this mobile station')
cldcClientTxDataBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientTxDataBytesDropped.setStatus('current')
if mibBuilder.loadTexts: cldcClientTxDataBytesDropped.setDescription('This is the number Tx data bytes dropped for this mobile station')
cldcClientTxRealtimeBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientTxRealtimeBytesDropped.setStatus('current')
if mibBuilder.loadTexts: cldcClientTxRealtimeBytesDropped.setDescription('This is the number Tx realtime bytes dropped for this mobile station')
cldcClientDataPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientDataPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: cldcClientDataPacketsReceived.setDescription('This is the number data Packets received for this mobile station')
cldcClientRealtimePacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRealtimePacketsReceived.setStatus('current')
if mibBuilder.loadTexts: cldcClientRealtimePacketsReceived.setDescription('This is the number realtime Packets received for this mobile station')
cldcClientRxDataPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRxDataPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: cldcClientRxDataPacketsDropped.setDescription('This is the number Rx data Packets dropped for this mobile station')
cldcClientRxRealtimePacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRxRealtimePacketsDropped.setStatus('current')
if mibBuilder.loadTexts: cldcClientRxRealtimePacketsDropped.setDescription('This is the number Rx realtime Packets dropped for this mobile station')
cldcClientDataPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientDataPacketsSent.setStatus('current')
if mibBuilder.loadTexts: cldcClientDataPacketsSent.setDescription('This is the number data Packets Sent for this mobile station')
cldcClientRealtimePacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRealtimePacketsSent.setStatus('current')
if mibBuilder.loadTexts: cldcClientRealtimePacketsSent.setDescription('This is the number realtime Packets Sent for this mobile station')
cldcClientTxDataPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientTxDataPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: cldcClientTxDataPacketsDropped.setDescription('This is the number Tx data Packets dropped for this mobile station')
cldcClientTxRealtimePacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientTxRealtimePacketsDropped.setStatus('current')
if mibBuilder.loadTexts: cldcClientTxRealtimePacketsDropped.setDescription('This is the number Tx realtime Packets dropped for this mobile station')
cldcClientTxDataPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientTxDataPackets.setStatus('current')
if mibBuilder.loadTexts: cldcClientTxDataPackets.setDescription('This is the number of data packets sent by this mobile station')
cldcClientTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientTxDataBytes.setStatus('current')
if mibBuilder.loadTexts: cldcClientTxDataBytes.setDescription('This is the number of data bytes sent by this mobile station')
cldcClientRxDataPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRxDataPackets.setStatus('current')
if mibBuilder.loadTexts: cldcClientRxDataPackets.setDescription('This is the number of data packets sent for this mobile station')
cldcClientRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRxDataBytes.setStatus('current')
if mibBuilder.loadTexts: cldcClientRxDataBytes.setDescription('This is the number of data bytes sent for this mobile station')
cldccCcxVersionInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 1, 1), )
if mibBuilder.loadTexts: cldccCcxVersionInfoTable.setStatus('current')
if mibBuilder.loadTexts: cldccCcxVersionInfoTable.setDescription('This table contains the detail of the CCX version supported by the clients. This is used to identify the services supported by a CCX v6 client.')
cldccCcxVersionInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"))
if mibBuilder.loadTexts: cldccCcxVersionInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cldccCcxVersionInfoEntry.setDescription('There is an entry in the table for each entry identified by the client mac address.')
cldccCcxFoundationServiceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 1, 1, 1, 1), CcxServiceVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccCcxFoundationServiceVersion.setStatus('current')
if mibBuilder.loadTexts: cldccCcxFoundationServiceVersion.setDescription('This is the CCX version supported by the client for the service, foundation.')
cldccCcxLocationServiceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 1, 1, 1, 2), CcxServiceVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccCcxLocationServiceVersion.setStatus('current')
if mibBuilder.loadTexts: cldccCcxLocationServiceVersion.setDescription('This is the CCX version supported by the client for the service, location.')
cldccCcxVoiceServiceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 1, 1, 1, 3), CcxServiceVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccCcxVoiceServiceVersion.setStatus('current')
if mibBuilder.loadTexts: cldccCcxVoiceServiceVersion.setDescription('This is the CCX version supported by the client for the service, voice.')
cldccCcxManagementServiceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 1, 1, 1, 4), CcxServiceVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccCcxManagementServiceVersion.setStatus('current')
if mibBuilder.loadTexts: cldccCcxManagementServiceVersion.setDescription('This is the CCX version supported by the client for the service, management.')
cldcKeyDecryptErrorEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldcKeyDecryptErrorEnabled.setStatus('current')
if mibBuilder.loadTexts: cldcKeyDecryptErrorEnabled.setDescription("The object to control the generation of ciscoLwappDot11ClientKeyDecryptError notification. A value of 'true' indicates that the agent generates ciscoLwappDot11ClientKeyDecryptError notification. A value of 'false' indicates that the agent doesn't generate ciscoLwappDot11ClientKeyDecryptError notification.")
cldcAssocNacAlertEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldcAssocNacAlertEnabled.setStatus('current')
if mibBuilder.loadTexts: cldcAssocNacAlertEnabled.setDescription("The object to control the generation of ciscoLwappDot11ClientAssocNacAlert notification. A value of 'true' indicates that the agent generates ciscoLwappDot11ClientAssocNacAlert notification. A value of 'false' indicates that the agent doesn't generate ciscoLwappDot11ClientAssocNacAlert notification.")
cldcDisassocNacAlertEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldcDisassocNacAlertEnabled.setStatus('current')
if mibBuilder.loadTexts: cldcDisassocNacAlertEnabled.setDescription("The object to control the generation of ciscoLwappDot11ClientDisassocNacAlert notification. A value of 'true' indicates that the agent generates ciscoLwappDot11ClientDisassocNacAlert notification. A value of 'false' indicates that the agent doesn't generate ciscoLwappDot11ClientDisassocNacAlert notification.")
cldcMovedToRunStateEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldcMovedToRunStateEnabled.setStatus('current')
if mibBuilder.loadTexts: cldcMovedToRunStateEnabled.setDescription("The object to control the generation of ciscoLwappDot11ClientMovedToRunState notification. A value of 'true' indicates that the agent generates ciscoLwappDot11ClientMovedToRunState notification. A value of 'false' indicates that the agent doesn't generate ciscoLwappDot11ClientMovedToRunState notification.")
ciscoLwappDot11ClientStaticIpFailTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLwappDot11ClientStaticIpFailTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11ClientStaticIpFailTrapEnabled.setDescription("The object to control the generation of ciscoLwappDot11ClientStaticIpFailTrap notification. A value of 'true' indicates that the agent generates ciscoLwappDot11ClientStaticIpFailTrap notification. A value of 'false' indicates that the agent doesn't generate ciscoLwappDot11ClientStaticIpFailTrap notification.")
cldcClientRSSI = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientRSSI.setStatus('current')
if mibBuilder.loadTexts: cldcClientRSSI.setDescription('This object specifies the average RSSI for the Mobile Station.')
cldcClientSNR = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientSNR.setStatus('current')
if mibBuilder.loadTexts: cldcClientSNR.setDescription('This object specifies the average SNR for the Mobile Station.')
cldcDOT11ClientReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 40, 41, 42, 43, 44, 45, 46, 99, 101, 105, 106, 200, 201, 202, 203))).clone(namedValues=NamedValues(("unspecified", 1), ("previousAuthNotValid", 2), ("deauthenticationLeaving", 3), ("disassociationDueToInactivity", 4), ("disassociationAPBusy", 5), ("class2FrameFromNonAuthStation", 6), ("class2FrameFromNonAssStation", 7), ("disassociationStaHasLeft", 8), ("staReqAssociationWithoutAuth", 9), ("invalidInformationElement", 40), ("groupCipherInvalid", 41), ("unicastCipherInvalid", 42), ("akmpInvalid", 43), ("unsupportedRsnVersion", 44), ("invalidRsnIeCapabilities", 45), ("cipherSuiteRejected", 46), ("missingReasonCode", 99), ("maxAssociatedClientsReached", 101), ("maxAssociatedClientsReachedOnRadio", 105), ("maxAssociatedClientsReachedOnWlan", 106), ("unSpecifiedQosFailure", 200), ("qosPolicyMismatch", 201), ("inSufficientBandwidth", 202), ("inValidQosParams", 203)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcDOT11ClientReasonCode.setStatus('current')
if mibBuilder.loadTexts: cldcDOT11ClientReasonCode.setDescription('unspecified - Unspecified. previousAuthNotValid - Previous Authentication was not valid. deauthenticationLeaving - Leaving due to deauthentication. disassociationDueToInactivity - Disassociation due to Inactivity. disassociationAPBusy - Disassociation since AP was busy. class2FrameFromNonAuthStation - Class 2 frame from non authenticated station. class2FrameFromNonAssStation - Class 2 frame from non associated station. disassociationStaHasLeft - Station has left due to disassociation. staReqAssociationWithoutAuth - Station send association request without authentication. invalidInformationElement - Invalid information element. groupCipherInvalid - Invalid group Cipher. unicastCipherInvalid - Invalid unicast cipher. akmpInvalid - Invalid AKMP. unsupportedRsnVersion - Unsupported RSN version. invalidRsnIeCapabilities - Invalid RSN IE capabilities. cipherSuiteRejected - Cipher suite rejected. missingReasonCode - Reason code is missing. maxAssociatedClientsReached - Maximum allowed. associated client number has reached. maxAssociatedClientsReachedOnRadio - Maximum allowed associated client number has reached on radio. maxAssociatedClientsReachedOnWlan - Maximum allowed associated client number has reached on wlan. unSpecifiedQosFailure - Unsupported QOS failure. qosPolicyMismatch - Mismatch on QOS policy. inSufficientBandwidth - Insufficient bandwidth. inValidQosParams - Invalid QOS parameters.')
cldcDOT11ClientTxDataPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcDOT11ClientTxDataPackets.setStatus('current')
if mibBuilder.loadTexts: cldcDOT11ClientTxDataPackets.setDescription('This is the number of data packets sent by this mobile station')
cldcDOT11ClientTxDataBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 5), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcDOT11ClientTxDataBytes.setStatus('current')
if mibBuilder.loadTexts: cldcDOT11ClientTxDataBytes.setDescription('This is the number of data bytes sent by this mobile station')
cldcDOT11ClientRxDataPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 6), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcDOT11ClientRxDataPackets.setStatus('current')
if mibBuilder.loadTexts: cldcDOT11ClientRxDataPackets.setDescription('This is the number of data packets sent for this mobile station')
cldcDOT11ClientRxDataBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 7), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcDOT11ClientRxDataBytes.setStatus('current')
if mibBuilder.loadTexts: cldcDOT11ClientRxDataBytes.setDescription('This is the number of data bytes sent for this mobile station')
cldcClientVlanId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientVlanId.setStatus('current')
if mibBuilder.loadTexts: cldcClientVlanId.setDescription('Vlan ID of the Interface to which the client is associated.')
cldcClientPolicyType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("dot1x", 1), ("wpa1", 2), ("wpa2", 3), ("wpa2vff", 4), ("notavailable", 5), ("unknown", 6), ("wapi", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPolicyType.setStatus('current')
if mibBuilder.loadTexts: cldcClientPolicyType.setDescription('Mode of the AP to which the Mobile Station is associated.')
cldcClientEapType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("eapTls", 1), ("ttls", 2), ("peap", 3), ("leap", 4), ("speke", 5), ("eapFast", 6), ("notavailable", 7), ("unknown", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientEapType.setStatus('current')
if mibBuilder.loadTexts: cldcClientEapType.setDescription('Mode of the AP to which the Mobile Station is associated.')
cldcClientAID = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 11), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientAID.setStatus('current')
if mibBuilder.loadTexts: cldcClientAID.setDescription('AID for the mobile station')
cldcClientAuthenticationAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 129))).clone(namedValues=NamedValues(("openSystem", 1), ("sharedKey", 2), ("unknown", 3), ("openAndEap", 129)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientAuthenticationAlgorithm.setStatus('current')
if mibBuilder.loadTexts: cldcClientAuthenticationAlgorithm.setDescription('Authentication Algorithm of Mobile Station ')
cldcClientWepState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientWepState.setStatus('current')
if mibBuilder.loadTexts: cldcClientWepState.setDescription('WEP State of Mobile Station')
cldcClientEncryptionCypher = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ccmpAes", 1), ("tkipMic", 2), ("wep40", 3), ("wep104", 4), ("wep128", 5), ("none", 6), ("notavailable", 7), ("unknown", 8), ("wapiSMS4", 9)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientEncryptionCypher.setStatus('current')
if mibBuilder.loadTexts: cldcClientEncryptionCypher.setDescription('Mode of the AP to which the Mobile Station is associated.')
cldcClientPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 15), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPortNumber.setStatus('current')
if mibBuilder.loadTexts: cldcClientPortNumber.setDescription('The Port Number of this Airespace Switch on which the traffic of the Mobile Station is coming through.')
cldcClientAnchorAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 16), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientAnchorAddressType.setStatus('current')
if mibBuilder.loadTexts: cldcClientAnchorAddressType.setDescription('This object indicates mobility Anchor address type.')
cldcClientAnchorAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 17), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientAnchorAddress.setStatus('current')
if mibBuilder.loadTexts: cldcClientAnchorAddress.setDescription('If the Mobility Status of the Mobile Station is Anchor then it will have Peer Ip Address and will have Anchor IP if the Role is Foreign')
cldcClientEssIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 517))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientEssIndex.setStatus('current')
if mibBuilder.loadTexts: cldcClientEssIndex.setDescription('Ess Index of the Wlan(SSID) that is being used by Mobile Station to connect to AP')
cldcClientCcxVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notSupported", 1), ("ccxv1", 2), ("ccxv2", 3), ("ccxv3", 4), ("ccxv4", 5), ("ccxv5", 6), ("ccxv6", 7))).clone('notSupported')).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientCcxVersion.setStatus('current')
if mibBuilder.loadTexts: cldcClientCcxVersion.setDescription('Represents the Cisco Compatible Extensions (CCX) Version the client is using for communication with the AP.')
cldcClientE2eVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("e2ev1", 2), ("e2ev2", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientE2eVersion.setStatus('current')
if mibBuilder.loadTexts: cldcClientE2eVersion.setDescription('Represents the End-2-End Version the client is using for communication with the AP.')
cldcClientInterface = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientInterface.setStatus('current')
if mibBuilder.loadTexts: cldcClientInterface.setDescription('Name of the Interface of the mobile client to the switch.')
cldcClientMobilityStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unassociated", 1), ("local", 2), ("anchor", 3), ("foreign", 4), ("handoff", 5), ("unknown", 6), ("exportanchor", 7), ("exportforeign", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientMobilityStatus.setStatus('current')
if mibBuilder.loadTexts: cldcClientMobilityStatus.setDescription('Mobility Role of the Mobile Station.')
cldcClientStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientStatusCode.setStatus('current')
if mibBuilder.loadTexts: cldcClientStatusCode.setDescription('Status Code of the Mobile Station')
cldcClientDeleteAction = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("delete", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientDeleteAction.setStatus('current')
if mibBuilder.loadTexts: cldcClientDeleteAction.setDescription('Action to Deauthenticate the Mobile Station. Set the State to delete.')
cldcClientSecurityPolicyStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("completed", 1), ("notcompleted", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientSecurityPolicyStatus.setStatus('current')
if mibBuilder.loadTexts: cldcClientSecurityPolicyStatus.setDescription('When this attribute has value completed, it shall indicate that the Mobile Station has completed the security policy checks. Otherwise the checks are yet to be completed.')
cldcClientTrapEventTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 26), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientTrapEventTime.setStatus('current')
if mibBuilder.loadTexts: cldcClientTrapEventTime.setDescription('This object represents the inet address of the Client.')
cldcClientPolicyManagerState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 27), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPolicyManagerState.setStatus('current')
if mibBuilder.loadTexts: cldcClientPolicyManagerState.setDescription('This object represents the current policy enforcement manager state of the client in controller.')
cldcClientAssocTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 28), TimeStamp()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientAssocTime.setStatus('current')
if mibBuilder.loadTexts: cldcClientAssocTime.setDescription('This object indicates the value of client association time')
cldcClientPmipDataValid = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 29), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipDataValid.setStatus('current')
if mibBuilder.loadTexts: cldcClientPmipDataValid.setDescription('This object represents whether client has valid PMIP data.')
cldcClientMobilityExtDataValid = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 30), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientMobilityExtDataValid.setStatus('current')
if mibBuilder.loadTexts: cldcClientMobilityExtDataValid.setDescription('This object represents new mobility status.')
cldcClientPolicyErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 31), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPolicyErrors.setStatus('current')
if mibBuilder.loadTexts: cldcClientPolicyErrors.setDescription('Number of Policy Errors for Mobile Station')
cldcClientSessionId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 32), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientSessionId.setStatus('current')
if mibBuilder.loadTexts: cldcClientSessionId.setDescription('This object indicates the session to which the client is associated.')
cldcClientPmipNai = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 33), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipNai.setStatus('current')
if mibBuilder.loadTexts: cldcClientPmipNai.setDescription('This object indicates the name of the profile, the client is associated to.')
cldcClientPmipState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 34), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipState.setStatus('current')
if mibBuilder.loadTexts: cldcClientPmipState.setDescription("This object indicates the state of the PMIP client: null: binding doesn't exist init: binding created, Retx timer running for PBU, binding not yet accepted from LMA, Tunnel/route is not yet setup active: binding accepted by LMA, refresh timer running, Tunnel/route setup complete. refreshPending: Refresh timer expired and Retx timer running. PBU refresh sent, PBA not yet received from LMA, (Tunnel/route is already setup). disconnectingSt: Dereg reply is expected. Retx timer is running, tunnel/route is still setup.")
cldcClientPmipInterface = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 35), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipInterface.setStatus('current')
if mibBuilder.loadTexts: cldcClientPmipInterface.setDescription('This object indicates the interface to which the client is associated.')
cldcClientPmipHomeAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 36), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipHomeAddrType.setStatus('current')
if mibBuilder.loadTexts: cldcClientPmipHomeAddrType.setDescription("This object indicates the type of the Client's Home address made available through cldcClientPmipHomeAddress.")
cldcClientPmipHomeAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 37), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipHomeAddr.setStatus('current')
if mibBuilder.loadTexts: cldcClientPmipHomeAddr.setDescription('This object indicates the Home Address of the client.')
cldcClientPmipAtt = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("reserved", 1), ("logicalNetworkInterface", 2), ("pointToPointInterface", 3), ("ethernet", 4), ("wirelessLan", 5), ("wimax", 6), ("threeGPPGERAN", 7), ("threeGPPUTRAN", 8), ("threeGPPETRAN", 9), ("threeGPP2eHRPD", 10), ("threeGPP2HRPD", 11), ("threeGPP21xRTT", 12), ("threeGPP2UMB", 13)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipAtt.setStatus('current')
if mibBuilder.loadTexts: cldcClientPmipAtt.setDescription('This object indicates the access technology type by which the client is currently attached.')
cldcClientPmipLocalLinkId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 39), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipLocalLinkId.setStatus('current')
if mibBuilder.loadTexts: cldcClientPmipLocalLinkId.setDescription('This object indicates the local link identifier of the client.')
cldcClientPmipLmaName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 40), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipLmaName.setStatus('current')
if mibBuilder.loadTexts: cldcClientPmipLmaName.setDescription('This object indicates the LMA to which the client is connected.')
cldcClientPmipLifeTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 41), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipLifeTime.setStatus('current')
if mibBuilder.loadTexts: cldcClientPmipLifeTime.setDescription('This object indicates the duration of the PMIP client association.')
cldcClientPmipDomainName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 42), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipDomainName.setStatus('current')
if mibBuilder.loadTexts: cldcClientPmipDomainName.setDescription('This object indicates the domain to which the PMIP client is associated.')
cldcClientPmipUpKey = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 43), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipUpKey.setStatus('current')
if mibBuilder.loadTexts: cldcClientPmipUpKey.setDescription('This object indicates the upstream key of the PMIP client.')
cldcClientPmipDownKey = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 44), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipDownKey.setStatus('current')
if mibBuilder.loadTexts: cldcClientPmipDownKey.setDescription('This object indicates the downstream key of the PMIP client.')
ciscoLwappDot11ClientKeyDecryptError = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 1)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcAssociationMode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcIfType"), ("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthMode"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientKeyDecryptError.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11ClientKeyDecryptError.setDescription('This notification is generated when a decrypt error occurs. The WEP WPA or WPA2 Key configured at the station may be wrong. cldcAssociationMode represents the association mode for which the key decrypt error occurred. cldcApMacAddress represents the MacAddress of the AP to which the client is associated. cldcIfType represents the wireless interface type of the client. cLApName represents the name of the AP to which the client is associated.')
ciscoLwappDot11ClientAssocNacAlert = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 2)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWlanProfileName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientIPAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientQuarantineVLAN"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAccessVLAN"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthMode"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientAssocNacAlert.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11ClientAssocNacAlert.setDescription("This notification is generated when the client on NAC enabled SSIDs complete layer2 authentication . This is to inform about client's presence to the NAC appliance. cldcClientWlanProfileName represents the profile name of the WLAN, this 802.11 wireless client is connected to. cldcClientIPAddress represents the unique ipaddress of the client. cldcApMacAddress represents the MacAddress of the AP to which the client is associated. cldcClientQuarantineVLAN represents the quarantine VLAN for the client. cldcClientAccessVLAN represents the access VLAN for the client.")
ciscoLwappDot11ClientDisassocNacAlert = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 3)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWlanProfileName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientIPAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientQuarantineVLAN"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAccessVLAN"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientDisassocNacAlert.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11ClientDisassocNacAlert.setDescription("This notification is generated when the controller removes the client entry on NAC enabled SSIDs. cldcClientWlanProfileName represents the profile name of the WLAN, this 802.11 wireless client is connected to. cldcClientIPAddress represents the unique ipaddress of the client. cldcApMacAddress represents the MacAddress of the AP to which the client is associated. cldcClientQuarantineVLAN represents the quarantine VLAN for the client. cldcClientAccessVLAN represents the access VLAN for the client. This is issued on NAC enabled ssids, whenever WLC removes client's entry.")
ciscoLwappDot11ClientMovedToRunState = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 4)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientIPAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUsername"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSSID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-AP-MIB", "cLApName"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientMovedToRunState.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11ClientMovedToRunState.setDescription('This notification is generated when the client completes the PEM state and moves to the RUN state. cldcClientUsername represents the username used by the client. cldcClientIPAddress represents the unique ipaddress of the client. cldcClientSSID represents the SSID of the WLAN to which the client is associated. cldcApMacAddress represents the MacAddress of the AP to which the client is associated. cLApDot11IfSlotId represents the slotId of the AP to which the client is associated. cLApName represents the name of the AP to which the client is associated.')
ciscoLwappDot11ClientStaticIpFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 5)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientIPAddress"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientStaticIpFailTrap.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11ClientStaticIpFailTrap.setDescription('This is issued whenever the subnet defined for the Static IP of a Client is not found.')
ciscoLwappDot11ClientDisassocDataStatsTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 6)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientReasonCode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUsername"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSSID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSessionID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTxDataPackets"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTxDataBytes"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRxDataPackets"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRxDataBytes"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientDisassocDataStatsTrap.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11ClientDisassocDataStatsTrap.setDescription('The disassociate notification shall be sent when the Station sends a Disassociation frame. The value of the notification shall include the MAC address of the MAC to which the Disassociation frame was sent and the reason for the disassociation')
ciscoLwappDot11ClientAssocDataStatsTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 7)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUsername"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientApRoamMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSSID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTxDataPackets"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTxDataBytes"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRxDataPackets"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRxDataBytes"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientAssocDataStatsTrap.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11ClientAssocDataStatsTrap.setDescription('The associate notification shall be sent when the Station sends a association frame.')
ciscoLwappDot11ClientSessionTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 8)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUsername"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSSID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSessionID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientSessionTrap.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11ClientSessionTrap.setDescription('Issued when the client completes the PEM state and moves to the RUN state.')
ciscoLwappDot11ClientAssocTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 9)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTrapEventTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPolicyType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSSID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthenticationAlgorithm"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEncryptionCypher"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPortNumber"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAnchorAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAnchorAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEssIndex"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWlanProfileName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWgbStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWgbMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientCcxVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientE2eVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientInterface"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClient80211uCapable"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMobilityStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRSSI"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSNR"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSecurityPolicyStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientLoginTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAssocTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientCurrentTxRateSet"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataRateSet"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientHreapApAuth"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxFoundationServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxLocationServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxVoiceServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxManagementServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataSwitching"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthentication"), ("CISCO-LWAPP-AP-MIB", "cLApDot11RadioChannelNumber"), ("CISCO-LWAPP-AP-MIB", "cLApIfLoadChannelUtilization"), ("CISCO-LWAPP-AP-MIB", "cLApLocation"), ("CISCO-LWAPP-AP-MIB", "cLAPGroupVlanName"), ("CISCO-LWAPP-AP-MIB", "cLApSubMode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientIPAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSessionId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientVlanId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientProtocol"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEapType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPolicyErrors"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataRetries"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRtsRetries"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataBytesSent"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataBytesReceived"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataPacketsSent"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataPacketsReceived"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTxDataBytesDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRxDataBytesDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTxDataPacketsDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRxDataPacketsDropped"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientAssocTrap.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11ClientAssocTrap.setDescription('The notification shall be sent when the Station associats to controller.')
ciscoLwappDot11ClientDeAuthenticatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 10)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTrapEventTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUpTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPostureState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientProtocol"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientVlanId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPolicyType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEapType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSSID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthenticationAlgorithm"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWepState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEncryptionCypher"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPortNumber"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAnchorAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAnchorAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEssIndex"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWlanProfileName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWgbStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWgbMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientCcxVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientE2eVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientInterface"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClient80211uCapable"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMobilityStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRSSI"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSNR"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataRetries"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRtsRetries"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUsername"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcDOT11ClientReasonCode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientStatusCode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDeleteAction"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSecurityPolicyStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientNacState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientLoginTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAssocTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientCurrentTxRateSet"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataRateSet"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientHreapApAuth"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxFoundationServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxLocationServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxVoiceServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxManagementServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataSwitching"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthentication"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressDiscoverType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressLastSeen"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPowerSaveMode"), ("CISCO-LWAPP-AP-MIB", "cLApDot11RadioChannelNumber"), ("CISCO-LWAPP-AP-MIB", "cLApIfLoadChannelUtilization"), ("CISCO-LWAPP-AP-MIB", "cLApLocation"), ("CISCO-LWAPP-AP-MIB", "cLAPGroupVlanName"), ("CISCO-LWAPP-AP-MIB", "cLApSubMode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientIPAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPolicyErrors"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPolicyManagerState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataBytesSent"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataBytesReceived"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataPacketsSent"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataPacketsReceived"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTxDataBytesDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRxDataBytesDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTxDataPacketsDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRxDataPacketsDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSessionId"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientDeAuthenticatedTrap.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11ClientDeAuthenticatedTrap.setDescription('The notification shall be sent when the Station gets de-authenticated.')
ciscoLwappDot11ClientMovedToRunStateNewTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 11)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTrapEventTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPostureState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientProtocol"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientVlanId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPolicyType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEapType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWlanProfileName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthenticationAlgorithm"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWepState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEncryptionCypher"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPortNumber"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAnchorAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAnchorAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEssIndex"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWgbStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWgbMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientCcxVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientE2eVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClient80211uCapable"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMobilityStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRSSI"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSNR"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataRetries"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRtsRetries"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUsername"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientStatusCode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSecurityPolicyStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientNacState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientLoginTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataRateSet"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientHreapApAuth"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxFoundationServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxLocationServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxVoiceServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxManagementServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataSwitching"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthentication"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressDiscoverType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressLastSeen"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPowerSaveMode"), ("CISCO-LWAPP-AP-MIB", "cLApDot11RadioChannelNumber"), ("CISCO-LWAPP-AP-MIB", "cLApIfLoadChannelUtilization"), ("CISCO-LWAPP-AP-MIB", "cLApSubMode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientIPAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPolicyManagerState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipNai"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipInterface"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipHomeAddrType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipHomeAddr"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipAtt"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipLocalLinkId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipDomainName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipLmaName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipUpKey"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipDownKey"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipLifeTime"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAnchorMCPrivateAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAnchorMCPrivateAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociatedMAAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociatedMAAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociatedMCAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociatedMCAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociatedMCGroupId"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAnchorMCGroupId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipDataValid"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMobilityExtDataValid"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSessionId"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientMovedToRunStateNewTrap.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11ClientMovedToRunStateNewTrap.setDescription('The notification shall be sent when the Station moves to run or authenticated state.')
ciscoLwappDot11ClientMobilityTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 12)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTrapEventTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUpTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPostureState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientProtocol"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientVlanId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPolicyType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEapType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSSID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthenticationAlgorithm"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWepState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEncryptionCypher"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPortNumber"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAnchorAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAnchorAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEssIndex"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWlanProfileName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWgbStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWgbMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientCcxVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientE2eVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientInterface"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClient80211uCapable"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMobilityStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRSSI"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSNR"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataRetries"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRtsRetries"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUsername"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcDOT11ClientReasonCode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientStatusCode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDeleteAction"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSecurityPolicyStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientNacState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientLoginTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAssocTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientCurrentTxRateSet"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataRateSet"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientHreapApAuth"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxFoundationServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxLocationServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxVoiceServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxManagementServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataSwitching"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthentication"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressDiscoverType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressLastSeen"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPowerSaveMode"), ("CISCO-LWAPP-AP-MIB", "cLApDot11RadioChannelNumber"), ("CISCO-LWAPP-AP-MIB", "cLApIfLoadChannelUtilization"), ("CISCO-LWAPP-AP-MIB", "cLApLocation"), ("CISCO-LWAPP-AP-MIB", "cLAPGroupVlanName"), ("CISCO-LWAPP-AP-MIB", "cLApSubMode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientIPAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPolicyErrors"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPolicyManagerState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataBytesSent"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataBytesReceived"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataPacketsSent"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataPacketsReceived"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTxDataBytesDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRxDataBytesDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTxDataPacketsDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRxDataPacketsDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSessionId"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientMobilityTrap.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11ClientMobilityTrap.setDescription('The notification shall be sent when the Station gets roamed.')
ciscoLwappDot11ClientMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 2, 1))
ciscoLwappDot11ClientMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 2, 2))
ciscoLwappDot11ClientMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 599, 2, 1, 1)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientMIBConfigGroup"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientMIBNotifsGroup"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientMIBStatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11ClientMIBCompliance = ciscoLwappDot11ClientMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappDot11ClientMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement this MIB. ')
ciscoLwappDot11ClientMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 599, 2, 1, 2)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientMIBConfigGroup"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientMIBNotifsGroup"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientMIBStatusGroup"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientMIBStatusGroupRev2"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientMIBNotifsGroupRev2"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientMIBNotifControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11ClientMIBComplianceRev2 = ciscoLwappDot11ClientMIBComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11ClientMIBComplianceRev2.setDescription('The compliance statement for the SNMP entities that implement this MIB.')
ciscoLwappDot11ClientMIBConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 599, 2, 2, 1)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcKeyDecryptErrorEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11ClientMIBConfigGroup = ciscoLwappDot11ClientMIBConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11ClientMIBConfigGroup.setDescription('This collection of objects specifies the required configuration parameters for the 802.11 wireless clients.')
ciscoLwappDot11ClientMIBNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 599, 2, 2, 2)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientKeyDecryptError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11ClientMIBNotifsGroup = ciscoLwappDot11ClientMIBNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11ClientMIBNotifsGroup.setDescription('This collection of objects specifies the notifications for the 802.11 wireless clients.')
ciscoLwappDot11ClientMIBStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 599, 2, 2, 3)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWlanProfileName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWgbStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWgbMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientProtocol"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcAssociationMode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcIfType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientIPAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientNacState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientQuarantineVLAN"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAccessVLAN"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11ClientMIBStatusGroup = ciscoLwappDot11ClientMIBStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11ClientMIBStatusGroup.setDescription('This collection of objects specifies the required status parameters for the 802.11 wireless clients.')
ciscoLwappDot11ClientMIBStatusGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 599, 2, 2, 4)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientLoginTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUpTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPowerSaveMode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientCurrentTxRateSet"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataRateSet"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientHreapApAuth"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClient80211uCapable"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataRetries"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRtsRetries"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDuplicatePackets"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDecryptFailures"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMicErrors"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMicMissingFrames"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientIPAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientNacState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientQuarantineVLAN"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAccessVLAN"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPostureState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAclName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAclApplied"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRedirectUrl"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAaaOverrideAclName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAaaOverrideAclApplied"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUsername"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSSID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11ClientMIBStatusGroupRev2 = ciscoLwappDot11ClientMIBStatusGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11ClientMIBStatusGroupRev2.setDescription('This collection of objects specifies the required status parameters for the 802.11 wireless clients.')
ciscoLwappDot11ClientMIBNotifsGroupRev2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 599, 2, 2, 5)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientAssocNacAlert"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientDisassocNacAlert"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientMovedToRunState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11ClientMIBNotifsGroupRev2 = ciscoLwappDot11ClientMIBNotifsGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11ClientMIBNotifsGroupRev2.setDescription('This collection of objects represents the notifications for the 802.11 wireless clients.')
ciscoLwappDot11ClientMIBNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 599, 2, 2, 6)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcAssocNacAlertEnabled"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcDisassocNacAlertEnabled"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcMovedToRunStateEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11ClientMIBNotifControlGroup = ciscoLwappDot11ClientMIBNotifControlGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11ClientMIBNotifControlGroup.setDescription('This collection of objects represents the objects that control the notifications for the 802.11 wireless clients.')
mibBuilder.exportSymbols("CISCO-LWAPP-DOT11-CLIENT-MIB", cldcSleepingClientTable=cldcSleepingClientTable, cldcClientTrapEventTime=cldcClientTrapEventTime, cldcClientPmipDataValid=cldcClientPmipDataValid, cldcClientPolicyManagerState=cldcClientPolicyManagerState, cldcClientPmipAtt=cldcClientPmipAtt, cldcClientMobilityExtDataValid=cldcClientMobilityExtDataValid, cldcClientDataBytesSent=cldcClientDataBytesSent, cldcClientMdnsAdvCount=cldcClientMdnsAdvCount, cldcClientDecryptFailures=cldcClientDecryptFailures, cldcClientAuthentication=cldcClientAuthentication, ciscoLwappDot11ClientMovedToRunState=ciscoLwappDot11ClientMovedToRunState, cldcClientQuarantineVLAN=cldcClientQuarantineVLAN, cldccCcxVoiceServiceVersion=cldccCcxVoiceServiceVersion, cldcClientRtsRetries=cldcClientRtsRetries, cldcClientPmipDownKey=cldcClientPmipDownKey, cldcClientPmipNai=cldcClientPmipNai, cldcClientReasonCode=cldcClientReasonCode, cldcClientHreapApAuth=cldcClientHreapApAuth, cldcClientPostureState=cldcClientPostureState, cldcClientDataPacketsSent=cldcClientDataPacketsSent, cldcClientRxRealtimePacketsDropped=cldcClientRxRealtimePacketsDropped, cldcClientAnchorAddressType=cldcClientAnchorAddressType, cldcClientChannel=cldcClientChannel, cldcStatisticObjects=cldcStatisticObjects, cldcClientStatus=cldcClientStatus, cldcClientByIpAddressDiscoverType=cldcClientByIpAddressDiscoverType, cldcAssocNacAlertEnabled=cldcAssocNacAlertEnabled, cldcClientRealtimePacketsSent=cldcClientRealtimePacketsSent, cldcClientSecurityPolicyStatus=cldcClientSecurityPolicyStatus, cldcClientCurrentTxRateSet=cldcClientCurrentTxRateSet, ciscoLwappDot11ClientMIBNotifControlGroup=ciscoLwappDot11ClientMIBNotifControlGroup, cldcClientUpTime=cldcClientUpTime, cldcClientSessionID=cldcClientSessionID, cldcClientRxDataPackets=cldcClientRxDataPackets, ciscoLwappDot11ClientAssocDataStatsTrap=ciscoLwappDot11ClientAssocDataStatsTrap, cldcDOT11ClientRxDataPackets=cldcDOT11ClientRxDataPackets, ciscoLwappDot11ClientMIBComplianceRev2=ciscoLwappDot11ClientMIBComplianceRev2, cldcClientDataSwitching=cldcClientDataSwitching, cldcClientPolicyName=cldcClientPolicyName, ciscoLwappDot11ClientMIBGroups=ciscoLwappDot11ClientMIBGroups, ciscoLwappDot11ClientMIBObjects=ciscoLwappDot11ClientMIBObjects, cldcClientPolicyErrors=cldcClientPolicyErrors, cldcClientRealtimeBytesSent=cldcClientRealtimeBytesSent, cldcNotifObjects=cldcNotifObjects, cldcClientWgbMacAddress=cldcClientWgbMacAddress, cldcSleepingClientUserName=cldcSleepingClientUserName, cldcCcxObjects=cldcCcxObjects, cldcKeyDecryptErrorEnabled=cldcKeyDecryptErrorEnabled, cldcClientByIpAddressLastSeen=cldcClientByIpAddressLastSeen, ciscoLwappDot11ClientStaticIpFailTrap=ciscoLwappDot11ClientStaticIpFailTrap, cldcClientAaaOverrideAclName=cldcClientAaaOverrideAclName, ciscoLwappDot11ClientMIBConform=ciscoLwappDot11ClientMIBConform, ciscoLwappDot11ClientStaticIpFailTrapEnabled=ciscoLwappDot11ClientStaticIpFailTrapEnabled, cldcClientCcxVersion=cldcClientCcxVersion, cldcClientRaPacketsDropped=cldcClientRaPacketsDropped, ciscoLwappDot11ClientMIBNotifsGroupRev2=ciscoLwappDot11ClientMIBNotifsGroupRev2, ciscoLwappDot11ClientMIBCompliance=ciscoLwappDot11ClientMIBCompliance, cldcDOT11ClientTxDataBytes=cldcDOT11ClientTxDataBytes, cldccCcxManagementServiceVersion=cldccCcxManagementServiceVersion, ciscoLwappDot11ClientMIBConfigGroup=ciscoLwappDot11ClientMIBConfigGroup, cldcClientIpv6AclApplied=cldcClientIpv6AclApplied, cldcClientByIpEntry=cldcClientByIpEntry, cldcClientEntry=cldcClientEntry, cldccCcxFoundationServiceVersion=cldccCcxFoundationServiceVersion, cldcClientSNR=cldcClientSNR, cldcClientDataPacketsReceived=cldcClientDataPacketsReceived, cldcClientAID=cldcClientAID, cldcClientPortNumber=cldcClientPortNumber, cldcClientPolicyType=cldcClientPolicyType, cldcClientPmipHomeAddrType=cldcClientPmipHomeAddrType, cldcClientTxDataBytesDropped=cldcClientTxDataBytesDropped, cldccCcxVersionInfoTable=cldccCcxVersionInfoTable, cldcClientMdnsProfile=cldcClientMdnsProfile, cldcSleepingClientSsid=cldcSleepingClientSsid, cldcClientWlanProfileName=cldcClientWlanProfileName, cldcConfigObjects=cldcConfigObjects, cldcClientPowerSaveMode=cldcClientPowerSaveMode, cldcClientDataRetries=cldcClientDataRetries, cldcClientMacAddress=cldcClientMacAddress, cldcClientIPAddress=cldcClientIPAddress, cldcClientStatisticEntry=cldcClientStatisticEntry, cldcClientByIpAddress=cldcClientByIpAddress, ciscoLwappDot11ClientCcxMIBObjects=ciscoLwappDot11ClientCcxMIBObjects, ciscoLwappDot11ClientMIBStatusGroupRev2=ciscoLwappDot11ClientMIBStatusGroupRev2, cldcClientDuplicatePackets=cldcClientDuplicatePackets, cldcClientRxDataPacketsDropped=cldcClientRxDataPacketsDropped, cldcAssociationMode=cldcAssociationMode, cldcClientEssIndex=cldcClientEssIndex, ciscoLwappDot11ClientMovedToRunStateNewTrap=ciscoLwappDot11ClientMovedToRunStateNewTrap, cldcClientRealtimeBytesReceived=cldcClientRealtimeBytesReceived, cldcClientStatisticTable=cldcClientStatisticTable, ciscoLwappDot11ClientMIBStatusGroup=ciscoLwappDot11ClientMIBStatusGroup, cldcClientPmipHomeAddr=cldcClientPmipHomeAddr, cldcClientTxRealtimePacketsDropped=cldcClientTxRealtimePacketsDropped, cldcClientTxRealtimeBytesDropped=cldcClientTxRealtimeBytesDropped, cldcClientEncryptionCypher=cldcClientEncryptionCypher, cldcClientTypeKTS=cldcClientTypeKTS, cldcClientLoginTime=cldcClientLoginTime, cldcClientInterface=cldcClientInterface, cldcMovedToRunStateEnabled=cldcMovedToRunStateEnabled, cldcClientApRoamMacAddress=cldcClientApRoamMacAddress, cldcClientVlanId=cldcClientVlanId, cldcClientWepState=cldcClientWepState, cldcDOT11ClientReasonCode=cldcDOT11ClientReasonCode, cldcClientEapType=cldcClientEapType, cldcClientRedirectUrl=cldcClientRedirectUrl, ciscoLwappDot11ClientAssocTrap=ciscoLwappDot11ClientAssocTrap, cldcClientAuthMode=cldcClientAuthMode, cldcClientPmipLmaName=cldcClientPmipLmaName, cldcClientSSID=cldcClientSSID, cldcClient80211uCapable=cldcClient80211uCapable, cldcClientPmipUpKey=cldcClientPmipUpKey, cldcSleepingClientEntry=cldcSleepingClientEntry, cldcClientMicMissingFrames=cldcClientMicMissingFrames, cldcClientDeleteAction=cldcClientDeleteAction, cldcStatusObjects=cldcStatusObjects, cldcClientWgbStatus=cldcClientWgbStatus, cldcClientAclName=cldcClientAclName, cldcClientDeviceType=cldcClientDeviceType, cldcSleepingClientRowStatus=cldcSleepingClientRowStatus, cldcSleepingClientRemainingTime=cldcSleepingClientRemainingTime, cldcClientAnchorAddress=cldcClientAnchorAddress, ciscoLwappDot11ClientAssocNacAlert=ciscoLwappDot11ClientAssocNacAlert, ciscoLwappDot11ClientDisassocNacAlert=ciscoLwappDot11ClientDisassocNacAlert, cldcClientStatusCode=cldcClientStatusCode, ciscoLwappDot11ClientMIB=ciscoLwappDot11ClientMIB, cldcClientInterimUpdatesCount=cldcClientInterimUpdatesCount, cldcClientRxRealtimeBytesDropped=cldcClientRxRealtimeBytesDropped, cldcClientTxDataPacketsDropped=cldcClientTxDataPacketsDropped, cldcClientE2eVersion=cldcClientE2eVersion, cldccCcxLocationServiceVersion=cldccCcxLocationServiceVersion, ciscoLwappDot11ClientDeAuthenticatedTrap=ciscoLwappDot11ClientDeAuthenticatedTrap, cldcDisassocNacAlertEnabled=cldcDisassocNacAlertEnabled, cldcClientRealtimePacketsReceived=cldcClientRealtimePacketsReceived, cldcClientDataRateSet=cldcClientDataRateSet, cldcClientAaaOverrideAclApplied=cldcClientAaaOverrideAclApplied, cldcClientMicErrors=cldcClientMicErrors, cldcClientAAARole=cldcClientAAARole, cldccCcxVersionInfoEntry=cldccCcxVersionInfoEntry, cldcApMacAddress=cldcApMacAddress, cldcClientRSSI=cldcClientRSSI, ciscoLwappDot11ClientMIBNotifsGroup=ciscoLwappDot11ClientMIBNotifsGroup, PYSNMP_MODULE_ID=ciscoLwappDot11ClientMIB, cldcClientPmipLocalLinkId=cldcClientPmipLocalLinkId, ciscoLwappDot11ClientSessionTrap=ciscoLwappDot11ClientSessionTrap, ciscoLwappDot11ClientMobilityTrap=ciscoLwappDot11ClientMobilityTrap, cldcClientAuthenticationAlgorithm=cldcClientAuthenticationAlgorithm, cldcClientProtocol=cldcClientProtocol, cldcSleepingClientMacAddress=cldcSleepingClientMacAddress, ciscoLwappDot11ClientMIBCompliances=ciscoLwappDot11ClientMIBCompliances, cldcClientIpv6AclName=cldcClientIpv6AclName, cldcClientAclApplied=cldcClientAclApplied, cldcClientRxDataBytes=cldcClientRxDataBytes, ciscoLwappDot11ClientKeyDecryptError=ciscoLwappDot11ClientKeyDecryptError, cldcClientNacState=cldcClientNacState, cldcClientAccessVLAN=cldcClientAccessVLAN, cldcClientTxDataBytes=cldcClientTxDataBytes, cldcClientPmipInterface=cldcClientPmipInterface, cldcClientTable=cldcClientTable, cldcClientByIpTable=cldcClientByIpTable, cldcClientPmipLifeTime=cldcClientPmipLifeTime, cldcClientRxDataBytesDropped=cldcClientRxDataBytesDropped, cldcClientSessionId=cldcClientSessionId, cldcClientUsername=cldcClientUsername, cldcClientByIpAddressType=cldcClientByIpAddressType, cldcClientDataBytesReceived=cldcClientDataBytesReceived, ciscoLwappDot11ClientMIBNotifs=ciscoLwappDot11ClientMIBNotifs, cldcClientTxDataPackets=cldcClientTxDataPackets, ciscoLwappDot11ClientDisassocDataStatsTrap=ciscoLwappDot11ClientDisassocDataStatsTrap, cldcUserAuthType=cldcUserAuthType, cldcIfType=cldcIfType, cldcClientSecurityTagId=cldcClientSecurityTagId, cldcDOT11ClientTxDataPackets=cldcDOT11ClientTxDataPackets, cldcDOT11ClientRxDataBytes=cldcDOT11ClientRxDataBytes, cldcClientAssocTime=cldcClientAssocTime, cldcClientPmipDomainName=cldcClientPmipDomainName, cldcClientMobilityStatus=cldcClientMobilityStatus, cldcClientPmipState=cldcClientPmipState)
