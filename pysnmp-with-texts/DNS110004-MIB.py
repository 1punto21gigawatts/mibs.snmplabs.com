#
# PySNMP MIB module DNS110004-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DNS110004-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:52:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, ObjectIdentity, Integer32, TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, Counter64, ModuleIdentity, Unsigned32, NotificationType, iso, Counter32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "Integer32", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "Counter64", "ModuleIdentity", "Unsigned32", "NotificationType", "iso", "Counter32", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
d_link = MibIdentifier((1, 3, 6, 1, 4, 1, 171)).setLabel("d-link")
productID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50))
projectID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50, 1))
modelID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50, 1, 3))
submodelID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1))
nasAgent1100 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1))
nasAgentVer = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasAgentVer.setStatus('current')
if mibBuilder.loadTexts: nasAgentVer.setDescription('version information for the agent of SNMP of DNS110004.')
sysTable = MibTable((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 2), )
if mibBuilder.loadTexts: sysTable.setStatus('current')
if mibBuilder.loadTexts: sysTable.setDescription('A table of system info of the NAS device.')
sysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 2, 1), ).setIndexNames((0, "DNS110004-MIB", "sysNum"))
if mibBuilder.loadTexts: sysEntry.setStatus('current')
if mibBuilder.loadTexts: sysEntry.setDescription('An entry in the system info table.')
sysNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysNum.setStatus('current')
if mibBuilder.loadTexts: sysNum.setDescription('Instance number of the system info entry.')
sysName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysName.setStatus('current')
if mibBuilder.loadTexts: sysName.setDescription('The device name')
sysFWVer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFWVer.setStatus('current')
if mibBuilder.loadTexts: sysFWVer.setDescription('The device firmware version')
sysNetType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysNetType.setStatus('current')
if mibBuilder.loadTexts: sysNetType.setDescription('The Network type. ( 0 : Workgroup 1 : Active Directory)')
sysFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFanSpeed.setStatus('current')
if mibBuilder.loadTexts: sysFanSpeed.setDescription('The current speed of the fan. (high, low, stop.)')
sysTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTemperature.setStatus('current')
if mibBuilder.loadTexts: sysTemperature.setDescription('The centigrade temperature of the system.')
sysPrinterName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPrinterName.setStatus('current')
if mibBuilder.loadTexts: sysPrinterName.setDescription('The mode name of printer')
sysCIFS = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCIFS.setStatus('current')
if mibBuilder.loadTexts: sysCIFS.setDescription('Samba status. 1 : enable 0 : disable ')
sysFtpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFtpServer.setStatus('current')
if mibBuilder.loadTexts: sysFtpServer.setDescription('Ftp Server status. 1 : enable 0 : disable ')
sysNFSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysNFSServer.setStatus('current')
if mibBuilder.loadTexts: sysNFSServer.setDescription('NFS Server status. 1 : enable 0 : disable ')
sysDFSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDFSServer.setStatus('current')
if mibBuilder.loadTexts: sysDFSServer.setDescription('DFS Server status. 1 : enable 0 : disable ')
sysQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysQuota.setStatus('current')
if mibBuilder.loadTexts: sysQuota.setDescription('Quota status. 1 : enable 0 : disable ')
sysAFP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAFP.setStatus('current')
if mibBuilder.loadTexts: sysAFP.setDescription('AFP status. 1 : enable 0 : disable ')
sysWebDAV = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysWebDAV.setStatus('current')
if mibBuilder.loadTexts: sysWebDAV.setDescription('WebDAV status. 1 : enable 0 : disable ')
sysWebFileServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysWebFileServer.setStatus('current')
if mibBuilder.loadTexts: sysWebFileServer.setDescription('WebFile Server status. 1 : enable 0 : disable ')
sysiSCSITarget = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysiSCSITarget.setStatus('current')
if mibBuilder.loadTexts: sysiSCSITarget.setDescription('iSCSI target status. 1 : enable 0 : disable ')
sysiSNS = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysiSNS.setStatus('current')
if mibBuilder.loadTexts: sysiSNS.setDescription('iSNS Server status. 1 : enable 0 : disable ')
diskTable = MibTable((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 3), )
if mibBuilder.loadTexts: diskTable.setStatus('current')
if mibBuilder.loadTexts: diskTable.setDescription('A table of physical disks attached to the NAS device.')
diskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 3, 1), ).setIndexNames((0, "DNS110004-MIB", "diskNum"))
if mibBuilder.loadTexts: diskEntry.setStatus('current')
if mibBuilder.loadTexts: diskEntry.setDescription('An entry in the physical disk table.')
diskNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskNum.setStatus('current')
if mibBuilder.loadTexts: diskNum.setDescription('Instance number of the disk entry.')
diskName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskName.setStatus('current')
if mibBuilder.loadTexts: diskName.setDescription('The device name that the disk is connected to. Example : sda, sdb, sdc sdd')
diskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskModel.setStatus('current')
if mibBuilder.loadTexts: diskModel.setDescription("The disk drive's model name.")
diskTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTemperature.setStatus('current')
if mibBuilder.loadTexts: diskTemperature.setDescription('The centigrade temperature of this disk.')
diskCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskCapacity.setStatus('current')
if mibBuilder.loadTexts: diskCapacity.setDescription('The capacity of the disk in bytes.')
diskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatus.setStatus('current')
if mibBuilder.loadTexts: diskStatus.setDescription('The status of the disk. has disk : Online no disk : Offline ')
volumeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 4), )
if mibBuilder.loadTexts: volumeTable.setStatus('current')
if mibBuilder.loadTexts: volumeTable.setDescription('A table of active volumes on the NAS device.')
volumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 4, 1), ).setIndexNames((0, "DNS110004-MIB", "volumeNum"))
if mibBuilder.loadTexts: volumeEntry.setStatus('current')
if mibBuilder.loadTexts: volumeEntry.setDescription('An entry in the volume table.')
volumeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeNum.setStatus('current')
if mibBuilder.loadTexts: volumeNum.setDescription('Instance number of the volume entry.')
volumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeName.setStatus('current')
if mibBuilder.loadTexts: volumeName.setDescription('The name of the volume.')
volumeEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeEncryption.setStatus('current')
if mibBuilder.loadTexts: volumeEncryption.setDescription('The encryption of the volume.')
volumeFsType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeFsType.setStatus('current')
if mibBuilder.loadTexts: volumeFsType.setDescription('The type of file systme of the volume. Example : ext2 or ext3')
volumeRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeRaidLevel.setStatus('current')
if mibBuilder.loadTexts: volumeRaidLevel.setDescription('The RAID level of the volume.')
volumeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeSize.setStatus('current')
if mibBuilder.loadTexts: volumeSize.setDescription('The size of the volume in bytes.')
volumeFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeFreeSpace.setStatus('current')
if mibBuilder.loadTexts: volumeFreeSpace.setDescription('Free space on the volume in bytes.')
volumeState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeState.setStatus('current')
if mibBuilder.loadTexts: volumeState.setDescription('The state of the volume.')
snapShotTable = MibTable((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 5), )
if mibBuilder.loadTexts: snapShotTable.setStatus('current')
if mibBuilder.loadTexts: snapShotTable.setDescription('A table of Volume SnapShot on the NAS device.')
snapShotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 5, 1), ).setIndexNames((0, "DNS110004-MIB", "snapShotNum"))
if mibBuilder.loadTexts: snapShotEntry.setStatus('current')
if mibBuilder.loadTexts: snapShotEntry.setDescription('An entry in the SnapShot table.')
snapShotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapShotNum.setStatus('current')
if mibBuilder.loadTexts: snapShotNum.setDescription('Instance number of the SnapShot entry.')
snapShotVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapShotVolume.setStatus('current')
if mibBuilder.loadTexts: snapShotVolume.setDescription('The volume of the SnapShot.')
snapShotName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapShotName.setStatus('current')
if mibBuilder.loadTexts: snapShotName.setDescription('The name of the SnapShot.')
snapShotSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapShotSchedule.setStatus('current')
if mibBuilder.loadTexts: snapShotSchedule.setDescription('The schedule of SnapShot.')
snapShotCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapShotCount.setStatus('current')
if mibBuilder.loadTexts: snapShotCount.setDescription('The count squash of SnapShot.')
snapShotState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapShotState.setStatus('current')
if mibBuilder.loadTexts: snapShotState.setDescription('The state of SnapShot.')
snapShotPath = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapShotPath.setStatus('current')
if mibBuilder.loadTexts: snapShotPath.setDescription('The path of SnapShot.')
dFSTable = MibTable((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 6), )
if mibBuilder.loadTexts: dFSTable.setStatus('current')
if mibBuilder.loadTexts: dFSTable.setDescription('A table of Distributed File System on the NAS device.')
dFSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 6, 1), ).setIndexNames((0, "DNS110004-MIB", "dFSNum"))
if mibBuilder.loadTexts: dFSEntry.setStatus('current')
if mibBuilder.loadTexts: dFSEntry.setDescription('An entry in the DFS table.')
dFSNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dFSNum.setStatus('current')
if mibBuilder.loadTexts: dFSNum.setDescription('Instance number of the DFS entry.')
dFSLShareName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dFSLShareName.setStatus('current')
if mibBuilder.loadTexts: dFSLShareName.setDescription('The local share name of the DFS.')
dFSHost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dFSHost.setStatus('current')
if mibBuilder.loadTexts: dFSHost.setDescription('The Host of DFS.')
dFSRSharefolder = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dFSRSharefolder.setStatus('current')
if mibBuilder.loadTexts: dFSRSharefolder.setDescription('The remote share folder of DFS.')
nFSTable = MibTable((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 7), )
if mibBuilder.loadTexts: nFSTable.setStatus('current')
if mibBuilder.loadTexts: nFSTable.setDescription('A table of Network File System on the NAS device.')
nFSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 7, 1), ).setIndexNames((0, "DNS110004-MIB", "nFSNum"))
if mibBuilder.loadTexts: nFSEntry.setStatus('current')
if mibBuilder.loadTexts: nFSEntry.setDescription('An entry in the NFS table.')
nFSNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nFSNum.setStatus('current')
if mibBuilder.loadTexts: nFSNum.setDescription('Instance number of the NFS entry.')
nFSMountPath = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nFSMountPath.setStatus('current')
if mibBuilder.loadTexts: nFSMountPath.setDescription('The mount path of the NFS.')
nFSHost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nFSHost.setStatus('current')
if mibBuilder.loadTexts: nFSHost.setDescription('The host of the NFS.')
nFSPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nFSPermission.setStatus('current')
if mibBuilder.loadTexts: nFSPermission.setDescription('The permission of NFS.')
nFSRootSquash = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nFSRootSquash.setStatus('current')
if mibBuilder.loadTexts: nFSRootSquash.setDescription('The root squash of NFS.')
nFSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nFSStatus.setStatus('current')
if mibBuilder.loadTexts: nFSStatus.setDescription('The status of NFS.')
iSOTable = MibTable((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 8), )
if mibBuilder.loadTexts: iSOTable.setStatus('current')
if mibBuilder.loadTexts: iSOTable.setDescription('A table of ISO fileon the NAS device.')
iSOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 8, 1), ).setIndexNames((0, "DNS110004-MIB", "iSONum"))
if mibBuilder.loadTexts: iSOEntry.setStatus('current')
if mibBuilder.loadTexts: iSOEntry.setDescription('An entry in the ISO table.')
iSONum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSONum.setStatus('current')
if mibBuilder.loadTexts: iSONum.setDescription('Instance number of the ISO entry.')
iSOShareName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSOShareName.setStatus('current')
if mibBuilder.loadTexts: iSOShareName.setDescription('The share name of the ISO.')
iSOPath = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSOPath.setStatus('current')
if mibBuilder.loadTexts: iSOPath.setDescription('The path of the ISO.')
iSOStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSOStatus.setStatus('current')
if mibBuilder.loadTexts: iSOStatus.setDescription('The status of ISO.')
logServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 9), )
if mibBuilder.loadTexts: logServerTable.setStatus('current')
if mibBuilder.loadTexts: logServerTable.setDescription('A table of syslog server on the NAS device.')
logServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 9, 1), ).setIndexNames((0, "DNS110004-MIB", "logServerNum"))
if mibBuilder.loadTexts: logServerEntry.setStatus('current')
if mibBuilder.loadTexts: logServerEntry.setDescription('An entry in the logServer table.')
logServerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logServerNum.setStatus('current')
if mibBuilder.loadTexts: logServerNum.setDescription('Instance number of the logServer entry.')
logServerRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logServerRuleName.setStatus('current')
if mibBuilder.loadTexts: logServerRuleName.setDescription('The rule name of the syslog server.')
logServerLogfiles = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logServerLogfiles.setStatus('current')
if mibBuilder.loadTexts: logServerLogfiles.setDescription('The log files of syslog server.')
logServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logServerStatus.setStatus('current')
if mibBuilder.loadTexts: logServerStatus.setDescription('The staus of syslog server.')
uPSTable = MibTable((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 10), )
if mibBuilder.loadTexts: uPSTable.setStatus('current')
if mibBuilder.loadTexts: uPSTable.setDescription('A table of UPS on the NAS device.')
uPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 10, 1), ).setIndexNames((0, "DNS110004-MIB", "uPSNum"))
if mibBuilder.loadTexts: uPSEntry.setStatus('current')
if mibBuilder.loadTexts: uPSEntry.setDescription('An entry in the UPS table.')
uPSNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSNum.setStatus('current')
if mibBuilder.loadTexts: uPSNum.setDescription('Instance number of the uPS entry.')
uPSDeviceInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSDeviceInfo.setStatus('current')
if mibBuilder.loadTexts: uPSDeviceInfo.setDescription('The deviceinfo of the UPS.')
uPSProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSProduct.setStatus('current')
if mibBuilder.loadTexts: uPSProduct.setDescription('The product of UPS.')
uPSManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSManufacturer.setStatus('current')
if mibBuilder.loadTexts: uPSManufacturer.setDescription('The manufacturer of UPS.')
uPSBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSBattery.setStatus('current')
if mibBuilder.loadTexts: uPSBattery.setDescription('The battery of UPS.')
uPSState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSState.setStatus('current')
if mibBuilder.loadTexts: uPSState.setDescription('The state of SnapShot.')
uPSServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 10, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSServerIP.setStatus('current')
if mibBuilder.loadTexts: uPSServerIP.setDescription('The server IP of UPS.')
uPSAllowedIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 10, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uPSAllowedIP.setStatus('current')
if mibBuilder.loadTexts: uPSAllowedIP.setDescription('The allowed IP of UPS.')
vVTable = MibTable((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 11), )
if mibBuilder.loadTexts: vVTable.setStatus('current')
if mibBuilder.loadTexts: vVTable.setDescription('A table of Virtual Volume on the NAS device.')
vVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 11, 1), ).setIndexNames((0, "DNS110004-MIB", "vVNum"))
if mibBuilder.loadTexts: vVEntry.setStatus('current')
if mibBuilder.loadTexts: vVEntry.setDescription('An entry in the Virtual Volume table.')
vVNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vVNum.setStatus('current')
if mibBuilder.loadTexts: vVNum.setDescription('Instance number of the Virtual Volume entry.')
vVTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vVTargetName.setStatus('current')
if mibBuilder.loadTexts: vVTargetName.setDescription('The target name of the Virtual Volume.')
vVSharefolder = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vVSharefolder.setStatus('current')
if mibBuilder.loadTexts: vVSharefolder.setDescription('The share folder of Virtual Volume.')
vVStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vVStatus.setStatus('current')
if mibBuilder.loadTexts: vVStatus.setDescription('The status of Virtual Volume.')
vVSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vVSize.setStatus('current')
if mibBuilder.loadTexts: vVSize.setDescription('The size of Virtual Volume.')
iSCSITargetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 12), )
if mibBuilder.loadTexts: iSCSITargetTable.setStatus('current')
if mibBuilder.loadTexts: iSCSITargetTable.setDescription('A table of iSCSI targets on the NAS device.')
iSCSITargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 12, 1), ).setIndexNames((0, "DNS110004-MIB", "iSCSITargetNum"))
if mibBuilder.loadTexts: iSCSITargetEntry.setStatus('current')
if mibBuilder.loadTexts: iSCSITargetEntry.setDescription('An entry in the iSCSITarget table.')
iSCSITargetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSCSITargetNum.setStatus('current')
if mibBuilder.loadTexts: iSCSITargetNum.setDescription('Instance number of the iSCSI Target entry.')
iSCSITargetIQN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSCSITargetIQN.setStatus('current')
if mibBuilder.loadTexts: iSCSITargetIQN.setDescription('The IQN of the iSCSI Target.')
iSCSITargetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSCSITargetStatus.setStatus('current')
if mibBuilder.loadTexts: iSCSITargetStatus.setDescription('The status of iSCSI Target.')
iSCSILUNTable = MibTable((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 13), )
if mibBuilder.loadTexts: iSCSILUNTable.setStatus('current')
if mibBuilder.loadTexts: iSCSILUNTable.setDescription('A table of iSCSI LUN on the NAS device.')
iSCSILUNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 13, 1), ).setIndexNames((0, "DNS110004-MIB", "iSCSILUNNum"))
if mibBuilder.loadTexts: iSCSILUNEntry.setStatus('current')
if mibBuilder.loadTexts: iSCSILUNEntry.setDescription('An entry in the iSCSI LUN table.')
iSCSILUNNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSCSILUNNum.setStatus('current')
if mibBuilder.loadTexts: iSCSILUNNum.setDescription('Instance number of the iSCSI Target entry.')
iSCSILUNName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSCSILUNName.setStatus('current')
if mibBuilder.loadTexts: iSCSILUNName.setDescription('The name of the iSCSI LUN.')
iSCSILUNVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSCSILUNVolume.setStatus('current')
if mibBuilder.loadTexts: iSCSILUNVolume.setDescription('The volume of iSCSI LUN.')
iSCSILUNSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 13, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSCSILUNSize.setStatus('current')
if mibBuilder.loadTexts: iSCSILUNSize.setDescription('The size of iSCSI LUN.')
iSCSILUNStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 13, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSCSILUNStatus.setStatus('current')
if mibBuilder.loadTexts: iSCSILUNStatus.setDescription('The status of iSCSI LUN.')
iSCSILUNMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSCSILUNMapping.setStatus('current')
if mibBuilder.loadTexts: iSCSILUNMapping.setDescription('The mapping of iSCSI LUN.')
iSCSIACLTable = MibTable((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 14), )
if mibBuilder.loadTexts: iSCSIACLTable.setStatus('current')
if mibBuilder.loadTexts: iSCSIACLTable.setDescription('A table of iSCSI ACL on the NAS device.')
iSCSIACLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 14, 1), ).setIndexNames((0, "DNS110004-MIB", "iSCSIACLNum"))
if mibBuilder.loadTexts: iSCSIACLEntry.setStatus('current')
if mibBuilder.loadTexts: iSCSIACLEntry.setDescription('An entry in the iSCSI ACL table.')
iSCSIACLNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSCSIACLNum.setStatus('current')
if mibBuilder.loadTexts: iSCSIACLNum.setDescription('Instance number of the iSCSIACL entry.')
iSCSIACLName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSCSIACLName.setStatus('current')
if mibBuilder.loadTexts: iSCSIACLName.setDescription('The name of the iSCSI ACL.')
iSCSIACLInitiator = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 14, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSCSIACLInitiator.setStatus('current')
if mibBuilder.loadTexts: iSCSIACLInitiator.setDescription('The iniator name of iSCSI ACL.')
aMAZONS3Table = MibTable((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 15), )
if mibBuilder.loadTexts: aMAZONS3Table.setStatus('current')
if mibBuilder.loadTexts: aMAZONS3Table.setDescription('A table of AMAZON S3 on the NAS device.')
aMAZONS3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 15, 1), ).setIndexNames((0, "DNS110004-MIB", "aMAZONS3Num"))
if mibBuilder.loadTexts: aMAZONS3Entry.setStatus('current')
if mibBuilder.loadTexts: aMAZONS3Entry.setDescription('An entry in the AMAZON S3 table.')
aMAZONS3Num = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aMAZONS3Num.setStatus('current')
if mibBuilder.loadTexts: aMAZONS3Num.setDescription('Instance number of the AMAZON S3 entry.')
aMAZONS3Task = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aMAZONS3Task.setStatus('current')
if mibBuilder.loadTexts: aMAZONS3Task.setDescription('The task of the AMAZON S3.')
aMAZONS3Schedule = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 15, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aMAZONS3Schedule.setStatus('current')
if mibBuilder.loadTexts: aMAZONS3Schedule.setDescription('The schedule of AMAZON S3.')
aMAZONS3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 15, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aMAZONS3Status.setStatus('current')
if mibBuilder.loadTexts: aMAZONS3Status.setDescription('The status of AMAZON S3.')
aMAZONS3Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 15, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aMAZONS3Enable.setStatus('current')
if mibBuilder.loadTexts: aMAZONS3Enable.setDescription('The enable status of AMAZON S3.')
aMAZONS3BackupNow = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 15, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aMAZONS3BackupNow.setStatus('current')
if mibBuilder.loadTexts: aMAZONS3BackupNow.setDescription('The backup now status of AMAZON S3.')
aMAZONS3Restore = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 15, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aMAZONS3Restore.setStatus('current')
if mibBuilder.loadTexts: aMAZONS3Restore.setDescription('The restore status of AMAZON S3.')
notifyEvts = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 200))
notifyPasswdChanged = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 200, 1))
if mibBuilder.loadTexts: notifyPasswdChanged.setStatus('current')
if mibBuilder.loadTexts: notifyPasswdChanged.setDescription("An indication that the Administrator's password has been changed.")
notifyNetworketh0Changed = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 200, 2))
if mibBuilder.loadTexts: notifyNetworketh0Changed.setStatus('current')
if mibBuilder.loadTexts: notifyNetworketh0Changed.setDescription('An indication that the network eth0 settings has been changed.')
notifyNetworketh1Changed = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 200, 3))
if mibBuilder.loadTexts: notifyNetworketh1Changed.setStatus('current')
if mibBuilder.loadTexts: notifyNetworketh1Changed.setDescription('An indication that the network eth1 settings has been changed.')
notifyTemperatureExceeded = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 200, 4))
if mibBuilder.loadTexts: notifyTemperatureExceeded.setStatus('current')
if mibBuilder.loadTexts: notifyTemperatureExceeded.setDescription('An indication that system temperature has exceeded .')
notifyPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 200, 5))
if mibBuilder.loadTexts: notifyPowerFailure.setStatus('current')
if mibBuilder.loadTexts: notifyPowerFailure.setDescription('An indication that System has rebooted from power failure.')
notifyFirmwareUpgraded = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 200, 6))
if mibBuilder.loadTexts: notifyFirmwareUpgraded.setStatus('current')
if mibBuilder.loadTexts: notifyFirmwareUpgraded.setDescription('An indication that firmware has been upgraded.')
notifyDiskLost = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 200, 7))
if mibBuilder.loadTexts: notifyDiskLost.setStatus('current')
if mibBuilder.loadTexts: notifyDiskLost.setDescription('An indication that disk lost .')
notifyDiskInsertion = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 200, 8))
if mibBuilder.loadTexts: notifyDiskInsertion.setStatus('current')
if mibBuilder.loadTexts: notifyDiskInsertion.setDescription('An indication that disk insertion .')
notifyRaidFailed = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 200, 9))
if mibBuilder.loadTexts: notifyRaidFailed.setStatus('current')
if mibBuilder.loadTexts: notifyRaidFailed.setDescription('An indication that disk fail .')
notifyVolumeCreateSuccess = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 200, 10))
if mibBuilder.loadTexts: notifyVolumeCreateSuccess.setStatus('current')
if mibBuilder.loadTexts: notifyVolumeCreateSuccess.setDescription('An indication that volume create successfully .')
notifyVolumeCreateFailed = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 200, 11))
if mibBuilder.loadTexts: notifyVolumeCreateFailed.setStatus('current')
if mibBuilder.loadTexts: notifyVolumeCreateFailed.setDescription('An indication that volume create failed .')
notifyVolumeRemoveSuccess = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 200, 12))
if mibBuilder.loadTexts: notifyVolumeRemoveSuccess.setStatus('current')
if mibBuilder.loadTexts: notifyVolumeRemoveSuccess.setDescription('An indication that volume remove successfully .')
notifyVolumeRemoveFailed = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 200, 13))
if mibBuilder.loadTexts: notifyVolumeRemoveFailed.setStatus('current')
if mibBuilder.loadTexts: notifyVolumeRemoveFailed.setDescription('An indication that volume remove failed .')
notifyVolumeStatusCrashed = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 200, 14))
if mibBuilder.loadTexts: notifyVolumeStatusCrashed.setStatus('current')
if mibBuilder.loadTexts: notifyVolumeStatusCrashed.setDescription('An indication that volume status crashed .')
notifyVolumeStatusDegraded = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 200, 15))
if mibBuilder.loadTexts: notifyVolumeStatusDegraded.setStatus('current')
if mibBuilder.loadTexts: notifyVolumeStatusDegraded.setDescription('An indication that volume status degraded .')
notifyVolumeStatusREBUILD = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 200, 16))
if mibBuilder.loadTexts: notifyVolumeStatusREBUILD.setStatus('current')
if mibBuilder.loadTexts: notifyVolumeStatusREBUILD.setDescription('An indication that volume status REBUILD .')
notifyVolumeStatusREBUILT = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 200, 17))
if mibBuilder.loadTexts: notifyVolumeStatusREBUILT.setStatus('current')
if mibBuilder.loadTexts: notifyVolumeStatusREBUILT.setDescription('An indication that volume status REBUILT .')
notifyHDFull = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 200, 18))
if mibBuilder.loadTexts: notifyHDFull.setStatus('current')
if mibBuilder.loadTexts: notifyHDFull.setDescription('An indication that HD Full .')
notifyVolumeSpace = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 200, 19))
if mibBuilder.loadTexts: notifyVolumeSpace.setStatus('current')
if mibBuilder.loadTexts: notifyVolumeSpace.setDescription('An indication that Volume space .')
notifySeleftest = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 3, 1, 1, 200, 20))
if mibBuilder.loadTexts: notifySeleftest.setStatus('current')
if mibBuilder.loadTexts: notifySeleftest.setDescription('An indication that Self test results .')
mibBuilder.exportSymbols("DNS110004-MIB", logServerNum=logServerNum, notifyRaidFailed=notifyRaidFailed, iSCSIACLInitiator=iSCSIACLInitiator, uPSServerIP=uPSServerIP, notifyFirmwareUpgraded=notifyFirmwareUpgraded, snapShotState=snapShotState, iSCSITargetStatus=iSCSITargetStatus, logServerRuleName=logServerRuleName, volumeEntry=volumeEntry, uPSProduct=uPSProduct, volumeEncryption=volumeEncryption, uPSNum=uPSNum, dFSHost=dFSHost, sysDFSServer=sysDFSServer, logServerLogfiles=logServerLogfiles, notifyVolumeRemoveFailed=notifyVolumeRemoveFailed, volumeSize=volumeSize, notifyDiskInsertion=notifyDiskInsertion, diskTemperature=diskTemperature, sysWebDAV=sysWebDAV, iSCSILUNNum=iSCSILUNNum, sysEntry=sysEntry, nFSHost=nFSHost, nFSMountPath=nFSMountPath, vVSharefolder=vVSharefolder, uPSState=uPSState, vVTargetName=vVTargetName, iSOPath=iSOPath, vVTable=vVTable, notifyVolumeCreateSuccess=notifyVolumeCreateSuccess, iSCSIACLEntry=iSCSIACLEntry, sysTemperature=sysTemperature, snapShotTable=snapShotTable, volumeTable=volumeTable, sysNetType=sysNetType, uPSManufacturer=uPSManufacturer, notifyVolumeStatusCrashed=notifyVolumeStatusCrashed, diskTable=diskTable, sysName=sysName, sysAFP=sysAFP, iSOStatus=iSOStatus, aMAZONS3BackupNow=aMAZONS3BackupNow, snapShotCount=snapShotCount, volumeState=volumeState, notifyVolumeStatusDegraded=notifyVolumeStatusDegraded, dFSLShareName=dFSLShareName, iSOShareName=iSOShareName, uPSBattery=uPSBattery, dFSNum=dFSNum, iSCSILUNName=iSCSILUNName, iSCSITargetEntry=iSCSITargetEntry, snapShotNum=snapShotNum, modelID=modelID, snapShotPath=snapShotPath, nasAgent1100=nasAgent1100, notifyVolumeRemoveSuccess=notifyVolumeRemoveSuccess, iSCSIACLTable=iSCSIACLTable, productID=productID, volumeFsType=volumeFsType, notifyVolumeSpace=notifyVolumeSpace, uPSAllowedIP=uPSAllowedIP, snapShotName=snapShotName, snapShotSchedule=snapShotSchedule, aMAZONS3Restore=aMAZONS3Restore, aMAZONS3Schedule=aMAZONS3Schedule, sysPrinterName=sysPrinterName, logServerEntry=logServerEntry, vVEntry=vVEntry, aMAZONS3Status=aMAZONS3Status, iSCSIACLName=iSCSIACLName, vVNum=vVNum, nasAgentVer=nasAgentVer, diskStatus=diskStatus, iSCSIACLNum=iSCSIACLNum, aMAZONS3Num=aMAZONS3Num, sysFanSpeed=sysFanSpeed, dFSTable=dFSTable, nFSStatus=nFSStatus, logServerTable=logServerTable, submodelID=submodelID, sysNFSServer=sysNFSServer, nFSPermission=nFSPermission, aMAZONS3Enable=aMAZONS3Enable, projectID=projectID, notifyPowerFailure=notifyPowerFailure, sysTable=sysTable, uPSTable=uPSTable, volumeRaidLevel=volumeRaidLevel, volumeFreeSpace=volumeFreeSpace, iSOEntry=iSOEntry, notifySeleftest=notifySeleftest, sysiSNS=sysiSNS, dFSEntry=dFSEntry, diskModel=diskModel, diskCapacity=diskCapacity, aMAZONS3Table=aMAZONS3Table, iSCSITargetIQN=iSCSITargetIQN, notifyHDFull=notifyHDFull, vVSize=vVSize, sysCIFS=sysCIFS, logServerStatus=logServerStatus, iSCSITargetNum=iSCSITargetNum, sysFWVer=sysFWVer, volumeName=volumeName, notifyPasswdChanged=notifyPasswdChanged, vVStatus=vVStatus, iSCSILUNTable=iSCSILUNTable, snapShotEntry=snapShotEntry, iSONum=iSONum, notifyVolumeStatusREBUILT=notifyVolumeStatusREBUILT, iSCSILUNEntry=iSCSILUNEntry, aMAZONS3Entry=aMAZONS3Entry, nFSRootSquash=nFSRootSquash, notifyTemperatureExceeded=notifyTemperatureExceeded, nFSTable=nFSTable, notifyNetworketh1Changed=notifyNetworketh1Changed, aMAZONS3Task=aMAZONS3Task, diskEntry=diskEntry, iSCSILUNVolume=iSCSILUNVolume, sysQuota=sysQuota, iSCSITargetTable=iSCSITargetTable, notifyDiskLost=notifyDiskLost, iSOTable=iSOTable, sysFtpServer=sysFtpServer, sysiSCSITarget=sysiSCSITarget, d_link=d_link, notifyNetworketh0Changed=notifyNetworketh0Changed, notifyVolumeStatusREBUILD=notifyVolumeStatusREBUILD, nFSNum=nFSNum, sysWebFileServer=sysWebFileServer, dFSRSharefolder=dFSRSharefolder, iSCSILUNMapping=iSCSILUNMapping, uPSDeviceInfo=uPSDeviceInfo, volumeNum=volumeNum, nFSEntry=nFSEntry, diskName=diskName, sysNum=sysNum, iSCSILUNSize=iSCSILUNSize, notifyVolumeCreateFailed=notifyVolumeCreateFailed, snapShotVolume=snapShotVolume, iSCSILUNStatus=iSCSILUNStatus, diskNum=diskNum, uPSEntry=uPSEntry, notifyEvts=notifyEvts)
