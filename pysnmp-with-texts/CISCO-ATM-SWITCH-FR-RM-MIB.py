#
# PySNMP MIB module CISCO-ATM-SWITCH-FR-RM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ATM-SWITCH-FR-RM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:50:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Unsigned32, TimeTicks, Gauge32, NotificationType, IpAddress, Counter64, Counter32, MibIdentifier, ModuleIdentity, Integer32, ObjectIdentity, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "Gauge32", "NotificationType", "IpAddress", "Counter64", "Counter32", "MibIdentifier", "ModuleIdentity", "Integer32", "ObjectIdentity", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
ciscoAtmSwitchFrRmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 110))
if mibBuilder.loadTexts: ciscoAtmSwitchFrRmMIB.setLastUpdated('9807200000Z')
if mibBuilder.loadTexts: ciscoAtmSwitchFrRmMIB.setOrganization('Cisco Systems')
if mibBuilder.loadTexts: ciscoAtmSwitchFrRmMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 West Tasman Drive San Jose CA 95134 USA Phone: +1 800 553-NETS Email: cs-atm@cisco.com')
if mibBuilder.loadTexts: ciscoAtmSwitchFrRmMIB.setDescription('This MIB module describes a set of objects used for switch Resource Management (RM) for Frame Relay/Frame based User-to-Network (FUNI) to ATM interworking function (IWF) connections. Please refer to the Frame Relay Forum documents FRF.5 and FRF.8 for details on the Frame Relay to ATM Interworking Functions. For details on FUNI, please refer to the ATM Forum FUNI Specification document. These objects are applicable to Frame Relay and FUNI interfaces present on the Frame Relay Port Adapter Module (PAM). Initial version of this MIB module.')
ciscoAtmSwitchFrRmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 110, 1))
cfaAdapter = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1))
cfaInterwork = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2))
class CfaInterworkServiceCategory(TextualConvention, Integer32):
    description = 'This data type is used to specify the service category of a Frame Relay/FUNI to ATM interworking connection. For definitions of service categories, please refer to the ATM Forum Traffic Management Specification. The current implementation supports the following service categories for connections performing the Frame Relay to ATM Interworking Function: Variable bit rate, non real time (VBR-NRT) Available bit rate (ABR) Unspecified bit rate (UBR)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("vbrNrt", 1), ("abr", 2), ("ubr", 3))

cfaAdapterIfVcQThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 1), )
if mibBuilder.loadTexts: cfaAdapterIfVcQThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cfaAdapterIfVcQThresholdTable.setDescription('A table of per-VC queue threshold parameters that are used for congestion control for Frame Relay/FUNI to ATM Interworking Function connections, on the Frame Relay Port Adapter Module. These objects become available as each Frame Relay and FUNI interface is defined on the device. The corresponding ifTypes are frameRelayService(44) and atmFuni(106) respectively. An unique set of threshold parameters are available for every supported Interworking Function service category, and would be applied to all connections belonging to that particular service category, on that Frame Relay or FUNI interface.')
cfaAdapterIfVcQThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-SWITCH-FR-RM-MIB", "cfaAdapterIfVcQService"))
if mibBuilder.loadTexts: cfaAdapterIfVcQThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cfaAdapterIfVcQThresholdEntry.setDescription("A set of per-VC queue threshold parameters that are used for congestion control for Frame Relay/FUNI to ATM Interworking Function connections, on the Frame Relay Port Adapter Module. The ifIndex in the index clause refers to MIB-II's ifIndex corresponding to frame-based ATM PAM ports, i.e., Frame Relay and FUNI.")
cfaAdapterIfVcQService = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 1, 1, 1), CfaInterworkServiceCategory())
if mibBuilder.loadTexts: cfaAdapterIfVcQService.setStatus('current')
if mibBuilder.loadTexts: cfaAdapterIfVcQService.setDescription('The service category of the connection to which this entry applies.')
cfaAdapterIfVcQInqDiscThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(87)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfaAdapterIfVcQInqDiscThresh.setStatus('current')
if mibBuilder.loadTexts: cfaAdapterIfVcQInqDiscThresh.setDescription('This object defines the Discard Eligible threshold applied to the Frame Relay - ATM interworking virtual circuit input queue, on the Frame Relay PAM. The input queue is in the direction of Frame Relay/FUNI interface to the ATM switch fabric. If the fill level of the input queue for the Frame Relay - ATM interworking virtual circuit exceeds this threshold, all frames arriving on this virtual circuit from the Frame Relay side will be discarded at the interface if the arriving frame has its Discard Eligible bit set. The threshold value is expressed as a percent-of-full. Setting this object to 100 effectively turns off the threshold.')
cfaAdapterIfVcQOutqDiscThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(87)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfaAdapterIfVcQOutqDiscThresh.setStatus('current')
if mibBuilder.loadTexts: cfaAdapterIfVcQOutqDiscThresh.setDescription('This object defines the Discard Eligible threshold applied to the Frame Relay - ATM interworking virtual circuit output queue, on the Frame Relay PAM. The output queue is in the direction of the ATM switch fabric to the Frame Relay/FUNI interface. If the fill level of the output queue for the Frame Relay - ATM interworking virtual circuit exceeds this threshold, all frames arriving on this virtual circuit from the ATM switch fabric side will be discarded if the arriving frame has its Discard Eligible bit set. The threshold value is expressed as a percent-of-full. Setting this object to 100 effectively turns off the threshold.')
cfaAdapterIfVcQInqMarkThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(75)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfaAdapterIfVcQInqMarkThresh.setStatus('current')
if mibBuilder.loadTexts: cfaAdapterIfVcQInqMarkThresh.setDescription('This object defines the Marking threshold applied to the Frame Relay - ATM interworking virtual circuit input queue, on the Frame Relay PAM. The input queue is in the direction of Frame Relay/FUNI interface to the ATM switch fabric. If the fill level of the input queue for the Frame Relay - ATM interworking virtual circuit exceeds this threshold, the following will happen: 1. For frames coming into the Frame Relay - ATM interworking virtual circuit from the Frame Relay side, the corresponding cells will have the Explicit Forward Congestion Indication (EFCI) bit set in the ATM cell header, on entry into the ATM switch fabric. 2. For cells arriving from the ATM switch fabric side for this Frame Relay - ATM interworking virtual circuit, the corresponding frames will have the Backward Explicit Congestion Notification (BECN) bit set upon exiting the Frame Relay interface. The threshold value is expressed as a percent-of-full. Setting this object to 100 effectively turns off the threshold.')
cfaAdapterIfVcQOutqMarkThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(75)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfaAdapterIfVcQOutqMarkThresh.setStatus('current')
if mibBuilder.loadTexts: cfaAdapterIfVcQOutqMarkThresh.setDescription('This object defines the Marking threshold applied to the Frame Relay - ATM interworking virtual circuit output queue, on the Frame Relay PAM. The output queue is in the direction of the ATM switch fabric to the Frame Relay/FUNI interface. If the fill level of the output queue for the Frame Relay - ATM interworking virtual circuit exceeds this threshold, the following will happen: 1. For frames coming into the Frame Relay - ATM interworking virtual circuit from the Frame Relay side, the frame will have the BECN bit set in the Frame Relay header before getting converted to cells and entering the ATM switch fabric. 2. For cells arriving from the ATM switch fabric side for this Frame Relay - ATM interworking virtual circuit, the corresponding frames will have the Forward Explicit Congestion Notification (FECN) bit set in the Frame Relay header upon exiting the Frame Relay interface. For FUNI - ATM interworking connections, the Congestion Notification (CN) bit gets set in the FUNI header. The threshold value is expressed as a percent-of-full. Setting this object to 100 effectively turns off the threshold.')
cfaAdapterIfVbrServOflowTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 2), )
if mibBuilder.loadTexts: cfaAdapterIfVbrServOflowTable.setStatus('current')
if mibBuilder.loadTexts: cfaAdapterIfVbrServOflowTable.setDescription('A table of Resource Management parameters that are used for VBR Overflow Servicing for Frame Relay/FUNI to ATM Interworking Function connections, on the Frame Relay Port Adapter Module. This object becomes available as each Frame Relay and FUNI interface is defined on the device. The corresponding ifTypes are frameRelayService(44) and atmFuni(106) respectively.')
cfaAdapterIfVbrServOflowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cfaAdapterIfVbrServOflowEntry.setStatus('current')
if mibBuilder.loadTexts: cfaAdapterIfVbrServOflowEntry.setDescription('A set of Resource Management parameters that are used for VBR Overflow Servicing for Frame Relay/FUNI to ATM Interworking Function connections, on the Frame Relay Port Adapter Module.')
cfaAdapterIfVbrServOflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 2, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfaAdapterIfVbrServOflow.setStatus('current')
if mibBuilder.loadTexts: cfaAdapterIfVbrServOflow.setDescription('Configuration to enable the overflow feature for VBR-NRT connections on the interface. When the PAM services VBR-NRT VC input queues, sending ATM traffic to the switch fabric, it can strictly limit the rate at which the data is sent to contracted sustained cell rate (SCR) for the connection (overflow disabled), or allow data transfer over SCR (overflow enabled). Setting the value to true enables overflow.')
cfaAdapterIfFrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 3), )
if mibBuilder.loadTexts: cfaAdapterIfFrConfigTable.setStatus('current')
if mibBuilder.loadTexts: cfaAdapterIfFrConfigTable.setDescription('A table of resource management parameters for the Frame Relay interface on the FR/FUNI Port Adapter Module.')
cfaAdapterIfFrConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cfaAdapterIfFrConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cfaAdapterIfFrConfigEntry.setDescription('An entry in the table, containing information about Resource Management of an Interface with Frame Relay encapsulation.')
cfaAdapterIfOverbooking = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000)).clone(100)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfaAdapterIfOverbooking.setStatus('current')
if mibBuilder.loadTexts: cfaAdapterIfOverbooking.setDescription("This object defines overbooking of CIR on an acess link/port in percent of access rate. The total of all CIR's for all frame-relay pvc's and frame-relay soft-vc's cannot exceed CIR overbooking factor times access rate. For example, overbooking of 200% means the total of all CIR's can be configured up to twice of the access rate. The default is 100% - no overbooking is set.")
cfaInterworkIfResourceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2, 1), )
if mibBuilder.loadTexts: cfaInterworkIfResourceTable.setStatus('current')
if mibBuilder.loadTexts: cfaInterworkIfResourceTable.setDescription('A table of objects that can be used to view available and allocated resources on Frame Relay and FUNI interfaces defined on a Frame Relay Port Adapter Module (PAM). An unique set of available and allocated resources are available for the transmit direction (going out of the interface to the external world), and receive direction (coming into the interface from the external world). These available and allocated resources are available for every supported Interworking Function service category. These objects become available as each Frame Relay and FUNI interface is defined on the device. The corresponding ifTypes are frameRelayService(44) and atmFuni(106) respectively.')
cfaInterworkIfResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-SWITCH-FR-RM-MIB", "cfaInterworkIfVcQService"))
if mibBuilder.loadTexts: cfaInterworkIfResourceEntry.setStatus('current')
if mibBuilder.loadTexts: cfaInterworkIfResourceEntry.setDescription('A set of objects that can be used to view available and allocated resources on Frame Relay and FUNI interfaces defined on a Frame Relay Port Adapter Module (PAM).')
cfaInterworkIfVcQService = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2, 1, 1, 1), CfaInterworkServiceCategory())
if mibBuilder.loadTexts: cfaInterworkIfVcQService.setStatus('current')
if mibBuilder.loadTexts: cfaInterworkIfVcQService.setDescription('The service category of the connection to which this entry applies.')
cfaInterworkIfRxAvailRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2, 1, 1, 2), Gauge32()).setUnits('bits-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfaInterworkIfRxAvailRate.setStatus('current')
if mibBuilder.loadTexts: cfaInterworkIfRxAvailRate.setDescription('The available bit rate for traffic received on the Frame Relay interface. This is the bandwidth available for connections. This value decreases as a result of setup of a connection requesting non-zero Committed Information Rate (CIR) in the receive direction, and increases as a result of the release of such a connection.')
cfaInterworkIfTxAvailRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2, 1, 1, 3), Gauge32()).setUnits('bits-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfaInterworkIfTxAvailRate.setStatus('current')
if mibBuilder.loadTexts: cfaInterworkIfTxAvailRate.setDescription('The available bit rate for traffic sent out the Frame Relay interface. This is the bandwidth available for connections. This value decreases as a result of setup of a connection requesting non-zero CIR in the transmit direction, and increases as a result of the release of such a connection.')
cfaInterworkIfRxAllocRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2, 1, 1, 4), Gauge32()).setUnits('bits-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfaInterworkIfRxAllocRate.setStatus('current')
if mibBuilder.loadTexts: cfaInterworkIfRxAllocRate.setDescription('The allocated bit rate for traffic received on the Frame Relay interface. This is the bandwidth allocated to connections. This value increases as a result of setup of a connection requesting non-zero CIR in the receive direction, and decreases as a result of the release of such a connection.')
cfaInterworkIfTxAllocRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2, 1, 1, 5), Gauge32()).setUnits('bits-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfaInterworkIfTxAllocRate.setStatus('current')
if mibBuilder.loadTexts: cfaInterworkIfTxAllocRate.setDescription('The allocated bit rate for traffic sent out the Frame Relay interface. This is the bandwidth allocated to connections. This value increases as a result of setup of a connection requesting non-zero CIR in the transmit direction, and decreases as a result of the release of such a connection.')
ciscoAtmSwitchFrRmMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 110, 2))
ciscoAtmSwitchFrRmMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 110, 3))
ciscoAtmSwitchFrRmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 110, 3, 1))
ciscoAtmSwitchFrRmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 110, 3, 2))
ciscoAtmSwitchFrRmMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 110, 3, 1, 1)).setObjects(("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaAdapterGroup"), ("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaInterworkGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmSwitchFrRmMIBCompliance = ciscoAtmSwitchFrRmMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmSwitchFrRmMIBCompliance.setDescription('The compliance statement for the Cisco Frame Relay/FUNI to ATM Interworking Function Resource Management MIB.')
cfaAdapterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 110, 3, 2, 1)).setObjects(("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaAdapterIfVcQInqDiscThresh"), ("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaAdapterIfVcQOutqDiscThresh"), ("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaAdapterIfVcQInqMarkThresh"), ("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaAdapterIfVcQOutqMarkThresh"), ("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaAdapterIfVbrServOflow"), ("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaAdapterIfOverbooking"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfaAdapterGroup = cfaAdapterGroup.setStatus('current')
if mibBuilder.loadTexts: cfaAdapterGroup.setDescription('A collection of objects which manage resources for Cisco Frame Relay/FUNI to ATM Interworking Function connections.')
cfaInterworkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 110, 3, 2, 2)).setObjects(("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaInterworkIfRxAvailRate"), ("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaInterworkIfTxAvailRate"), ("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaInterworkIfRxAllocRate"), ("CISCO-ATM-SWITCH-FR-RM-MIB", "cfaInterworkIfTxAllocRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfaInterworkGroup = cfaInterworkGroup.setStatus('current')
if mibBuilder.loadTexts: cfaInterworkGroup.setDescription('A collection of objects which manage resources for Cisco Frame Relay/FUNI to ATM Interworking Function connections.')
mibBuilder.exportSymbols("CISCO-ATM-SWITCH-FR-RM-MIB", ciscoAtmSwitchFrRmMIBCompliance=ciscoAtmSwitchFrRmMIBCompliance, cfaAdapterIfVcQThresholdTable=cfaAdapterIfVcQThresholdTable, CfaInterworkServiceCategory=CfaInterworkServiceCategory, cfaInterworkGroup=cfaInterworkGroup, ciscoAtmSwitchFrRmMIBCompliances=ciscoAtmSwitchFrRmMIBCompliances, ciscoAtmSwitchFrRmMIBGroups=ciscoAtmSwitchFrRmMIBGroups, cfaAdapterIfVcQInqDiscThresh=cfaAdapterIfVcQInqDiscThresh, cfaInterworkIfRxAllocRate=cfaInterworkIfRxAllocRate, ciscoAtmSwitchFrRmMIBObjects=ciscoAtmSwitchFrRmMIBObjects, cfaAdapter=cfaAdapter, cfaInterworkIfResourceEntry=cfaInterworkIfResourceEntry, cfaInterworkIfVcQService=cfaInterworkIfVcQService, cfaAdapterIfVcQService=cfaAdapterIfVcQService, cfaAdapterIfFrConfigEntry=cfaAdapterIfFrConfigEntry, cfaAdapterIfVbrServOflowEntry=cfaAdapterIfVbrServOflowEntry, cfaInterworkIfRxAvailRate=cfaInterworkIfRxAvailRate, cfaAdapterIfOverbooking=cfaAdapterIfOverbooking, ciscoAtmSwitchFrRmMIB=ciscoAtmSwitchFrRmMIB, cfaAdapterIfVcQInqMarkThresh=cfaAdapterIfVcQInqMarkThresh, cfaInterworkIfTxAvailRate=cfaInterworkIfTxAvailRate, ciscoAtmSwitchFrRmMIBNotifications=ciscoAtmSwitchFrRmMIBNotifications, cfaInterwork=cfaInterwork, cfaInterworkIfResourceTable=cfaInterworkIfResourceTable, PYSNMP_MODULE_ID=ciscoAtmSwitchFrRmMIB, cfaAdapterIfVcQOutqDiscThresh=cfaAdapterIfVcQOutqDiscThresh, cfaAdapterIfVcQThresholdEntry=cfaAdapterIfVcQThresholdEntry, cfaAdapterGroup=cfaAdapterGroup, cfaAdapterIfVcQOutqMarkThresh=cfaAdapterIfVcQOutqMarkThresh, ciscoAtmSwitchFrRmMIBConformance=ciscoAtmSwitchFrRmMIBConformance, cfaAdapterIfVbrServOflowTable=cfaAdapterIfVbrServOflowTable, cfaAdapterIfVbrServOflow=cfaAdapterIfVbrServOflow, cfaAdapterIfFrConfigTable=cfaAdapterIfFrConfigTable, cfaInterworkIfTxAllocRate=cfaInterworkIfTxAllocRate)
