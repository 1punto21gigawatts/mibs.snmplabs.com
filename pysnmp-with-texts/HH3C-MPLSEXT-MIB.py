#
# PySNMP MIB module HH3C-MPLSEXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-MPLSEXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:28:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ObjectIdentity, Counter64, iso, ModuleIdentity, NotificationType, Integer32, TimeTicks, Gauge32, MibIdentifier, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ObjectIdentity", "Counter64", "iso", "ModuleIdentity", "NotificationType", "Integer32", "TimeTicks", "Gauge32", "MibIdentifier", "IpAddress", "Bits")
TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
hh3cMplsExt = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 142))
hh3cMplsExt.setRevisions(('2013-06-13 18:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cMplsExt.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: hh3cMplsExt.setLastUpdated('201306131800Z')
if mibBuilder.loadTexts: hh3cMplsExt.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: hh3cMplsExt.setContactInfo('Platform Team Hangzhou H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: hh3cMplsExt.setDescription('Multiprotocol Label Switching MIB')
hh3cMplsExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 142, 1))
hh3cMplsExtScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 142, 1, 1))
hh3cMplsExtLsrID = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 142, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cMplsExtLsrID.setStatus('current')
if mibBuilder.loadTexts: hh3cMplsExtLsrID.setDescription("The Label Switching Router's Identifier.")
hh3cMplsExtLdpStatus = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 142, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cMplsExtLdpStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cMplsExtLdpStatus.setDescription('The global configuration of LDP(Label Distribution Protocol).')
hh3cMplsExtTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 142, 1, 2), )
if mibBuilder.loadTexts: hh3cMplsExtTable.setStatus('current')
if mibBuilder.loadTexts: hh3cMplsExtTable.setDescription('A table for configuring MPLS(Multiprotocol Label Switching) parameters.')
hh3cMplsExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 142, 1, 2, 1), ).setIndexNames((0, "HH3C-MPLSEXT-MIB", "hh3cMplsExtIndex"))
if mibBuilder.loadTexts: hh3cMplsExtEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cMplsExtEntry.setDescription('An entry for configuring MPLS parameters.')
hh3cMplsExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 142, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hh3cMplsExtIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cMplsExtIndex.setDescription('Index of MPLS interface.')
hh3cMplsExtCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 142, 1, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsExtCapability.setStatus('current')
if mibBuilder.loadTexts: hh3cMplsExtCapability.setDescription('The MPLS capability of an interface.')
hh3cMplsExtMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 142, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(46, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsExtMtu.setStatus('current')
if mibBuilder.loadTexts: hh3cMplsExtMtu.setDescription('The MPLS MTU(Maximum Transmission Unit) of an interface.')
hh3cMplsExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 142, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsExtRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cMplsExtRowStatus.setDescription('Operation status of this table entry.')
hh3cMplsExtLdpTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 142, 1, 3), )
if mibBuilder.loadTexts: hh3cMplsExtLdpTable.setStatus('current')
if mibBuilder.loadTexts: hh3cMplsExtLdpTable.setDescription('A table for configuring LDP parameters.')
hh3cMplsExtLdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 142, 1, 3, 1), ).setIndexNames((0, "HH3C-MPLSEXT-MIB", "hh3cMplsExtLdpIndex"))
if mibBuilder.loadTexts: hh3cMplsExtLdpEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cMplsExtLdpEntry.setDescription('An entry for configuring LDP parameters.')
hh3cMplsExtLdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 142, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hh3cMplsExtLdpIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cMplsExtLdpIndex.setDescription('Index of LDP interface.')
hh3cMplsExtLdpCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 142, 1, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsExtLdpCapability.setStatus('current')
if mibBuilder.loadTexts: hh3cMplsExtLdpCapability.setDescription('The LDP capability of an interface.')
hh3cMplsExtLdpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 142, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsExtLdpRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cMplsExtLdpRowStatus.setDescription("Operation status of this table entry. A row entry cannot be modified when the value of this object is 'active'.")
mibBuilder.exportSymbols("HH3C-MPLSEXT-MIB", hh3cMplsExtEntry=hh3cMplsExtEntry, hh3cMplsExtLdpRowStatus=hh3cMplsExtLdpRowStatus, hh3cMplsExt=hh3cMplsExt, hh3cMplsExtCapability=hh3cMplsExtCapability, hh3cMplsExtLdpCapability=hh3cMplsExtLdpCapability, PYSNMP_MODULE_ID=hh3cMplsExt, hh3cMplsExtScalarGroup=hh3cMplsExtScalarGroup, hh3cMplsExtObjects=hh3cMplsExtObjects, hh3cMplsExtTable=hh3cMplsExtTable, hh3cMplsExtIndex=hh3cMplsExtIndex, hh3cMplsExtRowStatus=hh3cMplsExtRowStatus, hh3cMplsExtMtu=hh3cMplsExtMtu, hh3cMplsExtLsrID=hh3cMplsExtLsrID, hh3cMplsExtLdpIndex=hh3cMplsExtLdpIndex, hh3cMplsExtLdpEntry=hh3cMplsExtLdpEntry, hh3cMplsExtLdpTable=hh3cMplsExtLdpTable, hh3cMplsExtLdpStatus=hh3cMplsExtLdpStatus)
