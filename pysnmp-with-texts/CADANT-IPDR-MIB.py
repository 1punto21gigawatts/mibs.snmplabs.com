#
# PySNMP MIB module CADANT-IPDR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CADANT-IPDR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:45:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
cadExperimental, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadExperimental")
InetAddressIPv4or6, = mibBuilder.importSymbols("CADANT-TC", "InetAddressIPv4or6")
InetAddressType, InetAddress, InetAddressIPv4, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetAddressIPv4", "InetPortNumber")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, IpAddress, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter64, Gauge32, Unsigned32, Bits, ObjectIdentity, Counter32, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter64", "Gauge32", "Unsigned32", "Bits", "ObjectIdentity", "Counter32", "ModuleIdentity", "Integer32")
RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
cadIpdrMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30))
cadIpdrMib.setRevisions(('2015-06-25 00:00', '2014-04-23 00:00', '2009-09-28 00:00', '2009-09-17 00:00', '2009-08-17 00:00', '2009-01-06 00:00', '2007-11-19 00:00', '2006-05-09 00:00', '2005-06-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cadIpdrMib.setRevisionsDescriptions(('Add comments.', 'Expanded list of service types to align with latest CM-SP-OSSIv3.0-I23-140403.', 'Changed range of cadIpdrServicePriority from 0..10 to 0..64.', 'Added the IPDR 3.0 Mib objects for tracking session collector status.', 'Added the IPDR 3.0 Mib objects.', 'Added the following new MIB object cadIpdrSessionId.', 'Change MAX-ACCESS of the following MIB object to read-only cadIpdrCollectorIpAddrType.', 'change MAX-ACCESS of the following MIB objects to read-create cadIpdrCollectorIpAddrType, cadIpdrCollectorPort, cadIpdrCollectorStatus, cadIpdrReportInterval, and cadIpdrReportStatus', 'created',))
if mibBuilder.loadTexts: cadIpdrMib.setLastUpdated('201506250000Z')
if mibBuilder.loadTexts: cadIpdrMib.setOrganization('Arris International, Inc.')
if mibBuilder.loadTexts: cadIpdrMib.setContactInfo('Arris Technical Support Postal: ARRIS E-Mail: support@arris.com')
if mibBuilder.loadTexts: cadIpdrMib.setDescription('This MIB modules contains the definitions to support configuration and status for C4 IPDR implementation.')
cadIpdrMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1))
cadIpdrMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 2))
cadIpdrExportEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIpdrExportEnabled.setStatus('current')
if mibBuilder.loadTexts: cadIpdrExportEnabled.setDescription('IPDR streams is enabled or disabled. When enabled the cadIpdrQueryPort and cadIpdrStreamingPort will be open to listen for collector connections. When disabled, all ports will be closed.')
cadIpdrQueryPort = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(4737)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIpdrQueryPort.setStatus('current')
if mibBuilder.loadTexts: cadIpdrQueryPort.setDescription('UDP port used to listen for collector queries.')
cadIpdrStreamingPort = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(4737)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIpdrStreamingPort.setStatus('current')
if mibBuilder.loadTexts: cadIpdrStreamingPort.setDescription('TCP port used to listen for collector connections.')
cadIpdrDataAckWindow = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIpdrDataAckWindow.setStatus('current')
if mibBuilder.loadTexts: cadIpdrDataAckWindow.setDescription('Maximum number of unacknowledged IPDR/SP messages that may be outstanding to the collector. Applicable to DOCSIS 2.0 mode.')
cadIpdrDataAckTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIpdrDataAckTimeout.setStatus('current')
if mibBuilder.loadTexts: cadIpdrDataAckTimeout.setDescription('Maximum elapsed time before a DATA message must be acknowledged by the collector. Applicable to DOCSIS 2.0 mode.')
cadIpdrKeepAliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIpdrKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: cadIpdrKeepAliveInterval.setDescription('Maximum duration of protocol silence before a KEEPALIVE message must be sent.')
cadIpdrExportAllCounts = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIpdrExportAllCounts.setStatus('current')
if mibBuilder.loadTexts: cadIpdrExportAllCounts.setDescription('Export all counts if true, and supress duplicate counts if false. The default is false. Applicable to DOCSIS 2.0 mode.')
cadIpdrExportCpeInfo = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIpdrExportCpeInfo.setStatus('current')
if mibBuilder.loadTexts: cadIpdrExportCpeInfo.setDescription('Export information about CPEs behind CMs (CmCpeInfoList) if set to true. If false, supress information about CPEs. The default is false. Applicable to DOCSIS 2.0 mode.')
cadIpdrSessionId = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIpdrSessionId.setStatus('current')
if mibBuilder.loadTexts: cadIpdrSessionId.setDescription('session-id used in the header of IPDR protocol messages. The default is 1. Applicable to DOCSIS 2.0 mode.')
cadIpdrExportMode = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIpdrExportMode.setStatus('current')
if mibBuilder.loadTexts: cadIpdrExportMode.setDescription('DOCSIS mode exporter, either DOCSIS 2.0 or DOCSIS 3.0. The default is DOCSIS 2.0 mode, or 1.')
cadIpdrCollectorTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 11), )
if mibBuilder.loadTexts: cadIpdrCollectorTable.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCollectorTable.setDescription('A priority ordered list of collectors that will be allowed to connect to the exporter. The highest priority active collector is designated the primary collector. This list is exclusive and any collector not in this list will be ignored. Applicable to DOCSIS 2.0 mode.')
cadIpdrCollectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 11, 1), ).setIndexNames((0, "CADANT-IPDR-MIB", "cadIpdrCollectorPriority"), (0, "CADANT-IPDR-MIB", "cadIpdrCollectorIpAddress"))
if mibBuilder.loadTexts: cadIpdrCollectorEntry.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCollectorEntry.setDescription('')
cadIpdrCollectorPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1))
if mibBuilder.loadTexts: cadIpdrCollectorPriority.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCollectorPriority.setDescription('The collector priority. Lower values indicate higher priority. The default priority is 1. Applicable to DOCSIS 2.0 mode.')
cadIpdrCollectorIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 11, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIpdrCollectorIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCollectorIpAddrType.setDescription('The type of internet address (IPv4 or IPv6). The only internet address type currently allowed is IPv4. Applicable to DOCSIS 2.0 mode.')
cadIpdrCollectorIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 11, 1, 3), InetAddressIPv4or6())
if mibBuilder.loadTexts: cadIpdrCollectorIpAddress.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCollectorIpAddress.setDescription('Source IP address of a collector that will be permitted to connect to the exporter. Applicable to DOCSIS 2.0 mode.')
cadIpdrCollectorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 11, 1, 4), InetPortNumber().clone(4737)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIpdrCollectorPort.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCollectorPort.setDescription('Destination port of collector if exporter trys to connect to the collector. Default is 4747. This object is currently disabled. Applicable to DOCSIS 2.0 mode.')
cadIpdrCollectorActive = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 11, 1, 5), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIpdrCollectorActive.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCollectorActive.setDescription('True if this collector is connected to the exporter. Applicable to DOCSIS 2.0 mode.')
cadIpdrCollectorPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 11, 1, 6), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIpdrCollectorPrimary.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCollectorPrimary.setDescription('True if this collector is the primary collector. Applicable to DOCSIS 2.0 mode.')
cadIpdrCollectorOutIntRecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 11, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIpdrCollectorOutIntRecs.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCollectorOutIntRecs.setDescription('Number of interim data records exported to this collector. Applicable to DOCSIS 2.0 mode.')
cadIpdrCollectorOutStpRecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 11, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIpdrCollectorOutStpRecs.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCollectorOutStpRecs.setDescription('Number of stop data records exported to this collector. Applicable to DOCSIS 2.0 mode.')
cadIpdrCollectorSupIntRecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 11, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIpdrCollectorSupIntRecs.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCollectorSupIntRecs.setDescription('Number of interim data records suppressed for this collector. Applicable to DOCSIS 2.0 mode.')
cadIpdrCollectorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 11, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadIpdrCollectorStatus.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCollectorStatus.setDescription('Row control for this collector. The only valid values for this object are createAndGo, destroy, and active. Applicable to DOCSIS 2.0 mode.')
cadIpdrReportCycleTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 12), )
if mibBuilder.loadTexts: cadIpdrReportCycleTable.setStatus('current')
if mibBuilder.loadTexts: cadIpdrReportCycleTable.setDescription('A list of scheduled report cycle start times and interval durations. Multiple entries indicate blocks of time with variable interval durations. Applicable to DOCSIS 2.0 mode.')
cadIpdrReportCycleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 12, 1), ).setIndexNames((0, "CADANT-IPDR-MIB", "cadIpdrReportStartHH"), (0, "CADANT-IPDR-MIB", "cadIpdrReportStartMM"))
if mibBuilder.loadTexts: cadIpdrReportCycleEntry.setStatus('current')
if mibBuilder.loadTexts: cadIpdrReportCycleEntry.setDescription('')
cadIpdrReportStartHH = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cadIpdrReportStartHH.setStatus('current')
if mibBuilder.loadTexts: cadIpdrReportStartHH.setDescription('The report cycle start hour. The default is 00. Applicable to DOCSIS 2.0 mode.')
cadIpdrReportStartMM = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59)))
if mibBuilder.loadTexts: cadIpdrReportStartMM.setStatus('current')
if mibBuilder.loadTexts: cadIpdrReportStartMM.setDescription('The report cycle start minutes after the hour. Default is 00. Applicable to DOCSIS 2.0 mode.')
cadIpdrReportInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 1440)).clone(60)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadIpdrReportInterval.setStatus('current')
if mibBuilder.loadTexts: cadIpdrReportInterval.setDescription('The report cycle interval duration in minutes. The default is 60 minutes. Applicable to DOCSIS 2.0 mode.')
cadIpdrReportOutIntRecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 12, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIpdrReportOutIntRecs.setStatus('current')
if mibBuilder.loadTexts: cadIpdrReportOutIntRecs.setDescription('Number of interim data records exported during this report cycle. Applicable to DOCSIS 2.0 mode.')
cadIpdrReportOutStpRecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 12, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIpdrReportOutStpRecs.setStatus('current')
if mibBuilder.loadTexts: cadIpdrReportOutStpRecs.setDescription('Number of stop data records exported during this report cycle. Applicable to DOCSIS 2.0 mode.')
cadIpdrReportSupIntRecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 12, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIpdrReportSupIntRecs.setStatus('current')
if mibBuilder.loadTexts: cadIpdrReportSupIntRecs.setDescription('Number of interim data records suppressed during this report cycle. Applicable to DOCSIS 2.0 mode.')
cadIpdrReportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 12, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadIpdrReportStatus.setStatus('current')
if mibBuilder.loadTexts: cadIpdrReportStatus.setDescription('Row control for this report cycle. The only valid values for this object are createAndGo, destroy, and active. Applicable to DOCSIS 2.0 mode.')
cadIpdrServiceTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 13), )
if mibBuilder.loadTexts: cadIpdrServiceTable.setStatus('current')
if mibBuilder.loadTexts: cadIpdrServiceTable.setDescription('A session-id ordered list of services that will be allowed to be requested by the Collector. This list is exclusive and are used when the exporter is in DOCSIS 3.0 mode.')
cadIpdrServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 13, 1), ).setIndexNames((0, "CADANT-IPDR-MIB", "cadIpdrServiceSessionId"))
if mibBuilder.loadTexts: cadIpdrServiceEntry.setStatus('current')
if mibBuilder.loadTexts: cadIpdrServiceEntry.setDescription('')
cadIpdrServiceSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1))
if mibBuilder.loadTexts: cadIpdrServiceSessionId.setStatus('current')
if mibBuilder.loadTexts: cadIpdrServiceSessionId.setDescription('The session-id used in the header of IPDR protocol messages. The default is 1.')
cadIpdrServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 13)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadIpdrServiceType.setStatus('current')
if mibBuilder.loadTexts: cadIpdrServiceType.setDescription('The session service types are unknown(0), samis_1(1), samis_2(2), cpe(3), cm_reg(4), cm_us(5), spect(6), diag(7), topo(8), us_util(9), ds_util(10), diag_evt(11), diag_det(12), cm_sf(13), cpe_a2(14), mcast(15). The default is 1.')
cadIpdrServiceMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadIpdrServiceMethod.setStatus('current')
if mibBuilder.loadTexts: cadIpdrServiceMethod.setDescription('The session service method (unknown, time, event, adhoc). The default is time.')
cadIpdrServicePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadIpdrServicePriority.setStatus('current')
if mibBuilder.loadTexts: cadIpdrServicePriority.setDescription('The session priority. Lower values indicate higher priority. This object is not used.')
cadIpdrServiceDataAckWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadIpdrServiceDataAckWindow.setStatus('current')
if mibBuilder.loadTexts: cadIpdrServiceDataAckWindow.setDescription('The session maximum number of unacknowledged IPDR/SP messages that may be outstanding to the collector.')
cadIpdrServiceDataAckTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadIpdrServiceDataAckTimeout.setStatus('current')
if mibBuilder.loadTexts: cadIpdrServiceDataAckTimeout.setDescription('The session maximum elapsed time before a DATA message must be acknowledged by the collector.')
cadIpdrServiceReportCycleSet = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadIpdrServiceReportCycleSet.setStatus('current')
if mibBuilder.loadTexts: cadIpdrServiceReportCycleSet.setDescription('The session report cycle set.')
cadIpdrServiceEvtPaceGap = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadIpdrServiceEvtPaceGap.setStatus('current')
if mibBuilder.loadTexts: cadIpdrServiceEvtPaceGap.setDescription('The session event pace gap.')
cadIpdrServiceAllCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 13, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadIpdrServiceAllCounts.setStatus('current')
if mibBuilder.loadTexts: cadIpdrServiceAllCounts.setDescription('Export all counts if true, and supress duplicate counts if false. The default is false.')
cadIpdrServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 13, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadIpdrServiceStatus.setStatus('current')
if mibBuilder.loadTexts: cadIpdrServiceStatus.setDescription('Row control for this service. The only valid values for this object are createAndGo, destroy, and active.')
cadIpdrReportCycleSetTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 14), )
if mibBuilder.loadTexts: cadIpdrReportCycleSetTable.setStatus('current')
if mibBuilder.loadTexts: cadIpdrReportCycleSetTable.setDescription('A list of sets of scheduled report cycle start times and interval durations. Multiple entries indicate blocks of time with variable interval durations. Applicable to DOCSIS 3.0 mode.')
cadIpdrReportCycleSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 14, 1), ).setIndexNames((0, "CADANT-IPDR-MIB", "cadIpdrReportCycleSetSet"), (0, "CADANT-IPDR-MIB", "cadIpdrReportCycleSetStartHH"), (0, "CADANT-IPDR-MIB", "cadIpdrReportCycleSetStartMM"))
if mibBuilder.loadTexts: cadIpdrReportCycleSetEntry.setStatus('current')
if mibBuilder.loadTexts: cadIpdrReportCycleSetEntry.setDescription('')
cadIpdrReportCycleSetSet = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1))
if mibBuilder.loadTexts: cadIpdrReportCycleSetSet.setStatus('current')
if mibBuilder.loadTexts: cadIpdrReportCycleSetSet.setDescription('The report cycle set id number. The default is 1.')
cadIpdrReportCycleSetStartHH = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cadIpdrReportCycleSetStartHH.setStatus('current')
if mibBuilder.loadTexts: cadIpdrReportCycleSetStartHH.setDescription('The report cycle set start hour. The default is 00.')
cadIpdrReportCycleSetStartMM = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59)))
if mibBuilder.loadTexts: cadIpdrReportCycleSetStartMM.setStatus('current')
if mibBuilder.loadTexts: cadIpdrReportCycleSetStartMM.setDescription('The report cycle set start minutes after the hour. Default is 00.')
cadIpdrReportCycleSetInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 1440)).clone(60)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadIpdrReportCycleSetInterval.setStatus('current')
if mibBuilder.loadTexts: cadIpdrReportCycleSetInterval.setDescription('The report cycle set interval duration in minutes. The default is 60 minutes.')
cadIpdrReportCycleSetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 14, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadIpdrReportCycleSetStatus.setStatus('current')
if mibBuilder.loadTexts: cadIpdrReportCycleSetStatus.setDescription('Row control for this report cycle set entry. The only valid values for this object are createAndGo, destroy, and active.')
cadIpdrCountsTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 15), )
if mibBuilder.loadTexts: cadIpdrCountsTable.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCountsTable.setDescription('A session-id/priority/collector ordered list of counts for all sessions. Applicable to DOCSIS 2.0 and 3.0 modes.')
cadIpdrCountsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 15, 1), ).setIndexNames((0, "CADANT-IPDR-MIB", "cadIpdrCountsSessionId"), (0, "CADANT-IPDR-MIB", "cadIpdrCountsCollectorPriority"), (0, "CADANT-IPDR-MIB", "cadIpdrCountsCollectorIpAddress"), (0, "CADANT-IPDR-MIB", "cadIpdrCountsStartHH"), (0, "CADANT-IPDR-MIB", "cadIpdrCountsStartMM"), (0, "CADANT-IPDR-MIB", "cadIpdrCountsAdhocIndex"))
if mibBuilder.loadTexts: cadIpdrCountsEntry.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCountsEntry.setDescription('')
cadIpdrCountsSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1))
if mibBuilder.loadTexts: cadIpdrCountsSessionId.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCountsSessionId.setDescription('The counts session-id used in the header of IPDR protocol messages. The default is 1.')
cadIpdrCountsCollectorPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1))
if mibBuilder.loadTexts: cadIpdrCountsCollectorPriority.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCountsCollectorPriority.setDescription('The counts collector priority. Lower values indicate higher priority. The default priority is 1.')
cadIpdrCountsCollectorIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 15, 1, 3), InetAddressIPv4or6())
if mibBuilder.loadTexts: cadIpdrCountsCollectorIpAddress.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCountsCollectorIpAddress.setDescription('The counts source IP address of a collector that will be permitted to connect to the exporter.')
cadIpdrCountsStartHH = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: cadIpdrCountsStartHH.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCountsStartHH.setDescription('The counts report cycle start hour. The default is 00.')
cadIpdrCountsStartMM = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59)))
if mibBuilder.loadTexts: cadIpdrCountsStartMM.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCountsStartMM.setDescription('The counts report cycle start minutes after the hour. Default is 00.')
cadIpdrCountsAdhocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 15, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: cadIpdrCountsAdhocIndex.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCountsAdhocIndex.setDescription('The counts adhoc index.')
cadIpdrCountsStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadIpdrCountsStartTime.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCountsStartTime.setDescription('The counts report cycle start time. Default is 0 length.')
cadIpdrCountsStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 15, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadIpdrCountsStopTime.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCountsStopTime.setDescription('The counts report cycle stop time. Default is 0 length.')
cadIpdrCountsIntRecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 15, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIpdrCountsIntRecs.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCountsIntRecs.setDescription('Number of interim data records exported for this session-id to this collector.')
cadIpdrCountsSupIntRecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 15, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIpdrCountsSupIntRecs.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCountsSupIntRecs.setDescription('Number of interim data records suppressed for this session-id to this collector.')
cadIpdrCountsStartRecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 15, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIpdrCountsStartRecs.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCountsStartRecs.setDescription('Number of start data records exported for this session-id to this collector.')
cadIpdrCountsStopRecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 15, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIpdrCountsStopRecs.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCountsStopRecs.setDescription('Number of stop data records exported for this session-id to this collector.')
cadIpdrCountsEventRecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 15, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIpdrCountsEventRecs.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCountsEventRecs.setDescription('Number of event data records exported for this session-id to this collector.')
cadIpdrCountsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 15, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadIpdrCountsStatus.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCountsStatus.setDescription('Row control for this counts entry. The only valid values for this object are createAndGo, destroy, and active.')
cadIpdrSessionCollectorTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 16), )
if mibBuilder.loadTexts: cadIpdrSessionCollectorTable.setStatus('current')
if mibBuilder.loadTexts: cadIpdrSessionCollectorTable.setDescription('A session and priority ordered list of collectors that is used to track the Active and Primary status of the collector relative to this session. Applicable to DOCSIS 3.0 mode.')
cadIpdrSessionCollectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 16, 1), ).setIndexNames((0, "CADANT-IPDR-MIB", "cadIpdrSessionCollectorSessionId"), (0, "CADANT-IPDR-MIB", "cadIpdrSessionCollectorPriority"), (0, "CADANT-IPDR-MIB", "cadIpdrSessionCollectorIpAddress"))
if mibBuilder.loadTexts: cadIpdrSessionCollectorEntry.setStatus('current')
if mibBuilder.loadTexts: cadIpdrSessionCollectorEntry.setDescription('')
cadIpdrSessionCollectorSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1))
if mibBuilder.loadTexts: cadIpdrSessionCollectorSessionId.setStatus('current')
if mibBuilder.loadTexts: cadIpdrSessionCollectorSessionId.setDescription('The counts session-id used in the header of IPDR protocol messages. The default is 1.')
cadIpdrSessionCollectorPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1))
if mibBuilder.loadTexts: cadIpdrSessionCollectorPriority.setStatus('current')
if mibBuilder.loadTexts: cadIpdrSessionCollectorPriority.setDescription('The collector priority. Lower values indicate higher priority. The default priority is 1.')
cadIpdrSessionCollectorIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 16, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIpdrSessionCollectorIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cadIpdrSessionCollectorIpAddrType.setDescription('The type of internet address (IPv4 or IPv6). The only internet address type currently allowed is IPv4.')
cadIpdrSessionCollectorIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 16, 1, 4), InetAddressIPv4or6())
if mibBuilder.loadTexts: cadIpdrSessionCollectorIpAddress.setStatus('current')
if mibBuilder.loadTexts: cadIpdrSessionCollectorIpAddress.setDescription('Source IP address of a collector that will be permitted to connect to the exporter.')
cadIpdrSessionCollectorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 16, 1, 5), InetPortNumber().clone(4737)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIpdrSessionCollectorPort.setStatus('current')
if mibBuilder.loadTexts: cadIpdrSessionCollectorPort.setDescription('Destination port of collector if exporter trys to connect to the collector. Default is 4747. This object is currently disabled.')
cadIpdrSessionCollectorActive = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 16, 1, 6), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIpdrSessionCollectorActive.setStatus('current')
if mibBuilder.loadTexts: cadIpdrSessionCollectorActive.setDescription('True if this collector is connected to the exporter for this session.')
cadIpdrSessionCollectorPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 16, 1, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIpdrSessionCollectorPrimary.setStatus('current')
if mibBuilder.loadTexts: cadIpdrSessionCollectorPrimary.setDescription('True if this collector is the primary collector for this session.')
cadIpdrSessionCollectorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 1, 16, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadIpdrSessionCollectorStatus.setStatus('current')
if mibBuilder.loadTexts: cadIpdrSessionCollectorStatus.setDescription('Row control for this collector. The only valid values for this object are createAndGo, destroy, and active.')
cadIpdrMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 2, 1))
cadIpdrMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 2, 2))
cadIpdrMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 2, 1, 1)).setObjects(("CADANT-IPDR-MIB", "cadIpdrBasicGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadIpdrMIBCompliance = cadIpdrMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cadIpdrMIBCompliance.setDescription('The compliance statement for the Arris IPDR implementation.')
cadIpdrBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 2, 2, 1)).setObjects(("CADANT-IPDR-MIB", "cadIpdrExportEnabled"), ("CADANT-IPDR-MIB", "cadIpdrQueryPort"), ("CADANT-IPDR-MIB", "cadIpdrStreamingPort"), ("CADANT-IPDR-MIB", "cadIpdrDataAckWindow"), ("CADANT-IPDR-MIB", "cadIpdrDataAckTimeout"), ("CADANT-IPDR-MIB", "cadIpdrKeepAliveInterval"), ("CADANT-IPDR-MIB", "cadIpdrExportAllCounts"), ("CADANT-IPDR-MIB", "cadIpdrExportCpeInfo"), ("CADANT-IPDR-MIB", "cadIpdrSessionId"), ("CADANT-IPDR-MIB", "cadIpdrExportMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadIpdrBasicGroup = cadIpdrBasicGroup.setStatus('current')
if mibBuilder.loadTexts: cadIpdrBasicGroup.setDescription('')
cadIpdrCollectorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 2, 2, 2)).setObjects(("CADANT-IPDR-MIB", "cadIpdrCollectorIpAddrType"), ("CADANT-IPDR-MIB", "cadIpdrCollectorPort"), ("CADANT-IPDR-MIB", "cadIpdrCollectorActive"), ("CADANT-IPDR-MIB", "cadIpdrCollectorPrimary"), ("CADANT-IPDR-MIB", "cadIpdrCollectorOutIntRecs"), ("CADANT-IPDR-MIB", "cadIpdrCollectorOutStpRecs"), ("CADANT-IPDR-MIB", "cadIpdrCollectorSupIntRecs"), ("CADANT-IPDR-MIB", "cadIpdrCollectorStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadIpdrCollectorGroup = cadIpdrCollectorGroup.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCollectorGroup.setDescription('')
cadIpdrReportGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 2, 2, 3)).setObjects(("CADANT-IPDR-MIB", "cadIpdrReportOutIntRecs"), ("CADANT-IPDR-MIB", "cadIpdrReportOutStpRecs"), ("CADANT-IPDR-MIB", "cadIpdrReportSupIntRecs"), ("CADANT-IPDR-MIB", "cadIpdrReportStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadIpdrReportGroup = cadIpdrReportGroup.setStatus('current')
if mibBuilder.loadTexts: cadIpdrReportGroup.setDescription('')
cadIpdrServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 2, 2, 4)).setObjects(("CADANT-IPDR-MIB", "cadIpdrServiceType"), ("CADANT-IPDR-MIB", "cadIpdrServiceMethod"), ("CADANT-IPDR-MIB", "cadIpdrServicePriority"), ("CADANT-IPDR-MIB", "cadIpdrServiceDataAckWindow"), ("CADANT-IPDR-MIB", "cadIpdrServiceDataAckTimeout"), ("CADANT-IPDR-MIB", "cadIpdrServiceReportCycleSet"), ("CADANT-IPDR-MIB", "cadIpdrServiceEvtPaceGap"), ("CADANT-IPDR-MIB", "cadIpdrServiceAllCounts"), ("CADANT-IPDR-MIB", "cadIpdrServiceStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadIpdrServiceGroup = cadIpdrServiceGroup.setStatus('current')
if mibBuilder.loadTexts: cadIpdrServiceGroup.setDescription('')
cadIpdrReportCycleSetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 2, 2, 5)).setObjects(("CADANT-IPDR-MIB", "cadIpdrReportCycleSetInterval"), ("CADANT-IPDR-MIB", "cadIpdrReportCycleSetStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadIpdrReportCycleSetGroup = cadIpdrReportCycleSetGroup.setStatus('current')
if mibBuilder.loadTexts: cadIpdrReportCycleSetGroup.setDescription('')
cadIpdrCountsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 2, 2, 6)).setObjects(("CADANT-IPDR-MIB", "cadIpdrCountsStartTime"), ("CADANT-IPDR-MIB", "cadIpdrCountsStopTime"), ("CADANT-IPDR-MIB", "cadIpdrCountsIntRecs"), ("CADANT-IPDR-MIB", "cadIpdrCountsSupIntRecs"), ("CADANT-IPDR-MIB", "cadIpdrCountsStartRecs"), ("CADANT-IPDR-MIB", "cadIpdrCountsStopRecs"), ("CADANT-IPDR-MIB", "cadIpdrCountsEventRecs"), ("CADANT-IPDR-MIB", "cadIpdrCountsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadIpdrCountsGroup = cadIpdrCountsGroup.setStatus('current')
if mibBuilder.loadTexts: cadIpdrCountsGroup.setDescription('')
cadIpdrSessionCollectorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 100, 30, 2, 2, 7)).setObjects(("CADANT-IPDR-MIB", "cadIpdrSessionCollectorIpAddrType"), ("CADANT-IPDR-MIB", "cadIpdrSessionCollectorPort"), ("CADANT-IPDR-MIB", "cadIpdrSessionCollectorActive"), ("CADANT-IPDR-MIB", "cadIpdrSessionCollectorPrimary"), ("CADANT-IPDR-MIB", "cadIpdrSessionCollectorStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadIpdrSessionCollectorGroup = cadIpdrSessionCollectorGroup.setStatus('current')
if mibBuilder.loadTexts: cadIpdrSessionCollectorGroup.setDescription('')
mibBuilder.exportSymbols("CADANT-IPDR-MIB", cadIpdrServiceGroup=cadIpdrServiceGroup, cadIpdrCountsIntRecs=cadIpdrCountsIntRecs, cadIpdrSessionCollectorPriority=cadIpdrSessionCollectorPriority, cadIpdrCountsSessionId=cadIpdrCountsSessionId, cadIpdrBasicGroup=cadIpdrBasicGroup, cadIpdrCountsEntry=cadIpdrCountsEntry, cadIpdrExportMode=cadIpdrExportMode, cadIpdrSessionCollectorActive=cadIpdrSessionCollectorActive, cadIpdrReportCycleSetTable=cadIpdrReportCycleSetTable, cadIpdrMIBObjects=cadIpdrMIBObjects, cadIpdrCollectorStatus=cadIpdrCollectorStatus, cadIpdrReportCycleSetGroup=cadIpdrReportCycleSetGroup, cadIpdrReportInterval=cadIpdrReportInterval, cadIpdrServiceTable=cadIpdrServiceTable, cadIpdrCountsStartMM=cadIpdrCountsStartMM, cadIpdrSessionCollectorEntry=cadIpdrSessionCollectorEntry, cadIpdrMIBCompliances=cadIpdrMIBCompliances, cadIpdrMIBGroups=cadIpdrMIBGroups, cadIpdrStreamingPort=cadIpdrStreamingPort, cadIpdrReportOutStpRecs=cadIpdrReportOutStpRecs, cadIpdrReportSupIntRecs=cadIpdrReportSupIntRecs, cadIpdrReportCycleSetInterval=cadIpdrReportCycleSetInterval, cadIpdrServiceSessionId=cadIpdrServiceSessionId, cadIpdrDataAckWindow=cadIpdrDataAckWindow, cadIpdrCountsEventRecs=cadIpdrCountsEventRecs, cadIpdrReportStatus=cadIpdrReportStatus, cadIpdrCollectorIpAddress=cadIpdrCollectorIpAddress, cadIpdrCountsGroup=cadIpdrCountsGroup, cadIpdrExportAllCounts=cadIpdrExportAllCounts, cadIpdrCountsStopTime=cadIpdrCountsStopTime, cadIpdrQueryPort=cadIpdrQueryPort, cadIpdrCountsStartTime=cadIpdrCountsStartTime, cadIpdrKeepAliveInterval=cadIpdrKeepAliveInterval, cadIpdrCollectorActive=cadIpdrCollectorActive, cadIpdrReportOutIntRecs=cadIpdrReportOutIntRecs, cadIpdrServiceReportCycleSet=cadIpdrServiceReportCycleSet, cadIpdrServiceStatus=cadIpdrServiceStatus, cadIpdrReportCycleSetStartMM=cadIpdrReportCycleSetStartMM, cadIpdrCollectorOutIntRecs=cadIpdrCollectorOutIntRecs, cadIpdrSessionCollectorIpAddrType=cadIpdrSessionCollectorIpAddrType, cadIpdrCountsCollectorPriority=cadIpdrCountsCollectorPriority, cadIpdrServicePriority=cadIpdrServicePriority, cadIpdrCountsSupIntRecs=cadIpdrCountsSupIntRecs, cadIpdrCountsCollectorIpAddress=cadIpdrCountsCollectorIpAddress, cadIpdrSessionCollectorIpAddress=cadIpdrSessionCollectorIpAddress, cadIpdrCountsTable=cadIpdrCountsTable, cadIpdrSessionCollectorPrimary=cadIpdrSessionCollectorPrimary, cadIpdrCountsStartHH=cadIpdrCountsStartHH, cadIpdrCollectorOutStpRecs=cadIpdrCollectorOutStpRecs, cadIpdrCollectorSupIntRecs=cadIpdrCollectorSupIntRecs, cadIpdrReportCycleTable=cadIpdrReportCycleTable, cadIpdrReportStartMM=cadIpdrReportStartMM, cadIpdrServiceType=cadIpdrServiceType, cadIpdrServiceDataAckWindow=cadIpdrServiceDataAckWindow, cadIpdrCollectorPriority=cadIpdrCollectorPriority, cadIpdrMIBCompliance=cadIpdrMIBCompliance, cadIpdrReportCycleSetSet=cadIpdrReportCycleSetSet, cadIpdrReportCycleSetEntry=cadIpdrReportCycleSetEntry, cadIpdrCountsStopRecs=cadIpdrCountsStopRecs, cadIpdrCountsStartRecs=cadIpdrCountsStartRecs, PYSNMP_MODULE_ID=cadIpdrMib, cadIpdrCollectorPrimary=cadIpdrCollectorPrimary, cadIpdrCollectorPort=cadIpdrCollectorPort, cadIpdrCountsStatus=cadIpdrCountsStatus, cadIpdrExportCpeInfo=cadIpdrExportCpeInfo, cadIpdrSessionCollectorPort=cadIpdrSessionCollectorPort, cadIpdrServiceEntry=cadIpdrServiceEntry, cadIpdrServiceAllCounts=cadIpdrServiceAllCounts, cadIpdrReportCycleSetStartHH=cadIpdrReportCycleSetStartHH, cadIpdrExportEnabled=cadIpdrExportEnabled, cadIpdrReportCycleSetStatus=cadIpdrReportCycleSetStatus, cadIpdrSessionCollectorSessionId=cadIpdrSessionCollectorSessionId, cadIpdrCountsAdhocIndex=cadIpdrCountsAdhocIndex, cadIpdrReportCycleEntry=cadIpdrReportCycleEntry, cadIpdrCollectorGroup=cadIpdrCollectorGroup, cadIpdrDataAckTimeout=cadIpdrDataAckTimeout, cadIpdrReportGroup=cadIpdrReportGroup, cadIpdrMib=cadIpdrMib, cadIpdrCollectorEntry=cadIpdrCollectorEntry, cadIpdrCollectorIpAddrType=cadIpdrCollectorIpAddrType, cadIpdrMIBConformance=cadIpdrMIBConformance, cadIpdrSessionId=cadIpdrSessionId, cadIpdrReportStartHH=cadIpdrReportStartHH, cadIpdrServiceDataAckTimeout=cadIpdrServiceDataAckTimeout, cadIpdrSessionCollectorStatus=cadIpdrSessionCollectorStatus, cadIpdrServiceMethod=cadIpdrServiceMethod, cadIpdrSessionCollectorGroup=cadIpdrSessionCollectorGroup, cadIpdrServiceEvtPaceGap=cadIpdrServiceEvtPaceGap, cadIpdrCollectorTable=cadIpdrCollectorTable, cadIpdrSessionCollectorTable=cadIpdrSessionCollectorTable)
