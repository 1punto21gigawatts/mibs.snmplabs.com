#
# PySNMP MIB module VISINET2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VISINET2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:34:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, IpAddress, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, enterprises, ObjectIdentity, Unsigned32, Integer32, Counter64, Bits, NotificationType, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "enterprises", "ObjectIdentity", "Unsigned32", "Integer32", "Counter64", "Bits", "NotificationType", "TimeTicks", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
unisys = MibIdentifier((1, 3, 6, 1, 4, 1, 223))
unisysOpen = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10))
unisysEnvMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 6))
uemAgentRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemAgentRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: uemAgentRevMajor.setDescription('Major version of the Unisys Environmental Monitoring Agent.')
uemAgentRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemAgentRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: uemAgentRevMinor.setDescription('Minor version of the Unisys Environmental Monitoring Agent.')
uemMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: uemMibRevMajor.setDescription('The Major Revision level of this MIB. A change in the major revision level represents a possible compatibility problem with older versions of the MIB.')
uemMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: uemMibRevMinor.setDescription('The minor revision level of this MIB. A change in the minor revision level may represent some minor additional support, changes to documentation or fixes to errors in a previous revision. Backward compatibility should be maintained as long as the major revision level is the same.')
uemSystemDescription = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 6, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSystemDescription.setStatus('mandatory')
if mibBuilder.loadTexts: uemSystemDescription.setDescription('Text describing this system such as manufacturer and model number.')
uemTrapsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uemTrapsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: uemTrapsEnabled.setDescription('All Environmental Monitoring traps can be globally disabled by setting this FALSE.')
uemTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemTrapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: uemTrapSeverity.setDescription('Additional information delivered with sensor and switch trap messages. Advanced management applications can make use of this information to better evaluate the severity of the situation. This variable is only intended for use with traps; no meaning should be assumed by a Manager to the value retrieved through a Get operation on this object.')
uemEnvMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 6, 16), )
if mibBuilder.loadTexts: uemEnvMonitorTable.setStatus('mandatory')
if mibBuilder.loadTexts: uemEnvMonitorTable.setDescription('An entry for each Monitor device on this host that is actively reporting environmental data via the SNMP Agent. There may ofen only be one row in this table, but there must be at least one row.')
uemEnvMonitorTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 6, 16, 1), ).setIndexNames((0, "VISINET2-MIB", "uemEnvMonIndex"))
if mibBuilder.loadTexts: uemEnvMonitorTableEntry.setStatus('mandatory')
uemEnvMonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemEnvMonIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uemEnvMonIndex.setDescription('A unique value for each hardware monitoring device.')
uemEnvMonLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 16, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemEnvMonLocation.setStatus('mandatory')
if mibBuilder.loadTexts: uemEnvMonLocation.setDescription('The physical location of the Environmental Monitor device in the host hardware. e.g. disk drawer 1, DAT drawer... ')
uemEnvMonType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("alrSHM", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemEnvMonType.setStatus('mandatory')
if mibBuilder.loadTexts: uemEnvMonType.setDescription('Identifies a specific environmental monitoring device.')
uemEnvMonFwRevMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemEnvMonFwRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: uemEnvMonFwRevMajor.setDescription('The Environmental Monitor device firmware major version number.')
uemEnvMonFwRevMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemEnvMonFwRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: uemEnvMonFwRevMinor.setDescription('The Environmental Monitor device firmware minor version number.')
uemEnvMonFwRelDate = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 16, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemEnvMonFwRelDate.setStatus('mandatory')
if mibBuilder.loadTexts: uemEnvMonFwRelDate.setDescription('The release date of the firmware for this device reported as YYYY-MM-DD.')
uemEnvMonUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 16, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemEnvMonUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: uemEnvMonUpTime.setDescription('Length of time since last system power-up or last time the SysReset command was issued (which ever is most recent). This uptime is relative only to the monitoring device itself.')
uemSensorTable = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 6, 17), )
if mibBuilder.loadTexts: uemSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: uemSensorTable.setDescription('All fan, temperature and voltage sensors are collected in this table. All these devices are similar in that they monitor 5 value ranges: low critical, low warning, normal, high warning, high critical. Notifications (trap messages) are sent whenever the monitored value moves from one value range to another. The guard points defining the 5 monitored regions (or range of values) are read-write allowing remote configuration by an SNMP management console. There may be zero or more rows in this table. Each row in the table contains information about a single sensor. One column, uemSensorType, identifies the type of sensor as fan, temp or voltage. Another column, uemSensorStatus, identifies where in the 5 possible ranges the monitored device is currently operating within. Each row is linked to a parent EnvMonitor row to further identify its location within the server.')
uemSensorTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1), ).setIndexNames((0, "VISINET2-MIB", "uemSensorIndex"))
if mibBuilder.loadTexts: uemSensorTableEntry.setStatus('mandatory')
uemSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uemSensorIndex.setDescription('A unique value for each sensor in the monitored system. Note: if there are multiple environmental monitoring cards in a system, all sensors associated with such cards are collected in a single uemSensorTable and field uemSensorIndex is guaranteed to be unique across all sensors.')
uemSensorEnvMonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorEnvMonIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uemSensorEnvMonIndex.setDescription('A link into the EnvMonitor device table. This identifies which environmental device is managing this sensor.')
uemSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("fan", 2), ("voltage", 3), ("temperature", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorType.setStatus('mandatory')
if mibBuilder.loadTexts: uemSensorType.setDescription('The general classification of this sensor.')
uemSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: uemSensorDescription.setDescription('Text describing this sensor.')
uemSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("normal", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uemSensorStatus.setDescription('The current state of the sensor.')
uemSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: uemSensorValue.setDescription('The current numeric value of the sensor. The interpretation of this value is related to the type of sensor. Fan sensor values are reported in rpms (revolutions per minute). Voltage sensor values are reported in millivolts. A value of 3300 means 3.3 volts. Temperature sensor values are reported as hundreths of Celsius degrees. A value of 2500 means 25.0 degrees.')
uemSensorNominalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uemSensorNominalValue.setStatus('mandatory')
if mibBuilder.loadTexts: uemSensorNominalValue.setDescription('This is the normal value expected to be reported by this sensor in a properly operating system.')
uemSensorHighCriticalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uemSensorHighCriticalValue.setStatus('mandatory')
if mibBuilder.loadTexts: uemSensorHighCriticalValue.setDescription('When the sensor exceeds this value, a critical trap is sent. When appropriate, this test point can be disabled by setting it to the maximum integer value.')
uemSensorHighCriticalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorHighCriticalLabel.setStatus('mandatory')
if mibBuilder.loadTexts: uemSensorHighCriticalLabel.setDescription('Text describing this test point.')
uemSensorHighWarningValue = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uemSensorHighWarningValue.setStatus('mandatory')
if mibBuilder.loadTexts: uemSensorHighWarningValue.setDescription('When the sensor value exceeds this value, a warning trap is sent. This test point is disabled by setting it to the same value as the high critical value.')
uemSensorHighWarningLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorHighWarningLabel.setStatus('mandatory')
if mibBuilder.loadTexts: uemSensorHighWarningLabel.setDescription('Text describing this test point.')
uemSensorLowWarningValue = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uemSensorLowWarningValue.setStatus('mandatory')
if mibBuilder.loadTexts: uemSensorLowWarningValue.setDescription('When the sensor value goes below this value, a warning trap is sent. This test point can be disabled by setting it to the same value as the low critical point.')
uemSensorLowWarningLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorLowWarningLabel.setStatus('mandatory')
if mibBuilder.loadTexts: uemSensorLowWarningLabel.setDescription('Text describing this test point.')
uemSensorLowCriticalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uemSensorLowCriticalValue.setStatus('mandatory')
if mibBuilder.loadTexts: uemSensorLowCriticalValue.setDescription('When the sensor goes below this value, a critical trap is sent. This test point can be disabled by setting it to zero.')
uemSensorLowCriticalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorLowCriticalLabel.setStatus('mandatory')
if mibBuilder.loadTexts: uemSensorLowCriticalLabel.setDescription('Text describing this test point.')
uemSensorEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: uemSensorEnabled.setDescription('If this field is FALSE, the sensor is disabled. No traps will be sent from a disabled sensor.')
uemSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 6, 18), )
if mibBuilder.loadTexts: uemSwitchTable.setStatus('mandatory')
if mibBuilder.loadTexts: uemSwitchTable.setDescription("An entry for each switch in the monitored system. Switches report true/false status and are useful for indicating open doors, unlocked keys, etc. There may be zero or more rows in this table. One column, uemSwitchContext, is a displayable string that reports the meaning of the current true/false state of the switch such as 'Open', 'Closed', 'Locked', 'Unlocked' etc. Other columns allow access to the actual true/false state and which state is expected in a properly operating system.")
uemSwitchTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 6, 18, 1), ).setIndexNames((0, "VISINET2-MIB", "uemSwitchIndex"))
if mibBuilder.loadTexts: uemSwitchTableEntry.setStatus('mandatory')
uemSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSwitchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uemSwitchIndex.setDescription('A unique value for each switch in the monitored system.')
uemSwitchEnvMonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSwitchEnvMonIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uemSwitchEnvMonIndex.setDescription('A link into the EnvMonitor device table. This identifies which environmental device is managing this switch.')
uemSwitchDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 18, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSwitchDescription.setStatus('mandatory')
if mibBuilder.loadTexts: uemSwitchDescription.setDescription('A general description of the switch, but not including its current state.')
uemSwitchContext = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 18, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSwitchContext.setStatus('mandatory')
if mibBuilder.loadTexts: uemSwitchContext.setDescription("A description of the meaning of the current switch status such as 'Open', 'Closed' etc.")
uemSwitchCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSwitchCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: uemSwitchCurrentState.setDescription('The current state of the switch. This variable can be compared with uemSwitchExpectedState to determine if the switch is in the unusual state.')
uemSwitchExpectedState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSwitchExpectedState.setStatus('mandatory')
if mibBuilder.loadTexts: uemSwitchExpectedState.setDescription('The normal state expected for this switch in a properly operating system.')
uemSwitchEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSwitchEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: uemSwitchEnabled.setDescription('If this field is FALSE, the switch is disabled. No traps will be sent from a disabled switch.')
uemTrapConfigurationChange = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 6) + (0,1))
if mibBuilder.loadTexts: uemTrapConfigurationChange.setDescription('This trap indicates that configuration changes have been made in the Environmental Monitoring subsystem.')
uemTrapSensorCritical = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 6) + (0,2)).setObjects(("VISINET2-MIB", "uemSensorIndex"), ("VISINET2-MIB", "uemSensorType"), ("VISINET2-MIB", "uemSensorDescription"), ("VISINET2-MIB", "uemSensorStatus"), ("VISINET2-MIB", "uemSensorValue"), ("VISINET2-MIB", "uemSensorNominalValue"), ("VISINET2-MIB", "uemTrapSeverity"))
if mibBuilder.loadTexts: uemTrapSensorCritical.setDescription('The monitored value of a sensor has crossed the critical threshhold value.')
uemTrapSensorWarning = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 6) + (0,3)).setObjects(("VISINET2-MIB", "uemSensorIndex"), ("VISINET2-MIB", "uemSensorType"), ("VISINET2-MIB", "uemSensorDescription"), ("VISINET2-MIB", "uemSensorStatus"), ("VISINET2-MIB", "uemSensorValue"), ("VISINET2-MIB", "uemSensorNominalValue"), ("VISINET2-MIB", "uemTrapSeverity"))
if mibBuilder.loadTexts: uemTrapSensorWarning.setDescription('The monitored value of a sensor has crossed into the warning range of values. Note that this trap can be fired in two situations: both moving from the critical to warning range as well as from normal to warning.')
uemTrapSensorNormal = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 6) + (0,4)).setObjects(("VISINET2-MIB", "uemSensorIndex"), ("VISINET2-MIB", "uemSensorType"), ("VISINET2-MIB", "uemSensorDescription"), ("VISINET2-MIB", "uemSensorStatus"), ("VISINET2-MIB", "uemSensorValue"), ("VISINET2-MIB", "uemSensorNominalValue"), ("VISINET2-MIB", "uemTrapSeverity"))
if mibBuilder.loadTexts: uemTrapSensorNormal.setDescription('The monitored value of a sensor has returned to within the normal range.')
uemTrapSwitchAlert = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 6) + (0,5)).setObjects(("VISINET2-MIB", "uemSwitchIndex"), ("VISINET2-MIB", "uemSwitchDescription"), ("VISINET2-MIB", "uemSwitchContext"), ("VISINET2-MIB", "uemTrapSeverity"))
if mibBuilder.loadTexts: uemTrapSwitchAlert.setDescription('The monitored state of a switch has changed to the unexpected state for a normally operating system. The unexpected state is defined to be when uemSwitchCurrentState does not equal uemSwitchExpectedState. ')
uemTrapSwitchNormal = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 6) + (0,6)).setObjects(("VISINET2-MIB", "uemSwitchIndex"), ("VISINET2-MIB", "uemSwitchDescription"), ("VISINET2-MIB", "uemSwitchContext"), ("VISINET2-MIB", "uemTrapSeverity"))
if mibBuilder.loadTexts: uemTrapSwitchNormal.setDescription('A switch has returned to the normal state expected for a normally operating system. The normal state is defined to be when uemSwitchCurrentState equals uemSwitchExpectedState. ')
cfgAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 7))
cfgAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentVersion.setDescription('The internal version number of this SNMP Extension Agent.')
cfgAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentRevision.setDescription('The internal revision number of this SNMP Extension Agent.')
cfgAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentMIBVersion.setDescription('The internal version number of the MIB for this SNMP Extension Agent.')
cfgAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMIBRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentMIBRevision.setDescription('The internal revision number of the MIB for this SNMP Extension Agent.')
cfgAgentBIOSVendor = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSVendor.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentBIOSVendor.setDescription('A description of the system BIOS vendor.')
cfgAgentBIOSVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentBIOSVersion.setDescription("A description of the version of the system vendor's BIOS.")
cfgAgentBIOSDate = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSDate.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentBIOSDate.setDescription('The date that the system BIOS was created.')
cfgAgentBIOSsROMInKb = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSsROMInKb.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentBIOSsROMInKb.setDescription('The size of the BIOS read-only memory in kilobytes.')
cfgAgentBIOSBusSupport = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSBusSupport.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentBIOSBusSupport.setDescription('The bus interface(s) supported by the system BIOS.')
cfgAgentBIOSAddress = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentBIOSAddress.setDescription('The memory address used to access the system BIOS.')
cfgAgentBIOSInterruptId = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSInterruptId.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentBIOSInterruptId.setDescription('The interrupt ID used to access the system BIOS.')
cfgAgentnCPUs = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnCPUs.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentnCPUs.setDescription('The number of CPUs listed in the subsequent CPUs table.')
cfgAgentCPUsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 13), )
if mibBuilder.loadTexts: cfgAgentCPUsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentCPUsTbl.setDescription('CPU table consisting of a list of system CPUs.')
cfgAgentCPUsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1), )
if mibBuilder.loadTexts: cfgAgentCPUsTblEntry.setStatus('mandatory')
cfgAgentCPUClass = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUClass.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentCPUClass.setDescription('The class of central processor (eg: Intel x86).')
cfgAgentCPUName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUName.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentCPUName.setDescription("The vendor's name for the CPU (eg: 80486).")
cfgAgentCPUVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUVendor.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentCPUVendor.setDescription('The vendor of the CPU chipset (eg: Genuine Intel).')
cfgAgentCPUSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentCPUSpeed.setDescription('The approximate operating frequency (in MHz) of the CPU chipset.')
cfgAgentCPUsCacheInKb = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUsCacheInKb.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentCPUsCacheInKb.setDescription('The size (in kilobytes) of the CPU operational memory cache.')
cfgAgentCPUState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUState.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentCPUState.setDescription('The current state of the CPU: active(1), disabled(2).')
cfgAgentSysName = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSysName.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentSysName.setDescription('The (network) name of this computer.')
cfgAgentSysBoardVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSysBoardVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentSysBoardVersion.setDescription("The vendor's board version information.")
cfgAgentSysUptimeMilSec = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSysUptimeMilSec.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentSysUptimeMilSec.setDescription('The length of time that this system has been active (in miliseconds).')
cfgAgentSysOS = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSysOS.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentSysOS.setDescription('The operating system and its version running on this system.')
cfgAgentSysnDMAs = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSysnDMAs.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentSysnDMAs.setDescription('The number of DMA channels available on this system.')
cfgAgentnIRQs = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnIRQs.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentnIRQs.setDescription('The number of IRQs listed in the subsequent IRQs table.')
cfgAgentIRQsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 20), )
if mibBuilder.loadTexts: cfgAgentIRQsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentIRQsTbl.setDescription('IRQ table consisting of a list of IRQs allocated on this system.')
cfgAgentIRQsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 20, 1), )
if mibBuilder.loadTexts: cfgAgentIRQsTblEntry.setStatus('mandatory')
cfgAgentIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIRQ.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentIRQ.setDescription('The allocated IRQ number.')
cfgAgentIRQOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 20, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIRQOwner.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentIRQOwner.setDescription('The name of the device/controller that has allocated this IRQ.')
cfgAgentIRQBus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 20, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIRQBus.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentIRQBus.setDescription('The bus that the IRQ device/controller uses.')
cfgAgentIRQClass = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 20, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIRQClass.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentIRQClass.setDescription('The class of the device/controller that has allocated this IRQ.')
cfgAgentMemSizeInMb = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemSizeInMb.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentMemSizeInMb.setDescription('The size of physical memory on the system in megabytes.')
cfgAgentMemType = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemType.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentMemType.setDescription('A description of the type of memory installed on the system.')
cfgAgentMemSpeed = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentMemSpeed.setDescription('The operating speed (in MHz) of the memory installed on the system.')
cfgAgentMemCacheInKb = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemCacheInKb.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentMemCacheInKb.setDescription('The size of the memory hardware cache in kilobytes.')
cfgAgentMemBanks = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemBanks.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentMemBanks.setDescription('The number of memory banks on this system.')
cfgAgentMemSpeedSupported = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemSpeedSupported.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentMemSpeedSupported.setDescription('The supported speed (in MHz) of memory installed on the system.')
cfgAgentIOKbdType = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIOKbdType.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentIOKbdType.setDescription('The type of keyboard in use on the system.')
cfgAgentIOMouseType = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIOMouseType.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentIOMouseType.setDescription('The type of mouse in use on the system.')
cfgAgentIOVidType = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIOVidType.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentIOVidType.setDescription('The type of display monitor in use on the system.')
cfgAgentnSerials = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnSerials.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentnSerials.setDescription('The number of serial ports listed in the subsequent serial ports table.')
cfgAgentSerialsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 31), )
if mibBuilder.loadTexts: cfgAgentSerialsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentSerialsTbl.setDescription('Serial port table consisting of a list of serial ports.')
cfgAgentSerialsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 31, 1), )
if mibBuilder.loadTexts: cfgAgentSerialsTblEntry.setStatus('mandatory')
cfgAgentSerialPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 31, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSerialPort.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentSerialPort.setDescription("The serial I/O port controller's port address.")
cfgAgentnParallels = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnParallels.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentnParallels.setDescription('The number of parallel ports listed in the subsequent parallel ports table.')
cfgAgentParallelsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 33), )
if mibBuilder.loadTexts: cfgAgentParallelsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentParallelsTbl.setDescription('Parallel port table consisting of a list of parallel ports.')
cfgAgentParallelsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 33, 1), )
if mibBuilder.loadTexts: cfgAgentParallelsTblEntry.setStatus('mandatory')
cfgAgentParallelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 33, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentParallelPort.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentParallelPort.setDescription("The parallel I/O port controller's port address.")
cfgAgentnControllers = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnControllers.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentnControllers.setDescription('The number of controllers listed in the subsequent controllers table.')
cfgAgentControllersTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 35), )
if mibBuilder.loadTexts: cfgAgentControllersTbl.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentControllersTbl.setDescription('Controller table consisting of a list of controllers.')
cfgAgentControllersTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 35, 1), )
if mibBuilder.loadTexts: cfgAgentControllersTblEntry.setStatus('mandatory')
cfgAgentControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 35, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentControllerType.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentControllerType.setDescription('The type of device controller.')
cfgAgentControllerName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 35, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentControllerName.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentControllerName.setDescription("The controller's device name.")
cfgAgentControllerIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 35, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentControllerIRQ.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentControllerIRQ.setDescription('The IRQ number used by the device controller.')
cfgAgentnTrapDests = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnTrapDests.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentnTrapDests.setDescription('The number of trap destinations listed in the subsequent trap destinations table.')
cfgAgentTrapDestsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 37), )
if mibBuilder.loadTexts: cfgAgentTrapDestsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentTrapDestsTbl.setDescription('Trap destinations table consisting of a list of trap destinations.')
cfgAgentTrapDestsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 37, 1), )
if mibBuilder.loadTexts: cfgAgentTrapDestsTblEntry.setStatus('mandatory')
cfgAgentTrapDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 37, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentTrapDestId.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentTrapDestId.setDescription('The identifier of this trap destination.')
cfgAgentTrapDestIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 37, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAgentTrapDestIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentTrapDestIPAddr.setDescription('The IP address of this trap destination.')
netAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 8))
netAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentVersion.setDescription('The internal version number of this SNMP Extension Agent.')
netAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentRevision.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentRevision.setDescription('The internal revision number of this SNMP Extension Agent.')
netAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentMIBVersion.setDescription('The internal version number of the MIB for this SNMP Extension Agent.')
netAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentMIBRevision.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentMIBRevision.setDescription('The internal revision number of the MIB for this SNMP Extension Agent.')
netAgentMachineName = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentMachineName.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentMachineName.setDescription('The network (NetBIOS) name of this computer.')
netAgentLogonServer = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentLogonServer.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentLogonServer.setDescription('The network domain name that this computer is connected to.')
netAgentnNICs = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentnNICs.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentnNICs.setDescription('The number of network interface cards (NIC) listed in the subsequent NIC table.')
netAgentNICsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 8, 8), )
if mibBuilder.loadTexts: netAgentNICsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentNICsTbl.setDescription('Network interface cards (NIC) table consisting of a list of installed system NICs.')
netAgentNICTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1), )
if mibBuilder.loadTexts: netAgentNICTblEntry.setStatus('mandatory')
netAgentVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentVendorID.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentVendorID.setDescription("The manufacturer's internal network adapter card identification string.")
netAgentMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentMACAddress.setDescription("The network adapter card's unique network address.")
netAgentFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentFirmwareVersion.setDescription("The manufacturer's network adapter card firmware version.")
netAgentFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentFirmwareRevision.setDescription("The manufacturer's network adapter card firmware revision.")
netAgentControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentControllerType.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentControllerType.setDescription('The type of PC bus connector used by this network adapter card.')
netAgentControllerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentControllerPort.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentControllerPort.setDescription('The controller port number/address used by this network adapter card.')
netAgentControllerIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentControllerIRQ.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentControllerIRQ.setDescription('The controller IRQ number used by this network adapter card.')
netAgentControllerBaseIO = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentControllerBaseIO.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentControllerBaseIO.setDescription('The controller base IO address used by this network adapter card.')
netAgentDataSent = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentDataSent.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentDataSent.setDescription('The number of network packets sent by this computer.')
netAgentDataReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentDataReceived.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentDataReceived.setDescription('The number of network packets received by this computer.')
netAgentNICDriver = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentNICDriver.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentNICDriver.setDescription("The network adapter card's driver specification.")
netAgentDriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentDriverName.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentDriverName.setDescription("The network adapter card's driver name.")
sftAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 9))
sftAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentVersion.setDescription('The internal version number of this SNMP Extension Agent.')
sftAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentRevision.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentRevision.setDescription('The internal revision number of this SNMP Extension Agent.')
sftAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentMIBVersion.setDescription('The internal version number of the MIB for this SNMP Extension Agent.')
sftAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentMIBRevision.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentMIBRevision.setDescription('The internal revision number of the MIB for this SNMP Extension Agent.')
sftAgentnPackages = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentnPackages.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentnPackages.setDescription('The number of Packages listed in the subsequent Packages table.')
sftAgentPackagesTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 9, 6), )
if mibBuilder.loadTexts: sftAgentPackagesTbl.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentPackagesTbl.setDescription('Package table consisting of a list of uninstallable packages.')
sftAgentPackagesTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 9, 6, 1), )
if mibBuilder.loadTexts: sftAgentPackagesTblEntry.setStatus('mandatory')
sftAgentPackage = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentPackage.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentPackage.setDescription('The name of the package that can be uninstalled.')
sftAgentnServices = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentnServices.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentnServices.setDescription('The number of Services listed in the subsequent Services table.')
sftAgentServicesTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 9, 8), )
if mibBuilder.loadTexts: sftAgentServicesTbl.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentServicesTbl.setDescription('Service table consisting of a list of installed system services.')
sftAgentServicesTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 9, 8, 1), )
if mibBuilder.loadTexts: sftAgentServicesTblEntry.setStatus('mandatory')
sftAgentService = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentService.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentService.setDescription('The name of the service that has been installed.')
sftAgentServiceStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("boot", 0), ("system", 1), ("auto", 2), ("manual", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentServiceStartup.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentServiceStartup.setDescription('The service startup mode: boot(0), system(1), auto(2), manual(3), disabled(4).')
sftAgentnDevices = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentnDevices.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentnDevices.setDescription('The number of Devices listed in the subsequent Devices table.')
sftAgentDevicesTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 9, 10), )
if mibBuilder.loadTexts: sftAgentDevicesTbl.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentDevicesTbl.setDescription('Device table consisting of a list of installed system devices.')
sftAgentDevicesTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 9, 10, 1), )
if mibBuilder.loadTexts: sftAgentDevicesTblEntry.setStatus('mandatory')
sftAgentDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentDevice.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentDevice.setDescription('The name of the device that has been installed.')
sftAgentDeviceStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("boot", 0), ("system", 1), ("auto", 2), ("manual", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentDeviceStartup.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentDeviceStartup.setDescription('The device startup mode: boot(0), system(1), auto(2), manual(3), disabled(4).')
strAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 10))
strAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentVersion.setDescription('The internal version number of this SNMP Extension Agent.')
strAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentRevision.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentRevision.setDescription('The internal revision number of this SNMP Extension Agent.')
strAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentMIBVersion.setDescription('The internal version number of the MIB for this SNMP Extension Agent.')
strAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentMIBRevision.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentMIBRevision.setDescription('The internal revision number of the MIB for this SNMP Extension Agent.')
strAgentnControllers = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentnControllers.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentnControllers.setDescription('The number of disk controllers listed in the subsequent Controllers table.')
strAgentControllersTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 10, 6), )
if mibBuilder.loadTexts: strAgentControllersTbl.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentControllersTbl.setDescription('Controller table consisting of a list of uninstallable Controllers.')
strAgentControllersTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1), )
if mibBuilder.loadTexts: strAgentControllersTblEntry.setStatus('mandatory')
strAgentCtlrType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrType.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentCtlrType.setDescription('The type of the controller: SCSI or IDE.')
strAgentCtlrVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrVendor.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentCtlrVendor.setDescription("The name of the controller's vendor.")
strAgentCtlrFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrFirmware.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentCtlrFirmware.setDescription("The description of the controller's firmware version.")
strAgentCtlrSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrSerialNo.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentCtlrSerialNo.setDescription('The name of the Controller that can be uninstalled.')
strAgentCtlrDMA = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrDMA.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentCtlrDMA.setDescription('The DMA number used by the controller.')
strAgentCtlrIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrIRQ.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentCtlrIRQ.setDescription('The IRQ number used by the controller.')
strAgentCtlrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrAddress.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentCtlrAddress.setDescription('The memory address used by the controller.')
strAgentCtlrIOPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrIOPort.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentCtlrIOPort.setDescription('The I/O port number used by the controller.')
strAgentnDisks = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentnDisks.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentnDisks.setDescription('The number of Disks listed in the subsequent Disks table.')
strAgentDisksTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 10, 8), )
if mibBuilder.loadTexts: strAgentDisksTbl.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDisksTbl.setDescription('Disk table consisting of a list of installed system disks.')
strAgentDisksTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1), )
if mibBuilder.loadTexts: strAgentDisksTblEntry.setStatus('mandatory')
strAgentDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskVendor.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskVendor.setDescription('The vendor of this disk device.')
strAgentDiskDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskDescription.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskDescription.setDescription('A description of the type of device.')
strAgentDiskFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskFirmware.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskFirmware.setDescription("The description of the device's firmware version.")
strAgentDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskPort.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskPort.setDescription('The SCSI port this device is attached to.')
strAgentDiskBus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskBus.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskBus.setDescription('The SCSI bus number on the SCSI port that this device is attached to.')
strAgentDiskLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskLUN.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskLUN.setDescription("This SCSI device's logical unit number (LUN).")
strAgentDiskID = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskID.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskID.setDescription("This SCSI device's SCSI ID.")
strAgentDiskSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskSerialNo.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskSerialNo.setDescription("The vendor's serial number for the device.")
strAgentDisknSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDisknSectors.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDisknSectors.setDescription('The number of sectors (512b) that this device can store.')
strAgentDiskDriveLetters = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskDriveLetters.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskDriveLetters.setDescription('A list of the drive letters that have storage on this device.')
strAgentDiskSizeInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskSizeInMb.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskSizeInMb.setDescription('The capacity (in megabytes) of this device.')
strAgentDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accessable", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskState.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskState.setDescription('The operational state of the device: accessable(1), off-line(2).')
strAgentDiskXfersPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskXfersPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskXfersPerSec.setDescription('the number of disk transfers per second reported by this device.')
strAgentDiskSmartCond = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("safe", 1), ("degraded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskSmartCond.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskSmartCond.setDescription('The SMART condition of the device: unknown(0), safe(1), degraded(2).')
strAgentnFloppies = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentnFloppies.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentnFloppies.setDescription('The number of floppy drives listed in the subsequent Floppies table.')
strAgentFloppyTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 10, 10), )
if mibBuilder.loadTexts: strAgentFloppyTbl.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentFloppyTbl.setDescription('Floppy table consisting of a list of floppy devices.')
strAgentFloppyTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 10, 10, 1), )
if mibBuilder.loadTexts: strAgentFloppyTblEntry.setStatus('mandatory')
strAgentFlopVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentFlopVendor.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentFlopVendor.setDescription('The vendor information for this floppy drive.')
strAgentFlopDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentFlopDescription.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentFlopDescription.setDescription("The vendor's description of this floppy drive.")
strAgentFlopFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentFlopFirmware.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentFlopFirmware.setDescription("The description and version information from this floppy drive's firmware")
strAgentFlopSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentFlopSerialNo.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentFlopSerialNo.setDescription('The serial number of this floppy drive.')
strAgentnVolumes = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentnVolumes.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentnVolumes.setDescription('The number of volumes listed in the subsequent Volumes table.')
strAgentVolumesTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 10, 12), )
if mibBuilder.loadTexts: strAgentVolumesTbl.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentVolumesTbl.setDescription('Volume table consisting of a list of installed storage volumes.')
strAgentVolumesTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1), )
if mibBuilder.loadTexts: strAgentVolumesTblEntry.setStatus('mandatory')
strAgentVolDriveLetter = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolDriveLetter.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentVolDriveLetter.setDescription('The drive letter that allows access to this storage volume.')
strAgentVolDriveLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolDriveLabel.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentVolDriveLabel.setDescription('The label assigned to this volume (for display purposes).')
strAgentVolFileSystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolFileSystemType.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentVolFileSystemType.setDescription('The type of file system configured for this volume (eg: FAT, NTFS).')
strAgentVolCapacityInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolCapacityInMb.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentVolCapacityInMb.setDescription('The size (in megabytes) of this storage volume.')
strAgentVolClusterSize = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolClusterSize.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentVolClusterSize.setDescription('The size of each cluster (storage unit) in sectors (512 bytes).')
strAgentVolPercentUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolPercentUsed.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentVolPercentUsed.setDescription('The percent of volume storage space used (monitored by the agent).')
strAgentStateThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: strAgentStateThreshhold.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentStateThreshhold.setDescription('Indicates whether a drive that goes off-line should cause an alert. (1 = yes)')
strAgentSpaceThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: strAgentSpaceThreshhold.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentSpaceThreshhold.setDescription('Indicates the maximum disk consumption (%) allowed before an alert is issued.')
strAgentIndex = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 99), Integer32())
if mibBuilder.loadTexts: strAgentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentIndex.setDescription('Indicates the number (starting from 1) of the unit reported in an alert message.')
strAgentStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,1)).setObjects(("VISINET2-MIB", "strAgentDiskState"), ("VISINET2-MIB", "strAgentIndex"))
if mibBuilder.loadTexts: strAgentStateTrap.setDescription('The disk drive is no longer accessable (off-line).')
strAgentSpaceTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,2)).setObjects(("VISINET2-MIB", "strAgentVolPercentUsed"), ("VISINET2-MIB", "strAgentIndex"))
if mibBuilder.loadTexts: strAgentSpaceTrap.setDescription('The space used on the volume has exceeded the indicated threshhold.')
strAgentSmartTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,3)).setObjects(("VISINET2-MIB", "strAgentDiskSmartCond"), ("VISINET2-MIB", "strAgentIndex"))
if mibBuilder.loadTexts: strAgentSmartTrap.setDescription('The condition of the disk drive has degraded. It should be archived and replaced immediately to avoid data loss due to failure.')
strAgentStateOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,11)).setObjects(("VISINET2-MIB", "strAgentDiskState"), ("VISINET2-MIB", "strAgentIndex"))
if mibBuilder.loadTexts: strAgentStateOkTrap.setDescription('The disk drive is again accessable (on-line).')
strAgentSpaceOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,12)).setObjects(("VISINET2-MIB", "strAgentVolPercentUsed"), ("VISINET2-MIB", "strAgentIndex"))
if mibBuilder.loadTexts: strAgentSpaceOkTrap.setDescription('The space used on the volume has returned to an acceptable level.')
strAgentSmartOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,13)).setObjects(("VISINET2-MIB", "strAgentDiskSmartCond"), ("VISINET2-MIB", "strAgentIndex"))
if mibBuilder.loadTexts: strAgentSmartOKTrap.setDescription("The degraded condition of the disk drive has cleared. Continue to monitor this drive's performance to ensure the integrity of its data.")
sysAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 11))
sysAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentVersion.setDescription('The internal version number of this SNMP Extension Agent.')
sysAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentRevision.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentRevision.setDescription('The internal revision number of this SNMP Extension Agent.')
sysAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentMIBVersion.setDescription('The internal version number of the MIB for this SNMP Extension Agent.')
sysAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentMIBRevision.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentMIBRevision.setDescription('The internal revision number of the MIB for this SNMP Extension Agent.')
sysAgentCPUCyclesUsed = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentCPUCyclesUsed.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentCPUCyclesUsed.setDescription('The percentage of CPU cycles used.')
sysAgentPCICyclesUsed = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentPCICyclesUsed.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentPCICyclesUsed.setDescription('The percentage of PCI bus cycles used.')
sysAgentInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentInterrupts.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentInterrupts.setDescription('The number of interrupts processed per second.')
sysAgentMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentMemorySize.setDescription('The size of memory in bytes.')
sysAgentMemoryUsed = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentMemoryUsed.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentMemoryUsed.setDescription('The percentage of memory in use.')
sysAgentPageFaults = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentPageFaults.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentPageFaults.setDescription('The number of page faults per second.')
sysAgentPageFaultThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAgentPageFaultThreshhold.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentPageFaultThreshhold.setDescription('The minimum number of page faults per second that will generate an alert.')
sysAgentMemoryThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAgentMemoryThreshhold.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentMemoryThreshhold.setDescription('The minimum amount of memory consumption that will generate an alert.')
sysAgentIndex = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 99), Integer32())
if mibBuilder.loadTexts: sysAgentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentIndex.setDescription('Indicates the number (starting from 1) of the unit reported in an alert message. (Not used in this agent.)')
sysAgentMemTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,1)).setObjects(("VISINET2-MIB", "sysAgentMemoryUsed"), ("VISINET2-MIB", "sysAgentIndex"))
if mibBuilder.loadTexts: sysAgentMemTrap.setDescription('The percentage of memory in use has exceeded the indicated threshhold.')
sysAgentPageTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,2)).setObjects(("VISINET2-MIB", "sysAgentPageFaults"), ("VISINET2-MIB", "sysAgentIndex"))
if mibBuilder.loadTexts: sysAgentPageTrap.setDescription('The number of page faults has exceeded the indicated threshhold.')
sysAgentMemOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,11)).setObjects(("VISINET2-MIB", "sysAgentMemoryUsed"), ("VISINET2-MIB", "sysAgentIndex"))
if mibBuilder.loadTexts: sysAgentMemOkTrap.setDescription('The percentage of memory in use has returned to an accecptable level.')
sysAgentPageOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,12)).setObjects(("VISINET2-MIB", "sysAgentPageFaults"), ("VISINET2-MIB", "sysAgentIndex"))
if mibBuilder.loadTexts: sysAgentPageOkTrap.setDescription('The number of page faults has returned to an accecptable level.')
ecmAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 12))
ecmAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentVersion.setDescription('The internal version number of this SNMP Extension Agent.')
ecmAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentRevision.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentRevision.setDescription('The internal revision number of this SNMP Extension Agent.')
ecmAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentMIBVersion.setDescription('The internal version number of the MIB for this SNMP Extension Agent.')
ecmAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentMIBRevision.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentMIBRevision.setDescription('The internal revision number of the MIB for this SNMP Extension Agent.')
ecmAgentFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentFirmwareVersion.setDescription("The manufacturer's environmental monitoring hardware firmware version.")
ecmAgentnFans = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentnFans.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentnFans.setDescription('The number of fans listed in the subsequent Fan table.')
ecmAgentFansTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 12, 7), )
if mibBuilder.loadTexts: ecmAgentFansTbl.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentFansTbl.setDescription('Fan table consisting of a list of installed system fans.')
ecmAgentFanTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 12, 7, 1), )
if mibBuilder.loadTexts: ecmAgentFanTblEntry.setStatus('mandatory')
ecmAgentFanPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentFanPresent.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentFanPresent.setDescription('Indicates that this fan is present on the system (1 = yes, 2 = no).')
ecmAgentFanState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentFanState.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentFanState.setDescription('Indicates that this fan is operational (1 = yes, 2 = no).')
ecmAgentnPowers = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentnPowers.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentnPowers.setDescription('The number of power supplies listed in the subsequent Power supply table.')
ecmAgentPowersTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 12, 9), )
if mibBuilder.loadTexts: ecmAgentPowersTbl.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentPowersTbl.setDescription('Power table consisting of a list of installed system power supplies.')
ecmAgentPowerTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 12, 9, 1), )
if mibBuilder.loadTexts: ecmAgentPowerTblEntry.setStatus('mandatory')
ecmAgentPowerPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentPowerPresent.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentPowerPresent.setDescription('Indicates that this power supply is present on the system (1 = yes, 2 = no).')
ecmAgentPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentPowerState.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentPowerState.setDescription('Indicates that this power supply is operational (1 = yes, 2 = no).')
ecmAgentnVolts = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentnVolts.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentnVolts.setDescription('The number of Volts listed in the subsequent Volt table.')
ecmAgentVoltsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 12, 11), )
if mibBuilder.loadTexts: ecmAgentVoltsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentVoltsTbl.setDescription('Volt table consisting of a list of installed system Volts.')
ecmAgentVoltTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 12, 11, 1), )
if mibBuilder.loadTexts: ecmAgentVoltTblEntry.setStatus('mandatory')
ecmAgentVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentVoltage.setDescription('The current voltage reading at this voltage level.')
ecmAgentVoltLowFail = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentVoltLowFail.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentVoltLowFail.setDescription('The low failure limit for the voltage threshold value.')
ecmAgentVoltLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentVoltLowWarn.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentVoltLowWarn.setDescription('The low warning limit for the voltage threshold value.')
ecmAgentVoltHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentVoltHighWarn.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentVoltHighWarn.setDescription('The high warning limit for the voltage threshold value.')
ecmAgentVoltHighFail = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentVoltHighFail.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentVoltHighFail.setDescription('The high failure limit for the voltage threshold value.')
ecmAgentVoltState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentVoltState.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentVoltState.setDescription('The relative state of the voltage level (1 = low failure, 2 = low warning, 3 = normal, 4 = high warning, 5 = high failure).')
ecmAgentnTemps = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentnTemps.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentnTemps.setDescription('The number of Temps listed in the subsequent Temp table.')
ecmAgentTempsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 12, 13), )
if mibBuilder.loadTexts: ecmAgentTempsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentTempsTbl.setDescription('Temp table consisting of a list of installed system Temps.')
ecmAgentTempTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 12, 13, 1), )
if mibBuilder.loadTexts: ecmAgentTempTblEntry.setStatus('mandatory')
ecmAgentTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentTemperature.setDescription('The current temperature reading at this temperature level.')
ecmAgentTempLowFail = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentTempLowFail.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentTempLowFail.setDescription('The low failure limit for the temperature threshold value.')
ecmAgentTempLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentTempLowWarn.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentTempLowWarn.setDescription('The low warning limit for the temperature threshold value.')
ecmAgentTempHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentTempHighWarn.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentTempHighWarn.setDescription('The high warning limit for the temperature threshold value.')
ecmAgentTempHighFail = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentTempHighFail.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentTempHighFail.setDescription('The high failure limit for the temperature threshold value.')
ecmAgentTempState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentTempState.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentTempState.setDescription('The relative state of the temperature level (1 = low failure, 2 = low warning, 3 = normal, 4 = high warning, 5 = high failure).')
ecmAgentnCPUs = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentnCPUs.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentnCPUs.setDescription('The number of CPUs listed in the subsequent CPU table.')
ecmAgentCPUsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 12, 15), )
if mibBuilder.loadTexts: ecmAgentCPUsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentCPUsTbl.setDescription('CPU table consisting of a list of installed system CPUs.')
ecmAgentCPUTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 12, 15, 1), )
if mibBuilder.loadTexts: ecmAgentCPUTblEntry.setStatus('mandatory')
ecmAgentCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentCPUUsage.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentCPUUsage.setDescription('The percentage of CPU cycles used during the last sample period.')
ecmAgentIndex = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 99), Integer32())
if mibBuilder.loadTexts: ecmAgentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecmAgentIndex.setDescription('Indicates the number (starting from 1) of the unit reported in an alert message.')
ecmAgentFanTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 12) + (0,1)).setObjects(("VISINET2-MIB", "ecmAgentFanState"), ("VISINET2-MIB", "ecmAgentIndex"))
if mibBuilder.loadTexts: ecmAgentFanTrap.setDescription('The indicated fan is no longer operational.')
ecmAgentPowerTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 12) + (0,2)).setObjects(("VISINET2-MIB", "ecmAgentPowerState"), ("VISINET2-MIB", "ecmAgentIndex"))
if mibBuilder.loadTexts: ecmAgentPowerTrap.setDescription('The indicated power supply is no longer operational.')
ecmAgentFanOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 12) + (0,11)).setObjects(("VISINET2-MIB", "ecmAgentFanState"), ("VISINET2-MIB", "ecmAgentIndex"))
if mibBuilder.loadTexts: ecmAgentFanOKTrap.setDescription('The indicated fan is again operational.')
ecmAgentPowerOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 12) + (0,12)).setObjects(("VISINET2-MIB", "ecmAgentPowerState"), ("VISINET2-MIB", "ecmAgentIndex"))
if mibBuilder.loadTexts: ecmAgentPowerOKTrap.setDescription('The indicated power supply is again operational.')
ecmAgentVoltCritTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 12) + (0,3)).setObjects(("VISINET2-MIB", "ecmAgentVoltState"), ("VISINET2-MIB", "ecmAgentIndex"))
if mibBuilder.loadTexts: ecmAgentVoltCritTrap.setDescription('The indicated voltage level has exceeded a critical threshold.')
ecmAgentVoltWarnTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 12) + (0,4)).setObjects(("VISINET2-MIB", "ecmAgentVoltState"), ("VISINET2-MIB", "ecmAgentIndex"))
if mibBuilder.loadTexts: ecmAgentVoltWarnTrap.setDescription('The indicated voltage level is in the warning range of values.')
ecmAgentVoltNormTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 12) + (0,5)).setObjects(("VISINET2-MIB", "ecmAgentVoltState"), ("VISINET2-MIB", "ecmAgentIndex"))
if mibBuilder.loadTexts: ecmAgentVoltNormTrap.setDescription('The indicated voltage level has returned to an acceptable level.')
ecmAgentTempCritTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 12) + (0,6)).setObjects(("VISINET2-MIB", "ecmAgentTempState"), ("VISINET2-MIB", "ecmAgentIndex"))
if mibBuilder.loadTexts: ecmAgentTempCritTrap.setDescription('The indicated temperature level has exceeded a critical threshold.')
ecmAgentTempWarnTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 12) + (0,7)).setObjects(("VISINET2-MIB", "ecmAgentTempState"), ("VISINET2-MIB", "ecmAgentIndex"))
if mibBuilder.loadTexts: ecmAgentTempWarnTrap.setDescription('The indicated temperature level is in the warning range of values.')
ecmAgentTempNormTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 12) + (0,8)).setObjects(("VISINET2-MIB", "ecmAgentTempState"), ("VISINET2-MIB", "ecmAgentIndex"))
if mibBuilder.loadTexts: ecmAgentTempNormTrap.setDescription('The indicated temperature level has returned to an acceptable level.')
evtAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 999))
evtAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 999, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: evtAgentVersion.setDescription('The internal version number of this SNMP Extension Agent.')
evtAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 999, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtAgentRevision.setStatus('mandatory')
if mibBuilder.loadTexts: evtAgentRevision.setDescription('The internal revision number of this SNMP Extension Agent.')
evtAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 999, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtAgentMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: evtAgentMIBVersion.setDescription('The internal version number of the MIB for this SNMP Extension Agent.')
evtAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 999, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtAgentMIBRevision.setStatus('mandatory')
if mibBuilder.loadTexts: evtAgentMIBRevision.setDescription('The internal revision number of the MIB for this SNMP Extension Agent.')
evtAgentnEventsQueued = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 999, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtAgentnEventsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: evtAgentnEventsQueued.setDescription('The number of ')
evtAgentnEventsReceived = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 999, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtAgentnEventsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: evtAgentnEventsReceived.setDescription('The number of ')
evtAgentIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 999, 1000), Integer32())
if mibBuilder.loadTexts: evtAgentIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: evtAgentIPAddress.setDescription('Indicates the IP address of the node that reported the DMI event.')
evtAgentSeverity = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 999, 1001), Integer32())
if mibBuilder.loadTexts: evtAgentSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: evtAgentSeverity.setDescription('Indicates the VisiNet-II severity value of the event.')
evtAgentClass = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 999, 1002), Integer32())
if mibBuilder.loadTexts: evtAgentClass.setStatus('mandatory')
if mibBuilder.loadTexts: evtAgentClass.setDescription('Indicates the DMI event class description.')
dmiVirusAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 999, 2001))
dmiMemoryAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 999, 2003))
dmiGDIAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 999, 2005))
dmiDiskAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 999, 2007))
dmiSMARTAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 999, 2009))
dmiParityAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 999, 2015))
dmiPOSTAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 999, 2017))
dmiVirusDetected = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2001) + (0,1)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
if mibBuilder.loadTexts: dmiVirusDetected.setDescription('The DMI agent detected a virus during system initialization.')
dmiVirtualMemoryOK = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2003) + (0,0)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
if mibBuilder.loadTexts: dmiVirtualMemoryOK.setDescription('The available virtual memory on the system is acceptable.')
dmiVirtualMemoryLow = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2003) + (0,1)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
if mibBuilder.loadTexts: dmiVirtualMemoryLow.setDescription('The available virtual memory on the system is running low.')
dmiVirtualMemoryOut = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2003) + (0,2)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
if mibBuilder.loadTexts: dmiVirtualMemoryOut.setDescription('The available virtual memory on the system is running out.')
dmiGDIResourceOK = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2005) + (0,0)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
if mibBuilder.loadTexts: dmiGDIResourceOK.setDescription('The available graphics resources on the system are acceptable.')
dmiGDIResourceLow = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2005) + (0,1)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
if mibBuilder.loadTexts: dmiGDIResourceLow.setDescription('The available graphics resources on the system are running low.')
dmiGDIResourceOut = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2005) + (0,2)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
if mibBuilder.loadTexts: dmiGDIResourceOut.setDescription('The available graphics resources on the system are running out.')
dmiDiskSpaceOK = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2007) + (0,0)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
if mibBuilder.loadTexts: dmiDiskSpaceOK.setDescription('The available disk space on the system is acceptable.')
dmiDiskSpaceLow = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2007) + (0,1)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
if mibBuilder.loadTexts: dmiDiskSpaceLow.setDescription('The available disk space on the system is running low.')
dmiDiskSpaceOut = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2007) + (0,2)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
if mibBuilder.loadTexts: dmiDiskSpaceOut.setDescription('The available disk space on the system is running out.')
dmiSMARTFailing = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2009) + (0,1)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
if mibBuilder.loadTexts: dmiSMARTFailing.setDescription('The operating condition of a S.M.A.R.T. drive has degraded. Archive and replace the drive to avoid subsequent data loss.')
dmiSMARTNowOK = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2009) + (0,2)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
if mibBuilder.loadTexts: dmiSMARTNowOK.setDescription('The condition of a S.M.A.R.T. drive has returned to acceptable tolerances. Continue to monitor closely the condition of the drive.')
dmiParityCorrection = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2015) + (0,1)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
if mibBuilder.loadTexts: dmiParityCorrection.setDescription('The DMI agent detected a correctable memory parity error.')
dmiParityFailure = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2015) + (0,2)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
if mibBuilder.loadTexts: dmiParityFailure.setDescription('The DMI agent detected an uncorrectable memory parity error.')
dmiPOSTError = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2017) + (0,1)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
if mibBuilder.loadTexts: dmiPOSTError.setDescription('The DMI agent reported a P.O.S.T. error.')
mibBuilder.exportSymbols("VISINET2-MIB", strAgentDisksTbl=strAgentDisksTbl, strAgentnDisks=strAgentnDisks, cfgAgentBIOSAddress=cfgAgentBIOSAddress, uemMibRevMinor=uemMibRevMinor, strAgentSpaceThreshhold=strAgentSpaceThreshhold, ecmAgentTempHighWarn=ecmAgentTempHighWarn, strAgentVolDriveLetter=strAgentVolDriveLetter, cfgAgentMemType=cfgAgentMemType, evtAgentnEventsReceived=evtAgentnEventsReceived, sftAgentDeviceStartup=sftAgentDeviceStartup, dmiVirtualMemoryLow=dmiVirtualMemoryLow, dmiSMARTAgent=dmiSMARTAgent, cfgAgentnParallels=cfgAgentnParallels, ecmAgentVoltsTbl=ecmAgentVoltsTbl, uemSensorHighCriticalLabel=uemSensorHighCriticalLabel, sftAgentDevicesTblEntry=sftAgentDevicesTblEntry, uemEnvMonFwRelDate=uemEnvMonFwRelDate, evtAgentMIBVersion=evtAgentMIBVersion, cfgAgentMIBVersion=cfgAgentMIBVersion, netAgentDataSent=netAgentDataSent, netAgentDriverName=netAgentDriverName, dmiSMARTFailing=dmiSMARTFailing, uemSensorLowCriticalValue=uemSensorLowCriticalValue, cfgAgentSerialsTblEntry=cfgAgentSerialsTblEntry, uemSwitchTable=uemSwitchTable, ecmAgentPowerPresent=ecmAgentPowerPresent, ecmAgentVoltCritTrap=ecmAgentVoltCritTrap, dmiGDIResourceOut=dmiGDIResourceOut, uemSwitchExpectedState=uemSwitchExpectedState, sftAgentPackage=sftAgentPackage, strAgentFlopSerialNo=strAgentFlopSerialNo, evtAgentIPAddress=evtAgentIPAddress, sysAgentMemoryUsed=sysAgentMemoryUsed, ecmAgentnCPUs=ecmAgentnCPUs, strAgentControllersTblEntry=strAgentControllersTblEntry, cfgAgentControllerType=cfgAgentControllerType, netAgentNICsTbl=netAgentNICsTbl, netAgentControllerPort=netAgentControllerPort, strAgentVolClusterSize=strAgentVolClusterSize, uemSensorEnvMonIndex=uemSensorEnvMonIndex, dmiParityFailure=dmiParityFailure, uemTrapSensorNormal=uemTrapSensorNormal, cfgAgentIOKbdType=cfgAgentIOKbdType, strAgentFloppyTblEntry=strAgentFloppyTblEntry, ecmAgentPowerTblEntry=ecmAgentPowerTblEntry, uemSwitchContext=uemSwitchContext, strAgentVolPercentUsed=strAgentVolPercentUsed, strAgentnVolumes=strAgentnVolumes, strAgentDiskDescription=strAgentDiskDescription, ecmAgentPowersTbl=ecmAgentPowersTbl, ecmAgentVoltTblEntry=ecmAgentVoltTblEntry, uemTrapConfigurationChange=uemTrapConfigurationChange, uemSensorValue=uemSensorValue, sysAgentInterrupts=sysAgentInterrupts, cfgAgentBIOSVendor=cfgAgentBIOSVendor, uemSwitchIndex=uemSwitchIndex, uemTrapsEnabled=uemTrapsEnabled, ecmAgentIndex=ecmAgentIndex, uemSensorType=uemSensorType, ecmAgentVersion=ecmAgentVersion, cfgAgentIOMouseType=cfgAgentIOMouseType, netAgentFirmwareVersion=netAgentFirmwareVersion, ecmAgentVoltLowFail=ecmAgentVoltLowFail, uemSwitchEnabled=uemSwitchEnabled, uemSensorLowWarningLabel=uemSensorLowWarningLabel, netAgentnNICs=netAgentnNICs, ecmAgentCPUsTbl=ecmAgentCPUsTbl, sysAgentMemTrap=sysAgentMemTrap, ecmAgentFirmwareVersion=ecmAgentFirmwareVersion, strAgentDiskState=strAgentDiskState, uemSensorDescription=uemSensorDescription, strAgentIndex=strAgentIndex, sftAgentServicesTbl=sftAgentServicesTbl, cfgAgentVersion=cfgAgentVersion, sftAgentMIBVersion=sftAgentMIBVersion, strAgentVolDriveLabel=strAgentVolDriveLabel, uemSensorLowWarningValue=uemSensorLowWarningValue, sysAgentPageOkTrap=sysAgentPageOkTrap, dmiDiskSpaceOK=dmiDiskSpaceOK, sftAgent=sftAgent, strAgentDiskPort=strAgentDiskPort, cfgAgentControllersTbl=cfgAgentControllersTbl, strAgentMIBRevision=strAgentMIBRevision, netAgentVendorID=netAgentVendorID, evtAgentClass=evtAgentClass, unisysOpen=unisysOpen, sysAgentMIBVersion=sysAgentMIBVersion, strAgentVersion=strAgentVersion, uemSensorTable=uemSensorTable, strAgentDiskDriveLetters=strAgentDiskDriveLetters, ecmAgentFanPresent=ecmAgentFanPresent, dmiVirtualMemoryOut=dmiVirtualMemoryOut, dmiVirusAgent=dmiVirusAgent, evtAgentRevision=evtAgentRevision, strAgentFloppyTbl=strAgentFloppyTbl, uemEnvMonitorTable=uemEnvMonitorTable, strAgentDisknSectors=strAgentDisknSectors, cfgAgentParallelsTbl=cfgAgentParallelsTbl, strAgentCtlrAddress=strAgentCtlrAddress, ecmAgentTempWarnTrap=ecmAgentTempWarnTrap, ecmAgentFanOKTrap=ecmAgentFanOKTrap, sftAgentDevicesTbl=sftAgentDevicesTbl, ecmAgentVoltHighWarn=ecmAgentVoltHighWarn, uemEnvMonFwRevMinor=uemEnvMonFwRevMinor, dmiDiskSpaceOut=dmiDiskSpaceOut, cfgAgentSysBoardVersion=cfgAgentSysBoardVersion, cfgAgentCPUClass=cfgAgentCPUClass, sftAgentMIBRevision=sftAgentMIBRevision, cfgAgentIRQOwner=cfgAgentIRQOwner, ecmAgentFanTrap=ecmAgentFanTrap, sftAgentServicesTblEntry=sftAgentServicesTblEntry, strAgentControllersTbl=strAgentControllersTbl, cfgAgentTrapDestsTblEntry=cfgAgentTrapDestsTblEntry, dmiParityCorrection=dmiParityCorrection, sysAgent=sysAgent, dmiMemoryAgent=dmiMemoryAgent, sysAgentPageFaults=sysAgentPageFaults, sysAgentMemoryThreshhold=sysAgentMemoryThreshhold, cfgAgentIOVidType=cfgAgentIOVidType, sftAgentnDevices=sftAgentnDevices, netAgentFirmwareRevision=netAgentFirmwareRevision, uemAgentRevMinor=uemAgentRevMinor, strAgentCtlrIRQ=strAgentCtlrIRQ, strAgentDiskSizeInMb=strAgentDiskSizeInMb, strAgentDiskID=strAgentDiskID, sysAgentIndex=sysAgentIndex, ecmAgentVoltState=ecmAgentVoltState, sysAgentMemorySize=sysAgentMemorySize, strAgentCtlrDMA=strAgentCtlrDMA, ecmAgentTempsTbl=ecmAgentTempsTbl, cfgAgentIRQsTbl=cfgAgentIRQsTbl, cfgAgentMemSizeInMb=cfgAgentMemSizeInMb, strAgentFlopVendor=strAgentFlopVendor, ecmAgentPowerTrap=ecmAgentPowerTrap, ecmAgentVoltLowWarn=ecmAgentVoltLowWarn, cfgAgentnCPUs=cfgAgentnCPUs, ecmAgentMIBRevision=ecmAgentMIBRevision, strAgentStateTrap=strAgentStateTrap, strAgentSpaceOkTrap=strAgentSpaceOkTrap, sftAgentnServices=sftAgentnServices, cfgAgent=cfgAgent, cfgAgentCPUState=cfgAgentCPUState, sftAgentPackagesTbl=sftAgentPackagesTbl, strAgentSmartOKTrap=strAgentSmartOKTrap, uemEnvMonIndex=uemEnvMonIndex, cfgAgentSerialPort=cfgAgentSerialPort, uemSensorIndex=uemSensorIndex, ecmAgentTempHighFail=ecmAgentTempHighFail, unisys=unisys, sftAgentVersion=sftAgentVersion, sftAgentnPackages=sftAgentnPackages, cfgAgentIRQsTblEntry=cfgAgentIRQsTblEntry, netAgentMIBVersion=netAgentMIBVersion, strAgentDiskVendor=strAgentDiskVendor, uemSensorHighWarningValue=uemSensorHighWarningValue, cfgAgentParallelPort=cfgAgentParallelPort, cfgAgentCPUsCacheInKb=cfgAgentCPUsCacheInKb, uemMibRevMajor=uemMibRevMajor, netAgentRevision=netAgentRevision, strAgentStateOkTrap=strAgentStateOkTrap, strAgentDisksTblEntry=strAgentDisksTblEntry, cfgAgentBIOSVersion=cfgAgentBIOSVersion, cfgAgentSysUptimeMilSec=cfgAgentSysUptimeMilSec, cfgAgentSysName=cfgAgentSysName, strAgentFlopDescription=strAgentFlopDescription, ecmAgentMIBVersion=ecmAgentMIBVersion, strAgentnControllers=strAgentnControllers, ecmAgentTemperature=ecmAgentTemperature, dmiDiskSpaceLow=dmiDiskSpaceLow, strAgentVolumesTbl=strAgentVolumesTbl, dmiGDIResourceLow=dmiGDIResourceLow, strAgentMIBVersion=strAgentMIBVersion, netAgentMIBRevision=netAgentMIBRevision, sysAgentPCICyclesUsed=sysAgentPCICyclesUsed, ecmAgentnPowers=ecmAgentnPowers, uemAgentRevMajor=uemAgentRevMajor, evtAgent=evtAgent, sftAgentServiceStartup=sftAgentServiceStartup, ecmAgentFansTbl=ecmAgentFansTbl, sftAgentPackagesTblEntry=sftAgentPackagesTblEntry, sysAgentPageFaultThreshhold=sysAgentPageFaultThreshhold, ecmAgentnTemps=ecmAgentnTemps, dmiPOSTError=dmiPOSTError, strAgentFlopFirmware=strAgentFlopFirmware, sysAgentCPUCyclesUsed=sysAgentCPUCyclesUsed, cfgAgentCPUsTbl=cfgAgentCPUsTbl, cfgAgentSysnDMAs=cfgAgentSysnDMAs, uemEnvMonLocation=uemEnvMonLocation, uemSwitchCurrentState=uemSwitchCurrentState, sysAgentRevision=sysAgentRevision, unisysEnvMonitor=unisysEnvMonitor, cfgAgentControllersTblEntry=cfgAgentControllersTblEntry, cfgAgentTrapDestsTbl=cfgAgentTrapDestsTbl, strAgentStateThreshhold=strAgentStateThreshhold, cfgAgentControllerName=cfgAgentControllerName, dmiPOSTAgent=dmiPOSTAgent, uemSensorHighCriticalValue=uemSensorHighCriticalValue, evtAgentVersion=evtAgentVersion, cfgAgentBIOSsROMInKb=cfgAgentBIOSsROMInKb, ecmAgentTempState=ecmAgentTempState, uemEnvMonType=uemEnvMonType, strAgentSmartTrap=strAgentSmartTrap, strAgentRevision=strAgentRevision, dmiParityAgent=dmiParityAgent, uemEnvMonitorTableEntry=uemEnvMonitorTableEntry, netAgentNICDriver=netAgentNICDriver, cfgAgentIRQBus=cfgAgentIRQBus, cfgAgentMemBanks=cfgAgentMemBanks, uemTrapSwitchAlert=uemTrapSwitchAlert, cfgAgentMemSpeed=cfgAgentMemSpeed, uemSwitchDescription=uemSwitchDescription, netAgentNICTblEntry=netAgentNICTblEntry, cfgAgentBIOSInterruptId=cfgAgentBIOSInterruptId, strAgentCtlrType=strAgentCtlrType, ecmAgentPowerState=ecmAgentPowerState, uemSensorTableEntry=uemSensorTableEntry, sftAgentRevision=sftAgentRevision, cfgAgentnControllers=cfgAgentnControllers, uemEnvMonFwRevMajor=uemEnvMonFwRevMajor, strAgent=strAgent, strAgentVolCapacityInMb=strAgentVolCapacityInMb, strAgentDiskSmartCond=strAgentDiskSmartCond, cfgAgentTrapDestId=cfgAgentTrapDestId, sysAgentMemOkTrap=sysAgentMemOkTrap, ecmAgentVoltage=ecmAgentVoltage, ecmAgent=ecmAgent, cfgAgentnTrapDests=cfgAgentnTrapDests, strAgentCtlrSerialNo=strAgentCtlrSerialNo, uemEnvMonUpTime=uemEnvMonUpTime, cfgAgentMemCacheInKb=cfgAgentMemCacheInKb, ecmAgentTempCritTrap=ecmAgentTempCritTrap, sysAgentVersion=sysAgentVersion, sysAgentPageTrap=sysAgentPageTrap, ecmAgentFanTblEntry=ecmAgentFanTblEntry, strAgentCtlrIOPort=strAgentCtlrIOPort, netAgentMachineName=netAgentMachineName, strAgentCtlrFirmware=strAgentCtlrFirmware, cfgAgentSysOS=cfgAgentSysOS, dmiSMARTNowOK=dmiSMARTNowOK, strAgentSpaceTrap=strAgentSpaceTrap, cfgAgentCPUsTblEntry=cfgAgentCPUsTblEntry, uemTrapSensorCritical=uemTrapSensorCritical, evtAgentMIBRevision=evtAgentMIBRevision, cfgAgentTrapDestIPAddr=cfgAgentTrapDestIPAddr, uemSystemDescription=uemSystemDescription, strAgentDiskSerialNo=strAgentDiskSerialNo, cfgAgentBIOSDate=cfgAgentBIOSDate, cfgAgentIRQClass=cfgAgentIRQClass, netAgentVersion=netAgentVersion, netAgentLogonServer=netAgentLogonServer, dmiVirusDetected=dmiVirusDetected, ecmAgentFanState=ecmAgentFanState, uemTrapSeverity=uemTrapSeverity, ecmAgentVoltHighFail=ecmAgentVoltHighFail)
mibBuilder.exportSymbols("VISINET2-MIB", sftAgentDevice=sftAgentDevice, dmiGDIResourceOK=dmiGDIResourceOK, ecmAgentTempLowFail=ecmAgentTempLowFail, sysAgentMIBRevision=sysAgentMIBRevision, uemSwitchTableEntry=uemSwitchTableEntry, ecmAgentVoltWarnTrap=ecmAgentVoltWarnTrap, ecmAgentCPUUsage=ecmAgentCPUUsage, cfgAgentnIRQs=cfgAgentnIRQs, dmiDiskAgent=dmiDiskAgent, cfgAgentControllerIRQ=cfgAgentControllerIRQ, cfgAgentnSerials=cfgAgentnSerials, strAgentDiskXfersPerSec=strAgentDiskXfersPerSec, ecmAgentPowerOKTrap=ecmAgentPowerOKTrap, cfgAgentSerialsTbl=cfgAgentSerialsTbl, ecmAgentTempTblEntry=ecmAgentTempTblEntry, evtAgentnEventsQueued=evtAgentnEventsQueued, cfgAgentCPUVendor=cfgAgentCPUVendor, uemSensorEnabled=uemSensorEnabled, uemSensorLowCriticalLabel=uemSensorLowCriticalLabel, uemSensorHighWarningLabel=uemSensorHighWarningLabel, netAgentControllerType=netAgentControllerType, evtAgentSeverity=evtAgentSeverity, ecmAgentnVolts=ecmAgentnVolts, ecmAgentTempLowWarn=ecmAgentTempLowWarn, strAgentCtlrVendor=strAgentCtlrVendor, cfgAgentMIBRevision=cfgAgentMIBRevision, cfgAgentCPUSpeed=cfgAgentCPUSpeed, sftAgentService=sftAgentService, cfgAgentCPUName=cfgAgentCPUName, strAgentDiskLUN=strAgentDiskLUN, netAgentControllerIRQ=netAgentControllerIRQ, dmiVirtualMemoryOK=dmiVirtualMemoryOK, uemTrapSwitchNormal=uemTrapSwitchNormal, strAgentnFloppies=strAgentnFloppies, dmiGDIAgent=dmiGDIAgent, netAgentMACAddress=netAgentMACAddress, uemTrapSensorWarning=uemTrapSensorWarning, uemSensorNominalValue=uemSensorNominalValue, ecmAgentRevision=ecmAgentRevision, netAgent=netAgent, cfgAgentRevision=cfgAgentRevision, ecmAgentCPUTblEntry=ecmAgentCPUTblEntry, strAgentVolumesTblEntry=strAgentVolumesTblEntry, uemSensorStatus=uemSensorStatus, strAgentVolFileSystemType=strAgentVolFileSystemType, cfgAgentParallelsTblEntry=cfgAgentParallelsTblEntry, cfgAgentBIOSBusSupport=cfgAgentBIOSBusSupport, ecmAgentnFans=ecmAgentnFans, netAgentDataReceived=netAgentDataReceived, cfgAgentMemSpeedSupported=cfgAgentMemSpeedSupported, cfgAgentIRQ=cfgAgentIRQ, netAgentControllerBaseIO=netAgentControllerBaseIO, ecmAgentVoltNormTrap=ecmAgentVoltNormTrap, strAgentDiskBus=strAgentDiskBus, strAgentDiskFirmware=strAgentDiskFirmware, uemSwitchEnvMonIndex=uemSwitchEnvMonIndex, ecmAgentTempNormTrap=ecmAgentTempNormTrap)
