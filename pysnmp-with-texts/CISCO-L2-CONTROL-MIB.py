#
# PySNMP MIB module CISCO-L2-CONTROL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-L2-CONTROL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:04:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, ModuleIdentity, IpAddress, Counter64, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, iso, NotificationType, TimeTicks, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "IpAddress", "Counter64", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "iso", "NotificationType", "TimeTicks", "Bits", "Integer32")
DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
ciscoL2ControlMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 313))
ciscoL2ControlMIB.setRevisions(('2013-07-03 00:00', '2007-01-10 00:00', '2003-12-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoL2ControlMIB.setRevisionsDescriptions(('Added ClcMacAddressStatsType and clcMacAddressStatsGroup.', "Added 'vlanMacLimitHigh' and 'vlanLimitHighExceededAction' enum values to clcVlanMacLimitGlobalConfig. Added clcMacAddressLimitIntervalGroup,clcMacAddressLimitGroup1, clcVlanMacAddressLimitGroup1,clcVlanMacLimitEnableGroup, clcVlanMacLimitNotifControlGroup, clcVlanMacLimitNotifControlGroup1, clcVlanMacLimitNotifsGroup1,clcIfMacAddressLimitGroup, clcIfMacLimitEnableGroup, clcIfMacLimitNotifControlGroup, clcIfMacLimitNotifsGroup, clcIfVlanMacAddressLimitGroup, clcIfVlanMacLimitEnableGroup,clcIfVlanMacLimitNotifControlGroup, clcIfVlanMacLimitNotifsGroup.", 'Initial revision of this MIB module.',))
if mibBuilder.loadTexts: ciscoL2ControlMIB.setLastUpdated('201307030000Z')
if mibBuilder.loadTexts: ciscoL2ControlMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoL2ControlMIB.setContactInfo('Postal: Cisco Systems, Inc. 170 West Tasman Drive San Jose, CA 95134-1706 USA Tel: +1 408 526 4000 E-mail: cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoL2ControlMIB.setDescription('The CISCO-L2-CONTROL-MIB is used to control some layer 2 functions, including MAC limit function and unicast flooding. This device could be a router or a switch.')
ciscoL2ControlMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 313, 0))
ciscoL2ControlMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 313, 1))
ciscoL2ControlMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 313, 2))
clcMacAddressLimitObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1))
clcUnicastFloodObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 2))
clcIfMacAddressLimitObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3))
clcIfVlanMacAddressLimitObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4))
clcMacAddressStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 5))
class MacLimitExceededAction(TextualConvention, Integer32):
    description = "The action that will be taken by the system on an entity, when the system detects the current learned number of MAC addresses in the forwarding table has exceeded the limit number of MAC addresses which is configured by the users. The entities that will be affected by the action are VLAN, interface or interface-VLAN pair. warning : The violation will only generate the notification and no further action will be taken. limit : The notification will be generated as the 'warning' action and also the MAC limit is enforced for the entity. It means that the new address will not be learned in the entity and the traffic with new addresses will be flooded in the entity. The learning will be re-enabled in the entity if the number of MAC addresses falls below the limit. limitNoFlood : The notification will be generated as the 'warning' action and also the MAC limit is enforced for the entity but no flooding traffic for unknown unicast MAC address packets. It means that the new addresses will not be learned in the entity and also the traffic with new addresses will not be flooded in the entity. The learning will be re-enabled in the entity if the number of MAC addresses falls below the limit. shutdown : The notification will be generated as the 'warning' action and the system will move the corresponding entity to blocked state, no traffic in the entity. The traffic will be re-enabled in the entity if the number of MAC addresses falls below the limit."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("warning", 1), ("limit", 2), ("limitNoFlood", 3), ("shutdown", 4))

class ClcMacAddressStatsType(TextualConvention, Integer32):
    description = "The type of MAC address statistics. 'allMac' - All MAC addresses 'dynamicMac' - dynamic MAC addresses 'staticMac' - static MAC addresses 'mcastMac' - multicast MAC addresses 'pvlanCloneMac' - PVLAN clone MAC addresses 'overlayMac' - overlay MAC addresses 'secureMac' - secure MAC addresses "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("allMac", 1), ("dynamicMac", 2), ("staticMac", 3), ("mcastMac", 4), ("pvlanCloneMac", 5), ("overlayMac", 6), ("secureMac", 7))

clcMacLimitEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcMacLimitEnable.setStatus('current')
if mibBuilder.loadTexts: clcMacLimitEnable.setDescription("This object is to enable or disable the limit of number of MAC addresses function globally. MAC limit function is to try to control the number of MAC addresses for each VLAN or interface or interface-VLAN pair in the forwarding tables for a network device. It is possible that one VLAN or one interface or interface-VLAN pair can exhaust all available MAC entries because of Denial-of-Service and cause users' traffic on the other VLANS or interfaces flooded. To prevent this situation, the MAC limit for each VLAN or interface or interface-VLAN pair is needed. The major function of this feature is to protect the layer 2 forwarding table.")
clcMaxMacLimitDefault = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcMaxMacLimitDefault.setStatus('current')
if mibBuilder.loadTexts: clcMaxMacLimitDefault.setDescription('The global default value for low threshold limit number of MAC addresses in the system.')
clcMacLimitExceededActionDefault = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 3), MacLimitExceededAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcMacLimitExceededActionDefault.setStatus('current')
if mibBuilder.loadTexts: clcMacLimitExceededActionDefault.setDescription('The global default action to be taken by the system when the number of MAC addresses in the forwarding table has exceeded the low threshold number of MAC address limit for a VLAN or an interface or for interface-VLAN pair.')
clcMacLimitExceedNotifOption = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sysLog", 1), ("snmpNotif", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcMacLimitExceedNotifOption.setStatus('current')
if mibBuilder.loadTexts: clcMacLimitExceedNotifOption.setDescription('This MIB object provides the choices of generating MAC limit exceeded notification to the users. When the system detects the current learned number of MAC addresses in the forwarding table which has exceeded the limit number of MAC addresses, the system will generate the following notifications. syslog(1) : An syslog message will be generated to users. snmpNotif(2) : An SNMP notification message will be generated to users. both(3) : Both a syslog message and an SNMP notification message will be generated to users.')
clcMacLimitNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcMacLimitNotifEnable.setStatus('current')
if mibBuilder.loadTexts: clcMacLimitNotifEnable.setDescription("The MIB object controls generation of SNMP notification for MAC Limit feature. When this object is 'true', generation of clcVlanMacLimitNotif is enabled. When this object is 'false', generation of clcVlanMacLimitNotif is disabled.")
clcVlanMacLimitTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 6), )
if mibBuilder.loadTexts: clcVlanMacLimitTable.setStatus('current')
if mibBuilder.loadTexts: clcVlanMacLimitTable.setDescription('The table contains information on Vlan MAC address limit feature for each VLAN capable of this feature.')
clcVlanMacLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-L2-CONTROL-MIB", "clcVlanMacLimitIndex"))
if mibBuilder.loadTexts: clcVlanMacLimitEntry.setStatus('current')
if mibBuilder.loadTexts: clcVlanMacLimitEntry.setDescription('An entry contains Vlan MAC address limit feature configuration for the VLAN')
clcVlanMacLimitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: clcVlanMacLimitIndex.setStatus('current')
if mibBuilder.loadTexts: clcVlanMacLimitIndex.setDescription("The VLAN ID for each VLAN's configuration of MAC address limit function in the system.")
clcVlanMacLimitGlobalConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 6, 1, 2), Bits().clone(namedValues=NamedValues(("vlanMaxMacLimit", 0), ("vlanLimitExceededAction", 1), ("vlanMacLimitHigh", 2), ("vlanLimitHighExceededAction", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcVlanMacLimitGlobalConfig.setStatus('current')
if mibBuilder.loadTexts: clcVlanMacLimitGlobalConfig.setDescription('This object indicates whether the configurations for this VLAN are based on the corresponding global default configurations or not. vlanMaxMacLimit(0) : indicates that the value of clcVlanMaxMacLimit is based on the value of clcMaxMacLimitDefault if this bit is set. vlanLimitExceededAction(1) : indicates that the value of clcVlanMacLimitExceededAction is based on the value of clcMacLimitExceededActionDefault if this bit is set. vlanMacLimitHigh(2) : indicates that the value of clcVlanMacLimitHigh is based on the value of clcMacLimitHighDefault if this bit is set. vlanLimitHighExceededAction(3) : indicates that the value of clcVlanMacLimitHighExceedAction is based on the value of clcMacLimitHighExceedActionDef if this bit is set.')
clcVlanMaxMacLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcVlanMaxMacLimit.setStatus('current')
if mibBuilder.loadTexts: clcVlanMaxMacLimit.setDescription('The lower threshold limit number of MAC addresses entries for this VLAN. When the instance value of this object is set to 0, no lower threshold limit will be applied for this Vlan and the corresponding instance value of clcVlanMacLimitExceededAction of the same row has no effect. The default value of this object is the value of clcMaxMacLimitDefault.')
clcVlanMacLimitExceededAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 6, 1, 4), MacLimitExceededAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcVlanMacLimitExceededAction.setStatus('current')
if mibBuilder.loadTexts: clcVlanMacLimitExceededAction.setDescription('The action to be taken by the system for this VLAN while the number of MAC addresses has exceeded the value of clcVlanMaxMacLimit. This object value is only effective when the corresponding instance value of clcVlanMaxMacLimit is not set to 0. The default value of this MIB object is the value of clcMacLimitExceededActionDefault.')
clcVlanMacLimitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcVlanMacLimitStatus.setStatus('current')
if mibBuilder.loadTexts: clcVlanMacLimitStatus.setDescription("This object is a conceptual row entry that allows to add or delete entries to or from the clcVlanMacLimitTable. 1. When creating an entry in this table 'createAndGo' method is used and the value of this object is set to 'active'. Deactivation of an 'active' entry is not allowed. 2. When deleting an entry in this table 'destroy' method is used. The value of clcVlanMaxMacLimit, clcVlanMacLimitExceededAction, clcVlanMacLimitEnable, clcVlanMacLimitHigh and clcVlanMacLimitHighExceedAction object can be modified when the value of this RowStatus object is 'active'.")
clcVlanMacLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 6, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcVlanMacLimitEnable.setStatus('current')
if mibBuilder.loadTexts: clcVlanMacLimitEnable.setDescription('This object indicates whether the Mac Limit feature is enabled on this Vlan or not.')
clcVlanMacLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 6, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcVlanMacLimitHigh.setStatus('current')
if mibBuilder.loadTexts: clcVlanMacLimitHigh.setDescription('The higher threshold limit for the number of MAC addresses entries on this VLAN. The instance value of this clcVlanMacLimitHigh must be greater than the instance value of the clcVlanMaxMacLimit of the same row, only when the value is not zero. When the instance value of this object is set to 0, no higher threshold limit will be applied for this Vlan and the corresponding instance value of clcVlanMacLimitHighExceededAction of the same row has no effect. The default value of this MIB object is the value of clcMacLimitHighDefault.')
clcVlanMacLimitHighExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 6, 1, 8), MacLimitExceededAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcVlanMacLimitHighExceedAction.setStatus('current')
if mibBuilder.loadTexts: clcVlanMacLimitHighExceedAction.setDescription('The action to be taken by the system for this Vlan while the number of MAC addresses has exceeded the value of clcVlanMacLimitHigh. This object value is only effective when the corresponding instance value of clcVlanMacLimitHigh is not set to 0. The default value of this MIB object is the value of clcMacLimitHighExceedActionDef.')
clcFdbVlanInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 7), )
if mibBuilder.loadTexts: clcFdbVlanInfoTable.setStatus('current')
if mibBuilder.loadTexts: clcFdbVlanInfoTable.setDescription('The table contains VLAN information of forwarding tables in the system.')
clcFdbVlanInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 7, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-L2-CONTROL-MIB", "clcVlanMacLimitIndex"))
if mibBuilder.loadTexts: clcFdbVlanInfoEntry.setStatus('current')
if mibBuilder.loadTexts: clcFdbVlanInfoEntry.setDescription('An entry contains the information of a VLAN in a specific forwarding table. Each forwarding table will be identified by the entity physical index.')
clcFdbVlanMacUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcFdbVlanMacUsage.setStatus('current')
if mibBuilder.loadTexts: clcFdbVlanMacUsage.setDescription('The usage of the MAC addresses in the specific forwarding table for this VLAN. It indicates the number of MAC addresses in this VLAN for a forwarding table.')
clcMacLimitInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcMacLimitInterval.setStatus('current')
if mibBuilder.loadTexts: clcMacLimitInterval.setDescription('Specifies the interval at which forwarding table is monitored.')
clcMacLimitHighDefault = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcMacLimitHighDefault.setStatus('current')
if mibBuilder.loadTexts: clcMacLimitHighDefault.setDescription('The global default value for high threshold limit number of MAC addresses in the system. The value of clcMacLimitHighDefault must be greater than the value of clcMaxMacLimitDefault.')
clcMacLimitHighExceedActionDef = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 10), MacLimitExceededAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcMacLimitHighExceedActionDef.setStatus('current')
if mibBuilder.loadTexts: clcMacLimitHighExceedActionDef.setDescription('The global default action to be taken by the system when the number of MAC addresses in the forwarding table has exceeded the high threshold number of MAC address limit for a VLAN or for a interface or for interface-VLAN pair.')
clcMacLimitHighNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcMacLimitHighNotifEnable.setStatus('current')
if mibBuilder.loadTexts: clcMacLimitHighNotifEnable.setDescription("The MIB object controls generation of SNMP notification for Vlan MAC Limit feature. When this object is 'true', generation of clcVlanMacLimitHighNotif is enabled. When this object is 'false', generation of clcVlanMacLimitHighNotif is disabled.")
clcUnicastFloodTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 2, 1), )
if mibBuilder.loadTexts: clcUnicastFloodTable.setStatus('current')
if mibBuilder.loadTexts: clcUnicastFloodTable.setDescription('This table contains information about the unicast flooding on the system. The number of entries is determined by the number of interfaces in the system that can support the unicast flooding feature. Only L2 interfaces can support unicast flooding.')
clcUnicastFloodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: clcUnicastFloodEntry.setStatus('current')
if mibBuilder.loadTexts: clcUnicastFloodEntry.setDescription('An entry contains the information about the unicast flooding for a particular interface.')
clcUnicastFloodAdminEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 2, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcUnicastFloodAdminEnable.setStatus('current')
if mibBuilder.loadTexts: clcUnicastFloodAdminEnable.setDescription("This object indicates whether the configuration of the unicast flooding is enabled or disabled on a particular interface. If this object is 'true', then the unicast flooding has been configured to enabled. If this object is 'false', then the unicast flooding has been configured to disabled.")
clcUnicastFloodOperEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcUnicastFloodOperEnable.setStatus('current')
if mibBuilder.loadTexts: clcUnicastFloodOperEnable.setDescription("This object indicates the operational status of the unicast flooding on an interface, whether it is enabled or not. If this object is 'true', then the interface is unicast flooding. If this object is 'false', then the interface is not unicast flooding.")
clcIfMacLimitTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 1), )
if mibBuilder.loadTexts: clcIfMacLimitTable.setStatus('current')
if mibBuilder.loadTexts: clcIfMacLimitTable.setDescription('The table contains information on Interface MAC address limit feature for each interface capable of this feature.')
clcIfMacLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-L2-CONTROL-MIB", "clcIfMacLimitIfIndex"))
if mibBuilder.loadTexts: clcIfMacLimitEntry.setStatus('current')
if mibBuilder.loadTexts: clcIfMacLimitEntry.setDescription('An entry contains Interface MAC address limit feature configuration for the Interface.')
clcIfMacLimitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: clcIfMacLimitIfIndex.setStatus('current')
if mibBuilder.loadTexts: clcIfMacLimitIfIndex.setDescription('The value of ifIndex for the configuration of MAC address limit function on an interface.')
clcIfMacLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfMacLimitEnable.setStatus('current')
if mibBuilder.loadTexts: clcIfMacLimitEnable.setDescription('This object indicates whether the Mac Limit feature is enabled on this interface or not.')
clcIfMacLimitGlobalConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 1, 1, 3), Bits().clone(namedValues=NamedValues(("ifMacLimitLow", 0), ("ifLimitLowExceededAction", 1), ("ifMacLimitHigh", 2), ("ifLimitHighExceededAction", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcIfMacLimitGlobalConfig.setStatus('current')
if mibBuilder.loadTexts: clcIfMacLimitGlobalConfig.setDescription('This object indicates whether the configurations for this interface are based on the corresponding global default configurations or not. ifMacLimitLow(0) : indicates that the value of clcIfMacLimitLow is based on the value of clcMaxMacLimitDefault if this bit is set. ifLimitLowExceededAction(1) : indicates that the value of clcIfMacLimitLowExceedAction is based on the value of clcMacLimitExceededActionDefault if this bit is set. ifMacLimitHigh(2) : indicates that the value of clcIfMacLimitHigh is based on the value of clcMacLimitHighDefault if this bit is set. ifLimitHighExceededAction(3) : indicates that the value of clcIfMacLimitHighExceedAction is based on the value of clcMacLimitHighExceedActionDef if this bit is set.')
clcIfMacLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfMacLimitLow.setStatus('current')
if mibBuilder.loadTexts: clcIfMacLimitLow.setDescription('The lower threshold limit for the number of MAC addresses entries on this interface. When the instance value of this object is set to 0, no lower threshold limit will be applied for this Vlan and the corresponding instance value of clcIfMacLimitLowExceedAction of the same row has no effect. The default value of this MIB object is the value of clcMaxMacLimitDefault.')
clcIfMacLimitLowExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 1, 1, 5), MacLimitExceededAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfMacLimitLowExceedAction.setStatus('current')
if mibBuilder.loadTexts: clcIfMacLimitLowExceedAction.setDescription('The action to be taken by the system for this interface while the number of MAC addresses has exceeded the value of clcMaxIfMacLimitLow. This object value is only effective when the corresponding instance value of clcIfMacLimitLow is not set to 0. The default value of this MIB object is the value of clcMacLimitExceededActionDefault.')
clcIfMacLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfMacLimitHigh.setStatus('current')
if mibBuilder.loadTexts: clcIfMacLimitHigh.setDescription('The higher threshold limit for the number of MAC addresses entries on this interface. The instance value of this clcIfMacLimitHigh must be greater than the instance value of the clcIfMacLimitLow of the same row, only when the value is not zero. When the instance value of this object is set to 0, no higher threshold limit will be applied for this Vlan and the corresponding instance value of clcIfMacLimitHighExceedAction of the same row has no effect. The default value of this MIB object is the value of clcMacLimitHighDefault.')
clcIfMacLimitHighExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 1, 1, 7), MacLimitExceededAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfMacLimitHighExceedAction.setStatus('current')
if mibBuilder.loadTexts: clcIfMacLimitHighExceedAction.setDescription('The action to be taken by the system for this interface while the number of MAC addresses has exceeded the value of clcIfMacLimitHigh. This object value is only effective when the corresponding instance value of clcIfMacLimitHigh is not set to 0. The default value of this MIB object is the value of clcMacLimitHighExceedActionDef.')
clcIfMacLimitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfMacLimitStatus.setStatus('current')
if mibBuilder.loadTexts: clcIfMacLimitStatus.setDescription("This object is a conceptual row entry that allows to add or delete entries to or from the clcIfMacLimitTable. 1. When creating an entry in this table 'createAndGo' method is used and the value of this object is set to 'active'. Deactivation of an 'active' entry is not allowed. 2. When deleting an entry in this table 'destroy' method is used. The value of clcIfMacLimitEnable , clcIfMacLimitLow, clcIfMacLimitLowExceedAction, clcIfMacLimitHigh and clcIfMacLimitHighExceedAction object can be modified when the value of this RowStatus object is 'active'.")
clcFdbIfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 2), )
if mibBuilder.loadTexts: clcFdbIfInfoTable.setStatus('current')
if mibBuilder.loadTexts: clcFdbIfInfoTable.setDescription('The table contains interface information of forwarding tables in the system.')
clcFdbIfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-L2-CONTROL-MIB", "clcIfMacLimitIfIndex"))
if mibBuilder.loadTexts: clcFdbIfInfoEntry.setStatus('current')
if mibBuilder.loadTexts: clcFdbIfInfoEntry.setDescription('An entry contains the information of a interface in a specific forwarding table. Each forwarding table will be identified by the entity physical index.')
clcFdbIfMacUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcFdbIfMacUsage.setStatus('current')
if mibBuilder.loadTexts: clcFdbIfMacUsage.setDescription('The usage of the MAC addresses in the specific forwarding table for this interface. It indicates the number of MAC addresses learnt or configured on this interface for a forwarding table.')
clcIfMacLimitLowNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcIfMacLimitLowNotifEnable.setStatus('current')
if mibBuilder.loadTexts: clcIfMacLimitLowNotifEnable.setDescription("Specifies whether the generation of a specified notification for interface MAC Limit feature is enabled or not. When this object is 'true', generation of clcIfMacLimitLowNotif is enabled. When this object is 'false', generation of clcIfMacLimitLowNotif is disabled.")
clcIfMacLimitHighNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcIfMacLimitHighNotifEnable.setStatus('current')
if mibBuilder.loadTexts: clcIfMacLimitHighNotifEnable.setDescription("Specifies whether the generation of a specified notification for interface MAC Limit feature is enabled or not. When this object is 'true', generation of clcIfMacLimitHighNotif is enabled. When this object is 'false', generation of clcIfMacLimitHighNotif is disabled.")
clcIfVlanMacLimitTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1), )
if mibBuilder.loadTexts: clcIfVlanMacLimitTable.setStatus('current')
if mibBuilder.loadTexts: clcIfVlanMacLimitTable.setDescription('The table contains information on Interface Vlan MAC address limit feature for each interface-VLAN pair capable of this feature.')
clcIfVlanMacLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitIfIndex"), (0, "CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitVlanIndex"))
if mibBuilder.loadTexts: clcIfVlanMacLimitEntry.setStatus('current')
if mibBuilder.loadTexts: clcIfVlanMacLimitEntry.setDescription('An entry contains Interface Vlan MAC address limit feature configuration for the Interface and Vlan.')
clcIfVlanMacLimitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: clcIfVlanMacLimitIfIndex.setStatus('current')
if mibBuilder.loadTexts: clcIfVlanMacLimitIfIndex.setDescription('The value of ifIndex for the configuration of MAC address limit function on an interface.')
clcIfVlanMacLimitVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1, 1, 2), VlanIndex())
if mibBuilder.loadTexts: clcIfVlanMacLimitVlanIndex.setStatus('current')
if mibBuilder.loadTexts: clcIfVlanMacLimitVlanIndex.setDescription("The VLAN ID for each VLAN's configuration of MAC address limit function in the system.")
clcIfVlanMacLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfVlanMacLimitEnable.setStatus('current')
if mibBuilder.loadTexts: clcIfVlanMacLimitEnable.setDescription('This object indicates whether the Mac Limit feature is enabled on this interface-Vlan pair or not.')
clcIfVlanMacLimitGlobalConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1, 1, 4), Bits().clone(namedValues=NamedValues(("ifVlanMacLimitLow", 0), ("ifVlanLimitLowExceededAction", 1), ("ifVlanMacLimitHigh", 2), ("ifVlanLimitHighExceededAction", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcIfVlanMacLimitGlobalConfig.setStatus('current')
if mibBuilder.loadTexts: clcIfVlanMacLimitGlobalConfig.setDescription('This object indicates whether the configurations for this interface are based on the corresponding global default configurations or not. ifVlanMacLimitLow(0) : indicates that the value of clcIfVlanMacLimitLow is based on the value of clcMaxMacLimitDefault if this bit is set. ifVlanLimitLowExceededAction(1) : indicates that the value of clcIfVlanMacLimitLowExceedAction is based on the value of clcMacLimitExceededActionDefault if this bit is set. ifVlanMacLimitHigh(2) : indicates that the value of clcIfVlanMacLimitHigh is based on the value of clcMacLimitHighDefault if this bit is set. ifVlanLimitHighExceededAction(3) : indicates that the value of clcIfVlanMacLimitHiExceedAction is based on the value of clcMacLimitHighExceedActionDef if this bit is set.')
clcIfVlanMacLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfVlanMacLimitLow.setStatus('current')
if mibBuilder.loadTexts: clcIfVlanMacLimitLow.setDescription('The lower threshold limit for the number of MAC addresses entries on this interface and Vlan. When the instance value of this object is set to 0, no lower threshold limit will be applied for this Vlan and the corresponding instance value of clcIfVlanMacLimitLowExceedAction of the same row has no effect. The default value of this MIB object is the value of clcMaxMacLimitDefault.')
clcIfVlanMacLimitLowExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1, 1, 6), MacLimitExceededAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfVlanMacLimitLowExceedAction.setStatus('current')
if mibBuilder.loadTexts: clcIfVlanMacLimitLowExceedAction.setDescription('The action to be taken by the system for this interface Vlan while the number of MAC addresses has exceeded the value of clcIfVlanMacLimitLow. This object value is only effective when the corresponding instance value of clcIfVlanMacLimitLow is not set to 0. The default value of this MIB object is the value of clcMacLimitExceededActionDefault.')
clcIfVlanMacLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfVlanMacLimitHigh.setStatus('current')
if mibBuilder.loadTexts: clcIfVlanMacLimitHigh.setDescription('The higher threshold limit for the number of MAC addresses entries on this interface and Vlan. The instance value of this clcIfVlanMacLimitHigh must be greater than the instance value of the clcIfVlanMacLimitLow of the same row, only when the value is not zero. When the instance value of this object is set to 0, no higher threshold limit will be applied for this Vlan and the corresponding instance value of clcIfVlanMacLimitHiExceedAction of the same row has no effect. The default value of this MIB object is the value of clcMacLimitHighDefault.')
clcIfVlanMacLimitHiExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1, 1, 8), MacLimitExceededAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfVlanMacLimitHiExceedAction.setStatus('current')
if mibBuilder.loadTexts: clcIfVlanMacLimitHiExceedAction.setDescription('The action to be taken by the system for this interface and Vlan while the number of MAC addresses has exceeded the value of clcIfVlanMacLimitHigh. This object value is only effective when the corresponding instance value of clcIfVlanMacLimitHigh is not set to 0. The default value of this MIB object is the value of clcMacLimitHighExceedActionDef.')
clcIfVlanMacLimitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfVlanMacLimitStatus.setStatus('current')
if mibBuilder.loadTexts: clcIfVlanMacLimitStatus.setDescription("This object is a conceptual row entry that allows to add or delete entries to or from the clcIfVlanMacLimitTable. 1. When creating an entry in this table 'createAndGo' method is used and the value of this object is set to 'active'. Deactivation of an 'active' entry is not allowed. 2. When deleting an entry in this table 'destroy' method is used. The value of clcIfVlanMacLimitEnable , clcIfVlanMacLimitLow, clcIfVlanMacLimitLowExceedAction, clcIfVlanMacLimitHigh and clcIfVlanMacLimitHiExceedAction object can be modified when the value of this RowStatus object is 'active'.")
clcFdbIfVlanInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 2), )
if mibBuilder.loadTexts: clcFdbIfVlanInfoTable.setStatus('current')
if mibBuilder.loadTexts: clcFdbIfVlanInfoTable.setDescription('The table contains interface information of forwarding tables in the system.')
clcFdbIfVlanInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitIfIndex"), (0, "CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitVlanIndex"))
if mibBuilder.loadTexts: clcFdbIfVlanInfoEntry.setStatus('current')
if mibBuilder.loadTexts: clcFdbIfVlanInfoEntry.setDescription('An entry contains the information of a interface-VLAN pair in a specific forwarding table. Each forwarding table will be identified by the entity physical index.')
clcFdbIfVlanMacUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcFdbIfVlanMacUsage.setStatus('current')
if mibBuilder.loadTexts: clcFdbIfVlanMacUsage.setDescription('The usage of the MAC addresses in the specific forwarding table for this interface and Vlan. It indicates the number of MAC addresses learnt or configured on this interface and VLAN for a forwarding table.')
clcIfVlanMacLimitLowNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcIfVlanMacLimitLowNotifEnable.setStatus('current')
if mibBuilder.loadTexts: clcIfVlanMacLimitLowNotifEnable.setDescription("Spcifies whether the generation of a specified notification for interface Vlan MAC Limit feature is enabled or not. When this object is 'true', generation of clcIfVlanMacLimitLowNotif is enabled. When this object is 'false', generation of clcIfVlanMacLimitLowNotif is disabled.")
clcIfVlanMacLimitHighNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcIfVlanMacLimitHighNotifEnable.setStatus('current')
if mibBuilder.loadTexts: clcIfVlanMacLimitHighNotifEnable.setDescription("Spcifies whether the generation of a specified notification for interface Vlan MAC Limit feature is enabled or not. When this object is 'true', generation of clcIfVlanMacLimitHighNotif is enabled. When this object is 'false', generation of clcIfVlanMacLimitHighNotif is disabled.")
clcFdbMacAddressStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 5, 1), )
if mibBuilder.loadTexts: clcFdbMacAddressStatsTable.setStatus('current')
if mibBuilder.loadTexts: clcFdbMacAddressStatsTable.setDescription('The table contains statistics information for different type of MAC addresses in the forwarding table of the system.')
clcFdbMacAddressStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-L2-CONTROL-MIB", "clcFdbMacAddressStatsType"))
if mibBuilder.loadTexts: clcFdbMacAddressStatsEntry.setStatus('current')
if mibBuilder.loadTexts: clcFdbMacAddressStatsEntry.setDescription('An entry contains statistics information for a specific MAC addresse type in the forwarding table of the system.')
clcFdbMacAddressStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 5, 1, 1, 1), ClcMacAddressStatsType())
if mibBuilder.loadTexts: clcFdbMacAddressStatsType.setStatus('current')
if mibBuilder.loadTexts: clcFdbMacAddressStatsType.setDescription('This object indicates a specific MAC address statistics type.')
clcFdbMacAddressStatsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 5, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcFdbMacAddressStatsNumber.setStatus('current')
if mibBuilder.loadTexts: clcFdbMacAddressStatsNumber.setDescription('This object indicates the number of a particular type of MAC address in the forwarding table.')
clcVlanMacLimitNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 313, 0, 1)).setObjects(("CISCO-L2-CONTROL-MIB", "clcFdbVlanMacUsage"), ("CISCO-L2-CONTROL-MIB", "clcVlanMaxMacLimit"))
if mibBuilder.loadTexts: clcVlanMacLimitNotif.setStatus('current')
if mibBuilder.loadTexts: clcVlanMacLimitNotif.setDescription('Notification is sent when the number of MAC addresses (the value of clcFdbVlanMacUsage) has crossed the configured limit of MAC addresses(clcVlanMaxMacLimit) either rising above or falling below it.')
clcVlanMacLimitHighNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 313, 0, 2)).setObjects(("CISCO-L2-CONTROL-MIB", "clcFdbVlanMacUsage"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitHigh"))
if mibBuilder.loadTexts: clcVlanMacLimitHighNotif.setStatus('current')
if mibBuilder.loadTexts: clcVlanMacLimitHighNotif.setDescription('Notification is sent when the number of MAC addresses (the value of clcFdbVlanMacUsage) has crossed the configured higher threshold limit of MAC addresses(clcVlanMacLimitHigh) either rising above or falling below it.')
clcIfMacLimitLowNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 313, 0, 3)).setObjects(("CISCO-L2-CONTROL-MIB", "clcFdbIfMacUsage"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitLow"))
if mibBuilder.loadTexts: clcIfMacLimitLowNotif.setStatus('current')
if mibBuilder.loadTexts: clcIfMacLimitLowNotif.setDescription('Notification is sent when the number of MAC addresses (the value of clcFdbIfMacUsage) has crossed the configured lower threshold limit of MAC addresses(clcIfMacLimitLow) either rising above or falling below it.')
clcIfMacLimitHighNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 313, 0, 4)).setObjects(("CISCO-L2-CONTROL-MIB", "clcFdbIfMacUsage"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitHigh"))
if mibBuilder.loadTexts: clcIfMacLimitHighNotif.setStatus('current')
if mibBuilder.loadTexts: clcIfMacLimitHighNotif.setDescription('Notification is sent when the number of MAC addresses (the value of clcFdbIfMacUsage) has crossed the configured higher threshold limit of MAC addresses(clcIfMacLimitHigh) either rising above or falling below it.')
clcIfVlanMacLimitLowNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 313, 0, 5)).setObjects(("CISCO-L2-CONTROL-MIB", "clcFdbIfVlanMacUsage"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitLow"))
if mibBuilder.loadTexts: clcIfVlanMacLimitLowNotif.setStatus('current')
if mibBuilder.loadTexts: clcIfVlanMacLimitLowNotif.setDescription('Notification is sent when the number of MAC addresses (the value of clcFdbIfVlanMacUsage) has crossed the configured lower threshold limit of MAC addresses(clcIfVlanMacLimitLow) either rising above or falling below it.')
clcIfVlanMacLimitHighNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 313, 0, 6)).setObjects(("CISCO-L2-CONTROL-MIB", "clcFdbIfVlanMacUsage"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitHigh"))
if mibBuilder.loadTexts: clcIfVlanMacLimitHighNotif.setStatus('current')
if mibBuilder.loadTexts: clcIfVlanMacLimitHighNotif.setDescription('Notification is sent when the number of MAC addresses (the value of clcFdbIfVlanMacUsage) has crossed the configured higher threshold limit of MAC addresses(clcIfVlanMacLimitHigh) either rising above or falling below it.')
ciscoL2ControlMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 1))
ciscoL2ControlMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2))
ciscoL2ControlMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 1, 1)).setObjects(("CISCO-L2-CONTROL-MIB", "clcMacAddressLimitGroup"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacAddressLimitGroup"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitNotifsGroup"), ("CISCO-L2-CONTROL-MIB", "clcUnicastFloodGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoL2ControlMIBCompliance = ciscoL2ControlMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoL2ControlMIBCompliance.setDescription('The compliance statement for entities which implement the L2 Control MIB.')
ciscoL2ControlMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 1, 2)).setObjects(("CISCO-L2-CONTROL-MIB", "clcMacAddressLimitGroup"), ("CISCO-L2-CONTROL-MIB", "clcMacAddressLimitGroup1"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacAddressLimitGroup"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacAddressLimitGroup1"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitNotifControlGroup"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitNotifControlGroup1"), ("CISCO-L2-CONTROL-MIB", "clcUnicastFloodGroup"), ("CISCO-L2-CONTROL-MIB", "clcMacAddressLimitIntervalGroup"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitNotifsGroup"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitNotifsGroup1"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitEnableGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfMacAddressLimitGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitEnableGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitNotifControlGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitNotifsGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacAddressLimitGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitEnableGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitNotifControlGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitNotifsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoL2ControlMIBCompliance2 = ciscoL2ControlMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoL2ControlMIBCompliance2.setDescription('The compliance statement for entities which implement the L2 Control MIB.')
ciscoL2ControlMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 1, 3)).setObjects(("CISCO-L2-CONTROL-MIB", "clcMacAddressLimitGroup"), ("CISCO-L2-CONTROL-MIB", "clcMacAddressLimitGroup1"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacAddressLimitGroup"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacAddressLimitGroup1"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitNotifControlGroup"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitNotifControlGroup1"), ("CISCO-L2-CONTROL-MIB", "clcUnicastFloodGroup"), ("CISCO-L2-CONTROL-MIB", "clcMacAddressLimitIntervalGroup"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitNotifsGroup"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitNotifsGroup1"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitEnableGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfMacAddressLimitGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitEnableGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitNotifControlGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitNotifsGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacAddressLimitGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitEnableGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitNotifControlGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitNotifsGroup"), ("CISCO-L2-CONTROL-MIB", "clcMacAddressStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoL2ControlMIBCompliance3 = ciscoL2ControlMIBCompliance3.setStatus('current')
if mibBuilder.loadTexts: ciscoL2ControlMIBCompliance3.setDescription('The compliance statement for entities which implement the L2 Control MIB.')
clcMacAddressLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 1)).setObjects(("CISCO-L2-CONTROL-MIB", "clcMacLimitEnable"), ("CISCO-L2-CONTROL-MIB", "clcMaxMacLimitDefault"), ("CISCO-L2-CONTROL-MIB", "clcMacLimitExceededActionDefault"), ("CISCO-L2-CONTROL-MIB", "clcMacLimitExceedNotifOption"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcMacAddressLimitGroup = clcMacAddressLimitGroup.setStatus('current')
if mibBuilder.loadTexts: clcMacAddressLimitGroup.setDescription('This is the group to control MAC address limit function.')
clcVlanMacAddressLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 2)).setObjects(("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitGlobalConfig"), ("CISCO-L2-CONTROL-MIB", "clcVlanMaxMacLimit"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitExceededAction"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitStatus"), ("CISCO-L2-CONTROL-MIB", "clcFdbVlanMacUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcVlanMacAddressLimitGroup = clcVlanMacAddressLimitGroup.setStatus('current')
if mibBuilder.loadTexts: clcVlanMacAddressLimitGroup.setDescription('This is the group to control VLAN MAC address limit function.')
clcVlanMacLimitNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 3)).setObjects(("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcVlanMacLimitNotifsGroup = clcVlanMacLimitNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: clcVlanMacLimitNotifsGroup.setDescription('The collection of notifications used to indicate that the number of MAC addresses has crossed the configured limit of MAC addresses either rising above or falling below it.')
clcUnicastFloodGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 4)).setObjects(("CISCO-L2-CONTROL-MIB", "clcUnicastFloodAdminEnable"), ("CISCO-L2-CONTROL-MIB", "clcUnicastFloodOperEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcUnicastFloodGroup = clcUnicastFloodGroup.setStatus('current')
if mibBuilder.loadTexts: clcUnicastFloodGroup.setDescription('This is the group to control unicast flooding.')
clcMacAddressLimitIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 5)).setObjects(("CISCO-L2-CONTROL-MIB", "clcMacLimitInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcMacAddressLimitIntervalGroup = clcMacAddressLimitIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: clcMacAddressLimitIntervalGroup.setDescription('This is the group to control MAC address limit interval.')
clcMacAddressLimitGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 6)).setObjects(("CISCO-L2-CONTROL-MIB", "clcMacLimitHighDefault"), ("CISCO-L2-CONTROL-MIB", "clcMacLimitHighExceedActionDef"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcMacAddressLimitGroup1 = clcMacAddressLimitGroup1.setStatus('current')
if mibBuilder.loadTexts: clcMacAddressLimitGroup1.setDescription('This group is to control additional global MAC address limit function.')
clcVlanMacAddressLimitGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 7)).setObjects(("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitHigh"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitHighExceedAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcVlanMacAddressLimitGroup1 = clcVlanMacAddressLimitGroup1.setStatus('current')
if mibBuilder.loadTexts: clcVlanMacAddressLimitGroup1.setDescription('This is the group to control additional VLAN MAC address limit function.')
clcVlanMacLimitEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 8)).setObjects(("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcVlanMacLimitEnableGroup = clcVlanMacLimitEnableGroup.setStatus('current')
if mibBuilder.loadTexts: clcVlanMacLimitEnableGroup.setDescription('This is the group to control per vlan MAC limit enable/disable configuration.')
clcVlanMacLimitNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 9)).setObjects(("CISCO-L2-CONTROL-MIB", "clcMacLimitNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcVlanMacLimitNotifControlGroup = clcVlanMacLimitNotifControlGroup.setStatus('current')
if mibBuilder.loadTexts: clcVlanMacLimitNotifControlGroup.setDescription('This is the group to control vlan MAC limit notification configuration.')
clcVlanMacLimitNotifControlGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 10)).setObjects(("CISCO-L2-CONTROL-MIB", "clcMacLimitHighNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcVlanMacLimitNotifControlGroup1 = clcVlanMacLimitNotifControlGroup1.setStatus('current')
if mibBuilder.loadTexts: clcVlanMacLimitNotifControlGroup1.setDescription('This is the group to control high vlan MAC limit notification configuration.')
clcVlanMacLimitNotifsGroup1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 11)).setObjects(("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitHighNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcVlanMacLimitNotifsGroup1 = clcVlanMacLimitNotifsGroup1.setStatus('current')
if mibBuilder.loadTexts: clcVlanMacLimitNotifsGroup1.setDescription('The collection of notifications used to indicate that the number of MAC addresses has crossed the configured high limit of MAC addresses for the VLAN either rising above or falling below it.')
clcIfMacAddressLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 12)).setObjects(("CISCO-L2-CONTROL-MIB", "clcIfMacLimitGlobalConfig"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitLow"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitLowExceedAction"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitHigh"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitHighExceedAction"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitStatus"), ("CISCO-L2-CONTROL-MIB", "clcFdbIfMacUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcIfMacAddressLimitGroup = clcIfMacAddressLimitGroup.setStatus('current')
if mibBuilder.loadTexts: clcIfMacAddressLimitGroup.setDescription('This is the group to control Interface MAC address limit function.')
clcIfMacLimitEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 13)).setObjects(("CISCO-L2-CONTROL-MIB", "clcIfMacLimitEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcIfMacLimitEnableGroup = clcIfMacLimitEnableGroup.setStatus('current')
if mibBuilder.loadTexts: clcIfMacLimitEnableGroup.setDescription('This is the group to control per interface MAC limit enable/disable configuration.')
clcIfMacLimitNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 14)).setObjects(("CISCO-L2-CONTROL-MIB", "clcIfMacLimitLowNotifEnable"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitHighNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcIfMacLimitNotifControlGroup = clcIfMacLimitNotifControlGroup.setStatus('current')
if mibBuilder.loadTexts: clcIfMacLimitNotifControlGroup.setDescription('This is the group to control interface MAC limit notification configuration.')
clcIfMacLimitNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 15)).setObjects(("CISCO-L2-CONTROL-MIB", "clcIfMacLimitLowNotif"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitHighNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcIfMacLimitNotifsGroup = clcIfMacLimitNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: clcIfMacLimitNotifsGroup.setDescription('The collection of notifications used to indicate that the number of MAC addresses has crossed the configured limit of MAC addresses for an interface either rising above or falling below it.')
clcIfVlanMacAddressLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 16)).setObjects(("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitGlobalConfig"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitLow"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitLowExceedAction"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitHigh"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitHiExceedAction"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitStatus"), ("CISCO-L2-CONTROL-MIB", "clcFdbIfVlanMacUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcIfVlanMacAddressLimitGroup = clcIfVlanMacAddressLimitGroup.setStatus('current')
if mibBuilder.loadTexts: clcIfVlanMacAddressLimitGroup.setDescription('This is the group to control Interfcae and Vlan MAC address limit function.')
clcIfVlanMacLimitEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 17)).setObjects(("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcIfVlanMacLimitEnableGroup = clcIfVlanMacLimitEnableGroup.setStatus('current')
if mibBuilder.loadTexts: clcIfVlanMacLimitEnableGroup.setDescription('This is the group to control per interface Vlan MAC limit enable/disable configuration.')
clcIfVlanMacLimitNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 18)).setObjects(("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitLowNotifEnable"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitHighNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcIfVlanMacLimitNotifControlGroup = clcIfVlanMacLimitNotifControlGroup.setStatus('current')
if mibBuilder.loadTexts: clcIfVlanMacLimitNotifControlGroup.setDescription('This is the group to control per interface Vlan MAC limit notification configuration.')
clcIfVlanMacLimitNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 19)).setObjects(("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitLowNotif"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitHighNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcIfVlanMacLimitNotifsGroup = clcIfVlanMacLimitNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: clcIfVlanMacLimitNotifsGroup.setDescription('The collection of notifications used to indicate that the number of MAC addresses has crossed the configured limit of MAC addresses for a given VLAN and interface either rising above or falling below it.')
clcMacAddressStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 20)).setObjects(("CISCO-L2-CONTROL-MIB", "clcFdbMacAddressStatsNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcMacAddressStatsGroup = clcMacAddressStatsGroup.setStatus('current')
if mibBuilder.loadTexts: clcMacAddressStatsGroup.setDescription('A collection of objects that provides the MAC address statistics based on the type of MAC addresses.')
mibBuilder.exportSymbols("CISCO-L2-CONTROL-MIB", clcIfMacLimitHighNotif=clcIfMacLimitHighNotif, MacLimitExceededAction=MacLimitExceededAction, clcIfVlanMacLimitEntry=clcIfVlanMacLimitEntry, ciscoL2ControlMIBCompliance2=ciscoL2ControlMIBCompliance2, clcVlanMacLimitNotifsGroup=clcVlanMacLimitNotifsGroup, clcMacAddressLimitIntervalGroup=clcMacAddressLimitIntervalGroup, clcMacLimitExceedNotifOption=clcMacLimitExceedNotifOption, clcVlanMacLimitEntry=clcVlanMacLimitEntry, clcIfVlanMacLimitNotifControlGroup=clcIfVlanMacLimitNotifControlGroup, clcVlanMacLimitTable=clcVlanMacLimitTable, clcIfVlanMacLimitStatus=clcIfVlanMacLimitStatus, clcIfVlanMacLimitHighNotifEnable=clcIfVlanMacLimitHighNotifEnable, clcIfMacLimitTable=clcIfMacLimitTable, clcIfMacLimitNotifsGroup=clcIfMacLimitNotifsGroup, clcIfVlanMacLimitLowExceedAction=clcIfVlanMacLimitLowExceedAction, clcIfVlanMacLimitHigh=clcIfVlanMacLimitHigh, clcFdbVlanInfoEntry=clcFdbVlanInfoEntry, clcMaxMacLimitDefault=clcMaxMacLimitDefault, ciscoL2ControlMIBObjects=ciscoL2ControlMIBObjects, clcMacLimitEnable=clcMacLimitEnable, clcMacAddressLimitGroup1=clcMacAddressLimitGroup1, clcIfVlanMacLimitLowNotif=clcIfVlanMacLimitLowNotif, clcFdbMacAddressStatsNumber=clcFdbMacAddressStatsNumber, clcMacLimitInterval=clcMacLimitInterval, clcVlanMacLimitNotif=clcVlanMacLimitNotif, clcFdbIfInfoTable=clcFdbIfInfoTable, clcIfMacLimitLow=clcIfMacLimitLow, clcIfVlanMacLimitLowNotifEnable=clcIfVlanMacLimitLowNotifEnable, clcFdbMacAddressStatsEntry=clcFdbMacAddressStatsEntry, ciscoL2ControlMIBNotifs=ciscoL2ControlMIBNotifs, clcMacLimitNotifEnable=clcMacLimitNotifEnable, clcIfMacAddressLimitGroup=clcIfMacAddressLimitGroup, clcFdbIfVlanInfoTable=clcFdbIfVlanInfoTable, clcVlanMacAddressLimitGroup1=clcVlanMacAddressLimitGroup1, clcVlanMacLimitIndex=clcVlanMacLimitIndex, clcVlanMacLimitStatus=clcVlanMacLimitStatus, clcVlanMacLimitNotifsGroup1=clcVlanMacLimitNotifsGroup1, clcMacLimitHighNotifEnable=clcMacLimitHighNotifEnable, clcIfMacLimitEnable=clcIfMacLimitEnable, clcMacLimitHighDefault=clcMacLimitHighDefault, ciscoL2ControlMIBCompliance3=ciscoL2ControlMIBCompliance3, clcUnicastFloodTable=clcUnicastFloodTable, clcIfVlanMacLimitVlanIndex=clcIfVlanMacLimitVlanIndex, clcIfMacLimitHigh=clcIfMacLimitHigh, clcFdbVlanMacUsage=clcFdbVlanMacUsage, clcFdbMacAddressStatsType=clcFdbMacAddressStatsType, clcVlanMacLimitNotifControlGroup1=clcVlanMacLimitNotifControlGroup1, clcVlanMacLimitNotifControlGroup=clcVlanMacLimitNotifControlGroup, ciscoL2ControlMIBGroups=ciscoL2ControlMIBGroups, clcFdbIfVlanInfoEntry=clcFdbIfVlanInfoEntry, PYSNMP_MODULE_ID=ciscoL2ControlMIB, clcVlanMacLimitEnable=clcVlanMacLimitEnable, clcMacAddressLimitGroup=clcMacAddressLimitGroup, ciscoL2ControlMIB=ciscoL2ControlMIB, clcIfVlanMacAddressLimitGroup=clcIfVlanMacAddressLimitGroup, clcFdbVlanInfoTable=clcFdbVlanInfoTable, clcMacLimitHighExceedActionDef=clcMacLimitHighExceedActionDef, ciscoL2ControlMIBCompliances=ciscoL2ControlMIBCompliances, clcFdbIfInfoEntry=clcFdbIfInfoEntry, clcIfVlanMacLimitEnableGroup=clcIfVlanMacLimitEnableGroup, clcIfVlanMacLimitHighNotif=clcIfVlanMacLimitHighNotif, clcIfVlanMacAddressLimitObjects=clcIfVlanMacAddressLimitObjects, clcIfMacLimitLowNotifEnable=clcIfMacLimitLowNotifEnable, ciscoL2ControlMIBConformance=ciscoL2ControlMIBConformance, clcIfVlanMacLimitGlobalConfig=clcIfVlanMacLimitGlobalConfig, clcFdbIfMacUsage=clcFdbIfMacUsage, clcIfVlanMacLimitNotifsGroup=clcIfVlanMacLimitNotifsGroup, ciscoL2ControlMIBCompliance=ciscoL2ControlMIBCompliance, clcIfMacLimitNotifControlGroup=clcIfMacLimitNotifControlGroup, clcIfMacLimitEnableGroup=clcIfMacLimitEnableGroup, clcIfVlanMacLimitEnable=clcIfVlanMacLimitEnable, clcIfMacLimitGlobalConfig=clcIfMacLimitGlobalConfig, clcUnicastFloodEntry=clcUnicastFloodEntry, clcFdbIfVlanMacUsage=clcFdbIfVlanMacUsage, clcMacAddressStatsGroup=clcMacAddressStatsGroup, clcVlanMacAddressLimitGroup=clcVlanMacAddressLimitGroup, clcUnicastFloodGroup=clcUnicastFloodGroup, clcIfMacLimitEntry=clcIfMacLimitEntry, clcIfMacAddressLimitObjects=clcIfMacAddressLimitObjects, clcVlanMacLimitEnableGroup=clcVlanMacLimitEnableGroup, clcMacLimitExceededActionDefault=clcMacLimitExceededActionDefault, clcVlanMacLimitExceededAction=clcVlanMacLimitExceededAction, clcIfMacLimitLowNotif=clcIfMacLimitLowNotif, clcVlanMaxMacLimit=clcVlanMaxMacLimit, clcUnicastFloodOperEnable=clcUnicastFloodOperEnable, clcIfMacLimitLowExceedAction=clcIfMacLimitLowExceedAction, clcIfMacLimitStatus=clcIfMacLimitStatus, clcUnicastFloodObjects=clcUnicastFloodObjects, clcVlanMacLimitGlobalConfig=clcVlanMacLimitGlobalConfig, clcVlanMacLimitHighNotif=clcVlanMacLimitHighNotif, clcIfVlanMacLimitTable=clcIfVlanMacLimitTable, clcMacAddressStatsObjects=clcMacAddressStatsObjects, clcVlanMacLimitHigh=clcVlanMacLimitHigh, clcMacAddressLimitObjects=clcMacAddressLimitObjects, clcIfMacLimitHighNotifEnable=clcIfMacLimitHighNotifEnable, ClcMacAddressStatsType=ClcMacAddressStatsType, clcIfMacLimitIfIndex=clcIfMacLimitIfIndex, clcIfVlanMacLimitLow=clcIfVlanMacLimitLow, clcIfMacLimitHighExceedAction=clcIfMacLimitHighExceedAction, clcIfVlanMacLimitHiExceedAction=clcIfVlanMacLimitHiExceedAction, clcVlanMacLimitHighExceedAction=clcVlanMacLimitHighExceedAction, clcIfVlanMacLimitIfIndex=clcIfVlanMacLimitIfIndex, clcFdbMacAddressStatsTable=clcFdbMacAddressStatsTable, clcUnicastFloodAdminEnable=clcUnicastFloodAdminEnable)
