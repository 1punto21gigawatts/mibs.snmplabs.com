#
# PySNMP MIB module TIMETRA-LAG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-LAG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:18:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
dot3adAggPortEntry, = mibBuilder.importSymbols("IEEE8023-LAG-MIB", "dot3adAggPortEntry")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, Counter64, NotificationType, Counter32, ModuleIdentity, MibIdentifier, Integer32, Bits, ObjectIdentity, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "Counter64", "NotificationType", "Counter32", "ModuleIdentity", "MibIdentifier", "Integer32", "Bits", "ObjectIdentity", "Unsigned32", "iso")
DisplayString, TruthValue, RowStatus, TextualConvention, MacAddress, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "RowStatus", "TextualConvention", "MacAddress", "TimeStamp")
tmnxSRNotifyPrefix, tmnxSRObjs, tmnxSRConfs, timetraSRMIBModules = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRNotifyPrefix", "tmnxSRObjs", "tmnxSRConfs", "timetraSRMIBModules")
tmnxPortLagId, tmnxPortPortID = mibBuilder.importSymbols("TIMETRA-PORT-MIB", "tmnxPortLagId", "tmnxPortPortID")
TmnxPortID, TItemLongDescription, TNamedItemOrEmpty = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TmnxPortID", "TItemLongDescription", "TNamedItemOrEmpty")
timetraLagMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 15))
timetraLagMIBModule.setRevisions(('1912-04-06 00:00', '1911-02-01 00:00', '1909-02-28 00:00', '1908-07-01 00:00', '1908-01-01 00:00', '1907-01-01 00:00', '1906-03-15 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1904-01-15 00:00', '1903-08-15 00:00', '2003-01-20 00:00', '2001-02-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: timetraLagMIBModule.setRevisionsDescriptions(('Rev 10.0 6 Apr 2012 00:00 10.0 release of the TIMETRA-LAG-MIB.', 'Rev 9.0 1 Feb 2011 00:00 9.0 release of the TIMETRA-LAG-MIB.', 'Rev 7.0 28 Feb 2009 00:00 7.0 release of the TIMETRA-LAG-MIB.', 'Rev 6.1 01 Jul 2008 00:00 6.1 release of the TIMETRA-LAG-MIB.', 'Rev 6.0 01 Jan 2008 00:00 6.0 release of the TIMETRA-LAG-MIB.', 'Rev 5.0 01 Jan 2007 00:00 5.0 release of the TIMETRA-LAG-MIB.', 'Rev 4.0 15 Mar 2006 00:00 4.0 release of the TIMETRA-LAG-MIB.', 'Rev 3.0 31 Aug 2005 00:00 3.0 release of the TIMETRA-LAG-MIB.', 'Rev 2.1 24 Jan 2005 00:00 2.1 release of the TIMETRA-LAG-MIB.', 'Rev 2.0 15 Jan 2004 00:00 2.0 release of the TIMETRA-LAG-MIB.', 'Rev 1.2 15 Aug 2003 00:00 1.2 release of the TIMETRA-LAG-MIB.', 'Rev 1.0 20 Jan 2003 00:00 1.0 Release of the TIMETRA-LAG-MIB.', 'Rev 0.1 09 Feb 2001 00:00 Initial version of the TIMETRA-LAG-MIB.',))
if mibBuilder.loadTexts: timetraLagMIBModule.setLastUpdated('201204060000Z')
if mibBuilder.loadTexts: timetraLagMIBModule.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: timetraLagMIBModule.setContactInfo('Alcatel-Lucent SROS Support Web: http://support.alcatel-lucent.com')
if mibBuilder.loadTexts: timetraLagMIBModule.setDescription("This document is the SNMP MIB module to manage and provision the IEEE 802.3ad Link Aggregation Group operation on Alcatel-Lucent SROS systems. Copyright 2003-2012 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel-Lucent's proprietary intellectual property. Alcatel-Lucent retains all title and ownership in the Specification, including any revisions. Alcatel-Lucent grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel-Lucent products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel-Lucent makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tLagObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15))
tLagNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 15))
tLagNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 15, 0))
tmnxLagConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15))
tLagNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 4))
class LAGInterfaceNumber(TextualConvention, Integer32):
    description = "The unique number identifying a LAG interface. There are maximum 64 LAG interfaces, when the value of TIMETRA-CHASSIS-MIB::tmnxChassisType is '5' (ESS-1/SR-1)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 200)

class LAGSubgroup(TextualConvention, Integer32):
    description = "This type specifies a LAG subgroup. The value -2 denotes 'auto-iom', whereby the subgroup is defined based on the IOM (i.e. all ports of the same IOM are assigned to the same subgroup). The value -1 denotes 'auto-mda', whereby the subgroup is defined based on the MDA."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 8), )
tLagConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2), )
if mibBuilder.loadTexts: tLagConfigTable.setStatus('current')
if mibBuilder.loadTexts: tLagConfigTable.setDescription('Configuration information about each Link Aggregation Group.')
tLagConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1), ).setIndexNames((0, "TIMETRA-LAG-MIB", "tLagIndex"))
if mibBuilder.loadTexts: tLagConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tLagConfigEntry.setDescription('An entry (conceptual row) in the tLagConfigTable. Each entry represents a Link Aggregation Group. Create or destroy rows to add or remove Link Aggregation Groups (LAG). After tLagRowStatus is set to active(1), a corresponding entry is created in IEEE8023-LAG-MIB dot3adAggTable. The corresponding entry in IEEE8023-LAG-MIB dot3adAggTable is removed when tLagRowStatus is set to destroy(6). Use ifAdminStatus to set interface up and down for this LAG entry. Use ifAlias for the interface description. ')
tLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 1), LAGInterfaceNumber())
if mibBuilder.loadTexts: tLagIndex.setStatus('current')
if mibBuilder.loadTexts: tLagIndex.setDescription('the number of the Link Aggregation Group.')
tLagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagRowStatus.setStatus('current')
if mibBuilder.loadTexts: tLagRowStatus.setDescription('RowStatus for this entry.')
tLagPortThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagPortThreshold.setStatus('current')
if mibBuilder.loadTexts: tLagPortThreshold.setDescription('tLagPortThreshold is a threshold for tLagPortThresholdAction. When a physical port link state changes and the number of operational physical ports is less than or equal to tLagPortThreshold, tLagPortThresholdAction is invoked: either the LAG is set operationally down, or the protocols operating on the LAG interface are adjusted. When the number of operational physical ports becomes greater than tLagPortThreshold, tLagPortThresholdAction is revoked: either the LAG is set operationally up, or the protocols operating on the LAG interface are adjusted. The value zero means tLagPortThresholdAction is never invoked. To invoke dynamicCost at every physical port state change, set tLagPortThreshold to the total number of physical ports configured to be in the Link Aggregation Group. ')
tLagPortThresholdAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("dynamicCost", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagPortThresholdAction.setStatus('current')
if mibBuilder.loadTexts: tLagPortThresholdAction.setDescription("Port Threshold Action is action to take when the number of operational (link up) physical ports is less than tLagPortThreshold. When a physical port ifOperStatus changes and the number of operational physical ports is less than or equal to tLagPortThreshold: - when set to down(1), the ifOperStatus for the Link Aggregation Group (tLagIfIndex) goes to down(2). - when set to dynamicCost(2), the ifOperStatus stays up(2), but dependent protocols such as OSPF are signaled and will adjust their operation (cost) to match the number of physical ports remaining in the Link Aggregation Group. a tLagDynamicCostOn notification is generated. When a physical port ifOperStatus changes and the number of operational physical ports is greater than tLagPortThreshold: - when set to down(1), the ifOperStatus for the Link Aggregation Group (tLagIfIndex) goes to up(1). - when set to dynamicCost(2), the ifOperStatus stays up(2), but dependent protocols such as OSPF are signaled and will adjust their operation (cost) to be the value as configured. a tLagDynamicCostOff notification is generated. Regardless of the setting of this object, when the number of operational physical ports goes to zero, the Link Aggregation Group's ifOperStatus goes to down. ")
tLagEnableMarkerGenerator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagEnableMarkerGenerator.setReference('IEEE 802.3ad 43.5')
if mibBuilder.loadTexts: tLagEnableMarkerGenerator.setStatus('current')
if mibBuilder.loadTexts: tLagEnableMarkerGenerator.setDescription('enables (true(1)) or disables (false(2)) the Marker Generator protocol.')
tLagEnableLACP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagEnableLACP.setReference('IEEE 802.3ad 43.4')
if mibBuilder.loadTexts: tLagEnableLACP.setStatus('current')
if mibBuilder.loadTexts: tLagEnableLACP.setDescription("enables (true(1)) or disables (false(2)) the Link Aggregation Control Protocol (LACP). The value of tLagEnableLACP can only be set to 'true(1)' when tLagStandbySignaling is set to 'lacp(1)' and the value of tLagLACPSelCrit is not 'bestPort(3)'.")
tLagDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 7), TItemLongDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagDescription.setStatus('current')
if mibBuilder.loadTexts: tLagDescription.setDescription('discription text for the Link Aggregation Group port.')
tLagDynamicCosting = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagDynamicCosting.setStatus('current')
if mibBuilder.loadTexts: tLagDynamicCosting.setDescription('When dynamic cost and OSPF autocost are both configured then costing is applied based on the total number of links configured and the cost is advertised inversely proportional to the number of links available at the time, providing the number of links that are up exceeds the configured LAG threshold value at which time the configured threshold action determines if and at what cost this LAG will be advertised.')
tLagLACPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passive", 1), ("active", 2))).clone('passive')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagLACPMode.setStatus('current')
if mibBuilder.loadTexts: tLagLACPMode.setDescription("tLagLACPMode represents the mode in which LACP will operate. If the value is set to 'passive', LACP places all member ports of a lag into a passive negotiating state. When this is the case member ports of the lag respond to LACP packets they receive but do not initiate LACP packet negotiation. If the value is set to 'active', LACP places all member ports of a lag in to an active negotiation state. When this occurs the port will initiate LACP negotiation immediately once the port achieves link up state. At least one of the peer lag ports must be configured as active to initiate LACP. The default mode is passive.")
tLagLACPAdminKeyAutogen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 10), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagLACPAdminKeyAutogen.setStatus('current')
if mibBuilder.loadTexts: tLagLACPAdminKeyAutogen.setDescription("tLagLACPAdminKeyAutogen is set to 'true' if the lag administrative key in the dot3adAggActorAdminKey object was auto generated. tLagLACPAdminKeyAutogen is set to 'false', if the lag administrative key was manually configured.")
tLagLACPTransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slow", 1), ("fast", 2))).clone('fast')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagLACPTransmitInterval.setStatus('current')
if mibBuilder.loadTexts: tLagLACPTransmitInterval.setDescription("tLagLACPTransmitInterval configures the timer interval for periodic transmission of LACP packets. If set to 'slow', LACP packets are transmitted every 30 seconds. If set to 'fast', LACP packets are transmitted every second.")
tLagAccessAdaptQos = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("link", 1), ("distribute", 2))).clone('distribute')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagAccessAdaptQos.setStatus('current')
if mibBuilder.loadTexts: tLagAccessAdaptQos.setDescription('The value of tLagAccessAdaptQos specifies how the LAG SAP queue and virtual scheduler buffering and rate parameters are adapted over multiple active MDAs. link (1) - The LAG will create the SAP queues and virtual schedulers with the actual parameters on each MDA. distribute (2) - Each MDA will receive a fraction of the SAP and scheduler parameters.')
tLagLACPXmitStdby = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 13), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagLACPXmitStdby.setStatus('current')
if mibBuilder.loadTexts: tLagLACPXmitStdby.setDescription('The value of tLagLACPXmitStdby specifies whether or not LACP messages are transmitted on standby-links.')
tLagLACPSelCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("highest-count", 1), ("highest-weight", 2), ("bestPort", 3))).clone('highest-count')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagLACPSelCrit.setStatus('current')
if mibBuilder.loadTexts: tLagLACPSelCrit.setDescription('The value of tLagLACPSelCrit specifies which selection criteria should be used to select the active sub-group.')
tLagLACPSelCritSlaveToPartner = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagLACPSelCritSlaveToPartner.setStatus('current')
if mibBuilder.loadTexts: tLagLACPSelCritSlaveToPartner.setDescription("The value of tLagLACPSelCritSlaveToPartner specifies together with tLagLACPSelCrit selection criteria should be used to select the active sub-group. The term 'eligible member' refers to a lag-member link which can potentially become active. This means it is oper up, and not disabled for use by the remote side. The object tLagLACPSelCritSlaveToPartner can be used to control whether ornot this latter condition is taken into account.")
tLagLACPNbrOfSubGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagLACPNbrOfSubGroups.setStatus('current')
if mibBuilder.loadTexts: tLagLACPNbrOfSubGroups.setDescription('The value of tLagLACPNbrOfSubGroups indicates the number of subgroups configured in this LAG.')
tLagholdTimeDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setUnits('100s of milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagholdTimeDown.setStatus('current')
if mibBuilder.loadTexts: tLagholdTimeDown.setDescription('The value of tLagholdTimeDown specifies the timer in 0.1 second units which controls the delay between detecting that a LAG is down (all active ports are down) and reporting it to the higher levels. The default value for this timer is 0, i.e. the higher levels are informed directly. A non zero value may be configured e.g. when active/standby signalling is used in a 1:1 fashion to avoid that the higher levels are informed during the small time interval between detecting that the LAG is down and the time needed to activate the standby system.')
tLagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standard", 1), ("hsmda", 2), ("hsmdaV2", 3))).clone('standard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagPortType.setStatus('current')
if mibBuilder.loadTexts: tLagPortType.setDescription("The value of tLagPortType specifies the type of ports allowed in this LAG. A value of 'standard (1)' allows all non-HSMDA type ports to be added to this LAG. A value of 'hsmda (2)' limits the LAG members to be HSMDA-v1 ports only. A value of 'hsmdaV2 (3)' limits the LAG members to be HSMDA-v2.")
tLagPerFpIngQueuing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagPerFpIngQueuing.setStatus('current')
if mibBuilder.loadTexts: tLagPerFpIngQueuing.setDescription("The value of tLagPerFpIngQueuing specifies whether a more efficient method of queue allocation for LAG SAPs should be utilized. An 'inconsistentValue' error is returned if this object is set to a different value when there are existing port members in the LAG.")
tLagSystemId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 20), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagSystemId.setStatus('current')
if mibBuilder.loadTexts: tLagSystemId.setDescription('The value of the object tLagSystemId specifies A 6-octet MAC address used as a unique identifier for the System that contains this Aggregator. If set to zero, the dot3adAggActorSystemID will be used as identifier.')
tLagSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagSystemPriority.setStatus('current')
if mibBuilder.loadTexts: tLagSystemPriority.setDescription("The value of the object tLagSystemPriority specifies a 2-octet value indicating the priority value associated with the Actor's System ID. If set to -1, the priority is taken from the object dot3adAggActorSystemPriority")
tLagStandbySignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lacp", 1), ("powerOff", 2))).clone('lacp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tLagStandbySignaling.setStatus('current')
if mibBuilder.loadTexts: tLagStandbySignaling.setDescription("The value of tLagStandbySignaling specifies how the state of a member port is signalled to the remote side when the tLagPortActiveStdby corresponding to this member port has the value 'standby'. lacp (1) - The state of this member port is signalled to the other side through the LACP protocol. powerOff (2) - This member port is powered off. The value of tLagStandbySignaling can only be set to 'powerOff(2)' when tLagEnableLACP is set to 'false(2)' and tLagLACPSelCrit is set to 'bestPort(3)'.")
tLagOperationTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 3), )
if mibBuilder.loadTexts: tLagOperationTable.setStatus('current')
if mibBuilder.loadTexts: tLagOperationTable.setDescription('Operational information about each Link Aggregation Group.')
tLagOperationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 3, 1), )
tLagConfigEntry.registerAugmentions(("TIMETRA-LAG-MIB", "tLagOperationEntry"))
tLagOperationEntry.setIndexNames(*tLagConfigEntry.getIndexNames())
if mibBuilder.loadTexts: tLagOperationEntry.setStatus('current')
if mibBuilder.loadTexts: tLagOperationEntry.setDescription('An entry (conceptual row) in the tLagOperationTable. Each entry represents an active Link Aggregation Group. ')
tLagIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 3, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagIfIndex.setReference('')
if mibBuilder.loadTexts: tLagIfIndex.setStatus('current')
if mibBuilder.loadTexts: tLagIfIndex.setDescription('ifIndex for the Link Aggregation Group. This value is zero when tLagRowStatus is not active(1). ')
tLagConfigLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 3, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagConfigLastChange.setStatus('current')
if mibBuilder.loadTexts: tLagConfigLastChange.setDescription('last change timestamp records when any object in tLagConfigTable was set.')
tLagPortThresholdFalling = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagPortThresholdFalling.setStatus('current')
if mibBuilder.loadTexts: tLagPortThresholdFalling.setDescription('counts the number of linkDown or dynamicCost events for the Link Aggregation Group caused by the number of physical ports being less than or equal to tLagPortThreshold value.')
tLagPortThresholdRising = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagPortThresholdRising.setStatus('current')
if mibBuilder.loadTexts: tLagPortThresholdRising.setDescription('counts the number of linkUp or dynamicCost events for the Link Aggregation Group caused by the number of physical ports being greater than tLagPortThreshold value.')
tLagLACPPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 3, 1, 5), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagLACPPrimaryPort.setStatus('obsolete')
if mibBuilder.loadTexts: tLagLACPPrimaryPort.setDescription('tLagLACPPrimaryPort contains the primary port of the LACP. The following two conditions have to be met for the port to become eligible for becoming the primary port: a) Port has to be in either link up or oper up. b) The port must have received at least one LACP PDU. Once the above two conditions have been met, port with a highest priority is chosen as the primary port. If there is a tie, the smallest TmnxPortID will be the primary port.')
tLagPortReasonDownFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 3, 1, 6), Bits().clone(namedValues=NamedValues(("unknown", 0), ("linklossFwd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagPortReasonDownFlags.setStatus('obsolete')
if mibBuilder.loadTexts: tLagPortReasonDownFlags.setDescription("The tLagPortReasonDownFlags indicates why a lag port may be in the operationally 'down' state. The following reasons are detected through this object: unknown(0) - Unspecified (or unknown) linklossFwd(1) - A sap using this port has the object 'sapEthernetLLFOperStatus' set to 'fault'")
tLagMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 5), )
if mibBuilder.loadTexts: tLagMemberTable.setStatus('current')
if mibBuilder.loadTexts: tLagMemberTable.setDescription('The tLagMemberTable has an entry for each Port that is part of a LAG.')
tLagMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 5, 1), ).setIndexNames((0, "TIMETRA-LAG-MIB", "tLagIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tLagMemberEntry.setStatus('current')
if mibBuilder.loadTexts: tLagMemberEntry.setDescription("Each row entry represents a particular port in a LAG. Entries are automatically created when a Port is provisioned as part of a LAG, i.e. when tmnxPortLagId from TIMETRA-PORT-MIB.mib is changed from its default value of '0'.")
tLagMemberPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 5, 1, 1), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagMemberPortName.setStatus('current')
if mibBuilder.loadTexts: tLagMemberPortName.setDescription('The value of tLagMemberPortName indicates the name of the port that is a member of the LAG used to index into tLagMemberTable. This is a read-only object that is the same as tmnxPortName from TIMETRA-PORT-MIB.mib.')
tLagMemberPortIsPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 5, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagMemberPortIsPrimary.setStatus('current')
if mibBuilder.loadTexts: tLagMemberPortIsPrimary.setDescription('The value of tLagMemberPortIsPrimary indicates whether the port used to index into tLagMemberTable is the primary port of the LAG used to index into tLagMemberTable.')
tLagPortTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 6), )
if mibBuilder.loadTexts: tLagPortTable.setStatus('current')
if mibBuilder.loadTexts: tLagPortTable.setDescription('The tLagPortTable extends the IEEE8023-LAG-MIB::dot3adAggPortTable with 7x50 specific features.')
tLagPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 6, 1), )
dot3adAggPortEntry.registerAugmentions(("TIMETRA-LAG-MIB", "tLagPortEntry"))
tLagPortEntry.setIndexNames(*dot3adAggPortEntry.getIndexNames())
if mibBuilder.loadTexts: tLagPortEntry.setStatus('current')
if mibBuilder.loadTexts: tLagPortEntry.setDescription('A list of Link Aggregation Control configuration parameters for each Aggregation Port on this device. The tLagPortTable extends the IEEE8023-LAG-MIB::dot3adAggPortTable with 7x50 specific features.')
tLagPortSubgroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 6, 1, 1), LAGSubgroup().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tLagPortSubgroup.setStatus('current')
if mibBuilder.loadTexts: tLagPortSubgroup.setDescription('The value of tLagPortSubgroup specifies the subgroup to which the port in this LAG is assigned.')
tLagPortActiveStdby = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("stand-by", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tLagPortActiveStdby.setStatus('current')
if mibBuilder.loadTexts: tLagPortActiveStdby.setDescription('The value of tLagPortActiveStdby indicates active standby state of this port in the LAG.')
tLagNotifyPortAddFailReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("adminkey-mismatch", 1), ("sysid-mismatch", 2), ("lacp-passive-both-ends", 3), ("link-down", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tLagNotifyPortAddFailReason.setStatus('current')
if mibBuilder.loadTexts: tLagNotifyPortAddFailReason.setDescription('tLagNotifyPortAddFailReason is used by the tLagPortAddFailed notification to indicate the reason why a port could not be added to a lag.')
tLagNotifySubGroupSelected = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 4, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tLagNotifySubGroupSelected.setStatus('current')
if mibBuilder.loadTexts: tLagNotifySubGroupSelected.setDescription('The value of tLagNotifySubGroupSelected is a printable character string which contains information about the result of the selection algorithm.')
tLagNotifyAdditionalInfo = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 4, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tLagNotifyAdditionalInfo.setStatus('current')
if mibBuilder.loadTexts: tLagNotifyAdditionalInfo.setDescription('The value of tLagNotifyAdditionalInfo is a printable character string which contains information about the reason why the notification was generated.')
tLagNotifyStateChangedReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 15, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("partner-oper-state-changed", 1), ("lacp-expired", 2), ("lacp-rx-state-machine", 3), ("efm-oam-state-changed", 4), ("dot1ag-state-changed", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tLagNotifyStateChangedReason.setStatus('current')
if mibBuilder.loadTexts: tLagNotifyStateChangedReason.setDescription('The value of tLagNotifyStateChangedReason indicates the reason why a the state of a lag changed.')
tLagDynamicCostOn = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 15, 0, 1)).setObjects(("TIMETRA-LAG-MIB", "tLagPortThreshold"))
if mibBuilder.loadTexts: tLagDynamicCostOn.setStatus('current')
if mibBuilder.loadTexts: tLagDynamicCostOn.setDescription('the number of phyical ports in the Link Aggregation Group is less than or equal to tLagPortThreshold value. ')
if mibBuilder.loadTexts: tLagDynamicCostOn.setReference('')
tLagDynamicCostOff = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 15, 0, 2)).setObjects(("TIMETRA-LAG-MIB", "tLagPortThreshold"))
if mibBuilder.loadTexts: tLagDynamicCostOff.setStatus('current')
if mibBuilder.loadTexts: tLagDynamicCostOff.setDescription('the number of phyical ports in the Link Aggregation Group is greater than tLagPortThreshold value. ')
if mibBuilder.loadTexts: tLagDynamicCostOff.setReference('')
tLagPortAddFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 15, 0, 3)).setObjects(("TIMETRA-LAG-MIB", "tLagRowStatus"), ("TIMETRA-PORT-MIB", "tmnxPortLagId"), ("TIMETRA-LAG-MIB", "tLagNotifyPortAddFailReason"))
if mibBuilder.loadTexts: tLagPortAddFailed.setStatus('current')
if mibBuilder.loadTexts: tLagPortAddFailed.setDescription('tLagPortAddFailed notification is generated when a port could not be added to the lag. tLagNotifyPortAddFailReason contains the reason for failure.')
tLagSubGroupSelected = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 15, 0, 4)).setObjects(("TIMETRA-LAG-MIB", "tLagNotifySubGroupSelected"))
if mibBuilder.loadTexts: tLagSubGroupSelected.setStatus('current')
if mibBuilder.loadTexts: tLagSubGroupSelected.setDescription('The tLagSubGroupSelected notification is sent when the selection algorithm selects a different sub-group.')
tLagPortAddFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 15, 0, 5)).setObjects(("TIMETRA-LAG-MIB", "tLagRowStatus"), ("TIMETRA-PORT-MIB", "tmnxPortLagId"), ("TIMETRA-LAG-MIB", "tLagNotifyPortAddFailReason"))
if mibBuilder.loadTexts: tLagPortAddFailureCleared.setStatus('current')
if mibBuilder.loadTexts: tLagPortAddFailureCleared.setDescription('tLagPortAddFailureCleared notification is generated when the failure, reported by tLagPortAddFailed, has been resolved.')
tLagStateEvent = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 15, 0, 6)).setObjects(("TIMETRA-LAG-MIB", "tLagRowStatus"), ("TIMETRA-LAG-MIB", "tLagNotifyAdditionalInfo"))
if mibBuilder.loadTexts: tLagStateEvent.setStatus('current')
if mibBuilder.loadTexts: tLagStateEvent.setDescription('tLagStateEvent notification is generated when an event occurs that might influence the lag state.')
tLagMemberStateEvent = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 15, 0, 7)).setObjects(("TIMETRA-LAG-MIB", "tLagRowStatus"), ("TIMETRA-PORT-MIB", "tmnxPortLagId"), ("TIMETRA-LAG-MIB", "tLagNotifyAdditionalInfo"), ("TIMETRA-LAG-MIB", "tLagNotifyStateChangedReason"))
if mibBuilder.loadTexts: tLagMemberStateEvent.setStatus('current')
if mibBuilder.loadTexts: tLagMemberStateEvent.setDescription('tLagMemberStateEvent notification is generated when an event occurs on this member that might influence the lag state.')
tmnxLagCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 1))
tmnxLagGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2))
tmnxLagV4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 1, 3)).setObjects(("TIMETRA-LAG-MIB", "tmnxLagInstanceV4v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagNotifyObjsGroup"), ("TIMETRA-LAG-MIB", "tmnxLagNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV4v0Compliance = tmnxLagV4v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxLagV4v0Compliance.setDescription('The compliance statement for management of extended LAG capabilities on Alcatel-Lucent SROS series systems.')
tmnxLagV5v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 1, 4)).setObjects(("TIMETRA-LAG-MIB", "tmnxLagInstanceV5v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV5v0NotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV5v0Compliance = tmnxLagV5v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxLagV5v0Compliance.setDescription('The compliance statement for management of extended LAG capabilities on Alcatel-Lucent SROS series systems.')
tmnxLagV6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 1, 5)).setObjects(("TIMETRA-LAG-MIB", "tmnxLagInstanceV6v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV6v0NotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV6v0Compliance = tmnxLagV6v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxLagV6v0Compliance.setDescription('The compliance statement for management of extended LAG capabilities on Alcatel-Lucent SROS series systems.')
tmnxLagV6v1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 1, 6)).setObjects(("TIMETRA-LAG-MIB", "tmnxLagInstanceV6v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV6v0NotifGroup"), ("TIMETRA-LAG-MIB", "tmnxLagHsmdaV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV6v1Compliance = tmnxLagV6v1Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxLagV6v1Compliance.setDescription('The compliance statement for management of extended LAG capabilities on Alcatel-Lucent SROS series systems.')
tmnxLagV7v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 1, 7)).setObjects(("TIMETRA-LAG-MIB", "tmnxLagInstanceV7v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV6v0NotifGroup"), ("TIMETRA-LAG-MIB", "tmnxLagHsmdaV6v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV7v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV7v0Compliance = tmnxLagV7v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxLagV7v0Compliance.setDescription('The compliance statement for management of extended LAG capabilities on Alcatel-Lucent SROS series systems.')
tmnxLagV8v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 1, 8)).setObjects(("TIMETRA-LAG-MIB", "tmnxLagInstanceV7v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV6v0NotifGroup"), ("TIMETRA-LAG-MIB", "tmnxLagHsmdaV6v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV8v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV8v0Compliance = tmnxLagV8v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxLagV8v0Compliance.setDescription('The compliance statement for management of extended LAG capabilities on Alcatel-Lucent SROS series systems.')
tmnxLagV9v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 1, 9)).setObjects(("TIMETRA-LAG-MIB", "tmnxLagInstanceV7v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagInstanceV9v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV6v0NotifGroup"), ("TIMETRA-LAG-MIB", "tmnxLagHsmdaV6v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV8v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV9v0Compliance = tmnxLagV9v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxLagV9v0Compliance.setDescription('The compliance statement for management of extended LAG capabilities on Alcatel-Lucent SROS series systems.')
tmnxLagV10v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 1, 10)).setObjects(("TIMETRA-LAG-MIB", "tmnxLagInstanceV7v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagInstanceV9v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV6v0NotifGroup"), ("TIMETRA-LAG-MIB", "tmnxLagV10v0NotifGroup"), ("TIMETRA-LAG-MIB", "tmnxLagHsmdaV6v0Group"), ("TIMETRA-LAG-MIB", "tmnxLagV8v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV10v0Compliance = tmnxLagV10v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tmnxLagV10v0Compliance.setDescription('The compliance statement for management of extended LAG capabilities on Alcatel-Lucent SROS series systems.')
tmnxLagNotifyObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 2)).setObjects(("TIMETRA-LAG-MIB", "tLagNotifyPortAddFailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagNotifyObjsGroup = tmnxLagNotifyObjsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxLagNotifyObjsGroup.setDescription('The group of objects supporting LAG notifications on Alcatel-Lucent SROS series systems.')
tmnxLagNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 3)).setObjects(("TIMETRA-LAG-MIB", "tLagDynamicCostOn"), ("TIMETRA-LAG-MIB", "tLagDynamicCostOff"), ("TIMETRA-LAG-MIB", "tLagPortAddFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagNotificationsGroup = tmnxLagNotificationsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxLagNotificationsGroup.setDescription('the group of notifications providing for management of Link Aggregation Group operation.')
tmnxLagInstanceV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 5)).setObjects(("TIMETRA-LAG-MIB", "tLagRowStatus"), ("TIMETRA-LAG-MIB", "tLagPortThreshold"), ("TIMETRA-LAG-MIB", "tLagPortThresholdAction"), ("TIMETRA-LAG-MIB", "tLagEnableMarkerGenerator"), ("TIMETRA-LAG-MIB", "tLagEnableLACP"), ("TIMETRA-LAG-MIB", "tLagDescription"), ("TIMETRA-LAG-MIB", "tLagDynamicCosting"), ("TIMETRA-LAG-MIB", "tLagLACPMode"), ("TIMETRA-LAG-MIB", "tLagLACPAdminKeyAutogen"), ("TIMETRA-LAG-MIB", "tLagLACPTransmitInterval"), ("TIMETRA-LAG-MIB", "tLagAccessAdaptQos"), ("TIMETRA-LAG-MIB", "tLagLACPXmitStdby"), ("TIMETRA-LAG-MIB", "tLagLACPSelCrit"), ("TIMETRA-LAG-MIB", "tLagLACPSelCritSlaveToPartner"), ("TIMETRA-LAG-MIB", "tLagLACPNbrOfSubGroups"), ("TIMETRA-LAG-MIB", "tLagholdTimeDown"), ("TIMETRA-LAG-MIB", "tLagIfIndex"), ("TIMETRA-LAG-MIB", "tLagConfigLastChange"), ("TIMETRA-LAG-MIB", "tLagPortThresholdFalling"), ("TIMETRA-LAG-MIB", "tLagPortThresholdRising"), ("TIMETRA-LAG-MIB", "tLagMemberPortName"), ("TIMETRA-LAG-MIB", "tLagMemberPortIsPrimary"), ("TIMETRA-LAG-MIB", "tLagPortSubgroup"), ("TIMETRA-LAG-MIB", "tLagPortActiveStdby"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagInstanceV4v0Group = tmnxLagInstanceV4v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxLagInstanceV4v0Group.setDescription('The group of objects supporting management of Link Aggregation (LAG) on Alcatel-Lucent SROS series systems.')
tmnxObsoletedObjectsV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 6)).setObjects(("TIMETRA-LAG-MIB", "tLagLACPPrimaryPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxObsoletedObjectsV4v0Group = tmnxObsoletedObjectsV4v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxObsoletedObjectsV4v0Group.setDescription('The group of objects that have been obsoleted in release 4.0 on Alcatel-Lucent SROS series systems.')
tmnxLagInstanceV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 7)).setObjects(("TIMETRA-LAG-MIB", "tLagRowStatus"), ("TIMETRA-LAG-MIB", "tLagPortThreshold"), ("TIMETRA-LAG-MIB", "tLagPortThresholdAction"), ("TIMETRA-LAG-MIB", "tLagEnableMarkerGenerator"), ("TIMETRA-LAG-MIB", "tLagEnableLACP"), ("TIMETRA-LAG-MIB", "tLagDescription"), ("TIMETRA-LAG-MIB", "tLagDynamicCosting"), ("TIMETRA-LAG-MIB", "tLagLACPMode"), ("TIMETRA-LAG-MIB", "tLagLACPAdminKeyAutogen"), ("TIMETRA-LAG-MIB", "tLagLACPTransmitInterval"), ("TIMETRA-LAG-MIB", "tLagAccessAdaptQos"), ("TIMETRA-LAG-MIB", "tLagLACPXmitStdby"), ("TIMETRA-LAG-MIB", "tLagLACPSelCrit"), ("TIMETRA-LAG-MIB", "tLagLACPSelCritSlaveToPartner"), ("TIMETRA-LAG-MIB", "tLagLACPNbrOfSubGroups"), ("TIMETRA-LAG-MIB", "tLagholdTimeDown"), ("TIMETRA-LAG-MIB", "tLagIfIndex"), ("TIMETRA-LAG-MIB", "tLagConfigLastChange"), ("TIMETRA-LAG-MIB", "tLagPortThresholdFalling"), ("TIMETRA-LAG-MIB", "tLagPortThresholdRising"), ("TIMETRA-LAG-MIB", "tLagMemberPortName"), ("TIMETRA-LAG-MIB", "tLagMemberPortIsPrimary"), ("TIMETRA-LAG-MIB", "tLagPortSubgroup"), ("TIMETRA-LAG-MIB", "tLagPortActiveStdby"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagInstanceV5v0Group = tmnxLagInstanceV5v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxLagInstanceV5v0Group.setDescription('The group of objects supporting management of Link Aggregation (LAG) on Alcatel-Lucent SROS series systems.')
tmnxLagV5v0NotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 8)).setObjects(("TIMETRA-LAG-MIB", "tLagDynamicCostOn"), ("TIMETRA-LAG-MIB", "tLagDynamicCostOff"), ("TIMETRA-LAG-MIB", "tLagPortAddFailed"), ("TIMETRA-LAG-MIB", "tLagSubGroupSelected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV5v0NotifGroup = tmnxLagV5v0NotifGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxLagV5v0NotifGroup.setDescription('the group of notifications providing for management of Link Aggregation Group operation in version 5.0 of the Alcatel-Lucent SROS series systems.')
tmnxLagNotifyObjsV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 9)).setObjects(("TIMETRA-LAG-MIB", "tLagNotifyPortAddFailReason"), ("TIMETRA-LAG-MIB", "tLagNotifySubGroupSelected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagNotifyObjsV5v0Group = tmnxLagNotifyObjsV5v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxLagNotifyObjsV5v0Group.setDescription('The group of objects supporting LAG notifications on Alcatel-Lucent SROS series systems.')
tmnxLagHsmdaV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 10)).setObjects(("TIMETRA-LAG-MIB", "tLagPortType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagHsmdaV6v0Group = tmnxLagHsmdaV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxLagHsmdaV6v0Group.setDescription('The group of objects supporting management of Link Aggregation (LAG) with the HSMDA MDA on Alcatel-Lucent SROS series systems.')
tmnxLagInstanceV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 11)).setObjects(("TIMETRA-LAG-MIB", "tLagRowStatus"), ("TIMETRA-LAG-MIB", "tLagPortThreshold"), ("TIMETRA-LAG-MIB", "tLagPortThresholdAction"), ("TIMETRA-LAG-MIB", "tLagEnableMarkerGenerator"), ("TIMETRA-LAG-MIB", "tLagEnableLACP"), ("TIMETRA-LAG-MIB", "tLagDescription"), ("TIMETRA-LAG-MIB", "tLagDynamicCosting"), ("TIMETRA-LAG-MIB", "tLagLACPMode"), ("TIMETRA-LAG-MIB", "tLagLACPAdminKeyAutogen"), ("TIMETRA-LAG-MIB", "tLagLACPTransmitInterval"), ("TIMETRA-LAG-MIB", "tLagAccessAdaptQos"), ("TIMETRA-LAG-MIB", "tLagLACPXmitStdby"), ("TIMETRA-LAG-MIB", "tLagLACPSelCrit"), ("TIMETRA-LAG-MIB", "tLagLACPSelCritSlaveToPartner"), ("TIMETRA-LAG-MIB", "tLagLACPNbrOfSubGroups"), ("TIMETRA-LAG-MIB", "tLagholdTimeDown"), ("TIMETRA-LAG-MIB", "tLagIfIndex"), ("TIMETRA-LAG-MIB", "tLagConfigLastChange"), ("TIMETRA-LAG-MIB", "tLagPortThresholdFalling"), ("TIMETRA-LAG-MIB", "tLagPortThresholdRising"), ("TIMETRA-LAG-MIB", "tLagMemberPortName"), ("TIMETRA-LAG-MIB", "tLagMemberPortIsPrimary"), ("TIMETRA-LAG-MIB", "tLagPortSubgroup"), ("TIMETRA-LAG-MIB", "tLagPortActiveStdby"), ("TIMETRA-LAG-MIB", "tLagPortReasonDownFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagInstanceV6v0Group = tmnxLagInstanceV6v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxLagInstanceV6v0Group.setDescription('The group of objects supporting management of Link Aggregation (LAG) on Alcatel-Lucent SROS series systems.')
tmnxLagV6v0NotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 12)).setObjects(("TIMETRA-LAG-MIB", "tLagDynamicCostOn"), ("TIMETRA-LAG-MIB", "tLagDynamicCostOff"), ("TIMETRA-LAG-MIB", "tLagPortAddFailed"), ("TIMETRA-LAG-MIB", "tLagSubGroupSelected"), ("TIMETRA-LAG-MIB", "tLagPortAddFailureCleared"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV6v0NotifGroup = tmnxLagV6v0NotifGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxLagV6v0NotifGroup.setDescription('the group of notifications providing for management of Link Aggregation Group operation in version 6.0 of the Alcatel-Lucent SROS series systems.')
tmnxLagV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 13)).setObjects(("TIMETRA-LAG-MIB", "tLagPerFpIngQueuing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV7v0Group = tmnxLagV7v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxLagV7v0Group.setDescription('The group of objects supporting management of Link Aggregation (LAG) on Alcatel-Lucent SROS series systems in 7.0 release.')
tmnxObsoletedObjectsV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 14)).setObjects(("TIMETRA-LAG-MIB", "tLagPortReasonDownFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxObsoletedObjectsV7v0Group = tmnxObsoletedObjectsV7v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxObsoletedObjectsV7v0Group.setDescription('The group of objects that have been obsoleted in release 7.0 on Alcatel-Lucent SROS series systems.')
tmnxLagInstanceV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 15)).setObjects(("TIMETRA-LAG-MIB", "tLagRowStatus"), ("TIMETRA-LAG-MIB", "tLagPortThreshold"), ("TIMETRA-LAG-MIB", "tLagPortThresholdAction"), ("TIMETRA-LAG-MIB", "tLagEnableMarkerGenerator"), ("TIMETRA-LAG-MIB", "tLagEnableLACP"), ("TIMETRA-LAG-MIB", "tLagDescription"), ("TIMETRA-LAG-MIB", "tLagDynamicCosting"), ("TIMETRA-LAG-MIB", "tLagLACPMode"), ("TIMETRA-LAG-MIB", "tLagLACPAdminKeyAutogen"), ("TIMETRA-LAG-MIB", "tLagLACPTransmitInterval"), ("TIMETRA-LAG-MIB", "tLagAccessAdaptQos"), ("TIMETRA-LAG-MIB", "tLagLACPXmitStdby"), ("TIMETRA-LAG-MIB", "tLagLACPSelCrit"), ("TIMETRA-LAG-MIB", "tLagLACPSelCritSlaveToPartner"), ("TIMETRA-LAG-MIB", "tLagLACPNbrOfSubGroups"), ("TIMETRA-LAG-MIB", "tLagholdTimeDown"), ("TIMETRA-LAG-MIB", "tLagIfIndex"), ("TIMETRA-LAG-MIB", "tLagConfigLastChange"), ("TIMETRA-LAG-MIB", "tLagPortThresholdFalling"), ("TIMETRA-LAG-MIB", "tLagPortThresholdRising"), ("TIMETRA-LAG-MIB", "tLagMemberPortName"), ("TIMETRA-LAG-MIB", "tLagMemberPortIsPrimary"), ("TIMETRA-LAG-MIB", "tLagPortSubgroup"), ("TIMETRA-LAG-MIB", "tLagPortActiveStdby"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagInstanceV7v0Group = tmnxLagInstanceV7v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxLagInstanceV7v0Group.setDescription('The group of objects supporting management of Link Aggregation (LAG) on Alcatel-Lucent SROS series systems.')
tmnxLagV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 16)).setObjects(("TIMETRA-LAG-MIB", "tLagPerFpIngQueuing"), ("TIMETRA-LAG-MIB", "tLagSystemId"), ("TIMETRA-LAG-MIB", "tLagSystemPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV8v0Group = tmnxLagV8v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxLagV8v0Group.setDescription('The group of objects supporting management of Link Aggregation (LAG) on Alcatel-Lucent SROS series systems in 8.0 release.')
tmnxLagInstanceV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 17)).setObjects(("TIMETRA-LAG-MIB", "tLagStandbySignaling"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagInstanceV9v0Group = tmnxLagInstanceV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxLagInstanceV9v0Group.setDescription('The group of objects supporting management of Link Aggregation (LAG) that were added in release 9.0 of the Alcatel-Lucent SROS series systems.')
tmnxLagNotifyObjsV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 18)).setObjects(("TIMETRA-LAG-MIB", "tLagNotifyPortAddFailReason"), ("TIMETRA-LAG-MIB", "tLagNotifySubGroupSelected"), ("TIMETRA-LAG-MIB", "tLagNotifyAdditionalInfo"), ("TIMETRA-LAG-MIB", "tLagNotifyStateChangedReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagNotifyObjsV10v0Group = tmnxLagNotifyObjsV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxLagNotifyObjsV10v0Group.setDescription('The group of objects supporting LAG notifications on Alcatel-Lucent SROS series systems.')
tmnxLagV10v0NotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 15, 2, 19)).setObjects(("TIMETRA-LAG-MIB", "tLagStateEvent"), ("TIMETRA-LAG-MIB", "tLagMemberStateEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLagV10v0NotifGroup = tmnxLagV10v0NotifGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxLagV10v0NotifGroup.setDescription('the group of notifications providing for management of Link Aggregation Group operation since version 10.0 of the Alcatel-Lucent SROS series systems.')
mibBuilder.exportSymbols("TIMETRA-LAG-MIB", tmnxLagNotifyObjsGroup=tmnxLagNotifyObjsGroup, tLagLACPNbrOfSubGroups=tLagLACPNbrOfSubGroups, tLagNotifyStateChangedReason=tLagNotifyStateChangedReason, tLagDescription=tLagDescription, tmnxLagV6v0NotifGroup=tmnxLagV6v0NotifGroup, tmnxLagV5v0NotifGroup=tmnxLagV5v0NotifGroup, tLagIfIndex=tLagIfIndex, tmnxLagV10v0Compliance=tmnxLagV10v0Compliance, tLagLACPMode=tLagLACPMode, tLagSystemPriority=tLagSystemPriority, tLagObjects=tLagObjects, tLagLACPSelCritSlaveToPartner=tLagLACPSelCritSlaveToPartner, tLagPerFpIngQueuing=tLagPerFpIngQueuing, tLagIndex=tLagIndex, tmnxLagNotifyObjsV5v0Group=tmnxLagNotifyObjsV5v0Group, tLagPortReasonDownFlags=tLagPortReasonDownFlags, tLagPortAddFailureCleared=tLagPortAddFailureCleared, tmnxLagHsmdaV6v0Group=tmnxLagHsmdaV6v0Group, tLagPortThreshold=tLagPortThreshold, tmnxLagInstanceV7v0Group=tmnxLagInstanceV7v0Group, tmnxLagV6v0Compliance=tmnxLagV6v0Compliance, tLagLACPPrimaryPort=tLagLACPPrimaryPort, tLagPortType=tLagPortType, tLagPortThresholdFalling=tLagPortThresholdFalling, tmnxLagInstanceV5v0Group=tmnxLagInstanceV5v0Group, tLagPortActiveStdby=tLagPortActiveStdby, tLagDynamicCostOn=tLagDynamicCostOn, tLagConfigLastChange=tLagConfigLastChange, tmnxObsoletedObjectsV7v0Group=tmnxObsoletedObjectsV7v0Group, tLagPortEntry=tLagPortEntry, tLagConfigEntry=tLagConfigEntry, tLagSystemId=tLagSystemId, tLagEnableLACP=tLagEnableLACP, tmnxLagV6v1Compliance=tmnxLagV6v1Compliance, tmnxLagV9v0Compliance=tmnxLagV9v0Compliance, tmnxLagV8v0Group=tmnxLagV8v0Group, tLagMemberEntry=tLagMemberEntry, tLagPortThresholdRising=tLagPortThresholdRising, tmnxLagCompliances=tmnxLagCompliances, tLagNotifyPortAddFailReason=tLagNotifyPortAddFailReason, tLagNotifyPrefix=tLagNotifyPrefix, tLagLACPTransmitInterval=tLagLACPTransmitInterval, tLagPortSubgroup=tLagPortSubgroup, tLagOperationTable=tLagOperationTable, tLagPortTable=tLagPortTable, tLagStandbySignaling=tLagStandbySignaling, tLagSubGroupSelected=tLagSubGroupSelected, tLagRowStatus=tLagRowStatus, tmnxLagNotifyObjsV10v0Group=tmnxLagNotifyObjsV10v0Group, tLagDynamicCostOff=tLagDynamicCostOff, tLagMemberPortIsPrimary=tLagMemberPortIsPrimary, tmnxLagV8v0Compliance=tmnxLagV8v0Compliance, tLagLACPXmitStdby=tLagLACPXmitStdby, tmnxLagV7v0Group=tmnxLagV7v0Group, LAGInterfaceNumber=LAGInterfaceNumber, tLagLACPSelCrit=tLagLACPSelCrit, tLagLACPAdminKeyAutogen=tLagLACPAdminKeyAutogen, tLagNotifications=tLagNotifications, tLagPortThresholdAction=tLagPortThresholdAction, tmnxLagNotificationsGroup=tmnxLagNotificationsGroup, tLagholdTimeDown=tLagholdTimeDown, tmnxLagConformance=tmnxLagConformance, LAGSubgroup=LAGSubgroup, tLagNotifyAdditionalInfo=tLagNotifyAdditionalInfo, tLagDynamicCosting=tLagDynamicCosting, tLagMemberPortName=tLagMemberPortName, tmnxLagInstanceV9v0Group=tmnxLagInstanceV9v0Group, tLagNotifySubGroupSelected=tLagNotifySubGroupSelected, tmnxLagGroups=tmnxLagGroups, tmnxLagInstanceV6v0Group=tmnxLagInstanceV6v0Group, tLagOperationEntry=tLagOperationEntry, tLagPortAddFailed=tLagPortAddFailed, tLagStateEvent=tLagStateEvent, tmnxLagV4v0Compliance=tmnxLagV4v0Compliance, PYSNMP_MODULE_ID=timetraLagMIBModule, tLagEnableMarkerGenerator=tLagEnableMarkerGenerator, tLagConfigTable=tLagConfigTable, timetraLagMIBModule=timetraLagMIBModule, tmnxLagV5v0Compliance=tmnxLagV5v0Compliance, tmnxObsoletedObjectsV4v0Group=tmnxObsoletedObjectsV4v0Group, tLagAccessAdaptQos=tLagAccessAdaptQos, tLagMemberStateEvent=tLagMemberStateEvent, tmnxLagV7v0Compliance=tmnxLagV7v0Compliance, tmnxLagInstanceV4v0Group=tmnxLagInstanceV4v0Group, tLagMemberTable=tLagMemberTable, tLagNotificationObjects=tLagNotificationObjects, tmnxLagV10v0NotifGroup=tmnxLagV10v0NotifGroup)
