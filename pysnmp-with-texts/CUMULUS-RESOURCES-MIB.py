#
# PySNMP MIB module CUMULUS-RESOURCES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CUMULUS-RESOURCES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:32:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
DisplayString, DateAndTime, cumulusMib = mibBuilder.importSymbols("CUMULUS-SNMP-MIB", "DisplayString", "DateAndTime", "cumulusMib")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, NotificationType, IpAddress, MibIdentifier, Gauge32, Unsigned32, TimeTicks, Bits, ObjectIdentity, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "NotificationType", "IpAddress", "MibIdentifier", "Gauge32", "Unsigned32", "TimeTicks", "Bits", "ObjectIdentity", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
resourceUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 40310, 1))
l3Tables = MibIdentifier((1, 3, 6, 1, 4, 1, 40310, 1, 1))
l3HostTableCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 40310, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3HostTableCurrentEntries.setStatus('current')
if mibBuilder.loadTexts: l3HostTableCurrentEntries.setDescription('The number of L3 Host table entries currently in use')
l3HostTableMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 40310, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3HostTableMaxEntries.setStatus('current')
if mibBuilder.loadTexts: l3HostTableMaxEntries.setDescription('The maximum possible entries in the L3 Host table. The Host table is defined as the table holding the ARP/ND cache.')
l3RoutingTableCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 40310, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3RoutingTableCurrentEntries.setStatus('current')
if mibBuilder.loadTexts: l3RoutingTableCurrentEntries.setDescription('The number of L3 Routing table entries currently in use.')
l3RoutingTableMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 40310, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3RoutingTableMaxEntries.setStatus('current')
if mibBuilder.loadTexts: l3RoutingTableMaxEntries.setDescription('The maximum possible entries in the L3 Routing table. L3 Routing table is defined as the table holding the longest prefix match (LPM) entries.')
l3NextHopTableCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 40310, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3NextHopTableCurrentEntries.setStatus('current')
if mibBuilder.loadTexts: l3NextHopTableCurrentEntries.setDescription('The number of L3 Next Hop table entries currently in use.')
l3NextHopTableMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 40310, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3NextHopTableMaxEntries.setStatus('current')
if mibBuilder.loadTexts: l3NextHopTableMaxEntries.setDescription('The maximum possible entries in the L3 Next Hop table. The L3 Next Hop table holds information about the next hop(s) associated with a routing table entry.')
l3EcmpGroupTableCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 40310, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3EcmpGroupTableCurrentEntries.setStatus('current')
if mibBuilder.loadTexts: l3EcmpGroupTableCurrentEntries.setDescription('Number of ECMP Group table entries currently in use.')
l3EcmpGroupTableMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 40310, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3EcmpGroupTableMaxEntries.setStatus('current')
if mibBuilder.loadTexts: l3EcmpGroupTableMaxEntries.setDescription('The maximum possible entries in the ECMP Group table. The ECMP Group table holds information about ')
l3EcmpNextHopTableCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 40310, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3EcmpNextHopTableCurrentEntries.setStatus('current')
if mibBuilder.loadTexts: l3EcmpNextHopTableCurrentEntries.setDescription('The number of ECMP Next Hop table entries currently in use.')
l3EcmpNextHopTableMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 40310, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3EcmpNextHopTableMaxEntries.setStatus('current')
if mibBuilder.loadTexts: l3EcmpNextHopTableMaxEntries.setDescription('The maximum possible entries in the ECMP Next Hop table. ECMP Next Hop table stores information about the next hop associated with a routing table entry that has multiple equal cost next hop neighbors.')
l2Tables = MibIdentifier((1, 3, 6, 1, 4, 1, 40310, 1, 2))
l2MacTableCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 40310, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2MacTableCurrentEntries.setStatus('current')
if mibBuilder.loadTexts: l2MacTableCurrentEntries.setDescription('The number of L2 Mac table entries currently in use.')
l2MacTableMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 40310, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2MacTableMaxEntries.setStatus('current')
if mibBuilder.loadTexts: l2MacTableMaxEntries.setDescription('The maximum possible entries in the L2 Mac table.')
l2CacheTableCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 40310, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2CacheTableCurrentEntries.setStatus('current')
if mibBuilder.loadTexts: l2CacheTableCurrentEntries.setDescription('The number of Cache table currently entries in use')
l2CacheTableMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 40310, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2CacheTableMaxEntries.setStatus('current')
if mibBuilder.loadTexts: l2CacheTableMaxEntries.setDescription('The maximum possible entries in the Cache table. The Cache table holds entries that are to be redirected to the CPU because they are control packets, specifically L2 protocol control packets. Examples are STP BPDUs, LLDP BPDUs etc.')
bufferUtilizn = MibIdentifier((1, 3, 6, 1, 4, 1, 40310, 1, 3))
bufUtiliznComputeTime = MibScalar((1, 3, 6, 1, 4, 1, 40310, 1, 3, 1), DisplayString().clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufUtiliznComputeTime.setStatus('current')
if mibBuilder.loadTexts: bufUtiliznComputeTime.setDescription('The time when the buffer utilization statistic was computed.')
bufUtiliznPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 40310, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufUtiliznPollInterval.setStatus('current')
if mibBuilder.loadTexts: bufUtiliznPollInterval.setDescription('The periodicity at which the buffer utilization data is pulled from the hardware. This is specified in milliseconds.')
bufUtiliznMeasureInterval = MibScalar((1, 3, 6, 1, 4, 1, 40310, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufUtiliznMeasureInterval.setStatus('current')
if mibBuilder.loadTexts: bufUtiliznMeasureInterval.setDescription('The time interval over which the buffer utilization statistics is computed. This is specified in minutes.')
bufUtiliznTable = MibTable((1, 3, 6, 1, 4, 1, 40310, 1, 3, 4), )
if mibBuilder.loadTexts: bufUtiliznTable.setStatus('current')
if mibBuilder.loadTexts: bufUtiliznTable.setDescription('Table describes the ingress buffer utilization per service pool')
bufUtiliznEntry = MibTableRow((1, 3, 6, 1, 4, 1, 40310, 1, 3, 4, 1), ).setIndexNames((0, "CUMULUS-RESOURCES-MIB", "bufServicePoolID"))
if mibBuilder.loadTexts: bufUtiliznEntry.setStatus('current')
if mibBuilder.loadTexts: bufUtiliznEntry.setDescription('')
bufServicePoolID = MibTableColumn((1, 3, 6, 1, 4, 1, 40310, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufServicePoolID.setStatus('current')
if mibBuilder.loadTexts: bufServicePoolID.setDescription('The service pool number.')
bufMin = MibTableColumn((1, 3, 6, 1, 4, 1, 40310, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufMin.setStatus('current')
if mibBuilder.loadTexts: bufMin.setDescription('The minimum number of cells used in this service pool.')
bufMax = MibTableColumn((1, 3, 6, 1, 4, 1, 40310, 1, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufMax.setStatus('current')
if mibBuilder.loadTexts: bufMax.setDescription('The maximum number of cells used in this service pool')
bufAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 40310, 1, 3, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufAvg.setStatus('current')
if mibBuilder.loadTexts: bufAvg.setDescription('The average number of cells used in this service pool')
bufVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 40310, 1, 3, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufVariance.setStatus('current')
if mibBuilder.loadTexts: bufVariance.setDescription('The variance of the buffer pool utilization for this service pool over the last measured interval.')
bufStdDev = MibTableColumn((1, 3, 6, 1, 4, 1, 40310, 1, 3, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufStdDev.setStatus('current')
if mibBuilder.loadTexts: bufStdDev.setDescription('The Standard Deviation of the buffer pool utilization for this service pool over the last measured interval.')
mibBuilder.exportSymbols("CUMULUS-RESOURCES-MIB", bufUtiliznMeasureInterval=bufUtiliznMeasureInterval, bufAvg=bufAvg, l2CacheTableMaxEntries=l2CacheTableMaxEntries, bufUtiliznPollInterval=bufUtiliznPollInterval, l2Tables=l2Tables, bufUtiliznTable=bufUtiliznTable, l3NextHopTableCurrentEntries=l3NextHopTableCurrentEntries, l3EcmpGroupTableMaxEntries=l3EcmpGroupTableMaxEntries, l3RoutingTableCurrentEntries=l3RoutingTableCurrentEntries, bufferUtilizn=bufferUtilizn, l3EcmpGroupTableCurrentEntries=l3EcmpGroupTableCurrentEntries, bufUtiliznComputeTime=bufUtiliznComputeTime, l3EcmpNextHopTableMaxEntries=l3EcmpNextHopTableMaxEntries, l2MacTableCurrentEntries=l2MacTableCurrentEntries, l3RoutingTableMaxEntries=l3RoutingTableMaxEntries, l3Tables=l3Tables, bufStdDev=bufStdDev, l3HostTableCurrentEntries=l3HostTableCurrentEntries, bufMax=bufMax, bufVariance=bufVariance, l3NextHopTableMaxEntries=l3NextHopTableMaxEntries, l3EcmpNextHopTableCurrentEntries=l3EcmpNextHopTableCurrentEntries, l3HostTableMaxEntries=l3HostTableMaxEntries, resourceUtilization=resourceUtilization, bufUtiliznEntry=bufUtiliznEntry, bufServicePoolID=bufServicePoolID, l2CacheTableCurrentEntries=l2CacheTableCurrentEntries, bufMin=bufMin, l2MacTableMaxEntries=l2MacTableMaxEntries)
