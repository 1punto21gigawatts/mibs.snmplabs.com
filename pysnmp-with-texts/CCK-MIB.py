#
# PySNMP MIB module CCK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CCK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:47:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ipAddrEntry, = mibBuilder.importSymbols("IP-MIB", "ipAddrEntry")
rsCCK, = mibBuilder.importSymbols("RADWARE-MIB", "rsCCK")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, iso, Unsigned32, MibIdentifier, Integer32, TimeTicks, IpAddress, enterprises, Gauge32, Counter64, NotificationType, ModuleIdentity, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "iso", "Unsigned32", "MibIdentifier", "Integer32", "TimeTicks", "IpAddress", "enterprises", "Gauge32", "Counter64", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Counter32")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class NetNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

rsCCKElementTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 1), )
if mibBuilder.loadTexts: rsCCKElementTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKElementTable.setDescription("Table for the device's connectivity checks checked elements")
rsCCKElementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 1, 1), ).setIndexNames((0, "CCK-MIB", "rsCCKElementId"))
if mibBuilder.loadTexts: rsCCKElementEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKElementEntry.setDescription('the row definition for this table')
rsCCKElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKElementId.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKElementId.setDescription("connectivity check's checked element ID")
rsCCKElementDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKElementDescription.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKElementDescription.setDescription("connectivity check's checked element description")
rsCCKElementGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKElementGroup.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKElementGroup.setDescription("connectivity check's checked element description")
rsCCKElementIsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKElementIsActive.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKElementIsActive.setDescription("connectivity check's checked element active status")
rsCCKElementIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("unavailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKElementIsAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKElementIsAvailable.setDescription("connectivity check's checked element available status")
rsCCKElementDftAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKElementDftAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKElementDftAddr.setDescription("connectivity check's checked element's default ip address")
rsCCKElementRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 1, 1, 7), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKElementRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKElementRowStatus.setDescription("connectivity check's checked element row status")
rsCCKHealthChkTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2), )
if mibBuilder.loadTexts: rsCCKHealthChkTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKHealthChkTable.setDescription("Table for the device's connectivity checks health checks")
rsCCKHealthChkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1), ).setIndexNames((0, "CCK-MIB", "rsCCKHealthChkName"))
if mibBuilder.loadTexts: rsCCKHealthChkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKHealthChkEntry.setDescription('The row definition for this table')
rsCCKHealthChkName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKHealthChkName.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKHealthChkName.setDescription("connectivity check's health check name")
rsCCKHealthChkId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKHealthChkId.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKHealthChkId.setDescription("connectivity check's health check identifier")
rsCCKHealthChkMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKHealthChkMethod.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKHealthChkMethod.setDescription("connectivity check's health check method")
rsCCKHealthChkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("failed", 2), ("passed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKHealthChkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKHealthChkStatus.setDescription("connectivity check's health check status")
rsCCKHealthChkDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKHealthChkDstAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKHealthChkDstAddr.setDescription("connectivity check's health check destination address")
rsCCKHealthChkNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKHealthChkNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKHealthChkNextHop.setDescription("connectivity check's health check next hop")
rsCCKHealthChkDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKHealthChkDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKHealthChkDstPort.setDescription("connectivity check's health check destination port")
rsCCKHealthChkArguments = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKHealthChkArguments.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKHealthChkArguments.setDescription("connectivity check's health check argument list")
rsCCKHealthChkInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKHealthChkInterval.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKHealthChkInterval.setDescription("connectivity check's health check interval in seconds")
rsCCKHealthChkRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKHealthChkRetries.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKHealthChkRetries.setDescription("connectivity check's health check number of retries before failing")
rsCCKHealthChkTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKHealthChkTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKHealthChkTimeout.setDescription("connectivity check's health check timeout in seconds")
rsCCKHealthChkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKHealthChkRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKHealthChkRowStatus.setDescription("connectivity check's health check row status")
rsCCKChkBindingTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 3), )
if mibBuilder.loadTexts: rsCCKChkBindingTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKChkBindingTable.setDescription('Table for health check - element bindings')
rsCCKChkBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 3, 1), ).setIndexNames((0, "CCK-MIB", "rsCCKChkBindingHealthChk"), (0, "CCK-MIB", "rsCCKChkBindingElement"))
if mibBuilder.loadTexts: rsCCKChkBindingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKChkBindingEntry.setDescription('The row definition for this table')
rsCCKChkBindingHealthChk = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKChkBindingHealthChk.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKChkBindingHealthChk.setDescription('the bound health check id')
rsCCKChkBindingElement = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKChkBindingElement.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKChkBindingElement.setDescription('the bound element id')
rsCCKChkBindingGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKChkBindingGroup.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKChkBindingGroup.setDescription('the bound element group')
rsCCKChkBindingMandatory = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ismandatory", 1), ("isnon-mandatory", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKChkBindingMandatory.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKChkBindingMandatory.setDescription("connectivity check's binding relation - mandatory or not")
rsCCKChkBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 3, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKChkBindingRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKChkBindingRowStatus.setDescription("health cehck's binding check row status")
rsCCKChkMethodTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 4), )
if mibBuilder.loadTexts: rsCCKChkMethodTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKChkMethodTable.setDescription("connectivity check's check methods table")
rsCCKChkMethodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 4, 1), ).setIndexNames((0, "CCK-MIB", "rsCCKChkMethodId"))
if mibBuilder.loadTexts: rsCCKChkMethodEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKChkMethodEntry.setDescription('The row definition for this table')
rsCCKChkMethodId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKChkMethodId.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKChkMethodId.setDescription("connectivity check's check method's id")
rsCCKChkMethodDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKChkMethodDescription.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKChkMethodDescription.setDescription("connectivity check's check method's description")
rsCCKChkMethodRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 4, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKChkMethodRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKChkMethodRowStatus.setDescription("connectivity check's check method's row status")
rsCCKPktSequenceTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 5), )
if mibBuilder.loadTexts: rsCCKPktSequenceTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKPktSequenceTable.setDescription("connectivity check's packet sequence table")
rsCCKPktSequenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 5, 1), ).setIndexNames((0, "CCK-MIB", "rsCCKPktSequenceSeqId"), (0, "CCK-MIB", "rsCCKPktSequencePktId"))
if mibBuilder.loadTexts: rsCCKPktSequenceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKPktSequenceEntry.setDescription('The row definition for this table')
rsCCKPktSequenceSeqId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKPktSequenceSeqId.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKPktSequenceSeqId.setDescription('packet sequence id')
rsCCKPktSequencePktId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKPktSequencePktId.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKPktSequencePktId.setDescription("packet's sequence number within the packet sequence")
rsCCKPktSequenceType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("send", 1), ("receive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKPktSequenceType.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKPktSequenceType.setDescription('packet type (send/receive)')
rsCCKPktSequenceString = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKPktSequenceString.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKPktSequenceString.setDescription('packet data (for send)/match pattern (for receive)')
rsCCKPktSequenceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKPktSequenceDescription.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKPktSequenceDescription.setDescription('packet description')
rsCCKPktSequenceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 5, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKPktSequenceRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKPktSequenceRowStatus.setDescription("connectivity check's packet sequence's row status")
rsCCKArgDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKArgDelimiter.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKArgDelimiter.setDescription('Connectivity checks additional argument delimiter character')
rsCCKNextElementId = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKNextElementId.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKNextElementId.setDescription('Connectivity checks next element id')
rsCCKNextCheckId = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKNextCheckId.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKNextCheckId.setDescription('Connectivity checks next health check id')
rsCCKStatus = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsCCKStatus.setDescription('Connectivity checks enable switch')
mibBuilder.exportSymbols("CCK-MIB", rsCCKHealthChkTable=rsCCKHealthChkTable, rsCCKElementDftAddr=rsCCKElementDftAddr, rsCCKChkMethodEntry=rsCCKChkMethodEntry, rsCCKHealthChkNextHop=rsCCKHealthChkNextHop, rsCCKChkBindingMandatory=rsCCKChkBindingMandatory, rsCCKHealthChkId=rsCCKHealthChkId, rsCCKChkMethodDescription=rsCCKChkMethodDescription, rsCCKPktSequenceDescription=rsCCKPktSequenceDescription, rsCCKElementIsActive=rsCCKElementIsActive, rsCCKHealthChkRowStatus=rsCCKHealthChkRowStatus, rsCCKChkBindingGroup=rsCCKChkBindingGroup, rsCCKElementEntry=rsCCKElementEntry, rsCCKPktSequenceTable=rsCCKPktSequenceTable, rsCCKElementIsAvailable=rsCCKElementIsAvailable, rsCCKHealthChkStatus=rsCCKHealthChkStatus, rsCCKPktSequenceEntry=rsCCKPktSequenceEntry, rsCCKHealthChkInterval=rsCCKHealthChkInterval, rsCCKArgDelimiter=rsCCKArgDelimiter, rsCCKStatus=rsCCKStatus, rsCCKHealthChkArguments=rsCCKHealthChkArguments, rsCCKChkMethodTable=rsCCKChkMethodTable, rsCCKChkBindingHealthChk=rsCCKChkBindingHealthChk, rsCCKPktSequencePktId=rsCCKPktSequencePktId, rsCCKPktSequenceType=rsCCKPktSequenceType, rsCCKChkMethodRowStatus=rsCCKChkMethodRowStatus, rsCCKHealthChkEntry=rsCCKHealthChkEntry, rsCCKHealthChkRetries=rsCCKHealthChkRetries, rsCCKHealthChkMethod=rsCCKHealthChkMethod, rsCCKElementDescription=rsCCKElementDescription, rsCCKChkBindingEntry=rsCCKChkBindingEntry, RowStatus=RowStatus, NetNumber=NetNumber, rsCCKChkBindingTable=rsCCKChkBindingTable, rsCCKElementRowStatus=rsCCKElementRowStatus, rsCCKElementId=rsCCKElementId, rsCCKPktSequenceSeqId=rsCCKPktSequenceSeqId, rsCCKElementTable=rsCCKElementTable, rsCCKHealthChkDstPort=rsCCKHealthChkDstPort, rsCCKChkBindingElement=rsCCKChkBindingElement, rsCCKHealthChkName=rsCCKHealthChkName, rsCCKNextCheckId=rsCCKNextCheckId, rsCCKNextElementId=rsCCKNextElementId, rsCCKPktSequenceString=rsCCKPktSequenceString, rsCCKHealthChkTimeout=rsCCKHealthChkTimeout, rsCCKChkMethodId=rsCCKChkMethodId, rsCCKElementGroup=rsCCKElementGroup, rsCCKHealthChkDstAddr=rsCCKHealthChkDstAddr, rsCCKChkBindingRowStatus=rsCCKChkBindingRowStatus, rsCCKPktSequenceRowStatus=rsCCKPktSequenceRowStatus, TruthValue=TruthValue)
