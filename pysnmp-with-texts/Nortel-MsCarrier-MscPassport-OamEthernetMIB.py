#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-OamEthernetMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-OamEthernetMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:31:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
mscLpIndex, mscLp = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex", "mscLp")
MacAddress, Counter32, StorageType, Integer32, InterfaceIndex, Unsigned32, DisplayString, RowStatus = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "MacAddress", "Counter32", "StorageType", "Integer32", "InterfaceIndex", "Unsigned32", "DisplayString", "RowStatus")
NonReplicated, Link, AsciiString = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "NonReplicated", "Link", "AsciiString")
mscPassportMIBs, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64, TimeTicks, iso, IpAddress, Bits, Gauge32, ObjectIdentity, Integer32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64", "TimeTicks", "iso", "IpAddress", "Bits", "Gauge32", "ObjectIdentity", "Integer32", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
oamEthernetMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 79))
mscLpOamEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27))
mscLpOamEnetRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 1), )
if mibBuilder.loadTexts: mscLpOamEnetRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpOamEnet components.')
mscLpOamEnetRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-OamEthernetMIB", "mscLpOamEnetIndex"))
if mibBuilder.loadTexts: mscLpOamEnetRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetRowStatusEntry.setDescription('A single entry in the table represents a single mscLpOamEnet component.')
mscLpOamEnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpOamEnetRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpOamEnet components. These components can be added and deleted.')
mscLpOamEnetComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpOamEnetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetStorageType.setDescription('This variable represents the storage type value for the mscLpOamEnet tables.')
mscLpOamEnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: mscLpOamEnetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetIndex.setDescription('This variable represents the index for the mscLpOamEnet tables.')
mscLpOamEnetCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 10), )
if mibBuilder.loadTexts: mscLpOamEnetCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
mscLpOamEnetCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-OamEthernetMIB", "mscLpOamEnetIndex"))
if mibBuilder.loadTexts: mscLpOamEnetCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetCidDataEntry.setDescription('An entry in the mscLpOamEnetCidDataTable.')
mscLpOamEnetCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpOamEnetCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
mscLpOamEnetIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 11), )
if mibBuilder.loadTexts: mscLpOamEnetIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
mscLpOamEnetIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-OamEthernetMIB", "mscLpOamEnetIndex"))
if mibBuilder.loadTexts: mscLpOamEnetIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetIfEntryEntry.setDescription('An entry in the mscLpOamEnetIfEntryTable.')
mscLpOamEnetIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpOamEnetIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
mscLpOamEnetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 11, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
mscLpOamEnetProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 12), )
if mibBuilder.loadTexts: mscLpOamEnetProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetProvTable.setDescription('This group contains provisioned attributes for the OamEthernet component.')
mscLpOamEnetProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-OamEthernetMIB", "mscLpOamEnetIndex"))
if mibBuilder.loadTexts: mscLpOamEnetProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetProvEntry.setDescription('An entry in the mscLpOamEnetProvTable.')
mscLpOamEnetApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 12, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpOamEnetApplicationFramerName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetApplicationFramerName.setDescription('This attribute specifies which Lan Application is running on this port.')
mscLpOamEnetSwitchoverOnFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpOamEnetSwitchoverOnFailure.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetSwitchoverOnFailure.setDescription('This attribute specifies if a CP switchover event should occur if a port or link failure is detected by the initial test process or if a steady state link failure is observed. This attribute can be set to one of the following values: enabled: This value indicates that a switchover will take place if a port or link failure is detected. disabled: This value indicates that a switchover will not take place if a port or link failure is detected.')
mscLpOamEnetExtendedStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpOamEnetExtendedStatistics.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetExtendedStatistics.setDescription('This attribute specifies if extended statistics are to be collected for the OamEthernet component. The extended statistics include: singleCollisionFrames, multipleCollisionFrames, lateCollisions, excessiveCollisions, carrierSenseErrors, and clearToSendSignalLoss. These statistics all require extra processing to gather and store which may have a negative impact on the overall performance of the OAM Ethernet port. If extendedStatistics is set to disabled, then these particular statistical attributes will be suppressed from display operations.')
mscLpOamEnetAdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 13), )
if mibBuilder.loadTexts: mscLpOamEnetAdminInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetAdminInfoTable.setDescription('This group contains the attributes pertaining to the vendor of the equipment.')
mscLpOamEnetAdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-OamEthernetMIB", "mscLpOamEnetIndex"))
if mibBuilder.loadTexts: mscLpOamEnetAdminInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetAdminInfoEntry.setDescription('An entry in the mscLpOamEnetAdminInfoTable.')
mscLpOamEnetVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 13, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpOamEnetVendor.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetVendor.setDescription('This is the name of the vendor supplying the facility.')
mscLpOamEnetCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 13, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpOamEnetCommentText.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetCommentText.setDescription('Any miscellaneous text about the facility.')
mscLpOamEnetStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 15), )
if mibBuilder.loadTexts: mscLpOamEnetStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscLpOamEnetStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-OamEthernetMIB", "mscLpOamEnetIndex"))
if mibBuilder.loadTexts: mscLpOamEnetStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetStateEntry.setDescription('An entry in the mscLpOamEnetStateTable.')
mscLpOamEnetAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscLpOamEnetOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscLpOamEnetUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscLpOamEnetOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 16), )
if mibBuilder.loadTexts: mscLpOamEnetOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
mscLpOamEnetOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-OamEthernetMIB", "mscLpOamEnetIndex"))
if mibBuilder.loadTexts: mscLpOamEnetOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetOperStatusEntry.setDescription('An entry in the mscLpOamEnetOperStatusTable.')
mscLpOamEnetSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
mscLpOamEnetOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 17), )
if mibBuilder.loadTexts: mscLpOamEnetOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetOperTable.setDescription('This group contains the operational attributes of the OamEthernet component.')
mscLpOamEnetOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 17, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-OamEthernetMIB", "mscLpOamEnetIndex"))
if mibBuilder.loadTexts: mscLpOamEnetOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetOperEntry.setDescription('An entry in the mscLpOamEnetOperTable.')
mscLpOamEnetMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 17, 1, 1), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetMacAddress.setDescription('This attribute indicates the medium access controller (MAC) address automatically assigned to the OAM Ethernet port by the system. The MAC address is displayed in canonical format.')
mscLpOamEnetActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("notAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetActiveStatus.setDescription('This attribute indicates the status of the Oam Ethernet port on the active CP.')
mscLpOamEnetStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("notAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetStandbyStatus.setDescription('This attribute indicates the status of the Oam Ethernet port on the standby CP.')
mscLpOamEnetOamEnetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 18), )
if mibBuilder.loadTexts: mscLpOamEnetOamEnetStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetOamEnetStatsTable.setDescription('This group contains statistical attributes for the OamEthernet component.')
mscLpOamEnetOamEnetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 18, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-OamEthernetMIB", "mscLpOamEnetIndex"))
if mibBuilder.loadTexts: mscLpOamEnetOamEnetStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetOamEnetStatsEntry.setDescription('An entry in the mscLpOamEnetOamEnetStatsTable.')
mscLpOamEnetClearToSendSignalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetClearToSendSignalLoss.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetClearToSendSignalLoss.setDescription('This attribute indicates the number of times that the clear to send signal was lost when attempting to transmit a frame. This counter wraps to zero when it exceeds its maximum value. This attribute is only active if the extendedStatistics attribute is enabled.')
mscLpOamEnetFrameTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 18, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetFrameTooShort.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetFrameTooShort.setDescription('This attribute indicates the number of frames received whose length is less than the allowed minimum frame length. This counter wraps to zero when it exceeds its maximum value.')
mscLpOamEnetNumberOfRxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 18, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetNumberOfRxCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetNumberOfRxCollisions.setDescription('This attribute indicates the number of collisions detected during reception. This counter wraps to zero when it exceeds its maximum value.')
mscLpOamEnetLackOfResourcesDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 18, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetLackOfResourcesDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetLackOfResourcesDiscards.setDescription('This attribute indicates the number of good frames discarded because of a lack of resources available to contain them on the system. This counter wraps to zero when it exceeds its maximum value.')
mscLpOamEnetOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 18, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetOverrunErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetOverrunErrors.setDescription('This attribute indicates the number of frames known to be lost because the local system bus was not available. This counter wraps to zero when it exceeds its maximum value.')
mscLpOamEnetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 19), )
if mibBuilder.loadTexts: mscLpOamEnetStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetStatsTable.setDescription('This group contains statistical attributes for the Ethernet component.')
mscLpOamEnetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 19, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-OamEthernetMIB", "mscLpOamEnetIndex"))
if mibBuilder.loadTexts: mscLpOamEnetStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetStatsEntry.setDescription('An entry in the mscLpOamEnetStatsTable.')
mscLpOamEnetAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 19, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetAlignmentErrors.setDescription('The alignmentErrors counter indicates the number of frames received which were not an integral number of octets in length. Frames will be checked for alignmentErrors before they are checked for Frame Check Sequence (FCS) errors. If there is an alignment error, the error will only be counted here and not in fcsErrors. This counter wraps around after it exceeds its maximum value.')
mscLpOamEnetFcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetFcsErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetFcsErrors.setDescription('The fcsErrors, Frame Check Sequence (FCS) error, counter indicates the number of frames received which were an integral number of octets in length and did not pass the FCS check. This counter wraps around after it exceeds its maximum value.')
mscLpOamEnetSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetSingleCollisionFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetSingleCollisionFrames.setDescription('The singleCollisionFrames counter indicates the number of frames successfully transmitted which experienced exactly one collision. This counter wraps around after it exceeds its maximum value.')
mscLpOamEnetMultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetMultipleCollisionFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetMultipleCollisionFrames.setDescription('The multipleCollisionFrames counter indicates the number of frames successfully transmitted which experienced more than one collision. This counter wraps around after it exceeds its maximum value.')
mscLpOamEnetSqeTestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetSqeTestErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetSqeTestErrors.setDescription("The sqeTestErrors, Signal Quality Error (SQE) Test errors, counter indicates the number of times the 'SQE Test Error' message has been generated for the station. This counter wraps around after it exceeds its maximum value.")
mscLpOamEnetDeferredTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetDeferredTransmissions.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetDeferredTransmissions.setDescription('The deferredTransmissions counter indicates the number of frames which experienced a transmission delay because the medium was busy. This counter wraps around after it exceeds its maximum value.')
mscLpOamEnetLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetLateCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetLateCollisions.setDescription('The lateCollisions counter indicates the number of times a collision was detected later than 512 bit-times into the transmission of a packet. This counter wraps around after it exceeds its maximum value.')
mscLpOamEnetExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetExcessiveCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetExcessiveCollisions.setDescription('The excessiveCollisions counter indicates the number of frames which failed to get transmitted due to excessive collisions. This counter wraps around after it exceeds its maximum value.')
mscLpOamEnetMacTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 19, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetMacTransmitErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetMacTransmitErrors.setDescription('The Medium Access Controller (MAC) transmit error counter indicates the number of times that a transmission failed due to internal MAC transmit errors. This counter wraps around after it exceeds its maximum value.')
mscLpOamEnetCarrierSenseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 19, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetCarrierSenseErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetCarrierSenseErrors.setDescription('The carrier sense error counter indicates the number of times that the carrier sense condition was lost or never asserted when attempting to transmit a frame. This counter wraps around after it exceeds its maximum value.')
mscLpOamEnetFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 19, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetFrameTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetFrameTooLongs.setDescription('The frame too long counter indicates the number of frames received which exceeded the maximum frame size. This counter wraps around after it exceeds its maximum value.')
mscLpOamEnetMacReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 19, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetMacReceiveErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetMacReceiveErrors.setDescription('The Medium Access Controller (MAC) receive error counter indicates the number of times a receive failed due to internal MAC receive errors. This counter wraps around after it exceeds its maximum value.')
mscLpOamEnetTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 2))
mscLpOamEnetTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 2, 1), )
if mibBuilder.loadTexts: mscLpOamEnetTestRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetTestRowStatusTable.setDescription('This entry controls the addition and deletion of mscLpOamEnetTest components.')
mscLpOamEnetTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-OamEthernetMIB", "mscLpOamEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-OamEthernetMIB", "mscLpOamEnetTestIndex"))
if mibBuilder.loadTexts: mscLpOamEnetTestRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetTestRowStatusEntry.setDescription('A single entry in the table represents a single mscLpOamEnetTest component.')
mscLpOamEnetTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetTestRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetTestRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpOamEnetTest components. These components cannot be added nor deleted.')
mscLpOamEnetTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetTestComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetTestComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpOamEnetTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetTestStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetTestStorageType.setDescription('This variable represents the storage type value for the mscLpOamEnetTest tables.')
mscLpOamEnetTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpOamEnetTestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetTestIndex.setDescription('This variable represents the index for the mscLpOamEnetTest tables.')
mscLpOamEnetTestOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 2, 10), )
if mibBuilder.loadTexts: mscLpOamEnetTestOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetTestOperTable.setDescription('This group contains the operational data for the Test component.')
mscLpOamEnetTestOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-OamEthernetMIB", "mscLpOamEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-OamEthernetMIB", "mscLpOamEnetTestIndex"))
if mibBuilder.loadTexts: mscLpOamEnetTestOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetTestOperEntry.setDescription('An entry in the mscLpOamEnetTestOperTable.')
mscLpOamEnetTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("hardwareLogic", 0), ("configuration", 1), ("memoryMap", 2), ("tdr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpOamEnetTestType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetTestType.setDescription('This attribute is the type of test to be run. The four types of tests available are: the port hardware logic test, the configure and dump memory registers test, the memory mapping test and the Time Domain Reflectometry (TDR) test. The possible values of this attribute are: hardwareLogic: this test checks the port hardware controller for logic errors in some of the on-chip counters and shift registers. configuration: this test configures the memory registers of the hardware controller in a predetermined way and then dumps the registers and checks their contents for errors. memoryMap: this test does an extensive test of the memory structures used by the OAM Ethernet port to verify that they are configured correctly and are error-free. tdr: this test is used to detect and locate cable faults caused by either a short or an open circuit on the coaxial cable.')
mscLpOamEnetTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 2, 11), )
if mibBuilder.loadTexts: mscLpOamEnetTestResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetTestResultsTable.setDescription('This group contains all the statistics related attributes of the Test component.')
mscLpOamEnetTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-OamEthernetMIB", "mscLpOamEnetIndex"), (0, "Nortel-MsCarrier-MscPassport-OamEthernetMIB", "mscLpOamEnetTestIndex"))
if mibBuilder.loadTexts: mscLpOamEnetTestResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetTestResultsEntry.setDescription('An entry in the mscLpOamEnetTestResultsTable.')
mscLpOamEnetTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("testComplete", 5))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetTestCauseOfTermination.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetTestCauseOfTermination.setDescription('This attribute records the reason why the test terminated. The possible values of this attribute are: testTimeExpired: this value indicates the time allotted for the test to run has expired which caused the test terminate. If the port is locked without the forever option then it will remain locked for only five minutes before being automatically unlocked. If the port unlocks itself after five minutes while the test is running then this attribute will be set to testTimeExpired. If the forever option is used then the test will run until completion, failure, or a Stop command. stoppedByOperator: this value indicates that the test was terminated when an operator issued a Stop command. unknown: this value indicates that the test terminated for an unknown reason. neverStarted: this value indicates that the test never started because the port could not be locked or because there is a hardware failure preventing the tests from running. testRunning: this value indicates that the test is currently running. testComplete: this value indicates that the test completed normally.')
mscLpOamEnetTestTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 27, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("neverRun", 0), ("fail", 1), ("pass", 2), ("running", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOamEnetTestTestResult.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpOamEnetTestTestResult.setDescription('This attribute records the result of last port test executed on the OAM Ethernet port. The result can be one of the following values. pass: the test passed fail: the test failed neverRun: the test has not been run running: the test is running')
oamEthernetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 79, 1))
oamEthernetGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 79, 1, 1))
oamEthernetGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 79, 1, 1, 3))
oamEthernetGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 79, 1, 1, 3, 2))
oamEthernetCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 79, 3))
oamEthernetCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 79, 3, 1))
oamEthernetCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 79, 3, 1, 3))
oamEthernetCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 79, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-OamEthernetMIB", mscLpOamEnetCidDataEntry=mscLpOamEnetCidDataEntry, mscLpOamEnetAdminInfoTable=mscLpOamEnetAdminInfoTable, mscLpOamEnetIfIndex=mscLpOamEnetIfIndex, mscLpOamEnetNumberOfRxCollisions=mscLpOamEnetNumberOfRxCollisions, mscLpOamEnetAdminState=mscLpOamEnetAdminState, mscLpOamEnetSnmpOperStatus=mscLpOamEnetSnmpOperStatus, mscLpOamEnetLateCollisions=mscLpOamEnetLateCollisions, oamEthernetCapabilitiesCA=oamEthernetCapabilitiesCA, mscLpOamEnetApplicationFramerName=mscLpOamEnetApplicationFramerName, mscLpOamEnetTestType=mscLpOamEnetTestType, mscLpOamEnetTestResultsEntry=mscLpOamEnetTestResultsEntry, mscLpOamEnetTestIndex=mscLpOamEnetTestIndex, mscLpOamEnetIfEntryEntry=mscLpOamEnetIfEntryEntry, mscLpOamEnetRowStatus=mscLpOamEnetRowStatus, mscLpOamEnetDeferredTransmissions=mscLpOamEnetDeferredTransmissions, mscLpOamEnetFrameTooLongs=mscLpOamEnetFrameTooLongs, mscLpOamEnetMacAddress=mscLpOamEnetMacAddress, mscLpOamEnetTestCauseOfTermination=mscLpOamEnetTestCauseOfTermination, mscLpOamEnetStatsTable=mscLpOamEnetStatsTable, oamEthernetCapabilities=oamEthernetCapabilities, mscLpOamEnetTestStorageType=mscLpOamEnetTestStorageType, mscLpOamEnetTestOperEntry=mscLpOamEnetTestOperEntry, mscLpOamEnet=mscLpOamEnet, mscLpOamEnetExcessiveCollisions=mscLpOamEnetExcessiveCollisions, mscLpOamEnetAdminInfoEntry=mscLpOamEnetAdminInfoEntry, mscLpOamEnetTestRowStatusTable=mscLpOamEnetTestRowStatusTable, mscLpOamEnetStateEntry=mscLpOamEnetStateEntry, mscLpOamEnetStateTable=mscLpOamEnetStateTable, mscLpOamEnetProvTable=mscLpOamEnetProvTable, mscLpOamEnetRowStatusTable=mscLpOamEnetRowStatusTable, mscLpOamEnetSwitchoverOnFailure=mscLpOamEnetSwitchoverOnFailure, mscLpOamEnetRowStatusEntry=mscLpOamEnetRowStatusEntry, mscLpOamEnetIfAdminStatus=mscLpOamEnetIfAdminStatus, mscLpOamEnetVendor=mscLpOamEnetVendor, mscLpOamEnetExtendedStatistics=mscLpOamEnetExtendedStatistics, mscLpOamEnetMacReceiveErrors=mscLpOamEnetMacReceiveErrors, oamEthernetGroupCA02=oamEthernetGroupCA02, mscLpOamEnetCustomerIdentifier=mscLpOamEnetCustomerIdentifier, mscLpOamEnetStorageType=mscLpOamEnetStorageType, mscLpOamEnetFrameTooShort=mscLpOamEnetFrameTooShort, mscLpOamEnetOperationalState=mscLpOamEnetOperationalState, oamEthernetMIB=oamEthernetMIB, mscLpOamEnetOamEnetStatsTable=mscLpOamEnetOamEnetStatsTable, mscLpOamEnetActiveStatus=mscLpOamEnetActiveStatus, mscLpOamEnetTestComponentName=mscLpOamEnetTestComponentName, mscLpOamEnetTestOperTable=mscLpOamEnetTestOperTable, oamEthernetGroup=oamEthernetGroup, mscLpOamEnetTestRowStatusEntry=mscLpOamEnetTestRowStatusEntry, mscLpOamEnetLackOfResourcesDiscards=mscLpOamEnetLackOfResourcesDiscards, oamEthernetGroupCA02A=oamEthernetGroupCA02A, mscLpOamEnetOperTable=mscLpOamEnetOperTable, mscLpOamEnetTest=mscLpOamEnetTest, mscLpOamEnetFcsErrors=mscLpOamEnetFcsErrors, mscLpOamEnetOamEnetStatsEntry=mscLpOamEnetOamEnetStatsEntry, mscLpOamEnetMultipleCollisionFrames=mscLpOamEnetMultipleCollisionFrames, mscLpOamEnetTestTestResult=mscLpOamEnetTestTestResult, mscLpOamEnetStatsEntry=mscLpOamEnetStatsEntry, mscLpOamEnetIfEntryTable=mscLpOamEnetIfEntryTable, mscLpOamEnetComponentName=mscLpOamEnetComponentName, mscLpOamEnetUsageState=mscLpOamEnetUsageState, mscLpOamEnetIndex=mscLpOamEnetIndex, mscLpOamEnetOperEntry=mscLpOamEnetOperEntry, oamEthernetGroupCA=oamEthernetGroupCA, oamEthernetCapabilitiesCA02=oamEthernetCapabilitiesCA02, mscLpOamEnetProvEntry=mscLpOamEnetProvEntry, mscLpOamEnetMacTransmitErrors=mscLpOamEnetMacTransmitErrors, mscLpOamEnetSqeTestErrors=mscLpOamEnetSqeTestErrors, mscLpOamEnetClearToSendSignalLoss=mscLpOamEnetClearToSendSignalLoss, mscLpOamEnetOperStatusEntry=mscLpOamEnetOperStatusEntry, mscLpOamEnetOverrunErrors=mscLpOamEnetOverrunErrors, mscLpOamEnetTestResultsTable=mscLpOamEnetTestResultsTable, oamEthernetCapabilitiesCA02A=oamEthernetCapabilitiesCA02A, mscLpOamEnetTestRowStatus=mscLpOamEnetTestRowStatus, mscLpOamEnetStandbyStatus=mscLpOamEnetStandbyStatus, mscLpOamEnetSingleCollisionFrames=mscLpOamEnetSingleCollisionFrames, mscLpOamEnetOperStatusTable=mscLpOamEnetOperStatusTable, mscLpOamEnetCarrierSenseErrors=mscLpOamEnetCarrierSenseErrors, mscLpOamEnetAlignmentErrors=mscLpOamEnetAlignmentErrors, mscLpOamEnetCidDataTable=mscLpOamEnetCidDataTable, mscLpOamEnetCommentText=mscLpOamEnetCommentText)
