#
# PySNMP MIB module ALCATEL-IND1-LICENSE-MANAGER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-LICENSE-MANAGER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:18:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1LicenseManager, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1LicenseManager")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
snmpTraps, = mibBuilder.importSymbols("SNMPv2-MIB", "snmpTraps")
Gauge32, Counter32, IpAddress, iso, Counter64, ObjectIdentity, Unsigned32, NotificationType, MibIdentifier, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "IpAddress", "iso", "Counter64", "ObjectIdentity", "Unsigned32", "NotificationType", "MibIdentifier", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks")
RowStatus, TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "MacAddress", "DisplayString")
aluLicenseManagerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1))
aluLicenseManagerMIB.setRevisions(('2009-03-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: aluLicenseManagerMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: aluLicenseManagerMIB.setLastUpdated('200903230000Z')
if mibBuilder.loadTexts: aluLicenseManagerMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: aluLicenseManagerMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate version of this document is used with the products in question: Alcatel-Lucent, Enterprise Solutions Division (Formerly Alcatel Internetworking, Incorporated) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://alcatel-lucent.com/wps/portal/enterprise File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: aluLicenseManagerMIB.setDescription("This module describes an authoritative enterprise-specific Simple Network Management Protocol (SNMP) Management Information Base (MIB): License Manager for decrypting and validating license file associated with licensed applications running on products of Alcatel-Lucent's Enterprise Solutions Division. The right to make changes in specification and other information contained in this document without prior notice is reserved. No liability shall be assumed for any incidental, indirect, special, or consequential damages whatsoever arising from or related to this document or the information contained herein. Vendors, end-users, and other interested parties are granted non-exclusive license to use this specification in connection with management of the products for which it is intended to be used. Copyright (C) 1995-2007 Alcatel-Lucent ALL RIGHTS RESERVED WORLDWIDE")
aluLicenseManagerMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 0))
aluLicenseManagerMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 1))
if mibBuilder.loadTexts: aluLicenseManagerMIBObjects.setStatus('current')
if mibBuilder.loadTexts: aluLicenseManagerMIBObjects.setDescription('Branch for License Manager subsystem managed objects.')
aluLicenseManagerMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 2))
if mibBuilder.loadTexts: aluLicenseManagerMIBConformance.setStatus('current')
if mibBuilder.loadTexts: aluLicenseManagerMIBConformance.setDescription('Branch for License Manager subsystem conformance information.')
aluLicenseManagerMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 2, 1))
if mibBuilder.loadTexts: aluLicenseManagerMIBGroups.setStatus('current')
if mibBuilder.loadTexts: aluLicenseManagerMIBGroups.setDescription('Branch for License Manager subsystem units of conformance.')
aluLicenseManagerMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 2, 2))
if mibBuilder.loadTexts: aluLicenseManagerMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: aluLicenseManagerMIBCompliances.setDescription('Branch for License Manager subsystem compliance statements.')
aluLicenseManagerLicenseExpired = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 0, 0, 1)).setObjects(("ALCATEL-IND1-LICENSE-MANAGER-MIB", "aluLicensedApplication"), ("ALCATEL-IND1-LICENSE-MANAGER-MIB", "aluLicenseTimeRemaining"))
if mibBuilder.loadTexts: aluLicenseManagerLicenseExpired.setStatus('current')
if mibBuilder.loadTexts: aluLicenseManagerLicenseExpired.setDescription('A aluLicenseManagerLicenseExpired notification is sent when the value of aluLicenseTimeRemaining becomes 0 (zero) for a demo licensed application. The licensed application is part of aluLicensedApplication object. This notification is applicable only for temporary licenses. This trap can be utilized by an NMS to inform user about an application license expiry.')
aluLicenseManagerConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 1, 1))
aluLicenseManagerApplyLicense = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("apply", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aluLicenseManagerApplyLicense.setStatus('current')
if mibBuilder.loadTexts: aluLicenseManagerApplyLicense.setDescription('Object to apply license file to the device.')
aluLicenseManagerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 1, 2), )
if mibBuilder.loadTexts: aluLicenseManagerInfoTable.setStatus('current')
if mibBuilder.loadTexts: aluLicenseManagerInfoTable.setDescription('Table of valid application license information')
aluLicenseManagerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-LICENSE-MANAGER-MIB", "aluLicenseId"))
if mibBuilder.loadTexts: aluLicenseManagerInfoEntry.setStatus('current')
if mibBuilder.loadTexts: aluLicenseManagerInfoEntry.setDescription('Information of valid license applications')
aluLicenseId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: aluLicenseId.setStatus('current')
if mibBuilder.loadTexts: aluLicenseId.setDescription('Number identifying a licence. This number is automatically generated in the license generation process.')
aluLicensedApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluLicensedApplication.setStatus('current')
if mibBuilder.loadTexts: aluLicensedApplication.setDescription('String displaying the application for which this license is valid.')
aluLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("demo", 1), ("permanent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluLicenseType.setStatus('current')
if mibBuilder.loadTexts: aluLicenseType.setDescription('License of an application can be either Permamnent or Demo. The value of this indicated the type of this license.')
aluLicenseTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluLicenseTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: aluLicenseTimeRemaining.setDescription('Number of days remaining to evaluate this demo license. For permanent license this is not applicable.')
aluLicenseManagerFileInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 1, 3), )
if mibBuilder.loadTexts: aluLicenseManagerFileInfoTable.setStatus('current')
if mibBuilder.loadTexts: aluLicenseManagerFileInfoTable.setDescription('Table of license file information')
aluLicenseManagerFileInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-LICENSE-MANAGER-MIB", "aluLicenseFileIndex"))
if mibBuilder.loadTexts: aluLicenseManagerFileInfoEntry.setStatus('current')
if mibBuilder.loadTexts: aluLicenseManagerFileInfoEntry.setDescription('Information of licenses in the /flash/lmlicense.dat file.')
aluLicenseFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 1, 3, 1, 1), Counter32())
if mibBuilder.loadTexts: aluLicenseFileIndex.setStatus('current')
if mibBuilder.loadTexts: aluLicenseFileIndex.setDescription('Counter starting from 1 to keep track of entries in the /flash/lmlicense.dat file.')
aluSwitchMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 1, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluSwitchMacAddress.setStatus('current')
if mibBuilder.loadTexts: aluSwitchMacAddress.setDescription('Mac address of the switch for which this license is valid.')
aluLicensedFileApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluLicensedFileApplication.setStatus('current')
if mibBuilder.loadTexts: aluLicensedFileApplication.setDescription('String displaying the application for which this license is valid.')
aluLicenseManagerMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-LICENSE-MANAGER-MIB", "aluLicenseManagerConfigGroup"), ("ALCATEL-IND1-LICENSE-MANAGER-MIB", "aluLicenseManagerInfoGroup"), ("ALCATEL-IND1-LICENSE-MANAGER-MIB", "aluLicenseManagerFileInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aluLicenseManagerMIBCompliance = aluLicenseManagerMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: aluLicenseManagerMIBCompliance.setDescription('Compliance statement for License Manager.')
aluLicenseManagerConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-LICENSE-MANAGER-MIB", "aluLicenseManagerApplyLicense"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aluLicenseManagerConfigGroup = aluLicenseManagerConfigGroup.setStatus('current')
if mibBuilder.loadTexts: aluLicenseManagerConfigGroup.setDescription('Collection of objects for configuration of License Manager.')
aluLicenseManagerInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-LICENSE-MANAGER-MIB", "aluLicensedApplication"), ("ALCATEL-IND1-LICENSE-MANAGER-MIB", "aluLicenseType"), ("ALCATEL-IND1-LICENSE-MANAGER-MIB", "aluLicenseTimeRemaining"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aluLicenseManagerInfoGroup = aluLicenseManagerInfoGroup.setStatus('current')
if mibBuilder.loadTexts: aluLicenseManagerInfoGroup.setDescription('Collection of objects for information on licensed applications.')
aluLicenseManagerNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-LICENSE-MANAGER-MIB", "aluLicenseManagerLicenseExpired"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aluLicenseManagerNotificationsGroup = aluLicenseManagerNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: aluLicenseManagerNotificationsGroup.setDescription('A collection of notifications to signal License Manager events.')
aluLicenseManagerFileInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 54, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-LICENSE-MANAGER-MIB", "aluSwitchMacAddress"), ("ALCATEL-IND1-LICENSE-MANAGER-MIB", "aluLicensedFileApplication"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aluLicenseManagerFileInfoGroup = aluLicenseManagerFileInfoGroup.setStatus('current')
if mibBuilder.loadTexts: aluLicenseManagerFileInfoGroup.setDescription('Collection of objects for information on license file.')
mibBuilder.exportSymbols("ALCATEL-IND1-LICENSE-MANAGER-MIB", aluLicenseManagerMIBCompliance=aluLicenseManagerMIBCompliance, aluSwitchMacAddress=aluSwitchMacAddress, aluLicenseManagerLicenseExpired=aluLicenseManagerLicenseExpired, aluLicenseManagerConfig=aluLicenseManagerConfig, aluLicenseManagerConfigGroup=aluLicenseManagerConfigGroup, aluLicenseManagerMIB=aluLicenseManagerMIB, aluLicenseManagerMIBObjects=aluLicenseManagerMIBObjects, aluLicenseManagerInfoGroup=aluLicenseManagerInfoGroup, aluLicenseFileIndex=aluLicenseFileIndex, aluLicenseId=aluLicenseId, aluLicenseType=aluLicenseType, aluLicenseManagerInfoTable=aluLicenseManagerInfoTable, aluLicenseManagerMIBCompliances=aluLicenseManagerMIBCompliances, aluLicenseManagerMIBConformance=aluLicenseManagerMIBConformance, aluLicenseManagerInfoEntry=aluLicenseManagerInfoEntry, aluLicenseTimeRemaining=aluLicenseTimeRemaining, aluLicenseManagerApplyLicense=aluLicenseManagerApplyLicense, aluLicenseManagerFileInfoTable=aluLicenseManagerFileInfoTable, aluLicenseManagerNotificationsGroup=aluLicenseManagerNotificationsGroup, aluLicensedApplication=aluLicensedApplication, aluLicenseManagerMIBNotifications=aluLicenseManagerMIBNotifications, aluLicenseManagerMIBGroups=aluLicenseManagerMIBGroups, aluLicenseManagerFileInfoEntry=aluLicenseManagerFileInfoEntry, aluLicenseManagerFileInfoGroup=aluLicenseManagerFileInfoGroup, PYSNMP_MODULE_ID=aluLicenseManagerMIB, aluLicensedFileApplication=aluLicensedFileApplication)
