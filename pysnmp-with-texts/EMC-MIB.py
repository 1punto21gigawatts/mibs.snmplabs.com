#
# PySNMP MIB module EMC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EMC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:02:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter32, TimeTicks, NotificationType, Integer32, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, ObjectIdentity, IpAddress, Opaque, ModuleIdentity, experimental, NotificationType, enterprises, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "TimeTicks", "NotificationType", "Integer32", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "ObjectIdentity", "IpAddress", "Opaque", "ModuleIdentity", "experimental", "NotificationType", "enterprises", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class UInt32(Gauge32):
    pass

emc = MibIdentifier((1, 3, 6, 1, 4, 1, 1139))
emcSymmetrix = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1))
systemCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 2))
informational = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1))
systemInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 257))
systemCodes = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258))
diskAdapterDeviceConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 273))
deviceHostAddressConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281))
control = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 2, 2))
discovery = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 3))
agentAdministration = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 4))
analyzer = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1000))
analyzerFiles = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1000, 3))
clients = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1001))
trapSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1002))
activePorts = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1003))
agentConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1004))
subagentConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1005))
mainframeVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 5))
symAPI = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 6))
symAPIList = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1))
symList = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 1))
symRemoteList = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 2))
symDevList = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 3))
symPDevList = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 4))
symPDevNoDgList = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 5))
symDevNoDgList = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 6))
symDgList = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 7))
symLDevList = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 8))
symGateList = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 9))
symBcvDevList = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 10))
symBcvPDevList = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 11))
symAPIShow = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2))
symShow = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1))
symDevShow = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2))
symAPIStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3))
dirPortStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 10))
symmEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 1139, 1, 7))
emcControlCenter = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 1), )
if mibBuilder.loadTexts: emcControlCenter.setStatus('obsolete')
if mibBuilder.loadTexts: emcControlCenter.setDescription('A list of EMC Control Center specific variables entries. The number of entries is given by the value of discoveryTableSize.')
esmVariables = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"))
if mibBuilder.loadTexts: esmVariables.setStatus('obsolete')
if mibBuilder.loadTexts: esmVariables.setDescription('An entry containing objects for a particular Symmertrix.')
emcSymCnfg = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1, 1), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymCnfg.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymCnfg.setDescription('symmetrix.cnfg disk variable ')
emcSymDiskCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1, 2), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymDiskCfg.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymDiskCfg.setDescription('Symmetrix DISKS CONFIGURATION data')
emcSymMirrorDiskCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1, 3), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymMirrorDiskCfg.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymMirrorDiskCfg.setDescription('Symmetrix MIRRORED DISKS CONFIGURATION data')
emcSymMirror3DiskCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1, 4), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymMirror3DiskCfg.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymMirror3DiskCfg.setDescription('Symmetrix MIRRORED3 DISKS CONFIGURATION data')
emcSymMirror4DiskCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1, 5), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymMirror4DiskCfg.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymMirror4DiskCfg.setDescription('Symmetrix MIRRORED4 DISKS CONFIGURATION data')
emcSymStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1, 6), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymStatistics.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymStatistics.setDescription('Symmetrix STATISTICS data')
emcSymUtilA7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymUtilA7.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymUtilA7.setDescription("UTILITY A7 -- Show disks 'W PEND' tracks counts")
emcSymRdfMaint = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1, 8), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymRdfMaint.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymRdfMaint.setDescription('Symmetrix Remote Data Facility Maintenance')
emcSymWinConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1, 9), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymWinConfig.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymWinConfig.setDescription('EMC ICDA Manager CONFIGURATION data')
emcSymUtil99 = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymUtil99.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymUtil99.setDescription('Symmetrix error stats')
emcSymDir = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1, 11), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymDir.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymDir.setDescription('Symmetrix director information.')
emcSymDevStats = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1, 12), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymDevStats.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymDevStats.setDescription('Symmetrix error stats')
emcSymSumStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1, 13), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymSumStatus.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymSumStatus.setDescription('Symmetrix Summary Status. 0 = no errors 1 = warning 2+ = Fatal error ')
emcRatiosOutofRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcRatiosOutofRange.setStatus('obsolete')
if mibBuilder.loadTexts: emcRatiosOutofRange.setDescription('Symmetrix Write/Hit Ratio Status. A bit-wise integer value indicating hit or write ratio out of range. If (value & 1) then hit ratio out of specified range. If (value & 2) then write ratio out of specified range. ')
emcSymPortStats = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1, 15), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymPortStats.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymPortStats.setDescription('Symmetrix port statistics')
emcSymBCVDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1, 16), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymBCVDevice.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymBCVDevice.setDescription('Symmetrix BCV Device information')
emcSymSaitInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1, 17), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymSaitInfo.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymSaitInfo.setDescription('Symmetrix SCSI/Fiber channel information')
emcSymTimefinderInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1, 18), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymTimefinderInfo.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymTimefinderInfo.setDescription('Symmetrix Tinmefinder information')
emcSymSRDFInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1, 19), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymSRDFInfo.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymSRDFInfo.setDescription('Symmetrix RDF Device information')
emcSymPhysDevStats = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1, 20), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymPhysDevStats.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymPhysDevStats.setDescription('Symmetrix Physical Device Statistics')
emcSymSumStatusErrorCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 1, 1, 98), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymSumStatusErrorCodes.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymSumStatusErrorCodes.setDescription('A Colon-delimited list of error codes that caused the error in emcSymSumStatus ')
systemInfoHeaderTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 257, 1), )
if mibBuilder.loadTexts: systemInfoHeaderTable.setStatus('obsolete')
if mibBuilder.loadTexts: systemInfoHeaderTable.setDescription('A table of Symmetrix information contain is the results of Syscall 0x0101 for the specified Symmetrix instance. The number of entries is given by the value discIndex.')
systemInfoHeaderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 257, 1, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"))
if mibBuilder.loadTexts: systemInfoHeaderEntry.setStatus('obsolete')
if mibBuilder.loadTexts: systemInfoHeaderEntry.setDescription('An entry containing objects for the indicated systemInfoHeaderTable element.')
sysinfoBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 257, 1, 1, 1), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysinfoBuffer.setStatus('obsolete')
if mibBuilder.loadTexts: sysinfoBuffer.setDescription('The entire return buffer of system call 0x0101 for the indicated Symmetrix.')
sysinfoNumberofRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 257, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysinfoNumberofRecords.setStatus('obsolete')
if mibBuilder.loadTexts: sysinfoNumberofRecords.setDescription('The count of the number of records in the buffer returned by Syscall 0x0101.')
sysinfoRecordSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 257, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysinfoRecordSize.setStatus('obsolete')
if mibBuilder.loadTexts: sysinfoRecordSize.setDescription('This object is the size of one record in the buffer returned by Syscall 0x0101.')
sysinfoFirstRecordNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 257, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysinfoFirstRecordNumber.setStatus('obsolete')
if mibBuilder.loadTexts: sysinfoFirstRecordNumber.setDescription('This object is the first record number in the buffer returned by Syscall 0x0101.')
sysinfoMaxRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 257, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysinfoMaxRecords.setStatus('obsolete')
if mibBuilder.loadTexts: sysinfoMaxRecords.setDescription('This object is the maximum number of records available in this Symmetrix for Syscall 0x0101.')
sysinfoRecordsTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 257, 2), )
if mibBuilder.loadTexts: sysinfoRecordsTable.setStatus('obsolete')
if mibBuilder.loadTexts: sysinfoRecordsTable.setDescription('This table provides a method to access one device record within the buffer returned by Syscall 0x0101.')
sysinfoRecordsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 257, 2, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"))
if mibBuilder.loadTexts: sysinfoRecordsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: sysinfoRecordsEntry.setDescription('One entire record of system information for the indicated Symmetrix.')
sysinfoSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 257, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysinfoSerialNumber.setStatus('obsolete')
if mibBuilder.loadTexts: sysinfoSerialNumber.setDescription(' This object describes the serial number of indicated Symmetrix.')
sysinfoNumberofDirectors = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 257, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysinfoNumberofDirectors.setStatus('obsolete')
if mibBuilder.loadTexts: sysinfoNumberofDirectors.setDescription('The number of directors in this Symmetrix. ')
sysinfoNumberofVolumes = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 257, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysinfoNumberofVolumes.setStatus('obsolete')
if mibBuilder.loadTexts: sysinfoNumberofVolumes.setDescription(' This object describes the number of logical devices present on the system.')
sysinfoMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 257, 2, 1, 25), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysinfoMemorySize.setStatus('obsolete')
if mibBuilder.loadTexts: sysinfoMemorySize.setDescription('The amount of memory, in Megabytes, in the system. This is also the last memory address in the system ')
systemCodesTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 1), )
if mibBuilder.loadTexts: systemCodesTable.setStatus('obsolete')
if mibBuilder.loadTexts: systemCodesTable.setDescription('A table of Symmetrix information contain is the results of Syscall 0x0102 for the specified Symmetrix instance. The number of entries is given by the value discIndex.')
systemCodesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 1, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"))
if mibBuilder.loadTexts: systemCodesEntry.setStatus('obsolete')
if mibBuilder.loadTexts: systemCodesEntry.setDescription('An entry containing objects for the indicated systemCodesTable element.')
syscodesBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 1, 1, 1), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syscodesBuffer.setStatus('obsolete')
if mibBuilder.loadTexts: syscodesBuffer.setDescription('The entire return buffer of system call 0x0102. ')
syscodesNumberofRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syscodesNumberofRecords.setStatus('obsolete')
if mibBuilder.loadTexts: syscodesNumberofRecords.setDescription('The count of the number of records in the buffer returned by Syscall 0x0102.')
syscodesRecordSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syscodesRecordSize.setStatus('obsolete')
if mibBuilder.loadTexts: syscodesRecordSize.setDescription('This object is the size of one record in the buffer returned by Syscall 0x0102.')
syscodesFirstRecordNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syscodesFirstRecordNumber.setStatus('obsolete')
if mibBuilder.loadTexts: syscodesFirstRecordNumber.setDescription('This object is the first record number in the buffer returned by Syscall 0x0102.')
syscodesMaxRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syscodesMaxRecords.setStatus('obsolete')
if mibBuilder.loadTexts: syscodesMaxRecords.setDescription('This object is the maximum number of records available in this Symmetrix for Syscall 0x0102.')
systemCodesRecordsTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2), )
if mibBuilder.loadTexts: systemCodesRecordsTable.setStatus('obsolete')
if mibBuilder.loadTexts: systemCodesRecordsTable.setDescription('This table provides a method to access one director record within the buffer returned by Syscall 0x0102.')
systemCodesRecordsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "syscodesDirectorNum"))
if mibBuilder.loadTexts: systemCodesRecordsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: systemCodesRecordsEntry.setDescription('One entire record of system code information for the the indicated Symmetrix and director.')
syscodesDirectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("parallel-adapter", 1), ("escon-adapter", 2), ("scsi-adapter", 3), ("disk-adapter", 4), ("remote-adapter", 5), ("fiber-adapter", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syscodesDirectorType.setStatus('obsolete')
if mibBuilder.loadTexts: syscodesDirectorType.setDescription('The 1 byte director type identifier. 1 - Parallel Channel Adapter card 2 - ESCON Adapter card 3 - SCSI Adapter card 4 - Disk Adapter card 5 - RDF Adapter card 6 - Fiber Channel Adapter card ')
syscodesDirectorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syscodesDirectorNum.setStatus('obsolete')
if mibBuilder.loadTexts: syscodesDirectorNum.setDescription('The index to the table. The number of instances should be the number of Directors. The instance we are interested in at any point would be the Director number. NOTE: Director numbering may be zero based. If so, then an instance is Director number plus 1. ')
emulCodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emulCodeType.setStatus('obsolete')
if mibBuilder.loadTexts: emulCodeType.setDescription("The 4 byte code type of the director. Value is 'EMUL' ")
emulVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emulVersion.setStatus('obsolete')
if mibBuilder.loadTexts: emulVersion.setDescription("The 4 byte version of the director's code. ")
emulDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 7), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emulDate.setStatus('obsolete')
if mibBuilder.loadTexts: emulDate.setDescription("The 4 byte version date for the director's code. ")
emulChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emulChecksum.setStatus('obsolete')
if mibBuilder.loadTexts: emulChecksum.setDescription("The 4 byte checksum for the director's code. ")
emulMTPF = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emulMTPF.setStatus('obsolete')
if mibBuilder.loadTexts: emulMTPF.setDescription("The 4 byte MTPF of the director's code. ")
emulFileCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emulFileCount.setStatus('obsolete')
if mibBuilder.loadTexts: emulFileCount.setDescription("The 4 byte file length of the director's code. ")
implCodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: implCodeType.setStatus('obsolete')
if mibBuilder.loadTexts: implCodeType.setDescription("The 4 byte code type of the director. Value is 'IMPL' ")
implVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: implVersion.setStatus('obsolete')
if mibBuilder.loadTexts: implVersion.setDescription("The 4 byte version of the director's code. ")
implDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 13), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: implDate.setStatus('obsolete')
if mibBuilder.loadTexts: implDate.setDescription("The 4 byte version date for the director's code. ")
implChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: implChecksum.setStatus('obsolete')
if mibBuilder.loadTexts: implChecksum.setDescription("The 4 byte checksum for the director's code. ")
implMTPF = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: implMTPF.setStatus('obsolete')
if mibBuilder.loadTexts: implMTPF.setDescription("The 4 byte MTPF of the director's code. ")
implFileCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: implFileCount.setStatus('obsolete')
if mibBuilder.loadTexts: implFileCount.setDescription("The 4 byte file length of the director's code. ")
initCodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initCodeType.setStatus('obsolete')
if mibBuilder.loadTexts: initCodeType.setDescription("The 4 byte code type of the director. Value is 'INIT' ")
initVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: initVersion.setStatus('obsolete')
if mibBuilder.loadTexts: initVersion.setDescription("The 4 byte version of the director's code. ")
initDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 19), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: initDate.setStatus('obsolete')
if mibBuilder.loadTexts: initDate.setDescription("The 4 byte version date for the director's code. ")
initChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: initChecksum.setStatus('obsolete')
if mibBuilder.loadTexts: initChecksum.setDescription("The 4 byte checksum for the director's code. ")
initMTPF = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: initMTPF.setStatus('obsolete')
if mibBuilder.loadTexts: initMTPF.setDescription("The 4 byte MTPF of the director's code. ")
initFileCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: initFileCount.setStatus('obsolete')
if mibBuilder.loadTexts: initFileCount.setDescription("The 4 byte file length of the director's code. ")
escnCodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: escnCodeType.setStatus('obsolete')
if mibBuilder.loadTexts: escnCodeType.setDescription("The 4 byte code type of the director. Value is 'ESCN' ")
escnVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: escnVersion.setStatus('obsolete')
if mibBuilder.loadTexts: escnVersion.setDescription("The 4 byte version of the director's code. ")
escnDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 25), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: escnDate.setStatus('obsolete')
if mibBuilder.loadTexts: escnDate.setDescription("The 4 byte version date for the director's code. ")
escnChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: escnChecksum.setStatus('obsolete')
if mibBuilder.loadTexts: escnChecksum.setDescription("The 4 byte checksum for the director's code. ")
escnMTPF = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: escnMTPF.setStatus('obsolete')
if mibBuilder.loadTexts: escnMTPF.setDescription("The 4 byte MTPF of the director's code. ")
escnFileCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 258, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: escnFileCount.setStatus('obsolete')
if mibBuilder.loadTexts: escnFileCount.setDescription("The 4 byte file length of the director's code. ")
diskAdapterDeviceConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 273, 1), )
if mibBuilder.loadTexts: diskAdapterDeviceConfigurationTable.setStatus('obsolete')
if mibBuilder.loadTexts: diskAdapterDeviceConfigurationTable.setDescription('A table of Symmetrix information contain is the results of Syscall 0x0111 for the specified Symmetrix instance. The number of entries is given by the value discIndex.')
diskAdapterDeviceConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 273, 1, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"))
if mibBuilder.loadTexts: diskAdapterDeviceConfigurationEntry.setStatus('obsolete')
if mibBuilder.loadTexts: diskAdapterDeviceConfigurationEntry.setDescription('An entry containing objects for the indicated diskAdapterDeviceConfigurationTable element.')
dadcnfigBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 273, 1, 1, 1), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dadcnfigBuffer.setStatus('obsolete')
if mibBuilder.loadTexts: dadcnfigBuffer.setDescription('The entire return buffer of system call 0x0111. ')
dadcnfigNumberofRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 273, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dadcnfigNumberofRecords.setStatus('obsolete')
if mibBuilder.loadTexts: dadcnfigNumberofRecords.setDescription('The count of the number of records in the buffer returned by Syscall 0x0111.')
dadcnfigRecordSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 273, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dadcnfigRecordSize.setStatus('obsolete')
if mibBuilder.loadTexts: dadcnfigRecordSize.setDescription('This object is the size of one record in the buffer returned by Syscall 0x0111.')
dadcnfigFirstRecordNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 273, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dadcnfigFirstRecordNumber.setStatus('obsolete')
if mibBuilder.loadTexts: dadcnfigFirstRecordNumber.setDescription('This object is the first record number in the buffer returned by Syscall 0x0111.')
dadcnfigMaxRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 273, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dadcnfigMaxRecords.setStatus('obsolete')
if mibBuilder.loadTexts: dadcnfigMaxRecords.setDescription('This object is the maximum number of records available in this Symmetrix for Syscall 0x0111.')
dadcnfigDeviceRecordsTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 273, 2), )
if mibBuilder.loadTexts: dadcnfigDeviceRecordsTable.setStatus('obsolete')
if mibBuilder.loadTexts: dadcnfigDeviceRecordsTable.setDescription('This table provides a method to access one device record within the buffer returned by Syscall 0x0111.')
dadcnfigDeviceRecordsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 273, 2, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "dadcnfigSymmNumber"))
if mibBuilder.loadTexts: dadcnfigDeviceRecordsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: dadcnfigDeviceRecordsEntry.setDescription('One entire record of disk adapter device configuration information for the indicated Symmetrix.')
dadcnfigSymmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 273, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dadcnfigSymmNumber.setStatus('obsolete')
if mibBuilder.loadTexts: dadcnfigSymmNumber.setDescription('The 2 byte Symmetrix number of the device. ')
dadcnfigMirrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 273, 2, 1, 8), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dadcnfigMirrors.setStatus('obsolete')
if mibBuilder.loadTexts: dadcnfigMirrors.setDescription("an 8 byte buffer, 4 mirrors * 2 bytes per, indicating director and port assignments for this device's mirrors. Buffer format is: mir 1 mir 2 mir 3 mir 4 *----+----*----+----*----+----*----+----+ |DIR |i/f |DIR |i/f |DIR |i/f |DIR |i/f | | # | | # | | # | | # | | *----+----*----+----*----+----*----+----+ ")
dadcnfigMirror1Director = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 273, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dadcnfigMirror1Director.setStatus('obsolete')
if mibBuilder.loadTexts: dadcnfigMirror1Director.setDescription("The director number of this device's Mirror 1 device. ")
dadcnfigMirror1Interface = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 273, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dadcnfigMirror1Interface.setStatus('obsolete')
if mibBuilder.loadTexts: dadcnfigMirror1Interface.setDescription("The interface number of this device's Mirror 1 device. ")
dadcnfigMirror2Director = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 273, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dadcnfigMirror2Director.setStatus('obsolete')
if mibBuilder.loadTexts: dadcnfigMirror2Director.setDescription("The director number of this device's Mirror 2 device. ")
dadcnfigMirror2Interface = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 273, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dadcnfigMirror2Interface.setStatus('obsolete')
if mibBuilder.loadTexts: dadcnfigMirror2Interface.setDescription("The interface number of this device's Mirror 2 device. ")
dadcnfigMirror3Director = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 273, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dadcnfigMirror3Director.setStatus('obsolete')
if mibBuilder.loadTexts: dadcnfigMirror3Director.setDescription("The director number of this device's Mirror 3 device. ")
dadcnfigMirror3Interface = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 273, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dadcnfigMirror3Interface.setStatus('obsolete')
if mibBuilder.loadTexts: dadcnfigMirror3Interface.setDescription("The interface number of this device's Mirror 3 device. ")
dadcnfigMirror4Director = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 273, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dadcnfigMirror4Director.setStatus('obsolete')
if mibBuilder.loadTexts: dadcnfigMirror4Director.setDescription("The director number of this device's Mirror 4 device. ")
dadcnfigMirror4Interface = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 273, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dadcnfigMirror4Interface.setStatus('obsolete')
if mibBuilder.loadTexts: dadcnfigMirror4Interface.setDescription("The interface number of this device's Mirror 4 device. ")
deviceHostAddressConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281, 1), )
if mibBuilder.loadTexts: deviceHostAddressConfigurationTable.setStatus('obsolete')
if mibBuilder.loadTexts: deviceHostAddressConfigurationTable.setDescription('A table of Symmetrix information contain is the results of Syscall 0x0119 for the specified Symmetrix instance. The number of entries is given by the value discIndex.')
deviceHostAddressConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281, 1, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"))
if mibBuilder.loadTexts: deviceHostAddressConfigurationEntry.setStatus('obsolete')
if mibBuilder.loadTexts: deviceHostAddressConfigurationEntry.setDescription('An entry containing objects for the indicated deviceHostAddressConfigurationTable element.')
dvhoaddrBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281, 1, 1, 1), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvhoaddrBuffer.setStatus('obsolete')
if mibBuilder.loadTexts: dvhoaddrBuffer.setDescription('The entire return buffer of system call 0x0119. ')
dvhoaddrNumberofRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvhoaddrNumberofRecords.setStatus('obsolete')
if mibBuilder.loadTexts: dvhoaddrNumberofRecords.setDescription('The count of the number of records in the buffer returned by Syscall 0x0119.')
dvhoaddrRecordSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvhoaddrRecordSize.setStatus('obsolete')
if mibBuilder.loadTexts: dvhoaddrRecordSize.setDescription('This object is the size of one record in the buffer returned by Syscall 0x0119.')
dvhoaddrFirstRecordNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvhoaddrFirstRecordNumber.setStatus('obsolete')
if mibBuilder.loadTexts: dvhoaddrFirstRecordNumber.setDescription('This object is the first record number in the buffer returned by Syscall 0x0119.')
dvhoaddrMaxRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvhoaddrMaxRecords.setStatus('obsolete')
if mibBuilder.loadTexts: dvhoaddrMaxRecords.setDescription('This object is the maximum number of records available in this Symmetrix for Syscall 0x0119.')
dvhoaddrDeviceRecordsTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281, 2), )
if mibBuilder.loadTexts: dvhoaddrDeviceRecordsTable.setStatus('obsolete')
if mibBuilder.loadTexts: dvhoaddrDeviceRecordsTable.setDescription('This table provides a method to access one device record record within the buffer returned by Syscall 0x0119.')
dvhoaddrDeviceRecordsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281, 2, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "dvhoaddrSymmNumber"))
if mibBuilder.loadTexts: dvhoaddrDeviceRecordsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: dvhoaddrDeviceRecordsEntry.setDescription('One entire record of device host address information for the indicated Symmetrix.')
dvhoaddrSymmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvhoaddrSymmNumber.setStatus('obsolete')
if mibBuilder.loadTexts: dvhoaddrSymmNumber.setDescription('The 2 byte Symmetrix number of the device. ')
dvhoaddrDirectorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvhoaddrDirectorNumber.setStatus('obsolete')
if mibBuilder.loadTexts: dvhoaddrDirectorNumber.setDescription('The 2 byte Symmetrix number of the director. ')
dvhoaddrPortAType = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6))).clone(namedValues=NamedValues(("parallel-ca", 1), ("escon-ca", 2), ("sa", 3), ("fibre", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvhoaddrPortAType.setStatus('obsolete')
if mibBuilder.loadTexts: dvhoaddrPortAType.setDescription('The type of port for Port A. 01 - Parallel CA 02 - ESCON CA 03 - SA 04 - Fiber Channel')
dvhoaddrPortADeviceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281, 2, 1, 4), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvhoaddrPortADeviceAddress.setStatus('obsolete')
if mibBuilder.loadTexts: dvhoaddrPortADeviceAddress.setDescription('The 1 byte port address for this device on this port.')
dvhoaddrPortBType = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6))).clone(namedValues=NamedValues(("parallel-ca", 1), ("escon-ca", 2), ("sa", 3), ("fibre", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvhoaddrPortBType.setStatus('obsolete')
if mibBuilder.loadTexts: dvhoaddrPortBType.setDescription('The type of port for Port A. 01 - Parallel CA 02 - ESCON CA 03 - SA 04 - Fiber Channel')
dvhoaddrPortBDeviceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281, 2, 1, 6), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvhoaddrPortBDeviceAddress.setStatus('obsolete')
if mibBuilder.loadTexts: dvhoaddrPortBDeviceAddress.setDescription('The 1 byte port address for this device on this port.')
dvhoaddrPortCType = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6))).clone(namedValues=NamedValues(("parallel-ca", 1), ("escon-ca", 2), ("sa", 3), ("fibre", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvhoaddrPortCType.setStatus('obsolete')
if mibBuilder.loadTexts: dvhoaddrPortCType.setDescription('The type of port for Port A. 01 - Parallel CA 02 - ESCON CA 03 - SA 04 - Fiber Channel')
dvhoaddrPortCDeviceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281, 2, 1, 8), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvhoaddrPortCDeviceAddress.setStatus('obsolete')
if mibBuilder.loadTexts: dvhoaddrPortCDeviceAddress.setDescription('The 1 byte port address for this device on this port.')
dvhoaddrPortDType = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6))).clone(namedValues=NamedValues(("parallel-ca", 1), ("escon-ca", 2), ("sa", 3), ("fibre", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvhoaddrPortDType.setStatus('obsolete')
if mibBuilder.loadTexts: dvhoaddrPortDType.setDescription('The type of port for Port A. 01 - Parallel CA 02 - ESCON CA 03 - SA 04 - Fiber Channel')
dvhoaddrPortDDeviceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281, 2, 1, 10), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvhoaddrPortDDeviceAddress.setStatus('obsolete')
if mibBuilder.loadTexts: dvhoaddrPortDDeviceAddress.setDescription('The 1 byte port address for this device on this port.')
dvhoaddrMetaFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281, 2, 1, 11), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvhoaddrMetaFlags.setStatus('obsolete')
if mibBuilder.loadTexts: dvhoaddrMetaFlags.setDescription('The 1 byte Meta Flags if this record is an SA record.')
dvhoaddrFiberChannelAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 2, 1, 281, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvhoaddrFiberChannelAddress.setStatus('obsolete')
if mibBuilder.loadTexts: dvhoaddrFiberChannelAddress.setDescription('The 2 byte address if this record is a Fiber Channel record. There is only 1 port defined.')
discoveryTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: discoveryTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: discoveryTableSize.setDescription('The number of Symmetrixes that are, or have been present on this system.')
discoveryTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 3, 2), )
if mibBuilder.loadTexts: discoveryTable.setStatus('mandatory')
if mibBuilder.loadTexts: discoveryTable.setDescription('A list of Symmetrixes. The number of entries is given by the value of discoveryTableSize.')
discoveryTbl = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 3, 2, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"))
if mibBuilder.loadTexts: discoveryTbl.setStatus('mandatory')
if mibBuilder.loadTexts: discoveryTbl.setDescription('An interface entry containing objects for a particular Symmetrix.')
discIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: discIndex.setStatus('mandatory')
if mibBuilder.loadTexts: discIndex.setDescription("A unique value for each Symmetrix. Its value ranges between 1 and the value of discoveryTableSize. The value for each Symmetrix must remain constant from one agent re-initialization to the next re-initialization, or until the agent's discovery list is reset.")
discSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: discSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: discSerialNumber.setDescription('The serial number of this attached Symmetrix')
discRawDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: discRawDevice.setStatus('obsolete')
if mibBuilder.loadTexts: discRawDevice.setDescription("The 'gatekeeper' device the agent uses to extract information from this Symmetrix, via the SCSI connection")
discModel = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: discModel.setStatus('mandatory')
if mibBuilder.loadTexts: discModel.setDescription('This Symmetrix Model number')
discCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: discCapacity.setStatus('obsolete')
if mibBuilder.loadTexts: discCapacity.setDescription("The size, in bytes of the 'gatekeeper' device for this Symmetrix This object is obsolete in Mib Version 2.0. Agent revisions of 4.0 or greater will return a zero as a value.")
discChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: discChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: discChecksum.setDescription('The checksum value of the IMPL for this Symmetrix.')
discConfigDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 3, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: discConfigDate.setStatus('mandatory')
if mibBuilder.loadTexts: discConfigDate.setDescription('The date of the last configuration change. Format = MMDDYYYY ')
discRDF = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: discRDF.setStatus('mandatory')
if mibBuilder.loadTexts: discRDF.setDescription('Indicates if RDF is available for this Symmetrix')
discBCV = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: discBCV.setStatus('mandatory')
if mibBuilder.loadTexts: discBCV.setDescription('Indicates if BCV Devices are configured in this Symmetrix')
discState = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("online", 2), ("offline", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: discState.setStatus('mandatory')
if mibBuilder.loadTexts: discState.setDescription('Indicates the online/offline state of this Symmetrix')
discStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("unused", 2), ("ok", 3), ("warning", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: discStatus.setStatus('mandatory')
if mibBuilder.loadTexts: discStatus.setDescription('Indicates the overall status of this Symmetrix')
discMicrocodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 3, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: discMicrocodeVersion.setStatus('mandatory')
if mibBuilder.loadTexts: discMicrocodeVersion.setDescription('The microcode version running in this Symmetrix')
discSymapisrv_IP = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 3, 2, 1, 13), IpAddress()).setLabel("discSymapisrv-IP").setMaxAccess("readonly")
if mibBuilder.loadTexts: discSymapisrv_IP.setStatus('mandatory')
if mibBuilder.loadTexts: discSymapisrv_IP.setDescription("The IP address of the symapi server from where this Symmetrix's data is sourced. ")
discNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: discNumEvents.setStatus('mandatory')
if mibBuilder.loadTexts: discNumEvents.setDescription('Number of events currently in the symmEventTable.')
discEventCurrID = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: discEventCurrID.setStatus('mandatory')
if mibBuilder.loadTexts: discEventCurrID.setDescription('The last used event id (symmEventId).')
agentRevision = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRevision.setStatus('mandatory')
if mibBuilder.loadTexts: agentRevision.setDescription('The current revision of the agent software ')
mibRevision = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibRevision.setStatus('mandatory')
if mibBuilder.loadTexts: mibRevision.setDescription('Mib Revision 4.1')
agentType = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("unix-host", 1), ("mainframe", 2), ("nt-host", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentType.setStatus('mandatory')
if mibBuilder.loadTexts: agentType.setDescription('Integer value indicating the agent host environment, so polling applications can adjust accordingly')
periodicDiscoveryFrequency = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: periodicDiscoveryFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: periodicDiscoveryFrequency.setDescription("Indicates how often the Discovery thread should rebuild the table of attached Symmetrixes, adding new ones, and removing old ones. Any changes between the new table and the previous table will generate a trap (Trap 4) to all registered trap clients. Initialize at startup from a separate 'config' file. Recommended default is 3600 seconds (1 hour). A value less than 60 will disable the thread. Minimum frequency is 60 seconds.")
checksumTestFrequency = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: checksumTestFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: checksumTestFrequency.setDescription("Indicates how often the Checksum thread should test for any changes between the current and previous checksum value for all discovered Symmetrixes. For each checksum change, a trap will be generated (Trap 5) to all registered trap clients. Initialize at startup from a separate 'config' file. Recommended default is 60 seconds (1 minute). A value less than 60 will disable the thread. Minimum frequency is 60 seconds.")
statusCheckFrequency = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statusCheckFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: statusCheckFrequency.setDescription("Indicates how often the Status thread should gather all status and error data from all discovered Symmetrixes. For each director or device error condition, a trap will be generated (Trap 1 or 2) to all registered trap clients. Initialize at startup from a separate 'config' file. Recommended default is 60 seconds (1 minute). A value less than 60 will disable the thread. Minimum frequency is 60 seconds.")
discoveryChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 4, 302), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: discoveryChangeTime.setStatus('mandatory')
if mibBuilder.loadTexts: discoveryChangeTime.setDescription("Indicates the last time the discovery table was last change by the agent. The value is in seconds, as returned by the standard 'C' function time(). ")
clientListMaintenanceFrequency = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1001, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientListMaintenanceFrequency.setStatus('obsolete')
if mibBuilder.loadTexts: clientListMaintenanceFrequency.setDescription("Indicates how often the Client List maintenance thread should 'wake up' to remove old requests and clients from the list Initialize at startup from a separate 'config' file. Recommended default is 15 minutes (1800 seconds).")
clientListRequestExpiration = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1001, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientListRequestExpiration.setStatus('obsolete')
if mibBuilder.loadTexts: clientListRequestExpiration.setDescription("Indicates how old a client request should be to consider removing it from the Client List. It's assumed that a time out condition occurred at the client, and the data is no longer of any value, and deleted. Initialize at startup from a separate 'config' file. Recommended default is 15 minutes (900 seconds).")
clientListClientExpiration = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1001, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientListClientExpiration.setStatus('obsolete')
if mibBuilder.loadTexts: clientListClientExpiration.setDescription("Indicates how long a client can remain in the Client List without make a request to the agent, after which point it is deleted from the list. Clients are added to the list by making a request to the agent. Initialize at startup from a separate 'config' file. Recommended default is 30 minutes (1800 seconds).")
discoveryTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1002, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: discoveryTrapPort.setStatus('obsolete')
if mibBuilder.loadTexts: discoveryTrapPort.setDescription("Each client can set it's own port for receiving rediscovery traps in the event the client cannot listen on port 162. The agent will send any discovery table notifications to port 162, and, if set (i.e. >0), the clients designated port. ")
trapTestFrequency = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1002, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapTestFrequency.setStatus('obsolete')
if mibBuilder.loadTexts: trapTestFrequency.setDescription("Indicates how often the Trap Test thread should 'wake up' to test for trap conditions in each attached Symmetrix. Initialize at startup from a separate 'config' file. Recommended default is 60 seconds.")
standardSNMPRequestPort = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1003, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: standardSNMPRequestPort.setStatus('mandatory')
if mibBuilder.loadTexts: standardSNMPRequestPort.setDescription('Indicates if the agent was able to bind to the standard SNMP request port, port 161. Value of -1 indicates another SNMP agent was already active on this host.')
esmSNMPRequestPort = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1003, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmSNMPRequestPort.setStatus('mandatory')
if mibBuilder.loadTexts: esmSNMPRequestPort.setDescription("Indicates what port the agent was able to bind to receive SNMP requests for ESM data. This port can also be browsed for all available MIB objects in the event the standard SNMP port is unavailable, or the standard EMC.MIB is not loaded into the host's SNMP agent.")
celerraTCPPort = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1003, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: celerraTCPPort.setStatus('obsolete')
if mibBuilder.loadTexts: celerraTCPPort.setDescription('Indicates what port the agent was able to bind to receive TCP requests for ESM data from a Celerra Monitor. Requests made to this port must conform to the internal proprietary protocol established between a Celerra Monitor and the agent')
xdrTCPPort = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1003, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdrTCPPort.setStatus('obsolete')
if mibBuilder.loadTexts: xdrTCPPort.setDescription('Indicates what port the agent was able to bind to receive TCP requests for ESM data. Requests made to this port must be XDR encoded and conform to the command set established in the agent')
esmVariablePacketSize = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1004, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmVariablePacketSize.setStatus('obsolete')
if mibBuilder.loadTexts: esmVariablePacketSize.setDescription("Agent's Maximum SNMP Packet Size for ESM Opaque variables. Each client can set it's own preferred size with the agent's internal client list. Default size: 2000 bytes ")
discoveryFrequency = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1004, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: discoveryFrequency.setStatus('obsolete')
if mibBuilder.loadTexts: discoveryFrequency.setDescription("Indicates how often the Discovery thread should 'wake up' to rebuild the table of attached Symmetrixes, adding new ones, and removing old ones. Any changes between the new table and the previous table will generate a trap to all clients that had previously retrieved the discovery table. Those clients will be prevented from retrieving any data from the agent until they retrieve the new discovery table. Initialize at startup from a separate 'config' file. Recommended default is 600 seconds (10 minutes).")
masterTraceMessagesEnable = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1004, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: masterTraceMessagesEnable.setStatus('obsolete')
if mibBuilder.loadTexts: masterTraceMessagesEnable.setDescription('Turns trace messages on or off to the console. 0 = OFF 1 = ON')
analyzerTopFileSavePolicy = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1000, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analyzerTopFileSavePolicy.setStatus('obsolete')
if mibBuilder.loadTexts: analyzerTopFileSavePolicy.setDescription("Indicates how long a *.top file can remain on disk before being deleted. Value is in days. Initialize at startup from a separate 'config' file. Recommended default is 7 days.")
analyzerSpecialDurationLimit = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1000, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analyzerSpecialDurationLimit.setStatus('obsolete')
if mibBuilder.loadTexts: analyzerSpecialDurationLimit.setDescription("This is a cap applied to 'special' analyzer collection requests that have a duration that exceeds this amount. Value is in hours. Initialize at startup from a separate 'config' file. Recommended default is 24 hours.")
analyzerFilesCountTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1000, 3, 1), )
if mibBuilder.loadTexts: analyzerFilesCountTable.setStatus('obsolete')
if mibBuilder.loadTexts: analyzerFilesCountTable.setDescription('A list of the number of analyzer file present for the given Symmetrix instance.')
analyzerFileCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1000, 3, 1, 1), ).setIndexNames((0, "EMC-MIB", "symListCount"))
if mibBuilder.loadTexts: analyzerFileCountEntry.setStatus('obsolete')
if mibBuilder.loadTexts: analyzerFileCountEntry.setDescription('A file count entry containing objects for the specified Symmetrix')
analyzerFileCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1000, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analyzerFileCount.setStatus('obsolete')
if mibBuilder.loadTexts: analyzerFileCount.setDescription('The number of entries in the AnaylzerFileList table for the indicated Symmetrix instance')
analyzerFilesListTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1000, 3, 2), )
if mibBuilder.loadTexts: analyzerFilesListTable.setStatus('obsolete')
if mibBuilder.loadTexts: analyzerFilesListTable.setDescription('A list of the number of analyzer file present for the given Symmetrix instance. The number of entries is given by the value of analyzerFileCount.')
analyzerFilesListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1000, 3, 2, 1), ).setIndexNames((0, "EMC-MIB", "symListCount"), (0, "EMC-MIB", "analyzerFileCount"))
if mibBuilder.loadTexts: analyzerFilesListEntry.setStatus('obsolete')
if mibBuilder.loadTexts: analyzerFilesListEntry.setDescription('A file list entry containing objects for the specified Symmetrix')
analyzerFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1000, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analyzerFileName.setStatus('obsolete')
if mibBuilder.loadTexts: analyzerFileName.setDescription('The analyzer file name for the indicated instance')
analyzerFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1000, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analyzerFileSize.setStatus('obsolete')
if mibBuilder.loadTexts: analyzerFileSize.setDescription('The analyzer file size for the indicated instances, in bytes')
analyzerFileCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1000, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analyzerFileCreation.setStatus('obsolete')
if mibBuilder.loadTexts: analyzerFileCreation.setDescription('The analyzer file creation time for the indicated instance')
analyzerFileLastModified = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1000, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analyzerFileLastModified.setStatus('obsolete')
if mibBuilder.loadTexts: analyzerFileLastModified.setDescription('The analyzer file last modified time for the indicated instance')
analyzerFileIsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1000, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: analyzerFileIsActive.setStatus('obsolete')
if mibBuilder.loadTexts: analyzerFileIsActive.setDescription('Indicates if the analyzer collector is collection and storing Symmetrix information into this file.')
analyzerFileRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1000, 3, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analyzerFileRuntime.setStatus('obsolete')
if mibBuilder.loadTexts: analyzerFileRuntime.setDescription('The length of time this file has run, or has been running for.')
subagentInformation = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1005, 1), )
if mibBuilder.loadTexts: subagentInformation.setStatus('obsolete')
if mibBuilder.loadTexts: subagentInformation.setDescription(' A list of subagent entries operational on the host. The number of entries is given by the value of discoveryTableSize.')
subagentInfo = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1005, 1, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"))
if mibBuilder.loadTexts: subagentInfo.setStatus('obsolete')
if mibBuilder.loadTexts: subagentInfo.setDescription('An entry containing objects for a particular Symmetrix subagent.')
subagentSymmetrixSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1005, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subagentSymmetrixSerialNumber.setStatus('obsolete')
if mibBuilder.loadTexts: subagentSymmetrixSerialNumber.setDescription('The serial number of this attached Symmetrix')
subagentProcessActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1005, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subagentProcessActive.setStatus('obsolete')
if mibBuilder.loadTexts: subagentProcessActive.setDescription('The subagent process is running for this symmetrix. 0 = False 1 = True')
subagentTraceMessagesEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 4, 1005, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subagentTraceMessagesEnable.setStatus('obsolete')
if mibBuilder.loadTexts: subagentTraceMessagesEnable.setDescription('Turns trace messages on or off to the console. 0 = OFF 1 = ON')
mainframeDiskInformation = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 5, 1), )
if mibBuilder.loadTexts: mainframeDiskInformation.setStatus('obsolete')
if mibBuilder.loadTexts: mainframeDiskInformation.setDescription('This table of mainframe specific disk variables for each attached Symmetrix. The number of entries is given by the value of discoveryTableSize.')
mfDiskInformation = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 5, 1, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"))
if mibBuilder.loadTexts: mfDiskInformation.setStatus('obsolete')
if mibBuilder.loadTexts: mfDiskInformation.setDescription('An mainframe disk information entry containing objects for a particular Symmetrix.')
emcSymMvsVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 5, 1, 1, 1), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymMvsVolume.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymMvsVolume.setDescription('Specific mainframe information for each disk of this attached Symmetrix. Supported ONLY in agents running in an MVS environment. ')
mainframeDataSetInformation = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 5, 2), )
if mibBuilder.loadTexts: mainframeDataSetInformation.setStatus('obsolete')
if mibBuilder.loadTexts: mainframeDataSetInformation.setDescription('This table of mainframe specific data set for each attached Symmetrix. The number of entries is given by the value of discoveryTableSize.')
mfDataSetInformation = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 5, 2, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "emcSymMvsLUNNumber"))
if mibBuilder.loadTexts: mfDataSetInformation.setStatus('obsolete')
if mibBuilder.loadTexts: mfDataSetInformation.setDescription('An mainframe data set entry containing objects for a particular Symmetrix.')
emcSymMvsLUNNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymMvsLUNNumber.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymMvsLUNNumber.setDescription('The LUN number for this data set ')
emcSymMvsDsname = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 5, 2, 1, 2), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emcSymMvsDsname.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymMvsDsname.setDescription('Specific mainframe information for each LUN of this attached Symmetrix. Supported ONLY in agents running in an MVS environment. ')
emcSymMvsBuildStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emcSymMvsBuildStatus.setStatus('obsolete')
if mibBuilder.loadTexts: emcSymMvsBuildStatus.setDescription('Polled value to indicate the state of the data set list. 0 = data set unavailable 1 = build process initiated 2 = build in progress 3 = data set available ')
symListCount = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symListCount.setStatus('obsolete')
if mibBuilder.loadTexts: symListCount.setDescription('The number of entries in symListTable, representing the number of Symmetrixes present on this system.')
symListTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 1, 2), )
if mibBuilder.loadTexts: symListTable.setStatus('obsolete')
if mibBuilder.loadTexts: symListTable.setDescription('A list of attached Symmetrix serial numbers. The number of entries is given by the value of symListCount.')
symListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 1, 2, 1), ).setIndexNames((0, "EMC-MIB", "symListCount"))
if mibBuilder.loadTexts: symListEntry.setStatus('obsolete')
if mibBuilder.loadTexts: symListEntry.setDescription('An entry containing objects for the indicated symListTable element.')
serialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('obsolete')
if mibBuilder.loadTexts: serialNumber.setDescription('The Symmetrix serial number for the indicated instance')
symRemoteListCount = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symRemoteListCount.setStatus('obsolete')
if mibBuilder.loadTexts: symRemoteListCount.setDescription('The number of entries in symRemoteListTable, representing the number of remote Symmetrixes present on this system.')
symRemoteListTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 2, 2), )
if mibBuilder.loadTexts: symRemoteListTable.setStatus('obsolete')
if mibBuilder.loadTexts: symRemoteListTable.setDescription('A list of remote Symmetrix serial numbers. The number of entries is given by the value of symRemoteListCount.')
symRemoteListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 2, 2, 2), ).setIndexNames((0, "EMC-MIB", "symRemoteListCount"))
if mibBuilder.loadTexts: symRemoteListEntry.setStatus('obsolete')
if mibBuilder.loadTexts: symRemoteListEntry.setDescription('An entry containing objects for the indicated symRemoteListTable element.')
remoteSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 2, 2, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteSerialNumber.setStatus('obsolete')
if mibBuilder.loadTexts: remoteSerialNumber.setDescription('The remote Symmetrix serial number for the indicated instance')
symDevListCountTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 3, 1), )
if mibBuilder.loadTexts: symDevListCountTable.setStatus('mandatory')
if mibBuilder.loadTexts: symDevListCountTable.setDescription('A list of the number of Symmetrix devices for the given Symmetrix instance.')
symDevListCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 3, 1, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"))
if mibBuilder.loadTexts: symDevListCountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: symDevListCountEntry.setDescription('An entry containing objects for the number of Symmetrix device names found for the specified Symmetrix')
symDevListCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symDevListCount.setStatus('mandatory')
if mibBuilder.loadTexts: symDevListCount.setDescription('The number of entries in the SymDevList table for the indicated Symmetrix instance')
symDevListTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 3, 2), )
if mibBuilder.loadTexts: symDevListTable.setStatus('mandatory')
if mibBuilder.loadTexts: symDevListTable.setDescription('A list of Symmetrix device names found for the indicated Symmetrix instance. The number of entries is given by the value of symDevListCount.')
symDevListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 3, 2, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "symDevListCount"))
if mibBuilder.loadTexts: symDevListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: symDevListEntry.setDescription('An entry containing objects for the indicated symDevListTable element.')
symDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: symDeviceName.setDescription('The device name for the indicated instance')
symPDevListCountTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 4, 1), )
if mibBuilder.loadTexts: symPDevListCountTable.setStatus('mandatory')
if mibBuilder.loadTexts: symPDevListCountTable.setDescription('A list of the number of available devices for the given Symmetrix instance.')
symPDevListCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 4, 1, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"))
if mibBuilder.loadTexts: symPDevListCountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: symPDevListCountEntry.setDescription('An entry containing objects for the number of available devices found for the specified Symmetrix')
symPDevListCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symPDevListCount.setStatus('mandatory')
if mibBuilder.loadTexts: symPDevListCount.setDescription('The number of entries in the symPDeviceList table for the indicated Symmetrix instance')
symPDevListTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 4, 2), )
if mibBuilder.loadTexts: symPDevListTable.setStatus('mandatory')
if mibBuilder.loadTexts: symPDevListTable.setDescription('A list of host device filenames (pdevs) for all available devices for the indicated Symmetrix instance. The number of entries is given by the value of symPDevListCount.')
symPDevListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 4, 2, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "symPDevListCount"))
if mibBuilder.loadTexts: symPDevListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: symPDevListEntry.setDescription('An entry containing objects for the indicated symPDevListTable element.')
symPDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 4, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symPDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: symPDeviceName.setDescription('The physical device name for the indicated instance')
symPDevNoDgListCountTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 5, 1), )
if mibBuilder.loadTexts: symPDevNoDgListCountTable.setStatus('mandatory')
if mibBuilder.loadTexts: symPDevNoDgListCountTable.setDescription('A list of the number of Symmetrix devices that are not members of a device group for the given Symmetrix instance.')
symPDevNoDgListCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 5, 1, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"))
if mibBuilder.loadTexts: symPDevNoDgListCountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: symPDevNoDgListCountEntry.setDescription('An entry containing objects for the number of Symmetrix devices that are not members of a device group for the specified Symmetrix')
symPDevNoDgListCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symPDevNoDgListCount.setStatus('mandatory')
if mibBuilder.loadTexts: symPDevNoDgListCount.setDescription('The number of entries in the symPDeviceNoDgList table for the indicated Symmetrix instance')
symPDevNoDgListTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 5, 2), )
if mibBuilder.loadTexts: symPDevNoDgListTable.setStatus('mandatory')
if mibBuilder.loadTexts: symPDevNoDgListTable.setDescription('A list of all Symmetrix devices that are not members of a device group found for the indicated Symmetrix instance. The number of entries is given by the value of symPDevNoDgListCount.')
symPDevNoDgListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 5, 2, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "symPDevNoDgListCount"))
if mibBuilder.loadTexts: symPDevNoDgListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: symPDevNoDgListEntry.setDescription('An entry containing objects for the indicated symPDevNoDgListTable element.')
symPDevNoDgDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 5, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symPDevNoDgDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: symPDevNoDgDeviceName.setDescription('The device name for the indicated instance')
symDevNoDgListCountTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 6, 1), )
if mibBuilder.loadTexts: symDevNoDgListCountTable.setStatus('mandatory')
if mibBuilder.loadTexts: symDevNoDgListCountTable.setDescription('A list of the number of Symmetrix devices, that are not members of a device group for the given Symmetrix instance.')
symDevNoDgListCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 6, 1, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"))
if mibBuilder.loadTexts: symDevNoDgListCountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: symDevNoDgListCountEntry.setDescription('An entry containing objects for the number of Symmetrix device names found for the specified Symmetrix')
symDevNoDgListCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symDevNoDgListCount.setStatus('mandatory')
if mibBuilder.loadTexts: symDevNoDgListCount.setDescription('The number of entries in the symDeviceNoDgList table for the indicated Symmetrix instance')
symDevNoDgListTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 6, 2), )
if mibBuilder.loadTexts: symDevNoDgListTable.setStatus('mandatory')
if mibBuilder.loadTexts: symDevNoDgListTable.setDescription('A list of Symmetrix device names found for the specified Symmetrix. The number of entries is given by the value of symDevNoDgListCount.')
symDevNoDgListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 6, 2, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "symDevNoDgListCount"))
if mibBuilder.loadTexts: symDevNoDgListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: symDevNoDgListEntry.setDescription('An entry containing objects for the indicated symDevNoDgListTable element.')
symDevNoDgDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 6, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symDevNoDgDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: symDevNoDgDeviceName.setDescription('The device name for the indicated instance')
symDgListCount = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symDgListCount.setStatus('obsolete')
if mibBuilder.loadTexts: symDgListCount.setDescription('The number of entries in symDgListTable, representing the number of device groups present on this system.')
symDgListTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 7, 2), )
if mibBuilder.loadTexts: symDgListTable.setStatus('obsolete')
if mibBuilder.loadTexts: symDgListTable.setDescription('A list of device groups present on the system. The number of entries is given by the value of symDgListCount.')
symDgListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 7, 2, 1), ).setIndexNames((0, "EMC-MIB", "symDgListCount"))
if mibBuilder.loadTexts: symDgListEntry.setStatus('obsolete')
if mibBuilder.loadTexts: symDgListEntry.setDescription('An entry containing objects for the indicated symDgListTable element.')
symDevGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 7, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symDevGroupName.setStatus('obsolete')
if mibBuilder.loadTexts: symDevGroupName.setDescription('The device groupname for the indicated instance')
symLDevListCountTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 8, 1), )
if mibBuilder.loadTexts: symLDevListCountTable.setStatus('obsolete')
if mibBuilder.loadTexts: symLDevListCountTable.setDescription('A list of the number of devices in a specific device group.')
symLDevListCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 8, 1, 1), ).setIndexNames((0, "EMC-MIB", "symDgListCount"))
if mibBuilder.loadTexts: symLDevListCountEntry.setStatus('obsolete')
if mibBuilder.loadTexts: symLDevListCountEntry.setDescription('An entry containing objects for the number of devices in a specific device group')
symLDevListCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symLDevListCount.setStatus('obsolete')
if mibBuilder.loadTexts: symLDevListCount.setDescription('The number of entries in the SymLDevList table for the indicated Symmetrix instance')
symLDevListTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 8, 2), )
if mibBuilder.loadTexts: symLDevListTable.setStatus('obsolete')
if mibBuilder.loadTexts: symLDevListTable.setDescription('A list of devices in the specified device group. The number of entries is given by the value of symLDevListCount.')
symLDevListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 8, 2, 1), ).setIndexNames((0, "EMC-MIB", "symDgListCount"), (0, "EMC-MIB", "symLDevListCount"))
if mibBuilder.loadTexts: symLDevListEntry.setStatus('obsolete')
if mibBuilder.loadTexts: symLDevListEntry.setDescription('An entry containing objects for the indicated symLDevListTable element.')
lDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 8, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDeviceName.setStatus('obsolete')
if mibBuilder.loadTexts: lDeviceName.setDescription('The device name for the indicated instance')
symGateListCountTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 9, 1), )
if mibBuilder.loadTexts: symGateListCountTable.setStatus('mandatory')
if mibBuilder.loadTexts: symGateListCountTable.setDescription('A list of the number of host physical device filenames that are currently in the gatekeeper device list for the given Symmetrix instance.')
symGateListCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 9, 1, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"))
if mibBuilder.loadTexts: symGateListCountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: symGateListCountEntry.setDescription('An entry containing objects for the number of host physical device filenames that are currently in the gatekeeper device list for the specified Symmetrix')
symGateListCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symGateListCount.setStatus('mandatory')
if mibBuilder.loadTexts: symGateListCount.setDescription('The number of entries in the SymGateList table for the indicated Symmetrix instance')
symGateListTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 9, 2), )
if mibBuilder.loadTexts: symGateListTable.setStatus('mandatory')
if mibBuilder.loadTexts: symGateListTable.setDescription('A list of host physical device filenames that are currently in the gatekeeper device list for the specified Symmetrix. The number of entries is given by the value of symGateListCount.')
symGateListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 9, 2, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "symGateListCount"))
if mibBuilder.loadTexts: symGateListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: symGateListEntry.setDescription('An entry containing objects for the indicated symGateListTable element.')
gatekeeperDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 9, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gatekeeperDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: gatekeeperDeviceName.setDescription('The gatekeeper device name for the indicated instance')
symBcvDevListCountTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 10, 1), )
if mibBuilder.loadTexts: symBcvDevListCountTable.setStatus('mandatory')
if mibBuilder.loadTexts: symBcvDevListCountTable.setDescription('A list of the number of BCV devices for the given Symmetrix instance.')
symBcvDevListCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 10, 1, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"))
if mibBuilder.loadTexts: symBcvDevListCountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: symBcvDevListCountEntry.setDescription('An entry containing objects for the number of BCV devices for the specified Symmetrix')
symBcvDevListCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symBcvDevListCount.setStatus('mandatory')
if mibBuilder.loadTexts: symBcvDevListCount.setDescription('The number of entries in the SymBcvDevList table for the indicated Symmetrix instance')
symBcvDevListTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 10, 2), )
if mibBuilder.loadTexts: symBcvDevListTable.setStatus('mandatory')
if mibBuilder.loadTexts: symBcvDevListTable.setDescription('A list of BCV devices for the specified Symmetrix. The number of entries is given by the value of symBcvDevListCount.')
symBcvDevListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 10, 2, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "symBcvDevListCount"))
if mibBuilder.loadTexts: symBcvDevListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: symBcvDevListEntry.setDescription('An entry containing objects for the indicated symBcvDevListTable element.')
bcvDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 10, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcvDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: bcvDeviceName.setDescription('The BCV device name for the indicated instance')
symBcvPDevListCountTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 11, 1), )
if mibBuilder.loadTexts: symBcvPDevListCountTable.setStatus('mandatory')
if mibBuilder.loadTexts: symBcvPDevListCountTable.setDescription('A list of the number of all BCV devices that are accessible by the host systems for the given Symmetrix instance.')
symBcvPDevListCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 11, 1, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"))
if mibBuilder.loadTexts: symBcvPDevListCountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: symBcvPDevListCountEntry.setDescription('An entry containing objects for the number of all BCV devices that are accessible by the host systems for the specified Symmetrix')
symBcvPDevListCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symBcvPDevListCount.setStatus('mandatory')
if mibBuilder.loadTexts: symBcvPDevListCount.setDescription('The number of entries in the SymBcvDevList table for the indicated Symmetrix instance')
symBcvPDevListTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 11, 2), )
if mibBuilder.loadTexts: symBcvPDevListTable.setStatus('mandatory')
if mibBuilder.loadTexts: symBcvPDevListTable.setDescription('A list of all BCV devices tha are accessible by the host systems for the specified Symmetrix. The number of entries is given by the value of symBcvPDevListCount.')
symBcvPDevListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 11, 2, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "symBcvPDevListCount"))
if mibBuilder.loadTexts: symBcvPDevListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: symBcvPDevListEntry.setDescription('An entry containing objects for the indicated symBcvPDevListTable element.')
symBcvPDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 1, 11, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symBcvPDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: symBcvPDeviceName.setDescription('The BCV physical device name for the indicated instance')
class StateValues(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("enabled", 0), ("disabled", 1), ("mixed", 2), ("state-na", 3))

class DirectorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("fibre-channel", 0), ("scsi-adapter", 1), ("disk-adapter", 2), ("channel-adapter", 3), ("memory-board", 4), ("escon-adapter", 5), ("rdf-adapter-r1", 6), ("rdf-adapter-r2", 7), ("rdf-adapter-bi", 8))

class DirectorStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("online", 0), ("offline", 1), ("dead", 2), ("unknown", 3))

class PortStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("status-na", 0), ("on", 1), ("off", 2), ("wd", 3))

class SCSIWidth(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("narrow", 1), ("wide", 2), ("ultra", 3))

symShowConfiguration = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1), )
if mibBuilder.loadTexts: symShowConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: symShowConfiguration.setDescription('A table of Symmetrix configuration information for the indicated Symmetrix instance. The number of entries is given by the value of discIndex.')
symShowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"))
if mibBuilder.loadTexts: symShowEntry.setStatus('mandatory')
if mibBuilder.loadTexts: symShowEntry.setDescription('An entry containing objects for the Symmetrix configuration information for the specified Symmetrix')
symShowSymid = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowSymid.setStatus('mandatory')
if mibBuilder.loadTexts: symShowSymid.setDescription('Symmetrix serial id')
symShowSymmetrix_ident = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 2), DisplayString()).setLabel("symShowSymmetrix-ident").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowSymmetrix_ident.setStatus('mandatory')
if mibBuilder.loadTexts: symShowSymmetrix_ident.setDescription('Symmetrix generation; Symm3 or Symm4. (reserved for EMC use only.)')
symShowSymmetrix_model = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 3), DisplayString()).setLabel("symShowSymmetrix-model").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowSymmetrix_model.setStatus('mandatory')
if mibBuilder.loadTexts: symShowSymmetrix_model.setDescription('Symmetrix model number: 3100, 3200, and so forth')
symShowMicrocode_version = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 4), DisplayString()).setLabel("symShowMicrocode-version").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowMicrocode_version.setStatus('mandatory')
if mibBuilder.loadTexts: symShowMicrocode_version.setDescription('Microcode revision string ')
symShowMicrocode_version_num = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 5), DisplayString()).setLabel("symShowMicrocode-version-num").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowMicrocode_version_num.setStatus('mandatory')
if mibBuilder.loadTexts: symShowMicrocode_version_num.setDescription('Microcode version')
symShowMicrocode_date = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 6), DisplayString()).setLabel("symShowMicrocode-date").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowMicrocode_date.setStatus('mandatory')
if mibBuilder.loadTexts: symShowMicrocode_date.setDescription('Date of microcode build (MMDDYYYY)')
symShowMicrocode_patch_level = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 7), DisplayString()).setLabel("symShowMicrocode-patch-level").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowMicrocode_patch_level.setStatus('mandatory')
if mibBuilder.loadTexts: symShowMicrocode_patch_level.setDescription('Microcode patch level')
symShowMicrocode_patch_date = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 8), DisplayString()).setLabel("symShowMicrocode-patch-date").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowMicrocode_patch_date.setStatus('mandatory')
if mibBuilder.loadTexts: symShowMicrocode_patch_date.setDescription('Date of microcode patch level (MMDDYY)')
symShowSymmetrix_pwron_time = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 9), TimeTicks()).setLabel("symShowSymmetrix-pwron-time").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowSymmetrix_pwron_time.setStatus('mandatory')
if mibBuilder.loadTexts: symShowSymmetrix_pwron_time.setDescription('Time since the last power-on ')
symShowSymmetrix_uptime = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 10), TimeTicks()).setLabel("symShowSymmetrix-uptime").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowSymmetrix_uptime.setStatus('mandatory')
if mibBuilder.loadTexts: symShowSymmetrix_uptime.setDescription('Uptime in seconds of the Symmetrix ')
symShowDb_sync_time = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 11), TimeTicks()).setLabel("symShowDb-sync-time").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowDb_sync_time.setStatus('mandatory')
if mibBuilder.loadTexts: symShowDb_sync_time.setDescription('Time since the configuration information was gathered ')
symShowDb_sync_bcv_time = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 12), TimeTicks()).setLabel("symShowDb-sync-bcv-time").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowDb_sync_bcv_time.setStatus('mandatory')
if mibBuilder.loadTexts: symShowDb_sync_bcv_time.setDescription('Time since the configuration information was gathered for BCVs ')
symShowDb_sync_rdf_time = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 13), TimeTicks()).setLabel("symShowDb-sync-rdf-time").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowDb_sync_rdf_time.setStatus('mandatory')
if mibBuilder.loadTexts: symShowDb_sync_rdf_time.setDescription('Time since the configuration information was gathered for the SRDF ')
symShowLast_ipl_time = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 14), TimeTicks()).setLabel("symShowLast-ipl-time").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowLast_ipl_time.setStatus('mandatory')
if mibBuilder.loadTexts: symShowLast_ipl_time.setDescription('Time since the last Symmetrix IPL ')
symShowLast_fast_ipl_time = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 15), TimeTicks()).setLabel("symShowLast-fast-ipl-time").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowLast_fast_ipl_time.setStatus('mandatory')
if mibBuilder.loadTexts: symShowLast_fast_ipl_time.setDescription("Time since the last Symmetrix 'fast IPL' ")
symShowReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowReserved.setStatus('mandatory')
if mibBuilder.loadTexts: symShowReserved.setDescription('Reserved for future use ')
symShowCache_size = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 17), UInt32()).setLabel("symShowCache-size").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowCache_size.setStatus('mandatory')
if mibBuilder.loadTexts: symShowCache_size.setDescription('Cache size in megabytes ')
symShowCache_slot_count = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 18), UInt32()).setLabel("symShowCache-slot-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowCache_slot_count.setStatus('mandatory')
if mibBuilder.loadTexts: symShowCache_slot_count.setDescription('Number of 32K cache slots ')
symShowMax_wr_pend_slots = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 19), UInt32()).setLabel("symShowMax-wr-pend-slots").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowMax_wr_pend_slots.setStatus('mandatory')
if mibBuilder.loadTexts: symShowMax_wr_pend_slots.setDescription('Number of write pending slots allowed before starting delayed fast writes ')
symShowMax_da_wr_pend_slots = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 20), UInt32()).setLabel("symShowMax-da-wr-pend-slots").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowMax_da_wr_pend_slots.setStatus('mandatory')
if mibBuilder.loadTexts: symShowMax_da_wr_pend_slots.setDescription('Number of write pending slots allowed for one DA before delayed fast writes ')
symShowMax_dev_wr_pend_slots = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 21), UInt32()).setLabel("symShowMax-dev-wr-pend-slots").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowMax_dev_wr_pend_slots.setStatus('mandatory')
if mibBuilder.loadTexts: symShowMax_dev_wr_pend_slots.setDescription('Number of write pending slots allowed for one device before starting delayed fast writes ')
symShowPermacache_slot_count = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 22), UInt32()).setLabel("symShowPermacache-slot-count").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowPermacache_slot_count.setStatus('mandatory')
if mibBuilder.loadTexts: symShowPermacache_slot_count.setDescription('Number of slots allocated to PermaCache ')
symShowNum_disks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 23), UInt32()).setLabel("symShowNum-disks").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowNum_disks.setStatus('mandatory')
if mibBuilder.loadTexts: symShowNum_disks.setDescription('Number of physical disks in Symmetrix ')
symShowNum_symdevs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 24), UInt32()).setLabel("symShowNum-symdevs").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowNum_symdevs.setStatus('mandatory')
if mibBuilder.loadTexts: symShowNum_symdevs.setDescription('Number of Symmetrix devices ')
symShowNum_pdevs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 25), UInt32()).setLabel("symShowNum-pdevs").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowNum_pdevs.setStatus('mandatory')
if mibBuilder.loadTexts: symShowNum_pdevs.setDescription(' Number of host physical devices configured for this Symmetrix ')
symShowAPI_version = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 26), DisplayString()).setLabel("symShowAPI-version").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowAPI_version.setStatus('mandatory')
if mibBuilder.loadTexts: symShowAPI_version.setDescription('SYMAPI revision set to SYMAPI_T_VERSION ')
symShowSDDF_configuration = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 27), StateValues()).setLabel("symShowSDDF-configuration").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowSDDF_configuration.setStatus('mandatory')
if mibBuilder.loadTexts: symShowSDDF_configuration.setDescription('The configuration state of the Symmetrix Differential Data Facility (SDDF). Possible states are: enabled(0), disabled(1), mixed(2) - This state is set when the RDF modes of the devices in the group are different from each other state-na(3) - state not applicable ')
symShowConfig_checksum = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 28), UInt32()).setLabel("symShowConfig-checksum").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowConfig_checksum.setStatus('mandatory')
if mibBuilder.loadTexts: symShowConfig_checksum.setDescription('Checksum of the Microcode file')
symShowNum_powerpath_devs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 1, 1, 29), UInt32()).setLabel("symShowNum-powerpath-devs").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowNum_powerpath_devs.setStatus('mandatory')
if mibBuilder.loadTexts: symShowNum_powerpath_devs.setDescription('Number of Symmetrix devices accessible through the PowerPath driver.')
symShowPDevCountTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 2), )
if mibBuilder.loadTexts: symShowPDevCountTable.setStatus('mandatory')
if mibBuilder.loadTexts: symShowPDevCountTable.setDescription('A list of the number of available devices for the given Symmetrix instance.')
symShowPDevCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 2, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"))
if mibBuilder.loadTexts: symShowPDevCountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: symShowPDevCountEntry.setDescription('An entry containing objects for the number of available devices found for the specified Symmetrix')
symShowPDevCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowPDevCount.setStatus('mandatory')
if mibBuilder.loadTexts: symShowPDevCount.setDescription('The number of entries in the SymShowPDeviceList table for the indicated Symmetrix instance')
symShowPDevListTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 3), )
if mibBuilder.loadTexts: symShowPDevListTable.setStatus('mandatory')
if mibBuilder.loadTexts: symShowPDevListTable.setDescription('A list of host device filenames (pdevs) for all available devices for the indicated Symmetrix instance. The number of entries is given by the value of symShowPDevCount.')
symShowPDevListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 3, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "symShowPDevCount"))
if mibBuilder.loadTexts: symShowPDevListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: symShowPDevListEntry.setDescription('An entry containing objects for the indicated symShowPDevListTable element.')
symShowPDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowPDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: symShowPDeviceName.setDescription('The physical device name for the indicated instance')
symShowDirectorCountTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 4), )
if mibBuilder.loadTexts: symShowDirectorCountTable.setStatus('mandatory')
if mibBuilder.loadTexts: symShowDirectorCountTable.setDescription('A list of the number of directors for the given Symmetrix instance.')
symShowDirectorCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 4, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"))
if mibBuilder.loadTexts: symShowDirectorCountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: symShowDirectorCountEntry.setDescription('An entry containing objects for the number of directors for the specified Symmetrix')
symShowDirectorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowDirectorCount.setStatus('mandatory')
if mibBuilder.loadTexts: symShowDirectorCount.setDescription('The number of entries in the SymShowDirectorList table for the indicated Symmetrix instance')
symShowDirectorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 5), )
if mibBuilder.loadTexts: symShowDirectorConfigurationTable.setStatus('mandatory')
if mibBuilder.loadTexts: symShowDirectorConfigurationTable.setDescription('A table of Symmetrix director configuration for the indicated Symmetrix instance. The number of entries is given by the value of symShowDirectorCount.')
symShowDirectorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 5, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "symShowDirectorCount"))
if mibBuilder.loadTexts: symShowDirectorConfigurationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: symShowDirectorConfigurationEntry.setDescription('An entry containing objects for the indicated symShowDirectorConfigurationTable element.')
symShowDirector_type = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 5, 1, 1), DirectorType()).setLabel("symShowDirector-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowDirector_type.setStatus('mandatory')
if mibBuilder.loadTexts: symShowDirector_type.setDescription('Defines the type of director. Possible types are: SYMAPI_DIRTYPE_FIBRECHANNEL SYMAPI_DIRTYPE_SCSI SYMAPI_DIRTYPE_DISK SYMAPI_DIRTYPE_CHANNEL SYMAPI_DIRTYPE_MEMORY SYMAPI_DIRTYPE_R1 SYMAPI_DIRTYPE_R2 SYMAPI_DIRTYPE_RDF_B (bidirectional RDF) ')
symShowDirector_num = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 5, 1, 2), UInt32()).setLabel("symShowDirector-num").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowDirector_num.setStatus('mandatory')
if mibBuilder.loadTexts: symShowDirector_num.setDescription('Number of a director (1 - 32) ')
symShowSlot_num = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 5, 1, 3), UInt32()).setLabel("symShowSlot-num").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowSlot_num.setStatus('mandatory')
if mibBuilder.loadTexts: symShowSlot_num.setDescription('Slot number of a director (1 - 16) ')
symShowDirector_ident = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 5, 1, 4), DisplayString()).setLabel("symShowDirector-ident").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowDirector_ident.setStatus('mandatory')
if mibBuilder.loadTexts: symShowDirector_ident.setDescription(' Director identifier. For example, SA-16 ')
symShowDirector_status = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 5, 1, 5), DirectorStatus()).setLabel("symShowDirector-status").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowDirector_status.setStatus('mandatory')
if mibBuilder.loadTexts: symShowDirector_status.setDescription("online(0) - The director's status is ONLINE. offline(1) - The director's status is OFFLINE. dead(2) - The status is non-operational, and its LED display will show 'DD'. unknown(3) - The director's status is unknown. ")
symShowScsi_capability = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 5, 1, 6), SCSIWidth()).setLabel("symShowScsi-capability").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowScsi_capability.setStatus('mandatory')
if mibBuilder.loadTexts: symShowScsi_capability.setDescription('Defines SCSI features for SAs and DAs. Possible values are: SYMAPI_C_SCSI_NARROW SYMAPI_C_SCSI_WIDE SYMAPI_C_SCSI_ULTRA ')
symShowNum_da_volumes = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 5, 1, 7), UInt32()).setLabel("symShowNum-da-volumes").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowNum_da_volumes.setStatus('mandatory')
if mibBuilder.loadTexts: symShowNum_da_volumes.setDescription('Indicates how many volumes are serviced by the DA. ')
symShowRemote_symid = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 5, 1, 8), DisplayString()).setLabel("symShowRemote-symid").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowRemote_symid.setStatus('mandatory')
if mibBuilder.loadTexts: symShowRemote_symid.setDescription('If this is an RA in an SRDF system,this is the remote Symmetrix serial number. If this is not an RDF director, this field is NULL ')
symShowRa_group_num = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 5, 1, 9), UInt32()).setLabel("symShowRa-group-num").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowRa_group_num.setStatus('mandatory')
if mibBuilder.loadTexts: symShowRa_group_num.setDescription('If this is an RA in an SRDF system, this is the RA group number; otherwise it is zero. ')
symShowRemote_ra_group_num = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 5, 1, 10), UInt32()).setLabel("symShowRemote-ra-group-num").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowRemote_ra_group_num.setStatus('mandatory')
if mibBuilder.loadTexts: symShowRemote_ra_group_num.setDescription('If this is an RA in an SRDF system, this is the RA group number on the remote Symmetrix; otherwise it is zero. ')
symShowPrevent_auto_link_recovery = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 5, 1, 11), StateValues()).setLabel("symShowPrevent-auto-link-recovery").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowPrevent_auto_link_recovery.setStatus('mandatory')
if mibBuilder.loadTexts: symShowPrevent_auto_link_recovery.setDescription('Prevent the automatic resumption of data copy across the RDF links as soon as the links have recovered. Possible states are: enabled(0), disabled(1), mixed(2) - This state is set when the RDF modes of the devices in the group are different from each other state-na(3) - state not applicable ')
symShowPrevent_ra_online_upon_pwron = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 5, 1, 12), StateValues()).setLabel("symShowPrevent-ra-online-upon-pwron").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowPrevent_ra_online_upon_pwron.setStatus('mandatory')
if mibBuilder.loadTexts: symShowPrevent_ra_online_upon_pwron.setDescription("Prevent RA's from coming online after the Symmetrix is powered on. Possible states are: enabled(0), disabled(1), mixed(2) - This state is set when the RDF modes of the devices in the group are different from each other state-na(3) - state not applicable ")
symShowNum_ports = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 5, 1, 13), UInt32()).setLabel("symShowNum-ports").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowNum_ports.setStatus('mandatory')
if mibBuilder.loadTexts: symShowNum_ports.setDescription('Number of ports available on this director.')
symShowPort0_status = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 5, 1, 14), PortStatus()).setLabel("symShowPort0-status").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowPort0_status.setStatus('mandatory')
if mibBuilder.loadTexts: symShowPort0_status.setDescription("The status of port 0 for this director. Possible values are: status-na(0) - the port's status is not applicable. on(1) - the port's status is on. off(2) - the port's status is off. wd(3) - the port's status is write disabled. ")
symShowPort1_status = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 5, 1, 15), PortStatus()).setLabel("symShowPort1-status").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowPort1_status.setStatus('mandatory')
if mibBuilder.loadTexts: symShowPort1_status.setDescription("The status of port 1 for this director. Possible values are: status-na(0) - the port's status is not applicable. on(1) - the port's status is on. off(2) - the port's status is off. wd(3) - the port's status is write disabled. ")
symShowPort2_status = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 5, 1, 16), PortStatus()).setLabel("symShowPort2-status").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowPort2_status.setStatus('mandatory')
if mibBuilder.loadTexts: symShowPort2_status.setDescription("The status of port 2 for this director. Possible values are: status-na(0) - the port's status is not applicable. on(1) - the port's status is on. off(2) - the port's status is off. wd(3) - the port's status is write disabled. ")
symShowPort3_status = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 1, 5, 1, 17), PortStatus()).setLabel("symShowPort3-status").setMaxAccess("readonly")
if mibBuilder.loadTexts: symShowPort3_status.setStatus('mandatory')
if mibBuilder.loadTexts: symShowPort3_status.setDescription("The status of port 3 for this director. Possible values are: status-na(0) - the port's status is not applicable. on(1) - the port's status is on. off(2) - the port's status is off. wd(3) - the port's status is write disabled. ")
class DeviceStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("ready", 0), ("not-ready", 1), ("write-disabled", 2), ("not-applicable", 3), ("mixed", 4))

class DeviceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 128))
    namedValues = NamedValues(("not-applicable", 1), ("local-data", 2), ("raid-s", 4), ("raid-s-parity", 8), ("remote-r1-data", 16), ("remote-r2-data", 32), ("hot-spare", 128))

class DeviceEmulation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("emulation-na", 0), ("fba", 1), ("as400", 2), ("icl", 3), ("unisys-fba", 4), ("ckd-3380", 5), ("ckd-3390", 6))

class SCSIMethod(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("method-na", 0), ("synchronous", 1), ("asynchronous", 2))

class BCVState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("never-established", 0), ("in-progress", 1), ("synchronous", 2), ("split-in-progress", 3), ("split-before-sync", 4), ("split", 5), ("split-no-incremental", 6), ("restore-in-progress", 7), ("restored", 8), ("split-before-restore", 9), ("invalid", 10))

class RDFPairState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110))
    namedValues = NamedValues(("invalid", 100), ("syncinprog", 101), ("synchronized", 102), ("split", 103), ("suspended", 104), ("failed-over", 105), ("partitioned", 106), ("r1-updated", 107), ("r1-updinprog", 108), ("mixed", 109), ("state-na", 110))

class RDFType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("r1", 0), ("r2", 1))

class RDFMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("synchronous", 0), ("semi-synchronous", 1), ("adaptive-copy", 2), ("mixed", 3), ("rdf-mode-na", 4))

class RDFAdaptiveCopy(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("disabled", 0), ("wp-mode", 1), ("disk-mode", 2), ("mixed", 3), ("ac-na", 4))

class RDFLinkConfig(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("escon", 1), ("t3", 2), ("na", 3))

class RDDFTransientState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("transient-state-na", 1), ("offline", 2), ("offline-pend", 3), ("online", 4))

devShowConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1), )
if mibBuilder.loadTexts: devShowConfigurationTable.setStatus('mandatory')
if mibBuilder.loadTexts: devShowConfigurationTable.setDescription('A table of Symmetrix device configuration information for the indicated Symmetrix and device instance. The number of entries is given by the value of symDevListCount.')
devShowConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "symDevListCount"))
if mibBuilder.loadTexts: devShowConfigurationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: devShowConfigurationEntry.setDescription('An entry containing objects for the Symmetrix device configuration information for the specified Symmetrix and device.')
devShowVendor_id = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 1), DisplayString()).setLabel("devShowVendor-id").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowVendor_id.setStatus('mandatory')
if mibBuilder.loadTexts: devShowVendor_id.setDescription('Vendor ID of the Symmetrix device ')
devShowProduct_id = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 2), DisplayString()).setLabel("devShowProduct-id").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowProduct_id.setStatus('mandatory')
if mibBuilder.loadTexts: devShowProduct_id.setDescription('Product ID of the Symmetrix device ')
devShowProduct_rev = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 3), DisplayString()).setLabel("devShowProduct-rev").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowProduct_rev.setStatus('mandatory')
if mibBuilder.loadTexts: devShowProduct_rev.setDescription('Product revision level of the Symmetrix device ')
devShowSymid = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowSymid.setStatus('mandatory')
if mibBuilder.loadTexts: devShowSymid.setDescription('Symmetrix serial number ')
devShowDevice_serial_id = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 5), DisplayString()).setLabel("devShowDevice-serial-id").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowDevice_serial_id.setStatus('mandatory')
if mibBuilder.loadTexts: devShowDevice_serial_id.setDescription('Symmetrix device serial ID ')
devShowSym_devname = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 6), DisplayString()).setLabel("devShowSym-devname").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowSym_devname.setStatus('mandatory')
if mibBuilder.loadTexts: devShowSym_devname.setDescription('Symmetrix device name/number ')
devShowPdevname = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowPdevname.setStatus('mandatory')
if mibBuilder.loadTexts: devShowPdevname.setDescription('Physical device name. If not visible to the host this field is NULL ')
devShowDgname = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowDgname.setStatus('mandatory')
if mibBuilder.loadTexts: devShowDgname.setDescription('Name of device group. If the device is not a member of a device group, this field is NULL ')
devShowLdevname = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowLdevname.setStatus('mandatory')
if mibBuilder.loadTexts: devShowLdevname.setDescription('Name of this device in the device group. If the device is not a member of a device group, this field is NULL ')
devShowDev_config = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unprotected", 0), ("mirror-2", 1), ("mirror-3", 2), ("mirror-4", 3), ("raid-s", 4), ("raid-s-mirror", 5), ("rdf-r1", 6), ("rdf-r2", 7), ("rdf-r1-raid-s", 8), ("rdf-r2-raid-s", 9), ("rdf-r1-mirror", 10), ("rdf-r2-mirror", 11), ("bcv", 12), ("hot-spare", 13), ("bcv-mirror-2", 14), ("bcv-rdf-r1", 15), ("bcv-rdf-r1-mirror", 16)))).setLabel("devShowDev-config").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowDev_config.setStatus('mandatory')
if mibBuilder.loadTexts: devShowDev_config.setDescription(' unprotected(0) - no data protection method applied mirror-2(1) - device is a two-way mirror mirror-3(2) - device is a three-way mirror mirror-4(3) - device is a four-way mirror raid-s(4) - device is a standard raid-s device raid-s-mirror(5) - device is a raid-s device plus a local mirror rdf-r1(6) - device is an SRDF Master (R1) rdf-r2(7) - device is an SRDF Slave (R2) rdf-r1-raid-s(8) - device is an SRDF Master (R1) with RAID_S rdf-r2-raid-s(9) - device is an SRDF Slave (R2) with RAID_S rdf-r1-mirror(10) - device is an SRDF source (R1) with a local mirror rdf-r2-mirror(11) - device is an SRDF target (R2) with mirror bcv(12) - device is a BCV device hot-spare(13) - device is a Hot Spare device bcv-mirror-2(14) - device is a protected BCV device with mirror bcv-rdf-r1(15) - device is an SRDF Master (R1), BCV device bcv-rdf-r1-mirror(16) - device is an SRDF Master (R1), BCV device with mirror ')
devShowDev_parameters = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("ckd-device", 1), ("gatekeeper-device", 2), ("associated-device", 4), ("multi-channel-device", 8), ("meta-head-device", 16), ("meta-member-device", 32)))).setLabel("devShowDev-parameters").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowDev_parameters.setStatus('mandatory')
if mibBuilder.loadTexts: devShowDev_parameters.setDescription(" ckd-device(1) - device is an 'Count Key Data' (CKD) device gatekeeper-device(2) - device is a gatekeeper device associated-device(4) - BCV or Gatekeeper device,associated with a group multi-channel-device(8) - device visible by the host over more than one SCSI-bus meta-head-device(16) - device is a META head device meta-member-device(32) - device is a META member device ")
devShowDev_status = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 12), DeviceStatus()).setLabel("devShowDev-status").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowDev_status.setStatus('mandatory')
if mibBuilder.loadTexts: devShowDev_status.setDescription(' ready(0) - the device is ready not-ready(1) - the device is not ready write-disabled - the device is write disabled not-applicable(3) - there is no such device ')
devShowDev_capacity = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 13), UInt32()).setLabel("devShowDev-capacity").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowDev_capacity.setStatus('mandatory')
if mibBuilder.loadTexts: devShowDev_capacity.setDescription('Device capacity specified as the number of device blocks ')
devShowTid = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 14), UInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowTid.setStatus('mandatory')
if mibBuilder.loadTexts: devShowTid.setDescription('SCSI target ID of the Symmetrix device ')
devShowLun = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 15), UInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowLun.setStatus('mandatory')
if mibBuilder.loadTexts: devShowLun.setDescription('SCSI logical unit number of the Symmetrix device ')
devShowDirector_num = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 16), Integer32()).setLabel("devShowDirector-num").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowDirector_num.setStatus('mandatory')
if mibBuilder.loadTexts: devShowDirector_num.setDescription("Symmetrix director number of the device's FW SCSI Channel director, or SA, (1-32). If there is no primary port, it is zero. ")
devShowDirector_slot_num = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 17), Integer32()).setLabel("devShowDirector-slot-num").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowDirector_slot_num.setStatus('mandatory')
if mibBuilder.loadTexts: devShowDirector_slot_num.setDescription('The slot number of the director. If there is no primary port, it is zero. ')
devShowDirector_ident = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 18), DisplayString()).setLabel("devShowDirector-ident").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowDirector_ident.setStatus('mandatory')
if mibBuilder.loadTexts: devShowDirector_ident.setDescription('The identification number of the director, for example: SA-16. If there is no primary port, this field is NULL ')
devShowDirector_port_num = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 19), Integer32()).setLabel("devShowDirector-port-num").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowDirector_port_num.setStatus('mandatory')
if mibBuilder.loadTexts: devShowDirector_port_num.setDescription("The device's SA port number (0-3). If there is no primary port, it is zero. ")
devShowMset_M1_type = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 20), DeviceType()).setLabel("devShowMset-M1-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowMset_M1_type.setStatus('mandatory')
if mibBuilder.loadTexts: devShowMset_M1_type.setDescription(' Device type of each hyper volume forming a Symmetrix mirror set. not-applicable(1) - No device exists for this mirror local-data(2) - This device is a local data device raid-s(4) - This device is a local raid-s data device raid-s-parity(8) - This device is a local raid_s parity device remote-r1-data(16) - This device is a remote R1 data device remote-r2-data(32) - This device is a remote R2 data device hot-spare(128) - This device is a hot spare device ')
devShowMset_M2_type = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 21), DeviceType()).setLabel("devShowMset-M2-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowMset_M2_type.setStatus('mandatory')
if mibBuilder.loadTexts: devShowMset_M2_type.setDescription(' Device type of each hyper volume forming a Symmetrix mirror set. not-applicable(1) - No device exists for this mirror local-data(2) - This device is a local data device raid-s(4) - This device is a local raid-s data device raid-s-parity(8) - This device is a local raid_s parity device remote-r1-data(16) - This device is a remote R1 data device remote-r2-data(32) - This device is a remote R2 data device hot-spare(128) - This device is a hot spare device ')
devShowMset_M3_type = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 22), DeviceType()).setLabel("devShowMset-M3-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowMset_M3_type.setStatus('mandatory')
if mibBuilder.loadTexts: devShowMset_M3_type.setDescription(' Device type of each hyper volume forming a Symmetrix mirror set. not-applicable(1) - No device exists for this mirror local-data(2) - This device is a local data device raid-s(4) - This device is a local raid-s data device raid-s-parity(8) - This device is a local raid_s parity device remote-r1-data(16) - This device is a remote R1 data device remote-r2-data(32) - This device is a remote R2 data device hot-spare(128) - This device is a hot spare device ')
devShowMset_M4_type = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 23), DeviceType()).setLabel("devShowMset-M4-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowMset_M4_type.setStatus('mandatory')
if mibBuilder.loadTexts: devShowMset_M4_type.setDescription(' Device type of each hyper volume forming a Symmetrix mirror set. not-applicable(1) - No device exists for this mirror local-data(2) - This device is a local data device raid-s(4) - This device is a local raid-s data device raid-s-parity(8) - This device is a local raid_s parity device remote-r1-data(16) - This device is a remote R1 data device remote-r2-data(32) - This device is a remote R2 data device hot-spare(128) - This device is a hot spare device ')
devShowMset_M1_status = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 24), DeviceStatus()).setLabel("devShowMset-M1-status").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowMset_M1_status.setStatus('mandatory')
if mibBuilder.loadTexts: devShowMset_M1_status.setDescription(' ready(0) - the device is ready not-ready(1) - the device is not ready write-disabled - the device is write disabled not-applicable(3) - there is no such device ')
devShowMset_M2_status = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 25), DeviceStatus()).setLabel("devShowMset-M2-status").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowMset_M2_status.setStatus('mandatory')
if mibBuilder.loadTexts: devShowMset_M2_status.setDescription(' ready(0) - the device is ready not-ready(1) - the device is not ready write-disabled - the device is write disabled not-applicable(3) - there is no such device ')
devShowMset_M3_status = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 26), DeviceStatus()).setLabel("devShowMset-M3-status").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowMset_M3_status.setStatus('mandatory')
if mibBuilder.loadTexts: devShowMset_M3_status.setDescription(' ready(0) - the device is ready not-ready(1) - the device is not ready write-disabled - the device is write disabled not-applicable(3) - there is no such device ')
devShowMset_M4_status = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 27), DeviceStatus()).setLabel("devShowMset-M4-status").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowMset_M4_status.setStatus('mandatory')
if mibBuilder.loadTexts: devShowMset_M4_status.setDescription(' ready(0) - the device is ready not-ready(1) - the device is not ready write-disabled - the device is write disabled not-applicable(3) - there is no such device ')
devShowMset_M1_invalid_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 28), Integer32()).setLabel("devShowMset-M1-invalid-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowMset_M1_invalid_tracks.setStatus('mandatory')
if mibBuilder.loadTexts: devShowMset_M1_invalid_tracks.setDescription('The number of invalid tracks for Mirror 1')
devShowMset_M2_invalid_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 29), Integer32()).setLabel("devShowMset-M2-invalid-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowMset_M2_invalid_tracks.setStatus('mandatory')
if mibBuilder.loadTexts: devShowMset_M2_invalid_tracks.setDescription('The number of invalid tracks for Mirror 2')
devShowMset_M3_invalid_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 30), Integer32()).setLabel("devShowMset-M3-invalid-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowMset_M3_invalid_tracks.setStatus('mandatory')
if mibBuilder.loadTexts: devShowMset_M3_invalid_tracks.setDescription('The number of invalid tracks for Mirror 3')
devShowMset_M4_invalid_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 31), Integer32()).setLabel("devShowMset-M4-invalid-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowMset_M4_invalid_tracks.setStatus('mandatory')
if mibBuilder.loadTexts: devShowMset_M4_invalid_tracks.setDescription('The number of invalid tracks for Mirror 4')
devShowDirector_port_status = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 48), DeviceStatus()).setLabel("devShowDirector-port-status").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowDirector_port_status.setStatus('mandatory')
if mibBuilder.loadTexts: devShowDirector_port_status.setDescription(' ready(0) - the device is ready not-ready(1) - the device is not ready write-disabled - the device is write disabled not-applicable(3) - there is no such device ')
devShowDev_sa_status = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 49), DeviceStatus()).setLabel("devShowDev-sa-status").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowDev_sa_status.setStatus('mandatory')
if mibBuilder.loadTexts: devShowDev_sa_status.setDescription(' ready(0) - the device is ready not-ready(1) - the device is not ready write-disabled - the device is write disabled not-applicable(3) - there is no such device ')
devShowVbus = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowVbus.setStatus('mandatory')
if mibBuilder.loadTexts: devShowVbus.setDescription('The virtual busis used for fibre channel ports. For EA and CA ports, this is the device address. ')
devShowEmulation = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 51), DeviceEmulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowEmulation.setStatus('mandatory')
if mibBuilder.loadTexts: devShowEmulation.setDescription(' emulation-na(0) - the emulation type for this device is not available. fba(1) - the emulation type for this device is fba. as400(2) - the emulation type for this device is as/400. icl(3) - the emulation type for this device is icl. unisys-fba(4) - the emulation type for this device is unisys fba. ckd-3380(5) - the emulation type for this device is ckd 3380. ckd-3390(6) - the emulation type for this device is ckd 3390. ')
devShowDev_block_size = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 52), UInt32()).setLabel("devShowDev-block-size").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowDev_block_size.setStatus('mandatory')
if mibBuilder.loadTexts: devShowDev_block_size.setDescription('Indicates the number of bytes per block ')
devShowSCSI_negotiation = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 53), SCSIWidth()).setLabel("devShowSCSI-negotiation").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowSCSI_negotiation.setStatus('mandatory')
if mibBuilder.loadTexts: devShowSCSI_negotiation.setDescription('width-na(0) - width not available narrow(1), wide(2), ultra(3) ')
devShowSCSI_method = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 54), SCSIMethod()).setLabel("devShowSCSI-method").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowSCSI_method.setStatus('mandatory')
if mibBuilder.loadTexts: devShowSCSI_method.setDescription(' method-na(0) - method not available synchronous(1) asynchronous(2) ')
devShowDev_cylinders = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 55), UInt32()).setLabel("devShowDev-cylinders").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowDev_cylinders.setStatus('mandatory')
if mibBuilder.loadTexts: devShowDev_cylinders.setDescription('Number device cylinders ')
devShowAttached_bcv_symdev = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 1, 1, 56), DisplayString()).setLabel("devShowAttached-bcv-symdev").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowAttached_bcv_symdev.setStatus('mandatory')
if mibBuilder.loadTexts: devShowAttached_bcv_symdev.setDescription('If this is a std device, this may be set to indicate the preferred BCV device to which this device would be paired. ')
devShowRDFInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2), )
if mibBuilder.loadTexts: devShowRDFInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: devShowRDFInfoTable.setDescription('A table of Symmetrix RDF device configuration information for the indicated Symmetrix and device instance. The number of entries is given by the value of symDevListCount.')
devShowRDFInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "symDevListCount"))
if mibBuilder.loadTexts: devShowRDFInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: devShowRDFInfoEntry.setDescription('An entry containing objects for the Symmetrix RDF device configuration information for the specified Symmetrix and device.')
devShowRemote_symid = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 1), DisplayString()).setLabel("devShowRemote-symid").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowRemote_symid.setStatus('mandatory')
if mibBuilder.loadTexts: devShowRemote_symid.setDescription('Serial number of the Symmetrix containing the target (R2) volume ')
devShowRemote_sym_devname = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 2), DisplayString()).setLabel("devShowRemote-sym-devname").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowRemote_sym_devname.setStatus('mandatory')
if mibBuilder.loadTexts: devShowRemote_sym_devname.setDescription('Symmetrix device name of the remote device in an RDF pair ')
devShowRa_group_number = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 3), Integer32()).setLabel("devShowRa-group-number").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowRa_group_number.setStatus('mandatory')
if mibBuilder.loadTexts: devShowRa_group_number.setDescription('The RA group number (1 - n)')
devShowDev_rdf_type = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 4), RDFType()).setLabel("devShowDev-rdf-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowDev_rdf_type.setStatus('mandatory')
if mibBuilder.loadTexts: devShowDev_rdf_type.setDescription('Type of RDF device. Values are: r1(0) - an R1 device r2(1) - an R2 device ')
devShowDev_ra_status = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 5), DeviceStatus()).setLabel("devShowDev-ra-status").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowDev_ra_status.setStatus('mandatory')
if mibBuilder.loadTexts: devShowDev_ra_status.setDescription('The status of the remote device. Values are: ready(0) not-ready(1) write-disabled(2) not-applicable(3) mixed(4) ')
devShowDev_link_status = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 6), DeviceStatus()).setLabel("devShowDev-link-status").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowDev_link_status.setStatus('mandatory')
if mibBuilder.loadTexts: devShowDev_link_status.setDescription('The RDF link status. Values are: ready(0) not-ready(1) write-disabled(2) not-applicable(3) mixed(4) ')
devShowRdf_mode = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 7), RDFMode()).setLabel("devShowRdf-mode").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowRdf_mode.setStatus('mandatory')
if mibBuilder.loadTexts: devShowRdf_mode.setDescription('The RDF Mode. Values are synchronous(0) semi_synchronous(1) adaptive_copy(2) mixed(3) - This state is set when the RDF modes of the devices in the group are different from each other rdf_mode_na (4) - not applicable ')
devShowRdf_pair_state = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 8), RDFPairState()).setLabel("devShowRdf-pair-state").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowRdf_pair_state.setStatus('mandatory')
if mibBuilder.loadTexts: devShowRdf_pair_state.setDescription('The RDF pair state. Values are: invalid(100) - The device & link states are in an unrecognized combination syncinprog(101) - Synchronizing in progress synchronized(102) - The source and target have identical data split(103) - The source is split from the target, and the target is write enabled. suspended(104) - The link is suspended failed-over(105) - The target is write enabled, the source is write disabled, the link is suspended. partitioned(106) - The communication link to the remote symmetrix is down, and the device is write enabled. r1-updated(107) - The target is write enabled, the source is write disabled, and the link is up. r1-updinprog(108) - same as r1-updated but there are invalid tracks between target and source mixed(109) - This state is set when the RDF modes of the devices in the group are different from each other state-na(110) - Not applicable ')
devShowRdf_domino = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 9), StateValues()).setLabel("devShowRdf-domino").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowRdf_domino.setStatus('mandatory')
if mibBuilder.loadTexts: devShowRdf_domino.setDescription('The RDF Domino state. Possible states are: enabled(0), disabled(1), mixed(2) - This state is set when the RDF modes of the devices in the group are different from each other state-na(3) - state not applicable ')
devShowAdaptive_copy = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 10), RDFAdaptiveCopy()).setLabel("devShowAdaptive-copy").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowAdaptive_copy.setStatus('mandatory')
if mibBuilder.loadTexts: devShowAdaptive_copy.setDescription('Adaptive copy state. Values are: disabled(0) - Adaptive Copy is Disabled wp-mode(1) - Adaptive Copy Write Pending Mode disk-mode(2) - Adaptive Copy Disk Mode mixed(3) - This state is set when the RDF modes of the devices in the group are different from each other ac-na(4) - Not Applicable ')
devShowAdaptive_copy_skew = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 11), UInt32()).setLabel("devShowAdaptive-copy-skew").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowAdaptive_copy_skew.setStatus('mandatory')
if mibBuilder.loadTexts: devShowAdaptive_copy_skew.setDescription('Number of invalid tracks when in Adaptive copy mode. ')
devShowNum_r1_invalid_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 12), UInt32()).setLabel("devShowNum-r1-invalid-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowNum_r1_invalid_tracks.setStatus('mandatory')
if mibBuilder.loadTexts: devShowNum_r1_invalid_tracks.setDescription('Number of invalid tracks invalid tracks on R1')
devShowNum_r2_invalid_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 13), UInt32()).setLabel("devShowNum-r2-invalid-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowNum_r2_invalid_tracks.setStatus('mandatory')
if mibBuilder.loadTexts: devShowNum_r2_invalid_tracks.setDescription('Number of invalid tracks invalid tracks on R2')
devShowDev_rdf_state = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 14), DeviceStatus()).setLabel("devShowDev-rdf-state").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowDev_rdf_state.setStatus('mandatory')
if mibBuilder.loadTexts: devShowDev_rdf_state.setDescription('The RDF state. Values are: ready(0) not-ready(1) write-disabled(2) not-applicable(3) mixed(4) ')
devShowRemote_dev_rdf_state = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 15), DeviceStatus()).setLabel("devShowRemote-dev-rdf-state").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowRemote_dev_rdf_state.setStatus('mandatory')
if mibBuilder.loadTexts: devShowRemote_dev_rdf_state.setDescription('The RDF device state. Values are: ready(0) not-ready(1) write-disabled(2) not-applicable(3) mixed(4) ')
devShowRdf_status = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 16), DeviceStatus()).setLabel("devShowRdf-status").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowRdf_status.setStatus('mandatory')
if mibBuilder.loadTexts: devShowRdf_status.setDescription('The RDF status. Values are: ready(0) not-ready(1) write-disabled(2) not-applicable(3) mixed(4) ')
devShowLink_domino = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 17), StateValues()).setLabel("devShowLink-domino").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowLink_domino.setStatus('mandatory')
if mibBuilder.loadTexts: devShowLink_domino.setDescription('The link domino state. Possible states are: enabled(0), disabled(1), mixed(2) - This state is set when the RDF modes of the devices in the group are different from each other state-na(3) - state not applicable ')
devShowPrevent_auto_link_recovery = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 18), StateValues()).setLabel("devShowPrevent-auto-link-recovery").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowPrevent_auto_link_recovery.setStatus('mandatory')
if mibBuilder.loadTexts: devShowPrevent_auto_link_recovery.setDescription('Prevent the automatic resumption of data copy across the RDF links as soon as the links have recovered. Possible states are: enabled(0), disabled(1), mixed(2) - This state is set when the RDF modes of the devices in the group are different from each other state-na(3) - state not applicable ')
devShowLink_config = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 19), RDFLinkConfig()).setLabel("devShowLink-config").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowLink_config.setStatus('mandatory')
if mibBuilder.loadTexts: devShowLink_config.setDescription('The RDF link configuration: Values are: escon(1), t3(2), na(3) ')
devShowSuspend_state = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 20), RDDFTransientState()).setLabel("devShowSuspend-state").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowSuspend_state.setStatus('mandatory')
if mibBuilder.loadTexts: devShowSuspend_state.setDescription('For R1 devices in a consistency group, will be set to OFFLINE or OFFLINE_PENDING if a device in the group experiences a link failure. Values are: transient-state-na(1) - state not applicable offline(2), offline_pend(3), online(4) ')
devShowConsistency_state = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 21), StateValues()).setLabel("devShowConsistency-state").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowConsistency_state.setStatus('mandatory')
if mibBuilder.loadTexts: devShowConsistency_state.setDescription('Indicates if this R1 device is a member of any consistency group. Possible states are: enabled(0), disabled(1), mixed(2) - This state is set when the RDF modes of the devices in the group are different from each other state-na(3) - state not applicable ')
devShowAdaptive_copy_wp_state = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 22), RDDFTransientState()).setLabel("devShowAdaptive-copy-wp-state").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowAdaptive_copy_wp_state.setStatus('mandatory')
if mibBuilder.loadTexts: devShowAdaptive_copy_wp_state.setDescription('The Adaptive Copy Write Pending state. Values are: transient-state-na(1) - state not applicable offline(2), offline_pend(3), online(4) ')
devShowPrevent_ra_online_upon_pwron = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 2, 1, 23), StateValues()).setLabel("devShowPrevent-ra-online-upon-pwron").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowPrevent_ra_online_upon_pwron.setStatus('mandatory')
if mibBuilder.loadTexts: devShowPrevent_ra_online_upon_pwron.setDescription("Prevent RA's from coming online after the Symmetrix is powered on. Possible states are: enabled(0), disabled(1), mixed(2) - This state is set when the RDF modes of the devices in the group are different from each other state-na(3) - state not applicable ")
devShowBCVInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 3), )
if mibBuilder.loadTexts: devShowBCVInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: devShowBCVInfoTable.setDescription('A table of Symmetrix BCV device configuration information for the indicated Symmetrix and device instance. The number of entries is given by the value of symDevListCount.')
devShowBCVInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 3, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "symDevListCount"))
if mibBuilder.loadTexts: devShowBCVInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: devShowBCVInfoEntry.setDescription('An entry containing objects for the Symmetrix BCV device configuration information for the specified Symmetrix and device.')
devShowDev_serial_id = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 3, 1, 1), DisplayString()).setLabel("devShowDev-serial-id").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowDev_serial_id.setStatus('mandatory')
if mibBuilder.loadTexts: devShowDev_serial_id.setDescription('Symmetrix device serial ID for the standard device in a BCV pair. If the device is a: BCV device in a BCV pair, this field is the serial ID of the standard device with which the BCV is paired. Standard device in a BCV pair, this field is the same as device_serial_id in SYMAPI_DEVICE_T. if the standard device that was never paired with a BCV device, this field is NULL ')
devShowDev_sym_devname = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 3, 1, 2), DisplayString()).setLabel("devShowDev-sym-devname").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowDev_sym_devname.setStatus('mandatory')
if mibBuilder.loadTexts: devShowDev_sym_devname.setDescription('Symmetrix device name/number for the standard device in a BCV pair. If the device is a: BCV device in a BCV pair, this is the device name/number of the standard device with which the BCV is paired. Standard device in a BCV pair, this is the same as sym_devname in SYMAPI_DEVICE_T. If the standard device that was never paired with a BCV device, this field is NULL ')
devShowDev_dgname = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 3, 1, 3), DisplayString()).setLabel("devShowDev-dgname").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowDev_dgname.setStatus('mandatory')
if mibBuilder.loadTexts: devShowDev_dgname.setDescription('Name of the device group that the standard device is a member. If the standard device is not a member of a device group, this field is NULL')
devShowBcvdev_serial_id = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 3, 1, 4), DisplayString()).setLabel("devShowBcvdev-serial-id").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowBcvdev_serial_id.setStatus('mandatory')
if mibBuilder.loadTexts: devShowBcvdev_serial_id.setDescription('Symmetrix device serial ID for the BCV device in a BCV pair. If the device is a: BCV device in a BCV pair, this is the same as device_serial_id in SYMAPI_DEVICE_T. Standard device in a BCV pair, this is the serial ID of the BCV device with which the standard device is paired. If the BCV device that was never paired with a standard device, this field is NULL ')
devShowBcvdev_sym_devname = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 3, 1, 5), DisplayString()).setLabel("devShowBcvdev-sym-devname").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowBcvdev_sym_devname.setStatus('mandatory')
if mibBuilder.loadTexts: devShowBcvdev_sym_devname.setDescription('Symmetrix device name/number for the BCV device in a BCV pair. If the device is a: BCV device in a BCV pair, this is the same as sym_devname in SYMAPI_DEVICE_T. Standard device in a BCV pair, this is the device name/number of the BCV device with which the standard device is paired. If the BCV device was never paired with a standard device, this field is NULL.')
devShowBcvdev_dgname = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 3, 1, 6), DisplayString()).setLabel("devShowBcvdev-dgname").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowBcvdev_dgname.setStatus('mandatory')
if mibBuilder.loadTexts: devShowBcvdev_dgname.setDescription('Name of the device group that the BCV device is associated with. If the BCV device is not associated with a device group, this field is NULL')
devShowBcv_pair_state = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 3, 1, 7), BCVState()).setLabel("devShowBcv-pair-state").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowBcv_pair_state.setStatus('mandatory')
if mibBuilder.loadTexts: devShowBcv_pair_state.setDescription(' never-established(0), in-progress(1), synchronous(2), split-in-progress(3), split-before-sync(4), split(5), split-no-incremental(6), restore-in-progress(7), restored(8), split-before-restore(9), invalid(10) ')
devShowNum_dev_invalid_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 3, 1, 8), UInt32()).setLabel("devShowNum-dev-invalid-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowNum_dev_invalid_tracks.setStatus('mandatory')
if mibBuilder.loadTexts: devShowNum_dev_invalid_tracks.setDescription('Number of invalid tracks on the standard device')
devShowNum_bcvdev_invalid_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 3, 1, 9), UInt32()).setLabel("devShowNum-bcvdev-invalid-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowNum_bcvdev_invalid_tracks.setStatus('mandatory')
if mibBuilder.loadTexts: devShowNum_bcvdev_invalid_tracks.setDescription('Number of invalid tracks on the BCV device')
devShowBcvdev_status = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 2, 2, 3, 1, 10), DeviceStatus()).setLabel("devShowBcvdev-status").setMaxAccess("readonly")
if mibBuilder.loadTexts: devShowBcvdev_status.setStatus('mandatory')
if mibBuilder.loadTexts: devShowBcvdev_status.setDescription('The BCV Device status. Values are: ready(0) not-ready(1) write-disabled(2) not-applicable(3) mixed(4) ')
symStatTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1), )
if mibBuilder.loadTexts: symStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: symStatTable.setDescription('A table of Symmetrix statistcs for the indicated Symmetrix instance. The number of entries is given by the value of discIndex.')
symStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"))
if mibBuilder.loadTexts: symStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: symStatEntry.setDescription('An entry containing objects for the Symmetrix statistics for the specified Symmetrix and device.')
symstatTime_stamp = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 1), TimeTicks()).setLabel("symstatTime-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatTime_stamp.setStatus('mandatory')
if mibBuilder.loadTexts: symstatTime_stamp.setDescription(' Time since these statistics were last collected')
symstatNum_rw_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 2), UInt32()).setLabel("symstatNum-rw-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_rw_reqs.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_rw_reqs.setDescription(' Total number of all read and write requests on the specified Symmetrix unit ')
symstatNum_read_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 3), UInt32()).setLabel("symstatNum-read-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_read_reqs.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_read_reqs.setDescription(' Number of all read requests on the specified Symmetrix unit ')
symstatNum_write_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 4), UInt32()).setLabel("symstatNum-write-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_write_reqs.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_write_reqs.setDescription(' Number of all write requests on the specified Symmetrix unit ')
symstatNum_rw_hits = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 5), UInt32()).setLabel("symstatNum-rw-hits").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_rw_hits.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_rw_hits.setDescription(' Total number of all read and write cache hits for all devices on the specified Symmetrix unit ')
symstatNum_read_hits = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 6), UInt32()).setLabel("symstatNum-read-hits").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_read_hits.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_read_hits.setDescription('Total number of cache read hits for all devices on the specified Symmetrix unit ')
symstatNum_write_hits = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 7), UInt32()).setLabel("symstatNum-write-hits").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_write_hits.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_write_hits.setDescription('Total number of cache write hits for all devices on the specified Symmetrix unit ')
symstatNum_blocks_read = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 12), UInt32()).setLabel("symstatNum-blocks-read").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_blocks_read.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_blocks_read.setDescription('Total number of (512 byte) blocks read for all devices on the specified Symmetrix unit ')
symstatNum_blocks_written = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 17), UInt32()).setLabel("symstatNum-blocks-written").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_blocks_written.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_blocks_written.setDescription('Total number of (512 byte) blocks written for all devices on the specified Symmetrix unit ')
symstatNum_seq_read_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 18), UInt32()).setLabel("symstatNum-seq-read-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_seq_read_reqs.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_seq_read_reqs.setDescription('Number of sequential read requests ')
symstatNum_prefetched_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 19), UInt32()).setLabel("symstatNum-prefetched-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_prefetched_tracks.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_prefetched_tracks.setDescription('Number of prefetched tracks ')
symstatNum_destaged_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 20), UInt32()).setLabel("symstatNum-destaged-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_destaged_tracks.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_destaged_tracks.setDescription('Number of destaged tracks ')
symstatNum_deferred_writes = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 21), UInt32()).setLabel("symstatNum-deferred-writes").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_deferred_writes.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_deferred_writes.setDescription('Number of deferred writes ')
symstatNum_delayed_dfw = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 22), UInt32()).setLabel("symstatNum-delayed-dfw").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_delayed_dfw.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_delayed_dfw.setDescription('Number of delayed deferred writes untils tracks are destaged. (reserved for EMC use only.) ')
symstatNum_wr_pend_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 23), UInt32()).setLabel("symstatNum-wr-pend-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_wr_pend_tracks.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_wr_pend_tracks.setDescription('Number of tracks waiting to be destaged from cache on to disk for the specified Symmetrix unit ')
symstatNum_format_pend_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 24), UInt32()).setLabel("symstatNum-format-pend-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_format_pend_tracks.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_format_pend_tracks.setDescription(' Number of formatted pending tracks. (reserved for EMC use only.) ')
symstatDevice_max_wp_limit = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 25), UInt32()).setLabel("symstatDevice-max-wp-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatDevice_max_wp_limit.setStatus('mandatory')
if mibBuilder.loadTexts: symstatDevice_max_wp_limit.setDescription('Maximum write pending limit for a device ')
symstatNum_sa_cdb_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 26), UInt32()).setLabel("symstatNum-sa-cdb-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_sa_cdb_reqs.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_sa_cdb_reqs.setDescription('Number of Command Descriptor Blocks (CDBs) sent to the Symmetrix unit. (Reads, writes, and inquiries are the types of commands sent in the CDBs.) ')
symstatNum_sa_rw_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 27), UInt32()).setLabel("symstatNum-sa-rw-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_sa_rw_reqs.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_sa_rw_reqs.setDescription('Total number of all read and write requests for all SCSI adapters (SAs) on the specified Symmetrix unit')
symstatNum_sa_read_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 28), UInt32()).setLabel("symstatNum-sa-read-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_sa_read_reqs.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_sa_read_reqs.setDescription('Total number of all read requests for all SCSI adapters (SAs) on the specified Symmetrix unit')
symstatNum_sa_write_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 29), UInt32()).setLabel("symstatNum-sa-write-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_sa_write_reqs.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_sa_write_reqs.setDescription('Total number of all write requests for all SCSI adapters (SAs) on the specified Symmetrix unit')
symstatNum_sa_rw_hits = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 30), UInt32()).setLabel("symstatNum-sa-rw-hits").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_sa_rw_hits.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_sa_rw_hits.setDescription('Total number of all read and write cache hits for all SCSI adapters (SAs) on the specified Symmetrix unit')
symstatNum_free_permacache_slots = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 31), UInt32()).setLabel("symstatNum-free-permacache-slots").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_free_permacache_slots.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_free_permacache_slots.setDescription('Total number of PermaCache slots that are available')
symstatNum_used_permacache_slots = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 1, 1, 32), UInt32()).setLabel("symstatNum-used-permacache-slots").setMaxAccess("readonly")
if mibBuilder.loadTexts: symstatNum_used_permacache_slots.setStatus('mandatory')
if mibBuilder.loadTexts: symstatNum_used_permacache_slots.setDescription('Total number of PermaCache slots that are used')
devStatTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 2), )
if mibBuilder.loadTexts: devStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: devStatTable.setDescription('A table of Symmetrix device statistics for the indicated Symmetrix and device instance. The number of entries is given by the value of symDevListCount.')
devStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 2, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "symDevListCount"))
if mibBuilder.loadTexts: devStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: devStatEntry.setDescription('An entry containing objects for the Symmetrix device statistics for the specified Symmetrix and device.')
devstatTime_stamp = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 2, 1, 1), TimeTicks()).setLabel("devstatTime-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: devstatTime_stamp.setStatus('mandatory')
if mibBuilder.loadTexts: devstatTime_stamp.setDescription(' Time since these statistics were last collected')
devstatNum_sym_timeslices = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 2, 1, 2), UInt32()).setLabel("devstatNum-sym-timeslices").setMaxAccess("readonly")
if mibBuilder.loadTexts: devstatNum_sym_timeslices.setStatus('mandatory')
if mibBuilder.loadTexts: devstatNum_sym_timeslices.setDescription(' Number of 1/2 seconds from reset until the Symmetrix internally snapshots the director counters. You must use this field when computing a rate.')
devstatNum_rw_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 2, 1, 3), UInt32()).setLabel("devstatNum-rw-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: devstatNum_rw_reqs.setStatus('mandatory')
if mibBuilder.loadTexts: devstatNum_rw_reqs.setDescription(' Total number of I/Os for the device')
devstatNum_read_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 2, 1, 4), UInt32()).setLabel("devstatNum-read-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: devstatNum_read_reqs.setStatus('mandatory')
if mibBuilder.loadTexts: devstatNum_read_reqs.setDescription(' Total number of read requests for the device')
devstatNum_write_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 2, 1, 5), UInt32()).setLabel("devstatNum-write-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: devstatNum_write_reqs.setStatus('mandatory')
if mibBuilder.loadTexts: devstatNum_write_reqs.setDescription(' Total number of write requests for the device ')
devstatNum_rw_hits = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 2, 1, 6), UInt32()).setLabel("devstatNum-rw-hits").setMaxAccess("readonly")
if mibBuilder.loadTexts: devstatNum_rw_hits.setStatus('mandatory')
if mibBuilder.loadTexts: devstatNum_rw_hits.setDescription(' Total number of cache hits (read & write) for the device ')
devstatNum_read_hits = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 2, 1, 7), UInt32()).setLabel("devstatNum-read-hits").setMaxAccess("readonly")
if mibBuilder.loadTexts: devstatNum_read_hits.setStatus('mandatory')
if mibBuilder.loadTexts: devstatNum_read_hits.setDescription(' Total number of cache read hits for the device ')
devstatNum_write_hits = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 2, 1, 8), UInt32()).setLabel("devstatNum-write-hits").setMaxAccess("readonly")
if mibBuilder.loadTexts: devstatNum_write_hits.setStatus('mandatory')
if mibBuilder.loadTexts: devstatNum_write_hits.setDescription(' Total number of cache write hits for the device ')
devstatNum_blocks_read = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 2, 1, 13), UInt32()).setLabel("devstatNum-blocks-read").setMaxAccess("readonly")
if mibBuilder.loadTexts: devstatNum_blocks_read.setStatus('mandatory')
if mibBuilder.loadTexts: devstatNum_blocks_read.setDescription(' Total number of (512 byte) blocks read for the device ')
devstatNum_blocks_written = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 2, 1, 18), UInt32()).setLabel("devstatNum-blocks-written").setMaxAccess("readonly")
if mibBuilder.loadTexts: devstatNum_blocks_written.setStatus('mandatory')
if mibBuilder.loadTexts: devstatNum_blocks_written.setDescription(' Total number of (512 byte) blocks written for the device ')
devstatNum_seq_read_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 2, 1, 19), UInt32()).setLabel("devstatNum-seq-read-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: devstatNum_seq_read_reqs.setStatus('mandatory')
if mibBuilder.loadTexts: devstatNum_seq_read_reqs.setDescription(' Total number of number of sequential read reqs for the device ')
devstatNum_prefetched_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 2, 1, 20), UInt32()).setLabel("devstatNum-prefetched-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: devstatNum_prefetched_tracks.setStatus('mandatory')
if mibBuilder.loadTexts: devstatNum_prefetched_tracks.setDescription(' Total number of prefetched tracks for the device ')
devstatNum_destaged_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 2, 1, 21), UInt32()).setLabel("devstatNum-destaged-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: devstatNum_destaged_tracks.setStatus('mandatory')
if mibBuilder.loadTexts: devstatNum_destaged_tracks.setDescription(' Total number of destaged tracks for the device ')
devstatNum_deferred_writes = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 2, 1, 22), UInt32()).setLabel("devstatNum-deferred-writes").setMaxAccess("readonly")
if mibBuilder.loadTexts: devstatNum_deferred_writes.setStatus('mandatory')
if mibBuilder.loadTexts: devstatNum_deferred_writes.setDescription(' Total number of deferred writes for the device ')
devstatNum_delayed_dfw = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 2, 1, 23), UInt32()).setLabel("devstatNum-delayed-dfw").setMaxAccess("readonly")
if mibBuilder.loadTexts: devstatNum_delayed_dfw.setStatus('mandatory')
if mibBuilder.loadTexts: devstatNum_delayed_dfw.setDescription(' Total number of delayed deferred writes until track destaged')
devstatNum_wp_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 2, 1, 24), UInt32()).setLabel("devstatNum-wp-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: devstatNum_wp_tracks.setStatus('mandatory')
if mibBuilder.loadTexts: devstatNum_wp_tracks.setDescription(' Total number of write pending tracks for the device')
devstatNum_format_pend_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 2, 1, 25), UInt32()).setLabel("devstatNum-format-pend-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: devstatNum_format_pend_tracks.setStatus('mandatory')
if mibBuilder.loadTexts: devstatNum_format_pend_tracks.setDescription(' Total number of format pending tracks for the device')
devstatDevice_max_wp_limit = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 2, 1, 26), UInt32()).setLabel("devstatDevice-max-wp-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: devstatDevice_max_wp_limit.setStatus('mandatory')
if mibBuilder.loadTexts: devstatDevice_max_wp_limit.setDescription(' Device max write pending limit')
pDevStatTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 3), )
if mibBuilder.loadTexts: pDevStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: pDevStatTable.setDescription('A table of Symmetrix phisical device statistics for the indicated Symmetrix and device instance. The number of entries is given by the value of symPDevListCount.')
pDevStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 3, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "symPDevListCount"))
if mibBuilder.loadTexts: pDevStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pDevStatEntry.setDescription('An entry containing objects for the Symmetrix physical device statistics for the specified Symmetrix and device.')
pdevstatTime_stamp = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 3, 1, 1), TimeTicks()).setLabel("pdevstatTime-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: pdevstatTime_stamp.setStatus('mandatory')
if mibBuilder.loadTexts: pdevstatTime_stamp.setDescription(' Time since these statistics were last collected')
pdevstatNum_sym_timeslices = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 3, 1, 2), UInt32()).setLabel("pdevstatNum-sym-timeslices").setMaxAccess("readonly")
if mibBuilder.loadTexts: pdevstatNum_sym_timeslices.setStatus('mandatory')
if mibBuilder.loadTexts: pdevstatNum_sym_timeslices.setDescription(' Number of 1/2 seconds from reset until the Symmetrix internally snapshots the director counters. You must use this field when computing a rate.')
pdevstatNum_rw_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 3, 1, 3), UInt32()).setLabel("pdevstatNum-rw-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: pdevstatNum_rw_reqs.setStatus('mandatory')
if mibBuilder.loadTexts: pdevstatNum_rw_reqs.setDescription(' Total number of I/Os for the device')
pdevstatNum_read_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 3, 1, 4), UInt32()).setLabel("pdevstatNum-read-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: pdevstatNum_read_reqs.setStatus('mandatory')
if mibBuilder.loadTexts: pdevstatNum_read_reqs.setDescription(' Total number of read requests for the device')
pdevstatNum_write_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 3, 1, 5), UInt32()).setLabel("pdevstatNum-write-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: pdevstatNum_write_reqs.setStatus('mandatory')
if mibBuilder.loadTexts: pdevstatNum_write_reqs.setDescription(' Total number of write requests for the device ')
pdevstatNum_rw_hits = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 3, 1, 6), UInt32()).setLabel("pdevstatNum-rw-hits").setMaxAccess("readonly")
if mibBuilder.loadTexts: pdevstatNum_rw_hits.setStatus('mandatory')
if mibBuilder.loadTexts: pdevstatNum_rw_hits.setDescription(' Total number of cache hits (read & write) for the device ')
pdevstatNum_read_hits = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 3, 1, 7), UInt32()).setLabel("pdevstatNum-read-hits").setMaxAccess("readonly")
if mibBuilder.loadTexts: pdevstatNum_read_hits.setStatus('mandatory')
if mibBuilder.loadTexts: pdevstatNum_read_hits.setDescription(' Total number of cache read hits for the device ')
pdevstatNum_write_hits = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 3, 1, 8), UInt32()).setLabel("pdevstatNum-write-hits").setMaxAccess("readonly")
if mibBuilder.loadTexts: pdevstatNum_write_hits.setStatus('mandatory')
if mibBuilder.loadTexts: pdevstatNum_write_hits.setDescription(' Total number of cache write hits for the device ')
pdevstatNum_blocks_read = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 3, 1, 13), UInt32()).setLabel("pdevstatNum-blocks-read").setMaxAccess("readonly")
if mibBuilder.loadTexts: pdevstatNum_blocks_read.setStatus('mandatory')
if mibBuilder.loadTexts: pdevstatNum_blocks_read.setDescription(' Total number of (512 byte) blocks read for the device ')
pdevstatNum_blocks_written = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 3, 1, 18), UInt32()).setLabel("pdevstatNum-blocks-written").setMaxAccess("readonly")
if mibBuilder.loadTexts: pdevstatNum_blocks_written.setStatus('mandatory')
if mibBuilder.loadTexts: pdevstatNum_blocks_written.setDescription(' Total number of (512 byte) blocks written for the device ')
pdevstatNum_seq_read_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 3, 1, 19), UInt32()).setLabel("pdevstatNum-seq-read-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: pdevstatNum_seq_read_reqs.setStatus('mandatory')
if mibBuilder.loadTexts: pdevstatNum_seq_read_reqs.setDescription(' Total number of number of sequential read reqs for the device ')
pdevstatNum_prefetched_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 3, 1, 20), UInt32()).setLabel("pdevstatNum-prefetched-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: pdevstatNum_prefetched_tracks.setStatus('mandatory')
if mibBuilder.loadTexts: pdevstatNum_prefetched_tracks.setDescription(' Total number of prefetched tracks for the device ')
pdevstatNum_destaged_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 3, 1, 21), UInt32()).setLabel("pdevstatNum-destaged-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: pdevstatNum_destaged_tracks.setStatus('mandatory')
if mibBuilder.loadTexts: pdevstatNum_destaged_tracks.setDescription(' Total number of destaged tracks for the device ')
pdevstatNum_deferred_writes = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 3, 1, 22), UInt32()).setLabel("pdevstatNum-deferred-writes").setMaxAccess("readonly")
if mibBuilder.loadTexts: pdevstatNum_deferred_writes.setStatus('mandatory')
if mibBuilder.loadTexts: pdevstatNum_deferred_writes.setDescription(' Total number of deferred writes for the device ')
pdevstatNum_delayed_dfw = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 3, 1, 23), UInt32()).setLabel("pdevstatNum-delayed-dfw").setMaxAccess("readonly")
if mibBuilder.loadTexts: pdevstatNum_delayed_dfw.setStatus('mandatory')
if mibBuilder.loadTexts: pdevstatNum_delayed_dfw.setDescription(' Total number of delayed deferred writes until track destaged')
pdevstatNum_wp_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 3, 1, 24), UInt32()).setLabel("pdevstatNum-wp-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: pdevstatNum_wp_tracks.setStatus('mandatory')
if mibBuilder.loadTexts: pdevstatNum_wp_tracks.setDescription(' Total number of write pending tracks for the device')
pdevstatNum_format_pend_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 3, 1, 25), UInt32()).setLabel("pdevstatNum-format-pend-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: pdevstatNum_format_pend_tracks.setStatus('mandatory')
if mibBuilder.loadTexts: pdevstatNum_format_pend_tracks.setDescription(' Total number of format pending tracks for the device')
pdevstatDevice_max_wp_limit = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 3, 1, 26), UInt32()).setLabel("pdevstatDevice-max-wp-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: pdevstatDevice_max_wp_limit.setStatus('mandatory')
if mibBuilder.loadTexts: pdevstatDevice_max_wp_limit.setDescription(' Device max write pending limit')
lDevStatTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 4), )
if mibBuilder.loadTexts: lDevStatTable.setStatus('obsolete')
if mibBuilder.loadTexts: lDevStatTable.setDescription('A table of Symmetrix logical device statistics for the indicated Symmetrix and device instance. The number of entries is given by the value of symLDevListCount.')
lDevStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 4, 1), ).setIndexNames((0, "EMC-MIB", "symDgListCount"), (0, "EMC-MIB", "symLDevListCount"))
if mibBuilder.loadTexts: lDevStatEntry.setStatus('obsolete')
if mibBuilder.loadTexts: lDevStatEntry.setDescription('An entry containing objects for the Symmetrix logical device statistics for the specified Symmetrix and device.')
ldevstatTime_stamp = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 4, 1, 1), TimeTicks()).setLabel("ldevstatTime-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: ldevstatTime_stamp.setStatus('obsolete')
if mibBuilder.loadTexts: ldevstatTime_stamp.setDescription(' Time since these statistics were last collected')
ldevstatNum_sym_timeslices = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 4, 1, 2), UInt32()).setLabel("ldevstatNum-sym-timeslices").setMaxAccess("readonly")
if mibBuilder.loadTexts: ldevstatNum_sym_timeslices.setStatus('obsolete')
if mibBuilder.loadTexts: ldevstatNum_sym_timeslices.setDescription(' Number of 1/2 seconds from reset until the Symmetrix internally snapshots the director counters. You must use this field when computing a rate.')
ldevstatNum_rw_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 4, 1, 3), UInt32()).setLabel("ldevstatNum-rw-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: ldevstatNum_rw_reqs.setStatus('obsolete')
if mibBuilder.loadTexts: ldevstatNum_rw_reqs.setDescription(' Total number of I/Os for the device')
ldevstatNum_read_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 4, 1, 4), UInt32()).setLabel("ldevstatNum-read-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: ldevstatNum_read_reqs.setStatus('obsolete')
if mibBuilder.loadTexts: ldevstatNum_read_reqs.setDescription(' Total number of read requests for the device')
ldevstatNum_write_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 4, 1, 5), UInt32()).setLabel("ldevstatNum-write-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: ldevstatNum_write_reqs.setStatus('obsolete')
if mibBuilder.loadTexts: ldevstatNum_write_reqs.setDescription(' Total number of write requests for the device ')
ldevstatNum_rw_hits = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 4, 1, 6), UInt32()).setLabel("ldevstatNum-rw-hits").setMaxAccess("readonly")
if mibBuilder.loadTexts: ldevstatNum_rw_hits.setStatus('obsolete')
if mibBuilder.loadTexts: ldevstatNum_rw_hits.setDescription(' Total number of cache hits (read & write) for the device ')
ldevstatNum_read_hits = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 4, 1, 7), UInt32()).setLabel("ldevstatNum-read-hits").setMaxAccess("readonly")
if mibBuilder.loadTexts: ldevstatNum_read_hits.setStatus('obsolete')
if mibBuilder.loadTexts: ldevstatNum_read_hits.setDescription(' Total number of cache read hits for the device ')
ldevstatNum_write_hits = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 4, 1, 8), UInt32()).setLabel("ldevstatNum-write-hits").setMaxAccess("readonly")
if mibBuilder.loadTexts: ldevstatNum_write_hits.setStatus('obsolete')
if mibBuilder.loadTexts: ldevstatNum_write_hits.setDescription(' Total number of cache write hits for the device ')
ldevstatNum_blocks_read = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 4, 1, 13), UInt32()).setLabel("ldevstatNum-blocks-read").setMaxAccess("readonly")
if mibBuilder.loadTexts: ldevstatNum_blocks_read.setStatus('obsolete')
if mibBuilder.loadTexts: ldevstatNum_blocks_read.setDescription(' Total number of (512 byte) blocks read for the device ')
ldevstatNum_blocks_written = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 4, 1, 18), UInt32()).setLabel("ldevstatNum-blocks-written").setMaxAccess("readonly")
if mibBuilder.loadTexts: ldevstatNum_blocks_written.setStatus('obsolete')
if mibBuilder.loadTexts: ldevstatNum_blocks_written.setDescription(' Total number of (512 byte) blocks written for the device ')
ldevstatNum_seq_read_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 4, 1, 19), UInt32()).setLabel("ldevstatNum-seq-read-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: ldevstatNum_seq_read_reqs.setStatus('obsolete')
if mibBuilder.loadTexts: ldevstatNum_seq_read_reqs.setDescription(' Total number of number of sequential read reqs for the device ')
ldevstatNum_prefetched_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 4, 1, 20), UInt32()).setLabel("ldevstatNum-prefetched-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: ldevstatNum_prefetched_tracks.setStatus('obsolete')
if mibBuilder.loadTexts: ldevstatNum_prefetched_tracks.setDescription(' Total number of prefetched tracks for the device ')
ldevstatNum_destaged_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 4, 1, 21), UInt32()).setLabel("ldevstatNum-destaged-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: ldevstatNum_destaged_tracks.setStatus('obsolete')
if mibBuilder.loadTexts: ldevstatNum_destaged_tracks.setDescription(' Total number of destaged tracks for the device ')
ldevstatNum_deferred_writes = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 4, 1, 22), UInt32()).setLabel("ldevstatNum-deferred-writes").setMaxAccess("readonly")
if mibBuilder.loadTexts: ldevstatNum_deferred_writes.setStatus('obsolete')
if mibBuilder.loadTexts: ldevstatNum_deferred_writes.setDescription(' Total number of deferred writes for the device ')
ldevstatNum_delayed_dfw = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 4, 1, 23), UInt32()).setLabel("ldevstatNum-delayed-dfw").setMaxAccess("readonly")
if mibBuilder.loadTexts: ldevstatNum_delayed_dfw.setStatus('obsolete')
if mibBuilder.loadTexts: ldevstatNum_delayed_dfw.setDescription(' Total number of delayed deferred writes until track destaged')
ldevstatNum_wp_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 4, 1, 24), UInt32()).setLabel("ldevstatNum-wp-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: ldevstatNum_wp_tracks.setStatus('obsolete')
if mibBuilder.loadTexts: ldevstatNum_wp_tracks.setDescription(' Total number of write pending tracks for the device')
ldevstatNum_format_pend_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 4, 1, 25), UInt32()).setLabel("ldevstatNum-format-pend-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: ldevstatNum_format_pend_tracks.setStatus('obsolete')
if mibBuilder.loadTexts: ldevstatNum_format_pend_tracks.setDescription(' Total number of format pending tracks for the device')
ldevstatDevice_max_wp_limit = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 4, 1, 26), UInt32()).setLabel("ldevstatDevice-max-wp-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: ldevstatDevice_max_wp_limit.setStatus('obsolete')
if mibBuilder.loadTexts: ldevstatDevice_max_wp_limit.setDescription(' Device max write pending limit')
dgStatTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 5), )
if mibBuilder.loadTexts: dgStatTable.setStatus('obsolete')
if mibBuilder.loadTexts: dgStatTable.setDescription('A table of Symmetrix device group statistics for the indicated device group instance. The number of entries is given by the value of symDgListCount.')
dgStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 5, 1), ).setIndexNames((0, "EMC-MIB", "symDgListCount"))
if mibBuilder.loadTexts: dgStatEntry.setStatus('obsolete')
if mibBuilder.loadTexts: dgStatEntry.setDescription('An entry containing objects for the device group statistics for the specified device group.')
dgstatTime_stamp = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 5, 1, 1), TimeTicks()).setLabel("dgstatTime-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: dgstatTime_stamp.setStatus('obsolete')
if mibBuilder.loadTexts: dgstatTime_stamp.setDescription(' Time since these statistics were last collected')
dgstatNum_sym_timeslices = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 5, 1, 2), UInt32()).setLabel("dgstatNum-sym-timeslices").setMaxAccess("readonly")
if mibBuilder.loadTexts: dgstatNum_sym_timeslices.setStatus('obsolete')
if mibBuilder.loadTexts: dgstatNum_sym_timeslices.setDescription(' Number of 1/2 seconds from reset until the Symmetrix internally snapshots the director counters. You must use this field when computing a rate.')
dgstatNum_rw_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 5, 1, 3), UInt32()).setLabel("dgstatNum-rw-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: dgstatNum_rw_reqs.setStatus('obsolete')
if mibBuilder.loadTexts: dgstatNum_rw_reqs.setDescription(' Total number of I/Os for the device group')
dgstatNum_read_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 5, 1, 4), UInt32()).setLabel("dgstatNum-read-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: dgstatNum_read_reqs.setStatus('obsolete')
if mibBuilder.loadTexts: dgstatNum_read_reqs.setDescription(' Total number of read requests for the device group')
dgstatNum_write_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 5, 1, 5), UInt32()).setLabel("dgstatNum-write-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: dgstatNum_write_reqs.setStatus('obsolete')
if mibBuilder.loadTexts: dgstatNum_write_reqs.setDescription(' Total number of write requests for the device group ')
dgstatNum_rw_hits = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 5, 1, 6), UInt32()).setLabel("dgstatNum-rw-hits").setMaxAccess("readonly")
if mibBuilder.loadTexts: dgstatNum_rw_hits.setStatus('obsolete')
if mibBuilder.loadTexts: dgstatNum_rw_hits.setDescription(' Total number of cache hits (read & write) for the device group ')
dgstatNum_read_hits = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 5, 1, 7), UInt32()).setLabel("dgstatNum-read-hits").setMaxAccess("readonly")
if mibBuilder.loadTexts: dgstatNum_read_hits.setStatus('obsolete')
if mibBuilder.loadTexts: dgstatNum_read_hits.setDescription(' Total number of cache read hits for the device group ')
dgstatNum_write_hits = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 5, 1, 8), UInt32()).setLabel("dgstatNum-write-hits").setMaxAccess("readonly")
if mibBuilder.loadTexts: dgstatNum_write_hits.setStatus('obsolete')
if mibBuilder.loadTexts: dgstatNum_write_hits.setDescription(' Total number of cache write hits for the device group ')
dgstatNum_blocks_read = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 5, 1, 13), UInt32()).setLabel("dgstatNum-blocks-read").setMaxAccess("readonly")
if mibBuilder.loadTexts: dgstatNum_blocks_read.setStatus('obsolete')
if mibBuilder.loadTexts: dgstatNum_blocks_read.setDescription(' Total number of (512 byte) blocks read for the device group ')
dgstatNum_blocks_written = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 5, 1, 18), UInt32()).setLabel("dgstatNum-blocks-written").setMaxAccess("readonly")
if mibBuilder.loadTexts: dgstatNum_blocks_written.setStatus('obsolete')
if mibBuilder.loadTexts: dgstatNum_blocks_written.setDescription(' Total number of (512 byte) blocks written for the device group ')
dgstatNum_seq_read_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 5, 1, 19), UInt32()).setLabel("dgstatNum-seq-read-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: dgstatNum_seq_read_reqs.setStatus('obsolete')
if mibBuilder.loadTexts: dgstatNum_seq_read_reqs.setDescription(' Total number of number of sequential read reqs for the device group ')
dgstatNum_prefetched_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 5, 1, 20), UInt32()).setLabel("dgstatNum-prefetched-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: dgstatNum_prefetched_tracks.setStatus('obsolete')
if mibBuilder.loadTexts: dgstatNum_prefetched_tracks.setDescription(' Total number of prefetched tracks for the device group ')
dgstatNum_destaged_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 5, 1, 21), UInt32()).setLabel("dgstatNum-destaged-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: dgstatNum_destaged_tracks.setStatus('obsolete')
if mibBuilder.loadTexts: dgstatNum_destaged_tracks.setDescription(' Total number of destaged tracks for the device group ')
dgstatNum_deferred_writes = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 5, 1, 22), UInt32()).setLabel("dgstatNum-deferred-writes").setMaxAccess("readonly")
if mibBuilder.loadTexts: dgstatNum_deferred_writes.setStatus('obsolete')
if mibBuilder.loadTexts: dgstatNum_deferred_writes.setDescription(' Total number of deferred writes for the device group ')
dgstatNum_delayed_dfw = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 5, 1, 23), UInt32()).setLabel("dgstatNum-delayed-dfw").setMaxAccess("readonly")
if mibBuilder.loadTexts: dgstatNum_delayed_dfw.setStatus('obsolete')
if mibBuilder.loadTexts: dgstatNum_delayed_dfw.setDescription(' Total number of delayed deferred writes until track destaged')
dgstatNum_wp_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 5, 1, 24), UInt32()).setLabel("dgstatNum-wp-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: dgstatNum_wp_tracks.setStatus('obsolete')
if mibBuilder.loadTexts: dgstatNum_wp_tracks.setDescription(' Total number of write pending tracks for the device group')
dgstatNum_format_pend_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 5, 1, 25), UInt32()).setLabel("dgstatNum-format-pend-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: dgstatNum_format_pend_tracks.setStatus('obsolete')
if mibBuilder.loadTexts: dgstatNum_format_pend_tracks.setDescription(' Total number of format pending tracks for the device group')
dgstatdevice_max_wp_limit = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 5, 1, 26), UInt32()).setLabel("dgstatdevice-max-wp-limit").setMaxAccess("readonly")
if mibBuilder.loadTexts: dgstatdevice_max_wp_limit.setStatus('obsolete')
if mibBuilder.loadTexts: dgstatdevice_max_wp_limit.setDescription(' Device group max write pending limit')
directorStatTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 6), )
if mibBuilder.loadTexts: directorStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: directorStatTable.setDescription('A table of Symmetrix director statistics for the indicated Symmetrix and director instance. The number of entries is given by the value of symShowDirectorCount.')
directorStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 6, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "symShowDirectorCount"))
if mibBuilder.loadTexts: directorStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: directorStatEntry.setDescription('An entry containing objects for the Symmetrix director statistics for the specified Symmetrix and director.')
dirstatTime_stamp = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 6, 1, 1), TimeTicks()).setLabel("dirstatTime-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatTime_stamp.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatTime_stamp.setDescription(' Time since these statistics were last collected')
dirstatNum_sym_timeslices = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 6, 1, 2), UInt32()).setLabel("dirstatNum-sym-timeslices").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatNum_sym_timeslices.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatNum_sym_timeslices.setDescription(' Number of 1/2 seconds from reset until the Symmetrix internally snapshots the director counters. You must use this field when computing a rate.')
dirstatNum_rw_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 6, 1, 3), UInt32()).setLabel("dirstatNum-rw-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatNum_rw_reqs.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatNum_rw_reqs.setDescription(' Total number of I/Os for the device')
dirstatNum_read_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 6, 1, 4), UInt32()).setLabel("dirstatNum-read-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatNum_read_reqs.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatNum_read_reqs.setDescription(' Total number of read requests for the device')
dirstatNum_write_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 6, 1, 5), UInt32()).setLabel("dirstatNum-write-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatNum_write_reqs.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatNum_write_reqs.setDescription(' Total number of write requests for the device ')
dirstatNum_rw_hits = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 6, 1, 6), UInt32()).setLabel("dirstatNum-rw-hits").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatNum_rw_hits.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatNum_rw_hits.setDescription(' Total number of cache hits (read & write) for the device ')
dirstatNum_permacache_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 6, 1, 7), UInt32()).setLabel("dirstatNum-permacache-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatNum_permacache_reqs.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatNum_permacache_reqs.setDescription(' Total number of cache read hits for the device ')
dirstatNum_ios = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 6, 1, 8), UInt32()).setLabel("dirstatNum-ios").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatNum_ios.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatNum_ios.setDescription(' Total number of cache write hits for the device ')
saDirStatTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 7), )
if mibBuilder.loadTexts: saDirStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: saDirStatTable.setDescription('A table of Symmetrix SA director statistics for the indicated Symmetrix and director instance. The number of entries is given by the value of symShowDirectorCount.')
saDirStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 7, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "symShowDirectorCount"))
if mibBuilder.loadTexts: saDirStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: saDirStatEntry.setDescription('An entry containing objects for the Symmetrix SA director statistics for the specified Symmetrix and director.')
dirstatSANum_read_misses = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 7, 1, 1), UInt32()).setLabel("dirstatSANum-read-misses").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatSANum_read_misses.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatSANum_read_misses.setDescription(' Total number of cache read misses')
dirstatSANum_slot_collisions = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 7, 1, 2), UInt32()).setLabel("dirstatSANum-slot-collisions").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatSANum_slot_collisions.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatSANum_slot_collisions.setDescription(' Total number of cache slot collisions')
dirstatSANum_system_wp_disconnects = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 7, 1, 3), UInt32()).setLabel("dirstatSANum-system-wp-disconnects").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatSANum_system_wp_disconnects.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatSANum_system_wp_disconnects.setDescription('Total number of system write pending disconnects. The limit for the system parameter for maximum number of write pendings was exceeded.')
dirstatSANum_device_wp_disconnects = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 7, 1, 4), UInt32()).setLabel("dirstatSANum-device-wp-disconnects").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatSANum_device_wp_disconnects.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatSANum_device_wp_disconnects.setDescription('Total number of device write pending disconnects. The limit for the device parameter for maximum number of write pendings was exceeded.')
daDirStatTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 8), )
if mibBuilder.loadTexts: daDirStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: daDirStatTable.setDescription('A table of Symmetrix DA director statistics for the indicated Symmetrix and director instance. The number of entries is given by the value of symShowDirectorCount.')
daDirStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 8, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "symShowDirectorCount"))
if mibBuilder.loadTexts: daDirStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: daDirStatEntry.setDescription('An entry containing objects for the Symmetrix DA director statistics for the specified Symmetrix and director.')
dirstatDANum_pf_tracks = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 8, 1, 1), UInt32()).setLabel("dirstatDANum-pf-tracks").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatDANum_pf_tracks.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatDANum_pf_tracks.setDescription(' The number of prefetched tracks. Remember that cache may contain vestigial read or written tracks.')
dirstatDANum_pf_tracks_used = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 8, 1, 2), UInt32()).setLabel("dirstatDANum-pf-tracks-used").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatDANum_pf_tracks_used.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatDANum_pf_tracks_used.setDescription('The number of prefetched tracks used to satisfy read/write requests')
dirstatDANum_pf_tracks_unused = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 8, 1, 3), UInt32()).setLabel("dirstatDANum-pf-tracks-unused").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatDANum_pf_tracks_unused.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatDANum_pf_tracks_unused.setDescription('The number of prefetched tracks unused and replaced by another.')
dirstatDANum_pf_short_misses = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 8, 1, 4), UInt32()).setLabel("dirstatDANum-pf-short-misses").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatDANum_pf_short_misses.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatDANum_pf_short_misses.setDescription('The number of tracks already being prefetched when a read/write request for that track occurred.')
dirstatDANum_pf_long_misses = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 8, 1, 5), UInt32()).setLabel("dirstatDANum-pf-long-misses").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatDANum_pf_long_misses.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatDANum_pf_long_misses.setDescription('The number of tracks requiring a complete fetch when a read/write request for that track occurred.')
dirstatDANum_pf_restarts = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 8, 1, 6), UInt32()).setLabel("dirstatDANum-pf-restarts").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatDANum_pf_restarts.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatDANum_pf_restarts.setDescription('The number of times that a prefetch task needed to be restarted.')
dirstatDANum_pf_mismatches = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 8, 1, 7), UInt32()).setLabel("dirstatDANum-pf-mismatches").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatDANum_pf_mismatches.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatDANum_pf_mismatches.setDescription('The number of times a prefetch task needed to be canceled.')
raDirStatTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 9), )
if mibBuilder.loadTexts: raDirStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: raDirStatTable.setDescription('A table of Symmetrix RA director statistics for the indicated Symmetrix and director instance. The number of entries is given by the value of symShowDirectorCount.')
raDirStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 9, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "symShowDirectorCount"))
if mibBuilder.loadTexts: raDirStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raDirStatEntry.setDescription('An entry containing objects for the Symmetrix RA director statistics for the specified Symmetrix and director.')
dirstatRANum_read_misses = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 9, 1, 1), UInt32()).setLabel("dirstatRANum-read-misses").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatRANum_read_misses.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatRANum_read_misses.setDescription(' Total number of cache read misses')
dirstatRANum_slot_collisions = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 9, 1, 2), UInt32()).setLabel("dirstatRANum-slot-collisions").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatRANum_slot_collisions.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatRANum_slot_collisions.setDescription(' Total number of cache slot collisions')
dirstatRANum_system_wp_disconnects = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 9, 1, 3), UInt32()).setLabel("dirstatRANum-system-wp-disconnects").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatRANum_system_wp_disconnects.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatRANum_system_wp_disconnects.setDescription('Total number of system write pending disconnects. The limit for the system parameter for maximum number of write pendings was exceeded.')
dirstatRANum_device_wp_disconnects = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 9, 1, 4), UInt32()).setLabel("dirstatRANum-device-wp-disconnects").setMaxAccess("readonly")
if mibBuilder.loadTexts: dirstatRANum_device_wp_disconnects.setStatus('mandatory')
if mibBuilder.loadTexts: dirstatRANum_device_wp_disconnects.setDescription('Total number of device write pending disconnects. The limit for the device parameter for maximum number of write pendings was exceeded.')
dirStatPortCountTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 10, 1), )
if mibBuilder.loadTexts: dirStatPortCountTable.setStatus('mandatory')
if mibBuilder.loadTexts: dirStatPortCountTable.setDescription('A list of the number of available ports for the given Symmetrix and director instance. The number of entries is given by the value of symShowDirectorCount.')
dirStatPortCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 10, 1, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "symShowDirectorCount"))
if mibBuilder.loadTexts: dirStatPortCountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dirStatPortCountEntry.setDescription('An entry containing objects for the number of available ports for the specified Symmetrix and director')
dirPortStatPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dirPortStatPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: dirPortStatPortCount.setDescription('The number of entries in the dirPortStatTable table for the indicated Symmetrix and director instance')
dirPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 10, 2), )
if mibBuilder.loadTexts: dirPortStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: dirPortStatTable.setDescription('A table of Symmetrix director statistics for the indicated Symmetrix, director and port instance. The number of entries is given by the value dirPortStatPortCount.')
dirPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 10, 2, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "symShowDirectorCount"), (0, "EMC-MIB", "dirPortStatPortCount"))
if mibBuilder.loadTexts: dirPortStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dirPortStatEntry.setDescription('An entry containing objects for the Symmetrix director port statistics for the specified Symmetrix, director, and port.')
portstatTime_stamp = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 10, 2, 1, 1), TimeTicks()).setLabel("portstatTime-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: portstatTime_stamp.setStatus('mandatory')
if mibBuilder.loadTexts: portstatTime_stamp.setDescription(' Time since these statistics were last collected')
portstatNum_sym_timeslices = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 10, 2, 1, 2), UInt32()).setLabel("portstatNum-sym-timeslices").setMaxAccess("readonly")
if mibBuilder.loadTexts: portstatNum_sym_timeslices.setStatus('mandatory')
if mibBuilder.loadTexts: portstatNum_sym_timeslices.setDescription(' Number of 1/2 seconds from reset until the Symmetrix internally snapshots the director counters. You must use this field when computing a rate.')
portstatNum_rw_reqs = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 10, 2, 1, 3), UInt32()).setLabel("portstatNum-rw-reqs").setMaxAccess("readonly")
if mibBuilder.loadTexts: portstatNum_rw_reqs.setStatus('mandatory')
if mibBuilder.loadTexts: portstatNum_rw_reqs.setDescription('The number of I/O requests (reads and writes) handled by the front-end port. ')
portstatNum_blocks_read_and_written = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 6, 3, 10, 2, 1, 4), UInt32()).setLabel("portstatNum-blocks-read-and-written").setMaxAccess("readonly")
if mibBuilder.loadTexts: portstatNum_blocks_read_and_written.setStatus('mandatory')
if mibBuilder.loadTexts: portstatNum_blocks_read_and_written.setDescription('The number of blocks read and written by the front-end port ')
symmEventMaxEvents = MibScalar((1, 3, 6, 1, 4, 1, 1139, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symmEventMaxEvents.setStatus('mandatory')
if mibBuilder.loadTexts: symmEventMaxEvents.setDescription('Max number of events that can be defined in each Symmetrixes symmEventTable.')
symmEventTable = MibTable((1, 3, 6, 1, 4, 1, 1139, 1, 7, 2), )
if mibBuilder.loadTexts: symmEventTable.setStatus('mandatory')
if mibBuilder.loadTexts: symmEventTable.setDescription('The table of Symmetrix events. Errors, warnings, and information should be reported in this table.')
symmEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1139, 1, 7, 2, 1), ).setIndexNames((0, "EMC-MIB", "discIndex"), (0, "EMC-MIB", "symmEventIndex"))
if mibBuilder.loadTexts: symmEventEntry.setStatus('mandatory')
if mibBuilder.loadTexts: symmEventEntry.setDescription('Each entry contains information on a specific event for the given Symmetrix.')
symmEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: symmEventIndex.setStatus('mandatory')
if mibBuilder.loadTexts: symmEventIndex.setDescription('Each Symmetrix has its own event buffer. As it wraps, it may write over previous events. This object is an index into the buffer. The index value is an incrementing integer starting from one every time there is a table reset. On table reset, all contents are emptied and all indeces are set to zero. When an event is added to the table, the event is assigned the next higher integer value than the last item entered into the table. If the index value reaches its maximum value, the next item entered will cause the index value to roll over and start at one again.')
symmEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 7, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symmEventTime.setStatus('mandatory')
if mibBuilder.loadTexts: symmEventTime.setDescription('This is the time when the event occurred. It has the following format. DOW MON DD HH:MM:SS YYYY DOW=day of week MON=Month DD=day number HH=hour number MM=minute number SS=seconds number YYYY=year number If not applicable, return a NULL string.')
symmEventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("emergency", 2), ("alert", 3), ("critical", 4), ("error", 5), ("warning", 6), ("notify", 7), ("info", 8), ("debug", 9), ("mark", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: symmEventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: symmEventSeverity.setDescription('The event severity level. These map directly with those from the FIbre Mib, version 2.2')
symmEventDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1139, 1, 7, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symmEventDescr.setStatus('mandatory')
if mibBuilder.loadTexts: symmEventDescr.setDescription('The description of the event.')
emcDeviceStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 1139, 1) + (0,1)).setObjects(("EMC-MIB", "symmEventDescr"))
if mibBuilder.loadTexts: emcDeviceStatusTrap.setDescription("This trap is sent for each device found 'NOT READY' during the most recent test of each attached Symmetrix for Device Not Ready conditions. ")
emcSymmetrixStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 1139, 1) + (0,2)).setObjects(("EMC-MIB", "symmEventDescr"))
if mibBuilder.loadTexts: emcSymmetrixStatusTrap.setDescription("This trap is sent for each new WARNING and FATAL error condition found during the most recent 'health' test of each attached Symmetrix. Format of the message is: Symmetrix s/n: %s, Dir - %d, %04X, %s, %s an example of which is: Symmetrix s/n: 12345, Dir - 31, 470, Thu Apr 6 10:53:16 2000, Environmental alarm: Battery Fault ")
emcRatiosOutofRangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1139, 1) + (0,3)).setObjects(("EMC-MIB", "symmEventDescr"))
if mibBuilder.loadTexts: emcRatiosOutofRangeTrap.setDescription('This trap is sent for each attached Symmetrix when the Hit Ratio, Write Ratio, or IO/sec Ratio were out of the specified range during the most recent test for these conditions. The ratios are preconfigured at agent startup, and apply to all Symmetrixes attached. ')
discoveryTableChange = NotificationType((1, 3, 6, 1, 4, 1, 1139, 1) + (0,4)).setObjects(("EMC-MIB", "discoveryChangeTime"))
if mibBuilder.loadTexts: discoveryTableChange.setDescription('This trap is sent whenever the periodic check of attached Symmetrixes reveals newly attached Symmetrixes, or changes in the configuration of previously attached Symmetrixes. ')
emcSymmetrixEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 1139, 1) + (0,5)).setObjects(("EMC-MIB", "symmEventDescr"))
if mibBuilder.loadTexts: emcSymmetrixEventTrap.setDescription('This trap is sent whenever a non-specific (i.e. not traps 1-4) event occurs in the agent, or for a specific Symmetrix. ')
mibBuilder.exportSymbols("EMC-MIB", analyzer=analyzer, sysinfoFirstRecordNumber=sysinfoFirstRecordNumber, symstatNum_write_hits=symstatNum_write_hits, devShowVendor_id=devShowVendor_id, sysinfoNumberofVolumes=sysinfoNumberofVolumes, symstatNum_blocks_read=symstatNum_blocks_read, symShowPDevCountTable=symShowPDevCountTable, analyzerFileLastModified=analyzerFileLastModified, ldevstatNum_write_hits=ldevstatNum_write_hits, portstatNum_sym_timeslices=portstatNum_sym_timeslices, dgstatNum_delayed_dfw=dgstatNum_delayed_dfw, dadcnfigMirror2Director=dadcnfigMirror2Director, subagentTraceMessagesEnable=subagentTraceMessagesEnable, pdevstatNum_format_pend_tracks=pdevstatNum_format_pend_tracks, standardSNMPRequestPort=standardSNMPRequestPort, symDevListCount=symDevListCount, symstatNum_sa_cdb_reqs=symstatNum_sa_cdb_reqs, devstatNum_deferred_writes=devstatNum_deferred_writes, devstatNum_blocks_written=devstatNum_blocks_written, symDevNoDgList=symDevNoDgList, emcSymUtil99=emcSymUtil99, devShowSymid=devShowSymid, emcSymMvsDsname=emcSymMvsDsname, devShowBCVInfoEntry=devShowBCVInfoEntry, symstatNum_format_pend_tracks=symstatNum_format_pend_tracks, emcControlCenter=emcControlCenter, symShowMicrocode_version=symShowMicrocode_version, ldevstatNum_write_reqs=ldevstatNum_write_reqs, symShowDirectorCountTable=symShowDirectorCountTable, ldevstatNum_blocks_read=ldevstatNum_blocks_read, dvhoaddrDeviceRecordsTable=dvhoaddrDeviceRecordsTable, pdevstatNum_read_reqs=pdevstatNum_read_reqs, symstatNum_used_permacache_slots=symstatNum_used_permacache_slots, dvhoaddrDeviceRecordsEntry=dvhoaddrDeviceRecordsEntry, symPDevList=symPDevList, symLDevListCountEntry=symLDevListCountEntry, symmEventEntry=symmEventEntry, RDDFTransientState=RDDFTransientState, symstatNum_deferred_writes=symstatNum_deferred_writes, analyzerSpecialDurationLimit=analyzerSpecialDurationLimit, symDgListEntry=symDgListEntry, emulMTPF=emulMTPF, xdrTCPPort=xdrTCPPort, escnChecksum=escnChecksum, symPDeviceName=symPDeviceName, symShowSymmetrix_pwron_time=symShowSymmetrix_pwron_time, PortStatus=PortStatus, dirstatDANum_pf_tracks_unused=dirstatDANum_pf_tracks_unused, dadcnfigMirrors=dadcnfigMirrors, dirstatSANum_read_misses=dirstatSANum_read_misses, devShowConfigurationTable=devShowConfigurationTable, emcSymPhysDevStats=emcSymPhysDevStats, devShowBcvdev_status=devShowBcvdev_status, pdevstatDevice_max_wp_limit=pdevstatDevice_max_wp_limit, initFileCount=initFileCount, analyzerFileCreation=analyzerFileCreation, symstatNum_sa_rw_reqs=symstatNum_sa_rw_reqs, devShowPrevent_auto_link_recovery=devShowPrevent_auto_link_recovery, symShowDirector_num=symShowDirector_num, symBcvDevListCount=symBcvDevListCount, dirstatNum_ios=dirstatNum_ios, implVersion=implVersion, portstatTime_stamp=portstatTime_stamp, symShowPDevListEntry=symShowPDevListEntry, devShowLink_config=devShowLink_config, symstatNum_read_hits=symstatNum_read_hits, escnFileCount=escnFileCount, symShowCache_slot_count=symShowCache_slot_count, discState=discState, pdevstatNum_prefetched_tracks=pdevstatNum_prefetched_tracks, symShow=symShow, pdevstatTime_stamp=pdevstatTime_stamp, gatekeeperDeviceName=gatekeeperDeviceName, symstatNum_delayed_dfw=symstatNum_delayed_dfw, symstatNum_wr_pend_tracks=symstatNum_wr_pend_tracks, emulCodeType=emulCodeType, devShowAdaptive_copy_skew=devShowAdaptive_copy_skew, pdevstatNum_rw_reqs=pdevstatNum_rw_reqs, emcSymBCVDevice=emcSymBCVDevice, dadcnfigSymmNumber=dadcnfigSymmNumber, trapSetup=trapSetup, DeviceStatus=DeviceStatus, devShowVbus=devShowVbus, emcSymMirrorDiskCfg=emcSymMirrorDiskCfg, dadcnfigMirror3Interface=dadcnfigMirror3Interface, symShowRa_group_num=symShowRa_group_num, initDate=initDate, discoveryChangeTime=discoveryChangeTime, devShowMset_M2_type=devShowMset_M2_type, dgstatNum_seq_read_reqs=dgstatNum_seq_read_reqs, BCVState=BCVState, systemCodesRecordsEntry=systemCodesRecordsEntry, diskAdapterDeviceConfigurationEntry=diskAdapterDeviceConfigurationEntry, dadcnfigMirror1Interface=dadcnfigMirror1Interface, saDirStatEntry=saDirStatEntry, analyzerFilesListTable=analyzerFilesListTable, devShowBCVInfoTable=devShowBCVInfoTable, emcSymMirror3DiskCfg=emcSymMirror3DiskCfg, discSerialNumber=discSerialNumber, symShowSymmetrix_uptime=symShowSymmetrix_uptime, symstatTime_stamp=symstatTime_stamp, analyzerFiles=analyzerFiles, devShowMset_M3_status=devShowMset_M3_status, dadcnfigRecordSize=dadcnfigRecordSize, clients=clients, diskAdapterDeviceConfigurationTable=diskAdapterDeviceConfigurationTable, dgstatNum_write_hits=dgstatNum_write_hits, symShowPDevCountEntry=symShowPDevCountEntry, ldevstatNum_delayed_dfw=ldevstatNum_delayed_dfw, symPDevNoDgListCountEntry=symPDevNoDgListCountEntry, emcSymMirror4DiskCfg=emcSymMirror4DiskCfg, systemCalls=systemCalls, agentRevision=agentRevision, periodicDiscoveryFrequency=periodicDiscoveryFrequency, emcSymMvsVolume=emcSymMvsVolume, devstatNum_seq_read_reqs=devstatNum_seq_read_reqs, saDirStatTable=saDirStatTable, analyzerFilesCountTable=analyzerFilesCountTable, symDevListCountTable=symDevListCountTable, symBcvPDevListCount=symBcvPDevListCount, symShowPort3_status=symShowPort3_status, devShowRDFInfoEntry=devShowRDFInfoEntry, symmEventMaxEvents=symmEventMaxEvents, symDevListEntry=symDevListEntry, devShowDev_block_size=devShowDev_block_size, dgstatNum_format_pend_tracks=dgstatNum_format_pend_tracks, dvhoaddrPortBDeviceAddress=dvhoaddrPortBDeviceAddress, symDevNoDgListCount=symDevNoDgListCount, devstatNum_wp_tracks=devstatNum_wp_tracks, devShowSCSI_negotiation=devShowSCSI_negotiation, devShowAttached_bcv_symdev=devShowAttached_bcv_symdev, symDevGroupName=symDevGroupName, symGateListTable=symGateListTable, dirstatDANum_pf_tracks=dirstatDANum_pf_tracks, devShowNum_r1_invalid_tracks=devShowNum_r1_invalid_tracks, devstatNum_rw_reqs=devstatNum_rw_reqs, symstatNum_rw_reqs=symstatNum_rw_reqs, dvhoaddrPortDDeviceAddress=dvhoaddrPortDDeviceAddress, symShowLast_ipl_time=symShowLast_ipl_time, agentConfiguration=agentConfiguration, symShowDb_sync_rdf_time=symShowDb_sync_rdf_time, symstatNum_destaged_tracks=symstatNum_destaged_tracks, symShowPDevListTable=symShowPDevListTable, symShowReserved=symShowReserved, symShowPermacache_slot_count=symShowPermacache_slot_count, analyzerFileCountEntry=analyzerFileCountEntry, symShowSymmetrix_ident=symShowSymmetrix_ident, devShowPdevname=devShowPdevname, systemCodesRecordsTable=systemCodesRecordsTable, DirectorStatus=DirectorStatus, symLDevListTable=symLDevListTable, discoveryFrequency=discoveryFrequency, devShowMset_M4_type=devShowMset_M4_type, devShowDev_rdf_state=devShowDev_rdf_state, symmEventDescr=symmEventDescr, symstatNum_seq_read_reqs=symstatNum_seq_read_reqs, emcSymSaitInfo=emcSymSaitInfo, devShowAdaptive_copy_wp_state=devShowAdaptive_copy_wp_state, UInt32=UInt32, symGateListCountTable=symGateListCountTable, symShowDb_sync_bcv_time=symShowDb_sync_bcv_time, dirstatNum_sym_timeslices=dirstatNum_sym_timeslices, dgstatNum_deferred_writes=dgstatNum_deferred_writes, symPDevListTable=symPDevListTable, discStatus=discStatus, sysinfoSerialNumber=sysinfoSerialNumber, symShowNum_pdevs=symShowNum_pdevs, symStatTable=symStatTable, emulDate=emulDate, symPDevNoDgList=symPDevNoDgList, emcSymUtilA7=emcSymUtilA7, symDevNoDgListEntry=symDevNoDgListEntry, ldevstatNum_seq_read_reqs=ldevstatNum_seq_read_reqs, symDgList=symDgList, symShowPort1_status=symShowPort1_status, analyzerFilesListEntry=analyzerFilesListEntry, devShowDirector_num=devShowDirector_num, symDevNoDgListTable=symDevNoDgListTable, devShowProduct_rev=devShowProduct_rev, devStatEntry=devStatEntry, implFileCount=implFileCount, emcSymTimefinderInfo=emcSymTimefinderInfo, devstatNum_destaged_tracks=devstatNum_destaged_tracks, mainframeDataSetInformation=mainframeDataSetInformation, symShowMicrocode_version_num=symShowMicrocode_version_num, symShowDirector_ident=symShowDirector_ident, devShowSCSI_method=devShowSCSI_method, pdevstatNum_deferred_writes=pdevstatNum_deferred_writes, analyzerFileName=analyzerFileName, symBcvDevListCountEntry=symBcvDevListCountEntry, discSymapisrv_IP=discSymapisrv_IP, ldevstatNum_deferred_writes=ldevstatNum_deferred_writes, emcSymSumStatus=emcSymSumStatus, devShowMset_M1_type=devShowMset_M1_type, emcSymDevStats=emcSymDevStats, subagentProcessActive=subagentProcessActive, symListCount=symListCount, pdevstatNum_blocks_read=pdevstatNum_blocks_read, symShowDirectorCountEntry=symShowDirectorCountEntry, devShowDev_sym_devname=devShowDev_sym_devname, symShowMicrocode_patch_date=symShowMicrocode_patch_date, devShowLdevname=devShowLdevname, devShowMset_M1_status=devShowMset_M1_status, RDFPairState=RDFPairState, discBCV=discBCV, symShowMax_wr_pend_slots=symShowMax_wr_pend_slots, dirstatNum_rw_hits=dirstatNum_rw_hits, devShowDevice_serial_id=devShowDevice_serial_id, emcDeviceStatusTrap=emcDeviceStatusTrap, devShowLink_domino=devShowLink_domino, dgstatNum_prefetched_tracks=dgstatNum_prefetched_tracks, devShowDev_rdf_type=devShowDev_rdf_type, DeviceType=DeviceType, clientListMaintenanceFrequency=clientListMaintenanceFrequency, devstatDevice_max_wp_limit=devstatDevice_max_wp_limit, analyzerFileCount=analyzerFileCount, symmEventTime=symmEventTime, mainframeVariables=mainframeVariables, symPDevListEntry=symPDevListEntry, symLDevListEntry=symLDevListEntry, initChecksum=initChecksum, dvhoaddrBuffer=dvhoaddrBuffer, symShowPort0_status=symShowPort0_status, analyzerTopFileSavePolicy=analyzerTopFileSavePolicy, emcSymStatistics=emcSymStatistics, devShowMset_M4_status=devShowMset_M4_status, emcSymMvsLUNNumber=emcSymMvsLUNNumber, raDirStatEntry=raDirStatEntry, symShowCache_size=symShowCache_size, dgstatNum_destaged_tracks=dgstatNum_destaged_tracks, devstatNum_delayed_dfw=devstatNum_delayed_dfw, symShowNum_powerpath_devs=symShowNum_powerpath_devs, symShowDirectorCount=symShowDirectorCount, dirstatSANum_slot_collisions=dirstatSANum_slot_collisions, sysinfoBuffer=sysinfoBuffer, syscodesNumberofRecords=syscodesNumberofRecords, symAPI=symAPI, subagentSymmetrixSerialNumber=subagentSymmetrixSerialNumber, symRemoteListCount=symRemoteListCount, syscodesFirstRecordNumber=syscodesFirstRecordNumber, devShowDirector_ident=devShowDirector_ident, systemCodesEntry=systemCodesEntry, dvhoaddrNumberofRecords=dvhoaddrNumberofRecords, symShowNum_disks=symShowNum_disks, devShowRdf_domino=devShowRdf_domino, symShowScsi_capability=symShowScsi_capability, dvhoaddrPortADeviceAddress=dvhoaddrPortADeviceAddress, emcSymPortStats=emcSymPortStats, dadcnfigMirror1Director=dadcnfigMirror1Director, emcSymmetrix=emcSymmetrix, symmEventSeverity=symmEventSeverity, devShowRemote_symid=devShowRemote_symid, implMTPF=implMTPF, devShowRemote_dev_rdf_state=devShowRemote_dev_rdf_state)
mibBuilder.exportSymbols("EMC-MIB", symLDevListCountTable=symLDevListCountTable, devShowMset_M2_invalid_tracks=devShowMset_M2_invalid_tracks, devShowSuspend_state=devShowSuspend_state, informational=informational, pDevStatTable=pDevStatTable, symGateListCountEntry=symGateListCountEntry, symGateListCount=symGateListCount, symListEntry=symListEntry, symstatDevice_max_wp_limit=symstatDevice_max_wp_limit, symBcvPDevListTable=symBcvPDevListTable, initMTPF=initMTPF, symShowAPI_version=symShowAPI_version, discoveryTable=discoveryTable, symShowConfig_checksum=symShowConfig_checksum, ldevstatNum_prefetched_tracks=ldevstatNum_prefetched_tracks, symShowPrevent_auto_link_recovery=symShowPrevent_auto_link_recovery, symDgListTable=symDgListTable, symPDevListCountTable=symPDevListCountTable, devShowBcvdev_sym_devname=devShowBcvdev_sym_devname, ldevstatNum_sym_timeslices=ldevstatNum_sym_timeslices, systemInfoHeaderEntry=systemInfoHeaderEntry, devShowLun=devShowLun, symShowMax_da_wr_pend_slots=symShowMax_da_wr_pend_slots, discoveryTbl=discoveryTbl, devShowRdf_mode=devShowRdf_mode, esmVariablePacketSize=esmVariablePacketSize, dgstatNum_rw_hits=dgstatNum_rw_hits, sysinfoMemorySize=sysinfoMemorySize, symList=symList, dirstatTime_stamp=dirstatTime_stamp, symmEventIndex=symmEventIndex, symStatEntry=symStatEntry, discCapacity=discCapacity, systemInformation=systemInformation, discRDF=discRDF, dvhoaddrFirstRecordNumber=dvhoaddrFirstRecordNumber, devShowDev_cylinders=devShowDev_cylinders, symPDevListCountEntry=symPDevListCountEntry, symShowNum_da_volumes=symShowNum_da_volumes, ldevstatNum_blocks_written=ldevstatNum_blocks_written, dvhoaddrRecordSize=dvhoaddrRecordSize, discModel=discModel, initVersion=initVersion, deviceHostAddressConfigurationEntry=deviceHostAddressConfigurationEntry, dirstatRANum_read_misses=dirstatRANum_read_misses, devstatTime_stamp=devstatTime_stamp, dirstatRANum_slot_collisions=dirstatRANum_slot_collisions, symGateListEntry=symGateListEntry, pdevstatNum_sym_timeslices=pdevstatNum_sym_timeslices, symShowDirectorConfigurationTable=symShowDirectorConfigurationTable, symShowDirector_status=symShowDirector_status, dadcnfigDeviceRecordsTable=dadcnfigDeviceRecordsTable, dvhoaddrPortAType=dvhoaddrPortAType, symBcvPDevList=symBcvPDevList, symBcvPDeviceName=symBcvPDeviceName, emcSymRdfMaint=emcSymRdfMaint, symLDevListCount=symLDevListCount, symRemoteListTable=symRemoteListTable, symAPIShow=symAPIShow, StateValues=StateValues, bcvDeviceName=bcvDeviceName, implDate=implDate, dgstatNum_sym_timeslices=dgstatNum_sym_timeslices, symLDevList=symLDevList, escnDate=escnDate, emcRatiosOutofRangeTrap=emcRatiosOutofRangeTrap, symShowConfiguration=symShowConfiguration, dgstatNum_blocks_read=dgstatNum_blocks_read, devShowRDFInfoTable=devShowRDFInfoTable, devShowDirector_port_num=devShowDirector_port_num, discoveryTrapPort=discoveryTrapPort, devShowMset_M4_invalid_tracks=devShowMset_M4_invalid_tracks, symDevList=symDevList, devstatNum_format_pend_tracks=devstatNum_format_pend_tracks, emc=emc, sysinfoNumberofRecords=sysinfoNumberofRecords, devShowSym_devname=devShowSym_devname, sysinfoRecordsEntry=sysinfoRecordsEntry, devShowPrevent_ra_online_upon_pwron=devShowPrevent_ra_online_upon_pwron, discoveryTableSize=discoveryTableSize, ldevstatNum_read_hits=ldevstatNum_read_hits, dirPortStatistics=dirPortStatistics, systemCodesTable=systemCodesTable, devShowDev_link_status=devShowDev_link_status, escnVersion=escnVersion, esmVariables=esmVariables, dirstatDANum_pf_long_misses=dirstatDANum_pf_long_misses, symGateList=symGateList, DeviceEmulation=DeviceEmulation, discovery=discovery, emcSymMvsBuildStatus=emcSymMvsBuildStatus, devShowDev_serial_id=devShowDev_serial_id, symBcvPDevListCountEntry=symBcvPDevListCountEntry, dadcnfigNumberofRecords=dadcnfigNumberofRecords, dirstatNum_write_reqs=dirstatNum_write_reqs, pdevstatNum_rw_hits=pdevstatNum_rw_hits, escnMTPF=escnMTPF, symShowMicrocode_patch_level=symShowMicrocode_patch_level, devShowDev_ra_status=devShowDev_ra_status, emulChecksum=emulChecksum, devShowConfigurationEntry=devShowConfigurationEntry, pdevstatNum_destaged_tracks=pdevstatNum_destaged_tracks, discChecksum=discChecksum, emcSymDir=emcSymDir, dvhoaddrPortCDeviceAddress=dvhoaddrPortCDeviceAddress, devShowMset_M2_status=devShowMset_M2_status, devstatNum_prefetched_tracks=devstatNum_prefetched_tracks, dgStatTable=dgStatTable, symmEventTable=symmEventTable, deviceHostAddressConfigurationTable=deviceHostAddressConfigurationTable, escnCodeType=escnCodeType, dvhoaddrPortCType=dvhoaddrPortCType, dirstatNum_permacache_reqs=dirstatNum_permacache_reqs, daDirStatTable=daDirStatTable, ldevstatNum_rw_reqs=ldevstatNum_rw_reqs, devShowMset_M3_invalid_tracks=devShowMset_M3_invalid_tracks, discEventCurrID=discEventCurrID, devShowBcvdev_dgname=devShowBcvdev_dgname, emcSymWinConfig=emcSymWinConfig, emcRatiosOutofRange=emcRatiosOutofRange, symstatNum_blocks_written=symstatNum_blocks_written, ldevstatNum_read_reqs=ldevstatNum_read_reqs, portstatNum_blocks_read_and_written=portstatNum_blocks_read_and_written, symShowLast_fast_ipl_time=symShowLast_fast_ipl_time, symstatNum_prefetched_tracks=symstatNum_prefetched_tracks, dirstatDANum_pf_tracks_used=dirstatDANum_pf_tracks_used, subagentInformation=subagentInformation, pdevstatNum_blocks_written=pdevstatNum_blocks_written, directorStatEntry=directorStatEntry, symDevNoDgListCountTable=symDevNoDgListCountTable, RDFAdaptiveCopy=RDFAdaptiveCopy, symPDevNoDgListEntry=symPDevNoDgListEntry, symShowPort2_status=symShowPort2_status, symShowSlot_num=symShowSlot_num, symPDevNoDgListCount=symPDevNoDgListCount, dirstatNum_rw_reqs=dirstatNum_rw_reqs, dvhoaddrMaxRecords=dvhoaddrMaxRecords, dvhoaddrDirectorNumber=dvhoaddrDirectorNumber, initCodeType=initCodeType, syscodesDirectorNum=syscodesDirectorNum, devShowConsistency_state=devShowConsistency_state, symShowMicrocode_date=symShowMicrocode_date, symShowNum_symdevs=symShowNum_symdevs, symstatNum_free_permacache_slots=symstatNum_free_permacache_slots, dgstatTime_stamp=dgstatTime_stamp, devShowTid=devShowTid, devShowDev_sa_status=devShowDev_sa_status, symRemoteList=symRemoteList, dvhoaddrPortBType=dvhoaddrPortBType, discConfigDate=discConfigDate, pdevstatNum_write_hits=pdevstatNum_write_hits, symDevNoDgDeviceName=symDevNoDgDeviceName, dirStatPortCountEntry=dirStatPortCountEntry, dgstatNum_read_reqs=dgstatNum_read_reqs, checksumTestFrequency=checksumTestFrequency, symRemoteListEntry=symRemoteListEntry, symPDevNoDgListCountTable=symPDevNoDgListCountTable, mfDataSetInformation=mfDataSetInformation, symDevNoDgListCountEntry=symDevNoDgListCountEntry, symShowSymid=symShowSymid, sysinfoRecordsTable=sysinfoRecordsTable, dgstatNum_write_reqs=dgstatNum_write_reqs, symDeviceName=symDeviceName, dirPortStatPortCount=dirPortStatPortCount, symstatNum_sa_read_reqs=symstatNum_sa_read_reqs, symShowNum_ports=symShowNum_ports, symShowPDevCount=symShowPDevCount, symShowDirectorConfigurationEntry=symShowDirectorConfigurationEntry, analyzerFileSize=analyzerFileSize, dgstatNum_rw_reqs=dgstatNum_rw_reqs, devShowNum_r2_invalid_tracks=devShowNum_r2_invalid_tracks, trapTestFrequency=trapTestFrequency, mainframeDiskInformation=mainframeDiskInformation, dirstatRANum_device_wp_disconnects=dirstatRANum_device_wp_disconnects, symShowDirector_type=symShowDirector_type, dirstatDANum_pf_short_misses=dirstatDANum_pf_short_misses, discoveryTableChange=discoveryTableChange, discRawDevice=discRawDevice, dadcnfigDeviceRecordsEntry=dadcnfigDeviceRecordsEntry, symAPIList=symAPIList, devShowBcvdev_serial_id=devShowBcvdev_serial_id, devstatNum_write_hits=devstatNum_write_hits, control=control, symShowRemote_ra_group_num=symShowRemote_ra_group_num, agentType=agentType, dgstatNum_blocks_written=dgstatNum_blocks_written, symmEvent=symmEvent, agentAdministration=agentAdministration, dirstatRANum_system_wp_disconnects=dirstatRANum_system_wp_disconnects, symDevListCountEntry=symDevListCountEntry, sysinfoRecordSize=sysinfoRecordSize, pdevstatNum_read_hits=pdevstatNum_read_hits, emcSymSRDFInfo=emcSymSRDFInfo, syscodesDirectorType=syscodesDirectorType, emcSymCnfg=emcSymCnfg, symShowPDeviceName=symShowPDeviceName, devShowRemote_sym_devname=devShowRemote_sym_devname, devShowDev_capacity=devShowDev_capacity, ldevstatNum_wp_tracks=ldevstatNum_wp_tracks, remoteSerialNumber=remoteSerialNumber, devstatNum_rw_hits=devstatNum_rw_hits, dvhoaddrSymmNumber=dvhoaddrSymmNumber, devShowEmulation=devShowEmulation, DirectorType=DirectorType, daDirStatEntry=daDirStatEntry, dadcnfigMirror4Interface=dadcnfigMirror4Interface, dvhoaddrMetaFlags=dvhoaddrMetaFlags, symPDevNoDgDeviceName=symPDevNoDgDeviceName, RDFMode=RDFMode, SCSIWidth=SCSIWidth, devShowDirector_slot_num=devShowDirector_slot_num, pdevstatNum_wp_tracks=pdevstatNum_wp_tracks, mibRevision=mibRevision, syscodesRecordSize=syscodesRecordSize, ldevstatNum_destaged_tracks=ldevstatNum_destaged_tracks, lDevStatTable=lDevStatTable, emcSymDiskCfg=emcSymDiskCfg, symShowRemote_symid=symShowRemote_symid, devShowDgname=devShowDgname, symstatNum_read_reqs=symstatNum_read_reqs, devShowDirector_port_status=devShowDirector_port_status, symDgListCount=symDgListCount, systemCodes=systemCodes, symShowDb_sync_time=symShowDb_sync_time, emcSymSumStatusErrorCodes=emcSymSumStatusErrorCodes, devStatTable=devStatTable, devstatNum_blocks_read=devstatNum_blocks_read, ldevstatDevice_max_wp_limit=ldevstatDevice_max_wp_limit, dirPortStatEntry=dirPortStatEntry, emcSymmetrixStatusTrap=emcSymmetrixStatusTrap, symBcvDevListCountTable=symBcvDevListCountTable, dadcnfigMirror4Director=dadcnfigMirror4Director, dadcnfigFirstRecordNumber=dadcnfigFirstRecordNumber, systemInfoHeaderTable=systemInfoHeaderTable, symListTable=symListTable, syscodesBuffer=syscodesBuffer, symBcvDevListEntry=symBcvDevListEntry, dirPortStatTable=dirPortStatTable, symAPIStatistics=symAPIStatistics, discMicrocodeVersion=discMicrocodeVersion, symShowPrevent_ra_online_upon_pwron=symShowPrevent_ra_online_upon_pwron, dvhoaddrFiberChannelAddress=dvhoaddrFiberChannelAddress, symstatNum_sa_write_reqs=symstatNum_sa_write_reqs, pDevStatEntry=pDevStatEntry, symstatNum_rw_hits=symstatNum_rw_hits, dadcnfigMirror2Interface=dadcnfigMirror2Interface, statusCheckFrequency=statusCheckFrequency, dirstatDANum_pf_mismatches=dirstatDANum_pf_mismatches, emulFileCount=emulFileCount, devstatNum_write_reqs=devstatNum_write_reqs, esmSNMPRequestPort=esmSNMPRequestPort, dvhoaddrPortDType=dvhoaddrPortDType, raDirStatTable=raDirStatTable, RDFType=RDFType)
mibBuilder.exportSymbols("EMC-MIB", symBcvDevList=symBcvDevList, analyzerFileRuntime=analyzerFileRuntime, directorStatTable=directorStatTable, dadcnfigMaxRecords=dadcnfigMaxRecords, subagentInfo=subagentInfo, ldevstatNum_format_pend_tracks=ldevstatNum_format_pend_tracks, dgStatEntry=dgStatEntry, dadcnfigBuffer=dadcnfigBuffer, sysinfoMaxRecords=sysinfoMaxRecords, symBcvPDevListCountTable=symBcvPDevListCountTable, devShowProduct_id=devShowProduct_id, pdevstatNum_delayed_dfw=pdevstatNum_delayed_dfw, devShowBcv_pair_state=devShowBcv_pair_state, diskAdapterDeviceConfiguration=diskAdapterDeviceConfiguration, RDFLinkConfig=RDFLinkConfig, pdevstatNum_seq_read_reqs=pdevstatNum_seq_read_reqs, devShowRdf_status=devShowRdf_status, dirstatSANum_system_wp_disconnects=dirstatSANum_system_wp_disconnects, clientListClientExpiration=clientListClientExpiration, devShowMset_M3_type=devShowMset_M3_type, dirstatSANum_device_wp_disconnects=dirstatSANum_device_wp_disconnects, pdevstatNum_write_reqs=pdevstatNum_write_reqs, devShowAdaptive_copy=devShowAdaptive_copy, symDevShow=symDevShow, emulVersion=emulVersion, discIndex=discIndex, ldevstatNum_rw_hits=ldevstatNum_rw_hits, lDeviceName=lDeviceName, serialNumber=serialNumber, implCodeType=implCodeType, symDevListTable=symDevListTable, symShowSDDF_configuration=symShowSDDF_configuration, symPDevListCount=symPDevListCount, dgstatNum_read_hits=dgstatNum_read_hits, devShowMset_M1_invalid_tracks=devShowMset_M1_invalid_tracks, syscodesMaxRecords=syscodesMaxRecords, celerraTCPPort=celerraTCPPort, devstatNum_read_hits=devstatNum_read_hits, subagentConfiguration=subagentConfiguration, devShowDev_parameters=devShowDev_parameters, symstatNum_write_reqs=symstatNum_write_reqs, deviceHostAddressConfiguration=deviceHostAddressConfiguration, activePorts=activePorts, symShowSymmetrix_model=symShowSymmetrix_model, portstatNum_rw_reqs=portstatNum_rw_reqs, dirstatNum_read_reqs=dirstatNum_read_reqs, emcSymmetrixEventTrap=emcSymmetrixEventTrap, clientListRequestExpiration=clientListRequestExpiration, implChecksum=implChecksum, dirStatPortCountTable=dirStatPortCountTable, devShowDev_config=devShowDev_config, symPDevNoDgListTable=symPDevNoDgListTable, analyzerFileIsActive=analyzerFileIsActive, lDevStatEntry=lDevStatEntry, dgstatdevice_max_wp_limit=dgstatdevice_max_wp_limit, discNumEvents=discNumEvents, masterTraceMessagesEnable=masterTraceMessagesEnable, symBcvPDevListEntry=symBcvPDevListEntry, devShowDev_status=devShowDev_status, devstatNum_sym_timeslices=devstatNum_sym_timeslices, ldevstatTime_stamp=ldevstatTime_stamp, symBcvDevListTable=symBcvDevListTable, SCSIMethod=SCSIMethod, dirstatDANum_pf_restarts=dirstatDANum_pf_restarts, mfDiskInformation=mfDiskInformation, devShowRa_group_number=devShowRa_group_number, dgstatNum_wp_tracks=dgstatNum_wp_tracks, devShowNum_bcvdev_invalid_tracks=devShowNum_bcvdev_invalid_tracks, symShowMax_dev_wr_pend_slots=symShowMax_dev_wr_pend_slots, devShowDev_dgname=devShowDev_dgname, sysinfoNumberofDirectors=sysinfoNumberofDirectors, symShowEntry=symShowEntry, devShowNum_dev_invalid_tracks=devShowNum_dev_invalid_tracks, devShowRdf_pair_state=devShowRdf_pair_state, symstatNum_sa_rw_hits=symstatNum_sa_rw_hits, dadcnfigMirror3Director=dadcnfigMirror3Director, devstatNum_read_reqs=devstatNum_read_reqs)
