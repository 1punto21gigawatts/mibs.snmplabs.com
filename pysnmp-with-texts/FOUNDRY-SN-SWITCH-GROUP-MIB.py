#
# PySNMP MIB module FOUNDRY-SN-SWITCH-GROUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FOUNDRY-SN-SWITCH-GROUP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:41:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
DisplayString, MacAddress = mibBuilder.importSymbols("FOUNDRY-SN-AGENT-MIB", "DisplayString", "MacAddress")
switch, = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "switch")
InterfaceIndex, InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero", "ifIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter32, IpAddress, Counter64, Bits, NotificationType, ObjectIdentity, MibIdentifier, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "IpAddress", "Counter64", "Bits", "NotificationType", "ObjectIdentity", "MibIdentifier", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "TimeTicks")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
snSwitch = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3))
snSwitch.setRevisions(('2013-10-25 00:00', '2010-06-02 00:00', '2009-09-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: snSwitch.setRevisionsDescriptions(('Changed the DESCRIPTION field of snSwIfInfoMonitorMode object.', 'Changed the ORGANIZATION, CONTACT-INFO and DESCRIPTION fields.', 'convert from SMIv1 to SMIv2',))
if mibBuilder.loadTexts: snSwitch.setLastUpdated('201310250000Z')
if mibBuilder.loadTexts: snSwitch.setOrganization('Brocade Communications Systems, Inc.')
if mibBuilder.loadTexts: snSwitch.setContactInfo('Technical Support Center 130 Holger Way, San Jose, CA 95134 Email: ipsupport@brocade.com Phone: 1-800-752-8061 URL: www.brocade.com')
if mibBuilder.loadTexts: snSwitch.setDescription("Copyright 1996-2010 Brocade Communications Systems, Inc. All rights reserved. This Brocade Communications Systems SNMP Management Information Base Specification embodies Brocade Communications Systems' confidential and proprietary intellectual property. Brocade Communications Systems retains all title and ownership in the Specification, including any revisions. This Specification is supplied AS IS, and Brocade Communications Systems makes no warranty, either express or implied, as to the use, operation, condition, or performance of the specification, and any unintended consequence it may on the user environment.")
class PhysAddress(TextualConvention, OctetString):
    description = ' This data type is used to model media addresses. For many types of media, this will be in a binary representation. For example, an ethernet address would be represented as a string of 6 octets. '
    status = 'current'

class BridgeId(TextualConvention, OctetString):
    description = ' the Bridge-Identifier as used in the Spanning Tree '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(TextualConvention, Integer32):
    description = ' a STP timer in units of 1/100 seconds '
    status = 'current'

class PortMask(TextualConvention, Integer32):
    description = ' This data type is used to model port bitmask. The maximum of ports are 32. '
    status = 'current'

class InterfaceId(TextualConvention, ObjectIdentifier):
    description = ' -- This data type is used to specify an interface ID. -- The first object identifier is port type, and the -- format of the rest of the object identifiers depend -- on the port type. -- -- ethernet(1), format: type.slot.port -- e.g. 1.3.6 is port ethernet 3/6 -- -- pos(2), format: type.slot.port -- e.g. 2.10.1 is port pos 10/1 -- -- atm(3), format: type.slot.port -- e.g. 3.8.2 is port atm 8/2 -- -- virtual router interface(4), format: type.ve -- e.g. 4.9 is port ve 9 -- -- loopback(5), format: type.lb -- e.g. 5.7 is port loopback 7 -- -- gre tunnel(6), format: type.tn, not supported -- -- subinterface(7), format: type.slot.port.subInterface -- e.g. 7.3.2.4 is port atm 3/2.4 -- -- mpls tunnel(8), format: type.tn -- e.g. 8.3 is port tunnel 3 -- -- pvc(9), format: type.slot.port.subInterface.vpi.vci -- e.g. 9.3.1.2.1.2 is port atm 3/1.2.1.2 -- -- management(10), format: type.slot.port -- e.g. 10.17.1 is port management 17/1 -- -- tunnel(11), format: type.trunkid -- e.g. 11.3 is trunk id 3 -- -- virtual management(12), format: type -- e.g. 10 is the virtual management interface '
    status = 'current'

class InterfaceId2(TextualConvention, ObjectIdentifier):
    description = ' -- This data type is used to specify an interface ID. The -- first object identifier is port type, and the format of -- the rest of the object identifiers depend on the port -- type. Note that for types which include a reference to a -- physical port, the formats vary according to the type of -- port identifiers that the device uses (e.g. 6, 3/6, or -- 2/3/6). New port type values will be added in the future -- as needed. For a given type code, new formats may also -- be added in the future. Each format for a given type -- code will have a unique length. Applications should -- check the OID length and not assume that it will match -- one of the currently defined formats. -- -- Though the OIDs are shown here in a shortened form, the -- actual OIDs are prefixed with the OID of snInterfaceId -- (so the OID for 1.2.3.6 would actually be -- snInterfaceId.1.2.3.6, which is equivalent to -- snEthernetInterface.2.3.6.). -- -- ethernet(1), formats: -- type.port (e.g. 1.6 is port ethernet 6) -- type.slot.port (e.g. 1.3.6 is port ethernet 3/6) -- type.unit.slot.port (e.g. 1.2.3.6 is port ethernet 2/3/6) -- -- pos(2), formats: -- type.port (e.g. 2.6 is port pos 6) -- type.slot.port (e.g. 2.3.6 is port pos 3/6) -- type.unit.slot.port (e.g. 2.2.3.6 is port pos 2/3/6) -- -- atm(3), format: type.slot.port -- type.port (e.g. 3.6 is port atm 6) -- type.slot.port (e.g. 3.3.6 is port atm 3/6) -- type.unit.slot.port (e.g. 3.2.3.6 is port atm 2/3/6) -- -- virtual router interface(4), format: type.ve -- e.g. 4.9 is port ve 9 -- -- loopback(5), format: type.lb -- e.g. 5.7 is port loopback 7 -- -- gre tunnel(6), format: type.tn, not supported -- -- subinterface(7), formats: -- type.port.subInterface (e.g. 7.6.4 is port atm 6.4) -- type.slot.port.subInterface (e.g. 7.3.6.4 is port atm 3/6.4) -- type.unit.slot.port.subInterface -- (e.g. 7.2.3.6.4 is port atm 2/3/6.4) -- -- mpls tunnel(8), format: type.tn -- e.g. 8.3 is port tunnel 3 -- -- pvc(9), formats: -- type.port.subInterface.vpi.vci -- (e.g. 9.6.2.1.2 is port atm 6.2.1.2) -- type.slot.port.subInterface.vpi.vci -- (e.g. 9.3.6.2.1.2 is port atm 3/6.2.1.2) -- type.unit.slot.port.subInterface.vpi.vci -- (e.g. 9.2.3.6.2.1.2 is port atm 2/3/6.2.1.2) -- -- management(10), formats: -- type.port (e.g. 10.1 is port management 1) -- type.slot.port (e.g. 10.2.1 is port management 2/1) -- type.unit.slot.port (e.g. 10.4.2.1 is port management 4/2/1) -- -- trunk(11), format: type.trunkid -- e.g. 11.3 is trunk id 3 -- -- virtual management(12), format: type -- e.g. 12 is the virtual management interface '
    status = 'current'

class VlanTagMode(TextualConvention, Integer32):
    description = 'Vlan tag mode for a given vlan member.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("tagged", 1), ("untagged", 2), ("dual", 3))

class FdryVlanIdOrNoneTC(TextualConvention, Integer32):
    description = "The VLAN-ID that uniquely identifies a specific VLAN, or no VLAN. The special value of zero is used to indicate that no VLAN-ID is present or used. This can be used in any situation where an object or a table entry must refer either to a specific VLAN, or to no VLAN. Note that a MIB object that is defined using this TEXTUAL-CONVENTION should clarify the meaning of 'no VLAN' (i.e., the special value 0)."
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), )
class BrcdVlanIdTC(TextualConvention, Integer32):
    description = 'The VLAN-ID that uniquely identifies a specific VLAN.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4090)

class BrcdVlanIdOrNoneTC(TextualConvention, Integer32):
    description = 'The VLAN-ID that uniquely identifies a specific VLAN or to no VLAN.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4090), )
class PortQosTC(TextualConvention, Integer32):
    description = 'The port QOS Priority hardware queue. 0 is lowest priority, 7 is the highest.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 127))
    namedValues = NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7), ("invalid", 127))

class PortPriorityTC(TextualConvention, Integer32):
    description = 'Refers to the IEEE 802.1p priority, or Priority Code Point (PCP). 1 is the lowest, 8 is the highest. The value 128 may be used to indicate invalid priority or priority is not enabled.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 128))
    namedValues = NamedValues(("priority0", 1), ("priority1", 2), ("priority2", 3), ("priority3", 4), ("priority4", 5), ("priority5", 6), ("priority6", 7), ("priority7", 8), ("nonPriority", 128))

snSwInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1))
snVLanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2))
snSwPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3))
snFdbInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4))
snPortStpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5))
snTrunkInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6))
snSwSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 7))
snDhcpGatewayListInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 8))
snDnsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 9))
snMacFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10))
snNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11))
snRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12))
snTacacs = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13))
snQos = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14))
snAAA = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15))
snCAR = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 16))
snVLanCAR = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 17))
snNetFlow = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18))
snSFlow = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19))
snFDP = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20))
snVsrp = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21))
snArpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 22))
snWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23))
snMac = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24))
snPortMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 25))
snSSH = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 26))
snSSL = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 27))
snMacAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 28))
snMetroRing = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 29))
snStacking = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 31))
fdryMacVlanMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 32))
fdryLinkAggregationGroupMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 33))
fdryDns2MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 34))
fdryDaiMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35))
fdryDhcpSnoopMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 36))
fdryIpSrcGuardMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 37))
brcdRouteMap = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 39))
brcdSPXMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40))
snSwGroupOperMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noVLan", 1), ("vlanByPort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwGroupOperMode.setStatus('current')
if mibBuilder.loadTexts: snSwGroupOperMode.setDescription('noVLan(1) represents all switch ports with no virtual LAN by port (no Port VLAN), and with no tag assigned. vlanByPort(2) represents all switch ports with Basic VLAN (layer2 Switch). ')
snSwGroupIpL3SwMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwGroupIpL3SwMode.setStatus('current')
if mibBuilder.loadTexts: snSwGroupIpL3SwMode.setDescription('The Switch Group is configured with the Layer3 IP Switch mode either enabled or disabled and the default is disabled mode. enabled(1)...........activate Layer3 IP Switch disabled(0)..........disable Layer3 IP Switch')
snSwGroupIpMcastMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwGroupIpMcastMode.setStatus('current')
if mibBuilder.loadTexts: snSwGroupIpMcastMode.setDescription('The Switch Group is configured with the IP Multicast pruning mode either enabled or disabled and the default is disabled mode. enabled(1)...........activate IP Multicast pruning disabled(0)..........no IP Multicast pruning')
snSwGroupDefaultCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("nonDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwGroupDefaultCfgMode.setStatus('current')
if mibBuilder.loadTexts: snSwGroupDefaultCfgMode.setDescription('The Switch Group is configured with the Default configuration. If the default configuration gets overwritten, the state will change to non-default. default(1)...........default configuration nonDefault(2)..........non default configuration')
snSwGroupSwitchAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwGroupSwitchAgeTime.setStatus('current')
if mibBuilder.loadTexts: snSwGroupSwitchAgeTime.setDescription('For FastIron: Sets the aging period for ports on the device, defining how long a port address remains active in the address table. Valid values: 0 = no aging, or 67 - 65535 seconds Default: 300 seconds. For NetIron: The Switch Age time is 180sec by default. The configured range is 10 to 10,000sec. The time represents the time span to age out an MAC Address entry.')
snVLanGroupVlanCurEntry = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanGroupVlanCurEntry.setStatus('current')
if mibBuilder.loadTexts: snVLanGroupVlanCurEntry.setDescription('The current total entry number of VLANs are configured.')
snVLanGroupSetAllVLan = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanGroupSetAllVLan.setStatus('current')
if mibBuilder.loadTexts: snVLanGroupSetAllVLan.setDescription('The value of this object is the VLanIndex of a particalur entry in snVLanByPortCfgTable (snVLanByPortCfgVLanId). All the attributes of that row of table except PortMask will be used to set the same attributes for the entire VLan group. VLanId and PortMask must be set for that particular entry prior to setting this object. Switch software will base on that VLAN information to set the entire VLAN. Note: All the intended attributes of the given row of the table (given VLAN) must be set prior setting this object. When this object is set, Set-All-VLAN action will take place simultaneously. The previous setting will be overwritten by the new one.')
snSwPortSetAll = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortSetAll.setStatus('current')
if mibBuilder.loadTexts: snSwPortSetAll.setDescription('The value of this object is the index number of the snSwPortInfoTable (snSwPortInfoPortIndex). snSwPortInfoMonitorMode, snSwPortInfoTagMode, snSwPortInfoChnMode, snSwPortInfoSpeed, snSwPortInfoAdminStatus are all the read-write attributes of that row of table. They will be used to set the same attributes for all the ports in the system. Note: prior setting this object, all the intended attributes of the given row of the table must be set. Otherwise, the current data of the row will be used to set the entire port-table. The previous setting will be overwritten by the new one.')
snFdbTableCurEntry = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdbTableCurEntry.setStatus('current')
if mibBuilder.loadTexts: snFdbTableCurEntry.setDescription('The current total entry number of FDB are configured.')
snFdbTableStationFlush = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("error", 2), ("flush", 3), ("flushing", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbTableStationFlush.setStatus('current')
if mibBuilder.loadTexts: snFdbTableStationFlush.setDescription('The following values of the flush state can only be read: normal(1)... normal state error(2)... operation failed flushing(4)... in process The following value can be written: flush(3).....do flush The agent will return a response even before the flush is done. And the read value will be flushing until flush is done. And the flush request will be rejected until error or normal.')
snPortStpSetAll = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortStpSetAll.setStatus('current')
if mibBuilder.loadTexts: snPortStpSetAll.setDescription('The value of this object is 1 which means invoking Port STP Set-all command. The snPortStpPriority, snPortStpPathCost, the read-write STP related attributes of the first row of table will be used to set the same attributes for all the ports in the system. Note: prior setting this object, all the intended attributes of the given row of the table must be set. Otherwise, the current data of the row will be used to set the entire port-table. The previous setting will be overwritten by the new one.')
snSwProbePortNum = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwProbePortNum.setStatus('current')
if mibBuilder.loadTexts: snSwProbePortNum.setDescription('A chassis switch probe port is operated as a traffic analyzer port and only one port can be assigned in the chassis. The bit 0 to bit 7: port number. The bit 8 to bit 11: slot number. A stackable switch is only assigned with one probe port as a traffic analyzer.')
snSw8021qTagMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSw8021qTagMode.setStatus('current')
if mibBuilder.loadTexts: snSw8021qTagMode.setDescription('The Switch Group is configured with the IEEE802.1q Tagging mode either enabled or disabled and the default is disabled mode. enabled(1)...........activate IEEE802.1q Tagging mode. disabled(0)..........no IEEE802.1q Tagging.')
snSwGlobalStpMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwGlobalStpMode.setStatus('current')
if mibBuilder.loadTexts: snSwGlobalStpMode.setDescription('Spanning Tree System Global Mode in the Switch Group can be set either enabled or disabled and the default is enabled mode. enabled(1)...........activate Spanning Tree disabled(0)..........no Spanning Tree')
snSwIpMcastQuerierMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("querier", 1), ("nonQuerier", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIpMcastQuerierMode.setStatus('current')
if mibBuilder.loadTexts: snSwIpMcastQuerierMode.setDescription('The IP Multicast pruning mode is configured either Non-Querier or Querier mode and the default is querier mode. querier(1)...........when prunning traffic locally within the VLAN. nonQuerier(2)........when running with a multicast capable router in the network.')
snSwViolatorPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwViolatorPortNumber.setStatus('current')
if mibBuilder.loadTexts: snSwViolatorPortNumber.setDescription('The port number of the switch or router that received a violator packet. It is included in the locked address violation trap. The bit 0 to bit 7: port number. The bit 8 to bit 11: slot number (slot for chassis only).')
snSwViolatorMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 18), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwViolatorMacAddress.setStatus('current')
if mibBuilder.loadTexts: snSwViolatorMacAddress.setDescription('The source address of the violator packet received by the switch or router. It is included in the locked address violation trap.')
snVLanGroupVlanMaxEntry = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanGroupVlanMaxEntry.setStatus('current')
if mibBuilder.loadTexts: snVLanGroupVlanMaxEntry.setDescription('The maximum number of VLAN entries that are allowed to configure. On NetIron products, This object will be implemented as read-only. Set request will be returned with not writable error. To set the maximum allowed vlan, use snAgentSysParaConfigEntry.')
snSwEosBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwEosBufferSize.setStatus('current')
if mibBuilder.loadTexts: snSwEosBufferSize.setDescription('A specific buffer size for all the different EOS buffers.')
snVLanByPortEntrySize = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortEntrySize.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortEntrySize.setDescription('The size of each VLAN table entry.')
snSwPortEntrySize = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortEntrySize.setStatus('current')
if mibBuilder.loadTexts: snSwPortEntrySize.setDescription('The size of each port table entry.')
snFdbStationEntrySize = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdbStationEntrySize.setStatus('current')
if mibBuilder.loadTexts: snFdbStationEntrySize.setDescription('The size of each Fdb station table entry.')
snPortStpEntrySize = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpEntrySize.setStatus('current')
if mibBuilder.loadTexts: snPortStpEntrySize.setDescription('The size of each port stp table entry.')
snSwEnableBridgeNewRootTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwEnableBridgeNewRootTrap.setStatus('current')
if mibBuilder.loadTexts: snSwEnableBridgeNewRootTrap.setDescription('Indicates whether the SNMP agent process is permitted to generate bridge new root traps.')
snSwEnableBridgeTopoChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwEnableBridgeTopoChangeTrap.setStatus('current')
if mibBuilder.loadTexts: snSwEnableBridgeTopoChangeTrap.setDescription('Indicates whether the SNMP agent process is permitted to generate bridge topology change traps.')
snSwEnableLockedAddrViolationTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwEnableLockedAddrViolationTrap.setStatus('current')
if mibBuilder.loadTexts: snSwEnableLockedAddrViolationTrap.setDescription('Indicates whether the SNMP agent process is permitted to generate locked address violation traps.')
snSwIpxL3SwMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIpxL3SwMode.setStatus('current')
if mibBuilder.loadTexts: snSwIpxL3SwMode.setDescription('The Switch Group is configured with the Layer3 IPX Switch mode either enabled or disabled and the default is disabled mode. enabled(1)...........activate Layer3 Switch disabled(0)..........disable Layer3 Switch')
snVLanByIpSubnetMaxSubnets = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpSubnetMaxSubnets.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpSubnetMaxSubnets.setDescription('The maximum number of subnets for each IP VLAN.')
snVLanByIpxNetMaxNetworks = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpxNetMaxNetworks.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpxNetMaxNetworks.setDescription('The maximum number of networks for each IPX VLAN.')
snSwProtocolVLanMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwProtocolVLanMode.setStatus('deprecated')
if mibBuilder.loadTexts: snSwProtocolVLanMode.setDescription('disabled(0) - represents system with Protocol VLAN disabled. enabled(1) - represents system with Protocol VLAN enabled (Layer3 VLAN).')
snMacStationVLanId = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacStationVLanId.setStatus('deprecated')
if mibBuilder.loadTexts: snMacStationVLanId.setDescription("This VLAN ID controls filtering of the Forwarding Database table in the standard Bridge MIB (dot1dTpFdbTable). Since the dot1dTpFdbTable contains MAC addresses associated with each of the ports in the bridge, and each MAC address can be associated with different VLANs, the snMacStationVLanId can be used by users to specify which VLAN's MAC Station information the dot1dTpFdbTable should provide. If this variable is set to zero (the default value), all MAC station entries will be returned when the dot1dTpFdbTable is retrieved. The VLAN-aware dot1qTpFdbTable described in RFC 2674 should be used as a replacement for this variable.")
snSwClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("valid", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwClearCounters.setStatus('current')
if mibBuilder.loadTexts: snSwClearCounters.setDescription('valid(0) - a SNMP-GET of this mib shows that it is valid command to use. clear(1) - represents clear counter command of the following counters: Dot3, MIB2, IP and IPX counters for all ports.')
snSw8021qTagType = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 34), Integer32().clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSw8021qTagType.setStatus('current')
if mibBuilder.loadTexts: snSw8021qTagType.setDescription('The IEEE802.1q tag type embedded in the length/type field of an Ethernet packet. It specifies that the 2 octets after the length/type field in an Ethernet packet is the tag value.')
snSwBroadcastLimit = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwBroadcastLimit.setStatus('current')
if mibBuilder.loadTexts: snSwBroadcastLimit.setDescription('Limit the number of broadcast packets to forward out of the switch ports. This object specifies the number of broadcast packets per second. Setting a value of 0 to this object disables the limitation check. This object is deprecated by snSwBroadcastLimit2 on NI platform.')
snSwMaxMacFilterPerSystem = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwMaxMacFilterPerSystem.setStatus('current')
if mibBuilder.loadTexts: snSwMaxMacFilterPerSystem.setDescription('The maximum number of MAC Filters per system in the MAC Filter table.')
snSwMaxMacFilterPerPort = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwMaxMacFilterPerPort.setStatus('current')
if mibBuilder.loadTexts: snSwMaxMacFilterPerPort.setDescription('The maximum number of MAC Filters per port in the Port MAC Access Filter table.')
snSwDefaultVLanId = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwDefaultVLanId.setStatus('current')
if mibBuilder.loadTexts: snSwDefaultVLanId.setDescription('The VLAN ID of the DEFAULT PORT-VLAN.')
snSwGlobalAutoNegotiate = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("negFullAuto", 2), ("other", 3))).clone('negFullAuto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwGlobalAutoNegotiate.setStatus('current')
if mibBuilder.loadTexts: snSwGlobalAutoNegotiate.setDescription('This feature only applies to Gigabit Ethernet ports. If set to disable(0), all Gigabit Ethernet ports will be put to non- negotiation mode. If set to enable(1), all Gigabit Ethernet ports will start auto-negotiation indefinitely until succeed. If set to negFullAuto(2), all Gigabit Ethernet ports will start with auto-negotiation, if the negotiation failed, then they will automatically switch to non-negotiation mode. Stackable products (except TurboIron 8) Gigabit Ethernet ports do not support negFullAuto(2). If the snSwPortInfoAutoNegotiate value of a port was not set to global, this global value does not apply to the negotiation mode of that port.')
snSwQosMechanism = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("strict", 0), ("weighted", 1))).clone('weighted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwQosMechanism.setStatus('current')
if mibBuilder.loadTexts: snSwQosMechanism.setDescription('Indicates whether the qos mechanism is strict or weighted. This object is not supported on NI platform.')
snSwSingleStpMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enableStp", 1), ("enableRstp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwSingleStpMode.setStatus('current')
if mibBuilder.loadTexts: snSwSingleStpMode.setDescription('Single Spanning Tree System Mode in the Switch Group can be set either enabled or disabled and the default is disabled mode. disable(0)...........no Single Spanning Tree enableStp(1).........activate SSTP control vlan to run Spanning Tree enableRstp(2)........activate SSTP control vlan to run Rapid Spanning Tree')
snSwFastStpMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwFastStpMode.setStatus('current')
if mibBuilder.loadTexts: snSwFastStpMode.setDescription('Fast Spanning Tree System Mode in the Switch Group can be set either enabled or disabled and the default is enabled mode. enabled(1)...........activate Fast Spanning Tree disabled(0)..........no Fast Spanning Tree')
snSwViolatorIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwViolatorIfIndex.setStatus('current')
if mibBuilder.loadTexts: snSwViolatorIfIndex.setDescription('The port number of the switch or router that received a violator packet. It is included in the locked address violation trap.')
snSwSingleStpVLanId = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwSingleStpVLanId.setStatus('current')
if mibBuilder.loadTexts: snSwSingleStpVLanId.setDescription('The VLAN ID of the Single Spanning Tree VLAN if Single Spanning Tree was enabled. This object returns zero if Single Spanning Tree was disabled.')
snSwBroadcastLimit2 = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 45), Unsigned32().clone(4294967295)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwBroadcastLimit2.setStatus('current')
if mibBuilder.loadTexts: snSwBroadcastLimit2.setDescription('Limit the number of broadcast packets to forward out of the switch ports. This object specifies the number of broadcast packets per second.')
snVLanByPortTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1), )
if mibBuilder.loadTexts: snVLanByPortTable.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortTable.setDescription('If snSwGroupOperMode is configured as basic mode which is VLAN by Port, Layer2 switching, then this table is valid. Each VLAN switch port could have a number of VLAN IDs.')
snVLanByPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByPortVLanIndex"))
if mibBuilder.loadTexts: snVLanByPortEntry.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortEntry.setDescription('An entry in the VLAN By Port Information table. snVLanByPortVLanIndex = 1 and with snVLanByPortVLanId = 1 together implies all attributes applying to the Global switch group i.e. noVLan. A SNMP SET PDU for a row of the snVLanByPortTable requires the entired sequence of the MIB Objects in each snVLanByPortEntry stored in one PDU. Otherwise, GENERR return-value will be returned.')
snVLanByPortVLanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortVLanIndex.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortVLanIndex.setDescription('The VLAN ID index must not be greater than the snVLanGroupVlanMaxEntry. Each VLAN Identifier can have a membership of multiple ports.')
snVLanByPortVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortVLanId.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortVLanId.setDescription('The VLAN ID index to the VLAN By Port Info Table. Each VLAN Identifier can have a membership of multiple ports.')
snVLanByPortPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 3), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortPortMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortPortMask.setDescription('The Standand-alone switch VLAN port membership. (It was obsoleted for Chassis Product)')
snVLanByPortQos = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortQos.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortQos.setDescription('The Stand alone stackable switch VLAN Priority values are: low(0) -- low prority high(1) -- high prority. The BigIron switch VLAN Priority values are: level0(0), level1(1), level2(2), level3(3), level4(4), level5(5), level6(6), level7(7) ')
snVLanByPortStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enableStp", 1), ("enableRstp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortStpMode.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortStpMode.setDescription('Spanning Tree Mode in the Switch Group can be set either enabled or disabled and the default is enabled mode. disable(0)...........no Spanning Tree enableStp(1).........activate Spanning Tree enableRstp(2)........activate Rapid Spanning Tree')
snVLanByPortStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortStpPriority.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortStpPriority.setDescription('dot1dStpPriority : The value of the write-able portion of the Stp ID, i.e., the first two octets of the (8 octet long) Bridge ID. The other (last) 6 octets of the Bridge ID are given by the value of the base bridge address - dot1dBaseBridgeAddress.')
snVLanByPortStpGroupMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortStpGroupMaxAge.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortStpGroupMaxAge.setDescription('dot1dStpBridgeMaxAge: From RFC1493(Bridge MIB). The value that all bridges use for MaxAge when this bridge is acting as the root. Note that 802.1D-1990 specifies that the range for this parameter is related to the value of dot1dStpBridgeHelloTime. The granularity of this timer is specified by 802.1D-1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
snVLanByPortStpGroupHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortStpGroupHelloTime.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortStpGroupHelloTime.setDescription('dot1dStpBridgeHelloTime: From RFC1493(Bridge MIB). The value that all bridges use for HelloTime when this bridge is acting as the root. The granularity of this timer is specified by 802.1D- 1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
snVLanByPortStpGroupForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortStpGroupForwardDelay.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortStpGroupForwardDelay.setDescription('dot1dStpBridgeForwardDelay : From RFC1493(Bridge MIB). The value that all bridges use for ForwardDelay when this bridge is acting as the root. Note that 802.1D-1990 specifies that the range for this parameter is related to the value of dot1dStpBridgeMaxAge. The granularity of this timer is specified by 802.1D-1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
snVLanByPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row other(1)....some other case valid(2)....the row exists and is valid")
snVLanByPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notActivated", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortOperState.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortOperState.setDescription('By default, this mode is set to notActivated(0). notActivated(0)...the VLAN entry is not activated and not in running mode. activated(1)......the VLAN entry is activated and in running mode')
snVLanByPortBaseNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortBaseNumPorts.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortBaseNumPorts.setDescription('The number of ports controlled by this bridging entity.')
snVLanByPortBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("transparentOnly", 2), ("sourcerouteOnly", 3), ("srt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortBaseType.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortBaseType.setDescription('Indicates what type of bridging this bridge can perform. If a bridge is actually performing a certain type of bridging this will be indicated by entries in the port table for the given type.')
snVLanByPortStpProtocolSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpProtocolSpecification.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortStpProtocolSpecification.setDescription("An indication of what version of the Spanning Tree Protocol is being run. The value 'decLb100(2)' indicates the DEC LANbridge 100 Spanning Tree protocol. IEEE 802.1d implementations will return 'ieee8021d(3)'. If future versions of the IEEE Spanning Tree Protocol are released that are incompatible with the current version a new value will be defined.")
snVLanByPortStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 15), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpMaxAge.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortStpMaxAge.setDescription('dot1dStpMaxAge: From RFC1493(Bridge MIB). The maximum age of Spanning Tree Protocol information learned from the network on any port before it is discarded, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
snVLanByPortStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 16), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpHelloTime.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortStpHelloTime.setDescription('dot1dStpHelloTime: From RFC1493(Bridge MIB). The amount of time between the transmission of Configuration bridge PDUs by this node on any port when it is the root of the spanning tree or trying to become so, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
snVLanByPortStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpHoldTime.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortStpHoldTime.setDescription('dot1dStpHoldTime: From RFC1493(Bridge MIB). This time value determines the interval length during which no more than two Configuration bridge PDUs shall be transmitted by this node, in units of hundredths of a second.')
snVLanByPortStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 18), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpForwardDelay.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortStpForwardDelay.setDescription('dot1dStpForwardDelay: From RFC1493(Bridge MIB). This time value, measured in units of hundredths of a second, controls how fast a port changes its spanning state when moving towards the Forwarding state. The value determines how long the port stays in each of the Listening and Learning states, which precede the Forwarding state. This value is also used, when a topology change has been detected and is underway, to age all dynamic entries in the Forwarding Database. [Note that this value is the one that this bridge is currently using, in contrast to dot1dStpBridgeForwardDelay which is the value that this bridge and all others would start using if/when this bridge were to become the root.]')
snVLanByPortStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpTimeSinceTopologyChange.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortStpTimeSinceTopologyChange.setDescription('The time (in hundredths of a second) since the last time a topology change was detected by the bridge entity.')
snVLanByPortStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpTopChanges.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortStpTopChanges.setDescription('The total number of topology changes detected by this bridge since the management entity was last reset or initialized.')
snVLanByPortStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpRootCost.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortStpRootCost.setDescription('dot1dStpRootCost: From RFC1493(Bridge MIB). The cost of the path to the root as seen from this bridge.')
snVLanByPortStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpRootPort.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortStpRootPort.setDescription('dot1dStpRootPort: From RFC1493(Bridge MIB). The port number of the port which offers the lowest cost path from this bridge to the root bridge.')
snVLanByPortStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 23), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortStpDesignatedRoot.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortStpDesignatedRoot.setDescription('dot1dStpDesignatedRoot: From RFC1493(Bridge MIB). The bridge identifier of the root of the spanning tree as determined by the Spanning Tree Protocol as executed by this node. This value is used as the Root Identifier parameter in all Configuration Bridge PDUs originated by this node.')
snVLanByPortBaseBridgeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 24), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortBaseBridgeAddress.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortBaseBridgeAddress.setDescription('The MAC address used by this bridge when it must be referred to in a unique fashion. It is recommended that this be the numerically smallest MAC address of all ports that belong to this bridge. However it is only required to be unique. When concatenated with dot1dStpPriority a unique BridgeIdentifier is formed which is used in the Spanning Tree Protocol.')
snVLanByPortVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortVLanName.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortVLanName.setDescription('VLAN Community Name string.')
snVLanByPortRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortRouterIntf.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortRouterIntf.setDescription('Optional: A virtual interface for router to the VLAN -- applied to router only. If a SNMP-Get value is zero, that means this object was not configured.')
snVLanByPortChassisPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortChassisPortMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortChassisPortMask.setDescription('The Chassis VLAN switch port membership. (It was obsoleted after release 07100, replaced by snVLanByPortPortList)')
snVLanByPortPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortPortList.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByPortPortList.setDescription('A list of port indices which are the port membership of a VLAN By Port. Each port index is a 16-bit integer in big endian order. 8-bit is the slot number, the other 8-bit is the port number.')
snVLanByPortMemberTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 6), )
if mibBuilder.loadTexts: snVLanByPortMemberTable.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortMemberTable.setDescription('Port VLAN (Layer 2 VLAN) port membership table.')
snVLanByPortMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 6, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByPortMemberVLanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByPortMemberPortId"))
if mibBuilder.loadTexts: snVLanByPortMemberEntry.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortMemberEntry.setDescription('An entry of the port VLAN membership table.')
snVLanByPortMemberVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortMemberVLanId.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortMemberVLanId.setDescription('The VLAN identifier (VLAN ID).')
snVLanByPortMemberPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 6, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortMemberPortId.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortMemberPortId.setDescription('The ifIndex which is a member of the port VLAN.')
snVLanByPortMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortMemberRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row other(1)....some other case valid(2)....the row exists and is valid")
snVLanByPortMemberTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortMemberTagMode.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortMemberTagMode.setDescription('For tagged/dual-mode port, we could have multiple VLANs per port. For untagged port, there is only one VLAN ID per port.')
snVLanByPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7), )
if mibBuilder.loadTexts: snVLanByPortCfgTable.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgTable.setDescription('Port VLAN (Layer 2 VLAN) configuration table.')
snVLanByPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByPortCfgVLanId"))
if mibBuilder.loadTexts: snVLanByPortCfgEntry.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgEntry.setDescription('An entry of the port VLAN configuration table.')
snVLanByPortCfgVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgVLanId.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgVLanId.setDescription('The VLAN identifier (VLAN ID).')
snVLanByPortCfgQos = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 2), PortQosTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgQos.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgQos.setDescription('The Stand alone stackable switch VLAN Priority values are: level0(0) -- low prority level1(1) -- high prority. The BigIron switch VLAN Priority values are: level0(0), level1(1), level2(2), level3(3), level4(4), level5(5), level6(6), level7(7). Value invalid(127) is used by CES/CER products to signify that no QoS was specified for this VLAN.')
snVLanByPortCfgStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enableStp", 1), ("enableRstp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgStpMode.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgStpMode.setDescription('Spanning Tree Mode in the Switch Group can be set either enabled or disabled and the default is enabled mode. disable(0)...........no Spanning Tree enableStp(1).........activate Spanning Tree enableRstp(2)........activate Rapid Spanning Tree')
snVLanByPortCfgStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgStpPriority.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgStpPriority.setDescription('dot1dStpPriority : The value of the write-able portion of the Stp ID, i.e., the first two octets of the (8 octet long) Bridge ID. The other (last) 6 octets of the Bridge ID are given by the value of the base bridge address - dot1dBaseBridgeAddress.')
snVLanByPortCfgStpGroupMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgStpGroupMaxAge.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgStpGroupMaxAge.setDescription('dot1dStpBridgeMaxAge: From RFC1493(Bridge MIB). The value that all bridges use for MaxAge when this bridge is acting as the root. Note that 802.1D-1990 specifies that the range for this parameter is related to the value of dot1dStpBridgeHelloTime. The granularity of this timer is specified by 802.1D-1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds. Valid value between 6 and 40. Default is 20 seconds. Value 0 is returned if no STP is not configured for this vlan.')
snVLanByPortCfgStpGroupHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgStpGroupHelloTime.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgStpGroupHelloTime.setDescription('dot1dStpBridgeHelloTime: From RFC1493(Bridge MIB). The value that all bridges use for HelloTime when this bridge is acting as the root. The granularity of this timer is specified by 802.1D- 1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds. Valid value between 1 and 10. Default is 2 seconds. Value 0 is returned if no STP is not configured for this vlan.')
snVLanByPortCfgStpGroupForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgStpGroupForwardDelay.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgStpGroupForwardDelay.setDescription('dot1dStpBridgeForwardDelay : From RFC1493(Bridge MIB). The value that all bridges use for ForwardDelay when this bridge is acting as the root. Note that 802.1D-1990 specifies that the range for this parameter is related to the value of dot1dStpBridgeMaxAge. The granularity of this timer is specified by 802.1D-1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds. Valid value between 2 and 30. Default is 15 seconds. Value 0 is returned if no STP is not configured for this vlan.')
snVLanByPortCfgBaseNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgBaseNumPorts.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgBaseNumPorts.setDescription('The number of ports controlled by this bridging entity.')
snVLanByPortCfgBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("transparentOnly", 2), ("sourcerouteOnly", 3), ("srt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgBaseType.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgBaseType.setDescription('Indicates what type of bridging this bridge can perform. If a bridge is actually performing a certain type of bridging this will be indicated by entries in the port table for the given type.')
snVLanByPortCfgStpProtocolSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpProtocolSpecification.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgStpProtocolSpecification.setDescription("An indication of what version of the Spanning Tree Protocol is being run. The value 'decLb100(2)' indicates the DEC LANbridge 100 Spanning Tree protocol. IEEE 802.1d implementations will return 'ieee8021d(3)'. If future versions of the IEEE Spanning Tree Protocol are released that are incompatible with the current version a new value will be defined.")
snVLanByPortCfgStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpMaxAge.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgStpMaxAge.setDescription('dot1dStpMaxAge: From RFC1493(Bridge MIB). The maximum age of Spanning Tree Protocol information learned from the network on any port before it is discarded, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
snVLanByPortCfgStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpHelloTime.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgStpHelloTime.setDescription('dot1dStpHelloTime: From RFC1493(Bridge MIB). The amount of time between the transmission of Configuration bridge PDUs by this node on any port when it is the root of the spanning tree or trying to become so, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
snVLanByPortCfgStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpHoldTime.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgStpHoldTime.setDescription('dot1dStpHoldTime: From RFC1493(Bridge MIB). This time value determines the interval length during which no more than two Configuration bridge PDUs shall be transmitted by this node, in units of hundredths of a second.')
snVLanByPortCfgStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpForwardDelay.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgStpForwardDelay.setDescription('dot1dStpForwardDelay: From RFC1493(Bridge MIB). This time value, measured in units of hundredths of a second, controls how fast a port changes its spanning state when moving towards the Forwarding state. The value determines how long the port stays in each of the Listening and Learning states, which precede the Forwarding state. This value is also used, when a topology change has been detected and is underway, to age all dynamic entries in the Forwarding Database. [Note that this value is the one that this bridge is currently using, in contrast to dot1dStpBridgeForwardDelay which is the value that this bridge and all others would start using if/when this bridge were to become the root.]')
snVLanByPortCfgStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgStpTimeSinceTopologyChange.setDescription('The time (in hundredths of a second) since the last time a topology change was detected by the bridge entity.')
snVLanByPortCfgStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpTopChanges.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgStpTopChanges.setDescription('The total number of topology changes detected by this bridge since the management entity was last reset or initialized.')
snVLanByPortCfgStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpRootCost.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgStpRootCost.setDescription('dot1dStpRootCost: From RFC1493(Bridge MIB). The cost of the path to the root as seen from this bridge.')
snVLanByPortCfgStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpRootPort.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgStpRootPort.setDescription('dot1dStpRootPort: From RFC1493(Bridge MIB). The port number of the port which offers the lowest cost path from this bridge to the root bridge.')
snVLanByPortCfgStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 19), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgStpDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgStpDesignatedRoot.setDescription('dot1dStpDesignatedRoot: From RFC1493(Bridge MIB). The bridge identifier of the root of the spanning tree as determined by the Spanning Tree Protocol as executed by this node. This value is used as the Root Identifier parameter in all Configuration Bridge PDUs originated by this node.')
snVLanByPortCfgBaseBridgeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 20), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgBaseBridgeAddress.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgBaseBridgeAddress.setDescription('The MAC address used by this bridge when it must be referred to in a unique fashion. It is recommended that this be the numerically smallest MAC address of all ports that belong to this bridge. However it is only required to be unique. When concatenated with dot1dStpPriority a unique BridgeIdentifier is formed which is used in the Spanning Tree Protocol.')
snVLanByPortCfgVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgVLanName.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgVLanName.setDescription('VLAN Community Name string.')
snVLanByPortCfgRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgRouterIntf.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgRouterIntf.setDescription('Optional: A virtual interface for router to the VLAN -- applied to router only. If a SNMP-Get value is zero, that means this object was not configured.')
snVLanByPortCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgRowStatus.setDescription("Use this object to delete a vlan entry. For read operation, its value is 'valid' if it is a user-configured VLAN and 'other' if it is a control-VLAN.")
snVLanByPortCfgStpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgStpVersion.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgStpVersion.setDescription("The version of Spanning Tree Protocol the bridge is currently running. The value 'stpCompatible(0)' indicates the Spanning Tree Protocol specified in IEEE 802.1D and 'rstp(2)' indicates the Rapid Spanning Tree Protocol specified in IEEE 802.1w. New value may be defined as future versions of the protocol become available.")
snVLanByPortCfgInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByPortCfgInOctets.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgInOctets.setDescription('The number of bytes received on this VLAN. This can be used as the per VE couter, if there is one-to-one map for VLAN-VE.')
snVLanByPortCfgTransparentHwFlooding = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByPortCfgTransparentHwFlooding.setStatus('current')
if mibBuilder.loadTexts: snVLanByPortCfgTransparentHwFlooding.setDescription('Specifies the transparent VLAN flooding feature.')
brcdVlanExtStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8), )
if mibBuilder.loadTexts: brcdVlanExtStatsTable.setStatus('current')
if mibBuilder.loadTexts: brcdVlanExtStatsTable.setDescription('This table contains the extended statistics for VLAN ports of G2 and later modules. Not applicable for G1 cards. These applies to L2 VLANs and as well as port VLANs that are associated to IP interfaces (physical or VE).')
brcdVlanExtStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "brcdVlanExtStatsVlanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "brcdVlanExtStatsIfIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "brcdVlanExtStatsPriorityId"))
if mibBuilder.loadTexts: brcdVlanExtStatsEntry.setStatus('current')
if mibBuilder.loadTexts: brcdVlanExtStatsEntry.setDescription('A row in this table represents a VLAN extended statistics accounting entry. It can be a per-VLAN/port entry, in this case the Priority-ID is 128 (invalid). It can also be in a priority level granularity of the VLAN port, in this case the Priority-ID specifies which port QOS priority, and Priority-ID 128 is the index to the aggregate count bucket.')
brcdVlanExtStatsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 1), BrcdVlanIdTC())
if mibBuilder.loadTexts: brcdVlanExtStatsVlanId.setStatus('current')
if mibBuilder.loadTexts: brcdVlanExtStatsVlanId.setDescription('The VLAN identifier (VLAN ID).')
brcdVlanExtStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: brcdVlanExtStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: brcdVlanExtStatsIfIndex.setDescription('The ifIndex of the port belonging to this VLAN.')
brcdVlanExtStatsPriorityId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 3), PortPriorityTC())
if mibBuilder.loadTexts: brcdVlanExtStatsPriorityId.setStatus('current')
if mibBuilder.loadTexts: brcdVlanExtStatsPriorityId.setDescription('Identifies the port QOS priority. The values 1 through 8 internally maps to priorities 0 through 7. The value 128 indicates that priority-level accounting is not enabled')
brcdVlanExtStatsInSwitchedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsInSwitchedPkts.setStatus('current')
if mibBuilder.loadTexts: brcdVlanExtStatsInSwitchedPkts.setDescription('The number of valid frames received by this port classified as belonging to this VLAN for switched packets. The value is applicable only if the system was configured to separately count the two types of packets. Otherwise, it returns 0.')
brcdVlanExtStatsInRoutedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsInRoutedPkts.setStatus('current')
if mibBuilder.loadTexts: brcdVlanExtStatsInRoutedPkts.setDescription(' The number of valid frames received by this port classified as belonging to this VLAN for routed packets. The value is applicable only if the system was configured to separately count the two types of packets. Otherwise, it returns 0.')
brcdVlanExtStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsInPkts.setStatus('current')
if mibBuilder.loadTexts: brcdVlanExtStatsInPkts.setDescription('The number of valid frames received by this port classified as belonging to this VLAN for both switched and routed packets.')
brcdVlanExtStatsOutSwitchedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsOutSwitchedPkts.setStatus('current')
if mibBuilder.loadTexts: brcdVlanExtStatsOutSwitchedPkts.setDescription('The number of valid frames transmitted by this port classified as belonging to this VLAN for switched packets. The value is applicable only if the system was configured to separately count the two types of packets. Otherwise, it returns 0.')
brcdVlanExtStatsOutRoutedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsOutRoutedPkts.setStatus('current')
if mibBuilder.loadTexts: brcdVlanExtStatsOutRoutedPkts.setDescription('The number of valid frames transmitted by this port classified as belonging to this VLAN for routed packets. The value is applicable only if the system was configured to separately count the two types of packets. Otherwise, it returns 0.')
brcdVlanExtStatsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsOutPkts.setStatus('current')
if mibBuilder.loadTexts: brcdVlanExtStatsOutPkts.setDescription('The number of valid frames transmitted by this port classified as belonging to this VLAN for both switched and routed packets.')
brcdVlanExtStatsInSwitchedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsInSwitchedOctets.setStatus('current')
if mibBuilder.loadTexts: brcdVlanExtStatsInSwitchedOctets.setDescription('The bytes count received by this port classified as belonging to this VLAN for switched packets. The value is applicable only if the system was configured to separately count the two types of packets. Otherwise, it returns 0.')
brcdVlanExtStatsInRoutedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsInRoutedOctets.setStatus('current')
if mibBuilder.loadTexts: brcdVlanExtStatsInRoutedOctets.setDescription('The bytes count received by this port classified as belonging to this VLAN for routed packets. The value is applicable only if the system was configured to separately count the two types of packets. Otherwise, it returns 0.')
brcdVlanExtStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: brcdVlanExtStatsInOctets.setDescription('The bytes count received by this port classified as belonging to this VLAN for both switched and routed packets. ')
brcdVlanExtStatsOutSwitchedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsOutSwitchedOctets.setStatus('current')
if mibBuilder.loadTexts: brcdVlanExtStatsOutSwitchedOctets.setDescription('The bytes count transmitted by this port classified as belonging to this VLAN for switched packets. The value is applicable only if the system was configured to separately count the two types of packets. Otherwise, it returns 0.')
brcdVlanExtStatsOutRoutedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsOutRoutedOctets.setStatus('current')
if mibBuilder.loadTexts: brcdVlanExtStatsOutRoutedOctets.setDescription('The bytes count transmitted by this port classified as belonging to this VLAN for routed packets. The value is applicable only if the system was configured to separately count the two types of packets. Otherwise, it returns 0.')
brcdVlanExtStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 8, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVlanExtStatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: brcdVlanExtStatsOutOctets.setDescription('The bytes count transmitted by this port classified as belonging to this VLAN for both switched and routed packets. ')
snVLanByProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2), )
if mibBuilder.loadTexts: snVLanByProtocolTable.setStatus('current')
if mibBuilder.loadTexts: snVLanByProtocolTable.setDescription('.')
snVLanByProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByProtocolVLanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByProtocolIndex"))
if mibBuilder.loadTexts: snVLanByProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: snVLanByProtocolEntry.setDescription('An entry in the VLAN By Protocol Configuration table. ')
snVLanByProtocolVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByProtocolVLanId.setStatus('current')
if mibBuilder.loadTexts: snVLanByProtocolVLanId.setDescription('The VLAN ID index to both of the VLAN By Port Info Table and this table.')
snVLanByProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("appleTalk", 3), ("decNet", 4), ("netBios", 5), ("others", 6), ("ipv6", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: snVLanByProtocolIndex.setDescription(' The following IP/IPX protocol VLAN types are operated in Layer3 VLAN such as : ip(1), ipx(2), ipv6(7) The following are operated in Layer2 bridging such as: appleTalk(3), decNet(4), netBios(5), others(6) -- other protocols which are defined here. ')
snVLanByProtocolDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolDynamic.setStatus('current')
if mibBuilder.loadTexts: snVLanByProtocolDynamic.setDescription(' disabled(0) : disabled dynamic port inclusion - applied to switch only. enabled(1) : enabled dynamic port inclusion - applied to switch only. ')
snVLanByProtocolStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 4), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolStaticMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByProtocolStaticMask.setDescription('The Standand-alone switch Protocol VLAN port membership applied in static mode. (It was obsoleted for Chassis Product)')
snVLanByProtocolExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 5), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolExcludeMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByProtocolExcludeMask.setDescription('The Standand-alone switch Protocol VLAN port membership applied in exclusive mode. (It was obsoleted for Chassis Product)')
snVLanByProtocolRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolRouterIntf.setStatus('current')
if mibBuilder.loadTexts: snVLanByProtocolRouterIntf.setDescription('Optional: A virtual interface for router to the VLAN -- applied to router only. If a SNMP-Get value is zero, that means this object was not configured.')
snVLanByProtocolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolRowStatus.setStatus('current')
if mibBuilder.loadTexts: snVLanByProtocolRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row other(1)....some other case valid(2)....the row exists and is valid")
snVLanByProtocolDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 8), PortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByProtocolDynamicMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByProtocolDynamicMask.setDescription('The Standand-alone switch Protocol VLAN active port membership. (It was obsoleted for Chassis Product)')
snVLanByProtocolChassisStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolChassisStaticMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByProtocolChassisStaticMask.setDescription('The Chassis Protocol VLAN port membership applied in static mode. (It was obsoleted after release 07100, replaced by snVLanByProtocolStaticPortList)')
snVLanByProtocolChassisExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolChassisExcludeMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByProtocolChassisExcludeMask.setDescription('The Chassis Protocol VLAN port membership applied in exclusive mode. (It was obsoleted after release 07100, replaced by snVLanByProtocolExcludePortList)')
snVLanByProtocolChassisDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByProtocolChassisDynamicMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByProtocolChassisDynamicMask.setDescription('The Chassis Protocol VLAN active port membership. (It was obsoleted after release 07100, replaced by snVLanByProtocolDynamicPortList)')
snVLanByProtocolVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolVLanName.setStatus('current')
if mibBuilder.loadTexts: snVLanByProtocolVLanName.setDescription('VLAN Community Name string.')
snVLanByProtocolStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolStaticPortList.setStatus('current')
if mibBuilder.loadTexts: snVLanByProtocolStaticPortList.setDescription('A list of port indices which are the configured port membership of the Protocol VLAN. Each port index is a 16-bit integer in big endian order. 8-bit is the slot number, the other 8-bit is the port number.')
snVLanByProtocolExcludePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByProtocolExcludePortList.setStatus('current')
if mibBuilder.loadTexts: snVLanByProtocolExcludePortList.setDescription('A list of port indices which are the excluded from port membership of the Protocol VLAN. Each port index is a 16-bit integer in big endian order. 8-bit is the slot number, the other 8-bit is the port number.')
snVLanByProtocolDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByProtocolDynamicPortList.setStatus('current')
if mibBuilder.loadTexts: snVLanByProtocolDynamicPortList.setDescription('A list of port indices which are dynamically joining the port membership of the Protocol VLAN. Each port index is a 16-bit integer in big endian order. 8-bit is the slot number, the other 8-bit is the port number.')
snVLanByIpSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3), )
if mibBuilder.loadTexts: snVLanByIpSubnetTable.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpSubnetTable.setDescription('An entry of the VLAN By IPX Network Number Table.')
snVLanByIpSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByIpSubnetVLanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByIpSubnetIpAddress"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByIpSubnetSubnetMask"))
if mibBuilder.loadTexts: snVLanByIpSubnetEntry.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpSubnetEntry.setDescription('An entry in the VLAN By IP Subnet Configuration table. ')
snVLanByIpSubnetVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpSubnetVLanId.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpSubnetVLanId.setDescription('The VLAN ID index to both of the VLAN By Port Info Table and this table.')
snVLanByIpSubnetIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpSubnetIpAddress.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpSubnetIpAddress.setDescription('Subnet IP address.')
snVLanByIpSubnetSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpSubnetSubnetMask.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpSubnetSubnetMask.setDescription('Subnet mask associated with the Subnet IP address.')
snVLanByIpSubnetDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetDynamic.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpSubnetDynamic.setDescription(' disabled(0) : disabled dynamic port inclusion - applied to switch only. enabled(1) : enabled dynamic port inclusion - applied to switch only. ')
snVLanByIpSubnetStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 5), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetStaticMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByIpSubnetStaticMask.setDescription('The Standand-alone switch VLAN By Subnet port membership applied in static mode. (It was obsoleted for Chassis Product)')
snVLanByIpSubnetExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 6), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetExcludeMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByIpSubnetExcludeMask.setDescription('The Standand-alone switch VLAN By Subnet port membership applied in exclusive mode. (It was obsoleted for Chassis Product)')
snVLanByIpSubnetRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetRouterIntf.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpSubnetRouterIntf.setDescription('Optional: A virtual interface for router to the VLAN -- applied to router only. If a SNMP-Get value is zero, that means this object was not configured.')
snVLanByIpSubnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetRowStatus.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpSubnetRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row other(1)....some other case valid(2)....the row exists and is valid")
snVLanByIpSubnetDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 9), PortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpSubnetDynamicMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByIpSubnetDynamicMask.setDescription('The Standand-alone switch VLAN By Subnet active port membership. (It was obsoleted for Chassis Product)')
snVLanByIpSubnetChassisStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetChassisStaticMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByIpSubnetChassisStaticMask.setDescription('The Chassis VLAN By Subnet port membership applied in static mode. (It was obsoleted after release 07100, replaced by snVLanByIpSubnetStaticPortList)')
snVLanByIpSubnetChassisExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetChassisExcludeMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByIpSubnetChassisExcludeMask.setDescription('The Chassis VLAN By Subnet port membership applied in exclusive mode. (It was obsoleted after release 07100, replaced by snVLanByIpSubnetExcludePortList)')
snVLanByIpSubnetChassisDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpSubnetChassisDynamicMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByIpSubnetChassisDynamicMask.setDescription('The Chassis VLAN By Subnet active port membership. (It was obsoleted after release 07100, replaced by snVLanByIpSubnetDynamicPortList)')
snVLanByIpSubnetVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetVLanName.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpSubnetVLanName.setDescription('VLAN Community Name string.')
snVLanByIpSubnetStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetStaticPortList.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpSubnetStaticPortList.setDescription('A list of port indices which are the configured port membership of the VLAN By IP Subnet. Each port index is a 16-bit integer in big endian order. 8-bit is the slot number, the other 8-bit is the port number.')
snVLanByIpSubnetExcludePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpSubnetExcludePortList.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpSubnetExcludePortList.setDescription('A list of port indices which are the excluded from port membership of the VLAN By IP Subnet. Each port index is a 16-bit integer in big endian order. 8-bit is the slot number, the other 8-bit is the port number.')
snVLanByIpSubnetDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpSubnetDynamicPortList.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpSubnetDynamicPortList.setDescription('A list of port indices which are dynamically joining the port membership of the VLAN By IP Subnet. Each port index is a 16-bit integer in big endian order. 8-bit is the slot number, the other 8-bit is the port number.')
snVLanByIpxNetTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4), )
if mibBuilder.loadTexts: snVLanByIpxNetTable.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpxNetTable.setDescription('An entry of the VLAN By IPX Network Number Table.')
snVLanByIpxNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByIpxNetVLanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByIpxNetNetworkNum"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByIpxNetFrameType"))
if mibBuilder.loadTexts: snVLanByIpxNetEntry.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpxNetEntry.setDescription('An entry in the VLAN By Ipx Network Number Configuration table. ')
snVLanByIpxNetVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpxNetVLanId.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpxNetVLanId.setDescription('The VLAN ID index to both of the VLAN By Port Info Table and this table.')
snVLanByIpxNetNetworkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpxNetNetworkNum.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpxNetNetworkNum.setDescription('IPX Network Number.')
snVLanByIpxNetFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 0), ("ipxEthernet8022", 1), ("ipxEthernet8023", 2), ("ipxEthernetII", 3), ("ipxEthernetSnap", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpxNetFrameType.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpxNetFrameType.setDescription(' The following IPX Frame types are operated in Layer3 VLAN such as : ipxEthernet8022(1), ipxEthernet8023(2), ipxEthernetII(3), ipxEthernetSnap(4). choose notApplicable(0) for other protocols. Note: Each Network Number can be assigned with one unique Frame type; Otherwise, a SNMP-SET error will be returned.')
snVLanByIpxNetDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetDynamic.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpxNetDynamic.setDescription(' disabled(0) : disabled dynamic port inclusion - applied to switch only. enabled(1) : enabled dynamic port inclusion - applied to switch only. ')
snVLanByIpxNetStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 5), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetStaticMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByIpxNetStaticMask.setDescription('The VLAN By IPX network port membership applied in static mode. (It was obsoleted for Chassis Product)')
snVLanByIpxNetExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 6), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetExcludeMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByIpxNetExcludeMask.setDescription('The VLAN By IPX network port membership applied in exclusive mode. (It was obsoleted for Chassis Product)')
snVLanByIpxNetRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetRouterIntf.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpxNetRouterIntf.setDescription('Optional: A virtual interface for router to the VLAN -- applied to router only. If a SNMP-Get value is zero, that means this object was not configured.')
snVLanByIpxNetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetRowStatus.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpxNetRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row other(1)....some other case valid(2)....the row exists and is valid")
snVLanByIpxNetDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 9), PortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpxNetDynamicMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByIpxNetDynamicMask.setDescription('The VLAN By IPX network active port membership. (It was obsoleted for Chassis Product)')
snVLanByIpxNetChassisStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetChassisStaticMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByIpxNetChassisStaticMask.setDescription('The Chassis VLAN By IPX network port membership applied in static mode. (It was obsoleted after release 07100, replaced by snVLanByIpxNetStaticPortList)')
snVLanByIpxNetChassisExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetChassisExcludeMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByIpxNetChassisExcludeMask.setDescription('The Chassis VLAN By IPX network port membership applied in exclusive mode. (It was obsoleted after release 07100, replaced by snVLanByIpxNetExcludePortList)')
snVLanByIpxNetChassisDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpxNetChassisDynamicMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByIpxNetChassisDynamicMask.setDescription('The Chassis VLAN By IPX network active port membership. (It was obsoleted after release 07100, replaced by snVLanByIpxNetDynamicPortList)')
snVLanByIpxNetVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetVLanName.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpxNetVLanName.setDescription('VLAN Community Name string.')
snVLanByIpxNetStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetStaticPortList.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpxNetStaticPortList.setDescription('A list of port indices which are the configured port membership of the VLAN By IPX network. Each port index is a 16-bit integer in big endian order. 8-bit is the slot number, the other 8-bit is the port number.')
snVLanByIpxNetExcludePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByIpxNetExcludePortList.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpxNetExcludePortList.setDescription('A list of port indices which are the excluded from port membership of the VLAN By IPX network. Each port index is a 16-bit integer in big endian order. 8-bit is the slot number, the other 8-bit is the port number.')
snVLanByIpxNetDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByIpxNetDynamicPortList.setStatus('current')
if mibBuilder.loadTexts: snVLanByIpxNetDynamicPortList.setDescription('A list of port indices which are dynamically joining the port membership of the VLAN By IPX network. Each port index is a 16-bit integer in big endian order. 8-bit is the slot number, the other 8-bit is the port number.')
snVLanByATCableTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5), )
if mibBuilder.loadTexts: snVLanByATCableTable.setStatus('current')
if mibBuilder.loadTexts: snVLanByATCableTable.setDescription('A Table Of VLAN By AppleTalk Network Number.')
snVLanByATCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByATCableVLanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByATCableIndex"))
if mibBuilder.loadTexts: snVLanByATCableEntry.setStatus('current')
if mibBuilder.loadTexts: snVLanByATCableEntry.setDescription('An entry of the AppleTalk Cable VLAN table.')
snVLanByATCableVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByATCableVLanId.setStatus('current')
if mibBuilder.loadTexts: snVLanByATCableVLanId.setDescription('The VLAN ID of a PORT VLAN of which the AppleTalk Cable VLAN was attaching to.')
snVLanByATCableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanByATCableIndex.setStatus('current')
if mibBuilder.loadTexts: snVLanByATCableIndex.setDescription('AppleTalk Cable VLAN index number.')
snVLanByATCableRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByATCableRouterIntf.setStatus('current')
if mibBuilder.loadTexts: snVLanByATCableRouterIntf.setDescription('A virtual router interface to the AppleTalk Cable VLAN, only router products accept the SNMP-SET operation. The value zero indicates that virtual router interface was not configured.')
snVLanByATCableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByATCableRowStatus.setStatus('current')
if mibBuilder.loadTexts: snVLanByATCableRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row other(1)....some other case valid(2)....the row exists and is valid")
snVLanByATCableChassisStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByATCableChassisStaticMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVLanByATCableChassisStaticMask.setDescription('A list of ports which are statically configured to become port members of a VLAN. (It was obsoleted after release 07100, replaced by snVLanByATCableStaticPortList)')
snVLanByATCableVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByATCableVLanName.setStatus('current')
if mibBuilder.loadTexts: snVLanByATCableVLanName.setDescription('VLAN Name string.')
snVLanByATCableStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVLanByATCableStaticPortList.setStatus('current')
if mibBuilder.loadTexts: snVLanByATCableStaticPortList.setDescription('A list of port indices which are the configured port membership of the AppleTalk Cable VLAN. Each port index is a 16-bit integer in big endian order. 8-bit is the slot number, the other 8-bit is the port number.')
snSwPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1), )
if mibBuilder.loadTexts: snSwPortInfoTable.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInfoTable.setDescription('A specific snSwPortInfo group consists of a number of switch ports. ')
snSwPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snSwPortInfoPortNum"))
if mibBuilder.loadTexts: snSwPortInfoEntry.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInfoEntry.setDescription('An entry in the snSwPortInfo table indicates the configuration on a specified port. A SNMP SET PDU for a row of the snSwPortInfoTable requires the entired sequence of the MIB Objects in each snSwPortInfoEntry stored in one PDU. Otherwise, GENERR return-value will be returned.')
snSwPortInfoPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInfoPortNum.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInfoPortNum.setDescription('The port index. The bit 0 to bit 7: port number. The bit 8 to bit 11: slot number (slot for chassis only).')
snSwPortInfoMonitorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("input", 1), ("output", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoMonitorMode.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInfoMonitorMode.setDescription('DEPRECATED by snSwPortInfoMirrorMode and snPortMonitorTable.')
snSwPortInfoTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2), ("auto", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoTagMode.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInfoTagMode.setDescription('For tagged port, we could have multiple VLANs per port. For untagged port or auto port, there is only one VLAN ID per port.')
snSwPortInfoChnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("halfDuplex", 1), ("fullDuplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoChnMode.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInfoChnMode.setDescription('The port can be configured to operate in either half or full duplex mode. The values are: halfDuplex(1)...half duplex mode fullDuplex(2)...full duplex mode The read-back channel status from hardware are: none(0).........link down or port disabled. halfDuplex(1)...half duplex mode fullDuplex(2)...full duplex mode The port media type (expansion or regular) and port link type (trunk or feeder) determine value of this object. The port can not set to half duplex mode if the port connect mode is m200e(4). However, the value of this parameter may be automatically set whenever the expansion port is connected (e.g. cascade connecting device).')
snSwPortInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("sAutoSense", 1), ("s10M", 2), ("s100M", 3), ("s1G", 4), ("s1GM", 5), ("s155M", 6), ("s10G", 7), ("s622M", 8), ("s2488M", 9), ("s9953M", 10), ("s16G", 11), ("s40G", 13), ("s2500M", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoSpeed.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInfoSpeed.setDescription('The speed configuration for a port. The values are: none(0)..........link down or no traffic. sAutoSense(1)....Auto-sensing 10 or 100Mbits. s10M(2)..........10Mbits per second. s100M(3).........100Mbits per second. s1G(4)...........1Gbits per second. s1GM(5)..........1Gbits per second master. s155M(6).........155Mbits per second (ATM) (for expansion board only). s10G(7)..........10Gbits per second. s622M(8).........OC12 - 622Mbits per second s2488M(9)........OC48 - 2.488Gbits per second s9953M(10).......OC192 - 9.953Gbits per second s16G(11)..........16Gbits per second. s40G(13)..........40Gbits per second. s2500M(14)..........2.5Gbits per second. The read-back hardware status are the following: none(0)..........link down or no traffic. s10M(2)..........10Mbits per second. s100M(3).........100Mbits per second. s1G(4)...........1Gbits per second. s1GM(5)..........1Gbits per second master. s155M(6).........155Mbits per second (ATM) (for expansion board only). s10G(7)..........10Gbits per second. s622M(8).........OC12 - 622Mbits per second s2488M(9)........OC48 - 2.488Gbits per second s9953M(10).......OC192 - 9.953Gbits per second s16G(11)..........16Gbits per second. s40G(13)..........40Gbits per second. s2500M(14)..........2.5Gbits per second. The port media type (expansion or regular) and port link type (trunk or feeder) determine whether this object can be written and the valid values. It is not allowed to change speed for trunks ports. For expansion ports, all of the above speed can be set. However, the value of this parameter may be automatically set whenever the expansion port is connected (e.g. cascade connecting device).')
snSwPortInfoMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("other", 1), ("m100BaseTX", 2), ("m100BaseFX", 3), ("m1000BaseFX", 4), ("mT3", 5), ("m155ATM", 6), ("m1000BaseTX", 7), ("m622ATM", 8), ("m155POS", 9), ("m622POS", 10), ("m2488POS", 11), ("m10000BaseFX", 12), ("m9953POS", 13), ("m16GStacking", 14), ("m100GBaseFX", 15), ("m40GStacking", 16), ("m40GBaseFX", 17), ("m10000BaseTX", 18), ("m2500BaseTX", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInfoMediaType.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInfoMediaType.setDescription('The media type for the port. The values are: other(1).........other or unknown media. m100BaseTX(2)....100Mbits per second copper. m100BaseFX(3)....100Mbits per second fiber. m1000BaseFX(4)...1Gbits per second fiber. mT3(5)...........45Mbits per second (T3). m155ATM(6).......155Mbits per second (ATM). m1000BaseTX(7)...1Gbits per second copper. m622ATM(8).......622Mbits per second (ATM). m155POS(9).......155Mbits per second (POS). m622POS(10)......622Mbits per second (POS). m2488POS(11).....2488Mbits per second (POS). m10000BaseFX(12).10Gbits per second fiber. m9953POS(13).....9953Mbits per second (POS). m16GStacking(14).16Gbits per second fiber. m40GStacking(16). 40Gbits per second fiber.')
snSwPortInfoConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("copper", 2), ("fiber", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInfoConnectorType.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInfoConnectorType.setDescription('The type of connector that the port offers. The values are: other(1)...........other or unknown connector copper(2)..........Copper connector fiber(3)...........Fiber connector This describes the physical connector type')
snSwPortInfoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoAdminStatus.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInfoAdminStatus.setDescription('The desired state of all ports. The testing(3) state indicates that no operational packets can be passed. (same as ifAdminStatus in MIB-II)')
snSwPortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInfoLinkStatus.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInfoLinkStatus.setDescription('The current operational state of the interface. The testing(3) state indicates that no operational packets can be passed. (same as ifOperStatus in MIB-II)')
snSwPortInfoPortQos = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoPortQos.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInfoPortQos.setDescription('The Stand alone stackable switch Port Qos Priority values are: low(0) -- low prority high(1) -- high prority. The BigIron Port Qos Priority values are: level0(0), level1(1), level2(2), level3(3), level4(4), level5(5), level6(6), level7(7) ')
snSwPortInfoPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 11), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInfoPhysAddress.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInfoPhysAddress.setDescription('The port physical address. The physical address represents the switch port.')
snSwPortStatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInFrames.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsInFrames.setDescription('The total number of packets received on the interface.')
snSwPortStatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutFrames.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsOutFrames.setDescription('The total number of packets transmitted out of the interface.')
snSwPortStatsAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsAlignErrors.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsAlignErrors.setDescription('dot3StatsAlignmentErrors : A count of frames received on a particular interface that are not an integral number of octets in length and do not pass the FCS check. The count represented by an instance of this object is incremented when the alignmentError status is returned by the MAC service to the LLC (or other MAC user). Received frames for which multiple error conditions obtain are, according to the conventions of IEEE 802.3 Layer Management, counted exclusively according to the error status presented to the LLC.')
snSwPortStatsFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsFCSErrors.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsFCSErrors.setDescription('dot3StatsFCSErrors : A count of frames received on a particular interface that are an integral number of octets in length but do not pass the FCS check. The count represented by an instance of this object is incremented when the frameCheckError status is returned by the MAC service to the LLC (or other MAC user). Received frames for which multiple error conditions obtain are, according to the conventions of IEEE 802.3 Layer Management, counted exclusively according to the error status presented to the LLC.')
snSwPortStatsMultiColliFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsMultiColliFrames.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsMultiColliFrames.setDescription('dot3StatsMultipleCollisionFrames : A count of successfully transmitted frames on a particular interface for which transmission is inhibited by more than one collision. A frame that is counted by an instance of this object is also counted by the corresponding instance of either the ifOutUcastPkts, ifOutMulticastPkts, or ifOutBroadcastPkts, and is not counted by the corresponding instance of the dot3StatsSingleCollisionFrames object.')
snSwPortStatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsFrameTooLongs.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsFrameTooLongs.setDescription('dot3StatsFrameTooLongs : A count of frames received on a particular interface that exceed the maximum permitted frame size. The count represented by an instance of this object is incremented when the frameTooLong status is returned by the MAC service to the LLC (or other MAC user). Received frames for which multiple error conditions obtain are, according to the conventions of IEEE 802.3 Layer Management, counted exclusively according to the error status presented to the LLC.')
snSwPortStatsTxColliFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsTxColliFrames.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsTxColliFrames.setDescription('A count of successfully transmitted frames on a particular interface for which transmission is inhibited by more than one collision. A frame that is counted by a combination of both dot3StatsSingleCollisionFrames and dot3StatsMultipleCollisionFrames objects.')
snSwPortStatsRxColliFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsRxColliFrames.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsRxColliFrames.setDescription('A count of successfully received frames on a particular interface for which transmission is inhibited by more than one collision. This object is not specified in dot3 but it has the same functionarity as snSwPortStatsTxColliFrames.')
snSwPortStatsFrameTooShorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsFrameTooShorts.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsFrameTooShorts.setDescription(' A count of frames received on a particular interface that below the minimum permitted frame size.')
snSwPortLockAddressCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortLockAddressCount.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortLockAddressCount.setDescription('The number of source MAC addresses are allowed for a port. Writing 0 to this object will allow any number of addresses.')
snSwPortStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortStpPortEnable.setReference('IEEE 802.1D-1990: Section 4.5.5.2, dot1dStpPortEnable')
if mibBuilder.loadTexts: snSwPortStpPortEnable.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStpPortEnable.setDescription('The enabled/disabled status of the port.')
snSwPortDhcpGateListId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortDhcpGateListId.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortDhcpGateListId.setDescription('The ID for a DHCP gateway list entry relative to this switch port. 0 = unset or no assigned ID')
snSwPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortName.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortName.setDescription('Port Name string.')
snSwPortStatsInBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInBcastFrames.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsInBcastFrames.setDescription('The total number of broadcast packets received on the interface.')
snSwPortStatsOutBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutBcastFrames.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsOutBcastFrames.setDescription('The total number of broadcast packets transmitted out of the interface.')
snSwPortStatsInMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInMcastFrames.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsInMcastFrames.setDescription('The total number of multicast packets received on the interface.')
snSwPortStatsOutMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutMcastFrames.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsOutMcastFrames.setDescription('The total number of multicast packets transmitted out of the interface.')
snSwPortStatsInDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInDiscard.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsInDiscard.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.')
snSwPortStatsOutDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutDiscard.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsOutDiscard.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
snSwPortStatsMacStations = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsMacStations.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsMacStations.setDescription('The total number of MAC Stations connected to the interface.')
snSwPortCacheGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortCacheGroupId.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortCacheGroupId.setDescription('Cache Group ID for the interface.')
snSwPortTransGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortTransGroupId.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortTransGroupId.setDescription('Transparent Group ID for the interface.')
snSwPortInfoAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("negFullAuto", 2), ("global", 3), ("other", 4))).clone('global')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoAutoNegotiate.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInfoAutoNegotiate.setDescription('This feature only applies to Gigabit Ethernet ports. If set to disable(0), port will be put to non-negotiation mode. If set to enable(1), port will start auto-negotiation indefinitely until succeed. If set to negFullAuto(2), the port will start with auto- negotiation, if the negotiation failed, then it will automatically switch to non-negotiation mode. Stackable products (except TurboIron 8) Gigabit Ethernet ports do not support negFullAuto(2). If set to global(3), port negotiation mode follows the value of snSwGlobalAutoNegotiate. Non-Gigabit Ethernet port returns the value other(4).')
snSwPortInfoFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoFlowControl.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInfoFlowControl.setDescription('Enable/Disbale port flow control.')
snSwPortInfoGigType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 255))).clone(namedValues=NamedValues(("m1000BaseSX", 0), ("m1000BaseLX", 1), ("m1000BaseLH", 2), ("m1000BaseLHA", 3), ("m1000BaseLHB", 4), ("m1000BaseTX", 5), ("m10000BaseSR", 6), ("m10000BaseLR", 7), ("m10000BaseER", 8), ("sfpCWDM1470nm80Km", 9), ("sfpCWDM1490nm80Km", 10), ("sfpCWDM1510nm80Km", 11), ("sfpCWDM1530nm80Km", 12), ("sfpCWDM1550nm80Km", 13), ("sfpCWDM1570nm80Km", 14), ("sfpCWDM1590nm80Km", 15), ("sfpCWDM1610nm80Km", 16), ("sfpCWDM1470nm100Km", 17), ("sfpCWDM1490nm100Km", 18), ("sfpCWDM1510nm100Km", 19), ("sfpCWDM1530nm100Km", 20), ("sfpCWDM1550nm100Km", 21), ("sfpCWDM1570nm100Km", 22), ("sfpCWDM1590nm100Km", 23), ("sfpCWDM1610nm100Km", 24), ("m1000BaseLHX", 25), ("m1000BaseSX2", 26), ("m1000BaseGBXU", 27), ("m1000BaseGBXD", 28), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInfoGigType.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInfoGigType.setDescription('The media type for the port. The values are: m1000BaseSX(0)....1Gbits per second fiber, with a short wavelength transceiver. m1000BaseLX(1)....1Gbits per second fiber, with a long wavelength transceiver (3km). m1000BaseLH(2)....1Gbits per second fiber, with a special wavelength transceiver (50km). m1000BaseLHA(3)....1Gbits per second fiber, with a special wavelength transceiver (70km). m1000BaseLHB(4)....1Gbits per second fiber, with a special wavelength transceiver (150km). m1000BaseTX(5)....1Gbits per second copper (100meter). m10000BaseSR(6)....10Gbits per second fiber, with a short range wavelength transceiver (100m). m10000BaseLR(7)....10Gbits per second fiber, with a long range wavelength transceiver (10km). m10000BaseER(8)....10Gbits per second fiber, with a extended range wavelength transceiver (40km). sfpCWDM1470nm80Km(9)....1Gbits per second CWDM fiber, with a wavelength 1470nm, reach 80 kms. sfpCWDM1490nm80Km(10)....1Gbits per second CWDM fiber, with a wavelength 1490nm, reach 80 kms. sfpCWDM1510nm80Km(11)....1Gbits per second CWDM fiber, with a wavelength 1510nm, reach 80 kms. sfpCWDM1530nm80Km(12)....1Gbits per second CWDM fiber, with a wavelength 1530nm, reach 80 kms. sfpCWDM1550nm80Km(13)....1Gbits per second CWDM fiber, with a wavelength 1550nm, reach 80 kms. sfpCWDM1570nm80Km(14)....1Gbits per second CWDM fiber, with a wavelength 1570nm, reach 80 kms. sfpCWDM1590nm80Km(15)....1Gbits per second CWDM fiber, with a wavelength 1590nm, reach 80 kms. sfpCWDM1610nm80Km(16)....1Gbits per second CWDM fiber, with a wavelength 1610nm, reach 80 kms. sfpCWDM1470nm100Km(17)....1Gbits per second CWDM fiber, with a wavelength 1470nm, reach 100 kms. sfpCWDM1490nm100Km(18)....1Gbits per second CWDM fiber, with a wavelength 1490nm, reach 100 kms. sfpCWDM1510nm100Km(19)....1Gbits per second CWDM fiber, with a wavelength 1510nm, reach 100 kms. sfpCWDM1530nm100Km(20)....1Gbits per second CWDM fiber, with a wavelength 1530nm, reach 100 kms. sfpCWDM1550nm100Km(21)....1Gbits per second CWDM fiber, with a wavelength 1550nm, reach 100 kms. sfpCWDM1570nm100Km(22)....1Gbits per second CWDM fiber, with a wavelength 1570nm, reach 100 kms. sfpCWDM1590nm100Km(23)....1Gbits per second CWDM fiber, with a wavelength 1590nm, reach 100 kms. sfpCWDM1610nm100Km(24)....1Gbits per second CWDM fiber, with a wavelength 1610nm, reach 100 kms. m1000BaseLHX(25)...1Gbits per second fiber, with a special wavelength transceiver (150km). m2500BaseTX(50)...2.5GBASE fiber. notApplicable(255)....a non-gigabit port.')
snSwPortStatsLinkChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsLinkChange.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsLinkChange.setDescription('The total number of link state change of the interface.')
snSwPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortIfIndex.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortIfIndex.setDescription('In order to identify a particular interface, this object shall identify the instance of the ifIndex object, defined in RFC 1213 and RFC 1573.')
snSwPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortDescr.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortDescr.setDescription('A textual string containing the slot/port information about the interface.')
snSwPortInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 40), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInOctets.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInOctets.setDescription('The total number of octets received on the interface, including framing characters. This object is a 64-bit counter of the ifInOctets object, defined in RFC 1213. The octet string is in big-endian byte order.')
snSwPortOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 41), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortOutOctets.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortOutOctets.setDescription('The total number of octets transmitted out of the interface, including framing characters. This object is a 64-bit counter of the ifOutOctets object, defined in RFC 1213. The octet string is in big-endian byte order.')
snSwPortStatsInBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInBitsPerSec.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsInBitsPerSec.setDescription('The number of bits per second received on the interface over a 5 minutes interval.')
snSwPortStatsOutBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutBitsPerSec.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsOutBitsPerSec.setDescription('The number of bits per second transmitted out of the interface over a 5 minutes interval.')
snSwPortStatsInPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInPktsPerSec.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsInPktsPerSec.setDescription('The number of packets per second received on the interface over a 5 minutes interval.')
snSwPortStatsOutPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutPktsPerSec.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsOutPktsPerSec.setDescription('The number of packets per second transmitted out of the interface over a 5 minutes interval.')
snSwPortStatsInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInUtilization.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsInUtilization.setDescription('The input network utilization in hundredths of a percent over a 5 minutes interval.')
snSwPortStatsOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutUtilization.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsOutUtilization.setDescription('The output network utilization in hundredths of a percent over a 5 minutes interval.')
snSwPortFastSpanPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortFastSpanPortEnable.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortFastSpanPortEnable.setDescription('The enabled/disabled fast span port status of the port.')
snSwPortFastSpanUplinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortFastSpanUplinkEnable.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortFastSpanUplinkEnable.setDescription('The enabled/disabled fast span uplink status of the port.')
snSwPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortVlanId.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortVlanId.setDescription('The ID of a VLAN of which this port is a member. Port must be untagged. For tagged port which belongs to multiple VLANs, this object return 0 which is an invalid VLAN ID value.')
snSwPortRouteOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortRouteOnly.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortRouteOnly.setDescription("Enable/Disable L2 switching of a routing switch port. By default, the routing switch performs routing first. If routing failed, it performs switching. Enable route only instrcuts the routing switch to perform routing only. For a L2 switching only product, reading this object always return 'disabled', writing 'enabled' to this object takes no effect.")
snSwPortPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortPresent.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortPresent.setDescription('Indicate if the port is absent or present. This object only valid for M4 module ')
snSwPortGBICStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("gbic", 1), ("miniGBIC", 2), ("empty", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortGBICStatus.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortGBICStatus.setDescription('Indicate if the gig port has GBICs on them. If set to GBIC(1), it means that the port is GBIC. If set to miniGBIC(2), it means that the port miniGBIC. If set to empty(3), it means that the GBIC is missing. Value other(4) means that the port not a removable gig port. ')
snSwPortStatsInKiloBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInKiloBitsPerSec.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsInKiloBitsPerSec.setDescription('Bit rate in kilobits per second received on the 10G and faster interface over a 5 minutes interval.')
snSwPortStatsOutKiloBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 55), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutKiloBitsPerSec.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsOutKiloBitsPerSec.setDescription('Bit rate in kilobits per second transmitted out of the 10G and faster interface over a 5 minutes interval.')
snSwPortLoadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 300)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortLoadInterval.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortLoadInterval.setDescription('The time in seconds for which average port utilization should be carried out. The value should be incremental of 30 seconds, between the ranges specified.')
snSwPortTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 57), Integer32().clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortTagType.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortTagType.setDescription('The IEEE802.1q tag type embedded in the length/type field of an Ethernet packet. It specifies that the 2 octets after the length/type field in an Ethernet packet is the tag value.')
snSwPortInLinePowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3), ("enableLegacyDevice", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInLinePowerControl.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInLinePowerControl.setDescription("Control inline power on/off to a port. If a port does not have inline power capability, reading this object returns 'other(1)'.")
snSwPortInLinePowerWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInLinePowerWattage.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInLinePowerWattage.setDescription("Adjust the inline power wattage. Valid value between 1000 and 15400. Each unit is milliwatts. This object can only be set after snSwPortInLinePowerControl has been set to 'enable(3)' or 'enableLegacyDevice(4)'. If a port does not have inline power capability, reading this object returns undefined value.")
snSwPortInLinePowerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInLinePowerClass.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInLinePowerClass.setDescription("Adjust the inline power class. This object can only be set after snSwPortInLinePowerControl has been set to 'enable(3)' or 'enableLegacyDevice(4)'. If a port does not have inline power capability, reading this object returns undefined value.")
snSwPortInLinePowerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 0), ("critical", 1), ("high", 2), ("low", 3), ("medium", 4), ("other", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInLinePowerPriority.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInLinePowerPriority.setDescription('Inline power allocation priority for the power device 0- Not a POE port, 1- Critical, 2- High, 3- Low, 4- Medium, 5- other.')
snSwPortInfoMirrorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwPortInfoMirrorMode.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInfoMirrorMode.setDescription('Enable/disable mirror on this port.')
snSwPortStatsInJumboFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsInJumboFrames.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsInJumboFrames.setDescription('The total number of jumbo packets received on the interface.')
snSwPortStatsOutJumboFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortStatsOutJumboFrames.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortStatsOutJumboFrames.setDescription('The total number of jumbo packets transmitted out of the interface.')
snSwPortInLinePowerConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInLinePowerConsumed.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInLinePowerConsumed.setDescription('Inline power consumed by the port. Each unit is milliwatts.')
snSwPortInLinePowerPDType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 67), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwPortInLinePowerPDType.setStatus('deprecated')
if mibBuilder.loadTexts: snSwPortInLinePowerPDType.setDescription('Inline Power device type 802.3af or Legacy device.')
snSwIfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5), )
if mibBuilder.loadTexts: snSwIfInfoTable.setStatus('current')
if mibBuilder.loadTexts: snSwIfInfoTable.setDescription('A specific snSwIfInfo group consists of a number of switch ports. ')
snSwIfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snSwIfInfoPortNum"))
if mibBuilder.loadTexts: snSwIfInfoEntry.setStatus('current')
if mibBuilder.loadTexts: snSwIfInfoEntry.setDescription('An entry in the snSwIfInfo table indicates the configuration on a specified port. A SNMP SET PDU for a row of the snSwIfInfoTable requires the entire sequence of the MIB Objects in each snSwIfInfoEntry stored in one PDU. Otherwise, GENERR return-value will be returned.')
snSwIfInfoPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfInfoPortNum.setStatus('current')
if mibBuilder.loadTexts: snSwIfInfoPortNum.setDescription('The port/interface index (ifindex).')
snSwIfInfoMonitorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("input", 1), ("output", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoMonitorMode.setStatus('deprecated')
if mibBuilder.loadTexts: snSwIfInfoMonitorMode.setDescription('For FastIron platforms, this object is DEPRECATED by snSwIf2MirrorMode and snPortMonitorTable. For NetIron platforms, this object is DEPRECATED by snPortMonitorTable.')
snSwIfInfoMirrorPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoMirrorPorts.setStatus('current')
if mibBuilder.loadTexts: snSwIfInfoMirrorPorts.setDescription('The list of port/interface index (ifindex), which mirror this interface, when monitoring is enabled.')
snSwIfInfoTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2), ("dual", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoTagMode.setStatus('current')
if mibBuilder.loadTexts: snSwIfInfoTagMode.setDescription("For tagged/dual port, we could have multiple VLANs per port. For untagged port, there is only one VLAN ID per port, dual mode is associated with a vlan id 'snSwIfVlanId', dual mode with snSwIfVlanId zero disables the dual mode.")
snSwIfInfoTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 5), Integer32().clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoTagType.setStatus('current')
if mibBuilder.loadTexts: snSwIfInfoTagType.setDescription('The IEEE802.1q tag type embedded in the length/type field of an Ethernet packet. It specifies that the 2 octets after the length/type field in an Ethernet packet is the tag value.')
snSwIfInfoChnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("halfDuplex", 1), ("fullDuplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoChnMode.setStatus('current')
if mibBuilder.loadTexts: snSwIfInfoChnMode.setDescription('The port can be configured to operate in either half or full duplex mode. The values are: none(0) is not used. halfDuplex(1)...half duplex mode fullDuplex(2)...full duplex mode The read-back channel status from hardware are: halfDuplex(1)...half duplex mode fullDuplex(2)...full duplex mode The port media type (expansion or regular) and port link type (trunk or feeder) determine value of this object. The port can not set to half duplex mode if the port connect mode is m200e(4). However, the value of this parameter may be automatically set whenever the expansion port is connected (e.g. cascade connecting device).')
snSwIfInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("sAutoSense", 1), ("s10M", 2), ("s100M", 3), ("s1G", 4), ("s1GM", 5), ("s155M", 6), ("s10G", 7), ("s622M", 8), ("s2488M", 9), ("s9953M", 10), ("s16G", 11), ("s100G", 12), ("s40G", 13), ("s2500M", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoSpeed.setStatus('current')
if mibBuilder.loadTexts: snSwIfInfoSpeed.setDescription('The speed configuration for a port. The values are: none(0)..........not used. sAutoSense(1)....Auto-sensing 10 or 100Mbits. s10M(2)..........10Mbits per second. s100M(3).........100Mbits per second. s1G(4)...........1Gbits per second. s1GM(5)..........1Gbits per second master. s155M(6).........155Mbits per second (ATM) (for expansion board only). s10G(7)..........10Gbits per second. s622M(8).........OC12 - 622Mbits per second s2488M(9)........OC48 - 2.488Gbits per second s9953M(10).......OC192 - 9.953Gbits per second s16G(11)..........16Gbits per second. s40G(13)..........40Gbits per second. s2500M(14)..........2.5Gbits per second. The read-back hardware status are the following: none(0)..........link down or no traffic. s10M(2)..........10Mbits per second. s100M(3).........100Mbits per second. s1G(4)...........1Gbits per second. s1GM(5)..........1Gbits per second master. s155M(6).........155Mbits per second (ATM) (for expansion board only). s10G(7)..........10Gbits per second. s622M(8).........OC12 - 622Mbits per second s2488M(9)........OC48 - 2.488Gbits per second s9953M(10).......OC192 - 9.953Gbits per second s16G(11)..........16Gbits per second. s40G(13)..........40Gbits per second. s2500M(14)..........2.5Gbits per second. The port media type (expansion or regular) and port link type (trunk or feeder) determine whether this object can be written and the valid values. It is not allowed to change speed for trunks ports. For expansion ports, all of the above speed can be set. However, the value of this parameter may be automatically set whenever the expansion port is connected (e.g. cascade connecting device).')
snSwIfInfoMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("other", 1), ("m100BaseTX", 2), ("m100BaseFX", 3), ("m1000BaseFX", 4), ("mT3", 5), ("m155ATM", 6), ("m1000BaseTX", 7), ("m622ATM", 8), ("m155POS", 9), ("m622POS", 10), ("m2488POS", 11), ("m10000BaseFX", 12), ("m9953POS", 13), ("m16GStacking", 14), ("m100GBaseFX", 15), ("m40GStacking", 16), ("m40GBaseFX", 17), ("m10000BaseTX", 18), ("m2500BaseTX", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfInfoMediaType.setStatus('current')
if mibBuilder.loadTexts: snSwIfInfoMediaType.setDescription('The media type for the port. The values are: other(1).........other or unknown media. m100BaseTX(2)....100Mbits per second copper. m100BaseFX(3)....100Mbits per second fiber. m1000BaseFX(4)...1Gbits per second fiber. mT3(5)...........45Mbits per second (T3). m155ATM(6).......155Mbits per second (ATM). m1000BaseTX(7)...1Gbits per second copper. m622ATM(8).......622Mbits per second (ATM). m155POS(9).......155Mbits per second (POS). m622POS(10)......622Mbits per second (POS). m2488POS(11).....2488Mbits per second (POS). m10000BaseFX(12).10Gbits per second fiber. m9953POS(13).....9953Mbits per second (POS). m16GStacking(14)...16Gbits per second fiber. m40GStacking(16). 40Gbits per second fiber. m40GBaseFX(17)....40Gbits per second fiber. m10000BaseTX(18)..10Gbits per second copper. m2500BaseTX(19). 2.5Gbits per second fiber.')
snSwIfInfoConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("copper", 2), ("fiber", 3), ("both", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfInfoConnectorType.setStatus('current')
if mibBuilder.loadTexts: snSwIfInfoConnectorType.setDescription('The type of connector that the port offers. The values are: other(1)...........other or unknown connector copper(2)..........Copper connector fiber(3)...........Fiber connector both(4)............Supports both Copper and Fiber This describes the physical connector type')
snSwIfInfoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoAdminStatus.setStatus('current')
if mibBuilder.loadTexts: snSwIfInfoAdminStatus.setDescription('The desired state of all ports. The testing(3) state indicates that no operational packets can be passed. (same as ifAdminStatus in MIB-II)')
snSwIfInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfInfoLinkStatus.setStatus('current')
if mibBuilder.loadTexts: snSwIfInfoLinkStatus.setDescription('The current operational state of the interface. The testing(3) state indicates that no operational packets can be passed. (same as ifOperStatus in MIB-II)')
snSwIfInfoPortQos = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoPortQos.setStatus('current')
if mibBuilder.loadTexts: snSwIfInfoPortQos.setDescription('The Stand alone stackable switch Port Qos Priority values are: low(0) -- low prority high(1) -- high prority. The BigIron Port Qos Priority values are: level0(0), level1(1), level2(2), level3(3), level4(4), level5(5), level6(6), level7(7) ')
snSwIfInfoPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 13), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfInfoPhysAddress.setStatus('current')
if mibBuilder.loadTexts: snSwIfInfoPhysAddress.setDescription('The port physical address. The physical address represents the switch port.')
snSwIfLockAddressCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfLockAddressCount.setStatus('current')
if mibBuilder.loadTexts: snSwIfLockAddressCount.setDescription('The number of source MAC addresses are allowed for a port. Writing 0 to this object will allow any number of addresses.')
snSwIfStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfStpPortEnable.setReference('IEEE 802.1D-1990: Section 4.5.5.2, dot1dStpPortEnable')
if mibBuilder.loadTexts: snSwIfStpPortEnable.setStatus('current')
if mibBuilder.loadTexts: snSwIfStpPortEnable.setDescription('The enabled/disabled status of the port.')
snSwIfDhcpGateListId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfDhcpGateListId.setStatus('current')
if mibBuilder.loadTexts: snSwIfDhcpGateListId.setDescription('The ID for a DHCP gateway list entry relative to this switch port. 0 = unset or no assigned ID')
snSwIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfName.setStatus('current')
if mibBuilder.loadTexts: snSwIfName.setDescription('Port Name string.')
snSwIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfDescr.setStatus('current')
if mibBuilder.loadTexts: snSwIfDescr.setDescription('A textual string containing the slot/port information about the interface.')
snSwIfInfoAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("negFullAuto", 2), ("global", 3), ("other", 4))).clone('global')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoAutoNegotiate.setStatus('current')
if mibBuilder.loadTexts: snSwIfInfoAutoNegotiate.setDescription('This feature only applies to Gigabit Ethernet ports. If set to disable(0), port will be put to non-negotiation mode. If set to enable(1), port will start auto-negotiation indefinitely until succeed. If set to negFullAuto(2), the port will start with auto- negotiation, if the negotiation failed, then it will automatically switch to non-negotiation mode. Stackable products (except TurboIron 8) Gigabit Ethernet ports do not support negFullAuto(2). If set to global(3), port negotiation mode follows the value of snSwGlobalAutoNegotiate. Non-Gigabit Ethernet port returns the value other(4).')
snSwIfInfoFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoFlowControl.setStatus('current')
if mibBuilder.loadTexts: snSwIfInfoFlowControl.setDescription('Enable/Disbale port flow control.')
snSwIfInfoGigType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 255))).clone(namedValues=NamedValues(("m1000BaseSX", 0), ("m1000BaseLX", 1), ("m1000BaseLH", 2), ("m1000BaseLHA", 3), ("m1000BaseLHB", 4), ("m1000BaseTX", 5), ("m10000BaseSR", 6), ("m10000BaseLR", 7), ("m10000BaseER", 8), ("sfpCWDM1470nm80Km", 9), ("sfpCWDM1490nm80Km", 10), ("sfpCWDM1510nm80Km", 11), ("sfpCWDM1530nm80Km", 12), ("sfpCWDM1550nm80Km", 13), ("sfpCWDM1570nm80Km", 14), ("sfpCWDM1590nm80Km", 15), ("sfpCWDM1610nm80Km", 16), ("sfpCWDM1470nm100Km", 17), ("sfpCWDM1490nm100Km", 18), ("sfpCWDM1510nm100Km", 19), ("sfpCWDM1530nm100Km", 20), ("sfpCWDM1550nm100Km", 21), ("sfpCWDM1570nm100Km", 22), ("sfpCWDM1590nm100Km", 23), ("sfpCWDM1610nm100Km", 24), ("m1000BaseLHX", 25), ("m1000BaseSX2", 26), ("mSFP1000BaseBXU", 27), ("mSFP1000BaseBXD", 28), ("mSFP100BaseBX", 29), ("mSFP100BaseBXU", 30), ("mSFP100BaseBXD", 31), ("mSFP100BaseFX", 32), ("mSFP100BaseFXIR", 33), ("mSFP100BaseFXLR", 34), ("m1000BaseLMC", 35), ("mXFP10000BaseSR", 36), ("mXFP10000BaseLR", 37), ("mXFP10000BaseER", 38), ("mXFP10000BaseSW", 39), ("mXFP10000BaseLW", 40), ("mXFP10000BaseEW", 41), ("mXFP10000BaseCX4", 42), ("mXFP10000BaseZR", 43), ("mXFP10000BaseZRD", 44), ("m1000BaseC6553", 45), ("mXFP10000BaseSRSW", 46), ("mXFP10000BaseLRLW", 47), ("mXFP10000BaseEREW", 48), ("m10000BaseT", 49), ("m2500BaseTX", 50), ("m1000BaseGBXU", 127), ("m1000BaseGBXD", 128), ("m1000BaseFBX", 129), ("m1000BaseFBXU", 130), ("m1000BaseFBXD", 131), ("m1000BaseFX", 132), ("m1000BaseFXIR", 133), ("m1000BaseFXLR", 134), ("m1000BaseXGSR", 136), ("m1000BaseXGLR", 137), ("m1000BaseXGER", 138), ("m1000BaseXGSW", 139), ("m1000BaseXGLW", 140), ("m1000BaseXGEW", 141), ("m1000BaseXGCX4", 142), ("m1000BaseXGZR", 143), ("m1000BaseXGZRD", 144), ("mCFP100GBaseSR10", 145), ("mCFP100GBaseLR4", 146), ("mCFP100GBaseER4", 147), ("mCFP100GBase10x10g2Km", 148), ("mCFP100GBase10x10g10Km", 149), ("qSFP40000BaseSR4", 150), ("qSFP40000Base10KmLR4", 151), ("mXFP10000BaseUSR", 152), ("mXFP10000BaseTwinax", 153), ("mCFP2-100GBaseSR10", 154), ("mCFP2-100GBaseLR4", 155), ("mCFP2-100GBaseER4", 156), ("mCFP2-100GBase10x10g2Km", 157), ("mCFP2-100GBase10x10g10Km", 158), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfInfoGigType.setStatus('current')
if mibBuilder.loadTexts: snSwIfInfoGigType.setDescription('The media type for the port. The values are: m1000BaseSX(0)....1Gbits per second fiber, with a short wavelength transceiver. m1000BaseLX(1)....1Gbits per second fiber, with a long wavelength transceiver (3km). m1000BaseLH(2)....1Gbits per second fiber, with a special wavelength transceiver (50km). m1000BaseLHA(3)....1Gbits per second fiber, with a special wavelength transceiver (70km). m1000BaseLHB(4)....1Gbits per second fiber, with a special wavelength transceiver (150km). m1000BaseTX(5)....1Gbits per second copper (100meter). m10000BaseSR(6)....10Gbits per second fiber, with a short range wavelength transceiver (100m). m10000BaseLR(7)....10Gbits per second fiber, with a long range wavelength transceiver (10km). m10000BaseER(8)....10Gbits per second fiber, with a extended range wavelength transceiver (40km). sfpCWDM1470nm80Km(9)....1Gbits per second CWDM fiber, with a wavelength 1470nm, reach 80 kms. sfpCWDM1490nm80Km(10)....1Gbits per second CWDM fiber, with a wavelength 1490nm, reach 80 kms. sfpCWDM1510nm80Km(11)....1Gbits per second CWDM fiber, with a wavelength 1510nm, reach 80 kms. sfpCWDM1530nm80Km(12)....1Gbits per second CWDM fiber, with a wavelength 1530nm, reach 80 kms. sfpCWDM1550nm80Km(13)....1Gbits per second CWDM fiber, with a wavelength 1550nm, reach 80 kms. sfpCWDM1570nm80Km(14)....1Gbits per second CWDM fiber, with a wavelength 1570nm, reach 80 kms. sfpCWDM1590nm80Km(15)....1Gbits per second CWDM fiber, with a wavelength 1590nm, reach 80 kms. sfpCWDM1610nm80Km(16)....1Gbits per second CWDM fiber, with a wavelength 1610nm, reach 80 kms. sfpCWDM1470nm100Km(17)....1Gbits per second CWDM fiber, with a wavelength 1470nm, reach 100 kms. sfpCWDM1490nm100Km(18)....1Gbits per second CWDM fiber, with a wavelength 1490nm, reach 100 kms. sfpCWDM1510nm100Km(19)....1Gbits per second CWDM fiber, with a wavelength 1510nm, reach 100 kms. sfpCWDM1530nm100Km(20)....1Gbits per second CWDM fiber, with a wavelength 1530nm, reach 100 kms. sfpCWDM1550nm100Km(21)....1Gbits per second CWDM fiber, with a wavelength 1550nm, reach 100 kms. sfpCWDM1570nm100Km(22)....1Gbits per second CWDM fiber, with a wavelength 1570nm, reach 100 kms. sfpCWDM1590nm100Km(23)....1Gbits per second CWDM fiber, with a wavelength 1590nm, reach 100 kms. sfpCWDM1610nm100Km(24)....1Gbits per second CWDM fiber, with a wavelength 1610nm, reach 100 kms. m1000BaseLHX(25)...1Gbits per second fiber, with a special wavelength transceiver (150km). m1000BaseLMC(35)...Link Media Copper. mXFP10000BaseSR(36)...10GBASE fiber, 850nm serial pluggable XFP optic (LC), target range 300m over MMF. mXFP10000BaseLR(37)...10GBASE fiber, 1310nm serial pluggable XFP optic (LC) for up to 10km over SMF. mXFP10000BaseER(38)...10GBASE fiber, 1550nm serial pluggable XFP optic (LC) for up to 40km over SMF. mXFP10000BaseSW(39)...not used. mXFP10000BaseLW(40)...not used. mXFP10000BaseEW(41)...not used mXFP10000BaseCX4(42)...10GBASE-CX4, XFP module,15m, CX4 connector. mXFP10000BaseZR(43)...1550nm serial pluggable XFP optic (LC) for up to 80km over SMF. mXFP10000BaseZRD(44)...10GBASE-ZR DWDM, XFP optic, 80km. mXFP10000BaseSRSW(46)...same as .mXFP10000BaseSR(36) mXFP10000BaseLRLW(47)...same as .mXFP10000BaseLR(37) mXFP10000BaseEREW(48)...same as mXFP10000BaseER(38). m10000BaseT(49)...10GBASE fiber. m2500BaseTX(50)...2.5GBASE fiber. mCFP100GBaseSR10(145)... 100GbE CFP optic (MPO 2x12), SR10, for distances up to 100m over MMF. mCFP100GBaseLR4(146)... 100GbE CFP optic (SC), LR4, for distances up to 10 km over SMF. mCFP100GBaseER4(147)... 100GbE CFP optic, ER4, for distances up to 40 km over SMF. mCFP100GBase10x10g2Km(148)... 100GbE CFP optic (LC), 10x10, for distances up to 2 km over SMF. mCFP100GBase10x10g10Km(149)... 100GbE CFP optic (LC), 10x10, for distances up to 10 km over SMF. mXFP10000BaseUSR(152)... 10 Gbps Ultra-Short Range (USR) 100m Ethernet optical transceiver. mXFP10000BaseTwinax(153)... 10Gbps Active copper twinax cables. mCFP2-100GBaseSR10(154)... 100GbE CFP2 optic (MPO 2x12), SR10, for distances up to 100m over MMF. mCFP2-100GBaseLR4(155)... 100GbE CFP2 optic (SC), LR4, for distances up to 10 km over SMF. mCFP2-100GBaseER4(156)... 100GbE CFP2 optic, ER4, for distances up to 40 km over SMF. mCFP2-100GBase10x10g2Km(157)... 100GbE CFP2 optic (LC), 10x10, for distances up to 2 km over SMF. mCFP2-100GBase10x10g10Km(158)... 100GbE CFP2 optic (LC), 10x10, for distances up to 10 km over SMF. notApplicable(255)....a non-gigabit port.')
snSwIfFastSpanPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfFastSpanPortEnable.setStatus('current')
if mibBuilder.loadTexts: snSwIfFastSpanPortEnable.setDescription('The enabled/disabled fast span port status of the port.')
snSwIfFastSpanUplinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfFastSpanUplinkEnable.setStatus('current')
if mibBuilder.loadTexts: snSwIfFastSpanUplinkEnable.setDescription('The enabled/disabled fast span uplink status of the port.')
snSwIfVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfVlanId.setStatus('current')
if mibBuilder.loadTexts: snSwIfVlanId.setDescription('The ID of a VLAN of which this port is a member. Port must be untagged. For tagged port which belongs to multiple VLANs, this object return 0 which is an invalid VLAN ID value, reading is valid only for untagged and dual mode, writing is valid for only dual mode.')
snSwIfRouteOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfRouteOnly.setStatus('current')
if mibBuilder.loadTexts: snSwIfRouteOnly.setDescription("Enable/Disable L2 switching of a routing switch port. By default, the routing switch performs routing first. If routing failed, it performs switching. Enable route only instrcuts the routing switch to perform routing only. For a L2 switching only product, reading this object always return 'disabled', writing 'enabled' to this object takes no effect.")
snSwIfPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfPresent.setStatus('current')
if mibBuilder.loadTexts: snSwIfPresent.setDescription('Indicate if the port is absent or present. This object only valid for M4 module.')
snSwIfGBICStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("gbic", 1), ("miniGBIC", 2), ("empty", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfGBICStatus.setStatus('current')
if mibBuilder.loadTexts: snSwIfGBICStatus.setDescription('Indicate if the gig port has GBICs on them. If set to GBIC(1), it means that the port is GBIC. If set to miniGBIC(2), it means that the port miniGBIC. If set to empty(3), it means that the GBIC is missing. Value other(4) means that the port not a removable gig port. ')
snSwIfLoadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 300)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfLoadInterval.setStatus('current')
if mibBuilder.loadTexts: snSwIfLoadInterval.setDescription('The time in seconds for which average port utilization should be carried out. The value should be incremental of 30 seconds, between the ranges specified.')
snSwIfStatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsInFrames.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsInFrames.setDescription('The total number of packets received on the interface.')
snSwIfStatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsOutFrames.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsOutFrames.setDescription('The total number of packets transmitted out of the interface.')
snSwIfStatsAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsAlignErrors.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsAlignErrors.setDescription('dot3StatsAlignmentErrors : A count of frames received on a particular interface that are not an integral number of octets in length and do not pass the FCS check. The count represented by an instance of this object is incremented when the alignmentError status is returned by the MAC service to the LLC (or other MAC user). Received frames for which multiple error conditions obtain are, according to the conventions of IEEE 802.3 Layer Management, counted exclusively according to the error status presented to the LLC.')
snSwIfStatsFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsFCSErrors.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsFCSErrors.setDescription('dot3StatsFCSErrors : A count of frames received on a particular interface that are an integral number of octets in length but do not pass the FCS check. The count represented by an instance of this object is incremented when the frameCheckError status is returned by the MAC service to the LLC (or other MAC user). Received frames for which multiple error conditions obtain are, according to the conventions of IEEE 802.3 Layer Management, counted exclusively according to the error status presented to the LLC.')
snSwIfStatsMultiColliFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsMultiColliFrames.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsMultiColliFrames.setDescription('dot3StatsMultipleCollisionFrames : A count of successfully transmitted frames on a particular interface for which transmission is inhibited by more than one collision. A frame that is counted by an instance of this object is also counted by the corresponding instance of either the ifOutUcastPkts, ifOutMulticastPkts, or ifOutBroadcastPkts, and is not counted by the corresponding instance of the dot3StatsSingleCollisionFrames object.')
snSwIfStatsTxColliFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsTxColliFrames.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsTxColliFrames.setDescription('A count of successfully transmitted frames on a particular interface for which transmission is inhibited by more than one collision. A frame that is counted by a combination of both dot3StatsSingleCollisionFrames and dot3StatsMultipleCollisionFrames objects.')
snSwIfStatsRxColliFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsRxColliFrames.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsRxColliFrames.setDescription('A count of successfully received frames on a particular interface for which transmission is inhibited by more than one collision. This object is not specified in dot3 but it has the same functionarity as snSwIfStatsTxColliFrames.')
snSwIfStatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsFrameTooLongs.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsFrameTooLongs.setDescription('dot3StatsFrameTooLongs : A count of frames received on a particular interface that exceed the maximum permitted frame size. The count represented by an instance of this object is incremented when the frameTooLong status is returned by the MAC service to the LLC (or other MAC user). Received frames for which multiple error conditions obtain are, according to the conventions of IEEE 802.3 Layer Management, counted exclusively according to the error status presented to the LLC.')
snSwIfStatsFrameTooShorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsFrameTooShorts.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsFrameTooShorts.setDescription(' A count of frames received on a particular interface that below the minimum permitted frame size.')
snSwIfStatsInBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsInBcastFrames.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsInBcastFrames.setDescription('The total number of broadcast packets received on the interface.')
snSwIfStatsOutBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsOutBcastFrames.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsOutBcastFrames.setDescription('The total number of broadcast packets transmitted out of the interface.')
snSwIfStatsInMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsInMcastFrames.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsInMcastFrames.setDescription('The total number of multicast packets received on the interface.')
snSwIfStatsOutMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsOutMcastFrames.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsOutMcastFrames.setDescription('The total number of multicast packets transmitted out of the interface.')
snSwIfStatsInDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsInDiscard.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsInDiscard.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.')
snSwIfStatsOutDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsOutDiscard.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsOutDiscard.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
snSwIfStatsMacStations = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsMacStations.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsMacStations.setDescription('The total number of MAC Stations connected to the interface.')
snSwIfStatsLinkChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsLinkChange.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsLinkChange.setDescription('The total number of link state change of the interface.')
snSwIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfInOctets.setStatus('current')
if mibBuilder.loadTexts: snSwIfInOctets.setDescription('The total number of octets received on the interface, including framing characters. This object is a 64-bit counter of the ifInOctets object, defined in RFC 1213. The octet string is in big-endian byte order.')
snSwIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfOutOctets.setStatus('current')
if mibBuilder.loadTexts: snSwIfOutOctets.setDescription('The total number of octets transmitted out of the interface, including framing characters. This object is a 64-bit counter of the ifOutOctets object, defined in RFC 1213. The octet string is in big-endian byte order.')
snSwIfStatsInBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsInBitsPerSec.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsInBitsPerSec.setDescription('The number of bits per second received on the interface over a 5 minutes interval.')
snSwIfStatsOutBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsOutBitsPerSec.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsOutBitsPerSec.setDescription('The number of bits per second transmitted out of the interface over a 5 minutes interval.')
snSwIfStatsInPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsInPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsInPktsPerSec.setDescription('The number of packets per second received on the interface over a 5 minutes interval.')
snSwIfStatsOutPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsOutPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsOutPktsPerSec.setDescription('The number of packets per second transmitted out of the interface over a 5 minutes interval.')
snSwIfStatsInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsInUtilization.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsInUtilization.setDescription('The input network utilization in hundredths of a percent over a 5 minutes interval.')
snSwIfStatsOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsOutUtilization.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsOutUtilization.setDescription('The output network utilization in hundredths of a percent over a 5 minutes interval.')
snSwIfStatsInKiloBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsInKiloBitsPerSec.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsInKiloBitsPerSec.setDescription('Bit rate in kilobits per second received on the 10G and faster interface over a 5 minutes interval.')
snSwIfStatsOutKiloBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 55), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsOutKiloBitsPerSec.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsOutKiloBitsPerSec.setDescription('Bit rate in kilobits per second transmitted out of the 10G and faster interface over a 5 minutes interval.')
snSwIfStatsInJumboFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsInJumboFrames.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsInJumboFrames.setDescription('The total number of jumbo packets received on the interface.')
snSwIfStatsOutJumboFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfStatsOutJumboFrames.setStatus('current')
if mibBuilder.loadTexts: snSwIfStatsOutJumboFrames.setDescription('The total number of jumbo packets transmitted out of the interface.')
snSwIfInfoMirrorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoMirrorMode.setStatus('current')
if mibBuilder.loadTexts: snSwIfInfoMirrorMode.setDescription('Enable/disable mirror on this port.')
snSwIfMacLearningDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 59), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfMacLearningDisable.setStatus('current')
if mibBuilder.loadTexts: snSwIfMacLearningDisable.setDescription('The status of MAC learning feature on an ethernet port. For POS port, Get operation will return the default value and Set operation will return an error.')
snSwIfInfoL2FowardEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("globalConfig", 3))).clone('globalConfig')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoL2FowardEnable.setStatus('current')
if mibBuilder.loadTexts: snSwIfInfoL2FowardEnable.setDescription('The status of cluster L2 forward feature on an ethernet port. When this object is set to disable, the STP protocol packets coming on the MCT VLANs are dropped. The snSwIfInfoL2FowardEnable has more preference than brcdMctL2Forward for this interface when set with enable(1) or disable(2). When set to globalConfig(3) the status of brcdMctL2Forward object applies for this interface.')
snSwIfInfoAllowAllVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 61), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwIfInfoAllowAllVlan.setStatus('current')
if mibBuilder.loadTexts: snSwIfInfoAllowAllVlan.setDescription('Specifies allowing all vlan packets for pbr')
snSwIfInfoNativeMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 62), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwIfInfoNativeMacAddress.setStatus('current')
if mibBuilder.loadTexts: snSwIfInfoNativeMacAddress.setDescription('The port native MAC address. The native MAC address represents the switch port.')
snInterfaceId = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2))
snEthernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 1))
snPosInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 2))
snAtmInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 3))
snVirtualInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 4))
snLoopbackInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 5))
snGreTunnelInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 6))
snSubInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 7))
snMplsTunnelInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 8))
snPvcInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 9))
snMgmtEthernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 10))
snTrunkInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 11))
snVirtualMgmtInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 12))
sn6to4TunnelInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 13))
snInterfaceLookupTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 3), )
if mibBuilder.loadTexts: snInterfaceLookupTable.setStatus('current')
if mibBuilder.loadTexts: snInterfaceLookupTable.setDescription('')
snInterfaceLookupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snInterfaceLookupInterfaceId"))
if mibBuilder.loadTexts: snInterfaceLookupEntry.setStatus('current')
if mibBuilder.loadTexts: snInterfaceLookupEntry.setDescription('')
snInterfaceLookupInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 3, 1, 1), InterfaceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snInterfaceLookupInterfaceId.setStatus('current')
if mibBuilder.loadTexts: snInterfaceLookupInterfaceId.setDescription('')
snInterfaceLookupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snInterfaceLookupIfIndex.setStatus('current')
if mibBuilder.loadTexts: snInterfaceLookupIfIndex.setDescription('')
snIfIndexLookupTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 4), )
if mibBuilder.loadTexts: snIfIndexLookupTable.setStatus('current')
if mibBuilder.loadTexts: snIfIndexLookupTable.setDescription('')
snIfIndexLookupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snIfIndexLookupIfIndex"))
if mibBuilder.loadTexts: snIfIndexLookupEntry.setStatus('current')
if mibBuilder.loadTexts: snIfIndexLookupEntry.setDescription('')
snIfIndexLookupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfIndexLookupIfIndex.setStatus('current')
if mibBuilder.loadTexts: snIfIndexLookupIfIndex.setDescription('')
snIfIndexLookupInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 4, 1, 2), InterfaceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfIndexLookupInterfaceId.setStatus('current')
if mibBuilder.loadTexts: snIfIndexLookupInterfaceId.setDescription('')
snInterfaceLookup2Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 7), )
if mibBuilder.loadTexts: snInterfaceLookup2Table.setStatus('current')
if mibBuilder.loadTexts: snInterfaceLookup2Table.setDescription('')
snInterfaceLookup2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 7, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snInterfaceLookup2InterfaceId"))
if mibBuilder.loadTexts: snInterfaceLookup2Entry.setStatus('current')
if mibBuilder.loadTexts: snInterfaceLookup2Entry.setDescription('')
snInterfaceLookup2InterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 7, 1, 1), InterfaceId2())
if mibBuilder.loadTexts: snInterfaceLookup2InterfaceId.setStatus('current')
if mibBuilder.loadTexts: snInterfaceLookup2InterfaceId.setDescription('')
snInterfaceLookup2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snInterfaceLookup2IfIndex.setStatus('current')
if mibBuilder.loadTexts: snInterfaceLookup2IfIndex.setDescription('')
snIfIndexLookup2Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 8), )
if mibBuilder.loadTexts: snIfIndexLookup2Table.setStatus('current')
if mibBuilder.loadTexts: snIfIndexLookup2Table.setDescription('')
snIfIndexLookup2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 8, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snIfIndexLookup2IfIndex"))
if mibBuilder.loadTexts: snIfIndexLookup2Entry.setStatus('current')
if mibBuilder.loadTexts: snIfIndexLookup2Entry.setDescription('')
snIfIndexLookup2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: snIfIndexLookup2IfIndex.setStatus('current')
if mibBuilder.loadTexts: snIfIndexLookup2IfIndex.setDescription('')
snIfIndexLookup2InterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 8, 1, 2), InterfaceId2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfIndexLookup2InterfaceId.setStatus('current')
if mibBuilder.loadTexts: snIfIndexLookup2InterfaceId.setDescription('')
snIfOpticalMonitoringInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 6), )
if mibBuilder.loadTexts: snIfOpticalMonitoringInfoTable.setReference('ITU recommendations G.783, G.784, G.953')
if mibBuilder.loadTexts: snIfOpticalMonitoringInfoTable.setStatus('current')
if mibBuilder.loadTexts: snIfOpticalMonitoringInfoTable.setDescription('This table lists the instrumented parameters of all optical interfaces.')
snIfOpticalMonitoringInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: snIfOpticalMonitoringInfoEntry.setStatus('current')
if mibBuilder.loadTexts: snIfOpticalMonitoringInfoEntry.setDescription('Only the ifIndices of optical interfaces whose parameters need to be monitored will be used to index this table.')
snIfOpticalMonitoringTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfOpticalMonitoringTemperature.setStatus('current')
if mibBuilder.loadTexts: snIfOpticalMonitoringTemperature.setDescription('This object holds the value of the transmitter laser diode temperature for the interface. This object indicates the health of the transmitter. The format is xxx.yyyy C(elcius), followed by whether the measured value is normal, high/low alarm or high/low warning. For 100G LR4 and LR10 optic, this returns the average temperature for all lanes.')
snIfOpticalMonitoringTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfOpticalMonitoringTxPower.setStatus('current')
if mibBuilder.loadTexts: snIfOpticalMonitoringTxPower.setDescription('This object holds the value of the transmitter optical signal power for the interface, measured in dBm, followed by whether this is a normal value, or high/low warning or alarm. For 100G LR4 and LR10 optic, this returns the aggregated Tx Power for all lanes.')
snIfOpticalMonitoringRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfOpticalMonitoringRxPower.setStatus('current')
if mibBuilder.loadTexts: snIfOpticalMonitoringRxPower.setDescription('This object holds the value of the receiver optical signal power for the interface, measured in dBm, followed by whether this is a normal value, or high/low warning or alarm. For 100G LR4 and LR10 optic, this returns the aggregated Rx Power for all lanes.')
snIfOpticalMonitoringTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfOpticalMonitoringTxBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: snIfOpticalMonitoringTxBiasCurrent.setDescription('Tx Bias Current. It is measured in mA, and is followed by whether this is a normal value, or high/low warning or alarm. For 100G LR4 and LR10 optic, this returns the aggregated Tx Bias Current for all lanes.')
snIfMediaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 9), )
if mibBuilder.loadTexts: snIfMediaInfoTable.setStatus('current')
if mibBuilder.loadTexts: snIfMediaInfoTable.setDescription('This table lists the information of the media device (SFP/XFP/Copper) installed in the physical port. Only the ifIndices of Ethernet ports those are associated with the operational cards will be included in this table.')
snIfMediaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: snIfMediaInfoEntry.setStatus('current')
if mibBuilder.loadTexts: snIfMediaInfoEntry.setDescription('An entry in the Interface Media Information table. The ifIndices of ethernet interfaces will be used to index this table.')
snIfMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 9, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfMediaType.setStatus('current')
if mibBuilder.loadTexts: snIfMediaType.setDescription('The type of the media installed in the physical port.')
snIfMediaVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfMediaVendorName.setStatus('current')
if mibBuilder.loadTexts: snIfMediaVendorName.setDescription('The media vendor name, full name of the corporation.')
snIfMediaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfMediaVersion.setStatus('current')
if mibBuilder.loadTexts: snIfMediaVersion.setDescription('The media vendor product version number.')
snIfMediaPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfMediaPartNumber.setStatus('current')
if mibBuilder.loadTexts: snIfMediaPartNumber.setDescription('The media vendor part number.')
snIfMediaSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfMediaSerialNumber.setStatus('current')
if mibBuilder.loadTexts: snIfMediaSerialNumber.setDescription('The vendor serial number of the media device.')
snIfOpticalLaneMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 10), )
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringTable.setReference('ITU recommendations G.783, G.784, G.953')
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringTable.setStatus('current')
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringTable.setDescription('This table lists the instrumented parameters of all lanes within a 40G Optic of type SR4 and LR4, 100G optic of type LR4 and LR10. LR4 and SR4 have 4 lanes per optic, LR10 has 10 lanes per optic.')
snIfOpticalLaneMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snIfOpticalLaneMonitoringLane"))
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringEntry.setStatus('current')
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringEntry.setDescription('Only the ifIndices of optical interfaces whose parameters need to be monitored will be used to index this table.')
snIfOpticalLaneMonitoringLane = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringLane.setStatus('current')
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringLane.setDescription('The lane number of this 40G or 100G optic. LR4 and SR4 have 4 lanes per optic. LR10 has 10 lanes per optic.')
snIfOpticalLaneMonitoringTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringTemperature.setStatus('current')
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringTemperature.setDescription('This object holds the value of the transmitter laser diode temperature for the lane in the interface. This object indicates the health of the transmitter. The format is xxx.yyyy C(elcius), followed by whether the measured value is normal, high/low alarm or high/low warning.')
snIfOpticalLaneMonitoringTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringTxPower.setStatus('current')
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringTxPower.setDescription('This object holds the value of the transmitter optical signal power for the lane in the interface, measured in dBm, followed by whether this is a normal value, or high/low warning or alarm.')
snIfOpticalLaneMonitoringRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringRxPower.setStatus('current')
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringRxPower.setDescription('This object holds the value of the receiver optical signal power for the lane in the interface, measured in dBm, followed by whether this is a normal value, or high/low warning or alarm.')
snIfOpticalLaneMonitoringTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringTxBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: snIfOpticalLaneMonitoringTxBiasCurrent.setDescription('Tx Bias Current. It is measured in mA, and is followed by whether this is a normal value, or high/low warning or alarm.')
brcdIfEgressCounterInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 11), )
if mibBuilder.loadTexts: brcdIfEgressCounterInfoTable.setStatus('current')
if mibBuilder.loadTexts: brcdIfEgressCounterInfoTable.setDescription('This table lists the information of egress counters of all the queues in the physical ports.')
brcdIfEgressCounterInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 11, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "brcdIfEgressCounterIfIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "brcdIfEgressCounterQueueId"))
if mibBuilder.loadTexts: brcdIfEgressCounterInfoEntry.setStatus('current')
if mibBuilder.loadTexts: brcdIfEgressCounterInfoEntry.setDescription('An entry in the Interface Egress Counter Information table. The ifIndices of ethernet interfaces and the queue number will be used to index this table.')
brcdIfEgressCounterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 11, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: brcdIfEgressCounterIfIndex.setStatus('current')
if mibBuilder.loadTexts: brcdIfEgressCounterIfIndex.setDescription('The port number of egress counter in the physical port. The port/interface index (ifindex).')
brcdIfEgressCounterQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 11, 1, 2), Integer32())
if mibBuilder.loadTexts: brcdIfEgressCounterQueueId.setStatus('current')
if mibBuilder.loadTexts: brcdIfEgressCounterQueueId.setDescription('The queue number of egress counter in the given port.')
brcdIfEgressCounterType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("unicast", 2), ("multicast", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdIfEgressCounterType.setStatus('current')
if mibBuilder.loadTexts: brcdIfEgressCounterType.setDescription('The queue type of the egress counter in a given port.')
brcdIfEgressCounterPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 11, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdIfEgressCounterPkts.setStatus('current')
if mibBuilder.loadTexts: brcdIfEgressCounterPkts.setDescription('The egress packet counters of the queue in a given port.')
brcdIfEgressCounterDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 11, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdIfEgressCounterDropPkts.setStatus('current')
if mibBuilder.loadTexts: brcdIfEgressCounterDropPkts.setDescription('The egress dropped packet counters of the queue in a given port.')
snFdbTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1), )
if mibBuilder.loadTexts: snFdbTable.setStatus('current')
if mibBuilder.loadTexts: snFdbTable.setDescription('This table contains snFdb information for each station known to the system, one entry per station.')
snFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snFdbStationIndex"))
if mibBuilder.loadTexts: snFdbEntry.setStatus('current')
if mibBuilder.loadTexts: snFdbEntry.setDescription('Each entry represents the information of a static MAC station.')
snFdbStationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdbStationIndex.setStatus('current')
if mibBuilder.loadTexts: snFdbStationIndex.setDescription('The FDB Station index to the Fdb Station Table.')
snFdbStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbStationAddr.setStatus('current')
if mibBuilder.loadTexts: snFdbStationAddr.setDescription('The snFdbs physical address. The physical address represents a MAC Station.')
snFdbStationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbStationPort.setStatus('current')
if mibBuilder.loadTexts: snFdbStationPort.setDescription('Station slot/port number. The bit 0 to bit 7: port number. The bit 8 to bit 11: slot number (slot for chassis only).')
snFdbVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbVLanId.setStatus('current')
if mibBuilder.loadTexts: snFdbVLanId.setDescription('The Station VLan ID.')
snFdbStationQos = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbStationQos.setStatus('current')
if mibBuilder.loadTexts: snFdbStationQos.setDescription('The Stand alone stackable station Qos Priority values are: low(0) -- low prority high(1) -- high prority. The BigIron switch station Priority values are: level0(0), level1(1), level2(2), level3(3), level4(4), level5(5), level6(6), level7(7) ')
snFdbStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("host", 1), ("router", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbStationType.setStatus('current')
if mibBuilder.loadTexts: snFdbStationType.setDescription('The station type values are: notSupported -- a read value only : this product does not support MultiLayer Switching. host -- any MAC station. router -- a router-typed station.')
snFdbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbRowStatus.setStatus('current')
if mibBuilder.loadTexts: snFdbRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row other(1)....some other case valid(2)....the row exists and is valid")
snFdbStationIf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 8), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdbStationIf.setStatus('current')
if mibBuilder.loadTexts: snFdbStationIf.setDescription('Station interface index.')
snPortStpTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1), )
if mibBuilder.loadTexts: snPortStpTable.setStatus('deprecated')
if mibBuilder.loadTexts: snPortStpTable.setDescription('A specific snPortStpTable consists of a number of switch ports. This table only exists if only if snVLanByPortCfgTable exists and snVLanByPortCfgStpMode is enabled for each VLAN.')
snPortStpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortStpVLanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortStpPortNum"))
if mibBuilder.loadTexts: snPortStpEntry.setStatus('deprecated')
if mibBuilder.loadTexts: snPortStpEntry.setDescription('An entry in the snPortStpTable indicates the configuration on a specified port. A SNMP SET PDU for a row of the snPortStpTable requires the entired sequence of the MIB Objects in each snPortStpEntry stored in one PDU. Otherwise, GENERR return-value will be returned.')
snPortStpVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpVLanId.setStatus('deprecated')
if mibBuilder.loadTexts: snPortStpVLanId.setDescription('The VLAN ID of the VLAN switch community.')
snPortStpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpPortNum.setStatus('deprecated')
if mibBuilder.loadTexts: snPortStpPortNum.setDescription('The port number of the Switch. The bit 0 to bit 7: port number. The bit 8 to bit 11: slot number (slot for chassis only).')
snPortStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortStpPortPriority.setStatus('deprecated')
if mibBuilder.loadTexts: snPortStpPortPriority.setDescription('The value of the priority field which is contained in the first (in network byte order) octet of the (2 octet long) Port ID. The other octet of the Port ID is given by the value of dot1dStpPort.')
snPortStpPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortStpPathCost.setStatus('deprecated')
if mibBuilder.loadTexts: snPortStpPathCost.setDescription('dot1dStpPortPathCost : The contribution of this port to the path cost of paths towards the spanning tree root which include this port. 802.1D-1990 recommends that the default value of this parameter be in inverse proportion to the speed of the attached LAN. Writing value zero to this object sets path cost to a default value which automatically changes according to port speed. Reading value zero indicates an unknown path cost value because port speed cannot be determined due to speed auto sense in progress.')
snPortStpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notActivated", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpOperState.setStatus('deprecated')
if mibBuilder.loadTexts: snPortStpOperState.setDescription('By default, this mode is set to notActivated(0). notActivated(0)...the Port STP entry is not activated and not in running mode. activated(1)......the Port STP entry is activated and in running mode')
snPortStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))))
if mibBuilder.loadTexts: snPortStpPortEnable.setStatus('deprecated')
if mibBuilder.loadTexts: snPortStpPortEnable.setDescription('The enabled/disabled status of the port.')
snPortStpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 7), Counter32())
if mibBuilder.loadTexts: snPortStpPortForwardTransitions.setStatus('deprecated')
if mibBuilder.loadTexts: snPortStpPortForwardTransitions.setDescription('The number of times this port has transitioned from the Learning state to the Forwarding state.')
snPortStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6), ("preforwarding", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpPortState.setStatus('deprecated')
if mibBuilder.loadTexts: snPortStpPortState.setDescription("The port's current state as defined by application of the Spanning Tree Protocol. This state controls what action a port takes on reception of a frame. If the bridge has detected a port that is malfunctioning it will place that port into the broken(6) state. For ports which are disabled (see dot1dStpPortEnable), this object will have a value of disabled(1).")
snPortStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpPortDesignatedCost.setStatus('deprecated')
if mibBuilder.loadTexts: snPortStpPortDesignatedCost.setDescription('The path cost of the Designated Port of the segment connected to this port. This value is compared to the Root Path Cost field in received bridge PDUs.')
snPortStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 10), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpPortDesignatedRoot.setStatus('deprecated')
if mibBuilder.loadTexts: snPortStpPortDesignatedRoot.setDescription('The unique Bridge Identifier of the Bridge recorded as the Root in the Configuration BPDUs transmitted by the Designated Bridge for the segment to which the port is attached.')
snPortStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 11), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpPortDesignatedBridge.setStatus('deprecated')
if mibBuilder.loadTexts: snPortStpPortDesignatedBridge.setDescription("The Bridge Identifier of the bridge which this port considers to be the Designated Bridge for this port's segment.")
snPortStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortStpPortDesignatedPort.setStatus('deprecated')
if mibBuilder.loadTexts: snPortStpPortDesignatedPort.setDescription("The Port Identifier of the port on the Designated Bridge for this port's segment.")
snPortStpPortAdminRstp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortStpPortAdminRstp.setStatus('deprecated')
if mibBuilder.loadTexts: snPortStpPortAdminRstp.setDescription('Enable or disable RSTP of a port which is a member of a VLAN. If the VLAN is not operating in RSTP, this object will return FALSE(2) and this object is not writable.')
snPortStpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortStpPortProtocolMigration.setStatus('deprecated')
if mibBuilder.loadTexts: snPortStpPortProtocolMigration.setDescription('When operating in RSTP (version 2) mode, writing TRUE(1) to this object forces this port to transmit RSTP BPDUs. Any other operation on this object has no effect and it always returns FALSE(2) when read.')
snPortStpPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortStpPortAdminEdgePort.setStatus('deprecated')
if mibBuilder.loadTexts: snPortStpPortAdminEdgePort.setDescription('The administrative value of the Edge Port parameter. A value of TRUE(1) indicates that this port should be assumed as an edge-port and a value of FALSE(2) indicates that this port should be assumed as a non-edge-port.')
snPortStpPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortStpPortAdminPointToPoint.setStatus('deprecated')
if mibBuilder.loadTexts: snPortStpPortAdminPointToPoint.setDescription('The administrative point-to-point status of the LAN segment attached to this port. A value of TRUE(1) indicates that this port should always be treated as if it is connected to a point-to-point link. A value of FALSE(2) indicates that this port should be treated as having a shared media connection.')
snIfStpTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2), )
if mibBuilder.loadTexts: snIfStpTable.setStatus('current')
if mibBuilder.loadTexts: snIfStpTable.setDescription('A specific snIfStpTable consists of a number of switch ports. This table only exists if only if snVLanByPortCfgTable exists and snVLanByPortCfgStpMode is enabled for each VLAN.')
snIfStpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snIfStpVLanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snIfStpPortNum"))
if mibBuilder.loadTexts: snIfStpEntry.setStatus('current')
if mibBuilder.loadTexts: snIfStpEntry.setDescription('An entry in the snIfStpTable indicates the configuration on a specified port. A SNMP SET PDU for a row of the snIfStpTable requires the entired sequence of the MIB Objects in each snIfStpEntry stored in one PDU. Otherwise, GENERR return-value will be returned.')
snIfStpVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpVLanId.setStatus('current')
if mibBuilder.loadTexts: snIfStpVLanId.setDescription('The VLAN ID of the VLAN switch community.')
snIfStpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpPortNum.setStatus('current')
if mibBuilder.loadTexts: snIfStpPortNum.setDescription('The port number of the Switch. It has the ifIndex value.')
snIfStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIfStpPortPriority.setStatus('current')
if mibBuilder.loadTexts: snIfStpPortPriority.setDescription('The value of the priority field which is contained in the first (in network byte order) octet of the (2 octet long) Port ID. The other octet of the Port ID is given by the value of dot1dStpPort.')
snIfStpCfgPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIfStpCfgPathCost.setStatus('current')
if mibBuilder.loadTexts: snIfStpCfgPathCost.setDescription('dot1dStpPortPathCost : The contribution of this port to the path cost of paths towards the spanning tree root which include this port. 802.1D-1990 recommends that the default value of this parameter be in inverse proportion to the speed of the attached LAN. Writing value zero to this object sets path cost to a default value which automatically changes according to port speed.')
snIfStpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notActivated", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpOperState.setStatus('current')
if mibBuilder.loadTexts: snIfStpOperState.setDescription('For FastIron: By default, this mode is set to notActivated(0). notActivated(0)...the Port STP or RSTP entry is not configured and not in running mode. activated(1)......the Port STP or RSTP entry is enabled. For NetIron: By default, this mode is set to notActivated(0). notActivated(0)...the Port STP entry is not activated and not in running mode. activated(1)......the Port STP entry is activated and in running mode')
snIfStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6), ("preforwarding", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpPortState.setStatus('current')
if mibBuilder.loadTexts: snIfStpPortState.setDescription("The port's current state as defined by application of the Spanning Tree Protocol. This state controls what action a port takes on reception of a frame. If the bridge has detected a port that is malfunctioning it will place that port into the broken(6) state. For ports which are disabled (see dot1dStpPortEnable), this object will have a value of disabled(1).")
snIfStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpPortDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: snIfStpPortDesignatedCost.setDescription('The path cost of the Designated Port of the segment connected to this port. This value is compared to the Root Path Cost field in received bridge PDUs.')
snIfStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 10), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpPortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: snIfStpPortDesignatedRoot.setDescription('The unique Bridge Identifier of the Bridge recorded as the Root in the Configuration BPDUs transmitted by the Designated Bridge for the segment to which the port is attached.')
snIfStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 11), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: snIfStpPortDesignatedBridge.setDescription("The Bridge Identifier of the bridge which this port considers to be the Designated Bridge for this port's segment.")
snIfStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: snIfStpPortDesignatedPort.setDescription("The Port Identifier of the port on the Designated Bridge for this port's segment.")
snIfStpPortAdminRstp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIfStpPortAdminRstp.setStatus('current')
if mibBuilder.loadTexts: snIfStpPortAdminRstp.setDescription('Enable or disable RSTP of a port which is a member of a VLAN. If the VLAN is not operating in RSTP, this object will return FALSE(2) and this object is not writable.')
snIfStpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIfStpPortProtocolMigration.setStatus('current')
if mibBuilder.loadTexts: snIfStpPortProtocolMigration.setDescription('When operating in RSTP (version 2) mode, writing TRUE(1) to this object forces this port to transmit RSTP BPDUs. Any other operation on this object has no effect and it always returns FALSE(2) when read.')
snIfStpPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIfStpPortAdminEdgePort.setStatus('current')
if mibBuilder.loadTexts: snIfStpPortAdminEdgePort.setDescription('The administrative value of the Edge Port parameter. A value of TRUE(1) indicates that this port should be assumed as an edge-port and a value of FALSE(2) indicates that this port should be assumed as a non-edge-port.')
snIfStpPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIfStpPortAdminPointToPoint.setStatus('current')
if mibBuilder.loadTexts: snIfStpPortAdminPointToPoint.setDescription('The administrative point-to-point status of the LAN segment attached to this port. A value of TRUE(1) indicates that this port should always be treated as if it is connected to a point-to-point link. A value of FALSE(2) indicates that this port should be treated as having a shared media connection.')
snIfStpOperPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpOperPathCost.setStatus('current')
if mibBuilder.loadTexts: snIfStpOperPathCost.setDescription('dot1dStpPortPathCost : The contribution of this port to the path cost of paths towards the spanning tree root which include this port. 802.1D-1990 recommends that the default value of this parameter be in inverse proportion to the speed of the attached LAN. Reading value zero indicates an unknown path cost value because port speed cannot be determined due to speed auto sense in progress or port link is down.')
snIfStpPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("alternate", 1), ("root", 2), ("designated", 3), ("backupRole", 4), ("disabledRole", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpPortRole.setStatus('current')
if mibBuilder.loadTexts: snIfStpPortRole.setDescription('STP/RSTP port role.')
snIfStpBPDUTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpBPDUTransmitted.setStatus('current')
if mibBuilder.loadTexts: snIfStpBPDUTransmitted.setDescription('STP/RSTP bridge protocol unit transmitted counter.')
snIfStpBPDUReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfStpBPDUReceived.setStatus('current')
if mibBuilder.loadTexts: snIfStpBPDUReceived.setDescription('STP/RSTP bridge protocol unit received counter.')
snIfRstpConfigBPDUReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfRstpConfigBPDUReceived.setStatus('current')
if mibBuilder.loadTexts: snIfRstpConfigBPDUReceived.setDescription('RSTP configuration bridge protocol unit received counter.')
snIfRstpTCNBPDUReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfRstpTCNBPDUReceived.setStatus('current')
if mibBuilder.loadTexts: snIfRstpTCNBPDUReceived.setDescription('RSTP topology change notification bridge protocol unit received counter.')
snIfRstpConfigBPDUTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfRstpConfigBPDUTransmitted.setStatus('current')
if mibBuilder.loadTexts: snIfRstpConfigBPDUTransmitted.setDescription('RSTP configuration bridge protocol unit transmitted counter.')
snIfRstpTCNBPDUTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIfRstpTCNBPDUTransmitted.setStatus('current')
if mibBuilder.loadTexts: snIfRstpTCNBPDUTransmitted.setDescription('RSTP topology change notification bridge protocol unit transmitted counter.')
snTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 1), )
if mibBuilder.loadTexts: snTrunkTable.setStatus('current')
if mibBuilder.loadTexts: snTrunkTable.setDescription('A specific snTrunkTable consists of a number of Trunk port-mask.')
snTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snTrunkIndex"))
if mibBuilder.loadTexts: snTrunkEntry.setStatus('current')
if mibBuilder.loadTexts: snTrunkEntry.setDescription('An entry in the snTrunkTable indicates the configuration on a specified Trunk port membership.')
snTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snTrunkIndex.setStatus('current')
if mibBuilder.loadTexts: snTrunkIndex.setDescription('The number of the trunk entries can be configured. This can be 32*<slots> for Jetcore, and 16*<slots> for Ironcore.')
snTrunkPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 1, 1, 2), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTrunkPortMask.setStatus('current')
if mibBuilder.loadTexts: snTrunkPortMask.setDescription('Trunk membership of the Switch.')
snTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switch", 1), ("server", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTrunkType.setStatus('current')
if mibBuilder.loadTexts: snTrunkType.setDescription('The trunk connection type which specifies what device the trunk ports are connected to.')
snMSTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 2), )
if mibBuilder.loadTexts: snMSTrunkTable.setStatus('current')
if mibBuilder.loadTexts: snMSTrunkTable.setDescription('A table contains the configuration of port members of multi-slot trunk groups.')
snMSTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snMSTrunkPortIndex"))
if mibBuilder.loadTexts: snMSTrunkEntry.setStatus('current')
if mibBuilder.loadTexts: snMSTrunkEntry.setDescription('An entry of the snMSTrunkTable.')
snMSTrunkPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snMSTrunkPortIndex.setStatus('current')
if mibBuilder.loadTexts: snMSTrunkPortIndex.setDescription('The primary port of a trunk group. For module with Gig ports, primary port is port 1, 3, 5, 7. For module with 10/100 ports, primary port is port 1, 5, 9, 13, 17, 21.')
snMSTrunkPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMSTrunkPortList.setStatus('current')
if mibBuilder.loadTexts: snMSTrunkPortList.setDescription('A list of port indices which are the port membership of a trunk group. Each port index is a 16-bit integer in big endian order. The first port index must be the primary port index.')
snMSTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switch", 1), ("server", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMSTrunkType.setStatus('current')
if mibBuilder.loadTexts: snMSTrunkType.setDescription('The trunk connection type which specifies what device the trunk ports are connected to.')
snMSTrunkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMSTrunkRowStatus.setStatus('current')
if mibBuilder.loadTexts: snMSTrunkRowStatus.setDescription('To create or delete a table entry.')
snMSTrunkIfTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 3), )
if mibBuilder.loadTexts: snMSTrunkIfTable.setStatus('current')
if mibBuilder.loadTexts: snMSTrunkIfTable.setDescription('A table contains the configuration of port members of multi-slot trunk groups.')
snMSTrunkIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snMSTrunkIfIndex"))
if mibBuilder.loadTexts: snMSTrunkIfEntry.setStatus('current')
if mibBuilder.loadTexts: snMSTrunkIfEntry.setDescription('An entry of the snMSTrunkIfTable.')
snMSTrunkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snMSTrunkIfIndex.setStatus('current')
if mibBuilder.loadTexts: snMSTrunkIfIndex.setDescription('The primary port(IfIndex) of a trunk group. For module with Gig ports, primary port is port 1, 3, 5, 7. For module with 10/100 ports, primary port is port 1, 5, 9, 13, 17, 21.')
snMSTrunkIfList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMSTrunkIfList.setStatus('current')
if mibBuilder.loadTexts: snMSTrunkIfList.setDescription('A list of interface indices which are the port membership of a trunk group. Each interface index is a 16-bit integer in big endian order. The first interface/port index must be the primary port(ifIndex) index.')
snMSTrunkIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switch", 1), ("server", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMSTrunkIfType.setStatus('current')
if mibBuilder.loadTexts: snMSTrunkIfType.setDescription('The trunk connection type which specifies what device the trunk ports are connected to.')
snMSTrunkIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMSTrunkIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: snMSTrunkIfRowStatus.setDescription('To create or delete a table entry.')
snSwSummaryMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwSummaryMode.setStatus('current')
if mibBuilder.loadTexts: snSwSummaryMode.setDescription('The Switch Group Configuration Summary is configured either enabled or disabled and the default is disabled mode. enabled(1)...........activate Switch Configuration Summary. disabled(0)..........no Switch Configuration Summary.')
snDhcpGatewayListTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 8, 1), )
if mibBuilder.loadTexts: snDhcpGatewayListTable.setStatus('current')
if mibBuilder.loadTexts: snDhcpGatewayListTable.setDescription('A table of DHCP gateway list of addresses.')
snDhcpGatewayListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 8, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snDhcpGatewayListId"))
if mibBuilder.loadTexts: snDhcpGatewayListEntry.setStatus('current')
if mibBuilder.loadTexts: snDhcpGatewayListEntry.setDescription('An entry in the IP Port Address table.')
snDhcpGatewayListId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDhcpGatewayListId.setStatus('current')
if mibBuilder.loadTexts: snDhcpGatewayListId.setDescription('The ID for a DHCP gateway list entry.')
snDhcpGatewayListAddrList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 8, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDhcpGatewayListAddrList.setStatus('current')
if mibBuilder.loadTexts: snDhcpGatewayListAddrList.setDescription('The DHCP gateway address list for each DHCP gateway list ID. This list contains 1 to 8 IP addresses represented by octet string.')
snDhcpGatewayListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDhcpGatewayListRowStatus.setStatus('current')
if mibBuilder.loadTexts: snDhcpGatewayListRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row or modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row other(1)....some other case valid(2)....the row exists and is valid")
snDnsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDnsDomainName.setStatus('current')
if mibBuilder.loadTexts: snDnsDomainName.setDescription('DNS Domain Name string.')
snDnsGatewayIpAddrList = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 9, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDnsGatewayIpAddrList.setStatus('current')
if mibBuilder.loadTexts: snDnsGatewayIpAddrList.setDescription('The DNS Gateway IP address list. This list contains 4 IP addresses represented by octet string.')
snMacFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1), )
if mibBuilder.loadTexts: snMacFilterTable.setStatus('current')
if mibBuilder.loadTexts: snMacFilterTable.setDescription('MAC filter table.')
snMacFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snMacFilterIndex"))
if mibBuilder.loadTexts: snMacFilterEntry.setStatus('current')
if mibBuilder.loadTexts: snMacFilterEntry.setDescription('An entry in the MAC filter table.')
snMacFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snMacFilterIndex.setStatus('current')
if mibBuilder.loadTexts: snMacFilterIndex.setDescription('The table index for a filter entry.')
snMacFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterAction.setStatus('current')
if mibBuilder.loadTexts: snMacFilterAction.setDescription('Action to take if the Mac packet match with this filter.')
snMacFilterSourceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterSourceMac.setStatus('current')
if mibBuilder.loadTexts: snMacFilterSourceMac.setDescription('Source MAC address.')
snMacFilterSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterSourceMask.setStatus('current')
if mibBuilder.loadTexts: snMacFilterSourceMask.setDescription('Source MAC subnet mask.')
snMacFilterDestMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterDestMac.setStatus('current')
if mibBuilder.loadTexts: snMacFilterDestMac.setDescription('Destination MAC address.')
snMacFilterDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterDestMask.setStatus('current')
if mibBuilder.loadTexts: snMacFilterDestMask.setDescription('Destination MAC subnet mask.')
snMacFilterOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("equal", 0), ("notEqual", 1), ("less", 2), ("greater", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterOperator.setStatus('current')
if mibBuilder.loadTexts: snMacFilterOperator.setDescription('Type of comparison to perform.')
snMacFilterFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notUsed", 0), ("ethernet", 1), ("llc", 2), ("snap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterFrameType.setStatus('current')
if mibBuilder.loadTexts: snMacFilterFrameType.setDescription('Frame Type: ethernet-type, LLC and SNAP types')
snMacFilterFrameTypeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterFrameTypeNum.setStatus('current')
if mibBuilder.loadTexts: snMacFilterFrameTypeNum.setDescription('Frame Type Number. 0 means NA')
snMacFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: snMacFilterRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative.. valid(2)....the row exists and is valid")
snMacFilterPortAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 2), )
if mibBuilder.loadTexts: snMacFilterPortAccessTable.setStatus('deprecated')
if mibBuilder.loadTexts: snMacFilterPortAccessTable.setDescription('MAC Filter port access table.')
snMacFilterPortAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snMacFilterPortAccessPortIndex"))
if mibBuilder.loadTexts: snMacFilterPortAccessEntry.setStatus('deprecated')
if mibBuilder.loadTexts: snMacFilterPortAccessEntry.setDescription('An entry in the MAC Filter Port access table.')
snMacFilterPortAccessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snMacFilterPortAccessPortIndex.setStatus('deprecated')
if mibBuilder.loadTexts: snMacFilterPortAccessPortIndex.setDescription('The port index. For FastIron/NetIron products, port index value is from 1 to 42 For BigIron products, port index is an encoded number: The bit 0 to bit 7: port number. The bit 8 to bit 11: slot number. For virtual router interface, slot number is 15, port number is the virtual router port from 1 to 60. Therefore, port index value for BigIron is from 257 to 3900.')
snMacFilterPortAccessFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterPortAccessFilters.setStatus('deprecated')
if mibBuilder.loadTexts: snMacFilterPortAccessFilters.setDescription('1st octet correspond to 1st filter number and so on.')
snMacFilterPortAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterPortAccessRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: snMacFilterPortAccessRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative.. valid(2)....the row exists and is valid")
snMacFilterIfAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 3), )
if mibBuilder.loadTexts: snMacFilterIfAccessTable.setStatus('current')
if mibBuilder.loadTexts: snMacFilterIfAccessTable.setDescription('MAC Filter port access table.')
snMacFilterIfAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snMacFilterIfAccessPortIndex"))
if mibBuilder.loadTexts: snMacFilterIfAccessEntry.setStatus('current')
if mibBuilder.loadTexts: snMacFilterIfAccessEntry.setDescription('An entry in the MAC Filter Port access table.')
snMacFilterIfAccessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snMacFilterIfAccessPortIndex.setStatus('current')
if mibBuilder.loadTexts: snMacFilterIfAccessPortIndex.setDescription('The port/interface index.')
snMacFilterIfAccessFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterIfAccessFilters.setStatus('current')
if mibBuilder.loadTexts: snMacFilterIfAccessFilters.setDescription('1st octet correspond to 1st filter number and so on.')
snMacFilterIfAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacFilterIfAccessRowStatus.setStatus('current')
if mibBuilder.loadTexts: snMacFilterIfAccessRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative.. valid(2)....the row exists and is valid")
snNTPGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 1))
snNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNTPPollInterval.setStatus('current')
if mibBuilder.loadTexts: snNTPPollInterval.setDescription('Interval specifies how often to poll the NTP server. Each unit is one second. This object is not supported in NI devices from R5.3')
snNTPTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))).clone(namedValues=NamedValues(("alaska", 0), ("aleutian", 1), ("arizona", 2), ("central", 3), ("eastIndiana", 4), ("eastern", 5), ("hawaii", 6), ("michigan", 7), ("mountain", 8), ("pacific", 9), ("samoa", 10), ("gmtPlus1200", 11), ("gmtPlus1100", 12), ("gmtPlus1000", 13), ("gmtPlus0900", 14), ("gmtPlus0800", 15), ("gmtPlus0700", 16), ("gmtPlus0600", 17), ("gmtPlus0500", 18), ("gmtPlus0400", 19), ("gmtPlus0300", 20), ("gmtPlus0200", 21), ("gmtPlus0100", 22), ("gmt", 23), ("gmtMinus0100", 24), ("gmtMinus0200", 25), ("gmtMinus0300", 26), ("gmtMinus0400", 27), ("gmtMinus0500", 28), ("gmtMinus0600", 29), ("gmtMinus0700", 30), ("gmtMinus0800", 31), ("gmtMinus0900", 32), ("gmtMinus1000", 33), ("gmtMinus1100", 34), ("gmtMinus1200", 35), ("gmtPlus1130", 36), ("gmtPlus1030", 37), ("gmtPlus0930", 38), ("gmtPlus0630", 39), ("gmtPlus0530", 40), ("gmtPlus0430", 41), ("gmtPlus0330", 42), ("gmtMinus0330", 43), ("gmtMinus0830", 44), ("gmtMinus0930", 45))).clone('gmt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNTPTimeZone.setStatus('current')
if mibBuilder.loadTexts: snNTPTimeZone.setDescription('Time zone.')
snNTPSummerTimeEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNTPSummerTimeEnable.setStatus('current')
if mibBuilder.loadTexts: snNTPSummerTimeEnable.setDescription('Enable/Disable daylight saving time. This enables daylight saving time for time/date starting 02:00:00 of first Sunday in April and ending 02:00:00 of last Sunday in October every year.')
snNTPSystemClock = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNTPSystemClock.setStatus('current')
if mibBuilder.loadTexts: snNTPSystemClock.setDescription('System clock, in the following format: octet 0: seconds after the minute [0-60] octet 1: minutes after the hour [0-59] octet 2: hours since midnight [0-23] octet 3: day of the month [1-31] octet 4: months since January [0-11] octet 5: years since 1900 octet 6: days since Sunday [0-6] Setting this object requires valid value in octets 0 to 5, and zero in octet 6. System clock can be disabled by setting zero to all octets.')
snNTPSync = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("synchronize", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNTPSync.setStatus('current')
if mibBuilder.loadTexts: snNTPSync.setDescription("Initiate time synchronization to the NTP servers. For set operation, only 'synchronize(2)' is accepted. For get operation, always return 'other(1)'. This object is not supported in NI devices from R5.3")
snNTPServerTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 2), )
if mibBuilder.loadTexts: snNTPServerTable.setStatus('current')
if mibBuilder.loadTexts: snNTPServerTable.setDescription('NTP (Network Time Protocol) server table.')
snNTPServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snNTPServerIp"))
if mibBuilder.loadTexts: snNTPServerEntry.setStatus('current')
if mibBuilder.loadTexts: snNTPServerEntry.setDescription('An entry in the NTP server table.')
snNTPServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNTPServerIp.setStatus('current')
if mibBuilder.loadTexts: snNTPServerIp.setDescription('NTP server IP address.')
snNTPServerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNTPServerVersion.setStatus('current')
if mibBuilder.loadTexts: snNTPServerVersion.setDescription('NTP server version.')
snNTPServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNTPServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: snNTPServerRowStatus.setDescription('To create or delete a NTP server table entry.')
snRadiusGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1))
snRadiusSNMPAccess = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRadiusSNMPAccess.setStatus('current')
if mibBuilder.loadTexts: snRadiusSNMPAccess.setDescription('Indicate whether RADIUS server and key related MIB objects can be accessed by SNMP manager. If value is disabled, then snRadiusKey and snRadiusServerTable objects will not be accessible.')
snRadiusEnableTelnetAuth = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusEnableTelnetAuth.setStatus('current')
if mibBuilder.loadTexts: snRadiusEnableTelnetAuth.setDescription("Enable/Disable telnet authentication specified by 'snRadiusLoginMethod'.")
snRadiusRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusRetransmit.setStatus('current')
if mibBuilder.loadTexts: snRadiusRetransmit.setDescription('The number of authentication query retransmissions to the Radius server.')
snRadiusTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusTimeOut.setStatus('current')
if mibBuilder.loadTexts: snRadiusTimeOut.setDescription('Interval specifies how long to wait for authentication reply from the Radius server, each unit is one second.')
snRadiusDeadTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusDeadTime.setStatus('current')
if mibBuilder.loadTexts: snRadiusDeadTime.setDescription('Interval specifies Radius server dead time, each unit is one minute.')
snRadiusKey = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusKey.setStatus('current')
if mibBuilder.loadTexts: snRadiusKey.setDescription('Authentication key displayed as encrypted text. Write operation can only be done if the SET request uses SNMPv3 with data encrypted using privacy key. FastIron and NetIron platforms support keysize upto 64 characters.')
snRadiusLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusLoginMethod.setStatus('current')
if mibBuilder.loadTexts: snRadiusLoginMethod.setDescription('A sequence of authentication methods. Each octet represents a method to authenticate the user login process. Each octet has the following enumeration value: enable(1) - authenticate by command line interface enable password radius(2) - authenticate by requesting radius server local(3) - authenticate by local user account table line(4) - authenticate by telnet password tacplus(5) - authenticate by requesting tacplus server none(6) - do not authenticate tacacs(7) - authenticate by requesting tacacs server Setting a zero length octet string invalidates all previous authentication methods.')
snRadiusEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusEnableMethod.setStatus('current')
if mibBuilder.loadTexts: snRadiusEnableMethod.setDescription('A sequence of authentication methods. Each octet represents a method to authenticate the user entering priviledge mode of the command line interface. Each octet has the following enumeration value: enable(1) - authenticate by command line interface enable password radius(2) - authenticate by requesting radius server local(3) - authenticate by local user account table line(4) - authenticate by telnet password tacplus(5) - authenticate by requesting tacplus server none(6) - do not authenticate tacacs(7) - authenticate by requesting tacacs server Setting a zero length octet string invalidates all previous authentication methods.')
snRadiusWebServerMethod = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusWebServerMethod.setStatus('current')
if mibBuilder.loadTexts: snRadiusWebServerMethod.setDescription('A sequence of authentication methods. Each octet represents a method to authenticate the user accessing the web-server. Each octet has the following enumeration value: enable(1) - authenticate by command line interface enable password radius(2) - authenticate by requesting radius server local(3) - authenticate by local user account table line(4) - authenticate by telnet password tacplus(5) - authenticate by requesting tacplus server none(6) - do not authenticate tacacs(7) - authenticate by requesting tacacs server Setting a zero length octet string invalidates all previous authentication methods.')
snRadiusSNMPServerMethod = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusSNMPServerMethod.setStatus('current')
if mibBuilder.loadTexts: snRadiusSNMPServerMethod.setDescription('A sequence of authentication methods. Each octet represents a method to authenticate the user accessing the snmp-server. Each octet has the following enumeration value: enable(1) - authenticate by command line interface enable password radius(2) - authenticate by requesting radius server local(3) - authenticate by local user account table line(4) - authenticate by telnet password tacplus(5) - authenticate by requesting tacplus server none(6) - do not authenticate tacacs(7) - authenticate by requesting tacacs server Setting a zero length octet string invalidates all previous authentication methods.')
snRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2), )
if mibBuilder.loadTexts: snRadiusServerTable.setStatus('current')
if mibBuilder.loadTexts: snRadiusServerTable.setDescription('Radius server table.')
snRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snRadiusServerIp"))
if mibBuilder.loadTexts: snRadiusServerEntry.setStatus('current')
if mibBuilder.loadTexts: snRadiusServerEntry.setDescription('An entry in the Radius server table.')
snRadiusServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRadiusServerIp.setStatus('current')
if mibBuilder.loadTexts: snRadiusServerIp.setDescription('Radius server IP address.')
snRadiusServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2, 1, 2), Integer32().clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusServerAuthPort.setStatus('current')
if mibBuilder.loadTexts: snRadiusServerAuthPort.setDescription('Authentication UDP port number.')
snRadiusServerAcctPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2, 1, 3), Integer32().clone(1813)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusServerAcctPort.setStatus('current')
if mibBuilder.loadTexts: snRadiusServerAcctPort.setDescription('Account UDP port number.')
snRadiusServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: snRadiusServerRowStatus.setDescription('To create or delete a Radius server table entry.')
snRadiusServerRowKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusServerRowKey.setStatus('current')
if mibBuilder.loadTexts: snRadiusServerRowKey.setDescription('Authentication key displayed as encrypted text. FastIron and NetIron platforms support keysize upto 64 characters.')
snRadiusServerUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("authenticationOnly", 2), ("authorizationOnly", 3), ("accountingOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRadiusServerUsage.setStatus('current')
if mibBuilder.loadTexts: snRadiusServerUsage.setDescription('To allow this server to be dedicated for a particular AAA activity.')
snTacacsGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 1))
snTacacsRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsRetransmit.setStatus('current')
if mibBuilder.loadTexts: snTacacsRetransmit.setDescription('The number of authentication query retransmissions to the Tacacs server.')
snTacacsTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsTimeOut.setStatus('current')
if mibBuilder.loadTexts: snTacacsTimeOut.setDescription('Interval specifies how long to wait for authentication reply from the Tacacs server, each unit is one second.')
snTacacsDeadTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsDeadTime.setStatus('current')
if mibBuilder.loadTexts: snTacacsDeadTime.setDescription('Interval specifies Tacacs server dead time, each unit is one minute.')
snTacacsKey = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsKey.setStatus('current')
if mibBuilder.loadTexts: snTacacsKey.setDescription('Authentication key displayed as encrypted text. Write operation can only be done if the SET request uses SNMPv3 with data encrypted using privacy key. FastIron and NetIron platforms support keysize upto 64 characters.')
snTacacsSNMPAccess = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snTacacsSNMPAccess.setStatus('current')
if mibBuilder.loadTexts: snTacacsSNMPAccess.setDescription('Indicate whether TACACS+ server and key related MIB objects can be accessed by SNMP manager. If value is disabled, then snTacacsKey and snTacacsServerTable MIB objects will not be accessible.')
snTacacsServerTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 2), )
if mibBuilder.loadTexts: snTacacsServerTable.setStatus('current')
if mibBuilder.loadTexts: snTacacsServerTable.setDescription('Tacacs server table.')
snTacacsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snTacacsServerIp"))
if mibBuilder.loadTexts: snTacacsServerEntry.setStatus('current')
if mibBuilder.loadTexts: snTacacsServerEntry.setDescription('An entry in the Tacacs server table.')
snTacacsServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snTacacsServerIp.setStatus('current')
if mibBuilder.loadTexts: snTacacsServerIp.setDescription('Tacacs server IP address.')
snTacacsServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 2, 1, 2), Integer32().clone(49)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsServerAuthPort.setStatus('current')
if mibBuilder.loadTexts: snTacacsServerAuthPort.setDescription('Authentication UDP port number.')
snTacacsServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: snTacacsServerRowStatus.setDescription('To create or delete a Tacacs server table entry.')
snTacacsServerRowKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsServerRowKey.setStatus('current')
if mibBuilder.loadTexts: snTacacsServerRowKey.setDescription('Authentication key displayed as encrypted text. Write operation can only be done if the SET request uses SNMPv3 with data encrypted using privacy key. FastIron and NetIron platforms support keysize upto 64 characters.')
snTacacsServerUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("authenticationOnly", 2), ("authorizationOnly", 3), ("accountingOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTacacsServerUsage.setStatus('current')
if mibBuilder.loadTexts: snTacacsServerUsage.setDescription('To allow this server to be dedicated for a particular AAA activity.')
snQosProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 1), )
if mibBuilder.loadTexts: snQosProfileTable.setStatus('current')
if mibBuilder.loadTexts: snQosProfileTable.setDescription('A table contains the configuration of qos profile groups.')
snQosProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snQosProfileIndex"))
if mibBuilder.loadTexts: snQosProfileEntry.setStatus('current')
if mibBuilder.loadTexts: snQosProfileEntry.setDescription('An entry of the snQosProfileTable.')
snQosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snQosProfileIndex.setStatus('current')
if mibBuilder.loadTexts: snQosProfileIndex.setDescription('The table index of QOS Profile.')
snQosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snQosProfileName.setStatus('current')
if mibBuilder.loadTexts: snQosProfileName.setDescription('Qos Profile Name string.')
snQosProfileRequestedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snQosProfileRequestedBandwidth.setStatus('current')
if mibBuilder.loadTexts: snQosProfileRequestedBandwidth.setDescription('Qos Profile Requested Bandwidth.')
snQosProfileCalculatedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snQosProfileCalculatedBandwidth.setStatus('current')
if mibBuilder.loadTexts: snQosProfileCalculatedBandwidth.setDescription('Qos Profile Calculated Bandwidth.')
snQosBindTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 2), )
if mibBuilder.loadTexts: snQosBindTable.setStatus('current')
if mibBuilder.loadTexts: snQosBindTable.setDescription('A table contains the configuration of 802.1p to qos profile binding groups.')
snQosBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snQosBindIndex"))
if mibBuilder.loadTexts: snQosBindEntry.setStatus('current')
if mibBuilder.loadTexts: snQosBindEntry.setDescription('An entry of the snQosBindTable.')
snQosBindIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snQosBindIndex.setStatus('current')
if mibBuilder.loadTexts: snQosBindIndex.setDescription('The table index of QOS Bind.')
snQosBindPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snQosBindPriority.setStatus('current')
if mibBuilder.loadTexts: snQosBindPriority.setDescription('QOS bind priority.')
snQosBindProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snQosBindProfileIndex.setStatus('current')
if mibBuilder.loadTexts: snQosBindProfileIndex.setDescription('QOS Bind Profile Index. This is pointer to the index of snQosProfile Table.')
snDosAttack = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3))
snDosAttackGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 1))
snDosAttackICMPDropCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDosAttackICMPDropCount.setStatus('current')
if mibBuilder.loadTexts: snDosAttackICMPDropCount.setDescription('ICMP drop counter.')
snDosAttackICMPBlockCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDosAttackICMPBlockCount.setStatus('current')
if mibBuilder.loadTexts: snDosAttackICMPBlockCount.setDescription('ICMP block counter.')
snDosAttackSYNDropCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDosAttackSYNDropCount.setStatus('current')
if mibBuilder.loadTexts: snDosAttackSYNDropCount.setDescription('SYN drop counter.')
snDosAttackSYNBlockCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDosAttackSYNBlockCount.setStatus('current')
if mibBuilder.loadTexts: snDosAttackSYNBlockCount.setDescription('SYN block counter.')
snDosAttackPortTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 2), )
if mibBuilder.loadTexts: snDosAttackPortTable.setStatus('current')
if mibBuilder.loadTexts: snDosAttackPortTable.setDescription('Denial of service attack port table.')
snDosAttackPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snDosAttackPort"))
if mibBuilder.loadTexts: snDosAttackPortEntry.setStatus('current')
if mibBuilder.loadTexts: snDosAttackPortEntry.setDescription('An entry of the denial of service attack port table.')
snDosAttackPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDosAttackPort.setStatus('current')
if mibBuilder.loadTexts: snDosAttackPort.setDescription('ifIndex value of a port.')
snDosAttackPortICMPDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDosAttackPortICMPDropCount.setStatus('current')
if mibBuilder.loadTexts: snDosAttackPortICMPDropCount.setDescription('ICMP drop counter.')
snDosAttackPortICMPBlockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDosAttackPortICMPBlockCount.setStatus('current')
if mibBuilder.loadTexts: snDosAttackPortICMPBlockCount.setDescription('ICMP block counter.')
snDosAttackPortSYNDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDosAttackPortSYNDropCount.setStatus('current')
if mibBuilder.loadTexts: snDosAttackPortSYNDropCount.setDescription('SYN drop counter.')
snDosAttackPortSYNBlockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDosAttackPortSYNBlockCount.setStatus('current')
if mibBuilder.loadTexts: snDosAttackPortSYNBlockCount.setDescription('SYN block counter.')
snAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 1))
snAuthorization = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 2))
snAccounting = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 3))
snAuthorizationCommandMethods = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAuthorizationCommandMethods.setStatus('current')
if mibBuilder.loadTexts: snAuthorizationCommandMethods.setDescription('A sequence of authorization methods. Each octet represents a method to authorize the user command. Each octet has the following value: radius(2) - authorize by requesting radius server tacplus(5) - authorize by requesting tacplus server none(6) - skip authorization Setting a zero length octet string invalidates all previous authorization methods.')
snAuthorizationCommandLevel = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5))).clone(namedValues=NamedValues(("level0", 0), ("level4", 4), ("level5", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAuthorizationCommandLevel.setStatus('current')
if mibBuilder.loadTexts: snAuthorizationCommandLevel.setDescription('Commands, which are equal to and less than the specified command level here needs to be authorized. Possible enumeration values: 0 - Privilege level 0 4 - Privilege level 4 5 - Privilege level 5.')
snAuthorizationExec = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAuthorizationExec.setStatus('current')
if mibBuilder.loadTexts: snAuthorizationExec.setDescription('A sequence of exec authorization methods. Each octet represents a method for telnet or SSH login authorization. Each octet has the following enumeration value: radius(2) - send exec authorization request to radius server tacplus(5) - send exec authorization request to tacplus server none(6) - no exec authorization Setting a zero length octet string invalidates all authorization methods.')
snAccountingCommandMethods = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAccountingCommandMethods.setStatus('current')
if mibBuilder.loadTexts: snAccountingCommandMethods.setDescription('A sequence of accounting methods. Each octet represents a method to account for the user command. Each octet has the following enumeration value: radius(2) - send accounting info to radius server tacplus(5) - send accounting info to tacplus server none(6) - skip accounting Setting a zero length octet string invalidates all previous accounting methods.')
snAccountingCommandLevel = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5))).clone(namedValues=NamedValues(("level0", 0), ("level4", 4), ("level5", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAccountingCommandLevel.setStatus('current')
if mibBuilder.loadTexts: snAccountingCommandLevel.setDescription('Commands, which are equal to and less than the specified command level here will be accounted. Possible enumeration values: level0 - Privilege level 0 level4 - Privilege level 4 level5 - Privilege level 5.')
snAccountingExec = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAccountingExec.setStatus('current')
if mibBuilder.loadTexts: snAccountingExec.setDescription('A sequence of accounting methods. Each octet represents a method for telnet or SSH login accounting. Each octet has the following enumeration value: radius(2) - send accounting info to radius server tacplus(5) - send accounting info to tacplus server none(6) - skip accounting Setting a zero length octet string invalidates all previous accounting methods.')
snAccountingSystem = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAccountingSystem.setStatus('current')
if mibBuilder.loadTexts: snAccountingSystem.setDescription('A sequence of accounting methods. Each octet represents a method to account for the system related events. Each octet has the following enumeration value: radius(2) - send accounting info to radius server tacplus(5) - send accounting info to tacplus server none(6) - skip accounting Setting a zero length octet string invalidates all previous accounting methods.')
snNetFlowGlb = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 1))
snNetFlowGblEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowGblEnable.setStatus('current')
if mibBuilder.loadTexts: snNetFlowGblEnable.setDescription('Enable/disable NetFlow export operation.')
snNetFlowGblVersion = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 5))).clone(namedValues=NamedValues(("versionNotSet", 0), ("version1", 1), ("version5", 5))).clone('version5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowGblVersion.setStatus('current')
if mibBuilder.loadTexts: snNetFlowGblVersion.setDescription('NetFlow export version.')
snNetFlowGblProtocolDisable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowGblProtocolDisable.setStatus('current')
if mibBuilder.loadTexts: snNetFlowGblProtocolDisable.setDescription('bit 0 - other, disable all protocols export except UDP and TCP bit 1 - tcp, disable TCP protocol export bit 2 - udp, disable UDP protocol export')
snNetFlowGblActiveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 1, 4), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowGblActiveTimeout.setStatus('current')
if mibBuilder.loadTexts: snNetFlowGblActiveTimeout.setDescription('Maximum time an active flow can be in the NetFlow cache (minutes: 1..60)')
snNetFlowGblInactiveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 1, 5), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowGblInactiveTimeout.setStatus('current')
if mibBuilder.loadTexts: snNetFlowGblInactiveTimeout.setDescription('Maximum time an inactive flow can be in the NetFlow cache (seconds: 10..600)')
snNetFlowCollectorTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 2), )
if mibBuilder.loadTexts: snNetFlowCollectorTable.setStatus('current')
if mibBuilder.loadTexts: snNetFlowCollectorTable.setDescription('A table of each NetFlow collector information.')
snNetFlowCollectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snNetFlowCollectorIndex"))
if mibBuilder.loadTexts: snNetFlowCollectorEntry.setStatus('current')
if mibBuilder.loadTexts: snNetFlowCollectorEntry.setDescription('A row in the NetFlow collector table.')
snNetFlowCollectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNetFlowCollectorIndex.setStatus('current')
if mibBuilder.loadTexts: snNetFlowCollectorIndex.setDescription('The index to the NetFlow collector table.')
snNetFlowCollectorIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowCollectorIp.setStatus('current')
if mibBuilder.loadTexts: snNetFlowCollectorIp.setDescription('The NetFlow collector ip address.')
snNetFlowCollectorUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowCollectorUdpPort.setStatus('current')
if mibBuilder.loadTexts: snNetFlowCollectorUdpPort.setDescription('The NetFlow collector UDP port number.')
snNetFlowCollectorSourceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 2, 1, 4), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowCollectorSourceInterface.setStatus('current')
if mibBuilder.loadTexts: snNetFlowCollectorSourceInterface.setDescription('The ifIndex value to specify source port to export NetFlow packet. Value 0 to indicate default outgoing port.')
snNetFlowCollectorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowCollectorRowStatus.setStatus('current')
if mibBuilder.loadTexts: snNetFlowCollectorRowStatus.setDescription('To create or delete a NetFlow collector table entry.')
snNetFlowAggregationTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3), )
if mibBuilder.loadTexts: snNetFlowAggregationTable.setStatus('current')
if mibBuilder.loadTexts: snNetFlowAggregationTable.setDescription('A table of each NetFlow aggregation scheme information.')
snNetFlowAggregationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snNetFlowAggregationIndex"))
if mibBuilder.loadTexts: snNetFlowAggregationEntry.setStatus('current')
if mibBuilder.loadTexts: snNetFlowAggregationEntry.setDescription('A row in the NetFlow Aggregation table.')
snNetFlowAggregationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("as", 1), ("protocolPort", 2), ("destPrefix", 3), ("sourcePrefix", 4), ("prefix", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNetFlowAggregationIndex.setStatus('current')
if mibBuilder.loadTexts: snNetFlowAggregationIndex.setDescription('The Aggregation scheme ID')
snNetFlowAggregationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationIp.setStatus('current')
if mibBuilder.loadTexts: snNetFlowAggregationIp.setDescription('The NetFlow aggregation collector ip address.')
snNetFlowAggregationUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationUdpPort.setStatus('current')
if mibBuilder.loadTexts: snNetFlowAggregationUdpPort.setDescription('The NetFlow aggregation collector UDP port number.')
snNetFlowAggregationSourceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 4), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationSourceInterface.setStatus('current')
if mibBuilder.loadTexts: snNetFlowAggregationSourceInterface.setDescription('The ifIndex value to specify source port to export NetFlow aggregation packet. Value 0 to indicate default outgoing port.')
snNetFlowAggregationNumberOfCacheEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationNumberOfCacheEntries.setStatus('current')
if mibBuilder.loadTexts: snNetFlowAggregationNumberOfCacheEntries.setDescription('Number of cache entries for aggregation scheme')
snNetFlowAggregationActiveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationActiveTimeout.setStatus('current')
if mibBuilder.loadTexts: snNetFlowAggregationActiveTimeout.setDescription('Maximum time an active flow can be in the aggregation cache')
snNetFlowAggregationInactiveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationInactiveTimeout.setStatus('current')
if mibBuilder.loadTexts: snNetFlowAggregationInactiveTimeout.setDescription('Maximum time an inactive flow can be in the aggregation cache')
snNetFlowAggregationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationEnable.setStatus('current')
if mibBuilder.loadTexts: snNetFlowAggregationEnable.setDescription('Enable/disable NetFlow aggregation for this aggregation scheme.')
snNetFlowAggregationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowAggregationRowStatus.setStatus('current')
if mibBuilder.loadTexts: snNetFlowAggregationRowStatus.setDescription('To create or delete a NetFlow collector table entry.')
snNetFlowIfTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 4), )
if mibBuilder.loadTexts: snNetFlowIfTable.setStatus('current')
if mibBuilder.loadTexts: snNetFlowIfTable.setDescription('A list of interface entries. The number of entries is given by the value of ifNumber.')
snNetFlowIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snNetFlowIfIndex"))
if mibBuilder.loadTexts: snNetFlowIfEntry.setStatus('current')
if mibBuilder.loadTexts: snNetFlowIfEntry.setDescription('Entry containing the type of switching performed on that interface.')
snNetFlowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 4, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNetFlowIfIndex.setStatus('current')
if mibBuilder.loadTexts: snNetFlowIfIndex.setDescription("A unique value, greater than zero, for each interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface sub-layer must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization.")
snNetFlowIfFlowSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNetFlowIfFlowSwitching.setStatus('current')
if mibBuilder.loadTexts: snNetFlowIfFlowSwitching.setDescription('To enable/disable flow switching in a particular interface: disable (0) - no flow switching enable (1) - flow switching')
snSFlowGlb = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19, 1))
snSflowCollectorTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19, 2), )
if mibBuilder.loadTexts: snSflowCollectorTable.setStatus('current')
if mibBuilder.loadTexts: snSflowCollectorTable.setDescription('Table of all but first sFlow collectors. The first collector can be configured using sFlowTable in RFC 3176. The RFC cannot be used to configure more than one sFlow collectors. This table has been created to fill this gap.')
snSflowCollectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snSflowCollectorIndex"))
if mibBuilder.loadTexts: snSflowCollectorEntry.setStatus('current')
if mibBuilder.loadTexts: snSflowCollectorEntry.setDescription('A row in the sFlow collector table.')
snSflowCollectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSflowCollectorIndex.setStatus('current')
if mibBuilder.loadTexts: snSflowCollectorIndex.setDescription('The index to the sFlow collector table.')
snSflowCollectorIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSflowCollectorIP.setStatus('current')
if mibBuilder.loadTexts: snSflowCollectorIP.setDescription('The sFlow collector ip address.')
snSflowCollectorUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSflowCollectorUDPPort.setStatus('current')
if mibBuilder.loadTexts: snSflowCollectorUDPPort.setDescription('The sFlow collector UDP port number.')
snSflowCollectorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noSuch", 0), ("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSflowCollectorRowStatus.setStatus('current')
if mibBuilder.loadTexts: snSflowCollectorRowStatus.setDescription("To create, update or delete a SFlow collector table entry. If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row other(1)....some other case valid(2)....the row exists and is valid")
snFdpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1))
snFdpInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 1))
snFdpCache = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2))
snFdpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 3))
snFdpCachedAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4))
snFdpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 1, 1), )
if mibBuilder.loadTexts: snFdpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: snFdpInterfaceTable.setDescription("Status of FDP on the device's interfaces.")
snFdpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 1, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snFdpInterfaceIfIndex"))
if mibBuilder.loadTexts: snFdpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: snFdpInterfaceEntry.setDescription('An entry in the snFdpInterfaceTable, having the status of FDP on an interface.')
snFdpInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: snFdpInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: snFdpInterfaceIfIndex.setDescription('ifIndex value of the local interface.')
snFdpInterfaceFdpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdpInterfaceFdpEnable.setStatus('current')
if mibBuilder.loadTexts: snFdpInterfaceFdpEnable.setDescription('The flag, whether the Foundry Discovery Protocol is currently running on this interface. It has no effect when FDP is disabled (snFdpGlobalRun = FALSE).')
snFdpInterfaceCdpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdpInterfaceCdpEnable.setStatus('current')
if mibBuilder.loadTexts: snFdpInterfaceCdpEnable.setDescription('The flag, whether the Cisco Discovery Protocol is currently running on this interface. It has no effect when CDP is disabled (snCdpGlobalRun = FALSE).')
snFdpCacheTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1), )
if mibBuilder.loadTexts: snFdpCacheTable.setStatus('current')
if mibBuilder.loadTexts: snFdpCacheTable.setDescription('The table for the cached information obtained via receiving FDP/CDP messages.')
snFdpCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snFdpCacheIfIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snFdpCacheDeviceIndex"))
if mibBuilder.loadTexts: snFdpCacheEntry.setStatus('current')
if mibBuilder.loadTexts: snFdpCacheEntry.setDescription('An entry in the snFdpCacheTable, having the information received via FDP/CDP on one interface from one device. Entries appear when a FDP/CDP advertisement is received from a neighbor device. Entries disappear when FDP/CDP is disabled on the interface, or globally.')
snFdpCacheIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: snFdpCacheIfIndex.setStatus('current')
if mibBuilder.loadTexts: snFdpCacheIfIndex.setDescription('ifIndex value of the local interface.')
snFdpCacheDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: snFdpCacheDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: snFdpCacheDeviceIndex.setDescription('Identification of a device, which sent FDP/CDP messages')
snFdpCacheDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheDeviceId.setStatus('current')
if mibBuilder.loadTexts: snFdpCacheDeviceId.setDescription('The Device-ID string as reported in the most recent FDP/CDP message. The zero-length string indicates no Device-ID field (TLV) was reported in the most recent FDP/CDP message.')
snFdpCacheAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("appletalk", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheAddressType.setStatus('current')
if mibBuilder.loadTexts: snFdpCacheAddressType.setDescription('An indication of the type of address contained in the corresponding instance of snFdpCacheAddress.')
snFdpCacheAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheAddress.setStatus('current')
if mibBuilder.loadTexts: snFdpCacheAddress.setDescription('The (first) network-layer address of the device as reported in the most recent FDP/CDP message in the following format: IP address: 4 octets, ip(1) IPX address: 10 octets, ipx(2) First 4-octet as the network number Second 6-octet as the host number Appletalk address: 3 octets, appletalk(3) First 2-octet as the network number Second 1-octet as the host number')
snFdpCacheVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheVersion.setStatus('current')
if mibBuilder.loadTexts: snFdpCacheVersion.setDescription('Version string as reported in the most recent FDP/CDP message. ')
snFdpCacheDevicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheDevicePort.setStatus('current')
if mibBuilder.loadTexts: snFdpCacheDevicePort.setDescription('The Port-ID string as reported in the most recent FDP/CDP message. This will typically be the value of the ifName object (e.g., Ethernet0). The zero-length string indicates no Port-ID field (TLV) was reported in the most recent FDP/CDP message.')
snFdpCachePlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCachePlatform.setStatus('current')
if mibBuilder.loadTexts: snFdpCachePlatform.setDescription("The Device's Hardware Platform as reported in the most recent FDP/CDP message. The zero-length string indicates that no Platform field (TLV) was reported in the most recent FDP/CDP message.")
snFdpCacheCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheCapabilities.setStatus('current')
if mibBuilder.loadTexts: snFdpCacheCapabilities.setDescription("The Device's Functional Capabilities as reported in the most recent FDP/CDP message. ")
snFdpCacheVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fdp", 1), ("cdp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheVendorId.setStatus('current')
if mibBuilder.loadTexts: snFdpCacheVendorId.setDescription('Indicates the entry received by either FDP or CDP.')
snFdpCacheIsAggregateVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheIsAggregateVlan.setStatus('current')
if mibBuilder.loadTexts: snFdpCacheIsAggregateVlan.setDescription('Neighbor device is in aggregated-vlan.')
snFdpCacheTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheTagType.setStatus('current')
if mibBuilder.loadTexts: snFdpCacheTagType.setDescription('Neighbor device tag-type.')
snFdpCachePortVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCachePortVlanMask.setStatus('current')
if mibBuilder.loadTexts: snFdpCachePortVlanMask.setDescription('Neighbor device port VLAN masks in 512-byte octet string.')
snFdpCachePortTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("untagged", 1), ("tagged", 2), ("dual", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCachePortTagMode.setStatus('current')
if mibBuilder.loadTexts: snFdpCachePortTagMode.setDescription('Neighbor device port tag mode')
snFdpCacheDefaultTrafficeVlanIdForDualMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCacheDefaultTrafficeVlanIdForDualMode.setStatus('current')
if mibBuilder.loadTexts: snFdpCacheDefaultTrafficeVlanIdForDualMode.setDescription('Default traffic vlan id for neighbor device dual-mode port')
snFdpGlobalRun = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdpGlobalRun.setStatus('current')
if mibBuilder.loadTexts: snFdpGlobalRun.setDescription('The flag, whether the Foundry Discovery Protocol is currently running. FDP entries in snFdpCacheTable are deleted when FDP is disabled.')
snFdpGlobalMessageInterval = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 900)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdpGlobalMessageInterval.setStatus('current')
if mibBuilder.loadTexts: snFdpGlobalMessageInterval.setDescription('The interval at which FDP messages are to be generated. The default value is 60 seconds.')
snFdpGlobalHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdpGlobalHoldTime.setStatus('current')
if mibBuilder.loadTexts: snFdpGlobalHoldTime.setDescription('The time for the receiving device holds FDP message. The default value is 180 seconds.')
snFdpGlobalCdpRun = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFdpGlobalCdpRun.setStatus('current')
if mibBuilder.loadTexts: snFdpGlobalCdpRun.setDescription('An indication of whether the Cisco Discovery Protocol is currently running. CDP entries in snFdpCacheTable are deleted when CDP is disabled.')
snFdpCachedAddressTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4, 1), )
if mibBuilder.loadTexts: snFdpCachedAddressTable.setStatus('current')
if mibBuilder.loadTexts: snFdpCachedAddressTable.setDescription('Cached address table from receiving FDP/CDP messages.')
snFdpCachedAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snFdpCachedAddrIfIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snFdpCachedAddrDeviceIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snFdpCachedAddrDeviceAddrEntryIndex"))
if mibBuilder.loadTexts: snFdpCachedAddressEntry.setStatus('current')
if mibBuilder.loadTexts: snFdpCachedAddressEntry.setDescription('An entry (conceptual row) in the snFdpCacheAddressTable, containing one cached address from FDP/CDP messages.')
snFdpCachedAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: snFdpCachedAddrIfIndex.setStatus('current')
if mibBuilder.loadTexts: snFdpCachedAddrIfIndex.setDescription('The ifIndex value of the local interface.')
snFdpCachedAddrDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: snFdpCachedAddrDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: snFdpCachedAddrDeviceIndex.setDescription('A unique vlaue for each device from which FDP/CDP messages are being received.')
snFdpCachedAddrDeviceAddrEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: snFdpCachedAddrDeviceAddrEntryIndex.setStatus('current')
if mibBuilder.loadTexts: snFdpCachedAddrDeviceAddrEntryIndex.setDescription('A unique vlaue for address entry in device from which FDP/CDP messages are being received.')
snFdpCachedAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("appletalk", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCachedAddrType.setStatus('current')
if mibBuilder.loadTexts: snFdpCachedAddrType.setDescription('An indication of the type of address contained in the corresponding instance of snFdpCacheAddrValue.')
snFdpCachedAddrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFdpCachedAddrValue.setStatus('current')
if mibBuilder.loadTexts: snFdpCachedAddrValue.setDescription('The network-layer address of the device SNMP-agent as reported in the most recent FDP/CDP message in the following format: IP address: 4 octets, ip(1) IPX address: 10 octets, ipx(2) First 4-octet as the network number Second 6-octet as the host number Appletalk address: 3 octets, appletalk(3) First 2-octet as the network number Second 1-octet as the host number')
snMacSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1))
snPortMacSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1))
snPortMacGlobalSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 2))
snPortMacSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1), )
if mibBuilder.loadTexts: snPortMacSecurityTable.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityTable.setDescription("Status of port MAC security on the device's interfaces.")
snPortMacSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityIfIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityResource"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityQueryIndex"))
if mibBuilder.loadTexts: snPortMacSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityEntry.setDescription('An entry in the snPortMacSecurityTable')
snPortMacSecurityIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityIfIndex.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityIfIndex.setDescription('ifIndex value of the local Ethernet interface on which MAC security is configured.')
snPortMacSecurityResource = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("shared", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityResource.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityResource.setDescription('The MAC address was secured using local or shared resources.')
snPortMacSecurityQueryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityQueryIndex.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityQueryIndex.setDescription('Entry index within the given resource of local Ethernet interface on which MAC security is configured.')
snPortMacSecurityMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityMAC.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityMAC.setDescription('The secure MAC address for this interface.')
snPortMacSecurityAgeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityAgeLeft.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityAgeLeft.setDescription('The number of minutes the MAC address will remain secure before being aged out. 0 means no aging.')
snPortMacSecurityShutdownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityShutdownStatus.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityShutdownStatus.setDescription('Interface up/down status.')
snPortMacSecurityShutdownTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityShutdownTimeLeft.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityShutdownTimeLeft.setDescription('If snPortMacSecurityShutdownStatus is up(1), this value will be 0. If snPortMacSecurityShutdownStatus is down(2), this gives the number of seconds before this interface is enabled again. In the later case, 0 means interface is permanently down.')
snPortMacSecurityVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityVlanId.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityVlanId.setDescription('The vlan membership of this interface.')
snPortMacSecurityModuleStatTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 2), )
if mibBuilder.loadTexts: snPortMacSecurityModuleStatTable.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityModuleStatTable.setDescription('Port MAC security statistics on each module.')
snPortMacSecurityModuleStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityModuleStatSlotNum"))
if mibBuilder.loadTexts: snPortMacSecurityModuleStatEntry.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityModuleStatEntry.setDescription('An entry in the snPortMacSecurityModuleStatTable')
snPortMacSecurityModuleStatSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityModuleStatSlotNum.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityModuleStatSlotNum.setDescription('The slot number of the port security device module.')
snPortMacSecurityModuleStatTotalSecurityPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityModuleStatTotalSecurityPorts.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityModuleStatTotalSecurityPorts.setDescription('The totol number of Ethernet interfaces on which MAC security is configured in this module.')
snPortMacSecurityModuleStatTotalMACs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityModuleStatTotalMACs.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityModuleStatTotalMACs.setDescription('The totol number of port MAC security MAC addresses are learned or configured in this module.')
snPortMacSecurityModuleStatViolationCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityModuleStatViolationCounts.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityModuleStatViolationCounts.setDescription('The totol number of counts of violation are collected in this module.')
snPortMacSecurityModuleStatTotalShutdownPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityModuleStatTotalShutdownPorts.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityModuleStatTotalShutdownPorts.setDescription('The totol number of Ethernet interfaces are shutted down due to security violation in this module.')
snPortMacSecurityIntfContentTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3), )
if mibBuilder.loadTexts: snPortMacSecurityIntfContentTable.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityIntfContentTable.setDescription('Port MAC security statistics on each Ethernet Interface.')
snPortMacSecurityIntfContentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityIntfContentIfIndex"))
if mibBuilder.loadTexts: snPortMacSecurityIntfContentEntry.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityIntfContentEntry.setDescription('An entry in the snPortMacSecurityIntfContentTable')
snPortMacSecurityIntfContentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: snPortMacSecurityIntfContentIfIndex.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityIntfContentIfIndex.setDescription('In order to identify a particular interface, this object shall identify the instance of the ifIndex object, defined in RFC 2863.')
snPortMacSecurityIntfContentSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMacSecurityIntfContentSecurity.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityIntfContentSecurity.setDescription('Port security for this interface can be either disabled or enabled.')
snPortMacSecurityIntfContentViolationType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("shutdown", 0), ("restrict", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMacSecurityIntfContentViolationType.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityIntfContentViolationType.setDescription('Port security violation type for this interface is shutdown or restrict.')
snPortMacSecurityIntfContentShutdownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMacSecurityIntfContentShutdownTime.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityIntfContentShutdownTime.setDescription('If snPortMacSecurityIntfContentViolationType is shutdown(1), this value gives the number of seconds this interface is shut down when violation occurs. In the shutdown(1) case, 0 means interface is permanently down. If snPortMacSecurityIntfContentViolationType is restrict(2), this value will be always 0.')
snPortMacSecurityIntfContentShutdownTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityIntfContentShutdownTimeLeft.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityIntfContentShutdownTimeLeft.setDescription('If snPortMacSecurityIntfContentViolationType is shutdown(1), whether this interface has been shut down due to a security violation and the value gives the number of seconds before this interface is enabled again. If snPortMacSecurityIntfContentViolationType is restrict(2), this value will be always 0.')
snPortMacSecurityIntfContentAgeOutTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMacSecurityIntfContentAgeOutTime.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityIntfContentAgeOutTime.setDescription('The amount of time, in minutes, MAC addresses learned on this interface will remain secure. It allows configurable values 0-1440. 0 means no aging permanently.')
snPortMacSecurityIntfContentMaxLockedMacAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMacSecurityIntfContentMaxLockedMacAllowed.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityIntfContentMaxLockedMacAllowed.setDescription('Maximum number of security MAC addresses can be locked to this interface.')
snPortMacSecurityIntfContentTotalMACs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityIntfContentTotalMACs.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityIntfContentTotalMACs.setDescription('The totol number of port MAC security MAC addresses are locked in this interface.')
snPortMacSecurityIntfContentViolationCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityIntfContentViolationCounts.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityIntfContentViolationCounts.setDescription('The totol number of counts of violation are collected in this interface.')
snPortMacSecurityIntfMacTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 4), )
if mibBuilder.loadTexts: snPortMacSecurityIntfMacTable.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityIntfMacTable.setDescription("Status of port MAC security on the device's interfaces.")
snPortMacSecurityIntfMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityIntfMacIfIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityIntfMacAddress"))
if mibBuilder.loadTexts: snPortMacSecurityIntfMacEntry.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityIntfMacEntry.setDescription('An entry in the snPortMacSecurityIntfMacTable')
snPortMacSecurityIntfMacIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityIntfMacIfIndex.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityIntfMacIfIndex.setDescription('ifIndex value of the local Ethernet interface on which MAC security is configured.')
snPortMacSecurityIntfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityIntfMacAddress.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityIntfMacAddress.setDescription('The secure MAC address for this local Ethernet interface on which the secure MAC Address is configured and/or learned. The maximum number of the secure MAC Addresses is restricted by the snPortMacSecurityIntfContentMaxLockedMacAllowed.')
snPortMacSecurityIntfMacVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMacSecurityIntfMacVlanId.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityIntfMacVlanId.setDescription("The vlan membership of this interface, zero means don't care.")
snPortMacSecurityIntfMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMacSecurityIntfMacRowStatus.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityIntfMacRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row other(1)....some other case valid(2)....the row exists and is valid")
snPortMacSecurityAutosaveMacTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 5), )
if mibBuilder.loadTexts: snPortMacSecurityAutosaveMacTable.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityAutosaveMacTable.setDescription("Autosave MAC addresses of port MAC security on the device's interfaces.")
snPortMacSecurityAutosaveMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 5, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityAutosaveMacIfIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityAutosaveMacResource"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityAutosaveMacQueryIndex"))
if mibBuilder.loadTexts: snPortMacSecurityAutosaveMacEntry.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityAutosaveMacEntry.setDescription('An entry in the snPortMacSecurityAutosaveMacTable')
snPortMacSecurityAutosaveMacIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityAutosaveMacIfIndex.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityAutosaveMacIfIndex.setDescription('ifIndex value of the local Ethernet interface on which MAC security is configured.')
snPortMacSecurityAutosaveMacResource = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("shared", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityAutosaveMacResource.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityAutosaveMacResource.setDescription('The MAC address was autosaved using local or shared resources.')
snPortMacSecurityAutosaveMacQueryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityAutosaveMacQueryIndex.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityAutosaveMacQueryIndex.setDescription('Entry index within the given resource of local Ethernet interface on which MAC security is autosaved.')
snPortMacSecurityAutosaveMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 5, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPortMacSecurityAutosaveMacAddress.setStatus('current')
if mibBuilder.loadTexts: snPortMacSecurityAutosaveMacAddress.setDescription('The secure MAC address for this local Ethernet interface on which the secure MAC Address is autosaved.')
snPortMacGlobalSecurityFeature = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMacGlobalSecurityFeature.setStatus('current')
if mibBuilder.loadTexts: snPortMacGlobalSecurityFeature.setDescription('Port security for this device can be either disabled or enabled.')
snPortMacGlobalSecurityAgeOutTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMacGlobalSecurityAgeOutTime.setStatus('current')
if mibBuilder.loadTexts: snPortMacGlobalSecurityAgeOutTime.setDescription('The amount of time, in minutes, MAC addresses learned on this device will remain secure. It allows configurable values in the range of 0-1440. 0 means no aging permanently.')
snPortMacGlobalSecurityAutosave = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 2, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMacGlobalSecurityAutosave.setStatus('current')
if mibBuilder.loadTexts: snPortMacGlobalSecurityAutosave.setDescription('The port security autosave value for this device. It allows configurable values 0 and also in the range of 15-1440. The value 0 means no autosave.')
snPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 25, 1), )
if mibBuilder.loadTexts: snPortMonitorTable.setStatus('current')
if mibBuilder.loadTexts: snPortMonitorTable.setDescription("Status of port monitoring on the device's interfaces.")
snPortMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 25, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMonitorIfIndex"))
if mibBuilder.loadTexts: snPortMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: snPortMonitorEntry.setDescription('An entry in the snPortMonitorTable')
snPortMonitorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 25, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: snPortMonitorIfIndex.setStatus('current')
if mibBuilder.loadTexts: snPortMonitorIfIndex.setDescription('ifIndex value of the local interface on which monitoring is configuerd.')
snPortMonitorMirrorList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 25, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortMonitorMirrorList.setStatus('current')
if mibBuilder.loadTexts: snPortMonitorMirrorList.setDescription("Lists the monitoring configuration of this port. The value is a space delimited sequence of ifIndex of mirror port and monitor mode. The values for mode can be - 0 - off, 1 - input, 2 - output, 3 - both Eg. '65 2 66 1' means send the output traffic to port 2/1 and input traffic to port 2/2. To turn off a mirror use monitor mode of 0 (off) in the list.")
mibBuilder.exportSymbols("FOUNDRY-SN-SWITCH-GROUP-MIB", snTrunkEntry=snTrunkEntry, snVLanByPortPortMask=snVLanByPortPortMask, snVLanByPortStpProtocolSpecification=snVLanByPortStpProtocolSpecification, snAccountingExec=snAccountingExec, snVLanByPortMemberVLanId=snVLanByPortMemberVLanId, snTacacsKey=snTacacsKey, snVLanByPortBaseType=snVLanByPortBaseType, brcdVlanExtStatsOutPkts=brcdVlanExtStatsOutPkts, snNetFlowCollectorRowStatus=snNetFlowCollectorRowStatus, snVLanByATCableVLanName=snVLanByATCableVLanName, snNTP=snNTP, snRadiusEnableMethod=snRadiusEnableMethod, snVLanByATCableStaticPortList=snVLanByATCableStaticPortList, brcdVlanExtStatsOutSwitchedPkts=brcdVlanExtStatsOutSwitchedPkts, snIfStpPortRole=snIfStpPortRole, brcdVlanExtStatsIfIndex=brcdVlanExtStatsIfIndex, snSwPortStatsRxColliFrames=snSwPortStatsRxColliFrames, snDnsDomainName=snDnsDomainName, snIfStpPortNum=snIfStpPortNum, snSwIfStatsOutPktsPerSec=snSwIfStatsOutPktsPerSec, snIfRstpConfigBPDUReceived=snIfRstpConfigBPDUReceived, snNTPServerVersion=snNTPServerVersion, snPortStpPortAdminPointToPoint=snPortStpPortAdminPointToPoint, snSwIfInfoMonitorMode=snSwIfInfoMonitorMode, snArpInfo=snArpInfo, snVLanByIpSubnetRowStatus=snVLanByIpSubnetRowStatus, snNetFlowAggregationEntry=snNetFlowAggregationEntry, BrcdVlanIdTC=BrcdVlanIdTC, snIfMediaPartNumber=snIfMediaPartNumber, snEthernetInterface=snEthernetInterface, snInterfaceLookup2Entry=snInterfaceLookup2Entry, snSSH=snSSH, snSubInterface=snSubInterface, snNTPGeneral=snNTPGeneral, snSwIfMacLearningDisable=snSwIfMacLearningDisable, snMacFilterRowStatus=snMacFilterRowStatus, snTrunkType=snTrunkType, snVLanByPortMemberTagMode=snVLanByPortMemberTagMode, snSwIfPresent=snSwIfPresent, snNetFlowGblInactiveTimeout=snNetFlowGblInactiveTimeout, snIfOpticalMonitoringTemperature=snIfOpticalMonitoringTemperature, snMSTrunkPortIndex=snMSTrunkPortIndex, snVLanByPortCfgStpGroupHelloTime=snVLanByPortCfgStpGroupHelloTime, snSwIfStatsInKiloBitsPerSec=snSwIfStatsInKiloBitsPerSec, FdryVlanIdOrNoneTC=FdryVlanIdOrNoneTC, snVLanByIpxNetDynamicMask=snVLanByIpxNetDynamicMask, brcdVlanExtStatsTable=brcdVlanExtStatsTable, snSwInfo=snSwInfo, snTrunkPortMask=snTrunkPortMask, snFdpGlobalRun=snFdpGlobalRun, snSwIfStatsInUtilization=snSwIfStatsInUtilization, snFdpInterfaceCdpEnable=snFdpInterfaceCdpEnable, snPortStpPortProtocolMigration=snPortStpPortProtocolMigration, snSwViolatorPortNumber=snSwViolatorPortNumber, snPortMacSecurityModuleStatSlotNum=snPortMacSecurityModuleStatSlotNum, snVLanByProtocolRouterIntf=snVLanByProtocolRouterIntf, snSwPortInfoSpeed=snSwPortInfoSpeed, snSwIfGBICStatus=snSwIfGBICStatus, snFdbStationAddr=snFdbStationAddr, snVLanByPortBaseBridgeAddress=snVLanByPortBaseBridgeAddress, snVsrp=snVsrp, snVLanByATCableRowStatus=snVLanByATCableRowStatus, snMSTrunkIfList=snMSTrunkIfList, snFdpCacheIfIndex=snFdpCacheIfIndex, brcdIfEgressCounterInfoEntry=brcdIfEgressCounterInfoEntry, brcdIfEgressCounterQueueId=brcdIfEgressCounterQueueId, snSwIfStatsInFrames=snSwIfStatsInFrames, snPortMacSecurityAutosaveMacQueryIndex=snPortMacSecurityAutosaveMacQueryIndex, snSwPortStatsOutFrames=snSwPortStatsOutFrames, snTacacsGeneral=snTacacsGeneral, snSwPortFastSpanUplinkEnable=snSwPortFastSpanUplinkEnable, snMgmtEthernetInterface=snMgmtEthernetInterface, snRadiusEnableTelnetAuth=snRadiusEnableTelnetAuth, snVLanByPortStpGroupForwardDelay=snVLanByPortStpGroupForwardDelay, snIfIndexLookupIfIndex=snIfIndexLookupIfIndex, snVLanByPortCfgStpProtocolSpecification=snVLanByPortCfgStpProtocolSpecification, snSwIfStatsOutBcastFrames=snSwIfStatsOutBcastFrames, snTacacsServerEntry=snTacacsServerEntry, snNetFlowIfFlowSwitching=snNetFlowIfFlowSwitching, snPortMacSecurityIntfContentAgeOutTime=snPortMacSecurityIntfContentAgeOutTime, snSwSingleStpMode=snSwSingleStpMode, fdryDns2MIB=fdryDns2MIB, snMSTrunkIfIndex=snMSTrunkIfIndex, snVLanByProtocolDynamicPortList=snVLanByProtocolDynamicPortList, snSwPortInfoMirrorMode=snSwPortInfoMirrorMode, snSwBroadcastLimit=snSwBroadcastLimit, snNetFlowAggregationTable=snNetFlowAggregationTable, snSwPortStatsOutBcastFrames=snSwPortStatsOutBcastFrames, snPortStpPortNum=snPortStpPortNum, snFdpCacheDeviceIndex=snFdpCacheDeviceIndex, snVLanByIpSubnetChassisExcludeMask=snVLanByIpSubnetChassisExcludeMask, snMSTrunkRowStatus=snMSTrunkRowStatus, snNetFlow=snNetFlow, snSwIfLoadInterval=snSwIfLoadInterval, snNetFlowGblVersion=snNetFlowGblVersion, snDhcpGatewayListId=snDhcpGatewayListId, snPortMacSecurityIntfMacEntry=snPortMacSecurityIntfMacEntry, snMacFilterEntry=snMacFilterEntry, snSwIfStatsFrameTooLongs=snSwIfStatsFrameTooLongs, snSwPortInfoConnectorType=snSwPortInfoConnectorType, snIfOpticalMonitoringTxBiasCurrent=snIfOpticalMonitoringTxBiasCurrent, snPortStpPortDesignatedRoot=snPortStpPortDesignatedRoot, snMacStationVLanId=snMacStationVLanId, snSwPortStatsOutMcastFrames=snSwPortStatsOutMcastFrames, snDosAttackSYNBlockCount=snDosAttackSYNBlockCount, snFdpCacheAddress=snFdpCacheAddress, snSwPortStatsMultiColliFrames=snSwPortStatsMultiColliFrames, snMetroRing=snMetroRing, snSwPortDhcpGateListId=snSwPortDhcpGateListId, snDosAttackPort=snDosAttackPort, snFdpCachedAddrType=snFdpCachedAddrType, snFdpCachedAddressEntry=snFdpCachedAddressEntry, snVLanByPortStpGroupMaxAge=snVLanByPortStpGroupMaxAge, snPortStpPortAdminRstp=snPortStpPortAdminRstp, snSflowCollectorIndex=snSflowCollectorIndex, snVLanByProtocolRowStatus=snVLanByProtocolRowStatus, snIfStpBPDUReceived=snIfStpBPDUReceived, snVLanByPortMemberEntry=snVLanByPortMemberEntry, snFdpCachedAddr=snFdpCachedAddr, snRadiusRetransmit=snRadiusRetransmit, fdryMacVlanMIB=fdryMacVlanMIB, snSwIfFastSpanPortEnable=snSwIfFastSpanPortEnable, brcdVlanExtStatsInSwitchedOctets=brcdVlanExtStatsInSwitchedOctets, snFdbRowStatus=snFdbRowStatus, snQosBindPriority=snQosBindPriority, snPortStpPortPriority=snPortStpPortPriority, snVLanByIpxNetEntry=snVLanByIpxNetEntry, snSwPortInfoGigType=snSwPortInfoGigType, snTacacs=snTacacs, snSwPortStpPortEnable=snSwPortStpPortEnable, snTacacsSNMPAccess=snTacacsSNMPAccess, snPortMonitorMirrorList=snPortMonitorMirrorList, snVLanByIpxNetExcludeMask=snVLanByIpxNetExcludeMask, snSwMaxMacFilterPerSystem=snSwMaxMacFilterPerSystem, snSwIfFastSpanUplinkEnable=snSwIfFastSpanUplinkEnable, snPortStpPortEnable=snPortStpPortEnable, snMacAuth=snMacAuth, snFdbStationEntrySize=snFdbStationEntrySize, snSwPortInfoFlowControl=snSwPortInfoFlowControl, snVLanByProtocolVLanName=snVLanByProtocolVLanName, snSwPortStatsMacStations=snSwPortStatsMacStations, snSwPortInfoMonitorMode=snSwPortInfoMonitorMode, snPortMacSecurityAgeLeft=snPortMacSecurityAgeLeft, snVLanByPortCfgBaseNumPorts=snVLanByPortCfgBaseNumPorts, PhysAddress=PhysAddress, snAAA=snAAA, snSwIfInfoFlowControl=snSwIfInfoFlowControl, PortPriorityTC=PortPriorityTC, snAtmInterface=snAtmInterface, snVLanByPortCfgStpMaxAge=snVLanByPortCfgStpMaxAge, snPortMacSecurityIntfContentShutdownTime=snPortMacSecurityIntfContentShutdownTime, snInterfaceLookup2IfIndex=snInterfaceLookup2IfIndex, snVLanByProtocolVLanId=snVLanByProtocolVLanId, snQosBindEntry=snQosBindEntry, snTacacsTimeOut=snTacacsTimeOut, snFdpCacheTable=snFdpCacheTable, snVLanByPortCfgQos=snVLanByPortCfgQos, snTacacsServerUsage=snTacacsServerUsage, snMacFilterPortAccessEntry=snMacFilterPortAccessEntry, snNTPServerEntry=snNTPServerEntry, snPortMacSecurityAutosaveMacIfIndex=snPortMacSecurityAutosaveMacIfIndex, snIfStpOperPathCost=snIfStpOperPathCost, snRadiusServerAuthPort=snRadiusServerAuthPort, snSwIfStatsInJumboFrames=snSwIfStatsInJumboFrames, snPortMacGlobalSecurity=snPortMacGlobalSecurity, snSwIfStatsMultiColliFrames=snSwIfStatsMultiColliFrames, snMacFilterIfAccessTable=snMacFilterIfAccessTable, snSwPortGBICStatus=snSwPortGBICStatus, snNetFlowGlb=snNetFlowGlb, snIfStpVLanId=snIfStpVLanId, snSwPortCacheGroupId=snSwPortCacheGroupId, brcdIfEgressCounterPkts=brcdIfEgressCounterPkts, snVLanByIpxNetDynamicPortList=snVLanByIpxNetDynamicPortList, snFdpInterfaceTable=snFdpInterfaceTable, snFdpCachePortVlanMask=snFdpCachePortVlanMask, snFdpCache=snFdpCache, snMacFilterTable=snMacFilterTable, snVLanGroupVlanCurEntry=snVLanGroupVlanCurEntry, snSwIfVlanId=snSwIfVlanId, snInterfaceLookupInterfaceId=snInterfaceLookupInterfaceId, snIfOpticalLaneMonitoringEntry=snIfOpticalLaneMonitoringEntry, snQosProfileTable=snQosProfileTable, snTrunkIndex=snTrunkIndex, snVLanByProtocolDynamicMask=snVLanByProtocolDynamicMask, snVLanCAR=snVLanCAR, brcdSPXMIB=brcdSPXMIB, snVLanByPortStpMaxAge=snVLanByPortStpMaxAge, snVLanByIpxNetDynamic=snVLanByIpxNetDynamic, snPortMacSecurityIntfContentTotalMACs=snPortMacSecurityIntfContentTotalMACs, brcdRouteMap=brcdRouteMap, snIfStpPortDesignatedBridge=snIfStpPortDesignatedBridge, snSwViolatorMacAddress=snSwViolatorMacAddress, snVLanByIpxNetNetworkNum=snVLanByIpxNetNetworkNum, snPortMacSecurityModuleStatTotalShutdownPorts=snPortMacSecurityModuleStatTotalShutdownPorts, snSwIfInOctets=snSwIfInOctets, snIfStpPortProtocolMigration=snIfStpPortProtocolMigration, snTacacsServerTable=snTacacsServerTable, snVLanByIpSubnetRouterIntf=snVLanByIpSubnetRouterIntf, snNetFlowCollectorEntry=snNetFlowCollectorEntry, snIfOpticalLaneMonitoringRxPower=snIfOpticalLaneMonitoringRxPower, snTacacsServerRowStatus=snTacacsServerRowStatus, snPortMacSecurityAutosaveMacResource=snPortMacSecurityAutosaveMacResource, snVLanByPortEntrySize=snVLanByPortEntrySize, snRadiusWebServerMethod=snRadiusWebServerMethod, snSwPortStatsInBitsPerSec=snSwPortStatsInBitsPerSec, snVLanByIpxNetVLanId=snVLanByIpxNetVLanId, snIfOpticalMonitoringInfoEntry=snIfOpticalMonitoringInfoEntry, snPortMacSecurityIntfContentMaxLockedMacAllowed=snPortMacSecurityIntfContentMaxLockedMacAllowed, snIfOpticalLaneMonitoringTable=snIfOpticalLaneMonitoringTable, snVLanByPortVLanName=snVLanByPortVLanName, snNTPServerRowStatus=snNTPServerRowStatus, snVLanByATCableIndex=snVLanByATCableIndex, snPortStpPortForwardTransitions=snPortStpPortForwardTransitions, snDosAttackGlobal=snDosAttackGlobal, snDnsGatewayIpAddrList=snDnsGatewayIpAddrList, snVLanGroupSetAllVLan=snVLanGroupSetAllVLan, snQosProfileRequestedBandwidth=snQosProfileRequestedBandwidth, snVLanByPortStpRootPort=snVLanByPortStpRootPort, snNetFlowGblProtocolDisable=snNetFlowGblProtocolDisable, snMacFilterIfAccessRowStatus=snMacFilterIfAccessRowStatus, snPortStpEntry=snPortStpEntry, snSwIfInfoTable=snSwIfInfoTable, snAccountingSystem=snAccountingSystem, snTrunkInfo=snTrunkInfo, snFdbStationType=snFdbStationType, snAuthentication=snAuthentication, snFdbTable=snFdbTable, snSwPortInfo=snSwPortInfo, snIfIndexLookup2Entry=snIfIndexLookup2Entry, snDosAttackSYNDropCount=snDosAttackSYNDropCount, snPvcInterface=snPvcInterface, snPortMacSecurityIntfContentViolationType=snPortMacSecurityIntfContentViolationType, snVLanByIpSubnetMaxSubnets=snVLanByIpSubnetMaxSubnets, snQosProfileCalculatedBandwidth=snQosProfileCalculatedBandwidth, brcdIfEgressCounterType=brcdIfEgressCounterType, snRadiusServerTable=snRadiusServerTable, snDosAttackICMPDropCount=snDosAttackICMPDropCount, snPortMacSecurityVlanId=snPortMacSecurityVlanId, snPortStpPortDesignatedCost=snPortStpPortDesignatedCost, snSwBroadcastLimit2=snSwBroadcastLimit2, snPortMacSecurityIntfContentIfIndex=snPortMacSecurityIntfContentIfIndex, snFdpCacheAddressType=snFdpCacheAddressType, snRadiusServerEntry=snRadiusServerEntry, snRadiusSNMPServerMethod=snRadiusSNMPServerMethod, snFdpGlobalHoldTime=snFdpGlobalHoldTime, snRadiusServerRowStatus=snRadiusServerRowStatus, snIfOpticalMonitoringInfoTable=snIfOpticalMonitoringInfoTable, snAuthorizationCommandLevel=snAuthorizationCommandLevel, snSwIfStatsLinkChange=snSwIfStatsLinkChange, snVLanByPortCfgStpPriority=snVLanByPortCfgStpPriority, snInterfaceLookup2InterfaceId=snInterfaceLookup2InterfaceId, snSwSummaryMode=snSwSummaryMode, snGreTunnelInterface=snGreTunnelInterface, snMSTrunkIfRowStatus=snMSTrunkIfRowStatus)
mibBuilder.exportSymbols("FOUNDRY-SN-SWITCH-GROUP-MIB", snMacFilterSourceMask=snMacFilterSourceMask, snMSTrunkIfEntry=snMSTrunkIfEntry, snFdpCacheVersion=snFdpCacheVersion, snPortMacSecurityMAC=snPortMacSecurityMAC, snVLanByPortCfgStpVersion=snVLanByPortCfgStpVersion, snIfIndexLookup2InterfaceId=snIfIndexLookup2InterfaceId, snVirtualInterface=snVirtualInterface, snVLanByIpxNetRouterIntf=snVLanByIpxNetRouterIntf, snVLanByPortVLanIndex=snVLanByPortVLanIndex, snVLanByPortStpRootCost=snVLanByPortStpRootCost, snDosAttackPortSYNDropCount=snDosAttackPortSYNDropCount, snVLanByProtocolDynamic=snVLanByProtocolDynamic, brcdVlanExtStatsInPkts=brcdVlanExtStatsInPkts, snSwIfStatsMacStations=snSwIfStatsMacStations, snInterfaceId=snInterfaceId, BrcdVlanIdOrNoneTC=BrcdVlanIdOrNoneTC, snSwEnableBridgeNewRootTrap=snSwEnableBridgeNewRootTrap, snSwIpxL3SwMode=snSwIpxL3SwMode, snFdpCachePlatform=snFdpCachePlatform, snRadiusSNMPAccess=snRadiusSNMPAccess, snSFlowGlb=snSFlowGlb, snSwIfInfoTagType=snSwIfInfoTagType, snFdpCacheCapabilities=snFdpCacheCapabilities, snAuthorization=snAuthorization, snIfStpPortDesignatedPort=snIfStpPortDesignatedPort, snSwPortInLinePowerPriority=snSwPortInLinePowerPriority, snSwPortInOctets=snSwPortInOctets, brcdVlanExtStatsInSwitchedPkts=brcdVlanExtStatsInSwitchedPkts, snAuthorizationExec=snAuthorizationExec, snMplsTunnelInterface=snMplsTunnelInterface, snIfStpBPDUTransmitted=snIfStpBPDUTransmitted, BridgeId=BridgeId, snVLanByPortCfgStpGroupForwardDelay=snVLanByPortCfgStpGroupForwardDelay, snSwPortStatsFrameTooLongs=snSwPortStatsFrameTooLongs, snFdpCachedAddrIfIndex=snFdpCachedAddrIfIndex, snVLanByIpxNetChassisDynamicMask=snVLanByIpxNetChassisDynamicMask, snAccounting=snAccounting, snSwIfStatsFrameTooShorts=snSwIfStatsFrameTooShorts, snPortMacSecurityIntfMacRowStatus=snPortMacSecurityIntfMacRowStatus, snIfMediaVendorName=snIfMediaVendorName, snFdpCacheTagType=snFdpCacheTagType, snTrunkInterface=snTrunkInterface, brcdVlanExtStatsEntry=brcdVlanExtStatsEntry, snVLanByATCableRouterIntf=snVLanByATCableRouterIntf, snNetFlowAggregationSourceInterface=snNetFlowAggregationSourceInterface, snSwIfStatsOutUtilization=snSwIfStatsOutUtilization, snDhcpGatewayListInfo=snDhcpGatewayListInfo, snSwPortInLinePowerControl=snSwPortInLinePowerControl, snSwIfInfoSpeed=snSwIfInfoSpeed, snVLanByIpSubnetExcludePortList=snVLanByIpSubnetExcludePortList, snVLanByPortCfgVLanName=snVLanByPortCfgVLanName, snPortMacSecurityIntfContentTable=snPortMacSecurityIntfContentTable, snSwIfInfoAutoNegotiate=snSwIfInfoAutoNegotiate, VlanTagMode=VlanTagMode, snVLanByIpxNetTable=snVLanByIpxNetTable, snPortMacSecurityIntfContentSecurity=snPortMacSecurityIntfContentSecurity, snVLanByIpSubnetSubnetMask=snVLanByIpSubnetSubnetMask, snDosAttack=snDosAttack, PYSNMP_MODULE_ID=snSwitch, snFdbStationQos=snFdbStationQos, PortMask=PortMask, snPortStpSetAll=snPortStpSetAll, snVLanByIpSubnetStaticMask=snVLanByIpSubnetStaticMask, snSwPortOutOctets=snSwPortOutOctets, snVLanByProtocolExcludePortList=snVLanByProtocolExcludePortList, snSwIpMcastQuerierMode=snSwIpMcastQuerierMode, snVLanByIpSubnetDynamicMask=snVLanByIpSubnetDynamicMask, snSwEnableLockedAddrViolationTrap=snSwEnableLockedAddrViolationTrap, snVLanByPortCfgStpTopChanges=snVLanByPortCfgStpTopChanges, snPortMacSecurityResource=snPortMacSecurityResource, snMacFilterOperator=snMacFilterOperator, snVLanByATCableTable=snVLanByATCableTable, snPortStpInfo=snPortStpInfo, snVLanByPortEntry=snVLanByPortEntry, snFdpCachePortTagMode=snFdpCachePortTagMode, snMacFilterPortAccessPortIndex=snMacFilterPortAccessPortIndex, snFdpMIBObjects=snFdpMIBObjects, fdryDhcpSnoopMIB=fdryDhcpSnoopMIB, snPortMacSecurityShutdownStatus=snPortMacSecurityShutdownStatus, snQosProfileName=snQosProfileName, snPortMacSecurityModuleStatTotalSecurityPorts=snPortMacSecurityModuleStatTotalSecurityPorts, snPortMacSecurityTable=snPortMacSecurityTable, snSflowCollectorTable=snSflowCollectorTable, snSwClearCounters=snSwClearCounters, snTacacsDeadTime=snTacacsDeadTime, snVLanByIpSubnetEntry=snVLanByIpSubnetEntry, snSwEnableBridgeTopoChangeTrap=snSwEnableBridgeTopoChangeTrap, snSwPortTransGroupId=snSwPortTransGroupId, snSwPortInfoPortQos=snSwPortInfoPortQos, snSwIfStatsRxColliFrames=snSwIfStatsRxColliFrames, snTacacsServerRowKey=snTacacsServerRowKey, snCAR=snCAR, snMacFilterFrameTypeNum=snMacFilterFrameTypeNum, snVLanByIpSubnetVLanId=snVLanByIpSubnetVLanId, snDhcpGatewayListRowStatus=snDhcpGatewayListRowStatus, snPosInterface=snPosInterface, snNetFlowAggregationNumberOfCacheEntries=snNetFlowAggregationNumberOfCacheEntries, snNTPSync=snNTPSync, Timeout=Timeout, snSwPortName=snSwPortName, snPortMacSecurity=snPortMacSecurity, snVLanByPortVLanId=snVLanByPortVLanId, snSwPortInLinePowerClass=snSwPortInLinePowerClass, snNTPServerTable=snNTPServerTable, snVLanByIpxNetVLanName=snVLanByIpxNetVLanName, snVLanByProtocolChassisDynamicMask=snVLanByProtocolChassisDynamicMask, snIfStpCfgPathCost=snIfStpCfgPathCost, snIfStpTable=snIfStpTable, fdryIpSrcGuardMIB=fdryIpSrcGuardMIB, snSwIfInfoPhysAddress=snSwIfInfoPhysAddress, snSwPortLoadInterval=snSwPortLoadInterval, snSwProbePortNum=snSwProbePortNum, snFdpGlobalCdpRun=snFdpGlobalCdpRun, snRadiusTimeOut=snRadiusTimeOut, snPortMacSecurityEntry=snPortMacSecurityEntry, snSwDefaultVLanId=snSwDefaultVLanId, snPortMacSecurityIntfContentEntry=snPortMacSecurityIntfContentEntry, snMac=snMac, snSwIfDhcpGateListId=snSwIfDhcpGateListId, snIfIndexLookupEntry=snIfIndexLookupEntry, snPortMacSecurityIntfMacAddress=snPortMacSecurityIntfMacAddress, fdryDaiMIB=fdryDaiMIB, snSwPortStatsOutBitsPerSec=snSwPortStatsOutBitsPerSec, snDhcpGatewayListAddrList=snDhcpGatewayListAddrList, snSwIfInfoAllowAllVlan=snSwIfInfoAllowAllVlan, brcdVlanExtStatsInRoutedOctets=brcdVlanExtStatsInRoutedOctets, snSwPortStatsInKiloBitsPerSec=snSwPortStatsInKiloBitsPerSec, snWireless=snWireless, snNTPPollInterval=snNTPPollInterval, snNTPServerIp=snNTPServerIp, snMSTrunkPortList=snMSTrunkPortList, snMacFilterPortAccessRowStatus=snMacFilterPortAccessRowStatus, snPortMacGlobalSecurityAutosave=snPortMacGlobalSecurityAutosave, brcdVlanExtStatsInRoutedPkts=brcdVlanExtStatsInRoutedPkts, snSwIfLockAddressCount=snSwIfLockAddressCount, snTacacsServerIp=snTacacsServerIp, snRadiusServerUsage=snRadiusServerUsage, snMacFilterSourceMac=snMacFilterSourceMac, snSwIfStatsOutMcastFrames=snSwIfStatsOutMcastFrames, snVLanByIpSubnetChassisDynamicMask=snVLanByIpSubnetChassisDynamicMask, snSwPortStatsInPktsPerSec=snSwPortStatsInPktsPerSec, snIfIndexLookupTable=snIfIndexLookupTable, snSwIfName=snSwIfName, snVLanByIpSubnetDynamicPortList=snVLanByIpSubnetDynamicPortList, snSwPortInfoEntry=snSwPortInfoEntry, snVLanByPortStpHelloTime=snVLanByPortStpHelloTime, brcdVlanExtStatsOutOctets=brcdVlanExtStatsOutOctets, snVLanByATCableChassisStaticMask=snVLanByATCableChassisStaticMask, snSw8021qTagType=snSw8021qTagType, snLoopbackInterface=snLoopbackInterface, snVLanByPortCfgStpRootCost=snVLanByPortCfgStpRootCost, snSwIfInfoL2FowardEnable=snSwIfInfoL2FowardEnable, snSwPortStatsFrameTooShorts=snSwPortStatsFrameTooShorts, brcdVlanExtStatsInOctets=brcdVlanExtStatsInOctets, snFdpInterfaceIfIndex=snFdpInterfaceIfIndex, snVLanByPortStpTimeSinceTopologyChange=snVLanByPortStpTimeSinceTopologyChange, snSwIfOutOctets=snSwIfOutOctets, snVLanByPortMemberPortId=snVLanByPortMemberPortId, snNetFlowCollectorIndex=snNetFlowCollectorIndex, snSwitch=snSwitch, snIfStpPortAdminEdgePort=snIfStpPortAdminEdgePort, snIfOpticalMonitoringRxPower=snIfOpticalMonitoringRxPower, snVLanByIpSubnetExcludeMask=snVLanByIpSubnetExcludeMask, snIfMediaInfoEntry=snIfMediaInfoEntry, snInterfaceLookup2Table=snInterfaceLookup2Table, snFdbTableCurEntry=snFdbTableCurEntry, snVLanByIpxNetFrameType=snVLanByIpxNetFrameType, sn6to4TunnelInterface=sn6to4TunnelInterface, snQosBindProfileIndex=snQosBindProfileIndex, snMSTrunkType=snMSTrunkType, snSwPortStatsInJumboFrames=snSwPortStatsInJumboFrames, snNetFlowCollectorIp=snNetFlowCollectorIp, snSwQosMechanism=snSwQosMechanism, snQosProfileEntry=snQosProfileEntry, snVLanByPortCfgStpGroupMaxAge=snVLanByPortCfgStpGroupMaxAge, snVLanByIpSubnetVLanName=snVLanByIpSubnetVLanName, snFdbEntry=snFdbEntry, snVirtualMgmtInterface=snVirtualMgmtInterface, snFdpInterfaceEntry=snFdpInterfaceEntry, snFdpGlobal=snFdpGlobal, snVLanByProtocolStaticPortList=snVLanByProtocolStaticPortList, snSwIfStatsOutBitsPerSec=snSwIfStatsOutBitsPerSec, snPortStpPortAdminEdgePort=snPortStpPortAdminEdgePort, brcdVlanExtStatsPriorityId=brcdVlanExtStatsPriorityId, snSwFastStpMode=snSwFastStpMode, snMacFilterAction=snMacFilterAction, snPortMacSecurityIntfContentViolationCounts=snPortMacSecurityIntfContentViolationCounts, snFdpInterfaceFdpEnable=snFdpInterfaceFdpEnable, snVLanByPortStpGroupHelloTime=snVLanByPortStpGroupHelloTime, snPortStpPortState=snPortStpPortState, snVLanByProtocolTable=snVLanByProtocolTable, snAccountingCommandLevel=snAccountingCommandLevel, snSw8021qTagMode=snSw8021qTagMode, snSwPortInLinePowerWattage=snSwPortInLinePowerWattage, snNetFlowCollectorTable=snNetFlowCollectorTable, snDosAttackPortSYNBlockCount=snDosAttackPortSYNBlockCount, snSwIfInfoTagMode=snSwIfInfoTagMode, snVLanByPortCfgTable=snVLanByPortCfgTable, snSwIfInfoPortNum=snSwIfInfoPortNum, snNetFlowAggregationRowStatus=snNetFlowAggregationRowStatus, snSSL=snSSL, snSwGroupIpL3SwMode=snSwGroupIpL3SwMode, snVLanByPortCfgBaseBridgeAddress=snVLanByPortCfgBaseBridgeAddress, brcdVlanExtStatsVlanId=brcdVlanExtStatsVlanId, snDhcpGatewayListTable=snDhcpGatewayListTable, brcdIfEgressCounterIfIndex=brcdIfEgressCounterIfIndex, snSwPortInfoAdminStatus=snSwPortInfoAdminStatus, snIfIndexLookupInterfaceId=snIfIndexLookupInterfaceId, snSwPortStatsOutPktsPerSec=snSwPortStatsOutPktsPerSec, snMacFilterIfAccessPortIndex=snMacFilterIfAccessPortIndex, snSwPortInLinePowerConsumed=snSwPortInLinePowerConsumed, snIfOpticalLaneMonitoringTxBiasCurrent=snIfOpticalLaneMonitoringTxBiasCurrent, snIfRstpTCNBPDUTransmitted=snIfRstpTCNBPDUTransmitted, snPortStpEntrySize=snPortStpEntrySize, snIfStpPortDesignatedRoot=snIfStpPortDesignatedRoot, snNetFlowGblActiveTimeout=snNetFlowGblActiveTimeout, snSwGroupSwitchAgeTime=snSwGroupSwitchAgeTime, snSwGlobalStpMode=snSwGlobalStpMode, snFdbStationIf=snFdbStationIf, snNetFlowIfIndex=snNetFlowIfIndex, snMacFilterPortAccessFilters=snMacFilterPortAccessFilters, snSwPortInfoChnMode=snSwPortInfoChnMode, snIfMediaType=snIfMediaType, snTacacsRetransmit=snTacacsRetransmit, snInterfaceLookupIfIndex=snInterfaceLookupIfIndex, snPortStpPortDesignatedBridge=snPortStpPortDesignatedBridge, snVLanByPortRowStatus=snVLanByPortRowStatus, snIfStpPortAdminPointToPoint=snIfStpPortAdminPointToPoint, snFdpCacheVendorId=snFdpCacheVendorId, snSwGroupIpMcastMode=snSwGroupIpMcastMode, snNetFlowCollectorSourceInterface=snNetFlowCollectorSourceInterface, snPortMacSecurityAutosaveMacAddress=snPortMacSecurityAutosaveMacAddress, snFdpCachedAddrValue=snFdpCachedAddrValue, snSwGroupOperMode=snSwGroupOperMode, snPortMacSecurityAutosaveMacEntry=snPortMacSecurityAutosaveMacEntry, snMSTrunkTable=snMSTrunkTable, snSwGlobalAutoNegotiate=snSwGlobalAutoNegotiate, snSwIfInfoNativeMacAddress=snSwIfInfoNativeMacAddress, snDnsInfo=snDnsInfo, snSwGroupDefaultCfgMode=snSwGroupDefaultCfgMode, InterfaceId=InterfaceId, snNetFlowAggregationActiveTimeout=snNetFlowAggregationActiveTimeout, snInterfaceLookupEntry=snInterfaceLookupEntry, snIfOpticalLaneMonitoringTxPower=snIfOpticalLaneMonitoringTxPower, snVLanByATCableVLanId=snVLanByATCableVLanId, snSwIfStatsOutJumboFrames=snSwIfStatsOutJumboFrames, snPortMacSecurityQueryIndex=snPortMacSecurityQueryIndex, snVLanByPortCfgRowStatus=snVLanByPortCfgRowStatus, snFdbStationPort=snFdbStationPort, snPortMacSecurityAutosaveMacTable=snPortMacSecurityAutosaveMacTable, snTacacsServerAuthPort=snTacacsServerAuthPort, snSwEosBufferSize=snSwEosBufferSize, snSwIfStatsOutDiscard=snSwIfStatsOutDiscard, snVLanByProtocolEntry=snVLanByProtocolEntry)
mibBuilder.exportSymbols("FOUNDRY-SN-SWITCH-GROUP-MIB", snSwPortStatsOutUtilization=snSwPortStatsOutUtilization, snPortMacSecurityIfIndex=snPortMacSecurityIfIndex, snVLanByProtocolIndex=snVLanByProtocolIndex, snFdbInfo=snFdbInfo, snNetFlowAggregationIp=snNetFlowAggregationIp, snInterfaceLookupTable=snInterfaceLookupTable, snMacSecurity=snMacSecurity, snNTPSystemClock=snNTPSystemClock, snVLanByATCableEntry=snVLanByATCableEntry, snFdpGlobalMessageInterval=snFdpGlobalMessageInterval, snSwIfInfoGigType=snSwIfInfoGigType, snNetFlowAggregationIndex=snNetFlowAggregationIndex, snDhcpGatewayListEntry=snDhcpGatewayListEntry, snFdpCacheDevicePort=snFdpCacheDevicePort, snQosBindTable=snQosBindTable, snDosAttackPortICMPDropCount=snDosAttackPortICMPDropCount, snVLanByPortCfgInOctets=snVLanByPortCfgInOctets, snMSTrunkEntry=snMSTrunkEntry, snSwPortStatsLinkChange=snSwPortStatsLinkChange, snMacFilterFrameType=snMacFilterFrameType, snIfStpEntry=snIfStpEntry, snQosBindIndex=snQosBindIndex, snIfStpPortState=snIfStpPortState, snIfRstpConfigBPDUTransmitted=snIfRstpConfigBPDUTransmitted, snMacFilterDestMask=snMacFilterDestMask, snMacFilterPortAccessTable=snMacFilterPortAccessTable, snIfIndexLookup2IfIndex=snIfIndexLookup2IfIndex, snIfIndexLookup2Table=snIfIndexLookup2Table, snSwPortInfoLinkStatus=snSwPortInfoLinkStatus, brcdVlanExtStatsOutRoutedPkts=brcdVlanExtStatsOutRoutedPkts, snSwPortDescr=snSwPortDescr, snSwIfStatsOutKiloBitsPerSec=snSwIfStatsOutKiloBitsPerSec, snRadiusServerAcctPort=snRadiusServerAcctPort, snSwPortStatsInMcastFrames=snSwPortStatsInMcastFrames, snVLanByIpSubnetTable=snVLanByIpSubnetTable, snMacFilterIfAccessEntry=snMacFilterIfAccessEntry, snVLanByIpxNetRowStatus=snVLanByIpxNetRowStatus, snVLanByPortOperState=snVLanByPortOperState, snSwPortInfoTable=snSwPortInfoTable, snRadiusServerIp=snRadiusServerIp, snSwPortInLinePowerPDType=snSwPortInLinePowerPDType, snFdbVLanId=snFdbVLanId, snIfOpticalMonitoringTxPower=snIfOpticalMonitoringTxPower, snVLanByIpxNetStaticMask=snVLanByIpxNetStaticMask, snSwPortInfoTagMode=snSwPortInfoTagMode, snVLanByIpxNetChassisStaticMask=snVLanByIpxNetChassisStaticMask, snSwViolatorIfIndex=snSwViolatorIfIndex, snVLanByIpSubnetChassisStaticMask=snVLanByIpSubnetChassisStaticMask, snFdpCachedAddressTable=snFdpCachedAddressTable, snPortStpPortDesignatedPort=snPortStpPortDesignatedPort, snVLanByPortCfgStpHoldTime=snVLanByPortCfgStpHoldTime, fdryLinkAggregationGroupMIB=fdryLinkAggregationGroupMIB, snDosAttackPortTable=snDosAttackPortTable, snFdpCacheDefaultTrafficeVlanIdForDualMode=snFdpCacheDefaultTrafficeVlanIdForDualMode, snVLanByPortPortList=snVLanByPortPortList, snNetFlowIfTable=snNetFlowIfTable, snSwPortEntrySize=snSwPortEntrySize, snVLanByPortCfgVLanId=snVLanByPortCfgVLanId, snSwIfStatsInBitsPerSec=snSwIfStatsInBitsPerSec, snFdpCachedAddrDeviceIndex=snFdpCachedAddrDeviceIndex, snSwPortStatsInFrames=snSwPortStatsInFrames, snSflowCollectorRowStatus=snSflowCollectorRowStatus, brcdIfEgressCounterInfoTable=brcdIfEgressCounterInfoTable, snSwIfStatsFCSErrors=snSwIfStatsFCSErrors, snQosProfileIndex=snQosProfileIndex, snPortMacGlobalSecurityAgeOutTime=snPortMacGlobalSecurityAgeOutTime, snSwPortTagType=snSwPortTagType, snSwIfStpPortEnable=snSwIfStpPortEnable, brcdVlanExtStatsOutRoutedOctets=brcdVlanExtStatsOutRoutedOctets, snSwIfInfoLinkStatus=snSwIfInfoLinkStatus, snNTPSummerTimeEnable=snNTPSummerTimeEnable, snSwIfStatsInPktsPerSec=snSwIfStatsInPktsPerSec, snSFlow=snSFlow, snVLanByPortBaseNumPorts=snVLanByPortBaseNumPorts, snVLanByIpSubnetStaticPortList=snVLanByIpSubnetStaticPortList, snNetFlowCollectorUdpPort=snNetFlowCollectorUdpPort, snPortStpVLanId=snPortStpVLanId, snMacFilterIndex=snMacFilterIndex, snSwIfInfoAdminStatus=snSwIfInfoAdminStatus, snIfStpPortPriority=snIfStpPortPriority, snVLanByPortCfgBaseType=snVLanByPortCfgBaseType, InterfaceId2=InterfaceId2, snVLanByPortStpMode=snVLanByPortStpMode, snVLanByPortCfgStpMode=snVLanByPortCfgStpMode, snVLanGroupVlanMaxEntry=snVLanGroupVlanMaxEntry, snSwPortStatsOutDiscard=snSwPortStatsOutDiscard, snSwPortStatsInBcastFrames=snSwPortStatsInBcastFrames, snPortMacSecurityIntfContentShutdownTimeLeft=snPortMacSecurityIntfContentShutdownTimeLeft, snIfMediaVersion=snIfMediaVersion, snVLanByPortCfgRouterIntf=snVLanByPortCfgRouterIntf, snSwPortStatsInUtilization=snSwPortStatsInUtilization, snNetFlowAggregationEnable=snNetFlowAggregationEnable, snVLanByPortCfgStpDesignatedRoot=snVLanByPortCfgStpDesignatedRoot, snSwIfStatsInMcastFrames=snSwIfStatsInMcastFrames, snPortStpTable=snPortStpTable, snNetFlowGblEnable=snNetFlowGblEnable, snIfStpPortDesignatedCost=snIfStpPortDesignatedCost, snFdbTableStationFlush=snFdbTableStationFlush, snSwPortInfoPhysAddress=snSwPortInfoPhysAddress, snPortMacGlobalSecurityFeature=snPortMacGlobalSecurityFeature, snVLanByProtocolChassisStaticMask=snVLanByProtocolChassisStaticMask, snTrunkTable=snTrunkTable, snVLanByPortCfgStpTimeSinceTopologyChange=snVLanByPortCfgStpTimeSinceTopologyChange, snSwIfStatsOutFrames=snSwIfStatsOutFrames, snSflowCollectorUDPPort=snSflowCollectorUDPPort, snDosAttackPortICMPBlockCount=snDosAttackPortICMPBlockCount, snSwIfStatsInBcastFrames=snSwIfStatsInBcastFrames, snPortMacSecurityModuleStatViolationCounts=snPortMacSecurityModuleStatViolationCounts, snSwPortStatsInDiscard=snSwPortStatsInDiscard, snRadiusDeadTime=snRadiusDeadTime, snStacking=snStacking, snSwIfInfoMirrorPorts=snSwIfInfoMirrorPorts, snVLanByPortStpPriority=snVLanByPortStpPriority, snVLanByPortCfgStpHelloTime=snVLanByPortCfgStpHelloTime, snFdpCacheDeviceId=snFdpCacheDeviceId, snIfStpOperState=snIfStpOperState, snVLanByIpxNetMaxNetworks=snVLanByIpxNetMaxNetworks, snVLanByPortMemberRowStatus=snVLanByPortMemberRowStatus, snSwIfInfoPortQos=snSwIfInfoPortQos, snPortMacSecurityModuleStatEntry=snPortMacSecurityModuleStatEntry, snPortMacSecurityModuleStatTable=snPortMacSecurityModuleStatTable, snVLanByIpxNetExcludePortList=snVLanByIpxNetExcludePortList, snSwSummary=snSwSummary, snFdpInterface=snFdpInterface, snPortMonitorIfIndex=snPortMonitorIfIndex, snVLanByPortCfgTransparentHwFlooding=snVLanByPortCfgTransparentHwFlooding, snPortStpOperState=snPortStpOperState, snDosAttackPortEntry=snDosAttackPortEntry, snVLanInfo=snVLanInfo, snVLanByProtocolChassisExcludeMask=snVLanByProtocolChassisExcludeMask, snSwMaxMacFilterPerPort=snSwMaxMacFilterPerPort, snPortMacSecurityIntfMacVlanId=snPortMacSecurityIntfMacVlanId, snVLanByPortStpTopChanges=snVLanByPortStpTopChanges, snFdpCacheIsAggregateVlan=snFdpCacheIsAggregateVlan, snSwPortStatsOutJumboFrames=snSwPortStatsOutJumboFrames, snMSTrunkIfType=snMSTrunkIfType, snRadiusKey=snRadiusKey, snMacFilter=snMacFilter, snFDP=snFDP, snMacFilterIfAccessFilters=snMacFilterIfAccessFilters, snSwPortStatsOutKiloBitsPerSec=snSwPortStatsOutKiloBitsPerSec, snSwIfStatsInDiscard=snSwIfStatsInDiscard, snSwPortStatsTxColliFrames=snSwPortStatsTxColliFrames, snVLanByPortRouterIntf=snVLanByPortRouterIntf, snSwIfStatsAlignErrors=snSwIfStatsAlignErrors, snRadiusServerRowKey=snRadiusServerRowKey, snPortMacSecurityModuleStatTotalMACs=snPortMacSecurityModuleStatTotalMACs, snVLanByPortChassisPortMask=snVLanByPortChassisPortMask, snPortMacSecurityIntfMacTable=snPortMacSecurityIntfMacTable, snSwIfRouteOnly=snSwIfRouteOnly, snSwIfInfoChnMode=snSwIfInfoChnMode, snSwIfInfoConnectorType=snSwIfInfoConnectorType, snSwIfStatsTxColliFrames=snSwIfStatsTxColliFrames, snIfRstpTCNBPDUReceived=snIfRstpTCNBPDUReceived, snVLanByIpSubnetDynamic=snVLanByIpSubnetDynamic, snSwPortInfoAutoNegotiate=snSwPortInfoAutoNegotiate, snSwPortVlanId=snSwPortVlanId, snIfMediaInfoTable=snIfMediaInfoTable, snRadiusGeneral=snRadiusGeneral, snVLanByIpSubnetIpAddress=snVLanByIpSubnetIpAddress, snVLanByProtocolExcludeMask=snVLanByProtocolExcludeMask, snSflowCollectorEntry=snSflowCollectorEntry, snVLanByPortTable=snVLanByPortTable, snSwPortIfIndex=snSwPortIfIndex, snVLanByIpxNetStaticPortList=snVLanByIpxNetStaticPortList, snPortStpPathCost=snPortStpPathCost, snVLanByPortStpDesignatedRoot=snVLanByPortStpDesignatedRoot, snPortMacSecurityShutdownTimeLeft=snPortMacSecurityShutdownTimeLeft, snMacFilterDestMac=snMacFilterDestMac, snNetFlowAggregationUdpPort=snNetFlowAggregationUdpPort, snVLanByPortMemberTable=snVLanByPortMemberTable, PortQosTC=PortQosTC, snVLanByPortStpForwardDelay=snVLanByPortStpForwardDelay, snDosAttackICMPBlockCount=snDosAttackICMPBlockCount, snVLanByProtocolStaticMask=snVLanByProtocolStaticMask, snVLanByPortCfgStpRootPort=snVLanByPortCfgStpRootPort, snSwPortStatsAlignErrors=snSwPortStatsAlignErrors, snNTPTimeZone=snNTPTimeZone, snSwIfInfoEntry=snSwIfInfoEntry, snNetFlowAggregationInactiveTimeout=snNetFlowAggregationInactiveTimeout, snRadiusLoginMethod=snRadiusLoginMethod, snSwPortInfoPortNum=snSwPortInfoPortNum, snVLanByPortStpHoldTime=snVLanByPortStpHoldTime, snAuthorizationCommandMethods=snAuthorizationCommandMethods, snIfOpticalLaneMonitoringTemperature=snIfOpticalLaneMonitoringTemperature, snVLanByPortCfgStpForwardDelay=snVLanByPortCfgStpForwardDelay, snSwPortSetAll=snSwPortSetAll, snFdpCacheEntry=snFdpCacheEntry, snAccountingCommandMethods=snAccountingCommandMethods, brcdIfEgressCounterDropPkts=brcdIfEgressCounterDropPkts, snQos=snQos, snSwSingleStpVLanId=snSwSingleStpVLanId, snPortMonitorEntry=snPortMonitorEntry, snIfOpticalLaneMonitoringLane=snIfOpticalLaneMonitoringLane, snFdpCachedAddrDeviceAddrEntryIndex=snFdpCachedAddrDeviceAddrEntryIndex, snNetFlowIfEntry=snNetFlowIfEntry, snSwPortPresent=snSwPortPresent, brcdVlanExtStatsOutSwitchedOctets=brcdVlanExtStatsOutSwitchedOctets, snSwPortFastSpanPortEnable=snSwPortFastSpanPortEnable, snSwPortInfoMediaType=snSwPortInfoMediaType, snSwProtocolVLanMode=snSwProtocolVLanMode, snMSTrunkIfTable=snMSTrunkIfTable, snVLanByPortQos=snVLanByPortQos, snPortMonitorTable=snPortMonitorTable, snSwIfInfoMediaType=snSwIfInfoMediaType, snSwPortStatsFCSErrors=snSwPortStatsFCSErrors, snFdbStationIndex=snFdbStationIndex, snPortMonitor=snPortMonitor, snIfStpPortAdminRstp=snIfStpPortAdminRstp, snSflowCollectorIP=snSflowCollectorIP, snVLanByIpxNetChassisExcludeMask=snVLanByIpxNetChassisExcludeMask, snSwPortLockAddressCount=snSwPortLockAddressCount, snSwIfInfoMirrorMode=snSwIfInfoMirrorMode, snPortMacSecurityIntfMacIfIndex=snPortMacSecurityIntfMacIfIndex, snSwIfDescr=snSwIfDescr, snRadius=snRadius, snIfMediaSerialNumber=snIfMediaSerialNumber, snSwPortRouteOnly=snSwPortRouteOnly, snVLanByPortCfgEntry=snVLanByPortCfgEntry)
