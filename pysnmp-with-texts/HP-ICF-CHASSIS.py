#
# PySNMP MIB module HP-ICF-CHASSIS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-CHASSIS
# Produced by pysmi-0.3.4 at Wed May  1 13:33:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
hpicfObjectModules, hpicfCommonTrapsPrefix, hpicfCommon = mibBuilder.importSymbols("HP-ICF-OID", "hpicfObjectModules", "hpicfCommonTrapsPrefix", "hpicfCommon")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
IpAddress, Counter32, Bits, NotificationType, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, Gauge32, ObjectIdentity, Integer32, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "Bits", "NotificationType", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "Gauge32", "ObjectIdentity", "Integer32", "ModuleIdentity", "TimeTicks")
TextualConvention, DisplayString, TimeStamp, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TimeStamp", "TruthValue")
hpicfChassisMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3))
hpicfChassisMib.setRevisions(('2013-02-10 08:47', '2011-08-25 08:47', '2010-08-25 00:00', '2009-04-22 00:00', '2000-11-03 22:16', '1997-03-06 03:34', '1996-09-10 02:45', '1995-07-13 00:00', '1994-11-20 00:00', '1993-07-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfChassisMib.setRevisionsDescriptions(('Added object hpSystemAirAvgTemp1,Group hpicfChasTempGroup1, Compliance hpicfChasTempCompliance1. deprecated hpSystemAirAvgTemp object, group hpicfChasTempGroup and hpicfChasTempCompliance.', 'Added new scalars hpicfFanTrayType and hpicfOpacityShieldInstalled.', 'Added hpSystemAirEntPhysicalIndex to the air temperature table.', 'Added new SNMP object and SNMP table for chassis temperature details', 'Updated division name.', 'Added NOTIFICATION-GROUP information.', 'Split this MIB module from the former monolithic hp-icf MIB. Added compliance statement for use by non-chassis devices or devices that are implementing another chassis MIB (like Entity MIB) but still want to use the hpicfSensorTable. Changed STATUS clause to deprecated for those objects that are superseded by the Entity MIB.', 'Added the hpicfSensorTrap.', 'Added the hpicfChassisAddrTable.', 'Initial version.',))
if mibBuilder.loadTexts: hpicfChassisMib.setLastUpdated('201302100847Z')
if mibBuilder.loadTexts: hpicfChassisMib.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfChassisMib.setContactInfo('Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfChassisMib.setDescription('This MIB module describes chassis devices in the HP Integrated Communication Facility product line. Note that most of this module will be superseded by the standard Entity MIB. However, the hpicfSensorTable will still be valid.')
hpicfChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2))
hpicfChassisId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfChassisId.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfChassisId.setDescription('********* THIS OBJECT IS DEPRECATED ********* An identifier that uniquely identifies this particular chassis. This will be the same value as the instance of hpicfChainId for this chassis.')
hpicfChassisNumSlots = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfChassisNumSlots.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfChassisNumSlots.setDescription('********* THIS OBJECT IS DEPRECATED ********* The number of slots in this chassis.')
hpicfSlotTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 3), )
if mibBuilder.loadTexts: hpicfSlotTable.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfSlotTable.setDescription('********* THIS OBJECT IS DEPRECATED ********* A table that contains information on all the slots in this chassis.')
hpicfSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 3, 1), ).setIndexNames((0, "HP-ICF-CHASSIS", "hpicfSlotIndex"))
if mibBuilder.loadTexts: hpicfSlotEntry.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfSlotEntry.setDescription('********* THIS OBJECT IS DEPRECATED ********* Information about a slot in a chassis')
hpicfSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSlotIndex.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfSlotIndex.setDescription('********* THIS OBJECT IS DEPRECATED ********* The slot number within the box for which this entry contains information.')
hpicfSlotObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 3, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSlotObjectId.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfSlotObjectId.setDescription('********* THIS OBJECT IS DEPRECATED ********* The authoritative identification of the card plugged into this slot in this chassis. A value of { 0 0 } indicates an empty slot.')
hpicfSlotLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSlotLastChange.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfSlotLastChange.setDescription("********* THIS OBJECT IS DEPRECATED ********* The value of the agent's sysUpTime at which a card in this slot was last inserted or removed. If no module has been inserted or removed since the last reinitialization of the agent, this object has a zero value.")
hpicfSlotDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSlotDescr.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfSlotDescr.setDescription('********* THIS OBJECT IS DEPRECATED ********* A textual description of the card plugged into this slot in this chassis, including the product number and version information.')
hpicfEntityTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 4), )
if mibBuilder.loadTexts: hpicfEntityTable.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfEntityTable.setDescription('********* THIS OBJECT IS DEPRECATED ********* A table that contains information about the (logical) networking devices contained in this chassis.')
hpicfEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 4, 1), ).setIndexNames((0, "HP-ICF-CHASSIS", "hpicfEntityIndex"))
if mibBuilder.loadTexts: hpicfEntityEntry.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfEntityEntry.setDescription('********* THIS OBJECT IS DEPRECATED ********* Information about a single logical networking device contained in this chassis.')
hpicfEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfEntityIndex.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfEntityIndex.setDescription('********* THIS OBJECT IS DEPRECATED ********* An index that uniquely identifies the logical network device for which this entry contains information.')
hpicfEntityFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfEntityFunction.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfEntityFunction.setDescription('********* THIS OBJECT IS DEPRECATED ********* The generic function provided by the logical network device. The value is a sum. Starting from zero, for each type of generic function that the entity performs, 2 raised to a power is added to the sum. The powers are according to the following table: Function Power other 1 repeater 0 bridge 2 router 3 agent 5 For example, an entity performing both bridging and routing functions would have a value of 12 (2^2 + 2^3).')
hpicfEntityObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 4, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfEntityObjectId.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfEntityObjectId.setDescription("********* THIS OBJECT IS DEPRECATED ********* The authoritative identification of the logical network device which provides an unambiguous means of determining the type of device. The value of this object is analogous to MIB-II's sysObjectId.")
hpicfEntityDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfEntityDescr.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfEntityDescr.setDescription("********* THIS OBJECT IS DEPRECATED ********* A textual description of this device, including the product number and version information. The value of this object is analogous to MIB-II's sysDescr.")
hpicfEntityTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfEntityTimestamp.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfEntityTimestamp.setDescription("********* THIS OBJECT IS DEPRECATED ********* The value of the agent's sysUpTime at which this logical network device was last reinitialized. If the entity has not been reinitialized since the last reinitialization of the agent, then this object has a zero value.")
hpicfSlotMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 5), )
if mibBuilder.loadTexts: hpicfSlotMapTable.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfSlotMapTable.setDescription('********* THIS OBJECT IS DEPRECATED ********* A table that contains information about which entities are in which slots in this chassis.')
hpicfSlotMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 5, 1), ).setIndexNames((0, "HP-ICF-CHASSIS", "hpicfSlotMapSlot"), (0, "HP-ICF-CHASSIS", "hpicfSlotMapEntity"))
if mibBuilder.loadTexts: hpicfSlotMapEntry.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfSlotMapEntry.setDescription('********* THIS OBJECT IS DEPRECATED ********* A relationship between a slot and an entity in this chassis. Such a relationship exists if the particular slot is occupied by a physical module performing part of the function of the particular entity.')
hpicfSlotMapSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSlotMapSlot.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfSlotMapSlot.setDescription('********* THIS OBJECT IS DEPRECATED ********* A slot number within the chassis which contains (part of) this entity.')
hpicfSlotMapEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSlotMapEntity.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfSlotMapEntity.setDescription('********* THIS OBJECT IS DEPRECATED ********* The entity described in this mapping.')
hpicfSensorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 6), )
if mibBuilder.loadTexts: hpicfSensorTable.setStatus('current')
if mibBuilder.loadTexts: hpicfSensorTable.setDescription('A table that contains information on all the sensors in this chassis')
hpicfSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 6, 1), ).setIndexNames((0, "HP-ICF-CHASSIS", "hpicfSensorIndex"))
if mibBuilder.loadTexts: hpicfSensorEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfSensorEntry.setDescription('Information about a sensor in a chassis')
hpicfSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSensorIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfSensorIndex.setDescription('An index that uniquely identifies the sensor for which this entry contains information.')
hpicfSensorObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 6, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSensorObjectId.setStatus('current')
if mibBuilder.loadTexts: hpicfSensorObjectId.setDescription('The authoritative identification of the kind of sensor this is.')
hpicfSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSensorNumber.setStatus('current')
if mibBuilder.loadTexts: hpicfSensorNumber.setDescription('A number which identifies a particular sensor from other sensors of the same kind. For instance, if there are many temperature sensors in this chassis, this number would identify a particular temperature sensor in this chassis.')
hpicfSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("bad", 2), ("warning", 3), ("good", 4), ("notPresent", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSensorStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfSensorStatus.setDescription('Actual status indicated by the sensor.')
hpicfSensorWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSensorWarnings.setStatus('current')
if mibBuilder.loadTexts: hpicfSensorWarnings.setDescription("The number of times hpicfSensorStatus has entered the 'warning'(3) state.")
hpicfSensorFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSensorFailures.setStatus('current')
if mibBuilder.loadTexts: hpicfSensorFailures.setDescription("The number of times hpicfSensorStatus has entered the 'bad'(2) state.")
hpicfSensorDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 6, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSensorDescr.setStatus('current')
if mibBuilder.loadTexts: hpicfSensorDescr.setDescription('A textual description of the sensor.')
hpicfChassisAddrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 7), )
if mibBuilder.loadTexts: hpicfChassisAddrTable.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfChassisAddrTable.setDescription('********* THIS OBJECT IS DEPRECATED ********* A table of network addresses for entities in this chassis. The primary use of this table is to map a specific entity address to a specific chassis. Note that this table may not be a complete list of network addresses for this entity.')
hpicfChassisAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 7, 1), ).setIndexNames((0, "HP-ICF-CHASSIS", "hpicfChasAddrType"), (0, "HP-ICF-CHASSIS", "hpicfChasAddrAddress"))
if mibBuilder.loadTexts: hpicfChassisAddrEntry.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfChassisAddrEntry.setDescription('********* THIS OBJECT IS DEPRECATED ********* An entry containing a single network address being used by a logical network device in this chassis.')
hpicfChasAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipAddr", 1), ("ipxAddr", 2), ("macAddr", 3))))
if mibBuilder.loadTexts: hpicfChasAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfChasAddrType.setDescription('********* THIS OBJECT IS DEPRECATED ********* The kind of network address represented in this entry.')
hpicfChasAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 10)))
if mibBuilder.loadTexts: hpicfChasAddrAddress.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfChasAddrAddress.setDescription('********* THIS OBJECT IS DEPRECATED ********* The network address being used by the logical network device associated with this entry, formatted according to the value of the associated instance of hpicfChasAddrType. For hpicfChasAddrType of ipAddr, this value is four octets long, with each octet representing one byte of the IP address, in network byte order. For hpicfChasAddrType of ipxAddr, this value is ten octets long, with the first four octets representing the IPX network number in network byte order, followed by the six byte host number in network byte order. For hpicfChasAddrType of macAddr, this value is six octets long, representing the MAC address in canonical order.')
hpicfChasAddrEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfChasAddrEntity.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfChasAddrEntity.setDescription('********* THIS OBJECT IS DEPRECATED ********* An index that uniquely identifies the logical network device in this chassis that is using this network address..')
hpChassisTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 8))
hpSystemAirTempTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 8, 1), )
if mibBuilder.loadTexts: hpSystemAirTempTable.setStatus('current')
if mibBuilder.loadTexts: hpSystemAirTempTable.setDescription('This table gives the temperature details of chassis. These temperature details are obtained by monitoring chassis temperature sensors attached to the box by excluding ManagementModule, FabricModule, IMand PowerSupply sensors. This will give current, maximum,minimum,threshold and average temperatures of chassis.')
hpSystemAirTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 8, 1, 1), ).setIndexNames((0, "HP-ICF-CHASSIS", "hpSystemAirSensor"))
if mibBuilder.loadTexts: hpSystemAirTempEntry.setStatus('current')
if mibBuilder.loadTexts: hpSystemAirTempEntry.setDescription('This is the table for chassis temperature details.')
hpSystemAirSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hpSystemAirSensor.setStatus('current')
if mibBuilder.loadTexts: hpSystemAirSensor.setDescription('This is the index for this table.This object describes chassis attached temperature sensor. Based on the value of this index, temperature details are obtained from the sensor and are given.')
hpSystemAirName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 8, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSystemAirName.setStatus('current')
if mibBuilder.loadTexts: hpSystemAirName.setDescription("This object describes name of the system which is chassis attached temperature sensor number. For example if the index (hpSystemAirSensor) is '0' then the system name is sys-1. Index starts from '0' but sensor number is '1'.")
hpSystemAirCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 8, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSystemAirCurrentTemp.setStatus('current')
if mibBuilder.loadTexts: hpSystemAirCurrentTemp.setDescription('This object gives current temperature of the system. This is the current temperature given by the indexed chassis attached temperature sensor on box.')
hpSystemAirMaxTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 8, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSystemAirMaxTemp.setStatus('current')
if mibBuilder.loadTexts: hpSystemAirMaxTemp.setDescription('This object gives Maximum temperature of the chassis.')
hpSystemAirMinTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 8, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSystemAirMinTemp.setStatus('current')
if mibBuilder.loadTexts: hpSystemAirMinTemp.setDescription('This object gives Minimum temperature of the chassis.')
hpSystemAirOverTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSystemAirOverTemp.setStatus('current')
if mibBuilder.loadTexts: hpSystemAirOverTemp.setDescription('This object gives Over temperature of the system. If the current temperature of the board is above threshold temperature and if board stays at this temperature for 10 full seconds then its called over temperature.')
hpSystemAirThresholdTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 8, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSystemAirThresholdTemp.setStatus('current')
if mibBuilder.loadTexts: hpSystemAirThresholdTemp.setDescription('This object gives Threshold temperature of the system. This is the utmost temperature that the chassis can sustain. If chassis temperature is above threshold then alarm will ring to inform over temperature condition.')
hpSystemAirAvgTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 8, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSystemAirAvgTemp.setStatus('deprecated')
if mibBuilder.loadTexts: hpSystemAirAvgTemp.setDescription('This object gives Average temperature of the system. There will be some roll up function which will check current temperature at particular intervals. Based on these current temperatures over certain time, average temperature is calculated.')
hpSystemAirEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 8, 1, 1, 9), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSystemAirEntPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: hpSystemAirEntPhysicalIndex.setDescription('This gives the entPhysicalIndex of the temperature sensor as in the entPhysicalTable (rfc2737).')
hpSystemAirAvgTemp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 8, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSystemAirAvgTemp1.setStatus('current')
if mibBuilder.loadTexts: hpSystemAirAvgTemp1.setDescription('This object gives Average temperature of the system. There will be some roll up function which will check current temperature at particular intervals. Based on these current temperatures over certain time, average temperature is calculated.')
hpicfFanTrayType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("highPerformance", 2))).clone('standard')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfFanTrayType.setStatus('current')
if mibBuilder.loadTexts: hpicfFanTrayType.setDescription('If opacity shield is installed hpicsFanTrayType should be HighPerformance. This is applicable only for 5406 5412 8212 and 8206 Switches.')
hpicfOpacityShieldInstalled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 10), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpacityShieldInstalled.setStatus('current')
if mibBuilder.loadTexts: hpicfOpacityShieldInstalled.setDescription('It indicates that Opacity shield is Installed on the switch. This is applicable only for 5406,5412, 8212 and 8206 Switches.')
hpicfSensorTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 12, 1, 0, 3)).setObjects(("HP-ICF-CHASSIS", "hpicfSensorStatus"), ("HP-ICF-CHASSIS", "hpicfSensorDescr"))
if mibBuilder.loadTexts: hpicfSensorTrap.setStatus('current')
if mibBuilder.loadTexts: hpicfSensorTrap.setDescription('An hpicfSensorTrap indicates that there has been a change of state on one of the sensors in this chassis. The hpicfSensorStatus indicates the new status value for the changed sensor.')
hpicfChassisConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1))
hpicfChassisCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1, 1))
hpicfChassisGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1, 2))
hpicfChasAdvStkCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1, 1, 1)).setObjects(("HP-ICF-CHASSIS", "hpicfChassisBasicGroup"), ("HP-ICF-CHASSIS", "hpicfSensorGroup"), ("HP-ICF-CHASSIS", "hpicfSensorNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfChasAdvStkCompliance = hpicfChasAdvStkCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfChasAdvStkCompliance.setDescription('********* THIS COMPLIANCE IS DEPRECATED ********* A compliance statement for AdvanceStack chassis devices.')
hpicfChasAdvStk2Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1, 1, 2)).setObjects(("HP-ICF-CHASSIS", "hpicfChassisBasicGroup"), ("HP-ICF-CHASSIS", "hpicfChassisAddrGroup"), ("HP-ICF-CHASSIS", "hpicfSensorGroup"), ("HP-ICF-CHASSIS", "hpicfSensorNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfChasAdvStk2Compliance = hpicfChasAdvStk2Compliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfChasAdvStk2Compliance.setDescription('********* THIS COMPLIANCE IS DEPRECATED ********* An updated compliance statement for AdvanceStack chassis devices that includes the hpicfChassisAddrGroup.')
hpicfChasSensorCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1, 1, 3)).setObjects(("HP-ICF-CHASSIS", "hpicfSensorGroup"), ("HP-ICF-CHASSIS", "hpicfSensorNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfChasSensorCompliance = hpicfChasSensorCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfChasSensorCompliance.setDescription('A compliance statement for non-chassis devices, or chassis devices implementing a standards-based MIB for obtaining chassis information, which contain redundant power supplies or other appropriate sensors.')
hpicfChasTempCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1, 1, 4)).setObjects(("HP-ICF-CHASSIS", "hpicfChasTempGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfChasTempCompliance = hpicfChasTempCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfChasTempCompliance.setDescription(" A compliance statement for chassis's system air temperature details.")
hpicfOpacityShieldsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1, 1, 5)).setObjects(("HP-ICF-CHASSIS", "hpicfOpacityShieldsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOpacityShieldsCompliance = hpicfOpacityShieldsCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfOpacityShieldsCompliance.setDescription("A compliance statement for chassis's opacity Shield")
hpicfChasTempCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1, 1, 6)).setObjects(("HP-ICF-CHASSIS", "hpicfChasTempGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfChasTempCompliance1 = hpicfChasTempCompliance1.setStatus('current')
if mibBuilder.loadTexts: hpicfChasTempCompliance1.setDescription(" A compliance statement for chassis's system air temperature details.")
hpicfChassisBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1, 2, 1)).setObjects(("HP-ICF-CHASSIS", "hpicfChassisId"), ("HP-ICF-CHASSIS", "hpicfChassisNumSlots"), ("HP-ICF-CHASSIS", "hpicfSlotIndex"), ("HP-ICF-CHASSIS", "hpicfSlotObjectId"), ("HP-ICF-CHASSIS", "hpicfSlotLastChange"), ("HP-ICF-CHASSIS", "hpicfSlotDescr"), ("HP-ICF-CHASSIS", "hpicfEntityIndex"), ("HP-ICF-CHASSIS", "hpicfEntityFunction"), ("HP-ICF-CHASSIS", "hpicfEntityObjectId"), ("HP-ICF-CHASSIS", "hpicfEntityDescr"), ("HP-ICF-CHASSIS", "hpicfEntityTimestamp"), ("HP-ICF-CHASSIS", "hpicfSlotMapSlot"), ("HP-ICF-CHASSIS", "hpicfSlotMapEntity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfChassisBasicGroup = hpicfChassisBasicGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfChassisBasicGroup.setDescription('********* THIS GROUP IS DEPRECATED ********* A collection of objects for determining the contents of an ICF chassis device.')
hpicfSensorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1, 2, 2)).setObjects(("HP-ICF-CHASSIS", "hpicfSensorIndex"), ("HP-ICF-CHASSIS", "hpicfSensorObjectId"), ("HP-ICF-CHASSIS", "hpicfSensorNumber"), ("HP-ICF-CHASSIS", "hpicfSensorStatus"), ("HP-ICF-CHASSIS", "hpicfSensorWarnings"), ("HP-ICF-CHASSIS", "hpicfSensorFailures"), ("HP-ICF-CHASSIS", "hpicfSensorDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSensorGroup = hpicfSensorGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfSensorGroup.setDescription('A collection of objects for monitoring the status of sensors in an ICF chassis.')
hpicfChassisAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1, 2, 3)).setObjects(("HP-ICF-CHASSIS", "hpicfChasAddrEntity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfChassisAddrGroup = hpicfChassisAddrGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfChassisAddrGroup.setDescription('********* THIS GROUP IS DEPRECATED ********* A collection of objects to allow a management station to determine which devices are in the same chassis.')
hpicfSensorNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1, 2, 4)).setObjects(("HP-ICF-CHASSIS", "hpicfSensorTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSensorNotifyGroup = hpicfSensorNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfSensorNotifyGroup.setDescription('A collection of notifications used to indicate changes in the status of sensors.')
hpicfChasTempGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1, 2, 5)).setObjects(("HP-ICF-CHASSIS", "hpSystemAirName"), ("HP-ICF-CHASSIS", "hpSystemAirCurrentTemp"), ("HP-ICF-CHASSIS", "hpSystemAirMaxTemp"), ("HP-ICF-CHASSIS", "hpSystemAirMinTemp"), ("HP-ICF-CHASSIS", "hpSystemAirThresholdTemp"), ("HP-ICF-CHASSIS", "hpSystemAirOverTemp"), ("HP-ICF-CHASSIS", "hpSystemAirAvgTemp"), ("HP-ICF-CHASSIS", "hpSystemAirEntPhysicalIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfChasTempGroup = hpicfChasTempGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfChasTempGroup.setDescription('A collection objects to give temperature details of chassis')
hpicfOpacityShieldsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1, 2, 6)).setObjects(("HP-ICF-CHASSIS", "hpicfFanTrayType"), ("HP-ICF-CHASSIS", "hpicfOpacityShieldInstalled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOpacityShieldsGroup = hpicfOpacityShieldsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOpacityShieldsGroup.setDescription('A collection of objects for Opacity Shields of chassis')
hpicfChasTempGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1, 2, 7)).setObjects(("HP-ICF-CHASSIS", "hpSystemAirName"), ("HP-ICF-CHASSIS", "hpSystemAirCurrentTemp"), ("HP-ICF-CHASSIS", "hpSystemAirMaxTemp"), ("HP-ICF-CHASSIS", "hpSystemAirMinTemp"), ("HP-ICF-CHASSIS", "hpSystemAirThresholdTemp"), ("HP-ICF-CHASSIS", "hpSystemAirOverTemp"), ("HP-ICF-CHASSIS", "hpSystemAirAvgTemp"), ("HP-ICF-CHASSIS", "hpSystemAirAvgTemp1"), ("HP-ICF-CHASSIS", "hpSystemAirEntPhysicalIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfChasTempGroup1 = hpicfChasTempGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfChasTempGroup1.setDescription('A collection objects to give temperature details of chassis')
mibBuilder.exportSymbols("HP-ICF-CHASSIS", hpSystemAirTempTable=hpSystemAirTempTable, hpicfSlotMapEntry=hpicfSlotMapEntry, hpicfChasTempCompliance1=hpicfChasTempCompliance1, hpicfSlotMapSlot=hpicfSlotMapSlot, hpSystemAirMinTemp=hpSystemAirMinTemp, hpicfChasAdvStkCompliance=hpicfChasAdvStkCompliance, hpicfSensorIndex=hpicfSensorIndex, hpicfChasTempCompliance=hpicfChasTempCompliance, hpicfSlotEntry=hpicfSlotEntry, hpChassisTemperature=hpChassisTemperature, hpicfChassisNumSlots=hpicfChassisNumSlots, hpicfChasTempGroup=hpicfChasTempGroup, hpicfChasTempGroup1=hpicfChasTempGroup1, hpSystemAirCurrentTemp=hpSystemAirCurrentTemp, hpicfSensorStatus=hpicfSensorStatus, hpicfSensorTable=hpicfSensorTable, hpSystemAirTempEntry=hpSystemAirTempEntry, hpicfChassisAddrGroup=hpicfChassisAddrGroup, hpicfChasSensorCompliance=hpicfChasSensorCompliance, hpicfChassisCompliances=hpicfChassisCompliances, hpicfSlotIndex=hpicfSlotIndex, hpicfChasAddrAddress=hpicfChasAddrAddress, hpicfEntityEntry=hpicfEntityEntry, hpicfEntityIndex=hpicfEntityIndex, hpSystemAirEntPhysicalIndex=hpSystemAirEntPhysicalIndex, hpicfOpacityShieldInstalled=hpicfOpacityShieldInstalled, hpicfEntityObjectId=hpicfEntityObjectId, hpicfSensorTrap=hpicfSensorTrap, hpSystemAirAvgTemp1=hpSystemAirAvgTemp1, hpicfSensorWarnings=hpicfSensorWarnings, hpicfSensorFailures=hpicfSensorFailures, hpicfSensorGroup=hpicfSensorGroup, hpicfSlotDescr=hpicfSlotDescr, hpicfEntityTable=hpicfEntityTable, hpicfSensorNotifyGroup=hpicfSensorNotifyGroup, hpSystemAirThresholdTemp=hpSystemAirThresholdTemp, hpicfFanTrayType=hpicfFanTrayType, hpSystemAirSensor=hpSystemAirSensor, hpicfOpacityShieldsCompliance=hpicfOpacityShieldsCompliance, hpicfSensorDescr=hpicfSensorDescr, hpSystemAirOverTemp=hpSystemAirOverTemp, hpSystemAirAvgTemp=hpSystemAirAvgTemp, hpicfSlotMapTable=hpicfSlotMapTable, hpicfChassisId=hpicfChassisId, hpicfChassisAddrEntry=hpicfChassisAddrEntry, hpicfChassisGroups=hpicfChassisGroups, hpicfChasAddrType=hpicfChasAddrType, hpicfChassisMib=hpicfChassisMib, hpicfSlotLastChange=hpicfSlotLastChange, hpicfSlotObjectId=hpicfSlotObjectId, hpSystemAirName=hpSystemAirName, hpicfSensorEntry=hpicfSensorEntry, hpSystemAirMaxTemp=hpSystemAirMaxTemp, PYSNMP_MODULE_ID=hpicfChassisMib, hpicfEntityFunction=hpicfEntityFunction, hpicfEntityTimestamp=hpicfEntityTimestamp, hpicfChasAddrEntity=hpicfChasAddrEntity, hpicfChassisAddrTable=hpicfChassisAddrTable, hpicfSlotMapEntity=hpicfSlotMapEntity, hpicfChasAdvStk2Compliance=hpicfChasAdvStk2Compliance, hpicfSensorNumber=hpicfSensorNumber, hpicfSlotTable=hpicfSlotTable, hpicfSensorObjectId=hpicfSensorObjectId, hpicfChassisConformance=hpicfChassisConformance, hpicfOpacityShieldsGroup=hpicfOpacityShieldsGroup, hpicfEntityDescr=hpicfEntityDescr, hpicfChassis=hpicfChassis, hpicfChassisBasicGroup=hpicfChassisBasicGroup)
