#
# PySNMP MIB module HH3C-WIPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-WIPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:30:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter64, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, Counter32, iso, IpAddress, Bits, NotificationType, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "Counter32", "iso", "IpAddress", "Bits", "NotificationType", "Unsigned32", "ModuleIdentity")
TextualConvention, MacAddress, TruthValue, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "TruthValue", "DisplayString", "RowStatus")
hh3cWIPS = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 118))
hh3cWIPS.setRevisions(('2011-12-29 14:50',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cWIPS.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hh3cWIPS.setLastUpdated('201112291450Z')
if mibBuilder.loadTexts: hh3cWIPS.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: hh3cWIPS.setContactInfo('Platform Team Hangzhou H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cWIPS.setDescription('This MIB provides information about WIPS feature. Wireless Intrusion Prevention System (WIPS) WIPS is designed to be employed in an area that is serviced by an existing wireless network. It aids in the early detection of malicious outsider attacks and intrusions via wireless networks, and takes corresponding measures in order to guarantee the wireless environment security. ')
class Hh3cWIPSRadioType(TextualConvention, Unsigned32):
    description = 'Represents AP 802.11 radio type of 802.11a/b/g/n as per the standard. dot11a 0x01 dot11b 0x02 dot11g 0x04 dot11n 0x08 dot11gn 0x10 dot11an 0x20 dot11ac 0x40'
    status = 'current'
    displayHint = 'd'

class Hh3cWIPSDevStatus(TextualConvention, Integer32):
    description = 'Represents the status of devices detected by WIPS.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("inactive", 2))

class Hh3cWIPSDevCategoryWay(TextualConvention, Integer32):
    description = "Represents by which way the device is categorized. 'manual': the device is categorized by user. 'autoByNMS': the device is automatically categorized by NMS(Network Management System). 'autoByDev': the device is automatically categorized by WIPS."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("manual", 1), ("autoByNMS", 2), ("autoByDev", 3))

class Hh3cWIPSDeviceCategoryType(TextualConvention, Integer32):
    description = 'Represents the categorized type of device detected by WIPS.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("none", 0), ("authorizedAP", 1), ("authorizedClient", 2), ("misconfiguredAP", 3), ("rogueAP", 4), ("unauthorizedClient", 5), ("externalAP", 6), ("adhoc", 7), ("bridge", 8), ("misassociatedClient", 9), ("potentialAuthorizedAP", 10), ("potentialRogueAP", 11), ("potentialExternalAP", 12), ("uncategorizedAP", 13), ("uncategorizedClient", 14))

class Hh3cWIPSAPCategoryType(TextualConvention, Integer32):
    description = 'Represents the categorized type of AP detected by WIPS.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("adhoc", 1), ("authorized", 2), ("rogue", 3), ("misconfigured", 4), ("external", 5), ("potentialAuthorized", 6), ("potentialRogue", 7), ("potentialExternal", 8), ("uncategorized", 9))

class Hh3cWIPSClientCategoryType(TextualConvention, Integer32):
    description = 'Represents the categorized type of Client detected by WIPS.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("authorized", 1), ("unauthorized", 2), ("misassociated", 3), ("uncategorized", 4), ("unassociated", 5))

class Hh3cWIPSChannel(TextualConvention, Integer32):
    description = 'Represents the channel number.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 224)

class Hh3cWIPSEncryptMethod(TextualConvention, Unsigned32):
    description = 'Represents the frame encryption cipher types for frames on IEEE 802.11 radio interfaces. The MIB defines TC by referring to the 802.11i protocol. The following values are supported: none(1) - clear text or no cipher method is configure, wep(2) - WEP key, tkip(4) - WPA Temporal Key encryption, ccmp(8) - WPA AES CCMP encryption'
    status = 'current'
    displayHint = 'd'

class Hh3cWIPSAuthMethod(TextualConvention, Integer32):
    description = 'Represents the key management mode defined by 802.11i. The following values are supported: none - No key management mode configured, psk - pre-shared key authentication, dot1x - 802.1x authentication. other - other authentication.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 1), ("psk", 2), ("dot1x", 3), ("other", 4), ("pskANDdot1x", 5), ("pskANDother", 6), ("dot1xANDother", 7), ("pskANDdot1xANDother", 8))

class Hh3cWIPSAPClassifyType(TextualConvention, Integer32):
    description = "Represents the classify type of AP. 'other' - represents undo operation."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("authorized", 2), ("external", 3), ("misconfigured", 4), ("rogue", 5))

class Hh3cWIPSAPSecurityType(TextualConvention, Unsigned32):
    description = 'Represents the AP security type. clear 0x01 wpa2 0x02 wpa 0x04 wep 0x08'
    status = 'current'
    displayHint = 'd'

hh3cWIPSConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1))
hh3cWIPSGlobalConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 1))
hh3cWIPSEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSEnable.setDescription("Represents whether the WIPS feature is enabled or not. 'true': enable the WIPS feature. 'false': disable the WIPS feature.")
hh3cWIPSSensorLicenseNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSSensorLicenseNum.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSensorLicenseNum.setDescription('Represents the number of sensor license.')
hh3cWIPSBlocklistAction = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("block", 1), ("unblock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSBlocklistAction.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSBlocklistAction.setDescription("Represents whether the block list feature is enabled or not. 'block' : Enable the block list feature to filter unwanted devices. 'unblock' : Disable the block list feature.")
hh3cWIPSAPInactiveTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(300)).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSAPInactiveTime.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAPInactiveTime.setDescription('Represents the time for AP getting inactive.')
hh3cWIPSSTAInactiveTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(120, 1200)).clone(600)).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSSTAInactiveTime.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSTAInactiveTime.setDescription('Represents the time for STA getting inactive.')
hh3cWIPSDevAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 2592000)).clone(86400)).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSDevAgingTime.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevAgingTime.setDescription('Represents the time for device getting aged.')
hh3cWIPSStatisticPeriod = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(900)).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSStatisticPeriod.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSStatisticPeriod.setDescription('Represents the period of WIPS reporting the statistic.')
hh3cWIPSReclassificationPeriod = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(600)).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSReclassificationPeriod.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSReclassificationPeriod.setDescription('Represents the period of WIPS reclassifying devices.')
hh3cWIPSResetAllTrustList = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSResetAllTrustList.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSResetAllTrustList.setDescription('This object is used to remove all entries from the static trust list. It will return false for get operation.')
hh3cWIPSResetAllBlockList = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSResetAllBlockList.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSResetAllBlockList.setDescription('This object is used to remove all entries from the static block list. It will return false for get operation.')
hh3cWIPSResetAllIgnoreList = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSResetAllIgnoreList.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSResetAllIgnoreList.setDescription('This object is used to remove all entries from the ignore list. It will return false for get operation..')
hh3cWIPSResetAllCtmList = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSResetAllCtmList.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSResetAllCtmList.setDescription('This object is used to remove all entries from the static countermeasure list. It will return false for get operation.')
hh3cWIPSPermitChlBitMap = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSPermitChlBitMap.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSPermitChlBitMap.setDescription('Represents the permit channel number by bitmap.')
hh3cWIPSDynamicTrustListAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(300)).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSDynamicTrustListAgingTime.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDynamicTrustListAgingTime.setDescription('Represents the time for devices in the dynamic trust list getting aged.')
hh3cWIPSDevUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30)).clone(20)).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSDevUpdateTime.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevUpdateTime.setDescription('Represents the period of WIPS update the status of devices.')
hh3cWIPSADOSEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSADOSEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSADOSEnable.setDescription("Represents whether enable the ADOS feature. 'true': enable the ADOS feature. 'false': disable the ADOS feature.")
hh3cWIPSAccessFlowScanEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSAccessFlowScanEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAccessFlowScanEnable.setDescription("Represents whether the WIPS scanning feature during the access flow is enabled or not. 'true': enable the feature. 'false': disable the feature.")
hh3cWIPSVsdConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2))
hh3cWIPSVsdTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 1), )
if mibBuilder.loadTexts: hh3cWIPSVsdTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSVsdTable.setDescription('The table provides the list of virtual security domain.')
hh3cWIPSVsdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 1, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSVsdNameCfg"))
if mibBuilder.loadTexts: hh3cWIPSVsdEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSVsdEntry.setDescription('Each entry contains information of each VSD.')
hh3cWIPSVsdNameCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hh3cWIPSVsdNameCfg.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSVsdNameCfg.setDescription('Represents the name of virtual security domain.')
hh3cWIPSVsdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSVsdRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSVsdRowStatus.setDescription('The status of this table entry.')
hh3cWIPSVsdAtkDctPolicyNameCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSVsdAtkDctPolicyNameCfg.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSVsdAtkDctPolicyNameCfg.setDescription('Represents the name of attack detect policy attached to the VSD.')
hh3cWIPSVsdCtmPolicyNameCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSVsdCtmPolicyNameCfg.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSVsdCtmPolicyNameCfg.setDescription('Represents the name of countermeasure policy attached to the VSD.')
hh3cWIPSVsdSigPolicyNameCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSVsdSigPolicyNameCfg.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSVsdSigPolicyNameCfg.setDescription('Represents the name of signature policy attached to the VSD')
hh3cWIPSVsdMalPktPolicyNameCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSVsdMalPktPolicyNameCfg.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSVsdMalPktPolicyNameCfg.setDescription('Represents the name of malformed packet detect policy attached to the VSD')
hh3cWIPSRule2VsdTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 2), )
if mibBuilder.loadTexts: hh3cWIPSRule2VsdTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSRule2VsdTable.setDescription('The table defines the AP classification rules been attached to the VSD. ')
hh3cWIPSRule2VsdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 2, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSVsdNameCfg"), (0, "HH3C-WIPS-MIB", "hh3cWIPSRule2VsdAPClaRuleNameCfg"))
if mibBuilder.loadTexts: hh3cWIPSRule2VsdEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSRule2VsdEntry.setDescription('Each entry contains information of each AP classification rule in each VSD. ')
hh3cWIPSRule2VsdAPClaRuleNameCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hh3cWIPSRule2VsdAPClaRuleNameCfg.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSRule2VsdAPClaRuleNameCfg.setDescription('Represents the name of AP classification rule attached to the VSD.')
hh3cWIPSRule2VsdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSRule2VsdRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSRule2VsdRowStatus.setDescription('The status of this table entry.')
hh3cWIPSRule2VsdPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSRule2VsdPrecedence.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSRule2VsdPrecedence.setDescription('Represents the precedence of AP classification rule attached to the VSD.')
hh3cWIPSSensor2VsdTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 3), )
if mibBuilder.loadTexts: hh3cWIPSSensor2VsdTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSensor2VsdTable.setDescription('The table defines the sensor been attached to the VSD. ')
hh3cWIPSSensor2VsdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 3, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSVsdNameCfg"), (0, "HH3C-WIPS-MIB", "hh3cWIPSSensorNameCfg"))
if mibBuilder.loadTexts: hh3cWIPSSensor2VsdEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSensor2VsdEntry.setDescription('Each entry contains information of each sensor in each VSD.')
hh3cWIPSSensorNameCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: hh3cWIPSSensorNameCfg.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSensorNameCfg.setDescription('Represents the name of sensor attached to the VSD.')
hh3cWIPSSensor2VsdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSensor2VsdRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSensor2VsdRowStatus.setDescription('The status of this table entry.')
hh3cWIPSSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("idle", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSensorState.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSensorState.setDescription('Represents the running state of the sensor. It will return false for set operation.')
hh3cWIPSSensorRadioTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 4), )
if mibBuilder.loadTexts: hh3cWIPSSensorRadioTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSensorRadioTable.setDescription('The table represents the list of sensor radio information.')
hh3cWIPSSensorRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 4, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSVsdNameCfg"), (0, "HH3C-WIPS-MIB", "hh3cWIPSSensorNameCfg"), (0, "HH3C-WIPS-MIB", "hh3cWIPSSensorRadioRadioId"))
if mibBuilder.loadTexts: hh3cWIPSSensorRadioEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSensorRadioEntry.setDescription('Each entry contains information of a radio of a sensor.')
hh3cWIPSSensorRadioRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: hh3cWIPSSensorRadioRadioId.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSensorRadioRadioId.setDescription('Represents the radio identifier of the sensor.')
hh3cWIPSSensorRadioScanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("accessFirst", 1), ("detectFirst", 2), ("middle", 3), ("detectOnly", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSSensorRadioScanMode.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSensorRadioScanMode.setDescription('Represents the scanning mode configured to the radio.')
hh3cWIPSAPClaRuleTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3), )
if mibBuilder.loadTexts: hh3cWIPSAPClaRuleTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAPClaRuleTable.setDescription('The table defines the parameters for WIPS AP classification rule. One rule could be assigned to different VSDs. ')
hh3cWIPSAPClaRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSAPClaRuleName"))
if mibBuilder.loadTexts: hh3cWIPSAPClaRuleEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAPClaRuleEntry.setDescription('Each entry contains information of each AP classification rule. ')
hh3cWIPSAPClaRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hh3cWIPSAPClaRuleName.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAPClaRuleName.setDescription('Represents the name of AP classification rule.')
hh3cWIPSAPClaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAPClaRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAPClaRowStatus.setDescription('The status of this table entry.')
hh3cWIPSAPClaSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 3), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAPClaSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAPClaSeverityLevel.setDescription('Represents the severity level of the AP classification rule. Available value limits from 0 to 100.')
hh3cWIPSAPClaRuleMatchAll = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAPClaRuleMatchAll.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAPClaRuleMatchAll.setDescription('Represents whether match all the AP classification sub-rules which have been configured.')
hh3cWIPSAPClaType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 5), Hh3cWIPSAPClassifyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAPClaType.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAPClaType.setDescription('Represents the type of AP classification.')
hh3cWIPSAPClaSubRuleSSIDOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("include", 1), ("notinclude", 2), ("equal", 3), ("notequal", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAPClaSubRuleSSIDOperator.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAPClaSubRuleSSIDOperator.setDescription('Represents the compare way of the SSID in the sub rule, including include/not include/equal/not equal.')
hh3cWIPSAPClaSubRuleSSIDCase = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAPClaSubRuleSSIDCase.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAPClaSubRuleSSIDCase.setDescription("Represents the case sensitive or not for the SSID match. 'true': Case insensitive. 'false': Case sensitive.")
hh3cWIPSAPClaSubRuleSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAPClaSubRuleSSID.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAPClaSubRuleSSID.setDescription('Represents the SSID match template in the ap classification rule.')
hh3cWIPSSecurityType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 9), Hh3cWIPSAPSecurityType().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSecurityType.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSecurityType.setDescription('Represents the security type of active AP. ')
hh3cWIPSSecurityTypeMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("equal", 1), ("include", 2))).clone('include')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSecurityTypeMatch.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSecurityTypeMatch.setDescription('Represents match way of the security type of active AP. ')
hh3cWIPSAPAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("none", 1), ("psk", 2), ("dot1x", 3), ("other", 4), ("undo", 5), ("pskANDdot1x", 6), ("pskANDother", 7), ("dot1xANDother", 8), ("pskANDdot1xANDother", 9), ("noneANDpsk", 10), ("noneANDdot1x", 11), ("noneANDother", 12), ("noneANDpskANDdot1x", 13), ("noneANDpskANDother", 14), ("noneANDdot1xANDother", 15), ("noneANDpskANDdot1xANDother", 16))).clone('undo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAPAuthType.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAPAuthType.setDescription('Represents the authentication type of the AP. undo - represents undo operation')
hh3cWIPSMaxRSSIValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 12), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSMaxRSSIValue.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMaxRSSIValue.setDescription('Represents the high-limit of the RSSI of AP. Available value limits from 1 to 90.')
hh3cWIPSMinRSSIValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 13), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSMinRSSIValue.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMinRSSIValue.setDescription('Represents the low-limit of the RSSI of AP. Available value limits from 0 to 89.')
hh3cWIPSMaxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 14), Unsigned32().clone(4294967295)).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSMaxDuration.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMaxDuration.setDescription('Represents the high-limit of the duration of AP. Available value limits from 1 to 2592000.')
hh3cWIPSMinDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 15), Unsigned32().clone(4294967295)).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSMinDuration.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMinDuration.setDescription('Represents the low-limit of the duration of AP. Available value limits from 0 to 2591999.')
hh3cWIPSMaxAPNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 16), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSMaxAPNum.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMaxAPNum.setDescription('Represents the high-limit of the number of AP. Available value limits from 1 to 128.')
hh3cWIPSMinAPNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 17), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSMinAPNum.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMinAPNum.setDescription('Represents the low-limit of the number of AP. Available value limits from 0 to 127.')
hh3cWIPSMaxClientNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 18), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSMaxClientNum.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMaxClientNum.setDescription('Represents the high-limit of the number of client. Available value limits from 1 to 128.')
hh3cWIPSMinClientNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 19), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSMinClientNum.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMinClientNum.setDescription('Represents the low-limit of the number of client. Available value limits from 0 to 127.')
hh3cWIPSOUIInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSOUIInfo.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSOUIInfo.setDescription('Represents the OUI hexadecimal string of the AP.')
hh3cWIPSVendorInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSVendorInfo.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSVendorInfo.setDescription('Represents the vendor info of the AP.')
hh3cWIPSAPAuthTypeMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("equal", 1), ("include", 2))).clone('include')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAPAuthTypeMatch.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAPAuthTypeMatch.setDescription('Represents match way of the authentication type of active AP. ')
hh3cWIPSAtkDctPolicyCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4))
hh3cWIPSAtkDctPolicyCfgSupportSet = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyCfgSupportSet.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyCfgSupportSet.setDescription('Represents the bit string of supported attack detect policy. The specific attack detect policy is supported if its corresponding bit is set to 1; otherwise its corresponding bit is set to 0. bit0: adhoc bit1: ap-spoof bit2: client-spoof bit3: prohibited channel bit4: ap-flood bit5: eapol-start bit6: authentication bit7: association bit8: reassociation bit9: weak-IV bit10: invalid-OUI bit11: ps-attack bit12: windows-bridge bit13: hotspot-attack bit14: ap-impersonation bit15: soft-ap bit16: unencrypted-authorized-ap bit17: unencrypted-trust-client')
hh3cWIPSAtkDctPolicyCfgTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2), )
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyCfgTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyCfgTable.setDescription('The table defines the parameters for WIPS attack detect policy.')
hh3cWIPSAtkDctPolicyCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSAtkDctPolicyName"))
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyCfgEntry.setDescription('Each entry contains information of each attack detect policy.')
hh3cWIPSAtkDctPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyName.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyName.setDescription('Represents the name of attack detect policy.')
hh3cWIPSAtkDctPolicyCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyCfgRowStatus.setDescription('The status of this table entry.')
hh3cWIPSAtkDctPolicyBitString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyBitString.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyBitString.setDescription('Represents the bit string of attack detect policy configuration. The specific attack detect policy is enabled if its corresponding bit is set to 1; disabled if its corresponding bit is set to 0. bit0: adhoc bit1: ap-spoof bit2: client-spoof bit3: prohibited channel bit4: ap-flood bit5: eapol-start bit6: authentication bit7: association bit8: reassociation bit9: weak-IV bit10: invalid-OUI bit11: ps-attack bit12: windows-bridge bit13: hotspot-attack bit14: ap-impersonation bit15: soft-ap bit16: unencrypted-authorized-ap bit17: unencrypted-trust-client')
hh3cWIPSAtkDctPolicyAPFloodQT = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 604800)).clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyAPFloodQT.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyAPFloodQT.setDescription('Represents the quiet time after reporting the AP flood attack event alarm.')
hh3cWIPSAtkDctPolicyAPSpoofQT = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 604800)).clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyAPSpoofQT.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyAPSpoofQT.setDescription('Represents the quiet time after reporting the AP spoofing attack event alarm.')
hh3cWIPSAtkDctPolicyCliSpoofQT = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 604800)).clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyCliSpoofQT.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyCliSpoofQT.setDescription('Represents the quiet time after reporting the client spoofing attack event alarm.')
hh3cWIPSAtkDctPolicyDosAssoQT = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 604800)).clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyDosAssoQT.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyDosAssoQT.setDescription('Represents the quiet time after reporting the dos of association attack event alarm.')
hh3cWIPSAtkDctPolicyDosAuthQT = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 604800)).clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyDosAuthQT.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyDosAuthQT.setDescription('Represents the quiet time after reporting the dos of authentication attack event alarm.')
hh3cWIPSAtkDctPolicyDosEAPOLStartQT = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 604800)).clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyDosEAPOLStartQT.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyDosEAPOLStartQT.setDescription('Represents the quiet time after reporting the dos of EAPOL-start attack event alarm.')
hh3cWIPSAtkDctPolicyDosReAssoQT = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 604800)).clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyDosReAssoQT.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyDosReAssoQT.setDescription('Represents the quiet time after reporting the dos of reassociation attack event alarm.')
hh3cWIPSAtkDctPolicyWeakIVQT = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 604800)).clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyWeakIVQT.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyWeakIVQT.setDescription('Represents the quiet time after reporting the weak-IV event alarm.')
hh3cWIPSAtkDctPolicyInvalidOUIAction = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("rogue", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyInvalidOUIAction.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyInvalidOUIAction.setDescription('Represents the action after detecting the invalid OUI, which classify the device as rogue device.')
hh3cWIPSAtkDctPolicyUnencryptedAuthApQT = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 604800)).clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyUnencryptedAuthApQT.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyUnencryptedAuthApQT.setDescription('Represents the quiet time after reporting the unencrypted-authorized-ap event alarm.')
hh3cWIPSAtkDctPolicyUnencryptedAuthClientQT = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 604800)).clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyUnencryptedAuthClientQT.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyUnencryptedAuthClientQT.setDescription('Represents the quiet time after reporting the unencrypted-trust-client event alarm.')
hh3cWIPSAtkDctPolicyPSAttackQT = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 604800)).clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyPSAttackQT.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyPSAttackQT.setDescription('Represents the quiet time after reporting the ps-attack event alarm.')
hh3cWIPSAtkDctPolicyPSAttackMinOffPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 150)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyPSAttackMinOffPacket.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyPSAttackMinOffPacket.setDescription('Specify the minimum number of OFF packets as threshold in detecting ps-attack.')
hh3cWIPSAtkDctPolicyPSAttackOnOffPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyPSAttackOnOffPercent.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyPSAttackOnOffPercent.setDescription('Specify the ratio of ON packets to OFF packets in percentage as threshold in detecting ps-attack.')
hh3cWIPSAtkDctPolicyApImpersonationQT = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 604800)).clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyApImpersonationQT.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyApImpersonationQT.setDescription('Represents the quiet time after reporting the ap-impersonation event alarm.')
hh3cWIPSAtkDctPolicyApImpersonationBeaconIncThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyApImpersonationBeaconIncThreshold.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyApImpersonationBeaconIncThreshold.setDescription('Specify the increased percentage threshold for beacon frames that can trigger an AP impersonation alert')
hh3cWIPSAtkDctPolicyApImpersonationBeaconIncWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 360000)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyApImpersonationBeaconIncWaitTime.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicyApImpersonationBeaconIncWaitTime.setDescription('Specify the waiting time before a suspected AP is determined as an AP impersonator. If the beacon frames keep on increasing beyond the threshold during the waiting time, then the suspected AP should be determined as an AP impersonator.')
hh3cWIPSAtkDctPolicySoftApConvertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 600)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicySoftApConvertTime.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSAtkDctPolicySoftApConvertTime.setDescription('Specify the minimum client-AP switchover threshold used to determine a soft AP')
hh3cWIPSStaticCtmListCfgTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 5), )
if mibBuilder.loadTexts: hh3cWIPSStaticCtmListCfgTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSStaticCtmListCfgTable.setDescription('The table provides the MAC address list of devices in the static countermeasure list.')
hh3cWIPSStaticCtmListCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 5, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSStaticCtmListMAC"))
if mibBuilder.loadTexts: hh3cWIPSStaticCtmListCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSStaticCtmListCfgEntry.setDescription('Each entry contains information of each MAC address in the static countermeasure list. ')
hh3cWIPSStaticCtmListMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 5, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cWIPSStaticCtmListMAC.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSStaticCtmListMAC.setDescription('Represents the MAC address in static countermeasure list.')
hh3cWIPSStaticCtmListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSStaticCtmListRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSStaticCtmListRowStatus.setDescription('The status of this table entry.')
hh3cWIPSStaticBlockListCfgTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 6), )
if mibBuilder.loadTexts: hh3cWIPSStaticBlockListCfgTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSStaticBlockListCfgTable.setDescription('The table provides the MAC address list of devices in the static block list. WIPS will ignore the frames from the devices in the list, and take the devices as rogue devices.')
hh3cWIPSStaticBlockListCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 6, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSStaticBlockListMAC"))
if mibBuilder.loadTexts: hh3cWIPSStaticBlockListCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSStaticBlockListCfgEntry.setDescription('Each entry contains information of each MAC address in the static block list. ')
hh3cWIPSStaticBlockListMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cWIPSStaticBlockListMAC.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSStaticBlockListMAC.setDescription('Represents the MAC address in static block list.')
hh3cWIPSStaticBlockListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSStaticBlockListRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSStaticBlockListRowStatus.setDescription('The status of this table entry.')
hh3cWIPSStaticTrustListCfgTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 7), )
if mibBuilder.loadTexts: hh3cWIPSStaticTrustListCfgTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSStaticTrustListCfgTable.setDescription('The table provides the MAC address list of devices in the static trust list. WIPS will take the devices in the list as authorized devices.')
hh3cWIPSStaticTrustListCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 7, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSStaticTrustListMAC"))
if mibBuilder.loadTexts: hh3cWIPSStaticTrustListCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSStaticTrustListCfgEntry.setDescription('Each entry contains information of each MAC address in the static trust list. ')
hh3cWIPSStaticTrustListMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cWIPSStaticTrustListMAC.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSStaticTrustListMAC.setDescription('Represents the MAC address in static trust list.')
hh3cWIPSStaticTrustListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSStaticTrustListRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSStaticTrustListRowStatus.setDescription('The status of this table entry.')
hh3cWIPSIgnoreListCfgTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 8), )
if mibBuilder.loadTexts: hh3cWIPSIgnoreListCfgTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSIgnoreListCfgTable.setDescription('The table provides the MAC address list of devices in the ignore list. WIPS will ignore the events caused by the device in the list.')
hh3cWIPSIgnoreListCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 8, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSIgnoreListMAC"))
if mibBuilder.loadTexts: hh3cWIPSIgnoreListCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSIgnoreListCfgEntry.setDescription('Each entry contains information of each MAC address in the ignore list. ')
hh3cWIPSIgnoreListMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 8, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cWIPSIgnoreListMAC.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSIgnoreListMAC.setDescription('Represents the MAC address in ignore list.')
hh3cWIPSIgnoreListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSIgnoreListRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSIgnoreListRowStatus.setDescription('The status of this table entry.')
hh3cWIPSDctModeTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 9), )
if mibBuilder.loadTexts: hh3cWIPSDctModeTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctModeTable.setDescription('The table represents the list of AP scanning mode configuration on radio.')
hh3cWIPSDctModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 9, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSDctModeAPName"), (0, "HH3C-WIPS-MIB", "hh3cWIPSDctModeRadio"))
if mibBuilder.loadTexts: hh3cWIPSDctModeEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctModeEntry.setDescription('Each entry contains information of WIPS scanning mode on radio.')
hh3cWIPSDctModeAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 9, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: hh3cWIPSDctModeAPName.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctModeAPName.setDescription('Represents the name of AP.')
hh3cWIPSDctModeRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: hh3cWIPSDctModeRadio.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctModeRadio.setDescription('Represents the radio of AP.')
hh3cWIPSDctModeScanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("accessFirst", 1), ("detectFirst", 2), ("middle", 3), ("detectOnly", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSDctModeScanMode.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctModeScanMode.setDescription('Represents the scanning mode. The radio enable-disable status must be disabled before WIPS scanning mode is configured on this radio. The mesh feature must be disabled before any WIPS scanning mode is set on radio. This radio can not apply any service template before the detectOnly scanning mode is set on the radio. ')
hh3cWIPSDctModeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSDctModeRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctModeRowStatus.setDescription('The status of this table entry.')
hh3cWIPSSigConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10))
hh3cWIPSSigPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 1), )
if mibBuilder.loadTexts: hh3cWIPSSigPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigPolicyTable.setDescription('The table defines the parameters for WIPS signature policy. One policy could be assigned to different VSDs. ')
hh3cWIPSSigPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 1, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSSigPolicyNameCfg"))
if mibBuilder.loadTexts: hh3cWIPSSigPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigPolicyEntry.setDescription('Each entry contains information of each signature policy.')
hh3cWIPSSigPolicyNameCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hh3cWIPSSigPolicyNameCfg.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigPolicyNameCfg.setDescription('Represents the name of signature policy.')
hh3cWIPSSigPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigPolicyRowStatus.setDescription('The status of this table entry.')
hh3cWIPSSigRule2PolicyTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 2), )
if mibBuilder.loadTexts: hh3cWIPSSigRule2PolicyTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigRule2PolicyTable.setDescription('The table defines the signature rules been attached to the signature policy. ')
hh3cWIPSSigRule2PolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 2, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSSigPolicyNameCfg"), (0, "HH3C-WIPS-MIB", "hh3cWIPSSigRule2PolicySigRuleIDCfg"))
if mibBuilder.loadTexts: hh3cWIPSSigRule2PolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigRule2PolicyEntry.setDescription('Each entry contains information of each signature rules attached to signature policy.')
hh3cWIPSSigRule2PolicySigRuleIDCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hh3cWIPSSigRule2PolicySigRuleIDCfg.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigRule2PolicySigRuleIDCfg.setDescription('Represents the ID of signature rule attached to signature policy.')
hh3cWIPSSigRule2PolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigRule2PolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigRule2PolicyRowStatus.setDescription('The status of this table entry.')
hh3cWIPSSigRule2PolicyPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigRule2PolicyPrecedence.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigRule2PolicyPrecedence.setDescription('Represents the precedence of signature rule attached to signature policy.')
hh3cWIPSSigRuleTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3), )
if mibBuilder.loadTexts: hh3cWIPSSigRuleTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigRuleTable.setDescription('The table defines the signature rules. ')
hh3cWIPSSigRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSSigRuleName"))
if mibBuilder.loadTexts: hh3cWIPSSigRuleEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigRuleEntry.setDescription('Each entry contains information of each signature rules.')
hh3cWIPSSigRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hh3cWIPSSigRuleName.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigRuleName.setDescription('Represents the name of signature rule.')
hh3cWIPSSigRuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigRuleID.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigRuleID.setDescription('Represents the ID of signature rule. The values from 1 to 32 are for built-in rules, which can not be assigned to user-define rules. When a user-define signature rule is being created, if ID is not specified, the ID of the rule will be automatically assigned, which values from 33 to 64. Once the rule is created, the ID is fixed and can not be changed again.')
hh3cWIPSSigRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigRuleRowStatus.setDescription('The status of this table entry.')
hh3cWIPSSigSubRuleMatchAll = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleMatchAll.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleMatchAll.setDescription('Represents whether match all the sub rules which have been configured in the signature rule. The default value for user-define rule is false, and for built-in rule is true.')
hh3cWIPSSigRuleDctPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1, 5), Unsigned32()).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigRuleDctPeriod.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigRuleDctPeriod.setDescription('Represents the detect period of signature rule. Available value limits from 1 to 3600. The default value depends on the certain rule. For user-define rules it is 60. The value 0xffffffff represents restoring default value operation.')
hh3cWIPSSigRuleTrackMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("perSig", 1), ("perMAC", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigRuleTrackMethod.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigRuleTrackMethod.setDescription("Represents the track-method for the signature rule. The default value depends on the certain rule. For user-define rules it is 'both(3)'.")
hh3cWIPSSigRuleDctThresholdPerMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigRuleDctThresholdPerMAC.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigRuleDctThresholdPerMAC.setDescription('Represents the detect threshold for per-MAC track-method. Available value limits from 1 to 32000. The default value depends on the certain rule. For user-define rules it is 1000. The value 0xffffffff represents restoring default value operation.')
hh3cWIPSSigRuleDctThresholdPerSig = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigRuleDctThresholdPerSig.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigRuleDctThresholdPerSig.setDescription('Represents the detect threshold for per-Signature track-method. Available value limits from 1 to 32000. The default value depends on the certain rule. For user-define rules it is 1000. The value 0xffffffff represents restoring default value operation.')
hh3cWIPSSigRuleActionEvtLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigRuleActionEvtLevel.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigRuleActionEvtLevel.setDescription('Represents the level of event sended for the action of reporting event alarm. Available value limits from 0 to 7. The default value depends on the certain rule. For user-define rules it is 0xffffffff.')
hh3cWIPSSigRuleQuietTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigRuleQuietTime.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigRuleQuietTime.setDescription('Represents the quiet time after reporting event alarm. Available value limits from 60 to 32000. The default value depends on the certain rule. For user-define rules it is 900. The value 0xffffffff represents restoring default value operation.')
hh3cWIPSSigSubRuleFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manage", 0), ("control", 1), ("data", 2), ("undo", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleFrameType.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleFrameType.setDescription("Represents the type of frame to match. 0x0 management type 0x1 control type 0x2 data type The default value depends on the certain rule. For user-define rules it is 'undo(3)'.")
hh3cWIPSSigSubRuleFrameSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("assocReq", 1), ("assocRes", 2), ("probeReq", 3), ("beacon", 4), ("disasso", 5), ("auth", 6), ("deauth", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleFrameSubType.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleFrameSubType.setDescription("Represents the sub-type of frame to match. 1 association request 2 association response 3 probe request 4 beacon 5 disassoc 6 authentication 7 de-authentication The default value depends on the certain rule. For user-define rules it is 'none(0)'.")
hh3cWIPSSigSubRuleMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleMac.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleMac.setDescription('Represents the MAC address or BSSID to match.')
hh3cWIPSSigSubRuleMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("source", 0), ("dest", 1), ("bssid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleMacType.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleMacType.setDescription('Represents the type of MAC address or BSSID to match. 0 Source MAC address in the 802.11 frame header 1 Destination MAC address in the 802.11 frame header 2 BSSID field in the 802.11 frame header')
hh3cWIPSSigSubRuleSeqNumMin = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleSeqNumMin.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleSeqNumMin.setDescription('Represents the minimun value of sequence number of packet to match. Available value limits from 0 to 4094. The default value depends on the certain rule. For user-define rules it is 0xffffffff. The value 0xffffffff represents restoring default value operation.')
hh3cWIPSSigSubRuleSeqNumMax = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1, 16), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleSeqNumMax.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleSeqNumMax.setDescription('Represents the maximum value of sequence number of packet to match. Available value limits from 1 to 4095. The default value depends on the certain rule. For user-define rules it is 0xffffffff. The value 0xffffffff represents restoring default value operation.')
hh3cWIPSSigSubRuleSSIDLenMin = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleSSIDLenMin.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleSSIDLenMin.setDescription('Represents the minimun value of SSID of packet to match. Available value limits from 0 to 31. The default value depends on the certain rule. For user-define rules it is 0xffffffff. The value 0xffffffff represents restoring default value operation.')
hh3cWIPSSigSubRuleSSIDLenMax = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleSSIDLenMax.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleSSIDLenMax.setDescription('Represents the maximum value of SSID of packet to match. Available value limits from 1 to 32. The default value depends on the certain rule. For user-define rules it is 0xffffffff. The value 0xffffffff represents restoring default value operation.')
hh3cWIPSSigSubRuleSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleSSID.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleSSID.setDescription('Represents the string of SSID of packet to match.')
hh3cWIPSSigSubRuleSSIDOpe = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("include", 1), ("notinclude", 2), ("equal", 3), ("notequal", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleSSIDOpe.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleSSIDOpe.setDescription('Represents the compare way of the SSID in the sub rule, including include/not include/equal/not equal.')
hh3cWIPSSigSubRuleSSIDCase = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 3, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleSSIDCase.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleSSIDCase.setDescription("Represents the case sensitive or not for the SSID match. 'true': Case insensitive. 'false': Case sensitive.")
hh3cWIPSSigSubRulePatternTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 4), )
if mibBuilder.loadTexts: hh3cWIPSSigSubRulePatternTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRulePatternTable.setDescription('The table defines the signature sub rules which define the user-define match way through pattern of packet. ')
hh3cWIPSSigSubRulePatternEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 4, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSSigRuleName"), (0, "HH3C-WIPS-MIB", "hh3cWIPSSigSubRulePatternID"))
if mibBuilder.loadTexts: hh3cWIPSSigSubRulePatternEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRulePatternEntry.setDescription('Each entry contains information of each pattern signature sub rules.')
hh3cWIPSSigSubRulePatternID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 27)))
if mibBuilder.loadTexts: hh3cWIPSSigSubRulePatternID.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRulePatternID.setDescription('Represents the ID of the pattern sub rule.')
hh3cWIPSSigSubRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 4, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRuleRowStatus.setDescription('The status of this table entry.')
hh3cWIPSSigSubRulePatternName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSSigSubRulePatternName.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRulePatternName.setDescription('Represents the name of the pattern sub rule.')
hh3cWIPSSigSubRulePatternOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSSigSubRulePatternOffset.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRulePatternOffset.setDescription('Represents the offset value of packet match.')
hh3cWIPSSigSubRulePatternMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSSigSubRulePatternMask.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRulePatternMask.setDescription('Represents the mask value of packet match.')
hh3cWIPSSigSubRulePatternValueMin = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 4, 1, 6), Unsigned32().clone(4294967295)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSSigSubRulePatternValueMin.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRulePatternValueMin.setDescription('Represents the minimun value of match byte. Available value limits from 0 to 65534.')
hh3cWIPSSigSubRulePatternValueMax = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 4, 1, 7), Unsigned32().clone(4294967295)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSSigSubRulePatternValueMax.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRulePatternValueMax.setDescription('Represents the maximun value of match byte. Available value limits from 1 to 65535.')
hh3cWIPSSigSubRulePatternFromPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 10, 4, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSSigSubRulePatternFromPayload.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSSigSubRulePatternFromPayload.setDescription('Represents whether match start from the payload of the data frame.')
hh3cWIPSCtmConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11))
hh3cWIPSCtmPolicyCfgSupportSet = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyCfgSupportSet.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyCfgSupportSet.setDescription('Represents the bit string of supported countermeasure policy. The specific countermeasure policy is supported if its corresponding bit is set to 1; otherwise its corresponding bit is set to 0. bit3: misconfigured AP bit4: rogue AP bit5: unauthorized station bit6: external AP bit9: misassociation station bit10: potential authorized AP bit11: potential rogue AP bit12: potential external AP bit13: uncategorized AP bit14: uncategorized station ')
hh3cWIPSCtmPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11, 2), )
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyTable.setDescription('The table defines the parameters for WIPS countermeasure policy. One policy could be assigned to different VSDs. ')
hh3cWIPSCtmPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11, 2, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSCtmPolicyName"))
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyEntry.setDescription('Each entry contains information of each countermeasure policy.')
hh3cWIPSCtmPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyName.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyName.setDescription('Represents the name of countermeasure policy.')
hh3cWIPSCtmPolicyCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyCfgRowStatus.setDescription('The status of this table entry.')
hh3cWIPSCtmPolicyBitString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyBitString.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyBitString.setDescription('Represents the bit string of countermeasure policy configuration. The specific countermeasure of device is enabled if its corresponding bit is set to 1; disabled if its corresponding bit is set to 0. bit3: misconfigured AP bit4: rogue AP bit5: unauthorized station bit6: external AP bit9: misassociation station bit10: potential authorized AP bit11: potential rogue AP bit12: potential external AP bit13: uncategorized AP bit14: uncategorized station')
hh3cWIPSCtmPolicyFixedChl = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11, 2, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyFixedChl.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyFixedChl.setDescription('Represents whether enable fixed channel scan function.')
hh3cWIPSCtmPolicyRogueAPPre = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11, 2, 1, 5), Unsigned32().clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyRogueAPPre.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyRogueAPPre.setDescription('Represents the precedence of countermeasure for rogue AP. Available value limits from 0 to 9. Value 0xffffffff represents undo operation.')
hh3cWIPSCtmPolicyPtRogueAPPre = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11, 2, 1, 6), Unsigned32().clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyPtRogueAPPre.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyPtRogueAPPre.setDescription('Represents the precedence of countermeasure for potential rogue AP. Available value limits from 0 to 9. Value 0xffffffff represents undo operation.')
hh3cWIPSCtmPolicyMisconfAPPre = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11, 2, 1, 7), Unsigned32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyMisconfAPPre.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyMisconfAPPre.setDescription('Represents the precedence of countermeasure for misconfigured AP. Available value limits from 0 to 9. Value 0xffffffff represents undo operation.')
hh3cWIPSCtmPolicyExternalAPPre = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11, 2, 1, 8), Unsigned32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyExternalAPPre.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyExternalAPPre.setDescription('Represents the precedence of countermeasure for external AP. Available value limits from 0 to 9. Value 0xffffffff represents undo operation.')
hh3cWIPSCtmPolicyPtExternalAPPre = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11, 2, 1, 9), Unsigned32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyPtExternalAPPre.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyPtExternalAPPre.setDescription('Represents the precedence of countermeasure for potential external AP. Available value limits from 0 to 9. Value 0xffffffff represents undo operation.')
hh3cWIPSCtmPolicyUncateAPPre = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11, 2, 1, 10), Unsigned32().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyUncateAPPre.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyUncateAPPre.setDescription('Represents the precedence of countermeasure for uncategorized AP. Available value limits from 0 to 9. Value 0xffffffff represents undo operation.')
hh3cWIPSCtmPolicyPtAuthAPPre = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11, 2, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyPtAuthAPPre.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyPtAuthAPPre.setDescription('Represents the precedence of countermeasure for potential authorized AP. Available value limits from 0 to 9. Value 0xffffffff represents undo operation.')
hh3cWIPSCtmPolicyMisassoStaPre = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11, 2, 1, 12), Unsigned32().clone(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyMisassoStaPre.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyMisassoStaPre.setDescription('Represents the precedence of countermeasure for misassociated station. Available value limits from 0 to 9. Value 0xffffffff represents undo operation.')
hh3cWIPSCtmPolicyUncateStaPre = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11, 2, 1, 13), Unsigned32().clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyUncateStaPre.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyUncateStaPre.setDescription('Represents the precedence of countermeasure for uncategorized station. Available value limits from 0 to 9. Value 0xffffffff represents undo operation.')
hh3cWIPSCtmPolicyUnauthStaPre = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11, 2, 1, 14), Unsigned32().clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyUnauthStaPre.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyUnauthStaPre.setDescription('Represents the precedence of countermeasure for unauthorized station. Available value limits from 0 to 9. Value 0xffffffff represents undo operation.')
hh3cWIPSCtmPolicyDevListTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11, 3), )
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyDevListTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyDevListTable.setDescription('The table defines the MAC address list of countermeasure device in WIPS countermeasure policy. ')
hh3cWIPSCtmPolicyDevListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11, 3, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSCtmPolicyName"), (0, "HH3C-WIPS-MIB", "hh3cWIPSCtmPolicyDevMAC"))
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyDevListEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyDevListEntry.setDescription('Each entry contains information of each MAC address of device.')
hh3cWIPSCtmPolicyDevMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyDevMAC.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyDevMAC.setDescription('Represents the MAC address of countermeasure device.')
hh3cWIPSCtmPolicyDevRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 11, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyDevRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmPolicyDevRowStatus.setDescription('The status of this table entry.')
hh3cWIPSMalPktDctConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 12))
hh3cWIPSMalPktDctCfgLogSupportSet = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 12, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSMalPktDctCfgLogSupportSet.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktDctCfgLogSupportSet.setDescription('Represents the bit string of supported malformed packet detect policy controlling the log function. The specific malformed packet detect policy is supported if its corresponding bit is set to 1; otherwise its corresponding bit is set to 0. bit0: invalid IE length bit1: duplicated IE bit2: redundant IE bit3: invalid packet length bit4: illegal IBSS and ESS bit5: invalid source address bit6: overflow EAPOL key length bit7: malformed authetication bit8: malformed association request bit9: malformed HT-IE bit10: large duration bit11: null probe response bit12: invalid deauthentication reason code bit13: invalid disassociation reason code bit14: overflow SSID length bit15: fata-jack bit17: invalid-channel')
hh3cWIPSMalPktDctCfgTrapSupportSet = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 12, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSMalPktDctCfgTrapSupportSet.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktDctCfgTrapSupportSet.setDescription('Represents the bit string of supported malformed packet detect policy controlling the trap function. The specific malformed packet detect policy is supported if its corresponding bit is set to 1; otherwise its corresponding bit is set to 0. bit0: invalid IE length bit1: duplicated IE bit2: redundant IE bit3: invalid packet length bit4: illegal IBSS and ESS bit5: invalid source address bit6: overflow EAPOL key length bit7: malformed authetication bit8: malformed association request bit9: malformed HT-IE bit10: large duration bit11: null probe response bit12: invalid deauthentication reason code bit13: invalid disassociation reason code bit14: overflow SSID length bit15: fata-jack bit17: invalid-channel')
hh3cWIPSMalPktDctPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 12, 3), )
if mibBuilder.loadTexts: hh3cWIPSMalPktDctPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktDctPolicyTable.setDescription('Represents.')
hh3cWIPSMalPktDctPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 12, 3, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSMalPktDctPolicyName"))
if mibBuilder.loadTexts: hh3cWIPSMalPktDctPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktDctPolicyEntry.setDescription('Represents.')
hh3cWIPSMalPktDctPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 12, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hh3cWIPSMalPktDctPolicyName.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktDctPolicyName.setDescription('Represents the name of malformed packet detect policy.')
hh3cWIPSMalPktDctPolicyCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 12, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSMalPktDctPolicyCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktDctPolicyCfgRowStatus.setDescription('The status of this table entry.')
hh3cWIPSMalPktDctPolicyLogBitString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 12, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSMalPktDctPolicyLogBitString.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktDctPolicyLogBitString.setDescription('Represents the bit string of malformed packet detect policy controlling the log function configuration. The specific malformed packet detect is enbled if its corresponding bit is set to 1; disabled its corresponding bit is set to 0. bit0: invalid IE length bit1: duplicated IE bit2: redundant IE bit3: invalid packet length bit4: illegal IBSS and ESS bit5: invalid source address bit6: overflow EAPOL key length bit7: malformed authetication bit8: malformed association request bit9: malformed HT-IE bit10: large duration bit11: null probe response bit12: invalid deauthentication reason code bit13: invalid disassociation reason code bit14: overflow SSID length bit15: fata-jack bit17: invalid-channel')
hh3cWIPSMalPktDctPolicyTrapBitString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 12, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSMalPktDctPolicyTrapBitString.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktDctPolicyTrapBitString.setDescription('Represents the bit string of malformed packet detect policy controlling the trap function configuration. The specific malformed packet detect is enbled if its corresponding bit is set to 1; disabled its corresponding bit is set to 0. bit0: invalid IE length bit1: duplicated IE bit2: redundant IE bit3: invalid packet length bit4: illegal IBSS and ESS bit5: invalid source address bit6: overflow EAPOL key length bit7: malformed authetication bit8: malformed association request bit9: malformed HT-IE bit10: large duration bit11: null probe response bit12: invalid deauthentication reason code bit13: invalid disassociation reason code bit14: overflow SSID length bit15: fata-jack bit17: invalid-channel')
hh3cWIPSMalPktDctPolicyDurationThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 12, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(5000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSMalPktDctPolicyDurationThreshold.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktDctPolicyDurationThreshold.setDescription('Represents the threshold of duration for large duration malformed packet detection.')
hh3cWIPSMalPktDctPolicyQuietTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 12, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 604800)).clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSMalPktDctPolicyQuietTime.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktDctPolicyQuietTime.setDescription('Represents the quiet time after reporting event alarm.')
hh3cWIPSStaticTrustOUIListCfgTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 13), )
if mibBuilder.loadTexts: hh3cWIPSStaticTrustOUIListCfgTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSStaticTrustOUIListCfgTable.setDescription('The table provides the OUI list of devices in the static trust list. WIPS will take the devices in the list as authorized devices.')
hh3cWIPSStaticTrustOUIListCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 13, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSStaticTrustOUIListOUI"))
if mibBuilder.loadTexts: hh3cWIPSStaticTrustOUIListCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSStaticTrustOUIListCfgEntry.setDescription('Each entry contains information of each OUI in the static trust list. ')
hh3cWIPSStaticTrustOUIListOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 13, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3))
if mibBuilder.loadTexts: hh3cWIPSStaticTrustOUIListOUI.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSStaticTrustOUIListOUI.setDescription('Represents the OUI in static trust list.')
hh3cWIPSStaticTrustOUIListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 13, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSStaticTrustOUIListRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSStaticTrustOUIListRowStatus.setDescription('The status of this table entry.')
hh3cWIPSStaticTrustVendorListCfgTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 14), )
if mibBuilder.loadTexts: hh3cWIPSStaticTrustVendorListCfgTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSStaticTrustVendorListCfgTable.setDescription('The table provides the vendor list of devices in the static trust list. WIPS will take the devices in the list as authorized devices.')
hh3cWIPSStaticTrustVendorListCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 14, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSStaticTrustVendorListVendor"))
if mibBuilder.loadTexts: hh3cWIPSStaticTrustVendorListCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSStaticTrustVendorListCfgEntry.setDescription('Each entry contains information of each vendor in the static trust list. ')
hh3cWIPSStaticTrustVendorListVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 14, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: hh3cWIPSStaticTrustVendorListVendor.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSStaticTrustVendorListVendor.setDescription('Represents the vendor in static trust list.')
hh3cWIPSStaticTrustVendorListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 1, 14, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cWIPSStaticTrustVendorListRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSStaticTrustVendorListRowStatus.setDescription('The status of this table entry.')
hh3cWIPSDetectGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2))
hh3cWIPSDctAPTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1), )
if mibBuilder.loadTexts: hh3cWIPSDctAPTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPTable.setDescription('The table represents the list of possible BSS information for APs detected by the WIPS.')
hh3cWIPSDctAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSDctAPVSD"), (0, "HH3C-WIPS-MIB", "hh3cWIPSDctAPBSSID"))
if mibBuilder.loadTexts: hh3cWIPSDctAPEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPEntry.setDescription('Each entry contains possible BSS information of each AP detected by WIPS.')
hh3cWIPSDctAPVSD = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hh3cWIPSDctAPVSD.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPVSD.setDescription('Represents the virtual security domain where the BSS was detected.')
hh3cWIPSDctAPBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: hh3cWIPSDctAPBSSID.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPBSSID.setDescription('Represents the Basic Service Set.')
hh3cWIPSDctAPRunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctAPRunningTime.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPRunningTime.setDescription('Represents the time since AP started to work, which is got from beacon/probe response frame.')
hh3cWIPSDctAPRunTmLastUpdateTm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctAPRunTmLastUpdateTm.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPRunTmLastUpdateTm.setDescription('Represents the time update hh3cWIPSDctAPRunningTime since system is up.')
hh3cWIPSDctAPIsCountered = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctAPIsCountered.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPIsCountered.setDescription('Represents whether the detected AP is countered by WIPS.')
hh3cWIPSDctAPWorkChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 6), Hh3cWIPSChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctAPWorkChannel.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPWorkChannel.setDescription('Represents the radio channel which the detected AP work on.')
hh3cWIPSDctAPRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 7), Hh3cWIPSRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctAPRadioType.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPRadioType.setDescription('Represents the radio type used by the detected AP.')
hh3cWIPSDctAPAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 8), Hh3cWIPSAuthMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctAPAuthMethod.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPAuthMethod.setDescription('Represents the authentication method used by the detected AP. none(1) - No key management mode configured, psk(2) - pre-shared key authentication, dot1x(3) - 802.1x authentication, other(4) - other authentication, psk/dot1x(5) - psk and dot1x authentication, psk/other(6) - psk and other authentication, dot1x/other(7) - dot1x and other authentication, psk/dot1x/other(8) - psk, dot1x and other authentication.')
hh3cWIPSDctAPEncryptMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 9), Hh3cWIPSEncryptMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctAPEncryptMethod.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPEncryptMethod.setDescription('Represents the encrypt method used by the detected AP. none(1) - clear text or no cipher method is configure, wep(2) - WEP key, tkip(4) - WPA Temporal Key encryption, ccmp(8) - WPA AES CCMP encryption')
hh3cWIPSDctAPSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 10), Hh3cWIPSAPSecurityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctAPSecurity.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPSecurity.setDescription('Represents the security suites of the detected AP. clear 0x01 wpa2 0x02 wpa 0x04 wep 0x08')
hh3cWIPSDctAPSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctAPSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPSeverityLevel.setDescription('Represents the severity level of the detected AP.')
hh3cWIPSDctAPLastDctTm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctAPLastDctTm.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPLastDctTm.setDescription('Represents the time that AP was detected for the last time since system is up.')
hh3cWIPSDctAPFirstDctTm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctAPFirstDctTm.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPFirstDctTm.setDescription('Represents the time that AP was detected for the first time since system is up.')
hh3cWIPSDctAPAdd2BlackList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSDctAPAdd2BlackList.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPAdd2BlackList.setDescription('Represents whether the AP will be taken as a rogue AP. If the value is true, the MAC address will be automatically added into hh3cWIPSBlockListTable and the category of the AP will be taken as rogue. If the value is false, the MAC address will be automatically deleted from hh3cWIPSBlockListTable.')
hh3cWIPSDctAPAdd2WhiteList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSDctAPAdd2WhiteList.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPAdd2WhiteList.setDescription('Represents whether the AP will be taken as an authorized AP. If the value is true, the MAC address will be automatically added into hh3cWIPSTrustListTable. If the value is false, the MAC address will be automatically deleted from hh3cWIPSTrustListTable')
hh3cWIPSDctAPAdd2IgnoreList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSDctAPAdd2IgnoreList.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPAdd2IgnoreList.setDescription('Represents whether the AP will be taken as an ignored AP. If the value is true, the MAC address will be automatically added into hh3cWIPSIgnoreListTable. If the value is false, the MAC address will be automatically deleted from hh3cWIPSIgnoreListTable')
hh3cWIPSDctAPAdd2CtmList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSDctAPAdd2CtmList.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPAdd2CtmList.setDescription('Represents whether the AP will be taken as a countered AP. If the value is true, the MAC address will be automatically added into hh3cWIPSCountermeasureListTable. If the value is false, the MAC address will be automatically deleted from hh3cWIPSCountermeasureListTable.')
hh3cWIPSDctAPCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 18), Hh3cWIPSAPCategoryType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSDctAPCategory.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPCategory.setDescription('Represents the categorized result of the AP. For set operation, only the following values are valid: authorized(2),rogue(3),misconfigured(4),external(5)')
hh3cWIPSDctAPCategoryWay = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 19), Hh3cWIPSDevCategoryWay().clone('autoByDev')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSDctAPCategoryWay.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPCategoryWay.setDescription('Represents by which way the AP is categorized. manual(1) -categorized by user autoByNMS(2) -categorized by NMS(Network Management System) autoByDev(3) -categorized by WIPS')
hh3cWIPSDctAPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 20), Hh3cWIPSDevStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctAPStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPStatus.setDescription('Represents the status of the AP detected by WIPS.')
hh3cWIPSDctAPSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctAPSSID.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPSSID.setDescription('Represents the SSID broadcasted by AP.')
hh3cWIPSDctAPAttachStaNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctAPAttachStaNum.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPAttachStaNum.setDescription('Represents the number of clients associated with the detected AP.')
hh3cWIPSDctAPRptSensorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctAPRptSensorNum.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPRptSensorNum.setDescription('Represents the number of sensors detecting the AP.')
hh3cWIPSDctAPVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 1, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctAPVendor.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPVendor.setDescription('Represents the vendor of this AP detected by WIPS.')
hh3cWIPSDctAPAttachStaTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 2), )
if mibBuilder.loadTexts: hh3cWIPSDctAPAttachStaTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPAttachStaTable.setDescription('The table represents the list of station associated with APs detected by the WIPS.')
hh3cWIPSDctAPAttachStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 2, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSDctAPVSD"), (0, "HH3C-WIPS-MIB", "hh3cWIPSDctAPBSSID"), (0, "HH3C-WIPS-MIB", "hh3cWIPSDctAPAttachStaMac"))
if mibBuilder.loadTexts: hh3cWIPSDctAPAttachStaEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPAttachStaEntry.setDescription('Each entry contains possible station information detected by WIPS.')
hh3cWIPSDctAPAttachStaMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cWIPSDctAPAttachStaMac.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPAttachStaMac.setDescription('Represents the MAC address of station associated with AP.')
hh3cWIPSDctAPAttachStaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctAPAttachStaRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPAttachStaRowStatus.setDescription("The status of this table entry. It is read-only and will return 'Not writable' for set operation.")
hh3cWIPSDctAPRptSensorTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 3), )
if mibBuilder.loadTexts: hh3cWIPSDctAPRptSensorTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPRptSensorTable.setDescription('The table represents the list of sensors.')
hh3cWIPSDctAPRptSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 3, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSDctAPVSD"), (0, "HH3C-WIPS-MIB", "hh3cWIPSDctAPBSSID"), (0, "HH3C-WIPS-MIB", "hh3cWIPSDctAPRptSensorName"))
if mibBuilder.loadTexts: hh3cWIPSDctAPRptSensorEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPRptSensorEntry.setDescription('Each entry contains possible sensor information of WIPS.')
hh3cWIPSDctAPRptSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: hh3cWIPSDctAPRptSensorName.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPRptSensorName.setDescription('Represents the name of sensor.')
hh3cWIPSDctAPRptSensorRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctAPRptSensorRadioId.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPRptSensorRadioId.setDescription('Represents on which radio the sensor AP detected the AP.')
hh3cWIPSDctAPRptRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctAPRptRSSI.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPRptRSSI.setDescription('Represents the current value of signal strength that WIPS sensor AP received from the AP.')
hh3cWIPSDctAPLastRptTm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctAPLastRptTm.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctAPLastRptTm.setDescription('Represents the time that AP was detected by this sensor for the last time since system is up.')
hh3cWIPSDctStaTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 4), )
if mibBuilder.loadTexts: hh3cWIPSDctStaTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaTable.setDescription('The table represents the list of possible information for stations detected by the WIPS.')
hh3cWIPSDctStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 4, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSDctStaVSD"), (0, "HH3C-WIPS-MIB", "hh3cWIPSDctStaMac"))
if mibBuilder.loadTexts: hh3cWIPSDctStaEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaEntry.setDescription('Each entry contains possible station information of each station detected by WIPS.')
hh3cWIPSDctStaVSD = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hh3cWIPSDctStaVSD.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaVSD.setDescription('Represents the virtual security domain in which the station was detected.')
hh3cWIPSDctStaMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 4, 1, 2), MacAddress())
if mibBuilder.loadTexts: hh3cWIPSDctStaMac.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaMac.setDescription('Represents the MAC address of station.')
hh3cWIPSDctStaAssocBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 4, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctStaAssocBSSID.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaAssocBSSID.setDescription('Represents the BSSID which station associates with.')
hh3cWIPSDctStaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 4, 1, 4), Hh3cWIPSDevStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctStaStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaStatus.setDescription('Represents the status of this station detected by WIPS.')
hh3cWIPSDctStaCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 4, 1, 5), Hh3cWIPSClientCategoryType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctStaCategory.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaCategory.setDescription('Represents the categorized result of the station.')
hh3cWIPSDctStaRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 4, 1, 6), Hh3cWIPSRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctStaRadioType.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaRadioType.setDescription('Represents the radio type used by the detected station.')
hh3cWIPSDctStaWorkChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 4, 1, 7), Hh3cWIPSChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctStaWorkChannel.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaWorkChannel.setDescription('Represents on which radio channel that WIPS sensor AP detected the station.')
hh3cWIPSDctStaIsCountered = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 4, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctStaIsCountered.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaIsCountered.setDescription('Represents whether the detected station is countered by WIPS.')
hh3cWIPSDctStaAdd2BlackList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 4, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSDctStaAdd2BlackList.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaAdd2BlackList.setDescription('Represents whether the station will be taken as a rogue station. If the value is true, the MAC address will be automatically added into hh3cWIPSBlockListTable and the category of the station will be taken as rogue. If the value is false, the MAC address will be automatically deleted from hh3cWIPSBlockListTable.')
hh3cWIPSDctStaAdd2WhiteList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 4, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSDctStaAdd2WhiteList.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaAdd2WhiteList.setDescription('Represents whether the station will be taken as an authorized station. If the value is true, the MAC address will be automatically added into hh3cWIPSTrustListTable. If the value is false, the MAC address will be automatically deleted from hh3cWIPSTrustListTable.')
hh3cWIPSDctStaAdd2IgnoreList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 4, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSDctStaAdd2IgnoreList.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaAdd2IgnoreList.setDescription('Represents whether the station will be taken as an ignored station. If the value is true, the MAC address will be automatically added into hh3cWIPSIgnoreListTable. If the value is false, the MAC address will be automatically deleted from hh3cWIPSIgnoreListTable.')
hh3cWIPSDctStaAdd2CtmList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 4, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSDctStaAdd2CtmList.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaAdd2CtmList.setDescription('Represents whether the station will be taken as a countered station. If the value is true, the MAC address will be automatically added into hh3cWIPSCountermeasureListTable. If the value is false, the MAC address will be automatically deleted from hh3cWIPSCountermeasureListTable.')
hh3cWIPSDctStaFirstDctTm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 4, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctStaFirstDctTm.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaFirstDctTm.setDescription('Represents the time that station was detected for the first time since system is up.')
hh3cWIPSDctStaLastDctTm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 4, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctStaLastDctTm.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaLastDctTm.setDescription('Represents the time that station was detected for the last time since system is up.')
hh3cWIPSDctStaRptSensorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctStaRptSensorNum.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaRptSensorNum.setDescription('Represents the number of sensors detecting the station.')
hh3cWIPSDctStaState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("authentication", 1), ("association", 2), ("eapSuccess", 3), ("eapLogoff", 4), ("disassociation", 5), ("deauthentication", 6), ("unassociation", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctStaState.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaState.setDescription('Represents the authentication state of station with AP.')
hh3cWIPSDctStaVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 4, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctStaVendor.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaVendor.setDescription('Represents the vendor of this station detected by WIPS.')
hh3cWIPSDctStaRptSensorTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 5), )
if mibBuilder.loadTexts: hh3cWIPSDctStaRptSensorTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaRptSensorTable.setDescription('The table represents the list of sensors detecting the station.')
hh3cWIPSDctStaRptSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 5, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSDctStaVSD"), (0, "HH3C-WIPS-MIB", "hh3cWIPSDctStaMac"), (0, "HH3C-WIPS-MIB", "hh3cWIPSDctStaRtpSensorName"))
if mibBuilder.loadTexts: hh3cWIPSDctStaRptSensorEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaRptSensorEntry.setDescription('Each entry contains possible sensor information of WIPS.')
hh3cWIPSDctStaRtpSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: hh3cWIPSDctStaRtpSensorName.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaRtpSensorName.setDescription('Represents the name of sensor.')
hh3cWIPSDctStaRptSensorRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctStaRptSensorRadioId.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaRptSensorRadioId.setDescription('Represents on which radio the sensor AP detected the station.')
hh3cWIPSDctStaRptRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctStaRptRSSI.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaRptRSSI.setDescription('Represents the current value of signal strength that WIPS sensor AP received from the station.')
hh3cWIPSDctStaLastRptTm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 5, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctStaLastRptTm.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctStaLastRptTm.setDescription('Represents the time that station was detected by this sensor for the last time since system is up.')
hh3cWIPSDctSSIDTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 6), )
if mibBuilder.loadTexts: hh3cWIPSDctSSIDTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctSSIDTable.setDescription('The table represents the list of possible ESS information for networks detected by WIPS.')
hh3cWIPSDctSSIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 6, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSDctNetworkVSD"), (0, "HH3C-WIPS-MIB", "hh3cWIPSDctNetworkSSID"), (0, "HH3C-WIPS-MIB", "hh3cWIPSDctNetworkCfg"))
if mibBuilder.loadTexts: hh3cWIPSDctSSIDEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctSSIDEntry.setDescription('Each entry contains possible ESS information of each ESS detected by WIPS.')
hh3cWIPSDctNetworkVSD = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hh3cWIPSDctNetworkVSD.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctNetworkVSD.setDescription('Represents the virtual security domain in which the ESS was detected.')
hh3cWIPSDctNetworkSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hh3cWIPSDctNetworkSSID.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctNetworkSSID.setDescription("Represents the service set identifier for the ESS. Using the ASCII value '1' represents that the SSID is not advertised in the beacon frames.")
hh3cWIPSDctNetworkCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 6, 1, 3), Unsigned32())
if mibBuilder.loadTexts: hh3cWIPSDctNetworkCfg.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctNetworkCfg.setDescription('Represents the encrypt method, security suite and authentication method which are used by the detected ESS. The lowest 8 bits mean encrypt method. The higher 8 bits mean security suite. The third 8 bits stand for authentication method. The higerest 8 bits are reserved. The meaning is shown as follows: 31 23 15 7 0 + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + | reserved | auth method | security suite|encryptmethod| + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + For encrypt method, the following values are supported: 1: none - clear text or no cipher method is configure, 2: wep - WEP key, 4: tkip - WPA Temporal Key encryption, 8: ccmp - WPA AES CCMP encryption For security suite, the following values are supported: 0x01: clear 0x02: wpa2 0x04: wpa 0x08: wep For authentication method, the following values are supported: 1: none - No key management mode configured, 2: psk - pre-shared key authentication, 3: dot1x - 802.1x authentication, 4: other - other authentication, 5: psk/dot1x - psk and dot1x authentication, 6: psk/other - psk and other authentication, 7: dot1x/other - dot1x and other authentication, 8: psk/dot1x/other - psk, dot1x and other authentication.')
hh3cWIPSDctNetworkFirstRptTm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 6, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctNetworkFirstRptTm.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctNetworkFirstRptTm.setDescription('Represents the time that ESS was detected for the first time since system is up.')
hh3cWIPSDctNetworkLastRptTm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 6, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctNetworkLastRptTm.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctNetworkLastRptTm.setDescription('Represents the time that ESS was detected for the last time since system is up.')
hh3cWIPSDctNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 6, 1, 6), Hh3cWIPSDevStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctNetworkStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctNetworkStatus.setDescription('Represents the status of this ESS detected by WIPS.')
hh3cWIPSDctNetworkSSIDHide = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 6, 1, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctNetworkSSIDHide.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctNetworkSSIDHide.setDescription('Represents whether the ESS broadcasted its SSID.')
hh3cWIPSDctNetworkBSSNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctNetworkBSSNum.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctNetworkBSSNum.setDescription('Represents the number of APs using the same SSID in the ESS.')
hh3cWIPSDctSSIDBSSTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 7), )
if mibBuilder.loadTexts: hh3cWIPSDctSSIDBSSTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctSSIDBSSTable.setDescription('The table represents the list of APs using the same SSID in the ESS.')
hh3cWIPSDctSSIDBSSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 7, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSDctNetworkVSD"), (0, "HH3C-WIPS-MIB", "hh3cWIPSDctNetworkSSID"), (0, "HH3C-WIPS-MIB", "hh3cWIPSDctNetworkCfg"), (0, "HH3C-WIPS-MIB", "hh3cWIPSDctNetworkBSSID"))
if mibBuilder.loadTexts: hh3cWIPSDctSSIDBSSEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctSSIDBSSEntry.setDescription('Each entry contains possible BSS information of each AP detected by WIPS.')
hh3cWIPSDctNetworkBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cWIPSDctNetworkBSSID.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctNetworkBSSID.setDescription('Represents the Basic Service Set.')
hh3cWIPSDctNetworkBSSWorkChl = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 7, 1, 2), Hh3cWIPSChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctNetworkBSSWorkChl.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctNetworkBSSWorkChl.setDescription('Represents on which radio channel that WIPS sensor AP detected the BSS.')
hh3cWIPSDctNetworkBSSStaNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctNetworkBSSStaNum.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctNetworkBSSStaNum.setDescription('Represents the number of clients associated with the detected BSS.')
hh3cWIPSBlockListTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 8), )
if mibBuilder.loadTexts: hh3cWIPSBlockListTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSBlockListTable.setDescription('The table represents the list of block device MAC address.')
hh3cWIPSBlockListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 8, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSBlockListMacAddress"))
if mibBuilder.loadTexts: hh3cWIPSBlockListEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSBlockListEntry.setDescription('Each entry contains block device MAC address information.')
hh3cWIPSBlockListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 8, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cWIPSBlockListMacAddress.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSBlockListMacAddress.setDescription('Represents the MAC address of block device.')
hh3cWIPSBlockListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("staticAndDynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSBlockListStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSBlockListStatus.setDescription('Represents the status of block device.')
hh3cWIPSChannelTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 9), )
if mibBuilder.loadTexts: hh3cWIPSChannelTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChannelTable.setDescription('The table represents the list of channel information.')
hh3cWIPSChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 9, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSChannelNum"))
if mibBuilder.loadTexts: hh3cWIPSChannelEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChannelEntry.setDescription('Each entry contains channel information.')
hh3cWIPSChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 9, 1, 1), Hh3cWIPSChannel())
if mibBuilder.loadTexts: hh3cWIPSChannelNum.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChannelNum.setDescription('Represents the channel number.')
hh3cWIPSChannelRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 9, 1, 2), Hh3cWIPSRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChannelRadioType.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChannelRadioType.setDescription('Represents the radio type used in the specific channel.')
hh3cWIPSChannelIsPermitted = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 9, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChannelIsPermitted.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChannelIsPermitted.setDescription('Represents whether the channel is permitted.')
hh3cWIPSChannelLastRptTm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 9, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChannelLastRptTm.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChannelLastRptTm.setDescription('Represents the latest time that detecting the channel is active.')
hh3cWIPSCountermeasureListTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 10), )
if mibBuilder.loadTexts: hh3cWIPSCountermeasureListTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCountermeasureListTable.setDescription('The table represents the list of global static countermeasure device information.')
hh3cWIPSCountermeasureListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 10, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSCtmListMacAddress"))
if mibBuilder.loadTexts: hh3cWIPSCountermeasureListEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCountermeasureListEntry.setDescription('Each entry contains countermeasure device information.')
hh3cWIPSCtmListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 10, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cWIPSCtmListMacAddress.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmListMacAddress.setDescription('Represents the MAC address of the countered device.')
hh3cWIPSCtmListLastestWorkChl = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 10, 1, 2), Hh3cWIPSChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSCtmListLastestWorkChl.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmListLastestWorkChl.setDescription('Represents the channel on which the countermeasure device was working.')
hh3cWIPSCtmListFirstTm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 10, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSCtmListFirstTm.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmListFirstTm.setDescription('Represents the first time that the device was countered since system is up.')
hh3cWIPSCtmListLastTm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 10, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSCtmListLastTm.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmListLastTm.setDescription('Represents the last time that the device was countered since system is up.')
hh3cWIPSCtmListQurCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSCtmListQurCnt.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmListQurCnt.setDescription('Represents how many times that the device was countered. ')
hh3cWIPSCtmListSensorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSCtmListSensorNum.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmListSensorNum.setDescription('Represents the number of sensors detecting the device.')
hh3cWIPSIgnoreListTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 11), )
if mibBuilder.loadTexts: hh3cWIPSIgnoreListTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSIgnoreListTable.setDescription('The table represents the list of ignored device information.')
hh3cWIPSIgnoreListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 11, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSIgnoreListMacAddress"))
if mibBuilder.loadTexts: hh3cWIPSIgnoreListEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSIgnoreListEntry.setDescription('Each entry contains ignored device information.')
hh3cWIPSIgnoreListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 11, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cWIPSIgnoreListMacAddress.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSIgnoreListMacAddress.setDescription('Represents the MAC address of the ignored device.')
hh3cWIPSIgnoreListFirstIgnoreTm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 11, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSIgnoreListFirstIgnoreTm.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSIgnoreListFirstIgnoreTm.setDescription('Represents the first time when the event caused by the device was ignored since system is up.')
hh3cWIPSIgnoreListLastIgnoreTm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 11, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSIgnoreListLastIgnoreTm.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSIgnoreListLastIgnoreTm.setDescription('Represents the last time when the event caused by the device was ignored since system is up.')
hh3cWIPSIgnoreListIgnoreCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSIgnoreListIgnoreCnt.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSIgnoreListIgnoreCnt.setDescription('Represents the number of times of the event caused by device has been ignored.')
hh3cWIPSTrustListTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 12), )
if mibBuilder.loadTexts: hh3cWIPSTrustListTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSTrustListTable.setDescription('The table represents the list of trust device information.')
hh3cWIPSTrustListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 12, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSTrustListMacAddress"))
if mibBuilder.loadTexts: hh3cWIPSTrustListEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSTrustListEntry.setDescription('Each entry contains information of a trust device.')
hh3cWIPSTrustListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 12, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cWIPSTrustListMacAddress.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSTrustListMacAddress.setDescription('Represents the MAC address of the trust device.')
hh3cWIPSTrustListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("staticAndDynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSTrustListStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSTrustListStatus.setDescription('Represents the status of the trust device.')
hh3cWIPSChlStatTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13), )
if mibBuilder.loadTexts: hh3cWIPSChlStatTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatTable.setDescription('The table represents the list of channel statistics information.')
hh3cWIPSChlStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSChlStatSensorMacAddr"), (0, "HH3C-WIPS-MIB", "hh3cWIPSChlStatChannel"))
if mibBuilder.loadTexts: hh3cWIPSChlStatEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatEntry.setDescription('Each entry contains information of channel statistics.')
hh3cWIPSChlStatSensorMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cWIPSChlStatSensorMacAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatSensorMacAddr.setDescription('Represents the MAC address of sensor.')
hh3cWIPSChlStatChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 2), Hh3cWIPSChannel())
if mibBuilder.loadTexts: hh3cWIPSChlStatChannel.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatChannel.setDescription('Represents the statistics channel.')
hh3cWIPSChlStatTotalPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatTotalPkt.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatTotalPkt.setDescription('Represents the count of total frames in the channel.')
hh3cWIPSChlStatTotalByte = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatTotalByte.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatTotalByte.setDescription('Represents the length of total frames in the channel.')
hh3cWIPSChlStatBmcastPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatBmcastPkt.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatBmcastPkt.setDescription('Represents the count of broadcast and multicast frames in the channel.')
hh3cWIPSChlStatBmcastByte = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatBmcastByte.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatBmcastByte.setDescription('Represents the total length of broadcast and multicast frames in the channel.')
hh3cWIPSChlStatUnicastPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatUnicastPkt.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatUnicastPkt.setDescription('Represents the count of unicast frames in the channel.')
hh3cWIPSChlStatUnicastByte = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatUnicastByte.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatUnicastByte.setDescription('Represents the total length of unicast frames in the channel.')
hh3cWIPSChlStatManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatManagement.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatManagement.setDescription('Represents the count of management frames in the channel.')
hh3cWIPSChlStatControl = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatControl.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatControl.setDescription('Represents the count of control frames in the channel.')
hh3cWIPSChlStatData = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatData.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatData.setDescription('Represents the count of data frames in the channel.')
hh3cWIPSChlStatBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatBeacon.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatBeacon.setDescription('Represents the count of beacon frames in the channel.')
hh3cWIPSChlStatRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatRTS.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatRTS.setDescription('Represents the count of RTS frames in the channel.')
hh3cWIPSChlStatCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatCTS.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatCTS.setDescription('Represents the count of CTS frames in the channel.')
hh3cWIPSChlStatProbeRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatProbeRequest.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatProbeRequest.setDescription('Represents the count of probe request frames in the channel.')
hh3cWIPSChlStatProbeResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatProbeResponse.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatProbeResponse.setDescription('Represents the count of probe response frames in the channel.')
hh3cWIPSChlStatFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatFragment.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatFragment.setDescription('Represents the count of fragment frames in the channel.')
hh3cWIPSChlStatRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatRetry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatRetry.setDescription('Represents the count of retry frames in the channel.')
hh3cWIPSChlStatEapSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatEapSuccess.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatEapSuccess.setDescription('Represents the count of EAP-Success frames in the channel.')
hh3cWIPSChlStatEapFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatEapFailure.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatEapFailure.setDescription('Represents the count of EAP-Failure frames in the channel.')
hh3cWIPSChlStatEapolStart = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatEapolStart.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatEapolStart.setDescription('Represents the count of EAPOL-Start frames in the channel.')
hh3cWIPSChlStatEapolLogoff = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatEapolLogoff.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatEapolLogoff.setDescription('Represents the count of EAPOL-Logoff frames in the channel.')
hh3cWIPSChlStatAssocRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatAssocRequest.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatAssocRequest.setDescription('Represents the count of association request frames in the channel.')
hh3cWIPSChlStatAssocResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatAssocResponse.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatAssocResponse.setDescription('Represents the count of association response frames in the channel.')
hh3cWIPSChlStatUnicastDisassoc = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatUnicastDisassoc.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatUnicastDisassoc.setDescription('Represents the count of unicast disassociation frames in the channel.')
hh3cWIPSChlStatBroadcastDisassoc = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatBroadcastDisassoc.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatBroadcastDisassoc.setDescription('Represents the count of broadcast disassociation frames in the channel.')
hh3cWIPSChlStatAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatAuthentication.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatAuthentication.setDescription('Represents the count of authentication frames in the channel.')
hh3cWIPSChlStatUnicastDeauthen = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatUnicastDeauthen.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatUnicastDeauthen.setDescription('Represents the count of unicast deauthentication frames in the channel.')
hh3cWIPSChlStatBroadcastDeauthen = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatBroadcastDeauthen.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatBroadcastDeauthen.setDescription('Represents the count of broadcast deauthentication frames in the channel.')
hh3cWIPSChlStatMalformed = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 13, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSChlStatMalformed.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSChlStatMalformed.setDescription('Represents the count of malformed frames in the channel.')
hh3cWIPSDevStatTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14), )
if mibBuilder.loadTexts: hh3cWIPSDevStatTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTable.setDescription('The table represents the list of device statistics information.')
hh3cWIPSDevStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSDevStatSensorMacAddr"), (0, "HH3C-WIPS-MIB", "hh3cWIPSDevStatDevMacAddress"), (0, "HH3C-WIPS-MIB", "hh3cWIPSDevStatChannel"))
if mibBuilder.loadTexts: hh3cWIPSDevStatEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatEntry.setDescription('Each entry contains information of device statistics.')
hh3cWIPSDevStatSensorMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cWIPSDevStatSensorMacAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatSensorMacAddr.setDescription('Represents the MAC address of sensor.')
hh3cWIPSDevStatDevMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 2), MacAddress())
if mibBuilder.loadTexts: hh3cWIPSDevStatDevMacAddress.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatDevMacAddress.setDescription('Represents the MAC address of the device detected by the sensor.')
hh3cWIPSDevStatChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 3), Hh3cWIPSChannel())
if mibBuilder.loadTexts: hh3cWIPSDevStatChannel.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatChannel.setDescription('Represents the device working channel.')
hh3cWIPSDevStatTxTotalPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxTotalPkt.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxTotalPkt.setDescription('Represents the count of total frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxTotalByte = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxTotalByte.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxTotalByte.setDescription('Represents the length of total frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxBMcastPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxBMcastPkt.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxBMcastPkt.setDescription('Represents the count of broadcast and multicast frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxBMcastByte = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxBMcastByte.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxBMcastByte.setDescription('Represents the length of broadcast and multicast frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxUnicastPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxUnicastPkt.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxUnicastPkt.setDescription('Represents the count of unicast frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxUnicastByte = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxUnicastByte.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxUnicastByte.setDescription('Represents the length of unicast frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxMgmt.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxMgmt.setDescription('Represents the count of management frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxCtrl.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxCtrl.setDescription('Represents the count of control frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxData = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxData.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxData.setDescription('Represents the count of data frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxBeacon.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxBeacon.setDescription('Represents the count of beacon frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxRTS.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxRTS.setDescription('Represents the count of RTS frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxProbeRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxProbeRequest.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxProbeRequest.setDescription('Represents the count of probe request frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxProbeResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxProbeResponse.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxProbeResponse.setDescription('Represents the count of probe response frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxFragment.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxFragment.setDescription('Represents the count of fragment frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxRetry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxRetry.setDescription('Represents the count of retry frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxAssocRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxAssocRequest.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxAssocRequest.setDescription('Represents the count of association request frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxAssocResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxAssocResponse.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxAssocResponse.setDescription('Represents the count of association response frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxUnicastDisassoc = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxUnicastDisassoc.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxUnicastDisassoc.setDescription('Represents the count of unicast disassociation frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxBcastDisassoc = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxBcastDisassoc.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxBcastDisassoc.setDescription('Represents the count of broadcast disassociation frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxAuth.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxAuth.setDescription('Represents the count of authentication frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxUnicastDeauth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxUnicastDeauth.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxUnicastDeauth.setDescription('Represents the count of unicast deauthentication frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxBcastDeauth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxBcastDeauth.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxBcastDeauth.setDescription('Represents the count of broadcast deauthentication frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxEAPSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxEAPSuccess.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxEAPSuccess.setDescription('Represents the count of EAP-Success frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxEAPFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxEAPFailure.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxEAPFailure.setDescription('Represents the count of EAP-Failure frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxEAPOLStart = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxEAPOLStart.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxEAPOLStart.setDescription('Represents the count of EAPOL-Start frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxEAPOLLogOff = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxEAPOLLogOff.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxEAPOLLogOff.setDescription('Represents the count of EAPOL-Logoff frames transmitted by the device in one channel.')
hh3cWIPSDevStatTxMalformed = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatTxMalformed.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatTxMalformed.setDescription('Represents the count of malformed frames transmitted by the device in one channel.')
hh3cWIPSDevStatRxTotalPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxTotalPkt.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxTotalPkt.setDescription('Represents the count of total frames received by the device in one channel.')
hh3cWIPSDevStatRxTotalByte = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxTotalByte.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxTotalByte.setDescription('Represents the length of total frames received by the device in one channel.')
hh3cWIPSDevStatRxUnicastPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxUnicastPkt.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxUnicastPkt.setDescription('Represents the count of unicast frames received by the device in one channel.')
hh3cWIPSDevStatRxUnicastByte = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxUnicastByte.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxUnicastByte.setDescription('Represents the length of unicast frames received by the device in one channel.')
hh3cWIPSDevStatRxMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxMgmt.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxMgmt.setDescription('Represents the count of management frames received by the device in one channel.')
hh3cWIPSDevStatRxCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxCtrl.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxCtrl.setDescription('Represents the count of control frames received by the device in one channel.')
hh3cWIPSDevStatRxData = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxData.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxData.setDescription('Represents the count of data frames received by the device in one channel.')
hh3cWIPSDevStatRxRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxRTS.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxRTS.setDescription('Represents the count of RTS frames recieved by the device in one channel.')
hh3cWIPSDevStatRxCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxCTS.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxCTS.setDescription('Represents the count of CTS frames recieved by the device in one channel.')
hh3cWIPSDevStatRxProbeRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxProbeRequest.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxProbeRequest.setDescription('Represents the count of probe request frames received by the device in one channel.')
hh3cWIPSDevStatRxProbeResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxProbeResponse.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxProbeResponse.setDescription('Represents the count of probe response frames received by the device in one channel.')
hh3cWIPSDevStatRxFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxFragment.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxFragment.setDescription('Represents the count of fragment frames received by the device in one channel.')
hh3cWIPSDevStatRxRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxRetry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxRetry.setDescription('Represents the count of retry frames received by the device in one channel.')
hh3cWIPSDevStatRxAssoRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxAssoRequest.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxAssoRequest.setDescription('Represents the count of association request frames received by the device in one channel.')
hh3cWIPSDevStatRxAssoResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxAssoResponse.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxAssoResponse.setDescription('Represents the count of association response frames received by the device in one channel.')
hh3cWIPSDevStatRxDisassoc = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxDisassoc.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxDisassoc.setDescription('Represents the count of disassociation frames received by the device in one channel.')
hh3cWIPSDevStatRxAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxAuth.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxAuth.setDescription('Represents the count of authentication frames received by the device in one channel.')
hh3cWIPSDevStatRxDeauth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxDeauth.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxDeauth.setDescription('Represents the count of deauthentication frames received by the device in one channel.')
hh3cWIPSDevStatRxEAPSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxEAPSuccess.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxEAPSuccess.setDescription('Represents the count of EAP-Success frames received by the device in one channel.')
hh3cWIPSDevStatRxEAPFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxEAPFailure.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxEAPFailure.setDescription('Represents the count of EAP-Failure frames received by the device in one channel.')
hh3cWIPSDevStatRxEAPOLStart = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxEAPOLStart.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxEAPOLStart.setDescription('Represents the count of EAPOL-Start frames received by the device in one channel.')
hh3cWIPSDevStatRxEAPOLLogoff = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxEAPOLLogoff.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxEAPOLLogoff.setDescription('Represents the count of EAPOL-Logoff frames received by the device in one channel.')
hh3cWIPSDevStatRxMalformed = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 14, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDevStatRxMalformed.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDevStatRxMalformed.setDescription('Represents the count of malformed frames received by the device in one channel.')
hh3cWIPSCtmDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 15), )
if mibBuilder.loadTexts: hh3cWIPSCtmDeviceTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmDeviceTable.setDescription('The table represents the list of device information in static and dynamic countermeasure list.')
hh3cWIPSCtmDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 15, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSCtmDeviceVSD"), (0, "HH3C-WIPS-MIB", "hh3cWIPSCtmDeviceMAC"))
if mibBuilder.loadTexts: hh3cWIPSCtmDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmDeviceEntry.setDescription('Each entry contains information of countermeasure device.')
hh3cWIPSCtmDeviceVSD = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 15, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hh3cWIPSCtmDeviceVSD.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmDeviceVSD.setDescription('Represents the VSD which the device belongs to.')
hh3cWIPSCtmDeviceMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 15, 1, 2), MacAddress())
if mibBuilder.loadTexts: hh3cWIPSCtmDeviceMAC.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmDeviceMAC.setDescription('Represents the MAC address of countermeasure device.')
hh3cWIPSCtmDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("staticAnddynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSCtmDeviceType.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmDeviceType.setDescription('Represents the type of countermeasure device.')
hh3cWIPSCtmDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("idle", 1), ("pending", 2), ("action", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSCtmDeviceState.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmDeviceState.setDescription('Represents the state of countermeasure device.')
hh3cWIPSCtmDeviceStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 15, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSCtmDeviceStartTime.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmDeviceStartTime.setDescription('Represents the time when start to counter on the device.')
hh3cWIPSCtmDeviceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 15, 1, 6), Hh3cWIPSDeviceCategoryType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSCtmDeviceCategory.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmDeviceCategory.setDescription('Represents the category of the device.')
hh3cWIPSCtmDeviceChl = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 15, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSCtmDeviceChl.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmDeviceChl.setDescription('Represents the channel on which the device is countered.')
hh3cWIPSCtmDevicePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 15, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSCtmDevicePrecedence.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSCtmDevicePrecedence.setDescription('Represents the precedence of the device.')
hh3cWIPSMalPktStatTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 16), )
if mibBuilder.loadTexts: hh3cWIPSMalPktStatTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktStatTable.setDescription('The table represents the list of malformed packet statistics information.')
hh3cWIPSMalPktStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 16, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSMalPktStatSensorName"))
if mibBuilder.loadTexts: hh3cWIPSMalPktStatEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktStatEntry.setDescription('Each entry contains information of malformed pakcet.')
hh3cWIPSMalPktStatSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 16, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: hh3cWIPSMalPktStatSensorName.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktStatSensorName.setDescription('Represents the name of sensor.')
hh3cWIPSMalPktStatInvalidIELength = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 16, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSMalPktStatInvalidIELength.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktStatInvalidIELength.setDescription('Represents the count of the invalid IE length malformed packets.')
hh3cWIPSMalPktStatDuplicatedIE = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 16, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSMalPktStatDuplicatedIE.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktStatDuplicatedIE.setDescription('Represents the count of the duplicated IE malformed packets.')
hh3cWIPSMalPktStatRedundantIE = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 16, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSMalPktStatRedundantIE.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktStatRedundantIE.setDescription('Represents the count of the redundant IE malformed packets.')
hh3cWIPSMalPktStatInvalidPktLength = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 16, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSMalPktStatInvalidPktLength.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktStatInvalidPktLength.setDescription('Represents the count of the invalide packet length malformed packets.')
hh3cWIPSMalPktStatIllegalIBSSESS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 16, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSMalPktStatIllegalIBSSESS.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktStatIllegalIBSSESS.setDescription('Represents the count of the illegal bits of representing IBSS and ESS malformed packets.')
hh3cWIPSMalPktStatInvalidSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 16, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSMalPktStatInvalidSourceAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktStatInvalidSourceAddr.setDescription('Represents the count of invalid source address combination malformed pakcets.')
hh3cWIPSMalPktStatOverflowEAPOLKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 16, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSMalPktStatOverflowEAPOLKey.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktStatOverflowEAPOLKey.setDescription('Represents the count of the overflow EAPOL key malformed packets.')
hh3cWIPSMalPktStatMalAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 16, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSMalPktStatMalAuth.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktStatMalAuth.setDescription('Represents the count of the malformed authentication packets.')
hh3cWIPSMalPktStatMalAssoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 16, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSMalPktStatMalAssoReq.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktStatMalAssoReq.setDescription('Represents the count of the malformed association request packets.')
hh3cWIPSMalPktStatMalHTIE = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 16, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSMalPktStatMalHTIE.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktStatMalHTIE.setDescription('Represents the count of the malformed High Throughput IE segment packets.')
hh3cWIPSMalPktStatLargeDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 16, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSMalPktStatLargeDuration.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktStatLargeDuration.setDescription('Represents the count of the malformed large duration packets.')
hh3cWIPSMalPktStatNULLProbeRes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 16, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSMalPktStatNULLProbeRes.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktStatNULLProbeRes.setDescription('Represents the count of the malformed null probe response packets.')
hh3cWIPSMalPktStatInvalidDeAuthCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 16, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSMalPktStatInvalidDeAuthCode.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktStatInvalidDeAuthCode.setDescription('Represents the count of the malformed invalid deauthentication reason code packets.')
hh3cWIPSMalPktStatInvalidDisAssoCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 16, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSMalPktStatInvalidDisAssoCode.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktStatInvalidDisAssoCode.setDescription('Represents the count of the malformed invalid disassociation reason code packets.')
hh3cWIPSMalPktStatOverflowSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 16, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSMalPktStatOverflowSSID.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktStatOverflowSSID.setDescription('Represents the count of the malformed SSID length overflow packets.')
hh3cWIPSMalPktStatFatajack = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 16, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSMalPktStatFatajack.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktStatFatajack.setDescription('Represents the count of FATA-Jack attack pakcets.')
hh3cWIPSMalPktStatInvalidChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 16, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSMalPktStatInvalidChannel.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSMalPktStatInvalidChannel.setDescription('Represents the count of Invalid-Channel attack pakcets.')
hh3cWIPSDctUnassocStaTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 17), )
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaTable.setDescription('The table represents the list of possible information for Unassociated stations detected by the WIPS.')
hh3cWIPSDctUnassocStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 17, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSDctUnassocStaVSD"), (0, "HH3C-WIPS-MIB", "hh3cWIPSDctUnassocStaMac"))
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaEntry.setDescription('Each entry contains possible station information of each Unassociated station detected by WIPS.')
hh3cWIPSDctUnassocStaVSD = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 17, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaVSD.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaVSD.setDescription('Represents the virtual security domain in which the Unassociated station was detected.')
hh3cWIPSDctUnassocStaMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 17, 1, 2), MacAddress())
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaMac.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaMac.setDescription('Represents the MAC address of Unassociated station.')
hh3cWIPSDctUnassocStaCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 17, 1, 3), Hh3cWIPSClientCategoryType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaCategory.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaCategory.setDescription('Represents the categorized result of the Unassociated station.')
hh3cWIPSDctUnassocStaRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 17, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaRadioType.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaRadioType.setDescription('Represents the radio type used by the Unassociated station. dot11a 0x01 dot11b 0x02 dot11g 0x04 dot11n 0x08 dot11gn 0x10 dot11an 0x20 dot11ac 0x40')
hh3cWIPSDctUnassocStaIsCountered = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 17, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaIsCountered.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaIsCountered.setDescription('Represents whether the Unassociated station is countered by WIPS.')
hh3cWIPSDctUnassocStaAdd2BlackList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 17, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaAdd2BlackList.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaAdd2BlackList.setDescription('Represents whether the station will be taken as a rogue station. If the value is true, the MAC address will be automatically added into hh3cWIPSBlockListTable and the category of the station will be taken as rogue. If the value is false, the MAC address will be automatically deleted from hh3cWIPSBlockListTable.')
hh3cWIPSDctUnassocStaAdd2WhiteList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 17, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaAdd2WhiteList.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaAdd2WhiteList.setDescription('Represents whether the station will be taken as an authorized station. If the value is true, the MAC address will be automatically added into hh3cWIPSTrustListTable. If the value is false, the MAC address will be automatically deleted from hh3cWIPSTrustListTable.')
hh3cWIPSDctUnassocStaAdd2IgnoreList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 17, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaAdd2IgnoreList.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaAdd2IgnoreList.setDescription('Represents whether the station will be taken as an ignored station. If the value is true, the MAC address will be automatically added into hh3cWIPSIgnoreListTable. If the value is false, the MAC address will be automatically deleted from hh3cWIPSIgnoreListTable.')
hh3cWIPSDctUnassocStaAdd2CtmList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 17, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaAdd2CtmList.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaAdd2CtmList.setDescription('Represents whether the station will be taken as a countered station. If the value is true, the MAC address will be automatically added into hh3cWIPSCountermeasureListTable. If the value is false, the MAC address will be automatically deleted from hh3cWIPSCountermeasureListTable.')
hh3cWIPSDctUnassocStaFirstDctTm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 17, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaFirstDctTm.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaFirstDctTm.setDescription('Represents the time that station was detected for the first time since system is up.')
hh3cWIPSDctUnassocStaLastDctTm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 17, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaLastDctTm.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaLastDctTm.setDescription('Represents the time that station was detected for the last time since system is up.')
hh3cWIPSDctUnassocStaRptSensorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 17, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaRptSensorNum.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaRptSensorNum.setDescription('Represents the number of sensors detecting the Unassociated station.')
hh3cWIPSDctUnassocStaState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 17, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("authentication", 1), ("association", 2), ("eapSuccess", 3), ("eapLogoff", 4), ("disassociation", 5), ("deauthentication", 6), ("unassociation", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaState.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaState.setDescription('Represents the authentication state of Unassociated station with AP.')
hh3cWIPSDctUnassocStaVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 17, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaVendor.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaVendor.setDescription('Represents the vendor of this Unassociated station detected by WIPS.')
hh3cWIPSDctUnassocStaRptSensorTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 18), )
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaRptSensorTable.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaRptSensorTable.setDescription('The table represents the list of sensors detecting the Unassociated station.')
hh3cWIPSDctUnassocStaRptSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 18, 1), ).setIndexNames((0, "HH3C-WIPS-MIB", "hh3cWIPSDctUnassocStaVSD"), (0, "HH3C-WIPS-MIB", "hh3cWIPSDctUnassocStaMac"), (0, "HH3C-WIPS-MIB", "hh3cWIPSDctUnassocStaRtpSensorName"))
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaRptSensorEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaRptSensorEntry.setDescription('Each entry contains possible sensor information of WIPS.')
hh3cWIPSDctUnassocStaRtpSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 18, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaRtpSensorName.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaRtpSensorName.setDescription('Represents the name of sensor.')
hh3cWIPSDctUnassocStaRptSensorRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaRptSensorRadioId.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaRptSensorRadioId.setDescription('Represents on which radio the sensor AP detected the Unassociated station.')
hh3cWIPSDctUnassocStaRptRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 18, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaRptRSSI.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaRptRSSI.setDescription('Represents the current value of signal strength that WIPS sensor AP received from the Unassociated station.')
hh3cWIPSDctUnassocStaLastRptTm = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 118, 2, 18, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaLastRptTm.setStatus('current')
if mibBuilder.loadTexts: hh3cWIPSDctUnassocStaLastRptTm.setDescription('Represents the time that Unassociated station was detected by this sensor for the last time since system is up.')
hh3cWIPSNotifyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 118, 3))
mibBuilder.exportSymbols("HH3C-WIPS-MIB", hh3cWIPSSigSubRuleFrameType=hh3cWIPSSigSubRuleFrameType, hh3cWIPSDctUnassocStaRadioType=hh3cWIPSDctUnassocStaRadioType, hh3cWIPSAtkDctPolicyDosAssoQT=hh3cWIPSAtkDctPolicyDosAssoQT, hh3cWIPSGlobalConfigGroup=hh3cWIPSGlobalConfigGroup, hh3cWIPSDctAPAuthMethod=hh3cWIPSDctAPAuthMethod, hh3cWIPSChlStatEntry=hh3cWIPSChlStatEntry, hh3cWIPSSigSubRuleFrameSubType=hh3cWIPSSigSubRuleFrameSubType, hh3cWIPSSigRule2PolicyPrecedence=hh3cWIPSSigRule2PolicyPrecedence, hh3cWIPSCtmListLastestWorkChl=hh3cWIPSCtmListLastestWorkChl, hh3cWIPSDevStatTxRTS=hh3cWIPSDevStatTxRTS, hh3cWIPSMalPktStatFatajack=hh3cWIPSMalPktStatFatajack, hh3cWIPSChannelEntry=hh3cWIPSChannelEntry, hh3cWIPSDctUnassocStaVendor=hh3cWIPSDctUnassocStaVendor, hh3cWIPSDevStatTxTotalPkt=hh3cWIPSDevStatTxTotalPkt, hh3cWIPSDctStaRptSensorRadioId=hh3cWIPSDctStaRptSensorRadioId, hh3cWIPSMalPktDctConfigGroup=hh3cWIPSMalPktDctConfigGroup, hh3cWIPSMalPktStatInvalidSourceAddr=hh3cWIPSMalPktStatInvalidSourceAddr, hh3cWIPSMalPktStatMalHTIE=hh3cWIPSMalPktStatMalHTIE, hh3cWIPSMalPktDctPolicyName=hh3cWIPSMalPktDctPolicyName, hh3cWIPSADOSEnable=hh3cWIPSADOSEnable, hh3cWIPSChlStatAssocRequest=hh3cWIPSChlStatAssocRequest, hh3cWIPSStaticBlockListMAC=hh3cWIPSStaticBlockListMAC, hh3cWIPSAPClaRowStatus=hh3cWIPSAPClaRowStatus, hh3cWIPSDctUnassocStaState=hh3cWIPSDctUnassocStaState, hh3cWIPSDctStaAdd2IgnoreList=hh3cWIPSDctStaAdd2IgnoreList, hh3cWIPSSTAInactiveTime=hh3cWIPSSTAInactiveTime, hh3cWIPSMaxAPNum=hh3cWIPSMaxAPNum, hh3cWIPSMalPktStatMalAuth=hh3cWIPSMalPktStatMalAuth, hh3cWIPSAtkDctPolicyCfgTable=hh3cWIPSAtkDctPolicyCfgTable, hh3cWIPSCtmPolicyPtExternalAPPre=hh3cWIPSCtmPolicyPtExternalAPPre, hh3cWIPSIgnoreListMAC=hh3cWIPSIgnoreListMAC, hh3cWIPSDevStatRxEAPOLStart=hh3cWIPSDevStatRxEAPOLStart, hh3cWIPSSigRule2PolicyEntry=hh3cWIPSSigRule2PolicyEntry, hh3cWIPSIgnoreListCfgEntry=hh3cWIPSIgnoreListCfgEntry, hh3cWIPSStatisticPeriod=hh3cWIPSStatisticPeriod, hh3cWIPSDctUnassocStaMac=hh3cWIPSDctUnassocStaMac, hh3cWIPSBlockListEntry=hh3cWIPSBlockListEntry, hh3cWIPSMalPktStatMalAssoReq=hh3cWIPSMalPktStatMalAssoReq, hh3cWIPSSigSubRuleMacType=hh3cWIPSSigSubRuleMacType, hh3cWIPSSigRuleName=hh3cWIPSSigRuleName, hh3cWIPSSigSubRulePatternFromPayload=hh3cWIPSSigSubRulePatternFromPayload, hh3cWIPSDctAPEntry=hh3cWIPSDctAPEntry, hh3cWIPSAPAuthType=hh3cWIPSAPAuthType, hh3cWIPSDctAPRptSensorTable=hh3cWIPSDctAPRptSensorTable, hh3cWIPSSigSubRulePatternValueMin=hh3cWIPSSigSubRulePatternValueMin, hh3cWIPSBlocklistAction=hh3cWIPSBlocklistAction, hh3cWIPSAtkDctPolicyCfgRowStatus=hh3cWIPSAtkDctPolicyCfgRowStatus, hh3cWIPSCtmListSensorNum=hh3cWIPSCtmListSensorNum, hh3cWIPSDctAPRptSensorNum=hh3cWIPSDctAPRptSensorNum, hh3cWIPSChlStatUnicastByte=hh3cWIPSChlStatUnicastByte, hh3cWIPSAccessFlowScanEnable=hh3cWIPSAccessFlowScanEnable, hh3cWIPSDctUnassocStaLastDctTm=hh3cWIPSDctUnassocStaLastDctTm, hh3cWIPSReclassificationPeriod=hh3cWIPSReclassificationPeriod, hh3cWIPSDctStaIsCountered=hh3cWIPSDctStaIsCountered, hh3cWIPSDctUnassocStaRptSensorNum=hh3cWIPSDctUnassocStaRptSensorNum, hh3cWIPSDctUnassocStaCategory=hh3cWIPSDctUnassocStaCategory, hh3cWIPSCtmDeviceType=hh3cWIPSCtmDeviceType, hh3cWIPSDevStatRxRetry=hh3cWIPSDevStatRxRetry, hh3cWIPSSigRuleID=hh3cWIPSSigRuleID, hh3cWIPSSigRuleDctPeriod=hh3cWIPSSigRuleDctPeriod, hh3cWIPSDctNetworkSSID=hh3cWIPSDctNetworkSSID, hh3cWIPSCtmDeviceMAC=hh3cWIPSCtmDeviceMAC, hh3cWIPSDevUpdateTime=hh3cWIPSDevUpdateTime, hh3cWIPSSigSubRulePatternOffset=hh3cWIPSSigSubRulePatternOffset, hh3cWIPSDevStatTxFragment=hh3cWIPSDevStatTxFragment, hh3cWIPSDctUnassocStaAdd2BlackList=hh3cWIPSDctUnassocStaAdd2BlackList, hh3cWIPSDctAPAdd2IgnoreList=hh3cWIPSDctAPAdd2IgnoreList, hh3cWIPSDevStatRxUnicastByte=hh3cWIPSDevStatRxUnicastByte, hh3cWIPSVsdMalPktPolicyNameCfg=hh3cWIPSVsdMalPktPolicyNameCfg, hh3cWIPSTrustListMacAddress=hh3cWIPSTrustListMacAddress, hh3cWIPSMinClientNum=hh3cWIPSMinClientNum, hh3cWIPSIgnoreListIgnoreCnt=hh3cWIPSIgnoreListIgnoreCnt, hh3cWIPSDevStatRxTotalByte=hh3cWIPSDevStatRxTotalByte, hh3cWIPSDevStatTxProbeRequest=hh3cWIPSDevStatTxProbeRequest, hh3cWIPSDevStatTxBcastDisassoc=hh3cWIPSDevStatTxBcastDisassoc, hh3cWIPSDevStatTxMgmt=hh3cWIPSDevStatTxMgmt, hh3cWIPSMinRSSIValue=hh3cWIPSMinRSSIValue, hh3cWIPSDctNetworkLastRptTm=hh3cWIPSDctNetworkLastRptTm, hh3cWIPSDctAPCategoryWay=hh3cWIPSDctAPCategoryWay, hh3cWIPSDctStaRptRSSI=hh3cWIPSDctStaRptRSSI, hh3cWIPSMinDuration=hh3cWIPSMinDuration, hh3cWIPSAtkDctPolicyCfgEntry=hh3cWIPSAtkDctPolicyCfgEntry, hh3cWIPSAtkDctPolicyUnencryptedAuthApQT=hh3cWIPSAtkDctPolicyUnencryptedAuthApQT, hh3cWIPSStaticTrustVendorListCfgTable=hh3cWIPSStaticTrustVendorListCfgTable, hh3cWIPSSigPolicyRowStatus=hh3cWIPSSigPolicyRowStatus, hh3cWIPSChannelNum=hh3cWIPSChannelNum, hh3cWIPSDctStaLastRptTm=hh3cWIPSDctStaLastRptTm, hh3cWIPSDynamicTrustListAgingTime=hh3cWIPSDynamicTrustListAgingTime, hh3cWIPSAtkDctPolicyApImpersonationQT=hh3cWIPSAtkDctPolicyApImpersonationQT, hh3cWIPSVsdCtmPolicyNameCfg=hh3cWIPSVsdCtmPolicyNameCfg, hh3cWIPSDevStatTxData=hh3cWIPSDevStatTxData, hh3cWIPSCtmDeviceTable=hh3cWIPSCtmDeviceTable, hh3cWIPSDctSSIDEntry=hh3cWIPSDctSSIDEntry, hh3cWIPSDevStatRxTotalPkt=hh3cWIPSDevStatRxTotalPkt, Hh3cWIPSRadioType=Hh3cWIPSRadioType, hh3cWIPSResetAllTrustList=hh3cWIPSResetAllTrustList, hh3cWIPSMalPktStatInvalidDeAuthCode=hh3cWIPSMalPktStatInvalidDeAuthCode, hh3cWIPSBlockListTable=hh3cWIPSBlockListTable, hh3cWIPSDctUnassocStaVSD=hh3cWIPSDctUnassocStaVSD, hh3cWIPSDctSSIDBSSTable=hh3cWIPSDctSSIDBSSTable, hh3cWIPSDctNetworkBSSID=hh3cWIPSDctNetworkBSSID, hh3cWIPSMalPktStatInvalidPktLength=hh3cWIPSMalPktStatInvalidPktLength, hh3cWIPSAPClaRuleMatchAll=hh3cWIPSAPClaRuleMatchAll, hh3cWIPSMalPktStatIllegalIBSSESS=hh3cWIPSMalPktStatIllegalIBSSESS, hh3cWIPSDctStaTable=hh3cWIPSDctStaTable, hh3cWIPSChlStatBmcastPkt=hh3cWIPSChlStatBmcastPkt, hh3cWIPSDevStatRxUnicastPkt=hh3cWIPSDevStatRxUnicastPkt, Hh3cWIPSDevCategoryWay=Hh3cWIPSDevCategoryWay, hh3cWIPSAtkDctPolicyPSAttackOnOffPercent=hh3cWIPSAtkDctPolicyPSAttackOnOffPercent, hh3cWIPSCtmPolicyDevListEntry=hh3cWIPSCtmPolicyDevListEntry, hh3cWIPSDctAPRunningTime=hh3cWIPSDctAPRunningTime, hh3cWIPSDctAPBSSID=hh3cWIPSDctAPBSSID, hh3cWIPSMalPktDctPolicyTrapBitString=hh3cWIPSMalPktDctPolicyTrapBitString, hh3cWIPSDevAgingTime=hh3cWIPSDevAgingTime, hh3cWIPSDctNetworkVSD=hh3cWIPSDctNetworkVSD, hh3cWIPSDctAPAttachStaNum=hh3cWIPSDctAPAttachStaNum, hh3cWIPSCtmDeviceCategory=hh3cWIPSCtmDeviceCategory, hh3cWIPSSigPolicyEntry=hh3cWIPSSigPolicyEntry, Hh3cWIPSEncryptMethod=Hh3cWIPSEncryptMethod, hh3cWIPSSigConfigGroup=hh3cWIPSSigConfigGroup, hh3cWIPSDevStatChannel=hh3cWIPSDevStatChannel, hh3cWIPSChannelIsPermitted=hh3cWIPSChannelIsPermitted, hh3cWIPSChannelLastRptTm=hh3cWIPSChannelLastRptTm, hh3cWIPSSigRuleRowStatus=hh3cWIPSSigRuleRowStatus, Hh3cWIPSClientCategoryType=Hh3cWIPSClientCategoryType, hh3cWIPSChlStatMalformed=hh3cWIPSChlStatMalformed, hh3cWIPSDctStaVendor=hh3cWIPSDctStaVendor, hh3cWIPSDctAPEncryptMethod=hh3cWIPSDctAPEncryptMethod, hh3cWIPSIgnoreListRowStatus=hh3cWIPSIgnoreListRowStatus, hh3cWIPSDevStatRxDeauth=hh3cWIPSDevStatRxDeauth, hh3cWIPSMalPktStatOverflowSSID=hh3cWIPSMalPktStatOverflowSSID, hh3cWIPSChlStatChannel=hh3cWIPSChlStatChannel, hh3cWIPSCtmDevicePrecedence=hh3cWIPSCtmDevicePrecedence, hh3cWIPSDctAPSSID=hh3cWIPSDctAPSSID, hh3cWIPSDevStatSensorMacAddr=hh3cWIPSDevStatSensorMacAddr, hh3cWIPSCtmPolicyMisassoStaPre=hh3cWIPSCtmPolicyMisassoStaPre, hh3cWIPSMinAPNum=hh3cWIPSMinAPNum, hh3cWIPSCtmPolicyDevMAC=hh3cWIPSCtmPolicyDevMAC, hh3cWIPSDevStatTxBeacon=hh3cWIPSDevStatTxBeacon, hh3cWIPSChlStatBeacon=hh3cWIPSChlStatBeacon, Hh3cWIPSDeviceCategoryType=Hh3cWIPSDeviceCategoryType, hh3cWIPSSigRule2PolicyTable=hh3cWIPSSigRule2PolicyTable, hh3cWIPSDevStatTxEAPOLLogOff=hh3cWIPSDevStatTxEAPOLLogOff, hh3cWIPSDctStaStatus=hh3cWIPSDctStaStatus, hh3cWIPSStaticTrustListRowStatus=hh3cWIPSStaticTrustListRowStatus, hh3cWIPSIgnoreListMacAddress=hh3cWIPSIgnoreListMacAddress, hh3cWIPSSigRuleActionEvtLevel=hh3cWIPSSigRuleActionEvtLevel, hh3cWIPSDctStaAdd2CtmList=hh3cWIPSDctStaAdd2CtmList, hh3cWIPSChlStatEapolStart=hh3cWIPSChlStatEapolStart, hh3cWIPSConfigGroup=hh3cWIPSConfigGroup, hh3cWIPSDetectGroup=hh3cWIPSDetectGroup, hh3cWIPSStaticTrustVendorListCfgEntry=hh3cWIPSStaticTrustVendorListCfgEntry, hh3cWIPSSigSubRulePatternName=hh3cWIPSSigSubRulePatternName, hh3cWIPSDevStatTxBMcastByte=hh3cWIPSDevStatTxBMcastByte, hh3cWIPSDctStaLastDctTm=hh3cWIPSDctStaLastDctTm, hh3cWIPSAtkDctPolicyInvalidOUIAction=hh3cWIPSAtkDctPolicyInvalidOUIAction, hh3cWIPSSigRuleQuietTime=hh3cWIPSSigRuleQuietTime, hh3cWIPSDctNetworkFirstRptTm=hh3cWIPSDctNetworkFirstRptTm, Hh3cWIPSAPSecurityType=Hh3cWIPSAPSecurityType, hh3cWIPSStaticTrustOUIListCfgEntry=hh3cWIPSStaticTrustOUIListCfgEntry, hh3cWIPSDctUnassocStaAdd2CtmList=hh3cWIPSDctUnassocStaAdd2CtmList, hh3cWIPSSigRule2PolicySigRuleIDCfg=hh3cWIPSSigRule2PolicySigRuleIDCfg, hh3cWIPSDevStatRxEAPFailure=hh3cWIPSDevStatRxEAPFailure, hh3cWIPSSensorRadioScanMode=hh3cWIPSSensorRadioScanMode, hh3cWIPSDctAPFirstDctTm=hh3cWIPSDctAPFirstDctTm, hh3cWIPSCountermeasureListTable=hh3cWIPSCountermeasureListTable, hh3cWIPSAPInactiveTime=hh3cWIPSAPInactiveTime, hh3cWIPSCtmConfigGroup=hh3cWIPSCtmConfigGroup, hh3cWIPSVsdNameCfg=hh3cWIPSVsdNameCfg, hh3cWIPSDctAPRptRSSI=hh3cWIPSDctAPRptRSSI, hh3cWIPSCtmPolicyPtRogueAPPre=hh3cWIPSCtmPolicyPtRogueAPPre, hh3cWIPSStaticBlockListCfgTable=hh3cWIPSStaticBlockListCfgTable, hh3cWIPSDevStatTxTotalByte=hh3cWIPSDevStatTxTotalByte, hh3cWIPSDevStatDevMacAddress=hh3cWIPSDevStatDevMacAddress, hh3cWIPSTrustListStatus=hh3cWIPSTrustListStatus, hh3cWIPSRule2VsdAPClaRuleNameCfg=hh3cWIPSRule2VsdAPClaRuleNameCfg, hh3cWIPSChlStatFragment=hh3cWIPSChlStatFragment, hh3cWIPSDevStatTxAuth=hh3cWIPSDevStatTxAuth, hh3cWIPSAtkDctPolicyCliSpoofQT=hh3cWIPSAtkDctPolicyCliSpoofQT, hh3cWIPSAPClaSubRuleSSIDOperator=hh3cWIPSAPClaSubRuleSSIDOperator, hh3cWIPSEnable=hh3cWIPSEnable, hh3cWIPSCtmPolicyCfgSupportSet=hh3cWIPSCtmPolicyCfgSupportSet, hh3cWIPSDctAPAdd2BlackList=hh3cWIPSDctAPAdd2BlackList, hh3cWIPSCtmDeviceState=hh3cWIPSCtmDeviceState, hh3cWIPSIgnoreListFirstIgnoreTm=hh3cWIPSIgnoreListFirstIgnoreTm, hh3cWIPSSigSubRuleSSIDLenMin=hh3cWIPSSigSubRuleSSIDLenMin, hh3cWIPSCtmPolicyUncateStaPre=hh3cWIPSCtmPolicyUncateStaPre, hh3cWIPSDctAPRadioType=hh3cWIPSDctAPRadioType, hh3cWIPSAPClaSubRuleSSIDCase=hh3cWIPSAPClaSubRuleSSIDCase, hh3cWIPSChlStatData=hh3cWIPSChlStatData, hh3cWIPSAtkDctPolicyAPFloodQT=hh3cWIPSAtkDctPolicyAPFloodQT, hh3cWIPSDctUnassocStaRptSensorEntry=hh3cWIPSDctUnassocStaRptSensorEntry, hh3cWIPSChlStatCTS=hh3cWIPSChlStatCTS, hh3cWIPSDevStatRxFragment=hh3cWIPSDevStatRxFragment, hh3cWIPSSigSubRuleSSIDLenMax=hh3cWIPSSigSubRuleSSIDLenMax, hh3cWIPSSensorNameCfg=hh3cWIPSSensorNameCfg, hh3cWIPSDctUnassocStaFirstDctTm=hh3cWIPSDctUnassocStaFirstDctTm, hh3cWIPSDevStatTxBMcastPkt=hh3cWIPSDevStatTxBMcastPkt, hh3cWIPSCtmListLastTm=hh3cWIPSCtmListLastTm, hh3cWIPSMalPktDctPolicyQuietTime=hh3cWIPSMalPktDctPolicyQuietTime, hh3cWIPSDevStatTxEAPSuccess=hh3cWIPSDevStatTxEAPSuccess, hh3cWIPSCtmPolicyBitString=hh3cWIPSCtmPolicyBitString, hh3cWIPSCtmDeviceStartTime=hh3cWIPSCtmDeviceStartTime, hh3cWIPSAPClaSeverityLevel=hh3cWIPSAPClaSeverityLevel, hh3cWIPSChannelRadioType=hh3cWIPSChannelRadioType, hh3cWIPSSigSubRuleMatchAll=hh3cWIPSSigSubRuleMatchAll, hh3cWIPSCtmPolicyDevListTable=hh3cWIPSCtmPolicyDevListTable, hh3cWIPSCtmPolicyTable=hh3cWIPSCtmPolicyTable, hh3cWIPSAPClaType=hh3cWIPSAPClaType, hh3cWIPSMalPktStatLargeDuration=hh3cWIPSMalPktStatLargeDuration, hh3cWIPSRule2VsdTable=hh3cWIPSRule2VsdTable, hh3cWIPSMaxDuration=hh3cWIPSMaxDuration, hh3cWIPSSigSubRuleRowStatus=hh3cWIPSSigSubRuleRowStatus, hh3cWIPSDctUnassocStaRptSensorRadioId=hh3cWIPSDctUnassocStaRptSensorRadioId, hh3cWIPSDctUnassocStaTable=hh3cWIPSDctUnassocStaTable, hh3cWIPSStaticTrustListMAC=hh3cWIPSStaticTrustListMAC, hh3cWIPSDctAPAttachStaTable=hh3cWIPSDctAPAttachStaTable, hh3cWIPSDevStatRxEAPSuccess=hh3cWIPSDevStatRxEAPSuccess, hh3cWIPSSigPolicyNameCfg=hh3cWIPSSigPolicyNameCfg, hh3cWIPSSensorRadioEntry=hh3cWIPSSensorRadioEntry, hh3cWIPSAtkDctPolicyDosEAPOLStartQT=hh3cWIPSAtkDctPolicyDosEAPOLStartQT, hh3cWIPSDctStaEntry=hh3cWIPSDctStaEntry, hh3cWIPSAtkDctPolicyPSAttackMinOffPacket=hh3cWIPSAtkDctPolicyPSAttackMinOffPacket, hh3cWIPSDctAPAdd2WhiteList=hh3cWIPSDctAPAdd2WhiteList, hh3cWIPSCtmListFirstTm=hh3cWIPSCtmListFirstTm, hh3cWIPSDevStatTable=hh3cWIPSDevStatTable, hh3cWIPSChlStatEapFailure=hh3cWIPSChlStatEapFailure, hh3cWIPSCtmPolicyUnauthStaPre=hh3cWIPSCtmPolicyUnauthStaPre, hh3cWIPSAtkDctPolicyCfgGroup=hh3cWIPSAtkDctPolicyCfgGroup, hh3cWIPSSigSubRuleSSID=hh3cWIPSSigSubRuleSSID, hh3cWIPSCtmPolicyFixedChl=hh3cWIPSCtmPolicyFixedChl, hh3cWIPSIgnoreListEntry=hh3cWIPSIgnoreListEntry, hh3cWIPSChlStatProbeRequest=hh3cWIPSChlStatProbeRequest, hh3cWIPSSensorRadioTable=hh3cWIPSSensorRadioTable, hh3cWIPSCountermeasureListEntry=hh3cWIPSCountermeasureListEntry, hh3cWIPSDevStatTxAssocResponse=hh3cWIPSDevStatTxAssocResponse, hh3cWIPSDctNetworkSSIDHide=hh3cWIPSDctNetworkSSIDHide, hh3cWIPSDevStatRxMalformed=hh3cWIPSDevStatRxMalformed, hh3cWIPSSigSubRuleMac=hh3cWIPSSigSubRuleMac, hh3cWIPSChlStatUnicastDeauthen=hh3cWIPSChlStatUnicastDeauthen, hh3cWIPSDctModeScanMode=hh3cWIPSDctModeScanMode, hh3cWIPSDctStaAssocBSSID=hh3cWIPSDctStaAssocBSSID, hh3cWIPSBlockListMacAddress=hh3cWIPSBlockListMacAddress, hh3cWIPSMalPktStatInvalidIELength=hh3cWIPSMalPktStatInvalidIELength, hh3cWIPSVsdEntry=hh3cWIPSVsdEntry, hh3cWIPSDctAPStatus=hh3cWIPSDctAPStatus, hh3cWIPSAtkDctPolicyDosReAssoQT=hh3cWIPSAtkDctPolicyDosReAssoQT, hh3cWIPSCtmListQurCnt=hh3cWIPSCtmListQurCnt, hh3cWIPSDevStatRxCtrl=hh3cWIPSDevStatRxCtrl, hh3cWIPSDctNetworkCfg=hh3cWIPSDctNetworkCfg, hh3cWIPSStaticTrustOUIListCfgTable=hh3cWIPSStaticTrustOUIListCfgTable, hh3cWIPSSigSubRulePatternEntry=hh3cWIPSSigSubRulePatternEntry, hh3cWIPSDctAPRptSensorName=hh3cWIPSDctAPRptSensorName, hh3cWIPSRule2VsdPrecedence=hh3cWIPSRule2VsdPrecedence)
mibBuilder.exportSymbols("HH3C-WIPS-MIB", hh3cWIPSSigSubRulePatternTable=hh3cWIPSSigSubRulePatternTable, hh3cWIPSDctAPLastRptTm=hh3cWIPSDctAPLastRptTm, hh3cWIPSMalPktDctPolicyTable=hh3cWIPSMalPktDctPolicyTable, hh3cWIPSDevStatTxBcastDeauth=hh3cWIPSDevStatTxBcastDeauth, Hh3cWIPSAPCategoryType=Hh3cWIPSAPCategoryType, hh3cWIPSDctUnassocStaAdd2WhiteList=hh3cWIPSDctUnassocStaAdd2WhiteList, hh3cWIPSStaticCtmListCfgTable=hh3cWIPSStaticCtmListCfgTable, hh3cWIPSMaxRSSIValue=hh3cWIPSMaxRSSIValue, hh3cWIPSSigSubRuleSSIDOpe=hh3cWIPSSigSubRuleSSIDOpe, hh3cWIPSResetAllIgnoreList=hh3cWIPSResetAllIgnoreList, hh3cWIPSChlStatUnicastPkt=hh3cWIPSChlStatUnicastPkt, hh3cWIPSDevStatRxAssoRequest=hh3cWIPSDevStatRxAssoRequest, hh3cWIPSDevStatRxMgmt=hh3cWIPSDevStatRxMgmt, hh3cWIPSSensorState=hh3cWIPSSensorState, hh3cWIPSChlStatTable=hh3cWIPSChlStatTable, hh3cWIPSChlStatControl=hh3cWIPSChlStatControl, hh3cWIPSDctAPWorkChannel=hh3cWIPSDctAPWorkChannel, hh3cWIPSDevStatTxEAPFailure=hh3cWIPSDevStatTxEAPFailure, hh3cWIPSChannelTable=hh3cWIPSChannelTable, hh3cWIPSStaticTrustVendorListVendor=hh3cWIPSStaticTrustVendorListVendor, hh3cWIPSMaxClientNum=hh3cWIPSMaxClientNum, hh3cWIPSDctNetworkBSSStaNum=hh3cWIPSDctNetworkBSSStaNum, hh3cWIPSStaticTrustListCfgEntry=hh3cWIPSStaticTrustListCfgEntry, hh3cWIPSDctStaRptSensorEntry=hh3cWIPSDctStaRptSensorEntry, hh3cWIPSChlStatSensorMacAddr=hh3cWIPSChlStatSensorMacAddr, hh3cWIPSDevStatRxAuth=hh3cWIPSDevStatRxAuth, hh3cWIPSCtmDeviceEntry=hh3cWIPSCtmDeviceEntry, hh3cWIPSDctUnassocStaRptSensorTable=hh3cWIPSDctUnassocStaRptSensorTable, hh3cWIPSChlStatAssocResponse=hh3cWIPSChlStatAssocResponse, hh3cWIPSDctAPIsCountered=hh3cWIPSDctAPIsCountered, hh3cWIPSSigPolicyTable=hh3cWIPSSigPolicyTable, hh3cWIPSSigRuleEntry=hh3cWIPSSigRuleEntry, hh3cWIPSAtkDctPolicyPSAttackQT=hh3cWIPSAtkDctPolicyPSAttackQT, hh3cWIPSVsdTable=hh3cWIPSVsdTable, hh3cWIPSDctStaRptSensorTable=hh3cWIPSDctStaRptSensorTable, hh3cWIPSDctUnassocStaRtpSensorName=hh3cWIPSDctUnassocStaRtpSensorName, hh3cWIPSChlStatProbeResponse=hh3cWIPSChlStatProbeResponse, hh3cWIPSAtkDctPolicyWeakIVQT=hh3cWIPSAtkDctPolicyWeakIVQT, hh3cWIPSRule2VsdEntry=hh3cWIPSRule2VsdEntry, hh3cWIPSStaticBlockListCfgEntry=hh3cWIPSStaticBlockListCfgEntry, hh3cWIPSDevStatRxData=hh3cWIPSDevStatRxData, hh3cWIPSSigSubRulePatternMask=hh3cWIPSSigSubRulePatternMask, hh3cWIPSDctAPAttachStaEntry=hh3cWIPSDctAPAttachStaEntry, hh3cWIPSMalPktStatInvalidDisAssoCode=hh3cWIPSMalPktStatInvalidDisAssoCode, hh3cWIPSDctAPVSD=hh3cWIPSDctAPVSD, hh3cWIPSDctNetworkBSSNum=hh3cWIPSDctNetworkBSSNum, hh3cWIPSMalPktStatDuplicatedIE=hh3cWIPSMalPktStatDuplicatedIE, hh3cWIPSDctStaFirstDctTm=hh3cWIPSDctStaFirstDctTm, hh3cWIPSResetAllBlockList=hh3cWIPSResetAllBlockList, hh3cWIPSVendorInfo=hh3cWIPSVendorInfo, hh3cWIPSDctModeEntry=hh3cWIPSDctModeEntry, Hh3cWIPSAPClassifyType=Hh3cWIPSAPClassifyType, hh3cWIPSDctAPRptSensorEntry=hh3cWIPSDctAPRptSensorEntry, hh3cWIPSSigRuleTrackMethod=hh3cWIPSSigRuleTrackMethod, hh3cWIPSDctUnassocStaAdd2IgnoreList=hh3cWIPSDctUnassocStaAdd2IgnoreList, hh3cWIPSAtkDctPolicyBitString=hh3cWIPSAtkDctPolicyBitString, hh3cWIPSDctStaRadioType=hh3cWIPSDctStaRadioType, hh3cWIPSStaticTrustVendorListRowStatus=hh3cWIPSStaticTrustVendorListRowStatus, hh3cWIPSAtkDctPolicyName=hh3cWIPSAtkDctPolicyName, hh3cWIPSDctStaAdd2BlackList=hh3cWIPSDctStaAdd2BlackList, hh3cWIPSDctAPAttachStaRowStatus=hh3cWIPSDctAPAttachStaRowStatus, hh3cWIPSDctAPAdd2CtmList=hh3cWIPSDctAPAdd2CtmList, hh3cWIPSStaticCtmListRowStatus=hh3cWIPSStaticCtmListRowStatus, hh3cWIPSMalPktStatRedundantIE=hh3cWIPSMalPktStatRedundantIE, hh3cWIPSMalPktDctPolicyLogBitString=hh3cWIPSMalPktDctPolicyLogBitString, hh3cWIPSSigSubRulePatternValueMax=hh3cWIPSSigSubRulePatternValueMax, hh3cWIPSStaticTrustOUIListRowStatus=hh3cWIPSStaticTrustOUIListRowStatus, hh3cWIPSCtmPolicyName=hh3cWIPSCtmPolicyName, hh3cWIPSChlStatRTS=hh3cWIPSChlStatRTS, hh3cWIPSDctStaWorkChannel=hh3cWIPSDctStaWorkChannel, hh3cWIPSSensor2VsdRowStatus=hh3cWIPSSensor2VsdRowStatus, hh3cWIPSDctAPRptSensorRadioId=hh3cWIPSDctAPRptSensorRadioId, hh3cWIPSDctStaCategory=hh3cWIPSDctStaCategory, hh3cWIPS=hh3cWIPS, hh3cWIPSAtkDctPolicyAPSpoofQT=hh3cWIPSAtkDctPolicyAPSpoofQT, hh3cWIPSMalPktStatOverflowEAPOLKey=hh3cWIPSMalPktStatOverflowEAPOLKey, hh3cWIPSDctNetworkBSSWorkChl=hh3cWIPSDctNetworkBSSWorkChl, hh3cWIPSDevStatRxDisassoc=hh3cWIPSDevStatRxDisassoc, hh3cWIPSDctSSIDTable=hh3cWIPSDctSSIDTable, hh3cWIPSCtmPolicyRogueAPPre=hh3cWIPSCtmPolicyRogueAPPre, hh3cWIPSDctAPAttachStaMac=hh3cWIPSDctAPAttachStaMac, hh3cWIPSAPClaSubRuleSSID=hh3cWIPSAPClaSubRuleSSID, hh3cWIPSVsdConfigGroup=hh3cWIPSVsdConfigGroup, hh3cWIPSDevStatTxMalformed=hh3cWIPSDevStatTxMalformed, hh3cWIPSChlStatBroadcastDeauthen=hh3cWIPSChlStatBroadcastDeauthen, hh3cWIPSDctAPSecurity=hh3cWIPSDctAPSecurity, hh3cWIPSVsdAtkDctPolicyNameCfg=hh3cWIPSVsdAtkDctPolicyNameCfg, hh3cWIPSStaticTrustListCfgTable=hh3cWIPSStaticTrustListCfgTable, hh3cWIPSCtmListMacAddress=hh3cWIPSCtmListMacAddress, hh3cWIPSDctUnassocStaLastRptTm=hh3cWIPSDctUnassocStaLastRptTm, hh3cWIPSMalPktDctPolicyCfgRowStatus=hh3cWIPSMalPktDctPolicyCfgRowStatus, hh3cWIPSDctUnassocStaEntry=hh3cWIPSDctUnassocStaEntry, hh3cWIPSStaticBlockListRowStatus=hh3cWIPSStaticBlockListRowStatus, hh3cWIPSChlStatTotalPkt=hh3cWIPSChlStatTotalPkt, hh3cWIPSMalPktStatTable=hh3cWIPSMalPktStatTable, hh3cWIPSSecurityType=hh3cWIPSSecurityType, hh3cWIPSAtkDctPolicyUnencryptedAuthClientQT=hh3cWIPSAtkDctPolicyUnencryptedAuthClientQT, hh3cWIPSDevStatRxProbeResponse=hh3cWIPSDevStatRxProbeResponse, hh3cWIPSDctModeTable=hh3cWIPSDctModeTable, hh3cWIPSSigSubRuleSeqNumMax=hh3cWIPSSigSubRuleSeqNumMax, hh3cWIPSCtmPolicyEntry=hh3cWIPSCtmPolicyEntry, hh3cWIPSMalPktStatEntry=hh3cWIPSMalPktStatEntry, hh3cWIPSChlStatEapolLogoff=hh3cWIPSChlStatEapolLogoff, hh3cWIPSMalPktStatInvalidChannel=hh3cWIPSMalPktStatInvalidChannel, hh3cWIPSCtmDeviceChl=hh3cWIPSCtmDeviceChl, hh3cWIPSDctModeRowStatus=hh3cWIPSDctModeRowStatus, hh3cWIPSDevStatRxCTS=hh3cWIPSDevStatRxCTS, hh3cWIPSDevStatTxUnicastPkt=hh3cWIPSDevStatTxUnicastPkt, hh3cWIPSMalPktStatSensorName=hh3cWIPSMalPktStatSensorName, hh3cWIPSChlStatUnicastDisassoc=hh3cWIPSChlStatUnicastDisassoc, hh3cWIPSTrustListEntry=hh3cWIPSTrustListEntry, hh3cWIPSStaticCtmListMAC=hh3cWIPSStaticCtmListMAC, hh3cWIPSRule2VsdRowStatus=hh3cWIPSRule2VsdRowStatus, hh3cWIPSCtmPolicyUncateAPPre=hh3cWIPSCtmPolicyUncateAPPre, hh3cWIPSDctStaState=hh3cWIPSDctStaState, hh3cWIPSDevStatRxEAPOLLogoff=hh3cWIPSDevStatRxEAPOLLogoff, hh3cWIPSSigSubRulePatternID=hh3cWIPSSigSubRulePatternID, hh3cWIPSDevStatTxAssocRequest=hh3cWIPSDevStatTxAssocRequest, hh3cWIPSIgnoreListTable=hh3cWIPSIgnoreListTable, hh3cWIPSMalPktDctCfgTrapSupportSet=hh3cWIPSMalPktDctCfgTrapSupportSet, hh3cWIPSDctStaVSD=hh3cWIPSDctStaVSD, hh3cWIPSDctAPCategory=hh3cWIPSDctAPCategory, hh3cWIPSChlStatTotalByte=hh3cWIPSChlStatTotalByte, hh3cWIPSStaticTrustOUIListOUI=hh3cWIPSStaticTrustOUIListOUI, hh3cWIPSMalPktDctPolicyDurationThreshold=hh3cWIPSMalPktDctPolicyDurationThreshold, hh3cWIPSDevStatTxUnicastDeauth=hh3cWIPSDevStatTxUnicastDeauth, hh3cWIPSDctAPRunTmLastUpdateTm=hh3cWIPSDctAPRunTmLastUpdateTm, Hh3cWIPSChannel=Hh3cWIPSChannel, hh3cWIPSDctUnassocStaRptRSSI=hh3cWIPSDctUnassocStaRptRSSI, hh3cWIPSDevStatEntry=hh3cWIPSDevStatEntry, hh3cWIPSAtkDctPolicyDosAuthQT=hh3cWIPSAtkDctPolicyDosAuthQT, hh3cWIPSAtkDctPolicySoftApConvertTime=hh3cWIPSAtkDctPolicySoftApConvertTime, hh3cWIPSDevStatTxProbeResponse=hh3cWIPSDevStatTxProbeResponse, hh3cWIPSSigRule2PolicyRowStatus=hh3cWIPSSigRule2PolicyRowStatus, PYSNMP_MODULE_ID=hh3cWIPS, hh3cWIPSDevStatTxRetry=hh3cWIPSDevStatTxRetry, hh3cWIPSDevStatTxUnicastByte=hh3cWIPSDevStatTxUnicastByte, hh3cWIPSChlStatManagement=hh3cWIPSChlStatManagement, hh3cWIPSOUIInfo=hh3cWIPSOUIInfo, hh3cWIPSDevStatRxRTS=hh3cWIPSDevStatRxRTS, hh3cWIPSIgnoreListLastIgnoreTm=hh3cWIPSIgnoreListLastIgnoreTm, hh3cWIPSDctAPVendor=hh3cWIPSDctAPVendor, hh3cWIPSCtmPolicyExternalAPPre=hh3cWIPSCtmPolicyExternalAPPre, hh3cWIPSChlStatBroadcastDisassoc=hh3cWIPSChlStatBroadcastDisassoc, hh3cWIPSMalPktStatNULLProbeRes=hh3cWIPSMalPktStatNULLProbeRes, hh3cWIPSDctSSIDBSSEntry=hh3cWIPSDctSSIDBSSEntry, hh3cWIPSResetAllCtmList=hh3cWIPSResetAllCtmList, hh3cWIPSDevStatTxCtrl=hh3cWIPSDevStatTxCtrl, hh3cWIPSDctStaRtpSensorName=hh3cWIPSDctStaRtpSensorName, hh3cWIPSSigSubRuleSSIDCase=hh3cWIPSSigSubRuleSSIDCase, hh3cWIPSVsdRowStatus=hh3cWIPSVsdRowStatus, hh3cWIPSDevStatRxProbeRequest=hh3cWIPSDevStatRxProbeRequest, hh3cWIPSSigSubRuleSeqNumMin=hh3cWIPSSigSubRuleSeqNumMin, hh3cWIPSChlStatBmcastByte=hh3cWIPSChlStatBmcastByte, hh3cWIPSDevStatTxUnicastDisassoc=hh3cWIPSDevStatTxUnicastDisassoc, hh3cWIPSDctStaRptSensorNum=hh3cWIPSDctStaRptSensorNum, hh3cWIPSBlockListStatus=hh3cWIPSBlockListStatus, hh3cWIPSSensorRadioRadioId=hh3cWIPSSensorRadioRadioId, hh3cWIPSAPAuthTypeMatch=hh3cWIPSAPAuthTypeMatch, hh3cWIPSDctStaMac=hh3cWIPSDctStaMac, hh3cWIPSDctAPLastDctTm=hh3cWIPSDctAPLastDctTm, Hh3cWIPSAuthMethod=Hh3cWIPSAuthMethod, hh3cWIPSDctAPSeverityLevel=hh3cWIPSDctAPSeverityLevel, hh3cWIPSTrustListTable=hh3cWIPSTrustListTable, hh3cWIPSSensorLicenseNum=hh3cWIPSSensorLicenseNum, hh3cWIPSSecurityTypeMatch=hh3cWIPSSecurityTypeMatch, hh3cWIPSChlStatAuthentication=hh3cWIPSChlStatAuthentication, hh3cWIPSSigRuleTable=hh3cWIPSSigRuleTable, hh3cWIPSMalPktDctCfgLogSupportSet=hh3cWIPSMalPktDctCfgLogSupportSet, hh3cWIPSCtmPolicyPtAuthAPPre=hh3cWIPSCtmPolicyPtAuthAPPre, hh3cWIPSCtmDeviceVSD=hh3cWIPSCtmDeviceVSD, hh3cWIPSChlStatEapSuccess=hh3cWIPSChlStatEapSuccess, hh3cWIPSAPClaRuleName=hh3cWIPSAPClaRuleName, hh3cWIPSDctUnassocStaIsCountered=hh3cWIPSDctUnassocStaIsCountered, hh3cWIPSSigRuleDctThresholdPerSig=hh3cWIPSSigRuleDctThresholdPerSig, hh3cWIPSAPClaRuleEntry=hh3cWIPSAPClaRuleEntry, hh3cWIPSCtmPolicyDevRowStatus=hh3cWIPSCtmPolicyDevRowStatus, hh3cWIPSNotifyGroup=hh3cWIPSNotifyGroup, hh3cWIPSDevStatRxAssoResponse=hh3cWIPSDevStatRxAssoResponse, hh3cWIPSSigRuleDctThresholdPerMAC=hh3cWIPSSigRuleDctThresholdPerMAC, hh3cWIPSVsdSigPolicyNameCfg=hh3cWIPSVsdSigPolicyNameCfg, hh3cWIPSStaticCtmListCfgEntry=hh3cWIPSStaticCtmListCfgEntry, hh3cWIPSDctModeAPName=hh3cWIPSDctModeAPName, hh3cWIPSDctModeRadio=hh3cWIPSDctModeRadio, hh3cWIPSAtkDctPolicyApImpersonationBeaconIncThreshold=hh3cWIPSAtkDctPolicyApImpersonationBeaconIncThreshold, hh3cWIPSAtkDctPolicyApImpersonationBeaconIncWaitTime=hh3cWIPSAtkDctPolicyApImpersonationBeaconIncWaitTime, hh3cWIPSCtmPolicyCfgRowStatus=hh3cWIPSCtmPolicyCfgRowStatus, hh3cWIPSSensor2VsdTable=hh3cWIPSSensor2VsdTable, hh3cWIPSDevStatTxEAPOLStart=hh3cWIPSDevStatTxEAPOLStart, hh3cWIPSDctAPTable=hh3cWIPSDctAPTable, hh3cWIPSDctStaAdd2WhiteList=hh3cWIPSDctStaAdd2WhiteList, hh3cWIPSMalPktDctPolicyEntry=hh3cWIPSMalPktDctPolicyEntry, hh3cWIPSAtkDctPolicyCfgSupportSet=hh3cWIPSAtkDctPolicyCfgSupportSet, hh3cWIPSSensor2VsdEntry=hh3cWIPSSensor2VsdEntry, hh3cWIPSPermitChlBitMap=hh3cWIPSPermitChlBitMap, hh3cWIPSDctNetworkStatus=hh3cWIPSDctNetworkStatus, hh3cWIPSIgnoreListCfgTable=hh3cWIPSIgnoreListCfgTable, hh3cWIPSCtmPolicyMisconfAPPre=hh3cWIPSCtmPolicyMisconfAPPre, Hh3cWIPSDevStatus=Hh3cWIPSDevStatus, hh3cWIPSAPClaRuleTable=hh3cWIPSAPClaRuleTable, hh3cWIPSChlStatRetry=hh3cWIPSChlStatRetry)
