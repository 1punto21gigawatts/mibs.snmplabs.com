#
# PySNMP MIB module Wellfleet-BB-MIB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-BB-MIB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:39:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, mib_2, NotificationType, Counter64, Gauge32, TimeTicks, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Opaque, iso, mgmt, IpAddress, Counter32, Integer32, MibIdentifier, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "mib-2", "NotificationType", "Counter64", "Gauge32", "TimeTicks", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Opaque", "iso", "mgmt", "IpAddress", "Counter32", "Integer32", "MibIdentifier", "NotificationType", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfGameGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfGameGroup")
wfBackboneTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4), )
if mibBuilder.loadTexts: wfBackboneTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBackboneTable.setDescription('Table of Backbone entries, indexed by slot number')
wfBackboneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1), ).setIndexNames((0, "Wellfleet-BB-MIB-MIB", "wfBackboneSlot"))
if mibBuilder.loadTexts: wfBackboneEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfBackboneEntry.setDescription('A particular interface')
wfBackboneSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBackboneSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfBackboneSlot.setDescription('The slot number indexes the backbone table')
wfTxDropCtrSlotMask0 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxDropCtrSlotMask0.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxDropCtrSlotMask0.setDescription('The number of packets dropped because their slot masks equals zero')
wfTxDropCtrNoGrant = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxDropCtrNoGrant.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxDropCtrNoGrant.setDescription('The number of packets dropped because no bus was granted for TX.')
wfTxDropCtrFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxDropCtrFlowCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxDropCtrFlowCtrl.setDescription('The number of packets dropped because of flow control.')
wfTxDied = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxDied.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxDied.setDescription('The number of times the TX state machine has died.')
wfTxDramDied = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxDramDied.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxDramDied.setDescription('The number of times the TX DRAM state machine has died.')
wfTxIdleErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxIdleErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxIdleErrors.setDescription('The number of times both pipeline state machines were active simultaneously.')
wfTxNoSomErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxNoSomErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxNoSomErrors.setDescription('The number of times the state machine left idle without start of message.')
wfTxPktSomErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxPktSomErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxPktSomErrors.setDescription('The number of times the TX packet state machine left idle without start of message.')
wfTxDropEomErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxDropEomErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxDropEomErrors.setDescription('The number of times the TX detected a drop of an end of message.')
wfTxOverflowErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxOverflowErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxOverflowErrors.setDescription('The number of times the TX detected an overflow condition.')
wfTxSofErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxSofErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxSofErrors.setDescription('The number of times the TX detected a start offset error condition.')
wfTxDataptrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxDataptrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxDataptrErrors.setDescription('The number of times the TX detected that an increment on the data pointer caused a carry-out error condition.')
wfTxEndptrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxEndptrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxEndptrErrors.setDescription('The number of times the TX detected that the end pointer wrapped in the address space when it was formed from the buf pointer and the end offset.')
wfTxBoardSpeedMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxBoardSpeedMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxBoardSpeedMask.setDescription('The mask describing the speed setting of all boards in the system.')
wfTxErrorEnableMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTxErrorEnableMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxErrorEnableMask.setDescription('The mask describing the set of TX errors that are enabled.')
wfTxBusRequestTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxBusRequestTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxBusRequestTimeout.setDescription('The timeout value for the TX bus request.')
wfTxDeadlockTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxDeadlockTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxDeadlockTimeout.setDescription('The timeout value for the TX bus deadlock.')
wfTxIgnoreFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxIgnoreFlowCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxIgnoreFlowCtrl.setDescription('Indicates whether TX flow control is enabled or not.')
wfTxBackboneSelectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTxBackboneSelectMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxBackboneSelectMode.setDescription('Indicates the TX backbone selection mode (1 = MRR8, 0 = First available).')
wfTxEnableSlotMask0 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxEnableSlotMask0.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxEnableSlotMask0.setDescription('Indicates whether TX will transmit packets with slot mask 0.')
wfTxFifoSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxFifoSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxFifoSize.setDescription('Indicates the size of the TX FIFO.')
wfTxVisControl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTxVisControl.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxVisControl.setDescription('The read/write value of TX visibility register used for debug.')
wfRxPktNumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRxPktNumErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxPktNumErrors.setDescription('The number of times the RX detected a packet numbering error.')
wfRxAddrOvrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRxAddrOvrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxAddrOvrErrors.setDescription('The number of times the RX detected a address overrun error.')
wfRxSomErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRxSomErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxSomErrors.setDescription('The number of times the RX detected a start of message error.')
wfRxDied = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRxDied.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxDied.setDescription('The number of times the RX state machine died.')
wfRxUnloadErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRxUnloadErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxUnloadErrors.setDescription('The number of times the RX tried to unload an empty FIFO.')
wfRxDropCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRxDropCtr.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxDropCtr.setDescription('The number of times the RX dropped a packet.')
wfRxSofErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRxSofErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxSofErrors.setDescription('The number of times the RX detected a start offset error.')
wfRxCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRxCrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxCrcErrors.setDescription('The number of times the RX detected a CRC error.')
wfRxOvrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRxOvrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxOvrErrors.setDescription('The number of times the RX detected an overrun error.')
wfRxForceEomErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRxForceEomErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxForceEomErrors.setDescription('The number of times the RX detected a force end-of-message error.')
wfRxMaxEofErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRxMaxEofErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxMaxEofErrors.setDescription('The number of times the RX detected an end offset error.')
wfRxFifoSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRxFifoSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxFifoSize.setDescription('Indicates the size of the RX FIFO.')
wfRxReceiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRxReceiveMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxReceiveMode.setDescription('Indicates the receive mode of the RX.')
wfRxIgnorePktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRxIgnorePktNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxIgnorePktNum.setDescription('Indicates whether RX will ignore packet numbering errors.')
wfRxVisControl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRxVisControl.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxVisControl.setDescription('The read/write value of RX visibility register used for debug.')
wfRxErrorEnableMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRxErrorEnableMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxErrorEnableMask.setDescription('The mask describing the set of RX errors that are enabled.')
wfRxMaxEof = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRxMaxEof.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxMaxEof.setDescription('Indicates the maximum end offset that the RX will allow.')
wfRxParitySense = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRxParitySense.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxParitySense.setDescription('Indicates the parity sense that RX is expecting.')
wfRxDeadlockTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRxDeadlockTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxDeadlockTimeout.setDescription('The timeout value for the RX bus deadlock.')
wfTxDropWB = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxDropWB.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxDropWB.setDescription('The number of buffers dropped by a Bluefish style TX because it had a Wastebasket page in it.')
wfTxDiedNoPg = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxDiedNoPg.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxDiedNoPg.setDescription('The number of times a Bluefish style TX died because it recieved a buffer with no pages in it.')
wfTxDtbErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxDtbErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxDtbErrors.setDescription('The number of times a Bluefish style TX recieved a data-back signal from the VBM when it had no VBM access in progress.')
wfTxPagePtrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTxPagePtrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfTxPagePtrErrors.setDescription('The number of times the Bluefish style TX page pointer wrapped in the valid address space.')
wfRxWBCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRxWBCtr.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxWBCtr.setDescription('The number of wastebasket pages the Bluefish style Rx recieved from the VBM.')
wfRxLinkList0Ctr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRxLinkList0Ctr.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxLinkList0Ctr.setDescription('The number of times the Bluefish style Rx recieved a buffer pointer of 0 from the VBM.')
wfRxArbErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 5, 4, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRxArbErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfRxArbErrors.setDescription('The number of times a Bluefish style Rx had two recievers trying to write to VBM at the same time.')
mibBuilder.exportSymbols("Wellfleet-BB-MIB-MIB", wfRxErrorEnableMask=wfRxErrorEnableMask, wfTxDramDied=wfTxDramDied, wfTxDied=wfTxDied, wfTxNoSomErrors=wfTxNoSomErrors, wfBackboneTable=wfBackboneTable, wfRxPktNumErrors=wfRxPktNumErrors, wfRxReceiveMode=wfRxReceiveMode, wfRxIgnorePktNum=wfRxIgnorePktNum, wfTxDataptrErrors=wfTxDataptrErrors, wfRxAddrOvrErrors=wfRxAddrOvrErrors, wfTxFifoSize=wfTxFifoSize, wfRxDied=wfRxDied, wfRxSofErrors=wfRxSofErrors, wfTxErrorEnableMask=wfTxErrorEnableMask, wfRxMaxEof=wfRxMaxEof, wfTxPagePtrErrors=wfTxPagePtrErrors, wfRxCrcErrors=wfRxCrcErrors, wfTxDropWB=wfTxDropWB, wfTxDropEomErrors=wfTxDropEomErrors, wfTxBoardSpeedMask=wfTxBoardSpeedMask, wfBackboneSlot=wfBackboneSlot, wfTxDropCtrSlotMask0=wfTxDropCtrSlotMask0, wfTxDiedNoPg=wfTxDiedNoPg, wfRxWBCtr=wfRxWBCtr, wfRxUnloadErrors=wfRxUnloadErrors, wfRxOvrErrors=wfRxOvrErrors, wfTxDeadlockTimeout=wfTxDeadlockTimeout, wfRxDropCtr=wfRxDropCtr, wfTxEnableSlotMask0=wfTxEnableSlotMask0, wfRxDeadlockTimeout=wfRxDeadlockTimeout, wfTxIgnoreFlowCtrl=wfTxIgnoreFlowCtrl, wfBackboneEntry=wfBackboneEntry, wfTxVisControl=wfTxVisControl, wfTxBusRequestTimeout=wfTxBusRequestTimeout, wfRxSomErrors=wfRxSomErrors, wfTxDropCtrFlowCtrl=wfTxDropCtrFlowCtrl, wfRxFifoSize=wfRxFifoSize, wfRxMaxEofErrors=wfRxMaxEofErrors, wfTxDtbErrors=wfTxDtbErrors, wfRxLinkList0Ctr=wfRxLinkList0Ctr, wfTxPktSomErrors=wfTxPktSomErrors, wfTxOverflowErrors=wfTxOverflowErrors, wfRxArbErrors=wfRxArbErrors, wfRxVisControl=wfRxVisControl, wfTxEndptrErrors=wfTxEndptrErrors, wfTxDropCtrNoGrant=wfTxDropCtrNoGrant, wfTxIdleErrors=wfTxIdleErrors, wfRxForceEomErrors=wfRxForceEomErrors, wfRxParitySense=wfRxParitySense, wfTxSofErrors=wfTxSofErrors, wfTxBackboneSelectMode=wfTxBackboneSelectMode)
