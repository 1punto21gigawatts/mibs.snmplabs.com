#
# PySNMP MIB module NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:23:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
BridgeId, Timeout = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId", "Timeout")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32, Counter64, IpAddress, Unsigned32, NotificationType, Counter32, ModuleIdentity, iso, ObjectIdentity, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32", "Counter64", "IpAddress", "Unsigned32", "NotificationType", "Counter32", "ModuleIdentity", "iso", "ObjectIdentity", "TimeTicks", "MibIdentifier")
TruthValue, DisplayString, MacAddress, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "MacAddress", "RowStatus", "TextualConvention")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
nnMultipleSpanningTreeMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 5))
nnMultipleSpanningTreeMib.setRevisions(('2014-06-24 00:00', '2009-03-25 00:00', '2008-11-05 00:00', '2006-04-10 00:00', '2004-02-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: nnMultipleSpanningTreeMib.setRevisionsDescriptions(('v005: instanceUp, instanceDown notifications added to nnMstGenNotificationType object.', 'v004: nnMstBridgeVlanMap access changed to read-write for ERS8600 product .', 'v003: Added nnMstBridgeVlanMapTable ', 'v002: Expanded the range for nnMstMaxHopCount', 'v001: Initial version.',))
if mibBuilder.loadTexts: nnMultipleSpanningTreeMib.setLastUpdated('201406240000Z')
if mibBuilder.loadTexts: nnMultipleSpanningTreeMib.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: nnMultipleSpanningTreeMib.setContactInfo('Nortel Networks')
if mibBuilder.loadTexts: nnMultipleSpanningTreeMib.setDescription("Nortel Networks Multiple Spanning-Tree MIB Copyright 2003 Nortel Networks, Inc. All rights reserved. This Nortel Networks SNMP Management Information Base Specification embodies Nortel Networks' confidential and proprietary intellectual property. Nortel Networks retains all title and ownership in the Specification, including any revisions. This Specification is supplied 'AS IS,' and Nortel Networks makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
nnMstNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 5, 0))
nnMstObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 5, 1))
nnMstScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1))
nnMstNoOfInstancesSupported = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstNoOfInstancesSupported.setStatus('current')
if mibBuilder.loadTexts: nnMstNoOfInstancesSupported.setDescription('Indicates Maximum number of spanning tree Instances supported.')
nnMstMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 4000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstMaxHopCount.setStatus('current')
if mibBuilder.loadTexts: nnMstMaxHopCount.setDescription('Indicates the Maximum Hop Count value. The granularity of this timer is specified to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
nnMstBrgAddress = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBrgAddress.setStatus('current')
if mibBuilder.loadTexts: nnMstBrgAddress.setDescription('The MAC address used by this bridge when it must be referred to in a unique fashion. It is recommended that this be the numerically smallest MAC address of all ports that belong to this bridge. However it is only required to be unique. When concatenated with nnMstCistBridgePriority or nnMstBridgePriority a unique BridgeIdentifier is formed which is used in the Spanning Tree Protocol.')
nnMstCistRoot = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistRoot.setStatus('current')
if mibBuilder.loadTexts: nnMstCistRoot.setDescription('The bridge identifier of the Root of the common spanning tree as determined by the Spanning Tree Protocol as executed by this node. This value is used as the CIST Root Identifier parameter in all Configuration Bridge PDUs originated by this node.')
nnMstCistRegionalRoot = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistRegionalRoot.setStatus('current')
if mibBuilder.loadTexts: nnMstCistRegionalRoot.setDescription('The bridge identifier of the Root of the Multiple spanning tree region as determined by the Spanning Tree Protocol as executed by this node. This value is used as the CIST Regional Root Identifier parameter in all Configuration Bridge PDUs originated by this node.')
nnMstCistRootCost = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistRootCost.setStatus('current')
if mibBuilder.loadTexts: nnMstCistRootCost.setDescription('The Cost of the path to the CIST Root as seen from this bridge.')
nnMstCistRegionalRootCost = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistRegionalRootCost.setStatus('current')
if mibBuilder.loadTexts: nnMstCistRegionalRootCost.setDescription('The Cost of the path to the CIST Regional Root as seen from this bridge.')
nnMstCistRootPort = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistRootPort.setStatus('current')
if mibBuilder.loadTexts: nnMstCistRootPort.setDescription('The Port Number of the Port which offers the lowest path cost from this bridge to the CIST Root Bridge.')
nnMstCistBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstCistBridgePriority.setStatus('current')
if mibBuilder.loadTexts: nnMstCistBridgePriority.setDescription('The Value of the writable portion of the Bridge Identifier comprising of the first two octets. The values that are set for Bridge Priority must be in steps of 4096.')
nnMstCistBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 10), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstCistBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: nnMstCistBridgeMaxAge.setDescription('The value that all bridges use for MaxAge when this bridge is acting as the root. The granularity of this timer is specified to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
nnMstCistBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 11), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstCistBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: nnMstCistBridgeForwardDelay.setDescription('The value that all bridges use for ForwardDelay when this bridge is acting as the root. Note that 802.1D specifies that the range for this parameter is related to the value of BridgeMaxAge. The granularity of this timer is specified to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
nnMstCistHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistHoldTime.setStatus('current')
if mibBuilder.loadTexts: nnMstCistHoldTime.setDescription('This time value determines the interval length during which no more than two Configuration bridge PDUs shall be transmitted by this node, in units of hundredths of a second.')
nnMstCistMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 13), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistMaxAge.setStatus('current')
if mibBuilder.loadTexts: nnMstCistMaxAge.setDescription('The maximum age of Spanning Tree Protocol information learned from the network on any port before it is discarded, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
nnMstCistForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistForwardDelay.setStatus('current')
if mibBuilder.loadTexts: nnMstCistForwardDelay.setDescription('This time value, measured in units of hundredths of a second, controls how fast a port changes its spanning state when moving towards the Forwarding state. The value determines how long the port stays in a particular state before moving to the next state.')
nnMstMstpUpCount = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstMstpUpCount.setStatus('current')
if mibBuilder.loadTexts: nnMstMstpUpCount.setDescription('The number of times MSTP Module has been enabled. A Trap is generated on the occurence of this event.')
nnMstMstpDownCount = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstMstpDownCount.setStatus('current')
if mibBuilder.loadTexts: nnMstMstpDownCount.setDescription('The number of times MSTP Module has been disabled. A Trap is generated on the occurence of this event.')
nnMstPathCostDefaultType = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stp8021d1998", 1), ("stp8021t2001", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstPathCostDefaultType.setStatus('current')
if mibBuilder.loadTexts: nnMstPathCostDefaultType.setDescription('The version of the Spanning Tree default Path Costs that are to be used by this Bridge. A value of 8021d1998(1) uses the 16-bit default Path Costs from IEEE Std. 802.1D-1998. A value of stp8021t2001(2) uses the 32-bit default Path Costs from IEEE Std. 802.1t.')
nnMstForceProtocolVersion = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2), ("mstp", 3))).clone('mstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstForceProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: nnMstForceProtocolVersion.setDescription("The version of Spanning Tree Protocol the bridge is currently running. The value 'stpCompatible(0)' indicates the Spanning Tree Protocol specified in IEEE 802.1D and 'rstp(2)' indicates the Rapid Spanning Tree Protocol specified in IEEE 802.1w and 'mstp(3)' indicates the Multiple Spanning Tree Protocol Specified in IEEE 802.1s.")
nnMstTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstTxHoldCount.setStatus('current')
if mibBuilder.loadTexts: nnMstTxHoldCount.setDescription('The value used by the Port Transmit state machine to limit the maximum transmission rate.')
nnMstConfigIdSel = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstConfigIdSel.setStatus('current')
if mibBuilder.loadTexts: nnMstConfigIdSel.setDescription('The Configuration Identifier Format Selector used by the Bridge. This has a fixed value of 0 to indicate RegionName, RegionVersion are specified as in Standard.')
nnMstRegionName = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstRegionName.setStatus('current')
if mibBuilder.loadTexts: nnMstRegionName.setDescription("The Name for the Region's configuration. By Default Region Name will be equal to the Bridge Mac Address.")
nnMstRegionVersion = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstRegionVersion.setStatus('current')
if mibBuilder.loadTexts: nnMstRegionVersion.setDescription('Version of the MST Region.')
nnMstConfigDigest = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstConfigDigest.setStatus('current')
if mibBuilder.loadTexts: nnMstConfigDigest.setDescription('The Configuration Digest value for this Region, this is an MD5 digest value, and hence must always be 16 octets long.')
nnMstRegionConfigChangeCount = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstRegionConfigChangeCount.setStatus('current')
if mibBuilder.loadTexts: nnMstRegionConfigChangeCount.setDescription('The number of times a Region Configuration Identifier Change was detected. A Trap is generated on the occurence of this event.')
nnMstCistBridgeRoleSelectionSemState = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("initbridge", 0), ("roleselection", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistBridgeRoleSelectionSemState.setStatus('current')
if mibBuilder.loadTexts: nnMstCistBridgeRoleSelectionSemState.setDescription('Current state of the Port Role Selection State Machine of this bridge in Common Spanning Tree context')
nnMstCistTimeSinceTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 26), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: nnMstCistTimeSinceTopologyChange.setDescription('The time (in hundredths of a second) since the TcWhile Timer for any port in this Bridge was non-zero for Common Spanning Tree context.')
nnMstCistTopChanges = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistTopChanges.setStatus('current')
if mibBuilder.loadTexts: nnMstCistTopChanges.setDescription('The number of times that there have been atleast one non-zero TcWhile Timer on this Bridge for Common Spanning Tree context.')
nnMstCistNewRootBridgeCount = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistNewRootBridgeCount.setStatus('current')
if mibBuilder.loadTexts: nnMstCistNewRootBridgeCount.setDescription('The number of times this Bridge has detected a Root Bridge change for Common Spanning Tree context. A Trap is generated on the occurence of this event.')
nnMstBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2), )
if mibBuilder.loadTexts: nnMstBridgeTable.setStatus('current')
if mibBuilder.loadTexts: nnMstBridgeTable.setDescription('Table containing Bridge Information specific to Spanning Tree Instance.')
nnMstBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1), ).setIndexNames((0, "NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBridgeInstance"))
if mibBuilder.loadTexts: nnMstBridgeEntry.setStatus('current')
if mibBuilder.loadTexts: nnMstBridgeEntry.setDescription('Entry indicating the Bridge Information.')
nnMstBridgeInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: nnMstBridgeInstance.setStatus('current')
if mibBuilder.loadTexts: nnMstBridgeInstance.setDescription('Spanning Tree Instance to which the information belongs.')
nnMstBridgeRegionalRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 2), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBridgeRegionalRoot.setStatus('current')
if mibBuilder.loadTexts: nnMstBridgeRegionalRoot.setDescription('MSTI Regional Root Identifier value for the Instance. This value is used as the MSTI Regional Root Identifier parameter in all Configuration Bridge PDUs originated by this node')
nnMstBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nnMstBridgePriority.setStatus('current')
if mibBuilder.loadTexts: nnMstBridgePriority.setDescription('The writable portion of the MSTI Bridge Identifier. comprising of the first two octets. The values that are set for Bridge Priority must be in steps of 4096.')
nnMstBridgeRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBridgeRootCost.setStatus('current')
if mibBuilder.loadTexts: nnMstBridgeRootCost.setDescription('The Cost of the path to the MSTI Regional Root as seen by this bridge.')
nnMstBridgeRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBridgeRootPort.setStatus('current')
if mibBuilder.loadTexts: nnMstBridgeRootPort.setDescription('The Port Number of the Port which offers the lowest path cost from this bridge to the MSTI Region Root Bridge.')
nnMstBridgeTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBridgeTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: nnMstBridgeTimeSinceTopologyChange.setDescription('The time (in hundredths of a second) since the TcWhile Timer for any port in this Bridge was non-zero for this spanning tree instance.')
nnMstBridgeTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBridgeTopChanges.setStatus('current')
if mibBuilder.loadTexts: nnMstBridgeTopChanges.setDescription('The number of times that there have been atleast one non-zero TcWhile Timer on this Bridge for this spanning tree instance.')
nnMstBridgeNewRootCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBridgeNewRootCount.setStatus('current')
if mibBuilder.loadTexts: nnMstBridgeNewRootCount.setDescription('The number of times this Bridge has detected a Root Bridge change for this spanning tree instance. A Trap is generated on the occurence of this event.')
nnMstBridgeRoleSelectionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("initbridge", 0), ("roleselection", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBridgeRoleSelectionSemState.setStatus('current')
if mibBuilder.loadTexts: nnMstBridgeRoleSelectionSemState.setDescription('Current state of the Port Role Selection State Machine for this spanning tree instance for this bridge.')
nnMstBridgeInstanceUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBridgeInstanceUpCount.setStatus('current')
if mibBuilder.loadTexts: nnMstBridgeInstanceUpCount.setDescription('The number of times a new spanning tree instance has been created. A Trap is generated on the occurence of this event.')
nnMstBridgeInstanceDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBridgeInstanceDownCount.setStatus('current')
if mibBuilder.loadTexts: nnMstBridgeInstanceDownCount.setDescription('The number of times a spanning tree instance has been deleted. A Trap is generated on the occurence of this event.')
nnMstBridgeOldDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 12), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBridgeOldDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: nnMstBridgeOldDesignatedRoot.setDescription('The bridge identifier of the old root of the spanning tree instance as determined by the Spanning Tree Protocol as executed by this node. ')
nnMstBridgeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nnMstBridgeEnabled.setStatus('current')
if mibBuilder.loadTexts: nnMstBridgeEnabled.setDescription('This object is used to control whether this bridge instance is enabled or disabled.')
nnMstBridgeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nnMstBridgeRowStatus.setStatus('current')
if mibBuilder.loadTexts: nnMstBridgeRowStatus.setDescription('This object is used to control row creation/deletion.')
nnMstCistPortTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3), )
if mibBuilder.loadTexts: nnMstCistPortTable.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortTable.setDescription('This table contains Common Spanning Tree Port Information.')
nnMstCistPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1), ).setIndexNames((0, "NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstCistPort"))
if mibBuilder.loadTexts: nnMstCistPortEntry.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortEntry.setDescription('A list of information maintained by every port for Common Spanning tree.')
nnMstCistPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: nnMstCistPort.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPort.setDescription('The Port number of the port for which this entry contains spanning tree information.')
nnMstCistPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstCistPortPathCost.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the CIST Root which include this port.')
nnMstCistPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstCistPortPriority.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortPriority.setDescription('The four most significant bits of the Port Identifier of the Spanning Tree instance can be modified by setting the CistPortPriority value. The values that are set for Port Priority must be in steps of 16.')
nnMstCistPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortDesignatedRoot.setDescription('The unique Bridge Identifier of the bridge recorded as the CIST Root in the configuration BPDUs transmitted.')
nnMstCistPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortDesignatedBridge.setDescription("The unique Bridge Identifier of the bridge which this port considers to be the Designated Bridge for the port's segment.")
nnMstCistPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortDesignatedPort.setDescription("The Port identifier of the port on the Designated Bridge for this port's segment.")
nnMstCistPortAdminP2P = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstCistPortAdminP2P.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortAdminP2P.setDescription('The administrative point-to-point status of the LAN segment attached to this port. A value of forceTrue(0) indicates that this port should always be treated as if it is connected to a point-to-point link. A value of forceFalse(1) indicates that this port should be treated as having a shared media connection. A value of auto(2) indicates that this port is considered to have a point-to-point link if it is an Aggregator and all of its members are aggregatable, or if the MAC entity is configured for full duplex operation, either through auto-negotiation or by management means.')
nnMstCistPortOperP2P = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortOperP2P.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortOperP2P.setDescription('The operational point-to-point status of the LAN segment attached to this port. It indicates whether a port is considered to have a point-to-point connection or not. The value is determined by management or by auto-detection, as described in the nnMstCistPortAdminP2P object.')
nnMstCistPortAdminEdgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstCistPortAdminEdgeStatus.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortAdminEdgeStatus.setDescription('The administrative value of the Edge Port parameter. A value of TRUE(1) indicates that this port should be assumed as an edge-port and a value of FALSE(2) indicates that this port should be assumed as a non-edge-port.')
nnMstCistPortOperEdgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortOperEdgeStatus.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortOperEdgeStatus.setDescription('The operational value of the Edge Port parameter. The object is initialized to the value of nnMstCistPortAdminEdgeStatus and is set FALSE on reception of a BPDU.')
nnMstCistPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstCistPortProtocolMigration.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortProtocolMigration.setDescription('Indicates the Protocol migration state of this Port. When operating in RSTP/MSTP (version >= 2) mode, writing TRUE(1) to this object forces this port to transmit MSTP BPDUs without instance information. Any other operation on this object has no effect and it always returns FALSE(2) when read.')
nnMstCistPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortState.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortState.setDescription('Current state of the Port as defined by the Common spanning tree protocol.')
nnMstCistForcePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstCistForcePortState.setStatus('current')
if mibBuilder.loadTexts: nnMstCistForcePortState.setDescription('Current state of the Port which can be changed to either Disabled or Enabled for the base spanning tree instance.')
nnMstCistPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortForwardTransitions.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortForwardTransitions.setDescription('Number of times this port has transitioned to the Forwarding State.')
nnMstCistPortRxMstBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortRxMstBpduCount.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortRxMstBpduCount.setDescription('Number of MST BPDUs received on this port.')
nnMstCistPortRxRstBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortRxRstBpduCount.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortRxRstBpduCount.setDescription('Number of RST BPDUs received on this port.')
nnMstCistPortRxConfigBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortRxConfigBpduCount.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortRxConfigBpduCount.setDescription('Number of Configuration BPDUs received on this port.')
nnMstCistPortRxTcnBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortRxTcnBpduCount.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortRxTcnBpduCount.setDescription('Number of TCN BPDUs received on this port.')
nnMstCistPortTxMstBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortTxMstBpduCount.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortTxMstBpduCount.setDescription('Number of MST BPDUs Transmitted from this port.')
nnMstCistPortTxRstBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortTxRstBpduCount.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortTxRstBpduCount.setDescription('Number of RST BPDUs Transmitted from this port.')
nnMstCistPortTxConfigBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortTxConfigBpduCount.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortTxConfigBpduCount.setDescription('Number of Configuration BPDUs Transmitted from this port.')
nnMstCistPortTxTcnBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortTxTcnBpduCount.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortTxTcnBpduCount.setDescription('Number of TCN BPDUs Transmitted from this port.')
nnMstCistPortInvalidMstBpduRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortInvalidMstBpduRxCount.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortInvalidMstBpduRxCount.setDescription('Number of Invalid MST BPDUs Received on this port.')
nnMstCistPortInvalidRstBpduRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortInvalidRstBpduRxCount.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortInvalidRstBpduRxCount.setDescription('Number of Invalid RST BPDUs Received on this port.')
nnMstCistPortInvalidConfigBpduRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortInvalidConfigBpduRxCount.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortInvalidConfigBpduRxCount.setDescription('Number of Invalid Configuration BPDUs Received on this port.')
nnMstCistPortInvalidTcnBpduRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortInvalidTcnBpduRxCount.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortInvalidTcnBpduRxCount.setDescription('Number of Invalid TCN BPDUs Received on this port.')
nnMstCistPortTransmitSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("transmitinit", 0), ("transmitperiodic", 1), ("transmitconfig", 2), ("transmittcn", 3), ("transmitrstp", 4), ("idle", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortTransmitSemState.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortTransmitSemState.setDescription('Indicates current State of the Port Transmit state machine.')
nnMstCistPortReceiveSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("discard", 0), ("receive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortReceiveSemState.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortReceiveSemState.setDescription('Indicates current State of the Port Receive state machine.')
nnMstCistPortProtMigrationSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("init", 0), ("sendrstp", 1), ("sendingrstp", 2), ("sendstp", 3), ("sendingstp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortProtMigrationSemState.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortProtMigrationSemState.setDescription('Indicates current State of the Port Protocol Migration State machine.')
nnMstCistProtocolMigrationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistProtocolMigrationCount.setStatus('current')
if mibBuilder.loadTexts: nnMstCistProtocolMigrationCount.setDescription('The number of times this Port has migrated from one STP protocol version to another. The relevant protocols are STP-COMPATIBLE and RSTP/MSTP. A Trap is generated on the occurence of this event.')
nnMstCistPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortDesignatedCost.setDescription('The path cost of the Designated Port of the segment connected to this port.')
nnMstCistPortRegionalRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 32), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortRegionalRoot.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortRegionalRoot.setDescription('The unique Bridge Identifier of the bridge recorded as the CIST Regional Root Identifier in the configuration BPDUs transmitted.')
nnMstCistPortRegionalPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortRegionalPathCost.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortRegionalPathCost.setDescription('The contribution of this port to the path cost of paths towards the CIST Regional Root which include this port.')
nnMstCistSelectedPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistSelectedPortRole.setStatus('current')
if mibBuilder.loadTexts: nnMstCistSelectedPortRole.setDescription('Selected Port Role of the port for this spanning tree instance.')
nnMstCistCurrentPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistCurrentPortRole.setStatus('current')
if mibBuilder.loadTexts: nnMstCistCurrentPortRole.setDescription('Current Port Role of the port for this spanning tree instance.')
nnMstCistPortInfoSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("aged", 2), ("update", 3), ("superiordesg", 4), ("repeatdesg", 5), ("root", 6), ("other", 7), ("present", 8), ("receive", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortInfoSemState.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortInfoSemState.setDescription('Current state of the Port Information State Machine for this port in this spanning tree context.')
nnMstCistPortRoleTransitionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("init", 0), ("blockport", 1), ("blockedport", 2), ("activeport", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortRoleTransitionSemState.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortRoleTransitionSemState.setDescription('Current state of the Port Role Transition State Machine for this port in this spanning tree context.')
nnMstCistPortStateTransitionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("discarding", 0), ("learning", 1), ("forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortStateTransitionSemState.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortStateTransitionSemState.setDescription('Current state of the Port State Transition State Machine for this port in this spanning tree context.')
nnMstCistPortTopologyChangeSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("init", 0), ("inactive", 1), ("active", 2), ("detected", 3), ("notifiedtcn", 4), ("notifiedtc", 5), ("propagating", 6), ("acknowledged", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortTopologyChangeSemState.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortTopologyChangeSemState.setDescription('Current state of the Topology Change State Machine for this port in this spanning tree context.')
nnMstCistPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 40), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstCistPortHelloTime.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortHelloTime.setDescription('The amount of time between the transmission of Configuration bridge PDUs by this node on this port in units of hundredths of a second.')
nnMstCistPortOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2), ("mstp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortOperVersion.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortOperVersion.setDescription('This indicates whether the Port is operationally in the Mstp mode, Rstp mode or the Stp-compatible mode i.e., whether the Port is transmitting MST BPDUs, RST BPDUs or Config/TCN BPDUs.')
nnMstCistPortEffectivePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 42), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortEffectivePortState.setStatus('current')
if mibBuilder.loadTexts: nnMstCistPortEffectivePortState.setDescription('The effective operational state of the port for CIST. This will TRUE only when the port is operationally up in the Interface level and Protocol level for CIST. This is will be set to False for all other times.')
nnMstPortTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4), )
if mibBuilder.loadTexts: nnMstPortTable.setStatus('current')
if mibBuilder.loadTexts: nnMstPortTable.setDescription('This table contains Spanning Tree Instance Specific Port Information.')
nnMstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1), ).setIndexNames((0, "NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstPort"), (0, "NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBridgeInstance"))
if mibBuilder.loadTexts: nnMstPortEntry.setStatus('current')
if mibBuilder.loadTexts: nnMstPortEntry.setDescription('A list of information maintained by every port for each and every spanning tree instance.')
nnMstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: nnMstPort.setStatus('current')
if mibBuilder.loadTexts: nnMstPort.setDescription('The Port number of the port for which this entry contains spanning tree information.')
nnMstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstPortPathCost.setStatus('current')
if mibBuilder.loadTexts: nnMstPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the MSTI Root which include this port.')
nnMstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstPortPriority.setStatus('current')
if mibBuilder.loadTexts: nnMstPortPriority.setDescription('The four most significant bits of the Port Identifier for a given Spanning Tree instance can be modified independently for each Spanning Tree instance supported by the Bridge. The values that are set for Port Priority must be in steps of 16.')
nnMstPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: nnMstPortDesignatedRoot.setDescription('The unique Bridge Identifier of the bridge recorded as the MSTI Regional Root in the configuration BPDUs transmitted.')
nnMstPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: nnMstPortDesignatedBridge.setDescription("The unique Bridge Identifier of the bridge which this port considers to be the Designated Bridge for the port's segment.")
nnMstPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: nnMstPortDesignatedPort.setDescription("The Port identifier of the port on the Designated Bridge for this port's segment.")
nnMstPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortState.setStatus('current')
if mibBuilder.loadTexts: nnMstPortState.setDescription('Current state of the Port as defined by the Multiple spanning tree protocol. Port which is Forwarding state in one instance can be in Discarding (Blocking) state in another instance.')
nnMstPortForcePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstPortForcePortState.setStatus('current')
if mibBuilder.loadTexts: nnMstPortForcePortState.setDescription('Current state of the Port which can be changed to either Disabled or Enabled for the specific spanning tree instance.')
nnMstPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortForwardTransitions.setStatus('current')
if mibBuilder.loadTexts: nnMstPortForwardTransitions.setDescription('Number of times this port has transitioned to the Forwarding State for specific instance.')
nnMstPortReceivedBPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortReceivedBPDUs.setStatus('current')
if mibBuilder.loadTexts: nnMstPortReceivedBPDUs.setDescription('Number of BPDUs received by this port for this spanning tree instance.')
nnMstPortTransmittedBPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortTransmittedBPDUs.setStatus('current')
if mibBuilder.loadTexts: nnMstPortTransmittedBPDUs.setDescription('Number of BPDUs transmitted on this port for this spanning tree instance.')
nnMstPortInvalidBPDUsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortInvalidBPDUsRcvd.setStatus('current')
if mibBuilder.loadTexts: nnMstPortInvalidBPDUsRcvd.setDescription('Number of Invalid BPDUs received on this Port for this spanning tree instance.')
nnMstPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: nnMstPortDesignatedCost.setDescription('The path cost of the Designated Port of the segment connected to this port.')
nnMstPortSelectedPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4), ("master", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortSelectedPortRole.setStatus('current')
if mibBuilder.loadTexts: nnMstPortSelectedPortRole.setDescription('Selected Port Role of the port for this spanning tree instance.')
nnMstPortCurrentPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4), ("master", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortCurrentPortRole.setStatus('current')
if mibBuilder.loadTexts: nnMstPortCurrentPortRole.setDescription('Current Port Role of the port for this spanning tree instance.')
nnMstPortInfoSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("aged", 2), ("update", 3), ("superiordesg", 4), ("repeatdesg", 5), ("root", 6), ("other", 7), ("present", 8), ("receive", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortInfoSemState.setStatus('current')
if mibBuilder.loadTexts: nnMstPortInfoSemState.setDescription('Current state of the Port Information State Machine for this port in this spanning tree context.')
nnMstPortRoleTransitionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("init", 0), ("blockport", 1), ("blockedport", 2), ("activeport", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortRoleTransitionSemState.setStatus('current')
if mibBuilder.loadTexts: nnMstPortRoleTransitionSemState.setDescription('Current state of the Port Role Transition State Machine for this port in this spanning tree context.')
nnMstPortStateTransitionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("discarding", 0), ("learning", 1), ("forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortStateTransitionSemState.setStatus('current')
if mibBuilder.loadTexts: nnMstPortStateTransitionSemState.setDescription('Current state of the Port State Transition State Machine for this port in this spanning tree context.')
nnMstPortTopologyChangeSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("init", 0), ("inactive", 1), ("active", 2), ("detected", 3), ("notifiedtcn", 4), ("notifiedtc", 5), ("propagating", 6), ("acknowledged", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortTopologyChangeSemState.setStatus('current')
if mibBuilder.loadTexts: nnMstPortTopologyChangeSemState.setDescription('Current state of the Topology Change State Machine for this port in this spanning tree context.')
nnMstPortEffectivePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortEffectivePortState.setStatus('current')
if mibBuilder.loadTexts: nnMstPortEffectivePortState.setDescription('The effective operational stae of the port for specific instance. This is will be TRUE only when the port is operationally up in the interface level and Protocol level for the specific instance. This is will be set to false at all other times.')
nnMstNotificationControl = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5))
nnMstNotificationControlScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5, 1))
nnMstSetNotifications = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstSetNotifications.setStatus('current')
if mibBuilder.loadTexts: nnMstSetNotifications.setDescription('This object is used to enable and disable specific MSTP traps. Currently the following are defined 0 - Notifications are not enabled. 1 - General Notifications like protocol up or down 2 - Exception Notifications like memory failure or buffer failure or port protocol migration or invalid packet rcvd in port 3 - All the above Notifications ')
nnMstGenNotificationType = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("up", 1), ("down", 2), ("instanceUp", 3), ("instanceDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstGenNotificationType.setStatus('current')
if mibBuilder.loadTexts: nnMstGenNotificationType.setDescription('The general events like none - none of the below values up - protocol UP, down - protocol DOWN instanceUp - MSTP instance enabled instanceDown - MSTP instance disabled')
nnMstErrNotificationType = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("memfail", 1), ("bufffail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstErrNotificationType.setStatus('current')
if mibBuilder.loadTexts: nnMstErrNotificationType.setDescription('The error event like none - none of the below values memfail - memory allocation failure bufffail - buffer allocation failure')
nnMstPortNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5, 2), )
if mibBuilder.loadTexts: nnMstPortNotificationTable.setStatus('current')
if mibBuilder.loadTexts: nnMstPortNotificationTable.setDescription('This table is used to store the notification information occured in each of the port for protocol migration and invalid packet received')
nnMstPortNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5, 2, 1), ).setIndexNames((0, "NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstPortNotificationIndex"))
if mibBuilder.loadTexts: nnMstPortNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: nnMstPortNotificationEntry.setDescription(' This entry is used to store the notification information')
nnMstPortNotificationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: nnMstPortNotificationIndex.setStatus('current')
if mibBuilder.loadTexts: nnMstPortNotificationIndex.setDescription('A unique value, greater than zero, indicating the Port number.')
nnMstPortNotificationMigrationType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sendstp", 0), ("sendrstp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortNotificationMigrationType.setStatus('current')
if mibBuilder.loadTexts: nnMstPortNotificationMigrationType.setDescription('Port Protocol migration type occured in the port')
nnMstPortNotificationPktErrType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("protocolIdErr", 0), ("invalidBpdu", 1), ("configLengthErr", 2), ("tcnLengthErr", 3), ("rstpLengthErr", 4), ("maxAgeErr", 5), ("fwdDelayErr", 6), ("helloTimeErr", 7), ("mstpLengthErr", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortNotificationPktErrType.setStatus('current')
if mibBuilder.loadTexts: nnMstPortNotificationPktErrType.setDescription('Type of invalid packet received in each of the port ')
nnMstPortNotificationPktErrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortNotificationPktErrVal.setStatus('current')
if mibBuilder.loadTexts: nnMstPortNotificationPktErrVal.setDescription('Packet error value corresponding to the above type ')
nnMstGeneralEvent = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 5, 0, 1)).setObjects(("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBrgAddress"), ("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstGenNotificationType"))
if mibBuilder.loadTexts: nnMstGeneralEvent.setStatus('current')
if mibBuilder.loadTexts: nnMstGeneralEvent.setDescription('Generated when any of the general events like protocol up or protocol down occurs')
nnMstErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 5, 0, 2)).setObjects(("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBrgAddress"), ("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstErrNotificationType"))
if mibBuilder.loadTexts: nnMstErrorEvent.setStatus('current')
if mibBuilder.loadTexts: nnMstErrorEvent.setDescription('Generated when any of the error events like memory failure or buffer failure or protocol migration or new root or topology change occurs ')
nnMstNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 5, 0, 3)).setObjects(("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBrgAddress"), ("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBridgeOldDesignatedRoot"), ("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBridgeRegionalRoot"))
if mibBuilder.loadTexts: nnMstNewRoot.setStatus('current')
if mibBuilder.loadTexts: nnMstNewRoot.setDescription('Generated whenever a new root bridge is selected in the topology ')
nnMstTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 5, 0, 4)).setObjects(("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBrgAddress"))
if mibBuilder.loadTexts: nnMstTopologyChange.setStatus('current')
if mibBuilder.loadTexts: nnMstTopologyChange.setDescription('Generated when topology change is detected ')
nnMstProtocolMigration = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 5, 0, 5)).setObjects(("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBrgAddress"), ("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstForceProtocolVersion"), ("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstPortNotificationMigrationType"))
if mibBuilder.loadTexts: nnMstProtocolMigration.setStatus('current')
if mibBuilder.loadTexts: nnMstProtocolMigration.setDescription('Generated when port protocol migration happens in the port ')
nnMstRegionConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 5, 0, 6)).setObjects(("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBrgAddress"), ("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstConfigIdSel"), ("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstRegionName"), ("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstRegionVersion"), ("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstConfigDigest"))
if mibBuilder.loadTexts: nnMstRegionConfigChange.setStatus('current')
if mibBuilder.loadTexts: nnMstRegionConfigChange.setDescription("Generated when the MST region's configuration identifier changes.")
nnMstBridgeVlanMapTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 6), )
if mibBuilder.loadTexts: nnMstBridgeVlanMapTable.setStatus('current')
if mibBuilder.loadTexts: nnMstBridgeVlanMapTable.setDescription('Table containing Mapped VlanList specific to Spanning Tree Instance.')
nnMstBridgeVlanMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 6, 1), ).setIndexNames((0, "NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBridgeInstId"))
if mibBuilder.loadTexts: nnMstBridgeVlanMapEntry.setStatus('current')
if mibBuilder.loadTexts: nnMstBridgeVlanMapEntry.setDescription('Entry indicating the Bridge VlanMap Information.')
nnMstBridgeInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)))
if mibBuilder.loadTexts: nnMstBridgeInstId.setStatus('current')
if mibBuilder.loadTexts: nnMstBridgeInstId.setDescription('Spanning Tree Instance to which the information belongs.')
nnMstBridgeVlanMap = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 512)).setFixedLength(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstBridgeVlanMap.setStatus('current')
if mibBuilder.loadTexts: nnMstBridgeVlanMap.setDescription('This gives the bitwise representation for the Vlans Mapped for a particular instance. 512*8 bits used to represent 4096 vlans. The 0th bit represents vlan 1, 1st bit represents vlan 2 and so forth. If vlan n is mapped to a particular instance then the n-1 indexed bit is set')
mibBuilder.exportSymbols("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", nnMstPortTransmittedBPDUs=nnMstPortTransmittedBPDUs, nnMstCistCurrentPortRole=nnMstCistCurrentPortRole, nnMstProtocolMigration=nnMstProtocolMigration, nnMultipleSpanningTreeMib=nnMultipleSpanningTreeMib, nnMstCistForwardDelay=nnMstCistForwardDelay, nnMstCistBridgePriority=nnMstCistBridgePriority, nnMstCistPortStateTransitionSemState=nnMstCistPortStateTransitionSemState, nnMstMaxHopCount=nnMstMaxHopCount, nnMstCistRoot=nnMstCistRoot, nnMstBridgeRegionalRoot=nnMstBridgeRegionalRoot, nnMstCistPortDesignatedPort=nnMstCistPortDesignatedPort, nnMstCistPortOperP2P=nnMstCistPortOperP2P, nnMstBridgeRootCost=nnMstBridgeRootCost, nnMstCistPortTxMstBpduCount=nnMstCistPortTxMstBpduCount, nnMstPortDesignatedPort=nnMstPortDesignatedPort, nnMstPortNotificationTable=nnMstPortNotificationTable, nnMstCistRegionalRoot=nnMstCistRegionalRoot, nnMstRegionVersion=nnMstRegionVersion, nnMstMstpUpCount=nnMstMstpUpCount, nnMstTopologyChange=nnMstTopologyChange, nnMstCistRootPort=nnMstCistRootPort, nnMstErrNotificationType=nnMstErrNotificationType, nnMstNotificationControlScalars=nnMstNotificationControlScalars, nnMstCistPortTransmitSemState=nnMstCistPortTransmitSemState, nnMstCistRegionalRootCost=nnMstCistRegionalRootCost, nnMstPortPriority=nnMstPortPriority, nnMstCistPortTxConfigBpduCount=nnMstCistPortTxConfigBpduCount, nnMstPortReceivedBPDUs=nnMstPortReceivedBPDUs, nnMstNotificationControl=nnMstNotificationControl, nnMstBridgeTable=nnMstBridgeTable, nnMstSetNotifications=nnMstSetNotifications, nnMstCistTopChanges=nnMstCistTopChanges, nnMstPortNotificationEntry=nnMstPortNotificationEntry, nnMstPathCostDefaultType=nnMstPathCostDefaultType, nnMstForceProtocolVersion=nnMstForceProtocolVersion, nnMstPortTopologyChangeSemState=nnMstPortTopologyChangeSemState, nnMstConfigDigest=nnMstConfigDigest, nnMstTxHoldCount=nnMstTxHoldCount, nnMstBridgeEntry=nnMstBridgeEntry, nnMstGeneralEvent=nnMstGeneralEvent, nnMstBridgeRoleSelectionSemState=nnMstBridgeRoleSelectionSemState, nnMstPortDesignatedRoot=nnMstPortDesignatedRoot, nnMstPortTable=nnMstPortTable, nnMstCistNewRootBridgeCount=nnMstCistNewRootBridgeCount, nnMstBridgeVlanMapEntry=nnMstBridgeVlanMapEntry, nnMstCistPortOperEdgeStatus=nnMstCistPortOperEdgeStatus, nnMstCistPortAdminEdgeStatus=nnMstCistPortAdminEdgeStatus, nnMstPortForwardTransitions=nnMstPortForwardTransitions, nnMstPortNotificationIndex=nnMstPortNotificationIndex, nnMstCistPortProtMigrationSemState=nnMstCistPortProtMigrationSemState, nnMstCistPortRxConfigBpduCount=nnMstCistPortRxConfigBpduCount, nnMstCistPortPriority=nnMstCistPortPriority, nnMstBridgeInstance=nnMstBridgeInstance, nnMstCistPortRxTcnBpduCount=nnMstCistPortRxTcnBpduCount, nnMstCistPortInfoSemState=nnMstCistPortInfoSemState, nnMstCistPortDesignatedRoot=nnMstCistPortDesignatedRoot, nnMstBridgeNewRootCount=nnMstBridgeNewRootCount, nnMstPortCurrentPortRole=nnMstPortCurrentPortRole, nnMstCistProtocolMigrationCount=nnMstCistProtocolMigrationCount, nnMstCistPortInvalidMstBpduRxCount=nnMstCistPortInvalidMstBpduRxCount, nnMstCistBridgeMaxAge=nnMstCistBridgeMaxAge, nnMstPortEffectivePortState=nnMstPortEffectivePortState, nnMstMstpDownCount=nnMstMstpDownCount, nnMstErrorEvent=nnMstErrorEvent, nnMstNotifications=nnMstNotifications, nnMstBridgeTimeSinceTopologyChange=nnMstBridgeTimeSinceTopologyChange, nnMstBridgeOldDesignatedRoot=nnMstBridgeOldDesignatedRoot, nnMstCistMaxAge=nnMstCistMaxAge, nnMstBridgeEnabled=nnMstBridgeEnabled, nnMstCistPortOperVersion=nnMstCistPortOperVersion, nnMstPortInvalidBPDUsRcvd=nnMstPortInvalidBPDUsRcvd, nnMstPortInfoSemState=nnMstPortInfoSemState, nnMstBrgAddress=nnMstBrgAddress, nnMstCistPortRxMstBpduCount=nnMstCistPortRxMstBpduCount, nnMstPortRoleTransitionSemState=nnMstPortRoleTransitionSemState, nnMstCistPortTopologyChangeSemState=nnMstCistPortTopologyChangeSemState, nnMstNewRoot=nnMstNewRoot, nnMstBridgeInstanceDownCount=nnMstBridgeInstanceDownCount, nnMstCistPortRxRstBpduCount=nnMstCistPortRxRstBpduCount, nnMstRegionConfigChange=nnMstRegionConfigChange, nnMstGenNotificationType=nnMstGenNotificationType, nnMstPort=nnMstPort, nnMstCistBridgeRoleSelectionSemState=nnMstCistBridgeRoleSelectionSemState, nnMstBridgeInstId=nnMstBridgeInstId, nnMstPortDesignatedCost=nnMstPortDesignatedCost, nnMstCistForcePortState=nnMstCistForcePortState, nnMstCistPortInvalidTcnBpduRxCount=nnMstCistPortInvalidTcnBpduRxCount, nnMstPortPathCost=nnMstPortPathCost, nnMstScalars=nnMstScalars, PYSNMP_MODULE_ID=nnMultipleSpanningTreeMib, nnMstCistPortRegionalPathCost=nnMstCistPortRegionalPathCost, nnMstCistPort=nnMstCistPort, nnMstBridgeTopChanges=nnMstBridgeTopChanges, nnMstCistPortInvalidRstBpduRxCount=nnMstCistPortInvalidRstBpduRxCount, nnMstCistPortRoleTransitionSemState=nnMstCistPortRoleTransitionSemState, nnMstCistPortRegionalRoot=nnMstCistPortRegionalRoot, nnMstPortNotificationPktErrVal=nnMstPortNotificationPktErrVal, nnMstPortState=nnMstPortState, nnMstPortNotificationMigrationType=nnMstPortNotificationMigrationType, nnMstObjects=nnMstObjects, nnMstCistPortInvalidConfigBpduRxCount=nnMstCistPortInvalidConfigBpduRxCount, nnMstNoOfInstancesSupported=nnMstNoOfInstancesSupported, nnMstCistPortEffectivePortState=nnMstCistPortEffectivePortState, nnMstPortDesignatedBridge=nnMstPortDesignatedBridge, nnMstCistPortHelloTime=nnMstCistPortHelloTime, nnMstCistTimeSinceTopologyChange=nnMstCistTimeSinceTopologyChange, nnMstCistPortTable=nnMstCistPortTable, nnMstCistPortTxRstBpduCount=nnMstCistPortTxRstBpduCount, nnMstCistPortDesignatedCost=nnMstCistPortDesignatedCost, nnMstCistPortProtocolMigration=nnMstCistPortProtocolMigration, nnMstBridgeInstanceUpCount=nnMstBridgeInstanceUpCount, nnMstBridgeRowStatus=nnMstBridgeRowStatus, nnMstPortStateTransitionSemState=nnMstPortStateTransitionSemState, nnMstCistHoldTime=nnMstCistHoldTime, nnMstConfigIdSel=nnMstConfigIdSel, nnMstBridgeVlanMapTable=nnMstBridgeVlanMapTable, nnMstCistRootCost=nnMstCistRootCost, nnMstCistPortForwardTransitions=nnMstCistPortForwardTransitions, nnMstCistBridgeForwardDelay=nnMstCistBridgeForwardDelay, nnMstPortForcePortState=nnMstPortForcePortState, nnMstCistPortAdminP2P=nnMstCistPortAdminP2P, nnMstCistPortState=nnMstCistPortState, nnMstBridgeVlanMap=nnMstBridgeVlanMap, nnMstRegionConfigChangeCount=nnMstRegionConfigChangeCount, nnMstCistPortDesignatedBridge=nnMstCistPortDesignatedBridge, nnMstPortEntry=nnMstPortEntry, nnMstPortSelectedPortRole=nnMstPortSelectedPortRole, nnMstPortNotificationPktErrType=nnMstPortNotificationPktErrType, nnMstCistPortTxTcnBpduCount=nnMstCistPortTxTcnBpduCount, nnMstBridgeRootPort=nnMstBridgeRootPort, nnMstRegionName=nnMstRegionName, nnMstBridgePriority=nnMstBridgePriority, nnMstCistPortEntry=nnMstCistPortEntry, nnMstCistPortPathCost=nnMstCistPortPathCost, nnMstCistSelectedPortRole=nnMstCistSelectedPortRole, nnMstCistPortReceiveSemState=nnMstCistPortReceiveSemState)
