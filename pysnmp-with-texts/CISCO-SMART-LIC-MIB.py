#
# PySNMP MIB module CISCO-SMART-LIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SMART-LIC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:12:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, Integer32, Counter32, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32, Gauge32, MibIdentifier, ObjectIdentity, NotificationType, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Counter32", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32", "Gauge32", "MibIdentifier", "ObjectIdentity", "NotificationType", "TimeTicks", "Counter64")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
ciscoSmartLicMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 831))
ciscoSmartLicMIB.setRevisions(('2016-04-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSmartLicMIB.setRevisionsDescriptions(('Initial Version of Cisco Smart Licensing MIB',))
if mibBuilder.loadTexts: ciscoSmartLicMIB.setLastUpdated('201604050000Z')
if mibBuilder.loadTexts: ciscoSmartLicMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSmartLicMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: ask-smartlicensing@cisco.com')
if mibBuilder.loadTexts: ciscoSmartLicMIB.setDescription('The MIB module for managing licenses on the system. The licensing mechanism provides flexibility to enforce licensing for various features in the system. The following description introduces different concepts and terminologies necessary to understand the MIB definition and to perform license management. Product Instance: An instance of a Cisco software image that runs on a hardware platform and requires some licensing capability. Software ID tag: A string generated by the Cisco Connected Software IT team to uniquely identify a Cisco software product. Smart Account: A Smart Licensing account that is created for Cisco customers or partners to manage their Smart Licensing product instances and licenses. The account is created on the Cisco Smart Software Manager portal. An enterprise account can have several virtual accounts (a.k.a. pools) of licenses. Cisco Smart Software Manager (CSSM): The Smart Licensing back-end system, hosted on Cisco IT infrastructure, is responsible for managing all Smart Licensing services and transactions. It provides a set of APIs that the Smart Agent can communicate with and an external-facing UI for Cisco customers and partners to log into and manage their Smart Licensing account. Registration Token: A token that is generated from the Cisco Smart Software Manager. The token is used to register a product instance with the Cisco Smart Software Manager. Smart Agent: A Smart Licensing software client that runs on a product instance and communicates with the Cisco Smart Software Manager. Entitlement Tag: A unique string that identifies a feature that can be enabled on a product instance. The tags are used by both the Smart Agent and the Cisco Smart Software Manager to track entitlement requests. Transport Mode: The Smart Agent uses the Smart Call Home (SCH) service as a transport medium to communicate with the Smart Licensing back-end. Crypto (LCS) Service: In addition to HTTPS exchanged messages are further signed and verified on both sides to ensure the authenticity of all communication. The Smart Software Licensing system uses a crypto service and underlying crypto library (either CiscoSSL or PKI). The Smart Software Licensing back-end leverages the Licensing Crypto Service (LCS) service. UDI: Unique Device Identifier that uniquely identifies a device. Primarily it consists of a product ID, version ID and serial number of the Customers device. Grace Period: A product enters into a grace period when the authorization period expires. This is the result of multiple authorization attempt failures which occurring 90 days after the last successful authorization. The grace period continues until the grace period expires - 90 days after the grace period starts. Counted License: Limits the number of similar entities that can consume a license. For example, a counted license when used by a feature can limit the number of IP phones that can connect or the number of tunnels that can be created. Evaluation License: An Evaluation License grants the right to a customer to enable functionality of a product instance before registering it and without an explicit portal based license for a limited amount of time. This amount of time ranges on average between 60 to 90 days. Evaluation licenses are available for most functionality, but may be limited for a variety of reasons such as legal, royalty, regulatory, or other causes. This MIB module also defines various notifications that will be triggered to asynchronously notify the management application of any critical events.')
ciscoSlaMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 831, 0))
ciscoSlaInstanceId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaInstanceId.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaInstanceId.setDescription("This object indicates the smart licence agent's instance number.")
ciscoSlaSUDIInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaSUDIInfo.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaSUDIInfo.setDescription('This object indicates the device identifier information')
ciscoSlaVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaVersion.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaVersion.setDescription('This object indicates the smart licensing version information in the below shown sample format. sample format: Cisco Smart Licensing Agent, Version 1.1.0_290')
ciscoSlaEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaEnabled.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaEnabled.setDescription("This object indicates whether the smart licensing mode is enabled. A value of 'true' indicates the mode is enabled.")
ciscoSlaEntitlementInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 5))
ciscoSlaEntitlementInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 5, 1), )
if mibBuilder.loadTexts: ciscoSlaEntitlementInfoTable.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaEntitlementInfoTable.setDescription('This table contains information about all entitlements being requested from this device')
ciscoSlaEntitlementInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 5, 1, 1), ).setIndexNames((0, "CISCO-SMART-LIC-MIB", "ciscoSlaEntitlementInfoIndex"))
if mibBuilder.loadTexts: ciscoSlaEntitlementInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaEntitlementInfoEntry.setDescription('An entry in ciscoSlaEntitlementInfoEntry. Each entry contains information about a entitlement requested on the device. This entry gets created when a license is requested successfully. Management application can not create these entries directly')
ciscoSlaEntitlementInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ciscoSlaEntitlementInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaEntitlementInfoIndex.setDescription('This object uniquely identifies an entitlement record')
ciscoSlaEntitlementRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 5, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaEntitlementRequestCount.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaEntitlementRequestCount.setDescription("Number of count that was requested for this entitlement tag. A value of 'zero' indicates that this entitlement is not in use.")
ciscoSlaEntitlementTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 5, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaEntitlementTag.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaEntitlementTag.setDescription('The tag name for the entitlement in use. This is abbreviated form of the entitlement tag.')
ciscoSlaEntitlementVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 5, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaEntitlementVersion.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaEntitlementVersion.setDescription('This object indicates the entitlement version.')
ciscoSlaEntitlementEnforceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("initialized", 1), ("waiting", 2), ("authorized", 3), ("outOfCompliance", 4), ("overage", 5), ("evaluationPeriod", 6), ("evaluationExpired", 7), ("gracePeriod", 8), ("gracePeriodExpired", 9), ("disabled", 10), ("invalidTag", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaEntitlementEnforceMode.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaEntitlementEnforceMode.setDescription('This object indicates the enforce mode for the entitlement tag. In Entitlement notifications this will indicate the enforcement mode of an individual entitlement. In global notifications this indicates the overall enforcement mode in the agent.')
ciscoSlaEntitlementDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 5, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaEntitlementDescription.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaEntitlementDescription.setDescription('This object indicates the description for the entitlements. This value is only available after the agent receives a response from CSSM to an Authorization request. If the description is unknown this object will contain a null string.')
ciscoSlaEntitlementFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 5, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaEntitlementFeatureName.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaEntitlementFeatureName.setDescription('This value is the short feature name for the entitlement and is only available after the agent receives a response from CSSM to an Authorization request. If its value is unknown this object will contain a null string.')
ciscoSlaRegistrationStatusInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 6))
ciscoSlaRegistrationStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notRegistered", 1), ("registrationInProgress", 2), ("registrationFailed", 3), ("registrationRetryinProgress", 4), ("registrationCompleted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaRegistrationStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaRegistrationStatus.setDescription('Smart Agent Registration Status. This is the status of the registration initiated using the token generated from the Cisco Licensing portal.')
ciscoSlaVirtualAccount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 6, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaVirtualAccount.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaVirtualAccount.setDescription('The virtual account name created in the Licensing Portal to which this device will be registered.')
ciscoSlaNextCertificateExpireTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 6, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaNextCertificateExpireTime.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaNextCertificateExpireTime.setDescription('The next expiration date/time of ID Certificate in UTC epoch seconds.')
ciscoSlaEnterpriseAccountName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 6, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaEnterpriseAccountName.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaEnterpriseAccountName.setDescription('The enterprise account name as configured in the Cisco Licensing Portal.')
ciscoSlaRegisterTime = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 6, 5))
ciscoSlaRegisterInitTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 6, 5, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaRegisterInitTime.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaRegisterInitTime.setDescription('Time in UTC epoch seconds when the Registration of the Smart Agent was initialized.')
ciscoSlaRegisterSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 6, 5, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaRegisterSuccess.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaRegisterSuccess.setDescription('Status of the last attempted Registration of Smart Agent')
ciscoSlaRegisterFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 6, 5, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaRegisterFailureReason.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaRegisterFailureReason.setDescription('Reason for the failure of the last Registration Attempt')
ciscoSlaRegisterNextRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 6, 5, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaRegisterNextRetryTime.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaRegisterNextRetryTime.setDescription('Time in UTC epoch seconds when the next registration attempt will be made.')
ciscoSlaRenewTime = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 6, 6))
ciscoSlaRenewInitTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 6, 6, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaRenewInitTime.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaRenewInitTime.setDescription('Time in UTC epoch seconds when the ID Cert renewal was initialized')
ciscoSlaRenewSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 6, 6, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaRenewSuccess.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaRenewSuccess.setDescription('Status of Renewal of ID Certificate')
ciscoSlaRenewFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 6, 6, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaRenewFailureReason.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaRenewFailureReason.setDescription('Reason for the failure of the last attempted ID Cert Renewal')
ciscoSlaRenewNextRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 6, 6, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaRenewNextRetryTime.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaRenewNextRetryTime.setDescription('Time in UTC epoch seconds when the next ID Cert renewal will be tried.')
ciscoSlaAuthorizationInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 7))
ciscoSlaAuthExpireTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 7, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaAuthExpireTime.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaAuthExpireTime.setDescription('The time in UTC epoch seconds when the authorization will expire if not renewed')
ciscoSlaAuthComplianceStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 7, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaAuthComplianceStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaAuthComplianceStatus.setDescription('Overall enforcement status of Smart Licensing in the device.')
ciscoSlaAuthOOCStartTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 7, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaAuthOOCStartTime.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaAuthOOCStartTime.setDescription('The time in UTC epoch seconds Smart Agent entered Out of Compliance state for this device.')
ciscoSlaAuthEvalPeriod = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 7, 4))
ciscoSlaAuthEvalPeriodInUse = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 7, 4, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaAuthEvalPeriodInUse.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaAuthEvalPeriodInUse.setDescription('Indicates if the Evaluation Period is in Use or not')
ciscoSlaAuthEvalExpiredTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 7, 4, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaAuthEvalExpiredTime.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaAuthEvalExpiredTime.setDescription('Time in UTC epoch seconds when the Evaluation Period had expired.')
ciscoSlaAuthEvalPeriodLeft = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 7, 4, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaAuthEvalPeriodLeft.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaAuthEvalPeriodLeft.setDescription('Amount of Time left in the Evaluation Period')
ciscoSlaAuthRenewTime = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 7, 5))
ciscoSlaAuthRenewInitTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 7, 5, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaAuthRenewInitTime.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaAuthRenewInitTime.setDescription('Smart Agent Authorization Renewal Initialization Time in UTC epoch seconds')
ciscoSlaAuthRenewSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 7, 5, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaAuthRenewSuccess.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaAuthRenewSuccess.setDescription("This object indicates the authorization renewal status. A value of 'true' indicates the renewal was successful.")
ciscoSlaAuthRenewFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 7, 5, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaAuthRenewFailureReason.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaAuthRenewFailureReason.setDescription('This object indicates the reason for the failure of the last renewal request.')
ciscoSlaAuthRenewNextRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 7, 5, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSlaAuthRenewNextRetryTime.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaAuthRenewNextRetryTime.setDescription('Time in UTC epoch seconds when the next renewal will be retried.')
ciscoSlaNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 8))
ciscoSlaGlobalNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 8, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoSlaGlobalNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaGlobalNotifEnable.setDescription('This object indicates whether the device should generate the global notifications related to Smart Agent. This object enables/disables sending following notifications: ciscoSlaSmartAgentNotifyEnforcementMode, ciscoSlaSmartAgentNotifyReady, ciscoSlaSmartAgentNotifyEnabled, ciscoSlaSmartAgentNotifyDisabled, ciscoSlaSmartAgentNotifyRegisterFailed, ciscoSlaSmartAgentNotifyRegisterSuccess, ciscoSlaSmartAgentNotifyIdCertExpired, ciscoSlaSmartAgentNotifyIdCertRenewSuccess, ciscoSlaSmartAgentNotifyIdCertRenewFail, ciscoSlaSmartAgentNotifyAuthRenewSuccess, ciscoSlaSmartAgentNotifyAuthRenewFail, ciscoSlaSmartAgentNotifyCommunicationFailure, ciscoSlaSmartAgentNotifyCommunicationRestored, ciscoSlaSmartAgentNotifyIdCertRenewNotStarted, ciscoSlaSmartAgentNotifyIdCertOutOfRange, ciscoSlaSmartAgentNotifySystemClockChanged, ciscoSlaSmartAgentNotifyEvalExpiryWarning, ciscoSlaSmartAgentNotifyEvalExpired, ciscoSlaSmartAgentNotifyIdCertExpiryWarning')
ciscoSlaEntitlementNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 831, 0, 8, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoSlaEntitlementNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaEntitlementNotifEnable.setDescription('This object indicates whether the device should generate the notifications related to entitlement enforce mode in Smart Agent. This object enables/disables sending following notifications: ciscoSlaSmartAgentNotifyEntitlementEnforceMode')
ciscoSlaMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 831, 1))
ciscoSlaSmartAgentNotifyEnforcementMode = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 831, 1, 1)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaSUDIInfo"), ("CISCO-SMART-LIC-MIB", "ciscoSlaEntitlementEnforceMode"))
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyEnforcementMode.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyEnforcementMode.setDescription('The device generates this notification when the overall enforcement mode in the agent changes.')
ciscoSlaSmartAgentNotifyReady = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 831, 1, 2)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaSUDIInfo"))
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyReady.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyReady.setDescription('The device generates this notification when the Smart agent is initialized and ready.')
ciscoSlaSmartAgentNotifyEnabled = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 831, 1, 3)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaSUDIInfo"))
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyEnabled.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyEnabled.setDescription('The device generates this notification when Smart licensing has been enabled.')
ciscoSlaSmartAgentNotifyDisabled = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 831, 1, 4)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaSUDIInfo"))
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyDisabled.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyDisabled.setDescription('The device generates this notification when Smart licensing has been disabled')
ciscoSlaSmartAgentNotifyRegisterFailed = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 831, 1, 5)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaSUDIInfo"))
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyRegisterFailed.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyRegisterFailed.setDescription('The device generates this notification when Smart licensing registration with Cisco Software Manager has failed')
ciscoSlaSmartAgentNotifyRegisterSuccess = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 831, 1, 6)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaSUDIInfo"))
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyRegisterSuccess.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyRegisterSuccess.setDescription('The device generates this notification when smart licensing registration with Cisco Software Manager has succeeded.')
ciscoSlaSmartAgentNotifyIdCertExpired = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 831, 1, 7)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaSUDIInfo"))
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyIdCertExpired.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyIdCertExpired.setDescription('The device generates this notification when Smart licensing ID (node) certificate has expired')
ciscoSlaSmartAgentNotifyIdCertRenewSuccess = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 831, 1, 8)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaSUDIInfo"))
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyIdCertRenewSuccess.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyIdCertRenewSuccess.setDescription('The device generates this notification when Smart licensing ID (node) certificate renewal has succeded.')
ciscoSlaSmartAgentNotifyIdCertRenewFail = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 831, 1, 9)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaSUDIInfo"))
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyIdCertRenewFail.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyIdCertRenewFail.setDescription('The device generates this notification when Smart licensing ID (node) certificate renewal has failed.')
ciscoSlaSmartAgentNotifyAuthRenewSuccess = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 831, 1, 10)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaSUDIInfo"))
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyAuthRenewSuccess.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyAuthRenewSuccess.setDescription('The device generates this notification when Smart licensing entitlement (AUTH) renew was successful.')
ciscoSlaSmartAgentNotifyAuthRenewFail = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 831, 1, 11)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaSUDIInfo"))
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyAuthRenewFail.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyAuthRenewFail.setDescription('The device generates this notification when Smart licensing entitlement (AUTH) renew has failed')
ciscoSlaSmartAgentNotifyCommunicationFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 831, 1, 12)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaSUDIInfo"))
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyCommunicationFailure.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyCommunicationFailure.setDescription('The device generates this notification when Smart Agent failed to communicate with CSSM.')
ciscoSlaSmartAgentNotifyCommunicationRestored = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 831, 1, 13)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaSUDIInfo"))
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyCommunicationRestored.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyCommunicationRestored.setDescription('The device generates this notification when Smart Agent communication with CSSM has been restored')
ciscoSlaSmartAgentNotifyIdCertRenewNotStarted = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 831, 1, 14)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaSUDIInfo"))
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyIdCertRenewNotStarted.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyIdCertRenewNotStarted.setDescription('The device generates this notification when Smart Agent Id (Node) certificate renewal is not started')
ciscoSlaSmartAgentNotifyEntitlementEnforceMode = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 831, 1, 15)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaEntitlementRequestCount"), ("CISCO-SMART-LIC-MIB", "ciscoSlaEntitlementTag"), ("CISCO-SMART-LIC-MIB", "ciscoSlaEntitlementVersion"), ("CISCO-SMART-LIC-MIB", "ciscoSlaEntitlementEnforceMode"), ("CISCO-SMART-LIC-MIB", "ciscoSlaSUDIInfo"))
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyEntitlementEnforceMode.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyEntitlementEnforceMode.setDescription('The device generates this notification when the enforcement mode of an entitlement has changed.')
ciscoSlaSmartAgentNotifyIdCertOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 831, 1, 16)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaSUDIInfo"))
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyIdCertOutOfRange.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyIdCertOutOfRange.setDescription('The device generates this notification when the ID certificate is out of the valid range after the system clock changed. It means the current time is either before the start time or after the end time of the certificate.')
ciscoSlaSmartAgentNotifySystemClockChanged = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 831, 1, 17)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaSUDIInfo"))
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifySystemClockChanged.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifySystemClockChanged.setDescription('The device generates this notification when the system clock has changed.')
ciscoSlaSmartAgentNotifyEvalExpiryWarning = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 831, 1, 18)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaSUDIInfo"))
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyEvalExpiryWarning.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyEvalExpiryWarning.setDescription('The device generates this notification to warn regarding the impending evaluation time expiry.')
ciscoSlaSmartAgentNotifyEvalExpired = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 831, 1, 19)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaSUDIInfo"))
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyEvalExpired.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyEvalExpired.setDescription('The device generates this notification to notify the expiration of the evaluation period.')
ciscoSlaSmartAgentNotifyIdCertExpiryWarning = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 831, 1, 20)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaSUDIInfo"))
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyIdCertExpiryWarning.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaSmartAgentNotifyIdCertExpiryWarning.setDescription('The device generates this notification to warn regarding the impending expiry of the id (node) certificate.')
ciscoSlaMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 831, 2))
ciscoSlaMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 831, 2, 1))
ciscoSlaMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 831, 2, 1, 1)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaMIBEntitlementInfoGroup"), ("CISCO-SMART-LIC-MIB", "ciscoSlaMIBRegistrationStatusInfoGroup"), ("CISCO-SMART-LIC-MIB", "ciscoSlaMIBGlobalNotificationGroup"), ("CISCO-SMART-LIC-MIB", "ciscoSlaMIBAgentInfoGroup"), ("CISCO-SMART-LIC-MIB", "ciscoSlaMIBEntitlementNotifGroup"), ("CISCO-SMART-LIC-MIB", "ciscoSlaMIBNotificationEnableGroup"), ("CISCO-SMART-LIC-MIB", "ciscoSlaMIBAuthorizationInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlaMIBCompliance = ciscoSlaMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaMIBCompliance.setDescription('Compliance statement for Cisco Smart license MIB.')
ciscoSlaMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 831, 2, 2))
ciscoSlaMIBEntitlementInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 831, 2, 2, 1)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaEntitlementRequestCount"), ("CISCO-SMART-LIC-MIB", "ciscoSlaEntitlementTag"), ("CISCO-SMART-LIC-MIB", "ciscoSlaEntitlementVersion"), ("CISCO-SMART-LIC-MIB", "ciscoSlaEntitlementEnforceMode"), ("CISCO-SMART-LIC-MIB", "ciscoSlaEntitlementFeatureName"), ("CISCO-SMART-LIC-MIB", "ciscoSlaEntitlementDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlaMIBEntitlementInfoGroup = ciscoSlaMIBEntitlementInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaMIBEntitlementInfoGroup.setDescription('A collection of objects for Entitlements requested and their related information.')
ciscoSlaMIBRegistrationStatusInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 831, 2, 2, 2)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaRegistrationStatus"), ("CISCO-SMART-LIC-MIB", "ciscoSlaVirtualAccount"), ("CISCO-SMART-LIC-MIB", "ciscoSlaNextCertificateExpireTime"), ("CISCO-SMART-LIC-MIB", "ciscoSlaEnterpriseAccountName"), ("CISCO-SMART-LIC-MIB", "ciscoSlaRegisterInitTime"), ("CISCO-SMART-LIC-MIB", "ciscoSlaRegisterSuccess"), ("CISCO-SMART-LIC-MIB", "ciscoSlaRenewInitTime"), ("CISCO-SMART-LIC-MIB", "ciscoSlaRenewSuccess"), ("CISCO-SMART-LIC-MIB", "ciscoSlaRenewFailureReason"), ("CISCO-SMART-LIC-MIB", "ciscoSlaRenewNextRetryTime"), ("CISCO-SMART-LIC-MIB", "ciscoSlaRegisterFailureReason"), ("CISCO-SMART-LIC-MIB", "ciscoSlaRegisterNextRetryTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlaMIBRegistrationStatusInfoGroup = ciscoSlaMIBRegistrationStatusInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaMIBRegistrationStatusInfoGroup.setDescription('A collection of objects representing the information regarding the registration status of the device.')
ciscoSlaMIBGlobalNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 831, 2, 2, 3)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaSmartAgentNotifyEnforcementMode"), ("CISCO-SMART-LIC-MIB", "ciscoSlaSmartAgentNotifyReady"), ("CISCO-SMART-LIC-MIB", "ciscoSlaSmartAgentNotifyEnabled"), ("CISCO-SMART-LIC-MIB", "ciscoSlaSmartAgentNotifyDisabled"), ("CISCO-SMART-LIC-MIB", "ciscoSlaSmartAgentNotifyRegisterFailed"), ("CISCO-SMART-LIC-MIB", "ciscoSlaSmartAgentNotifyRegisterSuccess"), ("CISCO-SMART-LIC-MIB", "ciscoSlaSmartAgentNotifyIdCertExpired"), ("CISCO-SMART-LIC-MIB", "ciscoSlaSmartAgentNotifyIdCertRenewSuccess"), ("CISCO-SMART-LIC-MIB", "ciscoSlaSmartAgentNotifyIdCertRenewFail"), ("CISCO-SMART-LIC-MIB", "ciscoSlaSmartAgentNotifyAuthRenewSuccess"), ("CISCO-SMART-LIC-MIB", "ciscoSlaSmartAgentNotifyAuthRenewFail"), ("CISCO-SMART-LIC-MIB", "ciscoSlaSmartAgentNotifyCommunicationFailure"), ("CISCO-SMART-LIC-MIB", "ciscoSlaSmartAgentNotifyCommunicationRestored"), ("CISCO-SMART-LIC-MIB", "ciscoSlaSmartAgentNotifyIdCertRenewNotStarted"), ("CISCO-SMART-LIC-MIB", "ciscoSlaSmartAgentNotifyIdCertOutOfRange"), ("CISCO-SMART-LIC-MIB", "ciscoSlaSmartAgentNotifySystemClockChanged"), ("CISCO-SMART-LIC-MIB", "ciscoSlaSmartAgentNotifyEvalExpiryWarning"), ("CISCO-SMART-LIC-MIB", "ciscoSlaSmartAgentNotifyEvalExpired"), ("CISCO-SMART-LIC-MIB", "ciscoSlaSmartAgentNotifyIdCertExpiryWarning"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlaMIBGlobalNotificationGroup = ciscoSlaMIBGlobalNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaMIBGlobalNotificationGroup.setDescription('A collection of global notifications related to Smart Agent')
ciscoSlaMIBAgentInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 831, 2, 2, 4)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaVersion"), ("CISCO-SMART-LIC-MIB", "ciscoSlaEnabled"), ("CISCO-SMART-LIC-MIB", "ciscoSlaSUDIInfo"), ("CISCO-SMART-LIC-MIB", "ciscoSlaInstanceId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlaMIBAgentInfoGroup = ciscoSlaMIBAgentInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaMIBAgentInfoGroup.setDescription('A collection of objects representing meta data related to Smart Agent state')
ciscoSlaMIBEntitlementNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 831, 2, 2, 5)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaSmartAgentNotifyEntitlementEnforceMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlaMIBEntitlementNotifGroup = ciscoSlaMIBEntitlementNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaMIBEntitlementNotifGroup.setDescription('A collection of notifications related to entitlement enforce mode in SmartAgent')
ciscoSlaMIBNotificationEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 831, 2, 2, 6)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaGlobalNotifEnable"), ("CISCO-SMART-LIC-MIB", "ciscoSlaEntitlementNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlaMIBNotificationEnableGroup = ciscoSlaMIBNotificationEnableGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaMIBNotificationEnableGroup.setDescription('A collection of objects for controlling (enabling/disabling) license notifications to a management application.')
ciscoSlaMIBAuthorizationInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 831, 2, 2, 7)).setObjects(("CISCO-SMART-LIC-MIB", "ciscoSlaAuthExpireTime"), ("CISCO-SMART-LIC-MIB", "ciscoSlaAuthComplianceStatus"), ("CISCO-SMART-LIC-MIB", "ciscoSlaAuthOOCStartTime"), ("CISCO-SMART-LIC-MIB", "ciscoSlaAuthRenewInitTime"), ("CISCO-SMART-LIC-MIB", "ciscoSlaAuthRenewSuccess"), ("CISCO-SMART-LIC-MIB", "ciscoSlaAuthRenewFailureReason"), ("CISCO-SMART-LIC-MIB", "ciscoSlaAuthRenewNextRetryTime"), ("CISCO-SMART-LIC-MIB", "ciscoSlaAuthEvalPeriodInUse"), ("CISCO-SMART-LIC-MIB", "ciscoSlaAuthEvalExpiredTime"), ("CISCO-SMART-LIC-MIB", "ciscoSlaAuthEvalPeriodLeft"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlaMIBAuthorizationInfoGroup = ciscoSlaMIBAuthorizationInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlaMIBAuthorizationInfoGroup.setDescription('A collection of MIB objects representing the Authorization State of the Smart Agent.')
mibBuilder.exportSymbols("CISCO-SMART-LIC-MIB", ciscoSlaSmartAgentNotifyIdCertRenewFail=ciscoSlaSmartAgentNotifyIdCertRenewFail, ciscoSlaSmartAgentNotifyIdCertRenewNotStarted=ciscoSlaSmartAgentNotifyIdCertRenewNotStarted, ciscoSlaEntitlementNotifEnable=ciscoSlaEntitlementNotifEnable, ciscoSlaSmartAgentNotifyIdCertExpiryWarning=ciscoSlaSmartAgentNotifyIdCertExpiryWarning, ciscoSlaRegisterInitTime=ciscoSlaRegisterInitTime, ciscoSlaSmartAgentNotifyAuthRenewFail=ciscoSlaSmartAgentNotifyAuthRenewFail, ciscoSlaMIBNotifs=ciscoSlaMIBNotifs, ciscoSlaMIBEntitlementInfoGroup=ciscoSlaMIBEntitlementInfoGroup, ciscoSlaMIBGlobalNotificationGroup=ciscoSlaMIBGlobalNotificationGroup, ciscoSlaAuthEvalPeriodInUse=ciscoSlaAuthEvalPeriodInUse, ciscoSlaSmartAgentNotifyReady=ciscoSlaSmartAgentNotifyReady, ciscoSlaRegisterSuccess=ciscoSlaRegisterSuccess, ciscoSlaRegisterNextRetryTime=ciscoSlaRegisterNextRetryTime, ciscoSlaVersion=ciscoSlaVersion, ciscoSlaRenewSuccess=ciscoSlaRenewSuccess, ciscoSlaRenewInitTime=ciscoSlaRenewInitTime, ciscoSlaSmartAgentNotifyEvalExpired=ciscoSlaSmartAgentNotifyEvalExpired, ciscoSlaAuthOOCStartTime=ciscoSlaAuthOOCStartTime, ciscoSlaMIBCompliance=ciscoSlaMIBCompliance, ciscoSlaMIBNotificationEnableGroup=ciscoSlaMIBNotificationEnableGroup, ciscoSlaSmartAgentNotifyRegisterFailed=ciscoSlaSmartAgentNotifyRegisterFailed, ciscoSmartLicMIB=ciscoSmartLicMIB, ciscoSlaEntitlementFeatureName=ciscoSlaEntitlementFeatureName, ciscoSlaSmartAgentNotifyIdCertExpired=ciscoSlaSmartAgentNotifyIdCertExpired, ciscoSlaMIBCompliances=ciscoSlaMIBCompliances, ciscoSlaSmartAgentNotifyEnforcementMode=ciscoSlaSmartAgentNotifyEnforcementMode, ciscoSlaAuthRenewSuccess=ciscoSlaAuthRenewSuccess, ciscoSlaAuthRenewInitTime=ciscoSlaAuthRenewInitTime, ciscoSlaEntitlementTag=ciscoSlaEntitlementTag, ciscoSlaAuthorizationInfo=ciscoSlaAuthorizationInfo, ciscoSlaEntitlementInfo=ciscoSlaEntitlementInfo, ciscoSlaInstanceId=ciscoSlaInstanceId, ciscoSlaMIBAgentInfoGroup=ciscoSlaMIBAgentInfoGroup, ciscoSlaEntitlementInfoIndex=ciscoSlaEntitlementInfoIndex, ciscoSlaAuthComplianceStatus=ciscoSlaAuthComplianceStatus, ciscoSlaAuthExpireTime=ciscoSlaAuthExpireTime, ciscoSlaMIBRegistrationStatusInfoGroup=ciscoSlaMIBRegistrationStatusInfoGroup, ciscoSlaSmartAgentNotifyRegisterSuccess=ciscoSlaSmartAgentNotifyRegisterSuccess, ciscoSlaEntitlementVersion=ciscoSlaEntitlementVersion, ciscoSlaAuthRenewNextRetryTime=ciscoSlaAuthRenewNextRetryTime, ciscoSlaMIBEntitlementNotifGroup=ciscoSlaMIBEntitlementNotifGroup, ciscoSlaRegistrationStatusInfo=ciscoSlaRegistrationStatusInfo, ciscoSlaSmartAgentNotifyCommunicationRestored=ciscoSlaSmartAgentNotifyCommunicationRestored, ciscoSlaSUDIInfo=ciscoSlaSUDIInfo, ciscoSlaAuthEvalPeriodLeft=ciscoSlaAuthEvalPeriodLeft, ciscoSlaEntitlementInfoEntry=ciscoSlaEntitlementInfoEntry, ciscoSlaAuthEvalExpiredTime=ciscoSlaAuthEvalExpiredTime, ciscoSlaAuthEvalPeriod=ciscoSlaAuthEvalPeriod, ciscoSlaMIBGroups=ciscoSlaMIBGroups, ciscoSlaNextCertificateExpireTime=ciscoSlaNextCertificateExpireTime, ciscoSlaSmartAgentNotifyEntitlementEnforceMode=ciscoSlaSmartAgentNotifyEntitlementEnforceMode, ciscoSlaSmartAgentNotifyEvalExpiryWarning=ciscoSlaSmartAgentNotifyEvalExpiryWarning, ciscoSlaVirtualAccount=ciscoSlaVirtualAccount, ciscoSlaRegistrationStatus=ciscoSlaRegistrationStatus, ciscoSlaEntitlementInfoTable=ciscoSlaEntitlementInfoTable, ciscoSlaRenewFailureReason=ciscoSlaRenewFailureReason, ciscoSlaEntitlementEnforceMode=ciscoSlaEntitlementEnforceMode, ciscoSlaEntitlementDescription=ciscoSlaEntitlementDescription, ciscoSlaSmartAgentNotifySystemClockChanged=ciscoSlaSmartAgentNotifySystemClockChanged, ciscoSlaNotifObjects=ciscoSlaNotifObjects, ciscoSlaGlobalNotifEnable=ciscoSlaGlobalNotifEnable, ciscoSlaAuthRenewFailureReason=ciscoSlaAuthRenewFailureReason, ciscoSlaSmartAgentNotifyAuthRenewSuccess=ciscoSlaSmartAgentNotifyAuthRenewSuccess, ciscoSlaEnabled=ciscoSlaEnabled, ciscoSlaRegisterFailureReason=ciscoSlaRegisterFailureReason, ciscoSlaSmartAgentNotifyIdCertOutOfRange=ciscoSlaSmartAgentNotifyIdCertOutOfRange, ciscoSlaSmartAgentNotifyIdCertRenewSuccess=ciscoSlaSmartAgentNotifyIdCertRenewSuccess, ciscoSlaRegisterTime=ciscoSlaRegisterTime, ciscoSlaRenewNextRetryTime=ciscoSlaRenewNextRetryTime, ciscoSlaSmartAgentNotifyCommunicationFailure=ciscoSlaSmartAgentNotifyCommunicationFailure, ciscoSlaSmartAgentNotifyDisabled=ciscoSlaSmartAgentNotifyDisabled, ciscoSlaMIBConform=ciscoSlaMIBConform, ciscoSlaMIBAuthorizationInfoGroup=ciscoSlaMIBAuthorizationInfoGroup, ciscoSlaRenewTime=ciscoSlaRenewTime, ciscoSlaMIBObjects=ciscoSlaMIBObjects, ciscoSlaAuthRenewTime=ciscoSlaAuthRenewTime, PYSNMP_MODULE_ID=ciscoSmartLicMIB, ciscoSlaEnterpriseAccountName=ciscoSlaEnterpriseAccountName, ciscoSlaEntitlementRequestCount=ciscoSlaEntitlementRequestCount, ciscoSlaSmartAgentNotifyEnabled=ciscoSlaSmartAgentNotifyEnabled)
