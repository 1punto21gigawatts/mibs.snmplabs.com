#
# PySNMP MIB module HUAWEI-DIE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-DIE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:44:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
huaweiMgmt, hwDatacomm = mibBuilder.importSymbols("HUAWEI-MIB", "huaweiMgmt", "hwDatacomm")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, TimeTicks, Counter64, IpAddress, Bits, Gauge32, ModuleIdentity, Counter32, ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "Counter64", "IpAddress", "Bits", "Gauge32", "ModuleIdentity", "Counter32", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "MibIdentifier", "Unsigned32")
TruthValue, DateAndTime, DisplayString, TextualConvention, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DateAndTime", "DisplayString", "TextualConvention", "MacAddress", "RowStatus")
hwDIEmib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317))
hwDIEmib.setRevisions(('2013-01-10 11:50', '2013-06-29 11:50', '2013-10-26 11:50',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwDIEmib.setRevisionsDescriptions(('The MIB module for creating and deleting bulk files of SNMP data for file transfer.', 'The MIB module for creating and deleting bulk files of SNMP data for file transfer.', 'The MIB contains objects of module DIE.',))
if mibBuilder.loadTexts: hwDIEmib.setLastUpdated('201301101150Z')
if mibBuilder.loadTexts: hwDIEmib.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwDIEmib.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com")
if mibBuilder.loadTexts: hwDIEmib.setDescription('The MIB module for creating and deleting bulk files of SNMP data for file transfer.')
hwDIEMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1))
hwDIETable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 1), )
if mibBuilder.loadTexts: hwDIETable.setStatus('current')
if mibBuilder.loadTexts: hwDIETable.setDescription('The DIE table.')
hwDIEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 1, 1), ).setIndexNames((0, "HUAWEI-DIE-MIB", "hwDIEDeviceProfileIndex"))
if mibBuilder.loadTexts: hwDIEEntry.setStatus('current')
if mibBuilder.loadTexts: hwDIEEntry.setDescription('The DIE entry.')
hwDIEDeviceProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDIEDeviceProfileIndex.setStatus('current')
if mibBuilder.loadTexts: hwDIEDeviceProfileIndex.setDescription('DIE profile index.')
hwDIEDeviceProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDIEDeviceProfileName.setStatus('current')
if mibBuilder.loadTexts: hwDIEDeviceProfileName.setDescription('DIE profile name.')
hwDIEDeviceProfileDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDIEDeviceProfileDevType.setStatus('current')
if mibBuilder.loadTexts: hwDIEDeviceProfileDevType.setDescription('DIE profile device type.')
hwDIEDeviceProfileEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDIEDeviceProfileEnable.setStatus('current')
if mibBuilder.loadTexts: hwDIEDeviceProfileEnable.setDescription('Specify device profile enable Flag.')
hwDIEDeviceProfileRuleLogic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDIEDeviceProfileRuleLogic.setStatus('current')
if mibBuilder.loadTexts: hwDIEDeviceProfileRuleLogic.setDescription('Rule operation logic.')
hwDIEDeviceProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDIEDeviceProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDIEDeviceProfileRowStatus.setDescription('RowStatus.')
hwDIERuleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 2), )
if mibBuilder.loadTexts: hwDIERuleTable.setStatus('current')
if mibBuilder.loadTexts: hwDIERuleTable.setDescription('The DIE extend table.')
hwDIERuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 2, 1), ).setIndexNames((0, "HUAWEI-DIE-MIB", "hwDIEDeviceProfileIndex"), (0, "HUAWEI-DIE-MIB", "hwDIERuleRuleIndex"))
if mibBuilder.loadTexts: hwDIERuleEntry.setStatus('current')
if mibBuilder.loadTexts: hwDIERuleEntry.setDescription('The DIE extend entry.')
hwDIERuleRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDIERuleRuleIndex.setStatus('current')
if mibBuilder.loadTexts: hwDIERuleRuleIndex.setDescription('Rule index.')
hwDIERuleMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 2, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDIERuleMacAddress.setStatus('current')
if mibBuilder.loadTexts: hwDIERuleMacAddress.setDescription('Mac address')
hwDIERuleMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDIERuleMacMask.setStatus('current')
if mibBuilder.loadTexts: hwDIERuleMacMask.setDescription('Mac address mask.')
hwDIERuleDhcpOptionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDIERuleDhcpOptionID.setStatus('current')
if mibBuilder.loadTexts: hwDIERuleDhcpOptionID.setDescription('DHCP option id.')
hwDIERuleDhcpOptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("ascii", 1), ("hex", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDIERuleDhcpOptionType.setStatus('current')
if mibBuilder.loadTexts: hwDIERuleDhcpOptionType.setDescription('The object means option type in DHCP option value The value means : ascii(1)- The option type is ascii string hex(2) - The option type is hex number')
hwDIERuleDhcpOptionTextAscii = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 247))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDIERuleDhcpOptionTextAscii.setStatus('current')
if mibBuilder.loadTexts: hwDIERuleDhcpOptionTextAscii.setDescription('DHCP option content.')
hwDIERuleDhcpOptionTextHex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 765))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDIERuleDhcpOptionTextHex.setStatus('current')
if mibBuilder.loadTexts: hwDIERuleDhcpOptionTextHex.setDescription('DHCP option content.')
hwDIERuleDhcpOptionMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("subMatch", 1), ("allMatch", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDIERuleDhcpOptionMatch.setStatus('current')
if mibBuilder.loadTexts: hwDIERuleDhcpOptionMatch.setDescription('DHCP option mask.')
hwDIERuleUserAgentText = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 247))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDIERuleUserAgentText.setStatus('current')
if mibBuilder.loadTexts: hwDIERuleUserAgentText.setDescription('User agent content.')
hwDIERuleUserAgentMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("subMatch", 1), ("allMatch", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDIERuleUserAgentMatch.setStatus('current')
if mibBuilder.loadTexts: hwDIERuleUserAgentMatch.setDescription('User agent mask.')
hwDIERuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDIERuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDIERuleRowStatus.setDescription('RowStatus.')
hwDeviceSensorDhcpOption = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDeviceSensorDhcpOption.setStatus('current')
if mibBuilder.loadTexts: hwDeviceSensorDhcpOption.setDescription('Description.')
hwDeviceSensorLLDPTlv = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDeviceSensorLLDPTlv.setStatus('current')
if mibBuilder.loadTexts: hwDeviceSensorLLDPTlv.setDescription('Description.')
hwDIEConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 3))
hwDIECompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 3, 1))
hwDIECompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 3, 1, 1)).setObjects(("HUAWEI-DIE-MIB", "hwDIEGroup"), ("HUAWEI-DIE-MIB", "hwDIERuleGroup"), ("HUAWEI-DIE-MIB", "hwDeviceSensorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDIECompliance = hwDIECompliance.setStatus('current')
if mibBuilder.loadTexts: hwDIECompliance.setDescription('The compliance statement for systems supporting this module.')
hwDIEObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 3, 2))
hwDIEGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 3, 2, 1)).setObjects(("HUAWEI-DIE-MIB", "hwDIEDeviceProfileIndex"), ("HUAWEI-DIE-MIB", "hwDIEDeviceProfileName"), ("HUAWEI-DIE-MIB", "hwDIEDeviceProfileDevType"), ("HUAWEI-DIE-MIB", "hwDIEDeviceProfileEnable"), ("HUAWEI-DIE-MIB", "hwDIEDeviceProfileRuleLogic"), ("HUAWEI-DIE-MIB", "hwDIEDeviceProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDIEGroup = hwDIEGroup.setStatus('current')
if mibBuilder.loadTexts: hwDIEGroup.setDescription('The DIE configuration.')
hwDIERuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 3, 2, 2)).setObjects(("HUAWEI-DIE-MIB", "hwDIERuleRuleIndex"), ("HUAWEI-DIE-MIB", "hwDIERuleMacAddress"), ("HUAWEI-DIE-MIB", "hwDIERuleMacMask"), ("HUAWEI-DIE-MIB", "hwDIERuleDhcpOptionID"), ("HUAWEI-DIE-MIB", "hwDIERuleDhcpOptionType"), ("HUAWEI-DIE-MIB", "hwDIERuleDhcpOptionTextAscii"), ("HUAWEI-DIE-MIB", "hwDIERuleDhcpOptionTextHex"), ("HUAWEI-DIE-MIB", "hwDIERuleDhcpOptionMatch"), ("HUAWEI-DIE-MIB", "hwDIERuleUserAgentText"), ("HUAWEI-DIE-MIB", "hwDIERuleUserAgentMatch"), ("HUAWEI-DIE-MIB", "hwDIERuleRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDIERuleGroup = hwDIERuleGroup.setStatus('current')
if mibBuilder.loadTexts: hwDIERuleGroup.setDescription('The DIE rule configuration.')
hwDeviceSensorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 317, 3, 2, 3)).setObjects(("HUAWEI-DIE-MIB", "hwDeviceSensorDhcpOption"), ("HUAWEI-DIE-MIB", "hwDeviceSensorLLDPTlv"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDeviceSensorGroup = hwDeviceSensorGroup.setStatus('current')
if mibBuilder.loadTexts: hwDeviceSensorGroup.setDescription('The DIE sensor configuration.')
mibBuilder.exportSymbols("HUAWEI-DIE-MIB", hwDIERuleDhcpOptionMatch=hwDIERuleDhcpOptionMatch, hwDIEGroup=hwDIEGroup, hwDIEDeviceProfileIndex=hwDIEDeviceProfileIndex, hwDIETable=hwDIETable, hwDIERuleMacAddress=hwDIERuleMacAddress, hwDIERuleRowStatus=hwDIERuleRowStatus, hwDIERuleUserAgentMatch=hwDIERuleUserAgentMatch, hwDIERuleGroup=hwDIERuleGroup, hwDIEDeviceProfileName=hwDIEDeviceProfileName, hwDIERuleTable=hwDIERuleTable, hwDIERuleMacMask=hwDIERuleMacMask, hwDeviceSensorDhcpOption=hwDeviceSensorDhcpOption, hwDIEDeviceProfileDevType=hwDIEDeviceProfileDevType, hwDIERuleDhcpOptionTextHex=hwDIERuleDhcpOptionTextHex, hwDIEDeviceProfileEnable=hwDIEDeviceProfileEnable, hwDIERuleUserAgentText=hwDIERuleUserAgentText, hwDeviceSensorLLDPTlv=hwDeviceSensorLLDPTlv, hwDIERuleEntry=hwDIERuleEntry, PYSNMP_MODULE_ID=hwDIEmib, hwDIEEntry=hwDIEEntry, hwDIECompliance=hwDIECompliance, hwDIERuleDhcpOptionTextAscii=hwDIERuleDhcpOptionTextAscii, hwDIERuleDhcpOptionType=hwDIERuleDhcpOptionType, hwDeviceSensorGroup=hwDeviceSensorGroup, hwDIEObjectGroups=hwDIEObjectGroups, hwDIEmib=hwDIEmib, hwDIERuleRuleIndex=hwDIERuleRuleIndex, hwDIEConformance=hwDIEConformance, hwDIEDeviceProfileRowStatus=hwDIEDeviceProfileRowStatus, hwDIERuleDhcpOptionID=hwDIERuleDhcpOptionID, hwDIEDeviceProfileRuleLogic=hwDIEDeviceProfileRuleLogic, hwDIECompliances=hwDIECompliances, hwDIEMibObjects=hwDIEMibObjects)
