#
# PySNMP MIB module TERAWAVE-terasystem-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TERAWAVE-terasystem-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:16:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Bits, Counter32, ObjectIdentity, NotificationType, TimeTicks, MibIdentifier, ModuleIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32, iso, enterprises, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "Counter32", "ObjectIdentity", "NotificationType", "TimeTicks", "MibIdentifier", "ModuleIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32", "iso", "enterprises", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
terawave = MibIdentifier((1, 3, 6, 1, 4, 1, 4513))
teraSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5))
teraSystemTime = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemTime.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemTime.setDescription('')
teraSystemCurrTime = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraSystemCurrTime.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemCurrTime.setDescription('')
teraLogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 8))
teraLogNumberTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 8, 1), )
if mibBuilder.loadTexts: teraLogNumberTable.setStatus('mandatory')
if mibBuilder.loadTexts: teraLogNumberTable.setDescription(' table teraLogNumberTable')
teraLogNumberTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 8, 1, 1), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "teraLogNumber"))
if mibBuilder.loadTexts: teraLogNumberTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: teraLogNumberTableEntry.setDescription(' table entry teraLogNumberTableEntry ')
teraLogNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLogNumber.setStatus('mandatory')
if mibBuilder.loadTexts: teraLogNumber.setDescription('')
teraLogNumberDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLogNumberDescr.setStatus('mandatory')
if mibBuilder.loadTexts: teraLogNumberDescr.setDescription('')
teraLogNumberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLogNumberStatus.setStatus('mandatory')
if mibBuilder.loadTexts: teraLogNumberStatus.setDescription('')
teraLogClear = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLogClear.setStatus('mandatory')
if mibBuilder.loadTexts: teraLogClear.setDescription('')
teraLogTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3), )
if mibBuilder.loadTexts: teraLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: teraLogTable.setDescription(' table teraLogTable')
teraLogTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 4), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "teraInstallSlotNumber"), (0, "TERAWAVE-terasystem-MIB", "teraLogNumber"), (0, "TERAWAVE-terasystem-MIB", "teraLogMsgIndex"))
if mibBuilder.loadTexts: teraLogTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: teraLogTableEntry.setDescription(' table entry teraLogTableEntry ')
teraLogMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLogMsgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: teraLogMsgIndex.setDescription('')
teraLogMsgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLogMsgNumber.setStatus('mandatory')
if mibBuilder.loadTexts: teraLogMsgNumber.setDescription('')
teraLogNumberOfParams = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLogNumberOfParams.setStatus('mandatory')
if mibBuilder.loadTexts: teraLogNumberOfParams.setDescription('')
teraLogParams = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLogParams.setStatus('mandatory')
if mibBuilder.loadTexts: teraLogParams.setDescription('')
teraLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLogStatus.setStatus('mandatory')
if mibBuilder.loadTexts: teraLogStatus.setDescription('')
teraAllLogsFilterGroup = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 5), )
if mibBuilder.loadTexts: teraAllLogsFilterGroup.setStatus('mandatory')
if mibBuilder.loadTexts: teraAllLogsFilterGroup.setDescription(' table teraAllLogsFilterGroup')
teraAllLogsFilterGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 5, 1), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "teraLogNumber"))
if mibBuilder.loadTexts: teraAllLogsFilterGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: teraAllLogsFilterGroupEntry.setDescription(' table entry teraAllLogsFilterGroupEntry ')
teraLogFilterByNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLogFilterByNumber.setStatus('mandatory')
if mibBuilder.loadTexts: teraLogFilterByNumber.setDescription('')
teraLogFilterBySize = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("last20", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLogFilterBySize.setStatus('mandatory')
if mibBuilder.loadTexts: teraLogFilterBySize.setDescription('')
teraLogFilterBySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("nominal", 1), ("minor", 2), ("major", 3), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLogFilterBySeverity.setStatus('mandatory')
if mibBuilder.loadTexts: teraLogFilterBySeverity.setDescription('')
teraLogFilterByTask = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 5, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLogFilterByTask.setStatus('mandatory')
if mibBuilder.loadTexts: teraLogFilterByTask.setDescription('')
teraSlotInstTablePar = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 3))
teraSlotInstallTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1), )
if mibBuilder.loadTexts: teraSlotInstallTable.setStatus('mandatory')
if mibBuilder.loadTexts: teraSlotInstallTable.setDescription(' table teraSlotInstallTable')
teraSlotInstallTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "teraInstallSlotNumber"))
if mibBuilder.loadTexts: teraSlotInstallTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: teraSlotInstallTableEntry.setDescription(' table entry teraSlotInstallTableEntry ')
teraInstallSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraInstallSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: teraInstallSlotNumber.setDescription('')
teraInstallUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraInstallUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: teraInstallUnitType.setDescription('')
teraInstallEquippedUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraInstallEquippedUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: teraInstallEquippedUnitType.setDescription('')
teraInstallUnitAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("provision", 1), ("none", 2), ("is", 3), ("moos", 4), ("reset", 5), ("trunk", 6), ("moos-trunk", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraInstallUnitAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: teraInstallUnitAdminStatus.setDescription('')
teraInstallUnitOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("empty", 1), ("is", 2), ("moos", 3), ("removed", 4), ("unprovisioned", 5), ("mismatch", 6), ("oos", 7), ("init", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraInstallUnitOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: teraInstallUnitOperStatus.setDescription('')
teraInstallUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraInstallUnitName.setStatus('mandatory')
if mibBuilder.loadTexts: teraInstallUnitName.setDescription('')
teraInstallUnitRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraInstallUnitRevision.setStatus('mandatory')
if mibBuilder.loadTexts: teraInstallUnitRevision.setDescription('')
teraInstallUnitSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraInstallUnitSerial.setStatus('mandatory')
if mibBuilder.loadTexts: teraInstallUnitSerial.setDescription('')
teraInstallUnitSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraInstallUnitSWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: teraInstallUnitSWVersion.setDescription('')
teraInstallUnitMfgData = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraInstallUnitMfgData.setStatus('mandatory')
if mibBuilder.loadTexts: teraInstallUnitMfgData.setDescription('')
teraSystemInstallTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2), )
if mibBuilder.loadTexts: teraSystemInstallTable.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemInstallTable.setDescription(' table teraSystemInstallTable')
teraSystemInstallTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "teraInstallSlotNumber"), (0, "TERAWAVE-terasystem-MIB", "teraPonIndex"))
if mibBuilder.loadTexts: teraSystemInstallTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemInstallTableEntry.setDescription(' table entry teraSystemInstallTableEntry ')
teraSystemNEProvisionAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("provision", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNEProvisionAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemNEProvisionAdminStatus.setDescription('')
teraSystemNEName = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraSystemNEName.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemNEName.setDescription('')
teraSystemNERangingCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNERangingCode.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemNERangingCode.setDescription('')
teraSystemNEType = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 7))).clone(namedValues=NamedValues(("unknown", 0), ("tw300", 1), ("tw600", 2), ("tw1600", 3), ("tw100", 4), ("tw150RT", 5), ("oat", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraSystemNEType.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemNEType.setDescription('')
teraSystemNEMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNEMaxLatency.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemNEMaxLatency.setDescription('')
teraSystemNEAponMaxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNEAponMaxLength.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemNEAponMaxLength.setDescription('')
teraSystemNEOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("empty", 1), ("provisioned", 2), ("linkDown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraSystemNEOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemNEOperStatus.setDescription('')
teraSystemNEEocMinBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 1536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNEEocMinBandWidth.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemNEEocMinBandWidth.setDescription('')
teraSystemNEEocMaxBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 1536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNEEocMaxBandWidth.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemNEEocMaxBandWidth.setDescription('')
teraSystemNEInventoryOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("olt2ont", 1), ("ont2olt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNEInventoryOverride.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemNEInventoryOverride.setDescription('')
teraSystemNERanging = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNERanging.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemNERanging.setDescription('')
teraSystemNECurrentDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraSystemNECurrentDistance.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemNECurrentDistance.setDescription('')
teraNEInfoTableGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 3, 3))
teraNEInfoTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 3, 3, 1))
teraNERangingCode = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 3, 3, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraNERangingCode.setStatus('mandatory')
if mibBuilder.loadTexts: teraNERangingCode.setDescription('')
teraNEType = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("tw300", 1), ("tw600", 2), ("tw1600", 3), ("tw100", 4), ("tw150RT-ATM", 5), ("tw150RT-TDM", 6), ("oat", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraNEType.setStatus('mandatory')
if mibBuilder.loadTexts: teraNEType.setDescription('')
teraNEModel = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 3, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraNEModel.setStatus('mandatory')
if mibBuilder.loadTexts: teraNEModel.setDescription('')
teraNESWVersion = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 3, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraNESWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: teraNESWVersion.setDescription('')
teraNESWRevision = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 3, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraNESWRevision.setStatus('mandatory')
if mibBuilder.loadTexts: teraNESWRevision.setDescription('')
teraClockSyncTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 4))
teraClockSyncPrimarySource = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bits-A", 1), ("nim", 2), ("freerun", 3), ("holdover", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraClockSyncPrimarySource.setStatus('mandatory')
if mibBuilder.loadTexts: teraClockSyncPrimarySource.setDescription('')
teraClockSyncPrimaryNIMSlot = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraClockSyncPrimaryNIMSlot.setStatus('mandatory')
if mibBuilder.loadTexts: teraClockSyncPrimaryNIMSlot.setDescription('')
teraClockSyncPrimaryNIMIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraClockSyncPrimaryNIMIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: teraClockSyncPrimaryNIMIfIndex.setDescription('')
teraClockSyncSecondarySource = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bits-B", 1), ("nim", 2), ("freerun", 3), ("holdover", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraClockSyncSecondarySource.setStatus('mandatory')
if mibBuilder.loadTexts: teraClockSyncSecondarySource.setDescription('')
teraClockSyncSecondaryNIMSlot = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraClockSyncSecondaryNIMSlot.setStatus('mandatory')
if mibBuilder.loadTexts: teraClockSyncSecondaryNIMSlot.setDescription('')
teraClockSyncSecondaryNIMIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraClockSyncSecondaryNIMIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: teraClockSyncSecondaryNIMIfIndex.setDescription('')
teraClockSyncLastSource = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freerun", 1), ("holdover", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraClockSyncLastSource.setStatus('mandatory')
if mibBuilder.loadTexts: teraClockSyncLastSource.setDescription('')
teraClockSyncRevertive = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraClockSyncRevertive.setStatus('mandatory')
if mibBuilder.loadTexts: teraClockSyncRevertive.setDescription('')
teraClockSyncActiveSource = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bits-A", 1), ("bits-B", 2), ("nim", 3), ("freerun", 4), ("holdover", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraClockSyncActiveSource.setStatus('mandatory')
if mibBuilder.loadTexts: teraClockSyncActiveSource.setDescription('')
teraClockSyncActiveNIMSlot = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraClockSyncActiveNIMSlot.setStatus('mandatory')
if mibBuilder.loadTexts: teraClockSyncActiveNIMSlot.setDescription('')
teraClockSyncActiveNIMIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraClockSyncActiveNIMIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: teraClockSyncActiveNIMIfIndex.setDescription('')
teraClockSyncActiveStatus = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraClockSyncActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: teraClockSyncActiveStatus.setDescription('')
teraClockSyncPrimaryStatus = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("idle", 2), ("fail", 3), ("oos", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraClockSyncPrimaryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: teraClockSyncPrimaryStatus.setDescription('')
teraClockSyncSecondaryStatus = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("idle", 2), ("fail", 3), ("oos", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraClockSyncSecondaryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: teraClockSyncSecondaryStatus.setDescription('')
teraClockSyncOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("configure", 1), ("switchToPrimary", 2), ("switchToSecondary", 3), ("switchToHoldover", 4), ("switchToFreerun", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraClockSyncOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: teraClockSyncOperStatus.setDescription('')
teraCommunityGroupTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 5))
teraPublicCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 5, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraPublicCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: teraPublicCommunity.setDescription('')
teraSETCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSETCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: teraSETCommunity.setDescription('')
teraGETCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 5, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraGETCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: teraGETCommunity.setDescription('')
teraAdminCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 5, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraAdminCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: teraAdminCommunity.setDescription('')
teraTestCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 5, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTestCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: teraTestCommunity.setDescription('')
teraMasterSlaveTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 6))
teraMasterSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraMasterSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: teraMasterSlotNumber.setDescription('')
teraSlaveSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSlaveSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: teraSlaveSlotNumber.setDescription('')
teraSystemIPGroupTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 7))
teraSystemIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 7, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemIPAddress.setDescription('')
teraSystemIPNetMask = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemIPNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemIPNetMask.setDescription('')
teraSystemIPGateway = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 7, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemIPGateway.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemIPGateway.setDescription('')
teraNESlotTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 9), )
if mibBuilder.loadTexts: teraNESlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: teraNESlotTable.setDescription(' table teraNESlotTable')
teraNESlotTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 9, 1), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "teraInstallSlotNumber"), (0, "TERAWAVE-terasystem-MIB", "teraPonIndex"), (0, "TERAWAVE-terasystem-MIB", "teraEventSlot"))
if mibBuilder.loadTexts: teraNESlotTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: teraNESlotTableEntry.setDescription(' table entry teraNESlotTableEntry ')
teraNESlotUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraNESlotUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: teraNESlotUnitType.setDescription('')
teraNESlotUnitAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("provision", 1), ("none", 2), ("is", 3), ("moos", 4), ("reset", 5), ("trunk", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraNESlotUnitAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: teraNESlotUnitAdminStatus.setDescription('')
teraWLinkIPTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 10), )
if mibBuilder.loadTexts: teraWLinkIPTable.setStatus('mandatory')
if mibBuilder.loadTexts: teraWLinkIPTable.setDescription(' table teraWLinkIPTable')
teraWLinkIPTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 10, 1), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "teraInstallSlotNumber"), (0, "TERAWAVE-terasystem-MIB", "teraPonIndex"))
if mibBuilder.loadTexts: teraWLinkIPTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: teraWLinkIPTableEntry.setDescription(' table entry teraWLinkIPTableEntry ')
teraWLinkIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 10, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraWLinkIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: teraWLinkIPAddress.setDescription('')
teraWLinkIPNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraWLinkIPNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: teraWLinkIPNetMask.setDescription('')
teraWLinkIPGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 10, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraWLinkIPGateway.setStatus('mandatory')
if mibBuilder.loadTexts: teraWLinkIPGateway.setDescription('')
teraWLinkIPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraWLinkIPStatus.setStatus('mandatory')
if mibBuilder.loadTexts: teraWLinkIPStatus.setDescription('')
teraNEMiscTableGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 11))
teraNEMiscTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 11, 1))
teraNELevel2Slot = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraNELevel2Slot.setStatus('mandatory')
if mibBuilder.loadTexts: teraNELevel2Slot.setDescription('')
teraNEZipSystem = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no", 1), ("zip-active", 2), ("zip-stby", 3), ("zip-all", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraNEZipSystem.setStatus('mandatory')
if mibBuilder.loadTexts: teraNEZipSystem.setDescription('')
teraNEReset = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraNEReset.setStatus('mandatory')
if mibBuilder.loadTexts: teraNEReset.setDescription('')
teraNETimeZone = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 11, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraNETimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: teraNETimeZone.setDescription('')
teraNEInventoryOverride = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraNEInventoryOverride.setStatus('mandatory')
if mibBuilder.loadTexts: teraNEInventoryOverride.setDescription('')
teraNESerialPortType = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ppp", 1), ("dbshell", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraNESerialPortType.setStatus('mandatory')
if mibBuilder.loadTexts: teraNESerialPortType.setDescription('')
teraSysObjectIdTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 12))
teraTW300 = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 12, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTW300.setStatus('mandatory')
if mibBuilder.loadTexts: teraTW300.setDescription('')
teraTW600 = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 12, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTW600.setStatus('mandatory')
if mibBuilder.loadTexts: teraTW600.setDescription('')
teraTW1600 = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 12, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTW1600.setStatus('mandatory')
if mibBuilder.loadTexts: teraTW1600.setDescription('')
teraTW100 = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 12, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTW100.setStatus('mandatory')
if mibBuilder.loadTexts: teraTW100.setDescription('')
teraTW150RTATM = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 12, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTW150RTATM.setStatus('mandatory')
if mibBuilder.loadTexts: teraTW150RTATM.setDescription('')
teraTW150RTTDM = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 12, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTW150RTTDM.setStatus('mandatory')
if mibBuilder.loadTexts: teraTW150RTTDM.setDescription('')
teraOAT = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 12, 7), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraOAT.setStatus('mandatory')
if mibBuilder.loadTexts: teraOAT.setDescription('')
teraNEIDxTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 13), )
if mibBuilder.loadTexts: teraNEIDxTable.setStatus('mandatory')
if mibBuilder.loadTexts: teraNEIDxTable.setDescription(' table teraNEIDxTable')
teraNEIDxTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 13, 1), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "ifIndex"))
if mibBuilder.loadTexts: teraNEIDxTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: teraNEIDxTableEntry.setDescription(' table entry teraNEIDxTableEntry ')
teraNEIDxSlotLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraNEIDxSlotLevel1.setStatus('mandatory')
if mibBuilder.loadTexts: teraNEIDxSlotLevel1.setDescription('')
teraNEIDxPonID = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraNEIDxPonID.setStatus('mandatory')
if mibBuilder.loadTexts: teraNEIDxPonID.setDescription('')
teraWLinkIPRangeTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 14), )
if mibBuilder.loadTexts: teraWLinkIPRangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: teraWLinkIPRangeTable.setDescription(' table teraWLinkIPRangeTable')
teraWLinkIPRangeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 14, 1), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "ifIndex"))
if mibBuilder.loadTexts: teraWLinkIPRangeTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: teraWLinkIPRangeTableEntry.setDescription(' table entry teraWLinkIPRangeTableEntry ')
teraWLinkIPRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 14, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraWLinkIPRangeStart.setStatus('mandatory')
if mibBuilder.loadTexts: teraWLinkIPRangeStart.setDescription('')
teraWLinkIPRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 14, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraWLinkIPRangeEnd.setStatus('mandatory')
if mibBuilder.loadTexts: teraWLinkIPRangeEnd.setDescription('')
teraWLinkIPRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraWLinkIPRangeRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: teraWLinkIPRangeRowStatus.setDescription('')
teraSecondaryMasterSlaveTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 16))
teraSecondaryMasterSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 16, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSecondaryMasterSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: teraSecondaryMasterSlotNumber.setDescription('')
teraSecondarySlaveSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 16, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSecondarySlaveSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: teraSecondarySlaveSlotNumber.setDescription('')
teraMasterSlaveStateTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 17), )
if mibBuilder.loadTexts: teraMasterSlaveStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: teraMasterSlaveStateTable.setDescription(' table teraMasterSlaveStateTable')
teraMasterSlaveStateTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 17, 1), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "teraMasterSlaveStateIndex"))
if mibBuilder.loadTexts: teraMasterSlaveStateTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: teraMasterSlaveStateTableEntry.setDescription(' table entry teraMasterSlaveStateTableEntry ')
teraMasterSlaveStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraMasterSlaveStateIndex.setStatus('mandatory')
if mibBuilder.loadTexts: teraMasterSlaveStateIndex.setDescription('')
teraMasterState = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("nobody", 1), ("master", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraMasterState.setStatus('mandatory')
if mibBuilder.loadTexts: teraMasterState.setDescription('')
teraSlaveState = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("nobody", 1), ("slave", 3), ("slaveActive", 4), ("slaveFail", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraSlaveState.setStatus('mandatory')
if mibBuilder.loadTexts: teraSlaveState.setDescription('')
teraPPPBaudRateTbl = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 20))
teraPPPBaudRateTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 20, 1))
teraPPPAdminBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("baud2400", 0), ("baud4800", 1), ("baud9600", 2), ("baud19200", 3), ("baud38400", 4), ("baud57600", 5), ("baud115200", 6), ("baud230400", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraPPPAdminBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: teraPPPAdminBaudRate.setDescription('')
teraPPPOperBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("baud2400", 0), ("baud4800", 1), ("baud9600", 2), ("baud19200", 3), ("baud38400", 4), ("baud57600", 5), ("baud115200", 6), ("baud230400", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraPPPOperBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: teraPPPOperBaudRate.setDescription('')
teraPPPAdminFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("xon-Xoff", 1), ("rTS-CTS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraPPPAdminFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: teraPPPAdminFlowControl.setDescription('')
teraPPPOperFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("xon-Xoff", 1), ("rTS-CTS", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraPPPOperFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: teraPPPOperFlowControl.setDescription('')
teraSystemNATGroupTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 24))
teraSystemNATSubnetAddress = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 24, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNATSubnetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemNATSubnetAddress.setDescription('')
teraSystemNATSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 24, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNATSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemNATSubnetMask.setDescription('')
teraSystemPCUNumTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 25))
teraSystemNumOfPCU = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pCU4", 0), ("pCU5", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNumOfPCU.setStatus('mandatory')
if mibBuilder.loadTexts: teraSystemNumOfPCU.setDescription('')
teraInstalledSystemInfoTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 26), )
if mibBuilder.loadTexts: teraInstalledSystemInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: teraInstalledSystemInfoTable.setDescription(' table teraInstalledSystemInfoTable')
teraInstalledSystemInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 26, 1), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "teraInstallSlotNumber"), (0, "TERAWAVE-terasystem-MIB", "teraPonIndex"))
if mibBuilder.loadTexts: teraInstalledSystemInfoTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: teraInstalledSystemInfoTableEntry.setDescription(' table entry teraInstalledSystemInfoTableEntry ')
teraInstalledSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 26, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraInstalledSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: teraInstalledSystemName.setDescription('')
teraInstalledSystemLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 26, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraInstalledSystemLocation.setStatus('mandatory')
if mibBuilder.loadTexts: teraInstalledSystemLocation.setDescription('')
teraInstalledNEType = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 7))).clone(namedValues=NamedValues(("unknown", 0), ("tw300", 1), ("tw600", 2), ("tw1600", 3), ("tw100", 4), ("tw150RT", 5), ("oat", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraInstalledNEType.setStatus('mandatory')
if mibBuilder.loadTexts: teraInstalledNEType.setDescription('')
teraCraftInterfaceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 28))
teraCraftInterfaceTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 28, 1))
teraCraftPortStat = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraCraftPortStat.setStatus('mandatory')
if mibBuilder.loadTexts: teraCraftPortStat.setDescription('')
teraCraftDefaultAddrStat = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraCraftDefaultAddrStat.setStatus('mandatory')
if mibBuilder.loadTexts: teraCraftDefaultAddrStat.setDescription('')
teraSNMPState = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("notReady", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraSNMPState.setStatus('mandatory')
if mibBuilder.loadTexts: teraSNMPState.setDescription('')
mibBuilder.exportSymbols("TERAWAVE-terasystem-MIB", teraClockSyncActiveNIMSlot=teraClockSyncActiveNIMSlot, teraCommunityGroupTable=teraCommunityGroupTable, teraLogMsgNumber=teraLogMsgNumber, teraSystemInstallTableEntry=teraSystemInstallTableEntry, teraNEModel=teraNEModel, teraLogNumberOfParams=teraLogNumberOfParams, teraNEInventoryOverride=teraNEInventoryOverride, teraWLinkIPGateway=teraWLinkIPGateway, teraNERangingCode=teraNERangingCode, teraLogNumber=teraLogNumber, teraClockSyncRevertive=teraClockSyncRevertive, teraNEType=teraNEType, teraWLinkIPRangeEnd=teraWLinkIPRangeEnd, teraLogFilterBySize=teraLogFilterBySize, teraSystemNECurrentDistance=teraSystemNECurrentDistance, teraNESlotUnitType=teraNESlotUnitType, teraNESerialPortType=teraNESerialPortType, teraSystemNEProvisionAdminStatus=teraSystemNEProvisionAdminStatus, teraClockSyncTable=teraClockSyncTable, teraAllLogsFilterGroupEntry=teraAllLogsFilterGroupEntry, teraInstallUnitAdminStatus=teraInstallUnitAdminStatus, teraInstallEquippedUnitType=teraInstallEquippedUnitType, teraNEInfoTableGroup=teraNEInfoTableGroup, teraLogTable=teraLogTable, teraLogGroup=teraLogGroup, teraNESlotTable=teraNESlotTable, teraPublicCommunity=teraPublicCommunity, teraNEZipSystem=teraNEZipSystem, teraPPPAdminBaudRate=teraPPPAdminBaudRate, teraNEIDxSlotLevel1=teraNEIDxSlotLevel1, teraMasterSlaveTable=teraMasterSlaveTable, teraPPPAdminFlowControl=teraPPPAdminFlowControl, teraSystemNEMaxLatency=teraSystemNEMaxLatency, teraCraftPortStat=teraCraftPortStat, teraInstallUnitOperStatus=teraInstallUnitOperStatus, teraSecondarySlaveSlotNumber=teraSecondarySlaveSlotNumber, teraPPPBaudRateTbl=teraPPPBaudRateTbl, teraNESWVersion=teraNESWVersion, teraPPPBaudRateTable=teraPPPBaudRateTable, teraLogMsgIndex=teraLogMsgIndex, teraClockSyncSecondaryStatus=teraClockSyncSecondaryStatus, teraWLinkIPRangeRowStatus=teraWLinkIPRangeRowStatus, teraNEIDxTable=teraNEIDxTable, teraWLinkIPNetMask=teraWLinkIPNetMask, teraSystemNERangingCode=teraSystemNERangingCode, teraTestCommunity=teraTestCommunity, teraSystemNATGroupTable=teraSystemNATGroupTable, teraSystemPCUNumTable=teraSystemPCUNumTable, teraCraftInterfaceGroup=teraCraftInterfaceGroup, teraSystemNumOfPCU=teraSystemNumOfPCU, teraSystemNEOperStatus=teraSystemNEOperStatus, teraSystemIPNetMask=teraSystemIPNetMask, teraInstallUnitRevision=teraInstallUnitRevision, teraMasterSlotNumber=teraMasterSlotNumber, teraClockSyncPrimarySource=teraClockSyncPrimarySource, teraCraftDefaultAddrStat=teraCraftDefaultAddrStat, teraInstalledSystemInfoTableEntry=teraInstalledSystemInfoTableEntry, teraInstallUnitName=teraInstallUnitName, teraSystemNEType=teraSystemNEType, teraInstallUnitType=teraInstallUnitType, teraLogStatus=teraLogStatus, teraOAT=teraOAT, teraMasterSlaveStateTableEntry=teraMasterSlaveStateTableEntry, teraWLinkIPTableEntry=teraWLinkIPTableEntry, teraSystem=teraSystem, teraLogFilterByNumber=teraLogFilterByNumber, teraTW1600=teraTW1600, teraClockSyncPrimaryNIMSlot=teraClockSyncPrimaryNIMSlot, teraClockSyncActiveStatus=teraClockSyncActiveStatus, teraSystemNEInventoryOverride=teraSystemNEInventoryOverride, teraAllLogsFilterGroup=teraAllLogsFilterGroup, teraLogParams=teraLogParams, teraWLinkIPTable=teraWLinkIPTable, teraWLinkIPRangeTableEntry=teraWLinkIPRangeTableEntry, teraSystemNEEocMaxBandWidth=teraSystemNEEocMaxBandWidth, terawave=terawave, teraSystemIPGroupTable=teraSystemIPGroupTable, teraLogNumberTableEntry=teraLogNumberTableEntry, teraLogFilterBySeverity=teraLogFilterBySeverity, teraWLinkIPAddress=teraWLinkIPAddress, teraSystemNERanging=teraSystemNERanging, teraInstallUnitSerial=teraInstallUnitSerial, teraInstalledNEType=teraInstalledNEType, teraInstallUnitSWVersion=teraInstallUnitSWVersion, teraInstalledSystemInfoTable=teraInstalledSystemInfoTable, teraSlotInstallTable=teraSlotInstallTable, teraSystemNEAponMaxLength=teraSystemNEAponMaxLength, teraClockSyncSecondaryNIMIfIndex=teraClockSyncSecondaryNIMIfIndex, teraSystemCurrTime=teraSystemCurrTime, teraClockSyncActiveSource=teraClockSyncActiveSource, teraClockSyncOperStatus=teraClockSyncOperStatus, teraNELevel2Slot=teraNELevel2Slot, teraMasterSlaveStateTable=teraMasterSlaveStateTable, teraAdminCommunity=teraAdminCommunity, teraWLinkIPRangeTable=teraWLinkIPRangeTable, teraSystemNATSubnetMask=teraSystemNATSubnetMask, teraSysObjectIdTable=teraSysObjectIdTable, teraTW100=teraTW100, teraSecondaryMasterSlaveTable=teraSecondaryMasterSlaveTable, teraSystemNATSubnetAddress=teraSystemNATSubnetAddress, teraTW150RTTDM=teraTW150RTTDM, teraTW300=teraTW300, teraInstalledSystemLocation=teraInstalledSystemLocation, teraNEReset=teraNEReset, teraPPPOperBaudRate=teraPPPOperBaudRate, teraSystemIPAddress=teraSystemIPAddress, teraNESlotTableEntry=teraNESlotTableEntry, teraNESlotUnitAdminStatus=teraNESlotUnitAdminStatus, teraTW600=teraTW600, teraNESWRevision=teraNESWRevision, teraInstallUnitMfgData=teraInstallUnitMfgData, teraSlotInstallTableEntry=teraSlotInstallTableEntry, teraLogTableEntry=teraLogTableEntry, teraSlotInstTablePar=teraSlotInstTablePar, teraSystemTime=teraSystemTime, teraGETCommunity=teraGETCommunity, teraSystemInstallTable=teraSystemInstallTable, teraClockSyncSecondaryNIMSlot=teraClockSyncSecondaryNIMSlot, teraClockSyncPrimaryNIMIfIndex=teraClockSyncPrimaryNIMIfIndex, teraNETimeZone=teraNETimeZone, teraLogNumberStatus=teraLogNumberStatus, teraNEIDxPonID=teraNEIDxPonID, teraClockSyncLastSource=teraClockSyncLastSource, teraLogClear=teraLogClear, teraSlaveState=teraSlaveState, teraMasterState=teraMasterState, teraCraftInterfaceTable=teraCraftInterfaceTable, teraWLinkIPStatus=teraWLinkIPStatus, teraClockSyncPrimaryStatus=teraClockSyncPrimaryStatus, teraTW150RTATM=teraTW150RTATM, teraMasterSlaveStateIndex=teraMasterSlaveStateIndex, teraPPPOperFlowControl=teraPPPOperFlowControl, teraInstallSlotNumber=teraInstallSlotNumber, teraInstalledSystemName=teraInstalledSystemName, teraNEMiscTableGroup=teraNEMiscTableGroup, teraSETCommunity=teraSETCommunity, teraClockSyncSecondarySource=teraClockSyncSecondarySource, teraClockSyncActiveNIMIfIndex=teraClockSyncActiveNIMIfIndex, teraSystemNEName=teraSystemNEName, teraSystemNEEocMinBandWidth=teraSystemNEEocMinBandWidth, teraNEMiscTable=teraNEMiscTable, teraSecondaryMasterSlotNumber=teraSecondaryMasterSlotNumber, teraSlaveSlotNumber=teraSlaveSlotNumber, teraLogNumberTable=teraLogNumberTable, teraLogNumberDescr=teraLogNumberDescr, teraNEIDxTableEntry=teraNEIDxTableEntry, teraWLinkIPRangeStart=teraWLinkIPRangeStart, teraNEInfoTable=teraNEInfoTable, teraLogFilterByTask=teraLogFilterByTask, teraSNMPState=teraSNMPState, teraSystemIPGateway=teraSystemIPGateway)
