#
# PySNMP MIB module PDN-REACHDSL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-REACHDSL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:39:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pdn_interfaces, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdn-interfaces")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, IpAddress, ObjectIdentity, Bits, TimeTicks, NotificationType, Counter32, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "IpAddress", "ObjectIdentity", "Bits", "TimeTicks", "NotificationType", "Counter32", "Unsigned32", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
pdnReachDSL = ModuleIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20))
pdnReachDSL.setRevisions(('2003-01-15 12:00', '2003-01-12 12:00', '2002-10-15 17:00', '2002-07-12 03:15',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pdnReachDSL.setRevisionsDescriptions(('1. This mib SHOULD only be used for reachDSL specific technology and not for spectrum management.', '1. The pdn_spectrummgmt.mib is a new common mib that should be used for all DSL interfaces that require configuration spectrum management parameters.', "1. Deprecated the reach DSL Circuit Identifier Object. 2. Added 'Quad Mode' as a loop measurement method. 3. Added Configuration object for Quad Mode. 4. Deprecated the old conformance statement &amp; units of conformance. 5. Added new conformance statement &amp; units of conformance to clearly reflect the objects' roles.", '1. Deprecated the Spectrum Management Zone Object. 2. Added Loop Measurement Method object. 3. Added EWL Units object. 4. Added Spectrum Management Mode object. 5. Added objects for Min &amp; Max EWL values. These changes are required for dynamic updation of spectrum management configuration.',))
if mibBuilder.loadTexts: pdnReachDSL.setLastUpdated('200210151700Z')
if mibBuilder.loadTexts: pdnReachDSL.setOrganization('Paradyne Corp MIB Working Group')
if mibBuilder.loadTexts: pdnReachDSL.setContactInfo('Paradyne Networks, Inc. 8545, 126th Ave. N., Largo, FL 33779 www.paradyne.com General Comments to: mibwg_team@eng.paradyne.com Editors: A.Z.Shaikh Daniel Varagunasingh Jesus Pinto')
if mibBuilder.loadTexts: pdnReachDSL.setDescription('The Paradyne enterprise ReachDSL MIB. This MIB is written specifically to facilitate in the management of ReachDSL devices as well as help in configuration of Spectrum Management specific objects for ReachDSL products.')
pdnReachDSLObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1))
reachDSLSpectrumMgmtSelection = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reachDSLSpectrumMgmtSelection.setStatus('current')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtSelection.setDescription("This object has been deprecated. The corresponding object in the new pdn_spectrumMgmt.mib should be used instead. This object is used to Enable or Disable Spectrum Management on this device. Enabling this object limits the DSL speeds and the maximum transmit power on each port based on line length in order to meet local Spectrum Management guidelines. The values that this object can accept are controlled by the 'Mode' object.")
reachDSLSpectrumMgmtZone = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("usa1", 1), ("uk1", 2), ("canada1", 3), ("japan1", 4), ("emea1", 5))).clone('usa1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: reachDSLSpectrumMgmtZone.setStatus('deprecated')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtZone.setDescription("This object shows the geographic location or the spectrum zone used for spectrum management. It also represents which Spectrum Management standard will be used on this device to calculate the effective maximum 'Tx Rates' and the maximum allowed 'Tx Power' to comply with Spectrum Management regulations for that specific region. Note: Spectrum Management must be Enabled for 'SpectrumMgmtZone' to take effect.")
reachDSLSpectrumMgmtConfTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 3), )
if mibBuilder.loadTexts: reachDSLSpectrumMgmtConfTable.setStatus('current')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtConfTable.setDescription('The ReachDSL Spectrum Management Configuration Table This table is used for configuring spectrum management objects.')
reachDSLSpectrumMgmtConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: reachDSLSpectrumMgmtConfEntry.setStatus('current')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtConfEntry.setDescription("An entry in the ReachDSL Spectrum Management Configuration table. Note: This entry can be accessed only for ifIndex values that belong to a physical interface. e.g. for ifType = 'adsl'.")
reachDSLSpectrumMgmtConfEWL = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reachDSLSpectrumMgmtConfEWL.setStatus('current')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtConfEWL.setDescription("This object has been deprecated. The corresponding object in the new pdn_spectrumMgmt.mib should be used instead. The Equivalent Working Length (EWL). The value selected corresponds to the estimated length of the line in feet - if 'EWLUnits' object is 'feet'. meters - if 'EWLUnits' object is 'meters'. This value is usually specified by the carrier and MUST be in integral multiples of 500 feet, if 'EWLUnits' is 'feet'. 200 meters, if 'EWLUnits' is 'meters'. The range of values that this object can take is determined by the 'MinEWL' and 'MaxEWL' objects. Changing this object may limit the maximum transmit power and the effective DSL speeds at which the ports train up. Note: This object will be used only if Spectrum Management is enabled and 'LoopMeasurementMethod' is 'ewl'. This object shares a mutual exclusion relationship with 'ConfLoopLength' &amp; 'ConfQuadMode' objects, as only one of the three will be used for configuration at any given instant of time.")
reachDSLSpectrumMgmtConfLoopLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("short", 1), ("medium", 2), ("long", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reachDSLSpectrumMgmtConfLoopLength.setStatus('current')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtConfLoopLength.setDescription("This object has been deprecated. The corresponding object in the new pdn_spectrumMgmt.mib should be used instead. This entry specifies the loop length for the line. The configurable values are short(1), medium(2) and long(3). The 'Loop Length' feature can be used only if the 'reachDSLSpectrumMgmtSelection' object is Enabled and the 'LoopMeasurementMethod' is 'loopLength'. Changing this object may limit the maximum transmit power and the effective DSL speeds at which ports train up. Note: This object shares a mutual exclusion relationship with the 'ConfEWL' &amp; 'ConfQuadMode' objects. i.e. only one of the three can be used for configuration at one time.")
reachDSLSpectrumMgmtConfAtucMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, 120))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: reachDSLSpectrumMgmtConfAtucMaxTxPower.setStatus('current')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtConfAtucMaxTxPower.setDescription('The maximum transmit power at the ATUC (in tenth dB). This value will be based on the spectrum management selection. It ranges from -140 to 120 in increments of 10.')
reachDSLSpectrumMgmtConfAturMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, 120))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: reachDSLSpectrumMgmtConfAturMaxTxPower.setStatus('current')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtConfAturMaxTxPower.setDescription('The maximum transmit power at the ATUR (in tenth dB). This value will be based on the spectrum management selection. It ranges from -140 to 120 in increments of 10.')
reachDSLSpectrumMgmtConfQuadMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sameQuad", 1), ("segregatedQuadUpto3km", 2), ("segregatedQuadAbove3km", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reachDSLSpectrumMgmtConfQuadMode.setStatus('current')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtConfQuadMode.setDescription("This object has been deprecated. The corresponding object in the new pdn_spectrumMgmt.mib should be used instead. This entry specifies the quad cable configuration &amp; length for the line. The configurable values are sameQuad(1), segregatedQuadUpto3km(2) and segregatedQuadAbove3km(3). The 'Quad Mode' feature can be used only if the 'reachDSLSpectrumMgmtSelection' object is Enabled and the 'LoopMeasurementMethod' is 'quadMode'. Changing this object may limit the maximum transmit power and the effective DSL speeds at which ports train up. Note: This object shares a mutual exclusion relationship with the 'ConfEWL' &amp; 'ConfLoopLength' objects. i.e. only one of the three can be used for configuration at one time.")
reachDSLSpectrumMgmtLineInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 4), )
if mibBuilder.loadTexts: reachDSLSpectrumMgmtLineInfoTable.setStatus('current')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtLineInfoTable.setDescription('This object has been deprecated. The corresponding object in the new pdn_spectrumMgmt.mib should be used instead. The ReachDSL Spectrum Management Line Info Table. This table gives information about the spectrum management ranges that are applicable for each port, based on the spectral requirements for the device.')
reachDSLSpectrumMgmtLineInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: reachDSLSpectrumMgmtLineInfoEntry.setStatus('current')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtLineInfoEntry.setDescription("This object has been deprecated. The corresponding object in the new pdn_spectrumMgmt.mib should be used instead. An entry in the reachDSLSpectrumMgmtLineInfoTable table. Note: This entry can be accessed only for ifIndex values that belong to a physical interface. e.g. for ifType = 'adsl'.")
reachDSLSpectrumMgmtAtucMaxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 4, 1, 1), Unsigned32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: reachDSLSpectrumMgmtAtucMaxTxRate.setStatus('current')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtAtucMaxTxRate.setDescription('This object has been deprecated. The corresponding object in the new pdn_spectrumMgmt.mib should be used instead. This rate will be the max allowed Tx Rate(in bps) for the port based on the Spectrum Management requirements for ATUC in a particular spectral compliance configuration.')
reachDSLSpectrumMgmtAtucMinTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 4, 1, 2), Unsigned32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: reachDSLSpectrumMgmtAtucMinTxRate.setStatus('current')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtAtucMinTxRate.setDescription("This object has been deprecated. The corresponding object in the new pdn_spectrumMgmt.mib should be used instead. This rate will be the min allowed Tx Rate based on the spectrum management requirements for the ATUC. The MinTxRate will be upper bounded by 'reachDSLSpectrumMgmtAtucMaxTxRate' object.")
reachDSLSpectrumMgmtAtucMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, 120))).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: reachDSLSpectrumMgmtAtucMaxTxPower.setStatus('current')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtAtucMaxTxPower.setDescription('This object has been deprecated. The corresponding object in the new pdn_spectrumMgmt.mib should be used instead. The maximum transmit power at the ATUC (in tenth dB). This value will be based on the spectrum management selection.')
reachDSLSpectrumMgmtAturMaxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 4, 1, 4), Unsigned32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: reachDSLSpectrumMgmtAturMaxTxRate.setStatus('current')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtAturMaxTxRate.setDescription('This object has been deprecated. The corresponding object in the new pdn_spectrumMgmt.mib should be used instead. This rate will be the max allowed Tx Rate(in bps) for the port based on the Spectrum Management requirements for ATUC in a particular spectral compliance configuration.')
reachDSLSpectrumMgmtAturMinTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 4, 1, 5), Unsigned32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: reachDSLSpectrumMgmtAturMinTxRate.setStatus('current')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtAturMinTxRate.setDescription("This object has been deprecated. The corresponding object in the new pdn_spectrumMgmt.mib should be used instead. This rate will be the min allowed Tx Rate based on the spectrum management requirements for the ATUR. The MinTxRate will be upper bounded by 'reachDSLSpectrumMgmtAturMaxTxRate' object.")
reachDSLSpectrumMgmtAturMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, 120))).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: reachDSLSpectrumMgmtAturMaxTxPower.setStatus('current')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtAturMaxTxPower.setDescription('This object has been deprecated. The corresponding object in the new pdn_spectrumMgmt.mib should be used instead. The maximum transmit power at the ATUR (in tenth dB). This value will be based on the spectrum management selection.')
reachDSLSpectrumMgmtMinEWL = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reachDSLSpectrumMgmtMinEWL.setStatus('current')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtMinEWL.setDescription("This object has been deprecated. The corresponding object in the new pdn_spectrumMgmt.mib should be used instead. The minimum value (in feet, if 'EWLUnits' is 'feet, or in meters, if 'EWLUnits' is 'meters') that the 'ConfEWL' object can accept. Together with the 'MaxEWL' object, this object indicates the range of EWL when 'EWLUnits' is either 'feet' or 'meters'. Note : This object is valid only if the 'LoopMeasurementMethod' object is 'ewl'.")
reachDSLSpectrumMgmtMaxEWL = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reachDSLSpectrumMgmtMaxEWL.setStatus('current')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtMaxEWL.setDescription("This object has been deprecated. The corresponding object in the new pdn_spectrumMgmt.mib should be used instead. The maximum value (in feet, if 'EWLUnits' is 'feet, or in meters, if 'EWLUnits' is 'meters') that the 'ConfEWL' object can accept. Together with the 'MinEWL' object, this object indicates the range of EWL when 'EWLUnits' is either 'feet' or 'meters'. Note : This object is valid only if the 'LoopMeasurementMethod' object is 'ewl'.")
reachDSLLineTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 5), )
if mibBuilder.loadTexts: reachDSLLineTable.setStatus('current')
if mibBuilder.loadTexts: reachDSLLineTable.setDescription('The ReachDSL Line Table.')
reachDSLLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: reachDSLLineEntry.setStatus('current')
if mibBuilder.loadTexts: reachDSLLineEntry.setDescription("An entry in the reachDSLLineTable. Note: This entry can be accessed only for ifIndex values that belong to a physical interface. e.g. for ifType = 'adsl'.")
reachDSLPotsDetectionVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 74)).clone(3)).setUnits('volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: reachDSLPotsDetectionVoltage.setStatus('current')
if mibBuilder.loadTexts: reachDSLPotsDetectionVoltage.setDescription('This object defines the configurable voltage used to detect the presence of POTS on the DSL line. The range is 0-74 volts. The default value is 3 volts. Note: This object can be accessed only for ifIndex values that belong to a physical interface. i.e. ifType = adsl/reachDSL.')
reachDSLCircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reachDSLCircuitIdentifier.setStatus('deprecated')
if mibBuilder.loadTexts: reachDSLCircuitIdentifier.setDescription("The value of this object reflects the transmission vendor's circuit identifier to facilitate troubleshooting. Note: This object can be accessed only for ifIndex values that belong to a physical interface. e.g. for ifType = 'adsl'. This object is deprecated in favor of ifAlias. It is highly recommended that future implementations use ifAlias to store the Circuit Identifier associated with reach DSL interfaces.")
reachDSLSpectrumMgmtLoopMeasurementMethod = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("loopLength", 2), ("ewl", 3), ("quadMode", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reachDSLSpectrumMgmtLoopMeasurementMethod.setStatus('current')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtLoopMeasurementMethod.setDescription("This object has been deprecated. The corresponding object in the new pdn_spectrumMgmt.mib should be used instead. This object indicates the measurement method used in describing the Loop Length of a circuit. Following are the details of each of the options: none(1) - Indicates that the Spectral Compliance is NOT dependant on any Loop Length measurements or configurations. loopLength(2) - The 'ConfLoopLength' object is used to determine spectral compliance. The 'ConfEWL' &amp; 'ConfQuadMode' objects are not used in this mode. ewl(3) - The 'ConfEWL' object is used to configure the estimated loop length, which is used to determine spectral compliance. In this mode the 'ConfLoopLength' &amp; 'ConfQuadMode' objects are not used. quadMode(4) - The 'ConfQuadMode' object is used to determine spectral compliance. The 'ConfEWL' &amp; 'ConfLoopLength' objects are not used in this mode. This object determines which of the three objects : 'ConfEWL', 'ConfLoopLength' or 'ConfQuadMode' is used (if any) to enforce spectrally compliant maximum 'Tx Rates' and the maximum allowed 'Tx Power' on a given circuit.")
reachDSLSpectrumMgmtEWLUnits = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("feet", 2), ("meters", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reachDSLSpectrumMgmtEWLUnits.setStatus('current')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtEWLUnits.setDescription("This object has been deprecated. The corresponding object in the new pdn_spectrumMgmt.mib should be used instead. This object indicates the units of measurement used in describing the Estimated Working Length of a circuit. Following are the details of each of the units: none(1) - Indicates that the Spectral Compliance is NOT dependant on the 'ConfEWL' object. feet(2) - The 'ConfEWL' is measured and configured in feet. meters(3) - The 'ConfEWL' is measured and configured in meters.")
reachDSLSpectrumMgmtMode = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableOnly", 1), ("disableOnly", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reachDSLSpectrumMgmtMode.setStatus('current')
if mibBuilder.loadTexts: reachDSLSpectrumMgmtMode.setDescription("This object has been deprecated. The corresponding object in the new pdn_spectrumMgmt.mib should be used instead. This object restricts the MAX-ACCESS of the 'Selection' object. Following are the details of each of the values: enableOnly(1) - Indicates that the 'Selection' object IS always 'enabled' and cannot be set to 'disabled'. disableOnly(2) - Indicates that the 'Selection' object IS always 'disabled' and cannot be set to 'enabled'. both(3) - Indicates that the 'Selection' object will accept both the 'enabled' and 'disabled' values.")
pdnReachDSLConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 2))
pdnReachDSLGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 2, 1))
pdnReachDSLCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 2, 2))
pdnReachDSLCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 2, 2, 2)).setObjects(("PDN-REACHDSL-MIB", "pdnReachDSLGeneralConfigGroup"), ("PDN-REACHDSL-MIB", "pdnReachDSLGeneralInformationGroup"), ("PDN-REACHDSL-MIB", "pdnReachDSLEWLModeGroup"), ("PDN-REACHDSL-MIB", "pdnReachDSLLoopLengthModeGroup"), ("PDN-REACHDSL-MIB", "pdnReachDSLQuadModeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnReachDSLCompliance1 = pdnReachDSLCompliance1.setStatus('current')
if mibBuilder.loadTexts: pdnReachDSLCompliance1.setDescription('The compliance statement for SNMP entities which manage ReachDSL interfaces.')
pdnReachDSLGeneralConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 2, 1, 4)).setObjects(("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtSelection"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtConfAtucMaxTxPower"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtConfAturMaxTxPower"), ("PDN-REACHDSL-MIB", "reachDSLPotsDetectionVoltage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnReachDSLGeneralConfigGroup = pdnReachDSLGeneralConfigGroup.setStatus('current')
if mibBuilder.loadTexts: pdnReachDSLGeneralConfigGroup.setDescription('A collection of configuration objects required for providing access to configure all reachDSL interfaces.')
pdnReachDSLGeneralInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 2, 1, 5)).setObjects(("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtAtucMaxTxRate"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtAtucMinTxRate"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtAtucMaxTxPower"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtAturMaxTxRate"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtAturMinTxRate"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtAturMaxTxPower"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtLoopMeasurementMethod"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtEWLUnits"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnReachDSLGeneralInformationGroup = pdnReachDSLGeneralInformationGroup.setStatus('current')
if mibBuilder.loadTexts: pdnReachDSLGeneralInformationGroup.setDescription('A collection of objects providing information applicable to all reachDSL interfaces.')
pdnReachDSLEWLModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 2, 1, 6)).setObjects(("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtConfEWL"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtMinEWL"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtMaxEWL"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnReachDSLEWLModeGroup = pdnReachDSLEWLModeGroup.setStatus('current')
if mibBuilder.loadTexts: pdnReachDSLEWLModeGroup.setDescription("A collection of objects providing configuration access and information specific to reachDSL interfaces whose loop/line length measurement method is EWL. i.e.the reachDSLSpectrumMgmtLoopMeasurementMethod object is 'ewl'.")
pdnReachDSLLoopLengthModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 2, 1, 7)).setObjects(("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtConfLoopLength"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnReachDSLLoopLengthModeGroup = pdnReachDSLLoopLengthModeGroup.setStatus('current')
if mibBuilder.loadTexts: pdnReachDSLLoopLengthModeGroup.setDescription("A collection of object(s) providing configuration access and information specific to reachDSL interfaces whose loop/line length measurement method is Loop Length (short/medium/long). i.e.the reachDSLSpectrumMgmtLoopMeasurementMethod object is 'loopLength'.")
pdnReachDSLQuadModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 2, 1, 8)).setObjects(("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtConfQuadMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnReachDSLQuadModeGroup = pdnReachDSLQuadModeGroup.setStatus('current')
if mibBuilder.loadTexts: pdnReachDSLQuadModeGroup.setDescription("A collection of object(s) providing configuration access and information specific to reachDSL interfaces whose loop/line length measurement method is based on the Quad configuration. i.e.the reachDSLSpectrumMgmtLoopMeasurementMethod object is 'quadMode'.")
pdnReachDSLCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 2, 2, 1)).setObjects(("PDN-REACHDSL-MIB", "pdnReachDSLConfigurationGroup"), ("PDN-REACHDSL-MIB", "pdnReachDSLInformationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnReachDSLCompliance = pdnReachDSLCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: pdnReachDSLCompliance.setDescription('The compliance statement for SNMP entities which manage ReachDSL interfaces.')
pdnReachDSLConfigurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 2, 1, 1)).setObjects(("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtSelection"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtConfEWL"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtConfLoopLength"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtConfAtucMaxTxPower"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtConfAturMaxTxPower"), ("PDN-REACHDSL-MIB", "reachDSLPotsDetectionVoltage"), ("PDN-REACHDSL-MIB", "reachDSLCircuitIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnReachDSLConfigurationGroup = pdnReachDSLConfigurationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: pdnReachDSLConfigurationGroup.setDescription('A collection of configuration objects required for providing access to configuration as well as status information for reachDSL products.')
pdnReachDSLInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 2, 1, 2)).setObjects(("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtAtucMaxTxRate"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtAtucMinTxRate"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtAtucMaxTxPower"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtAturMaxTxRate"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtAturMinTxRate"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtAturMaxTxPower"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtMinEWL"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtMaxEWL"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtLoopMeasurementMethod"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtEWLUnits"), ("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnReachDSLInformationGroup = pdnReachDSLInformationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: pdnReachDSLInformationGroup.setDescription('A collection of objects providing access meant specifically for accessing information for for reachDSL products.')
pdnReachDSLDeprecatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 20, 2, 1, 3)).setObjects(("PDN-REACHDSL-MIB", "reachDSLSpectrumMgmtZone"), ("PDN-REACHDSL-MIB", "reachDSLCircuitIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnReachDSLDeprecatedGroup = pdnReachDSLDeprecatedGroup.setStatus('deprecated')
if mibBuilder.loadTexts: pdnReachDSLDeprecatedGroup.setDescription('A collection of objects that have been deprecated.')
mibBuilder.exportSymbols("PDN-REACHDSL-MIB", reachDSLSpectrumMgmtConfTable=reachDSLSpectrumMgmtConfTable, pdnReachDSLGeneralConfigGroup=pdnReachDSLGeneralConfigGroup, pdnReachDSLDeprecatedGroup=pdnReachDSLDeprecatedGroup, reachDSLPotsDetectionVoltage=reachDSLPotsDetectionVoltage, reachDSLSpectrumMgmtConfAtucMaxTxPower=reachDSLSpectrumMgmtConfAtucMaxTxPower, pdnReachDSLEWLModeGroup=pdnReachDSLEWLModeGroup, reachDSLSpectrumMgmtAturMinTxRate=reachDSLSpectrumMgmtAturMinTxRate, reachDSLSpectrumMgmtSelection=reachDSLSpectrumMgmtSelection, reachDSLSpectrumMgmtMaxEWL=reachDSLSpectrumMgmtMaxEWL, reachDSLLineEntry=reachDSLLineEntry, reachDSLSpectrumMgmtConfQuadMode=reachDSLSpectrumMgmtConfQuadMode, pdnReachDSLCompliances=pdnReachDSLCompliances, reachDSLLineTable=reachDSLLineTable, pdnReachDSLObjects=pdnReachDSLObjects, pdnReachDSLConformance=pdnReachDSLConformance, reachDSLSpectrumMgmtConfAturMaxTxPower=reachDSLSpectrumMgmtConfAturMaxTxPower, pdnReachDSLGeneralInformationGroup=pdnReachDSLGeneralInformationGroup, reachDSLSpectrumMgmtZone=reachDSLSpectrumMgmtZone, reachDSLSpectrumMgmtAturMaxTxRate=reachDSLSpectrumMgmtAturMaxTxRate, reachDSLCircuitIdentifier=reachDSLCircuitIdentifier, reachDSLSpectrumMgmtAturMaxTxPower=reachDSLSpectrumMgmtAturMaxTxPower, reachDSLSpectrumMgmtConfLoopLength=reachDSLSpectrumMgmtConfLoopLength, reachDSLSpectrumMgmtLineInfoEntry=reachDSLSpectrumMgmtLineInfoEntry, reachDSLSpectrumMgmtMinEWL=reachDSLSpectrumMgmtMinEWL, pdnReachDSLQuadModeGroup=pdnReachDSLQuadModeGroup, reachDSLSpectrumMgmtAtucMinTxRate=reachDSLSpectrumMgmtAtucMinTxRate, reachDSLSpectrumMgmtLoopMeasurementMethod=reachDSLSpectrumMgmtLoopMeasurementMethod, reachDSLSpectrumMgmtConfEWL=reachDSLSpectrumMgmtConfEWL, pdnReachDSLLoopLengthModeGroup=pdnReachDSLLoopLengthModeGroup, pdnReachDSLInformationGroup=pdnReachDSLInformationGroup, reachDSLSpectrumMgmtAtucMaxTxRate=reachDSLSpectrumMgmtAtucMaxTxRate, reachDSLSpectrumMgmtAtucMaxTxPower=reachDSLSpectrumMgmtAtucMaxTxPower, reachDSLSpectrumMgmtLineInfoTable=reachDSLSpectrumMgmtLineInfoTable, reachDSLSpectrumMgmtEWLUnits=reachDSLSpectrumMgmtEWLUnits, pdnReachDSLCompliance1=pdnReachDSLCompliance1, reachDSLSpectrumMgmtMode=reachDSLSpectrumMgmtMode, pdnReachDSL=pdnReachDSL, PYSNMP_MODULE_ID=pdnReachDSL, reachDSLSpectrumMgmtConfEntry=reachDSLSpectrumMgmtConfEntry, pdnReachDSLCompliance=pdnReachDSLCompliance, pdnReachDSLConfigurationGroup=pdnReachDSLConfigurationGroup, pdnReachDSLGroups=pdnReachDSLGroups)
