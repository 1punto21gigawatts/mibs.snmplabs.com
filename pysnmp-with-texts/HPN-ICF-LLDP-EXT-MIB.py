#
# PySNMP MIB module HPN-ICF-LLDP-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-LLDP-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:39:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
LldpPortNumber, = mibBuilder.importSymbols("LLDP-MIB", "LldpPortNumber")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, ModuleIdentity, Bits, NotificationType, Counter64, Counter32, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, iso, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "Bits", "NotificationType", "Counter64", "Counter32", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "iso", "TimeTicks", "Gauge32")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
hpnicflldp = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 100))
hpnicflldp.setRevisions(('2009-03-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicflldp.setRevisionsDescriptions(('',))
if mibBuilder.loadTexts: hpnicflldp.setLastUpdated('200903210000Z')
if mibBuilder.loadTexts: hpnicflldp.setOrganization('')
if mibBuilder.loadTexts: hpnicflldp.setContactInfo('')
if mibBuilder.loadTexts: hpnicflldp.setDescription('LLDP extended management infomation.')
hpnicflldpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 100, 1))
hpnicflldpConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 100, 1, 1))
hpnicflldpAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 100, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicflldpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicflldpAdminStatus.setDescription('The global administratively desired status of the local LLDP agent.')
hpnicflldpComplianceCDPStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 100, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicflldpComplianceCDPStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicflldpComplianceCDPStatus.setDescription('The global administratively desired status of CDP Compliance.')
hpnicflldpPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 100, 1, 1, 3), )
if mibBuilder.loadTexts: hpnicflldpPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpnicflldpPortConfigTable.setDescription('The port-based table that controls extended functions.')
hpnicflldpPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 100, 1, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-LLDP-EXT-MIB", "hpnicflldpPortConfigPortNum"))
if mibBuilder.loadTexts: hpnicflldpPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicflldpPortConfigEntry.setDescription('LLDP extended configuration information for a particular port. This co- nfiguration parameter controls compliance with other non-standard link layer discovery protocol such as CDP.')
hpnicflldpPortConfigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 100, 1, 1, 3, 1, 1), LldpPortNumber())
if mibBuilder.loadTexts: hpnicflldpPortConfigPortNum.setStatus('current')
if mibBuilder.loadTexts: hpnicflldpPortConfigPortNum.setDescription('The index value used to identify the port component associated with th- is entry.')
hpnicflldpPortConfigCDPComplianceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 100, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("txAndRx", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicflldpPortConfigCDPComplianceStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicflldpPortConfigCDPComplianceStatus.setDescription("The administratively desired CDP Compliance status of the local LLDP a- gent. If the associated hpnicflldpPortConfigCDPComplianceStatus object has a value of 'txAndRx', then the LLDP agent will receive CDP frames on th- is port, and will transmit CDP frames only after receive a CDP frames. If the associated lldpPortConfigAdminStatus object has a value of 'disa- bled', LLDP agent will not transmit or receive CDP frames on this port.")
mibBuilder.exportSymbols("HPN-ICF-LLDP-EXT-MIB", hpnicflldpComplianceCDPStatus=hpnicflldpComplianceCDPStatus, hpnicflldpAdminStatus=hpnicflldpAdminStatus, hpnicflldpPortConfigEntry=hpnicflldpPortConfigEntry, hpnicflldp=hpnicflldp, PYSNMP_MODULE_ID=hpnicflldp, hpnicflldpPortConfigTable=hpnicflldpPortConfigTable, hpnicflldpPortConfigPortNum=hpnicflldpPortConfigPortNum, hpnicflldpObjects=hpnicflldpObjects, hpnicflldpPortConfigCDPComplianceStatus=hpnicflldpPortConfigCDPComplianceStatus, hpnicflldpConfiguration=hpnicflldpConfiguration)
