#
# PySNMP MIB module POLICY-ROUTE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/POLICY-ROUTE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:41:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter32, Unsigned32, MibIdentifier, IpAddress, Bits, Counter64, Integer32, ObjectIdentity, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "Unsigned32", "MibIdentifier", "IpAddress", "Bits", "Counter64", "Integer32", "ObjectIdentity", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity")
MacAddress, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "RowStatus", "TextualConvention")
swPolicyRouteMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 32))
if mibBuilder.loadTexts: swPolicyRouteMIB.setLastUpdated('0703270000Z')
if mibBuilder.loadTexts: swPolicyRouteMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swPolicyRouteMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swPolicyRouteMIB.setDescription('The structure of policy route management for the proprietary enterprise.')
swPolicyRouteCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 32, 1))
swPolicyRouteInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 32, 2))
swPolicyRouteMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 32, 3))
swPolicyRouteTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 32, 3, 1), )
if mibBuilder.loadTexts: swPolicyRouteTable.setStatus('current')
if mibBuilder.loadTexts: swPolicyRouteTable.setDescription('A table containing policy route information.')
swPolicyRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 32, 3, 1, 1), ).setIndexNames((0, "POLICY-ROUTE-MIB", "swPolicyRouteName"))
if mibBuilder.loadTexts: swPolicyRouteEntry.setStatus('current')
if mibBuilder.loadTexts: swPolicyRouteEntry.setDescription('A policy route information list.')
swPolicyRouteName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 32, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPolicyRouteName.setStatus('current')
if mibBuilder.loadTexts: swPolicyRouteName.setDescription('The name of a unique policy route rule in the table, with a max length of 32 characters.')
swPolicyRouteProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 32, 3, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPolicyRouteProfileId.setStatus('current')
if mibBuilder.loadTexts: swPolicyRouteProfileId.setDescription('The ID of the ACL mask entry.')
swPolicyRouteAccessId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 32, 3, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPolicyRouteAccessId.setStatus('current')
if mibBuilder.loadTexts: swPolicyRouteAccessId.setDescription('The ID of the ACL rule entry.')
swPolicyRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 32, 3, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPolicyRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: swPolicyRouteNextHop.setDescription('IP address of the next hop.')
swPolicyRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 32, 3, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPolicyRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: swPolicyRouteRowStatus.setDescription("To create a row for this table, a manager must set this object to either createAndGo(4) or createAndWait(5). Setting the `swPolicyRouteRowStatus' as active(1) means enabling this rule. When `swPolicyRouteRowStatus' is set to notInService(2), this rule is disabled.")
mibBuilder.exportSymbols("POLICY-ROUTE-MIB", swPolicyRouteInfo=swPolicyRouteInfo, swPolicyRouteProfileId=swPolicyRouteProfileId, PYSNMP_MODULE_ID=swPolicyRouteMIB, swPolicyRouteTable=swPolicyRouteTable, swPolicyRouteName=swPolicyRouteName, swPolicyRouteAccessId=swPolicyRouteAccessId, swPolicyRouteCtrl=swPolicyRouteCtrl, swPolicyRouteRowStatus=swPolicyRouteRowStatus, swPolicyRouteMgmt=swPolicyRouteMgmt, swPolicyRouteMIB=swPolicyRouteMIB, swPolicyRouteNextHop=swPolicyRouteNextHop, swPolicyRouteEntry=swPolicyRouteEntry)
