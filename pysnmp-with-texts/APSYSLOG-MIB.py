#
# PySNMP MIB module APSYSLOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APSYSLOG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:24:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acmepacketMgmt, = mibBuilder.importSymbols("ACMEPACKET-SMI", "acmepacketMgmt")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, Integer32, ModuleIdentity, IpAddress, MibIdentifier, iso, Gauge32, Bits, Counter64, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "Integer32", "ModuleIdentity", "IpAddress", "MibIdentifier", "iso", "Gauge32", "Bits", "Counter64", "Unsigned32", "NotificationType")
TimeStamp, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "TruthValue", "DisplayString")
apSyslogModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9148, 3, 1))
if mibBuilder.loadTexts: apSyslogModule.setLastUpdated('0006211500Z')
if mibBuilder.loadTexts: apSyslogModule.setOrganization('Acme Packet, Inc')
if mibBuilder.loadTexts: apSyslogModule.setContactInfo(' Customer Service Postal: Acme Packet, Inc 71 Third Avenue Burlington, MA 01803 US Tel: 1-781-328-4400 E-mail: support@acmepacket.com')
if mibBuilder.loadTexts: apSyslogModule.setDescription(' The syslog MIB for Acme Packet')
apSyslogMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1))
class SyslogLevel(TextualConvention, Integer32):
    description = 'The log-level of a syslog message.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("emergency", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("notice", 6), ("info", 7), ("trace", 8), ("debug", 9))

apSyslogBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 1))
apSyslogNotificationsSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 1, 1), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogNotificationsSent.setStatus('current')
if mibBuilder.loadTexts: apSyslogNotificationsSent.setDescription('The number of apSyslogMessageGenerated notifications that have been sent. This number may include notifications that were prevented from being transmitted due to reasons such as resource limitations and/or non-connectivity. If one is receiving notifications, one can periodically poll this object to determine if any notifications were missed. If so, a poll of the apSyslogHistoryTable might be appropriate.')
apSyslogNotificationsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSyslogNotificationsEnabled.setStatus('current')
if mibBuilder.loadTexts: apSyslogNotificationsEnabled.setDescription('Indicates whether apSyslogMessageGenerated notifications will or will not be sent when a syslog message is generated by the device. Disabling notifications does not prevent syslog messages from being added to the apSyslogHistoryTable.')
apSyslogMaxLevel = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 1, 3), SyslogLevel().clone('warning')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSyslogMaxLevel.setStatus('current')
if mibBuilder.loadTexts: apSyslogMaxLevel.setDescription('Indicates which syslog severity levels will be processed. Any syslog message with a Log-level value greater than this value will be ignored by the agent. note: severity numeric values increase as their severity decreases, e.g. major(3) is more severe than debug(8).')
apSyslogMsgIgnores = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 1, 4), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogMsgIgnores.setStatus('current')
if mibBuilder.loadTexts: apSyslogMsgIgnores.setDescription('The number of syslog messages which were ignored, means no need to send apSyslog apSyslogMessageGenerated notification. A message will be ignored if it has a Log-Level value greater than apSyslogMaxSeverity.')
apSyslogMsgDrops = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 1, 5), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogMsgDrops.setStatus('current')
if mibBuilder.loadTexts: apSyslogMsgDrops.setDescription("The number of syslog messages which could not be processed due to lack of system resources. Most likely this will occur at the same time that syslog messages are generated to indicate this lack of resources. Increases in this object's value may serve as an indication that system resource levels should be examined via other mib objects. A message that is dropped will not appear in the history table and no notification will be sent for this message.")
apSyslogHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2))
apSyslogHistTableMaxLength = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(1)).setUnits('entries').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSyslogHistTableMaxLength.setStatus('current')
if mibBuilder.loadTexts: apSyslogHistTableMaxLength.setDescription('The upper limit on the number of entries that the apSyslogHistoryTable may contain. A value of 0 will prevent any history from being retained. When this table is full, the oldest entry will be deleted and a new one will be created.')
apSyslogHistMsgsFlushed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2, 2), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogHistMsgsFlushed.setStatus('current')
if mibBuilder.loadTexts: apSyslogHistMsgsFlushed.setDescription('The number of entries that have been removed from the apSyslogHistoryTable in order to make room for new entries. This object can be utilized to determine whether your polling frequency on the history table is fast enough and/or the size of your history table is large enough such that you are not missing messages.')
apSyslogHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2, 3), )
if mibBuilder.loadTexts: apSyslogHistoryTable.setStatus('current')
if mibBuilder.loadTexts: apSyslogHistoryTable.setDescription("A table of syslog messages generated by this device. All 'interesting' syslog messages (i.e. Log-Level <= apSyslogMaxLevel) are entered into this table.")
apSyslogHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2, 3, 1), ).setIndexNames((0, "APSYSLOG-MIB", "apSyslogHistIndex"))
if mibBuilder.loadTexts: apSyslogHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: apSyslogHistoryEntry.setDescription('A syslog message that was previously generated by this device. Each entry is indexed by a message index.')
apSyslogHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogHistIndex.setStatus('current')
if mibBuilder.loadTexts: apSyslogHistIndex.setDescription('A monotonically increasing integer for the sole purpose of indexing messages. When it reaches the maximum value the agent wraps the value back to 1.')
apSyslogHistFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogHistFrom.setStatus('current')
if mibBuilder.loadTexts: apSyslogHistFrom.setDescription("The process name and host of the sending client. For example: 'anyclient@sr.acme.com'.")
apSyslogHistLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2, 3, 1, 3), SyslogLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogHistLevel.setStatus('current')
if mibBuilder.loadTexts: apSyslogHistLevel.setDescription('The Log-Level of the message.')
apSyslogHistType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogHistType.setStatus('current')
if mibBuilder.loadTexts: apSyslogHistType.setDescription('A textual identification for the Log-Type, which categorizes the log message.')
apSyslogHistContent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogHistContent.setStatus('current')
if mibBuilder.loadTexts: apSyslogHistContent.setDescription('The text of the message. If the text of the message exceeds 255 bytes, the message will be truncated to 255 bytes. ')
apSyslogHistTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 1, 1, 2, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogHistTimestamp.setStatus('current')
if mibBuilder.loadTexts: apSyslogHistTimestamp.setDescription('The value of sysUpTime when this message was generated.')
apSyslogMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 1, 2))
apSyslogMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 1, 2, 0))
apSyslogMessageGenerated = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 1, 2, 0, 1)).setObjects(("APSYSLOG-MIB", "apSyslogHistFrom"), ("APSYSLOG-MIB", "apSyslogHistLevel"), ("APSYSLOG-MIB", "apSyslogHistType"), ("APSYSLOG-MIB", "apSyslogHistContent"), ("APSYSLOG-MIB", "apSyslogHistTimestamp"))
if mibBuilder.loadTexts: apSyslogMessageGenerated.setStatus('current')
if mibBuilder.loadTexts: apSyslogMessageGenerated.setDescription('When a syslog message is generated by the device a apSyslogMessageGenerated notification is sent. The sending of these notifications can be enabled/disabled via the apSyslogNotificationsEnabled object.')
apSyslogMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 1, 3))
apSyslogMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 1, 3, 1))
apSyslogMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 1, 3, 2))
apSyslogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 1, 3, 2, 1)).setObjects(("APSYSLOG-MIB", "apSyslogNotificationsSent"), ("APSYSLOG-MIB", "apSyslogNotificationsEnabled"), ("APSYSLOG-MIB", "apSyslogMaxLevel"), ("APSYSLOG-MIB", "apSyslogMsgIgnores"), ("APSYSLOG-MIB", "apSyslogMsgDrops"), ("APSYSLOG-MIB", "apSyslogHistTableMaxLength"), ("APSYSLOG-MIB", "apSyslogHistMsgsFlushed"), ("APSYSLOG-MIB", "apSyslogHistIndex"), ("APSYSLOG-MIB", "apSyslogHistFrom"), ("APSYSLOG-MIB", "apSyslogHistLevel"), ("APSYSLOG-MIB", "apSyslogHistType"), ("APSYSLOG-MIB", "apSyslogHistContent"), ("APSYSLOG-MIB", "apSyslogHistTimestamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSyslogGroup = apSyslogGroup.setStatus('current')
if mibBuilder.loadTexts: apSyslogGroup.setDescription('A collection of objects providing the syslog MIB capability.')
apSyslogNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 1, 3, 2, 2)).setObjects(("APSYSLOG-MIB", "apSyslogMessageGenerated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSyslogNotificationsGroup = apSyslogNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSyslogNotificationsGroup.setDescription('A collection of notifications describing license violation.')
mibBuilder.exportSymbols("APSYSLOG-MIB", apSyslogHistoryTable=apSyslogHistoryTable, apSyslogHistIndex=apSyslogHistIndex, apSyslogNotificationsGroup=apSyslogNotificationsGroup, apSyslogMIBConformance=apSyslogMIBConformance, apSyslogNotificationsEnabled=apSyslogNotificationsEnabled, PYSNMP_MODULE_ID=apSyslogModule, apSyslogHistFrom=apSyslogHistFrom, apSyslogHistTimestamp=apSyslogHistTimestamp, apSyslogGroup=apSyslogGroup, apSyslogBasic=apSyslogBasic, apSyslogHistoryEntry=apSyslogHistoryEntry, apSyslogMIBGroups=apSyslogMIBGroups, apSyslogHistContent=apSyslogHistContent, apSyslogMIBObjects=apSyslogMIBObjects, apSyslogHistTableMaxLength=apSyslogHistTableMaxLength, apSyslogMIBCompliances=apSyslogMIBCompliances, apSyslogHistMsgsFlushed=apSyslogHistMsgsFlushed, apSyslogHistLevel=apSyslogHistLevel, apSyslogMIBNotifications=apSyslogMIBNotifications, apSyslogMsgIgnores=apSyslogMsgIgnores, apSyslogHistType=apSyslogHistType, apSyslogModule=apSyslogModule, apSyslogMsgDrops=apSyslogMsgDrops, SyslogLevel=SyslogLevel, apSyslogHistory=apSyslogHistory, apSyslogMessageGenerated=apSyslogMessageGenerated, apSyslogMaxLevel=apSyslogMaxLevel, apSyslogNotificationsSent=apSyslogNotificationsSent, apSyslogMIBNotificationPrefix=apSyslogMIBNotificationPrefix)
