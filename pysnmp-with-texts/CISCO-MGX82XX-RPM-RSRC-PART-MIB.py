#
# PySNMP MIB module CISCO-MGX82XX-RPM-RSRC-PART-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MGX82XX-RPM-RSRC-PART-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:07:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
rpmInterface, = mibBuilder.importSymbols("BASIS-MIB", "rpmInterface")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Counter64, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, Bits, IpAddress, TimeTicks, ObjectIdentity, NotificationType, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "Bits", "IpAddress", "TimeTicks", "ObjectIdentity", "NotificationType", "Integer32", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoMgx82xxRpmRsrcPartMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 61))
ciscoMgx82xxRpmRsrcPartMIB.setRevisions(('2002-09-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoMgx82xxRpmRsrcPartMIB.setRevisionsDescriptions(('Initial version of the MIB. The content of this MIB was originally available in CISCO-WAN-AXIPOP-MIB defined using SMIv1. The applicable objects from CISCO-WAN-AXIPOP-MIB are defined using SMIv2 in this MIB. Also the descriptions of some of the objects have been modified.',))
if mibBuilder.loadTexts: ciscoMgx82xxRpmRsrcPartMIB.setLastUpdated('200209170000Z')
if mibBuilder.loadTexts: ciscoMgx82xxRpmRsrcPartMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoMgx82xxRpmRsrcPartMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoMgx82xxRpmRsrcPartMIB.setDescription('The MIB module to manage resource partition objects. A resource partition is configured on a RPM subinterface. An administrator can partition connection related resources like VPI, VCI ranges, bandwidth and total amount of available connection entries in the switch through these MIB tables.')
rpmIfCnfResPart = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2))
rpmIfCnfRscPartTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1), )
if mibBuilder.loadTexts: rpmIfCnfRscPartTable.setStatus('current')
if mibBuilder.loadTexts: rpmIfCnfRscPartTable.setDescription('The table is for RPM interface resource partition.')
rpmIfCnfRscPartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-RPM-RSRC-PART-MIB", "rpmIfRscSlotNum"), (0, "CISCO-MGX82XX-RPM-RSRC-PART-MIB", "rpmIfRscPartIfNum"), (0, "CISCO-MGX82XX-RPM-RSRC-PART-MIB", "rpmIfRscPartCtrlrNum"))
if mibBuilder.loadTexts: rpmIfCnfRscPartEntry.setStatus('current')
if mibBuilder.loadTexts: rpmIfCnfRscPartEntry.setDescription('An entry for resource partition configuration on a logical interface. A resource partition need to be configured before connections(or connection endpoints) can be added to the interface.')
rpmIfRscSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscSlotNum.setStatus('current')
if mibBuilder.loadTexts: rpmIfRscSlotNum.setDescription('This object identifies the slot number of the RPM card in MGX shelf.')
rpmIfRscPartIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscPartIfNum.setStatus('current')
if mibBuilder.loadTexts: rpmIfRscPartIfNum.setDescription('This is backplane interface number. Currently there is only one interface and value 1 is the only value supported.')
rpmIfRscPartCtrlrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("par", 1), ("pnni", 2), ("tag", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscPartCtrlrNum.setStatus('current')
if mibBuilder.loadTexts: rpmIfRscPartCtrlrNum.setDescription('This object identifies the type of the controller which owns the resource partition. par(1) : Portable Auto Route Controller. This is a controller software implementing Cisco Proprietary protocol for network routing and topology. pnni(2): Private Network-to-Network Interface(PNNI) controller. This is a controller implementing ATM Forum PNNI protocol for routing. tag(3) : Tag Switching(MPLS) controller. This is a controller supporting MPLS protocol.')
rpmIfRscPrtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3))).clone('del')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscPrtRowStatus.setStatus('current')
if mibBuilder.loadTexts: rpmIfRscPrtRowStatus.setDescription('This object contains the information on whether subinterface exists or being modified. add(1) : sub-interface exists del(2) : sub-interface deleted mod(2) : sub-interface being modified')
rpmIfRscPrtIngrPctBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscPrtIngrPctBandwidth.setStatus('current')
if mibBuilder.loadTexts: rpmIfRscPrtIngrPctBandwidth.setDescription('The percentage of logical interface bandwidth.')
rpmIfRscPrtEgrPctBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscPrtEgrPctBandwidth.setStatus('current')
if mibBuilder.loadTexts: rpmIfRscPrtEgrPctBandwidth.setDescription('The percentage of logical interface bandwidth.')
rpmIfRscPrtVpiLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscPrtVpiLow.setStatus('current')
if mibBuilder.loadTexts: rpmIfRscPrtVpiLow.setDescription('The beginning of the VPI range reserved for this partition.')
rpmIfRscPrtVpiHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscPrtVpiHigh.setStatus('current')
if mibBuilder.loadTexts: rpmIfRscPrtVpiHigh.setDescription('The end of the VPI range reserved for this partition.')
rpmIfRscPrtVciLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscPrtVciLow.setStatus('current')
if mibBuilder.loadTexts: rpmIfRscPrtVciLow.setDescription('The beginning of the VCI range reserved for this partition. This field is only valid for logical interfaces configured with a single VPI.')
rpmIfRscPrtVciHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscPrtVciHigh.setStatus('current')
if mibBuilder.loadTexts: rpmIfRscPrtVciHigh.setDescription('The end of the VCI range reserved for this partition. This field is only valid for logical interfaces configured with a single VPI.')
rpmIfRscPrtMaxChans = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscPrtMaxChans.setStatus('current')
if mibBuilder.loadTexts: rpmIfRscPrtMaxChans.setDescription('This represents maximum number of channels(connections) that are available to the controller.')
cmrRsrcPartMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 61, 3))
cmrRsrcPartMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 61, 3, 1))
cmrRsrcPartMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 61, 3, 2))
cmrRsrcPartMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 61, 3, 1, 1)).setObjects(("CISCO-MGX82XX-RPM-RSRC-PART-MIB", "cmrRsrcPartMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmrRsrcPartMIBCompliance = cmrRsrcPartMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cmrRsrcPartMIBCompliance.setDescription('The Compliance statement for Resource partition management group.')
cmrRsrcPartMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 61, 3, 2, 1)).setObjects(("CISCO-MGX82XX-RPM-RSRC-PART-MIB", "rpmIfRscSlotNum"), ("CISCO-MGX82XX-RPM-RSRC-PART-MIB", "rpmIfRscPartIfNum"), ("CISCO-MGX82XX-RPM-RSRC-PART-MIB", "rpmIfRscPartCtrlrNum"), ("CISCO-MGX82XX-RPM-RSRC-PART-MIB", "rpmIfRscPrtRowStatus"), ("CISCO-MGX82XX-RPM-RSRC-PART-MIB", "rpmIfRscPrtIngrPctBandwidth"), ("CISCO-MGX82XX-RPM-RSRC-PART-MIB", "rpmIfRscPrtEgrPctBandwidth"), ("CISCO-MGX82XX-RPM-RSRC-PART-MIB", "rpmIfRscPrtVpiLow"), ("CISCO-MGX82XX-RPM-RSRC-PART-MIB", "rpmIfRscPrtVpiHigh"), ("CISCO-MGX82XX-RPM-RSRC-PART-MIB", "rpmIfRscPrtVciLow"), ("CISCO-MGX82XX-RPM-RSRC-PART-MIB", "rpmIfRscPrtVciHigh"), ("CISCO-MGX82XX-RPM-RSRC-PART-MIB", "rpmIfRscPrtMaxChans"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmrRsrcPartMIBGroup = cmrRsrcPartMIBGroup.setStatus('current')
if mibBuilder.loadTexts: cmrRsrcPartMIBGroup.setDescription('The collection of objects related to configuration of Resource partition.')
mibBuilder.exportSymbols("CISCO-MGX82XX-RPM-RSRC-PART-MIB", ciscoMgx82xxRpmRsrcPartMIB=ciscoMgx82xxRpmRsrcPartMIB, rpmIfCnfRscPartEntry=rpmIfCnfRscPartEntry, cmrRsrcPartMIBGroups=cmrRsrcPartMIBGroups, rpmIfRscPrtVpiLow=rpmIfRscPrtVpiLow, rpmIfRscPrtVciLow=rpmIfRscPrtVciLow, PYSNMP_MODULE_ID=ciscoMgx82xxRpmRsrcPartMIB, cmrRsrcPartMIBCompliance=cmrRsrcPartMIBCompliance, rpmIfRscPartIfNum=rpmIfRscPartIfNum, rpmIfRscPrtIngrPctBandwidth=rpmIfRscPrtIngrPctBandwidth, cmrRsrcPartMIBGroup=cmrRsrcPartMIBGroup, cmrRsrcPartMIBConformance=cmrRsrcPartMIBConformance, rpmIfCnfResPart=rpmIfCnfResPart, rpmIfRscPrtEgrPctBandwidth=rpmIfRscPrtEgrPctBandwidth, rpmIfRscPartCtrlrNum=rpmIfRscPartCtrlrNum, rpmIfRscPrtVpiHigh=rpmIfRscPrtVpiHigh, rpmIfRscPrtRowStatus=rpmIfRscPrtRowStatus, rpmIfCnfRscPartTable=rpmIfCnfRscPartTable, cmrRsrcPartMIBCompliances=cmrRsrcPartMIBCompliances, rpmIfRscPrtVciHigh=rpmIfRscPrtVciHigh, rpmIfRscPrtMaxChans=rpmIfRscPrtMaxChans, rpmIfRscSlotNum=rpmIfRscSlotNum)
