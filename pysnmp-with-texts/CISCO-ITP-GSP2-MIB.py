#
# PySNMP MIB module CISCO-ITP-GSP2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ITP-GSP2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:03:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
cgspInstNetwork, = mibBuilder.importSymbols("CISCO-ITP-GSP-MIB", "cgspInstNetwork")
CItpTcPointCode, CItpTcLinkSLC, CItpTcLinksetId, CItpTcAclId, CItpTcNetworkName, CItpTcXuaName = mibBuilder.importSymbols("CISCO-ITP-TC-MIB", "CItpTcPointCode", "CItpTcLinkSLC", "CItpTcLinksetId", "CItpTcAclId", "CItpTcNetworkName", "CItpTcXuaName")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddressType, InetPortNumber, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetPortNumber", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Gauge32, Integer32, MibIdentifier, Bits, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, IpAddress, Unsigned32, ModuleIdentity, iso, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "MibIdentifier", "Bits", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "IpAddress", "Unsigned32", "ModuleIdentity", "iso", "ObjectIdentity", "TimeTicks")
TimeStamp, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "DisplayString", "RowStatus")
ciscoGsp2MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 332))
ciscoGsp2MIB.setRevisions(('2008-07-09 00:00', '2007-12-18 00:00', '2004-05-26 00:00', '2003-08-07 00:00', '2003-03-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoGsp2MIB.setRevisionsDescriptions(('Added Context Table for Probless Monitor feature.', 'Added Processor Number to cgsp2LocalPeerTable for SAMI interfaces.', 'Added following object to provide information related to Non-stop Operations function. cgsp2OperMtp3Offload, cgsp2OperRedundancy', 'Add new table to support MTP3 errors', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoGsp2MIB.setLastUpdated('200807090000Z')
if mibBuilder.loadTexts: ciscoGsp2MIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoGsp2MIB.setContactInfo('Cisco Systems, Inc Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ss7@cisco.com')
if mibBuilder.loadTexts: ciscoGsp2MIB.setDescription('The MIB for providing information specified in ITU Q752 Monitoring and Measurements for signalling System No. 7(SS7) Network. This information can be used to manage messages transported over SS7 Network via Cisco IP Transfer Point. The Cisco IP Transfer Point (ITP) is a hardware and software solution that transports SS7 traffic using IP. Each ITP node provides function similar to SS7 signalling point. The relevant ITU documents describing this technology is the ITU Q series, including ITU Q.700: Introduction to CCITT signalling System No. 7 and ITU Q.701 Functional description of the message transfer part (MTP) of signalling System No. 7. The ITP Quality of Service (QoS) model allows the definition of 8 QoS classes, 0 through 7. QoS classes can be assigned only SCTP links. Only one QoS class can be assigned to an SCTP link. Class 0 will be designated as the default class. Packets that are not classified to a designated QoS class will get assigned to the default class. Each provisioned QoS class can be assigned an IP precedence value or a Differential Services Code Point (DSCP). The default class is initialized to IP precedence zero (0). The default class initial TOS setting can be changed through the command line interface. The Type of Service (TOS) byte in the IP header will be set to the IP precedence or DSCP that is assigned to class. Every packet forwarded over an SCTP link that was provisioned for a given QoS class will have the TOS byte set.')
ciscoGsp2MIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 332, 0))
ciscoGsp2MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 332, 1))
ciscoGsp2MIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 332, 2))
cgsp2Events = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1))
cgsp2Qos = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 2))
cgsp2LocalPeer = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 3))
cgsp2Mtp3Errors = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 4))
cgsp2Operation = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 5))
cgsp2Context = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 6))
class Cgsp2TcQosClass(TextualConvention, Unsigned32):
    description = 'The quality of service classification to be assigned to the IP packets used to transport the SS7 messages. Zero is a special value and is reserved to carry all traffic that does not specify a Qos or when exact match of the specified Qos is not available.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 7)

class Cgsp2EventIndex(TextualConvention, Unsigned32):
    description = 'A monotonically increasing integer for the sole purpose of indexing events. When it reaches the maximum value the agent flushes the event table and wraps the value back to 1. Where lower values represent older entries and higher values represent newer entries.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class CItpTcContextId(TextualConvention, Unsigned32):
    description = 'Each context is assigned an unique identifier starting with one and are monotonically increased by one.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class CItpTcContextType(TextualConvention, Integer32):
    description = 'Indicate type or resources ....'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 6))
    namedValues = NamedValues(("unknown", 0), ("cs7link", 1), ("asp", 6))

cgsp2EventTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 1), )
if mibBuilder.loadTexts: cgsp2EventTable.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventTable.setDescription('A table used to provide information about all types of events on a signalling point.')
cgsp2EventTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-GSP2-MIB", "cgsp2EventType"))
if mibBuilder.loadTexts: cgsp2EventTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventTableEntry.setDescription('A table of SS7 events generated and received by a specific signalling point.')
cgsp2EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("as", 1), ("asp", 2), ("mtp3", 3), ("pc", 4))))
if mibBuilder.loadTexts: cgsp2EventType.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventType.setDescription("The type of event history as follows. 'as' - Application Service 'asp' - Application Service Process 'mtp3' - Message Transport Protocol Level 3 'pc' - Point-code")
cgsp2EventLoggedEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2EventLoggedEvents.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventLoggedEvents.setDescription('The number of events that have been logged.')
cgsp2EventDroppedEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2EventDroppedEvents.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventDroppedEvents.setDescription('The number of events that could not be logged due to unavailable resources.')
cgsp2EventMaxEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgsp2EventMaxEntries.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventMaxEntries.setDescription('The upper limit on the number of events that the event history can contain. A value of 0 will prevent any event history from being retained. When this table is full, the oldest entry will be deleted as a new entry is added.')
cgsp2EventMaxEntriesAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2EventMaxEntriesAllowed.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventMaxEntriesAllowed.setDescription('This object specifies the maximum number of events that can be specified for cgsp2EventMaxEntries object.')
cgsp2EventAsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 2), )
if mibBuilder.loadTexts: cgsp2EventAsTable.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventAsTable.setDescription('A table of Application Service events generated per signalling point.')
cgsp2EventAsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-GSP2-MIB", "cgsp2EventAsName"), (0, "CISCO-ITP-GSP2-MIB", "cgsp2EventAsIndex"))
if mibBuilder.loadTexts: cgsp2EventAsTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventAsTableEntry.setDescription('An entry is added to this table for each application service event associated with a particular application service. The table contains the latest number of events defined by the cgsp2EventMaxEntries object. Once the table is full, the oldest entry is removed and a new entry is created to accommodate the new event.')
cgsp2EventAsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 2, 1, 1), CItpTcXuaName())
if mibBuilder.loadTexts: cgsp2EventAsName.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventAsName.setDescription('The application server name. This name has only local significance.')
cgsp2EventAsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 2, 1, 2), Cgsp2EventIndex())
if mibBuilder.loadTexts: cgsp2EventAsIndex.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventAsIndex.setDescription('Index into application service event history.')
cgsp2EventAsText = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2EventAsText.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventAsText.setDescription('A brief description of the application service event in text format.')
cgsp2EventAsTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 2, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2EventAsTimestamp.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventAsTimestamp.setDescription('The value of sysUpTime at the time of the application service event was processed.')
cgsp2EventAspTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 3), )
if mibBuilder.loadTexts: cgsp2EventAspTable.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventAspTable.setDescription('A table of application service process events generated per signalling point.')
cgsp2EventAspTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-GSP2-MIB", "cgsp2EventAspName"), (0, "CISCO-ITP-GSP2-MIB", "cgsp2EventAspIndex"))
if mibBuilder.loadTexts: cgsp2EventAspTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventAspTableEntry.setDescription('An entry is added to this table for each application service process event associated with a particular application service process. The table contains the latest number of events defined by the cgsp2EventMaxEntries object. Once the table is full, the oldest entry is removed and a new entry is created to accommodate the new event.')
cgsp2EventAspName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 3, 1, 1), CItpTcXuaName())
if mibBuilder.loadTexts: cgsp2EventAspName.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventAspName.setDescription('The application server process name. This name has only local significance.')
cgsp2EventAspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 3, 1, 2), Cgsp2EventIndex())
if mibBuilder.loadTexts: cgsp2EventAspIndex.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventAspIndex.setDescription('Index into application service process event history.')
cgsp2EventAspText = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2EventAspText.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventAspText.setDescription('A brief description of the application service process event in text format.')
cgsp2EventAspTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 3, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2EventAspTimestamp.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventAspTimestamp.setDescription('The value of sysUpTime at the time of the application service process event was received.')
cgsp2EventMtp3Table = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 4), )
if mibBuilder.loadTexts: cgsp2EventMtp3Table.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventMtp3Table.setDescription('A table of MTP3 events generated per signalling point.')
cgsp2EventMtp3TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-GSP2-MIB", "cgsp2EventMtp3Index"))
if mibBuilder.loadTexts: cgsp2EventMtp3TableEntry.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventMtp3TableEntry.setDescription('An MTP3 event that was previously generated by this signalling point. An entry is added to this table for each SS7 event generated on the managed system. The table contains the latest number of events defined by the cgsp2EventMaxEntries object. Once the table is full, the oldest entry is removed and a new entry is created to accommodate the new event.')
cgsp2EventMtp3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 4, 1, 1), Cgsp2EventIndex())
if mibBuilder.loadTexts: cgsp2EventMtp3Index.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventMtp3Index.setDescription('Index into MTP3 event history.')
cgsp2EventMtp3Text = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2EventMtp3Text.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventMtp3Text.setDescription('A brief description of the SS7 event in text format. Each event provides information of state transitions specific to the MTP3 protocol.')
cgsp2EventMtp3Timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2EventMtp3Timestamp.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventMtp3Timestamp.setDescription('The value of sysUpTime at the time of the event was received by MTP3 layer.')
cgsp2EventPcTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 5), )
if mibBuilder.loadTexts: cgsp2EventPcTable.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventPcTable.setDescription('A table of point-code events generated per signalling point.')
cgsp2EventPcTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-GSP2-MIB", "cgsp2EventPc"), (0, "CISCO-ITP-GSP2-MIB", "cgsp2EventPcIndex"))
if mibBuilder.loadTexts: cgsp2EventPcTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventPcTableEntry.setDescription('An entry is added to this table for each point-code event. The table contains the latest number of events defined by the cgsp2EventMaxEntries object. Once the table is full, the oldest entry is removed and a new entry is created to accommodate the new event.')
cgsp2EventPc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 5, 1, 1), CItpTcPointCode())
if mibBuilder.loadTexts: cgsp2EventPc.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventPc.setDescription('The point code number.')
cgsp2EventPcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 5, 1, 2), Cgsp2EventIndex())
if mibBuilder.loadTexts: cgsp2EventPcIndex.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventPcIndex.setDescription('Index into point-code event history.')
cgsp2EventPcText = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 5, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2EventPcText.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventPcText.setDescription('A brief description of the point-code event in text format.')
cgsp2EventPcTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 1, 5, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2EventPcTimestamp.setStatus('current')
if mibBuilder.loadTexts: cgsp2EventPcTimestamp.setDescription('The value of sysUpTime at the time of the point-code event was received.')
cgsp2QosTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 2, 1), )
if mibBuilder.loadTexts: cgsp2QosTable.setStatus('current')
if mibBuilder.loadTexts: cgsp2QosTable.setDescription('A table of information related to the defining Quality of Service to transport SS7 packets using SCTP/IP. Entries are added to this table via cgsp2QosRowStatus in accordance with the RowStatusconvention.')
cgsp2QosTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-GSP2-MIB", "cgsp2QosClass"))
if mibBuilder.loadTexts: cgsp2QosTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgsp2QosTableEntry.setDescription('Each entry define information relate to a Quality of Service class as needed to transport SS7 packets using SCTP/IP.')
cgsp2QosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 2, 1, 1, 1), Cgsp2TcQosClass())
if mibBuilder.loadTexts: cgsp2QosClass.setStatus('current')
if mibBuilder.loadTexts: cgsp2QosClass.setDescription('The quality of service class that can be defined to transport SS7 Packets using SCTP/IP.')
cgsp2QosType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipPrecedence", 1), ("ipDscp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsp2QosType.setStatus('current')
if mibBuilder.loadTexts: cgsp2QosType.setDescription('Enumerated list of QoS type that can be defined. A value ipPrecedence suggests that IP Type of Service (TOS) is based on cgsp2QosPrecedenceValue. A value ipDscp suggests that IP Type of Service (TOS) is based on cgsp2QosIpDscp.')
cgsp2QosPrecedenceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsp2QosPrecedenceValue.setStatus('current')
if mibBuilder.loadTexts: cgsp2QosPrecedenceValue.setDescription('A value to assign to the IP TOS bits in the IP datagram that carries one or more SS7 packets. The IP Precedence value is specified if cgsp2QosType is ipPrecedence, otherwise it is -1.')
cgsp2QosIpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsp2QosIpDscp.setReference('Differentiated Services is described and defined in the RFCs: 2474, 2475, 2597, and 2598.')
if mibBuilder.loadTexts: cgsp2QosIpDscp.setStatus('current')
if mibBuilder.loadTexts: cgsp2QosIpDscp.setDescription('DiffServ CodePoint (DSCP) value to assign to the IP TOS bits in the IP datagram that carries one or more SS7 packets. DSCP provides scalable mechanisms to classify packets into groups or classes that have similar QoS requirements and then gives these groups the required treatment at every hop in the network. The DSCP value is specified if cgsp2QosType is ipDscp, otherwise it is -1.')
cgsp2QosAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 2, 1, 1, 5), CItpTcAclId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsp2QosAclId.setStatus('current')
if mibBuilder.loadTexts: cgsp2QosAclId.setDescription('ITP Access lists can be used to use information specific to SS7 packets to assign an Qos class. A value of zero indicates that no access control list is present.')
cgsp2QosRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsp2QosRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgsp2QosRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cgsp2QosTable following the RowStatus textual convention.')
cgsp2LocalPeerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 3, 1), )
if mibBuilder.loadTexts: cgsp2LocalPeerTable.setStatus('current')
if mibBuilder.loadTexts: cgsp2LocalPeerTable.setDescription('A local-peer table used establish SCTP associations. The port will be used to receive and sent requests to establish associations. Entries are added to this table via cgsp2LocalPeerRowStatus in accordance with the RowStatus convention.')
cgsp2LocalPeerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-ITP-GSP2-MIB", "cgsp2LocalPeerPort"))
if mibBuilder.loadTexts: cgsp2LocalPeerTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgsp2LocalPeerTableEntry.setDescription('A list of attributes of the local-peer.')
cgsp2LocalPeerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 3, 1, 1, 1), InetPortNumber())
if mibBuilder.loadTexts: cgsp2LocalPeerPort.setStatus('current')
if mibBuilder.loadTexts: cgsp2LocalPeerPort.setDescription('The local SCTP port for this local-peer. The value zero is not allowed.')
cgsp2LocalPeerSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767)).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2LocalPeerSlotNumber.setStatus('current')
if mibBuilder.loadTexts: cgsp2LocalPeerSlotNumber.setDescription('This value is used to specify to which slot the local-peer will be offloaded. A value of negative one indicates the local-peer is not offloaded.')
cgsp2LocalPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsp2LocalPeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgsp2LocalPeerRowStatus.setDescription('The object is used by a management station to create or delete a row entry in cgsp2LocalPeerTable following the RowStatus textual convention.')
cgsp2LocalPeerProcessorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2LocalPeerProcessorNumber.setStatus('current')
if mibBuilder.loadTexts: cgsp2LocalPeerProcessorNumber.setDescription('This value is used to specify to which processor the local-peer will be offloaded on the line card indicated by cgsp2LocalPeerSlotNumber. For certain line cards like Flexwan, this value corresponds to bay number instead of processor number.')
cgsp2LpIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 3, 2), )
if mibBuilder.loadTexts: cgsp2LpIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: cgsp2LpIpAddrTable.setDescription('A table of Local IP addresses group together to form the local-peer used to establish SCTP associations. For a given local-peer, there can be multiple local IP addresses which are used for the multi-homing feature of the SCTP associations. This table lists out the configured local IP addresses. Entries are added to this table via cgsp2LocalPeerRowStatus in accordance with the RowStatus convention.')
cgsp2LpIpAddrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-ITP-GSP2-MIB", "cgsp2LocalPeerPort"), (0, "CISCO-ITP-GSP2-MIB", "cgsp2LpIpAddressNumber"))
if mibBuilder.loadTexts: cgsp2LpIpAddrTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgsp2LpIpAddrTableEntry.setDescription('A list of attributes of the Local IP addresses for the local-peer.')
cgsp2LpIpAddressNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cgsp2LpIpAddressNumber.setStatus('current')
if mibBuilder.loadTexts: cgsp2LpIpAddressNumber.setDescription("This object specifies the index for the instance's IP address.")
cgsp2LpIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 3, 2, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsp2LpIpAddressType.setStatus('current')
if mibBuilder.loadTexts: cgsp2LpIpAddressType.setDescription('This object contains the type of the local IP address used to create the association.')
cgsp2LpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 3, 2, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsp2LpIpAddress.setStatus('current')
if mibBuilder.loadTexts: cgsp2LpIpAddress.setDescription('This object contains the local IP address used to create association associations.')
cgsp2LpIpAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 3, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgsp2LpIpAddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgsp2LpIpAddressRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cgsp2LpIpAddrTable following the RowStatus textual convention.')
cgsp2Mtp3ErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 4, 1), )
if mibBuilder.loadTexts: cgsp2Mtp3ErrorsTable.setStatus('current')
if mibBuilder.loadTexts: cgsp2Mtp3ErrorsTable.setDescription('A table of MTP3 errors that have occurred on all Signalling Point supported by this device.')
cgsp2Mtp3ErrorsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-ITP-GSP2-MIB", "cgsp2Mtp3ErrorsType"))
if mibBuilder.loadTexts: cgsp2Mtp3ErrorsTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgsp2Mtp3ErrorsTableEntry.setDescription('A list of attributes used to provide a summary of the various MTP3 errors encountered by the device.')
cgsp2Mtp3ErrorsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cgsp2Mtp3ErrorsType.setStatus('current')
if mibBuilder.loadTexts: cgsp2Mtp3ErrorsType.setDescription('This object specifies the index for the various error types.')
cgsp2Mtp3ErrorsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 4, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2Mtp3ErrorsDescription.setStatus('current')
if mibBuilder.loadTexts: cgsp2Mtp3ErrorsDescription.setDescription('A brief description of the MTP3 error in text format.')
cgsp2Mtp3ErrorsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 4, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2Mtp3ErrorsCount.setStatus('current')
if mibBuilder.loadTexts: cgsp2Mtp3ErrorsCount.setDescription('Number of errors encountered for this type of MTP3 error as described in cgsp2Mtp3ErrorsDescription object.')
cgsp2ContextTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 6, 1), )
if mibBuilder.loadTexts: cgsp2ContextTable.setStatus('current')
if mibBuilder.loadTexts: cgsp2ContextTable.setDescription('DCS(Data Collector Server) use ContextId as index to get additional information about the resource being monitoring. This table provides informations used to identify the resource(link or ASP).')
cgsp2ContextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-ITP-GSP2-MIB", "cgsp2ContextIdentifier"))
if mibBuilder.loadTexts: cgsp2ContextEntry.setStatus('current')
if mibBuilder.loadTexts: cgsp2ContextEntry.setDescription('Each entry (conceptual row) represents a resource(Link or ASP) that can be monitored by the the Probeless Monitor Feature. Each are added to deleted from this table as Link and ASP are configured.')
cgsp2ContextIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 6, 1, 1, 1), CItpTcContextId())
if mibBuilder.loadTexts: cgsp2ContextIdentifier.setStatus('current')
if mibBuilder.loadTexts: cgsp2ContextIdentifier.setDescription('The unique Id for LINK or ASP to Application')
cgsp2ContextType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 6, 1, 1, 2), CItpTcContextType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2ContextType.setStatus('current')
if mibBuilder.loadTexts: cgsp2ContextType.setDescription('This object indicate the type of resource Link or ASP.')
cgsp2ContextLinksetName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 6, 1, 1, 3), CItpTcLinksetId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2ContextLinksetName.setStatus('current')
if mibBuilder.loadTexts: cgsp2ContextLinksetName.setDescription('The name of the Linkset in which the link is configured and this object only applies when the cgsp2ContextType indicates the resource is a Link.')
cgsp2ContextSlc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 6, 1, 1, 4), CItpTcLinkSLC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2ContextSlc.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signalling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cgsp2ContextSlc.setStatus('current')
if mibBuilder.loadTexts: cgsp2ContextSlc.setDescription('The Signalling Link Code for this link.This object only applies when the cgsp2ContextType indicates the resource is an Link.')
cgsp2ContextAsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 6, 1, 1, 5), CItpTcXuaName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2ContextAsName.setStatus('current')
if mibBuilder.loadTexts: cgsp2ContextAsName.setDescription('The Aplication server name.This object only applies when the cgsp2ContextType indicates the resource is an ASP.')
cgsp2ContextAspName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 6, 1, 1, 6), CItpTcXuaName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2ContextAspName.setStatus('current')
if mibBuilder.loadTexts: cgsp2ContextAspName.setDescription('The Application Server Process Name.This object only applies when the cgsp2ContextType indicates the resource is an ASP.')
cgsp2ContextNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 6, 1, 1, 7), CItpTcNetworkName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2ContextNetworkName.setStatus('current')
if mibBuilder.loadTexts: cgsp2ContextNetworkName.setDescription('The Network name configure for the instance in ITP')
cgsp2OperMtp3Offload = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("offload", 2))).clone('main')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2OperMtp3Offload.setStatus('current')
if mibBuilder.loadTexts: cgsp2OperMtp3Offload.setDescription("Indicates location of MTP3 management function as follows. 'main' - MTP3 Management function operates only on main processor. 'offload' - MTP3 Management function operates on main processor and other available processors.")
cgsp2OperRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 332, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("distributed", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgsp2OperRedundancy.setStatus('current')
if mibBuilder.loadTexts: cgsp2OperRedundancy.setDescription("The redundancy capability of devices for signalling points defined on this device as follows. 'none' - Device is not configured to support redundancy features. 'local' - Device provides redundancy by using backup processor on same device. 'distributed' - Device provides redundancy by using processors on two or more different physical device.")
ciscoGsp2MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 332, 2, 1))
ciscoGsp2MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 332, 2, 2))
ciscoGsp2MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 332, 2, 1, 1)).setObjects(("CISCO-ITP-GSP2-MIB", "ciscoGsp2EventsGroup"), ("CISCO-ITP-GSP2-MIB", "ciscoGsp2QosGroup"), ("CISCO-ITP-GSP2-MIB", "ciscoGsp2LocalPeerGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGsp2MIBCompliance = ciscoGsp2MIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoGsp2MIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-ITP-GSP2-MIB.my MIB')
ciscoGsp2MIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 332, 2, 1, 2)).setObjects(("CISCO-ITP-GSP2-MIB", "ciscoGsp2EventsGroup"), ("CISCO-ITP-GSP2-MIB", "ciscoGsp2QosGroup"), ("CISCO-ITP-GSP2-MIB", "ciscoGsp2LocalPeerGroup"), ("CISCO-ITP-GSP2-MIB", "ciscoGsp2Mtp3ErrorsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGsp2MIBComplianceRev1 = ciscoGsp2MIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoGsp2MIBComplianceRev1.setDescription('The compliance statement for entities which implement the CISCO-ITP-GSP2-MIB.my MIB')
ciscoGsp2MIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 332, 2, 1, 3)).setObjects(("CISCO-ITP-GSP2-MIB", "ciscoGsp2EventsGroup"), ("CISCO-ITP-GSP2-MIB", "ciscoGsp2QosGroup"), ("CISCO-ITP-GSP2-MIB", "ciscoGsp2LocalPeerGroup"), ("CISCO-ITP-GSP2-MIB", "ciscoGsp2Mtp3ErrorsGroup"), ("CISCO-ITP-GSP2-MIB", "ciscoGsp2OperationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGsp2MIBComplianceRev2 = ciscoGsp2MIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoGsp2MIBComplianceRev2.setDescription('The compliance statement for entities which implement the CISCO-ITP-GSP2-MIB.my MIB')
ciscoGsp2MIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 332, 2, 1, 4)).setObjects(("CISCO-ITP-GSP2-MIB", "ciscoGsp2EventsGroup"), ("CISCO-ITP-GSP2-MIB", "ciscoGsp2QosGroup"), ("CISCO-ITP-GSP2-MIB", "ciscoGsp2Mtp3ErrorsGroup"), ("CISCO-ITP-GSP2-MIB", "ciscoGsp2OperationGroup"), ("CISCO-ITP-GSP2-MIB", "ciscoGsp2LocalPeerGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGsp2MIBComplianceRev3 = ciscoGsp2MIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoGsp2MIBComplianceRev3.setDescription('The compliance statement for entities which implement the CISCO-ITP-GSP2-MIB.my MIB')
ciscoGsp2MIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 332, 2, 1, 5)).setObjects(("CISCO-ITP-GSP2-MIB", "ciscoGsp2EventsGroup"), ("CISCO-ITP-GSP2-MIB", "ciscoGsp2QosGroup"), ("CISCO-ITP-GSP2-MIB", "ciscoGsp2LocalPeerGroup"), ("CISCO-ITP-GSP2-MIB", "ciscoGsp2Mtp3ErrorsGroup"), ("CISCO-ITP-GSP2-MIB", "ciscoGsp2OperationGroup"), ("CISCO-ITP-GSP2-MIB", "ciscoGsp2LocalPeerGroupSup1"), ("CISCO-ITP-GSP2-MIB", "ciscoGsp2ContextGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGsp2MIBComplianceRev4 = ciscoGsp2MIBComplianceRev4.setStatus('current')
if mibBuilder.loadTexts: ciscoGsp2MIBComplianceRev4.setDescription('The compliance statement for entities which implement the CISCO-ITP-GSP2-MIB.my MIB')
ciscoGsp2EventsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 332, 2, 2, 1)).setObjects(("CISCO-ITP-GSP2-MIB", "cgsp2EventLoggedEvents"), ("CISCO-ITP-GSP2-MIB", "cgsp2EventDroppedEvents"), ("CISCO-ITP-GSP2-MIB", "cgsp2EventMaxEntries"), ("CISCO-ITP-GSP2-MIB", "cgsp2EventMaxEntriesAllowed"), ("CISCO-ITP-GSP2-MIB", "cgsp2EventMtp3Text"), ("CISCO-ITP-GSP2-MIB", "cgsp2EventMtp3Timestamp"), ("CISCO-ITP-GSP2-MIB", "cgsp2EventAsText"), ("CISCO-ITP-GSP2-MIB", "cgsp2EventAsTimestamp"), ("CISCO-ITP-GSP2-MIB", "cgsp2EventAspText"), ("CISCO-ITP-GSP2-MIB", "cgsp2EventAspTimestamp"), ("CISCO-ITP-GSP2-MIB", "cgsp2EventPcText"), ("CISCO-ITP-GSP2-MIB", "cgsp2EventPcTimestamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGsp2EventsGroup = ciscoGsp2EventsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGsp2EventsGroup.setDescription('SS7 Event objects.')
ciscoGsp2QosGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 332, 2, 2, 2)).setObjects(("CISCO-ITP-GSP2-MIB", "cgsp2QosType"), ("CISCO-ITP-GSP2-MIB", "cgsp2QosPrecedenceValue"), ("CISCO-ITP-GSP2-MIB", "cgsp2QosIpDscp"), ("CISCO-ITP-GSP2-MIB", "cgsp2QosAclId"), ("CISCO-ITP-GSP2-MIB", "cgsp2QosRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGsp2QosGroup = ciscoGsp2QosGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGsp2QosGroup.setDescription('SS7 Quality of Service objects.')
ciscoGsp2LocalPeerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 332, 2, 2, 3)).setObjects(("CISCO-ITP-GSP2-MIB", "cgsp2LocalPeerSlotNumber"), ("CISCO-ITP-GSP2-MIB", "cgsp2LocalPeerRowStatus"), ("CISCO-ITP-GSP2-MIB", "cgsp2LpIpAddressType"), ("CISCO-ITP-GSP2-MIB", "cgsp2LpIpAddress"), ("CISCO-ITP-GSP2-MIB", "cgsp2LpIpAddressRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGsp2LocalPeerGroup = ciscoGsp2LocalPeerGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGsp2LocalPeerGroup.setDescription('SS7 Local Peer objects.')
ciscoGsp2Mtp3ErrorsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 332, 2, 2, 4)).setObjects(("CISCO-ITP-GSP2-MIB", "cgsp2Mtp3ErrorsDescription"), ("CISCO-ITP-GSP2-MIB", "cgsp2Mtp3ErrorsCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGsp2Mtp3ErrorsGroup = ciscoGsp2Mtp3ErrorsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGsp2Mtp3ErrorsGroup.setDescription('SS7 MTP3 Error objects.')
ciscoGsp2OperationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 332, 2, 2, 5)).setObjects(("CISCO-ITP-GSP2-MIB", "cgsp2OperMtp3Offload"), ("CISCO-ITP-GSP2-MIB", "cgsp2OperRedundancy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGsp2OperationGroup = ciscoGsp2OperationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGsp2OperationGroup.setDescription('SS7 operation redundancy objects.')
ciscoGsp2LocalPeerGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 332, 2, 2, 6)).setObjects(("CISCO-ITP-GSP2-MIB", "cgsp2LocalPeerProcessorNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGsp2LocalPeerGroupSup1 = ciscoGsp2LocalPeerGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoGsp2LocalPeerGroupSup1.setDescription('SS7 Local Peer supplemental object to ciscoGsp2LocalPeerGroup.')
ciscoGsp2ContextGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 332, 2, 2, 7)).setObjects(("CISCO-ITP-GSP2-MIB", "cgsp2ContextType"), ("CISCO-ITP-GSP2-MIB", "cgsp2ContextLinksetName"), ("CISCO-ITP-GSP2-MIB", "cgsp2ContextSlc"), ("CISCO-ITP-GSP2-MIB", "cgsp2ContextAsName"), ("CISCO-ITP-GSP2-MIB", "cgsp2ContextAspName"), ("CISCO-ITP-GSP2-MIB", "cgsp2ContextNetworkName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGsp2ContextGroup = ciscoGsp2ContextGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGsp2ContextGroup.setDescription('ContextTable object to ciscoGsp2ContextGroup.')
mibBuilder.exportSymbols("CISCO-ITP-GSP2-MIB", cgsp2EventMtp3Timestamp=cgsp2EventMtp3Timestamp, cgsp2QosAclId=cgsp2QosAclId, cgsp2OperRedundancy=cgsp2OperRedundancy, cgsp2Events=cgsp2Events, CItpTcContextId=CItpTcContextId, cgsp2LocalPeerPort=cgsp2LocalPeerPort, cgsp2Context=cgsp2Context, ciscoGsp2Mtp3ErrorsGroup=ciscoGsp2Mtp3ErrorsGroup, cgsp2ContextAspName=cgsp2ContextAspName, cgsp2QosType=cgsp2QosType, cgsp2EventAspTableEntry=cgsp2EventAspTableEntry, cgsp2QosIpDscp=cgsp2QosIpDscp, cgsp2ContextLinksetName=cgsp2ContextLinksetName, cgsp2Qos=cgsp2Qos, cgsp2LocalPeerTable=cgsp2LocalPeerTable, cgsp2EventAsName=cgsp2EventAsName, cgsp2EventMtp3Text=cgsp2EventMtp3Text, ciscoGsp2MIB=ciscoGsp2MIB, cgsp2LocalPeerProcessorNumber=cgsp2LocalPeerProcessorNumber, ciscoGsp2MIBCompliances=ciscoGsp2MIBCompliances, cgsp2ContextTable=cgsp2ContextTable, cgsp2LpIpAddressNumber=cgsp2LpIpAddressNumber, cgsp2Mtp3ErrorsType=cgsp2Mtp3ErrorsType, ciscoGsp2MIBComplianceRev4=ciscoGsp2MIBComplianceRev4, cgsp2EventMtp3Table=cgsp2EventMtp3Table, cgsp2EventPcIndex=cgsp2EventPcIndex, cgsp2EventTableEntry=cgsp2EventTableEntry, cgsp2EventMaxEntriesAllowed=cgsp2EventMaxEntriesAllowed, cgsp2ContextNetworkName=cgsp2ContextNetworkName, cgsp2LpIpAddressRowStatus=cgsp2LpIpAddressRowStatus, cgsp2EventAspTimestamp=cgsp2EventAspTimestamp, ciscoGsp2MIBNotifs=ciscoGsp2MIBNotifs, cgsp2EventDroppedEvents=cgsp2EventDroppedEvents, cgsp2OperMtp3Offload=cgsp2OperMtp3Offload, cgsp2EventAsTableEntry=cgsp2EventAsTableEntry, cgsp2EventAsIndex=cgsp2EventAsIndex, cgsp2QosTable=cgsp2QosTable, ciscoGsp2MIBGroups=ciscoGsp2MIBGroups, cgsp2EventAsTable=cgsp2EventAsTable, cgsp2Mtp3ErrorsTableEntry=cgsp2Mtp3ErrorsTableEntry, cgsp2LpIpAddress=cgsp2LpIpAddress, Cgsp2EventIndex=Cgsp2EventIndex, cgsp2EventAspText=cgsp2EventAspText, ciscoGsp2LocalPeerGroup=ciscoGsp2LocalPeerGroup, cgsp2ContextEntry=cgsp2ContextEntry, cgsp2EventTable=cgsp2EventTable, cgsp2ContextSlc=cgsp2ContextSlc, cgsp2QosPrecedenceValue=cgsp2QosPrecedenceValue, cgsp2EventAsTimestamp=cgsp2EventAsTimestamp, cgsp2EventAspName=cgsp2EventAspName, cgsp2ContextIdentifier=cgsp2ContextIdentifier, cgsp2EventMtp3TableEntry=cgsp2EventMtp3TableEntry, ciscoGsp2MIBComplianceRev3=ciscoGsp2MIBComplianceRev3, cgsp2LocalPeer=cgsp2LocalPeer, ciscoGsp2LocalPeerGroupSup1=ciscoGsp2LocalPeerGroupSup1, cgsp2EventPcTable=cgsp2EventPcTable, cgsp2Mtp3Errors=cgsp2Mtp3Errors, cgsp2EventMtp3Index=cgsp2EventMtp3Index, cgsp2EventLoggedEvents=cgsp2EventLoggedEvents, cgsp2EventType=cgsp2EventType, ciscoGsp2MIBComplianceRev2=ciscoGsp2MIBComplianceRev2, cgsp2EventAspIndex=cgsp2EventAspIndex, ciscoGsp2EventsGroup=ciscoGsp2EventsGroup, cgsp2Mtp3ErrorsCount=cgsp2Mtp3ErrorsCount, cgsp2ContextType=cgsp2ContextType, cgsp2LocalPeerTableEntry=cgsp2LocalPeerTableEntry, cgsp2Operation=cgsp2Operation, PYSNMP_MODULE_ID=ciscoGsp2MIB, ciscoGsp2MIBCompliance=ciscoGsp2MIBCompliance, cgsp2EventPcText=cgsp2EventPcText, CItpTcContextType=CItpTcContextType, cgsp2EventMaxEntries=cgsp2EventMaxEntries, cgsp2EventPcTableEntry=cgsp2EventPcTableEntry, cgsp2QosClass=cgsp2QosClass, cgsp2LpIpAddrTableEntry=cgsp2LpIpAddrTableEntry, cgsp2QosRowStatus=cgsp2QosRowStatus, cgsp2Mtp3ErrorsTable=cgsp2Mtp3ErrorsTable, cgsp2EventAsText=cgsp2EventAsText, cgsp2QosTableEntry=cgsp2QosTableEntry, Cgsp2TcQosClass=Cgsp2TcQosClass, cgsp2LpIpAddrTable=cgsp2LpIpAddrTable, cgsp2LpIpAddressType=cgsp2LpIpAddressType, cgsp2EventAspTable=cgsp2EventAspTable, cgsp2ContextAsName=cgsp2ContextAsName, cgsp2Mtp3ErrorsDescription=cgsp2Mtp3ErrorsDescription, ciscoGsp2MIBComplianceRev1=ciscoGsp2MIBComplianceRev1, cgsp2LocalPeerRowStatus=cgsp2LocalPeerRowStatus, cgsp2EventPcTimestamp=cgsp2EventPcTimestamp, ciscoGsp2MIBObjects=ciscoGsp2MIBObjects, cgsp2LocalPeerSlotNumber=cgsp2LocalPeerSlotNumber, ciscoGsp2ContextGroup=ciscoGsp2ContextGroup, ciscoGsp2MIBConform=ciscoGsp2MIBConform, ciscoGsp2QosGroup=ciscoGsp2QosGroup, ciscoGsp2OperationGroup=ciscoGsp2OperationGroup, cgsp2EventPc=cgsp2EventPc)
