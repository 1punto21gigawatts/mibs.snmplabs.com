#
# PySNMP MIB module TPLINK-ARP-DETECTION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPLINK-ARP-DETECTION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:24:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Unsigned32, Gauge32, Counter32, Bits, Integer32, TimeTicks, ModuleIdentity, ObjectIdentity, iso, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "Gauge32", "Counter32", "Bits", "Integer32", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "iso", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tplinkArpInspectionMIBObjects, = mibBuilder.importSymbols("TPLINK-ARP-INSPECTION-MIB", "tplinkArpInspectionMIBObjects")
tpArpDetection = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 28, 1, 1))
tpArpDetectionConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 28, 1, 1, 1))
tpArpDetectionStat = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 28, 1, 1, 2))
tpArpDetectionConfigEnable = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 28, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpArpDetectionConfigEnable.setStatus('current')
if mibBuilder.loadTexts: tpArpDetectionConfigEnable.setDescription('0. disable 1. enable Enable/Disable the ARP Detect function.')
tpArpDetectionTrustPortTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 28, 1, 1, 1, 2), )
if mibBuilder.loadTexts: tpArpDetectionTrustPortTable.setStatus('current')
if mibBuilder.loadTexts: tpArpDetectionTrustPortTable.setDescription('A list of trusted port config entries. Here you can configure the Trusted Port.')
tpArpDetectionTrustPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 28, 1, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tpArpDetectionTrustPortEntry.setStatus('current')
if mibBuilder.loadTexts: tpArpDetectionTrustPortEntry.setDescription('An entry contains of the information of arp defend trust port.')
tpArpDetectionTrustPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 28, 1, 1, 1, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpArpDetectionTrustPort.setStatus('current')
if mibBuilder.loadTexts: tpArpDetectionTrustPort.setDescription('The port for which the ARP Detect function is unnecessary as the Trusted Port. The specific ports, such as up-linked port, routing port and LAG port, should be set as Trusted Port. To ensure the normal communication of the switch, please configure the ARP Trusted Port before enabling the ARP Detect function. ')
tpArpDetectionTrustPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 28, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("trustful", 1), ("untrusty", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpArpDetectionTrustPortState.setStatus('current')
if mibBuilder.loadTexts: tpArpDetectionTrustPortState.setDescription('0. untrusty port 1. trustful port')
tpArpDetectionTrustPortLag = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 28, 1, 1, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpArpDetectionTrustPortLag.setStatus('current')
if mibBuilder.loadTexts: tpArpDetectionTrustPortLag.setDescription('the lag the port belong to')
tpArpDetectionStatReset = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 28, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notReset", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpArpDetectionStatReset.setStatus('current')
if mibBuilder.loadTexts: tpArpDetectionStatReset.setDescription('0. notReset 1. reset clear the statistics')
tpArpDetectionStatTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 28, 1, 1, 2, 2), )
if mibBuilder.loadTexts: tpArpDetectionStatTable.setStatus('current')
if mibBuilder.loadTexts: tpArpDetectionStatTable.setDescription('A list of arp detection Stat entries. Here you can view the statistics of the illegal ARP packets received by each port.')
tpArpDetectionStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 28, 1, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tpArpDetectionStatEntry.setStatus('current')
if mibBuilder.loadTexts: tpArpDetectionStatEntry.setDescription('An entry contains of the information of arp defend nonlegal pkt.')
tpArpDetectionStatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 28, 1, 1, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpArpDetectionStatPort.setStatus('current')
if mibBuilder.loadTexts: tpArpDetectionStatPort.setDescription('port number')
tpArpDetectionStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 28, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("trustful", 1), ("untrusty", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpArpDetectionStatState.setStatus('current')
if mibBuilder.loadTexts: tpArpDetectionStatState.setDescription('0. untrusty port 1. trustful port')
tpArpDetectionStatNonLegalPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 28, 1, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpArpDetectionStatNonLegalPkt.setStatus('current')
if mibBuilder.loadTexts: tpArpDetectionStatNonLegalPkt.setDescription('Displays the number of the received illegal ARP packets.')
mibBuilder.exportSymbols("TPLINK-ARP-DETECTION-MIB", tpArpDetectionStat=tpArpDetectionStat, tpArpDetectionStatState=tpArpDetectionStatState, tpArpDetectionStatEntry=tpArpDetectionStatEntry, tpArpDetectionStatTable=tpArpDetectionStatTable, tpArpDetectionStatPort=tpArpDetectionStatPort, tpArpDetectionTrustPortState=tpArpDetectionTrustPortState, tpArpDetectionConfig=tpArpDetectionConfig, tpArpDetectionStatNonLegalPkt=tpArpDetectionStatNonLegalPkt, tpArpDetectionTrustPortEntry=tpArpDetectionTrustPortEntry, tpArpDetectionTrustPort=tpArpDetectionTrustPort, tpArpDetectionConfigEnable=tpArpDetectionConfigEnable, tpArpDetectionStatReset=tpArpDetectionStatReset, tpArpDetectionTrustPortTable=tpArpDetectionTrustPortTable, tpArpDetectionTrustPortLag=tpArpDetectionTrustPortLag, tpArpDetection=tpArpDetection)
