#
# PySNMP MIB module ZHNVOICE (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHNVOICE
# Produced by pysmi-0.3.4 at Wed May  1 15:46:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, IpAddress, iso, ModuleIdentity, Gauge32, TimeTicks, Bits, NotificationType, Counter64, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "IpAddress", "iso", "ModuleIdentity", "Gauge32", "TimeTicks", "Bits", "NotificationType", "Counter64", "Unsigned32", "Counter32")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
zhoneWtn, = mibBuilder.importSymbols("Zhone", "zhoneWtn")
ZhoneRowStatus, = mibBuilder.importSymbols("Zhone-TC", "ZhoneRowStatus")
zhnVoice = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40))
zhnVoice.setRevisions(('2010-04-01 00:00', '2011-02-24 00:00', '2011-10-28 00:00', '2012-01-26 12:00', '2012-04-18 12:00', '2012-05-16 12:00', '2012-07-23 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhnVoice.setRevisionsDescriptions(('First Draft', 'Second Draft', 'Added Voice Registration Up/Down Notifications', 'Added: voiceProfileMGCPAddressMode voiceProfileSIPAddressMode voiceProfileSwitchType voiceProfileSIPInterdigitTimeout voiceProfileLineStatsTable ', 'Removed voiceProfileLineStatsOutgoingCallsReceived object from voiceProfileLineStatsEntry.', 'Removed comma in the end of the last line of the enum definitions.', 'Removed comma in the end of the last line of the enum definitions.',))
if mibBuilder.loadTexts: zhnVoice.setLastUpdated('201207231200Z')
if mibBuilder.loadTexts: zhnVoice.setOrganization('Zhone Technologies, Inc.')
if mibBuilder.loadTexts: zhnVoice.setContactInfo('Zhone Technologies, Inc. Florida Design Center 8545 126th Avenue North Largo, FL 33773 Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com')
if mibBuilder.loadTexts: zhnVoice.setDescription('This file defines the private Enterprise MIB extensions that define voice related objects supported by the Zhone VoIP CPEs. ')
class VoiceProfileLineStateType(TextualConvention, OctetString):
    description = 'Voice Profile line state for all lines in a profile. Enumeration of: Disabled Quiescent Enabled '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class DTMFMethodValues(TextualConvention, OctetString):
    description = 'DTMF Method values. Enumeration of: InBand Rfc2833 SipInfo '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class HookFlashMethodValues(TextualConvention, OctetString):
    description = 'Hook Flash Method values. Enumeration of: None SipInfo '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class RegionValues(TextualConvention, OctetString):
    description = 'Region values. Enumeration of: AUS -- AUSTRALIA BEL -- BELGIUM BRA -- BRAZIL CHL -- CHILE CHN -- CHINA CZH -- CZECH DNK -- DENMARK ETS -- ETSI FIN -- FINLAND FRA -- FRANCE DEU -- GERMANY HUN -- HUNGARY IND -- INDIA ITA -- ITALY JPN -- JAPAN MEX -- MEXICO RUS -- RUSSIA NLD -- NETHERLANDS NZL -- NEW_ZEALAND USA -- NORTH_AMERICA U45 -- NORTH_AMERICA 45 Vrms Ringing U95 -- NORTH_AMERICA 95 Vrms Ringing ULS -- NORTH_AMERICA Long Stutter URS -- NORTH_AMERICA 95 Vrms Regular Stutter POL -- POLAND ESP -- SPAIN SWE -- SWEDEN NOR -- NORWAY CHE -- SWITZERLAND T57 -- TR57 GBR -- UK TWN -- TAIWAN UAE -- UNITED ARAB EMIRATES '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class VoiceTransportValues(TextualConvention, OctetString):
    description = 'Transport protocol to be used in connecting to the SIP server. Enumeration of: UDP TCP TLS SCTP '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class VoiceLineStatusValues(TextualConvention, OctetString):
    description = 'Current status of a voice line. Enumeration of: Up Initializing Registering Unregistering Error Testing Quiescent Disabled '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class VoiceLineCallStateValues(TextualConvention, OctetString):
    description = 'Current call state for a voice line. Enumeration of: Idle Calling Ringing Connecting InCall Hold Disconnecting '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class VoiceProfileAddressModes(TextualConvention, Integer32):
    description = 'MGCP Client Name addressing mode. Enumeration of: ip(1) ipBracketed(2) domainName(3) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ip", 1), ("ipBracketed", 2), ("domainName", 3))

class VoiceProfileSwitchTypes(TextualConvention, Integer32):
    description = 'VoIP Switch type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 99))
    namedValues = NamedValues(("broadSoft", 1), ("cirpack", 2), ("genband", 3), ("metaSwitch", 4), ("nortel", 5), ("networkOnly", 6), ("taqua", 7), ("softX3000", 8), ("axtelCS2K", 9), ("copperCom", 10), ("openSer", 11), ("utStarCom", 12), ("ericsson", 13), ("unknown", 99))

zhnVoiceNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 0))
voiceRegistrationUp = NotificationType((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 0, 1))
if mibBuilder.loadTexts: voiceRegistrationUp.setStatus('current')
if mibBuilder.loadTexts: voiceRegistrationUp.setDescription('This notification is generated when the Voice Client has successfully registered with the configured Call Agent.')
voiceRegistrationDown = NotificationType((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 0, 2))
if mibBuilder.loadTexts: voiceRegistrationDown.setStatus('current')
if mibBuilder.loadTexts: voiceRegistrationDown.setDescription('This notification is generated when the Voice Client registration with the configured Call Agent fails.')
zhnVoiceServiceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1))
voiceServiceTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 1), )
if mibBuilder.loadTexts: voiceServiceTable.setStatus('current')
if mibBuilder.loadTexts: voiceServiceTable.setDescription('Table of voice services, including voice profiles, capabilities, and physical interfaces')
voiceServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 1, 1), ).setIndexNames((0, "ZHNVOICE", "voiceServiceIndex"))
if mibBuilder.loadTexts: voiceServiceEntry.setStatus('current')
if mibBuilder.loadTexts: voiceServiceEntry.setDescription('Table of voice services including voice profiles, capabilities, and physical interfaces')
voiceProfileNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: voiceProfileNumberOfEntries.setDescription('Voice Service Index')
voiceBoundIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceBoundIfName.setStatus('current')
if mibBuilder.loadTexts: voiceBoundIfName.setDescription('Name of the network interface that the voice service should run on. For example, brvlan300.')
voiceBoundIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceBoundIpAddr.setStatus('current')
if mibBuilder.loadTexts: voiceBoundIpAddr.setDescription('IP address of the network interface that the bound interface is configured for.')
voiceServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceServiceIndex.setStatus('current')
if mibBuilder.loadTexts: voiceServiceIndex.setDescription('Voice Service Index')
capabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2))
capabilitiesTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1), )
if mibBuilder.loadTexts: capabilitiesTable.setStatus('current')
if mibBuilder.loadTexts: capabilitiesTable.setDescription('Table of voice service capabilities ')
capabilitiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1), ).setIndexNames((0, "ZHNVOICE", "voiceServiceIndex"))
if mibBuilder.loadTexts: capabilitiesEntry.setStatus('current')
if mibBuilder.loadTexts: capabilitiesEntry.setDescription('Table of voice service capabilities')
maxProfileCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxProfileCount.setStatus('current')
if mibBuilder.loadTexts: maxProfileCount.setDescription('Maximum total number of distinct voice profiles supported.')
maxLineCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxLineCount.setStatus('current')
if mibBuilder.loadTexts: maxLineCount.setDescription('Maximum total number of lines supported across all profiles. This parameter is applicable only for a VoIP endpoint.')
maxSessionsPerLine = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxSessionsPerLine.setStatus('current')
if mibBuilder.loadTexts: maxSessionsPerLine.setDescription('Maximum number of voice sessions supported for any given line across all profiles. A value greater than one indicates support for CPE provided conference calling. This parameter is applicable only for a VoIP endpoint.')
maxSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxSessionCount.setStatus('current')
if mibBuilder.loadTexts: maxSessionCount.setDescription('Maximum total number of voice sessions supported across all lines and profiles. This might differ from MaxLineCount if each line can support more than one session for CPE provided conference calling. This value MAY be less than the product of maxLineCount and maxSessionsPerLine.')
signalingProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalingProtocols.setStatus('current')
if mibBuilder.loadTexts: signalingProtocols.setDescription('Comma-separated list of signaling protocols supported. Each item is an enumeration of: SIP MGCP MGCP-NCS H.248 H.323 Each entry MAY be appended with a version indicator in the form protocol/X.Y. For example: SIP/2.0')
regions = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: regions.setStatus('current')
if mibBuilder.loadTexts: regions.setDescription('Comma-separated list of geographic regions supported by the CPE. Each item in the list MUST be an alpha-2 (two-character alphabetic) country code as specified by ISO 3166. An empty list indicates that the CPE does not support region-based customization via the Region parameter in the VoiceService.{i}.VoiceProfile.{i} object.')
rtcp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcp.setStatus('current')
if mibBuilder.loadTexts: rtcp.setDescription('Support for RTCP. A true value indicates support for the object VoiceService.{i}.VoiceProfile.{i}.RTP.RTCP. This parameter is applicable only for a VoIP endpoint.')
srtp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srtp.setStatus('current')
if mibBuilder.loadTexts: srtp.setDescription('Support for SRTP. A true value indicates support for the object VoiceService.{i}.VoiceProfile.{i}.RTP.SRTP. This parameter is applicable only for a VoIP endpoint.')
rtpRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtpRedundancy.setStatus('current')
if mibBuilder.loadTexts: rtpRedundancy.setDescription('Support for RTP payload redundancy as defined in RFC 2198. A true value indicates support for VoiceService.{i}.VoiceProfile.{i}.RTP.Redundancy. This parameter is applicable only for a VoIP endpoint.')
dscpCoupled = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dscpCoupled.setStatus('current')
if mibBuilder.loadTexts: dscpCoupled.setDescription('A true value indicates that the CPE is constrained such that transmitted call control packets use the same DSCP marking as transmitted RTP packets. If the value is true, the CPE MUST NOT support the DSCPMark parameter for call control. This parameter is applicable only for a VoIP endpoint.')
ethernetTaggingCoupled = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetTaggingCoupled.setStatus('current')
if mibBuilder.loadTexts: ethernetTaggingCoupled.setDescription('A true value indicates that the CPE is constrained such that transmitted call control packets use the same Ethernet tagging (VLAN ID Ethernet Priority) as transmitted RTP packets. If the value is true, the CPE MUST NOT support the VLANIDMark or EthernetPriorityMark parameters within a call control object (e.g., SIP, MGCP, or H323). This parameter is applicable only for a VoIP endpoint.')
pstnSoftSwitchOver = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pstnSoftSwitchOver.setStatus('current')
if mibBuilder.loadTexts: pstnSoftSwitchOver.setDescription('A true value indicates the CPE is capable of supporting the PSO_Activate Facility Action, which allows a call to be switched to a PSTN FXO (Foreign eXchange Office) line. This parameter is applicable only for a VoIP endpoint.')
faxT38 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxT38.setStatus('current')
if mibBuilder.loadTexts: faxT38.setDescription('Support for T.38 fax. A true value indicates support for the object VoiceService.{i}.VoiceProfile.{i}.FaxT38. This parameter is applicable only for a VoIP endpoint.')
faxPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxPassThrough.setStatus('current')
if mibBuilder.loadTexts: faxPassThrough.setDescription('Support for fax pass-through. A true value indicates support for the parameter VoiceService.{i}.VoiceProfile.{i}.FaxPassThrough. This parameter is applicable only for a VoIP endpoint.')
modemPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemPassThrough.setStatus('current')
if mibBuilder.loadTexts: modemPassThrough.setDescription('Support for modem pass-through. A true value indicates support for the parameter VoiceService.{i}.VoiceProfile.{i}.ModemPassThrough. This parameter is applicable only for a VoIP endpoint.')
toneGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: toneGeneration.setStatus('current')
if mibBuilder.loadTexts: toneGeneration.setDescription('Support for tone generation. A true value indicates support for the object VoiceService.{i}.VoiceProfile.{i}.Tone. A true value also indicates that the ToneDescriptionsEditable, PatternBasedToneGeneration, and FileBasedToneGeneration parameters in this object are present. This parameter is applicable only for a VoIP endpoint.')
ringGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringGeneration.setStatus('current')
if mibBuilder.loadTexts: ringGeneration.setDescription('Support for ring generation. A true value indicates support for control of ring generation via the VoiceService.{i}.VoiceProfile.{i}.Line.{i}.Ringer object. A true value also indicates that the RingDescriptionsEditable, PatternBasedRingGeneration, and FileBasedRingGeneration parameters in this object are present. This parameter is applicable only for a VoIP endpoint.')
digitMapCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitMapCapabilities.setStatus('current')
if mibBuilder.loadTexts: digitMapCapabilities.setDescription('Support for a configurable digit map string. A true value indicates full support for the VoiceService.{i}.VoiceProfile.{i}.DigitMap parameter.')
numberingPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberingPlan.setStatus('current')
if mibBuilder.loadTexts: numberingPlan.setDescription('Support for a configurable numbering plan. A true value indicates support for a configurable numbering plan via the VoiceService.{i}.VoiceProfile.{i}. NumberingPlan object. This parameter is applicable only for a VoIP endpoint.')
buttonMap = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: buttonMap.setStatus('current')
if mibBuilder.loadTexts: buttonMap.setDescription('Support for a configurable button map. A true value indicates support for a configurable button map via the VoiceService.{i}.VoiceProfile.{i}.ButtonMap NumberingPlan object. This parameter is applicable only for a VoIP endpoint.')
voicePortTests = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 1, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicePortTests.setStatus('current')
if mibBuilder.loadTexts: voicePortTests.setDescription('Support for remotely accessible voice-port tests. A true value indicates support for the VoiceService.{i}.PhyInterface.{i}.Tests object. This parameter is applicable only for a VoIP endpoint.')
capabilitiesSIPTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 2), )
if mibBuilder.loadTexts: capabilitiesSIPTable.setStatus('current')
if mibBuilder.loadTexts: capabilitiesSIPTable.setDescription('Table of SIP-specific capabilities. Applicable only if SIP is among the list of supported protocols.')
capabilitiesSIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 2, 1), ).setIndexNames((0, "ZHNVOICE", "voiceServiceIndex"))
if mibBuilder.loadTexts: capabilitiesSIPEntry.setStatus('current')
if mibBuilder.loadTexts: capabilitiesSIPEntry.setDescription('Table of SIP-specific capabilities. Applicable only if SIP is among the list of supported protocols.')
role = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: role.setStatus('current')
if mibBuilder.loadTexts: role.setDescription('The role of this VoIP CPE. Enumeration of: UserAgent BackToBackUserAgents OutboundProxy. A single VoiceService instance MUST have only one role. If a device includes the capabilities for more than one role, each role MUST be represented as separate VoiceService instance.')
extensionsSIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extensionsSIP.setStatus('current')
if mibBuilder.loadTexts: extensionsSIP.setDescription('Comma-separated list of SIP extension methods supported. SIP extension methods MUST be in the form of the method name in upper case. The list MAY include vendor-specific extensions, which MUST use the format defined in TR-106. Examples: REFER INFO X_EXAMPLE-COM_MyExt ')
transports = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transports.setStatus('current')
if mibBuilder.loadTexts: transports.setDescription('Comma-separated list of SIP transport protocols supported. Each entry is an enumeration of: UDP TCP TLS SCTP The list MAY include vendor-specific transports, which MUST use the format defined in TR-106')
uriSchemes = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uriSchemes.setStatus('current')
if mibBuilder.loadTexts: uriSchemes.setDescription('Comma-separated list of URI schemes supported beyond the URI schemes required by the SIP specification. Each URI scheme is given by the URI prefix, without the colon separator. Example: tel, fax ')
eventSubscription = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventSubscription.setStatus('current')
if mibBuilder.loadTexts: eventSubscription.setDescription('Support for SIP event subscription. A true value indicates support for the VoiceService.{i}.VoiceProfile.{i}.SIP.EventSubscribe and VoiceService.{i}.VoiceProfile.{i}.Line.{i}.SIP.EventSubscribe.{i} objects.')
responseMap = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: responseMap.setStatus('current')
if mibBuilder.loadTexts: responseMap.setDescription('Support for SIP response map. A true value indicates support for the VoiceService.{i}.VoiceProfile.{i}.SIP.ResponseMap object. This parameter is applicable only for a VoIP endpoint.')
tlsKeyExchangeProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsKeyExchangeProtocols.setStatus('current')
if mibBuilder.loadTexts: tlsKeyExchangeProtocols.setDescription('Comma-separated list of authentication protocols supported for TLS transport. Each item listed is an enumeration of: RSA DSS The list MAY include vendor-specific protocols, which MUST use the format defined in TR-106. Support for this parameter is applicable only if the Transports parameter in this object includes the value TLS and the TLSEncryptionProtocols parameter in this object is present and non-empty and includes at least one value other than Null')
capabilitiesMGCPTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 3), )
if mibBuilder.loadTexts: capabilitiesMGCPTable.setStatus('current')
if mibBuilder.loadTexts: capabilitiesMGCPTable.setDescription('Table of MGCP-specific capabilities. Applicable only if MGCP is among the list of supported protocols.')
capabilitiesMGCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 3, 1), ).setIndexNames((0, "ZHNVOICE", "voiceServiceIndex"))
if mibBuilder.loadTexts: capabilitiesMGCPEntry.setStatus('current')
if mibBuilder.loadTexts: capabilitiesMGCPEntry.setDescription('Table of MGCP-specific capabilities. Applicable only if MGCP is among the list of supported protocols.')
extensionsMGCP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extensionsMGCP.setStatus('current')
if mibBuilder.loadTexts: extensionsMGCP.setDescription('Comma-separated list of MGCP extension methods supported. MGCP extension methods MUST be in the form of the method name in upper case. The list MAY include vendor-specific extensions, which MUST use the format defined in TR-106. Examples: REFER INFO X_EXAMPLE-COM_MyExt ')
capabilitiesCodecsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 4), )
if mibBuilder.loadTexts: capabilitiesCodecsTable.setStatus('current')
if mibBuilder.loadTexts: capabilitiesCodecsTable.setDescription('Table to describe the set of supported codecs. Each entry refers to a distinct combination of codec and bit rate. The table MUST include a distinct entry for each supported combination of these parameters. Applicable only for a VoIP endpoint.')
capabilitiesCodecsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 4, 1), ).setIndexNames((0, "ZHNVOICE", "voiceServiceIndex"), (0, "ZHNVOICE", "codecIndex"))
if mibBuilder.loadTexts: capabilitiesCodecsEntry.setStatus('current')
if mibBuilder.loadTexts: capabilitiesCodecsEntry.setDescription('The Codecs Service table MUST include a distinct entry for each supported combination of these parameters.')
codecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: codecIndex.setStatus('current')
if mibBuilder.loadTexts: codecIndex.setDescription('Codecs table index')
entryID = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entryID.setStatus('current')
if mibBuilder.loadTexts: entryID.setDescription('Codecs table index')
codec = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: codec.setStatus('current')
if mibBuilder.loadTexts: codec.setDescription('Identifier of the type of codec. Enumeration of: G.711MuLaw G.711ALaw G.726 G.729 G.729a G.729e G.728 G.723.1 G.722 G.722.1 G.722.2 GSM-FR GSM-HR GSM-EFR iLBC The parameter MAY instead be a vendor-specific codec, which MUST be in the format defined in TR-106. For example: X_EXAMPLE-COM_MyCodec')
bitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitRate.setStatus('current')
if mibBuilder.loadTexts: bitRate.setDescription('Bit rate, in bits per second. The value MUST be among the values appropriate for the specified codec.')
packetizationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: packetizationPeriod.setStatus('current')
if mibBuilder.loadTexts: packetizationPeriod.setDescription('Comma-separate list of supported packetization periods, in milliseconds, or continuous ranges of packetization periods. Ranges are indicated as a hyphen-separated pair of unsigned integers. Examples: 20 indicates a single discrete value 10, 20, 30 indicates a set of discrete values. 5-40 indicates a continuous inclusive range. 5-10, 20, 30 indicates a continuous range in addition to a set of discrete values. A range MUST only be indicated if all values within the range are supported.')
silenceSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 2, 4, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: silenceSuppression.setStatus('current')
if mibBuilder.loadTexts: silenceSuppression.setDescription('Indicates support for silence suppression for this codec.')
voiceProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3))
voiceProfileTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1), )
if mibBuilder.loadTexts: voiceProfileTable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileTable.setDescription('Table of voice profile objects')
voiceProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1), ).setIndexNames((0, "ZHNVOICE", "voiceServiceIndex"), (0, "ZHNVOICE", "voiceProfileIndex"))
if mibBuilder.loadTexts: voiceProfileEntry.setStatus('current')
if mibBuilder.loadTexts: voiceProfileEntry.setDescription('Object associated with a collection of voice lines with common characteristics. By default, a single VoiceProfile object SHOULD be present in a VoiceService, initially in the disabled state.')
voiceProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileIndex.setStatus('current')
if mibBuilder.loadTexts: voiceProfileIndex.setDescription('Voice Profile Index')
voiceProfileEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1, 2), VoiceProfileLineStateType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileEnable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileEnable.setDescription('Enables or disables all lines in this profile, or places it into a quiescent state. Enumeration of: Disabled Quiescent Enabled On creation, a profile MUST be in the Disabled state. In the Quiescent state, in-progress sessions remain intact, but no new sessions are allowed. Support for the Quiescent state in a CPE is optional. If this parameter is set to Quiescent in a CPE that does not support the Quiescent state, it MUST treat it the same as the Disabled state.')
voiceProfileReset = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileReset.setStatus('current')
if mibBuilder.loadTexts: voiceProfileReset.setDescription('When written as true, forces the all lines in this profile to be reset, causing it to re-initialize and perform all start-up actions such as registration. Always False when read.')
voiceProfileNumberOfLines = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileNumberOfLines.setStatus('current')
if mibBuilder.loadTexts: voiceProfileNumberOfLines.setDescription('Number of instances of Line within this VoiceProfile. Applicable only for a VoIP endpoint.')
voiceProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileName.setStatus('current')
if mibBuilder.loadTexts: voiceProfileName.setDescription('Human-readable string to identify the profile instance.')
voiceProfileSignalingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSignalingProtocol.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSignalingProtocol.setDescription('The protocol to be used for this profile. A single protocol selected from among the available protocols indicated in VoiceService.{i}.Capabilities.SignalingProtocols.')
voiceProfileMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileMaxSessions.setStatus('current')
if mibBuilder.loadTexts: voiceProfileMaxSessions.setDescription('Limit on the number of simultaneous voice sessions across all lines in this profile. Must be less than or equal to VoiceService.{i}.Capabilities.MaxSessionCount. (This MAY be greater than the number of lines if each line can support more than one session, for example for CPE provided conference calling.)')
voiceProfileDtmfMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1, 8), DTMFMethodValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileDtmfMethod.setStatus('current')
if mibBuilder.loadTexts: voiceProfileDtmfMethod.setDescription('Method by which DTMF digits MUST be passed. Enumeration of: InBand RFC2833 SIPInfo If the parameter dtmfMethodG711 is non-empty, then this parameter applies only when the current codec is not G.711. The value SIPInfo is applicable only if the SignalingProtocol is SIP. This parameter is applicable only for a VoIP endpoint.')
voiceProfileDtmfMethodG711 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1, 9), DTMFMethodValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileDtmfMethodG711.setStatus('current')
if mibBuilder.loadTexts: voiceProfileDtmfMethodG711.setDescription('Method by which DTMF digits MUST be passed if the current codec is G.711. Enumeration of: InBand RFC2833 SIPInfo An empty value for this parameter indicates that the value of the dtmfMethod parameter is to apply whether or not the current codec is G.711. The value SIPInfo is applicable only if the SignalingProtocol is SIP. This parameter is applicable only for a VoIP endpoint.')
voiceProfileHookFlashMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1, 10), HookFlashMethodValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileHookFlashMethod.setStatus('current')
if mibBuilder.loadTexts: voiceProfileHookFlashMethod.setDescription('This object specifies which hookflash relay method to use. A value of None implies hook flash will be handled locally. A value of SIPInfo implies the hook flash will be sent via the SIP info.')
voiceProfileRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1, 11), RegionValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileRegion.setStatus('current')
if mibBuilder.loadTexts: voiceProfileRegion.setDescription('The geographic region associated with this profile. This MAY be used by the CPE to customize localization settings. The value MUST be either one value selected from among the available regions indicated in VoiceService.{i}.Capabilities.Regions, or MAY be empty. An empty value indicates that the region is unspecified and the CPE SHOULD use default localization settings. This parameter is applicable only if VoiceService.{i}.Capabilities.Regions is non-empty.')
voiceProfileDigitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileDigitMap.setStatus('current')
if mibBuilder.loadTexts: voiceProfileDigitMap.setDescription('Digit map controlling the transmission of dialed digit information. The string defines the criteria to be met as digits are collected before an outgoing request (e.g., a SIP INVITE) can be initiated. The syntax of this parameter is exactly the syntax used by MGCP as defined in RFC3435, section 2.1.5. This parameter is applicable only if the device supports a dialing mechanism for which a dialing plan is needed (for example, a device with an explicit Dial button may not need to be aware of the dialing plan) and if the device does not already support a dialing plan mechanism for this profile (e.g. in-band via MGCP). If this object is supported, the capability VoiceService.{i}.Capabilities.DigitMap MUST be equal to true. Applicable only for a VoIP endpoint.')
voiceProfileDigitMapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileDigitMapEnable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileDigitMapEnable.setDescription('Enables the use of the DigitMap parameter in this object. When enabled, the content of the VoiceService.{i}.VoiceProfile.{i}.NumberingPlan object, if present, MUST be ignored. This parameter is required if and only if both the digitMap object and the VoiceService.{i}.VoiceProfile.{i}.NumberingPlan object are present. Applicable only for a VoIP endpoint.')
voiceProfileStunEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileStunEnable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileStunEnable.setDescription('Enable or disable use of STUN to allow operation through NAT. Note: enabling STUN is to be interpreted as enabling the use of STUN for discovery, not use as a keep-alive mechanism.')
voiceProfileStunServer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileStunServer.setStatus('current')
if mibBuilder.loadTexts: voiceProfileStunServer.setDescription('Domain name or IP address of the STUN server.')
voiceProfileStunServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileStunServerPort.setStatus('current')
if mibBuilder.loadTexts: voiceProfileStunServerPort.setDescription('STUN server port number.')
voiceProfileLogServer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLogServer.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLogServer.setDescription('Domain name or IP address of the Log server.')
voiceProfileLogServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLogServerPort.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLogServerPort.setDescription('Log server port number.')
voiceProfileSpNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSpNum.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSpNum.setDescription('Service Provider number.')
voiceProfileV18Support = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileV18Support.setStatus('current')
if mibBuilder.loadTexts: voiceProfileV18Support.setDescription('Enable or disable v18 support.')
voiceProfileSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 1, 1, 21), VoiceProfileSwitchTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSwitchType.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSwitchType.setDescription('Configure the VoIP Switch Type. Enumeration of: broadSoft(1), cirpack(2), genband(3), metaSwitch(4), nortel(5), networkOnly(6), taqua(7), softX3000(8), axtelCS2K(9), copperCom(10), openSer(11), utStarCom(12), ericsson(13), unknown(99) ')
voiceProfileServiceProviderTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 2), )
if mibBuilder.loadTexts: voiceProfileServiceProviderTable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileServiceProviderTable.setDescription('Table of voice profile service provider objects')
voiceProfileServiceProviderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 2, 1), ).setIndexNames((0, "ZHNVOICE", "voiceServiceIndex"), (0, "ZHNVOICE", "voiceProfileIndex"))
if mibBuilder.loadTexts: voiceProfileServiceProviderEntry.setStatus('current')
if mibBuilder.loadTexts: voiceProfileServiceProviderEntry.setDescription('Service provider objects associated with a specific voice profile.')
voiceProfileServiceProviderName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileServiceProviderName.setStatus('current')
if mibBuilder.loadTexts: voiceProfileServiceProviderName.setDescription('Human-readable string identifying the service provider. ')
voiceProfileSIPTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3), )
if mibBuilder.loadTexts: voiceProfileSIPTable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPTable.setDescription('Table of SIP objects for a specific voice profile')
voiceProfileSIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1), ).setIndexNames((0, "ZHNVOICE", "voiceServiceIndex"), (0, "ZHNVOICE", "voiceProfileIndex"))
if mibBuilder.loadTexts: voiceProfileSIPEntry.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPEntry.setDescription('SIP objects associated with a specific voice profile.')
voiceProfileSIPProxyServer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPProxyServer.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPProxyServer.setDescription('Host name or IP address of the SIP proxy server. All SIP signaling traffic MUST be sent to the host indicated by this parameter and the port indicated by the ProxyServerPort parameter unless OutboundProxy is non-empty or a different route was discovered during normal operations SIP routing operation. Regardless of which host the traffic gets sent to (the ProxyServer or the OutboundProxy), the value of this parameter MUST be used to derive the URI placed into the SIP Route header field of all requests originated by this end-point unless a different proxy host was discovered dynamically during normal SIP routing operations. ')
voiceProfileSIPProxyServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPProxyServerPort.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPProxyServerPort.setDescription('Destination port to be used in connecting to the SIP server. ')
voiceProfileSIPProxyServerTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 3), VoiceTransportValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPProxyServerTransport.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPProxyServerTransport.setDescription('Transport protocol to be used in connecting to the SIP server. Must be chosen from among the transports supported, as indicated by VoiceService.{i}.Capabilities.SIP.Transports. Enumeration of: UDP TCP TLS SCTP ')
voiceProfileSIPRegistrarServer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPRegistrarServer.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPRegistrarServer.setDescription('Host name or IP address of the SIP registrar server. If this parameter is empty, the CPE MUST obtain all of the registrar server configuration information, including host name or IP address, port, and transport protocol, from the corresponding Proxy Server parameters (ProxyServer, Proxy-ServerPort, and ProxyServerTransport), ignoring all of the registrar server parameters (Registrar-Server, RegistrarServerPort and RegistrarServer-Transport). ')
voiceProfileSIPRegistrarServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPRegistrarServerPort.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPRegistrarServerPort.setDescription('Destination port to be used in connecting to the SIP registrar server. If the RegistrarServer parameter is empty, the CPE MUST obtain all of the registrar server configuration information, including host name or IP address, port, and transport protocol, from the corresponding ProxyServer parameters (Proxy-Server, ProxyServerPort, and ProxyServer- Transport), ignoring all of the registrar server parameters (RegistrarServer, RegistrarServerPort and RegistrarServerTransport). ')
voiceProfileSIPRegistrarServerTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 6), VoiceTransportValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPRegistrarServerTransport.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPRegistrarServerTransport.setDescription('Transport protocol to be used in connecting to the registrar server. Must be chosen from among the transports supported, as indicated by VoiceService.{i}.Capabilities.SIP.Transports. Enumeration of: UDP TCP TLS SCTP If the RegistrarServer parameter is empty, the CPE MUST obtain all of the registrar server configuration information, including host name or IP address, port, and transport protocol, from the corresponding ProxyServer parameters (Proxy-Server, ProxyServerPort, and ProxyServer- Transport), ignoring all of the registrar server parameters (Registrar-Server, RegistrarServerPort and RegistrarServer-Transport).')
voiceProfileSIPToTagMatching = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPToTagMatching.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPToTagMatching.setDescription('Enable/Disable SIP to tag matching. ')
voiceProfileSIPMusicServer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPMusicServer.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPMusicServer.setDescription('Music server address. ')
voiceProfileSIPMusicServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPMusicServerPort.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPMusicServerPort.setDescription('Music server port number. ')
voiceProfileSIPPlarGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPPlarGateway.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPPlarGateway.setDescription('PLAR gateway address. ')
voiceProfileSIPPlarPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPPlarPort.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPPlarPort.setDescription('Plar gateway port number. ')
voiceProfileSIPUserAgentDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPUserAgentDomain.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPUserAgentDomain.setDescription('CPE domain string. If empty, the CPE SHOULD se its IP address as the domain. ')
voiceProfileSIPUserAgentPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPUserAgentPort.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPUserAgentPort.setDescription('Port used for incoming call control signaling. ')
voiceProfileSIPUserAgentTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 14), VoiceTransportValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPUserAgentTransport.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPUserAgentTransport.setDescription('Transport protocol to be used for incoming call control signaling. Must be chosen from among the transports supported, as indicated by VoiceService.{i}.Capabilities.SIP.Transports. Enumeration of: UDP TCP TLS SCTP ')
voiceProfileSIPOutboundProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPOutboundProxy.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPOutboundProxy.setDescription('Host name or IP address of the outbound proxy. If a non-empty value is specified, the SIP endpoint MUST send all SIP traffic (requests and responses) to the host indicated by this parameter and the port indicated by the OutboundProxyPort parameter. This MUST be done regardless of the routes discovered using normal SIP operations, including use of Route headers initialized from Service-Route and Record-Route headers previously received. The OutboundProxy value is NOT used to generate the URI placed into the Route header of any requests. ')
voiceProfileSIPOutboundProxyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPOutboundProxyPort.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPOutboundProxyPort.setDescription('Destination port to be used in connecting to the outbound proxy. This parameter MUST be ignored unless the value of the OutboundProxy parameter in this object is non-empty. ')
voiceProfileSIPOrganization = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPOrganization.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPOrganization.setDescription('Text string to be used in the Organization header. ')
voiceProfileSIPRegistrationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPRegistrationPeriod.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPRegistrationPeriod.setDescription('Period over which the user agent must periodically register, in seconds. ')
voiceProfileSIPRegisterExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPRegisterExpires.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPRegisterExpires.setDescription('Register request Expires header value, in seconds. ')
voiceProfileSIPRegisterRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPRegisterRetryInterval.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPRegisterRetryInterval.setDescription('Register retry interval, in seconds. ')
voiceProfileSIPDSCPMark = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPDSCPMark.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPDSCPMark.setDescription('Diffserv code point to be used for outgoing SIP signaling packets. ')
voiceProfileSIPVLANIDMark = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPVLANIDMark.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPVLANIDMark.setDescription('VLAN ID (as defined in 802.1Q) to be used for outgoing SIP signaling packets for this profile. A value of -1 indicates the default value is to be used. If either the VLANIDMark or EthernetPriorityMark are greater than zero, then the outgoing frames MUST be tagged. Otherwise, the outgoing frames MAY be tagged or untagged. ')
voiceProfileSIPEthernetPriorityMark = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPEthernetPriorityMark.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPEthernetPriorityMark.setDescription('Ethernet priority code (as defined in 802.1D) to be used for outgoing SIP signaling packets for this profile. A value of -1 indicates the default value is to be used. If either the VLANIDMark or EthernetPriorityMark are greater than zero, then the outgoing frames MUST be tagged. Otherwise, the outgoing frames MAY be tagged or untagged. ')
voiceProfileSIPInterdigitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPInterdigitTimeout.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPInterdigitTimeout.setDescription('Interdigit timeout, in milliseconds. This the value that will be used for T in the dial string. Four Seconds is the default value before the dial string is considered complete. Fifteen seconds is the maximum.')
voiceProfileSIPAddressMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 3, 1, 25), VoiceProfileAddressModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPAddressMode.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPAddressMode.setDescription('Configure the SIP Client Name addressing mode. An enumeration of: ip(1) ipBracketed(2) domainName(3) Ip and IpBracketed will cause the SIP Client name to be the Bound Interface IP address. Name will allow the user to input any text field, usually a Domain Name.')
voiceProfileSIPEventSubscribeTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 4), )
if mibBuilder.loadTexts: voiceProfileSIPEventSubscribeTable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPEventSubscribeTable.setDescription('Table of SIP subscriber event objects for a specific voice profile')
voiceProfileSIPEventSubscribeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 4, 1), ).setIndexNames((0, "ZHNVOICE", "voiceServiceIndex"), (0, "ZHNVOICE", "voiceProfileIndex"))
if mibBuilder.loadTexts: voiceProfileSIPEventSubscribeEntry.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPEventSubscribeEntry.setDescription('SIP subscriber events objects associated with a specific voice profile.')
voiceProfileSIPEventSubscribeEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPEventSubscribeEvent.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPEventSubscribeEvent.setDescription('SIP event name to appear in the EVENT header of the SIP SUBSCRIBE request.')
voiceProfileSIPEventSubscribeNotifier = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPEventSubscribeNotifier.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPEventSubscribeNotifier.setDescription('Host name or IP address of the event notify server.')
voiceProfileSIPEventSubscribeNotifierPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 4, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPEventSubscribeNotifierPort.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPEventSubscribeNotifierPort.setDescription('Destination port to be used in connecting to the event notifier.')
voiceProfileSIPEventSubscribeNotifierTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 4, 1, 4), VoiceTransportValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileSIPEventSubscribeNotifierTransport.setStatus('current')
if mibBuilder.loadTexts: voiceProfileSIPEventSubscribeNotifierTransport.setDescription('Transport protocol to be used in connecting to the registrar server. Must be chosen from among the transports supported, as indicated by VoiceService.{i}.Capabilities.SIP.Transports. Enumeration of: UDP TCP TLS SCTP ')
voiceProfileMGCPTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 5), )
if mibBuilder.loadTexts: voiceProfileMGCPTable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileMGCPTable.setDescription('Table of MGCP objects for a specific voice profile')
voiceProfileMGCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 5, 1), ).setIndexNames((0, "ZHNVOICE", "voiceServiceIndex"), (0, "ZHNVOICE", "voiceProfileIndex"))
if mibBuilder.loadTexts: voiceProfileMGCPEntry.setStatus('current')
if mibBuilder.loadTexts: voiceProfileMGCPEntry.setDescription('MGCP objects associated with a specific voice profile.')
voiceProfileMGCPCallAgent1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileMGCPCallAgent1.setStatus('current')
if mibBuilder.loadTexts: voiceProfileMGCPCallAgent1.setDescription('Host name or IP address of the main MGCP call agent.')
voiceProfileMGCPUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileMGCPUser.setStatus('current')
if mibBuilder.loadTexts: voiceProfileMGCPUser.setDescription('User string used in accessing the call agent.')
voiceProfilePersistentNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 5, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfilePersistentNotify.setStatus('current')
if mibBuilder.loadTexts: voiceProfilePersistentNotify.setDescription('This field directs the MGCP stack to notify the switch for every hd or hu event when in the RQNT is Q:LOOP.')
voiceProfileMGCPAddressMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 5, 1, 4), VoiceProfileAddressModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileMGCPAddressMode.setStatus('current')
if mibBuilder.loadTexts: voiceProfileMGCPAddressMode.setDescription('Configure the MGCP Client Name addressing mode. An enumeration of: ip(1) ipBracketed(2) domainName(3) Ip and IpBracketed will cause the MGCP Client name to be the Bound Interface IP address. Name will allow the user to input any text field, usually a Domain Name.')
voiceProfileRTPTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 6), )
if mibBuilder.loadTexts: voiceProfileRTPTable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileRTPTable.setDescription('Table of RTP objects for a specific voice profile')
voiceProfileRTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 6, 1), ).setIndexNames((0, "ZHNVOICE", "voiceServiceIndex"), (0, "ZHNVOICE", "voiceProfileIndex"))
if mibBuilder.loadTexts: voiceProfileRTPEntry.setStatus('current')
if mibBuilder.loadTexts: voiceProfileRTPEntry.setDescription('RTP objects associated with a specific voice profile.')
voiceProfileRTPLocalPortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65525))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileRTPLocalPortMin.setStatus('current')
if mibBuilder.loadTexts: voiceProfileRTPLocalPortMin.setDescription('Base of port range to be used for incoming RTP streams for this profile.')
voiceProfileRTPLocalPortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65525))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileRTPLocalPortMax.setStatus('current')
if mibBuilder.loadTexts: voiceProfileRTPLocalPortMax.setDescription('Top of port range to be used for incoming RTP streams for this profile.')
voiceProfileRTPDSCPMark = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileRTPDSCPMark.setStatus('current')
if mibBuilder.loadTexts: voiceProfileRTPDSCPMark.setDescription('Diffserv code point to be used for outgoing RTP &#10;packets for this profile. It is RECOMMENDED that by default the DSCP for RTP traffic be set to the value to indicate EF traffic.')
voiceProfileRTPTelephoneEventPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileRTPTelephoneEventPayloadType.setStatus('current')
if mibBuilder.loadTexts: voiceProfileRTPTelephoneEventPayloadType.setDescription('Payload type to be used for RTP telephone events. This parameter indicates the payload type to be used for DTMF events if RFC 2833 transmission of DTMF information is in use.')
voiceProfileFaxT38Table = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 7), )
if mibBuilder.loadTexts: voiceProfileFaxT38Table.setStatus('current')
if mibBuilder.loadTexts: voiceProfileFaxT38Table.setDescription('Table of Fax T.38 objects for a specific voice profile')
voiceProfileFaxT38Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 7, 1), ).setIndexNames((0, "ZHNVOICE", "voiceServiceIndex"), (0, "ZHNVOICE", "voiceProfileIndex"))
if mibBuilder.loadTexts: voiceProfileFaxT38Entry.setStatus('current')
if mibBuilder.loadTexts: voiceProfileFaxT38Entry.setDescription('Fax T38 objects associated with a specific voice profile.')
voiceProfileFaxT38Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 7, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileFaxT38Enable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileFaxT38Enable.setDescription('Enable or disable the use of T.38.')
voiceProfileFaxT38BitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 7, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileFaxT38BitRate.setStatus('current')
if mibBuilder.loadTexts: voiceProfileFaxT38BitRate.setDescription('Maximum data rate for fax. Enumeration of the following values: 2400 4800 7200 9600 12000 14400 33600 ')
voiceProfileFaxT38HighSpeedPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 7, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileFaxT38HighSpeedPacketRate.setStatus('current')
if mibBuilder.loadTexts: voiceProfileFaxT38HighSpeedPacketRate.setDescription('The rate at which high speed data will be sent across the network in milliseconds. Enumeration of the following values: 10 20 30 40 ')
voiceProfileLines = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8))
voiceProfileLineTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 1), )
if mibBuilder.loadTexts: voiceProfileLineTable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineTable.setDescription('Table of voice profile line objects')
voiceProfileLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 1, 1), ).setIndexNames((0, "ZHNVOICE", "voiceServiceIndex"), (0, "ZHNVOICE", "voiceProfileIndex"), (0, "ZHNVOICE", "voiceProfileLineIndex"))
if mibBuilder.loadTexts: voiceProfileLineEntry.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineEntry.setDescription('Object associated with a distinct voice line. Support for adding and removing lines is conditional on whether the CPE supports more than one line in total as indicated by VoiceService.{i}.Capabilities.MaxLineCount. By default, on creation of a given VoiceProfile, a single Line object MUST be present, initially in the disabled state. Applicable only for a VoIP endpoint.')
voiceProfileLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineIndex.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineIndex.setDescription('Voice Profile Line Index')
voiceProfileLineEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 1, 1, 2), VoiceProfileLineStateType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLineEnable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineEnable.setDescription('Enables or disables this line, or places it into a quiescent state. Enumeration of: Disabled Quiescent Enabled On creation, a line MUST be in the Disabled state. In the Quiescent state, in-progress sessions remain intact, but no new sessions are allowed. Support for the Quiescent state in a CPE is optional. If this parameter is set to Quiescent in a CPE that does not support the Quiescent state, it MUST treat it the same as the Disabled state (and indicate Disabled in the Status parameter). ')
voiceProfileLineDirectoryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLineDirectoryNumber.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineDirectoryNumber.setDescription('Directory number associated with this line. May be used to identify the line to the user. In case of H.323 signaling, this MUST be an E.164 number.')
voiceProfileLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 1, 1, 4), VoiceLineStatusValues()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineStatus.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineStatus.setDescription('Indicates the status of this line. Enumeration of: Up Initializing Registering Unregistering Error Testing Quiescent Disabled ')
voiceProfileLineCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 1, 1, 5), VoiceLineCallStateValues()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineCallState.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineCallState.setDescription('Indicates the call state for this line. Enumeration of: Idle Calling Ringing Connecting InCall Hold Disconnecting ')
voiceProfileLinePhyReferenceList = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLinePhyReferenceList.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLinePhyReferenceList.setDescription('A comma separated list of Physical Interface Identifiers that this Line is associated with. Each item corresponds to the value of the InterfaceID paraeter in a particular instance of the VoiceService.{i}.PhyInterface.{i}. table.')
voiceProfileLineCMAcntNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLineCMAcntNum.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineCMAcntNum.setDescription('Indicates the call manager account number associated with this line instance.')
voiceProfileLineOnhook = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLineOnhook.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineOnhook.setDescription('State of phones Receiver. On Hook if True, OffHook if False.')
voiceProfileLineRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 1, 1, 9), ZhoneRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLineRowStatus.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineRowStatus.setDescription('The SNMP RowStatus of the current row.')
voiceProfileLineSIPTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 2), )
if mibBuilder.loadTexts: voiceProfileLineSIPTable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineSIPTable.setDescription('Table of voice profile line SIP objects')
voiceProfileLineSIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 2, 1), ).setIndexNames((0, "ZHNVOICE", "voiceServiceIndex"), (0, "ZHNVOICE", "voiceProfileIndex"), (0, "ZHNVOICE", "voiceProfileLineIndex"))
if mibBuilder.loadTexts: voiceProfileLineSIPEntry.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineSIPEntry.setDescription('Line SIP objects associated with a specific voice profile.')
voiceProfileLineSIPAuthUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLineSIPAuthUserName.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineSIPAuthUserName.setDescription('Username used to authenticate the connection to the server.')
voiceProfileLineSIPAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLineSIPAuthPassword.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineSIPAuthPassword.setDescription('Password used to authenticate the connection to the server. When read, this parameter returns an empty string, regardless of the actual value.')
voiceProfileLineSIPURI = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 389))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLineSIPURI.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineSIPURI.setDescription('URI by which the user agent will identify itself for this line. If empty, the actual URI used in the SIP signaling SHOULD be automatically formed by the CPE as sip:UserName')
voiceProfileLineSIPPlarUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLineSIPPlarUserName.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineSIPPlarUserName.setDescription('PLAR gateway username.')
voiceProfileLineMGCPTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 3), )
if mibBuilder.loadTexts: voiceProfileLineMGCPTable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineMGCPTable.setDescription('Table of voice profile line MGCP objects')
voiceProfileLineMGCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 3, 1), ).setIndexNames((0, "ZHNVOICE", "voiceServiceIndex"), (0, "ZHNVOICE", "voiceProfileIndex"), (0, "ZHNVOICE", "voiceProfileLineIndex"))
if mibBuilder.loadTexts: voiceProfileLineMGCPEntry.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineMGCPEntry.setDescription('Line MGCP objects associated with a specific voice profile.')
voiceProfileLineMGCPLineName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLineMGCPLineName.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineMGCPLineName.setDescription('Used to identify the line when using MGCP signaling. If empty, the CPE SHOULD use the default names aaln/1, etc.')
voiceProfileLineProcessingTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 4), )
if mibBuilder.loadTexts: voiceProfileLineProcessingTable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineProcessingTable.setDescription('Table of voice profile line processing objects')
voiceProfileLineProcessingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 4, 1), ).setIndexNames((0, "ZHNVOICE", "voiceServiceIndex"), (0, "ZHNVOICE", "voiceProfileIndex"), (0, "ZHNVOICE", "voiceProfileLineIndex"))
if mibBuilder.loadTexts: voiceProfileLineProcessingEntry.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineProcessingEntry.setDescription('Line Processing objects associated with a specific voice profile.')
voiceProfileLineTransmitGain = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLineTransmitGain.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineTransmitGain.setDescription('Gain in units of 0.1 dB to apply to the transmitted voice signal prior to encoding. This gain is a modifier of the default transmit-gain, which is unspecified.')
voiceProfileLineReceiveGain = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLineReceiveGain.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineReceiveGain.setDescription('Gain in units of 0.1 dB to apply to the received voice signal after decoding. This gain is a modifier of the default receive-gain, which is unspecified.')
voiceProfileLineEchoCancellationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 4, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLineEchoCancellationEnable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineEchoCancellationEnable.setDescription('Enable or disable echo cancellation for this line.')
voiceProfileLineEchoCancellationInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineEchoCancellationInUse.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineEchoCancellationInUse.setDescription('Indication of whether or not echo cancellation is currently in use for this line. ')
voiceProfileLineCodecTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 5), )
if mibBuilder.loadTexts: voiceProfileLineCodecTable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineCodecTable.setDescription('Table of voice profile CODEC objects, per line')
voiceProfileLineCodecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 5, 1), ).setIndexNames((0, "ZHNVOICE", "voiceServiceIndex"), (0, "ZHNVOICE", "voiceProfileIndex"), (0, "ZHNVOICE", "voiceProfileLineIndex"), (0, "ZHNVOICE", "voiceProfileLineCodecIndex"))
if mibBuilder.loadTexts: voiceProfileLineCodecEntry.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineCodecEntry.setDescription('The Voice Line CODEC list MUST include a distinct entry for each supported combination of these parameters.')
voiceProfileLineCodecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineCodecIndex.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineCodecIndex.setDescription('Unique identifier for each entry in this table. The value MUST match that of the corresponding entry in the VoiceService.{i}.Capabilities.Codecs table.')
voiceProfileLineCodecEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineCodecEntryID.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineCodecEntryID.setDescription('Unique identifier for each entry in this table. The value MUST match that of the corresponding entry in the VoiceService.{i}.Capabilities.Codecs table.')
voiceProfileLineCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineCodec.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineCodec.setDescription('Identifier of the codec type. The value MUST match that of the corresponding entry in the VoiceService.{i}.Capabilities.Codecs table.')
voiceProfileLineCodecBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineCodecBitRate.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineCodecBitRate.setDescription('Bit rate, in bits per second. The value MUST match that of the corresponding entry in the VoiceService.{i}.Capabilities.Codecs table.')
voiceProfileLineCodecPacketizationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLineCodecPacketizationPeriod.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineCodecPacketizationPeriod.setDescription('Comma-separate list of supported packetization periods, in milliseconds, or continuous ranges of packetization periods as defined in VoiceService.{i}.Capabilities.Codecs.PacketizationPeriod. The set of packetization periods may be restricted by modifying the value of this parameter to a more restricted set of values than is listed in VoiceService.{i}.Capabilities.Codecs.PacketizationPeriod. The CPE MUST ignore any values or portions of ranges outside of those specified in VoiceService.{i}.Capabilities.Codecs.Packetization.Period.')
voiceProfileLineCodecSilenceSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 5, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLineCodecSilenceSuppression.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineCodecSilenceSuppression.setDescription('Indicates support for silence suppression for this codec. If silence suppression is supported, it can be disabled for this codec/bit-rate by setting this parameter to false.')
voiceProfileLineCodecEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 5, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLineCodecEnable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineCodecEnable.setDescription('Enable or disable the use of this combination of codec parameters.')
voiceProfileLineCodecPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 5, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLineCodecPriority.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineCodecPriority.setDescription('Indicates the priority for this combination of codec parameters, where 1 is the highest priority. Where the priority differs between entries in this table, the CPE SHOULD use the highest priority (lowest numbered) entry among those supported by the remote endpoint and consistent with the available bandwidth. Where the priorities are equal among multiple entries, the CPE MAY apply a local criterion for choosing among them.')
voiceProfileLineCallingFeaturesTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 6), )
if mibBuilder.loadTexts: voiceProfileLineCallingFeaturesTable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineCallingFeaturesTable.setDescription('Table of voice calling features, per line')
voiceProfileLineCallingFeaturesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 6, 1), ).setIndexNames((0, "ZHNVOICE", "voiceServiceIndex"), (0, "ZHNVOICE", "voiceProfileIndex"), (0, "ZHNVOICE", "voiceProfileLineIndex"))
if mibBuilder.loadTexts: voiceProfileLineCallingFeaturesEntry.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineCallingFeaturesEntry.setDescription('The list of voice line calling features supported.')
voiceProfileLineCallingFeatureCallerIDEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 6, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLineCallingFeatureCallerIDEnable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineCallingFeatureCallerIDEnable.setDescription('Enable or disable the transmission of caller ID information on outgoing calls.')
voiceProfileLineCallingFeatureCallerIDName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLineCallingFeatureCallerIDName.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineCallingFeatureCallerIDName.setDescription('String used to identify the caller.')
voiceProfileLineCallingFeatureCallWaitingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 6, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLineCallingFeatureCallWaitingEnable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineCallingFeatureCallWaitingEnable.setDescription('Enable or disable call waiting in the endpoint.')
voiceProfileLineCallingFeatureMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineCallingFeatureMaxSessions.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineCallingFeatureMaxSessions.setDescription('Indicates the maximum number of simultaneous sessions that may be conferenced together by the endpoint. For example, to enable three way conferencing, set the value of this object to 2. This value SHOULD be less than the value of VoiceService.{i}.Capabilities.maxSessionsPerLine.')
voiceProfileLineCallingFeatureMWIEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 6, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceProfileLineCallingFeatureMWIEnable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineCallingFeatureMWIEnable.setDescription('Enable or disable call waiting in the endpoint.')
voiceProfileLineStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 7), )
if mibBuilder.loadTexts: voiceProfileLineStatsTable.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineStatsTable.setDescription('Table of voice profile line statistics objects')
voiceProfileLineStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 7, 1), ).setIndexNames((0, "ZHNVOICE", "voiceServiceIndex"), (0, "ZHNVOICE", "voiceProfileIndex"), (0, "ZHNVOICE", "voiceProfileLineIndex"))
if mibBuilder.loadTexts: voiceProfileLineStatsEntry.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineStatsEntry.setDescription('Line statistics objects associated with a specific voice profile.')
voiceProfileLineStatsPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineStatsPacketsSent.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineStatsPacketsSent.setDescription('Total number of RTP Packets sent for this voice line.')
voiceProfileLineStatsPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineStatsPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineStatsPacketsReceived.setDescription('Total number of RTP Packets received for this voice line.')
voiceProfileLineStatsBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineStatsBytesSent.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineStatsBytesSent.setDescription('Total number of RTP Bytes sent for this voice line.')
voiceProfileLineStatsBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineStatsBytesReceived.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineStatsBytesReceived.setDescription('Total number of RTP Bytes received for this voice line.')
voiceProfileLineStatsPacketsLost = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineStatsPacketsLost.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineStatsPacketsLost.setDescription('Total number of RTP Packets lost for this voice line.')
voiceProfileLineStatsIncomingCallsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineStatsIncomingCallsReceived.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineStatsIncomingCallsReceived.setDescription('Total incoming calls received.')
voiceProfileLineStatsIncomingCallsAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 7, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineStatsIncomingCallsAnswered.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineStatsIncomingCallsAnswered.setDescription('Total incoming calls answered.')
voiceProfileLineStatsIncomingCallsConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 7, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineStatsIncomingCallsConnected.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineStatsIncomingCallsConnected.setDescription('Total incoming calls connected.')
voiceProfileLineStatsIncomingCallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 7, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineStatsIncomingCallsFailed.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineStatsIncomingCallsFailed.setDescription('Total incoming calls failed.')
voiceProfileLineStatsOutgoingCallsAttempted = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 7, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineStatsOutgoingCallsAttempted.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineStatsOutgoingCallsAttempted.setDescription('Total outgoing calls attempted.')
voiceProfileLineStatsOutgoingCallsAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 7, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineStatsOutgoingCallsAnswered.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineStatsOutgoingCallsAnswered.setDescription('Total outgoing calls answered.')
voiceProfileLineStatsOutgoingCallsConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 7, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineStatsOutgoingCallsConnected.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineStatsOutgoingCallsConnected.setDescription('Total outgoing calls connected.')
voiceProfileLineStatsOutgoingCallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 1, 3, 8, 7, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceProfileLineStatsOutgoingCallsFailed.setStatus('current')
if mibBuilder.loadTexts: voiceProfileLineStatsOutgoingCallsFailed.setDescription('Total outgoing calls failed.')
zhnVoiceConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2))
zhnVoiceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 1))
zhnVoiceServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 1, 1)).setObjects(("ZHNVOICE", "voiceProfileNumberOfEntries"), ("ZHNVOICE", "voiceBoundIfName"), ("ZHNVOICE", "voiceBoundIpAddr"), ("ZHNVOICE", "voiceServiceIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVoiceServiceGroup = zhnVoiceServiceGroup.setStatus('current')
if mibBuilder.loadTexts: zhnVoiceServiceGroup.setDescription('A collection of Zhone Voice objects that describe the voice services of the device.')
zhnVoiceCapabilitiesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 1, 2)).setObjects(("ZHNVOICE", "maxProfileCount"), ("ZHNVOICE", "maxLineCount"), ("ZHNVOICE", "maxSessionsPerLine"), ("ZHNVOICE", "maxSessionCount"), ("ZHNVOICE", "signalingProtocols"), ("ZHNVOICE", "regions"), ("ZHNVOICE", "rtcp"), ("ZHNVOICE", "srtp"), ("ZHNVOICE", "rtpRedundancy"), ("ZHNVOICE", "dscpCoupled"), ("ZHNVOICE", "ethernetTaggingCoupled"), ("ZHNVOICE", "pstnSoftSwitchOver"), ("ZHNVOICE", "faxT38"), ("ZHNVOICE", "faxPassThrough"), ("ZHNVOICE", "modemPassThrough"), ("ZHNVOICE", "toneGeneration"), ("ZHNVOICE", "ringGeneration"), ("ZHNVOICE", "digitMapCapabilities"), ("ZHNVOICE", "numberingPlan"), ("ZHNVOICE", "buttonMap"), ("ZHNVOICE", "voicePortTests"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVoiceCapabilitiesGroup = zhnVoiceCapabilitiesGroup.setStatus('current')
if mibBuilder.loadTexts: zhnVoiceCapabilitiesGroup.setDescription('A collection of Zhone Voice objects that describe the voice capabilities of the device.')
zhnVoiceCapabilitiesSIPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 1, 3)).setObjects(("ZHNVOICE", "role"), ("ZHNVOICE", "extensionsSIP"), ("ZHNVOICE", "transports"), ("ZHNVOICE", "uriSchemes"), ("ZHNVOICE", "eventSubscription"), ("ZHNVOICE", "responseMap"), ("ZHNVOICE", "tlsKeyExchangeProtocols"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVoiceCapabilitiesSIPGroup = zhnVoiceCapabilitiesSIPGroup.setStatus('current')
if mibBuilder.loadTexts: zhnVoiceCapabilitiesSIPGroup.setDescription('A collection of Zhone Voice objects that describe the voice SIP or SIP PLAR capabilities of the device.')
zhnVoiceCapabilitiesMGCPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 1, 4)).setObjects(("ZHNVOICE", "extensionsMGCP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVoiceCapabilitiesMGCPGroup = zhnVoiceCapabilitiesMGCPGroup.setStatus('current')
if mibBuilder.loadTexts: zhnVoiceCapabilitiesMGCPGroup.setDescription('A collection of Zhone Voice objects that describe the voice MGCP capabilities of the device.')
zhnVoiceCapabilitiesCodecsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 1, 5)).setObjects(("ZHNVOICE", "codecIndex"), ("ZHNVOICE", "entryID"), ("ZHNVOICE", "codec"), ("ZHNVOICE", "bitRate"), ("ZHNVOICE", "packetizationPeriod"), ("ZHNVOICE", "silenceSuppression"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVoiceCapabilitiesCodecsGroup = zhnVoiceCapabilitiesCodecsGroup.setStatus('current')
if mibBuilder.loadTexts: zhnVoiceCapabilitiesCodecsGroup.setDescription('A collection of Zhone Voice objects that identify the set of supported codecs.')
zhnVoiceProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 1, 6)).setObjects(("ZHNVOICE", "voiceProfileIndex"), ("ZHNVOICE", "voiceProfileEnable"), ("ZHNVOICE", "voiceProfileReset"), ("ZHNVOICE", "voiceProfileNumberOfLines"), ("ZHNVOICE", "voiceProfileName"), ("ZHNVOICE", "voiceProfileSignalingProtocol"), ("ZHNVOICE", "voiceProfileMaxSessions"), ("ZHNVOICE", "voiceProfileDtmfMethod"), ("ZHNVOICE", "voiceProfileDtmfMethodG711"), ("ZHNVOICE", "voiceProfileHookFlashMethod"), ("ZHNVOICE", "voiceProfileRegion"), ("ZHNVOICE", "voiceProfileDigitMap"), ("ZHNVOICE", "voiceProfileDigitMapEnable"), ("ZHNVOICE", "voiceProfileStunEnable"), ("ZHNVOICE", "voiceProfileStunServer"), ("ZHNVOICE", "voiceProfileStunServerPort"), ("ZHNVOICE", "voiceProfileLogServer"), ("ZHNVOICE", "voiceProfileLogServerPort"), ("ZHNVOICE", "voiceProfileSpNum"), ("ZHNVOICE", "voiceProfileV18Support"), ("ZHNVOICE", "voiceProfileSwitchType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVoiceProfileGroup = zhnVoiceProfileGroup.setStatus('current')
if mibBuilder.loadTexts: zhnVoiceProfileGroup.setDescription('A collection of Zhone Voice objects that describe a voice profile.')
zhnVoiceProfileServiceProviderGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 1, 7)).setObjects(("ZHNVOICE", "voiceProfileServiceProviderName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVoiceProfileServiceProviderGroup = zhnVoiceProfileServiceProviderGroup.setStatus('current')
if mibBuilder.loadTexts: zhnVoiceProfileServiceProviderGroup.setDescription('A collection of Zhone Voice Profile objects that describe a service provider.')
zhnVoiceProfileSIPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 1, 8)).setObjects(("ZHNVOICE", "voiceProfileSIPProxyServer"), ("ZHNVOICE", "voiceProfileSIPProxyServerPort"), ("ZHNVOICE", "voiceProfileSIPProxyServerTransport"), ("ZHNVOICE", "voiceProfileSIPRegistrarServer"), ("ZHNVOICE", "voiceProfileSIPRegistrarServerPort"), ("ZHNVOICE", "voiceProfileSIPRegistrarServerTransport"), ("ZHNVOICE", "voiceProfileSIPToTagMatching"), ("ZHNVOICE", "voiceProfileSIPMusicServer"), ("ZHNVOICE", "voiceProfileSIPMusicServerPort"), ("ZHNVOICE", "voiceProfileSIPPlarGateway"), ("ZHNVOICE", "voiceProfileSIPPlarPort"), ("ZHNVOICE", "voiceProfileSIPUserAgentDomain"), ("ZHNVOICE", "voiceProfileSIPUserAgentPort"), ("ZHNVOICE", "voiceProfileSIPUserAgentTransport"), ("ZHNVOICE", "voiceProfileSIPOutboundProxy"), ("ZHNVOICE", "voiceProfileSIPOutboundProxyPort"), ("ZHNVOICE", "voiceProfileSIPOrganization"), ("ZHNVOICE", "voiceProfileSIPRegistrationPeriod"), ("ZHNVOICE", "voiceProfileSIPRegisterExpires"), ("ZHNVOICE", "voiceProfileSIPRegisterRetryInterval"), ("ZHNVOICE", "voiceProfileSIPDSCPMark"), ("ZHNVOICE", "voiceProfileSIPVLANIDMark"), ("ZHNVOICE", "voiceProfileSIPEthernetPriorityMark"), ("ZHNVOICE", "voiceProfileSIPInterdigitTimeout"), ("ZHNVOICE", "voiceProfileSIPAddressMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVoiceProfileSIPGroup = zhnVoiceProfileSIPGroup.setStatus('current')
if mibBuilder.loadTexts: zhnVoiceProfileSIPGroup.setDescription('A collection of Zhone Voice Profile objects that describe SIP information.')
zhnVoiceProfileSIPEventSubscribeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 1, 9)).setObjects(("ZHNVOICE", "voiceProfileSIPEventSubscribeEvent"), ("ZHNVOICE", "voiceProfileSIPEventSubscribeNotifier"), ("ZHNVOICE", "voiceProfileSIPEventSubscribeNotifierPort"), ("ZHNVOICE", "voiceProfileSIPEventSubscribeNotifierTransport"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVoiceProfileSIPEventSubscribeGroup = zhnVoiceProfileSIPEventSubscribeGroup.setStatus('current')
if mibBuilder.loadTexts: zhnVoiceProfileSIPEventSubscribeGroup.setDescription('A collection of Zhone Voice Profile objects that describe SIP subscriber events information.')
zhnVoiceProfileMGCPEntry = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 1, 10)).setObjects(("ZHNVOICE", "voiceProfileMGCPCallAgent1"), ("ZHNVOICE", "voiceProfileMGCPUser"), ("ZHNVOICE", "voiceProfilePersistentNotify"), ("ZHNVOICE", "voiceProfileMGCPAddressMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVoiceProfileMGCPEntry = zhnVoiceProfileMGCPEntry.setStatus('current')
if mibBuilder.loadTexts: zhnVoiceProfileMGCPEntry.setDescription('A collection of Zhone Voice Profile objects that describe MGCP information.')
zhnVoiceProfileRTPEntry = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 1, 11)).setObjects(("ZHNVOICE", "voiceProfileRTPLocalPortMin"), ("ZHNVOICE", "voiceProfileRTPLocalPortMax"), ("ZHNVOICE", "voiceProfileRTPDSCPMark"), ("ZHNVOICE", "voiceProfileRTPTelephoneEventPayloadType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVoiceProfileRTPEntry = zhnVoiceProfileRTPEntry.setStatus('current')
if mibBuilder.loadTexts: zhnVoiceProfileRTPEntry.setDescription('A collection of Zhone Voice Profile objects that describe Real-time Transport Protocol (RTP) information.')
zhnVoiceProfileFaxT38Entry = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 1, 12)).setObjects(("ZHNVOICE", "voiceProfileFaxT38Enable"), ("ZHNVOICE", "voiceProfileFaxT38BitRate"), ("ZHNVOICE", "voiceProfileFaxT38HighSpeedPacketRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVoiceProfileFaxT38Entry = zhnVoiceProfileFaxT38Entry.setStatus('current')
if mibBuilder.loadTexts: zhnVoiceProfileFaxT38Entry.setDescription('A collection of Zhone Voice Profile objects that describe FAX T.38 information.')
zhnVoiceProfileLineGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 1, 13)).setObjects(("ZHNVOICE", "voiceProfileLineIndex"), ("ZHNVOICE", "voiceProfileLineEnable"), ("ZHNVOICE", "voiceProfileLineDirectoryNumber"), ("ZHNVOICE", "voiceProfileLineStatus"), ("ZHNVOICE", "voiceProfileLineCallState"), ("ZHNVOICE", "voiceProfileLinePhyReferenceList"), ("ZHNVOICE", "voiceProfileLineCMAcntNum"), ("ZHNVOICE", "voiceProfileLineOnhook"), ("ZHNVOICE", "voiceProfileLineRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVoiceProfileLineGroup = zhnVoiceProfileLineGroup.setStatus('current')
if mibBuilder.loadTexts: zhnVoiceProfileLineGroup.setDescription('A collection of Zhone Voice objects that describe physical line information for a voice profile.')
zhnVoiceProfileLineProcessingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 1, 14)).setObjects(("ZHNVOICE", "voiceProfileLineTransmitGain"), ("ZHNVOICE", "voiceProfileLineReceiveGain"), ("ZHNVOICE", "voiceProfileLineEchoCancellationEnable"), ("ZHNVOICE", "voiceProfileLineEchoCancellationInUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVoiceProfileLineProcessingGroup = zhnVoiceProfileLineProcessingGroup.setStatus('current')
if mibBuilder.loadTexts: zhnVoiceProfileLineProcessingGroup.setDescription('A collection of Zhone Voice objects that describe physical line processing information for a voice profile.')
zhnVoiceProfileLineSIPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 1, 15)).setObjects(("ZHNVOICE", "voiceProfileLineSIPAuthUserName"), ("ZHNVOICE", "voiceProfileLineSIPAuthPassword"), ("ZHNVOICE", "voiceProfileLineSIPURI"), ("ZHNVOICE", "voiceProfileLineSIPPlarUserName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVoiceProfileLineSIPGroup = zhnVoiceProfileLineSIPGroup.setStatus('current')
if mibBuilder.loadTexts: zhnVoiceProfileLineSIPGroup.setDescription('A collection of Zhone Voice objects that describe voice line information specific to SIP call signaling for a voice profile.')
zhnVoiceProfileLineMGCPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 1, 16)).setObjects(("ZHNVOICE", "voiceProfileLineMGCPLineName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVoiceProfileLineMGCPGroup = zhnVoiceProfileLineMGCPGroup.setStatus('current')
if mibBuilder.loadTexts: zhnVoiceProfileLineMGCPGroup.setDescription('A collection of Zhone Voice objects that describe voice line information specific to MGCP call signaling for a voice profile.')
zhnVoiceProfileLineCodecsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 1, 17)).setObjects(("ZHNVOICE", "voiceProfileLineCodecIndex"), ("ZHNVOICE", "voiceProfileLineCodecEntryID"), ("ZHNVOICE", "voiceProfileLineCodec"), ("ZHNVOICE", "voiceProfileLineCodecBitRate"), ("ZHNVOICE", "voiceProfileLineCodecPacketizationPeriod"), ("ZHNVOICE", "voiceProfileLineCodecSilenceSuppression"), ("ZHNVOICE", "voiceProfileLineCodecEnable"), ("ZHNVOICE", "voiceProfileLineCodecPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVoiceProfileLineCodecsGroup = zhnVoiceProfileLineCodecsGroup.setStatus('current')
if mibBuilder.loadTexts: zhnVoiceProfileLineCodecsGroup.setDescription('A collection of Zhone Voice objects that describe voice line CODECS information.')
zhnVoiceLineCallingFeaturesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 1, 18)).setObjects(("ZHNVOICE", "voiceProfileLineCallingFeatureCallerIDEnable"), ("ZHNVOICE", "voiceProfileLineCallingFeatureCallerIDName"), ("ZHNVOICE", "voiceProfileLineCallingFeatureCallWaitingEnable"), ("ZHNVOICE", "voiceProfileLineCallingFeatureMaxSessions"), ("ZHNVOICE", "voiceProfileLineCallingFeatureMWIEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVoiceLineCallingFeaturesGroup = zhnVoiceLineCallingFeaturesGroup.setStatus('current')
if mibBuilder.loadTexts: zhnVoiceLineCallingFeaturesGroup.setDescription('A collection of optionable, configurable Zhone Voice Line calling features.')
zhnVoiceNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 1, 19)).setObjects(("ZHNVOICE", "voiceRegistrationUp"), ("ZHNVOICE", "voiceRegistrationDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVoiceNotificationGroup = zhnVoiceNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: zhnVoiceNotificationGroup.setDescription('Collection of objects for controlling the Zhone Voice notifications.')
zhnVoiceProfileLineStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 1, 20)).setObjects(("ZHNVOICE", "voiceProfileLineStatsPacketsSent"), ("ZHNVOICE", "voiceProfileLineStatsPacketsReceived"), ("ZHNVOICE", "voiceProfileLineStatsBytesSent"), ("ZHNVOICE", "voiceProfileLineStatsBytesReceived"), ("ZHNVOICE", "voiceProfileLineStatsPacketsLost"), ("ZHNVOICE", "voiceProfileLineStatsIncomingCallsReceived"), ("ZHNVOICE", "voiceProfileLineStatsIncomingCallsAnswered"), ("ZHNVOICE", "voiceProfileLineStatsIncomingCallsConnected"), ("ZHNVOICE", "voiceProfileLineStatsIncomingCallsFailed"), ("ZHNVOICE", "voiceProfileLineStatsOutgoingCallsAttempted"), ("ZHNVOICE", "voiceProfileLineStatsOutgoingCallsAnswered"), ("ZHNVOICE", "voiceProfileLineStatsOutgoingCallsConnected"), ("ZHNVOICE", "voiceProfileLineStatsOutgoingCallsFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVoiceProfileLineStatsGroup = zhnVoiceProfileLineStatsGroup.setStatus('current')
if mibBuilder.loadTexts: zhnVoiceProfileLineStatsGroup.setDescription('A collection of statistics, per Zhone Voice Line.')
zhnVoiceCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 2))
zhnVoiceCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5504, 2, 5, 40, 2, 2, 1)).setObjects(("ZHNVOICE", "zhnVoiceServiceGroup"), ("ZHNVOICE", "zhnVoiceCapabilitiesGroup"), ("ZHNVOICE", "zhnVoiceCapabilitiesCodecsGroup"), ("ZHNVOICE", "zhnVoiceProfileGroup"), ("ZHNVOICE", "zhnVoiceProfileServiceProviderGroup"), ("ZHNVOICE", "zhnVoiceProfileLineGroup"), ("ZHNVOICE", "zhnVoiceProfileLineProcessingGroup"), ("ZHNVOICE", "zhnVoiceProfileLineCodecsGroup"), ("ZHNVOICE", "zhnVoiceCapabilitiesSIPGroup"), ("ZHNVOICE", "zhnVoiceCapabilitiesMGCPGroup"), ("ZHNVOICE", "zhnVoiceProfileSIPGroup"), ("ZHNVOICE", "zhnVoiceProfileSIPEventSubscribeGroup"), ("ZHNVOICE", "zhnVoiceProfileMGCPEntry"), ("ZHNVOICE", "zhnVoiceProfileRTPEntry"), ("ZHNVOICE", "zhnVoiceProfileFaxT38Entry"), ("ZHNVOICE", "zhnVoiceNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnVoiceCompliance = zhnVoiceCompliance.setStatus('current')
if mibBuilder.loadTexts: zhnVoiceCompliance.setDescription('The Compliance statement for SNMP entities which manage display the Zhone CPE Voice Information')
mibBuilder.exportSymbols("ZHNVOICE", zhnVoiceProfileLineMGCPGroup=zhnVoiceProfileLineMGCPGroup, tlsKeyExchangeProtocols=tlsKeyExchangeProtocols, rtpRedundancy=rtpRedundancy, voiceProfileSIPUserAgentPort=voiceProfileSIPUserAgentPort, voiceProfileSIPEventSubscribeNotifierTransport=voiceProfileSIPEventSubscribeNotifierTransport, zhnVoiceProfileRTPEntry=zhnVoiceProfileRTPEntry, voiceProfileLines=voiceProfileLines, voiceProfileSpNum=voiceProfileSpNum, responseMap=responseMap, voiceProfileSIPRegistrarServer=voiceProfileSIPRegistrarServer, voiceProfileFaxT38Table=voiceProfileFaxT38Table, voiceProfileLogServerPort=voiceProfileLogServerPort, VoiceTransportValues=VoiceTransportValues, codec=codec, voiceProfileLineStatus=voiceProfileLineStatus, voiceProfileLogServer=voiceProfileLogServer, voiceProfileLinePhyReferenceList=voiceProfileLinePhyReferenceList, zhnVoiceProfileSIPEventSubscribeGroup=zhnVoiceProfileSIPEventSubscribeGroup, capabilities=capabilities, voiceProfileLineCodecPacketizationPeriod=voiceProfileLineCodecPacketizationPeriod, DTMFMethodValues=DTMFMethodValues, voiceProfileName=voiceProfileName, voiceProfileSIPVLANIDMark=voiceProfileSIPVLANIDMark, voiceProfileRTPLocalPortMax=voiceProfileRTPLocalPortMax, voiceProfileLineStatsIncomingCallsFailed=voiceProfileLineStatsIncomingCallsFailed, extensionsMGCP=extensionsMGCP, voiceProfileNumberOfEntries=voiceProfileNumberOfEntries, voiceProfilePersistentNotify=voiceProfilePersistentNotify, voiceProfileLineStatsOutgoingCallsAttempted=voiceProfileLineStatsOutgoingCallsAttempted, srtp=srtp, modemPassThrough=modemPassThrough, uriSchemes=uriSchemes, voiceProfileSIPProxyServer=voiceProfileSIPProxyServer, voiceProfileSIPToTagMatching=voiceProfileSIPToTagMatching, voiceProfileSIPEventSubscribeEntry=voiceProfileSIPEventSubscribeEntry, voiceProfileFaxT38Enable=voiceProfileFaxT38Enable, voiceServiceIndex=voiceServiceIndex, digitMapCapabilities=digitMapCapabilities, voiceProfileSIPEventSubscribeNotifier=voiceProfileSIPEventSubscribeNotifier, voiceProfileSIPUserAgentDomain=voiceProfileSIPUserAgentDomain, voiceProfileLineCMAcntNum=voiceProfileLineCMAcntNum, voiceProfileLineStatsTable=voiceProfileLineStatsTable, maxSessionCount=maxSessionCount, rtcp=rtcp, ethernetTaggingCoupled=ethernetTaggingCoupled, capabilitiesEntry=capabilitiesEntry, voiceProfileSIPProxyServerPort=voiceProfileSIPProxyServerPort, capabilitiesSIPEntry=capabilitiesSIPEntry, voicePortTests=voicePortTests, voiceProfileEntry=voiceProfileEntry, voiceProfileEnable=voiceProfileEnable, voiceProfileSIPEventSubscribeEvent=voiceProfileSIPEventSubscribeEvent, voiceProfileSIPRegistrationPeriod=voiceProfileSIPRegistrationPeriod, voiceProfileLineSIPEntry=voiceProfileLineSIPEntry, voiceProfileLineStatsPacketsSent=voiceProfileLineStatsPacketsSent, voiceProfileLineSIPPlarUserName=voiceProfileLineSIPPlarUserName, voiceProfileLineStatsIncomingCallsConnected=voiceProfileLineStatsIncomingCallsConnected, zhnVoiceCapabilitiesMGCPGroup=zhnVoiceCapabilitiesMGCPGroup, zhnVoiceCapabilitiesCodecsGroup=zhnVoiceCapabilitiesCodecsGroup, voiceProfileRegion=voiceProfileRegion, voiceProfileDtmfMethod=voiceProfileDtmfMethod, bitRate=bitRate, voiceProfileLineCodec=voiceProfileLineCodec, zhnVoiceProfileLineGroup=zhnVoiceProfileLineGroup, VoiceProfileLineStateType=VoiceProfileLineStateType, voiceProfileSIPEthernetPriorityMark=voiceProfileSIPEthernetPriorityMark, voiceProfileSIPRegistrarServerPort=voiceProfileSIPRegistrarServerPort, zhnVoiceProfileLineCodecsGroup=zhnVoiceProfileLineCodecsGroup, voiceBoundIpAddr=voiceBoundIpAddr, voiceProfileLineMGCPEntry=voiceProfileLineMGCPEntry, voiceProfileSIPRegistrarServerTransport=voiceProfileSIPRegistrarServerTransport, maxSessionsPerLine=maxSessionsPerLine, VoiceProfileAddressModes=VoiceProfileAddressModes, voiceProfileStunServerPort=voiceProfileStunServerPort, voiceProfileLineSIPTable=voiceProfileLineSIPTable, dscpCoupled=dscpCoupled, voiceProfileDigitMapEnable=voiceProfileDigitMapEnable, voiceProfileLineProcessingTable=voiceProfileLineProcessingTable, voiceProfileServiceProviderEntry=voiceProfileServiceProviderEntry, voiceProfileLineStatsBytesSent=voiceProfileLineStatsBytesSent, voiceProfileLineEntry=voiceProfileLineEntry, voiceProfileTable=voiceProfileTable, voiceProfileLineCallingFeatureMaxSessions=voiceProfileLineCallingFeatureMaxSessions, voiceProfileLineCallingFeaturesTable=voiceProfileLineCallingFeaturesTable, voiceProfileServiceProviderTable=voiceProfileServiceProviderTable, voiceProfileLineEnable=voiceProfileLineEnable, voiceProfileLineProcessingEntry=voiceProfileLineProcessingEntry, capabilitiesSIPTable=capabilitiesSIPTable, voiceProfileSIPDSCPMark=voiceProfileSIPDSCPMark, voiceProfileLineStatsOutgoingCallsAnswered=voiceProfileLineStatsOutgoingCallsAnswered, voiceProfileLineCodecTable=voiceProfileLineCodecTable, zhnVoiceCapabilitiesSIPGroup=zhnVoiceCapabilitiesSIPGroup, numberingPlan=numberingPlan, pstnSoftSwitchOver=pstnSoftSwitchOver, zhnVoiceProfileServiceProviderGroup=zhnVoiceProfileServiceProviderGroup, voiceProfileLineStatsEntry=voiceProfileLineStatsEntry, voiceProfileSIPInterdigitTimeout=voiceProfileSIPInterdigitTimeout, voiceProfileLineCallState=voiceProfileLineCallState, transports=transports, capabilitiesCodecsTable=capabilitiesCodecsTable, voiceProfileSIPOrganization=voiceProfileSIPOrganization, voiceProfileLineCallingFeatureMWIEnable=voiceProfileLineCallingFeatureMWIEnable, voiceProfileSIPUserAgentTransport=voiceProfileSIPUserAgentTransport, voiceProfileSIPAddressMode=voiceProfileSIPAddressMode, PYSNMP_MODULE_ID=zhnVoice, voiceProfileServiceProviderName=voiceProfileServiceProviderName, voiceProfileSIPRegisterRetryInterval=voiceProfileSIPRegisterRetryInterval, capabilitiesMGCPEntry=capabilitiesMGCPEntry, voiceProfileSIPEventSubscribeNotifierPort=voiceProfileSIPEventSubscribeNotifierPort, ringGeneration=ringGeneration, capabilitiesMGCPTable=capabilitiesMGCPTable, voiceProfiles=voiceProfiles, voiceProfileLineCodecPriority=voiceProfileLineCodecPriority, voiceProfileLineCodecBitRate=voiceProfileLineCodecBitRate, voiceProfileLineDirectoryNumber=voiceProfileLineDirectoryNumber, voiceProfileLineCodecSilenceSuppression=voiceProfileLineCodecSilenceSuppression, voiceProfileLineStatsOutgoingCallsConnected=voiceProfileLineStatsOutgoingCallsConnected, voiceProfileSignalingProtocol=voiceProfileSignalingProtocol, voiceProfileReset=voiceProfileReset, toneGeneration=toneGeneration, voiceProfileLineStatsPacketsLost=voiceProfileLineStatsPacketsLost, voiceProfileV18Support=voiceProfileV18Support, VoiceProfileSwitchTypes=VoiceProfileSwitchTypes, voiceServiceEntry=voiceServiceEntry, voiceProfileRTPLocalPortMin=voiceProfileRTPLocalPortMin, voiceBoundIfName=voiceBoundIfName, voiceProfileFaxT38HighSpeedPacketRate=voiceProfileFaxT38HighSpeedPacketRate, voiceProfileLineMGCPTable=voiceProfileLineMGCPTable, voiceProfileLineCodecEntry=voiceProfileLineCodecEntry, voiceProfileLineStatsPacketsReceived=voiceProfileLineStatsPacketsReceived, zhnVoiceProfileSIPGroup=zhnVoiceProfileSIPGroup, zhnVoiceProfileLineStatsGroup=zhnVoiceProfileLineStatsGroup, maxLineCount=maxLineCount, voiceProfileLineCallingFeatureCallerIDEnable=voiceProfileLineCallingFeatureCallerIDEnable, voiceProfileFaxT38Entry=voiceProfileFaxT38Entry, zhnVoiceProfileMGCPEntry=zhnVoiceProfileMGCPEntry, packetizationPeriod=packetizationPeriod, voiceProfileSIPEntry=voiceProfileSIPEntry, voiceProfileLineOnhook=voiceProfileLineOnhook, voiceProfileSIPEventSubscribeTable=voiceProfileSIPEventSubscribeTable, voiceProfileLineTable=voiceProfileLineTable, voiceProfileSIPRegisterExpires=voiceProfileSIPRegisterExpires, faxPassThrough=faxPassThrough, voiceProfileLineSIPAuthPassword=voiceProfileLineSIPAuthPassword, capabilitiesCodecsEntry=capabilitiesCodecsEntry, zhnVoiceGroups=zhnVoiceGroups, voiceProfileRTPTelephoneEventPayloadType=voiceProfileRTPTelephoneEventPayloadType, voiceProfileStunServer=voiceProfileStunServer, voiceProfileLineEchoCancellationEnable=voiceProfileLineEchoCancellationEnable, voiceProfileLineStatsBytesReceived=voiceProfileLineStatsBytesReceived, voiceProfileDtmfMethodG711=voiceProfileDtmfMethodG711, voiceProfileIndex=voiceProfileIndex, voiceProfileLineIndex=voiceProfileLineIndex, voiceProfileLineCallingFeaturesEntry=voiceProfileLineCallingFeaturesEntry, HookFlashMethodValues=HookFlashMethodValues, voiceProfileRTPEntry=voiceProfileRTPEntry, voiceProfileLineStatsIncomingCallsReceived=voiceProfileLineStatsIncomingCallsReceived, voiceProfileFaxT38BitRate=voiceProfileFaxT38BitRate, voiceProfileLineCodecEnable=voiceProfileLineCodecEnable, zhnVoice=zhnVoice, zhnVoiceProfileLineProcessingGroup=zhnVoiceProfileLineProcessingGroup, voiceProfileMGCPCallAgent1=voiceProfileMGCPCallAgent1, zhnVoiceConformance=zhnVoiceConformance, zhnVoiceLineCallingFeaturesGroup=zhnVoiceLineCallingFeaturesGroup, zhnVoiceCompliance=zhnVoiceCompliance, voiceProfileLineRowStatus=voiceProfileLineRowStatus, extensionsSIP=extensionsSIP, voiceProfileSIPOutboundProxyPort=voiceProfileSIPOutboundProxyPort, zhnVoiceProfileFaxT38Entry=zhnVoiceProfileFaxT38Entry, eventSubscription=eventSubscription, zhnVoiceNotifications=zhnVoiceNotifications, role=role, voiceProfileStunEnable=voiceProfileStunEnable, zhnVoiceServiceObjects=zhnVoiceServiceObjects, voiceProfileSIPMusicServerPort=voiceProfileSIPMusicServerPort, zhnVoiceCapabilitiesGroup=zhnVoiceCapabilitiesGroup, zhnVoiceServiceGroup=zhnVoiceServiceGroup, voiceProfileRTPTable=voiceProfileRTPTable, voiceProfileMGCPEntry=voiceProfileMGCPEntry, voiceProfileRTPDSCPMark=voiceProfileRTPDSCPMark, voiceProfileLineSIPURI=voiceProfileLineSIPURI, voiceProfileLineCodecIndex=voiceProfileLineCodecIndex, voiceProfileSIPMusicServer=voiceProfileSIPMusicServer, silenceSuppression=silenceSuppression, voiceServiceTable=voiceServiceTable, buttonMap=buttonMap, zhnVoiceProfileLineSIPGroup=zhnVoiceProfileLineSIPGroup, voiceProfileMGCPUser=voiceProfileMGCPUser, signalingProtocols=signalingProtocols, voiceProfileSIPPlarGateway=voiceProfileSIPPlarGateway, voiceRegistrationUp=voiceRegistrationUp, voiceProfileLineStatsOutgoingCallsFailed=voiceProfileLineStatsOutgoingCallsFailed, voiceProfileMGCPAddressMode=voiceProfileMGCPAddressMode, voiceProfileSwitchType=voiceProfileSwitchType, voiceRegistrationDown=voiceRegistrationDown, RegionValues=RegionValues, voiceProfileSIPOutboundProxy=voiceProfileSIPOutboundProxy, voiceProfileLineSIPAuthUserName=voiceProfileLineSIPAuthUserName, voiceProfileLineTransmitGain=voiceProfileLineTransmitGain, voiceProfileMGCPTable=voiceProfileMGCPTable, voiceProfileSIPTable=voiceProfileSIPTable, voiceProfileNumberOfLines=voiceProfileNumberOfLines, VoiceLineStatusValues=VoiceLineStatusValues, voiceProfileLineCallingFeatureCallWaitingEnable=voiceProfileLineCallingFeatureCallWaitingEnable, faxT38=faxT38, voiceProfileLineEchoCancellationInUse=voiceProfileLineEchoCancellationInUse, maxProfileCount=maxProfileCount, voiceProfileSIPProxyServerTransport=voiceProfileSIPProxyServerTransport, voiceProfileLineMGCPLineName=voiceProfileLineMGCPLineName, voiceProfileLineReceiveGain=voiceProfileLineReceiveGain, voiceProfileLineCodecEntryID=voiceProfileLineCodecEntryID, zhnVoiceNotificationGroup=zhnVoiceNotificationGroup, capabilitiesTable=capabilitiesTable, codecIndex=codecIndex, regions=regions, VoiceLineCallStateValues=VoiceLineCallStateValues, zhnVoiceCompliances=zhnVoiceCompliances, voiceProfileSIPPlarPort=voiceProfileSIPPlarPort, voiceProfileHookFlashMethod=voiceProfileHookFlashMethod, entryID=entryID, zhnVoiceProfileGroup=zhnVoiceProfileGroup, voiceProfileLineStatsIncomingCallsAnswered=voiceProfileLineStatsIncomingCallsAnswered, voiceProfileLineCallingFeatureCallerIDName=voiceProfileLineCallingFeatureCallerIDName, voiceProfileMaxSessions=voiceProfileMaxSessions, voiceProfileDigitMap=voiceProfileDigitMap)
