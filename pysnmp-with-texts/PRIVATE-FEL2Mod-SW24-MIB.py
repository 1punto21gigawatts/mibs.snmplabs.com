#
# PySNMP MIB module PRIVATE-FEL2Mod-SW24-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PRIVATE-FEL2Mod-SW24-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:42:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
enterprises, Counter64, IpAddress, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, iso, Bits, ObjectIdentity, MibIdentifier, ModuleIdentity, Counter32, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Counter64", "IpAddress", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "iso", "Bits", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Counter32", "Integer32", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
privatetech = ModuleIdentity((1, 3, 6, 1, 4, 1, 5205))
if mibBuilder.loadTexts: privatetech.setLastUpdated('200607030000Z')
if mibBuilder.loadTexts: privatetech.setOrganization('xxx Tech Corp.')
if mibBuilder.loadTexts: privatetech.setContactInfo('xxx')
if mibBuilder.loadTexts: privatetech.setDescription('The MIB module is for xxx Tech.')
switch = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2))
feL2ModSW24ProductID = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19))
feL2ModSW24Produces = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1))
feL2ModSW24System = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1))
feL2ModSW24CommonSys = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 1))
feL2ModSW24Reboot = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24Reboot.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24Reboot.setDescription('Reboot the system. Get this OID always return zero. 0 - do nothing 1 - Reboot without saving start 2 - Reboot with saving start')
feL2ModSW24BiosVsersion = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24BiosVsersion.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24BiosVsersion.setDescription('Get the BIOS version of the system.')
feL2ModSW24FirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24FirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24FirmwareVersion.setDescription('Get the firmware version of the system.')
feL2ModSW24HardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24HardwareVersion.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24HardwareVersion.setDescription('Get the hardware version of the system.')
feL2ModSW24MechanicalVersion = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24MechanicalVersion.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24MechanicalVersion.setDescription('Get the mechanical version of the system.')
feL2ModSW24SerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24SerialNumber.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SerialNumber.setDescription('Get the Serial number of the system.')
feL2ModSW24HostMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24HostMacAddress.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24HostMacAddress.setDescription('Get the MAC address of the system.')
feL2ModSW24DevicePort = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24DevicePort.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24DevicePort.setDescription('Get the quantity of ports that this system owns now.')
feL2ModSW24RamSize = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24RamSize.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24RamSize.setDescription('Get the RAM size of the system.')
feL2ModSW24FlashSize = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24FlashSize.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24FlashSize.setDescription('Get the flash size of the system.')
feL2ModSW24IP = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 2))
feL2ModSW24DhcpSetting = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24DhcpSetting.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24DhcpSetting.setDescription('Get/Set DHCP status of the system. 0 - DHCP disable 1 - DHCP enable')
feL2ModSW24IPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24IPAddress.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24IPAddress.setDescription("Get/Set the IP address of the system. You can't set this OID if DHCP status is enabled.")
feL2ModSW24NetMask = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24NetMask.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24NetMask.setDescription("Get/Set the subnet mask of the system. You can't set this OID if DHCP status is enabled.")
feL2ModSW24DefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24DefaultGateway.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24DefaultGateway.setDescription("Get/Set the default gateway of the system. You can't set this OID if DHCP status is enabled.")
feL2ModSW24DnsSetting = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24DnsSetting.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24DnsSetting.setDescription("Get/Set the source of DNS server. You can't set this OID if DHCP status is disabled. 0 - manual, the DNS server is from manual setting 1 - auto, the DNS server is assigned by DHCP server.")
feL2ModSW24DnsServer = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24DnsServer.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24DnsServer.setDescription('Get/Set the DNS server of the system.')
feL2ModSW24Time = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 3))
feL2ModSW24SystemCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24SystemCurrentTime.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SystemCurrentTime.setDescription('Get the current time of the system.')
feL2ModSW24ManualTimeSetting = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24ManualTimeSetting.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24ManualTimeSetting.setDescription("Get/Set the system time of the device. The input format is 'Year/Month/Day/Hour/Minute/Second'. ex: 2004/1/1/12/34/25 means 2004/1/1 - 12:24:25 . The value range: Year : 2000 - 2036, Mouth : 1 - 12, Day : 1 - 31, Hour : 0 - 23, Minute : 0 - 59, Sec : 0 - 59.")
feL2ModSW24NTPServer = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24NTPServer.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24NTPServer.setDescription('Get/Set the NTP Time Server. You can use the IP address or domain name.')
feL2ModSW24NTPTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24NTPTimeZone.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24NTPTimeZone.setDescription('Get/Set the NTP Time Zone. The value range is between -12 and 13 -12 - GMT -12:00, -11 - GMT -11:00, -10 - GMT -10:00, -9 - GMT -09:00, -8 - GMT -08:00, -7 - GMT -07:00, -6 - GMT -06:00, -5 - GMT -05:00, -4 - GMT -04:00, -3 - GMT -03:00, -2 - GMT -02:00, -1 - GMT -01:00, 0 - GMT +00:00, 1 - GMT +01:00, 2 - GMT +02:00, 3 - GMT +03:00, 4 - GMT +04:00, 5 - GMT +05:00, 6 - GMT +06:00, 7 - GMT +07:00, 8 - GMT +08:00, 9 - GMT +09:00, 10 - GMT +10:00, 11 - GMT +11:00, 12 - GMT +12:00, 13 - GMT +13:00. ')
feL2ModSW24NTPTimeSync = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24NTPTimeSync.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24NTPTimeSync.setDescription('Sync time from NTP Server. Get this OID always return zero. Set the Time Server and Time Zone before doing time sync. Notice that time server must be correct! The value range (0|1): 1 - sync. 0 - do nothing.')
feL2ModSW24DaylightSavingTime = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24DaylightSavingTime.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24DaylightSavingTime.setDescription('Get/Set the daylight saving time. The value range is between -5 and 5. (Unit: hour)')
feL2ModSW24DaylightStartTime = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24DaylightStartTime.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24DaylightStartTime.setDescription("Get/Set the Start time of Daylight Saving. The input format is 'MM/DD/HH', and daylight saving start month can't equal end month. example: month/day/hour 10/01/00 month: 01~12, day: 01~31, hour: 00~23 .")
feL2ModSW24DaylightEndTime = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 3, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24DaylightEndTime.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24DaylightEndTime.setDescription("Get/Set the End time of Daylight Saving. The input format is 'MM/DD/HH', and daylight saving start month can't equal end month. example: month/day/hour 04/01/00 month: 01~12, day: 01~31, hour: 00~23 .")
feL2ModSW24Account = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 4))
feL2ModSW24AccountNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24AccountNumber.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24AccountNumber.setDescription('Get the current account number(s) of the system.')
feL2ModSW24AccountTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 4, 2), )
if mibBuilder.loadTexts: feL2ModSW24AccountTable.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24AccountTable.setDescription('This is a list of FEL2ModSW24AccountEntry. The numbers of entries are given by the value of feL2ModSW24AccountNumber.')
feL2ModSW24AccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 4, 2, 1), ).setIndexNames((0, "PRIVATE-FEL2Mod-SW24-MIB", "feL2ModSW24AccountIndex"))
if mibBuilder.loadTexts: feL2ModSW24AccountEntry.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24AccountEntry.setDescription('This is the Entry(s) for account information.')
feL2ModSW24AccountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24AccountIndex.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24AccountIndex.setDescription('This is the index of the account entry.')
feL2ModSW24AccountAuthorization = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24AccountAuthorization.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24AccountAuthorization.setDescription('This is the authorization of the account entry.')
feL2ModSW24AccountName = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 4, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24AccountName.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24AccountName.setDescription('This is the username of the account entry.')
feL2ModSW24AccountPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 4, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24AccountPassword.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24AccountPassword.setDescription("This is the password of the account entry. The return value is always '********'.")
feL2ModSW24AccountAddName = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24AccountAddName.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24AccountAddName.setDescription('This is the account name for adding operation.')
feL2ModSW24AccountAddPassword = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 4, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24AccountAddPassword.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24AccountAddPassword.setDescription("This is the account password for adding operation. The return value is always '********'.")
feL2ModSW24DoAccountAdd = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24DoAccountAdd.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24DoAccountAdd.setDescription('Add account name. OID feL2ModSW24AccountAddName and feL2ModSW24AccountAddPassword must be filled first. Get this OID always return zero. 1 - add account. 0 - do nothing.')
feL2ModSW24AccountDel = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 1, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24AccountDel.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24AccountDel.setDescription("Delete account. The value is valid feL2ModSW24AccountIndex(Can't delete administrator).")
feL2ModSW24Snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 2))
feL2ModSW24GetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24GetCommunity.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24GetCommunity.setDescription('Get/Set the get-community of the SNMP.')
feL2ModSW24SetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24SetCommunity.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SetCommunity.setDescription('Get/Set the set-community of the SNMP.')
feL2ModSW24TrapHostNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24TrapHostNumber.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24TrapHostNumber.setDescription('Get the number of trap hosts.')
feL2ModSW24TrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 2, 4), )
if mibBuilder.loadTexts: feL2ModSW24TrapHostTable.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24TrapHostTable.setDescription('A list of trap host entry. The numbers of entries are given by the value of feL2ModSW24TrapHostNumber.')
feL2ModSW24TrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 2, 4, 1), ).setIndexNames((0, "PRIVATE-FEL2Mod-SW24-MIB", "feL2ModSW24TrapHostIndex"))
if mibBuilder.loadTexts: feL2ModSW24TrapHostEntry.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24TrapHostEntry.setDescription('This is the entry information for trap host.')
feL2ModSW24TrapHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24TrapHostIndex.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24TrapHostIndex.setDescription('The index of the trap host entry.')
feL2ModSW24TrapHostIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 2, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24TrapHostIP.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24TrapHostIP.setDescription('This is the IP of the trap host.')
feL2ModSW24TrapHostPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24TrapHostPort.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24TrapHostPort.setDescription('This is the receiving-port number of the trap host.')
feL2ModSW24TrapHostCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 2, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24TrapHostCommunity.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24TrapHostCommunity.setDescription('The community name for the trap PDU.')
feL2ModSW24Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3))
feL2ModSW24Event = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 1))
feL2ModSW24EventNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24EventNumber.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24EventNumber.setDescription('Get the total number of alarm events.')
feL2ModSW24EventTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 1, 2), )
if mibBuilder.loadTexts: feL2ModSW24EventTable.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24EventTable.setDescription('A list of alarm event entry. The numbers of entries are given by the value of feL2ModSW24EventNumber.')
feL2ModSW24EventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 1, 2, 1), ).setIndexNames((0, "PRIVATE-FEL2Mod-SW24-MIB", "feL2ModSW24EventIndex"))
if mibBuilder.loadTexts: feL2ModSW24EventEntry.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24EventEntry.setDescription('This is the entry information for alarm event.')
feL2ModSW24EventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24EventIndex.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24EventIndex.setDescription('This is the index of the alarm event entry.')
feL2ModSW24EventName = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24EventName.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24EventName.setDescription('This is the alarm event name.')
feL2ModSW24EventSendEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24EventSendEmail.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24EventSendEmail.setDescription('Send email when alarm event is triggered.')
feL2ModSW24EventSendSMS = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24EventSendSMS.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24EventSendSMS.setDescription('Send SMS when alarm event is triggered.')
feL2ModSW24EventSendTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24EventSendTrap.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24EventSendTrap.setDescription('Send trap when alarm event is triggered.')
feL2ModSW24Email = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 2))
feL2ModSW24EmailServer = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24EmailServer.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24EmailServer.setDescription('This is the SMTP server for alarm event.')
feL2ModSW24EmailUsername = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24EmailUsername.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24EmailUsername.setDescription('This is the Username of SMTP server.')
feL2ModSW24EmailPassword = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24EmailPassword.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24EmailPassword.setDescription('This is the User Password of SMTP server.')
feL2ModSW24EmailUserNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24EmailUserNumber.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24EmailUserNumber.setDescription('The number of the email users that you want to send the alarm notification.')
feL2ModSW24EmailUserTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 2, 5), )
if mibBuilder.loadTexts: feL2ModSW24EmailUserTable.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24EmailUserTable.setDescription('This is a list of email user entry. The numbers of entries are given by the value of feL2ModSW24EmailUserNumber.')
feL2ModSW24EmailUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 2, 5, 1), ).setIndexNames((0, "PRIVATE-FEL2Mod-SW24-MIB", "feL2ModSW24EmailUserIndex"))
if mibBuilder.loadTexts: feL2ModSW24EmailUserEntry.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24EmailUserEntry.setDescription('This is the Entry information for email user entry.')
feL2ModSW24EmailUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24EmailUserIndex.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24EmailUserIndex.setDescription('This is the index of the email user entry.')
feL2ModSW24EmailUserAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 2, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24EmailUserAddress.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24EmailUserAddress.setDescription('This is the email address of the email user entry.')
feL2ModSW24SMS = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 3))
feL2ModSW24SMSServer = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24SMSServer.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SMSServer.setDescription('This is the SMS server for alarm event.')
feL2ModSW24SMSUsername = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24SMSUsername.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SMSUsername.setDescription('This is the Username of SMS server.')
feL2ModSW24SMSPassword = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24SMSPassword.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SMSPassword.setDescription('This is the Password of SMS server.')
feL2ModSW24SMSUserNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24SMSUserNumber.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SMSUserNumber.setDescription('The number of the SMS users that you want to send the alarm notification.')
feL2ModSW24SMSUserTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 3, 5), )
if mibBuilder.loadTexts: feL2ModSW24SMSUserTable.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SMSUserTable.setDescription('This is a list of SMS user entry. The numbers of entries are given by the value of feL2ModSW24SMSUserNumber.')
feL2ModSW24SMSUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 3, 5, 1), ).setIndexNames((0, "PRIVATE-FEL2Mod-SW24-MIB", "feL2ModSW24SMSUserIndex"))
if mibBuilder.loadTexts: feL2ModSW24SMSUserEntry.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SMSUserEntry.setDescription('This is the Entry information for SMS user entry.')
feL2ModSW24SMSUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24SMSUserIndex.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SMSUserIndex.setDescription('This is the index of the SMS user entry.')
feL2ModSW24SMSUserMobilePhone = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 3, 3, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24SMSUserMobilePhone.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SMSUserMobilePhone.setDescription('The SMS phone number of the SMS user entry.')
feL2ModSW24Tftp = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 4))
feL2ModSW24TftpServer = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24TftpServer.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24TftpServer.setDescription('Get/Set the tftp server.')
feL2ModSW24Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 5))
feL2ModSW24SaveRestore = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 5, 1))
feL2ModSW24SaveStart = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24SaveStart.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SaveStart.setDescription('Save current configuration into flash memory (Save as Start Configuration). Get this OID always return zero. 1 - save. 0 - do nothing. ')
feL2ModSW24SaveUser = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24SaveUser.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SaveUser.setDescription('Save current configuration into flash memory (Save as User Configuration). Get this OID always return zero. 1 - save. 0 - do nothing. ')
feL2ModSW24RestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24RestoreDefault.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24RestoreDefault.setDescription('Restore factory default configuration. Get this OID always return zero. 2 - restore default included default ip address. 1 - restore default without changing current ip address. 0 - do nothing. ')
feL2ModSW24RestoreUser = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24RestoreUser.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24RestoreUser.setDescription('Restore user configuration. Get this OID always return zero. 1 - restore. 0 - do nothing. ')
feL2ModSW24ConfigFile = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 5, 2))
feL2ModSW24ExportConfigName = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 5, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24ExportConfigName.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24ExportConfigName.setDescription('Get/Set the export file path and name.')
feL2ModSW24DoExportConfig = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24DoExportConfig.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24DoExportConfig.setDescription('Do export-config. Get this oid always return zero. 1 - export start section. 2 - export user-conf section.')
feL2ModSW24ImportConfigName = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 5, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24ImportConfigName.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24ImportConfigName.setDescription('Get/Set the import file path and name.')
feL2ModSW24DoImportConfig = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24DoImportConfig.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24DoImportConfig.setDescription('Do import-config. Get this OID always return zero. 1 - import start section. 2 - import user-conf section.')
feL2ModSW24Diagnostic = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 6))
feL2ModSW24EEPROMTest = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24EEPROMTest.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24EEPROMTest.setDescription('EEPROM access test.')
feL2ModSW24UartTest = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24UartTest.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24UartTest.setDescription('UART access test.')
feL2ModSW24DramTest = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 6, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24DramTest.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24DramTest.setDescription('DRAM access test.')
feL2ModSW24FlashTest = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 6, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24FlashTest.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24FlashTest.setDescription('Flash memory access test.')
feL2ModSW24InternalLoopbackTest = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 6, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24InternalLoopbackTest.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24InternalLoopbackTest.setDescription('Internal loopback test.')
feL2ModSW24ExternalLoopbackTest = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 6, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24ExternalLoopbackTest.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24ExternalLoopbackTest.setDescription('External loopback test.')
feL2ModSW24PingTest = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 6, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24PingTest.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24PingTest.setDescription('Set the host address that you want to ping and the system will return the test result.')
feL2ModSW24Log = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 7))
feL2ModSW24ClearLog = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24ClearLog.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24ClearLog.setDescription('Clear system log. Get this OID always return zero. 1 - clear log. 0 - do nothing. ')
feL2ModSW24UploadLog = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24UploadLog.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24UploadLog.setDescription("Upload current system log. Set the correct tftp server first. The format of log file is 'ModelName_SerialNumbuer_YYMMDD_HHMM'. Get this OID always return zero. 1 - upload log 0 - do nothing. ")
feL2ModSW24AutoUploadLogState = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24AutoUploadLogState.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24AutoUploadLogState.setDescription("Enable auto-upload log function. Set the correct tftp server first. The format of log file is 'ModelName_SerialNumbuer_YYMMDD_HHMM'. Get this OID always return zero. 1 - Enable auto-upload 0 - do nothing. ")
feL2ModSW24LogNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24LogNumber.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24LogNumber.setDescription('Get the number of current system log. ')
feL2ModSW24LogTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 7, 5), )
if mibBuilder.loadTexts: feL2ModSW24LogTable.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24LogTable.setDescription('This is a list of log entry. The numbers of entries are given by the value of feL2ModSW24LogNumber.')
feL2ModSW24LogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 7, 5, 1), ).setIndexNames((0, "PRIVATE-FEL2Mod-SW24-MIB", "feL2ModSW24LogIndex"))
if mibBuilder.loadTexts: feL2ModSW24LogEntry.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24LogEntry.setDescription('This is the Entry information for system log.')
feL2ModSW24LogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24LogIndex.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24LogIndex.setDescription('This is the index of the log entry.')
feL2ModSW24LogEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 7, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24LogEvent.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24LogEvent.setDescription('This is the detail information of the log entry.')
feL2ModSW24Firmware = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 8))
feL2ModSW24FirmwareFileName = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 8, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24FirmwareFileName.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24FirmwareFileName.setDescription('Get/Set the path and filename for firmware upgrading.')
feL2ModSW24DoFirmwareUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24DoFirmwareUpgrade.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24DoFirmwareUpgrade.setDescription('Do firmware upgrade. Get this OID always return zero. 1 - do firmware upgrade. 0 - do nothing.')
feL2ModSW24Port = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9))
feL2ModSW24PortStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9, 1))
feL2ModSW24PortStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24PortStatusNumber.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24PortStatusNumber.setDescription('Get the number of port.')
feL2ModSW24PortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9, 1, 2), )
if mibBuilder.loadTexts: feL2ModSW24PortStatusTable.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24PortStatusTable.setDescription('This is a list of port status entry. The numbers of entries are given by the value of feL2ModSW24PortStatusNumber.')
feL2ModSW24PortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9, 1, 2, 1), ).setIndexNames((0, "PRIVATE-FEL2Mod-SW24-MIB", "feL2ModSW24PortStatusIndex"))
if mibBuilder.loadTexts: feL2ModSW24PortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24PortStatusEntry.setDescription('This is the entry(s) for port status information.')
feL2ModSW24PortStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24PortStatusIndex.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24PortStatusIndex.setDescription('This is the index of the port status entry.')
feL2ModSW24PortStatusMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24PortStatusMedia.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24PortStatusMedia.setDescription('The port media type of the port status entry.')
feL2ModSW24PortStatusLink = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24PortStatusLink.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24PortStatusLink.setDescription('This is the port link of the port status entry.')
feL2ModSW24PortStatusPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24PortStatusPortState.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24PortStatusPortState.setDescription('This is the port state of the port status entry.')
feL2ModSW24PortStatusAutoNego = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24PortStatusAutoNego.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24PortStatusAutoNego.setDescription('This is the auto negotiation of the port status entry.')
feL2ModSW24PortStatusSpdDpx = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24PortStatusSpdDpx.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24PortStatusSpdDpx.setDescription('This is the speed/duplex of the port status entry.')
feL2ModSW24PortStatusFlwCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24PortStatusFlwCtrl.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24PortStatusFlwCtrl.setDescription('This is the flow control of the port status entry.')
feL2ModSW24PortStatuDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24PortStatuDescription.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24PortStatuDescription.setDescription('The description of port.')
feL2ModSW24PortConf = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9, 2))
feL2ModSW24PortConfNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24PortConfNumber.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24PortConfNumber.setDescription('Get the number of port configuration.')
feL2ModSW24PortConfTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9, 2, 2), )
if mibBuilder.loadTexts: feL2ModSW24PortConfTable.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24PortConfTable.setDescription('This is a list of port configuration entry. The numbers of entries are given by the value of feL2ModSW24PortConfNumber.')
feL2ModSW24PortConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9, 2, 2, 1), ).setIndexNames((0, "PRIVATE-FEL2Mod-SW24-MIB", "feL2ModSW24PortConfIndex"))
if mibBuilder.loadTexts: feL2ModSW24PortConfEntry.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24PortConfEntry.setDescription('This is the Entry(s) for port configuration information.')
feL2ModSW24PortConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24PortConfIndex.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24PortConfIndex.setDescription('This is the index of the port configuration entry.')
feL2ModSW24PortConfPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24PortConfPortState.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24PortConfPortState.setDescription('This is the port state of the port configuration entry. 0 - disabled. 1 - enabled. ')
feL2ModSW24PortConfSpdDpx = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24PortConfSpdDpx.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24PortConfSpdDpx.setDescription('This is the speed/duplex of the port configuration entry. 0 - auto. 1 - 10M/Half. 2 - 10M/Full. 3 - 100M/Half. 4 - 100M/Full. 5 - 1G/Full. ')
feL2ModSW24PortConfFlwCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24PortConfFlwCtrl.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24PortConfFlwCtrl.setDescription('This is the flow control of the port configuration entry. 0 - disabled. 1 - enabled. ')
feL2ModSW24PortConfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 9, 2, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24PortConfDescription.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24PortConfDescription.setDescription('The description of port.')
feL2ModSW24Mirror = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 10))
feL2ModSW24MirrorMode = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24MirrorMode.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24MirrorMode.setDescription('Get/Set the Mirror mode. 0 - disabled. 1 - rx enable. ')
feL2ModSW24MirroringPort = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24MirroringPort.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24MirroringPort.setDescription('Get/Set the mirroring port. The port range is from 1 to 24.')
feL2ModSW24MirroredPorts = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 10, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24MirroredPorts.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24MirroredPorts.setDescription('Get/Set the monitored ports. The port range is from 1 to 24, and the syntax is 1,5-7.')
feL2ModSW24MaxPktLen = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 11))
feL2ModSW24MaxPktLen1 = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 11, 1))
feL2ModSW24MaxPktLenPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24MaxPktLenPortNumber.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24MaxPktLenPortNumber.setDescription('Get the number of Max. packet length.')
feL2ModSW24MaxPktLenConfTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 11, 1, 2), )
if mibBuilder.loadTexts: feL2ModSW24MaxPktLenConfTable.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24MaxPktLenConfTable.setDescription('This is a list of Max. packet length entry. The numbers of entries are given by the value of feL2ModSW24MaxPktLenPortNumber.')
feL2ModSW24MaxPktLenConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 11, 1, 2, 1), ).setIndexNames((0, "PRIVATE-FEL2Mod-SW24-MIB", "feL2ModSW24MaxPktLenConfIndex"))
if mibBuilder.loadTexts: feL2ModSW24MaxPktLenConfEntry.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24MaxPktLenConfEntry.setDescription('Entry(s) for Max. packet length information.')
feL2ModSW24MaxPktLenConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 11, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24MaxPktLenConfIndex.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24MaxPktLenConfIndex.setDescription('This is the index of the Max. packet length entry.')
feL2ModSW24MaxPktLenConfSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 11, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1518, 1518), ValueRangeConstraint(1532, 1532), ValueRangeConstraint(9216, 9216), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24MaxPktLenConfSetting.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24MaxPktLenConfSetting.setDescription('Get/Set the Max. packet length. The Max. packet length is 1518,1532,or 9216. ')
feL2ModSW24Bandwidth = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 12))
feL2ModSW24Bandwidth1 = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 12, 1))
feL2ModSW24BandwidthPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24BandwidthPortNumber.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24BandwidthPortNumber.setDescription('Get the number of bandwidth management configuration.')
feL2ModSW24BandwidthConfTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 12, 1, 2), )
if mibBuilder.loadTexts: feL2ModSW24BandwidthConfTable.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24BandwidthConfTable.setDescription('A list of bandwidth management configuration entry. The numbers of entries are given by the value of feL2ModSW24BandwidthPortNumber.')
feL2ModSW24BandwidthConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 12, 1, 2, 1), ).setIndexNames((0, "PRIVATE-FEL2Mod-SW24-MIB", "feL2ModSW24BandwidthConfIndex"))
if mibBuilder.loadTexts: feL2ModSW24BandwidthConfEntry.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24BandwidthConfEntry.setDescription('This is the Entry(s) for bandwidth management configuration information.')
feL2ModSW24BandwidthConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 12, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24BandwidthConfIndex.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24BandwidthConfIndex.setDescription('This is the index of the bandwidth management configuration entry.')
feL2ModSW24BandwidthConfIngressState = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 12, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24BandwidthConfIngressState.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24BandwidthConfIngressState.setDescription('The ingress state of the bandwidth management configures entry. 0 - disabled. 1 - enabled. ')
feL2ModSW24BandwidthConfIngressBW = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 12, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24BandwidthConfIngressBW.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24BandwidthConfIngressBW.setDescription('Get/Set the ingress rate of the bandwidth management configuration. The ingress rate is from 0 to 1000. ')
feL2ModSW24BandwidthConfStormState = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 12, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24BandwidthConfStormState.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24BandwidthConfStormState.setDescription('The storm state of the bandwidth management configuration entry. 0 - disabled. 1 - enabled. ')
feL2ModSW24BandwidthConfStormBW = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 12, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24BandwidthConfStormBW.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24BandwidthConfStormBW.setDescription('Get/Set the storm rate of the bandwidth management configuration. The storm rate is from 0 to 1000. ')
feL2ModSW24BandwidthConfEgressState = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 12, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24BandwidthConfEgressState.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24BandwidthConfEgressState.setDescription('The egress state of the bandwidth management configuration entry. 0 - disabled. 1 - enabled. ')
feL2ModSW24BandwidthConfEgressBW = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 12, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24BandwidthConfEgressBW.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24BandwidthConfEgressBW.setDescription('Get/Set the egress rate of the bandwidth management configuration. The egress rate is from 0 to 1000. ')
feL2ModSW24LoopDetectedConf = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 13))
feL2ModSW24LoopDetectedNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24LoopDetectedNumber.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24LoopDetectedNumber.setDescription('Get the number of loop detected entry.')
feL2ModSW24LoopDetectedTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 13, 2), )
if mibBuilder.loadTexts: feL2ModSW24LoopDetectedTable.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24LoopDetectedTable.setDescription('A list of loop detected entry. The numbers of entries are given by the value of feL2ModSW24LoopDetectedNumber.')
feL2ModSW24LoopDetectedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 13, 2, 1), ).setIndexNames((0, "PRIVATE-FEL2Mod-SW24-MIB", "feL2ModSW24LoopDetectedfIndex"))
if mibBuilder.loadTexts: feL2ModSW24LoopDetectedEntry.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24LoopDetectedEntry.setDescription('Entry(s) for loop detected information.')
feL2ModSW24LoopDetectedfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24LoopDetectedfIndex.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24LoopDetectedfIndex.setDescription('The index of the loop detected entry.')
feL2ModSW24LoopDetectedStateEbl = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24LoopDetectedStateEbl.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24LoopDetectedStateEbl.setDescription('The state of the loop detected entry. 0 - disabled. 1 - enabled. ')
feL2ModSW24LoopDetectedCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24LoopDetectedCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24LoopDetectedCurrentStatus.setDescription('The current status of the loop detected port. 0 - unlocked 1 - locked due to the loop condition ')
feL2ModSW24LoopDetectedResumed = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24LoopDetectedResumed.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24LoopDetectedResumed.setDescription('Unlock the port which is locked due to loop condition. Get this OID always return zero. 1 - unlock the port, 0 - do nothing.')
feL2ModSW24LoopDetectedAction = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: feL2ModSW24LoopDetectedAction.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24LoopDetectedAction.setDescription('Set the corresponding action while loop is detected. 1 - lock the loop port, 0 - do nothing.')
feL2ModSW24SFPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 14))
feL2ModSW24SFPInfoNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 14, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24SFPInfoNumber.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SFPInfoNumber.setDescription('Get the number of sfp info entry.')
feL2ModSW24SFPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 14, 2), )
if mibBuilder.loadTexts: feL2ModSW24SFPInfoTable.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SFPInfoTable.setDescription('A list of sfp info entry. The numbers of entries are given by the value of feL2ModSW24SFPInfoNumber.')
feL2ModSW24SFPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 14, 2, 1), ).setIndexNames((0, "PRIVATE-FEL2Mod-SW24-MIB", "feL2ModSW24SFPInfoIndex"))
if mibBuilder.loadTexts: feL2ModSW24SFPInfoEntry.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SFPInfoEntry.setDescription('Entry(s) for SFP information.')
feL2ModSW24SFPInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24SFPInfoIndex.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SFPInfoIndex.setDescription('The index of the sfp info entry.')
feL2ModSW24SFPConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 14, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24SFPConnectorType.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SFPConnectorType.setDescription('Get connector type of the sfp.')
feL2ModSW24SFPFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 14, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24SFPFiberType.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SFPFiberType.setDescription('Get fiber type of the sfp.')
feL2ModSW24SFPWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 14, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24SFPWavelength.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SFPWavelength.setDescription('Get tx central wavelength of the sfp.')
feL2ModSW24SFPBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 14, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24SFPBaudRate.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SFPBaudRate.setDescription('Get baud rate of the sfp.')
feL2ModSW24SFPVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 14, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24SFPVendorOUI.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SFPVendorOUI.setDescription('Get vendor OUI of the sfp.')
feL2ModSW24SFPVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 14, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24SFPVendorName.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SFPVendorName.setDescription('Get vendor name of the sfp.')
feL2ModSW24SFPVendorPN = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 14, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24SFPVendorPN.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SFPVendorPN.setDescription('Get vendor part number of the sfp.')
feL2ModSW24SFPVendorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 14, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24SFPVendorRev.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SFPVendorRev.setDescription('Get vendor revision number of the sfp.')
feL2ModSW24SFPVendorSN = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 14, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24SFPVendorSN.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SFPVendorSN.setDescription('Get vendor serial number of the sfp.')
feL2ModSW24SFPDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 14, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24SFPDateCode.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SFPDateCode.setDescription('Get data code of the sfp.')
feL2ModSW24SFPTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 14, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24SFPTemperature.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SFPTemperature.setDescription('Get current temperature of the sfp.')
feL2ModSW24SFPVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 14, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24SFPVcc.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SFPVcc.setDescription('Get current internal supply voltage of the sfp.')
feL2ModSW24SFPTxBias = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 14, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24SFPTxBias.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SFPTxBias.setDescription('Get current TX Bias of the sfp.')
feL2ModSW24SFPTxPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 14, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24SFPTxPWR.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SFPTxPWR.setDescription('Get current TX output power of the sfp.')
feL2ModSW24SFPRxPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 14, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feL2ModSW24SFPRxPWR.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24SFPRxPWR.setDescription('Get current Received Power of the sfp.')
feL2ModSW24TrapEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 20))
feL2ModSW24ModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 20, 1)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: feL2ModSW24ModuleInserted.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24ModuleInserted.setDescription('Send the trap when a module is inserted to the system. The OID value means the port number.')
feL2ModSW24ModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 20, 2)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: feL2ModSW24ModuleRemoved.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24ModuleRemoved.setDescription('Send the trap when a module is removed from the system. The OID value means the port number.')
feL2ModSW24LoopDetected = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 20, 5)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: feL2ModSW24LoopDetected.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24LoopDetected.setDescription('Send the trap when loop condition has been detected. The OID value means the port number.')
feL2ModSW24StpStateDisabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 20, 100))
if mibBuilder.loadTexts: feL2ModSW24StpStateDisabled.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24StpStateDisabled.setDescription('Send the trap when the operational state of STP is from enabled to disabled. ')
feL2ModSW24StpStateEnabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 20, 101))
if mibBuilder.loadTexts: feL2ModSW24StpStateEnabled.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24StpStateEnabled.setDescription('Send the trap when the operational state of STP is from disabled to enabled. ')
feL2ModSW24StpTopologyChanged = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 20, 102)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: feL2ModSW24StpTopologyChanged.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24StpTopologyChanged.setDescription('Send the trap when RSTP determines a port should enter the FORWARDING state (a topology change occurs). The OID value is the ifIndex of the port that produces the topology change')
feL2ModSW24LacpStateDisabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 20, 120)).setObjects(("IF-MIB", "ifIndex"), ("PRIVATE-FEL2Mod-SW24-MIB", "groupId"))
if mibBuilder.loadTexts: feL2ModSW24LacpStateDisabled.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24LacpStateDisabled.setDescription('Send the trap when the operational state of LACP is from enabled to disabled. The OID value means the disabled Group ID.')
feL2ModSW24LacpStateEnabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 20, 121)).setObjects(("IF-MIB", "ifIndex"), ("PRIVATE-FEL2Mod-SW24-MIB", "groupId"))
if mibBuilder.loadTexts: feL2ModSW24LacpStateEnabled.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24LacpStateEnabled.setDescription('Send the trap when the operational state of LACP is from disabled to enabled. The OID value means the disabled Group ID.')
feL2ModSW24LacpPortAdded = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 20, 123)).setObjects(("IF-MIB", "ifIndex"), ("PRIVATE-FEL2Mod-SW24-MIB", "actorkey"), ("PRIVATE-FEL2Mod-SW24-MIB", "partnerkey"))
if mibBuilder.loadTexts: feL2ModSW24LacpPortAdded.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24LacpPortAdded.setDescription("Send the trap when the state of port is in 'trunk ready'.")
feL2ModSW24LacpPortTrunkFailure = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 20, 124)).setObjects(("IF-MIB", "ifIndex"), ("PRIVATE-FEL2Mod-SW24-MIB", "actorkey"), ("PRIVATE-FEL2Mod-SW24-MIB", "partnerkey"))
if mibBuilder.loadTexts: feL2ModSW24LacpPortTrunkFailure.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24LacpPortTrunkFailure.setDescription('Send the trap when one port is not able to be aggregated due to duplex-mode of the port. ')
feL2ModSW24GvrpStateDisabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 20, 140))
if mibBuilder.loadTexts: feL2ModSW24GvrpStateDisabled.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24GvrpStateDisabled.setDescription('Send the trap when the operational state of GVRP is from enabled to disabled. ')
feL2ModSW24GvrpStateEnabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 20, 141))
if mibBuilder.loadTexts: feL2ModSW24GvrpStateEnabled.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24GvrpStateEnabled.setDescription('Send the trap when the operational state of LACP is from disabled to enabled. ')
feL2ModSW24VlanStateDisabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 20, 150))
if mibBuilder.loadTexts: feL2ModSW24VlanStateDisabled.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24VlanStateDisabled.setDescription('Send the trap when the operational state of vlan is from enabled to disabled. The OID value means the enabled Group ID. ')
feL2ModSW24VlanPortBaseEnabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 20, 151))
if mibBuilder.loadTexts: feL2ModSW24VlanPortBaseEnabled.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24VlanPortBaseEnabled.setDescription('Send the trap when the operational state of vlan is changed to port-based vlan.')
feL2ModSW24VlanTagBaseEnabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 20, 152))
if mibBuilder.loadTexts: feL2ModSW24VlanTagBaseEnabled.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24VlanTagBaseEnabled.setDescription('Send the trap when the operational state of vlan is changed to tag-based vlan.')
feL2ModSW24VlanMetroModeEnabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 20, 153)).setObjects(("PRIVATE-FEL2Mod-SW24-MIB", "uplink"))
if mibBuilder.loadTexts: feL2ModSW24VlanMetroModeEnabled.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24VlanMetroModeEnabled.setDescription('Send the trap when the operational state of vlan is changed to Metro-mode vlan. The OID value means the uplink port with this metro-mode vlan.')
feL2ModSW24VlanDoubleTagEnabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 20, 154))
if mibBuilder.loadTexts: feL2ModSW24VlanDoubleTagEnabled.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24VlanDoubleTagEnabled.setDescription('Send the trap when the operational state of vlan is changed to Double-tag vlan.')
feL2ModSW24UserLogin = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 20, 200)).setObjects(("PRIVATE-FEL2Mod-SW24-MIB", "username"))
if mibBuilder.loadTexts: feL2ModSW24UserLogin.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24UserLogin.setDescription('Send the trap when one user logins the system.')
feL2ModSW24UserLogout = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 20, 201)).setObjects(("PRIVATE-FEL2Mod-SW24-MIB", "username"))
if mibBuilder.loadTexts: feL2ModSW24UserLogout.setStatus('current')
if mibBuilder.loadTexts: feL2ModSW24UserLogout.setDescription('Send the trap when one user logouts the system.')
feL2ModSW24TrapVariable = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 21))
username = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 21, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: username.setStatus('current')
if mibBuilder.loadTexts: username.setDescription('System account name.')
groupId = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 21, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupId.setStatus('current')
if mibBuilder.loadTexts: groupId.setDescription('The Trunk group ID of LACP.')
actorkey = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 21, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: actorkey.setStatus('current')
if mibBuilder.loadTexts: actorkey.setDescription('This is the actor key information for LACP.')
partnerkey = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 21, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: partnerkey.setStatus('current')
if mibBuilder.loadTexts: partnerkey.setDescription('This is the partner key information for LACP.')
uplink = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 19, 1, 21, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplink.setStatus('current')
if mibBuilder.loadTexts: uplink.setDescription('Uplink port(s) in the metro-mode vlan.')
mibBuilder.exportSymbols("PRIVATE-FEL2Mod-SW24-MIB", feL2ModSW24PortConfFlwCtrl=feL2ModSW24PortConfFlwCtrl, feL2ModSW24ModuleRemoved=feL2ModSW24ModuleRemoved, feL2ModSW24NTPTimeSync=feL2ModSW24NTPTimeSync, feL2ModSW24SMSPassword=feL2ModSW24SMSPassword, feL2ModSW24ModuleInserted=feL2ModSW24ModuleInserted, feL2ModSW24SerialNumber=feL2ModSW24SerialNumber, feL2ModSW24SFPRxPWR=feL2ModSW24SFPRxPWR, feL2ModSW24SFPFiberType=feL2ModSW24SFPFiberType, feL2ModSW24LoopDetectedAction=feL2ModSW24LoopDetectedAction, feL2ModSW24AccountEntry=feL2ModSW24AccountEntry, feL2ModSW24TrapEntry=feL2ModSW24TrapEntry, feL2ModSW24BandwidthConfEgressBW=feL2ModSW24BandwidthConfEgressBW, feL2ModSW24Snmp=feL2ModSW24Snmp, feL2ModSW24BandwidthConfEgressState=feL2ModSW24BandwidthConfEgressState, feL2ModSW24LacpPortTrunkFailure=feL2ModSW24LacpPortTrunkFailure, feL2ModSW24PortStatusFlwCtrl=feL2ModSW24PortStatusFlwCtrl, feL2ModSW24GetCommunity=feL2ModSW24GetCommunity, feL2ModSW24PortConfEntry=feL2ModSW24PortConfEntry, feL2ModSW24EmailUsername=feL2ModSW24EmailUsername, feL2ModSW24HardwareVersion=feL2ModSW24HardwareVersion, feL2ModSW24Log=feL2ModSW24Log, feL2ModSW24DoAccountAdd=feL2ModSW24DoAccountAdd, feL2ModSW24MaxPktLen=feL2ModSW24MaxPktLen, feL2ModSW24MaxPktLenConfEntry=feL2ModSW24MaxPktLenConfEntry, feL2ModSW24LoopDetectedEntry=feL2ModSW24LoopDetectedEntry, feL2ModSW24DoFirmwareUpgrade=feL2ModSW24DoFirmwareUpgrade, feL2ModSW24DoExportConfig=feL2ModSW24DoExportConfig, feL2ModSW24LacpPortAdded=feL2ModSW24LacpPortAdded, feL2ModSW24EEPROMTest=feL2ModSW24EEPROMTest, feL2ModSW24GvrpStateDisabled=feL2ModSW24GvrpStateDisabled, PYSNMP_MODULE_ID=privatetech, feL2ModSW24EmailServer=feL2ModSW24EmailServer, feL2ModSW24PortStatus=feL2ModSW24PortStatus, feL2ModSW24BiosVsersion=feL2ModSW24BiosVsersion, feL2ModSW24SMSUsername=feL2ModSW24SMSUsername, feL2ModSW24MirroredPorts=feL2ModSW24MirroredPorts, feL2ModSW24NTPTimeZone=feL2ModSW24NTPTimeZone, feL2ModSW24TrapHostPort=feL2ModSW24TrapHostPort, feL2ModSW24MaxPktLenConfSetting=feL2ModSW24MaxPktLenConfSetting, feL2ModSW24Port=feL2ModSW24Port, feL2ModSW24BandwidthConfStormState=feL2ModSW24BandwidthConfStormState, feL2ModSW24NetMask=feL2ModSW24NetMask, feL2ModSW24Configuration=feL2ModSW24Configuration, feL2ModSW24LogEvent=feL2ModSW24LogEvent, feL2ModSW24PortConf=feL2ModSW24PortConf, feL2ModSW24LogEntry=feL2ModSW24LogEntry, feL2ModSW24AccountAuthorization=feL2ModSW24AccountAuthorization, feL2ModSW24SMSUserTable=feL2ModSW24SMSUserTable, feL2ModSW24ProductID=feL2ModSW24ProductID, feL2ModSW24StpStateDisabled=feL2ModSW24StpStateDisabled, feL2ModSW24PortStatusSpdDpx=feL2ModSW24PortStatusSpdDpx, feL2ModSW24SFPVendorSN=feL2ModSW24SFPVendorSN, feL2ModSW24ClearLog=feL2ModSW24ClearLog, feL2ModSW24LoopDetectedTable=feL2ModSW24LoopDetectedTable, actorkey=actorkey, feL2ModSW24BandwidthConfIngressState=feL2ModSW24BandwidthConfIngressState, feL2ModSW24BandwidthConfStormBW=feL2ModSW24BandwidthConfStormBW, feL2ModSW24MechanicalVersion=feL2ModSW24MechanicalVersion, feL2ModSW24PortStatusLink=feL2ModSW24PortStatusLink, feL2ModSW24EmailUserNumber=feL2ModSW24EmailUserNumber, feL2ModSW24EmailUserTable=feL2ModSW24EmailUserTable, feL2ModSW24EventSendTrap=feL2ModSW24EventSendTrap, uplink=uplink, feL2ModSW24SetCommunity=feL2ModSW24SetCommunity, feL2ModSW24PortConfPortState=feL2ModSW24PortConfPortState, feL2ModSW24PortStatusIndex=feL2ModSW24PortStatusIndex, feL2ModSW24LoopDetectedCurrentStatus=feL2ModSW24LoopDetectedCurrentStatus, feL2ModSW24TrapHostIndex=feL2ModSW24TrapHostIndex, feL2ModSW24EmailUserEntry=feL2ModSW24EmailUserEntry, feL2ModSW24PortConfTable=feL2ModSW24PortConfTable, feL2ModSW24TrapHostNumber=feL2ModSW24TrapHostNumber, feL2ModSW24IPAddress=feL2ModSW24IPAddress, feL2ModSW24ManualTimeSetting=feL2ModSW24ManualTimeSetting, feL2ModSW24SFPVendorRev=feL2ModSW24SFPVendorRev, feL2ModSW24RestoreDefault=feL2ModSW24RestoreDefault, feL2ModSW24SFPInfoTable=feL2ModSW24SFPInfoTable, feL2ModSW24MaxPktLenConfTable=feL2ModSW24MaxPktLenConfTable, feL2ModSW24AccountName=feL2ModSW24AccountName, feL2ModSW24FirmwareFileName=feL2ModSW24FirmwareFileName, feL2ModSW24DefaultGateway=feL2ModSW24DefaultGateway, feL2ModSW24LacpStateEnabled=feL2ModSW24LacpStateEnabled, groupId=groupId, feL2ModSW24EventTable=feL2ModSW24EventTable, feL2ModSW24PortStatusMedia=feL2ModSW24PortStatusMedia, feL2ModSW24AutoUploadLogState=feL2ModSW24AutoUploadLogState, feL2ModSW24MaxPktLenConfIndex=feL2ModSW24MaxPktLenConfIndex, feL2ModSW24Tftp=feL2ModSW24Tftp, feL2ModSW24PortStatuDescription=feL2ModSW24PortStatuDescription, privatetech=privatetech, feL2ModSW24AccountIndex=feL2ModSW24AccountIndex, feL2ModSW24ExportConfigName=feL2ModSW24ExportConfigName, feL2ModSW24ImportConfigName=feL2ModSW24ImportConfigName, feL2ModSW24MirrorMode=feL2ModSW24MirrorMode, feL2ModSW24HostMacAddress=feL2ModSW24HostMacAddress, feL2ModSW24MirroringPort=feL2ModSW24MirroringPort, feL2ModSW24EmailPassword=feL2ModSW24EmailPassword, feL2ModSW24BandwidthConfIndex=feL2ModSW24BandwidthConfIndex, feL2ModSW24SFPDateCode=feL2ModSW24SFPDateCode, feL2ModSW24BandwidthConfEntry=feL2ModSW24BandwidthConfEntry, feL2ModSW24LoopDetectedConf=feL2ModSW24LoopDetectedConf, feL2ModSW24VlanMetroModeEnabled=feL2ModSW24VlanMetroModeEnabled, feL2ModSW24SFPBaudRate=feL2ModSW24SFPBaudRate, feL2ModSW24DhcpSetting=feL2ModSW24DhcpSetting, feL2ModSW24LogIndex=feL2ModSW24LogIndex, feL2ModSW24DramTest=feL2ModSW24DramTest, feL2ModSW24EventSendSMS=feL2ModSW24EventSendSMS, username=username, feL2ModSW24FlashTest=feL2ModSW24FlashTest, feL2ModSW24LacpStateDisabled=feL2ModSW24LacpStateDisabled, feL2ModSW24AccountPassword=feL2ModSW24AccountPassword, feL2ModSW24SFPTemperature=feL2ModSW24SFPTemperature, feL2ModSW24EventIndex=feL2ModSW24EventIndex, feL2ModSW24InternalLoopbackTest=feL2ModSW24InternalLoopbackTest, feL2ModSW24LogNumber=feL2ModSW24LogNumber, feL2ModSW24UserLogin=feL2ModSW24UserLogin, feL2ModSW24AccountAddPassword=feL2ModSW24AccountAddPassword, feL2ModSW24Bandwidth=feL2ModSW24Bandwidth, feL2ModSW24BandwidthConfTable=feL2ModSW24BandwidthConfTable, feL2ModSW24AccountAddName=feL2ModSW24AccountAddName, feL2ModSW24SFPInfoNumber=feL2ModSW24SFPInfoNumber, feL2ModSW24DnsServer=feL2ModSW24DnsServer, feL2ModSW24SystemCurrentTime=feL2ModSW24SystemCurrentTime, feL2ModSW24NTPServer=feL2ModSW24NTPServer, feL2ModSW24CommonSys=feL2ModSW24CommonSys, feL2ModSW24DaylightEndTime=feL2ModSW24DaylightEndTime, feL2ModSW24TrapHostEntry=feL2ModSW24TrapHostEntry, feL2ModSW24EmailUserIndex=feL2ModSW24EmailUserIndex, feL2ModSW24UploadLog=feL2ModSW24UploadLog, feL2ModSW24SFPInfo=feL2ModSW24SFPInfo, feL2ModSW24TrapVariable=feL2ModSW24TrapVariable, feL2ModSW24Diagnostic=feL2ModSW24Diagnostic, feL2ModSW24EventNumber=feL2ModSW24EventNumber, feL2ModSW24SMSUserMobilePhone=feL2ModSW24SMSUserMobilePhone, feL2ModSW24PortStatusEntry=feL2ModSW24PortStatusEntry, feL2ModSW24PortConfNumber=feL2ModSW24PortConfNumber, feL2ModSW24AccountNumber=feL2ModSW24AccountNumber, feL2ModSW24LogTable=feL2ModSW24LogTable, feL2ModSW24DaylightSavingTime=feL2ModSW24DaylightSavingTime, feL2ModSW24IP=feL2ModSW24IP, feL2ModSW24DaylightStartTime=feL2ModSW24DaylightStartTime, feL2ModSW24PortStatusAutoNego=feL2ModSW24PortStatusAutoNego, feL2ModSW24LoopDetectedfIndex=feL2ModSW24LoopDetectedfIndex, feL2ModSW24SFPVendorOUI=feL2ModSW24SFPVendorOUI, feL2ModSW24FirmwareVersion=feL2ModSW24FirmwareVersion, feL2ModSW24LoopDetectedStateEbl=feL2ModSW24LoopDetectedStateEbl, feL2ModSW24SaveRestore=feL2ModSW24SaveRestore, feL2ModSW24SFPWavelength=feL2ModSW24SFPWavelength, feL2ModSW24PortConfSpdDpx=feL2ModSW24PortConfSpdDpx, feL2ModSW24SaveStart=feL2ModSW24SaveStart, feL2ModSW24SFPConnectorType=feL2ModSW24SFPConnectorType, feL2ModSW24SMSUserEntry=feL2ModSW24SMSUserEntry, feL2ModSW24PingTest=feL2ModSW24PingTest, feL2ModSW24Reboot=feL2ModSW24Reboot, partnerkey=partnerkey, feL2ModSW24PortConfIndex=feL2ModSW24PortConfIndex, feL2ModSW24Event=feL2ModSW24Event, feL2ModSW24PortStatusNumber=feL2ModSW24PortStatusNumber, feL2ModSW24Produces=feL2ModSW24Produces, feL2ModSW24SFPInfoEntry=feL2ModSW24SFPInfoEntry, feL2ModSW24RestoreUser=feL2ModSW24RestoreUser, feL2ModSW24TftpServer=feL2ModSW24TftpServer, feL2ModSW24MaxPktLen1=feL2ModSW24MaxPktLen1, feL2ModSW24BandwidthPortNumber=feL2ModSW24BandwidthPortNumber, feL2ModSW24LoopDetectedResumed=feL2ModSW24LoopDetectedResumed, feL2ModSW24SFPVcc=feL2ModSW24SFPVcc, feL2ModSW24VlanStateDisabled=feL2ModSW24VlanStateDisabled, feL2ModSW24SFPVendorPN=feL2ModSW24SFPVendorPN, feL2ModSW24VlanPortBaseEnabled=feL2ModSW24VlanPortBaseEnabled, feL2ModSW24System=feL2ModSW24System, feL2ModSW24DoImportConfig=feL2ModSW24DoImportConfig, feL2ModSW24SMSUserNumber=feL2ModSW24SMSUserNumber, switch=switch, feL2ModSW24RamSize=feL2ModSW24RamSize, feL2ModSW24ExternalLoopbackTest=feL2ModSW24ExternalLoopbackTest, feL2ModSW24SMSUserIndex=feL2ModSW24SMSUserIndex, feL2ModSW24SFPTxBias=feL2ModSW24SFPTxBias, feL2ModSW24MaxPktLenPortNumber=feL2ModSW24MaxPktLenPortNumber, feL2ModSW24Mirror=feL2ModSW24Mirror, feL2ModSW24PortConfDescription=feL2ModSW24PortConfDescription, feL2ModSW24AccountTable=feL2ModSW24AccountTable, feL2ModSW24UserLogout=feL2ModSW24UserLogout, feL2ModSW24FlashSize=feL2ModSW24FlashSize, feL2ModSW24SFPInfoIndex=feL2ModSW24SFPInfoIndex, feL2ModSW24DnsSetting=feL2ModSW24DnsSetting, feL2ModSW24Time=feL2ModSW24Time, feL2ModSW24VlanDoubleTagEnabled=feL2ModSW24VlanDoubleTagEnabled, feL2ModSW24TrapHostCommunity=feL2ModSW24TrapHostCommunity, feL2ModSW24SaveUser=feL2ModSW24SaveUser, feL2ModSW24SFPTxPWR=feL2ModSW24SFPTxPWR, feL2ModSW24EventSendEmail=feL2ModSW24EventSendEmail, feL2ModSW24ConfigFile=feL2ModSW24ConfigFile, feL2ModSW24AccountDel=feL2ModSW24AccountDel, feL2ModSW24Alarm=feL2ModSW24Alarm, feL2ModSW24LoopDetectedNumber=feL2ModSW24LoopDetectedNumber, feL2ModSW24StpStateEnabled=feL2ModSW24StpStateEnabled, feL2ModSW24SMSServer=feL2ModSW24SMSServer, feL2ModSW24SMS=feL2ModSW24SMS, feL2ModSW24EventEntry=feL2ModSW24EventEntry, feL2ModSW24LoopDetected=feL2ModSW24LoopDetected, feL2ModSW24DevicePort=feL2ModSW24DevicePort, feL2ModSW24Firmware=feL2ModSW24Firmware, feL2ModSW24TrapHostTable=feL2ModSW24TrapHostTable, feL2ModSW24StpTopologyChanged=feL2ModSW24StpTopologyChanged, feL2ModSW24BandwidthConfIngressBW=feL2ModSW24BandwidthConfIngressBW, feL2ModSW24Account=feL2ModSW24Account, feL2ModSW24GvrpStateEnabled=feL2ModSW24GvrpStateEnabled, feL2ModSW24TrapHostIP=feL2ModSW24TrapHostIP, feL2ModSW24PortStatusPortState=feL2ModSW24PortStatusPortState, feL2ModSW24PortStatusTable=feL2ModSW24PortStatusTable, feL2ModSW24EventName=feL2ModSW24EventName, feL2ModSW24SFPVendorName=feL2ModSW24SFPVendorName, feL2ModSW24VlanTagBaseEnabled=feL2ModSW24VlanTagBaseEnabled, feL2ModSW24EmailUserAddress=feL2ModSW24EmailUserAddress, feL2ModSW24UartTest=feL2ModSW24UartTest, feL2ModSW24Bandwidth1=feL2ModSW24Bandwidth1, feL2ModSW24Email=feL2ModSW24Email)
