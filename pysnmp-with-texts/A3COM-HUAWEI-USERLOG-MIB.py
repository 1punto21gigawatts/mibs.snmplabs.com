#
# PySNMP MIB module A3COM-HUAWEI-USERLOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-USERLOG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:07:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
huaweiMgmt, huaweiDatacomm, huawei = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "huaweiMgmt", "huaweiDatacomm", "huawei")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, IpAddress, Gauge32, TimeTicks, Unsigned32, NotificationType, Bits, MibIdentifier, ModuleIdentity, iso, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "IpAddress", "Gauge32", "TimeTicks", "Unsigned32", "NotificationType", "Bits", "MibIdentifier", "ModuleIdentity", "iso", "Integer32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hwUserLogMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18))
if mibBuilder.loadTexts: hwUserLogMIB.setLastUpdated('200304100000Z')
if mibBuilder.loadTexts: hwUserLogMIB.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwUserLogMIB.setContactInfo(' R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwUserLogMIB.setDescription('The A3COM-HUAWEI-USERLOG-MIB contains objects to Manage configuration and Monitor running state for userlog feature.')
hwUserlogObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1))
hwUserlogNatObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 1))
hwUserlogNatVersion = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserlogNatVersion.setStatus('current')
if mibBuilder.loadTexts: hwUserlogNatVersion.setDescription('NAT LOG version. Currently only version 1 is developed.')
hwUserlogNatSyslog = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogNatSyslog.setStatus('current')
if mibBuilder.loadTexts: hwUserlogNatSyslog.setDescription(' NAT LOG format. If 1, LOG format is sysLog. If 0, LOG format is UDP packet. UDP packet is the default format, and is recommended. ')
hwUserlogNatSourceIP = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogNatSourceIP.setStatus('current')
if mibBuilder.loadTexts: hwUserlogNatSourceIP.setDescription('The Source IP address of NAT LOG UDP packet.')
hwUserlogNatFlowBegin = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogNatFlowBegin.setStatus('current')
if mibBuilder.loadTexts: hwUserlogNatFlowBegin.setDescription(' Log the NAT flow when it is created. If 1, this function is enabled. If 0, this function is disabled. This function will be used when real-time monitor required. ')
hwUserlogNatActiveTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogNatActiveTime.setStatus('current')
if mibBuilder.loadTexts: hwUserlogNatActiveTime.setDescription(' The active time for long-time existed NAT flow. Unit: minute. Range: 10 minutes ~ 120 minutes. When setting it, NAT flow can be logged after an interval of active time. This function will be used when real-time monitor required. The default value 0 means real-time monitor function is disabled. ')
hwUserlogNatSlotCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 1, 6), )
if mibBuilder.loadTexts: hwUserlogNatSlotCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwUserlogNatSlotCfgInfoTable.setDescription('A table of NAT LOG configuration information for the specified slot.')
hwUserlogNatSlotCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 1, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-USERLOG-MIB", "hwUserlogNatCfgSlotNumber"))
if mibBuilder.loadTexts: hwUserlogNatSlotCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwUserlogNatSlotCfgInfoEntry.setDescription('NAT LOG Configuration Information Entry for a slot.')
hwUserlogNatCfgSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserlogNatCfgSlotNumber.setStatus('current')
if mibBuilder.loadTexts: hwUserlogNatCfgSlotNumber.setDescription('Slot number. Specify which slot is configured with NAT LOG. ')
hwUserlogNatEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 1, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogNatEnable.setStatus('current')
if mibBuilder.loadTexts: hwUserlogNatEnable.setDescription(' The NAT LOG feature Enable status. If 1, NAT LOG is enbled. If 0, NAT LOG is disabled. ')
hwUserlogNatAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 1, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogNatAclNumber.setStatus('current')
if mibBuilder.loadTexts: hwUserlogNatAclNumber.setDescription(' Access-list number. The value 0 means no ACL is specified. Only when NAT LOG is enabled, can ACL be configured. Only NAT flow which match the ACL will be logged. ')
hwUserlogNatHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 1, 6, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogNatHostAddress.setStatus('current')
if mibBuilder.loadTexts: hwUserlogNatHostAddress.setDescription('The IP address of NAT LOG server. ')
hwUserlogNatUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogNatUdpPort.setStatus('current')
if mibBuilder.loadTexts: hwUserlogNatUdpPort.setDescription('The UDP Port Number of NAT LOG UDP packet.')
hwUserlogNatSlotRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 1, 7), )
if mibBuilder.loadTexts: hwUserlogNatSlotRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwUserlogNatSlotRunInfoTable.setDescription('A table of NAT LOG running information for the specified slot.')
hwUserlogNatSlotRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 1, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-USERLOG-MIB", "hwUserlogNatRunSlotNumber"))
if mibBuilder.loadTexts: hwUserlogNatSlotRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwUserlogNatSlotRunInfoEntry.setDescription('NAT LOG Running Information Entry for a slot.')
hwUserlogNatRunSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserlogNatRunSlotNumber.setStatus('current')
if mibBuilder.loadTexts: hwUserlogNatRunSlotNumber.setDescription('Slot number. Specify on which slot the NAT LOG statistics displayed.')
hwUserlogNatTotalEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserlogNatTotalEntries.setStatus('current')
if mibBuilder.loadTexts: hwUserlogNatTotalEntries.setDescription('The total number of NAT flow entries which are logged.')
hwUserlogNatTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserlogNatTotalPackets.setStatus('current')
if mibBuilder.loadTexts: hwUserlogNatTotalPackets.setDescription('The total number of NAT LOG UDP packets generated by the router.')
hwUserlogNatFailedEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserlogNatFailedEntries.setStatus('current')
if mibBuilder.loadTexts: hwUserlogNatFailedEntries.setDescription('The total number of NAT flow entries failed in outputting.')
hwUserlogNatFailedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserlogNatFailedPackets.setStatus('current')
if mibBuilder.loadTexts: hwUserlogNatFailedPackets.setDescription('The total number of NAT LOG UDP packets failed in outputting.')
hwUserlogNatClearRunStat = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 1, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogNatClearRunStat.setStatus('current')
if mibBuilder.loadTexts: hwUserlogNatClearRunStat.setDescription(' Clear the running statistics for NAT LOG. Write-only. If 1, the running statistics for NAT LOG is resetted. Other value is invalid. ')
hwUserlogFlowObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 2))
hwUserlogFlowVersion = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserlogFlowVersion.setStatus('current')
if mibBuilder.loadTexts: hwUserlogFlowVersion.setDescription('BAS FLOW LOG version. Currently only version 1 is developed.')
hwUserlogFlowSyslog = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogFlowSyslog.setStatus('current')
if mibBuilder.loadTexts: hwUserlogFlowSyslog.setDescription(' BAS FLOW LOG format. If 1, LOG format is sysLog. If 0, LOG format is UDP packet. UDP packet is the default format, and is recommended. ')
hwUserlogFlowSourceIP = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogFlowSourceIP.setStatus('current')
if mibBuilder.loadTexts: hwUserlogFlowSourceIP.setDescription('The Source IP address of BAS FLOW LOG UDP packet.')
hwUserlogFlowFlowBegin = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogFlowFlowBegin.setStatus('current')
if mibBuilder.loadTexts: hwUserlogFlowFlowBegin.setDescription(' Log the BAS flow when it is created. If 1, this function is enabled. If 0, this function is disabled. This function will be used when real-time monitor required. ')
hwUserlogFlowActiveTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogFlowActiveTime.setStatus('current')
if mibBuilder.loadTexts: hwUserlogFlowActiveTime.setDescription(' The active time for long-time existed BAS flow. Unit: minute. Range: 10 minutes ~ 120 minutes. When setting it, BAS flow can be logged after an internal of active time. This function will be used when real-time monitor required. The default value 0 means real-time monitor function is disabled. ')
hwUserlogFlowSlotCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 2, 6), )
if mibBuilder.loadTexts: hwUserlogFlowSlotCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwUserlogFlowSlotCfgInfoTable.setDescription('A table of BAS FLOW LOG configuration information for the specified slot.')
hwUserlogFlowSlotCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 2, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-USERLOG-MIB", "hwUserlogFlowCfgSlotNumber"))
if mibBuilder.loadTexts: hwUserlogFlowSlotCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwUserlogFlowSlotCfgInfoEntry.setDescription('BAS FLOW LOG Configuration Information Entry for a slot.')
hwUserlogFlowCfgSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserlogFlowCfgSlotNumber.setStatus('current')
if mibBuilder.loadTexts: hwUserlogFlowCfgSlotNumber.setDescription('Slot number. Specify which slot is configured with BAS FLOW LOG.')
hwUserlogFlowEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 2, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogFlowEnable.setStatus('current')
if mibBuilder.loadTexts: hwUserlogFlowEnable.setDescription(' The BAS FLOW LOG feature Enable status. If 1, BAS FLOW LOG is enbled. If 0, BAS FLOW LOG is disabled. ')
hwUserlogFlowAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 2, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogFlowAclNumber.setStatus('current')
if mibBuilder.loadTexts: hwUserlogFlowAclNumber.setDescription(' Access-list number. The value 0 means no ACL is specified. Only when BAS FLOW LOG is enabled, can ACL be configured. Only BAS flow which match the ACL will be logged. ')
hwUserlogFlowHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 2, 6, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogFlowHostAddress.setStatus('current')
if mibBuilder.loadTexts: hwUserlogFlowHostAddress.setDescription('The IP address of BAS FLOW LOG server. ')
hwUserlogFlowUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogFlowUdpPort.setStatus('current')
if mibBuilder.loadTexts: hwUserlogFlowUdpPort.setDescription('The UDP Port Number of BAS FLOW LOG UDP packet.')
hwUserlogFlowSlotRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 2, 7), )
if mibBuilder.loadTexts: hwUserlogFlowSlotRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwUserlogFlowSlotRunInfoTable.setDescription('A table of BAS FLOW LOG running information for the specified slot.')
hwUserlogFlowSlotRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 2, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-USERLOG-MIB", "hwUserlogFlowRunSlotNumber"))
if mibBuilder.loadTexts: hwUserlogFlowSlotRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwUserlogFlowSlotRunInfoEntry.setDescription('Running Information Entry for a slot.')
hwUserlogFlowRunSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserlogFlowRunSlotNumber.setStatus('current')
if mibBuilder.loadTexts: hwUserlogFlowRunSlotNumber.setDescription('Slot number. Specify on which slot the BAS FLOW LOG statistics displayed.')
hwUserlogFlowTotalEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 2, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserlogFlowTotalEntries.setStatus('current')
if mibBuilder.loadTexts: hwUserlogFlowTotalEntries.setDescription('The total number of BAS FLOW Entries which are logged.')
hwUserlogFlowTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 2, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserlogFlowTotalPackets.setStatus('current')
if mibBuilder.loadTexts: hwUserlogFlowTotalPackets.setDescription('The total number of FLOW LOG UDP packet generated by the router.')
hwUserlogFlowFailedEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 2, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserlogFlowFailedEntries.setStatus('current')
if mibBuilder.loadTexts: hwUserlogFlowFailedEntries.setDescription('The total number of BAS FLOW entries failed in outputting. ')
hwUserlogFlowFailedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 2, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserlogFlowFailedPackets.setStatus('current')
if mibBuilder.loadTexts: hwUserlogFlowFailedPackets.setDescription('The total number of BAS FLOW LOG UDP packet failed in outputting.')
hwUserlogFlowClearRunStat = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 2, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogFlowClearRunStat.setStatus('current')
if mibBuilder.loadTexts: hwUserlogFlowClearRunStat.setDescription(' Clear the running statistics for FLOW LOG. Write-only. If 1, the running statistics for FLOW LOG is resetted. Other value is invalid. ')
hwUserlogAccessObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 3))
hwUserlogAccessVersion = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserlogAccessVersion.setStatus('current')
if mibBuilder.loadTexts: hwUserlogAccessVersion.setDescription('BAS ACCESS LOG version. Currently only version 1 is developed.')
hwUserlogAccessSyslog = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogAccessSyslog.setStatus('current')
if mibBuilder.loadTexts: hwUserlogAccessSyslog.setDescription(' BAS ACCESS LOG format. If 1, LOG format is sysLog; If 0, LOG format is UDP packet. UDP packet is the default format, and is recommended. ')
hwUserlogAccessSourceIP = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogAccessSourceIP.setStatus('current')
if mibBuilder.loadTexts: hwUserlogAccessSourceIP.setDescription('The Source IP address of BAS ACCESS LOG UDP packet.')
hwUserlogAccessSlotCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 3, 4), )
if mibBuilder.loadTexts: hwUserlogAccessSlotCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwUserlogAccessSlotCfgInfoTable.setDescription('A table of BAS ACCESS LOG configuration information for the specified slot.')
hwUserlogAccessSlotCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 3, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-USERLOG-MIB", "hwUserlogAccessCfgSlotNumber"))
if mibBuilder.loadTexts: hwUserlogAccessSlotCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwUserlogAccessSlotCfgInfoEntry.setDescription('BAS ACCESS LOG Configuration Information Entry for a slot.')
hwUserlogAccessCfgSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserlogAccessCfgSlotNumber.setStatus('current')
if mibBuilder.loadTexts: hwUserlogAccessCfgSlotNumber.setDescription('Slot number. Specify which slot is configured with BAS ACCESS LOG.')
hwUserlogAccessEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogAccessEnable.setStatus('current')
if mibBuilder.loadTexts: hwUserlogAccessEnable.setDescription(' The BAS ACCESS LOG feature Enable status. If 1, BAS ACCESS LOG is enbled. If 0, BAS ACCESS LOG is disabled. ')
hwUserlogAccessHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 3, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogAccessHostAddress.setStatus('current')
if mibBuilder.loadTexts: hwUserlogAccessHostAddress.setDescription('The IP address of BAS ACCESS LOG server.')
hwUserlogAccessUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogAccessUdpPort.setStatus('current')
if mibBuilder.loadTexts: hwUserlogAccessUdpPort.setDescription('The UDP Port Number of BAS ACCESS LOG UDP packet.')
hwUserlogAccessSlotRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 3, 5), )
if mibBuilder.loadTexts: hwUserlogAccessSlotRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwUserlogAccessSlotRunInfoTable.setDescription('A table of BAS ACCESS LOG running information for the specified slot.')
hwUserlogAccessSlotRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 3, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-USERLOG-MIB", "hwUserlogAccessRunSlotNumber"))
if mibBuilder.loadTexts: hwUserlogAccessSlotRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwUserlogAccessSlotRunInfoEntry.setDescription('Running Information Entry for a slot.')
hwUserlogAccessRunSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserlogAccessRunSlotNumber.setStatus('current')
if mibBuilder.loadTexts: hwUserlogAccessRunSlotNumber.setDescription('Slot number. Specify on which slot the BAS ACCESS LOG statistics displayed.')
hwUserlogAccessTotalEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 3, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserlogAccessTotalEntries.setStatus('current')
if mibBuilder.loadTexts: hwUserlogAccessTotalEntries.setDescription('The total number of BAS ACCESS Records which are logged.')
hwUserlogAccessTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 3, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserlogAccessTotalPackets.setStatus('current')
if mibBuilder.loadTexts: hwUserlogAccessTotalPackets.setDescription('The total number of ACCESS LOG UDP packet generated by the router.')
hwUserlogAccessFailedEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 3, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserlogAccessFailedEntries.setStatus('current')
if mibBuilder.loadTexts: hwUserlogAccessFailedEntries.setDescription('The total number of BAS ACCESS entries failed in outputting.')
hwUserlogAccessFailedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 3, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserlogAccessFailedPackets.setStatus('current')
if mibBuilder.loadTexts: hwUserlogAccessFailedPackets.setDescription('The total number of BAS ACCESS LOG UDP packet failed in outputting.')
hwUserlogAccessClearRunStat = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 1, 3, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserlogAccessClearRunStat.setStatus('current')
if mibBuilder.loadTexts: hwUserlogAccessClearRunStat.setDescription(' Clear the running statistics for ACCESS LOG. Write-only. If 1, the running statistics for ACCESS LOG is resetted. Other value is invalid. ')
hwUserlogNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 2))
hwUserlogConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 3))
hwUserlogCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 3, 1))
hwUserlogCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 3, 1, 1)).setObjects(("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogMandatoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwUserlogCompliance = hwUserlogCompliance.setStatus('current')
if mibBuilder.loadTexts: hwUserlogCompliance.setDescription('The compliance statement for entities which implement the Huawei Userlog mib.')
hwUserlogGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 3, 2))
hwUserlogMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 3, 2, 1)).setObjects(("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogNatEnable"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogNatHostAddress"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogNatUdpPort"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogFlowEnable"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogFlowHostAddress"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogFlowUdpPort"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogAccessEnable"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogAccessHostAddress"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogAccessUdpPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwUserlogMandatoryGroup = hwUserlogMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: hwUserlogMandatoryGroup.setDescription('A collection of objects providing mandatory Userlog information.')
hwUserlogConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 3, 2, 2)).setObjects(("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogNatVersion"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogNatSyslog"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogNatSourceIP"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogNatFlowBegin"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogNatActiveTime"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogNatCfgSlotNumber"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogNatEnable"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogNatAclNumber"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogNatHostAddress"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogNatUdpPort"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogFlowVersion"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogFlowSyslog"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogFlowSourceIP"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogFlowFlowBegin"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogFlowActiveTime"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogFlowCfgSlotNumber"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogFlowEnable"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogFlowAclNumber"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogFlowHostAddress"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogFlowUdpPort"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogAccessVersion"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogAccessSyslog"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogAccessSourceIP"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogAccessCfgSlotNumber"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogAccessEnable"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogAccessHostAddress"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogAccessUdpPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwUserlogConfigGroup = hwUserlogConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hwUserlogConfigGroup.setDescription('All configurable parameters of Userlog feature.')
hwUserlogInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 18, 3, 2, 3)).setObjects(("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogNatTotalEntries"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogNatTotalPackets"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogNatFailedEntries"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogNatFailedPackets"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogFlowTotalEntries"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogFlowTotalPackets"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogFlowFailedEntries"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogFlowFailedPackets"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogAccessTotalEntries"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogAccessTotalPackets"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogAccessFailedEntries"), ("A3COM-HUAWEI-USERLOG-MIB", "hwUserlogAccessFailedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwUserlogInfoGroup = hwUserlogInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwUserlogInfoGroup.setDescription('All running information of Userlog feature.')
mibBuilder.exportSymbols("A3COM-HUAWEI-USERLOG-MIB", hwUserlogNatFailedEntries=hwUserlogNatFailedEntries, hwUserlogFlowSlotRunInfoEntry=hwUserlogFlowSlotRunInfoEntry, hwUserlogNatFlowBegin=hwUserlogNatFlowBegin, hwUserlogNatAclNumber=hwUserlogNatAclNumber, hwUserlogAccessSyslog=hwUserlogAccessSyslog, hwUserlogAccessRunSlotNumber=hwUserlogAccessRunSlotNumber, hwUserlogGroups=hwUserlogGroups, PYSNMP_MODULE_ID=hwUserLogMIB, hwUserlogNatTotalEntries=hwUserlogNatTotalEntries, hwUserlogFlowHostAddress=hwUserlogFlowHostAddress, hwUserlogInfoGroup=hwUserlogInfoGroup, hwUserlogAccessSlotRunInfoEntry=hwUserlogAccessSlotRunInfoEntry, hwUserlogAccessEnable=hwUserlogAccessEnable, hwUserlogAccessUdpPort=hwUserlogAccessUdpPort, hwUserlogAccessFailedEntries=hwUserlogAccessFailedEntries, hwUserlogCompliances=hwUserlogCompliances, hwUserlogNatHostAddress=hwUserlogNatHostAddress, hwUserlogFlowCfgSlotNumber=hwUserlogFlowCfgSlotNumber, hwUserlogNatSlotRunInfoEntry=hwUserlogNatSlotRunInfoEntry, hwUserlogNatEnable=hwUserlogNatEnable, hwUserLogMIB=hwUserLogMIB, hwUserlogFlowEnable=hwUserlogFlowEnable, hwUserlogFlowAclNumber=hwUserlogFlowAclNumber, hwUserlogNatActiveTime=hwUserlogNatActiveTime, hwUserlogNatSyslog=hwUserlogNatSyslog, hwUserlogAccessSlotCfgInfoEntry=hwUserlogAccessSlotCfgInfoEntry, hwUserlogAccessFailedPackets=hwUserlogAccessFailedPackets, hwUserlogFlowClearRunStat=hwUserlogFlowClearRunStat, hwUserlogFlowSlotRunInfoTable=hwUserlogFlowSlotRunInfoTable, hwUserlogConformance=hwUserlogConformance, hwUserlogNatSlotCfgInfoTable=hwUserlogNatSlotCfgInfoTable, hwUserlogNotifications=hwUserlogNotifications, hwUserlogNatClearRunStat=hwUserlogNatClearRunStat, hwUserlogFlowUdpPort=hwUserlogFlowUdpPort, hwUserlogFlowSlotCfgInfoEntry=hwUserlogFlowSlotCfgInfoEntry, hwUserlogNatCfgSlotNumber=hwUserlogNatCfgSlotNumber, hwUserlogFlowSyslog=hwUserlogFlowSyslog, hwUserlogMandatoryGroup=hwUserlogMandatoryGroup, hwUserlogAccessObjects=hwUserlogAccessObjects, hwUserlogAccessSourceIP=hwUserlogAccessSourceIP, hwUserlogAccessSlotRunInfoTable=hwUserlogAccessSlotRunInfoTable, hwUserlogAccessVersion=hwUserlogAccessVersion, hwUserlogNatRunSlotNumber=hwUserlogNatRunSlotNumber, hwUserlogFlowTotalPackets=hwUserlogFlowTotalPackets, hwUserlogNatSourceIP=hwUserlogNatSourceIP, hwUserlogFlowObjects=hwUserlogFlowObjects, hwUserlogFlowVersion=hwUserlogFlowVersion, hwUserlogFlowActiveTime=hwUserlogFlowActiveTime, hwUserlogAccessTotalEntries=hwUserlogAccessTotalEntries, hwUserlogNatSlotCfgInfoEntry=hwUserlogNatSlotCfgInfoEntry, hwUserlogNatTotalPackets=hwUserlogNatTotalPackets, hwUserlogFlowSourceIP=hwUserlogFlowSourceIP, hwUserlogFlowFlowBegin=hwUserlogFlowFlowBegin, hwUserlogFlowFailedPackets=hwUserlogFlowFailedPackets, hwUserlogObjects=hwUserlogObjects, hwUserlogNatUdpPort=hwUserlogNatUdpPort, hwUserlogFlowSlotCfgInfoTable=hwUserlogFlowSlotCfgInfoTable, hwUserlogAccessSlotCfgInfoTable=hwUserlogAccessSlotCfgInfoTable, hwUserlogFlowRunSlotNumber=hwUserlogFlowRunSlotNumber, hwUserlogAccessTotalPackets=hwUserlogAccessTotalPackets, hwUserlogNatSlotRunInfoTable=hwUserlogNatSlotRunInfoTable, hwUserlogFlowTotalEntries=hwUserlogFlowTotalEntries, hwUserlogFlowFailedEntries=hwUserlogFlowFailedEntries, hwUserlogConfigGroup=hwUserlogConfigGroup, hwUserlogAccessCfgSlotNumber=hwUserlogAccessCfgSlotNumber, hwUserlogNatObjects=hwUserlogNatObjects, hwUserlogNatVersion=hwUserlogNatVersion, hwUserlogAccessClearRunStat=hwUserlogAccessClearRunStat, hwUserlogNatFailedPackets=hwUserlogNatFailedPackets, hwUserlogCompliance=hwUserlogCompliance, hwUserlogAccessHostAddress=hwUserlogAccessHostAddress)
