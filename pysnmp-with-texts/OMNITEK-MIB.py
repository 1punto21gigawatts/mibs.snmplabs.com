#
# PySNMP MIB module OMNITEK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNITEK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:34:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Bits, TimeTicks, ObjectIdentity, Counter32, iso, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, enterprises, Gauge32, IpAddress, NotificationType, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "TimeTicks", "ObjectIdentity", "Counter32", "iso", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "enterprises", "Gauge32", "IpAddress", "NotificationType", "Integer32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class AudioStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("missing", 1), ("silent", 2), ("active", 3), ("peak", 4))

omnitek = MibIdentifier((1, 3, 6, 1, 4, 1, 18458))
videostatus = MibIdentifier((1, 3, 6, 1, 4, 1, 18458, 1))
videoindex = MibIdentifier((1, 3, 6, 1, 4, 1, 18458, 2))
wss = MibIdentifier((1, 3, 6, 1, 4, 1, 18458, 3))
teletext = MibIdentifier((1, 3, 6, 1, 4, 1, 18458, 4))
closedcaptions = MibIdentifier((1, 3, 6, 1, 4, 1, 18458, 5))
errors = MibIdentifier((1, 3, 6, 1, 4, 1, 18458, 6))
timecode = MibIdentifier((1, 3, 6, 1, 4, 1, 18458, 7))
audio = MibIdentifier((1, 3, 6, 1, 4, 1, 18458, 8))
logging = MibIdentifier((1, 3, 6, 1, 4, 1, 18458, 9))
generator = MibIdentifier((1, 3, 6, 1, 4, 1, 18458, 10))
videoStandard = MibScalar((1, 3, 6, 1, 4, 1, 18458, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("format486i59", 1), ("format486p59", 2), ("format576i50", 3), ("format576p50", 4), ("format720p59", 5), ("format720p60", 6), ("format1035i59", 7), ("format1035i60", 8), ("format1080sf23", 9), ("format1080p23", 10), ("format1080sf24", 11), ("format1080p24", 12), ("format1080i50", 13), ("format1080p25", 14), ("format1080i59", 15), ("format1080p29", 16), ("format1080i60", 17), ("format1080p30", 18), ("format720p23", 19), ("format720p24", 20), ("format720p25", 21), ("format720p29", 22), ("format720p30", 23), ("format720p50", 24), ("format1080sf23rgb444log", 26), ("format1080sf23rgb444lin", 27), ("format1080sf23yuv444", 28), ("format1080sf24rgb444log", 29), ("format1080sf24rgb444lin", 30), ("format1080sf24yuv444", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: videoStandard.setStatus('mandatory')
if mibBuilder.loadTexts: videoStandard.setDescription('The current video standard.')
digitalInput = MibScalar((1, 3, 6, 1, 4, 1, 18458, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("missing", 1), ("error", 2), ("ok", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInput.setStatus('mandatory')
if mibBuilder.loadTexts: digitalInput.setDescription('Digital input detect state.')
digitalInputB = MibScalar((1, 3, 6, 1, 4, 1, 18458, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("missing", 1), ("error", 2), ("ok", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInputB.setStatus('mandatory')
if mibBuilder.loadTexts: digitalInputB.setDescription('Digital input detect state for link B (dual-link cards only).')
motionContent = MibScalar((1, 3, 6, 1, 4, 1, 18458, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frozen", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionContent.setStatus('mandatory')
if mibBuilder.loadTexts: motionContent.setDescription('Motion content (frozen (false)/active (true)).')
lumaContent = MibScalar((1, 3, 6, 1, 4, 1, 18458, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("black", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lumaContent.setStatus('mandatory')
if mibBuilder.loadTexts: lumaContent.setDescription('Set when the input to the analyzer has luminance.')
chromaContent = MibScalar((1, 3, 6, 1, 4, 1, 18458, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("monochrome", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chromaContent.setStatus('mandatory')
if mibBuilder.loadTexts: chromaContent.setDescription('Set when the input to the analyzer has chrominance.')
syncStatus = MibScalar((1, 3, 6, 1, 4, 1, 18458, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("missing", 1), ("error", 2), ("ok", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syncStatus.setStatus('mandatory')
if mibBuilder.loadTexts: syncStatus.setDescription('Status of the external sync input.')
activeFormat = MibScalar((1, 3, 6, 1, 4, 1, 18458, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeFormat.setStatus('mandatory')
if mibBuilder.loadTexts: activeFormat.setDescription('A description of the Video Index active format (SD ONLY). Can be one of the following: Not Present Active region is same as Coded Frame 4:3 16:9 14:9 Reserved (4) 4:3 with shoot-and-protect 14:9 centre 16:9 with shoot-and-protect 14:9 centre 16:9 with shoot-and-protect 4:3 centre')
codedFrame = MibScalar((1, 3, 6, 1, 4, 1, 18458, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: codedFrame.setStatus('mandatory')
if mibBuilder.loadTexts: codedFrame.setDescription('A description of the Video Index coded frame format (SD ONLY). Can be one of the following: Not Present No Information 525/59.94 - 4:3 625/50 - 4:3 Reserved (3) Reserved (4) 525/59.94 - 16:9 625/50 - 16:9 Reserved (7)')
componentSet = MibScalar((1, 3, 6, 1, 4, 1, 18458, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSet.setStatus('mandatory')
if mibBuilder.loadTexts: componentSet.setDescription('A description of the Video Index component set (SD ONLY). Can be one of the following: Not Present No Information RGB YCbCr YUV Monochrome NTSC PAL PAL-M SECAM Reserved (9) Reserved (10) Reserved (11) Reserved (12) Reserved (13) Reserved (14) Reserved (15)')
sampleStructure = MibScalar((1, 3, 6, 1, 4, 1, 18458, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sampleStructure.setStatus('mandatory')
if mibBuilder.loadTexts: sampleStructure.setDescription('Description of the Video Index sample structure (SD ONLY). Can be one of the following: Not Present No Information 4:0:0 4:2:2 4:2:2:4, Main 4:2:2:4, Sub 4:4:4, Main 4:4:4, Sub 4:4:4:4, Main 4:4:4:4, Sub 4:2:2 Progressive, Main 4:2:2 Progressive, Sub 4:2:0 Progressive 8:4:4, Main 8:4:4, Sub 4:2:2:4, Single Link Reserved (15)')
wssReadType = MibScalar((1, 3, 6, 1, 4, 1, 18458, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("en300294", 1), ("ardspec", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wssReadType.setStatus('mandatory')
if mibBuilder.loadTexts: wssReadType.setDescription('Read type of Wide-Screen Signalling information.')
aspectRatioEN300294 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspectRatioEN300294.setStatus('mandatory')
if mibBuilder.loadTexts: aspectRatioEN300294.setDescription('Description of Wide-Screen Signalling aspect ratio (EN300294). Can be one of the following: Not Present 4:3 Full Format 14:9 Letterbox Center 14:9 Letterbox Top 16:9 Letterbox Center 16:9 Letterbox Top > 16:9 Letterbox Center 14:9 Full Format Center 16:9 Full Format (Anamorphic) Unknown')
enhancedServicesEN300294 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enhancedServicesEN300294.setStatus('mandatory')
if mibBuilder.loadTexts: enhancedServicesEN300294.setDescription("Description of Wide-Screen Signalling enhanced services (EN300294). Value returned will be 'Not Present' or a binary string from '0000' to '1111'")
subtitlesEN300294 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subtitlesEN300294.setStatus('mandatory')
if mibBuilder.loadTexts: subtitlesEN300294.setDescription("Description of Wide-Screen Signalling subtitles (EN300294). Value returned will be 'Not Present' or a binary string from '000' to '111'")
othersEN300294 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: othersEN300294.setStatus('mandatory')
if mibBuilder.loadTexts: othersEN300294.setDescription("Description of Wide-Screen Signalling others field (EN300294). Value returned will be 'Not Present' or a binary string from '000' to '111'")
aspectRatioARDSPEC = MibScalar((1, 3, 6, 1, 4, 1, 18458, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspectRatioARDSPEC.setStatus('mandatory')
if mibBuilder.loadTexts: aspectRatioARDSPEC.setDescription('Description of Wide-Screen Signalling aspect ratio field (ARDSPEC). Can be one of the following: Not Present No Information 525/59.94 4x3 625/50 4x3 Reserved (3) Reserved (4) 525/59.94 16x9 625/50 16x9 Reserved (7)')
activeFormatARDSPEC = MibScalar((1, 3, 6, 1, 4, 1, 18458, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeFormatARDSPEC.setStatus('mandatory')
if mibBuilder.loadTexts: activeFormatARDSPEC.setDescription('Description of Wide-Screen Signalling active format field (ARDSPEC). Can be one of the following: Not Present Active Picture Same As Coded Raster 4x3 16x9 14x9 Reserved (4) 4x3 With Shoot-And-Protect 14x9 Centre 16x9 With Shoot-And-Protect 14x9 Centre Reserved (7)')
parityBitsARDSPEC = MibScalar((1, 3, 6, 1, 4, 1, 18458, 3, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parityBitsARDSPEC.setStatus('mandatory')
if mibBuilder.loadTexts: parityBitsARDSPEC.setDescription("Description of Wide-Screen Signalling parity bits field (ARDSPEC). Value returned will be 'Not Present' or a binary string from '00' to '11'")
enhancedServicesARDSPEC = MibScalar((1, 3, 6, 1, 4, 1, 18458, 3, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enhancedServicesARDSPEC.setStatus('mandatory')
if mibBuilder.loadTexts: enhancedServicesARDSPEC.setDescription("Description of Wide-Screen Signalling enhanced services (ARDSPEC). Value returned will be 'Not Present' or a binary string from '0000' to '1111'")
reservedARDSPEC = MibScalar((1, 3, 6, 1, 4, 1, 18458, 3, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reservedARDSPEC.setStatus('mandatory')
if mibBuilder.loadTexts: reservedARDSPEC.setDescription("Description of Wide-Screen Signalling reserved field (ARDSPEC). Value returned will be 'Not Present' or a binary string from '00' to '11'")
present = MibScalar((1, 3, 6, 1, 4, 1, 18458, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("missing", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: present.setStatus('mandatory')
if mibBuilder.loadTexts: present.setDescription('Whether teletext is present on the input.')
closedCaptionAnc608 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("missing", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: closedCaptionAnc608.setStatus('mandatory')
if mibBuilder.loadTexts: closedCaptionAnc608.setDescription('Whether Closed Captioning is present on the input (ANC 608).')
closedCaptionAnc708 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("missing", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: closedCaptionAnc708.setStatus('mandatory')
if mibBuilder.loadTexts: closedCaptionAnc708.setDescription('Whether Closed Captioning is present on the input (ANC 708).')
closedCaptionLine21 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("missing", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: closedCaptionLine21.setStatus('mandatory')
if mibBuilder.loadTexts: closedCaptionLine21.setDescription('Whether Closed Captioning is present on the input (Line 21).')
crcErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: crcErrors.setDescription('Number of video CRC errors. Set to 0 to reset counter (resets link b counter on dual-link cards also).')
crcBErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crcBErrors.setStatus('mandatory')
if mibBuilder.loadTexts: crcBErrors.setDescription('Number of video CRC errors for link b (dual-link cards only). Set to 0 to reset counter (resets link a counter also)')
rgbRangeErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rgbRangeErrors.setStatus('mandatory')
if mibBuilder.loadTexts: rgbRangeErrors.setDescription('Number of video RGB range errors. Set to 0 to reset counter.')
rgbRangeMin = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rgbRangeMin.setStatus('mandatory')
if mibBuilder.loadTexts: rgbRangeMin.setDescription('The minimum value of the accepted RGB range.')
rgbRangeMax = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rgbRangeMax.setStatus('mandatory')
if mibBuilder.loadTexts: rgbRangeMax.setDescription('The maximum value of the accepted RGB range.')
ycbcrRangeErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ycbcrRangeErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ycbcrRangeErrors.setDescription('Number of video YCbCr range errors. Set to 0 to reset counter')
yRangeMin = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: yRangeMin.setStatus('mandatory')
if mibBuilder.loadTexts: yRangeMin.setDescription('The minimum value of the accepted video Y data before a YCbCr range error is flagged.')
yRrangeMax = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: yRrangeMax.setStatus('mandatory')
if mibBuilder.loadTexts: yRrangeMax.setDescription('The maximum value of the accepted video Y data before a YCbCr range error is flagged.')
uRangeMin = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uRangeMin.setStatus('mandatory')
if mibBuilder.loadTexts: uRangeMin.setDescription('The minimum value of the accepted video U data before a YCbCr range error is flagged.')
uRangeMax = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uRangeMax.setStatus('mandatory')
if mibBuilder.loadTexts: uRangeMax.setDescription('The maximum value of the accepted video U data before a YCbCr range error is flagged.')
vRangeMin = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRangeMin.setStatus('mandatory')
if mibBuilder.loadTexts: vRangeMin.setDescription('The minimum value of the accepted video V data before a YCbCr range error is flagged.')
vRangeMax = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRangeMax.setStatus('mandatory')
if mibBuilder.loadTexts: vRangeMax.setDescription('The maximum value of the accepted video V data before a YCbCr range error is flagged.')
trsErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trsErrors.setStatus('mandatory')
if mibBuilder.loadTexts: trsErrors.setDescription('Number of TRS errors. Set to 0 to reset counter (resets link b counter on dual-link cards also)')
trsBErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trsBErrors.setStatus('mandatory')
if mibBuilder.loadTexts: trsBErrors.setDescription('Number of TRS errors for link b (dual-link cards only). Set to 0 to reset counter (resets link a counter also)')
ancErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ancErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ancErrors.setDescription('Number of ANC errors. Set to 0 to reset counter (resets link b counter on dual-link cards also)')
ancBErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ancBErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ancBErrors.setDescription('Number of ANC errors for link b (dual-link cards only). Set to 0 to reset counter (resets link a counter also)')
lineErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lineErrors.setDescription('Number of line number errors. Set to 0 to reset counter (resets link b counter on dual-link cards also)')
lineBErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineBErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lineBErrors.setDescription('Number of line number errors for link b (dual-link cards only). Set to 0 to reset counter (resets link a counter also)')
frozenVITC = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frozenVITC.setStatus('mandatory')
if mibBuilder.loadTexts: frozenVITC.setDescription('Number of frozen VITC errors. Set to 0 to reset counter. NOT CURRENTLY IMPLEMENTED.')
skippedVITC = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skippedVITC.setStatus('mandatory')
if mibBuilder.loadTexts: skippedVITC.setDescription('Number of skipped VITC errors. Set to 0 to reset counter. NOT CURRENTLY IMPLEMENTED.')
frozenATC = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frozenATC.setStatus('mandatory')
if mibBuilder.loadTexts: frozenATC.setDescription('Number of frozen ATC errors. Set to 0 to reset counter. NOT CURRENTLY IMPLEMENTED.')
skippedATC = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skippedATC.setStatus('mandatory')
if mibBuilder.loadTexts: skippedATC.setDescription('Number of skipped ATC errors. Set to 0 to reset counter. NOT CURRENTLY IMPLEMENTED.')
compRangeErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compRangeErrors.setStatus('mandatory')
if mibBuilder.loadTexts: compRangeErrors.setDescription('Number of Composite range errors. Set to 0 to reset counter')
compRangeMin = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compRangeMin.setStatus('mandatory')
if mibBuilder.loadTexts: compRangeMin.setDescription('')
compRangeMax = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compRangeMax.setStatus('mandatory')
if mibBuilder.loadTexts: compRangeMax.setDescription('')
edhError = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edhError.setStatus('mandatory')
if mibBuilder.loadTexts: edhError.setDescription('Number of video EDH errors. Set to 0 to reset counter.')
edhInvalid = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edhInvalid.setStatus('mandatory')
if mibBuilder.loadTexts: edhInvalid.setDescription('Video EDH invalid counter. Set to 0 to reset counter.')
vitc = MibScalar((1, 3, 6, 1, 4, 1, 18458, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vitc.setStatus('mandatory')
if mibBuilder.loadTexts: vitc.setDescription('VITC timecode of input (SD ONLY).')
atc = MibScalar((1, 3, 6, 1, 4, 1, 18458, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atc.setStatus('mandatory')
if mibBuilder.loadTexts: atc.setDescription('ATC timecode of input.')
usageGroup1 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageGroup1.setStatus('mandatory')
if mibBuilder.loadTexts: usageGroup1.setDescription('The audio usage string for audio group 1 . NOT IMPLEMENTED YET')
usageGroup2 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageGroup2.setStatus('mandatory')
if mibBuilder.loadTexts: usageGroup2.setDescription('The audio usage string for audio group 2 . NOT IMPLEMENTED YET')
usageGroup3 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageGroup3.setStatus('mandatory')
if mibBuilder.loadTexts: usageGroup3.setDescription('The audio usage string for audio group 3 . NOT IMPLEMENTED YET')
usageGroup4 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageGroup4.setStatus('mandatory')
if mibBuilder.loadTexts: usageGroup4.setDescription('The audio usage string for audio group 4 . NOT IMPLEMENTED YET')
sampleGroup1 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("audio", 1), ("data", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sampleGroup1.setStatus('mandatory')
if mibBuilder.loadTexts: sampleGroup1.setDescription('Whether audio packets contain audio/data in group 1. NOT IMPLEMENTED YET')
sampleGroup2 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("audio", 1), ("data", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sampleGroup2.setStatus('mandatory')
if mibBuilder.loadTexts: sampleGroup2.setDescription('Whether audio packets contain audio/data in group 2. NOT IMPLEMENTED YET')
sampleGroup3 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("audio", 1), ("data", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sampleGroup3.setStatus('mandatory')
if mibBuilder.loadTexts: sampleGroup3.setDescription('Whether audio packets contain audio/data in group 3. NOT IMPLEMENTED YET')
sampleGroup4 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("audio", 1), ("data", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sampleGroup4.setStatus('mandatory')
if mibBuilder.loadTexts: sampleGroup4.setDescription('Whether audio packets contain audio/data in group 4. NOT IMPLEMENTED YET')
emphasisGroup1 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emphasisGroup1.setStatus('mandatory')
if mibBuilder.loadTexts: emphasisGroup1.setDescription('Whether audio emphasis is present in audio group 1. NOT IMPLEMENTED YET')
emphasisGroup2 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emphasisGroup2.setStatus('mandatory')
if mibBuilder.loadTexts: emphasisGroup2.setDescription('Whether audio emphasis is present in audio group 2. NOT IMPLEMENTED YET')
emphasisGroup3 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emphasisGroup3.setStatus('mandatory')
if mibBuilder.loadTexts: emphasisGroup3.setDescription('Whether audio emphasis is present in audio group 3. NOT IMPLEMENTED YET')
emphasisGroup4 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emphasisGroup4.setStatus('mandatory')
if mibBuilder.loadTexts: emphasisGroup4.setDescription('Whether audio emphasis is present in audio group 4. NOT IMPLEMENTED YET')
lockGroup1 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockGroup1.setStatus('mandatory')
if mibBuilder.loadTexts: lockGroup1.setDescription('Whether audio group 1 is locked. NOT IMPLEMENTED YET')
lockGroup2 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockGroup2.setStatus('mandatory')
if mibBuilder.loadTexts: lockGroup2.setDescription('Whether audio group 2 is locked. NOT IMPLEMENTED YET')
lockGroup3 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockGroup3.setStatus('mandatory')
if mibBuilder.loadTexts: lockGroup3.setDescription('Whether audio group 3 is locked. NOT IMPLEMENTED YET')
lockGroup4 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockGroup4.setStatus('mandatory')
if mibBuilder.loadTexts: lockGroup4.setDescription('Whether audio group 4 is locked. NOT IMPLEMENTED YET')
frequencyGroup1 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default48khz", 1), ("manual48khz", 2), ("freq441khz", 3), ("freq32khz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequencyGroup1.setStatus('mandatory')
if mibBuilder.loadTexts: frequencyGroup1.setDescription('Sample frequency of audio in group 1. NOT IMPLEMENTED YET')
frequencyGroup2 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default48khz", 1), ("manual48khz", 2), ("freq441khz", 3), ("freq32khz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequencyGroup2.setStatus('mandatory')
if mibBuilder.loadTexts: frequencyGroup2.setDescription('Sample frequency of audio in group 2. NOT IMPLEMENTED YET')
frequencyGroup3 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default48khz", 1), ("manual48khz", 2), ("freq441khz", 3), ("freq32khz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequencyGroup3.setStatus('mandatory')
if mibBuilder.loadTexts: frequencyGroup3.setDescription('Sample frequency of audio in group 3. NOT IMPLEMENTED YET')
frequencyGroup4 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default48khz", 1), ("manual48khz", 2), ("freq441khz", 3), ("freq32khz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequencyGroup4.setStatus('mandatory')
if mibBuilder.loadTexts: frequencyGroup4.setDescription('Sample frequency of audio in group 4. NOT IMPLEMENTED YET')
channelModeGroup1 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("default", 1), ("dual", 2), ("single", 3), ("primarysecondary", 4), ("stereo", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelModeGroup1.setStatus('mandatory')
if mibBuilder.loadTexts: channelModeGroup1.setDescription('Channel mode of audio group 1. NOT IMPLEMENTED YET')
channelModeGroup2 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("default", 1), ("dual", 2), ("single", 3), ("primarysecondary", 4), ("stereo", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelModeGroup2.setStatus('mandatory')
if mibBuilder.loadTexts: channelModeGroup2.setDescription('Channel mode of audio group 2. NOT IMPLEMENTED YET')
channelModeGroup3 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("default", 1), ("dual", 2), ("single", 3), ("primarysecondary", 4), ("stereo", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelModeGroup3.setStatus('mandatory')
if mibBuilder.loadTexts: channelModeGroup3.setDescription('Channel mode of audio group 3. NOT IMPLEMENTED YET')
channelModeGroup4 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("default", 1), ("dual", 2), ("single", 3), ("primarysecondary", 4), ("stereo", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelModeGroup4.setStatus('mandatory')
if mibBuilder.loadTexts: channelModeGroup4.setDescription('Channel mode of audio group 4. NOT IMPLEMENTED YET')
wordLengthGroup1 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("default", 1), ("bits16", 2), ("bits18", 3), ("bits19", 4), ("bits20", 5), ("bits22", 6), ("bits23", 7), ("bits24", 8), ("user", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wordLengthGroup1.setStatus('mandatory')
if mibBuilder.loadTexts: wordLengthGroup1.setDescription('Word length of data in audio group 1. NOT IMPLEMENTED YET')
wordLengthGroup2 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("default", 1), ("bits16", 2), ("bits18", 3), ("bits19", 4), ("bits20", 5), ("bits22", 6), ("bits23", 7), ("bits24", 8), ("user", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wordLengthGroup2.setStatus('mandatory')
if mibBuilder.loadTexts: wordLengthGroup2.setDescription('Word length of data in audio group 2. NOT IMPLEMENTED YET')
wordLengthGroup3 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("default", 1), ("bits16", 2), ("bits18", 3), ("bits19", 4), ("bits20", 5), ("bits22", 6), ("bits23", 7), ("bits24", 8), ("user", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wordLengthGroup3.setStatus('mandatory')
if mibBuilder.loadTexts: wordLengthGroup3.setDescription('Word length of data in audio group 3. NOT IMPLEMENTED YET')
wordLengthGroup4 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("default", 1), ("bits16", 2), ("bits18", 3), ("bits19", 4), ("bits20", 5), ("bits22", 6), ("bits23", 7), ("bits24", 8), ("user", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wordLengthGroup4.setStatus('mandatory')
if mibBuilder.loadTexts: wordLengthGroup4.setDescription('Word length of data in audio group 4. NOT IMPLEMENTED YET')
channelStatus1 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 29), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus1.setStatus('mandatory')
if mibBuilder.loadTexts: channelStatus1.setDescription('Channel 1 audio status. NOT IMPLEMENTED YET')
channelStatus2 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 30), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus2.setStatus('mandatory')
if mibBuilder.loadTexts: channelStatus2.setDescription('Channel 2 audio status. NOT IMPLEMENTED YET')
channelStatus3 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 31), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus3.setStatus('mandatory')
if mibBuilder.loadTexts: channelStatus3.setDescription('Channel 3 audio status. NOT IMPLEMENTED YET')
channelStatus4 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 32), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus4.setStatus('mandatory')
if mibBuilder.loadTexts: channelStatus4.setDescription('Channel 4 audio status. NOT IMPLEMENTED YET')
channelStatus5 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 33), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus5.setStatus('mandatory')
if mibBuilder.loadTexts: channelStatus5.setDescription('Channel 5 audio status. NOT IMPLEMENTED YET')
channelStatus6 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 34), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus6.setStatus('mandatory')
if mibBuilder.loadTexts: channelStatus6.setDescription('Channel 6 audio status. NOT IMPLEMENTED YET')
channelStatus7 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 35), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus7.setStatus('mandatory')
if mibBuilder.loadTexts: channelStatus7.setDescription('Channel 7 audio status. NOT IMPLEMENTED YET')
channelStatus8 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 36), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus8.setStatus('mandatory')
if mibBuilder.loadTexts: channelStatus8.setDescription('Channel 8 audio status. NOT IMPLEMENTED YET')
channelStatus9 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 37), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus9.setStatus('mandatory')
if mibBuilder.loadTexts: channelStatus9.setDescription('Channel 9 audio status. NOT IMPLEMENTED YET')
channelStatus10 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 38), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus10.setStatus('mandatory')
if mibBuilder.loadTexts: channelStatus10.setDescription('Channel 10 audio status. NOT IMPLEMENTED YET')
channelStatus11 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 39), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus11.setStatus('mandatory')
if mibBuilder.loadTexts: channelStatus11.setDescription('Channel 11 audio status. NOT IMPLEMENTED YET')
channelStatus12 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 40), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus12.setStatus('mandatory')
if mibBuilder.loadTexts: channelStatus12.setDescription('Channel 12 audio status. NOT IMPLEMENTED YET')
channelStatus13 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 41), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus13.setStatus('mandatory')
if mibBuilder.loadTexts: channelStatus13.setDescription('Channel 13 audio status. NOT IMPLEMENTED YET')
channelStatus14 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 42), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus14.setStatus('mandatory')
if mibBuilder.loadTexts: channelStatus14.setDescription('Channel 14 audio status. NOT IMPLEMENTED YET')
channelStatus15 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 43), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus15.setStatus('mandatory')
if mibBuilder.loadTexts: channelStatus15.setDescription('Channel 15 audio status. NOT IMPLEMENTED YET')
channelStatus16 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 44), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus16.setStatus('mandatory')
if mibBuilder.loadTexts: channelStatus16.setDescription('Channel 16 audio status. NOT IMPLEMENTED YET')
audioMin = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioMin.setStatus('mandatory')
if mibBuilder.loadTexts: audioMin.setDescription('Audio level below which is deemed silence. NOT IMPLEMENTED YET')
audioMax = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioMax.setStatus('mandatory')
if mibBuilder.loadTexts: audioMax.setDescription('Audio level above which is deemed peak. NOT IMPLEMENTED YET')
jobId = MibScalar((1, 3, 6, 1, 4, 1, 18458, 9, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jobId.setStatus('mandatory')
if mibBuilder.loadTexts: jobId.setDescription('The current logging jobId - NULL if not logging. NOT IMPLEMENTED YET')
indexPattern = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 1), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: indexPattern.setStatus('mandatory')
if mibBuilder.loadTexts: indexPattern.setDescription("Go to a specific pattern in the 'palette'. If the index is <= 1, the first pattern will be selected, if it is >= nPatterns, the last pattern will be selected")
nextPattern = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: nextPattern.setStatus('mandatory')
if mibBuilder.loadTexts: nextPattern.setDescription("Go to next pattern in 'palette'. If reached end of palette, go back to pattern 0. Must be > 0")
prevPattern = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 3), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: prevPattern.setStatus('mandatory')
if mibBuilder.loadTexts: prevPattern.setDescription("Go to previous pattern in 'palette'. If reached pattern 0, go to last pattern in palette. Must be > 0")
transportToStart = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 4), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: transportToStart.setStatus('mandatory')
if mibBuilder.loadTexts: transportToStart.setDescription('Set this object to anything other than 0 to go to first frame of currently selected sequence/playlist (this will have no effect if a non-sequence pattern is selected in the configuration).')
transportJogBack = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: transportJogBack.setStatus('mandatory')
if mibBuilder.loadTexts: transportJogBack.setDescription('Set this object to anything other than 0 to go to the previous frame of currently selected sequence/playlist (this will have no effect if a non-sequence pattern is selected in the configuration).')
transportPlayReverse = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transportPlayReverse.setStatus('mandatory')
if mibBuilder.loadTexts: transportPlayReverse.setDescription('Determine whether the currently selected pattern/playlist is playing in reverse (if the currently selected pattern is not a sequence/playlist, this value will return 0). You can set this value to anything other than 0 to play the currently selected sequence/playlist in reverse (this will have no effect if a non-sequence pattern is selected in the configuration).')
transportStop = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transportStop.setStatus('mandatory')
if mibBuilder.loadTexts: transportStop.setDescription('Determine whether the currently selected pattern/playlist is stopped (if the currently selected pattern is not a sequence/playlist, this value will return 0). You can set this value to anything other than 0 to play the currently selected sequence/playlist in reverse (this will have no effect if a non-sequence pattern is selected in the configuration).')
transportPlayForward = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transportPlayForward.setStatus('mandatory')
if mibBuilder.loadTexts: transportPlayForward.setDescription('Determine whether the currently selected pattern/playlist is playing forward (if the currently selected pattern is not a sequence/playlist, this value will return 0). You can set this value to anything other than 0 to play the currently selected sequence/playlist forward (this will have no effect if a non-sequence pattern is selected in the configuration).')
transportJogNext = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 9), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: transportJogNext.setStatus('mandatory')
if mibBuilder.loadTexts: transportJogNext.setDescription('Set this object to anything other than 0 to go to the next frame of currently selected sequence/playlist (this will have no effect if a non-sequence pattern is selected in the configuration).')
transportToEnd = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 10), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: transportToEnd.setStatus('mandatory')
if mibBuilder.loadTexts: transportToEnd.setDescription('Set this object to anything other than 0 to go to the last frame of currently selected sequence/playlist (this will have no effect if a non-sequence pattern is selected in the configuration).')
transportLoop = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transportLoop.setStatus('mandatory')
if mibBuilder.loadTexts: transportLoop.setDescription('Determine whether the currently selected pattern/playlist is looped (if the currently selected pattern is not a sequence/playlist, this value will return 0). You can set this value to 0 to disable loop, or anything other than 0 to loop the currently selected sequence/playlist (this will have no effect if a non-sequence pattern is selected in the configuration).')
systemUpTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458) + (0,1))
if mibBuilder.loadTexts: systemUpTRAP.setDescription('This trap is generated when the Omnitek software connects to the SNMP service.')
systemDownTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458) + (0,2))
if mibBuilder.loadTexts: systemDownTRAP.setDescription('This trap is generated when the SNMP service loses contact with the Omnitek software.')
videoStandardChangedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 1) + (0,3)).setObjects(("OMNITEK-MIB", "videoStandard"))
if mibBuilder.loadTexts: videoStandardChangedTRAP.setDescription('This trap is generated when the video standard is changed on the OmniTek card.')
digitalInputTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 1) + (0,4)).setObjects(("OMNITEK-MIB", "digitalInput"))
if mibBuilder.loadTexts: digitalInputTRAP.setDescription('Digital input present (1) or not (0).')
digitalInputBTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 1) + (0,5)).setObjects(("OMNITEK-MIB", "digitalInputB"))
if mibBuilder.loadTexts: digitalInputBTRAP.setDescription('Digital input link B present (1) or not (0).')
motionContentTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 1) + (0,6)).setObjects(("OMNITEK-MIB", "motionContent"))
if mibBuilder.loadTexts: motionContentTRAP.setDescription('This trap is generated when the input video freezes.')
lumaContentTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 1) + (0,7)).setObjects(("OMNITEK-MIB", "lumaContent"))
if mibBuilder.loadTexts: lumaContentTRAP.setDescription('This trap is generated when the input video loses its luminance component.')
chromaContentTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 1) + (0,8)).setObjects(("OMNITEK-MIB", "chromaContent"))
if mibBuilder.loadTexts: chromaContentTRAP.setDescription('This trap is generated when the input video loses its chrominance component.')
syncStatusTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 1) + (0,9)).setObjects(("OMNITEK-MIB", "syncStatus"))
if mibBuilder.loadTexts: syncStatusTRAP.setDescription('This trap is generated when the sync status changes.')
crcErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,10)).setObjects(("OMNITEK-MIB", "crcErrors"))
if mibBuilder.loadTexts: crcErrorsTRAP.setDescription('This trap is generated when a video CRC error is detected.')
crcBErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,11)).setObjects(("OMNITEK-MIB", "crcBErrors"))
if mibBuilder.loadTexts: crcBErrorsTRAP.setDescription('This trap is generated when a video CRC error is detected.')
rgbRangeErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,12)).setObjects(("OMNITEK-MIB", "rgbRangeErrors"))
if mibBuilder.loadTexts: rgbRangeErrorsTRAP.setDescription('This trap is generated when a video RGB range error is detected.')
ycbcrRangeErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,13)).setObjects(("OMNITEK-MIB", "ycbcrRangeErrors"))
if mibBuilder.loadTexts: ycbcrRangeErrorsTRAP.setDescription('This trap is generated when a video YCbCr range error is detected.')
trsErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,14)).setObjects(("OMNITEK-MIB", "trsErrors"))
if mibBuilder.loadTexts: trsErrorsTRAP.setDescription('This trap is generated when a video TRS error is detected.')
trsBErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,15)).setObjects(("OMNITEK-MIB", "trsBErrors"))
if mibBuilder.loadTexts: trsBErrorsTRAP.setDescription('This trap is generated when a video TRS error is detected.')
ancErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,16)).setObjects(("OMNITEK-MIB", "ancErrors"))
if mibBuilder.loadTexts: ancErrorsTRAP.setDescription('This trap is generated when a video ANC error is detected.')
ancBErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,17)).setObjects(("OMNITEK-MIB", "ancBErrors"))
if mibBuilder.loadTexts: ancBErrorsTRAP.setDescription('This trap is generated when a video ANC error is detected.')
lineErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,18)).setObjects(("OMNITEK-MIB", "lineErrors"))
if mibBuilder.loadTexts: lineErrorsTRAP.setDescription('This trap is generated when a video line number error is detected.')
lineBErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,19)).setObjects(("OMNITEK-MIB", "lineBErrors"))
if mibBuilder.loadTexts: lineBErrorsTRAP.setDescription('This trap is generated when a video line number error is detected.')
frozenVITCTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,20)).setObjects(("OMNITEK-MIB", "frozenVITC"))
if mibBuilder.loadTexts: frozenVITCTRAP.setDescription('This trap is generated when a VITC frozen error is detected. THIS TRAP NOT CURRENTLY IMPLEMENTED')
skippedVITCTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,21)).setObjects(("OMNITEK-MIB", "skippedVITC"))
if mibBuilder.loadTexts: skippedVITCTRAP.setDescription('This trap is generated when a VITC skipped error is detected. THIS TRAP NOT CURRENTLY IMPLEMENTED')
frozenATCTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,22)).setObjects(("OMNITEK-MIB", "frozenATC"))
if mibBuilder.loadTexts: frozenATCTRAP.setDescription('This trap is generated when a ATC frozen error is detected. THIS TRAP NOT CURRENTLY IMPLEMENTED')
skippedATCTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,23)).setObjects(("OMNITEK-MIB", "skippedATC"))
if mibBuilder.loadTexts: skippedATCTRAP.setDescription('This trap is generated when a ATC skipped error is detected. THIS TRAP NOT CURRENTLY IMPLEMENTED')
compRangeErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,24)).setObjects(("OMNITEK-MIB", "compRangeErrors"))
if mibBuilder.loadTexts: compRangeErrorsTRAP.setDescription('This trap is generated when a video Composite range error is detected.')
edhErrorTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,25)).setObjects(("OMNITEK-MIB", "edhError"))
if mibBuilder.loadTexts: edhErrorTRAP.setDescription('This trap is generated when a video EDH error is detected.')
edhInvalidTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,26)).setObjects(("OMNITEK-MIB", "edhInvalid"))
if mibBuilder.loadTexts: edhInvalidTRAP.setDescription('This trap is generated when a video EDH invalid is detected.')
mibBuilder.exportSymbols("OMNITEK-MIB", frozenVITC=frozenVITC, ycbcrRangeErrorsTRAP=ycbcrRangeErrorsTRAP, transportStop=transportStop, syncStatusTRAP=syncStatusTRAP, channelStatus1=channelStatus1, closedCaptionLine21=closedCaptionLine21, trsBErrors=trsBErrors, sampleGroup3=sampleGroup3, audio=audio, videoStandardChangedTRAP=videoStandardChangedTRAP, channelModeGroup3=channelModeGroup3, channelStatus12=channelStatus12, channelStatus6=channelStatus6, wordLengthGroup4=wordLengthGroup4, closedCaptionAnc708=closedCaptionAnc708, skippedVITCTRAP=skippedVITCTRAP, channelModeGroup4=channelModeGroup4, uRangeMin=uRangeMin, indexPattern=indexPattern, lumaContent=lumaContent, rgbRangeErrorsTRAP=rgbRangeErrorsTRAP, videoindex=videoindex, crcErrors=crcErrors, channelStatus15=channelStatus15, compRangeErrors=compRangeErrors, emphasisGroup2=emphasisGroup2, present=present, frequencyGroup4=frequencyGroup4, compRangeErrorsTRAP=compRangeErrorsTRAP, vRangeMax=vRangeMax, ancErrorsTRAP=ancErrorsTRAP, channelStatus14=channelStatus14, usageGroup1=usageGroup1, digitalInput=digitalInput, digitalInputBTRAP=digitalInputBTRAP, vRangeMin=vRangeMin, sampleGroup1=sampleGroup1, closedcaptions=closedcaptions, wordLengthGroup3=wordLengthGroup3, enhancedServicesEN300294=enhancedServicesEN300294, audioMin=audioMin, motionContent=motionContent, emphasisGroup3=emphasisGroup3, frozenVITCTRAP=frozenVITCTRAP, AudioStatus=AudioStatus, systemUpTRAP=systemUpTRAP, componentSet=componentSet, aspectRatioEN300294=aspectRatioEN300294, channelStatus16=channelStatus16, crcBErrorsTRAP=crcBErrorsTRAP, timecode=timecode, reservedARDSPEC=reservedARDSPEC, edhErrorTRAP=edhErrorTRAP, compRangeMin=compRangeMin, generator=generator, transportPlayReverse=transportPlayReverse, enhancedServicesARDSPEC=enhancedServicesARDSPEC, uRangeMax=uRangeMax, usageGroup2=usageGroup2, channelStatus4=channelStatus4, lockGroup1=lockGroup1, yRrangeMax=yRrangeMax, transportLoop=transportLoop, transportJogNext=transportJogNext, transportJogBack=transportJogBack, lineErrorsTRAP=lineErrorsTRAP, channelModeGroup1=channelModeGroup1, atc=atc, transportPlayForward=transportPlayForward, sampleStructure=sampleStructure, parityBitsARDSPEC=parityBitsARDSPEC, frozenATCTRAP=frozenATCTRAP, compRangeMax=compRangeMax, frozenATC=frozenATC, teletext=teletext, lineErrors=lineErrors, channelStatus2=channelStatus2, skippedATC=skippedATC, transportToEnd=transportToEnd, videostatus=videostatus, syncStatus=syncStatus, rgbRangeMax=rgbRangeMax, ancErrors=ancErrors, channelStatus10=channelStatus10, videoStandard=videoStandard, sampleGroup2=sampleGroup2, channelStatus5=channelStatus5, edhError=edhError, othersEN300294=othersEN300294, wss=wss, activeFormatARDSPEC=activeFormatARDSPEC, closedCaptionAnc608=closedCaptionAnc608, nextPattern=nextPattern, wordLengthGroup1=wordLengthGroup1, lineBErrors=lineBErrors, skippedVITC=skippedVITC, channelStatus8=channelStatus8, omnitek=omnitek, rgbRangeMin=rgbRangeMin, jobId=jobId, codedFrame=codedFrame, vitc=vitc, channelStatus9=channelStatus9, audioMax=audioMax, wssReadType=wssReadType, yRangeMin=yRangeMin, chromaContent=chromaContent, channelStatus11=channelStatus11, lockGroup2=lockGroup2, frequencyGroup1=frequencyGroup1, lockGroup4=lockGroup4, motionContentTRAP=motionContentTRAP, sampleGroup4=sampleGroup4, lockGroup3=lockGroup3, errors=errors, rgbRangeErrors=rgbRangeErrors, edhInvalid=edhInvalid, trsErrors=trsErrors, systemDownTRAP=systemDownTRAP, digitalInputTRAP=digitalInputTRAP, edhInvalidTRAP=edhInvalidTRAP, skippedATCTRAP=skippedATCTRAP, transportToStart=transportToStart, trsErrorsTRAP=trsErrorsTRAP, ancBErrors=ancBErrors, lineBErrorsTRAP=lineBErrorsTRAP, logging=logging, lumaContentTRAP=lumaContentTRAP, wordLengthGroup2=wordLengthGroup2, channelStatus7=channelStatus7, digitalInputB=digitalInputB, frequencyGroup2=frequencyGroup2, frequencyGroup3=frequencyGroup3, chromaContentTRAP=chromaContentTRAP, emphasisGroup4=emphasisGroup4, trsBErrorsTRAP=trsBErrorsTRAP, subtitlesEN300294=subtitlesEN300294, usageGroup3=usageGroup3, aspectRatioARDSPEC=aspectRatioARDSPEC, channelStatus13=channelStatus13, crcBErrors=crcBErrors, activeFormat=activeFormat, crcErrorsTRAP=crcErrorsTRAP, ycbcrRangeErrors=ycbcrRangeErrors, usageGroup4=usageGroup4, channelModeGroup2=channelModeGroup2, ancBErrorsTRAP=ancBErrorsTRAP, emphasisGroup1=emphasisGroup1, prevPattern=prevPattern, channelStatus3=channelStatus3)
