#
# PySNMP MIB module TPT-TPA-HARDWARE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPT-TPA-HARDWARE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:26:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Counter64, Gauge32, TimeTicks, MibIdentifier, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, IpAddress, iso, Integer32, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "Gauge32", "TimeTicks", "MibIdentifier", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "IpAddress", "iso", "Integer32", "NotificationType", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tpt_tpa_objs, tpt_tpa_eventsV2, tpt_tpa_unkparams = mibBuilder.importSymbols("TPT-TPAMIBS-MIB", "tpt-tpa-objs", "tpt-tpa-eventsV2", "tpt-tpa-unkparams")
tpt_tpa_hardware_objs = ModuleIdentity((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3)).setLabel("tpt-tpa-hardware-objs")
tpt_tpa_hardware_objs.setRevisions(('2016-05-25 18:54',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tpt_tpa_hardware_objs.setRevisionsDescriptions(('Updated copyright information. Minor MIB syntax fixes.',))
if mibBuilder.loadTexts: tpt_tpa_hardware_objs.setLastUpdated('201605251854Z')
if mibBuilder.loadTexts: tpt_tpa_hardware_objs.setOrganization('Trend Micro, Inc.')
if mibBuilder.loadTexts: tpt_tpa_hardware_objs.setContactInfo('www.trendmicro.com')
if mibBuilder.loadTexts: tpt_tpa_hardware_objs.setDescription("Hardware definition of a TPA and its components. Copyright (C) 2016 Trend Micro Incorporated. All Rights Reserved. Trend Micro makes no warranty of any kind with regard to this material, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. Trend Micro shall not be liable for errors contained herein or for incidental or consequential damages in connection with the furnishing, performance, or use of this material. This document contains proprietary information, which is protected by copyright. No part of this document may be photocopied, reproduced, or translated into another language without the prior written consent of Trend Micro. The information is provided 'as is' without warranty of any kind and is subject to change without notice. The only warranties for Trend Micro products and services are set forth in the express warranty statements accompanying such products and services. Nothing herein should be construed as constituting an additional warranty. Trend Micro shall not be liable for technical or editorial errors or omissions contained herein. TippingPoint(R), the TippingPoint logo, and Digital Vaccine(R) are registered trademarks of Trend Micro. All other company and product names may be trademarks of their respective holders. All rights reserved. This document contains confidential information, trade secrets or both, which are the property of Trend Micro. No part of this documentation may be reproduced in any form or by any means or used to make any derivative work (such as translation, transformation, or adaptation) without written permission from Trend Micro or one of its subsidiaries. All other company and product names may be trademarks of their respective holders. ")
class ManagedElementType(TextualConvention, Integer32):
    description = 'Type of a managed base hardware element (slot, port, power supply, fan, etc.) on a device.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("unequip", 0), ("chassis", 1), ("backplane", 2), ("controller", 3), ("network-interface", 4), ("network-interface-bcomm", 5), ("network-processor", 6), ("feature-card", 7), ("gige-port", 8), ("ten-base-t-port", 9), ("hundred-base-t-port", 10), ("sonet-atm-port", 11), ("sonet-pos-port", 12), ("sonet-pos-srp-port", 13), ("sdh-atm-port", 14), ("sdh-pos-port", 15), ("sdh-pos-srp-port", 16), ("power-supply", 17), ("power-supply-sub-unit", 18), ("fan-controller", 19), ("fan-sub-unit", 20), ("power-entry-module", 21), ("vnam-port", 22), ("ten-gige-port", 23), ("forty-gige-port", 24))

class ConfigRedundancy(TextualConvention, Integer32):
    description = 'An indication of whether a hardware slot is empty, stand-alone, or part of a redundant pair.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("unconfigured", 0), ("simplex", 1), ("duplex", 2), ("loadshare", 3), ("autonomous", 4))

class HardwareState(TextualConvention, Integer32):
    description = 'The high-level hardware state (active, initializing, standby, etc.).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("oos", 0), ("initialize", 1), ("act", 2), ("stby", 3), ("dgn", 4), ("lpbk", 5), ("act-faf", 6), ("stby-faf", 7), ("act-dgrd", 8), ("stby-dgrd", 9))

class HardwareStateQual(TextualConvention, Integer32):
    description = 'Further qualification/detail on the high-level hardware state.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))
    namedValues = NamedValues(("port-clear", 0), ("degraded", 1), ("port-los", 2), ("port-lof", 3), ("port-oof", 4), ("port-lop", 5), ("port-signal-degrade", 6), ("port-signal-failure", 7), ("port-ais-p", 8), ("port-ais-l", 9), ("port-rdi", 10), ("port-forced", 11), ("port-lockout", 12), ("yellow-alarm", 13), ("red-alarm", 14), ("parity-err", 15), ("crc-err", 16), ("unequipped-slot", 17), ("blade-pull", 18), ("blade-insert", 19), ("blade-slot-mismatch", 20), ("init-failure", 21), ("parent-oos", 22), ("removed", 23), ("no-info", 24), ("over-temp-alarm", 25), ("under-temp-alarm", 26), ("port-ool", 27), ("port-ool-clear", 28), ("inhibit", 29))

class ExtendedSlot(TextualConvention, Integer32):
    description = 'An identifier of either a slot or a hardware component. Slot numbers, slot11 to slot14 are valid on NX device, and refer to slot1 to slot4 on that device.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("slot1", 1), ("slot2", 2), ("slot3", 3), ("slot4", 4), ("slot5", 5), ("slot6", 6), ("slot7", 7), ("slot8", 8), ("shelf", 9), ("pem", 10), ("power-supply", 11), ("fan", 12), ("slot11", 13), ("slot12", 14), ("slot13", 15), ("slot14", 16))

class LineType(TextualConvention, Integer32):
    description = 'An indication of whether a port is copper or optical.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 21, 22, 23))
    namedValues = NamedValues(("undefined", 0), ("copper", 21), ("optical", 22), ("copper-sfp", 23))

class DuplexState(TextualConvention, Integer32):
    description = 'An indication of whether a port is running in full or half duplex mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("half", 1), ("full", 2))

class SfpQualifier(TextualConvention, Integer32):
    description = 'SFP qualifier value. These combines both the compliance codes for the 1G SFP and 10G SFP+, and transmitter technology for the 40G QSFP+ and 10G XFP transceivers.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))
    namedValues = NamedValues(("sfp-not-applicable", 0), ("sfp-10g-base-er", 1), ("sfp-10g-base-lrm", 2), ("sfp-10g-base-lr", 3), ("sfp-10g-base-sr", 4), ("sfp-base-px", 5), ("sfp-base-bx10", 6), ("sfp-100base-fx", 7), ("sfp-100base-lx-lx10", 8), ("sfp-1000base-t", 9), ("sfp-1000base-cx", 10), ("sfp-1000base-lx", 11), ("sfp-1000base-sx", 12), ("sfp-850-nm-vcsel", 13), ("sfp-1310-nm-vcsel", 14), ("sfp-1550-nm-vcsel", 15), ("sfp-1310-nm-fp", 16), ("sfp-1310-nm-dfb", 17), ("sfp-1550-nm-dfb", 18), ("sfp-1310-nm-eml", 19), ("sfp-1550-nm-eml", 20), ("sfp-copper-or-others", 21), ("sfp-1490-nm-dfb", 22), ("sfp-copper-cable-unequalized", 23), ("sfp-absent", 24), ("sfp-plus-absent", 25), ("qsfp-plus-absent", 26), ("sfp-xfp-absent", 27), ("sfp-10g-dac", 28), ("sfp-10g-dao", 29))

hw_slotTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1), ).setLabel("hw-slotTable")
if mibBuilder.loadTexts: hw_slotTable.setStatus('current')
if mibBuilder.loadTexts: hw_slotTable.setDescription('Table of slots/ports on the device.')
hw_slotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1), ).setLabel("hw-slotEntry").setIndexNames((0, "TPT-TPA-HARDWARE-MIB", "slotNumber"), (0, "TPT-TPA-HARDWARE-MIB", "slotPort"))
if mibBuilder.loadTexts: hw_slotEntry.setStatus('current')
if mibBuilder.loadTexts: hw_slotEntry.setDescription('An entry in the slot/port table. Rows cannot be created or deleted.')
slotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotNumber.setStatus('current')
if mibBuilder.loadTexts: slotNumber.setDescription('Slot number for this hardware element.')
slotPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotPort.setStatus('current')
if mibBuilder.loadTexts: slotPort.setDescription('Port number for this hardware element (0 refers to the board).')
slotType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 3), ManagedElementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotType.setStatus('current')
if mibBuilder.loadTexts: slotType.setDescription('Type of hardware element corresponding to slot/port.')
slotCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 4), ConfigRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCfgType.setStatus('current')
if mibBuilder.loadTexts: slotCfgType.setDescription('The configuration/redundancy of a hardware element.')
slotRunState = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 5), HardwareState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotRunState.setStatus('current')
if mibBuilder.loadTexts: slotRunState.setDescription('The high-level hardware state (active, initializing, standby, etc.).')
slotQualifier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 6), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotQualifier1.setStatus('current')
if mibBuilder.loadTexts: slotQualifier1.setDescription('Further qualification/detail on the high-level hardware state.')
slotQualifier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 7), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotQualifier2.setStatus('current')
if mibBuilder.loadTexts: slotQualifier2.setDescription('Further qualification/detail on the high-level hardware state.')
slotQualifier3 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 8), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotQualifier3.setStatus('current')
if mibBuilder.loadTexts: slotQualifier3.setDescription('Further qualification/detail on the high-level hardware state.')
slotQualifier4 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 9), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotQualifier4.setStatus('current')
if mibBuilder.loadTexts: slotQualifier4.setDescription('Further qualification/detail on the high-level hardware state.')
slotStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStartTime.setStatus('current')
if mibBuilder.loadTexts: slotStartTime.setDescription('The time (seconds) at which this hardware element was powered up.')
slotVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotVendorID.setStatus('current')
if mibBuilder.loadTexts: slotVendorID.setDescription('The identifying number of the vendor of this hardware.')
slotDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotDeviceID.setStatus('current')
if mibBuilder.loadTexts: slotDeviceID.setDescription('The PCI bus device ID for this slot.')
slotProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotProductID.setStatus('current')
if mibBuilder.loadTexts: slotProductID.setDescription('Versioning and other inventory information for this hardware element.')
slotFPGAVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotFPGAVersion.setStatus('current')
if mibBuilder.loadTexts: slotFPGAVersion.setDescription('The version of the TPT FPGA chip on this hardware.')
slotInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 15), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInterface.setStatus('current')
if mibBuilder.loadTexts: slotInterface.setDescription('The entry in the IF-MIB interface table that corresponds to this port.')
slotLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 16), LineType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotLineType.setStatus('current')
if mibBuilder.loadTexts: slotLineType.setDescription('The line type (e.g., copper or optical) of the port.')
slotDuplexState = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 17), DuplexState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotDuplexState.setStatus('current')
if mibBuilder.loadTexts: slotDuplexState.setDescription('The current duplex state (full or half) of the port.')
slotPhysical = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotPhysical.setStatus('current')
if mibBuilder.loadTexts: slotPhysical.setDescription('Physical port number for this hardware element (0 if not a port).')
slotSfpQualifier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 19), SfpQualifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotSfpQualifier1.setStatus('current')
if mibBuilder.loadTexts: slotSfpQualifier1.setDescription('Type of the SFP transceiver')
slotSfpQualifier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 20), SfpQualifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotSfpQualifier2.setStatus('current')
if mibBuilder.loadTexts: slotSfpQualifier2.setDescription('Type of the SFP transceiver. This is applicable to the dual speed transceivers, and this variable will have value of the second speed supported by those transceivers. For single-speed transceivers, the value will be not applicable.')
hw_chasTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2), ).setLabel("hw-chasTable")
if mibBuilder.loadTexts: hw_chasTable.setStatus('current')
if mibBuilder.loadTexts: hw_chasTable.setDescription('Table of chassis data for the device. Represented as a table with one row, and that row is the same as that for other managed elements.')
hw_chasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1), ).setLabel("hw-chasEntry").setIndexNames((0, "TPT-TPA-HARDWARE-MIB", "chasNumber"))
if mibBuilder.loadTexts: hw_chasEntry.setStatus('current')
if mibBuilder.loadTexts: hw_chasEntry.setDescription('An entry in the chassis table. Rows cannot be created or deleted.')
chasNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNumber.setStatus('current')
if mibBuilder.loadTexts: chasNumber.setDescription('Number for this entry in the chassis table. Should always be 0.')
chasType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 3), ManagedElementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasType.setStatus('current')
if mibBuilder.loadTexts: chasType.setDescription('Type of hardware element -- should always be chassis or unequip.')
chasCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 4), ConfigRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasCfgType.setStatus('current')
if mibBuilder.loadTexts: chasCfgType.setDescription('The configuration/redundancy of a hardware element.')
chasRunState = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 5), HardwareState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasRunState.setStatus('current')
if mibBuilder.loadTexts: chasRunState.setDescription('The high-level hardware state (active, initializing, standby, etc.).')
chasQualifier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 6), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasQualifier1.setStatus('current')
if mibBuilder.loadTexts: chasQualifier1.setDescription('Further qualification/detail on the high-level hardware state.')
chasQualifier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 7), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasQualifier2.setStatus('current')
if mibBuilder.loadTexts: chasQualifier2.setDescription('Further qualification/detail on the high-level hardware state.')
chasQualifier3 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 8), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasQualifier3.setStatus('current')
if mibBuilder.loadTexts: chasQualifier3.setDescription('Further qualification/detail on the high-level hardware state.')
chasQualifier4 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 9), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasQualifier4.setStatus('current')
if mibBuilder.loadTexts: chasQualifier4.setDescription('Further qualification/detail on the high-level hardware state.')
chasStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasStartTime.setStatus('current')
if mibBuilder.loadTexts: chasStartTime.setDescription('The time (seconds) at which the hardware element was powered up.')
chasVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasVendorID.setStatus('current')
if mibBuilder.loadTexts: chasVendorID.setDescription('The identifying number of the vendor of this hardware.')
chasDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasDeviceID.setStatus('current')
if mibBuilder.loadTexts: chasDeviceID.setDescription('An identifying number specific to this device.')
chasProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasProductID.setStatus('current')
if mibBuilder.loadTexts: chasProductID.setDescription('Versioning and other inventory information for this hardware element.')
chasFPGAVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasFPGAVersion.setStatus('current')
if mibBuilder.loadTexts: chasFPGAVersion.setDescription('The version of the TPT FPGA chip on this hardware.')
hw_fanTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3), ).setLabel("hw-fanTable")
if mibBuilder.loadTexts: hw_fanTable.setStatus('current')
if mibBuilder.loadTexts: hw_fanTable.setDescription('Table of fans on the device.')
hw_fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1), ).setLabel("hw-fanEntry").setIndexNames((0, "TPT-TPA-HARDWARE-MIB", "fanSubunit"))
if mibBuilder.loadTexts: hw_fanEntry.setStatus('current')
if mibBuilder.loadTexts: hw_fanEntry.setDescription('An entry in the fan table. Rows cannot be created or deleted.')
fanSubunit = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSubunit.setStatus('current')
if mibBuilder.loadTexts: fanSubunit.setDescription('Number of fan sub-unit (0 for controller).')
fanType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 3), ManagedElementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanType.setStatus('current')
if mibBuilder.loadTexts: fanType.setDescription('Type of hardware element -- should always be fan or unequip.')
fanCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 4), ConfigRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanCfgType.setStatus('current')
if mibBuilder.loadTexts: fanCfgType.setDescription('The configuration/redundancy of a hardware element.')
fanRunState = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 5), HardwareState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanRunState.setStatus('current')
if mibBuilder.loadTexts: fanRunState.setDescription('The high-level hardware state (active, initializing, standby, etc.).')
fanQualifier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 6), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanQualifier1.setStatus('current')
if mibBuilder.loadTexts: fanQualifier1.setDescription('Further qualification/detail on the high-level hardware state.')
fanQualifier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 7), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanQualifier2.setStatus('current')
if mibBuilder.loadTexts: fanQualifier2.setDescription('Further qualification/detail on the high-level hardware state.')
fanQualifier3 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 8), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanQualifier3.setStatus('current')
if mibBuilder.loadTexts: fanQualifier3.setDescription('Further qualification/detail on the high-level hardware state.')
fanQualifier4 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 9), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanQualifier4.setStatus('current')
if mibBuilder.loadTexts: fanQualifier4.setDescription('Further qualification/detail on the high-level hardware state.')
fanStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanStartTime.setStatus('current')
if mibBuilder.loadTexts: fanStartTime.setDescription('The time (seconds) at which the hardware element was powered up.')
fanVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanVendorID.setStatus('current')
if mibBuilder.loadTexts: fanVendorID.setDescription('The identifying number of the vendor of this hardware.')
fanDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanDeviceID.setStatus('current')
if mibBuilder.loadTexts: fanDeviceID.setDescription('An identifying number specific to this device.')
fanProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanProductID.setStatus('current')
if mibBuilder.loadTexts: fanProductID.setDescription('Versioning and other inventory information for this hardware element.')
fanFPGAVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFPGAVersion.setStatus('current')
if mibBuilder.loadTexts: fanFPGAVersion.setDescription('The version of the TPT FPGA chip on this hardware.')
hw_psTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4), ).setLabel("hw-psTable")
if mibBuilder.loadTexts: hw_psTable.setStatus('current')
if mibBuilder.loadTexts: hw_psTable.setDescription('Table of power supplies on the device.')
hw_psEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1), ).setLabel("hw-psEntry").setIndexNames((0, "TPT-TPA-HARDWARE-MIB", "psSubunit"))
if mibBuilder.loadTexts: hw_psEntry.setStatus('current')
if mibBuilder.loadTexts: hw_psEntry.setDescription('An entry in the power supply table. Rows cannot be created or deleted.')
psSubunit = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSubunit.setStatus('current')
if mibBuilder.loadTexts: psSubunit.setDescription('Number of power supply sub-unit (0 for controller).')
psType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 3), ManagedElementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psType.setStatus('current')
if mibBuilder.loadTexts: psType.setDescription('Type of hardware element -- should always be power-supply or unequip.')
psCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 4), ConfigRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCfgType.setStatus('current')
if mibBuilder.loadTexts: psCfgType.setDescription('The configuration/redundancy of a hardware element.')
psRunState = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 5), HardwareState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psRunState.setStatus('current')
if mibBuilder.loadTexts: psRunState.setDescription('The high-level hardware state (active, initializing, standby, etc.).')
psQualifier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 6), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psQualifier1.setStatus('current')
if mibBuilder.loadTexts: psQualifier1.setDescription('Further qualification/detail on the high-level hardware state.')
psQualifier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 7), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psQualifier2.setStatus('current')
if mibBuilder.loadTexts: psQualifier2.setDescription('Further qualification/detail on the high-level hardware state.')
psQualifier3 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 8), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psQualifier3.setStatus('current')
if mibBuilder.loadTexts: psQualifier3.setDescription('Further qualification/detail on the high-level hardware state.')
psQualifier4 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 9), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psQualifier4.setStatus('current')
if mibBuilder.loadTexts: psQualifier4.setDescription('Further qualification/detail on the high-level hardware state.')
psStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psStartTime.setStatus('current')
if mibBuilder.loadTexts: psStartTime.setDescription('The time (seconds) at which the hardware element was powered up.')
psVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psVendorID.setStatus('current')
if mibBuilder.loadTexts: psVendorID.setDescription('The identifying number of the vendor of this hardware.')
psDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDeviceID.setStatus('current')
if mibBuilder.loadTexts: psDeviceID.setDescription('An identifying number specific to this device.')
psProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psProductID.setStatus('current')
if mibBuilder.loadTexts: psProductID.setDescription('Versioning and other inventory information for this hardware element.')
psFPGAVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psFPGAVersion.setStatus('current')
if mibBuilder.loadTexts: psFPGAVersion.setDescription('The version of the TPT FPGA chip on this hardware.')
hw_pemTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5), ).setLabel("hw-pemTable")
if mibBuilder.loadTexts: hw_pemTable.setStatus('current')
if mibBuilder.loadTexts: hw_pemTable.setDescription('Table of power entry modules on the device.')
hw_pemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1), ).setLabel("hw-pemEntry").setIndexNames((0, "TPT-TPA-HARDWARE-MIB", "pemSubunit"))
if mibBuilder.loadTexts: hw_pemEntry.setStatus('current')
if mibBuilder.loadTexts: hw_pemEntry.setDescription('An entry in the power supply table. Rows cannot be created or deleted.')
pemSubunit = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemSubunit.setStatus('current')
if mibBuilder.loadTexts: pemSubunit.setDescription('Number of power entry module sub-unit (0 for controller).')
pemType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 3), ManagedElementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemType.setStatus('current')
if mibBuilder.loadTexts: pemType.setDescription('Type of hardware element -- should always be pem or unequip.')
pemCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 4), ConfigRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemCfgType.setStatus('current')
if mibBuilder.loadTexts: pemCfgType.setDescription('The configuration/redundancy of a hardware element.')
pemRunState = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 5), HardwareState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemRunState.setStatus('current')
if mibBuilder.loadTexts: pemRunState.setDescription('The high-level hardware state (active, initializing, standby, etc.).')
pemQualifier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 6), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemQualifier1.setStatus('current')
if mibBuilder.loadTexts: pemQualifier1.setDescription('Further qualification/detail on the high-level hardware state.')
pemQualifier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 7), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemQualifier2.setStatus('current')
if mibBuilder.loadTexts: pemQualifier2.setDescription('Further qualification/detail on the high-level hardware state.')
pemQualifier3 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 8), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemQualifier3.setStatus('current')
if mibBuilder.loadTexts: pemQualifier3.setDescription('Further qualification/detail on the high-level hardware state.')
pemQualifier4 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 9), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemQualifier4.setStatus('current')
if mibBuilder.loadTexts: pemQualifier4.setDescription('Further qualification/detail on the high-level hardware state.')
pemStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemStartTime.setStatus('current')
if mibBuilder.loadTexts: pemStartTime.setDescription('The time (seconds) at which the hardware element was powered up.')
pemVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemVendorID.setStatus('current')
if mibBuilder.loadTexts: pemVendorID.setDescription('The identifying number of the vendor of this hardware.')
pemDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemDeviceID.setStatus('current')
if mibBuilder.loadTexts: pemDeviceID.setDescription('An identifying number specific to this device.')
pemProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemProductID.setStatus('current')
if mibBuilder.loadTexts: pemProductID.setDescription('Versioning and other inventory information for this hardware element.')
pemFPGAVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemFPGAVersion.setStatus('current')
if mibBuilder.loadTexts: pemFPGAVersion.setDescription('The version of the TPT FPGA chip on this hardware.')
hw_numSlots = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 6), Unsigned32()).setLabel("hw-numSlots").setMaxAccess("readonly")
if mibBuilder.loadTexts: hw_numSlots.setStatus('current')
if mibBuilder.loadTexts: hw_numSlots.setDescription('The number of slots for this device.')
hw_numFans = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 7), Unsigned32()).setLabel("hw-numFans").setMaxAccess("readonly")
if mibBuilder.loadTexts: hw_numFans.setStatus('current')
if mibBuilder.loadTexts: hw_numFans.setDescription('The number of fan subunits for this device.')
hw_numPowerSupplies = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 8), Unsigned32()).setLabel("hw-numPowerSupplies").setMaxAccess("readonly")
if mibBuilder.loadTexts: hw_numPowerSupplies.setStatus('current')
if mibBuilder.loadTexts: hw_numPowerSupplies.setDescription('The number of power supply subunits for this device.')
hw_numPEMs = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 9), Unsigned32()).setLabel("hw-numPEMs").setMaxAccess("readonly")
if mibBuilder.loadTexts: hw_numPEMs.setStatus('current')
if mibBuilder.loadTexts: hw_numPEMs.setDescription('The number of PEM subunits for this device.')
hw_certificateNumber = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setLabel("hw-certificateNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: hw_certificateNumber.setStatus('current')
if mibBuilder.loadTexts: hw_certificateNumber.setDescription('The hardware certficate number of the device.')
hw_serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setLabel("hw-serialNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: hw_serialNumber.setStatus('current')
if mibBuilder.loadTexts: hw_serialNumber.setDescription('The hardware serial number of the device.')
tptHardwareNotifyDeviceID = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptHardwareNotifyDeviceID.setStatus('current')
if mibBuilder.loadTexts: tptHardwareNotifyDeviceID.setDescription('The unique identifier of the device sending this notification.')
tptHardwareNotifySlot = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 2), ExtendedSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptHardwareNotifySlot.setStatus('current')
if mibBuilder.loadTexts: tptHardwareNotifySlot.setDescription('The slot of the hardware whose state has changed. If the hardware element is not a board, this value identifies it as a chassis, fan, power supply, PEM, etc.')
tptHardwareNotifyPort = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptHardwareNotifyPort.setStatus('current')
if mibBuilder.loadTexts: tptHardwareNotifyPort.setDescription('The port or sub-unit number of the hardware whose state has changed. Zero for a board, chassis, fan controller, power supply, or power entry module.')
tptHardwareNotifyMeType = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 4), ManagedElementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptHardwareNotifyMeType.setStatus('current')
if mibBuilder.loadTexts: tptHardwareNotifyMeType.setDescription('The type of the managed element (e.g., backplane, controller, power supply, fan, etc.) whose state has changed.')
tptHardwareNotifyCfgType = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 5), ConfigRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptHardwareNotifyCfgType.setStatus('current')
if mibBuilder.loadTexts: tptHardwareNotifyCfgType.setDescription('The configuration/redundancy of the hardware whose state has changed.')
tptHardwareNotifyHlState = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 6), HardwareState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptHardwareNotifyHlState.setStatus('current')
if mibBuilder.loadTexts: tptHardwareNotifyHlState.setDescription('The high-level hardware state (active, initializing, standby, etc.).')
tptHardwareNotifyHlStateQual = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 7), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptHardwareNotifyHlStateQual.setStatus('current')
if mibBuilder.loadTexts: tptHardwareNotifyHlStateQual.setDescription('Further qualification/detail on the high-level state.')
tptHardwareNotify = NotificationType((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 0, 7)).setObjects(("TPT-TPA-HARDWARE-MIB", "tptHardwareNotifyDeviceID"), ("TPT-TPA-HARDWARE-MIB", "tptHardwareNotifySlot"), ("TPT-TPA-HARDWARE-MIB", "tptHardwareNotifyPort"), ("TPT-TPA-HARDWARE-MIB", "tptHardwareNotifyMeType"), ("TPT-TPA-HARDWARE-MIB", "tptHardwareNotifyCfgType"), ("TPT-TPA-HARDWARE-MIB", "tptHardwareNotifyHlState"), ("TPT-TPA-HARDWARE-MIB", "tptHardwareNotifyHlStateQual"))
if mibBuilder.loadTexts: tptHardwareNotify.setStatus('current')
if mibBuilder.loadTexts: tptHardwareNotify.setDescription('Notification: Used to inform the management station of changes in hardware state on the device.')
mibBuilder.exportSymbols("TPT-TPA-HARDWARE-MIB", slotVendorID=slotVendorID, hw_pemTable=hw_pemTable, hw_slotTable=hw_slotTable, tptHardwareNotifyPort=tptHardwareNotifyPort, slotInterface=slotInterface, slotNumber=slotNumber, chasQualifier1=chasQualifier1, PYSNMP_MODULE_ID=tpt_tpa_hardware_objs, hw_slotEntry=hw_slotEntry, chasQualifier3=chasQualifier3, hw_fanEntry=hw_fanEntry, tptHardwareNotifySlot=tptHardwareNotifySlot, hw_psEntry=hw_psEntry, chasCfgType=chasCfgType, chasQualifier4=chasQualifier4, psFPGAVersion=psFPGAVersion, fanRunState=fanRunState, LineType=LineType, chasQualifier2=chasQualifier2, hw_fanTable=hw_fanTable, hw_numSlots=hw_numSlots, slotQualifier2=slotQualifier2, fanVendorID=fanVendorID, psSubunit=psSubunit, ConfigRedundancy=ConfigRedundancy, fanType=fanType, DuplexState=DuplexState, slotPhysical=slotPhysical, fanCfgType=fanCfgType, fanProductID=fanProductID, pemCfgType=pemCfgType, pemQualifier2=pemQualifier2, tptHardwareNotifyMeType=tptHardwareNotifyMeType, slotProductID=slotProductID, chasNumber=chasNumber, chasDeviceID=chasDeviceID, pemType=pemType, pemDeviceID=pemDeviceID, hw_psTable=hw_psTable, slotQualifier1=slotQualifier1, tptHardwareNotifyDeviceID=tptHardwareNotifyDeviceID, fanQualifier3=fanQualifier3, slotDeviceID=slotDeviceID, pemVendorID=pemVendorID, psQualifier1=psQualifier1, psQualifier3=psQualifier3, HardwareStateQual=HardwareStateQual, hw_pemEntry=hw_pemEntry, fanQualifier2=fanQualifier2, slotType=slotType, fanFPGAVersion=fanFPGAVersion, chasRunState=chasRunState, pemSubunit=pemSubunit, chasType=chasType, fanStartTime=fanStartTime, fanQualifier4=fanQualifier4, slotDuplexState=slotDuplexState, tptHardwareNotify=tptHardwareNotify, hw_numPEMs=hw_numPEMs, slotQualifier4=slotQualifier4, chasProductID=chasProductID, tptHardwareNotifyHlStateQual=tptHardwareNotifyHlStateQual, hw_serialNumber=hw_serialNumber, pemStartTime=pemStartTime, slotFPGAVersion=slotFPGAVersion, chasVendorID=chasVendorID, pemQualifier4=pemQualifier4, fanQualifier1=fanQualifier1, chasStartTime=chasStartTime, hw_certificateNumber=hw_certificateNumber, psStartTime=psStartTime, pemFPGAVersion=pemFPGAVersion, psDeviceID=psDeviceID, fanSubunit=fanSubunit, slotLineType=slotLineType, slotPort=slotPort, pemQualifier3=pemQualifier3, SfpQualifier=SfpQualifier, tptHardwareNotifyCfgType=tptHardwareNotifyCfgType, psProductID=psProductID, pemProductID=pemProductID, pemQualifier1=pemQualifier1, slotRunState=slotRunState, fanDeviceID=fanDeviceID, ExtendedSlot=ExtendedSlot, psVendorID=psVendorID, psRunState=psRunState, hw_chasEntry=hw_chasEntry, psQualifier4=psQualifier4, HardwareState=HardwareState, ManagedElementType=ManagedElementType, psCfgType=psCfgType, slotSfpQualifier1=slotSfpQualifier1, hw_chasTable=hw_chasTable, psQualifier2=psQualifier2, hw_numFans=hw_numFans, tptHardwareNotifyHlState=tptHardwareNotifyHlState, tpt_tpa_hardware_objs=tpt_tpa_hardware_objs, chasFPGAVersion=chasFPGAVersion, pemRunState=pemRunState, slotQualifier3=slotQualifier3, slotCfgType=slotCfgType, hw_numPowerSupplies=hw_numPowerSupplies, psType=psType, slotSfpQualifier2=slotSfpQualifier2, slotStartTime=slotStartTime)
