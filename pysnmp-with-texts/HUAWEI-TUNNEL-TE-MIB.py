#
# PySNMP MIB module HUAWEI-TUNNEL-TE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-TUNNEL-TE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:49:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
MplsIndexType, = mibBuilder.importSymbols("MPLS-LSR-STD-MIB", "MplsIndexType")
MplsExtendedTunnelId, MplsTunnelIndex, MplsTunnelInstanceIndex = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsExtendedTunnelId", "MplsTunnelIndex", "MplsTunnelInstanceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, Bits, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Unsigned32, iso, ObjectIdentity, MibIdentifier, Counter64, Bits, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Unsigned32", "iso", "ObjectIdentity", "MibIdentifier", "Counter64", "Bits", "Counter32", "Gauge32")
TruthValue, RowStatus, DisplayString, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DisplayString", "TextualConvention", "TimeStamp")
hwTunnelTeMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151))
hwTunnelTeMib.setRevisions(('2013-08-28 17:26', '2006-06-30 15:54',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwTunnelTeMib.setRevisionsDescriptions(('V2.01, modify comment.', 'Initial version 2006/06/10,MPLS LSPM MIB GROUP.',))
if mibBuilder.loadTexts: hwTunnelTeMib.setLastUpdated('201308281726Z')
if mibBuilder.loadTexts: hwTunnelTeMib.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwTunnelTeMib.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwTunnelTeMib.setDescription('This MIB contains private managed object definitions for the binding information.')
hwTunnelTeMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1))
hwTunnelDiffServTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 1), )
if mibBuilder.loadTexts: hwTunnelDiffServTable.setStatus('current')
if mibBuilder.loadTexts: hwTunnelDiffServTable.setDescription('The table describes the different service mode of tunnel.')
hwTunnelDiffServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 1, 1), ).setIndexNames((0, "HUAWEI-TUNNEL-TE-MIB", "hwTunnelDiffServIndex"))
if mibBuilder.loadTexts: hwTunnelDiffServEntry.setStatus('current')
if mibBuilder.loadTexts: hwTunnelDiffServEntry.setDescription('Interface different service mode attribute configuration.')
hwTunnelDiffServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwTunnelDiffServIndex.setStatus('current')
if mibBuilder.loadTexts: hwTunnelDiffServIndex.setDescription('Uniquely identifies a set of tunnel instances between a pair of ingress and egress LSRs. Managers should obtain new values for row creation in this table by reading mplsTunnelIndexNext. When the MPLS signalling protocol is rsvp(2),this value should be equal to the value signalled in the Tunnel ID of the session object. When the MPLS signalling protocol is crldp(3) this value should be equal to the value signalled in the LSP ID. Reference to MPLS-TE-STD-MIB.')
hwTunnelDiffServMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pipe", 1), ("uniform", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTunnelDiffServMode.setStatus('current')
if mibBuilder.loadTexts: hwTunnelDiffServMode.setDescription('Different service mode of TE interface, default is uniform.')
hwTunnelDiffServServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8), ("invalidClass", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTunnelDiffServServiceClass.setStatus('current')
if mibBuilder.loadTexts: hwTunnelDiffServServiceClass.setDescription('PHB in the ingress PE, the value must be be,af1,af2,af3,af4,ef,cs6,cs7.The default class is invalidClass(255).')
hwTunnelDiffServColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("green", 1), ("yellow", 2), ("red", 3), ("invalidColor", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTunnelDiffServColor.setStatus('current')
if mibBuilder.loadTexts: hwTunnelDiffServColor.setDescription('Remarked color of packet in the ingress PE, the value must be green,yellow,red.The default color is invalidColor(255).')
hwTunnelTeFlowQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTunnelTeFlowQueue.setStatus('current')
if mibBuilder.loadTexts: hwTunnelTeFlowQueue.setDescription('Name of flow-queue template.')
hwTunnelTeVsiTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 2), )
if mibBuilder.loadTexts: hwTunnelTeVsiTable.setStatus('obsolete')
if mibBuilder.loadTexts: hwTunnelTeVsiTable.setDescription('The table describes the VPN binding of Tunnel.')
hwTunnelTeVsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 2, 1), ).setIndexNames((0, "HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeVsiIndex"), (0, "HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeVsiName"))
if mibBuilder.loadTexts: hwTunnelTeVsiEntry.setStatus('obsolete')
if mibBuilder.loadTexts: hwTunnelTeVsiEntry.setDescription('The L2VPN VSI binding configuration of tunnel interface.')
hwTunnelTeVsiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwTunnelTeVsiIndex.setStatus('obsolete')
if mibBuilder.loadTexts: hwTunnelTeVsiIndex.setDescription('Uniquely identifies a set of tunnel instances between a pair of ingress and egress LSRs. Managers should obtain new values for row creation in this table by reading mplsTunnelIndexNext. When the MPLS signalling protocol is rsvp(2),this value should be equal to the value signalled in the tunnel ID of the session object. When the MPLS signalling protocol is crldp(3) this value should be equal to the value signalled in the LSP ID. Reference to MPLS-TE-STD-MIB.')
hwTunnelTeVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47)))
if mibBuilder.loadTexts: hwTunnelTeVsiName.setStatus('obsolete')
if mibBuilder.loadTexts: hwTunnelTeVsiName.setDescription('The name of VSI that the TE interface bind.')
hwTunnelTeVsiCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTunnelTeVsiCir.setStatus('obsolete')
if mibBuilder.loadTexts: hwTunnelTeVsiCir.setDescription('The Committed Information Rate of the VSI.')
hwTunnelTeVsiPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTunnelTeVsiPir.setStatus('obsolete')
if mibBuilder.loadTexts: hwTunnelTeVsiPir.setDescription('The Peak Information Rate of the VSI.')
hwTunnelTeVsiFlowQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTunnelTeVsiFlowQueue.setStatus('obsolete')
if mibBuilder.loadTexts: hwTunnelTeVsiFlowQueue.setDescription('Name of flow-queue template.')
hwTunnelTeVllTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 3), )
if mibBuilder.loadTexts: hwTunnelTeVllTable.setStatus('obsolete')
if mibBuilder.loadTexts: hwTunnelTeVllTable.setDescription('The table describes the VLL binding of tunnel.')
hwTunnelTeVllEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 3, 1), ).setIndexNames((0, "HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeVllIndex"), (0, "HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeVllInterfaceName"))
if mibBuilder.loadTexts: hwTunnelTeVllEntry.setStatus('obsolete')
if mibBuilder.loadTexts: hwTunnelTeVllEntry.setDescription('The VLL binding configuration of tunnel interface.')
hwTunnelTeVllIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwTunnelTeVllIndex.setStatus('obsolete')
if mibBuilder.loadTexts: hwTunnelTeVllIndex.setDescription('Uniquely identifies a set of tunnel instances between a pair of ingress and egress LSRs. Managers should obtain new values for row creation in this table by reading mplsTunnelIndexNext. When the MPLS signalling protocol is rsvp(2),this value should be equal to the value signalled in the tunnel ID of the session object. When the MPLS signalling protocol is crldp(3) this value should be equal to the value signalled in the LSP ID. Reference to MPLS-TE-STD-MIB.')
hwTunnelTeVllInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47)))
if mibBuilder.loadTexts: hwTunnelTeVllInterfaceName.setStatus('obsolete')
if mibBuilder.loadTexts: hwTunnelTeVllInterfaceName.setDescription('The interface name of VLL binding.')
hwTunnelTeVllCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTunnelTeVllCir.setStatus('obsolete')
if mibBuilder.loadTexts: hwTunnelTeVllCir.setDescription('The Committed Information Rate of the VLL.')
hwTunnelTeVllPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTunnelTeVllPir.setStatus('obsolete')
if mibBuilder.loadTexts: hwTunnelTeVllPir.setDescription('The Peak Information Rate of the VLL.')
hwTunnelTeVllFlowQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTunnelTeVllFlowQueue.setStatus('obsolete')
if mibBuilder.loadTexts: hwTunnelTeVllFlowQueue.setDescription('Name of flow-queue template.')
hwTunnelTeL3vpnTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 4), )
if mibBuilder.loadTexts: hwTunnelTeL3vpnTable.setStatus('obsolete')
if mibBuilder.loadTexts: hwTunnelTeL3vpnTable.setDescription('The table describes the L3VPN binding of tunnel.')
hwTunnelTeL3vpnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 4, 1), ).setIndexNames((0, "HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeL3vpnIndex"), (0, "HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeL3vpnName"))
if mibBuilder.loadTexts: hwTunnelTeL3vpnEntry.setStatus('obsolete')
if mibBuilder.loadTexts: hwTunnelTeL3vpnEntry.setDescription('The L3VPN binding configuration of tunnel interface.')
hwTunnelTeL3vpnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwTunnelTeL3vpnIndex.setStatus('obsolete')
if mibBuilder.loadTexts: hwTunnelTeL3vpnIndex.setDescription('Uniquely identifies a set of tunnel instances between a pair of ingress and egress LSRs. Managers should obtain new values for row creation in this table by reading mplsTunnelIndexNext. When the MPLS signalling protocol is rsvp(2),this value should be equal to the value signalled in the tunnel ID of the session object. When the MPLS signalling protocol is crldp(3) this value should be equal to the value signalled in the LSP ID. Reference to MPLS-TE-STD-MIB.')
hwTunnelTeL3vpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47)))
if mibBuilder.loadTexts: hwTunnelTeL3vpnName.setStatus('obsolete')
if mibBuilder.loadTexts: hwTunnelTeL3vpnName.setDescription('The name of VPN instance that the TE interface bind.')
hwTunnelTeL3vpnCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTunnelTeL3vpnCir.setStatus('obsolete')
if mibBuilder.loadTexts: hwTunnelTeL3vpnCir.setDescription('The Committed Information Rate of the L3VPN.')
hwTunnelTeL3vpnPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTunnelTeL3vpnPir.setStatus('obsolete')
if mibBuilder.loadTexts: hwTunnelTeL3vpnPir.setDescription('The Peak Information Rate of the L3VPN.')
hwTunnelTeL3vpnFlowQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTunnelTeL3vpnFlowQueue.setStatus('obsolete')
if mibBuilder.loadTexts: hwTunnelTeL3vpnFlowQueue.setDescription('Name of flow-queue template.')
hwTunnelTeStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 5), )
if mibBuilder.loadTexts: hwTunnelTeStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwTunnelTeStatisticsTable.setDescription('The table describes the up/down state transition counts of the TE tunnel interface.')
hwTunnelTeStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 5, 1), ).setIndexNames((0, "HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeStatisticsIfIndex"))
if mibBuilder.loadTexts: hwTunnelTeStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwTunnelTeStatisticsEntry.setDescription('The up/down state transition counts of TE tunnel interface. The index of the table is hwTunnelTeStatisticsIfIndex.')
hwTunnelTeStatisticsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwTunnelTeStatisticsIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwTunnelTeStatisticsIfIndex.setDescription('Uniquely identifies a set of tunnel instances between a pair of ingress and egress LSRs. Managers should obtain new values for row creation in this table by reading mplsTunnelIndexNext.')
hwTunnelTeUpDownStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTunnelTeUpDownStatistics.setStatus('current')
if mibBuilder.loadTexts: hwTunnelTeUpDownStatistics.setDescription('Describes the up/down transition counts of the TE tunnel interface.')
hwTunnTeCounterDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 5, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTunnTeCounterDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: hwTunnTeCounterDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which this interface's up/down transition counters suffered a discontinuity.")
hwCtTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 6), )
if mibBuilder.loadTexts: hwCtTemplateTable.setStatus('current')
if mibBuilder.loadTexts: hwCtTemplateTable.setDescription('The table describes the CT template configuration on the device.')
hwCtTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 6, 1), ).setIndexNames((0, "HUAWEI-TUNNEL-TE-MIB", "hwCtTemplateIndex"))
if mibBuilder.loadTexts: hwCtTemplateEntry.setStatus('current')
if mibBuilder.loadTexts: hwCtTemplateEntry.setDescription('The CT template configuration on the device. The index of the table is hwCtTemplateIndex.')
hwCtTemplateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: hwCtTemplateIndex.setStatus('current')
if mibBuilder.loadTexts: hwCtTemplateIndex.setDescription('It uniquely identifies a set of CT templates. Managers should obtain new values for row creation in this table by reading hwCtTemplateIndex.')
hwCtTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCtTemplateName.setStatus('current')
if mibBuilder.loadTexts: hwCtTemplateName.setDescription('The CT template name.')
hwCtTemplateCt0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCtTemplateCt0.setStatus('current')
if mibBuilder.loadTexts: hwCtTemplateCt0.setDescription('The CT0 bandwidth of the CT template.')
hwCtTemplateCt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCtTemplateCt1.setStatus('current')
if mibBuilder.loadTexts: hwCtTemplateCt1.setDescription('The CT1 bandwidth of the CT template.')
hwCtTemplateCt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCtTemplateCt2.setStatus('current')
if mibBuilder.loadTexts: hwCtTemplateCt2.setDescription('The CT2 bandwidth of the CT template.')
hwCtTemplateCt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 6, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCtTemplateCt3.setStatus('current')
if mibBuilder.loadTexts: hwCtTemplateCt3.setDescription('The CT3 bandwidth of the CT template.')
hwCtTemplateCt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 6, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCtTemplateCt4.setStatus('current')
if mibBuilder.loadTexts: hwCtTemplateCt4.setDescription('The CT4 bandwidth of the CT template.')
hwCtTemplateCt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 6, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCtTemplateCt5.setStatus('current')
if mibBuilder.loadTexts: hwCtTemplateCt5.setDescription('The CT5 bandwidth of the CT template.')
hwCtTemplateCt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCtTemplateCt6.setStatus('current')
if mibBuilder.loadTexts: hwCtTemplateCt6.setDescription('The CT6 bandwidth of the CT template.')
hwCtTemplateCt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 6, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCtTemplateCt7.setStatus('current')
if mibBuilder.loadTexts: hwCtTemplateCt7.setDescription('The CT7 bandwidth of the CT template.')
hwCtTemplateCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notCommit", 1), ("commit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCtTemplateCommit.setStatus('current')
if mibBuilder.loadTexts: hwCtTemplateCommit.setDescription('The commit flag of the CT template,1 indicates commit,0 indicates not commit.')
hwCtTemplateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 6, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCtTemplateRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCtTemplateRowStatus.setDescription('This object is used to create and delete rows in the CT template.')
hwCtConfigTunnelCtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 7), )
if mibBuilder.loadTexts: hwCtConfigTunnelCtTable.setStatus('current')
if mibBuilder.loadTexts: hwCtConfigTunnelCtTable.setDescription('The table describes the CT configuration in the TE tunnel interface.')
hwCtConfigTunnelCtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 7, 1), ).setIndexNames((0, "HUAWEI-TUNNEL-TE-MIB", "hwCtConfigTunnelCtIfIndex"))
if mibBuilder.loadTexts: hwCtConfigTunnelCtEntry.setStatus('current')
if mibBuilder.loadTexts: hwCtConfigTunnelCtEntry.setDescription('The table describes the CT configuration in the TE tunnel interface. The index of the table is hwCtConfigTunnelCtIfIndex.')
hwCtConfigTunnelCtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwCtConfigTunnelCtIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwCtConfigTunnelCtIfIndex.setDescription('Uniquely identifies a set of tunnels between a pair of ingress and egress LSRs. Managers should obtain new values for row creation in this table by reading mplsTunnelIndexNext. When the MPLS signalling protocol is rsvp(2),this value should be equal to the value signalled in the tunnel ID of the session object. When the MPLS signalling protocol is crldp(3) this value should be equal to the value signalled in the LSP ID. Reference to MPLS-TE-STD-MIB.')
hwCtConfigTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtConfigTunnelName.setStatus('current')
if mibBuilder.loadTexts: hwCtConfigTunnelName.setDescription('The name of the TE tunnel interface.')
hwCtConfigTunnelCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notCommit", 1), ("commit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtConfigTunnelCommit.setStatus('current')
if mibBuilder.loadTexts: hwCtConfigTunnelCommit.setDescription('The commit flag of the TE tunnel interface,1 indicates commit,0 indicates not commit.')
hwCtConfigTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtConfigTemplateName.setStatus('current')
if mibBuilder.loadTexts: hwCtConfigTemplateName.setDescription('The CT template name.')
hwCtConfigTunnelCt0Band = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtConfigTunnelCt0Band.setStatus('current')
if mibBuilder.loadTexts: hwCtConfigTunnelCt0Band.setDescription('The CT0 bandwidth value of the TE tunnel interface.')
hwCtConfigTunnelCt1Band = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 7, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtConfigTunnelCt1Band.setStatus('current')
if mibBuilder.loadTexts: hwCtConfigTunnelCt1Band.setDescription('The CT1 bandwidth value of the TE tunnel interface.')
hwCtConfigTunnelCt2Band = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 7, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtConfigTunnelCt2Band.setStatus('current')
if mibBuilder.loadTexts: hwCtConfigTunnelCt2Band.setDescription('The CT2 bandwidth value of the TE tunnel interface.')
hwCtConfigTunnelCt3Band = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 7, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtConfigTunnelCt3Band.setStatus('current')
if mibBuilder.loadTexts: hwCtConfigTunnelCt3Band.setDescription('The CT3 bandwidth value of the TE tunnel interface.')
hwCtConfigTunnelCt4Band = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 7, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtConfigTunnelCt4Band.setStatus('current')
if mibBuilder.loadTexts: hwCtConfigTunnelCt4Band.setDescription('The CT4 bandwidth value of the TE tunnel interface.')
hwCtConfigTunnelCt5Band = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 7, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtConfigTunnelCt5Band.setStatus('current')
if mibBuilder.loadTexts: hwCtConfigTunnelCt5Band.setDescription('The CT5 bandwidth value of the TE tunnel interface.')
hwCtConfigTunnelCt6Band = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 7, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtConfigTunnelCt6Band.setStatus('current')
if mibBuilder.loadTexts: hwCtConfigTunnelCt6Band.setDescription('The CT6 bandwidth value of the TE tunnel interface.')
hwCtConfigTunnelCt7Band = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 7, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtConfigTunnelCt7Band.setStatus('current')
if mibBuilder.loadTexts: hwCtConfigTunnelCt7Band.setDescription('The CT7 bandwidth value of the TE tunnel interface.')
hwCtStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8), )
if mibBuilder.loadTexts: hwCtStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsTable.setDescription('The table describes flow statistics of the TE tunnel interface VPN configuration.')
hwCtStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1), ).setIndexNames((0, "HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsIfIndex"))
if mibBuilder.loadTexts: hwCtStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsEntry.setDescription('The table describes the statistics in the TE tunnel interface with CT configuration. The index of the table is hwCtStatisticsIfIndex.')
hwCtStatisticsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwCtStatisticsIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsIfIndex.setDescription('Uniquely identifies a set of tunnels between a pair of ingress and egress LSRs. Managers should obtain new values for row creation in this table by reading mplsTunnelIndexNext. When the MPLS signalling protocol is rsvp(2),this value should be equal to the value signalled in the tunnel ID of the session object. When the MPLS signalling protocol is crldp(3) this value should be equal to the value signalled in the LSP ID. Reference to MPLS-TE-STD-MIB.')
hwCtStatisticsTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsTunnelName.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsTunnelName.setDescription('The name of the TE tunnel interface.')
hwCtStatisticsCt0OutByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt0OutByteRate.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt0OutByteRate.setDescription('It counts the rate in bytes/sec out from the CT0 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt0OutPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt0OutPktRate.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt0OutPktRate.setDescription('It counts the rate in packets/sec out from the CT0 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt0OutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt0OutPkt.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt0OutPkt.setDescription('It counts the out packets from the CT0 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt0OutPktByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt0OutPktByte.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt0OutPktByte.setDescription('It counts the out bytes from the CT0 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt0OutErrorPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt0OutErrorPkt.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt0OutErrorPkt.setDescription('It counts the error packets from the CT0 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt1OutByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt1OutByteRate.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt1OutByteRate.setDescription('It counts the rate in bytes/sec out from CT1 the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt1OutPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt1OutPktRate.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt1OutPktRate.setDescription('It counts the rate in packets/sec out from the CT0 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt1OutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt1OutPkt.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt1OutPkt.setDescription('It counts the out packets from the CT1 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt1OutPktByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt1OutPktByte.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt1OutPktByte.setDescription('It counts the out packet bytes from the CT1 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt1OutErrorPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt1OutErrorPkt.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt1OutErrorPkt.setDescription('It counts the error packets from the CT1 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt2OutByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt2OutByteRate.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt2OutByteRate.setDescription('It counts the rate in bytes/sec out from the CT2 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt2OutPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt2OutPktRate.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt2OutPktRate.setDescription('It counts the rate in packets/sec out from the CT2 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt2OutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt2OutPkt.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt2OutPkt.setDescription('It counts the out packets from the CT2 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt2OutPktByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt2OutPktByte.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt2OutPktByte.setDescription('It counts the out packet bytes from the CT2 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt2OutErrorPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt2OutErrorPkt.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt2OutErrorPkt.setDescription('It counts the error packets from the CT2 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt3OutByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt3OutByteRate.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt3OutByteRate.setDescription('The CT3 out in bytes/sec out of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt3OutPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt3OutPktRate.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt3OutPktRate.setDescription('It counts the rate in packets/sec out from the CT0 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt3OutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt3OutPkt.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt3OutPkt.setDescription('It counts the out packets from the CT3 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt3OutPktByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt3OutPktByte.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt3OutPktByte.setDescription('It counts the out packet bytes from the CT3 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt3OutErrorPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt3OutErrorPkt.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt3OutErrorPkt.setDescription('It counts the error packets from the CT0 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt4OutByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt4OutByteRate.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt4OutByteRate.setDescription('The CT4 out in bytes/sec out of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt4OutPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt4OutPktRate.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt4OutPktRate.setDescription('It counts the rate in packets/sec out from the CT4 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt4OutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt4OutPkt.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt4OutPkt.setDescription('It counts the out packets from the CT4 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt4OutPktByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt4OutPktByte.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt4OutPktByte.setDescription('It counts the out packet bytes from the CT4 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt4OutErrorPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt4OutErrorPkt.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt4OutErrorPkt.setDescription('It counts the error packets from the CT4 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt5OutByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt5OutByteRate.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt5OutByteRate.setDescription('The CT5 out in bytes/sec out of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt5OutPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt5OutPktRate.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt5OutPktRate.setDescription('It counts the rate in packets/sec out from the CT5 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt5OutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt5OutPkt.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt5OutPkt.setDescription('It counts the out packets from the CT5 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt5OutPktByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt5OutPktByte.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt5OutPktByte.setDescription('It counts the out packet bytes from the CT5 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt5OutErrorPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt5OutErrorPkt.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt5OutErrorPkt.setDescription('It counts the error packets from the CT5 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt6OutByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt6OutByteRate.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt6OutByteRate.setDescription('The CT6 out in bytes/sec out of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt6OutPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt6OutPktRate.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt6OutPktRate.setDescription('It counts the rate in packets/sec out from the CT6 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt6OutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt6OutPkt.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt6OutPkt.setDescription('It counts the out packets from the CT6 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt6OutPktByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt6OutPktByte.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt6OutPktByte.setDescription('It counts the out packet bytes from the CT6 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt6OutErrorPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt6OutErrorPkt.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt6OutErrorPkt.setDescription('It counts the error packets from the CT6 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt7OutByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt7OutByteRate.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt7OutByteRate.setDescription('The CT7 out in bytes/sec out of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt7OutPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt7OutPktRate.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt7OutPktRate.setDescription('It counts the rate in packets/sec out from the CT7 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt7OutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt7OutPkt.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt7OutPkt.setDescription('It counts the out packets from the CT7 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt7OutPktByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt7OutPktByte.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt7OutPktByte.setDescription('It counts the out packet bytes from the CT7 of the TE tunnel interface with VPN configuration.')
hwCtStatisticsCt7OutErrorPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 8, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCtStatisticsCt7OutErrorPkt.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsCt7OutErrorPkt.setDescription('It counts the error packets from the CT7 of the TE tunnel interface with VPN configuration.')
hwCtFlowTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9), )
if mibBuilder.loadTexts: hwCtFlowTemplateTable.setStatus('current')
if mibBuilder.loadTexts: hwCtFlowTemplateTable.setDescription('The table describes max 8 of the CT-FLOW-Mapping template configuration on the device. ')
hwCtFlowTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1), ).setIndexNames((0, "HUAWEI-TUNNEL-TE-MIB", "hwCtFlowTemplateID"))
if mibBuilder.loadTexts: hwCtFlowTemplateEntry.setStatus('current')
if mibBuilder.loadTexts: hwCtFlowTemplateEntry.setDescription('The table describes the CT-FLOW-Mapping template configuration on the device. ')
hwCtFlowTemplateID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: hwCtFlowTemplateID.setStatus('current')
if mibBuilder.loadTexts: hwCtFlowTemplateID.setDescription('The index of CT-FLOW templat.')
hwCtFlowTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCtFlowTemplateName.setStatus('current')
if mibBuilder.loadTexts: hwCtFlowTemplateName.setDescription('The name of CT-FLOW template.')
hwCt0Cos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt0Cos.setStatus('current')
if mibBuilder.loadTexts: hwCt0Cos.setDescription("The Value of class of service must be in 'be,af1,af2,af3,af4,ef,cs6,cs7'.")
hwCt0Scheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pq", 1), ("wfq", 2), ("lpq", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt0Scheduler.setStatus('current')
if mibBuilder.loadTexts: hwCt0Scheduler.setDescription('Scheduler name.')
hwCt0Valid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt0Valid.setStatus('current')
if mibBuilder.loadTexts: hwCt0Valid.setDescription('The state of CT-FLOW templat row.')
hwCt1Cos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt1Cos.setStatus('current')
if mibBuilder.loadTexts: hwCt1Cos.setDescription("The Value of class of service must be in 'be,af1,af2,af3,af4,ef,cs6,cs7'.")
hwCt1Scheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pq", 1), ("wfq", 2), ("lpq", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt1Scheduler.setStatus('current')
if mibBuilder.loadTexts: hwCt1Scheduler.setDescription('Scheduler name.')
hwCt1Valid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt1Valid.setStatus('current')
if mibBuilder.loadTexts: hwCt1Valid.setDescription('The state of CT-FLOW templat row.')
hwCt2Cos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt2Cos.setStatus('current')
if mibBuilder.loadTexts: hwCt2Cos.setDescription("The Value of class of service must be in 'be,af1,af2,af3,af4,ef,cs6,cs7'.")
hwCt2Scheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pq", 1), ("wfq", 2), ("lpq", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt2Scheduler.setStatus('current')
if mibBuilder.loadTexts: hwCt2Scheduler.setDescription('Scheduler name.')
hwCt2Valid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt2Valid.setStatus('current')
if mibBuilder.loadTexts: hwCt2Valid.setDescription('The state of CT-FLOW templat row.')
hwCt3Cos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt3Cos.setStatus('current')
if mibBuilder.loadTexts: hwCt3Cos.setDescription("The Value of class of service must be in 'be,af1,af2,af3,af4,ef,cs6,cs7'.")
hwCt3Scheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pq", 1), ("wfq", 2), ("lpq", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt3Scheduler.setStatus('current')
if mibBuilder.loadTexts: hwCt3Scheduler.setDescription('Scheduler name.')
hwCt3Valid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt3Valid.setStatus('current')
if mibBuilder.loadTexts: hwCt3Valid.setDescription('The state of CT-FLOW templat row.')
hwCt4Cos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt4Cos.setStatus('current')
if mibBuilder.loadTexts: hwCt4Cos.setDescription("The Value of class of service must be in 'be,af1,af2,af3,af4,ef,cs6,cs7'.")
hwCt4Scheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pq", 1), ("wfq", 2), ("lpq", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt4Scheduler.setStatus('current')
if mibBuilder.loadTexts: hwCt4Scheduler.setDescription('Scheduler name.')
hwCt4Valid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt4Valid.setStatus('current')
if mibBuilder.loadTexts: hwCt4Valid.setDescription('The state of CT-FLOW templat row.')
hwCt5Cos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt5Cos.setStatus('current')
if mibBuilder.loadTexts: hwCt5Cos.setDescription("The Value of class of service must be in 'be,af1,af2,af3,af4,ef,cs6,cs7'.")
hwCt5Scheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pq", 1), ("wfq", 2), ("lpq", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt5Scheduler.setStatus('current')
if mibBuilder.loadTexts: hwCt5Scheduler.setDescription('Scheduler name.')
hwCt5Valid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt5Valid.setStatus('current')
if mibBuilder.loadTexts: hwCt5Valid.setDescription('The state of CT-FLOW templat row.')
hwCt6Cos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt6Cos.setStatus('current')
if mibBuilder.loadTexts: hwCt6Cos.setDescription("The Value of class of service must be in 'be,af1,af2,af3,af4,ef,cs6,cs7'.")
hwCt6Scheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pq", 1), ("wfq", 2), ("lpq", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt6Scheduler.setStatus('current')
if mibBuilder.loadTexts: hwCt6Scheduler.setDescription('Scheduler name.')
hwCt6Valid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt6Valid.setStatus('current')
if mibBuilder.loadTexts: hwCt6Valid.setDescription('The state of CT-FLOW templat row.')
hwCt7Cos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt7Cos.setStatus('current')
if mibBuilder.loadTexts: hwCt7Cos.setDescription("The Value of class of service must be in 'be,af1,af2,af3,af4,ef,cs6,cs7'.")
hwCt7Scheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pq", 1), ("wfq", 2), ("lpq", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt7Scheduler.setStatus('current')
if mibBuilder.loadTexts: hwCt7Scheduler.setDescription('Scheduler name.')
hwCt7Valid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCt7Valid.setStatus('current')
if mibBuilder.loadTexts: hwCt7Valid.setDescription('The state of CT-FLOW templat row.')
hwCtFlowTemplateCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("commit", 1), ("nocommit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCtFlowTemplateCommit.setStatus('current')
if mibBuilder.loadTexts: hwCtFlowTemplateCommit.setDescription('The state of CT-FLOW templat commit.')
hwCtFlowTemplateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 9, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCtFlowTemplateRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCtFlowTemplateRowStatus.setDescription('The state of CT-FLOW templat.')
hwDsteInterfaceCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 10), )
if mibBuilder.loadTexts: hwDsteInterfaceCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwDsteInterfaceCfgTable.setDescription('The DS-TE configuration at interface.')
hwDsteInterfaceCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 10, 1), ).setIndexNames((0, "HUAWEI-TUNNEL-TE-MIB", "hwDsteIfIndex"))
if mibBuilder.loadTexts: hwDsteInterfaceCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwDsteInterfaceCfgEntry.setDescription('The DS-TE configuration at interface.')
hwDsteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 10, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwDsteIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwDsteIfIndex.setDescription("A unique value, greater than zero, for eachinterface. It is recommended that values are assigned contiguously starting from 1. The value for each interface sub-layer must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization.")
hwAppliedCtFlowTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 10, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAppliedCtFlowTemplateName.setStatus('current')
if mibBuilder.loadTexts: hwAppliedCtFlowTemplateName.setDescription('The name of CT-FLOW template.')
hwCtBandWidthShareCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("share", 1), ("unshare", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCtBandWidthShareCfg.setStatus('current')
if mibBuilder.loadTexts: hwCtBandWidthShareCfg.setDescription("The Value of Ct BandWidth configuration for DS-TE. That must be in 'Share,UnShare'.")
hwTunnelTeConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 3))
hwTunnelTeGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 3, 3))
hwTunnelTeCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 3, 1))
hwTunnelDiffServGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 3, 3, 1)).setObjects(("HUAWEI-TUNNEL-TE-MIB", "hwTunnelDiffServMode"), ("HUAWEI-TUNNEL-TE-MIB", "hwTunnelDiffServServiceClass"), ("HUAWEI-TUNNEL-TE-MIB", "hwTunnelDiffServColor"), ("HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeFlowQueue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTunnelDiffServGroup = hwTunnelDiffServGroup.setStatus('current')
if mibBuilder.loadTexts: hwTunnelDiffServGroup.setDescription('Describes the different service mode of tunnel.')
hwTunnelTeVsiGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 3, 3, 2)).setObjects(("HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeVsiCir"), ("HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeVsiPir"), ("HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeVsiFlowQueue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTunnelTeVsiGroup = hwTunnelTeVsiGroup.setStatus('current')
if mibBuilder.loadTexts: hwTunnelTeVsiGroup.setDescription('Describes the VSI binding of tunnel.')
hwTunnelTeVllGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 3, 3, 3)).setObjects(("HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeVllCir"), ("HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeVllPir"), ("HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeVllFlowQueue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTunnelTeVllGroup = hwTunnelTeVllGroup.setStatus('current')
if mibBuilder.loadTexts: hwTunnelTeVllGroup.setDescription('Describes the VLL binding of tunnel.')
hwTunnelTeL3vpnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 3, 3, 4)).setObjects(("HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeL3vpnCir"), ("HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeL3vpnPir"), ("HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeL3vpnFlowQueue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTunnelTeL3vpnGroup = hwTunnelTeL3vpnGroup.setStatus('current')
if mibBuilder.loadTexts: hwTunnelTeL3vpnGroup.setDescription('Describes the L3VPN binding of tunnel.')
hwTunnelTeStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 3, 3, 5)).setObjects(("HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeUpDownStatistics"), ("HUAWEI-TUNNEL-TE-MIB", "hwTunnTeCounterDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTunnelTeStatisticsGroup = hwTunnelTeStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwTunnelTeStatisticsGroup.setDescription('Describes the up/down count of the TE tunnel.')
hwCtTemplateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 3, 3, 6)).setObjects(("HUAWEI-TUNNEL-TE-MIB", "hwCtTemplateName"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtTemplateCt0"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtTemplateCt1"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtTemplateCt2"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtTemplateCt3"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtTemplateCt4"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtTemplateCt5"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtTemplateCt6"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtTemplateCt7"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtTemplateCommit"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtTemplateRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCtTemplateGroup = hwCtTemplateGroup.setStatus('current')
if mibBuilder.loadTexts: hwCtTemplateGroup.setDescription('Describes CT template.')
hwCtConfigCtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 3, 3, 7)).setObjects(("HUAWEI-TUNNEL-TE-MIB", "hwCtConfigTunnelName"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtConfigTunnelCommit"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtConfigTemplateName"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtConfigTunnelCt0Band"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtConfigTunnelCt1Band"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtConfigTunnelCt2Band"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtConfigTunnelCt3Band"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtConfigTunnelCt4Band"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtConfigTunnelCt5Band"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtConfigTunnelCt6Band"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtConfigTunnelCt7Band"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCtConfigCtGroup = hwCtConfigCtGroup.setStatus('current')
if mibBuilder.loadTexts: hwCtConfigCtGroup.setDescription('Describes the CT configuration of the TE tunnel interface.')
hwCtStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 3, 3, 8)).setObjects(("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsTunnelName"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt0OutByteRate"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt0OutPktRate"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt0OutPkt"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt0OutPktByte"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt0OutErrorPkt"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt1OutByteRate"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt1OutPktRate"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt1OutPkt"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt1OutPktByte"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt1OutErrorPkt"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt2OutByteRate"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt2OutPktRate"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt2OutPkt"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt2OutPktByte"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt2OutErrorPkt"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt3OutByteRate"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt3OutPktRate"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt3OutPkt"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt3OutPktByte"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt3OutErrorPkt"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt4OutByteRate"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt4OutPktRate"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt4OutPkt"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt4OutPktByte"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt4OutErrorPkt"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt5OutByteRate"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt5OutPktRate"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt5OutPkt"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt5OutPktByte"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt5OutErrorPkt"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt6OutByteRate"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt6OutPktRate"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt6OutPkt"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt6OutPktByte"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt6OutErrorPkt"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt7OutByteRate"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt7OutPktRate"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt7OutPkt"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt7OutPktByte"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsCt7OutErrorPkt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCtStatisticsGroup = hwCtStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwCtStatisticsGroup.setDescription('Describes the CT of the TE tunnel interface.')
hwCtFlowTemplateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 3, 3, 10)).setObjects(("HUAWEI-TUNNEL-TE-MIB", "hwCtFlowTemplateName"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt0Cos"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt0Scheduler"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt0Valid"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt1Cos"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt1Scheduler"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt1Valid"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt2Cos"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt2Scheduler"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt2Valid"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt3Cos"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt3Scheduler"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt3Valid"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt4Cos"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt4Scheduler"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt4Valid"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt5Cos"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt5Scheduler"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt5Valid"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt6Cos"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt6Scheduler"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt6Valid"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt7Cos"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt7Scheduler"), ("HUAWEI-TUNNEL-TE-MIB", "hwCt7Valid"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtFlowTemplateCommit"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtFlowTemplateRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCtFlowTemplateGroup = hwCtFlowTemplateGroup.setStatus('current')
if mibBuilder.loadTexts: hwCtFlowTemplateGroup.setDescription('The table describes the CT-FLOW-Mapping template configuration on the device.')
hwDsteInterfaceCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 3, 3, 11)).setObjects(("HUAWEI-TUNNEL-TE-MIB", "hwAppliedCtFlowTemplateName"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtBandWidthShareCfg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDsteInterfaceCfgGroup = hwDsteInterfaceCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwDsteInterfaceCfgGroup.setDescription('The table describes the CT-FLOW-Mapping template configuration on the device.')
hwTunnelDsTeTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 2))
hwMplsFqShortage = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 2, 1)).setObjects(("HUAWEI-TUNNEL-TE-MIB", "hwCtConfigTunnelName"))
if mibBuilder.loadTexts: hwMplsFqShortage.setStatus('obsolete')
if mibBuilder.loadTexts: hwMplsFqShortage.setDescription('This notification is generated when FQ (flow-queue) template resources are shortage.')
hwMplsSqShortage = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 2, 2)).setObjects(("HUAWEI-TUNNEL-TE-MIB", "hwCtConfigTunnelName"))
if mibBuilder.loadTexts: hwMplsSqShortage.setStatus('obsolete')
if mibBuilder.loadTexts: hwMplsSqShortage.setDescription('This notification is generated when SQ (subscriber-queue) resources are shortage.')
hwMplsSqBandwidthExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 2, 3)).setObjects(("HUAWEI-TUNNEL-TE-MIB", "hwCtConfigTunnelName"))
if mibBuilder.loadTexts: hwMplsSqBandwidthExceed.setStatus('obsolete')
if mibBuilder.loadTexts: hwMplsSqBandwidthExceed.setDescription('This notification is generated when the total bandwidth of SQ (subscriber-queue) exceeds 10G bit/s in one LPU.')
hwMplsHsbFqShortage = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 2, 4)).setObjects(("HUAWEI-TUNNEL-TE-MIB", "hwCtConfigTunnelName"))
if mibBuilder.loadTexts: hwMplsHsbFqShortage.setStatus('obsolete')
if mibBuilder.loadTexts: hwMplsHsbFqShortage.setDescription('This notification is generated when FQ (flow-queue) template resources in HSB are shortage.')
hwMplsHsbSqShortage = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 2, 5)).setObjects(("HUAWEI-TUNNEL-TE-MIB", "hwCtConfigTunnelName"))
if mibBuilder.loadTexts: hwMplsHsbSqShortage.setStatus('obsolete')
if mibBuilder.loadTexts: hwMplsHsbSqShortage.setDescription('This notification is generated when SQ (subscriber-queue) resources in HSB are shortage.')
hwMplsHsbSqBandwidthExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 2, 6)).setObjects(("HUAWEI-TUNNEL-TE-MIB", "hwCtConfigTunnelName"))
if mibBuilder.loadTexts: hwMplsHsbSqBandwidthExceed.setStatus('obsolete')
if mibBuilder.loadTexts: hwMplsHsbSqBandwidthExceed.setDescription('This notification is generated when the total bandwidth of SQ (subscriber-queue) in HSB exceeds 10G bit/s in one LPU.')
hwTunnelTeTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 3, 3, 9)).setObjects(("HUAWEI-TUNNEL-TE-MIB", "hwMplsHsbSqBandwidthExceed"), ("HUAWEI-TUNNEL-TE-MIB", "hwMplsHsbSqShortage"), ("HUAWEI-TUNNEL-TE-MIB", "hwMplsHsbFqShortage"), ("HUAWEI-TUNNEL-TE-MIB", "hwMplsSqBandwidthExceed"), ("HUAWEI-TUNNEL-TE-MIB", "hwMplsSqShortage"), ("HUAWEI-TUNNEL-TE-MIB", "hwMplsFqShortage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTunnelTeTrapGroup = hwTunnelTeTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hwTunnelTeTrapGroup.setDescription('The HUAWEI Tunnel Te trap info.')
hwTunnelTeCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 151, 3, 1, 1)).setObjects(("HUAWEI-TUNNEL-TE-MIB", "hwTunnelDiffServGroup"), ("HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeVsiGroup"), ("HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeVllGroup"), ("HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeL3vpnGroup"), ("HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeStatisticsGroup"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtTemplateGroup"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtConfigCtGroup"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtStatisticsGroup"), ("HUAWEI-TUNNEL-TE-MIB", "hwTunnelTeTrapGroup"), ("HUAWEI-TUNNEL-TE-MIB", "hwCtFlowTemplateGroup"), ("HUAWEI-TUNNEL-TE-MIB", "hwDsteInterfaceCfgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTunnelTeCompliance = hwTunnelTeCompliance.setStatus('current')
if mibBuilder.loadTexts: hwTunnelTeCompliance.setDescription('The compliance statement for HUAWEI-TUNNEL-TE-MIB.')
mibBuilder.exportSymbols("HUAWEI-TUNNEL-TE-MIB", hwTunnelTeUpDownStatistics=hwTunnelTeUpDownStatistics, hwCt5Scheduler=hwCt5Scheduler, hwCtStatisticsCt0OutPktByte=hwCtStatisticsCt0OutPktByte, hwTunnelTeL3vpnCir=hwTunnelTeL3vpnCir, hwTunnelTeL3vpnName=hwTunnelTeL3vpnName, hwCtStatisticsCt2OutPktByte=hwCtStatisticsCt2OutPktByte, hwCtStatisticsCt1OutPkt=hwCtStatisticsCt1OutPkt, hwCtConfigTunnelCt6Band=hwCtConfigTunnelCt6Band, hwCtStatisticsCt6OutErrorPkt=hwCtStatisticsCt6OutErrorPkt, hwCtConfigTunnelCtIfIndex=hwCtConfigTunnelCtIfIndex, hwTunnelTeL3vpnIndex=hwTunnelTeL3vpnIndex, hwTunnelTeVllGroup=hwTunnelTeVllGroup, hwTunnelDiffServTable=hwTunnelDiffServTable, hwTunnelTeL3vpnPir=hwTunnelTeL3vpnPir, hwCtStatisticsTunnelName=hwCtStatisticsTunnelName, hwTunnelTeStatisticsEntry=hwTunnelTeStatisticsEntry, hwCtFlowTemplateRowStatus=hwCtFlowTemplateRowStatus, hwCtConfigTunnelCt3Band=hwCtConfigTunnelCt3Band, hwCtStatisticsCt1OutPktRate=hwCtStatisticsCt1OutPktRate, hwCtStatisticsIfIndex=hwCtStatisticsIfIndex, hwTunnelTeStatisticsGroup=hwTunnelTeStatisticsGroup, hwCt1Valid=hwCt1Valid, hwCtStatisticsCt5OutPkt=hwCtStatisticsCt5OutPkt, hwTunnelDsTeTrap=hwTunnelDsTeTrap, hwCtStatisticsCt7OutPkt=hwCtStatisticsCt7OutPkt, hwCtConfigTunnelCt2Band=hwCtConfigTunnelCt2Band, hwCtStatisticsCt0OutPkt=hwCtStatisticsCt0OutPkt, hwCtBandWidthShareCfg=hwCtBandWidthShareCfg, hwDsteInterfaceCfgEntry=hwDsteInterfaceCfgEntry, hwCt7Scheduler=hwCt7Scheduler, hwCtConfigTemplateName=hwCtConfigTemplateName, hwCtStatisticsCt7OutPktRate=hwCtStatisticsCt7OutPktRate, hwCtStatisticsCt6OutPktByte=hwCtStatisticsCt6OutPktByte, hwCtFlowTemplateEntry=hwCtFlowTemplateEntry, hwCtStatisticsCt0OutErrorPkt=hwCtStatisticsCt0OutErrorPkt, hwCtStatisticsCt2OutPkt=hwCtStatisticsCt2OutPkt, hwCtStatisticsCt7OutByteRate=hwCtStatisticsCt7OutByteRate, hwTunnelTeL3vpnEntry=hwTunnelTeL3vpnEntry, hwTunnelTeVsiName=hwTunnelTeVsiName, hwCtStatisticsTable=hwCtStatisticsTable, hwCtStatisticsCt4OutPkt=hwCtStatisticsCt4OutPkt, hwCtConfigTunnelCt7Band=hwCtConfigTunnelCt7Band, hwCt0Cos=hwCt0Cos, hwCtTemplateName=hwCtTemplateName, hwCtStatisticsCt4OutErrorPkt=hwCtStatisticsCt4OutErrorPkt, hwCtStatisticsCt1OutByteRate=hwCtStatisticsCt1OutByteRate, hwCt0Valid=hwCt0Valid, hwMplsHsbFqShortage=hwMplsHsbFqShortage, hwTunnelTeCompliance=hwTunnelTeCompliance, hwCtStatisticsCt5OutByteRate=hwCtStatisticsCt5OutByteRate, hwCtStatisticsCt1OutPktByte=hwCtStatisticsCt1OutPktByte, hwCt3Scheduler=hwCt3Scheduler, hwTunnelTeVsiPir=hwTunnelTeVsiPir, hwCtTemplateCt4=hwCtTemplateCt4, hwCtTemplateTable=hwCtTemplateTable, hwCtTemplateIndex=hwCtTemplateIndex, hwCtStatisticsGroup=hwCtStatisticsGroup, hwTunnelTeVsiFlowQueue=hwTunnelTeVsiFlowQueue, hwCtStatisticsCt4OutByteRate=hwCtStatisticsCt4OutByteRate, hwCtTemplateCt2=hwCtTemplateCt2, hwTunnelTeMibObject=hwTunnelTeMibObject, hwCtTemplateCt1=hwCtTemplateCt1, hwCtTemplateCt3=hwCtTemplateCt3, hwCtTemplateRowStatus=hwCtTemplateRowStatus, hwCtConfigTunnelCtTable=hwCtConfigTunnelCtTable, hwMplsSqShortage=hwMplsSqShortage, hwCtStatisticsCt5OutPktRate=hwCtStatisticsCt5OutPktRate, hwCtTemplateCt5=hwCtTemplateCt5, hwCtStatisticsCt6OutPktRate=hwCtStatisticsCt6OutPktRate, hwCt7Valid=hwCt7Valid, hwDsteIfIndex=hwDsteIfIndex, hwCtStatisticsCt4OutPktByte=hwCtStatisticsCt4OutPktByte, hwCt5Valid=hwCt5Valid, hwCtTemplateCt7=hwCtTemplateCt7, hwTunnelTeVllFlowQueue=hwTunnelTeVllFlowQueue, hwTunnelTeVllEntry=hwTunnelTeVllEntry, hwCtStatisticsEntry=hwCtStatisticsEntry, hwTunnelTeVllCir=hwTunnelTeVllCir, hwCtConfigTunnelCt0Band=hwCtConfigTunnelCt0Band, hwCt6Valid=hwCt6Valid, hwTunnelTeVllInterfaceName=hwTunnelTeVllInterfaceName, hwCtConfigTunnelCtEntry=hwCtConfigTunnelCtEntry, hwCtFlowTemplateID=hwCtFlowTemplateID, hwTunnelTeTrapGroup=hwTunnelTeTrapGroup, hwCtStatisticsCt2OutByteRate=hwCtStatisticsCt2OutByteRate, hwTunnelDiffServEntry=hwTunnelDiffServEntry, hwCtStatisticsCt3OutErrorPkt=hwCtStatisticsCt3OutErrorPkt, hwCt2Valid=hwCt2Valid, hwTunnelTeL3vpnGroup=hwTunnelTeL3vpnGroup, hwTunnelTeVsiCir=hwTunnelTeVsiCir, hwCtStatisticsCt2OutPktRate=hwCtStatisticsCt2OutPktRate, hwCtStatisticsCt3OutPkt=hwCtStatisticsCt3OutPkt, hwCtFlowTemplateCommit=hwCtFlowTemplateCommit, hwMplsHsbSqShortage=hwMplsHsbSqShortage, hwTunnelTeL3vpnTable=hwTunnelTeL3vpnTable, hwCtTemplateEntry=hwCtTemplateEntry, hwCt4Cos=hwCt4Cos, hwTunnelTeVllPir=hwTunnelTeVllPir, hwCtTemplateCt6=hwCtTemplateCt6, hwTunnelDiffServGroup=hwTunnelDiffServGroup, hwCtStatisticsCt3OutByteRate=hwCtStatisticsCt3OutByteRate, hwMplsFqShortage=hwMplsFqShortage, hwCt4Valid=hwCt4Valid, hwCtStatisticsCt6OutPkt=hwCtStatisticsCt6OutPkt, hwTunnelTeVsiTable=hwTunnelTeVsiTable, hwCt2Cos=hwCt2Cos, hwTunnelTeStatisticsTable=hwTunnelTeStatisticsTable, hwCtStatisticsCt2OutErrorPkt=hwCtStatisticsCt2OutErrorPkt, hwTunnelTeConformance=hwTunnelTeConformance, hwTunnelDiffServServiceClass=hwTunnelDiffServServiceClass, hwCtStatisticsCt6OutByteRate=hwCtStatisticsCt6OutByteRate, hwTunnelTeFlowQueue=hwTunnelTeFlowQueue, hwCt1Cos=hwCt1Cos, hwCt5Cos=hwCt5Cos, hwTunnelTeVsiGroup=hwTunnelTeVsiGroup, hwTunnelTeVsiEntry=hwTunnelTeVsiEntry, hwCt7Cos=hwCt7Cos, PYSNMP_MODULE_ID=hwTunnelTeMib, hwCt3Valid=hwCt3Valid, hwMplsSqBandwidthExceed=hwMplsSqBandwidthExceed, hwCt0Scheduler=hwCt0Scheduler, hwCtFlowTemplateTable=hwCtFlowTemplateTable, hwTunnelTeL3vpnFlowQueue=hwTunnelTeL3vpnFlowQueue, hwTunnelTeVllIndex=hwTunnelTeVllIndex, hwCtConfigTunnelCommit=hwCtConfigTunnelCommit, hwCtConfigCtGroup=hwCtConfigCtGroup, hwCtTemplateCt0=hwCtTemplateCt0, hwCtStatisticsCt5OutPktByte=hwCtStatisticsCt5OutPktByte, hwCtStatisticsCt7OutPktByte=hwCtStatisticsCt7OutPktByte, hwCtStatisticsCt5OutErrorPkt=hwCtStatisticsCt5OutErrorPkt, hwCt4Scheduler=hwCt4Scheduler, hwTunnTeCounterDiscontinuityTime=hwTunnTeCounterDiscontinuityTime, hwCtStatisticsCt1OutErrorPkt=hwCtStatisticsCt1OutErrorPkt, hwCtStatisticsCt0OutPktRate=hwCtStatisticsCt0OutPktRate, hwDsteInterfaceCfgTable=hwDsteInterfaceCfgTable, hwCtFlowTemplateName=hwCtFlowTemplateName, hwTunnelTeMib=hwTunnelTeMib, hwDsteInterfaceCfgGroup=hwDsteInterfaceCfgGroup, hwCt3Cos=hwCt3Cos, hwTunnelTeGroups=hwTunnelTeGroups, hwCtStatisticsCt3OutPktByte=hwCtStatisticsCt3OutPktByte, hwMplsHsbSqBandwidthExceed=hwMplsHsbSqBandwidthExceed, hwTunnelDiffServMode=hwTunnelDiffServMode, hwCt6Scheduler=hwCt6Scheduler, hwCt1Scheduler=hwCt1Scheduler, hwCtConfigTunnelName=hwCtConfigTunnelName, hwCtConfigTunnelCt5Band=hwCtConfigTunnelCt5Band, hwCt2Scheduler=hwCt2Scheduler, hwCtConfigTunnelCt4Band=hwCtConfigTunnelCt4Band, hwCtTemplateGroup=hwCtTemplateGroup, hwCtStatisticsCt0OutByteRate=hwCtStatisticsCt0OutByteRate, hwCtTemplateCommit=hwCtTemplateCommit, hwCtFlowTemplateGroup=hwCtFlowTemplateGroup, hwTunnelTeVsiIndex=hwTunnelTeVsiIndex, hwCtStatisticsCt4OutPktRate=hwCtStatisticsCt4OutPktRate, hwTunnelTeStatisticsIfIndex=hwTunnelTeStatisticsIfIndex, hwTunnelTeCompliances=hwTunnelTeCompliances, hwTunnelTeVllTable=hwTunnelTeVllTable, hwCtStatisticsCt7OutErrorPkt=hwCtStatisticsCt7OutErrorPkt, hwCtStatisticsCt3OutPktRate=hwCtStatisticsCt3OutPktRate, hwAppliedCtFlowTemplateName=hwAppliedCtFlowTemplateName, hwTunnelDiffServColor=hwTunnelDiffServColor, hwCtConfigTunnelCt1Band=hwCtConfigTunnelCt1Band, hwCt6Cos=hwCt6Cos, hwTunnelDiffServIndex=hwTunnelDiffServIndex)
