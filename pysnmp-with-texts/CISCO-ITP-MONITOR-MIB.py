#
# PySNMP MIB module CISCO-ITP-MONITOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ITP-MONITOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:03:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetPortNumber, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, NotificationType, ModuleIdentity, Unsigned32, Counter64, Integer32, MibIdentifier, IpAddress, Bits, TimeTicks, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "NotificationType", "ModuleIdentity", "Unsigned32", "Counter64", "Integer32", "MibIdentifier", "IpAddress", "Bits", "TimeTicks", "Gauge32", "Counter32")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
ciscoItpmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 379))
ciscoItpmMIB.setRevisions(('2004-07-20 00:00', '2003-10-31 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoItpmMIB.setRevisionsDescriptions(('Add support for notification when connection to server changes states.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoItpmMIB.setLastUpdated('200407200000Z')
if mibBuilder.loadTexts: ciscoItpmMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoItpmMIB.setContactInfo(' Cisco Systems, Inc Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ss7@cisco.com')
if mibBuilder.loadTexts: ciscoItpmMIB.setDescription('The MIB for providing information related to monitoring SS7 links. This information can be used to manage the state of software used to collect all packets transported and received over a SS7 link. Abbreviations: MSU - Message Signalling Unit MTP - Message Transport Protocol SS7 - System No. 7 (SS7) Network')
ciscoItpmMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 379, 0))
ciscoItpmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 379, 1))
ciscoItpmMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 379, 2))
cItpmConn = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1))
cItpmLink = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 2))
cItpmConnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 1), )
if mibBuilder.loadTexts: cItpmConnTable.setStatus('current')
if mibBuilder.loadTexts: cItpmConnTable.setDescription('This table provides information on connections used to collect information on SS7 links. Information in this table can be used to customize connection parameters. In addition, this table provides measurements and status information for each connection.')
cItpmConnTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-ITP-MONITOR-MIB", "cItpmConnPortNumber"))
if mibBuilder.loadTexts: cItpmConnTableEntry.setStatus('current')
if mibBuilder.loadTexts: cItpmConnTableEntry.setDescription('An entry in the cItpmConnTable table.')
cItpmConnPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 1, 1, 1), InetPortNumber())
if mibBuilder.loadTexts: cItpmConnPortNumber.setStatus('current')
if mibBuilder.loadTexts: cItpmConnPortNumber.setDescription('The port number used to establish TCP connection.')
cItpmConnKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(5000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpmConnKeepAlive.setStatus('current')
if mibBuilder.loadTexts: cItpmConnKeepAlive.setDescription('Specifies the keepalive time value in milliseconds. Keepalive packets are sent between the monitor and the remote server as a mechanism to ensure the TCP session is active and detect session failure in a timely manner. During periods of idle monitor traffic, the monitor will send a keepalive packet to the remote server at the specified interval. The monitor also expects to receive a keepalive packet from the remote server at the same interval. If the monitor does not receive a keepalive packet from the remote server in two times the keep alive value, the monitor will close the TCP session. The value of zero disables the keep alive processing.')
cItpmConnMaxQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 100000)).clone(100)).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpmConnMaxQDepth.setStatus('current')
if mibBuilder.loadTexts: cItpmConnMaxQDepth.setDescription('The maximum number of packets that can be queued for transmission. If the monitor cannot send a TCP packet immediately, the packet will be queued for retransmit. This object defines the maximum number of TCP packets that may be queued for retransmit. Once the number of TCP packets on the queue reaches the value specified by this object, additional TCP packets will be dropped.')
cItpmConnCongOnset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000))).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpmConnCongOnset.setStatus('current')
if mibBuilder.loadTexts: cItpmConnCongOnset.setDescription('Threshold used to mark onset of congestion. When the cItpmConnQueueDepth object reaches value specified by this object the connection will considered congested. It will remain congested until the cItpmConnQueueDepth object drops below the value specified by the cItpmConnCongAbate object.')
cItpmConnCongAbate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpmConnCongAbate.setStatus('current')
if mibBuilder.loadTexts: cItpmConnCongAbate.setDescription('Threshold used to mark end of congestion. When the cItpmConnQueueDepth object drops below the value specified by this object the connection will exit congestion.')
cItpmConnRcvWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000000)).clone(200000)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpmConnRcvWindowSize.setStatus('current')
if mibBuilder.loadTexts: cItpmConnRcvWindowSize.setDescription('The size of TCP receive window. This object defines the number of outstanding (unacknowledged) bytes that the ITP monitor can receive on TCP connection.')
cItpmConnFastStart = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpmConnFastStart.setStatus('current')
if mibBuilder.loadTexts: cItpmConnFastStart.setDescription("Defines the fast-start option for establishing TCP connectivity as follows. 'true' - FastStart is enabled. 'false' - FastStart is disabled. Normally, after the TCP session with the remote server is established, the monitor will not send MSUs from the monitored links to the server until the server responds to the first keepalive. This mechanism prevents the ITP from over-running the server until the TCP session and receive window sizes are fully established. Configuration of fast-start overrides this mechanism and allows the ITP to start sending MSUs to the server immediately after the TCP session is established. Caution should be used with the fast-start configuration as MSUs may be lost until the TCP session server and receive window sizes are fully established. ")
cItpmConnQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 1, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpmConnQueueDepth.setStatus('current')
if mibBuilder.loadTexts: cItpmConnQueueDepth.setDescription('The number of packets queued for transmission. The maximum value is specified by the cItpmConnMaxQDepth object.')
cItpmConnMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpmConnMonitorState.setStatus('current')
if mibBuilder.loadTexts: cItpmConnMonitorState.setDescription("The state of the connection as follows. 'active' - connection is transmitting SS7 link traffic to server. 'inactive' - connection is not transmitting SS7 link traffic to server.")
cItpmConnCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpmConnCongestion.setStatus('current')
if mibBuilder.loadTexts: cItpmConnCongestion.setDescription("Congestion indicator for connection as follows. 'true' - connection is congested. 'false' - connection not congested. Congestion onset occurs when the cItpmConnQueueDepth object reaches the maximum allowed value specified by the cItpmConnMaxQDepth object. Congestion abate occurs when the cItpmConnQueueDepth object reaches the maximum allowed value specified by the cItpmConnMaxQDepth object. ")
cItpmConnCongCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 1, 1, 11), Counter32()).setUnits('occurences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpmConnCongCounts.setStatus('current')
if mibBuilder.loadTexts: cItpmConnCongCounts.setDescription('The number of times the connection has entered congestion.')
cItpmLinkTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 2), )
if mibBuilder.loadTexts: cItpmLinkTable.setStatus('current')
if mibBuilder.loadTexts: cItpmLinkTable.setDescription('This table provides information and measurements on the monitored SS7 links per connection. This table shares the cItpmConnPortNumber index with the cItpmConnTable.')
cItpmLinkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-ITP-MONITOR-MIB", "cItpmConnPortNumber"), (0, "CISCO-ITP-MONITOR-MIB", "cItpmLinkNumber"))
if mibBuilder.loadTexts: cItpmLinkTableEntry.setStatus('current')
if mibBuilder.loadTexts: cItpmLinkTableEntry.setDescription('An entry in the cItpmLinkTable table.')
cItpmLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cItpmLinkNumber.setStatus('current')
if mibBuilder.loadTexts: cItpmLinkNumber.setDescription('This object specifies the secondary index for objects in the cItpmLinkTable table. A unique number is assigned to each link when it is assigned to a connection.')
cItpmLinkDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpmLinkDescription.setStatus('current')
if mibBuilder.loadTexts: cItpmLinkDescription.setDescription('Brief customer defined description.')
cItpmLinkSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpmLinkSlotNumber.setStatus('current')
if mibBuilder.loadTexts: cItpmLinkSlotNumber.setDescription('The slot number support interface used to collect SS7 link traffic.')
cItpmLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpmLinkStatus.setStatus('current')
if mibBuilder.loadTexts: cItpmLinkStatus.setDescription("The state of the monitored SS7 Link as follows. 'active' - SS7 link is available for monitoring. 'inactive' - SS7 link is unavailable for monitoring.")
cItpmLinkRcvdMsus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 2, 1, 5), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpmLinkRcvdMsus.setStatus('current')
if mibBuilder.loadTexts: cItpmLinkRcvdMsus.setDescription('The number of MSUs received on SS7 Link.')
cItpmLinkRcvdMsuDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 2, 1, 6), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpmLinkRcvdMsuDrops.setStatus('current')
if mibBuilder.loadTexts: cItpmLinkRcvdMsuDrops.setDescription('The number of MSUs that were received on SS7 Link and were dropped due to congestion.')
cItpmLinkRcvdMsuRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 2, 1, 7), Gauge32()).setUnits('MSUs per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpmLinkRcvdMsuRate.setStatus('current')
if mibBuilder.loadTexts: cItpmLinkRcvdMsuRate.setDescription('The number of MSUs received on SS7 Link per second.')
cItpmLinkRcvdBitsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 2, 1, 8), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpmLinkRcvdBitsRate.setStatus('current')
if mibBuilder.loadTexts: cItpmLinkRcvdBitsRate.setDescription('The number of bits received on SS7 Link per second.')
cItpmLinkSentMsus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 2, 1, 9), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpmLinkSentMsus.setStatus('current')
if mibBuilder.loadTexts: cItpmLinkSentMsus.setDescription('The number of MSUs sent on SS7 Link.')
cItpmLinkSentMsuDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 2, 1, 10), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpmLinkSentMsuDrops.setStatus('current')
if mibBuilder.loadTexts: cItpmLinkSentMsuDrops.setDescription('The number of MSUs that were sent on SS7 Link and were dropped due to congestion.')
cItpmLinkSentMsuRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 2, 1, 11), Gauge32()).setUnits('MSUs per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpmLinkSentMsuRate.setStatus('current')
if mibBuilder.loadTexts: cItpmLinkSentMsuRate.setDescription('The number of MSUs sent on SS7 Link per second.')
cItpmLinkSentBitsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 1, 2, 1, 12), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpmLinkSentBitsRate.setStatus('current')
if mibBuilder.loadTexts: cItpmLinkSentBitsRate.setDescription('The number of bits sent on SS7 Link per second.')
cItpmCongestionNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpmCongestionNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cItpmCongestionNotifEnabled.setDescription("The ITP monitor congestion States notification truth value. 'true' Indicates that cItpmCongestionNotifEnabled notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' Indicates that cItpmCongestionNotifEnabled notification generation is disabled.")
cItpmMonitorStateNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 379, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpmMonitorStateNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cItpmMonitorStateNotifEnabled.setDescription("The ITP monitor state notification truth value. 'true' - Indicates that ciscoItpMonitorState notification is to be generated when the state of connection changes. That is, the notification generation is enabled. 'false' - Indicates that ciscoItpMonitorState notification generation is disabled.")
ciscoItpMonitorCongestion = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 379, 0, 1)).setObjects(("CISCO-ITP-MONITOR-MIB", "cItpmConnCongestion"))
if mibBuilder.loadTexts: ciscoItpMonitorCongestion.setStatus('current')
if mibBuilder.loadTexts: ciscoItpMonitorCongestion.setDescription('The notification generated when a connection enters or exits congestion state. The value of cItpmConnCongestion indicates new state.')
ciscoItpMonitorState = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 379, 0, 2)).setObjects(("CISCO-ITP-MONITOR-MIB", "cItpmConnMonitorState"))
if mibBuilder.loadTexts: ciscoItpMonitorState.setStatus('current')
if mibBuilder.loadTexts: ciscoItpMonitorState.setDescription('The notification generated when a connection changes states. The value of cItpmConnMonitorState indicates new state.')
ciscoItpmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 379, 2, 1))
ciscoItpmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 379, 2, 2))
ciscoItpmMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 379, 2, 1, 1)).setObjects(("CISCO-ITP-MONITOR-MIB", "ciscoItpmConnGroup"), ("CISCO-ITP-MONITOR-MIB", "ciscoItpmLinkGroup"), ("CISCO-ITP-MONITOR-MIB", "ciscoItpmNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpmMIBCompliance = ciscoItpmMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoItpmMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-ITP-MONITOR-MIB.my MIB')
ciscoItpmMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 379, 2, 1, 2)).setObjects(("CISCO-ITP-MONITOR-MIB", "ciscoItpmConnGroupRev1"), ("CISCO-ITP-MONITOR-MIB", "ciscoItpmLinkGroup"), ("CISCO-ITP-MONITOR-MIB", "ciscoItpmNotificationsGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpmMIBComplianceRev1 = ciscoItpmMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoItpmMIBComplianceRev1.setDescription('The compliance statement for entities which implement the CISCO-ITP-MONITOR-MIB.my MIB')
ciscoItpmConnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 379, 2, 2, 1)).setObjects(("CISCO-ITP-MONITOR-MIB", "cItpmCongestionNotifEnabled"), ("CISCO-ITP-MONITOR-MIB", "cItpmConnKeepAlive"), ("CISCO-ITP-MONITOR-MIB", "cItpmConnMaxQDepth"), ("CISCO-ITP-MONITOR-MIB", "cItpmConnCongOnset"), ("CISCO-ITP-MONITOR-MIB", "cItpmConnCongAbate"), ("CISCO-ITP-MONITOR-MIB", "cItpmConnRcvWindowSize"), ("CISCO-ITP-MONITOR-MIB", "cItpmConnFastStart"), ("CISCO-ITP-MONITOR-MIB", "cItpmConnQueueDepth"), ("CISCO-ITP-MONITOR-MIB", "cItpmConnMonitorState"), ("CISCO-ITP-MONITOR-MIB", "cItpmConnCongestion"), ("CISCO-ITP-MONITOR-MIB", "cItpmConnCongCounts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpmConnGroup = ciscoItpmConnGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoItpmConnGroup.setDescription('ITP Monitor connection group.')
ciscoItpmLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 379, 2, 2, 2)).setObjects(("CISCO-ITP-MONITOR-MIB", "cItpmLinkDescription"), ("CISCO-ITP-MONITOR-MIB", "cItpmLinkSlotNumber"), ("CISCO-ITP-MONITOR-MIB", "cItpmLinkStatus"), ("CISCO-ITP-MONITOR-MIB", "cItpmLinkRcvdMsus"), ("CISCO-ITP-MONITOR-MIB", "cItpmLinkRcvdMsuDrops"), ("CISCO-ITP-MONITOR-MIB", "cItpmLinkRcvdMsuRate"), ("CISCO-ITP-MONITOR-MIB", "cItpmLinkRcvdBitsRate"), ("CISCO-ITP-MONITOR-MIB", "cItpmLinkSentMsus"), ("CISCO-ITP-MONITOR-MIB", "cItpmLinkSentMsuDrops"), ("CISCO-ITP-MONITOR-MIB", "cItpmLinkSentMsuRate"), ("CISCO-ITP-MONITOR-MIB", "cItpmLinkSentBitsRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpmLinkGroup = ciscoItpmLinkGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoItpmLinkGroup.setDescription('ITP Monitor SS7 Link group')
ciscoItpmNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 379, 2, 2, 3)).setObjects(("CISCO-ITP-MONITOR-MIB", "ciscoItpMonitorCongestion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpmNotificationsGroup = ciscoItpmNotificationsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoItpmNotificationsGroup.setDescription('ITP Monitor notification objects.')
ciscoItpmConnGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 379, 2, 2, 4)).setObjects(("CISCO-ITP-MONITOR-MIB", "cItpmCongestionNotifEnabled"), ("CISCO-ITP-MONITOR-MIB", "cItpmMonitorStateNotifEnabled"), ("CISCO-ITP-MONITOR-MIB", "cItpmConnKeepAlive"), ("CISCO-ITP-MONITOR-MIB", "cItpmConnMaxQDepth"), ("CISCO-ITP-MONITOR-MIB", "cItpmConnCongOnset"), ("CISCO-ITP-MONITOR-MIB", "cItpmConnCongAbate"), ("CISCO-ITP-MONITOR-MIB", "cItpmConnRcvWindowSize"), ("CISCO-ITP-MONITOR-MIB", "cItpmConnFastStart"), ("CISCO-ITP-MONITOR-MIB", "cItpmConnQueueDepth"), ("CISCO-ITP-MONITOR-MIB", "cItpmConnMonitorState"), ("CISCO-ITP-MONITOR-MIB", "cItpmConnCongestion"), ("CISCO-ITP-MONITOR-MIB", "cItpmConnCongCounts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpmConnGroupRev1 = ciscoItpmConnGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoItpmConnGroupRev1.setDescription('ITP Monitor connection group')
ciscoItpmNotificationsGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 379, 2, 2, 5)).setObjects(("CISCO-ITP-MONITOR-MIB", "ciscoItpMonitorCongestion"), ("CISCO-ITP-MONITOR-MIB", "ciscoItpMonitorState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpmNotificationsGroupRev1 = ciscoItpmNotificationsGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoItpmNotificationsGroupRev1.setDescription('ITP Monitor notification objects.')
mibBuilder.exportSymbols("CISCO-ITP-MONITOR-MIB", cItpmConnQueueDepth=cItpmConnQueueDepth, cItpmConnTable=cItpmConnTable, ciscoItpmConnGroupRev1=ciscoItpmConnGroupRev1, PYSNMP_MODULE_ID=ciscoItpmMIB, cItpmConnMonitorState=cItpmConnMonitorState, ciscoItpmMIBCompliances=ciscoItpmMIBCompliances, cItpmConnCongOnset=cItpmConnCongOnset, ciscoItpmMIBConform=ciscoItpmMIBConform, cItpmLinkRcvdMsuDrops=cItpmLinkRcvdMsuDrops, cItpmLinkSlotNumber=cItpmLinkSlotNumber, cItpmLinkSentMsuRate=cItpmLinkSentMsuRate, cItpmMonitorStateNotifEnabled=cItpmMonitorStateNotifEnabled, cItpmConn=cItpmConn, cItpmCongestionNotifEnabled=cItpmCongestionNotifEnabled, cItpmLinkSentMsus=cItpmLinkSentMsus, cItpmConnKeepAlive=cItpmConnKeepAlive, cItpmLinkRcvdMsus=cItpmLinkRcvdMsus, cItpmConnCongestion=cItpmConnCongestion, cItpmConnFastStart=cItpmConnFastStart, ciscoItpmConnGroup=ciscoItpmConnGroup, cItpmLinkDescription=cItpmLinkDescription, cItpmLinkStatus=cItpmLinkStatus, cItpmConnTableEntry=cItpmConnTableEntry, ciscoItpmMIBCompliance=ciscoItpmMIBCompliance, cItpmConnCongCounts=cItpmConnCongCounts, ciscoItpmMIB=ciscoItpmMIB, ciscoItpmNotificationsGroupRev1=ciscoItpmNotificationsGroupRev1, cItpmConnPortNumber=cItpmConnPortNumber, ciscoItpmMIBObjects=ciscoItpmMIBObjects, ciscoItpmLinkGroup=ciscoItpmLinkGroup, ciscoItpmMIBGroups=ciscoItpmMIBGroups, cItpmLinkTableEntry=cItpmLinkTableEntry, cItpmLinkRcvdBitsRate=cItpmLinkRcvdBitsRate, cItpmLinkNumber=cItpmLinkNumber, ciscoItpmNotificationsGroup=ciscoItpmNotificationsGroup, cItpmConnRcvWindowSize=cItpmConnRcvWindowSize, cItpmLink=cItpmLink, ciscoItpmMIBNotifs=ciscoItpmMIBNotifs, cItpmConnMaxQDepth=cItpmConnMaxQDepth, ciscoItpMonitorCongestion=ciscoItpMonitorCongestion, cItpmLinkSentMsuDrops=cItpmLinkSentMsuDrops, cItpmLinkTable=cItpmLinkTable, cItpmLinkSentBitsRate=cItpmLinkSentBitsRate, ciscoItpMonitorState=ciscoItpMonitorState, cItpmConnCongAbate=cItpmConnCongAbate, ciscoItpmMIBComplianceRev1=ciscoItpmMIBComplianceRev1, cItpmLinkRcvdMsuRate=cItpmLinkRcvdMsuRate)
