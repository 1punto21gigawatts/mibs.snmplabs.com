#
# PySNMP MIB module CISCO-IETF-VDSL-LINE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IETF-VDSL-LINE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:01:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, Counter64, Integer32, Unsigned32, IpAddress, Gauge32, MibIdentifier, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "Integer32", "Unsigned32", "IpAddress", "Gauge32", "MibIdentifier", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "Bits", "TimeTicks")
RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
ciscoIetfVdslMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 87))
ciscoIetfVdslMIB.setRevisions(('2002-04-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIetfVdslMIB.setRevisionsDescriptions(('This is a cisco version of the Internet draft',))
if mibBuilder.loadTexts: ciscoIetfVdslMIB.setLastUpdated('200204180000Z')
if mibBuilder.loadTexts: ciscoIetfVdslMIB.setOrganization('Cisco Systems')
if mibBuilder.loadTexts: ciscoIetfVdslMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 Tel: +1 800 553-NETS E-mail: cs-2900lre@cisco.com')
if mibBuilder.loadTexts: ciscoIetfVdslMIB.setDescription('The MIB module defining objects for the management of a pair of VDSL modems at each end of the VDSL line. Each VDSL line has an entry in an ifTable. An agent may reside at either end of the VDSL line however the MIB is designed to require no management communication between them beyond that inherent in the low-level VDSL line protocol. The agent may monitor and control this protocol for its needs. VDSL lines may support optional Fast or Interleaved channels. If these are supported, additional entries corresponding to the supported channels must be created in the ifTable. Thus a VDSL line that supports both channels will have three entries in the ifTable, one for each physical, fast, and interleaved, whose ifType values are equal to vdsl(97), fast(125), and interleaved(124), respectively. The ifStackTable is used to represent the relationship between the entries. Naming Conventions: Vtuc -- (VTUC) modem at near (Central) end of line Vtur -- (VTUR) modem at Remote end of line Vtu -- One of either Vtuc or Vtur Curr -- Current Prev -- Previous Atn -- Attenuation ES -- Errored Second. LCS -- Line Code Specific Lof -- Loss of Frame Lol -- Loss of Link Los -- Loss of Signal Lpr -- Loss of Power xyzs -- interval of Seconds in which xyz occurs (e.g., xyz=Lof, Los, Lpr) Max -- Maximum Mgn -- Margin Min -- Minimum Psd -- Power Spectral Density Snr -- Signal to Noise Ratio Tx -- Transmit Blks -- Blocks, a data unit, see cvdslVtuXChanCrcBlockLength ')
cvdslLineMib = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 87, 1))
cvdslMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1))
class CVdslLineCodingType(TextualConvention, Integer32):
    description = 'This data type is used as the syntax for the VDSL Line Code.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("mcm", 2), ("scm", 3))

class CVdslLineEntity(TextualConvention, Integer32):
    description = 'Identifies a modem as being either Vtuc or Vtur. A VDSL line consists of two modems, a Vtuc and a Vtur.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("vtuc", 1), ("vtur", 2))

cvdslLineTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 1), )
if mibBuilder.loadTexts: cvdslLineTable.setStatus('current')
if mibBuilder.loadTexts: cvdslLineTable.setDescription('This table includes common attributes describing both ends of the line. It is required for all VDSL physical interfaces. VDSL physical interfaces are those ifEntries where ifType is equal to vdsl(97).')
cvdslLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cvdslLineEntry.setStatus('current')
if mibBuilder.loadTexts: cvdslLineEntry.setDescription('An entry in the cvdslLineTable.')
cvdslLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 1, 1, 1), CVdslLineCodingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvdslLineCoding.setStatus('current')
if mibBuilder.loadTexts: cvdslLineCoding.setDescription('Specifies the VDSL coding type used on this line.')
cvdslLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noChannel", 1), ("fastOnly", 2), ("slowOnly", 3), ("either", 4), ("both", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvdslLineType.setStatus('current')
if mibBuilder.loadTexts: cvdslLineType.setDescription('Defines the type of VDSL physical line entity that exists, by defining whether and how the line is channelized. If the line is channelized, the value will be other than noChannel(1). This object defines which channel type(s) are supported. In the case that the line is channelized, the manager can use the ifStackTable to determine the ifIndex for the associated channel(s).')
cvdslLineConfProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvdslLineConfProfile.setStatus('current')
if mibBuilder.loadTexts: cvdslLineConfProfile.setDescription('The value of this object identifies the rows in the VDSL Line Configuration Profile Table, ( cvdslLineConfProfileTable ), which apply for this VDSL line, and channels if applicable.')
cvdslLineAlarmConfProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvdslLineAlarmConfProfile.setStatus('current')
if mibBuilder.loadTexts: cvdslLineAlarmConfProfile.setDescription('The value of this object identifies the rows in the VDSL Line Alarm Configuration Profile Table, ( cvdslLineAlarmConfProfileTable ), which apply to this VDSL line, and channels if applicable.')
cvdslPhysTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 2), )
if mibBuilder.loadTexts: cvdslPhysTable.setStatus('current')
if mibBuilder.loadTexts: cvdslPhysTable.setDescription('This table provides one row for each Vtu. Each row contains the Physical Layer Parameters table for that Vtu. VDSL physical interfaces are those ifEntries where ifType is equal to vdsl(97).')
cvdslPhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslPhysSide"))
if mibBuilder.loadTexts: cvdslPhysEntry.setStatus('current')
if mibBuilder.loadTexts: cvdslPhysEntry.setDescription('An entry in the cvdslPhysTable.')
cvdslPhysSide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 2, 1, 1), CVdslLineEntity())
if mibBuilder.loadTexts: cvdslPhysSide.setStatus('current')
if mibBuilder.loadTexts: cvdslPhysSide.setDescription('Identifies whether the modem is the Vtuc or Vtur.')
cvdslInvSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvdslInvSerialNumber.setStatus('current')
if mibBuilder.loadTexts: cvdslInvSerialNumber.setDescription('The vendor specific string that identifies the vendor equipment.')
cvdslInvVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvdslInvVendorID.setStatus('current')
if mibBuilder.loadTexts: cvdslInvVendorID.setDescription('The vendor ID code is a copy of the binary vendor identification field defined by the PHY[10] and expressed as readable characters.')
cvdslInvVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvdslInvVersionNumber.setStatus('current')
if mibBuilder.loadTexts: cvdslInvVersionNumber.setDescription('The vendor specific version number sent by this Vtu as part of the initialization messages. It is a copy of the binary version number field defined by the PHY[10] and expressed as readable characters.')
cvdslCurrSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-640, 640))).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvdslCurrSnrMgn.setStatus('current')
if mibBuilder.loadTexts: cvdslCurrSnrMgn.setDescription('Noise Margin as seen by this Vtu with respect to its received signal in tenth dB.')
cvdslCurrAtn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 2, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 630))).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvdslCurrAtn.setStatus('current')
if mibBuilder.loadTexts: cvdslCurrAtn.setDescription('Measured difference in the total power transmitted by the peer Vtu and the total power received by this Vtu.')
cvdslCurrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 2, 1, 7), Bits().clone(namedValues=NamedValues(("noDefect", 0), ("lossOfFraming", 1), ("lossOfSignal", 2), ("lossOfPower", 3), ("lossOfSignalQuality", 4), ("lossOfLink", 5), ("dataInitFailure", 6), ("configInitFailure", 7), ("protocolInitFailure", 8), ("noPeerVtuPresent", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvdslCurrStatus.setStatus('current')
if mibBuilder.loadTexts: cvdslCurrStatus.setDescription('Indicates current state of the Vtu line. This is a bit-map of possible conditions. The various bit positions are: 0 noDefect There no defects on the line 1 lossOfFraming Vtu failure due to not receiving valid frame. 2 lossOfSignal Vtu failure due to not receiving signal. 3 lossOfPower Vtu failure due to loss of power. 4 lossOfSignalQuality Loss of Signal Quality is declared when the Noise Margin falls below the Minimum Noise Margin, or the bit-error-rate exceeds 10^-7. 5 lossOfLink Vtu failure due to inability to link with peer Vtu. 6 dataInitFailure Vtu failure during initialization due to bit errors corrupting startup exchange data. 7 configInitFailure Vtu failure during initialization due to peer Vtu not able to support requested configuration. 8 protocolInitFailure Vtu failure during initialization due to incompatible protocol used by the peer Vtu. 9 noPeerVtuPresent Vtu failure during initialization due to no activation sequence detected from peer Vtu. This is intended to supplement ifOperStatus.')
cvdslCurrOutputPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-310, 310))).setUnits('tenth dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvdslCurrOutputPwr.setStatus('current')
if mibBuilder.loadTexts: cvdslCurrOutputPwr.setDescription('Measured total output power transmitted by this ATU. This is the measurement that was reported during the last activation sequence.')
cvdslCurrAttainableRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 2, 1, 9), Gauge32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvdslCurrAttainableRate.setStatus('current')
if mibBuilder.loadTexts: cvdslCurrAttainableRate.setDescription('Indicates the maximum currently attainable data rate by the Vtu. This value will be equal or greater than the current line rate.')
cvdslChanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 3), )
if mibBuilder.loadTexts: cvdslChanTable.setStatus('current')
if mibBuilder.loadTexts: cvdslChanTable.setDescription('This table provides one row for each Vtu channel. VDSL channel interfaces are those ifEntries where ifType is equal to interleave(124) or fast(125).')
cvdslChanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslPhysSide"))
if mibBuilder.loadTexts: cvdslChanEntry.setStatus('current')
if mibBuilder.loadTexts: cvdslChanEntry.setDescription('An entry in the cvdslChanTable.')
cvdslChanInterleaveDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 3, 1, 1), Gauge32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvdslChanInterleaveDelay.setStatus('current')
if mibBuilder.loadTexts: cvdslChanInterleaveDelay.setDescription('Interleave Delay for this channel. Interleave delay applies only to the interleave (slow) channel and defines the mapping (relative spacing) between subsequent input bytes at the interleaver input and their placement in the bit stream at the interleaver output. Larger numbers provide greater separation between consecutive input bytes in the output bit stream allowing for improved impulse noise immunity at the expense of payload latency. In the case where the ifType is fast(125), the object is not instantiated.')
cvdslChanCrcBlockLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 3, 1, 2), Gauge32()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvdslChanCrcBlockLength.setStatus('current')
if mibBuilder.loadTexts: cvdslChanCrcBlockLength.setDescription('Indicates the length of the channel data-block on which the CRC operates.')
cvdslLineConfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 8), )
if mibBuilder.loadTexts: cvdslLineConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: cvdslLineConfProfileTable.setDescription('This table contains information on the VDSL line configuration. One entry in this table reflects a profile defined by a manager which can be used to configure the VDSL line.')
cvdslLineConfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 8, 1), ).setIndexNames((0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslPhysSide"), (0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslLineConfProfileIndex"))
if mibBuilder.loadTexts: cvdslLineConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cvdslLineConfProfileEntry.setDescription('Each entry consists of a list of parameters that represents the configuration of a VDSL modem. A default profile with an index of 1 will always exist and its parameters will be set to vendor specific values, unless otherwise specified in this document.')
cvdslLineConfProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cvdslLineConfProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cvdslLineConfProfileIndex.setDescription('This object is used by the line configuration table in order to identify a row in that table. The system will always provide a default profile whose value is 1.')
cvdslLineConfProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 8, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslLineConfProfileName.setStatus('current')
if mibBuilder.loadTexts: cvdslLineConfProfileName.setDescription('The name for this profile as specified by a user.')
cvdslLineConfTargetSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslLineConfTargetSnrMgn.setStatus('current')
if mibBuilder.loadTexts: cvdslLineConfTargetSnrMgn.setDescription('Configured Target Signal/Noise Margin. This is the Noise Margin the modem must achieve with a BER of 10-7 or better to successfully complete initialization.')
cvdslLineConfTxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslLineConfTxSpeed.setStatus('current')
if mibBuilder.loadTexts: cvdslLineConfTxSpeed.setDescription('Transmit speed for this modem. The corresponding modem on the other end of the VDSL line will have an equal cvdslLineConfRxSpeed value.')
cvdslLineConfRxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslLineConfRxSpeed.setStatus('current')
if mibBuilder.loadTexts: cvdslLineConfRxSpeed.setDescription('Receive speed for this modem. The corresponding modem on the other end of the VDSL line will have an equal cvdslLineConfTxSpeed value.')
cvdslLineConfProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 8, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslLineConfProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cvdslLineConfProfileRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile activated by setting this object to `active'. When `active' is set, the system will validate the profile. Before a profile can be deleted or taken out of service, (by setting this object to `destroy' or `outOfService') it must be first unreferenced from all associated lines. The DEFVAL profile cannot be deleted.")
cvdslLineMCMConfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 9), )
if mibBuilder.loadTexts: cvdslLineMCMConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: cvdslLineMCMConfProfileTable.setDescription('This table contains information on the VDSL line configuration. One entry in this table reflects a profile defined by a manager which can be used to configure the VDSL line.')
cvdslLineMCMConfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 9, 1), ).setIndexNames((0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslPhysSide"), (0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslLineConfProfileIndex"))
if mibBuilder.loadTexts: cvdslLineMCMConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cvdslLineMCMConfProfileEntry.setDescription('Each entry consists of a list of parameters that represents the configuration of a multiple carrier modulation VDSL modem. A default profile with an index of 1 will always exist and its parameters will be set to vendor specific values, unless otherwise specified in this document.')
cvdslMCMConfProfileTxWindowLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('samples').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslMCMConfProfileTxWindowLength.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileTxWindowLength.setDescription('Specifies the length of the transmit window, counted in samples at the sampling rate corresponding to the negotiated value of N.')
cvdslMCMConfProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslMCMConfProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile activated by setting this object to `active'. When `active' is set, the system will validate the profile. Before a profile can be deleted or taken out of service, (by setting this object to `destroy' or `outOfService') it must be first unreferenced from all associated lines.")
cvdslLineMCMConfProfileTxBandTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 10), )
if mibBuilder.loadTexts: cvdslLineMCMConfProfileTxBandTable.setStatus('current')
if mibBuilder.loadTexts: cvdslLineMCMConfProfileTxBandTable.setDescription('This table contains transmit band descriptor configuration information for a VDSL line. Each entry in this table reflects the configuration for one of possibly many bands with a multiple carrier modulation (MCM) VDSL line. These entries are defined by a manager and can be used to configure the VDSL line.')
cvdslLineMCMConfProfileTxBandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 10, 1), ).setIndexNames((0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslPhysSide"), (0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslLineConfProfileIndex"), (0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileTxBandNumber"))
if mibBuilder.loadTexts: cvdslLineMCMConfProfileTxBandEntry.setStatus('current')
if mibBuilder.loadTexts: cvdslLineMCMConfProfileTxBandEntry.setDescription('Each entry consists of a transmit band descriptor, which is defined by a start and a stop tone index. A default profile with an index of 1 will always exist and its parameters will be set to vendor specific values, unless otherwise specified in this document.')
cvdslMCMConfProfileTxBandNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cvdslMCMConfProfileTxBandNumber.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileTxBandNumber.setDescription('The index for this band descriptor entry.')
cvdslMCMConfProfileTxBandStart = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslMCMConfProfileTxBandStart.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileTxBandStart.setDescription('Start tone index for this band.')
cvdslMCMConfProfileTxBandStop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslMCMConfProfileTxBandStop.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileTxBandStop.setDescription('Stop tone index for this band.')
cvdslMCMConfProfileTxBandRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslMCMConfProfileTxBandRowStatus.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileTxBandRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile activated by setting this object to `active'. When `active' is set, the system will validate the profile. Before a profile can be deleted or taken out of service, (by setting this object to `destroy' or `outOfService') it must be first unreferenced from all associated lines.")
cvdslLineMCMConfProfileRxBandTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 11), )
if mibBuilder.loadTexts: cvdslLineMCMConfProfileRxBandTable.setStatus('current')
if mibBuilder.loadTexts: cvdslLineMCMConfProfileRxBandTable.setDescription('This table contains receive band descriptor configuration information for a VDSL line. Each entry in this table reflects the configuration for one of possibly many bands with a multiple carrier modulation (MCM) VDSL line. These entries are defined by a manager and can be used to configure the VDSL line.')
cvdslLineMCMConfProfileRxBandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 11, 1), ).setIndexNames((0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslPhysSide"), (0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslLineConfProfileIndex"), (0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileRxBandNumber"))
if mibBuilder.loadTexts: cvdslLineMCMConfProfileRxBandEntry.setStatus('current')
if mibBuilder.loadTexts: cvdslLineMCMConfProfileRxBandEntry.setDescription('Each entry consists of a transmit band descriptor, which defines the start and stop bands and the power spectral density (PSD) for that band. A default profile with an index of 1 will always exist and its parameters will be set to vendor specific values, unless otherwise specified in this document.')
cvdslMCMConfProfileRxBandNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cvdslMCMConfProfileRxBandNumber.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileRxBandNumber.setDescription('The index for this band descriptor entry.')
cvdslMCMConfProfileRxBandStart = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslMCMConfProfileRxBandStart.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileRxBandStart.setDescription('Start tone index for this band.')
cvdslMCMConfProfileRxBandStop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslMCMConfProfileRxBandStop.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileRxBandStop.setDescription('Stop tone index for this band.')
cvdslMCMConfProfileRxBandRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 11, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslMCMConfProfileRxBandRowStatus.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileRxBandRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile activated by setting this object to `active'. When `active' is set, the system will validate the profile. Before a profile can be deleted or taken out of service, (by setting this object to `destroy' or `outOfService') it must be first unreferenced from all associated lines.")
cvdslLineMCMConfProfileTxPSDTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 12), )
if mibBuilder.loadTexts: cvdslLineMCMConfProfileTxPSDTable.setStatus('current')
if mibBuilder.loadTexts: cvdslLineMCMConfProfileTxPSDTable.setDescription('This table contains transmit PSD mask descriptor configuration information for a VDSL line. Each entry in this table reflects the configuration for one tone within a multiple carrier modulation (MCM) VDSL line. These entries are defined by a manager and can be used to configure the VDSL line.')
cvdslLineMCMConfProfileTxPSDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 12, 1), ).setIndexNames((0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslPhysSide"), (0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslLineConfProfileIndex"), (0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileTxPSDNumber"))
if mibBuilder.loadTexts: cvdslLineMCMConfProfileTxPSDEntry.setStatus('current')
if mibBuilder.loadTexts: cvdslLineMCMConfProfileTxPSDEntry.setDescription('Each entry consists of a transmit PSD mask descriptor, which defines the power spectral density (PSD) for a tone. A default profile with an index of 1 will always exist and its parameters will be set to vendor specific values, unless otherwise specified in this document.')
cvdslMCMConfProfileTxPSDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cvdslMCMConfProfileTxPSDNumber.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileTxPSDNumber.setDescription('The index for this mask descriptor entry.')
cvdslMCMConfProfileTxPSDTone = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslMCMConfProfileTxPSDTone.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileTxPSDTone.setDescription('The tone index for which the PSD is being specified.')
cvdslMCMConfProfileTxPSDPSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('0.5dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslMCMConfProfileTxPSDPSD.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileTxPSDPSD.setDescription('Power Spectral Density level in steps of 0.5dB with an offset of -140dbm/Hz.')
cvdslMCMConfProfileTxPSDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 12, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslMCMConfProfileTxPSDRowStatus.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileTxPSDRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile activated by setting this object to `active'. When `active' is set, the system will validate the profile. Before a profile can be deleted or taken out of service, (by setting this object to `destroy' or `outOfService') it must be first unreferenced from all associated lines.")
cvdslLineMCMConfProfileMaxTxPSDTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 13), )
if mibBuilder.loadTexts: cvdslLineMCMConfProfileMaxTxPSDTable.setStatus('current')
if mibBuilder.loadTexts: cvdslLineMCMConfProfileMaxTxPSDTable.setDescription('This table contains transmit maximum PSD mask descriptor configuration information for a VDSL line. Each entry in this table reflects the configuration for one tone within a multiple carrier modulation (MCM) VDSL modem. These entries are defined by a manager and can be used to configure the VDSL line.')
cvdslLineMCMConfProfileMaxTxPSDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 13, 1), ).setIndexNames((0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslPhysSide"), (0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslLineConfProfileIndex"), (0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileMaxTxPSDNumber"))
if mibBuilder.loadTexts: cvdslLineMCMConfProfileMaxTxPSDEntry.setStatus('current')
if mibBuilder.loadTexts: cvdslLineMCMConfProfileMaxTxPSDEntry.setDescription('Each entry consists of a transmit PSD mask descriptor, which defines the maximum power spectral density (PSD) for a tone. A default profile with an index of 1 will always exist and its parameters will be set to vendor specific values, unless otherwise specified in this document.')
cvdslMCMConfProfileMaxTxPSDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cvdslMCMConfProfileMaxTxPSDNumber.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileMaxTxPSDNumber.setDescription('The index for this band descriptor entry.')
cvdslMCMConfProfileMaxTxPSDTone = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslMCMConfProfileMaxTxPSDTone.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileMaxTxPSDTone.setDescription('The tone index for which the PSD is being specified.')
cvdslMCMConfProfileMaxTxPSDPSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('0.5dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslMCMConfProfileMaxTxPSDPSD.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileMaxTxPSDPSD.setDescription('Power Spectral Density level in steps of 0.5dB with an offset of -140dbm/Hz.')
cvdslMCMConfProfileMaxTxPSDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 13, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslMCMConfProfileMaxTxPSDRowStatus.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileMaxTxPSDRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile activated by setting this object to `active'. When `active' is set, the system will validate the profile. Before a profile can be deleted or taken out of service, (by setting this object to `destroy' or `outOfService') it must be first unreferenced from all associated lines.")
cvdslLineMCMConfProfileMaxRxPSDTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 14), )
if mibBuilder.loadTexts: cvdslLineMCMConfProfileMaxRxPSDTable.setStatus('current')
if mibBuilder.loadTexts: cvdslLineMCMConfProfileMaxRxPSDTable.setDescription('This table contains maximum receive PSD mask descriptor configuration information for a VDSL line. Each entry in this table reflects the configuration for one tone within a multiple carrier modulation (MCM) VDSL modem. These entries are defined by a manager and can be used to configure the VDSL line.')
cvdslLineMCMConfProfileMaxRxPSDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 14, 1), ).setIndexNames((0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslPhysSide"), (0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslLineConfProfileIndex"), (0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileMaxRxPSDNumber"))
if mibBuilder.loadTexts: cvdslLineMCMConfProfileMaxRxPSDEntry.setStatus('current')
if mibBuilder.loadTexts: cvdslLineMCMConfProfileMaxRxPSDEntry.setDescription('Each entry consists of a transmit PSD mask descriptor, which defines the power spectral density (PSD) for a tone. A default profile with an index of 1 will always exist and its parameters will be set to vendor specific values, unless otherwise specified in this document.')
cvdslMCMConfProfileMaxRxPSDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cvdslMCMConfProfileMaxRxPSDNumber.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileMaxRxPSDNumber.setDescription('The index for this band descriptor entry.')
cvdslMCMConfProfileMaxRxPSDTone = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslMCMConfProfileMaxRxPSDTone.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileMaxRxPSDTone.setDescription('The tone index for which the PSD is being specified.')
cvdslMCMConfProfileMaxRxPSDPSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('0.5dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslMCMConfProfileMaxRxPSDPSD.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileMaxRxPSDPSD.setDescription('Power Spectral Density level in steps of 0.5dB with an offset of -140dbm/Hz.')
cvdslMCMConfProfileMaxRxPSDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 14, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslMCMConfProfileMaxRxPSDRowStatus.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMConfProfileMaxRxPSDRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile activated by setting this object to `active'. When `active' is set, the system will validate the profile. Before a profile can be deleted or taken out of service, (by setting this object to `destroy' or `outOfService') it must be first unreferenced from all associated lines.")
cvdslLineSCMConfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 15), )
if mibBuilder.loadTexts: cvdslLineSCMConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: cvdslLineSCMConfProfileTable.setDescription('This table contains information on the VDSL line configuration. One entry in this table reflects a profile defined by a manager which can be used to configure the VDSL line.')
cvdslLineSCMConfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 15, 1), ).setIndexNames((0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslPhysSide"), (0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslLineConfProfileIndex"))
if mibBuilder.loadTexts: cvdslLineSCMConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cvdslLineSCMConfProfileEntry.setDescription('Each entry consists of a list of parameters that represents the configuration of a single carrier modulation VDSL modem. A default profile with an index of 1 will always exist and its parameters will be set to vendor specific values, unless otherwise specified in this document.')
cvdslSCMConfProfileInterleaveDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('octets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslSCMConfProfileInterleaveDepth.setStatus('current')
if mibBuilder.loadTexts: cvdslSCMConfProfileInterleaveDepth.setDescription('Specifies the interleaving depth.')
cvdslSCMConfProfileFastCodewordSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180))).setUnits('octets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslSCMConfProfileFastCodewordSize.setStatus('current')
if mibBuilder.loadTexts: cvdslSCMConfProfileFastCodewordSize.setDescription('Specifies the length in octets of the fast codeword. A value of 0 indicates that the single latency transport class is to be utilized.')
cvdslSCMConfProfileTransmitPSDMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 15, 1, 3), Bits().clone(namedValues=NamedValues(("vendorNotch1", 0), ("vendorNotch2", 1), ("amateurBand30m", 2), ("amateurBand40m", 3), ("amateurBand80m", 4), ("amateurBand160m", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslSCMConfProfileTransmitPSDMask.setStatus('current')
if mibBuilder.loadTexts: cvdslSCMConfProfileTransmitPSDMask.setDescription('The transmit power spectral density mask code.')
cvdslSCMConfProfileTransmitPSDLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslSCMConfProfileTransmitPSDLevel.setStatus('current')
if mibBuilder.loadTexts: cvdslSCMConfProfileTransmitPSDLevel.setDescription('The transmit power spectral density for the VDSL modem.')
cvdslSCMConfProfileSymbolRateProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('kbaud').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslSCMConfProfileSymbolRateProfile.setStatus('current')
if mibBuilder.loadTexts: cvdslSCMConfProfileSymbolRateProfile.setDescription('The symbol rate profile calculated as S = SR/BSR, where SR is the required symbol rate in kbaud, BSR = 67.5.')
cvdslSCMConfProfileConstellationSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setUnits('log2').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslSCMConfProfileConstellationSize.setStatus('current')
if mibBuilder.loadTexts: cvdslSCMConfProfileConstellationSize.setDescription('Specifies the constellation size.')
cvdslSCMConfProfileCenterFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setUnits('kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslSCMConfProfileCenterFrequency.setStatus('current')
if mibBuilder.loadTexts: cvdslSCMConfProfileCenterFrequency.setDescription('Specifies the center frequency profile K.')
cvdslSCMConfProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 15, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslSCMConfProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cvdslSCMConfProfileRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile activated by setting this object to `active'. When `active' is set, the system will validate the profile. Before a profile can be deleted or taken out of service, (by setting this object to `destroy' or `outOfService') it must be first unreferenced from all associated lines.")
cvdslLineAlarmConfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 16), )
if mibBuilder.loadTexts: cvdslLineAlarmConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: cvdslLineAlarmConfProfileTable.setDescription('This table contains information on the VDSL line alarm configuration. One entry in this table reflects a profile defined by a manager which can be used to configure the VDSL line alarm thresholds.')
cvdslLineAlarmConfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 16, 1), ).setIndexNames((0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslPhysSide"), (0, "CISCO-IETF-VDSL-LINE-MIB", "cvdslLineAlarmConfProfileIndex"))
if mibBuilder.loadTexts: cvdslLineAlarmConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cvdslLineAlarmConfProfileEntry.setDescription('Each entry consists of a list of parameters that represents the configuration of a VDSL line alarm profile. A default profile with an index of 1 will always exist and its parameters will be set to vendor specific values, unless otherwise specified in this document.')
cvdslLineAlarmConfProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cvdslLineAlarmConfProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cvdslLineAlarmConfProfileIndex.setDescription('This object is used by the line alarm configuration table in order to identify a row in that table. The system will always provide a default profile whose index is 1.')
cvdslLineAlarmConfProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 16, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslLineAlarmConfProfileName.setStatus('current')
if mibBuilder.loadTexts: cvdslLineAlarmConfProfileName.setDescription('The name for this profile as specified by a user.')
cvdslInitFailureNotificationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 16, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslInitFailureNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: cvdslInitFailureNotificationEnable.setDescription('This object specifies if a cvdslInitFailureNotification notification will be generated if an initialization failure occurs.')
cvdslLineAlarmConfProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 1, 16, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvdslLineAlarmConfProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cvdslLineAlarmConfProfileRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile activated by setting this object to `active'. When `active' is set, the system will validate the profile. Before a profile can be deleted or taken out of service, (by setting this object to `destroy' or `outOfService') it must be first unreferenced from all associated lines.")
cvdslNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 0))
cvdslInitFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 0, 1)).setObjects(("CISCO-IETF-VDSL-LINE-MIB", "cvdslCurrStatus"))
if mibBuilder.loadTexts: cvdslInitFailureNotification.setStatus('current')
if mibBuilder.loadTexts: cvdslInitFailureNotification.setDescription('Vtu initialization failed. See cvdslCurrStatus for potential reasons.')
cvdslConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 3))
cvdslGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 3, 1))
cvdslCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 3, 2))
cvdslLineMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 3, 2, 1)).setObjects(("CISCO-IETF-VDSL-LINE-MIB", "cvdslGroup"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMGroup"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslSCMGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdslLineMibCompliance = cvdslLineMibCompliance.setStatus('current')
if mibBuilder.loadTexts: cvdslLineMibCompliance.setDescription('The compliance statement for SNMP entities which manage VDSL interfaces.')
cvdslGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 3, 1, 1)).setObjects(("CISCO-IETF-VDSL-LINE-MIB", "cvdslLineCoding"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslLineType"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslLineConfProfile"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslLineAlarmConfProfile"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslInvSerialNumber"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslInvVendorID"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslInvVersionNumber"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslCurrSnrMgn"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslCurrAtn"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslCurrStatus"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslCurrOutputPwr"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslCurrAttainableRate"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslChanInterleaveDelay"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslChanCrcBlockLength"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslLineConfProfileName"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslLineConfTargetSnrMgn"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslLineConfTxSpeed"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslLineConfRxSpeed"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslLineConfProfileRowStatus"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslLineAlarmConfProfileName"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslInitFailureNotificationEnable"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslLineAlarmConfProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdslGroup = cvdslGroup.setStatus('current')
if mibBuilder.loadTexts: cvdslGroup.setDescription('A collection of objects providing information about a VDSL Line.')
cvdslMCMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 3, 1, 2)).setObjects(("CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileTxWindowLength"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileRowStatus"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileTxBandStart"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileTxBandStop"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileTxBandRowStatus"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileRxBandStart"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileRxBandStop"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileRxBandRowStatus"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileTxPSDTone"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileTxPSDPSD"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileTxPSDRowStatus"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileMaxTxPSDTone"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileMaxTxPSDPSD"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileMaxTxPSDRowStatus"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileMaxRxPSDTone"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileMaxRxPSDPSD"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslMCMConfProfileMaxRxPSDRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdslMCMGroup = cvdslMCMGroup.setStatus('current')
if mibBuilder.loadTexts: cvdslMCMGroup.setDescription('A collection of objects providing configuration information for a VDSL line based upon multiple carrier modulation modem.')
cvdslSCMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 3, 1, 3)).setObjects(("CISCO-IETF-VDSL-LINE-MIB", "cvdslSCMConfProfileInterleaveDepth"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslSCMConfProfileFastCodewordSize"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslSCMConfProfileTransmitPSDMask"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslSCMConfProfileTransmitPSDLevel"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslSCMConfProfileSymbolRateProfile"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslSCMConfProfileConstellationSize"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslSCMConfProfileCenterFrequency"), ("CISCO-IETF-VDSL-LINE-MIB", "cvdslSCMConfProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdslSCMGroup = cvdslSCMGroup.setStatus('current')
if mibBuilder.loadTexts: cvdslSCMGroup.setDescription('A collection of objects providing configuration information for a VDSL line based upon single carrier modulation modem.')
cvdslNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 87, 1, 3, 1, 4)).setObjects(("CISCO-IETF-VDSL-LINE-MIB", "cvdslInitFailureNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdslNotificationGroup = cvdslNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cvdslNotificationGroup.setDescription('This group supports notifications of significant conditions associated with VDSL Lines.')
mibBuilder.exportSymbols("CISCO-IETF-VDSL-LINE-MIB", cvdslMCMConfProfileTxBandNumber=cvdslMCMConfProfileTxBandNumber, ciscoIetfVdslMIB=ciscoIetfVdslMIB, cvdslSCMConfProfileConstellationSize=cvdslSCMConfProfileConstellationSize, cvdslLineConfProfileEntry=cvdslLineConfProfileEntry, cvdslMCMConfProfileMaxRxPSDNumber=cvdslMCMConfProfileMaxRxPSDNumber, cvdslMCMConfProfileTxPSDTone=cvdslMCMConfProfileTxPSDTone, cvdslCurrStatus=cvdslCurrStatus, cvdslSCMGroup=cvdslSCMGroup, cvdslMCMConfProfileMaxRxPSDTone=cvdslMCMConfProfileMaxRxPSDTone, cvdslCompliances=cvdslCompliances, cvdslMCMConfProfileRxBandStart=cvdslMCMConfProfileRxBandStart, cvdslMCMConfProfileRxBandRowStatus=cvdslMCMConfProfileRxBandRowStatus, cvdslMCMConfProfileTxWindowLength=cvdslMCMConfProfileTxWindowLength, cvdslMCMConfProfileTxPSDRowStatus=cvdslMCMConfProfileTxPSDRowStatus, CVdslLineCodingType=CVdslLineCodingType, cvdslPhysSide=cvdslPhysSide, cvdslPhysTable=cvdslPhysTable, cvdslLineSCMConfProfileTable=cvdslLineSCMConfProfileTable, cvdslLineMCMConfProfileTxBandTable=cvdslLineMCMConfProfileTxBandTable, cvdslMCMConfProfileTxBandStart=cvdslMCMConfProfileTxBandStart, cvdslMCMGroup=cvdslMCMGroup, cvdslLineMCMConfProfileMaxTxPSDTable=cvdslLineMCMConfProfileMaxTxPSDTable, cvdslMCMConfProfileMaxTxPSDNumber=cvdslMCMConfProfileMaxTxPSDNumber, cvdslLineTable=cvdslLineTable, CVdslLineEntity=CVdslLineEntity, cvdslInitFailureNotificationEnable=cvdslInitFailureNotificationEnable, cvdslInvVendorID=cvdslInvVendorID, cvdslLineConfProfileIndex=cvdslLineConfProfileIndex, cvdslSCMConfProfileTransmitPSDMask=cvdslSCMConfProfileTransmitPSDMask, cvdslMCMConfProfileMaxRxPSDPSD=cvdslMCMConfProfileMaxRxPSDPSD, cvdslMCMConfProfileRxBandStop=cvdslMCMConfProfileRxBandStop, cvdslSCMConfProfileRowStatus=cvdslSCMConfProfileRowStatus, cvdslMCMConfProfileMaxTxPSDRowStatus=cvdslMCMConfProfileMaxTxPSDRowStatus, cvdslInvSerialNumber=cvdslInvSerialNumber, cvdslInvVersionNumber=cvdslInvVersionNumber, cvdslCurrAttainableRate=cvdslCurrAttainableRate, cvdslLineConfProfileRowStatus=cvdslLineConfProfileRowStatus, cvdslSCMConfProfileCenterFrequency=cvdslSCMConfProfileCenterFrequency, cvdslInitFailureNotification=cvdslInitFailureNotification, cvdslLineMCMConfProfileMaxTxPSDEntry=cvdslLineMCMConfProfileMaxTxPSDEntry, cvdslLineEntry=cvdslLineEntry, cvdslLineMCMConfProfileTxBandEntry=cvdslLineMCMConfProfileTxBandEntry, cvdslLineMCMConfProfileTxPSDTable=cvdslLineMCMConfProfileTxPSDTable, cvdslLineMCMConfProfileRxBandEntry=cvdslLineMCMConfProfileRxBandEntry, cvdslLineMCMConfProfileRxBandTable=cvdslLineMCMConfProfileRxBandTable, cvdslChanTable=cvdslChanTable, cvdslSCMConfProfileInterleaveDepth=cvdslSCMConfProfileInterleaveDepth, cvdslMCMConfProfileTxPSDNumber=cvdslMCMConfProfileTxPSDNumber, cvdslLineConfTargetSnrMgn=cvdslLineConfTargetSnrMgn, cvdslLineMibCompliance=cvdslLineMibCompliance, cvdslMCMConfProfileRowStatus=cvdslMCMConfProfileRowStatus, cvdslLineAlarmConfProfileIndex=cvdslLineAlarmConfProfileIndex, cvdslPhysEntry=cvdslPhysEntry, cvdslLineAlarmConfProfileName=cvdslLineAlarmConfProfileName, cvdslLineAlarmConfProfileRowStatus=cvdslLineAlarmConfProfileRowStatus, cvdslChanInterleaveDelay=cvdslChanInterleaveDelay, cvdslLineAlarmConfProfileTable=cvdslLineAlarmConfProfileTable, cvdslLineAlarmConfProfile=cvdslLineAlarmConfProfile, cvdslMibObjects=cvdslMibObjects, cvdslMCMConfProfileRxBandNumber=cvdslMCMConfProfileRxBandNumber, cvdslMCMConfProfileMaxRxPSDRowStatus=cvdslMCMConfProfileMaxRxPSDRowStatus, cvdslLineConfRxSpeed=cvdslLineConfRxSpeed, cvdslLineType=cvdslLineType, cvdslLineMCMConfProfileTable=cvdslLineMCMConfProfileTable, cvdslCurrOutputPwr=cvdslCurrOutputPwr, cvdslMCMConfProfileTxBandRowStatus=cvdslMCMConfProfileTxBandRowStatus, cvdslLineMCMConfProfileEntry=cvdslLineMCMConfProfileEntry, cvdslSCMConfProfileFastCodewordSize=cvdslSCMConfProfileFastCodewordSize, cvdslChanCrcBlockLength=cvdslChanCrcBlockLength, cvdslSCMConfProfileTransmitPSDLevel=cvdslSCMConfProfileTransmitPSDLevel, cvdslLineMCMConfProfileMaxRxPSDTable=cvdslLineMCMConfProfileMaxRxPSDTable, cvdslCurrSnrMgn=cvdslCurrSnrMgn, cvdslConformance=cvdslConformance, cvdslGroup=cvdslGroup, cvdslLineConfProfile=cvdslLineConfProfile, cvdslLineMib=cvdslLineMib, cvdslChanEntry=cvdslChanEntry, cvdslLineAlarmConfProfileEntry=cvdslLineAlarmConfProfileEntry, cvdslMCMConfProfileTxBandStop=cvdslMCMConfProfileTxBandStop, cvdslMCMConfProfileMaxTxPSDTone=cvdslMCMConfProfileMaxTxPSDTone, cvdslLineMCMConfProfileTxPSDEntry=cvdslLineMCMConfProfileTxPSDEntry, cvdslLineMCMConfProfileMaxRxPSDEntry=cvdslLineMCMConfProfileMaxRxPSDEntry, cvdslNotificationGroup=cvdslNotificationGroup, cvdslLineCoding=cvdslLineCoding, cvdslGroups=cvdslGroups, cvdslLineConfTxSpeed=cvdslLineConfTxSpeed, cvdslMCMConfProfileTxPSDPSD=cvdslMCMConfProfileTxPSDPSD, cvdslLineConfProfileName=cvdslLineConfProfileName, cvdslLineConfProfileTable=cvdslLineConfProfileTable, cvdslMCMConfProfileMaxTxPSDPSD=cvdslMCMConfProfileMaxTxPSDPSD, cvdslNotifications=cvdslNotifications, cvdslCurrAtn=cvdslCurrAtn, PYSNMP_MODULE_ID=ciscoIetfVdslMIB, cvdslLineSCMConfProfileEntry=cvdslLineSCMConfProfileEntry, cvdslSCMConfProfileSymbolRateProfile=cvdslSCMConfProfileSymbolRateProfile)
