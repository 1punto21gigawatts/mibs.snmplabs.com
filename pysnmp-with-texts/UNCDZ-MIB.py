#
# PySNMP MIB module UNCDZ-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/UNCDZ-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:28:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
sysName, sysContact, sysLocation = mibBuilder.importSymbols("SNMPv2-MIB", "sysName", "sysContact", "sysLocation")
iso, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, Integer32, Counter64, TimeTicks, Unsigned32, enterprises, Gauge32, ModuleIdentity, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "Integer32", "Counter64", "TimeTicks", "Unsigned32", "enterprises", "Gauge32", "ModuleIdentity", "ObjectIdentity", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
uncdz_MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9839, 2, 1)).setLabel("uncdz-MIB")
uncdz_MIB.setRevisions(('2004-08-12 15:52',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: uncdz_MIB.setRevisionsDescriptions(('This is the original version of the MIB.',))
if mibBuilder.loadTexts: uncdz_MIB.setLastUpdated('200408121552Z')
if mibBuilder.loadTexts: uncdz_MIB.setOrganization('CAREL SpA')
if mibBuilder.loadTexts: uncdz_MIB.setContactInfo(" Simone Ravazzolo Carel SpA Via dell'Industria, 11 35020 Brugine (PD) Italy Tel: +39 049 9716611 E-mail: simone.ravazzolo@carel.com ")
if mibBuilder.loadTexts: uncdz_MIB.setDescription('This is the MIB module for the UNIFLAIR UNCDZ device.')
carel = MibIdentifier((1, 3, 6, 1, 4, 1, 9839))
systm = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 1))
agentRelease = MibScalar((1, 3, 6, 1, 4, 1, 9839, 1, 1), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRelease.setStatus('current')
if mibBuilder.loadTexts: agentRelease.setDescription('Release of the Agent.')
agentCode = MibScalar((1, 3, 6, 1, 4, 1, 9839, 1, 2), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCode.setStatus('current')
if mibBuilder.loadTexts: agentCode.setDescription('Code of the Agent. 2=pCOWeb.')
instruments = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2))
pCOWebInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 0))
pCOStatusgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 0, 10))
pCOId1_Status = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 0, 10, 1), Integer32()).setLabel("pCOId1-Status").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: pCOId1_Status.setStatus('current')
if mibBuilder.loadTexts: pCOId1_Status.setDescription('Status of pCOId1. 0=Offline, 1=Init, 2=Online')
pCOErrorsNumbergroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 0, 11))
pCOId1_ErrorsNumber = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 0, 11, 1), Integer32()).setLabel("pCOId1-ErrorsNumber").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: pCOId1_ErrorsNumber.setStatus('current')
if mibBuilder.loadTexts: pCOId1_ErrorsNumber.setDescription('Number of Communication Errors from pCOId1 to pCOWeb.')
digitalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1))
vent_on = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 1), Integer32()).setLabel("vent-on").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: vent_on.setStatus('current')
if mibBuilder.loadTexts: vent_on.setDescription('System On (Fan)')
compressore1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 2), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressore1.setStatus('current')
if mibBuilder.loadTexts: compressore1.setDescription('Compressor 1')
compressore2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 3), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressore2.setStatus('current')
if mibBuilder.loadTexts: compressore2.setDescription('Compressor 2')
compressore3 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 4), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressore3.setStatus('current')
if mibBuilder.loadTexts: compressore3.setDescription('Compressor 3')
compressore4 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 5), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressore4.setStatus('current')
if mibBuilder.loadTexts: compressore4.setDescription('Compressor 4')
out_h1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 6), Integer32()).setLabel("out-h1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: out_h1.setStatus('current')
if mibBuilder.loadTexts: out_h1.setDescription('Heating 1')
out_h2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 7), Integer32()).setLabel("out-h2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: out_h2.setStatus('current')
if mibBuilder.loadTexts: out_h2.setDescription('Heating 2')
out_h3 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 8), Integer32()).setLabel("out-h3").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: out_h3.setStatus('current')
if mibBuilder.loadTexts: out_h3.setDescription('Heating 3')
gas_caldo_on = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 9), Integer32()).setLabel("gas-caldo-on").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: gas_caldo_on.setStatus('current')
if mibBuilder.loadTexts: gas_caldo_on.setDescription('Hot Gas Coil')
on_deum = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 10), Integer32()).setLabel("on-deum").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: on_deum.setStatus('current')
if mibBuilder.loadTexts: on_deum.setDescription('Dehumidification')
power = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 11), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: power.setStatus('current')
if mibBuilder.loadTexts: power.setDescription('Humidification')
mal_access = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 12), Integer32()).setLabel("mal-access").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_access.setStatus('current')
if mibBuilder.loadTexts: mal_access.setDescription('Tampering Alarm')
mal_ata = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 13), Integer32()).setLabel("mal-ata").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_ata.setStatus('current')
if mibBuilder.loadTexts: mal_ata.setDescription('Alarm: Room High Temperature')
mal_bta = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 14), Integer32()).setLabel("mal-bta").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_bta.setStatus('current')
if mibBuilder.loadTexts: mal_bta.setDescription('Alarm: Room Low Temperature')
mal_aua = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 15), Integer32()).setLabel("mal-aua").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_aua.setStatus('current')
if mibBuilder.loadTexts: mal_aua.setDescription('Alarm: Room High Humidity')
mal_bua = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 16), Integer32()).setLabel("mal-bua").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_bua.setStatus('current')
if mibBuilder.loadTexts: mal_bua.setDescription('Alarm: Room Low Humidity')
mal_eap = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 17), Integer32()).setLabel("mal-eap").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_eap.setStatus('current')
if mibBuilder.loadTexts: mal_eap.setDescription('Alarm: Room High/Low Temp./Humid.(Ext. Devices)')
mal_filter = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 18), Integer32()).setLabel("mal-filter").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_filter.setStatus('current')
if mibBuilder.loadTexts: mal_filter.setDescription('Alarm: Clogged Filter')
mal_flood = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 19), Integer32()).setLabel("mal-flood").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_flood.setStatus('current')
if mibBuilder.loadTexts: mal_flood.setDescription('Alarm: Water Leakage Detected')
mal_flux = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 20), Integer32()).setLabel("mal-flux").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_flux.setStatus('current')
if mibBuilder.loadTexts: mal_flux.setDescription('Alarm: Loss of Air Flow')
mal_heater = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 21), Integer32()).setLabel("mal-heater").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_heater.setStatus('current')
if mibBuilder.loadTexts: mal_heater.setDescription('Alarm: Heater Overheating')
mal_hp1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 22), Integer32()).setLabel("mal-hp1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_hp1.setStatus('current')
if mibBuilder.loadTexts: mal_hp1.setDescription('Alarm: High Pressure 1')
mal_hp2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 23), Integer32()).setLabel("mal-hp2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_hp2.setStatus('current')
if mibBuilder.loadTexts: mal_hp2.setDescription('Alarm: High Pressure 2')
mal_lp1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 24), Integer32()).setLabel("mal-lp1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_lp1.setStatus('current')
if mibBuilder.loadTexts: mal_lp1.setDescription('Alarm: Low Pressure 1')
mal_lp2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 25), Integer32()).setLabel("mal-lp2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_lp2.setStatus('current')
if mibBuilder.loadTexts: mal_lp2.setDescription('Alarm: Low Pressure 2')
mal_phase = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 26), Integer32()).setLabel("mal-phase").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_phase.setStatus('current')
if mibBuilder.loadTexts: mal_phase.setDescription('Alarm: Wrong phase sequence')
mal_smoke = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 27), Integer32()).setLabel("mal-smoke").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_smoke.setStatus('current')
if mibBuilder.loadTexts: mal_smoke.setDescription('Alarm: SMOKE-FIRE DETECTED')
mal_lan = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 28), Integer32()).setLabel("mal-lan").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_lan.setStatus('current')
if mibBuilder.loadTexts: mal_lan.setDescription('Alarm: Interrupted LAN')
mal_hcurr = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 29), Integer32()).setLabel("mal-hcurr").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_hcurr.setStatus('current')
if mibBuilder.loadTexts: mal_hcurr.setDescription('Humidifier Alarm: High Current')
mal_nopower = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 30), Integer32()).setLabel("mal-nopower").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_nopower.setStatus('current')
if mibBuilder.loadTexts: mal_nopower.setDescription('Humidifier Alarm: Power Loss')
mal_nowater = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 31), Integer32()).setLabel("mal-nowater").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_nowater.setStatus('current')
if mibBuilder.loadTexts: mal_nowater.setDescription('Humidifier Alarm: Water Loss')
mal_cw_dh = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 32), Integer32()).setLabel("mal-cw-dh").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_cw_dh.setStatus('current')
if mibBuilder.loadTexts: mal_cw_dh.setDescription('Alarm: Chilled Water Temp. too High for Dehumidification')
mal_tc_cw = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 33), Integer32()).setLabel("mal-tc-cw").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_tc_cw.setStatus('current')
if mibBuilder.loadTexts: mal_tc_cw.setDescription('Alarm: CW Valve Failure or Water Flow too Low')
mal_wflow = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 34), Integer32()).setLabel("mal-wflow").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_wflow.setStatus('current')
if mibBuilder.loadTexts: mal_wflow.setDescription('Alarm: Loss of Water flow')
mal_wht = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 35), Integer32()).setLabel("mal-wht").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_wht.setStatus('current')
if mibBuilder.loadTexts: mal_wht.setDescription('Alarm: High chilled water temp.')
mal_sonda_ta = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 36), Integer32()).setLabel("mal-sonda-ta").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_sonda_ta.setStatus('current')
if mibBuilder.loadTexts: mal_sonda_ta.setDescription('Alarm: Room air Sensor Failure/Disconnected')
mal_sonda_tac = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 37), Integer32()).setLabel("mal-sonda-tac").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_sonda_tac.setStatus('current')
if mibBuilder.loadTexts: mal_sonda_tac.setDescription('Alarm: Hot water Sensor Failure/Disconnected')
mal_sonda_tc = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 38), Integer32()).setLabel("mal-sonda-tc").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_sonda_tc.setStatus('current')
if mibBuilder.loadTexts: mal_sonda_tc.setDescription('Alarm: Condensing water Sensor Failure/Disconnect.')
mal_sonda_te = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 39), Integer32()).setLabel("mal-sonda-te").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_sonda_te.setStatus('current')
if mibBuilder.loadTexts: mal_sonda_te.setDescription('Alarm: Outdoor temp. Sensor Failure/Disconnected')
mal_sonda_tm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 40), Integer32()).setLabel("mal-sonda-tm").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_sonda_tm.setStatus('current')
if mibBuilder.loadTexts: mal_sonda_tm.setDescription('Alarm: Delivery temp. Sensor Failure/Disconnected')
mal_sonda_ua = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 41), Integer32()).setLabel("mal-sonda-ua").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_sonda_ua.setStatus('current')
if mibBuilder.loadTexts: mal_sonda_ua.setDescription('Alarm: Rel. Humidity Sensor Failure/Disconnected')
mal_ore_compr1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 42), Integer32()).setLabel("mal-ore-compr1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_ore_compr1.setStatus('current')
if mibBuilder.loadTexts: mal_ore_compr1.setDescription('Service Alarm: Compressor 1 hour counter threshold')
mal_ore_compr2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 43), Integer32()).setLabel("mal-ore-compr2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_ore_compr2.setStatus('current')
if mibBuilder.loadTexts: mal_ore_compr2.setDescription('Service Alarm: Compressor 2 hour counter threshold')
mal_ore_compr3 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 44), Integer32()).setLabel("mal-ore-compr3").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_ore_compr3.setStatus('current')
if mibBuilder.loadTexts: mal_ore_compr3.setDescription('Service Alarm: Compressor 3 hour counter threshold')
mal_ore_compr4 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 45), Integer32()).setLabel("mal-ore-compr4").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_ore_compr4.setStatus('current')
if mibBuilder.loadTexts: mal_ore_compr4.setDescription('Service Alarm: Compressor 4 hour counter threshold')
mal_ore_filtro = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 46), Integer32()).setLabel("mal-ore-filtro").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_ore_filtro.setStatus('current')
if mibBuilder.loadTexts: mal_ore_filtro.setDescription('Service Alarm: Air Filter hour counter threshold')
mal_ore_risc1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 47), Integer32()).setLabel("mal-ore-risc1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_ore_risc1.setStatus('current')
if mibBuilder.loadTexts: mal_ore_risc1.setDescription('Service Alarm: Heater 1 hour counter threshold')
mal_ore_risc2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 48), Integer32()).setLabel("mal-ore-risc2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_ore_risc2.setStatus('current')
if mibBuilder.loadTexts: mal_ore_risc2.setDescription('Service Alarm: Heater 2 hour counter threshold')
mal_ore_umid = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 49), Integer32()).setLabel("mal-ore-umid").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_ore_umid.setStatus('current')
if mibBuilder.loadTexts: mal_ore_umid.setDescription('Service Alarm: Humidifier hour counter threshold')
mal_ore_unit = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 50), Integer32()).setLabel("mal-ore-unit").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_ore_unit.setStatus('current')
if mibBuilder.loadTexts: mal_ore_unit.setDescription('Service Alarm: Unit hour counter threshold')
glb_al = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 51), Integer32()).setLabel("glb-al").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: glb_al.setStatus('current')
if mibBuilder.loadTexts: glb_al.setDescription('General Alarm')
or_al_2lev = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 52), Integer32()).setLabel("or-al-2lev").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: or_al_2lev.setStatus('current')
if mibBuilder.loadTexts: or_al_2lev.setDescription('2nd Level Alarm')
range_t_ext = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 53), Integer32()).setLabel("range-t-ext").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: range_t_ext.setStatus('current')
if mibBuilder.loadTexts: range_t_ext.setDescription('Outdoor Temp. Sensor Fitted')
range_t_circ = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 54), Integer32()).setLabel("range-t-circ").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: range_t_circ.setStatus('current')
if mibBuilder.loadTexts: range_t_circ.setDescription('Closed Circuit (or Chilled) Water Temperature Sensor Fitted')
range_t_man = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 55), Integer32()).setLabel("range-t-man").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: range_t_man.setStatus('current')
if mibBuilder.loadTexts: range_t_man.setDescription('Delivery Temp. Sensor Fitted')
range_t_ac = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 56), Integer32()).setLabel("range-t-ac").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: range_t_ac.setStatus('current')
if mibBuilder.loadTexts: range_t_ac.setDescription('Hot water temp. Sensor Fitted')
umid_al = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 57), Integer32()).setLabel("umid-al").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: umid_al.setStatus('current')
if mibBuilder.loadTexts: umid_al.setDescription('Humidifier general alarm')
range_u_amb = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 58), Integer32()).setLabel("range-u-amb").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: range_u_amb.setStatus('current')
if mibBuilder.loadTexts: range_u_amb.setDescription('Relative Humidity Sensor Fitted')
k_syson = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("k-syson").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: k_syson.setStatus('current')
if mibBuilder.loadTexts: k_syson.setDescription('Unit Remote Switch-On/Off Control')
xs_res_al = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("xs-res-al").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xs_res_al.setStatus('current')
if mibBuilder.loadTexts: xs_res_al.setDescription('Buzzer and Alarm Remote Reset Control')
sleep_mode = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("sleep-mode").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sleep_mode.setStatus('current')
if mibBuilder.loadTexts: sleep_mode.setDescription('Set Back Mode (Sleep Mode)')
test_sm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("test-sm").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: test_sm.setStatus('current')
if mibBuilder.loadTexts: test_sm.setDescription('Set Back mode: Cyclical Start of Fan')
ab_mediath = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("ab-mediath").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ab_mediath.setStatus('current')
if mibBuilder.loadTexts: ab_mediath.setDescription('Usage of T+ H Values: Local (0) / Mean (1)')
ustdby1_2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("ustdby1-2").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ustdby1_2.setStatus('current')
if mibBuilder.loadTexts: ustdby1_2.setDescription('No. Of Stand-by Units: one (0) / two (1)')
emerg = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 67), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: emerg.setStatus('current')
if mibBuilder.loadTexts: emerg.setDescription('Unit in Emergency operation')
analogObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2))
temp_amb = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 1), Integer32()).setLabel("temp-amb").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: temp_amb.setStatus('current')
if mibBuilder.loadTexts: temp_amb.setDescription('Room Temperature')
temp_ext = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 2), Integer32()).setLabel("temp-ext").setUnits('deg.C x 10').setMaxAccess("readonly")
if mibBuilder.loadTexts: temp_ext.setStatus('current')
if mibBuilder.loadTexts: temp_ext.setDescription('Outdoor Temperature')
temp_mand = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 3), Integer32()).setLabel("temp-mand").setUnits('deg.C x 10').setMaxAccess("readonly")
if mibBuilder.loadTexts: temp_mand.setStatus('current')
if mibBuilder.loadTexts: temp_mand.setDescription('Delivery Air Temperature')
temp_circ = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 4), Integer32()).setLabel("temp-circ").setUnits('deg.C x 10').setMaxAccess("readonly")
if mibBuilder.loadTexts: temp_circ.setStatus('current')
if mibBuilder.loadTexts: temp_circ.setDescription('Closed Circuit (or Chilled) Water Temperature')
temp_ac = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 5), Integer32()).setLabel("temp-ac").setUnits('deg.C x 10').setMaxAccess("readonly")
if mibBuilder.loadTexts: temp_ac.setStatus('current')
if mibBuilder.loadTexts: temp_ac.setDescription('Hot Water Temperature')
umid_amb = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 6), Integer32()).setLabel("umid-amb").setUnits('rH% x 10').setMaxAccess("readonly")
if mibBuilder.loadTexts: umid_amb.setStatus('current')
if mibBuilder.loadTexts: umid_amb.setDescription('Room Relative Humidity')
t_set = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-set").setUnits('deg.C x 10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_set.setStatus('current')
if mibBuilder.loadTexts: t_set.setDescription('Cooling Set Point')
t_diff = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-diff").setUnits('deg.C x 10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_diff.setStatus('current')
if mibBuilder.loadTexts: t_diff.setDescription('Cooling Prop.Band')
t_set_c = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-set-c").setUnits('deg.C x 10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_set_c.setStatus('current')
if mibBuilder.loadTexts: t_set_c.setDescription('Heating Set point')
t_diff_c = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-diff-c").setUnits('deg.C x 10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_diff_c.setStatus('current')
if mibBuilder.loadTexts: t_diff_c.setDescription('Heating Prop.Band')
ht_set = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("ht-set").setUnits('deg.C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ht_set.setStatus('current')
if mibBuilder.loadTexts: ht_set.setDescription('Room High Temp. Alarm Threshold')
lt_set = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("lt-set").setUnits('deg.C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lt_set.setStatus('current')
if mibBuilder.loadTexts: lt_set.setDescription('Room Low Temp. Alarm Threshold')
t_set_sm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-set-sm").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_set_sm.setStatus('current')
if mibBuilder.loadTexts: t_set_sm.setDescription('Setback Mode: Cooling Set Point')
t_set_c_sm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-set-c-sm").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_set_c_sm.setStatus('current')
if mibBuilder.loadTexts: t_set_c_sm.setDescription('Setback Mode: Heating Set Point')
t_cw_dh = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-cw-dh").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_cw_dh.setStatus('current')
if mibBuilder.loadTexts: t_cw_dh.setDescription('CW Set Point to Start Dehumidification Cycle')
htset_cw = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("htset-cw").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: htset_cw.setStatus('current')
if mibBuilder.loadTexts: htset_cw.setDescription('CW High Temperature Alarm Threshold')
t_set_cw = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-set-cw").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_set_cw.setStatus('current')
if mibBuilder.loadTexts: t_set_cw.setDescription('CW Set Point to Start CW Operating Mode (TC only)')
t_rc_es = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-rc-es").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_rc_es.setStatus('current')
if mibBuilder.loadTexts: t_rc_es.setDescription('Rad-cooler Set Point in E.S. Mode (ES Only)')
t_rc_est = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-rc-est").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_rc_est.setStatus('current')
if mibBuilder.loadTexts: t_rc_est.setDescription('Rad-cooler Set Point in DX Mode (ES Only)')
rampa_valv = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 20), Integer32()).setLabel("rampa-valv").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: rampa_valv.setStatus('current')
if mibBuilder.loadTexts: rampa_valv.setDescription('0-10V Ramp 1 Value (CW Valve Ramp)')
anaout2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 21), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: anaout2.setStatus('current')
if mibBuilder.loadTexts: anaout2.setDescription('0-10V Ramp 2 Value (HW Valve/Rad Cooler Ramp)')
steam_production = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 22), Integer32()).setLabel("steam-production").setUnits('kg/h x 10').setMaxAccess("readonly")
if mibBuilder.loadTexts: steam_production.setStatus('current')
if mibBuilder.loadTexts: steam_production.setDescription('Humidifier: steam capacity')
t_set_lm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-set-lm").setUnits('deg.C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_set_lm.setStatus('current')
if mibBuilder.loadTexts: t_set_lm.setDescription('Delivery Air Temperature Limit Set Point ')
delta_lm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("delta-lm").setUnits('deg.C x 10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: delta_lm.setStatus('current')
if mibBuilder.loadTexts: delta_lm.setDescription('T+H Values: Mean/Local Diff. (aut. Changeover)')
integerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3))
ore_filtro = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 1), Integer32()).setLabel("ore-filtro").setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: ore_filtro.setStatus('current')
if mibBuilder.loadTexts: ore_filtro.setDescription('Air Filter Working Houres')
ore_unit = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 2), Integer32()).setLabel("ore-unit").setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: ore_unit.setStatus('current')
if mibBuilder.loadTexts: ore_unit.setDescription('Unit Working Houres')
ore_compr1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 3), Integer32()).setLabel("ore-compr1").setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: ore_compr1.setStatus('current')
if mibBuilder.loadTexts: ore_compr1.setDescription('Compressor 1 Working Houres')
ore_compr2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 4), Integer32()).setLabel("ore-compr2").setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: ore_compr2.setStatus('current')
if mibBuilder.loadTexts: ore_compr2.setDescription('Compressor 2 Working Houres')
ore_compr3 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 5), Integer32()).setLabel("ore-compr3").setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: ore_compr3.setStatus('current')
if mibBuilder.loadTexts: ore_compr3.setDescription('Compressor 3 Working Houres')
ore_compr4 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 6), Integer32()).setLabel("ore-compr4").setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: ore_compr4.setStatus('current')
if mibBuilder.loadTexts: ore_compr4.setDescription('Compressor 4 Working Houres')
ore_heat1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 7), Integer32()).setLabel("ore-heat1").setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: ore_heat1.setStatus('current')
if mibBuilder.loadTexts: ore_heat1.setDescription('Heater 1 Working Houres')
ore_heat2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 8), Integer32()).setLabel("ore-heat2").setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: ore_heat2.setStatus('current')
if mibBuilder.loadTexts: ore_heat2.setDescription('Heater 2 Working Houres')
ore_umid = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 9), Integer32()).setLabel("ore-umid").setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: ore_umid.setStatus('current')
if mibBuilder.loadTexts: ore_umid.setDescription('Humidifier Working Houres')
hdiff = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdiff.setStatus('current')
if mibBuilder.loadTexts: hdiff.setDescription('Dehumidification Proportional Band')
hu_diff = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("hu-diff").setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hu_diff.setStatus('current')
if mibBuilder.loadTexts: hu_diff.setDescription('Humidification Proportional Band')
hh_set = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("hh-set").setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh_set.setStatus('current')
if mibBuilder.loadTexts: hh_set.setDescription('High Relative Humidity Alarm Threshold')
lh_set = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("lh-set").setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lh_set.setStatus('current')
if mibBuilder.loadTexts: lh_set.setDescription('Low Relative Humidity Alarm Threshold')
hset = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hset.setStatus('current')
if mibBuilder.loadTexts: hset.setDescription('Dehumidification Set Point')
hset_sm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("hset-sm").setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hset_sm.setStatus('current')
if mibBuilder.loadTexts: hset_sm.setDescription('Setback Mode: Dehumidification Set Point')
hu_set = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("hu-set").setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hu_set.setStatus('current')
if mibBuilder.loadTexts: hu_set.setDescription('Humidification Set Point')
hu_set_sm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("hu-set-sm").setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hu_set_sm.setStatus('current')
if mibBuilder.loadTexts: hu_set_sm.setDescription('Setback Mode: Humidification Set Point')
restart_delay = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("restart-delay").setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: restart_delay.setStatus('current')
if mibBuilder.loadTexts: restart_delay.setDescription('Restart Delay')
regul_delay = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("regul-delay").setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: regul_delay.setStatus('current')
if mibBuilder.loadTexts: regul_delay.setDescription('Regulation Start Transitory ')
time_lowp = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("time-lowp").setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: time_lowp.setStatus('current')
if mibBuilder.loadTexts: time_lowp.setDescription('Low Pressure Delay')
alarm_delay = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("alarm-delay").setUnits('m').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm_delay.setStatus('current')
if mibBuilder.loadTexts: alarm_delay.setDescription('Room T+H Alarm Delay')
exc_time = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("exc-time").setUnits('m').setMaxAccess("readwrite")
if mibBuilder.loadTexts: exc_time.setStatus('current')
if mibBuilder.loadTexts: exc_time.setDescription('Anti-Hunting Constant of Room Regulation ')
t_std_by = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-std-by").setUnits('h').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_std_by.setStatus('current')
if mibBuilder.loadTexts: t_std_by.setDescription('Stand-by Cycle Base Time')
lan_unit = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("lan-unit").setUnits('n').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan_unit.setStatus('current')
if mibBuilder.loadTexts: lan_unit.setDescription('Total of units connected in LAN')
ciclo_sm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("ciclo-sm").setUnits('m').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciclo_sm.setStatus('current')
if mibBuilder.loadTexts: ciclo_sm.setDescription('Set Back Mode: Fan Cyclical Start Interval')
mibBuilder.exportSymbols("UNCDZ-MIB", ore_compr3=ore_compr3, out_h3=out_h3, mal_smoke=mal_smoke, hset_sm=hset_sm, mal_lp1=mal_lp1, regul_delay=regul_delay, vent_on=vent_on, ore_umid=ore_umid, hset=hset, k_syson=k_syson, t_set_cw=t_set_cw, compressore1=compressore1, lh_set=lh_set, ore_filtro=ore_filtro, out_h2=out_h2, sleep_mode=sleep_mode, mal_sonda_tac=mal_sonda_tac, hu_set=hu_set, umid_al=umid_al, pCOStatusgroup=pCOStatusgroup, mal_wht=mal_wht, ore_compr4=ore_compr4, emerg=emerg, steam_production=steam_production, temp_ac=temp_ac, mal_ore_umid=mal_ore_umid, temp_mand=temp_mand, mal_hp2=mal_hp2, mal_ore_compr3=mal_ore_compr3, pCOId1_ErrorsNumber=pCOId1_ErrorsNumber, temp_circ=temp_circ, mal_aua=mal_aua, mal_cw_dh=mal_cw_dh, mal_ore_unit=mal_ore_unit, t_std_by=t_std_by, mal_ore_compr1=mal_ore_compr1, compressore3=compressore3, range_t_ac=range_t_ac, mal_flux=mal_flux, compressore2=compressore2, mal_sonda_ua=mal_sonda_ua, temp_amb=temp_amb, htset_cw=htset_cw, mal_ore_compr4=mal_ore_compr4, ciclo_sm=ciclo_sm, hh_set=hh_set, out_h1=out_h1, pCOId1_Status=pCOId1_Status, mal_eap=mal_eap, time_lowp=time_lowp, mal_phase=mal_phase, pCOWebInfo=pCOWebInfo, t_diff_c=t_diff_c, power=power, ustdby1_2=ustdby1_2, t_diff=t_diff, mal_flood=mal_flood, mal_sonda_tc=mal_sonda_tc, uncdz_MIB=uncdz_MIB, mal_nopower=mal_nopower, ore_heat2=ore_heat2, mal_tc_cw=mal_tc_cw, t_set_c=t_set_c, integerObjects=integerObjects, ore_compr1=ore_compr1, t_set=t_set, t_rc_est=t_rc_est, compressore4=compressore4, carel=carel, t_set_c_sm=t_set_c_sm, ht_set=ht_set, mal_ore_risc2=mal_ore_risc2, hu_diff=hu_diff, mal_access=mal_access, mal_ore_compr2=mal_ore_compr2, digitalObjects=digitalObjects, pCOErrorsNumbergroup=pCOErrorsNumbergroup, alarm_delay=alarm_delay, mal_heater=mal_heater, on_deum=on_deum, mal_lp2=mal_lp2, rampa_valv=rampa_valv, agentCode=agentCode, t_set_lm=t_set_lm, ore_compr2=ore_compr2, mal_hp1=mal_hp1, mal_ata=mal_ata, ab_mediath=ab_mediath, analogObjects=analogObjects, delta_lm=delta_lm, anaout2=anaout2, mal_lan=mal_lan, gas_caldo_on=gas_caldo_on, exc_time=exc_time, mal_ore_filtro=mal_ore_filtro, test_sm=test_sm, systm=systm, umid_amb=umid_amb, PYSNMP_MODULE_ID=uncdz_MIB, mal_bua=mal_bua, hu_set_sm=hu_set_sm, mal_ore_risc1=mal_ore_risc1, ore_unit=ore_unit, lt_set=lt_set, agentRelease=agentRelease, mal_sonda_ta=mal_sonda_ta, ore_heat1=ore_heat1, range_u_amb=range_u_amb, xs_res_al=xs_res_al, glb_al=glb_al, or_al_2lev=or_al_2lev, mal_bta=mal_bta, t_set_sm=t_set_sm, range_t_man=range_t_man, temp_ext=temp_ext, mal_hcurr=mal_hcurr, mal_wflow=mal_wflow, hdiff=hdiff, lan_unit=lan_unit, restart_delay=restart_delay, mal_nowater=mal_nowater, t_cw_dh=t_cw_dh, mal_filter=mal_filter, range_t_circ=range_t_circ, range_t_ext=range_t_ext, mal_sonda_te=mal_sonda_te, mal_sonda_tm=mal_sonda_tm, instruments=instruments, t_rc_es=t_rc_es)
