#
# PySNMP MIB module WWP-IP-INTERFACE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-IP-INTERFACE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, ObjectIdentity, IpAddress, TimeTicks, Counter32, Counter64, Integer32, iso, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ObjectIdentity", "IpAddress", "TimeTicks", "Counter32", "Counter64", "Integer32", "iso", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "Bits")
TruthValue, MacAddress, DateAndTime, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "DateAndTime", "DisplayString", "TextualConvention")
wwpModules, = mibBuilder.importSymbols("WWP-SMI", "wwpModules")
wwpIpInterfaceMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 17))
wwpIpInterfaceMIB.setRevisions(('2003-05-02 00:00', '2001-04-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpIpInterfaceMIB.setRevisionsDescriptions(('A new object for mgmt packet priority is added.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpIpInterfaceMIB.setLastUpdated('200104031700Z')
if mibBuilder.loadTexts: wwpIpInterfaceMIB.setOrganization('World Wide Packets, Inc')
if mibBuilder.loadTexts: wwpIpInterfaceMIB.setContactInfo(' Mib Meister Postal: World Wide Packets P.O. Box 950 Veradale, WA 99037 USA Phone: +1 509 242 9000 Email: mib.meister@worldwidepackets.com')
if mibBuilder.loadTexts: wwpIpInterfaceMIB.setDescription('The MIB module for the WWP IpInterface Ip interfaces config. This MIB provide additional configuration to whatever is provided by the standard ip group.')
class VlanId(TextualConvention, Integer32):
    description = 'A 12-bit VLAN ID used in the VLAN Tag header.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

wwpIpInterfaceMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 17, 1))
wwpIpInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 17, 1, 1))
wwpIpInterfaceMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 17, 2))
wwpIpInterfaceMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 17, 2, 0))
wwpIpInterfaceMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 17, 3))
wwpIpInterfaceMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 17, 3, 1))
wwpIpInterfaceMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 17, 3, 2))
wwpIpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 17, 1, 1, 1), )
if mibBuilder.loadTexts: wwpIpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: wwpIpInterfaceTable.setDescription('Table of IP addresses and associated subnet mask.')
wwpIpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 17, 1, 1, 1, 1), ).setIndexNames((0, "WWP-IP-INTERFACE-MIB", "wwpIpInterfaceIndex"))
if mibBuilder.loadTexts: wwpIpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: wwpIpInterfaceEntry.setDescription('Interface IP and subnet mask entry. These interfaces are used to cause the switch CPU to become involved witht he IP traffic. By default, a minimum of two interfaces must always exist, one for the local mgt interface, one for the remote mgt interface, and one or more for voice over IP.')
wwpIpInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 17, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpIpInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: wwpIpInterfaceIndex.setDescription('Unique index into the table.')
wwpIpInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 17, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpIpInterfaceName.setStatus('current')
if mibBuilder.loadTexts: wwpIpInterfaceName.setDescription('The friendly name for the IP interface.')
wwpIpInterfaceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 17, 1, 1, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpIpInterfaceIpAddr.setStatus('current')
if mibBuilder.loadTexts: wwpIpInterfaceIpAddr.setDescription('IP address associated with this interface. ')
wwpIpInterfaceSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 17, 1, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpIpInterfaceSubnet.setStatus('current')
if mibBuilder.loadTexts: wwpIpInterfaceSubnet.setDescription('The subnet mask associated with this ip address/interface.')
wwpIpInterfaceIfIndexXref = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 17, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpIpInterfaceIfIndexXref.setStatus('current')
if mibBuilder.loadTexts: wwpIpInterfaceIfIndexXref.setDescription('Cross reference to MIB-2 Interfaces ifIndex.')
wwpIpExtInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 17, 1, 1, 2), )
if mibBuilder.loadTexts: wwpIpExtInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: wwpIpExtInterfaceTable.setDescription('A table that contains Interface Specific information maintained by each interface.')
wwpIpExtInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 17, 1, 1, 2, 1), )
wwpIpInterfaceEntry.registerAugmentions(("WWP-IP-INTERFACE-MIB", "wwpIpExtInterfaceEntry"))
wwpIpExtInterfaceEntry.setIndexNames(*wwpIpInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: wwpIpExtInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: wwpIpExtInterfaceEntry.setDescription('A list of interfaces additional config parameters maintained by each interface.')
wwpIpInterfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 17, 1, 1, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpIpInterfaceEnable.setStatus('current')
if mibBuilder.loadTexts: wwpIpInterfaceEnable.setDescription("The status of each interface. A value of true(1) indicates that this interface is enabled and a value of false(2) indicates that this interface is disabled. The device shouldn't allow the Management Station to disable all the interfaces available on the box.")
wwpIpInterfaceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 17, 1, 1, 2, 1, 2), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpIpInterfaceVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpIpInterfaceVlanId.setDescription("The vlanId associated with this IP interface. The vlan indicated by wwpIpInterfaceVlanId should exist in the Vlan Table. If an interface has no vlan assocaited, then any read on this object should return 'noSuchInstance'.")
wwpIpInterfaceMgmtPktPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 17, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpIpInterfaceMgmtPktPriority.setStatus('current')
if mibBuilder.loadTexts: wwpIpInterfaceMgmtPktPriority.setDescription('The 802.1p Priority value for the mgmt traffic on this interface.')
wwpIpInterfaceAddrNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 17, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpIpInterfaceAddrNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpIpInterfaceAddrNotifEnabled.setDescription('This variable indicates whether the system generates the wwpIpInterfaceAddrChgNotification. A false value prevents this notifications from being generated by this system.')
wwpIpInterfaceAddrChgNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 17, 2, 0, 1)).setObjects(("WWP-IP-INTERFACE-MIB", "wwpIpInterfaceName"), ("WWP-IP-INTERFACE-MIB", "wwpIpInterfaceIpAddr"), ("WWP-IP-INTERFACE-MIB", "wwpIpInterfaceSubnet"))
if mibBuilder.loadTexts: wwpIpInterfaceAddrChgNotification.setStatus('current')
if mibBuilder.loadTexts: wwpIpInterfaceAddrChgNotification.setDescription('A wwpIpInterfaceAddrChgNotification is sent whenever the ip address of an interface changes.')
mibBuilder.exportSymbols("WWP-IP-INTERFACE-MIB", wwpIpExtInterfaceTable=wwpIpExtInterfaceTable, wwpIpInterfaceEntry=wwpIpInterfaceEntry, wwpIpInterfaceAddrNotifEnabled=wwpIpInterfaceAddrNotifEnabled, PYSNMP_MODULE_ID=wwpIpInterfaceMIB, wwpIpInterfaceMgmtPktPriority=wwpIpInterfaceMgmtPktPriority, wwpIpInterface=wwpIpInterface, wwpIpInterfaceName=wwpIpInterfaceName, wwpIpInterfaceEnable=wwpIpInterfaceEnable, wwpIpInterfaceMIBGroups=wwpIpInterfaceMIBGroups, wwpIpInterfaceMIBNotifications=wwpIpInterfaceMIBNotifications, wwpIpInterfaceIfIndexXref=wwpIpInterfaceIfIndexXref, VlanId=VlanId, wwpIpInterfaceAddrChgNotification=wwpIpInterfaceAddrChgNotification, wwpIpInterfaceTable=wwpIpInterfaceTable, wwpIpInterfaceIpAddr=wwpIpInterfaceIpAddr, wwpIpInterfaceSubnet=wwpIpInterfaceSubnet, wwpIpInterfaceVlanId=wwpIpInterfaceVlanId, wwpIpInterfaceMIB=wwpIpInterfaceMIB, wwpIpInterfaceMIBObjects=wwpIpInterfaceMIBObjects, wwpIpInterfaceMIBCompliances=wwpIpInterfaceMIBCompliances, wwpIpExtInterfaceEntry=wwpIpExtInterfaceEntry, wwpIpInterfaceMIBNotificationPrefix=wwpIpInterfaceMIBNotificationPrefix, wwpIpInterfaceIndex=wwpIpInterfaceIndex, wwpIpInterfaceMIBConformance=wwpIpInterfaceMIBConformance)
