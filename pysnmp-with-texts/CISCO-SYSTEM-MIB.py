#
# PySNMP MIB module CISCO-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:13:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CountryCode, = mibBuilder.importSymbols("CISCO-TC", "CountryCode")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, NotificationType, TimeTicks, Counter32, Counter64, iso, Unsigned32, ObjectIdentity, IpAddress, ModuleIdentity, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "NotificationType", "TimeTicks", "Counter32", "Counter64", "iso", "Unsigned32", "ObjectIdentity", "IpAddress", "ModuleIdentity", "Gauge32", "MibIdentifier")
TruthValue, DateAndTime, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DateAndTime", "TextualConvention", "DisplayString")
ciscoSystemMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 131))
ciscoSystemMIB.setRevisions(('2007-09-16 00:00', '2007-05-29 00:00', '2001-06-22 00:00', '2000-01-25 17:00', '1999-02-02 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSystemMIB.setRevisionsDescriptions(('Removed default values for csySummerTimeStatus, csySummerTimeOffset, csySummerTimeRecurringStart and csySummerTimeRecurringEnd objects.', 'Added the following new object: - csyStandardTmZnGMTOffset - csySummerTmZnGMTOffset', 'Added SNMP authentication failure objects and clock changed notification.', 'Added Summertime and ScheduledReset objects.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSystemMIB.setLastUpdated('200709160000Z')
if mibBuilder.loadTexts: ciscoSystemMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSystemMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoSystemMIB.setDescription('The systemGroup (see RFC 1907) provides a standard set of basic system information. This MIB module contains Cisco-defined extensions to the systemGroup.')
ciscoSystemMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 131, 1))
csyClock = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 1))
csyLocation = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 2))
csySummerTime = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 3))
csyScheduledReset = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 4))
csySnmpAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 5))
csyGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 6))
csyClockDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 1, 1), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csyClockDateAndTime.setStatus('current')
if mibBuilder.loadTexts: csyClockDateAndTime.setDescription('The current local date and time for the system. Setting this object is equivalent to setting an automated clock and calendar. The value of the object will track the date and time from the value set. Note that due to hardware limitations some systems may not be able to preserve such meaning across reboots of the system, as indicated by csyClockLostOnReboot. A constant value of all zeros and length 8 indicates the system is not aware of the present date and time. This object may be read-only on some systems.')
csyClockLostOnReboot = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csyClockLostOnReboot.setStatus('current')
if mibBuilder.loadTexts: csyClockLostOnReboot.setDescription("Indication of whether the system can preserve knowledge of current date and time across a system reboot. A value of 'true' indicates the clock must be reset from some external source each time the system reboots. A value of 'false' indicates the system has the ability to keep time across reboots.")
csyLocationCountry = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 2, 1), CountryCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csyLocationCountry.setStatus('current')
if mibBuilder.loadTexts: csyLocationCountry.setDescription("The country where the system is physically located. On some systems and for some technologies this value affects behavior, such as standards for communication. All such technologies should default to using the setting of this value, but may provide an override if necessary. The default value of this object is 'US'. Systems destined for other countries may use a different default. Systems in which the value does not affect operation should default to a zero-length value.")
csySummerTimeStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csySummerTimeStatus.setStatus('current')
if mibBuilder.loadTexts: csySummerTimeStatus.setDescription('An indication of whether the summertime feature is enabled on this device. When this object is set to true, then csySummerTimeOffset, csySummerTimeRecurringStart and csySummerTimeRecurringEnd objects are set to default values provided by the system. When this object is set to false, then csySummerTimeOffset, csySummerTimeRecurringStart, csySummerTimeRecurringEnd objects are not instantiated and the summertime feature is disabled.')
csySummerTimeOffset = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setUnits('Minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: csySummerTimeOffset.setStatus('current')
if mibBuilder.loadTexts: csySummerTimeOffset.setDescription('The value of this object indicates number of minutes to add or to subtract during summertime. This object is not instantiated when csySummerTimeStatus object is set to false.')
csySummerTimeRecurringStart = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csySummerTimeRecurringStart.setStatus('current')
if mibBuilder.loadTexts: csySummerTimeRecurringStart.setDescription('Indicates summertime starts at this time every year. octets contents range 1 week 1..5,ff last = ff 2-3 day 1..7 where sunday = 1 saturday = 7 4 month 1..12 where january = 1 december = 12 5 hour 0..23 6 min 0..59 For example, the first Monday in Feb at 13:30pm should be given as 01 00 02 02 0e 1e For the last Tuesday in dec at 1:20am should be given as ff 00 03 0c 01 14 This object is not instantiated when csySummerTimeStatus object is set to false.')
csySummerTimeRecurringEnd = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csySummerTimeRecurringEnd.setStatus('current')
if mibBuilder.loadTexts: csySummerTimeRecurringEnd.setDescription('Indicates summertime ends at this time every year. octets contents range 1 week 1..5,ff where ff = last 2-3 day 1..7 where sunday = 1 saturday = 7 4 month 1..12 where january = 1 december = 12 5 hour 0..23 6 min 0..59 For example, the third friday in February at 3:30am should be given as 03 00 06 02 03 1e For the first Tuesday in May at 1:20am should be given as 01 00 03 05 01 14 This object is not instantiated when csySummerTimeStatus object is set to false.')
csyStandardTmZnGMTOffset = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-720, 720))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: csyStandardTmZnGMTOffset.setStatus('current')
if mibBuilder.loadTexts: csyStandardTmZnGMTOffset.setDescription('This object is used to set standard timezone offset from GMT in minutes.')
csySummerTmZnGMTOffset = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-720, 720))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: csySummerTmZnGMTOffset.setStatus('current')
if mibBuilder.loadTexts: csySummerTmZnGMTOffset.setDescription('This object is used to set summer timezone offset from GMT in minutes.')
csyScheduledResetTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 4, 1), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csyScheduledResetTime.setStatus('current')
if mibBuilder.loadTexts: csyScheduledResetTime.setDescription('The scheduled date and time the switch will be reset at. The system will only take octet strings with length 8 for this object which indicates the local time of the switch. The maximum scheduled time is 24 days from the current system clock time. Setting this object value to be before the current system clock time or beyond the maximum scheduled time limit will be rejected by the system. Setting the object to all-zero octet strings will cancel the previously scheduled reset time and then the system will have no pending scheduled reset time. Setting this object value to be any valid octet strings other than the above cases will override the previously scheduled reset time and cause the system to be reset at the newly specified time. After the system has accepted the scheduled reset time, if the system clock is advanced ahead of the scheduled reset time, then reset will happen approximately 5 minutes after the current clock.')
csyScheduledResetAction = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("resetMinDown", 2))).clone('reset')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csyScheduledResetAction.setStatus('current')
if mibBuilder.loadTexts: csyScheduledResetAction.setDescription('Writing reset(1) to this object perform the normal reset operation on the active supervisor module. Writing resetMinDown(2) to this object resets the system with the minimal system down time at the scheduled time. The resetMinDown(2) is only supported in systems with redundant supervisors.')
csyScheduledResetReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csyScheduledResetReason.setStatus('current')
if mibBuilder.loadTexts: csyScheduledResetReason.setDescription("Indicates the reason users input when issuing system's scheduled reset. After the system is reset, this object value will be empty octet string.")
csySnmpAuthFail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csySnmpAuthFail.setStatus('current')
if mibBuilder.loadTexts: csySnmpAuthFail.setDescription('The total number of SNMP messages received by the SNMP engine that were not properly authenticated.')
csySnmpAuthFailAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 5, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csySnmpAuthFailAddressType.setStatus('current')
if mibBuilder.loadTexts: csySnmpAuthFailAddressType.setDescription('The type of Internet address by which the last received SNMP message that is not properly authenticated. The value of this object is irrelevant if the value of csySnmpAuthFail is zero.')
csySnmpAuthFailAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 5, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csySnmpAuthFailAddress.setStatus('current')
if mibBuilder.loadTexts: csySnmpAuthFailAddress.setDescription('The internet address of the SNMP entity which sent the last received SNMP message that is not properly authenticated. The value of this object is irrelevant if the value of csySnmpAuthFail is zero.')
csyNotificationsEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 131, 1, 6, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csyNotificationsEnable.setStatus('current')
if mibBuilder.loadTexts: csyNotificationsEnable.setDescription('This object indicates whether the system produces the notifications defined by the ciscoSystemNotificationsGroup. A false value will prevent notifications from being generated by this system.')
ciscoSystemMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 131, 2))
ciscoSystemMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 131, 2, 0))
ciscoSystemClockChanged = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 131, 2, 0, 1)).setObjects(("CISCO-SYSTEM-MIB", "csyClockDateAndTime"))
if mibBuilder.loadTexts: ciscoSystemClockChanged.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemClockChanged.setDescription('A clock changed notification is generated when the current local date and time for the system has been manually changed. The value of csyClockDateAndTime reflects new date and time.')
ciscoSystemMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 131, 3))
ciscoSystemMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 131, 3, 1))
ciscoSystemMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 131, 3, 2))
ciscoSystemMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 131, 3, 1, 1)).setObjects(("CISCO-SYSTEM-MIB", "ciscoSystemClockGroup"), ("CISCO-SYSTEM-MIB", "ciscoSystemLocationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemMIBCompliance = ciscoSystemMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSystemMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco System MIB. Adherence to this compliance statement is expected of all Cisco systems.')
ciscoSystemMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 131, 3, 1, 2)).setObjects(("CISCO-SYSTEM-MIB", "ciscoSystemClockGroup"), ("CISCO-SYSTEM-MIB", "ciscoSystemLocationGroup"), ("CISCO-SYSTEM-MIB", "ciscoSystemSummerTimeGroup"), ("CISCO-SYSTEM-MIB", "ciscoSystemScheduledResetGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemMIBCompliance2 = ciscoSystemMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSystemMIBCompliance2.setDescription('The compliance statement for entities which implement the Cisco System MIB. Adherence to this compliance statement is expected of all Cisco systems.')
ciscoSystemMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 131, 3, 1, 3)).setObjects(("CISCO-SYSTEM-MIB", "ciscoSystemClockGroup"), ("CISCO-SYSTEM-MIB", "ciscoSystemLocationGroup"), ("CISCO-SYSTEM-MIB", "ciscoSystemSummerTimeGroup"), ("CISCO-SYSTEM-MIB", "ciscoSystemScheduledResetGroup"), ("CISCO-SYSTEM-MIB", "ciscoSystemSnmpAuthGroup"), ("CISCO-SYSTEM-MIB", "ciscoSystemGeneralGroup"), ("CISCO-SYSTEM-MIB", "ciscoSystemNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemMIBCompliance3 = ciscoSystemMIBCompliance3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSystemMIBCompliance3.setDescription('The compliance statement for entities which implement the Cisco System MIB. Adherence to this compliance statement is expected of all Cisco systems.')
ciscoSystemMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 131, 3, 1, 4)).setObjects(("CISCO-SYSTEM-MIB", "ciscoSystemClockGroup"), ("CISCO-SYSTEM-MIB", "ciscoSystemLocationGroup"), ("CISCO-SYSTEM-MIB", "ciscoSystemSummerTimeGroupRev1"), ("CISCO-SYSTEM-MIB", "ciscoSystemScheduledResetGroup"), ("CISCO-SYSTEM-MIB", "ciscoSystemSnmpAuthGroup"), ("CISCO-SYSTEM-MIB", "ciscoSystemGeneralGroup"), ("CISCO-SYSTEM-MIB", "ciscoSystemNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemMIBCompliance4 = ciscoSystemMIBCompliance4.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemMIBCompliance4.setDescription('The compliance statement for entities which implement the Cisco System MIB. Adherence to this compliance statement is expected of all Cisco systems.')
ciscoSystemClockGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 131, 3, 2, 1)).setObjects(("CISCO-SYSTEM-MIB", "csyClockDateAndTime"), ("CISCO-SYSTEM-MIB", "csyClockLostOnReboot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemClockGroup = ciscoSystemClockGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemClockGroup.setDescription('Clock attributes.')
ciscoSystemLocationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 131, 3, 2, 2)).setObjects(("CISCO-SYSTEM-MIB", "csyLocationCountry"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemLocationGroup = ciscoSystemLocationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemLocationGroup.setDescription('Physical location attributes.')
ciscoSystemSummerTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 131, 3, 2, 3)).setObjects(("CISCO-SYSTEM-MIB", "csySummerTimeStatus"), ("CISCO-SYSTEM-MIB", "csySummerTimeOffset"), ("CISCO-SYSTEM-MIB", "csySummerTimeRecurringStart"), ("CISCO-SYSTEM-MIB", "csySummerTimeRecurringEnd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemSummerTimeGroup = ciscoSystemSummerTimeGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSystemSummerTimeGroup.setDescription('A collection of objects used to set Summertime. Implementation of this group is optional. If the generic Summertime feature is supported, the entire group should be implemented.')
ciscoSystemScheduledResetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 131, 3, 2, 4)).setObjects(("CISCO-SYSTEM-MIB", "csyScheduledResetTime"), ("CISCO-SYSTEM-MIB", "csyScheduledResetAction"), ("CISCO-SYSTEM-MIB", "csyScheduledResetReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemScheduledResetGroup = ciscoSystemScheduledResetGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemScheduledResetGroup.setDescription('A collection of objects used to set scheduled reset time. Implementation of this group is optional. If the system scheduled reset feature is supported, the entire group should be implemented.')
ciscoSystemSnmpAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 131, 3, 2, 5)).setObjects(("CISCO-SYSTEM-MIB", "csySnmpAuthFail"), ("CISCO-SYSTEM-MIB", "csySnmpAuthFailAddressType"), ("CISCO-SYSTEM-MIB", "csySnmpAuthFailAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemSnmpAuthGroup = ciscoSystemSnmpAuthGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemSnmpAuthGroup.setDescription('A collection of objects which provide information about SNMP message that is not properly authenticated.')
ciscoSystemGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 131, 3, 2, 6)).setObjects(("CISCO-SYSTEM-MIB", "csyNotificationsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemGeneralGroup = ciscoSystemGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemGeneralGroup.setDescription('A collection of objects which provide information about general configuration within this MIB module.')
ciscoSystemNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 131, 3, 2, 7)).setObjects(("CISCO-SYSTEM-MIB", "ciscoSystemClockChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemNotificationsGroup = ciscoSystemNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemNotificationsGroup.setDescription('A collection of notifications in this MIB module.')
ciscoSystemSummerTimeGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 131, 3, 2, 8)).setObjects(("CISCO-SYSTEM-MIB", "csySummerTimeStatus"), ("CISCO-SYSTEM-MIB", "csySummerTimeOffset"), ("CISCO-SYSTEM-MIB", "csySummerTimeRecurringStart"), ("CISCO-SYSTEM-MIB", "csySummerTimeRecurringEnd"), ("CISCO-SYSTEM-MIB", "csyStandardTmZnGMTOffset"), ("CISCO-SYSTEM-MIB", "csySummerTmZnGMTOffset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemSummerTimeGroupRev1 = ciscoSystemSummerTimeGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemSummerTimeGroupRev1.setDescription('A collection of objects used to set Summertime. Implementation of this group is optional. If the generic Summertime feature is supported, the entire group should be implemented.')
mibBuilder.exportSymbols("CISCO-SYSTEM-MIB", csyLocation=csyLocation, csySnmpAuthFailAddressType=csySnmpAuthFailAddressType, csyNotificationsEnable=csyNotificationsEnable, ciscoSystemSummerTimeGroupRev1=ciscoSystemSummerTimeGroupRev1, ciscoSystemMIB=ciscoSystemMIB, csyLocationCountry=csyLocationCountry, ciscoSystemMIBNotifications=ciscoSystemMIBNotifications, csySnmpAuthFail=csySnmpAuthFail, csyClock=csyClock, csySummerTime=csySummerTime, ciscoSystemLocationGroup=ciscoSystemLocationGroup, csySnmpAuthFailAddress=csySnmpAuthFailAddress, ciscoSystemScheduledResetGroup=ciscoSystemScheduledResetGroup, csySnmpAuthentication=csySnmpAuthentication, ciscoSystemGeneralGroup=ciscoSystemGeneralGroup, ciscoSystemMIBConformance=ciscoSystemMIBConformance, csyScheduledResetAction=csyScheduledResetAction, csyClockLostOnReboot=csyClockLostOnReboot, ciscoSystemMIBCompliance4=ciscoSystemMIBCompliance4, csyScheduledReset=csyScheduledReset, ciscoSystemClockGroup=ciscoSystemClockGroup, ciscoSystemSnmpAuthGroup=ciscoSystemSnmpAuthGroup, ciscoSystemMIBCompliance=ciscoSystemMIBCompliance, ciscoSystemMIBNotificationPrefix=ciscoSystemMIBNotificationPrefix, ciscoSystemMIBCompliances=ciscoSystemMIBCompliances, csySummerTimeOffset=csySummerTimeOffset, csySummerTimeStatus=csySummerTimeStatus, ciscoSystemSummerTimeGroup=ciscoSystemSummerTimeGroup, csySummerTimeRecurringStart=csySummerTimeRecurringStart, csyStandardTmZnGMTOffset=csyStandardTmZnGMTOffset, csyGeneral=csyGeneral, csyScheduledResetReason=csyScheduledResetReason, ciscoSystemMIBGroups=ciscoSystemMIBGroups, csyScheduledResetTime=csyScheduledResetTime, ciscoSystemMIBCompliance3=ciscoSystemMIBCompliance3, csySummerTmZnGMTOffset=csySummerTmZnGMTOffset, ciscoSystemClockChanged=ciscoSystemClockChanged, ciscoSystemMIBCompliance2=ciscoSystemMIBCompliance2, ciscoSystemNotificationsGroup=ciscoSystemNotificationsGroup, csyClockDateAndTime=csyClockDateAndTime, PYSNMP_MODULE_ID=ciscoSystemMIB, ciscoSystemMIBObjects=ciscoSystemMIBObjects, csySummerTimeRecurringEnd=csySummerTimeRecurringEnd)
