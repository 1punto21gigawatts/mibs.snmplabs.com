#
# PySNMP MIB module SONUS-IP-ADDRESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONUS-IP-ADDRESS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:09:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, iso, NotificationType, MibIdentifier, ModuleIdentity, Gauge32, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32, Bits, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "NotificationType", "MibIdentifier", "ModuleIdentity", "Gauge32", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32", "Bits", "IpAddress", "TimeTicks")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
sonusPacketMIBs, = mibBuilder.importSymbols("SONUS-SMI", "sonusPacketMIBs")
sonusIpAddressMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2879, 2, 3, 2))
if mibBuilder.loadTexts: sonusIpAddressMIB.setLastUpdated('200102030000Z')
if mibBuilder.loadTexts: sonusIpAddressMIB.setOrganization('Sonus Networks, Inc.')
if mibBuilder.loadTexts: sonusIpAddressMIB.setContactInfo(' Customer Support Sonus Networks, Inc, 5 carlisle Road Westford, MA 01886 USA Tel: 978-692-8999 Fax: 978-392-9118 E-mail: cs.snmp@sonusnet.com')
if mibBuilder.loadTexts: sonusIpAddressMIB.setDescription('The MIB Module for IP Address Management.')
sonusIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 3, 2, 1), )
if mibBuilder.loadTexts: sonusIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: sonusIpAddrTable.setDescription("The table of addressing information relevant to this entity's IP addresses.")
sonusIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 3, 2, 1, 1), ).setIndexNames((0, "SONUS-IP-ADDRESS-MIB", "sonusIpAdEntShelf"), (0, "SONUS-IP-ADDRESS-MIB", "sonusIpAdEntSlot"), (0, "SONUS-IP-ADDRESS-MIB", "sonusIpAdEntInstance"), (0, "SONUS-IP-ADDRESS-MIB", "sonusIpAdEntAddr"))
if mibBuilder.loadTexts: sonusIpAddrEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIpAddrEntry.setDescription("The addressing information for one of this entity's IP addresses.")
sonusIpAdEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpAdEntAddr.setStatus('current')
if mibBuilder.loadTexts: sonusIpAdEntAddr.setDescription("The IP address to which this entry's addressing information pertains.")
sonusIpAdEntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpAdEntIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIpAdEntIfIndex.setDescription("The index value which uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of RFC 1573's ifIndex.")
sonusIpAdEntNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpAdEntNetMask.setStatus('current')
if mibBuilder.loadTexts: sonusIpAdEntNetMask.setDescription('The subnet mask associated with the IP address of this entry. The value of the mask is an IP address with all the network bits set to 1 and all the hosts bits set to 0.')
sonusIpAdEntBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpAdEntBcastAddr.setStatus('current')
if mibBuilder.loadTexts: sonusIpAdEntBcastAddr.setDescription('The value of the least-significant bit in the IP broadcast address used for sending datagrams on the (logical) interface associated with the IP address of this entry. For example, when the Internet standard all-ones broadcast address is used, the value will be 1. This value applies to both the subnet and network broadcasts addresses used by the entity on this (logical) interface.')
sonusIpAdEntReasmMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpAdEntReasmMaxSize.setStatus('current')
if mibBuilder.loadTexts: sonusIpAdEntReasmMaxSize.setDescription('The size of the largest IP datagram which this entity can re-assemble from incoming IP fragmented datagrams received on this interface.')
sonusIpAdEntShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIpAdEntShelf.setStatus('current')
if mibBuilder.loadTexts: sonusIpAdEntShelf.setDescription('A 32-bit integer identifying the shelf that the IP Addr table applies to')
sonusIpAdEntSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIpAdEntSlot.setStatus('current')
if mibBuilder.loadTexts: sonusIpAdEntSlot.setDescription('A 32-bit integer identifying the slot that the IP Addr table applies to')
sonusIpAdEntInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIpAdEntInstance.setStatus('current')
if mibBuilder.loadTexts: sonusIpAdEntInstance.setDescription('A 32-bit integer identifying the instance that the IP Addr table applies to')
sonusIpNetToMediaTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 3, 2, 2), )
if mibBuilder.loadTexts: sonusIpNetToMediaTable.setStatus('current')
if mibBuilder.loadTexts: sonusIpNetToMediaTable.setDescription('The IP Address Translation table used for mapping from IP addresses to physical addresses.')
sonusIpNetToMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 3, 2, 2, 1), ).setIndexNames((0, "SONUS-IP-ADDRESS-MIB", "sonusIpNetToMediaShelf"), (0, "SONUS-IP-ADDRESS-MIB", "sonusIpNetToMediaSlot"), (0, "SONUS-IP-ADDRESS-MIB", "sonusIpNetToMediaInstance"), (0, "SONUS-IP-ADDRESS-MIB", "sonusIpNetToMediaIfIndex"), (0, "SONUS-IP-ADDRESS-MIB", "sonusIpNetToMediaNetAddress"))
if mibBuilder.loadTexts: sonusIpNetToMediaEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIpNetToMediaEntry.setDescription("Each entry contains one IpAddress to `physical' address equivalence.")
sonusIpNetToMediaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusIpNetToMediaIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIpNetToMediaIfIndex.setDescription("The interface on which this entry's equivalence is effective. The interface identified by a particular value of this index is the same interface as identified by the same value of RFC 1573's ifIndex.")
sonusIpNetToMediaPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 2, 2, 1, 2), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusIpNetToMediaPhysAddress.setStatus('current')
if mibBuilder.loadTexts: sonusIpNetToMediaPhysAddress.setDescription("The media-dependent `physical' address.")
sonusIpNetToMediaNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 2, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusIpNetToMediaNetAddress.setStatus('current')
if mibBuilder.loadTexts: sonusIpNetToMediaNetAddress.setDescription("The IpAddress corresponding to the media-dependent `physical' address.")
sonusIpNetToMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusIpNetToMediaType.setStatus('current')
if mibBuilder.loadTexts: sonusIpNetToMediaType.setDescription('The type of mapping. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the ipNetToMediaTable. That is, it effectively disassociates the interface identified with said entry from the mapping identified with said entry. It is an implementation- specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper interpretation of such entries requires examination of the relevant ipNetToMediaType object.')
sonusIpNetToMediaShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 2, 2, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusIpNetToMediaShelf.setStatus('current')
if mibBuilder.loadTexts: sonusIpNetToMediaShelf.setDescription('A 32-bit integer identifying the shelf that the IP Net to Media table applies to')
sonusIpNetToMediaSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 2, 2, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusIpNetToMediaSlot.setStatus('current')
if mibBuilder.loadTexts: sonusIpNetToMediaSlot.setDescription('A 32-bit integer identifying the slot that the IP Net to Media table applies to')
sonusIpNetToMediaInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 2, 2, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusIpNetToMediaInstance.setStatus('current')
if mibBuilder.loadTexts: sonusIpNetToMediaInstance.setDescription('A 32-bit integer identifying the instance that the IP Net to Media table applies to')
mibBuilder.exportSymbols("SONUS-IP-ADDRESS-MIB", sonusIpAdEntInstance=sonusIpAdEntInstance, sonusIpNetToMediaShelf=sonusIpNetToMediaShelf, sonusIpAdEntIfIndex=sonusIpAdEntIfIndex, sonusIpNetToMediaNetAddress=sonusIpNetToMediaNetAddress, sonusIpAdEntNetMask=sonusIpAdEntNetMask, sonusIpAddrEntry=sonusIpAddrEntry, sonusIpAddrTable=sonusIpAddrTable, sonusIpNetToMediaPhysAddress=sonusIpNetToMediaPhysAddress, sonusIpAdEntBcastAddr=sonusIpAdEntBcastAddr, sonusIpAdEntAddr=sonusIpAdEntAddr, sonusIpNetToMediaEntry=sonusIpNetToMediaEntry, sonusIpNetToMediaTable=sonusIpNetToMediaTable, sonusIpAdEntReasmMaxSize=sonusIpAdEntReasmMaxSize, sonusIpNetToMediaSlot=sonusIpNetToMediaSlot, sonusIpNetToMediaType=sonusIpNetToMediaType, sonusIpNetToMediaInstance=sonusIpNetToMediaInstance, sonusIpAdEntSlot=sonusIpAdEntSlot, PYSNMP_MODULE_ID=sonusIpAddressMIB, sonusIpNetToMediaIfIndex=sonusIpNetToMediaIfIndex, sonusIpAdEntShelf=sonusIpAdEntShelf, sonusIpAddressMIB=sonusIpAddressMIB)
