#
# PySNMP MIB module H3C-RSA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-RSA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:23:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
h3cCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Integer32, NotificationType, Gauge32, iso, Counter64, TimeTicks, Counter32, ObjectIdentity, Bits, ModuleIdentity, IpAddress, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Integer32", "NotificationType", "Gauge32", "iso", "Counter64", "TimeTicks", "Counter32", "ObjectIdentity", "Bits", "ModuleIdentity", "IpAddress", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DateAndTime, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "RowStatus", "DisplayString")
h3cRSA = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23))
h3cRSA.setRevisions(('2004-10-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h3cRSA.setRevisionsDescriptions(('The initial revision of RSA module.',))
if mibBuilder.loadTexts: h3cRSA.setLastUpdated('200410100000Z')
if mibBuilder.loadTexts: h3cRSA.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: h3cRSA.setContactInfo(' R&D BeiJing, Huawei-3Com Technologies Co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei-3com.com E-mail:support@huawei-3com.com ')
if mibBuilder.loadTexts: h3cRSA.setDescription('The H3C-RSA-MIB contains objects to Manage RSA configuration.')
class RSAKeyErrorCode(TextualConvention, Integer32):
    description = 'Indicates the reason that SSH peer public key fails to config or that SSH local key pair fails to create/refresh/destroy.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))
    namedValues = NamedValues(("rsaSuccess", 1), ("rsaFailure", 2), ("rsaErrNoMemory", 3), ("rsaErrKeyNotReplaced", 4), ("rsaErrKeyBackup", 5), ("rsaErrKeySaved", 6), ("rsaErrKeyGenerate", 7), ("rsaErrKeyDestroy", 8), ("rsaErrHostEncKeyBackup", 9), ("rsaErrHostEncKeySave", 10), ("rsaErrHostEncKeyGenerate", 11), ("rsaErrHostEncKeyDestroy", 12), ("rsaErrHostSigKeyBackup", 13), ("rsaErrHostSigKeySave", 14), ("rsaErrHostSigKeyGenerate", 15), ("rsaErrHostSigKeyDestroy", 16), ("rsaErrServerKeyBackup", 17), ("rsaErrServerKeySave", 18), ("rsaErrServerKeyGenerate", 19), ("rsaErrServerKeyDestroy", 20), ("rsaErrPeerKeyNotReplaced", 21), ("rsaErrPeerKeyNumArriveMax", 22), ("rsaErrPeerKeyNotRemoved", 23), ("rsaErrPeerKeyNotExist", 24), ("rsaStatusKeyExist", 25), ("rsaStatusKeyNotExist", 26), ("rsaStatusKeyInvalid", 27), ("rsaStatusHostEncKeyExist", 28), ("rsaStatusHostEncKeyNotExist", 29), ("rsaStatusHostEncKeyInvalid", 30), ("rsaStatusHostSigKeyExist", 31), ("rsaStatusHostSigKeyNotExist", 32), ("rsaStatusHostSigKeyInvalid", 33), ("rsaStatusServerKeyExist", 34), ("rsaStatusServerKeyNotExist", 35), ("rsaStatusServerKeyInvalid", 36))

h3cRSAMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 1))
h3cRSAPeerPublicKeyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 1, 1), )
if mibBuilder.loadTexts: h3cRSAPeerPublicKeyTable.setStatus('current')
if mibBuilder.loadTexts: h3cRSAPeerPublicKeyTable.setDescription('The (conceptual) RSA Peer Public Key Table')
h3cRSAPeerPublicKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 1, 1, 1), ).setIndexNames((0, "H3C-RSA-MIB", "h3cRSAPeerPublicKeyName"))
if mibBuilder.loadTexts: h3cRSAPeerPublicKeyEntry.setStatus('current')
if mibBuilder.loadTexts: h3cRSAPeerPublicKeyEntry.setDescription('An entry (conceptual row) in the RSA Peer Public Key Table.')
h3cRSAPeerPublicKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: h3cRSAPeerPublicKeyName.setStatus('current')
if mibBuilder.loadTexts: h3cRSAPeerPublicKeyName.setDescription('The RSA peer public key name.')
h3cRSAPeerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRSAPeerIpAddress.setStatus('current')
if mibBuilder.loadTexts: h3cRSAPeerIpAddress.setDescription('Indicates the IP Address of RSA Peer machine.')
h3cRSAPeerFQDN = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 1, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRSAPeerFQDN.setStatus('current')
if mibBuilder.loadTexts: h3cRSAPeerFQDN.setDescription('The Full Qualified Domain Name of RSA Peer Machine')
h3cRSAPeerPublicKeyCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRSAPeerPublicKeyCode.setStatus('current')
if mibBuilder.loadTexts: h3cRSAPeerPublicKeyCode.setDescription('The code of RSA peer public key.')
h3cRSAPeerPublicKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRSAPeerPublicKeyStatus.setStatus('current')
if mibBuilder.loadTexts: h3cRSAPeerPublicKeyStatus.setDescription('The status of this RSA peer public key entry. Support Active Status and CreateAndGo and Destroy Operation ')
h3cRSALocalKeyPairTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 1, 2), )
if mibBuilder.loadTexts: h3cRSALocalKeyPairTable.setStatus('current')
if mibBuilder.loadTexts: h3cRSALocalKeyPairTable.setDescription('The (conceptual)RSA local Key Pair Table.')
h3cRSALocalKeyPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 1, 2, 1), ).setIndexNames((0, "H3C-RSA-MIB", "h3cRSALocalKeyIndex"))
if mibBuilder.loadTexts: h3cRSALocalKeyPairEntry.setStatus('current')
if mibBuilder.loadTexts: h3cRSALocalKeyPairEntry.setDescription('An entry (conceptual row) in the RSA local Key Pair Table.')
h3cRSALocalKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: h3cRSALocalKeyIndex.setStatus('current')
if mibBuilder.loadTexts: h3cRSALocalKeyIndex.setDescription('The h3cRSALocalKeyPairTable Table can only exist one entry at most.')
h3cRSALocalHostKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRSALocalHostKeyName.setStatus('current')
if mibBuilder.loadTexts: h3cRSALocalHostKeyName.setDescription("Indicates RSA Host local public key name.Its value is composed of systemname, a underscore and the string of 'Host'")
h3cRSALocalHostKeyCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRSALocalHostKeyCode.setStatus('current')
if mibBuilder.loadTexts: h3cRSALocalHostKeyCode.setDescription('Indicates the code of RSA Host local pkey that the length is between 512 and 2048 bits.')
h3cRSALocalHostKeyCreatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 1, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRSALocalHostKeyCreatedTime.setStatus('current')
if mibBuilder.loadTexts: h3cRSALocalHostKeyCreatedTime.setDescription('Indicates the created time of RSA local Host key.')
h3cRSALocalServerKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRSALocalServerKeyName.setStatus('current')
if mibBuilder.loadTexts: h3cRSALocalServerKeyName.setDescription("Indicates RSA Host local public key name.Its value is composed of systemname, a underscore and the string of 'Server'")
h3cRSALocalServerKeyCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRSALocalServerKeyCode.setStatus('current')
if mibBuilder.loadTexts: h3cRSALocalServerKeyCode.setDescription('Indicates the code of RSA Host local pkey that the length is between 512 and 2048 bits.')
h3cRSALocalServerKeyCreatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 1, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRSALocalServerKeyCreatedTime.setStatus('current')
if mibBuilder.loadTexts: h3cRSALocalServerKeyCreatedTime.setDescription('Indicates the created time of RSA local Host key.')
h3cRSALocalKeyPairBits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 2048)).clone(512)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRSALocalKeyPairBits.setStatus('current')
if mibBuilder.loadTexts: h3cRSALocalKeyPairBits.setDescription('The bits of RSA local key pair, ranging between 512 and 2048. By default, the value is 512.')
h3cRSALocalKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRSALocalKeyStatus.setStatus('current')
if mibBuilder.loadTexts: h3cRSALocalKeyStatus.setDescription('The status column used for creating, deleting instances of the columnar objects in the h3cRSALocalKeyPairTable table.')
h3cRSAPeerKeyConfigFailReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 1, 3), RSAKeyErrorCode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cRSAPeerKeyConfigFailReason.setStatus('current')
if mibBuilder.loadTexts: h3cRSAPeerKeyConfigFailReason.setDescription('The reason that RSA peer public key fails to config.')
h3cRSALocalKeyFailReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 1, 4), RSAKeyErrorCode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cRSALocalKeyFailReason.setStatus('current')
if mibBuilder.loadTexts: h3cRSALocalKeyFailReason.setDescription('The reason that RSA local key pair fails to create, refresh and destroy.')
h3cRSANotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 2))
h3cRSALocalKeyPairOpeFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 2, 1)).setObjects(("H3C-RSA-MIB", "h3cRSALocalKeyFailReason"))
if mibBuilder.loadTexts: h3cRSALocalKeyPairOpeFail.setStatus('current')
if mibBuilder.loadTexts: h3cRSALocalKeyPairOpeFail.setDescription('The trap is generated while the RSA local key pair fails to create, refresh and destory.')
h3cRSAPeerKeyConfigFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 23, 2, 2)).setObjects(("H3C-RSA-MIB", "h3cRSAPeerKeyConfigFailReason"))
if mibBuilder.loadTexts: h3cRSAPeerKeyConfigFail.setStatus('current')
if mibBuilder.loadTexts: h3cRSAPeerKeyConfigFail.setDescription('The trap is generated while the RSA peer public key fails to configure.')
mibBuilder.exportSymbols("H3C-RSA-MIB", h3cRSAPeerPublicKeyTable=h3cRSAPeerPublicKeyTable, RSAKeyErrorCode=RSAKeyErrorCode, h3cRSALocalKeyPairEntry=h3cRSALocalKeyPairEntry, h3cRSALocalKeyPairTable=h3cRSALocalKeyPairTable, h3cRSAPeerPublicKeyStatus=h3cRSAPeerPublicKeyStatus, h3cRSALocalHostKeyCreatedTime=h3cRSALocalHostKeyCreatedTime, h3cRSANotifications=h3cRSANotifications, h3cRSAPeerIpAddress=h3cRSAPeerIpAddress, h3cRSAPeerKeyConfigFail=h3cRSAPeerKeyConfigFail, h3cRSAPeerPublicKeyName=h3cRSAPeerPublicKeyName, h3cRSALocalHostKeyCode=h3cRSALocalHostKeyCode, h3cRSAPeerPublicKeyCode=h3cRSAPeerPublicKeyCode, h3cRSALocalKeyFailReason=h3cRSALocalKeyFailReason, h3cRSALocalKeyStatus=h3cRSALocalKeyStatus, h3cRSAPeerKeyConfigFailReason=h3cRSAPeerKeyConfigFailReason, h3cRSALocalHostKeyName=h3cRSALocalHostKeyName, h3cRSALocalKeyIndex=h3cRSALocalKeyIndex, h3cRSAPeerPublicKeyEntry=h3cRSAPeerPublicKeyEntry, h3cRSAPeerFQDN=h3cRSAPeerFQDN, h3cRSALocalKeyPairOpeFail=h3cRSALocalKeyPairOpeFail, h3cRSALocalServerKeyName=h3cRSALocalServerKeyName, h3cRSAMIBObjects=h3cRSAMIBObjects, h3cRSALocalKeyPairBits=h3cRSALocalKeyPairBits, h3cRSALocalServerKeyCreatedTime=h3cRSALocalServerKeyCreatedTime, h3cRSALocalServerKeyCode=h3cRSALocalServerKeyCode, PYSNMP_MODULE_ID=h3cRSA, h3cRSA=h3cRSA)
