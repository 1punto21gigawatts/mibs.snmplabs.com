#
# PySNMP MIB module DSLAM-BACKUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DSLAM-BACKUP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:54:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
AtmVpIdentifier, AtmVorXOperStatus, AtmVcIdentifier = mibBuilder.importSymbols("ATM-TC-MIB", "AtmVpIdentifier", "AtmVorXOperStatus", "AtmVcIdentifier")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
pgainDSLAM, = mibBuilder.importSymbols("PAIRGAIN-COMMON-HD-MIB", "pgainDSLAM")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, Integer32, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, Gauge32, TimeTicks, NotificationType, ModuleIdentity, IpAddress, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "Gauge32", "TimeTicks", "NotificationType", "ModuleIdentity", "IpAddress", "Counter32", "iso")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
pgBackupMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 927, 1, 9, 19))
if mibBuilder.loadTexts: pgBackupMIB.setLastUpdated('')
if mibBuilder.loadTexts: pgBackupMIB.setOrganization('PairGain Technologies, Inc.')
if mibBuilder.loadTexts: pgBackupMIB.setContactInfo('')
if mibBuilder.loadTexts: pgBackupMIB.setDescription('The MIB Module for BACKUP.')
pgBackupObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1))
pgBackupPortTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 1), )
if mibBuilder.loadTexts: pgBackupPortTable.setStatus('current')
if mibBuilder.loadTexts: pgBackupPortTable.setDescription('This table is used to restore the PVC/PVP connections back from the backup path to the primary one. The number of the entry in this table depends on the number of line card in the system. The entries would be pre-existent. Only the MIB object of pgBackupPortAdminStatus is allowed to set.')
pgBackupPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pgBackupPortEntry.setStatus('current')
if mibBuilder.loadTexts: pgBackupPortEntry.setDescription('The entry of the pgBackupPortTable. The ifIndex would be the ATM interface of the line card.')
pgBackupPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBackupPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: pgBackupPortAdminStatus.setDescription('This object is used to restore the PVC/PVP connection back from the backup path to the primary path.')
pgBackupVpTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 2), )
if mibBuilder.loadTexts: pgBackupVpTable.setStatus('current')
if mibBuilder.loadTexts: pgBackupVpTable.setDescription('The Backup VP table. This table is used for PVPs Redirect.')
pgBackupVpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 2, 1), ).setIndexNames((0, "DSLAM-BACKUP-MIB", "pgBackupVpPrimaryIfIndex"), (0, "DSLAM-BACKUP-MIB", "pgBackupVpPrimaryVpi"), (0, "DSLAM-BACKUP-MIB", "pgBackupVpSecondaryIfIndex"), (0, "DSLAM-BACKUP-MIB", "pgBackupVpSecondaryVpi"))
if mibBuilder.loadTexts: pgBackupVpEntry.setStatus('current')
if mibBuilder.loadTexts: pgBackupVpEntry.setDescription('The entry of pgBackupVpTable.')
pgBackupVpPrimaryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: pgBackupVpPrimaryIfIndex.setStatus('current')
if mibBuilder.loadTexts: pgBackupVpPrimaryIfIndex.setDescription('The ifIndex value of the ATM interface at line card side for the primary PVP. This value would represent one of the line card in the system.')
pgBackupVpPrimaryVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 2, 1, 2), AtmVpIdentifier())
if mibBuilder.loadTexts: pgBackupVpPrimaryVpi.setStatus('current')
if mibBuilder.loadTexts: pgBackupVpPrimaryVpi.setDescription('The VPI value of the primary VPL.')
pgBackupVpSecondaryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 2, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: pgBackupVpSecondaryIfIndex.setStatus('current')
if mibBuilder.loadTexts: pgBackupVpSecondaryIfIndex.setDescription('The ifIndex value of the ATM interface at line card side for the secondary PVP. This value would represent one of the line card in the system.')
pgBackupVpSecondaryVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 2, 1, 4), AtmVpIdentifier())
if mibBuilder.loadTexts: pgBackupVpSecondaryVpi.setStatus('current')
if mibBuilder.loadTexts: pgBackupVpSecondaryVpi.setDescription('The VPI value of the secondary VPL.')
pgBackupVpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 2, 1, 5), RowStatus().clone('createAndWait')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pgBackupVpRowStatus.setStatus('current')
if mibBuilder.loadTexts: pgBackupVpRowStatus.setDescription('This object is used to create, delete or modify a row in this table.')
pgBackupVpPrimaryAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBackupVpPrimaryAdminStatus.setStatus('current')
if mibBuilder.loadTexts: pgBackupVpPrimaryAdminStatus.setDescription('This object is used to restore the PVP back from the secondary PVP to the primary PVP.')
pgBackupVpPrimaryOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 2, 1, 7), AtmVorXOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBackupVpPrimaryOperStatus.setStatus('current')
if mibBuilder.loadTexts: pgBackupVpPrimaryOperStatus.setDescription('The current operational status of the cross-connect over the primary PVP.')
pgBackupVpSecondaryOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 2, 1, 8), AtmVorXOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBackupVpSecondaryOperStatus.setStatus('current')
if mibBuilder.loadTexts: pgBackupVpSecondaryOperStatus.setDescription('The current operational status of the cross-connect over the secondary PVP.')
pgBackupVpSwitchTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBackupVpSwitchTimes.setStatus('current')
if mibBuilder.loadTexts: pgBackupVpSwitchTimes.setDescription('The number of times when the PVP is switched from the primary PVP to the secondary PVP.')
pgBackupVcTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 3), )
if mibBuilder.loadTexts: pgBackupVcTable.setStatus('current')
if mibBuilder.loadTexts: pgBackupVcTable.setDescription('The Backup VC table. This table is used for PVCs Redirect.')
pgBackupVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 3, 1), ).setIndexNames((0, "DSLAM-BACKUP-MIB", "pgBackupVcPrimaryIfIndex"), (0, "DSLAM-BACKUP-MIB", "pgBackupVcPrimaryVpi"), (0, "DSLAM-BACKUP-MIB", "pgBackupVcPrimaryVci"), (0, "DSLAM-BACKUP-MIB", "pgBackupVcSecondaryIfIndex"), (0, "DSLAM-BACKUP-MIB", "pgBackupVcSecondaryVpi"), (0, "DSLAM-BACKUP-MIB", "pgBackupVcSecondaryVci"))
if mibBuilder.loadTexts: pgBackupVcEntry.setStatus('current')
if mibBuilder.loadTexts: pgBackupVcEntry.setDescription('The entry of pgBackupVcTable.')
pgBackupVcPrimaryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: pgBackupVcPrimaryIfIndex.setStatus('current')
if mibBuilder.loadTexts: pgBackupVcPrimaryIfIndex.setDescription('The ifIndex value of the ATM interface at line card side for the primary PVC. This value would represent one of the line card in the system.')
pgBackupVcPrimaryVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 3, 1, 2), AtmVpIdentifier())
if mibBuilder.loadTexts: pgBackupVcPrimaryVpi.setStatus('current')
if mibBuilder.loadTexts: pgBackupVcPrimaryVpi.setDescription('The VPI value of the primary VCL.')
pgBackupVcPrimaryVci = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 3, 1, 3), AtmVcIdentifier())
if mibBuilder.loadTexts: pgBackupVcPrimaryVci.setStatus('current')
if mibBuilder.loadTexts: pgBackupVcPrimaryVci.setDescription('The VCI value of the primary VCL.')
pgBackupVcSecondaryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 3, 1, 4), InterfaceIndex())
if mibBuilder.loadTexts: pgBackupVcSecondaryIfIndex.setStatus('current')
if mibBuilder.loadTexts: pgBackupVcSecondaryIfIndex.setDescription('The ifIndex value of the ATM interface at line card side for the secondary PVC. This value would represent one of the line card in the system.')
pgBackupVcSecondaryVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 3, 1, 5), AtmVpIdentifier())
if mibBuilder.loadTexts: pgBackupVcSecondaryVpi.setStatus('current')
if mibBuilder.loadTexts: pgBackupVcSecondaryVpi.setDescription('The VPI value of the secondary VCL.')
pgBackupVcSecondaryVci = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 3, 1, 6), AtmVcIdentifier())
if mibBuilder.loadTexts: pgBackupVcSecondaryVci.setStatus('current')
if mibBuilder.loadTexts: pgBackupVcSecondaryVci.setDescription('The VCI value of the secondary VCL.')
pgBackupVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 3, 1, 7), RowStatus().clone('createAndWait')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pgBackupVcRowStatus.setStatus('current')
if mibBuilder.loadTexts: pgBackupVcRowStatus.setDescription('This object is used to create, delete or modify a row in this table.')
pgBackupVcPrimaryAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBackupVcPrimaryAdminStatus.setStatus('current')
if mibBuilder.loadTexts: pgBackupVcPrimaryAdminStatus.setDescription('This object is used to restore the PVC back from the secondary PVC to the primary PVC.')
pgBackupVcPrimaryOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 3, 1, 9), AtmVorXOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBackupVcPrimaryOperStatus.setStatus('current')
if mibBuilder.loadTexts: pgBackupVcPrimaryOperStatus.setDescription('The current operational status of the cross-connect over the primary PVC.')
pgBackupVcSecondaryOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 3, 1, 10), AtmVorXOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBackupVcSecondaryOperStatus.setStatus('current')
if mibBuilder.loadTexts: pgBackupVcSecondaryOperStatus.setDescription('The current operational status of the cross-connect over the secondary PVC.')
pgBackupVcSwitchTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 19, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBackupVcSwitchTimes.setStatus('current')
if mibBuilder.loadTexts: pgBackupVcSwitchTimes.setDescription('The number of times when the PVC is switched from the primary PVC to the secondary PVC.')
mibBuilder.exportSymbols("DSLAM-BACKUP-MIB", pgBackupVpEntry=pgBackupVpEntry, pgBackupVcSecondaryVpi=pgBackupVcSecondaryVpi, pgBackupVpPrimaryIfIndex=pgBackupVpPrimaryIfIndex, pgBackupVcPrimaryIfIndex=pgBackupVcPrimaryIfIndex, pgBackupVpSwitchTimes=pgBackupVpSwitchTimes, pgBackupVcPrimaryAdminStatus=pgBackupVcPrimaryAdminStatus, pgBackupVcSecondaryVci=pgBackupVcSecondaryVci, pgBackupVpPrimaryAdminStatus=pgBackupVpPrimaryAdminStatus, PYSNMP_MODULE_ID=pgBackupMIB, pgBackupMIB=pgBackupMIB, pgBackupVpSecondaryIfIndex=pgBackupVpSecondaryIfIndex, pgBackupVpPrimaryOperStatus=pgBackupVpPrimaryOperStatus, pgBackupVpSecondaryOperStatus=pgBackupVpSecondaryOperStatus, pgBackupVpSecondaryVpi=pgBackupVpSecondaryVpi, pgBackupVpTable=pgBackupVpTable, pgBackupPortEntry=pgBackupPortEntry, pgBackupPortAdminStatus=pgBackupPortAdminStatus, pgBackupVcSecondaryIfIndex=pgBackupVcSecondaryIfIndex, pgBackupVpPrimaryVpi=pgBackupVpPrimaryVpi, pgBackupVcPrimaryVpi=pgBackupVcPrimaryVpi, pgBackupVcEntry=pgBackupVcEntry, pgBackupVcRowStatus=pgBackupVcRowStatus, pgBackupVcPrimaryOperStatus=pgBackupVcPrimaryOperStatus, pgBackupVpRowStatus=pgBackupVpRowStatus, pgBackupVcPrimaryVci=pgBackupVcPrimaryVci, pgBackupPortTable=pgBackupPortTable, pgBackupObjects=pgBackupObjects, pgBackupVcSecondaryOperStatus=pgBackupVcSecondaryOperStatus, pgBackupVcSwitchTimes=pgBackupVcSwitchTimes, pgBackupVcTable=pgBackupVcTable)
