#
# PySNMP MIB module CISCO-STACKMAKER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-STACKMAKER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:12:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, ModuleIdentity, TimeTicks, Bits, NotificationType, Gauge32, MibIdentifier, ObjectIdentity, Counter32, Unsigned32, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "ModuleIdentity", "TimeTicks", "Bits", "NotificationType", "Gauge32", "MibIdentifier", "ObjectIdentity", "Counter32", "Unsigned32", "iso", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoStackMakerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 59))
if mibBuilder.loadTexts: ciscoStackMakerMIB.setLastUpdated('9610311200Z')
if mibBuilder.loadTexts: ciscoStackMakerMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoStackMakerMIB.setContactInfo('Postal: Cisco Systems, Inc. 170 West Tasman Drive San Jose, CA 95134-1706 USA Tel: +1 408 526 4000 E-mail: cs-stacks@cisco.com')
if mibBuilder.loadTexts: ciscoStackMakerMIB.setDescription("The MIB module for Cisco Systems' StackMaker.")
ciscoStackMakerMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 59, 1))
ciscoStackMakerConf = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 59, 1, 1))
csmStackName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 59, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csmStackName.setStatus('current')
if mibBuilder.loadTexts: csmStackName.setDescription(' A descriptive string used by the network administrator one stack at any given time. If this entry is empty, the device is not a member of a stack. Changing the value of this object will move the device to a different stack. If the value is cleared, the device is no longer a member of any stack.')
csmClearStackTable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 59, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clearTable", 1), ("noClearTable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csmClearStackTable.setStatus('current')
if mibBuilder.loadTexts: csmClearStackTable.setDescription('This object is used to clear the csmStackTable with a single SNMP operation. The application will clear the table and re-write the table to accommodate new or modified table entries. Setting this object to noClearTable has no effect. The agent will always return the value of noClearTable when this object is read.')
csmStackTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 59, 1, 1, 3), )
if mibBuilder.loadTexts: csmStackTable.setStatus('current')
if mibBuilder.loadTexts: csmStackTable.setDescription("The table of IP addresses for the devices which are members of the stack. Individual entries can be added to the table to add devices in the stack either through SNMP Set operations or through the device's command line interface. However, the agent need not support deletion of individual entries, since the table is first cleared before any modifications are made, using the csmClearStackTable object. The agent will return the error badValue if an SNMP Set operation is attempted on an existing row. It is the responsibility of the network administrator to ensure that a device does not belong to more than one stack and to maintain referential integrity across devices. A device will take no action upon the information stored in this table other than to guarantee its persistence over device reboots.")
csmStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 59, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-STACKMAKER-MIB", "csmStackIndex"))
if mibBuilder.loadTexts: csmStackEntry.setStatus('current')
if mibBuilder.loadTexts: csmStackEntry.setDescription('An entry for each device which is member of the stack.')
csmStackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 59, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: csmStackIndex.setStatus('current')
if mibBuilder.loadTexts: csmStackIndex.setDescription('Index in the StackMaker table. Entries should be consecutive since updating this table is made by first clearing the table and reconfiguring it.')
csmStackIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 59, 1, 1, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csmStackIpAddress.setStatus('current')
if mibBuilder.loadTexts: csmStackIpAddress.setDescription('IP Address of a stack member.')
ciscoStackMakerMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 59, 3))
ciscoStackMakerMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 59, 3, 1))
ciscoStackMakerMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 59, 3, 2))
ciscoStackMakerMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 59, 3, 1, 1)).setObjects(("CISCO-STACKMAKER-MIB", "ciscoStackMakerBasicGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoStackMakerMIBCompliance = ciscoStackMakerMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoStackMakerMIBCompliance.setDescription('The compliance statement for Cisco Systems entities which implement the StackMaker model. Every Cisco stackable device must implement the StackMaker MIB.')
ciscoStackMakerBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 59, 3, 2, 1)).setObjects(("CISCO-STACKMAKER-MIB", "csmStackName"), ("CISCO-STACKMAKER-MIB", "csmClearStackTable"), ("CISCO-STACKMAKER-MIB", "csmStackIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoStackMakerBasicGroup = ciscoStackMakerBasicGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoStackMakerBasicGroup.setDescription("A collection of objects providing identification for a Cisco Systems' entity which implements the StackMaker MIB.")
mibBuilder.exportSymbols("CISCO-STACKMAKER-MIB", ciscoStackMakerMIB=ciscoStackMakerMIB, PYSNMP_MODULE_ID=ciscoStackMakerMIB, ciscoStackMakerMIBCompliance=ciscoStackMakerMIBCompliance, ciscoStackMakerMIBCompliances=ciscoStackMakerMIBCompliances, csmStackTable=csmStackTable, ciscoStackMakerConf=ciscoStackMakerConf, ciscoStackMakerBasicGroup=ciscoStackMakerBasicGroup, ciscoStackMakerMIBObjects=ciscoStackMakerMIBObjects, csmStackIndex=csmStackIndex, csmStackName=csmStackName, csmStackEntry=csmStackEntry, ciscoStackMakerMIBConformance=ciscoStackMakerMIBConformance, csmStackIpAddress=csmStackIpAddress, csmClearStackTable=csmClearStackTable, ciscoStackMakerMIBGroups=ciscoStackMakerMIBGroups)
