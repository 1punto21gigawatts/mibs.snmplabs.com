#
# PySNMP MIB module BIANCA-BRICK-UPNP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-UPNP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:38:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
DisplayString, = mibBuilder.importSymbols("RFC1158-MIB", "DisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, Counter32, Counter64, Unsigned32, MibIdentifier, NotificationType, iso, IpAddress, Gauge32, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "Counter32", "Counter64", "Unsigned32", "MibIdentifier", "NotificationType", "iso", "IpAddress", "Gauge32", "ModuleIdentity", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
biboip = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5))
upnp = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5, 45))
upnpGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 10))
upnpGlobStatus = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 10, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 20, 30))).clone(namedValues=NamedValues(("enabled", 10), ("restricted", 20), ("disabled", 30))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upnpGlobStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upnpGlobStatus.setDescription('This object specifies whether UPnP is enabled on the router. Possible values: enabled(10), -- UPnP enabled restricted(20), -- UPnP mapping requests for client IP only disabled(30) -- UPnP disabled (default).')
upnpGlobTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 10, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5678)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upnpGlobTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: upnpGlobTcpPort.setDescription('The TCP port which is monitored by UPnP for HTTP requests received from UPnP clients.')
upnpGlobSsdpTtl = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 10, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upnpGlobSsdpTtl.setStatus('mandatory')
if mibBuilder.loadTexts: upnpGlobSsdpTtl.setDescription('The time-to-live value for SSDP packet transmitted on the LAN. If this object is set to 0, the default value specified in the ip MIB will be used instead.')
ipNatUPnPTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20), )
if mibBuilder.loadTexts: ipNatUPnPTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipNatUPnPTable.setDescription('This table specifies the IP addresses and port numbers for sessions requested from outside and authorized by a UPnP client. Entries in the table are created by UPnP clients.')
ipNatUPnPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20, 10), ).setIndexNames((0, "BIANCA-BRICK-UPNP-MIB", "ipNatUPnPIfIndex"), (0, "BIANCA-BRICK-UPNP-MIB", "ipNatUPnPProtocol"), (0, "BIANCA-BRICK-UPNP-MIB", "ipNatUPnPRemoteAddr"), (0, "BIANCA-BRICK-UPNP-MIB", "ipNatUPnPExtPort"))
if mibBuilder.loadTexts: ipNatUPnPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipNatUPnPEntry.setDescription('')
ipNatUPnPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20, 10, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatUPnPIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipNatUPnPIfIndex.setDescription('This object specifies the interface index, for which the table entry shall be valid.')
ipNatUPnPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20, 10, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 17))).clone(namedValues=NamedValues(("tcp", 6), ("udp", 17))).clone('tcp')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatUPnPProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ipNatUPnPProtocol.setDescription('This object specifies the protocol, for which the table entry shall be valid.')
ipNatUPnPRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20, 10, 30), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatUPnPRemoteAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipNatUPnPRemoteAddr.setDescription('This object specifies the IP address of the remote host initiating the connection. An incoming call can only be accepted if the IP adress of the remote host initiating the connection is the one specified by this object. If this object is set to 0.0.0.0, the table entry will be valid for any remote host.')
ipNatUPnPExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20, 10, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatUPnPExtPort.setStatus('mandatory')
if mibBuilder.loadTexts: ipNatUPnPExtPort.setDescription('This object specifies the destination port number for incoming calls. An incoming call can only be accepted if the destination port is the one specified by this object. If this object is set to -1, the entry is valid for all port numbers.')
ipNatUPnPIntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20, 10, 50), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatUPnPIntAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipNatUPnPIntAddr.setDescription('This object specifies the internal target host IP address for incoming calls matching the table entry. An incoming call matching this entry will be routed to the internal server specified by this object.')
ipNatUPnPIntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20, 10, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatUPnPIntPort.setStatus('mandatory')
if mibBuilder.loadTexts: ipNatUPnPIntPort.setDescription('This object specifies the internal target host port-number for incoming calls matching the table entry.')
ipNatUPnPLeaseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20, 10, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5184000)).clone(3600)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatUPnPLeaseDuration.setStatus('mandatory')
if mibBuilder.loadTexts: ipNatUPnPLeaseDuration.setDescription('This object specifies a lease duration in seconds. The entry is discarded at the end of this time. If this object is set to 0, the lease duration is infinite, and the entry will have to be explicitely deleted by a UPnP client.')
ipNatUPnPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20, 10, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 20, 30))).clone(namedValues=NamedValues(("delete", 10), ("enabled", 20), ("disabled", 30))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatUPnPStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipNatUPnPStatus.setDescription('This object specifies whether this entry is currently enabled or disabled.')
ipNatUPnPDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20, 10, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatUPnPDescription.setStatus('mandatory')
if mibBuilder.loadTexts: ipNatUPnPDescription.setDescription('This object specifies an optional description for this entry.')
upnpIfTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 30), )
if mibBuilder.loadTexts: upnpIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: upnpIfTable.setDescription('This table specifies how various interfaces are handled by UPnP. Entries in the table are created and deleted by the system.')
upnpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 30, 10), ).setIndexNames((0, "BIANCA-BRICK-UPNP-MIB", "upnpIfIndex"))
if mibBuilder.loadTexts: upnpIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upnpIfEntry.setDescription('An entry in the upnpIfTable.')
upnpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 30, 10, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upnpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upnpIfIndex.setDescription('This object specifies the interface index, for which the table entry shall be valid.')
upnpIfClientRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 30, 10, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 20))).clone(namedValues=NamedValues(("enabled", 10), ("disabled", 20))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upnpIfClientRequests.setStatus('mandatory')
if mibBuilder.loadTexts: upnpIfClientRequests.setDescription('This object specifies whether UPnP accepts client requests received through this interface. Possible values: enabled(10) -- UPnP client requests enabled disabled(20) -- UPnP client requests disabled (default).')
upnpIfUPnPControlled = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 30, 10, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 20))).clone(namedValues=NamedValues(("enabled", 10), ("disabled", 20))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upnpIfUPnPControlled.setStatus('mandatory')
if mibBuilder.loadTexts: upnpIfUPnPControlled.setDescription('This object specifies if this interface can be controlled through UPnP requests. Possible values: enabled(10) -- UPnP control of the interface enabled disabled(20) -- UPnP control of the interface disabled (default).')
mibBuilder.exportSymbols("BIANCA-BRICK-UPNP-MIB", ipNatUPnPIfIndex=ipNatUPnPIfIndex, upnp=upnp, upnpGlobSsdpTtl=upnpGlobSsdpTtl, ipNatUPnPIntPort=ipNatUPnPIntPort, ipNatUPnPRemoteAddr=ipNatUPnPRemoteAddr, biboip=biboip, ipNatUPnPProtocol=ipNatUPnPProtocol, upnpIfTable=upnpIfTable, upnpIfIndex=upnpIfIndex, upnpIfEntry=upnpIfEntry, ipNatUPnPStatus=ipNatUPnPStatus, bintec=bintec, ipNatUPnPLeaseDuration=ipNatUPnPLeaseDuration, ipNatUPnPDescription=ipNatUPnPDescription, upnpIfClientRequests=upnpIfClientRequests, upnpGlobTcpPort=upnpGlobTcpPort, ipNatUPnPExtPort=ipNatUPnPExtPort, ipNatUPnPIntAddr=ipNatUPnPIntAddr, bibo=bibo, upnpGlobals=upnpGlobals, ipNatUPnPEntry=ipNatUPnPEntry, upnpIfUPnPControlled=upnpIfUPnPControlled, upnpGlobStatus=upnpGlobStatus, ipNatUPnPTable=ipNatUPnPTable)
