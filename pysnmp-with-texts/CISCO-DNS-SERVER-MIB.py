#
# PySNMP MIB module CISCO-DNS-SERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DNS-SERVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:55:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Gauge32, Bits, NotificationType, Unsigned32, Counter32, iso, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, Integer32, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "NotificationType", "Unsigned32", "Counter32", "iso", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "Integer32", "Counter64", "MibIdentifier")
TimeInterval, TextualConvention, TimeStamp, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "TextualConvention", "TimeStamp", "DisplayString")
ciscoDnsServerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 405))
ciscoDnsServerMIB.setRevisions(('2005-03-01 00:00', '2004-02-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDnsServerMIB.setRevisionsDescriptions(('Updated to add new DNS counters.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoDnsServerMIB.setLastUpdated('200503010000Z')
if mibBuilder.loadTexts: ciscoDnsServerMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoDnsServerMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-dns-mib@cisco.com')
if mibBuilder.loadTexts: ciscoDnsServerMIB.setDescription("The MIB module for entities implementing the server side of the Domain Name System (DNS) protocol. P. Mockapetris, 'Domain names - implementation and specification', RFC 1035, November 1987 Descriptions of acronyms and definitions: Reporting The interval in seconds over which interval the server last calculated the sample interval statistics RR Resource Record for DNS AXFR Full zone transfer IXFR Incremental zone transfer M.Ohta, 'Incremental Zone Transfer in DNS', RFC-1995, August 1996 ACL DNS Access Control List RCODE Flag in a DNS packet P. Vixie, S. Thomson, Y. Rekhter, J. Bound, 'Dynamic Updates in the Domain Name System (DNS UPDATE)', RFC-2136, April 1997 The following are values of RCODE in the update packet: FORMERR The name server was unable to interpret the request due to a format error. REFUSED The name server refuses to perform the specified operation for policy or security reasons. TSIG A transaction signature of secret key transaction authentication for DNS. O. Gudmundsson, D. Eastlake 3rd, B. Wellington, 'Secret Key Transaction Authentication for DNS (TSIG)', RFC-2845, May 2000 The following are TSIG related error conditions, while processing incoming messages: BADTIME The time in the TSIG message is off the limit BADKEY The key in the TSIG message is not valid BADSIG The signature in the TSIG message is not valid HA High Availability DNS servers to eliminate single-point-of-failure for dynamic DNS updates")
class CDnsTime(TextualConvention, Unsigned32):
    reference = "R. Austein, J. Saperia, 'DNS Server MIB Extensions', RFC-1611, May 1994, DnsTime."
    description = 'DnsTime values are 32-bit unsigned integers which measure time in seconds.'
    status = 'current'
    displayHint = 'd'

cDnsServMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 405, 0))
cDnsServMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 405, 1))
cDnsServMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 405, 2))
cDnsServConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 1))
cDnsQueryStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 2))
cDnsQueryIntervalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 3))
cDnsPerfStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 4))
cDnsPerfIntervalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 5))
cDnsSecurityStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 6))
cDnsSecurityIntervalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 7))
cDnsErrorStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 8))
cDnsErrorIntervalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 9))
cDnsMaxCounterStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 10))
cDnsMaxCounterIntervalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 11))
cDnsHaStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12))
cDnsHaIntervalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13))
cDnsServConfigImplementIdent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsServConfigImplementIdent.setReference("R. Austein, J. Saperia, 'DNS Server MIB Extensions', RFC-1611, May 1994, dnsServConfigImplementIdent.")
if mibBuilder.loadTexts: cDnsServConfigImplementIdent.setStatus('current')
if mibBuilder.loadTexts: cDnsServConfigImplementIdent.setDescription("The implementation identification string for the DNS server software in use on the system, for example; `FNS-2.1'")
cDnsServConfigRecurs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("available", 1), ("restricted", 2), ("unavailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDnsServConfigRecurs.setReference("R. Austein, J. Saperia, 'DNS Server MIB Extensions', RFC-1611, May 1994, dnsServConfigRecurs.")
if mibBuilder.loadTexts: cDnsServConfigRecurs.setStatus('current')
if mibBuilder.loadTexts: cDnsServConfigRecurs.setDescription('This represents the recursion services offered by this name server. The values that can be read are: available(1) - performs recursion on requests from clients. restricted(2) - recursion is performed on requests only from certain clients, for example; clients on an access control list. unavailable(3) - recursion is not available.')
cDnsServConfigUpTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 1, 3), CDnsTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsServConfigUpTime.setReference("R. Austein, J. Saperia, 'DNS Server MIB Extensions', RFC-1611, May 1994, dnsServConfigUpTime.")
if mibBuilder.loadTexts: cDnsServConfigUpTime.setStatus('current')
if mibBuilder.loadTexts: cDnsServConfigUpTime.setDescription('If the server has a persistent state (e.g., a process), this value will be the time elapsed since it started. For software without persistent state, this value will be zero.')
cDnsServConfigResetTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 1, 4), CDnsTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsServConfigResetTime.setReference("R. Austein, J. Saperia, 'DNS Server MIB Extensions', RFC-1611, May 1994, dnsServConfigResetTime.")
if mibBuilder.loadTexts: cDnsServConfigResetTime.setStatus('current')
if mibBuilder.loadTexts: cDnsServConfigResetTime.setDescription("If the server has a persistent state (e.g., a process) and supports a `reset' operation (e.g., can be told to re-read configuration files), this value will be the time elapsed since the last time the name server was `reset.' For software that does not have persistence or does not support a `reset' operation, this value will be zero.")
cDnsServConfigReset = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("initializing", 3), ("running", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDnsServConfigReset.setReference("R. Austein, J. Saperia, 'DNS Server MIB Extensions', RFC-1611, May 1994, dnsServConfigReset.")
if mibBuilder.loadTexts: cDnsServConfigReset.setStatus('current')
if mibBuilder.loadTexts: cDnsServConfigReset.setDescription('Status/action object to reinitialize any persistant name server state. When set to reset(2), any persistant name server state (such as a process) is reinitialized as if the name server had just been started. This value will never be returned by a read operation. When read, one of the following values will be returned: other(1) - server in some unknown state; initializing(3) - server (re)initializing; running(4) - server currently running.')
cDnsServConfigIntervalSample = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 1, 6), TimeInterval()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDnsServConfigIntervalSample.setStatus('current')
if mibBuilder.loadTexts: cDnsServConfigIntervalSample.setDescription('Configures the sample time for the various interval counters.')
cDnsQueryAuthAnswers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryAuthAnswers.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryAuthAnswers.setDescription('Number of queries which were authoritatively answered.')
cDnsQueryAuthNoNames = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryAuthNoNames.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryAuthNoNames.setDescription("Number of queries for which `authoritative no such name' responses were made.")
cDnsQueryAuthNoDataResps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryAuthNoDataResps.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryAuthNoDataResps.setDescription("Number of queries for which `authoritative no such data' (empty answer) responses were made.")
cDnsQueryReferrals = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryReferrals.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryReferrals.setDescription('Number of requests that were referred to other servers.')
cDnsQueryNonAuthAnswers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryNonAuthAnswers.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryNonAuthAnswers.setDescription('Number of queries which were non-authoritatively answered (from cached data).')
cDnsQueryNonAuthNoDataResps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryNonAuthNoDataResps.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryNonAuthNoDataResps.setDescription('Number of queries which were non-authoritatively answered with no data.')
cDnsQueryRelNameRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryRelNameRequests.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryRelNameRequests.setDescription('Number of requests received by the server for names that are only one label long (i.e. in text form - no internal dots).')
cDnsQueryLameDelegations = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryLameDelegations.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryLameDelegations.setDescription('Number of query lame delegations.')
cDnsQueryMemCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryMemCacheHits.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryMemCacheHits.setDescription('Number of mem-cache lookup hits.')
cDnsQueryMemCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryMemCacheMisses.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryMemCacheMisses.setDescription('Number of mem-cache lookup misses.')
cDnsQueryMemCacheWrites = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryMemCacheWrites.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryMemCacheWrites.setDescription('Number of mem-cache writes.')
cDnsQueryRefusals = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryRefusals.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryRefusals.setDescription('Number of queries refused.')
cDnsQueryIntAuthAnswers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryIntAuthAnswers.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryIntAuthAnswers.setDescription('Number of queries which were authoritatively answered during reporting interval.')
cDnsQueryIntAuthNoNames = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryIntAuthNoNames.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryIntAuthNoNames.setDescription("Number of queries for which `authoritative no such name' responses were made during reporting interval.")
cDnsQueryIntAuthNoDataResps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 3, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryIntAuthNoDataResps.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryIntAuthNoDataResps.setDescription("Number of queries for which `authoritative no such data' (empty answer) responses were made during reporting interval.")
cDnsQueryIntReferrals = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 3, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryIntReferrals.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryIntReferrals.setDescription('Number of requests that were referred to other servers during reporting interval.')
cDnsQueryIntNonAuthAnswers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 3, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryIntNonAuthAnswers.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryIntNonAuthAnswers.setDescription('Number of queries which were non-authoritatively answered (from cached data) during reporting interval.')
cDnsQueryIntNonAuthNoDataResps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryIntNonAuthNoDataResps.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryIntNonAuthNoDataResps.setDescription('Number of queries which were non-authoritatively answered with no data during reporting interval.')
cDnsQueryIntRelNameRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 3, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryIntRelNameRequests.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryIntRelNameRequests.setDescription('Number of requests received by the server for names that are only one label long (i.e. in text form - no internal dots) during reporting interval.')
cDnsQueryIntLameDelegations = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 3, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryIntLameDelegations.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryIntLameDelegations.setDescription('Number of query lame delegations during reporting interval.')
cDnsQueryIntMemCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 3, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryIntMemCacheHits.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryIntMemCacheHits.setDescription('Number of mem-cache lookup hits during reporting interval.')
cDnsQueryIntMemCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 3, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryIntMemCacheMisses.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryIntMemCacheMisses.setDescription('Number of mem-cache lookup misses during reporting interval.')
cDnsQueryIntMemCacheWrites = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 3, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryIntMemCacheWrites.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryIntMemCacheWrites.setDescription('Number of mem-cache writes during reporting interval.')
cDnsQueryIntRefusals = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryIntRefusals.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryIntRefusals.setDescription('Number of queries refused during reporting interval.')
cDnsQueryIntSampleTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 3, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryIntSampleTime.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryIntSampleTime.setDescription('The time stamp of last sample.')
cDnsQueryIntSampleInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 3, 14), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsQueryIntSampleInterval.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryIntSampleInterval.setDescription('The interval in seconds over which the server last calculated the sample interval statistics. This is the configured reporting interval and the statistics are reset since the last cDnsQueryIntSampleTime.')
cDnsPerfUpdateRRs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfUpdateRRs.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfUpdateRRs.setDescription("Total number of RR's added and deleted.")
cDnsPerfUpdatePkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfUpdatePkts.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfUpdatePkts.setDescription('Total number of update packets successfully processed.')
cDnsPerfOutboundIxfrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfOutboundIxfrs.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfOutboundIxfrs.setDescription('Total number of successful outbound incremental transfers.')
cDnsPerfInboundIxfrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfInboundIxfrs.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfInboundIxfrs.setDescription('Total number of successful inbound incremental transfers.')
cDnsPerfFullRespIxfrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfFullRespIxfrs.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfFullRespIxfrs.setDescription('Total number of outbound full zone transfers in response to IXFR requests.')
cDnsPerfOutboundAxfrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfOutboundAxfrs.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfOutboundAxfrs.setDescription('Total number of successful outbound full zone transfers.')
cDnsPerfInboundAxfrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfInboundAxfrs.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfInboundAxfrs.setDescription('Total number of successful inbound AXFRs.')
cDnsPerfQueries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfQueries.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfQueries.setDescription('Total number of queries responded to.')
cDnsPerfOutboundAtLimitXfrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfOutboundAtLimitXfrs.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfOutboundAtLimitXfrs.setDescription('Total number of occasions that outbound transfers reached the concurrent limit.')
cDnsPerfInboundAtLimitXfrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfInboundAtLimitXfrs.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfInboundAtLimitXfrs.setDescription('Total number of occasions that inbound transfers reached the concurrent limit.')
cDnsPerfOutboundNotifies = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfOutboundNotifies.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfOutboundNotifies.setDescription('Total number of outbound notifies.')
cDnsPerfInboundNotifies = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfInboundNotifies.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfInboundNotifies.setDescription('Total number of inbound notifies.')
cDnsPerfIntUpdateRRs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 5, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfIntUpdateRRs.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfIntUpdateRRs.setDescription("Number of RR's added and deleted during reporting interval.")
cDnsPerfIntUpdatePkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 5, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfIntUpdatePkts.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfIntUpdatePkts.setDescription('Number of update packets successfully processed during reporting interval.')
cDnsPerfIntOutboundIxfrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 5, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfIntOutboundIxfrs.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfIntOutboundIxfrs.setDescription('Number of successful outbound incremental transfers during reporting interval.')
cDnsPerfIntInboundIxfrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 5, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfIntInboundIxfrs.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfIntInboundIxfrs.setDescription('Number of successful inbound incremental transfers during reporting interval.')
cDnsPerfIntFullRespIxfrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 5, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfIntFullRespIxfrs.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfIntFullRespIxfrs.setDescription('Number of outbound full zone transfers in response to IXFR requests during reporting interval.')
cDnsPerfIntOutboundAxfrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 5, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfIntOutboundAxfrs.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfIntOutboundAxfrs.setDescription('Number of successful outbound full zone transfers during reporting interval.')
cDnsPerfIntInboundAxfrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 5, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfIntInboundAxfrs.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfIntInboundAxfrs.setDescription('Number of successful inbound AXFRs during reporting interval.')
cDnsPerfIntQueries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 5, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfIntQueries.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfIntQueries.setDescription('Number of queries responded to during reporting interval.')
cDnsPerfIntOutboundAtLimitXfrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 5, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfIntOutboundAtLimitXfrs.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfIntOutboundAtLimitXfrs.setDescription('Number of occasions that outbound transfers reached the concurrent limit during reporting interval.')
cDnsPerfIntInboundAtLimitXfrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 5, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfIntInboundAtLimitXfrs.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfIntInboundAtLimitXfrs.setDescription('Number of occasions that inbound transfers reached the concurrent limit during reporting interval.')
cDnsPerfIntOutboundNotifies = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 5, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfIntOutboundNotifies.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfIntOutboundNotifies.setDescription('Number of outbound notifies during reporting interval.')
cDnsPerfIntInboundNotifies = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 5, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfIntInboundNotifies.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfIntInboundNotifies.setDescription('Number of inbound notifies during reporting interval.')
cDnsPerfIntSampleTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 5, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfIntSampleTime.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfIntSampleTime.setDescription('The time stamp of last sample.')
cDnsPerfIntSampleInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 5, 14), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsPerfIntSampleInterval.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfIntSampleInterval.setDescription('The interval in seconds over which the server last calculated the sample interval statistics. This is the configured reporting interval and the statistics are reset since the last cDnsQueryIntSampleTime.')
cDnsSecurityRcvdTsigPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityRcvdTsigPackets.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityRcvdTsigPackets.setDescription('Total number of packets with a TSIG RR that are processed.')
cDnsSecurityDetecTsigBadTimes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityDetecTsigBadTimes.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityDetecTsigBadTimes.setDescription('Returns BADTIME error code if value of bad timestamp in TSIG is detected in an incoming packet.')
cDnsSecurityDetectTsigBadKeys = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityDetectTsigBadKeys.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityDetectTsigBadKeys.setDescription('Returns BADKEY error code if value of bad keyname in TSIG is detected in an incoming packet.')
cDnsSecurityDetectTsigBadSigs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityDetectTsigBadSigs.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityDetectTsigBadSigs.setDescription('Returns BADSIG error code if value of bad signature in TSIG is detected in an incoming packet.')
cDnsSecurityRcvdTsigBadTimes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityRcvdTsigBadTimes.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityRcvdTsigBadTimes.setDescription('Total number of BADTIME errors received after sending a TSIG.')
cDnsSecurityRcvdTsigBadKeys = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityRcvdTsigBadKeys.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityRcvdTsigBadKeys.setDescription('Total number of BADKEY errors received after sending a TSIG.')
cDnsSecurityRcvdTsigBadSigs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityRcvdTsigBadSigs.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityRcvdTsigBadSigs.setDescription('Total number of BADSIG errors received after sending a TSIG.')
cDnsSecurityUnauthXferReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityUnauthXferReqs.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityUnauthXferReqs.setDescription('Total number of ACL authorization failures if zone transfer restriction has been enabled.')
cDnsSecurityUnauthUpdateReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityUnauthUpdateReqs.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityUnauthUpdateReqs.setDescription('Total number of updates which result in ACL authorization failure, or which target zones which do not support updates.')
cDnsSecurityRestrictQueryAcls = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityRestrictQueryAcls.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityRestrictQueryAcls.setDescription('Total number of queries to be restricted by the DNS server through the global or zone Access Control List.')
cDnsSecurityIntRcvdTsigPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 7, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityIntRcvdTsigPackets.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityIntRcvdTsigPackets.setDescription('Number of packets with a TSIG RR that are processed during reporting interval.')
cDnsSecurityIntDetecTsigBadTimes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 7, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityIntDetecTsigBadTimes.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityIntDetecTsigBadTimes.setDescription('Value of bad timestamp in TSIG in an incoming packet during reporting interval.')
cDnsSecurityIntDetectTsigBadKeys = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 7, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityIntDetectTsigBadKeys.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityIntDetectTsigBadKeys.setDescription('Value of bad keyname in TSIG in an incoming packet during reporting interval.')
cDnsSecurityIntDetectTsigBadSigs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 7, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityIntDetectTsigBadSigs.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityIntDetectTsigBadSigs.setDescription('Value of bad signature in TSIG in an incoming packet during reporting interval.')
cDnsSecurityIntRcvdTsigBadTimes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 7, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityIntRcvdTsigBadTimes.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityIntRcvdTsigBadTimes.setDescription('Number of BADTIME errors received after sending a TSIG during reporting interval.')
cDnsSecurityIntRcvdTsigBadKeys = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 7, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityIntRcvdTsigBadKeys.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityIntRcvdTsigBadKeys.setDescription('Number of BADKEY errors received after sending a TSIG during reporting interval.')
cDnsSecurityIntRcvdTsigBadSigs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 7, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityIntRcvdTsigBadSigs.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityIntRcvdTsigBadSigs.setDescription('Number of BADSIG errors received after sending a TSIG during reporting interval.')
cDnsSecurityIntUnauthXferReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 7, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityIntUnauthXferReqs.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityIntUnauthXferReqs.setDescription('Number of ACL authorization failures if zone transfer restriction has been enabled during reporting interval.')
cDnsSecurityIntUnauthUpdateReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 7, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityIntUnauthUpdateReqs.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityIntUnauthUpdateReqs.setDescription('Number of updates which result in ACL not support updates during reporting interval.')
cDnsSecurityIntRestrictQueryAcls = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 7, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityIntRestrictQueryAcls.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityIntRestrictQueryAcls.setDescription('Number of queries to be restricted by the DNS server through the global or zone Access Control List during reporting interval.')
cDnsSecurityIntSampleTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 7, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityIntSampleTime.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityIntSampleTime.setDescription('The time stamp of last sample.')
cDnsSecurityIntSampleInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 7, 12), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsSecurityIntSampleInterval.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityIntSampleInterval.setDescription('The interval in seconds over which the server last calculated the sample interval statistics. This is the configured reporting interval and the statistics are reset since the last cDnsSecurityIntSampleTime.')
cDnsErrorUpdateErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorUpdateErrors.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorUpdateErrors.setDescription('Total number of updates resulting in errors or failures.')
cDnsErrorIxfrInErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorIxfrInErrors.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorIxfrInErrors.setDescription('Total in-bound IXFR errors.')
cDnsErrorIxfrOutErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorIxfrOutErrors.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorIxfrOutErrors.setDescription('Total IXFR error responses sent.')
cDnsErrorAxfrInErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 8, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorAxfrInErrors.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorAxfrInErrors.setDescription('Total in-bound AXFR errors.')
cDnsErrorAxfrOutErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 8, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorAxfrOutErrors.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorAxfrOutErrors.setDescription('Total AXFR error responses sent.')
cDnsErrorSentTotalErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 8, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorSentTotalErrors.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorSentTotalErrors.setDescription('Total number of requests the server answered with errors.')
cDnsErrorSentFormatErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorSentFormatErrors.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorSentFormatErrors.setDescription('Total number of requests received which were unparseable.')
cDnsErrorSentOtherErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorSentOtherErrors.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorSentOtherErrors.setDescription('Total number of requests which were aborted for other local server errors.')
cDnsErrorSentRefusalErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorSentRefusalErrors.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorSentRefusalErrors.setDescription('Total number of requests which resulted in REFUSED.')
cDnsErrorRcvdFormatErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorRcvdFormatErrors.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorRcvdFormatErrors.setDescription('Total number of responses received with FORMERR status.')
cDnsErrorIntUpdateErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 9, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorIntUpdateErrors.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorIntUpdateErrors.setDescription('Total number of updates resulting in errors or failures.')
cDnsErrorIntIxfrInErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 9, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorIntIxfrInErrors.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorIntIxfrInErrors.setDescription('Total in-bound IXFR errors.')
cDnsErrorIntIxfrOutErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 9, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorIntIxfrOutErrors.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorIntIxfrOutErrors.setDescription('Total IXFR error responses sent.')
cDnsErrorIntAxfrInErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 9, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorIntAxfrInErrors.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorIntAxfrInErrors.setDescription('Total in-bound AXFR errors.')
cDnsErrorIntAxfrOutErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 9, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorIntAxfrOutErrors.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorIntAxfrOutErrors.setDescription('Total AXFR error responses sent.')
cDnsErrorIntSentTotalErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 9, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorIntSentTotalErrors.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorIntSentTotalErrors.setDescription('Total number of requests the server answered with errors.')
cDnsErrorIntSentFormatErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 9, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorIntSentFormatErrors.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorIntSentFormatErrors.setDescription('Total number of requests received which were unparseable.')
cDnsErrorIntSentOtherErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 9, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorIntSentOtherErrors.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorIntSentOtherErrors.setDescription('Total number of requests which were aborted for other local server errors.')
cDnsErrorIntSentRefusalErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 9, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorIntSentRefusalErrors.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorIntSentRefusalErrors.setDescription('Total number of requests which resulted in REFUSED.')
cDnsErrorIntRcvdFormatErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 9, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorIntRcvdFormatErrors.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorIntRcvdFormatErrors.setDescription('Total number of responses received with FORMERR status.')
cDnsErrorIntSampleTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 9, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorIntSampleTime.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorIntSampleTime.setDescription('The time stamp of last sample.')
cDnsErrorIntSampleInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 9, 12), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsErrorIntSampleInterval.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorIntSampleInterval.setDescription('The interval in seconds over which the server last calculated the sample interval statistics. This is the configured reporting interval and the statistics are reset since the last cDnsErrorIntSampleTime.')
cDnsMaxCntrConcurXfrsInCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsMaxCntrConcurXfrsInCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCntrConcurXfrsInCnts.setDescription('Maximum number of concurrent threads processing inbound transfers.')
cDnsMaxCntrConcurXfrsOutCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 10, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsMaxCntrConcurXfrsOutCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCntrConcurXfrsOutCnts.setDescription('Maximum number of concurrent threads processing outbound transfers.')
cDnsMaxCntrHaSvrNoRespTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 10, 3), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsMaxCntrHaSvrNoRespTime.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCntrHaSvrNoRespTime.setDescription('Total time in seconds, where the partner of the server was not responding.')
cDnsMaxCntrHaSvrMaxNoRespTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 10, 4), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsMaxCntrHaSvrMaxNoRespTime.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCntrHaSvrMaxNoRespTime.setDescription('Maximum contiguous time in seconds, where the partner of the server was not responding.')
cDnsMaxCntrHaBatchLimitCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsMaxCntrHaBatchLimitCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCntrHaBatchLimitCnts.setDescription('Number of occurrences where maximum batch count is reached in active server.')
cDnsMaxCntrHaRRPendListCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsMaxCntrHaRRPendListCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCntrHaRRPendListCnts.setDescription('Maximum number of RRs in the pending list waiting acknowledgement from the backup server.')
cDnsMaxCntrHaRRActiveListCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 10, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsMaxCntrHaRRActiveListCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCntrHaRRActiveListCnts.setDescription('Maximum number of RRs in the active list waiting to be sent to the backup server.')
cDnsMaxCntrHaPersEditListCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 10, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsMaxCntrHaPersEditListCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCntrHaPersEditListCnts.setDescription('Maximum number of names persisted in the edits list db.')
cDnsMaxCntrHaUpdLatencyMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 10, 9), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsMaxCntrHaUpdLatencyMax.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCntrHaUpdLatencyMax.setDescription('Maximum DNS update latency in seconds. Latency is measured as the time an update remains in the pending list.')
cDnsMaxCntrIntConcurXfrsInCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 11, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsMaxCntrIntConcurXfrsInCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCntrIntConcurXfrsInCnts.setDescription('Maximum number of concurrent threads processing inbound transfers during reporting interval.')
cDnsMaxCntrIntConcurXfrsOutCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 11, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsMaxCntrIntConcurXfrsOutCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCntrIntConcurXfrsOutCnts.setDescription('Maximum number of concurrent threads processing outbound transfers during reporting interval.')
cDnsMaxCntrIntHaSvrNoRespTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 11, 3), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsMaxCntrIntHaSvrNoRespTime.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCntrIntHaSvrNoRespTime.setDescription('Total time in seconds, where the partner of the server was not responding during reporting interval.')
cDnsMaxCntrIntHaSvrMaxNoRespTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 11, 4), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsMaxCntrIntHaSvrMaxNoRespTime.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCntrIntHaSvrMaxNoRespTime.setDescription('Maximum time in seconds, where the partner of the server was not responding during reporting interval.')
cDnsMaxCntrIntHaBatchLimitCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 11, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsMaxCntrIntHaBatchLimitCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCntrIntHaBatchLimitCnts.setDescription('Number of occurrences where maximum batch count is reached in active server during reporting interval.')
cDnsMaxCntrIntHaRRPendListCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 11, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsMaxCntrIntHaRRPendListCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCntrIntHaRRPendListCnts.setDescription('Maximum number of RRs in the pending list waiting acknowledgement from the backup server during reporting interval.')
cDnsMaxCntrIntHaRRActiveListCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 11, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsMaxCntrIntHaRRActiveListCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCntrIntHaRRActiveListCnts.setDescription('Maximum number of RRs in the active list waiting to be sent to the backup server during reporting interval.')
cDnsMaxCntrIntHaPersEditListCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 11, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsMaxCntrIntHaPersEditListCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCntrIntHaPersEditListCnts.setDescription('Maximum number of names persisted in the edits list db during reporting interval.')
cDnsMaxCntrIntHaUpdLatencyMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 11, 9), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsMaxCntrIntHaUpdLatencyMax.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCntrIntHaUpdLatencyMax.setDescription('Maximum DNS update latency in seconds during reporting interval. Latency is measured as the time an update remains in the pending list.')
cDnsMaxCntrIntSampleTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 11, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsMaxCntrIntSampleTime.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCntrIntSampleTime.setDescription('The time stamp of last sample.')
cDnsMaxCntrIntSampleInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 11, 11), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsMaxCntrIntSampleInterval.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCntrIntSampleInterval.setDescription('The interval in seconds over which the server last calculated the sample interval statistics. This is the configured reporting interval and the statistics are reset since the last cDnsMaxCntrIntSampleTime.')
cDnsHaCommInterruptedStates = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaCommInterruptedStates.setStatus('current')
if mibBuilder.loadTexts: cDnsHaCommInterruptedStates.setDescription('Total number of occurrences where the server enters the HA communication-interrupted state.')
cDnsHaPartnerDownStates = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaPartnerDownStates.setStatus('current')
if mibBuilder.loadTexts: cDnsHaPartnerDownStates.setDescription('Total of occurrences where the server enters the HA partner-down state.')
cDnsHaSyncs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaSyncs.setStatus('current')
if mibBuilder.loadTexts: cDnsHaSyncs.setDescription('Total of occurrences where the server enters the HA synchronization state.')
cDnsHaMsgConnectSentCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaMsgConnectSentCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaMsgConnectSentCnts.setDescription('Total number of HA connection establishment messages sent.')
cDnsHaMsgReconcileSentCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaMsgReconcileSentCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaMsgReconcileSentCnts.setDescription('Total number of HA zone reconciliation messages sent.')
cDnsHaMsgHeartBeatSentCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaMsgHeartBeatSentCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaMsgHeartBeatSentCnts.setDescription('Total number of HA heartbeat messages sent.')
cDnsHaMsgZoneSyncSentCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaMsgZoneSyncSentCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaMsgZoneSyncSentCnts.setDescription('Total number of HA zone synchronization messages sent.')
cDnsHaMsgRRSyncSentCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaMsgRRSyncSentCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaMsgRRSyncSentCnts.setDescription('Total number of HA rr-sync messages sent.')
cDnsHaMsgRRUpdateSentCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaMsgRRUpdateSentCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaMsgRRUpdateSentCnts.setDescription('Total number of HA rr-update messages sent.')
cDnsHaMsgResponseSentCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaMsgResponseSentCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaMsgResponseSentCnts.setDescription('Total number of HA response messages sent.')
cDnsHaMsgConnectRcvdCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaMsgConnectRcvdCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaMsgConnectRcvdCnts.setDescription('Total number of HA connection establishment messages received.')
cDnsHaMsgReconcileRcvdCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaMsgReconcileRcvdCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaMsgReconcileRcvdCnts.setDescription('Total number of HA zone reconciliation messages received.')
cDnsHaMsgHeartbeatRcvdCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaMsgHeartbeatRcvdCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaMsgHeartbeatRcvdCnts.setDescription('Total number of HA heartbeat messages received.')
cDnsHaMsgZoneSyncRcvdCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaMsgZoneSyncRcvdCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaMsgZoneSyncRcvdCnts.setDescription('Total number of HA zone synchronization messages received.')
cDnsHaMsgRRSyncRcvdCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaMsgRRSyncRcvdCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaMsgRRSyncRcvdCnts.setDescription('Total number of HA rr-sync messages received.')
cDnsHaMsgRRUpdateRcvdCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaMsgRRUpdateRcvdCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaMsgRRUpdateRcvdCnts.setDescription('Total number of HA rr-update messages received.')
cDnsHaMsgResponseRcvdCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaMsgResponseRcvdCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaMsgResponseRcvdCnts.setDescription('Total number of HA response messages received.')
cDnsHaHeartbeatTimeoutCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaHeartbeatTimeoutCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaHeartbeatTimeoutCnts.setDescription('Total number of HA heartbeat timeouts.')
cDnsHaUpdateRejectCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaUpdateRejectCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaUpdateRejectCnts.setDescription('Total number of HA DNS updates rejected by the server.')
cDnsHaResponseMismatchCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaResponseMismatchCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaResponseMismatchCnts.setDescription('Total number of HA responses reporting a mismatch error.')
cDnsHaResponseServFailCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaResponseServFailCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaResponseServFailCnts.setDescription('Total number of HA responses reporting a server failure error.')
cDnsHaRespInconsistentCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaRespInconsistentCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaRespInconsistentCnts.setDescription('Total number of HA responses reporting an inconsistent server state.')
cDnsHaRespUnknownCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaRespUnknownCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaRespUnknownCnts.setDescription('Total number of HA responses with an unknown message type.')
cDnsHaFullZoneResyncCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaFullZoneResyncCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaFullZoneResyncCnts.setDescription('Total number of zones requiring HA full-zone ??? resynchronization for nameset reconciliation. ')
cDnsHaUpdatePrivateReqCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaUpdatePrivateReqCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaUpdatePrivateReqCnts.setDescription('Total number of HA DNS updates received containing a private request RR.')
cDnsHaUpdatePrivateRespCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaUpdatePrivateRespCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaUpdatePrivateRespCnts.setDescription('Total number of HA DNS update responses sent containing a private response RR.')
cDnsHaSyncConflictCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaSyncConflictCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaSyncConflictCnts.setDescription('Total number of HA zones with name conflicts during nameset reconciliation.')
cDnsHaSyncDiscardNameCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaSyncDiscardNameCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaSyncDiscardNameCnts.setDescription('Total number of HA name conflicts where one nameset must be discarded to synchronize the zone.')
cDnsHaSyncMergeNameCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaSyncMergeNameCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaSyncMergeNameCnts.setDescription('Total number of HA name conflicts which the namesets can be merged to synchronize the zone. ')
cDnsHaUpdateLatencyAverage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 12, 30), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaUpdateLatencyAverage.setStatus('current')
if mibBuilder.loadTexts: cDnsHaUpdateLatencyAverage.setDescription('Average HA DNS update latency in seconds. Latency is measured as the time an update remains in the pending list.')
cDnsHaIntCommInterruptedStates = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntCommInterruptedStates.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntCommInterruptedStates.setDescription('Number of occurrences where the server enters the HA communication-interrupted state.')
cDnsHaIntPartnerDownStates = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntPartnerDownStates.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntPartnerDownStates.setDescription('Total of occurrences where the server enters the HA partner-down state during reporting interval.')
cDnsHaIntSyncs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntSyncs.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntSyncs.setDescription('Total of occurrences where the server enters the HA synchronization state during reporting interval.')
cDnsHaIntMsgConnectSentCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntMsgConnectSentCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntMsgConnectSentCnts.setDescription('Number of HA connection establishment messages sent during reporting interval.')
cDnsHaIntMsgReconcileSentCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntMsgReconcileSentCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntMsgReconcileSentCnts.setDescription('Number of HA zone reconciliation messages sent during reporting interval.')
cDnsHaIntMsgHeartBeatSentCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntMsgHeartBeatSentCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntMsgHeartBeatSentCnts.setDescription('Number of HA heartbeat messages sent during reporting interval.')
cDnsHaIntMsgZoneSyncSentCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntMsgZoneSyncSentCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntMsgZoneSyncSentCnts.setDescription('Number of HA zone synchronization messages sent during reporting interval.')
cDnsHaIntMsgRRSyncSentCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntMsgRRSyncSentCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntMsgRRSyncSentCnts.setDescription('Number of HA rr-sync messages sent during reporting interval.')
cDnsHaIntMsgRRUpdateSentCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntMsgRRUpdateSentCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntMsgRRUpdateSentCnts.setDescription('Number of HA rr-update messages sent during reporting interval.')
cDnsHaIntMsgResponseSentCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntMsgResponseSentCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntMsgResponseSentCnts.setDescription('Number of HA response messages sent during reporting interval.')
cDnsHaIntMsgConnectRcvdCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntMsgConnectRcvdCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntMsgConnectRcvdCnts.setDescription('Number of HA connection establishment messages received during reporting interval.')
cDnsHaIntMsgReconcileRcvdCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntMsgReconcileRcvdCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntMsgReconcileRcvdCnts.setDescription('Number of HA zone reconciliation messages received during reporting interval.')
cDnsHaIntMsgHeartbeatRcvdCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntMsgHeartbeatRcvdCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntMsgHeartbeatRcvdCnts.setDescription('Number of HA heartbeat messages received during reporting interval.')
cDnsHaIntMsgZoneSyncRcvdCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntMsgZoneSyncRcvdCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntMsgZoneSyncRcvdCnts.setDescription('Number of HA zone synchronization messages received during reporting interval.')
cDnsHaIntMsgRRSyncRcvdCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntMsgRRSyncRcvdCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntMsgRRSyncRcvdCnts.setDescription('Number of HA rr-sync messages received during reporting interval.')
cDnsHaIntMsgRRUpdateRcvdCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntMsgRRUpdateRcvdCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntMsgRRUpdateRcvdCnts.setDescription('Number of HA rr-update messages received during reporting interval.')
cDnsHaIntMsgResponseRcvdCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntMsgResponseRcvdCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntMsgResponseRcvdCnts.setDescription('Number of HA response messages received during reporting interval.')
cDnsHaIntHeartbeatTimeoutCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntHeartbeatTimeoutCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntHeartbeatTimeoutCnts.setDescription('Number of HA heartbeat timeouts during reporting interval.')
cDnsHaIntUpdateRejectCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntUpdateRejectCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntUpdateRejectCnts.setDescription('Number of HA DNS updates rejected by the server during reporting interval.')
cDnsHaIntResponseMismatchCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntResponseMismatchCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntResponseMismatchCnts.setDescription('Number of HA responses reporting a mismatch error during reporting interval.')
cDnsHaIntResponseServFailCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntResponseServFailCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntResponseServFailCnts.setDescription('Number of HA responses reporting a server failure error during reporting interval.')
cDnsHaIntRespInconsistentCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntRespInconsistentCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntRespInconsistentCnts.setDescription('Number of HA responses reporting an inconsistent server state during reporting interval.')
cDnsHaIntRespUnknownCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntRespUnknownCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntRespUnknownCnts.setDescription('Number of HA responses with an unknown message type during reporting interval.')
cDnsHaIntFullZoneResyncCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntFullZoneResyncCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntFullZoneResyncCnts.setDescription('Number of HA zones requiring full-zone resynchronization for nameset reconciliation during reporting interval.')
cDnsHaIntUpdatePrivateReqCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntUpdatePrivateReqCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntUpdatePrivateReqCnts.setDescription('Number of HA DNS updates received containing a private request RR during reporting interval.')
cDnsHaIntUpdatePrivateRespCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntUpdatePrivateRespCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntUpdatePrivateRespCnts.setDescription('Number of HA DNS update responses sent containing a private response RR during reporting interval.')
cDnsHaIntSyncConflictCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntSyncConflictCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntSyncConflictCnts.setDescription('Number of HA zones with name conflicts during nameset reconciliation during reporting interval.')
cDnsHaIntSyncDiscardNameCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntSyncDiscardNameCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntSyncDiscardNameCnts.setDescription('Number of HA name conflicts where one nameset must be discarded to synchronize the zone during reporting interval.')
cDnsHaIntSyncMergeNameCnts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntSyncMergeNameCnts.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntSyncMergeNameCnts.setDescription('Number of HA name conflicts which the namesets can be merged to synchronize the zone during reporting interval.')
cDnsHaIntUpdateLatencyAverage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 30), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntUpdateLatencyAverage.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntUpdateLatencyAverage.setDescription('Average HA DNS update latency in seconds during reporting interval. Latency is measured as the time an update remains in the pending list.')
cDnsHaIntSampleTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 31), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntSampleTime.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntSampleTime.setDescription('The time stamp of last HA sample.')
cDnsHaIntSampleInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 405, 1, 13, 32), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDnsHaIntSampleInterval.setStatus('current')
if mibBuilder.loadTexts: cDnsHaIntSampleInterval.setDescription('The interval in seconds over which the server last calculated the HA sample interval statistics. This is the configured reporting interval and the statistics are reset since the last cDnsHaIntSampleTime.')
cDnsServMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 405, 2, 1))
cDnsServMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 405, 2, 2))
cDnsServMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 405, 2, 1, 1)).setObjects(("CISCO-DNS-SERVER-MIB", "cDnsQueryStatsGroup"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryStatsIntervalGroup"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfStatsGroup"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfStatsIntervalGroup"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityStatsGroup"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityStatsIntervalGroup"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorStatsGroup"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorStatsIntervalGroup"), ("CISCO-DNS-SERVER-MIB", "cDnsMaxCounterStatsGroup"), ("CISCO-DNS-SERVER-MIB", "cDnsMaxCounterStatsIntervalGroup"), ("CISCO-DNS-SERVER-MIB", "cDnsHaStatsGroup"), ("CISCO-DNS-SERVER-MIB", "cDnsHaStatsIntervalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDnsServMIBCompliance = cDnsServMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cDnsServMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-DNS-SERVER-MIB.')
cDnsServConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 405, 2, 2, 1)).setObjects(("CISCO-DNS-SERVER-MIB", "cDnsServConfigImplementIdent"), ("CISCO-DNS-SERVER-MIB", "cDnsServConfigRecurs"), ("CISCO-DNS-SERVER-MIB", "cDnsServConfigUpTime"), ("CISCO-DNS-SERVER-MIB", "cDnsServConfigResetTime"), ("CISCO-DNS-SERVER-MIB", "cDnsServConfigReset"), ("CISCO-DNS-SERVER-MIB", "cDnsServConfigIntervalSample"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDnsServConfigGroup = cDnsServConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cDnsServConfigGroup.setDescription('A collection of objects providing basic configuration control of a DNS name server.')
cDnsQueryStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 405, 2, 2, 2)).setObjects(("CISCO-DNS-SERVER-MIB", "cDnsQueryAuthAnswers"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryAuthNoNames"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryAuthNoDataResps"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryReferrals"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryNonAuthAnswers"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryNonAuthNoDataResps"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryRelNameRequests"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryLameDelegations"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryMemCacheHits"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryMemCacheMisses"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryMemCacheWrites"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryRefusals"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDnsQueryStatsGroup = cDnsQueryStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryStatsGroup.setDescription('A collection of objects providing total query stats for a DNS name server.')
cDnsQueryStatsIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 405, 2, 2, 3)).setObjects(("CISCO-DNS-SERVER-MIB", "cDnsQueryIntAuthAnswers"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryIntAuthNoNames"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryIntAuthNoDataResps"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryIntReferrals"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryIntNonAuthAnswers"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryIntNonAuthNoDataResps"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryIntRelNameRequests"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryIntLameDelegations"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryIntMemCacheHits"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryIntMemCacheMisses"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryIntMemCacheWrites"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryIntRefusals"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryIntSampleTime"), ("CISCO-DNS-SERVER-MIB", "cDnsQueryIntSampleInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDnsQueryStatsIntervalGroup = cDnsQueryStatsIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: cDnsQueryStatsIntervalGroup.setDescription('A collection of objects providing interval query stats for a DNS name server.')
cDnsPerfStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 405, 2, 2, 4)).setObjects(("CISCO-DNS-SERVER-MIB", "cDnsPerfUpdateRRs"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfUpdatePkts"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfOutboundIxfrs"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfInboundIxfrs"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfFullRespIxfrs"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfOutboundAxfrs"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfInboundAxfrs"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfQueries"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfOutboundAtLimitXfrs"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfInboundAtLimitXfrs"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfOutboundNotifies"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfInboundNotifies"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDnsPerfStatsGroup = cDnsPerfStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfStatsGroup.setDescription('A collection of objects providing total performance stats for a DNS name server.')
cDnsPerfStatsIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 405, 2, 2, 5)).setObjects(("CISCO-DNS-SERVER-MIB", "cDnsPerfIntUpdateRRs"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfIntUpdatePkts"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfIntOutboundIxfrs"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfIntInboundIxfrs"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfIntFullRespIxfrs"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfIntOutboundAxfrs"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfIntInboundAxfrs"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfIntQueries"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfIntOutboundAtLimitXfrs"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfIntInboundAtLimitXfrs"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfIntOutboundNotifies"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfIntInboundNotifies"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfIntSampleTime"), ("CISCO-DNS-SERVER-MIB", "cDnsPerfIntSampleInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDnsPerfStatsIntervalGroup = cDnsPerfStatsIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: cDnsPerfStatsIntervalGroup.setDescription('A collection of objects providing interval performance stats for a DNS name server.')
cDnsSecurityStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 405, 2, 2, 6)).setObjects(("CISCO-DNS-SERVER-MIB", "cDnsSecurityRcvdTsigPackets"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityDetecTsigBadTimes"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityDetectTsigBadKeys"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityDetectTsigBadSigs"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityRcvdTsigBadTimes"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityRcvdTsigBadKeys"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityRcvdTsigBadSigs"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityUnauthXferReqs"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityUnauthUpdateReqs"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityRestrictQueryAcls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDnsSecurityStatsGroup = cDnsSecurityStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityStatsGroup.setDescription('A collection of objects providing total security stats for a DNS name server.')
cDnsSecurityStatsIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 405, 2, 2, 7)).setObjects(("CISCO-DNS-SERVER-MIB", "cDnsSecurityIntRcvdTsigPackets"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityIntDetecTsigBadTimes"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityIntDetectTsigBadKeys"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityIntDetectTsigBadSigs"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityIntRcvdTsigBadTimes"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityIntRcvdTsigBadKeys"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityIntRcvdTsigBadSigs"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityIntUnauthXferReqs"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityIntUnauthUpdateReqs"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityIntRestrictQueryAcls"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityIntSampleTime"), ("CISCO-DNS-SERVER-MIB", "cDnsSecurityIntSampleInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDnsSecurityStatsIntervalGroup = cDnsSecurityStatsIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: cDnsSecurityStatsIntervalGroup.setDescription('A collection of objects providing interval security stats for a DNS name server.')
cDnsErrorStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 405, 2, 2, 8)).setObjects(("CISCO-DNS-SERVER-MIB", "cDnsErrorUpdateErrors"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorIxfrInErrors"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorIxfrOutErrors"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorAxfrInErrors"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorAxfrOutErrors"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorSentTotalErrors"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorSentFormatErrors"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorSentOtherErrors"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorSentRefusalErrors"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorRcvdFormatErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDnsErrorStatsGroup = cDnsErrorStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorStatsGroup.setDescription('A collection of objects providing total error stats for a DNS name server.')
cDnsErrorStatsIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 405, 2, 2, 9)).setObjects(("CISCO-DNS-SERVER-MIB", "cDnsErrorIntUpdateErrors"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorIntIxfrInErrors"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorIntIxfrOutErrors"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorIntAxfrInErrors"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorIntAxfrOutErrors"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorIntSentTotalErrors"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorIntSentFormatErrors"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorIntSentOtherErrors"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorIntSentRefusalErrors"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorIntRcvdFormatErrors"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorIntSampleTime"), ("CISCO-DNS-SERVER-MIB", "cDnsErrorIntSampleInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDnsErrorStatsIntervalGroup = cDnsErrorStatsIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: cDnsErrorStatsIntervalGroup.setDescription('A collection of objects providing interval error stats for a DNS name server.')
cDnsMaxCounterStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 405, 2, 2, 10)).setObjects(("CISCO-DNS-SERVER-MIB", "cDnsMaxCntrConcurXfrsInCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsMaxCntrConcurXfrsOutCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsMaxCntrHaSvrNoRespTime"), ("CISCO-DNS-SERVER-MIB", "cDnsMaxCntrHaSvrMaxNoRespTime"), ("CISCO-DNS-SERVER-MIB", "cDnsMaxCntrHaBatchLimitCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsMaxCntrHaRRPendListCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsMaxCntrHaRRActiveListCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsMaxCntrHaPersEditListCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsMaxCntrHaUpdLatencyMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDnsMaxCounterStatsGroup = cDnsMaxCounterStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCounterStatsGroup.setDescription('A collection of objects providing total max counter stats for a DNS name server.')
cDnsMaxCounterStatsIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 405, 2, 2, 11)).setObjects(("CISCO-DNS-SERVER-MIB", "cDnsMaxCntrIntConcurXfrsInCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsMaxCntrIntConcurXfrsOutCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsMaxCntrIntHaSvrNoRespTime"), ("CISCO-DNS-SERVER-MIB", "cDnsMaxCntrIntHaSvrMaxNoRespTime"), ("CISCO-DNS-SERVER-MIB", "cDnsMaxCntrIntHaBatchLimitCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsMaxCntrIntHaRRPendListCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsMaxCntrIntHaRRActiveListCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsMaxCntrIntHaPersEditListCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsMaxCntrIntHaUpdLatencyMax"), ("CISCO-DNS-SERVER-MIB", "cDnsMaxCntrIntSampleTime"), ("CISCO-DNS-SERVER-MIB", "cDnsMaxCntrIntSampleInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDnsMaxCounterStatsIntervalGroup = cDnsMaxCounterStatsIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: cDnsMaxCounterStatsIntervalGroup.setDescription('A collection of objects providing interval max counter stats for a DNS name server.')
cDnsHaStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 405, 2, 2, 12)).setObjects(("CISCO-DNS-SERVER-MIB", "cDnsHaCommInterruptedStates"), ("CISCO-DNS-SERVER-MIB", "cDnsHaPartnerDownStates"), ("CISCO-DNS-SERVER-MIB", "cDnsHaSyncs"), ("CISCO-DNS-SERVER-MIB", "cDnsHaMsgConnectSentCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaMsgReconcileSentCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaMsgHeartBeatSentCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaMsgZoneSyncSentCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaMsgRRSyncSentCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaMsgRRUpdateSentCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaMsgResponseSentCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaMsgConnectRcvdCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaMsgReconcileRcvdCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaMsgHeartbeatRcvdCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaMsgZoneSyncRcvdCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaMsgRRSyncRcvdCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaMsgRRUpdateRcvdCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaMsgResponseRcvdCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaHeartbeatTimeoutCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaUpdateRejectCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaResponseMismatchCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaResponseServFailCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaRespInconsistentCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaRespUnknownCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaFullZoneResyncCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaUpdatePrivateReqCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaUpdatePrivateRespCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaSyncConflictCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaSyncDiscardNameCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaSyncMergeNameCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaUpdateLatencyAverage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDnsHaStatsGroup = cDnsHaStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cDnsHaStatsGroup.setDescription('A collection of objects providing total HA DNS counter stats for a DNS name server.')
cDnsHaStatsIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 405, 2, 2, 13)).setObjects(("CISCO-DNS-SERVER-MIB", "cDnsHaIntCommInterruptedStates"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntPartnerDownStates"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntSyncs"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntMsgConnectSentCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntMsgReconcileSentCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntMsgHeartBeatSentCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntMsgZoneSyncSentCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntMsgRRSyncSentCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntMsgRRUpdateSentCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntMsgResponseSentCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntMsgConnectRcvdCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntMsgReconcileRcvdCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntMsgHeartbeatRcvdCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntMsgZoneSyncRcvdCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntMsgRRSyncRcvdCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntMsgRRUpdateRcvdCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntMsgResponseRcvdCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntHeartbeatTimeoutCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntUpdateRejectCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntResponseMismatchCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntResponseServFailCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntRespInconsistentCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntRespUnknownCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntFullZoneResyncCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntUpdatePrivateReqCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntUpdatePrivateRespCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntSyncConflictCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntSyncDiscardNameCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntSyncMergeNameCnts"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntUpdateLatencyAverage"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntSampleTime"), ("CISCO-DNS-SERVER-MIB", "cDnsHaIntSampleInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDnsHaStatsIntervalGroup = cDnsHaStatsIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: cDnsHaStatsIntervalGroup.setDescription('A collection of objects providing interval HA DNS counter stats for a DNS name server.')
mibBuilder.exportSymbols("CISCO-DNS-SERVER-MIB", cDnsSecurityIntRcvdTsigBadKeys=cDnsSecurityIntRcvdTsigBadKeys, cDnsQueryMemCacheMisses=cDnsQueryMemCacheMisses, cDnsPerfFullRespIxfrs=cDnsPerfFullRespIxfrs, cDnsQueryIntSampleInterval=cDnsQueryIntSampleInterval, CDnsTime=CDnsTime, cDnsHaIntMsgZoneSyncSentCnts=cDnsHaIntMsgZoneSyncSentCnts, cDnsQueryIntervalStats=cDnsQueryIntervalStats, cDnsMaxCntrIntConcurXfrsInCnts=cDnsMaxCntrIntConcurXfrsInCnts, cDnsHaUpdatePrivateRespCnts=cDnsHaUpdatePrivateRespCnts, cDnsQueryReferrals=cDnsQueryReferrals, cDnsHaSyncMergeNameCnts=cDnsHaSyncMergeNameCnts, cDnsHaMsgConnectSentCnts=cDnsHaMsgConnectSentCnts, cDnsServMIBConform=cDnsServMIBConform, cDnsServConfigReset=cDnsServConfigReset, cDnsHaIntSyncs=cDnsHaIntSyncs, cDnsMaxCntrConcurXfrsOutCnts=cDnsMaxCntrConcurXfrsOutCnts, cDnsPerfIntFullRespIxfrs=cDnsPerfIntFullRespIxfrs, cDnsHaMsgRRSyncSentCnts=cDnsHaMsgRRSyncSentCnts, cDnsErrorIxfrInErrors=cDnsErrorIxfrInErrors, cDnsHaMsgHeartbeatRcvdCnts=cDnsHaMsgHeartbeatRcvdCnts, cDnsPerfOutboundAtLimitXfrs=cDnsPerfOutboundAtLimitXfrs, cDnsHaSyncConflictCnts=cDnsHaSyncConflictCnts, cDnsQueryMemCacheWrites=cDnsQueryMemCacheWrites, cDnsQueryIntSampleTime=cDnsQueryIntSampleTime, cDnsPerfIntOutboundAxfrs=cDnsPerfIntOutboundAxfrs, cDnsHaResponseMismatchCnts=cDnsHaResponseMismatchCnts, cDnsHaMsgRRUpdateRcvdCnts=cDnsHaMsgRRUpdateRcvdCnts, cDnsServMIBCompliance=cDnsServMIBCompliance, cDnsPerfIntQueries=cDnsPerfIntQueries, cDnsHaIntUpdateRejectCnts=cDnsHaIntUpdateRejectCnts, cDnsSecurityIntDetecTsigBadTimes=cDnsSecurityIntDetecTsigBadTimes, cDnsQueryIntMemCacheMisses=cDnsQueryIntMemCacheMisses, cDnsErrorRcvdFormatErrors=cDnsErrorRcvdFormatErrors, cDnsHaIntMsgRRUpdateRcvdCnts=cDnsHaIntMsgRRUpdateRcvdCnts, cDnsHaFullZoneResyncCnts=cDnsHaFullZoneResyncCnts, cDnsQueryStatsGroup=cDnsQueryStatsGroup, cDnsHaIntHeartbeatTimeoutCnts=cDnsHaIntHeartbeatTimeoutCnts, cDnsHaIntMsgReconcileRcvdCnts=cDnsHaIntMsgReconcileRcvdCnts, cDnsPerfIntInboundNotifies=cDnsPerfIntInboundNotifies, cDnsSecurityIntRestrictQueryAcls=cDnsSecurityIntRestrictQueryAcls, cDnsHaSyncs=cDnsHaSyncs, cDnsHaUpdatePrivateReqCnts=cDnsHaUpdatePrivateReqCnts, cDnsMaxCntrHaRRActiveListCnts=cDnsMaxCntrHaRRActiveListCnts, cDnsHaStatsIntervalGroup=cDnsHaStatsIntervalGroup, cDnsPerfStats=cDnsPerfStats, cDnsQueryIntMemCacheWrites=cDnsQueryIntMemCacheWrites, cDnsServMIBCompliances=cDnsServMIBCompliances, cDnsSecurityRcvdTsigBadKeys=cDnsSecurityRcvdTsigBadKeys, cDnsErrorAxfrInErrors=cDnsErrorAxfrInErrors, cDnsServConfigIntervalSample=cDnsServConfigIntervalSample, cDnsErrorIntSentOtherErrors=cDnsErrorIntSentOtherErrors, cDnsMaxCntrIntHaPersEditListCnts=cDnsMaxCntrIntHaPersEditListCnts, cDnsServConfigImplementIdent=cDnsServConfigImplementIdent, cDnsQueryAuthAnswers=cDnsQueryAuthAnswers, cDnsPerfIntOutboundAtLimitXfrs=cDnsPerfIntOutboundAtLimitXfrs, cDnsQueryAuthNoDataResps=cDnsQueryAuthNoDataResps, cDnsSecurityRcvdTsigBadTimes=cDnsSecurityRcvdTsigBadTimes, cDnsHaIntFullZoneResyncCnts=cDnsHaIntFullZoneResyncCnts, cDnsPerfIntInboundIxfrs=cDnsPerfIntInboundIxfrs, cDnsHaPartnerDownStates=cDnsHaPartnerDownStates, cDnsPerfInboundAxfrs=cDnsPerfInboundAxfrs, cDnsQueryRelNameRequests=cDnsQueryRelNameRequests, cDnsErrorIntIxfrOutErrors=cDnsErrorIntIxfrOutErrors, cDnsSecurityIntSampleTime=cDnsSecurityIntSampleTime, cDnsErrorIntSampleInterval=cDnsErrorIntSampleInterval, cDnsHaResponseServFailCnts=cDnsHaResponseServFailCnts, cDnsHaStatsGroup=cDnsHaStatsGroup, cDnsErrorIxfrOutErrors=cDnsErrorIxfrOutErrors, cDnsMaxCounterStats=cDnsMaxCounterStats, cDnsQueryIntAuthAnswers=cDnsQueryIntAuthAnswers, cDnsMaxCntrHaBatchLimitCnts=cDnsMaxCntrHaBatchLimitCnts, cDnsErrorStatsIntervalGroup=cDnsErrorStatsIntervalGroup, cDnsPerfQueries=cDnsPerfQueries, cDnsErrorIntAxfrInErrors=cDnsErrorIntAxfrInErrors, cDnsMaxCntrHaSvrNoRespTime=cDnsMaxCntrHaSvrNoRespTime, cDnsPerfIntSampleInterval=cDnsPerfIntSampleInterval, cDnsHaIntResponseServFailCnts=cDnsHaIntResponseServFailCnts, cDnsHaIntUpdatePrivateRespCnts=cDnsHaIntUpdatePrivateRespCnts, cDnsSecurityIntUnauthUpdateReqs=cDnsSecurityIntUnauthUpdateReqs, cDnsHaIntUpdateLatencyAverage=cDnsHaIntUpdateLatencyAverage, cDnsQueryIntLameDelegations=cDnsQueryIntLameDelegations, cDnsHaMsgReconcileSentCnts=cDnsHaMsgReconcileSentCnts, cDnsPerfIntInboundAxfrs=cDnsPerfIntInboundAxfrs, cDnsErrorIntSentRefusalErrors=cDnsErrorIntSentRefusalErrors, cDnsMaxCntrIntSampleInterval=cDnsMaxCntrIntSampleInterval, cDnsQueryIntMemCacheHits=cDnsQueryIntMemCacheHits, cDnsHaHeartbeatTimeoutCnts=cDnsHaHeartbeatTimeoutCnts, cDnsQueryStatsIntervalGroup=cDnsQueryStatsIntervalGroup, cDnsHaIntMsgReconcileSentCnts=cDnsHaIntMsgReconcileSentCnts, cDnsQueryNonAuthAnswers=cDnsQueryNonAuthAnswers, cDnsHaIntSyncConflictCnts=cDnsHaIntSyncConflictCnts, cDnsPerfStatsGroup=cDnsPerfStatsGroup, cDnsErrorIntSentFormatErrors=cDnsErrorIntSentFormatErrors, cDnsHaCommInterruptedStates=cDnsHaCommInterruptedStates, cDnsHaIntervalStats=cDnsHaIntervalStats, cDnsSecurityRestrictQueryAcls=cDnsSecurityRestrictQueryAcls, cDnsSecurityRcvdTsigBadSigs=cDnsSecurityRcvdTsigBadSigs, cDnsErrorIntSampleTime=cDnsErrorIntSampleTime, cDnsQueryMemCacheHits=cDnsQueryMemCacheHits, cDnsHaMsgResponseSentCnts=cDnsHaMsgResponseSentCnts, cDnsSecurityUnauthXferReqs=cDnsSecurityUnauthXferReqs, cDnsErrorStats=cDnsErrorStats, cDnsHaIntMsgRRUpdateSentCnts=cDnsHaIntMsgRRUpdateSentCnts, cDnsMaxCntrConcurXfrsInCnts=cDnsMaxCntrConcurXfrsInCnts, cDnsErrorSentRefusalErrors=cDnsErrorSentRefusalErrors, cDnsMaxCounterStatsIntervalGroup=cDnsMaxCounterStatsIntervalGroup, cDnsSecurityIntRcvdTsigPackets=cDnsSecurityIntRcvdTsigPackets, cDnsPerfIntOutboundNotifies=cDnsPerfIntOutboundNotifies, cDnsQueryAuthNoNames=cDnsQueryAuthNoNames, cDnsPerfOutboundAxfrs=cDnsPerfOutboundAxfrs, cDnsMaxCntrIntHaBatchLimitCnts=cDnsMaxCntrIntHaBatchLimitCnts, cDnsHaMsgConnectRcvdCnts=cDnsHaMsgConnectRcvdCnts, cDnsMaxCntrIntSampleTime=cDnsMaxCntrIntSampleTime, cDnsSecurityStats=cDnsSecurityStats, cDnsHaIntMsgResponseRcvdCnts=cDnsHaIntMsgResponseRcvdCnts, cDnsSecurityUnauthUpdateReqs=cDnsSecurityUnauthUpdateReqs, cDnsPerfIntUpdatePkts=cDnsPerfIntUpdatePkts, cDnsErrorIntUpdateErrors=cDnsErrorIntUpdateErrors, cDnsQueryIntAuthNoDataResps=cDnsQueryIntAuthNoDataResps, cDnsHaIntRespUnknownCnts=cDnsHaIntRespUnknownCnts, cDnsHaStats=cDnsHaStats, cDnsHaIntMsgHeartbeatRcvdCnts=cDnsHaIntMsgHeartbeatRcvdCnts, cDnsMaxCntrHaSvrMaxNoRespTime=cDnsMaxCntrHaSvrMaxNoRespTime, cDnsHaIntMsgRRSyncRcvdCnts=cDnsHaIntMsgRRSyncRcvdCnts, cDnsHaIntSyncDiscardNameCnts=cDnsHaIntSyncDiscardNameCnts, cDnsHaMsgHeartBeatSentCnts=cDnsHaMsgHeartBeatSentCnts, cDnsSecurityStatsGroup=cDnsSecurityStatsGroup, cDnsSecurityRcvdTsigPackets=cDnsSecurityRcvdTsigPackets, cDnsPerfIntOutboundIxfrs=cDnsPerfIntOutboundIxfrs, cDnsHaSyncDiscardNameCnts=cDnsHaSyncDiscardNameCnts, cDnsHaIntUpdatePrivateReqCnts=cDnsHaIntUpdatePrivateReqCnts, cDnsSecurityIntervalStats=cDnsSecurityIntervalStats, cDnsSecurityDetecTsigBadTimes=cDnsSecurityDetecTsigBadTimes, cDnsMaxCntrHaRRPendListCnts=cDnsMaxCntrHaRRPendListCnts, cDnsMaxCounterStatsGroup=cDnsMaxCounterStatsGroup, cDnsMaxCntrIntHaSvrMaxNoRespTime=cDnsMaxCntrIntHaSvrMaxNoRespTime, cDnsQueryIntReferrals=cDnsQueryIntReferrals, cDnsHaRespInconsistentCnts=cDnsHaRespInconsistentCnts, cDnsMaxCntrHaPersEditListCnts=cDnsMaxCntrHaPersEditListCnts, cDnsSecurityStatsIntervalGroup=cDnsSecurityStatsIntervalGroup, cDnsHaIntMsgConnectRcvdCnts=cDnsHaIntMsgConnectRcvdCnts, cDnsServConfigRecurs=cDnsServConfigRecurs, cDnsErrorSentTotalErrors=cDnsErrorSentTotalErrors, cDnsHaMsgRRSyncRcvdCnts=cDnsHaMsgRRSyncRcvdCnts, cDnsQueryIntNonAuthAnswers=cDnsQueryIntNonAuthAnswers, cDnsHaUpdateRejectCnts=cDnsHaUpdateRejectCnts, cDnsMaxCounterIntervalStats=cDnsMaxCounterIntervalStats, cDnsQueryIntAuthNoNames=cDnsQueryIntAuthNoNames, cDnsErrorIntervalStats=cDnsErrorIntervalStats, cDnsHaMsgReconcileRcvdCnts=cDnsHaMsgReconcileRcvdCnts, cDnsQueryLameDelegations=cDnsQueryLameDelegations, cDnsServConfigGroup=cDnsServConfigGroup, cDnsErrorSentOtherErrors=cDnsErrorSentOtherErrors, cDnsPerfIntSampleTime=cDnsPerfIntSampleTime, cDnsQueryIntRefusals=cDnsQueryIntRefusals, cDnsPerfOutboundIxfrs=cDnsPerfOutboundIxfrs, cDnsHaMsgRRUpdateSentCnts=cDnsHaMsgRRUpdateSentCnts, cDnsServConfigUpTime=cDnsServConfigUpTime, cDnsPerfInboundNotifies=cDnsPerfInboundNotifies, cDnsMaxCntrIntHaRRActiveListCnts=cDnsMaxCntrIntHaRRActiveListCnts, cDnsHaIntSyncMergeNameCnts=cDnsHaIntSyncMergeNameCnts, cDnsPerfInboundIxfrs=cDnsPerfInboundIxfrs, PYSNMP_MODULE_ID=ciscoDnsServerMIB, cDnsMaxCntrIntConcurXfrsOutCnts=cDnsMaxCntrIntConcurXfrsOutCnts, cDnsErrorUpdateErrors=cDnsErrorUpdateErrors, cDnsHaIntSampleTime=cDnsHaIntSampleTime, ciscoDnsServerMIB=ciscoDnsServerMIB, cDnsSecurityIntSampleInterval=cDnsSecurityIntSampleInterval, cDnsSecurityDetectTsigBadKeys=cDnsSecurityDetectTsigBadKeys, cDnsPerfOutboundNotifies=cDnsPerfOutboundNotifies, cDnsSecurityIntDetectTsigBadSigs=cDnsSecurityIntDetectTsigBadSigs, cDnsSecurityIntRcvdTsigBadSigs=cDnsSecurityIntRcvdTsigBadSigs, cDnsServConfig=cDnsServConfig, cDnsErrorIntRcvdFormatErrors=cDnsErrorIntRcvdFormatErrors, cDnsHaMsgZoneSyncSentCnts=cDnsHaMsgZoneSyncSentCnts, cDnsSecurityIntDetectTsigBadKeys=cDnsSecurityIntDetectTsigBadKeys, cDnsServMIBObjects=cDnsServMIBObjects, cDnsSecurityIntRcvdTsigBadTimes=cDnsSecurityIntRcvdTsigBadTimes, cDnsHaIntMsgConnectSentCnts=cDnsHaIntMsgConnectSentCnts, cDnsHaIntMsgRRSyncSentCnts=cDnsHaIntMsgRRSyncSentCnts, cDnsHaIntRespInconsistentCnts=cDnsHaIntRespInconsistentCnts, cDnsHaRespUnknownCnts=cDnsHaRespUnknownCnts, cDnsQueryRefusals=cDnsQueryRefusals, cDnsPerfStatsIntervalGroup=cDnsPerfStatsIntervalGroup, cDnsSecurityIntUnauthXferReqs=cDnsSecurityIntUnauthXferReqs, cDnsHaIntPartnerDownStates=cDnsHaIntPartnerDownStates, cDnsErrorSentFormatErrors=cDnsErrorSentFormatErrors, cDnsPerfUpdatePkts=cDnsPerfUpdatePkts, cDnsQueryNonAuthNoDataResps=cDnsQueryNonAuthNoDataResps, cDnsHaIntMsgResponseSentCnts=cDnsHaIntMsgResponseSentCnts, cDnsMaxCntrIntHaSvrNoRespTime=cDnsMaxCntrIntHaSvrNoRespTime, cDnsHaIntMsgHeartBeatSentCnts=cDnsHaIntMsgHeartBeatSentCnts, cDnsHaUpdateLatencyAverage=cDnsHaUpdateLatencyAverage, cDnsQueryIntNonAuthNoDataResps=cDnsQueryIntNonAuthNoDataResps, cDnsPerfUpdateRRs=cDnsPerfUpdateRRs, cDnsHaMsgResponseRcvdCnts=cDnsHaMsgResponseRcvdCnts, cDnsErrorAxfrOutErrors=cDnsErrorAxfrOutErrors, cDnsMaxCntrIntHaUpdLatencyMax=cDnsMaxCntrIntHaUpdLatencyMax, cDnsMaxCntrIntHaRRPendListCnts=cDnsMaxCntrIntHaRRPendListCnts, cDnsHaIntSampleInterval=cDnsHaIntSampleInterval, cDnsErrorIntAxfrOutErrors=cDnsErrorIntAxfrOutErrors, cDnsServConfigResetTime=cDnsServConfigResetTime, cDnsPerfIntervalStats=cDnsPerfIntervalStats, cDnsQueryIntRelNameRequests=cDnsQueryIntRelNameRequests, cDnsErrorStatsGroup=cDnsErrorStatsGroup, cDnsPerfIntUpdateRRs=cDnsPerfIntUpdateRRs, cDnsMaxCntrHaUpdLatencyMax=cDnsMaxCntrHaUpdLatencyMax, cDnsPerfInboundAtLimitXfrs=cDnsPerfInboundAtLimitXfrs, cDnsPerfIntInboundAtLimitXfrs=cDnsPerfIntInboundAtLimitXfrs, cDnsHaIntMsgZoneSyncRcvdCnts=cDnsHaIntMsgZoneSyncRcvdCnts, cDnsServMIBGroups=cDnsServMIBGroups, cDnsQueryStats=cDnsQueryStats, cDnsHaIntResponseMismatchCnts=cDnsHaIntResponseMismatchCnts, cDnsHaIntCommInterruptedStates=cDnsHaIntCommInterruptedStates, cDnsErrorIntSentTotalErrors=cDnsErrorIntSentTotalErrors, cDnsSecurityDetectTsigBadSigs=cDnsSecurityDetectTsigBadSigs, cDnsServMIBNotifs=cDnsServMIBNotifs, cDnsErrorIntIxfrInErrors=cDnsErrorIntIxfrInErrors, cDnsHaMsgZoneSyncRcvdCnts=cDnsHaMsgZoneSyncRcvdCnts)
