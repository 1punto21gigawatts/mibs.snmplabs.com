#
# PySNMP MIB module XYPLEX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYPLEX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:46:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, ObjectIdentity, Unsigned32, Integer32, IpAddress, enterprises, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Bits, Gauge32, MibIdentifier, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "Unsigned32", "Integer32", "IpAddress", "enterprises", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Bits", "Gauge32", "MibIdentifier", "TimeTicks", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xyplex = MibIdentifier((1, 3, 6, 1, 4, 1, 33))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 1))
character = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 2))
xInternet = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 4))
sysIdent = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIdent.setStatus('mandatory')
if mibBuilder.loadTexts: sysIdent.setDescription("An identification string for local and remote server displays. Corresponds directly to SERVER IDENTIFICATION and the value labeled 'Identification:' on the SERVER CHARACTERISTICS display.")
charPhysNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPhysNumber.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysNumber.setDescription('The number of physical character (terminal) ports (regardless of their current state) present on this system.')
charPhysTable = MibTable((1, 3, 6, 1, 4, 1, 33, 2, 2), )
if mibBuilder.loadTexts: charPhysTable.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysTable.setDescription('A list of physical character port entries. The number of entries is given by the value of charPhysNumber.')
charPhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 2, 2, 1), ).setIndexNames((0, "XYPLEX-MIB", "charPhysIndex"))
if mibBuilder.loadTexts: charPhysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysEntry.setDescription('Status and parameter values for a physical character port.')
charPhysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPhysIndex.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysIndex.setDescription('A unique value for each physical character port, directly corresponding to the physical connector. Its value ranges between 1 and the value of charPhysNumber.')
charPhysPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPhysPortName.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysPortName.setDescription("An administratively-assigned name for the port. If set to zero length, it becomes the standard, default name. Corresponds directly to PORT NAME and the value labeled 'Name:' in the PORT CHARACTERISTICS display.")
charPhysAdminAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("dynamic", 2), ("local", 3), ("remote", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPhysAdminAccess.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysAdminAccess.setDescription("The allowed mode of access to the port. The value meanings are: none not accessed dynamic local or remote access local local access only remote remote access only Corresponds directly to PORT ACCESS and the value labeled 'Access:' in the PORT CHARACTERISTICS display.")
charPhysOperAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("local", 3), ("remote", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPhysOperAccess.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysOperAccess.setDescription("The current mode of access to the port. none not accessed local local access remote remote access Corresponds directly to the value labeled 'Access:' in the PORT STATUS display.")
charPhysBits = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPhysBits.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysBits.setDescription("The port's number of bits per character. Corresponds directly to PORT CHARACTER SIZE and the value labeled 'Character Size:' in the PORT CHARACTERISTICS display.")
charPhysParity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("even", 2), ("mark", 3), ("odd", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPhysParity.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysParity.setDescription("The type of character parity the port provides and expects. The value meanings are: none ignored and not generated even an even number of 1s mark always 1 odd an odd number of 1s Corresponds directly to PORT PARITY and the value labeled 'Parity:' in the PORT CHARACTERISTICS display.")
charPhysSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPhysSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysSpeed.setDescription("The port's nominal bandwidth in bits per second. Corresponds directly to PORT SPEED and the value labeled 'Input Speed:' or 'Output Speed:' in the PORT CHARACTERISTICS display.")
charPhysModemControl = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPhysModemControl.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysModemControl.setDescription("A control to enable or disable observation of modem control signals. Corresponds directly to PORT MODEM CONTROL and the value labeled 'Modem Control:' in the PORT CHARACTERISTICS display.")
charPhysSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rs232", 1), ("centronics", 2), ("dataproducts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPhysSignalType.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysSignalType.setDescription("The port's type of hardware interface. For RS-232 ports, this is assumed. For parallel ports, it corresponds directly to the value labeled 'Printer Interface:' in the PORT STATUS display.")
charPhysInSignalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPhysInSignalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysInSignalNumber.setDescription("The number of hardware interface signals this port is capable of observing, indicating the number of entries for this port in charPhysInSignalTable. Corresponds directly to the possible values labeled 'Input Signals:' in the PORT STATUS display.")
charPhysOutSignalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPhysOutSignalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysOutSignalNumber.setDescription("The number of hardware interface signals this port is capable of asserting, indicating the number of entries for this port in charPhysOutSignalTable. Corresponds directly to the possible values labeled 'Output Signals:' in the PORT STATUS display.")
charPhysFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("cts", 2), ("dsr", 3), ("xon", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPhysFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysFlowControl.setDescription("The type of flow control the system applies to the port for input and output. The value meanings are: none no flow control cts CTS/RTS dsr DCD/DTR/DSR xon XON/XOFF Directly related to PORT FLOW CONTROL and the value labeled 'Flow Control:' in the PORT CHARACTERISTICS display.")
charPhysInFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPhysInFlow.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysInFlow.setDescription("A control for application of flow control to characters coming into the port. Corresponds directly to 'Input Flow Control' in the 'Enabled Characteristics' section of the PORT CHARACTERISTICS display.")
charPhysOutFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPhysOutFlow.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysOutFlow.setDescription("A control for observation of flow control on characters going out of the port. Corresponds directly to 'Output Flow Control' in the 'Enabled Characteristics' section of the PORT CHARACTERISTICS display.")
charPhysInFlowState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("go", 1), ("stop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPhysInFlowState.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysInFlowState.setDescription("The dynamic state of flow control as applied by the system to characters coming into the port. Corresponds directly to the value labeled 'Input XOFFed:' in the PORT STATUS display.")
charPhysOutFlowState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("go", 1), ("stop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPhysOutFlowState.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysOutFlowState.setDescription("The dynamic state of flow control as observed by the system on characters going out of the port. Corresponds directly to the value labeled 'Output XOFFed:' in the PORT STATUS display.")
charPhysAutobaud = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPhysAutobaud.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysAutobaud.setDescription("A control to allow the port to determine speed dynamically by looking for carriage return input characters. Corresponds directly to 'Autobaud' in the 'Enabled Characteristics' section of the PORT CHARACTERISTICS display.")
charPhysInCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPhysInCharacters.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysInCharacters.setDescription("The total number of characters that have come into the port. Corresponds directly to the value labeled 'Input Count:' in the PORT COUNTERS display.")
charPhysOutCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPhysOutCharacters.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysOutCharacters.setDescription("The total number of characters that have gone out of the port. Corresponds directly to the value labeled 'Output Count:' in the PORT COUNTERS display.")
charPhysFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPhysFramingErrors.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysFramingErrors.setDescription("The total number of characters that have come into the port with illegally formatted bit frames. Corresponds directly to the value labeled 'Framing Errors:' in the PORT COUNTERS display.")
charPhysParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPhysParityErrors.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysParityErrors.setDescription("The total number of characters that have come into the port with invalid parity. Corresponds directly to the value labeled 'Parity Errors:' in the PORT COUNTERS display.")
charPhysOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPhysOverrunErrors.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysOverrunErrors.setDescription("The total number of characters coming into the port that the system lost due to no room in the port's input buffer. Corresponds directly to the value labeled 'Overrun Errors:' in the PORT COUNTERS display.")
charPhysLastInCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPhysLastInCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysLastInCharacter.setDescription("The character that most recently came into the port. Corresponds directly to the value labeled 'Last Char Input:' in the PORT STATUS display.")
charPhysLastOutCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPhysLastOutCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysLastOutCharacter.setDescription("The character that most recently went out of the port. Corresponds directly to the value labeled 'Last Char Output:' in the PORT STATUS display.")
charPhysNode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPhysNode.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysNode.setDescription("An identification for the network system with the current, active network connection to the port. Corresponds directly to the value labeled 'Current Node:' in the PORT STATUS display.")
charPhysUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 2, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPhysUserName.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysUserName.setDescription("An identification of the user logged into the port on the current, active network connection to the port. Corresponds directly to the value following 'Port n:' in the PORT STATUS display.")
charPhysInSignalTable = MibTable((1, 3, 6, 1, 4, 1, 33, 2, 3), )
if mibBuilder.loadTexts: charPhysInSignalTable.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysInSignalTable.setDescription('A list of physical character port input hardware signal entries. The number of entries is given by the value of charPhysInSignalNumber')
charPhysInSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 2, 3, 1), ).setIndexNames((0, "XYPLEX-MIB", "charInPhysIndex"), (0, "XYPLEX-MIB", "charInSignalName"))
if mibBuilder.loadTexts: charPhysInSignalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysInSignalEntry.setDescription('A physical character port hardware signal entry containing objects for the particular signal on the particular port.')
charInPhysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charInPhysIndex.setStatus('mandatory')
if mibBuilder.loadTexts: charInPhysIndex.setDescription('The index value that uniquely identifies the physical character port to which this signal belongs. The port identified by a particular value of this index is the same port as identified by the same value of charPhysIndex.')
charInSignalName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charInSignalName.setStatus('mandatory')
if mibBuilder.loadTexts: charInSignalName.setDescription('The name of the hardware signal, as appropriate to its type.')
charInSignalState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charInSignalState.setStatus('mandatory')
if mibBuilder.loadTexts: charInSignalState.setDescription("The current state of the signal. For RS-232 ports, corresponds directly to the value labeled 'Input Signals:' in the PORT STATUS display. For printer ports, corresponds to the various signal labels and values following the label 'Printer Interface:' in the PORT STATUS display.")
charPhysOutSignalTable = MibTable((1, 3, 6, 1, 4, 1, 33, 2, 4), )
if mibBuilder.loadTexts: charPhysOutSignalTable.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysOutSignalTable.setDescription('A list of physical character port output hardware signal entries. The number of entries is given by the value of charPhysOutSignalNumber')
charPhysOutSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 2, 4, 1), ).setIndexNames((0, "XYPLEX-MIB", "charOutPhysIndex"), (0, "XYPLEX-MIB", "charOutSignalName"))
if mibBuilder.loadTexts: charPhysOutSignalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: charPhysOutSignalEntry.setDescription('A physical character port hardware signal entry containing objects for the particular signal on the particular port.')
charOutPhysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charOutPhysIndex.setStatus('mandatory')
if mibBuilder.loadTexts: charOutPhysIndex.setDescription('The index value that uniquely identifies the physical character port to which this signal belongs. The port identified by a particular value of this index is the same port as identified by the same value of charPhysIndex.')
charOutSignalName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charOutSignalName.setStatus('mandatory')
if mibBuilder.loadTexts: charOutSignalName.setDescription('The name of the hardware signal, as appropriate to its type.')
charOutSignalState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charOutSignalState.setStatus('mandatory')
if mibBuilder.loadTexts: charOutSignalState.setDescription("The current state of the signal. For RS-232 ports, corresponds directly to the value labeled 'Output Signals:' in the PORT STATUS display. For printer ports, corresponds to the various signal labels and values following the label 'Printer Interface:' in the PORT STATUS display.")
intDomainSuffix = MibScalar((1, 3, 6, 1, 4, 1, 33, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 115))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: intDomainSuffix.setStatus('mandatory')
if mibBuilder.loadTexts: intDomainSuffix.setDescription("A partial domain name for the server to append to the end of an incomplete domain name provided by the user. Corresponds directly to SERVER INTERNET DEFAULT DOMAIN SUFFIX and the value labeled 'Domain Suffix:' in the SERVER INTERNET CHARACTERISTICS display.")
intDomainAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: intDomainAddress1.setStatus('mandatory')
if mibBuilder.loadTexts: intDomainAddress1.setDescription("The internet address of a Domain Name Server. The system can use one or two such addresses, without preference. A value of 0.0.0.0 indicates no address. Corresponds directly to SERVER INTERNET PRIMARY DOMAIN ADDRESS and the value labeled 'Primary Domain Address:' in the SERVER INTERNET CHARACTERISTICS display.")
intDomainAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: intDomainAddress2.setStatus('mandatory')
if mibBuilder.loadTexts: intDomainAddress2.setDescription("The internet address of a Domain Name Server. The system can use one or two such addresses, without preference. A value of 0.0.0.0 indicates no address. Corresponds directly to SERVER INTERNET SECONDARY DOMAIN ADDRESS and the value labeled 'Secondary Domain Address:' in the SERVER INTERNET CHARACTERISTICS display.")
intGatewayAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 4, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: intGatewayAddress1.setStatus('mandatory')
if mibBuilder.loadTexts: intGatewayAddress1.setDescription("The internet address of the system's primary (first choice) gateway. A value of 0.0.0.0 indicates no address. Corresponds directly to SERVER INTERNET PRIMARY GATEWAY ADDRESS and the value labeled 'Primary Gateway Address:' in the SERVER INTERNET CHARACTERISTICS display.")
intGatewayAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 4, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: intGatewayAddress2.setStatus('mandatory')
if mibBuilder.loadTexts: intGatewayAddress2.setDescription("The internet address of the system's secondary (second choice) gateway. A value of 0.0.0.0 indicates no address. Corresponds directly to SERVER INTERNET SECONDARY GATEWAY ADDRESS and the value labeled 'Secondary Gateway Address:' in the SERVER INTERNET CHARACTERISTICS display.")
mibBuilder.exportSymbols("XYPLEX-MIB", charPhysNode=charPhysNode, intGatewayAddress1=intGatewayAddress1, charPhysFlowControl=charPhysFlowControl, charPhysOutSignalTable=charPhysOutSignalTable, charPhysBits=charPhysBits, charInSignalState=charInSignalState, charPhysParity=charPhysParity, charPhysOperAccess=charPhysOperAccess, intDomainAddress1=intDomainAddress1, xInternet=xInternet, charOutPhysIndex=charOutPhysIndex, system=system, charPhysOutSignalNumber=charPhysOutSignalNumber, xyplex=xyplex, charPhysInSignalTable=charPhysInSignalTable, charPhysLastInCharacter=charPhysLastInCharacter, charPhysOutFlow=charPhysOutFlow, charPhysIndex=charPhysIndex, charPhysParityErrors=charPhysParityErrors, intGatewayAddress2=intGatewayAddress2, sysIdent=sysIdent, charPhysModemControl=charPhysModemControl, charPhysOutCharacters=charPhysOutCharacters, charInPhysIndex=charInPhysIndex, intDomainAddress2=intDomainAddress2, charPhysSignalType=charPhysSignalType, charPhysInSignalNumber=charPhysInSignalNumber, charPhysTable=charPhysTable, charPhysEntry=charPhysEntry, charPhysInFlow=charPhysInFlow, charPhysAutobaud=charPhysAutobaud, charPhysInCharacters=charPhysInCharacters, charPhysSpeed=charPhysSpeed, charPhysPortName=charPhysPortName, character=character, charPhysAdminAccess=charPhysAdminAccess, charPhysOverrunErrors=charPhysOverrunErrors, charPhysInSignalEntry=charPhysInSignalEntry, charPhysOutFlowState=charPhysOutFlowState, charPhysLastOutCharacter=charPhysLastOutCharacter, charInSignalName=charInSignalName, charPhysUserName=charPhysUserName, charPhysNumber=charPhysNumber, charPhysOutSignalEntry=charPhysOutSignalEntry, charOutSignalName=charOutSignalName, charPhysFramingErrors=charPhysFramingErrors, charOutSignalState=charOutSignalState, intDomainSuffix=intDomainSuffix, charPhysInFlowState=charPhysInFlowState)
