#
# PySNMP MIB module BIANCA-BRICK-HDSL2SHDSL2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-HDSL2SHDSL2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:38:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
DisplayString, = mibBuilder.importSymbols("RFC1158-MIB", "DisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, Counter32, ObjectIdentity, iso, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, MibIdentifier, ModuleIdentity, Unsigned32, Integer32, Bits, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Counter32", "ObjectIdentity", "iso", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Integer32", "Bits", "NotificationType", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
hdsl2shdsl = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 35))
hdsl2ShdslLineMib = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 35, 1))
hdsl2ShdslMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1))
hdsl2ShdslInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 3), )
if mibBuilder.loadTexts: hdsl2ShdslInventoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslInventoryTable.setDescription('This table supports retrieval of unit inventory information available via the EOC from units in a HDSL2/SHDSL line. Entries in this table are dynamically created during the line discovery process. The life cycle for these entries is as follows: - xtu discovers a device, either a far-end xtu or an xru - an inventory table entry is created for the device - the line goes down for whatever reason - inventory table entries for unreachable devices are destroyed. As these entries are created/destroyed dynamically, they are NOT persistent.')
hdsl2ShdslInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 3, 1), ).setIndexNames((0, "BIANCA-BRICK-HDSL2SHDSL2-MIB", "hdsl2ShdslInvIfIndex"))
if mibBuilder.loadTexts: hdsl2ShdslInventoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslInventoryEntry.setDescription('An entry in the hdsl2ShdslInventoryTable. Each entry represents inventory information for a single unit in a HDSL2/SHDSL line. It is indexed by the ifIndex of the HDSL2/SHDSL line.')
hdsl2ShdslInvIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslInvIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslInvIfIndex.setDescription('This object specifies the associated interface index of this HDSL2/SHDSL line.')
hdsl2ShdslInvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("xtuC", 1), ("xtuR", 2), ("xru1", 3), ("xru2", 4), ("xru3", 5), ("xru4", 6), ("xru5", 7), ("xru6", 8), ("xru7", 9), ("xru8", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslInvIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslInvIndex.setDescription('Each entry in this table corresponds to a physical element in a HDSL2/SHDSL Span. It is based on the EOC unit addressing scheme with reference to the xtuC.')
hdsl2ShdslInvVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslInvVendorID.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslInvVendorID.setDescription('Vendor ID as reported in an Inventory Response message.')
hdsl2ShdslInvVendorModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslInvVendorModelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslInvVendorModelNumber.setDescription('Vendor model number as reported in an Inventory Response message.')
hdsl2ShdslInvVendorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslInvVendorSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslInvVendorSerialNumber.setDescription('Vendor serial number as reported in an Inventory Response message.')
hdsl2ShdslInvVendorEOCSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslInvVendorEOCSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslInvVendorEOCSoftwareVersion.setDescription('Vendor EOC version as reported in a Discovery Response message.')
hdsl2ShdslInvStandardVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslInvStandardVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslInvStandardVersion.setDescription('Version of the HDSL2/SHDSL standard implemented, as reported in an Inventory Response message.')
hdsl2ShdslInvVendorListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslInvVendorListNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslInvVendorListNumber.setDescription('Vendor list number as reported in an Inventory Response message.')
hdsl2ShdslInvVendorIssueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslInvVendorIssueNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslInvVendorIssueNumber.setDescription('Vendor issue number as reported in an Inventory Response message.')
hdsl2ShdslInvVendorSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslInvVendorSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslInvVendorSoftwareVersion.setDescription('Vendor software version as reported in an Inventory Response message.')
hdsl2ShdslInvEquipmentCode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslInvEquipmentCode.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslInvEquipmentCode.setDescription('Equipment code conforming to ANSI T1.213, Coded Identification of Equipment Entities.')
hdsl2ShdslInvVendorOther = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslInvVendorOther.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslInvVendorOther.setDescription('Other vendor information as reported in an Inventory Response message.')
hdsl2ShdslInvTransmissionModeCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("region1", 1), ("region2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslInvTransmissionModeCapability.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslInvTransmissionModeCapability.setDescription('Contains the transmission mode capability of the SHDSL unit: region1 - ITU-T G.991.2 Annex A region2 - ITU-T G.991.2 Annex B')
hdsl2ShdslEndpointConfTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 4), )
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfTable.setDescription('This table supports configuration parameters for segment endpoints in a HDSL2/SHDSL line. As this table is indexed by ifIndex, it MUST be maintained in a persistent manner. Entries in this table are created by the system only.')
hdsl2ShdslEndpointConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 4, 1), ).setIndexNames((0, "BIANCA-BRICK-HDSL2SHDSL2-MIB", "hdsl2ShdslEndpointConfIfIndex"))
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfEntry.setDescription('An entry in the hdsl2ShdslEndpointConfTable. Each entry represents a single segment endpoint in a HDSL2/SHDSL line. It is indexed by the ifIndex of the HDSL2/SHDSL line.')
hdsl2ShdslEndpointConfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfIfIndex.setDescription('This object specifies the associated interface index of this HDSL2/SHDSL line.')
hdsl2ShdslEndpointConfSide = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("networkSide", 1), ("customerSide", 2))).clone('customerSide')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfSide.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfSide.setDescription('The side of the unit associated with this segment endpoint - Network/Customer side - as per the Hdsl2ShdslUnitSide textual convention.')
hdsl2ShdslEndpointConfWireInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("twoWire", 1), ("fourWire", 2), ("fourWireStandard", 3), ("fourWireIMA", 4), ("sixWire", 5), ("sixWireIMA", 6), ("eightWire", 7), ("eightWireIMA", 8), ("not-used", 9), ("groupMember", 10), ("twoWireEFM", 11), ("fourWireEFM", 12), ("sixWireEFM", 13), ("eightWireEFM", 14))).clone('twoWire')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfWireInterface.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfWireInterface.setDescription('This object configures the bonding mode of the SHDSL Line. twoWire(1) : no bonding is used fourWire(2) : four-wire mode fourWireStandard(3) : four-wire mode, disable globespan enhanced mode fourWireIMA(4) : 2 wire pairs bonded with IMA sixWire(5) : 3 wire pairs in m-pair mode sixWireIMA(6) : 3 wire pairs bonded with IMA eightWire(7) : 4 wire pairs in m-pair mode eightWireIMA(8) : 4 wire pairs bonded with IMA not-used(9) : wire pair inactive groupMember(10) : wire pair belongs to a bonding group twoWireEFM(11) : 2 wire EFM mode fourWireEFM(12) : 2 wire pairs in EFM mode with PAF bonding sixWireEFM(13) : 3 wire pairs in EFM mode with PAF bonding eightWireEFM(14) : 4 wire pairs in EFM mode with PAF bonding')
hdsl2ShdslEndpointConfMinLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 22784000)).clone(1552000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfMinLineRate.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfMinLineRate.setDescription("This object configures the minimum transmission rate for the associated SHDSL Line in bits-per-second (bps). If the minimum line rate equals the maximum line rate (hdsl2ShdslSpanMaxLineRate), the line rate is considered 'fixed'. If the minimum line rate is less than the maximum line rate, the line rate is considered 'rate-adaptive'.")
hdsl2ShdslEndpointConfMaxLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 22784000)).clone(1552000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfMaxLineRate.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfMaxLineRate.setDescription("This object configures the maximum transmission rate for the associated SHDSL Line in bits-per-second (bps). If the minimum line rate equals the maximum line rate (hdsl2ShdslSpanMaxLineRate), the line rate is considered 'fixed'. If the minimum line rate is less than the maximum line rate, the line rate is considered 'rate-adaptive'.")
hdsl2ShdslEndpointConfTransmissionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("region1", 1), ("region2", 2), ("region1or2", 3))).clone('region1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfTransmissionMode.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfTransmissionMode.setDescription('This object specifies the regional setting for the SHDSL line: region1 - ITU-T G.991.2 Annex A region2 - ITU-T G.991.2 Annex B')
hdsl2ShdslEndpointConfWorstCaseTargetMarginDown = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfWorstCaseTargetMarginDown.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfWorstCaseTargetMarginDown.setDescription('This object specifies the downstream worst case target SNR margin for a SHDSL line. The SNR margin is the difference between the desired SNR and the actual SNR. Target SNR margin is the desired SNR margin for a unit.')
hdsl2ShdslEndpointConfWorstCaseTargetMarginUp = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfWorstCaseTargetMarginUp.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfWorstCaseTargetMarginUp.setDescription('This object specifies the upstream worst case target SNR margin for a SHDSL line. The SNR margin is the difference between the desired SNR and the actual SNR. Target SNR margin is the desired SNR margin for a unit.')
hdsl2ShdslEndpointConfGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfGroupId.setDescription('This object defines which wire-pairs belong to the same M-pair group or IMA group. Members of the same group have the same entry.')
hdsl2ShdslEndpointConfLineProbeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("disable", 2), ("enable", 3), ("enable-std", 4))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfLineProbeEnable.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfLineProbeEnable.setDescription('This object specifies the configuration of the PMMS behavior: auto - Line Probe is enabled if hdsl2ShdslEndpointConfMinLineRate < hdsl2ShdslEndpointConfMaxLineRate. disable - Line Probe is disabled. enable - Line Probe is enabled. enable_std - Line Probe is enabled and standard compliant behaviour is enforced.')
hdsl2ShdslEndpointConfLicenseUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("missing", 2), ("shdsl", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfLicenseUsage.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfLicenseUsage.setDescription('Shows which license type is currently used for this SHDSL interface.')
hdsl2ShdslEndpointConfPamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 252)).clone(48)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfPamMode.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfPamMode.setDescription('This object specifies which modulation modes are allowed for this wire pair. 16 - 16-TCPAM, used for Annex A,B and F,G. 32 - 32-TCPAM, used for Annex F,G only. 4, 8, 64, 128 - non standard proprietary modes. On CPE site more than one mode can be allowed by adding the values. On CO site only the highest mode is used if several values are added.')
hdsl2ShdslEndpointConfTotalMinLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50000000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfTotalMinLineRate.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfTotalMinLineRate.setDescription('This object configures the minimum transmission rate in bits-per-second (bps) for the associated SHDSL bundle. The associated interfaces go up only when the sum of the data rates of the associated wire pairs in state Showtime reaches or exceeds the specified value. This variable has no effect with single pair modes.')
hdsl2ShdslEndpointConfMinWirePairs = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfMinWirePairs.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfMinWirePairs.setDescription('This object configures the minimum number of wire pairs for the associated SHDSL bundle. The associated interfaces go up only when at least the specified number of wire pairs is connected and in Showtime. This variable has no effect with single pair modes.')
hdsl2ShdslEndpointConfCapListStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("old", 2), ("new", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfCapListStyle.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointConfCapListStyle.setDescription('This object specifies the data format of the capability list, that is exchanged during the G.994.1 handshake: auto - automatic detection of the used capability list style. old - only ATM modes till 2312 kbps can be negotiated. new - all modes can be negotiated.')
hdsl2ShdslEndpointCurrTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5), )
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurrTable.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurrTable.setDescription('This table contains current status and performance information for segment endpoints in HDSL2/SHDSL Lines. As with other tables in this MIB indexed by ifIndex, entries in this table MUST be maintained in a persistent manner. Entries in this table are created by the system only.')
hdsl2ShdslEndpointCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1), ).setIndexNames((0, "BIANCA-BRICK-HDSL2SHDSL2-MIB", "hdsl2ShdslEndpointCurrIfIndex"))
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurrEntry.setDescription('An entry in the hdsl2ShdslEndpointCurrTable. Each entry contains status and performance information relating to a single segment endpoint. It is indexed by the ifIndex of the HDSL2/SHDSL line.')
hdsl2ShdslEndpointCurrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurrIfIndex.setDescription('This object specifies the associated interface index of this HDSL2/SHDSL line.')
hdsl2ShdslEndpointCurrReceivedBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurrReceivedBlks.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurrReceivedBlks.setDescription('Count of all encoded blocks received on this channel since agent reset.')
hdsl2ShdslEndpointCurrTransmittedBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurrTransmittedBlks.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurrTransmittedBlks.setDescription('Count of all encoded blocks transmitted on this channel since agent reset.')
hdsl2ShdslEndpointCurrCorrectedBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurrCorrectedBlks.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurrCorrectedBlks.setDescription('Count of all blocks received with errors that were corrected since agent reset. These blocks are passed on as good data.')
hdsl2ShdslEndpointCurrUncorrectBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurrUncorrectBlks.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurrUncorrectBlks.setDescription('Count of all blocks received with uncorrectable errors since agent reset.')
hdsl2ShdslEndpointCurrAtn = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurrAtn.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurrAtn.setDescription('The current loop attenuation for this endpoint as reported in a Network or Customer Side Performance Status message.')
hdsl2ShdslEndpointCurrSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurrSnrMgn.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurrSnrMgn.setDescription('The current SNR margin for this endpoint as reported in a Status Response/SNR message.')
hdsl2ShdslEndpointCurrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noDefect", 1), ("powerBackoff", 2), ("deviceFault", 3), ("dcContinuityFault", 4), ("snrMarginAlarm", 5), ("loswFailureAlarm", 7), ("configInitFailure", 8), ("protocolInitFailure", 9), ("noNeighborPresent", 10), ("loopbackActive", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurrStatus.setDescription('Contains the current state of the endpoint. This is a bitmap of possible conditions. The various bit positions are: noDefect There no defects on the line. powerBackoff Indicates enhanced Power Backoff. deviceFault Indicates a vendor-dependent diagnostic or self-test fault has been detected. dcContinuityFault Indicates vendor-dependent conditions that interfere with span powering such as short and open circuits. snrMarginAlarm Indicates that the SNR margin has dropped below the alarm threshold. loopAttenuationAlarm Indicates that the loop attenuation exceeds the alarm threshold. (not supported by GlobeSpan !) loswFailureAlarm Indicates a forward LOSW alarm. configInitFailure Endpoint failure during initialization due to paired endpoint not able to support requested configuration. protocolInitFailure Endpoint failure during initialization due to incompatible protocol used by the paired endpoint. noNeighborPresent Endpoint failure during initialization due to no activation sequence detected from paired endpoint. loopbackActive A loopback is currently active at this Segment Endpoint. This is intended to supplement ifOperStatus. Note that there is a 1-1 relationship between the status bits defined in this object and the notification thresholds defined elsewhere in this MIB.')
hdsl2ShdslEndpointES = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointES.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointES.setDescription('Count of Errored Seconds (ES) on this endpoint since the xU was last restarted.')
hdsl2ShdslEndpointSES = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointSES.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointSES.setDescription('Count of Severely Errored Seconds (SES) on this endpoint since the xU was last restarted.')
hdsl2ShdslEndpointCRCanomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCRCanomalies.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCRCanomalies.setDescription('Count of CRC anomalies on this endpoint since the xU was last restarted.')
hdsl2ShdslEndpointLOSWS = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointLOSWS.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointLOSWS.setDescription('Count of Loss of Sync Word (LOSW) Seconds on this endpoint since the xU was last restarted.')
hdsl2ShdslEndpointUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointUAS.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointUAS.setDescription('Count of Unavailable Seconds (UAS) on this endpoint since the xU was last restarted.')
hdsl2ShdslEndpointCurr15MinReceivedBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr15MinReceivedBlks.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr15MinReceivedBlks.setDescription('Count of all encoded blocks received on this channel within the mandatory 15 minute interval.')
hdsl2ShdslEndpointCurr15MinTransmittedBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr15MinTransmittedBlks.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr15MinTransmittedBlks.setDescription('Count of all encoded blocks transmitted on this channel within the mandatory 15 minute interval.')
hdsl2ShdslEndpointCurr15MinCorrectedBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr15MinCorrectedBlks.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr15MinCorrectedBlks.setDescription('Count of all blocks received with errors that were corrected on this channel within the mandatory 15 minute interval.')
hdsl2ShdslEndpointCurr15MinUncorrectBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr15MinUncorrectBlks.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr15MinUncorrectBlks.setDescription('Count of all blocks received with uncorrectable errors on this channel within the mandatory 15 minute interval.')
hdsl2ShdslEndpointCurr15MinTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr15MinTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr15MinTimeElapsed.setDescription('Total elapsed seconds in the current 15-minute interval.')
hdsl2ShdslEndpointCurr15MinES = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr15MinES.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr15MinES.setDescription('Count of Errored Seconds (ES) in the current 15-minute interval.')
hdsl2ShdslEndpointCurr15MinSES = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr15MinSES.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr15MinSES.setDescription('Count of Severely Errored Seconds (SES) in the current 15-minute interval.')
hdsl2ShdslEndpointCurr15MinCRCanomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr15MinCRCanomalies.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr15MinCRCanomalies.setDescription('Count of CRC anomalies in the current 15-minute interval.')
hdsl2ShdslEndpointCurr15MinLOSWS = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr15MinLOSWS.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr15MinLOSWS.setDescription('Count of Loss of Sync Word (LOSW) Seconds in the current 15-minute interval.')
hdsl2ShdslEndpointCurr15MinUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr15MinUAS.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr15MinUAS.setDescription('Count of Unavailable Seconds (UAS) in the current 15-minute interval.')
hdsl2ShdslEndpointCurr1DayReceivedBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr1DayReceivedBlks.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr1DayReceivedBlks.setDescription('Count of all encoded blocks received on this channel during the mandatory day as measured by hdsl2ShdslEndpointCurr1DayTimeElapsed.')
hdsl2ShdslEndpointCurr1DayTransmittedBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr1DayTransmittedBlks.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr1DayTransmittedBlks.setDescription('Count of all encoded blocks transmitted on this channel during the mandatory day as measured by hdsl2ShdslEndpointCurr1DayTimeElapsed.')
hdsl2ShdslEndpointCurr1DayCorrectedBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr1DayCorrectedBlks.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr1DayCorrectedBlks.setDescription('Count of all blocks received with errors that were corrected on this channel during the mandatory day as measured by hdsl2ShdslEndpointCurr1DayTimeElapsed.')
hdsl2ShdslEndpointCurr1DayUncorrectBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr1DayUncorrectBlks.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr1DayUncorrectBlks.setDescription('Count of all blocks received with uncorrectable errors on this channel during the mandatory day as measured by hdsl2ShdslEndpointCurr1DayTimeElapsed.')
hdsl2ShdslEndpointCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr1DayTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr1DayTimeElapsed.setDescription('Number of seconds that have elapsed since the beginning of the current 1-day interval.')
hdsl2ShdslEndpointCurr1DayES = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr1DayES.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr1DayES.setDescription('Count of Errored Seconds (ES) during the current day as measured by hdsl2ShdslEndpointCurr1DayTimeElapsed.')
hdsl2ShdslEndpointCurr1DaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr1DaySES.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr1DaySES.setDescription('Count of Severely Errored Seconds (SES) during the current day as measured by hdsl2ShdslEndpointCurr1DayTimeElapsed.')
hdsl2ShdslEndpointCurr1DayCRCanomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr1DayCRCanomalies.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr1DayCRCanomalies.setDescription('Count of CRC anomalies during the current day as measured by hdsl2ShdslEndpointCurr1DayTimeElapsed.')
hdsl2ShdslEndpointCurr1DayLOSWS = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr1DayLOSWS.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr1DayLOSWS.setDescription('Count of Loss of Sync Word (LOSW) Seconds during the current day as measured by hdsl2ShdslEndpointCurr1DayTimeElapsed.')
hdsl2ShdslEndpointCurr1DayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 5, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr1DayUAS.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslEndpointCurr1DayUAS.setDescription('Count of Unavailable Seconds (UAS) during the current day as measured by hdsl2ShdslEndpointCurr1DayTimeElapsed.')
hdsl2ShdslSpanConfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 10), )
if mibBuilder.loadTexts: hdsl2ShdslSpanConfProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslSpanConfProfileTable.setDescription('This table supports definitions of span configuration profiles for SHDSL lines. HDSL2 does not support these configuration options. This table MUST be maintained in a persistent manner. Entries in this table are created by the system only.')
hdsl2ShdslSpanConfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 10, 1), ).setIndexNames((0, "BIANCA-BRICK-HDSL2SHDSL2-MIB", "hdsl2ShdslSpanConfProfileName"))
if mibBuilder.loadTexts: hdsl2ShdslSpanConfProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslSpanConfProfileEntry.setDescription('Each entry corresponds to a single span configuration profile. Each profile contains a set of span configuration parameters. The configuration parameters in a profile are applied to those lines referencing that profile (see the hdsl2ShdslSpanConfProfile object). Profiles may be created/deleted only by the system.')
hdsl2ShdslSpanConfProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl2ShdslSpanConfProfileName.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslSpanConfProfileName.setDescription('This object is the unique index associated with this profile. Entries in this table are referenced via the object hdsl2ShdslSpanConfProfile in Hdsl2ShdslSpanConfEntry.')
hdsl2ShdslSpanConfWireInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("twoWire", 1), ("fourWire", 2), ("fourWireStandard", 3), ("fourWireIMA", 4), ("sixWire", 5), ("sixWireIMA", 6), ("eightWire", 7), ("eightWireIMA", 8), ("not-used", 9), ("groupMember", 10), ("twoWireEFM", 11), ("fourWireEFM", 12), ("sixWireEFM", 13), ("eightWireEFM", 14))).clone('twoWire')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdsl2ShdslSpanConfWireInterface.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslSpanConfWireInterface.setDescription('This object configures the bonding mode of the SHDSL Line. twoWire(1) : no bonding is used fourWire(2) : four-wire mode fourWireStandard(3) : four-wire mode, disable globespan enhanced mode fourWireIMA(4) : 2 wire pairs bonded with IMA sixWire(5) : 3 wire pairs in m-pair mode sixWireIMA(6) : 3 wire pairs bonded with IMA eightWire(7) : 4 wire pairs in m-pair mode eightWireIMA(8) : 4 wire pairs bonded with IMA not-used(9) : wire pair inactive groupMember(10) : wire pair belongs to a bonding group twoWireEFM(11) : 2 wire EFM mode fourWireEFM(12) : 2 wire pairs in EFM mode with PAF bonding sixWireEFM(13) : 3 wire pairs in EFM mode with PAF bonding eightWireEFM(14) : 4 wire pairs in EFM mode with PAF bonding')
hdsl2ShdslSpanConfMinLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 22784000)).clone(1552000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdsl2ShdslSpanConfMinLineRate.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslSpanConfMinLineRate.setDescription("This object configures the minimum transmission rate for the associated SHDSL Line in bits-per-second (bps). If the minimum line rate equals the maximum line rate (hdsl2ShdslSpanMaxLineRate), the line rate is considered 'fixed'. If the minimum line rate is less than the maximum line rate, the line rate is considered 'rate-adaptive'.")
hdsl2ShdslSpanConfMaxLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 22784000)).clone(1552000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdsl2ShdslSpanConfMaxLineRate.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslSpanConfMaxLineRate.setDescription("This object configures the maximum transmission rate for the associated SHDSL Line in bits-per-second (bps). If the minimum line rate equals the maximum line rate (hdsl2ShdslSpanMaxLineRate), the line rate is considered 'fixed'. If the minimum line rate is less than the maximum line rate, the line rate is considered 'rate-adaptive'.")
hdsl2ShdslSpanConfTransmissionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("region1", 1), ("region2", 2), ("region1or2", 3))).clone('region1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdsl2ShdslSpanConfTransmissionMode.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslSpanConfTransmissionMode.setDescription('This object specifies the regional setting for the SHDSL line: region1 - ITU-T G.991.2 Annex A region2 - ITU-T G.991.2 Annex B')
hdsl2ShdslSpanConfWorstCaseTargetMarginDown = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdsl2ShdslSpanConfWorstCaseTargetMarginDown.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslSpanConfWorstCaseTargetMarginDown.setDescription('This object specifies the downstream worst case target SNR margin for a SHDSL line. The SNR margin is the difference between the desired SNR and the actual SNR. Target SNR margin is the desired SNR margin for a unit.')
hdsl2ShdslSpanConfWorstCaseTargetMarginUp = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 35, 1, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdsl2ShdslSpanConfWorstCaseTargetMarginUp.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl2ShdslSpanConfWorstCaseTargetMarginUp.setDescription('This object specifies the upstream worst case target SNR margin for a SHDSL line. The SNR margin is the difference between the desired SNR and the actual SNR. Target SNR margin is the desired SNR margin for a unit.')
mibBuilder.exportSymbols("BIANCA-BRICK-HDSL2SHDSL2-MIB", hdsl2ShdslEndpointCurr1DayLOSWS=hdsl2ShdslEndpointCurr1DayLOSWS, hdsl2ShdslEndpointConfWireInterface=hdsl2ShdslEndpointConfWireInterface, hdsl2ShdslEndpointConfMaxLineRate=hdsl2ShdslEndpointConfMaxLineRate, bibo=bibo, hdsl2ShdslSpanConfProfileTable=hdsl2ShdslSpanConfProfileTable, hdsl2ShdslEndpointConfLineProbeEnable=hdsl2ShdslEndpointConfLineProbeEnable, hdsl2ShdslInvEquipmentCode=hdsl2ShdslInvEquipmentCode, hdsl2ShdslMibObjects=hdsl2ShdslMibObjects, hdsl2ShdslEndpointCurr15MinReceivedBlks=hdsl2ShdslEndpointCurr15MinReceivedBlks, hdsl2ShdslInvVendorOther=hdsl2ShdslInvVendorOther, hdsl2ShdslEndpointCurr1DayTransmittedBlks=hdsl2ShdslEndpointCurr1DayTransmittedBlks, hdsl2ShdslLineMib=hdsl2ShdslLineMib, hdsl2ShdslEndpointCurrSnrMgn=hdsl2ShdslEndpointCurrSnrMgn, hdsl2ShdslInvTransmissionModeCapability=hdsl2ShdslInvTransmissionModeCapability, hdsl2ShdslEndpointCurr1DayTimeElapsed=hdsl2ShdslEndpointCurr1DayTimeElapsed, hdsl2shdsl=hdsl2shdsl, hdsl2ShdslSpanConfMinLineRate=hdsl2ShdslSpanConfMinLineRate, hdsl2ShdslEndpointCurrStatus=hdsl2ShdslEndpointCurrStatus, hdsl2ShdslEndpointCurr1DayCorrectedBlks=hdsl2ShdslEndpointCurr1DayCorrectedBlks, hdsl2ShdslEndpointCurr15MinLOSWS=hdsl2ShdslEndpointCurr15MinLOSWS, hdsl2ShdslEndpointConfWorstCaseTargetMarginDown=hdsl2ShdslEndpointConfWorstCaseTargetMarginDown, hdsl2ShdslEndpointConfWorstCaseTargetMarginUp=hdsl2ShdslEndpointConfWorstCaseTargetMarginUp, hdsl2ShdslEndpointCurrTransmittedBlks=hdsl2ShdslEndpointCurrTransmittedBlks, hdsl2ShdslSpanConfProfileEntry=hdsl2ShdslSpanConfProfileEntry, hdsl2ShdslEndpointConfIfIndex=hdsl2ShdslEndpointConfIfIndex, hdsl2ShdslEndpointConfCapListStyle=hdsl2ShdslEndpointConfCapListStyle, hdsl2ShdslEndpointCurrEntry=hdsl2ShdslEndpointCurrEntry, hdsl2ShdslEndpointConfGroupId=hdsl2ShdslEndpointConfGroupId, hdsl2ShdslEndpointSES=hdsl2ShdslEndpointSES, hdsl2ShdslEndpointCurrAtn=hdsl2ShdslEndpointCurrAtn, hdsl2ShdslEndpointES=hdsl2ShdslEndpointES, hdsl2ShdslEndpointCurr1DaySES=hdsl2ShdslEndpointCurr1DaySES, hdsl2ShdslEndpointCurr15MinTransmittedBlks=hdsl2ShdslEndpointCurr15MinTransmittedBlks, hdsl2ShdslEndpointCRCanomalies=hdsl2ShdslEndpointCRCanomalies, hdsl2ShdslSpanConfTransmissionMode=hdsl2ShdslSpanConfTransmissionMode, hdsl2ShdslInvIfIndex=hdsl2ShdslInvIfIndex, hdsl2ShdslEndpointCurr15MinTimeElapsed=hdsl2ShdslEndpointCurr15MinTimeElapsed, hdsl2ShdslInvVendorModelNumber=hdsl2ShdslInvVendorModelNumber, hdsl2ShdslSpanConfWorstCaseTargetMarginUp=hdsl2ShdslSpanConfWorstCaseTargetMarginUp, hdsl2ShdslEndpointCurr15MinUncorrectBlks=hdsl2ShdslEndpointCurr15MinUncorrectBlks, hdsl2ShdslEndpointLOSWS=hdsl2ShdslEndpointLOSWS, hdsl2ShdslEndpointCurr1DayUAS=hdsl2ShdslEndpointCurr1DayUAS, hdsl2ShdslEndpointConfTotalMinLineRate=hdsl2ShdslEndpointConfTotalMinLineRate, hdsl2ShdslEndpointCurrCorrectedBlks=hdsl2ShdslEndpointCurrCorrectedBlks, hdsl2ShdslSpanConfWireInterface=hdsl2ShdslSpanConfWireInterface, hdsl2ShdslInvVendorSoftwareVersion=hdsl2ShdslInvVendorSoftwareVersion, hdsl2ShdslEndpointCurrReceivedBlks=hdsl2ShdslEndpointCurrReceivedBlks, hdsl2ShdslInventoryTable=hdsl2ShdslInventoryTable, hdsl2ShdslEndpointCurr15MinCRCanomalies=hdsl2ShdslEndpointCurr15MinCRCanomalies, hdsl2ShdslEndpointConfTransmissionMode=hdsl2ShdslEndpointConfTransmissionMode, hdsl2ShdslSpanConfWorstCaseTargetMarginDown=hdsl2ShdslSpanConfWorstCaseTargetMarginDown, hdsl2ShdslInvVendorListNumber=hdsl2ShdslInvVendorListNumber, hdsl2ShdslEndpointConfTable=hdsl2ShdslEndpointConfTable, hdsl2ShdslEndpointConfPamMode=hdsl2ShdslEndpointConfPamMode, hdsl2ShdslEndpointCurr15MinES=hdsl2ShdslEndpointCurr15MinES, hdsl2ShdslEndpointConfEntry=hdsl2ShdslEndpointConfEntry, hdsl2ShdslEndpointCurrUncorrectBlks=hdsl2ShdslEndpointCurrUncorrectBlks, hdsl2ShdslInvVendorIssueNumber=hdsl2ShdslInvVendorIssueNumber, hdsl2ShdslEndpointConfLicenseUsage=hdsl2ShdslEndpointConfLicenseUsage, hdsl2ShdslInventoryEntry=hdsl2ShdslInventoryEntry, hdsl2ShdslEndpointCurr1DayES=hdsl2ShdslEndpointCurr1DayES, hdsl2ShdslInvVendorSerialNumber=hdsl2ShdslInvVendorSerialNumber, bintec=bintec, hdsl2ShdslEndpointCurr1DayUncorrectBlks=hdsl2ShdslEndpointCurr1DayUncorrectBlks, hdsl2ShdslInvVendorEOCSoftwareVersion=hdsl2ShdslInvVendorEOCSoftwareVersion, hdsl2ShdslInvIndex=hdsl2ShdslInvIndex, hdsl2ShdslEndpointUAS=hdsl2ShdslEndpointUAS, hdsl2ShdslEndpointConfMinWirePairs=hdsl2ShdslEndpointConfMinWirePairs, hdsl2ShdslEndpointCurrIfIndex=hdsl2ShdslEndpointCurrIfIndex, hdsl2ShdslInvStandardVersion=hdsl2ShdslInvStandardVersion, hdsl2ShdslEndpointCurrTable=hdsl2ShdslEndpointCurrTable, hdsl2ShdslEndpointConfMinLineRate=hdsl2ShdslEndpointConfMinLineRate, hdsl2ShdslEndpointCurr1DayCRCanomalies=hdsl2ShdslEndpointCurr1DayCRCanomalies, hdsl2ShdslInvVendorID=hdsl2ShdslInvVendorID, hdsl2ShdslEndpointConfSide=hdsl2ShdslEndpointConfSide, hdsl2ShdslEndpointCurr15MinSES=hdsl2ShdslEndpointCurr15MinSES, hdsl2ShdslSpanConfMaxLineRate=hdsl2ShdslSpanConfMaxLineRate, hdsl2ShdslEndpointCurr1DayReceivedBlks=hdsl2ShdslEndpointCurr1DayReceivedBlks, hdsl2ShdslEndpointCurr15MinCorrectedBlks=hdsl2ShdslEndpointCurr15MinCorrectedBlks, hdsl2ShdslSpanConfProfileName=hdsl2ShdslSpanConfProfileName, hdsl2ShdslEndpointCurr15MinUAS=hdsl2ShdslEndpointCurr15MinUAS)
