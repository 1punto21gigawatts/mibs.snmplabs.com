#
# PySNMP MIB module HPVC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPVC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:42:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, zeroDotZero, Integer32, NotificationType, enterprises, Bits, TimeTicks, Counter32, Counter64, Unsigned32, ObjectIdentity, mib_2, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "zeroDotZero", "Integer32", "NotificationType", "enterprises", "Bits", "TimeTicks", "Counter32", "Counter64", "Unsigned32", "ObjectIdentity", "mib-2", "IpAddress")
TextualConvention, TimeStamp, TruthValue, RowPointer, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "TruthValue", "RowPointer", "DisplayString")
TransportAddressType, TransportAddress = mibBuilder.importSymbols("TRANSPORT-ADDRESS-MIB", "TransportAddressType", "TransportAddress")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
hpSysMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5))
hpEmbeddedServerMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7))
hpModuleMgmtProc = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5))
virtualConnect = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2))
vcDomainMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1))
vcDomainMIB.setRevisions(('2008-12-08 00:00', '2009-01-08 00:00', '2009-02-17 00:00', '2009-06-27 00:00', '2010-03-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: vcDomainMIB.setRevisionsDescriptions(('Draft-0. Initial cut. -Jitendra Vegiraju', 'Draft-1. Moved vcModuleRole to VC Module MIB Modified the vcProfileNetworkMap and vcProfileFcFabricMap table to include port number as secondary index. -Jitendra Vegiraju', 'Draft-2. Added enclosure UUID object to Vcenclosuretable. Added traps for server status change and profile status change. -Jitendra Vegiraju', 'Draft-3. Changed vcDomainLastCheckpointTime to SnmpAdminString type. -Jitendra Vegiraju', 'Draft-4. Changed the description of vcCheckpointTimeout and vcCheckpointCompleted to be more specific on when these traps are sent. -Tony Cureington',))
if mibBuilder.loadTexts: vcDomainMIB.setLastUpdated('200810080000Z')
if mibBuilder.loadTexts: vcDomainMIB.setOrganization('Hewlett-Packard Company')
if mibBuilder.loadTexts: vcDomainMIB.setContactInfo('Robert Teisberg Hewlett-Packard Company. Email: robert.teisberg@hp.com')
if mibBuilder.loadTexts: vcDomainMIB.setDescription('This MIB module describes Virtual Connect (VC) domain level MIB objects for HP Virtual Connect Manager (VCM). The VCM is responsible for managing an entire Virtual Connect (VC) domain. This MIB module reports all managed objects with in the VC domain,such as VC Ethernet modules (Enet), VC FibreChannel (FC) modules, Physical Servers, network, fabrics, server profiles and associations between various VC objects. Keeping the limitations of SMI specifications in mind, the complex relationships between VC objects are represented in the form of mapping tables with appropriate index values to indicate the assoications.')
vcDomainMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1))
vcDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 1))
vcEnclosure = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 2))
vcModule = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3))
vcPort = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 4))
vcPhysicalServer = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 5))
vcEnetNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 6))
vcFcFabric = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 7))
vcProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 8))
vcEnetNetworkVcPortMap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 9))
vcFcFabricVcPortMap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 10))
vcProfileNetworkMap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 11))
vcProfileFcFabricMap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 12))
class VcManagedStatus(TextualConvention, Integer32):
    description = 'The managed status of a virtual Connect object. The enumerations are described below: unknown(1), normal(2), warning(3), minor(4), major(5), critical(6), disabled(7), info(8)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("unknown", 1), ("normal", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6), ("disabled", 7), ("info", 8))

class VcDomainModuleRole(TextualConvention, Integer32):
    description = 'The virtual connect manager role of this module. The enumerations are described below: unintegrated - module is not a member of a domain primaryProtected - module is VCM primary, and a VCM standby exists primaryUnprotected - module is VCM primary, and no VCM standby exists standby - module is VCM standby other - module is not able to host VCM For roles other than primaryProtected and primaryUnprotected, the only populated objects are: domainModuleRole, domainPrimaryAddressType, domainPrimary, checkpointState '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unintegrated", 1), ("primaryProtected", 2), ("primaryUnprotected", 3), ("standby", 4), ("other", 5))

class VcModuleType(TextualConvention, Integer32):
    description = 'The virtual connect interconnect module type. The enumerations are described below: vcModuleEnet - VC-Enet module vcModuleFC - VC-FC module vcModuleOther - Unknown module or a module not suppported by VC '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("vcModuleEnet", 1), ("vcModuleFC", 2), ("vcModuleOther", 3))

class VcPortType(TextualConvention, Integer32):
    description = 'The virtual connect port type. The enumerations are described below: vcEnetPhysicalPort - A physical port on VC-Enet module vcEnetLogicallPort - A logical port on VC-Enet module (e.g., a Flex-10 subport) vcFCPort - A physical port on VC-FC module '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("vcEnetPhysicalPort", 1), ("vcEnetLogicallPort", 2), ("vcFCPort", 3))

vcDomainName = MibScalar((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDomainName.setStatus('current')
if mibBuilder.loadTexts: vcDomainName.setDescription('The Virtual Connect Domain name.')
vcDomainManagedStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 1, 2), VcManagedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDomainManagedStatus.setStatus('current')
if mibBuilder.loadTexts: vcDomainManagedStatus.setDescription('The overall domain status of the Virtual Connect Domain.')
vcDomainPrimaryAddressType = MibScalar((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 1, 3), TransportAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDomainPrimaryAddressType.setStatus('current')
if mibBuilder.loadTexts: vcDomainPrimaryAddressType.setDescription('The transport address type used to address the primary VC module.')
vcDomainPrimaryAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 1, 4), TransportAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDomainPrimaryAddress.setStatus('current')
if mibBuilder.loadTexts: vcDomainPrimaryAddress.setDescription('The address of the primary VC module. The address format is determined by the vcDomainPrimaryAddressType object.')
vcDomainCheckpointValid = MibScalar((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDomainCheckpointValid.setStatus('current')
if mibBuilder.loadTexts: vcDomainCheckpointValid.setDescription("This object returns 'true' when the VC configuration has been successfully checkpointed.")
vcDomainLastCheckpointTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDomainLastCheckpointTime.setStatus('current')
if mibBuilder.loadTexts: vcDomainLastCheckpointTime.setDescription('The timestamp of the last attempt to update the configuration state of the domain.')
vcDomainStackingLinkRedundant = MibScalar((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDomainStackingLinkRedundant.setStatus('current')
if mibBuilder.loadTexts: vcDomainStackingLinkRedundant.setDescription('The overall stacking link connection redundancy status. This value indicates whether all VC-Enet modules will remain connected to each other with the loss of a link.')
vcEnclosureTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: vcEnclosureTable.setStatus('current')
if mibBuilder.loadTexts: vcEnclosureTable.setDescription('A table of enclosures in the Virtual Connect Domain.')
vcEnclosureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcEnclosureIndex"))
if mibBuilder.loadTexts: vcEnclosureEntry.setStatus('current')
if mibBuilder.loadTexts: vcEnclosureEntry.setDescription('An entry containing information about a particular enclosure.')
vcEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnclosureIndex.setStatus('current')
if mibBuilder.loadTexts: vcEnclosureIndex.setDescription('Index value for the enclosure table.')
vcEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnclosureName.setStatus('current')
if mibBuilder.loadTexts: vcEnclosureName.setDescription('Administratively assigned name for the enclosure.')
vcEnclosureManagedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 2, 1, 1, 3), VcManagedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnclosureManagedStatus.setStatus('current')
if mibBuilder.loadTexts: vcEnclosureManagedStatus.setDescription('Managed status of the enclusure.')
vcEnclosureAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 2, 1, 1, 4), TransportAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnclosureAddressType.setStatus('current')
if mibBuilder.loadTexts: vcEnclosureAddressType.setDescription("The transport address type used to address the enclosure's management entity.")
vcEnclosureAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 2, 1, 1, 5), TransportAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnclosureAddress.setStatus('current')
if mibBuilder.loadTexts: vcEnclosureAddress.setDescription("The address of the enclosure's management entity. The address format is determined by the vcEnclosureAddressType object.")
vcEnclosureUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 2, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnclosureUUID.setStatus('current')
if mibBuilder.loadTexts: vcEnclosureUUID.setDescription('UUID value for the enclosure.')
vcModuleTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1), )
if mibBuilder.loadTexts: vcModuleTable.setStatus('current')
if mibBuilder.loadTexts: vcModuleTable.setDescription('A table of VC interconnect modules in the Virtual Connect Domain.')
vcModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcModuleIndex"))
if mibBuilder.loadTexts: vcModuleEntry.setStatus('current')
if mibBuilder.loadTexts: vcModuleEntry.setDescription('An entry containing information about a single interconnect module.')
vcModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleIndex.setStatus('current')
if mibBuilder.loadTexts: vcModuleIndex.setDescription('Index value for the vcModuleTable.')
vcModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 2), VcModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleType.setStatus('current')
if mibBuilder.loadTexts: vcModuleType.setDescription('The VC interconnect module type.')
vcModuleManagedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 3), VcManagedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleManagedStatus.setStatus('current')
if mibBuilder.loadTexts: vcModuleManagedStatus.setDescription('The overall managed status of the vcEnetModule.')
vcModulePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModulePartNumber.setStatus('current')
if mibBuilder.loadTexts: vcModulePartNumber.setDescription('The part number of the VC module.')
vcModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleSerialNumber.setStatus('current')
if mibBuilder.loadTexts: vcModuleSerialNumber.setDescription('The serial number of the VC module.')
vcModuleProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleProductName.setStatus('current')
if mibBuilder.loadTexts: vcModuleProductName.setDescription('The product name of the VC module.')
vcModuleFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleFwRev.setStatus('current')
if mibBuilder.loadTexts: vcModuleFwRev.setDescription('The revision number of the firmware running on this Enet module.')
vcModuleEnclosurePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleEnclosurePointer.setStatus('current')
if mibBuilder.loadTexts: vcModuleEnclosurePointer.setDescription('A reference pointer into vcEnclosureTable that contains enclosure information for the enclosure associated with this vcModule.')
vcModuleLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleLocation.setStatus('current')
if mibBuilder.loadTexts: vcModuleLocation.setDescription('The interconnect bay number associated with this VC module.')
vcModuleAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 10), TransportAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleAddressType.setStatus('current')
if mibBuilder.loadTexts: vcModuleAddressType.setDescription("The transport address type used to address the EnetModule's management entity.")
vcModuleAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 11), TransportAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleAddress.setStatus('current')
if mibBuilder.loadTexts: vcModuleAddress.setDescription('The address of the SNMP agent on the VC module. The address format is determined by the vcModuleAddressType object.')
vcModuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleID.setStatus('current')
if mibBuilder.loadTexts: vcModuleID.setDescription('Unique identifier for the VC module. This object contains reports the following values, - MAC address for Enet module. - WWN address for FC modules.')
vcPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 4, 1), )
if mibBuilder.loadTexts: vcPortTable.setStatus('current')
if mibBuilder.loadTexts: vcPortTable.setDescription('A table of ports in the Virtual Connect Domain. Ports include physical network ports (uplinks, server links, stacking links, and unconnected), logical network ports (Flex-10 subports on downlinks), and Fibre Channel ports (uplinks and downlinks).')
vcPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 4, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcPortIndex"))
if mibBuilder.loadTexts: vcPortEntry.setStatus('current')
if mibBuilder.loadTexts: vcPortEntry.setDescription('An entry continaing information about a particular ethernet port.')
vcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPortIndex.setStatus('current')
if mibBuilder.loadTexts: vcPortIndex.setDescription('Index value for the vcPort table.')
vcPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 4, 1, 1, 2), VcPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPortType.setStatus('current')
if mibBuilder.loadTexts: vcPortType.setDescription('Indicates the VC port type.')
vcPortManagedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 4, 1, 1, 3), VcManagedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPortManagedStatus.setStatus('current')
if mibBuilder.loadTexts: vcPortManagedStatus.setDescription('Managed status of the vcPort.')
vcPortManagerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 4, 1, 1, 4), TransportAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPortManagerAddressType.setStatus('current')
if mibBuilder.loadTexts: vcPortManagerAddressType.setDescription("The transport address type used to address the EnetModule's management entity.")
vcPortManagerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 4, 1, 1, 5), TransportAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPortManagerAddress.setStatus('current')
if mibBuilder.loadTexts: vcPortManagerAddress.setDescription('The address of the SNMP agent on the VC module. The address format is determined by the vcPortManagerAddressType object.')
vcPortPhysicalPortPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 4, 1, 1, 6), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPortPhysicalPortPointer.setStatus('current')
if mibBuilder.loadTexts: vcPortPhysicalPortPointer.setDescription("reference to the table entry for the physical port in the containing module's MIB. The referenced table depends on the port type: vcEnetPhysicalPort: ifTable vcEnetLogicalPort : ifTable of corresponding physical port vcFCPort : connUnitPortTable ")
vcPortContainerPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 4, 1, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPortContainerPointer.setStatus('current')
if mibBuilder.loadTexts: vcPortContainerPointer.setDescription('reference to the table entry in the VC Domain MIB for the component which contains this port: vcEnetPhysicalPort: vcModuleTable vcEnetLogicalPort : vcPortTable (for the physical port containing this Flex-10 subport) vcFCPort: vcModuleTable ')
vcPhysicalServerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 5, 1), )
if mibBuilder.loadTexts: vcPhysicalServerTable.setStatus('current')
if mibBuilder.loadTexts: vcPhysicalServerTable.setDescription('A table of server bay devices in the Virtual Connect Domain.')
vcPhysicalServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 5, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcPhysicalServerIndex"))
if mibBuilder.loadTexts: vcPhysicalServerEntry.setStatus('current')
if mibBuilder.loadTexts: vcPhysicalServerEntry.setDescription('VC PhysicalServer bay (server bay) table entry.')
vcPhysicalServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPhysicalServerIndex.setStatus('current')
if mibBuilder.loadTexts: vcPhysicalServerIndex.setDescription('Index value for the vcPhysicalServer table.')
vcPhysicalServerEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPhysicalServerEnclosureIndex.setStatus('current')
if mibBuilder.loadTexts: vcPhysicalServerEnclosureIndex.setDescription('Index value for the enclosure in vcEnclosureTable containing this server.')
vcPhysicalServerManagedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 5, 1, 1, 3), VcManagedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPhysicalServerManagedStatus.setStatus('current')
if mibBuilder.loadTexts: vcPhysicalServerManagedStatus.setDescription('Managed status of the vcPhysicalServer.')
vcPhysicalServerPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 5, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPhysicalServerPartNumber.setStatus('current')
if mibBuilder.loadTexts: vcPhysicalServerPartNumber.setDescription('The part number of the Physical Server.')
vcPhysicalServerSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 5, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPhysicalServerSerialNumber.setStatus('current')
if mibBuilder.loadTexts: vcPhysicalServerSerialNumber.setDescription('The serial number of the Physical Server.')
vcPhysicalServerProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 5, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPhysicalServerProductName.setStatus('current')
if mibBuilder.loadTexts: vcPhysicalServerProductName.setDescription('The product name of the Physical Server.')
vcPhysicalServerLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 5, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPhysicalServerLocation.setStatus('current')
if mibBuilder.loadTexts: vcPhysicalServerLocation.setDescription('The device bay number of the bay in which this server is installed.')
vcFcFabricTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 7, 1), )
if mibBuilder.loadTexts: vcFcFabricTable.setStatus('current')
if mibBuilder.loadTexts: vcFcFabricTable.setDescription('A table of FC fabrics in the Virtual Connect Domain.')
vcFcFabricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 7, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcFcFabricIndex"))
if mibBuilder.loadTexts: vcFcFabricEntry.setStatus('current')
if mibBuilder.loadTexts: vcFcFabricEntry.setDescription('Information about a single fabric.')
vcFcFabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcFcFabricIndex.setStatus('current')
if mibBuilder.loadTexts: vcFcFabricIndex.setDescription('Index value for the vcFcFabric table.')
vcFcFabricName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 7, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcFcFabricName.setStatus('current')
if mibBuilder.loadTexts: vcFcFabricName.setDescription('Administratively assigned name for the fabric.')
vcFcFabricManagedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 7, 1, 1, 3), VcManagedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcFcFabricManagedStatus.setStatus('current')
if mibBuilder.loadTexts: vcFcFabricManagedStatus.setDescription('The overall managed status of the vcFcFabric.')
vcEnetNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 6, 1), )
if mibBuilder.loadTexts: vcEnetNetworkTable.setStatus('current')
if mibBuilder.loadTexts: vcEnetNetworkTable.setDescription('A table of ethernet networks in the Virtual Connect Domain.')
vcEnetNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 6, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcEnetNetworkIndex"))
if mibBuilder.loadTexts: vcEnetNetworkEntry.setStatus('current')
if mibBuilder.loadTexts: vcEnetNetworkEntry.setDescription('An entry contianing information about a single network.')
vcEnetNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnetNetworkIndex.setStatus('current')
if mibBuilder.loadTexts: vcEnetNetworkIndex.setDescription('Index value for the vcEnetNetwork table.')
vcEnetNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 6, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnetNetworkName.setStatus('current')
if mibBuilder.loadTexts: vcEnetNetworkName.setDescription('Administratively assigned name for the network.')
vcEnetNetworkManagedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 6, 1, 1, 3), VcManagedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnetNetworkManagedStatus.setStatus('current')
if mibBuilder.loadTexts: vcEnetNetworkManagedStatus.setDescription('The overall managed status of the vcEnetNetwork.')
vcEnetNetworkUplinkVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 6, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnetNetworkUplinkVlanId.setStatus('current')
if mibBuilder.loadTexts: vcEnetNetworkUplinkVlanId.setDescription('The VLAN ID for the external uplink network. This value is set to 0 if no uplink VLAN ID is assigned.')
vcProfileTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 8, 1), )
if mibBuilder.loadTexts: vcProfileTable.setStatus('current')
if mibBuilder.loadTexts: vcProfileTable.setDescription('A table of Server profiles in the Virtual Connect Domain.')
vcProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 8, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcProfileIndex"))
if mibBuilder.loadTexts: vcProfileEntry.setStatus('current')
if mibBuilder.loadTexts: vcProfileEntry.setDescription('Information about a single server profile.')
vcProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfileIndex.setStatus('current')
if mibBuilder.loadTexts: vcProfileIndex.setDescription('Index value for the vcProfile table.')
vcProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 8, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfileName.setStatus('current')
if mibBuilder.loadTexts: vcProfileName.setDescription('A globally-unique, administratively assigned name for the vcProfilek.')
vcProfileManagedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 8, 1, 1, 3), VcManagedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfileManagedStatus.setStatus('current')
if mibBuilder.loadTexts: vcProfileManagedStatus.setDescription('Managed status of the vcProfile.')
vcProfilePhysicalServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 8, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfilePhysicalServerIndex.setStatus('current')
if mibBuilder.loadTexts: vcProfilePhysicalServerIndex.setDescription('Index value of assigned physical server from vcPhysicalServer table. The value is set to 0 if the profile is unassigned.')
vcProfileLogicalSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 8, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfileLogicalSerialNumber.setStatus('current')
if mibBuilder.loadTexts: vcProfileLogicalSerialNumber.setDescription('A logical server serial number to this profile. If the value is empty, the server will use hardware serial number.')
vcEnetNetworkVcPortMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 9, 1), )
if mibBuilder.loadTexts: vcEnetNetworkVcPortMapTable.setStatus('current')
if mibBuilder.loadTexts: vcEnetNetworkVcPortMapTable.setDescription('This table lists a mapping of networks and associated ports The objective of this table is to provide a mechanism to access all EnetPorts associated with a given EnetNetwork. The second index to the table vcPortIndex can be used access port information for a given port')
vcEnetNetworkVcPortMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 9, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcEnetNetworkVcPortMapNetworkIndex"), (0, "HPVC-MIB", "vcEnetNetworkVcPortMapVcPortIndex"))
if mibBuilder.loadTexts: vcEnetNetworkVcPortMapEntry.setStatus('current')
if mibBuilder.loadTexts: vcEnetNetworkVcPortMapEntry.setDescription('Information about a VcPort in Enet Network.')
vcEnetNetworkVcPortMapNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnetNetworkVcPortMapNetworkIndex.setStatus('current')
if mibBuilder.loadTexts: vcEnetNetworkVcPortMapNetworkIndex.setDescription('Index value for network entry. This index value must correspond to vcEnetNetworkIndex from vcEnetNetworkTable.')
vcEnetNetworkVcPortMapVcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnetNetworkVcPortMapVcPortIndex.setStatus('current')
if mibBuilder.loadTexts: vcEnetNetworkVcPortMapVcPortIndex.setDescription('Index value for VcPort entry. This index value must correspond to vcPortIndex from vcPortTable.')
vcFcFabricVcPortMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 10, 1), )
if mibBuilder.loadTexts: vcFcFabricVcPortMapTable.setStatus('current')
if mibBuilder.loadTexts: vcFcFabricVcPortMapTable.setDescription('This table lists a mapping of fabics and associated VcPorts. The objective of this table is to provide a mechanism to access all VcPorts associated with a given FcFabric. The second index to the table vcVcPortIndex can be used access VcPort information for a given VcPort')
vcFcFabricVcPortMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 10, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcFcFabricVcPortMapFcFabricIndex"), (0, "HPVC-MIB", "vcFcFabricVcPortMapVcPortIndex"))
if mibBuilder.loadTexts: vcFcFabricVcPortMapEntry.setStatus('current')
if mibBuilder.loadTexts: vcFcFabricVcPortMapEntry.setDescription('Information about a single fabric.')
vcFcFabricVcPortMapFcFabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcFcFabricVcPortMapFcFabricIndex.setStatus('current')
if mibBuilder.loadTexts: vcFcFabricVcPortMapFcFabricIndex.setDescription('Index value for vcFabric entry. This index value must correspond to vcFcFabricIndex from vcFcFabricTable.')
vcFcFabricVcPortMapVcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcFcFabricVcPortMapVcPortIndex.setStatus('current')
if mibBuilder.loadTexts: vcFcFabricVcPortMapVcPortIndex.setDescription('Index value for VcPort entry. This index value must correspond to vcPortIndex from vcPortTable.')
vcProfileNetworkMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 11, 1), )
if mibBuilder.loadTexts: vcProfileNetworkMapTable.setStatus('current')
if mibBuilder.loadTexts: vcProfileNetworkMapTable.setDescription('This table lists a mapping of profiles and associated ports. The objective of this table is to provide a mechanism to access all Networks assigned to a given vcProfile. The second index to the table vcNetworkIndex can be used access network information for a given network')
vcProfileNetworkMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 11, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcProfileNetworkMapProfileIndex"), (0, "HPVC-MIB", "vcProfileNetworkMapConnectionIndex"))
if mibBuilder.loadTexts: vcProfileNetworkMapEntry.setStatus('current')
if mibBuilder.loadTexts: vcProfileNetworkMapEntry.setDescription('Information about a single network.')
vcProfileNetworkMapProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfileNetworkMapProfileIndex.setStatus('current')
if mibBuilder.loadTexts: vcProfileNetworkMapProfileIndex.setDescription('Index value for profile entry. This index value must correspond to vcProfileIndex from vcProfileTable.')
vcProfileNetworkMapConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfileNetworkMapConnectionIndex.setStatus('current')
if mibBuilder.loadTexts: vcProfileNetworkMapConnectionIndex.setDescription('Ethernet network connection number associated with this mapping.')
vcProfileNetworkMapNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 11, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfileNetworkMapNetworkIndex.setStatus('current')
if mibBuilder.loadTexts: vcProfileNetworkMapNetworkIndex.setDescription('Index value to identify the network. This index value must correspond to vcNetworkIndex from vcEnetNetworkTable.')
vcProfileFcFabricMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 12, 1), )
if mibBuilder.loadTexts: vcProfileFcFabricMapTable.setStatus('current')
if mibBuilder.loadTexts: vcProfileFcFabricMapTable.setDescription('This table lists a mapping of profiles and associated ports. The objective of this table is to provide a mechanism to access all Fabrics associated with a given vcProfile. The second index to the table vcFcFabricIndex can be used to access fabric information for a given fabric')
vcProfileFcFabricMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 12, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcProfileFcFabricMapProfileIndex"), (0, "HPVC-MIB", "vcProfileFcFabricMapConnectionIndex"))
if mibBuilder.loadTexts: vcProfileFcFabricMapEntry.setStatus('current')
if mibBuilder.loadTexts: vcProfileFcFabricMapEntry.setDescription('Information about a single network.')
vcProfileFcFabricMapProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfileFcFabricMapProfileIndex.setStatus('current')
if mibBuilder.loadTexts: vcProfileFcFabricMapProfileIndex.setDescription('Index value for profile entry. This index value must correspond to vcProfileIndex from vcProfileTable.')
vcProfileFcFabricMapConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfileFcFabricMapConnectionIndex.setStatus('current')
if mibBuilder.loadTexts: vcProfileFcFabricMapConnectionIndex.setDescription('FcFabric connection number associated with this mapping.')
vcProfileFcFabricMapFcFabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 12, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfileFcFabricMapFcFabricIndex.setStatus('current')
if mibBuilder.loadTexts: vcProfileFcFabricMapFcFabricIndex.setDescription('Index value for vcFcFabric entry. This index value must correspond to vcFcFabricIndex from vcFcFabricTable.')
vcDomainMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2))
vcDomainMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0))
vcDomainMIBNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 1))
vcDomainManagedStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 1)).setObjects(("HPVC-MIB", "vcDomainManagedStatus"))
if mibBuilder.loadTexts: vcDomainManagedStatusChange.setStatus('current')
if mibBuilder.loadTexts: vcDomainManagedStatusChange.setDescription('The summary managed status of the domain has changed.')
vcCheckpointTimeout = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 2)).setObjects(("HPVC-MIB", "vcDomainCheckpointValid"), ("HPVC-MIB", "vcDomainLastCheckpointTime"))
if mibBuilder.loadTexts: vcCheckpointTimeout.setStatus('current')
if mibBuilder.loadTexts: vcCheckpointTimeout.setDescription('The checkpoint valid status remained false for more than five minutes.')
vcCheckpointCompleted = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 3)).setObjects(("HPVC-MIB", "vcDomainCheckpointValid"))
if mibBuilder.loadTexts: vcCheckpointCompleted.setStatus('current')
if mibBuilder.loadTexts: vcCheckpointCompleted.setDescription('A checkpoint operation has completed following a checkpoint timeout trap. The checkpoint valid status is true again. This trap is not sent on every checkpoint completion, but only on a checkpoint completion after a vcCheckpointTimeout trap has been sent.')
vcEnetNetworkManagedStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 4)).setObjects(("HPVC-MIB", "vcEnetNetworkManagedStatus"), ("HPVC-MIB", "vcEnetNetworkIndex"))
if mibBuilder.loadTexts: vcEnetNetworkManagedStatusChange.setStatus('current')
if mibBuilder.loadTexts: vcEnetNetworkManagedStatusChange.setDescription('The managed status of network has changed.')
vcFcFabricManagedStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 5)).setObjects(("HPVC-MIB", "vcFcFabricManagedStatus"), ("HPVC-MIB", "vcFcFabricIndex"))
if mibBuilder.loadTexts: vcFcFabricManagedStatusChange.setStatus('current')
if mibBuilder.loadTexts: vcFcFabricManagedStatusChange.setDescription('The managed status of VC FC Fabric has changed.')
vcModuleManagedStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 6)).setObjects(("HPVC-MIB", "vcModuleManagedStatus"), ("HPVC-MIB", "vcModuleIndex"))
if mibBuilder.loadTexts: vcModuleManagedStatusChange.setStatus('current')
if mibBuilder.loadTexts: vcModuleManagedStatusChange.setDescription('The managed status of VC module has changed.')
vcEnclosureManagedStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 7)).setObjects(("HPVC-MIB", "vcEnclosureManagedStatus"), ("HPVC-MIB", "vcEnclosureIndex"))
if mibBuilder.loadTexts: vcEnclosureManagedStatusChange.setStatus('current')
if mibBuilder.loadTexts: vcEnclosureManagedStatusChange.setDescription('The managed status of the enclosure has changed.')
vcPhysicalServerManagedStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 8)).setObjects(("HPVC-MIB", "vcPhysicalServerManagedStatus"), ("HPVC-MIB", "vcPhysicalServerIndex"))
if mibBuilder.loadTexts: vcPhysicalServerManagedStatusChange.setStatus('current')
if mibBuilder.loadTexts: vcPhysicalServerManagedStatusChange.setDescription('The managed status of the server has changed.')
vcProfileManagedStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 9)).setObjects(("HPVC-MIB", "vcProfileManagedStatus"), ("HPVC-MIB", "vcProfileIndex"))
if mibBuilder.loadTexts: vcProfileManagedStatusChange.setStatus('current')
if mibBuilder.loadTexts: vcProfileManagedStatusChange.setDescription('The managed status of the profile has changed.')
vcTestTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 10)).setObjects(("HPVC-MIB", "vcDomainName"))
if mibBuilder.loadTexts: vcTestTrap.setStatus('current')
if mibBuilder.loadTexts: vcTestTrap.setDescription('A test trap for verifying trap configuration.')
vcDomainStackingLinkRendundancyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 11)).setObjects(("HPVC-MIB", "vcDomainStackingLinkRedundant"))
if mibBuilder.loadTexts: vcDomainStackingLinkRendundancyStatusChange.setStatus('current')
if mibBuilder.loadTexts: vcDomainStackingLinkRendundancyStatusChange.setDescription('The stacking link connection redundancy status has changed.')
vcDomainMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3))
vcDomainMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 1))
vcDomainMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2))
vcDomainMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 1, 1)).setObjects(("HPVC-MIB", "vcDomainGroup"), ("HPVC-MIB", "vcEnclosureGroup"), ("HPVC-MIB", "vcModuleGroup"), ("HPVC-MIB", "vcPortGroup"), ("HPVC-MIB", "vcPhysicalServerGroup"), ("HPVC-MIB", "vcFcFabricGroup"), ("HPVC-MIB", "vcEnetNetworkGroup"), ("HPVC-MIB", "vcProfileGroup"), ("HPVC-MIB", "vcEnetNetworkVcPortMapGroup"), ("HPVC-MIB", "vcFcFabricVcPortMapGroup"), ("HPVC-MIB", "vcProfileNetworkMapGroup"), ("HPVC-MIB", "vcProfileFcFabricMapGroup"), ("HPVC-MIB", "vcManagedStatusNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcDomainMIBCompliance = vcDomainMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: vcDomainMIBCompliance.setDescription('The compliance statement for entities which implement the VC MIB.')
vcDomainGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 1)).setObjects(("HPVC-MIB", "vcDomainName"), ("HPVC-MIB", "vcDomainManagedStatus"), ("HPVC-MIB", "vcDomainPrimaryAddressType"), ("HPVC-MIB", "vcDomainPrimaryAddress"), ("HPVC-MIB", "vcDomainCheckpointValid"), ("HPVC-MIB", "vcDomainLastCheckpointTime"), ("HPVC-MIB", "vcDomainStackingLinkRedundant"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcDomainGroup = vcDomainGroup.setStatus('current')
if mibBuilder.loadTexts: vcDomainGroup.setDescription('Virtual Connect Domain level objects.')
vcEnclosureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 2)).setObjects(("HPVC-MIB", "vcEnclosureIndex"), ("HPVC-MIB", "vcEnclosureName"), ("HPVC-MIB", "vcEnclosureManagedStatus"), ("HPVC-MIB", "vcEnclosureAddressType"), ("HPVC-MIB", "vcEnclosureAddress"), ("HPVC-MIB", "vcEnclosureUUID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcEnclosureGroup = vcEnclosureGroup.setStatus('current')
if mibBuilder.loadTexts: vcEnclosureGroup.setDescription('Virtual Connect Enclosure objects.')
vcModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 3)).setObjects(("HPVC-MIB", "vcModuleIndex"), ("HPVC-MIB", "vcModuleType"), ("HPVC-MIB", "vcModuleManagedStatus"), ("HPVC-MIB", "vcModulePartNumber"), ("HPVC-MIB", "vcModuleFwRev"), ("HPVC-MIB", "vcModuleEnclosurePointer"), ("HPVC-MIB", "vcModuleLocation"), ("HPVC-MIB", "vcModuleAddressType"), ("HPVC-MIB", "vcModuleAddress"), ("HPVC-MIB", "vcModuleID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcModuleGroup = vcModuleGroup.setStatus('current')
if mibBuilder.loadTexts: vcModuleGroup.setDescription('Virtual Connect Module objects.')
vcPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 4)).setObjects(("HPVC-MIB", "vcPortIndex"), ("HPVC-MIB", "vcPortType"), ("HPVC-MIB", "vcPortManagedStatus"), ("HPVC-MIB", "vcPortManagerAddressType"), ("HPVC-MIB", "vcPortManagerAddress"), ("HPVC-MIB", "vcPortContainerPointer"), ("HPVC-MIB", "vcPortPhysicalPortPointer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcPortGroup = vcPortGroup.setStatus('current')
if mibBuilder.loadTexts: vcPortGroup.setDescription('Virtual Connect Port objects.')
vcPhysicalServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 5)).setObjects(("HPVC-MIB", "vcPhysicalServerIndex"), ("HPVC-MIB", "vcPhysicalServerEnclosureIndex"), ("HPVC-MIB", "vcPhysicalServerManagedStatus"), ("HPVC-MIB", "vcPhysicalServerLocation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcPhysicalServerGroup = vcPhysicalServerGroup.setStatus('current')
if mibBuilder.loadTexts: vcPhysicalServerGroup.setDescription('Virtual Connect PhysicalServer objects.')
vcFcFabricGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 6)).setObjects(("HPVC-MIB", "vcFcFabricIndex"), ("HPVC-MIB", "vcFcFabricName"), ("HPVC-MIB", "vcFcFabricManagedStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcFcFabricGroup = vcFcFabricGroup.setStatus('current')
if mibBuilder.loadTexts: vcFcFabricGroup.setDescription('Virtual Connect FC Fabric objects.')
vcEnetNetworkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 7)).setObjects(("HPVC-MIB", "vcEnetNetworkIndex"), ("HPVC-MIB", "vcEnetNetworkName"), ("HPVC-MIB", "vcEnetNetworkManagedStatus"), ("HPVC-MIB", "vcEnetNetworkUplinkVlanId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcEnetNetworkGroup = vcEnetNetworkGroup.setStatus('current')
if mibBuilder.loadTexts: vcEnetNetworkGroup.setDescription('Virtual Connect Ethernet Network objects.')
vcProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 8)).setObjects(("HPVC-MIB", "vcProfileIndex"), ("HPVC-MIB", "vcProfileName"), ("HPVC-MIB", "vcProfileManagedStatus"), ("HPVC-MIB", "vcProfilePhysicalServerIndex"), ("HPVC-MIB", "vcProfileLogicalSerialNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcProfileGroup = vcProfileGroup.setStatus('current')
if mibBuilder.loadTexts: vcProfileGroup.setDescription('Virtual Connect Server profile objects.')
vcEnetNetworkVcPortMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 9)).setObjects(("HPVC-MIB", "vcEnetNetworkVcPortMapNetworkIndex"), ("HPVC-MIB", "vcEnetNetworkVcPortMapVcPortIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcEnetNetworkVcPortMapGroup = vcEnetNetworkVcPortMapGroup.setStatus('current')
if mibBuilder.loadTexts: vcEnetNetworkVcPortMapGroup.setDescription('VC Ethernet Network to VC Port mapping objects.')
vcFcFabricVcPortMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 10)).setObjects(("HPVC-MIB", "vcFcFabricVcPortMapFcFabricIndex"), ("HPVC-MIB", "vcFcFabricVcPortMapVcPortIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcFcFabricVcPortMapGroup = vcFcFabricVcPortMapGroup.setStatus('current')
if mibBuilder.loadTexts: vcFcFabricVcPortMapGroup.setDescription('VC FC fabric to VC Port mapping objects.')
vcProfileNetworkMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 11)).setObjects(("HPVC-MIB", "vcProfileNetworkMapProfileIndex"), ("HPVC-MIB", "vcProfileNetworkMapNetworkIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcProfileNetworkMapGroup = vcProfileNetworkMapGroup.setStatus('current')
if mibBuilder.loadTexts: vcProfileNetworkMapGroup.setDescription('VC Profile to Ethernet network mapping objects.')
vcProfileFcFabricMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 12)).setObjects(("HPVC-MIB", "vcProfileFcFabricMapProfileIndex"), ("HPVC-MIB", "vcProfileFcFabricMapFcFabricIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcProfileFcFabricMapGroup = vcProfileFcFabricMapGroup.setStatus('current')
if mibBuilder.loadTexts: vcProfileFcFabricMapGroup.setDescription('VC Profile to FC fabric mapping objects.')
vcManagedStatusNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 13)).setObjects(("HPVC-MIB", "vcDomainManagedStatusChange"), ("HPVC-MIB", "vcCheckpointTimeout"), ("HPVC-MIB", "vcCheckpointCompleted"), ("HPVC-MIB", "vcEnetNetworkManagedStatusChange"), ("HPVC-MIB", "vcFcFabricManagedStatusChange"), ("HPVC-MIB", "vcModuleManagedStatusChange"), ("HPVC-MIB", "vcEnclosureManagedStatusChange"), ("HPVC-MIB", "vcPhysicalServerManagedStatusChange"), ("HPVC-MIB", "vcProfileManagedStatusChange"), ("HPVC-MIB", "vcTestTrap"), ("HPVC-MIB", "vcDomainStackingLinkRendundancyStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcManagedStatusNotificationsGroup = vcManagedStatusNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: vcManagedStatusNotificationsGroup.setDescription('The notifications which indicate specific changes in the Virtual Connect Domain managed status.')
mibBuilder.exportSymbols("HPVC-MIB", vcDomainGroup=vcDomainGroup, VcPortType=VcPortType, vcPortContainerPointer=vcPortContainerPointer, vcProfileFcFabricMapEntry=vcProfileFcFabricMapEntry, vcPhysicalServerGroup=vcPhysicalServerGroup, VcModuleType=VcModuleType, vcPortIndex=vcPortIndex, vcEnetNetworkUplinkVlanId=vcEnetNetworkUplinkVlanId, PYSNMP_MODULE_ID=vcDomainMIB, vcEnclosureAddressType=vcEnclosureAddressType, vcProfileTable=vcProfileTable, vcEnetNetworkVcPortMapEntry=vcEnetNetworkVcPortMapEntry, vcPort=vcPort, vcModuleIndex=vcModuleIndex, vcDomainStackingLinkRedundant=vcDomainStackingLinkRedundant, vcEnclosureEntry=vcEnclosureEntry, vcDomainManagedStatusChange=vcDomainManagedStatusChange, vcDomainMIBCompliance=vcDomainMIBCompliance, vcFcFabricEntry=vcFcFabricEntry, vcFcFabricVcPortMap=vcFcFabricVcPortMap, vcModuleTable=vcModuleTable, vcFcFabricVcPortMapVcPortIndex=vcFcFabricVcPortMapVcPortIndex, vcPhysicalServerSerialNumber=vcPhysicalServerSerialNumber, VcManagedStatus=VcManagedStatus, vcProfileManagedStatusChange=vcProfileManagedStatusChange, vcEnclosureName=vcEnclosureName, hp=hp, vcFcFabricVcPortMapGroup=vcFcFabricVcPortMapGroup, vcPortType=vcPortType, vcEnetNetworkName=vcEnetNetworkName, vcFcFabricVcPortMapFcFabricIndex=vcFcFabricVcPortMapFcFabricIndex, vcFcFabricManagedStatusChange=vcFcFabricManagedStatusChange, vcModuleEnclosurePointer=vcModuleEnclosurePointer, vcPortManagerAddressType=vcPortManagerAddressType, vcFcFabricName=vcFcFabricName, vcPhysicalServerTable=vcPhysicalServerTable, vcFcFabricVcPortMapEntry=vcFcFabricVcPortMapEntry, vcFcFabricVcPortMapTable=vcFcFabricVcPortMapTable, vcPhysicalServerIndex=vcPhysicalServerIndex, vcEnetNetworkVcPortMapTable=vcEnetNetworkVcPortMapTable, vcDomainMIBObjects=vcDomainMIBObjects, vcEnetNetworkVcPortMapVcPortIndex=vcEnetNetworkVcPortMapVcPortIndex, vcProfileFcFabricMap=vcProfileFcFabricMap, vcDomainCheckpointValid=vcDomainCheckpointValid, vcPortTable=vcPortTable, vcEnclosureIndex=vcEnclosureIndex, vcDomainMIB=vcDomainMIB, vcPhysicalServerProductName=vcPhysicalServerProductName, vcEnclosure=vcEnclosure, vcProfileNetworkMapNetworkIndex=vcProfileNetworkMapNetworkIndex, vcPhysicalServerEntry=vcPhysicalServerEntry, vcProfileNetworkMapGroup=vcProfileNetworkMapGroup, vcDomainMIBGroups=vcDomainMIBGroups, vcDomainMIBNotificationObjects=vcDomainMIBNotificationObjects, vcModuleManagedStatusChange=vcModuleManagedStatusChange, vcFcFabricIndex=vcFcFabricIndex, vcProfilePhysicalServerIndex=vcProfilePhysicalServerIndex, vcProfileFcFabricMapFcFabricIndex=vcProfileFcFabricMapFcFabricIndex, vcProfileEntry=vcProfileEntry, vcDomainPrimaryAddressType=vcDomainPrimaryAddressType, vcModuleLocation=vcModuleLocation, vcPortPhysicalPortPointer=vcPortPhysicalPortPointer, vcModuleFwRev=vcModuleFwRev, vcModule=vcModule, vcModuleAddress=vcModuleAddress, vcEnetNetworkTable=vcEnetNetworkTable, vcFcFabricGroup=vcFcFabricGroup, vcProfileManagedStatus=vcProfileManagedStatus, vcModuleSerialNumber=vcModuleSerialNumber, vcDomainMIBNotificationPrefix=vcDomainMIBNotificationPrefix, vcModuleGroup=vcModuleGroup, vcProfileFcFabricMapGroup=vcProfileFcFabricMapGroup, vcModuleProductName=vcModuleProductName, vcDomainManagedStatus=vcDomainManagedStatus, vcProfileNetworkMapConnectionIndex=vcProfileNetworkMapConnectionIndex, vcDomainStackingLinkRendundancyStatusChange=vcDomainStackingLinkRendundancyStatusChange, vcFcFabricManagedStatus=vcFcFabricManagedStatus, vcPhysicalServerLocation=vcPhysicalServerLocation, vcProfileFcFabricMapProfileIndex=vcProfileFcFabricMapProfileIndex, vcEnclosureGroup=vcEnclosureGroup, vcEnclosureTable=vcEnclosureTable, vcPortManagerAddress=vcPortManagerAddress, vcDomainLastCheckpointTime=vcDomainLastCheckpointTime, vcDomain=vcDomain, vcEnclosureManagedStatusChange=vcEnclosureManagedStatusChange, vcEnetNetworkEntry=vcEnetNetworkEntry, vcFcFabricTable=vcFcFabricTable, vcPhysicalServerPartNumber=vcPhysicalServerPartNumber, vcEnetNetworkManagedStatusChange=vcEnetNetworkManagedStatusChange, vcManagedStatusNotificationsGroup=vcManagedStatusNotificationsGroup, vcProfileNetworkMapProfileIndex=vcProfileNetworkMapProfileIndex, vcProfileNetworkMapTable=vcProfileNetworkMapTable, vcProfileFcFabricMapConnectionIndex=vcProfileFcFabricMapConnectionIndex, vcPortGroup=vcPortGroup, vcPhysicalServer=vcPhysicalServer, virtualConnect=virtualConnect, vcModuleEntry=vcModuleEntry, vcEnetNetworkVcPortMapNetworkIndex=vcEnetNetworkVcPortMapNetworkIndex, vcModuleType=vcModuleType, vcProfile=vcProfile, vcModuleManagedStatus=vcModuleManagedStatus, vcFcFabric=vcFcFabric, vcPhysicalServerEnclosureIndex=vcPhysicalServerEnclosureIndex, vcProfileGroup=vcProfileGroup, vcEnetNetworkVcPortMapGroup=vcEnetNetworkVcPortMapGroup, vcProfileName=vcProfileName, vcEnetNetwork=vcEnetNetwork, vcModuleAddressType=vcModuleAddressType, hpModuleMgmtProc=hpModuleMgmtProc, vcDomainName=vcDomainName, vcModuleID=vcModuleID, vcCheckpointCompleted=vcCheckpointCompleted, hpEmbeddedServerMgt=hpEmbeddedServerMgt, vcPhysicalServerManagedStatusChange=vcPhysicalServerManagedStatusChange, vcCheckpointTimeout=vcCheckpointTimeout, vcDomainMIBConformance=vcDomainMIBConformance, vcEnetNetworkGroup=vcEnetNetworkGroup, vcPhysicalServerManagedStatus=vcPhysicalServerManagedStatus, vcProfileNetworkMapEntry=vcProfileNetworkMapEntry, vcProfileIndex=vcProfileIndex, VcDomainModuleRole=VcDomainModuleRole, vcEnclosureUUID=vcEnclosureUUID, vcPortManagedStatus=vcPortManagedStatus, vcDomainMIBNotifications=vcDomainMIBNotifications, vcDomainMIBCompliances=vcDomainMIBCompliances, vcProfileNetworkMap=vcProfileNetworkMap, vcModulePartNumber=vcModulePartNumber, vcProfileFcFabricMapTable=vcProfileFcFabricMapTable, vcTestTrap=vcTestTrap, vcDomainPrimaryAddress=vcDomainPrimaryAddress, vcEnetNetworkManagedStatus=vcEnetNetworkManagedStatus, vcEnclosureManagedStatus=vcEnclosureManagedStatus, vcEnetNetworkIndex=vcEnetNetworkIndex, vcPortEntry=vcPortEntry, vcProfileLogicalSerialNumber=vcProfileLogicalSerialNumber, vcEnclosureAddress=vcEnclosureAddress, hpSysMgt=hpSysMgt, vcEnetNetworkVcPortMap=vcEnetNetworkVcPortMap)
