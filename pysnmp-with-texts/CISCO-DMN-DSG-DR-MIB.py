#
# PySNMP MIB module CISCO-DMN-DSG-DR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DMN-DSG-DR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:54:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ciscoDSGUtilities, = mibBuilder.importSymbols("CISCO-DMN-DSG-ROOT-MIB", "ciscoDSGUtilities")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
iso, ObjectIdentity, Unsigned32, ModuleIdentity, Counter32, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, Gauge32, IpAddress, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "Counter32", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "Gauge32", "IpAddress", "Counter64", "NotificationType")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
ciscoDSGDR = ModuleIdentity((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43))
ciscoDSGDR.setRevisions(('2014-08-30 08:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDSGDR.setRevisionsDescriptions(('V01.00.00 2014-04-14',))
if mibBuilder.loadTexts: ciscoDSGDR.setLastUpdated('201408300800Z')
if mibBuilder.loadTexts: ciscoDSGDR.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoDSGDR.setContactInfo('Cisco Systems, Inc. Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 NETS E-mail: cs-ipsla@cisco.com')
if mibBuilder.loadTexts: ciscoDSGDR.setDescription('Cisco generic DR MIB.')
drGlobalCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 1))
enable = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable.setStatus('current')
if mibBuilder.loadTexts: enable.setDescription('Disable/Enable Disaster Recovery Feature')
sigLockTime = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigLockTime.setStatus('current')
if mibBuilder.loadTexts: sigLockTime.setDescription('Signal Lock timer (In Seconds)')
sigLossTime = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 2160000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigLossTime.setStatus('current')
if mibBuilder.loadTexts: sigLossTime.setDescription('Signal Loss timer (In Seconds)')
verifyTimer = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: verifyTimer.setStatus('current')
if mibBuilder.loadTexts: verifyTimer.setDescription('Verify timer (In Seconds)')
profile = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("uplink", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profile.setStatus('current')
if mibBuilder.loadTexts: profile.setDescription('Local/Uplink Disaster Recovery Profile')
backupTransportTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 2), )
if mibBuilder.loadTexts: backupTransportTable.setStatus('current')
if mibBuilder.loadTexts: backupTransportTable.setDescription('DR BackupTransport Configuration Table.')
backupTransportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 2, 1), ).setIndexNames((0, "CISCO-DMN-DSG-DR-MIB", "backupTransportIndex"))
if mibBuilder.loadTexts: backupTransportEntry.setStatus('current')
if mibBuilder.loadTexts: backupTransportEntry.setDescription('Entry for Disaster Recovery BackupTransport Configuration.')
backupTransportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupTransportIndex.setStatus('current')
if mibBuilder.loadTexts: backupTransportIndex.setDescription('DR CSI record index')
backupTransportSetIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupTransportSetIdx.setStatus('current')
if mibBuilder.loadTexts: backupTransportSetIdx.setDescription('DR CSI Idx.')
backupTransportDvbsFec = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 6, 7, 10))).clone(namedValues=NamedValues(("oneHalf", 1), ("twoThirds", 3), ("threeQuarters", 4), ("fiveSixths", 6), ("sevenEigths", 7), ("auto", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupTransportDvbsFec.setStatus('current')
if mibBuilder.loadTexts: backupTransportDvbsFec.setDescription('DR DVBS Forward Error Correction: Forward Error Correction Rate. For DVB-S2 modulation only auto is applicable. For DVB-S modulation all options are applicable.')
backupTransportEwFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("east", 1), ("west", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupTransportEwFlag.setStatus('current')
if mibBuilder.loadTexts: backupTransportEwFlag.setDescription('DR E/W Flag')
backupTransportFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupTransportFrequency.setStatus('current')
if mibBuilder.loadTexts: backupTransportFrequency.setDescription('DR Frequency: The Satellite Downlink frequency in the range of 0 to 15000000 KHz in steps of 1 KHz..')
backupTransportRFInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rf1", 1), ("rf2", 2), ("rf3", 3), ("rf4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupTransportRFInput.setStatus('current')
if mibBuilder.loadTexts: backupTransportRFInput.setDescription('DR Input: Select Input for tuning')
backupTransportModSys = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qpsk_dvb-s", 1), ("qpsk_dvb-S2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupTransportModSys.setStatus('current')
if mibBuilder.loadTexts: backupTransportModSys.setDescription('DR Modulation System.')
backupTransportNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupTransportNetId.setStatus('current')
if mibBuilder.loadTexts: backupTransportNetId.setDescription('Network Id.')
backupTransportOrbitalPos = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupTransportOrbitalPos.setStatus('current')
if mibBuilder.loadTexts: backupTransportOrbitalPos.setDescription('DR Orbital Position')
backupTransportOrbpolarization = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupTransportOrbpolarization.setStatus('current')
if mibBuilder.loadTexts: backupTransportOrbpolarization.setDescription('Orbital location Azimuth.The range is from 0 to 3600 in steps of 1. The scaling factor is 1 10th of a degree')
backupTransportSymbRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 450000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupTransportSymbRate.setStatus('current')
if mibBuilder.loadTexts: backupTransportSymbRate.setDescription('Data rate on the transport stream in millions of symbols per second. Range is from 10000 to 450000 hectoSym/second in steps of 1 hectoSym/second. ( 1 hecto = 10^2 ).')
backupTransportRollOffFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 25, 3))).clone(namedValues=NamedValues(("f35", 1), ("f25", 25), ("f20", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupTransportRollOffFactor.setStatus('current')
if mibBuilder.loadTexts: backupTransportRollOffFactor.setDescription('DR Rollof Factor:Alpha filtering - for DVB-S: 0.20/0.35, for DVB-S2: 0.20/0.25/0.35. Roll off with scaling factor of 1/100.')
backupTransportRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("delete", 3), ("add", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupTransportRowstatus.setStatus('current')
if mibBuilder.loadTexts: backupTransportRowstatus.setDescription('RowStatus.')
backupSetTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 3), )
if mibBuilder.loadTexts: backupSetTable.setStatus('current')
if mibBuilder.loadTexts: backupSetTable.setDescription('DR BackupSet Configuration Table.')
backupSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 3, 1), ).setIndexNames((0, "CISCO-DMN-DSG-DR-MIB", "backupSetPeid"), (0, "CISCO-DMN-DSG-DR-MIB", "backupSetRecid"))
if mibBuilder.loadTexts: backupSetEntry.setStatus('current')
if mibBuilder.loadTexts: backupSetEntry.setDescription('Entry for Disaster Recovery BackupSet Configuration.')
backupSetPeid = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupSetPeid.setStatus('current')
if mibBuilder.loadTexts: backupSetPeid.setDescription('BackupSet PEId')
backupSetRecid = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupSetRecid.setStatus('current')
if mibBuilder.loadTexts: backupSetRecid.setDescription('Backup Set Record Index')
backupSetCsiidx = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupSetCsiidx.setStatus('current')
if mibBuilder.loadTexts: backupSetCsiidx.setDescription('CSI Index.')
backupSetBkpch = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupSetBkpch.setStatus('current')
if mibBuilder.loadTexts: backupSetBkpch.setDescription('Backup Channel.')
backupSetBkpchDispText = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupSetBkpchDispText.setStatus('current')
if mibBuilder.loadTexts: backupSetBkpchDispText.setDescription('Backup Channel Display Text')
backupSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 43, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupSetRowStatus.setStatus('current')
if mibBuilder.loadTexts: backupSetRowStatus.setDescription('Backup Row Status.')
mibBuilder.exportSymbols("CISCO-DMN-DSG-DR-MIB", backupTransportSetIdx=backupTransportSetIdx, backupTransportIndex=backupTransportIndex, backupSetEntry=backupSetEntry, backupSetRowStatus=backupSetRowStatus, verifyTimer=verifyTimer, backupTransportSymbRate=backupTransportSymbRate, backupSetCsiidx=backupSetCsiidx, backupSetRecid=backupSetRecid, backupSetTable=backupSetTable, backupTransportRowstatus=backupTransportRowstatus, backupTransportRFInput=backupTransportRFInput, backupTransportNetId=backupTransportNetId, sigLockTime=sigLockTime, backupTransportOrbpolarization=backupTransportOrbpolarization, backupTransportRollOffFactor=backupTransportRollOffFactor, backupSetBkpch=backupSetBkpch, PYSNMP_MODULE_ID=ciscoDSGDR, backupSetPeid=backupSetPeid, backupTransportFrequency=backupTransportFrequency, sigLossTime=sigLossTime, backupTransportDvbsFec=backupTransportDvbsFec, backupTransportEwFlag=backupTransportEwFlag, profile=profile, ciscoDSGDR=ciscoDSGDR, backupSetBkpchDispText=backupSetBkpchDispText, enable=enable, backupTransportOrbitalPos=backupTransportOrbitalPos, backupTransportTable=backupTransportTable, backupTransportEntry=backupTransportEntry, backupTransportModSys=backupTransportModSys, drGlobalCfg=drGlobalCfg)
