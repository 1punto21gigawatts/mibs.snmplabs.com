#
# PySNMP MIB module BLADETYPE2-PHYSICAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BLADETYPE2-PHYSICAL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:39:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
BridgeId, = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId")
hpSwitchBladeType2_Mgmt, = mibBuilder.importSymbols("HP-SWITCH-PL-MIB", "hpSwitchBladeType2-Mgmt")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, ModuleIdentity, NotificationType, Gauge32, TimeTicks, Bits, Counter64, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter32, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "NotificationType", "Gauge32", "TimeTicks", "Bits", "Counter64", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter32", "Unsigned32", "ObjectIdentity")
TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString")
layer2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2))
if mibBuilder.loadTexts: layer2.setLastUpdated('200312050000Z')
if mibBuilder.loadTexts: layer2.setOrganization('Hewlett Packard Company ')
if mibBuilder.loadTexts: layer2.setContactInfo('customerservice@hp.com')
if mibBuilder.loadTexts: layer2.setDescription('The MIB module for the Layer 2 configuration, statistics and information .')
layer2Configs = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1))
layer2Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2))
layer2Info = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3))
layer2Oper = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 4))
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1))
trunkgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2))
stgCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3))
mirroring = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4))
mstCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5))
lacp = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6))
thash = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 7))
l2GeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 8))
ufd = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9))
dot1x = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11))
fdb = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12))
hotlinksCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14))
hotlinksCurCfgOnState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgOnState.setStatus('current')
if mibBuilder.loadTexts: hotlinksCurCfgOnState.setDescription('Hot Links ON/OFF setting.')
hotlinksNewCfgOnState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgOnState.setStatus('current')
if mibBuilder.loadTexts: hotlinksNewCfgOnState.setDescription('Hot Links ON/OFF settings.')
hotlinksCurCfgFdbUpdateState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgFdbUpdateState.setStatus('current')
if mibBuilder.loadTexts: hotlinksCurCfgFdbUpdateState.setDescription('Enable/disable Hot Links FDB Update setting.')
hotlinksNewCfgFdbUpdateState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgFdbUpdateState.setStatus('current')
if mibBuilder.loadTexts: hotlinksNewCfgFdbUpdateState.setDescription('Enable/disable Hot Links FDB Update setting.')
hotlinksMaxTriggerEntries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksMaxTriggerEntries.setStatus('current')
if mibBuilder.loadTexts: hotlinksMaxTriggerEntries.setDescription('The maximum number of entries in the Hot Links Trigger Table.')
hotlinksCurCfgTriggerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 6), )
if mibBuilder.loadTexts: hotlinksCurCfgTriggerTable.setStatus('current')
if mibBuilder.loadTexts: hotlinksCurCfgTriggerTable.setDescription('The Hot Links Trigger Table.')
hotlinksCurCfgTriggerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 6, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "hotlinksCurCfgTriggerId"))
if mibBuilder.loadTexts: hotlinksCurCfgTriggerTableEntry.setStatus('current')
if mibBuilder.loadTexts: hotlinksCurCfgTriggerTableEntry.setDescription('A row in the Hot Links Trigger Table.')
hotlinksCurCfgTriggerId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerId.setStatus('current')
if mibBuilder.loadTexts: hotlinksCurCfgTriggerId.setDescription('The Trigger identifier.')
hotlinksCurCfgTriggerState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerState.setStatus('current')
if mibBuilder.loadTexts: hotlinksCurCfgTriggerState.setDescription('Enable/disable Trigger state.')
hotlinksCurCfgTriggerPreemptState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerPreemptState.setStatus('current')
if mibBuilder.loadTexts: hotlinksCurCfgTriggerPreemptState.setDescription('Enable/disable Preemption state.')
hotlinksCurCfgTriggerFdelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerFdelay.setStatus('current')
if mibBuilder.loadTexts: hotlinksCurCfgTriggerFdelay.setDescription('Forward Delay setting (in secs).')
hotlinksCurCfgTriggerMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerMasterPort.setStatus('current')
if mibBuilder.loadTexts: hotlinksCurCfgTriggerMasterPort.setDescription('The master interface port number.')
hotlinksCurCfgTriggerMasterTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerMasterTrunk.setStatus('current')
if mibBuilder.loadTexts: hotlinksCurCfgTriggerMasterTrunk.setDescription('The master interface trunk number.')
hotlinksCurCfgTriggerBackupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerBackupPort.setStatus('current')
if mibBuilder.loadTexts: hotlinksCurCfgTriggerBackupPort.setDescription('The backup interface port number.')
hotlinksCurCfgTriggerBackupTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerBackupTrunk.setStatus('current')
if mibBuilder.loadTexts: hotlinksCurCfgTriggerBackupTrunk.setDescription('The backup interface trunk number.')
hotlinksNewCfgTriggerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 7), )
if mibBuilder.loadTexts: hotlinksNewCfgTriggerTable.setStatus('current')
if mibBuilder.loadTexts: hotlinksNewCfgTriggerTable.setDescription('The Hot Links Trigger Table.')
hotlinksNewCfgTriggerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 7, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "hotlinksNewCfgTriggerId"))
if mibBuilder.loadTexts: hotlinksNewCfgTriggerTableEntry.setStatus('current')
if mibBuilder.loadTexts: hotlinksNewCfgTriggerTableEntry.setDescription('A row in the Hot Links Trigger Table.')
hotlinksNewCfgTriggerId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerId.setStatus('current')
if mibBuilder.loadTexts: hotlinksNewCfgTriggerId.setDescription('The Trigger identifier.')
hotlinksNewCfgTriggerState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerState.setStatus('current')
if mibBuilder.loadTexts: hotlinksNewCfgTriggerState.setDescription('Enable/disable Trigger state.')
hotlinksNewCfgTriggerPreemptState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerPreemptState.setStatus('current')
if mibBuilder.loadTexts: hotlinksNewCfgTriggerPreemptState.setDescription('Enable/disable Preemption state.')
hotlinksNewCfgTriggerFdelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerFdelay.setStatus('current')
if mibBuilder.loadTexts: hotlinksNewCfgTriggerFdelay.setDescription('Forward Delay setting (in secs).')
hotlinksNewCfgTriggerMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerMasterPort.setStatus('current')
if mibBuilder.loadTexts: hotlinksNewCfgTriggerMasterPort.setDescription('The master interface port number.')
hotlinksNewCfgTriggerMasterTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerMasterTrunk.setStatus('current')
if mibBuilder.loadTexts: hotlinksNewCfgTriggerMasterTrunk.setDescription('The master interface trunk number.')
hotlinksNewCfgTriggerBackupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerBackupPort.setStatus('current')
if mibBuilder.loadTexts: hotlinksNewCfgTriggerBackupPort.setDescription('The backup interface port number.')
hotlinksNewCfgTriggerBackupTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerBackupTrunk.setStatus('current')
if mibBuilder.loadTexts: hotlinksNewCfgTriggerBackupTrunk.setDescription('The backup interface trunk number.')
thashL2 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 7, 1))
mirrPortMirr = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1))
mstGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1))
mstCistCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2))
ufdGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1))
fdbGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12, 1))
dot1xCurCfgGlobalTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 5))
dot1xNewCfgGlobalTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 6))
fdbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1))
stpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 2))
lacpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3))
ufdStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 4))
hotlinksStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 6))
hotlinksStatsTriggerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 6, 1), )
if mibBuilder.loadTexts: hotlinksStatsTriggerTable.setStatus('current')
if mibBuilder.loadTexts: hotlinksStatsTriggerTable.setDescription('The Hot Links Trigger Table Stats.')
hotlinksStatsTriggerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 6, 1, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "hotlinksStatsTriggerId"))
if mibBuilder.loadTexts: hotlinksStatsTriggerTableEntry.setStatus('current')
if mibBuilder.loadTexts: hotlinksStatsTriggerTableEntry.setDescription('A row in the Hot Links Trigger Table Stats.')
hotlinksStatsTriggerId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksStatsTriggerId.setStatus('current')
if mibBuilder.loadTexts: hotlinksStatsTriggerId.setDescription('The Trigger identifier.')
hotlinksStatsTriggerMasterActive = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksStatsTriggerMasterActive.setStatus('current')
if mibBuilder.loadTexts: hotlinksStatsTriggerMasterActive.setDescription('The number of times the master interface was set to active.')
hotlinksStatsTriggerBackupActive = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksStatsTriggerBackupActive.setStatus('current')
if mibBuilder.loadTexts: hotlinksStatsTriggerBackupActive.setDescription('The number of times the backup interface was set to active.')
hotlinksStatsTriggerFdbUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksStatsTriggerFdbUpdate.setStatus('current')
if mibBuilder.loadTexts: hotlinksStatsTriggerFdbUpdate.setDescription('The number of times an FDB update was performed.')
hotlinksStatsTriggerFdbFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksStatsTriggerFdbFailed.setStatus('current')
if mibBuilder.loadTexts: hotlinksStatsTriggerFdbFailed.setDescription('The number of times an FDB update failed.')
cistInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1))
fdbInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2))
stpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3))
lacpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 4))
dot1xInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5))
dot1pInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6))
genInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 7))
vlanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 8))
trunkGroupInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 9))
hotlinksInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 10))
hotlinksInfoOnState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoOnState.setStatus('current')
if mibBuilder.loadTexts: hotlinksInfoOnState.setDescription('Hot Links ON/OFF setting info.')
hotlinksInfoFdbUpdateState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoFdbUpdateState.setStatus('current')
if mibBuilder.loadTexts: hotlinksInfoFdbUpdateState.setDescription('Enable/disable Hot Links FDB Update setting info.')
hotlinksInfoTriggerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 10, 3), )
if mibBuilder.loadTexts: hotlinksInfoTriggerTable.setStatus('current')
if mibBuilder.loadTexts: hotlinksInfoTriggerTable.setDescription('The Hot Links Trigger Table Info.')
hotlinksInfoTriggerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 10, 3, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "hotlinksInfoTriggerId"))
if mibBuilder.loadTexts: hotlinksInfoTriggerTableEntry.setStatus('current')
if mibBuilder.loadTexts: hotlinksInfoTriggerTableEntry.setDescription('A row in the Hot Links Trigger Table Info.')
hotlinksInfoTriggerId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoTriggerId.setStatus('current')
if mibBuilder.loadTexts: hotlinksInfoTriggerId.setDescription('The Trigger identifier.')
hotlinksInfoTriggerState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoTriggerState.setStatus('current')
if mibBuilder.loadTexts: hotlinksInfoTriggerState.setDescription('Enable/disable Trigger state info.')
hotlinksInfoTriggerPreemptState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoTriggerPreemptState.setStatus('current')
if mibBuilder.loadTexts: hotlinksInfoTriggerPreemptState.setDescription('Enable/disable Preemption state info.')
hotlinksInfoTriggerFdelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 10, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoTriggerFdelay.setStatus('current')
if mibBuilder.loadTexts: hotlinksInfoTriggerFdelay.setDescription('Forward Delay setting info (in secs).')
hotlinksInfoTriggerActive = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 10, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoTriggerActive.setStatus('current')
if mibBuilder.loadTexts: hotlinksInfoTriggerActive.setDescription('A textual string containing the active interface info.')
dot1xSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 2))
cistGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1))
vlanMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMaxEnt.setStatus('current')
if mibBuilder.loadTexts: vlanMaxEnt.setDescription('The maximum number of rows in the VLAN configuration table.')
vlanCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 2), )
if mibBuilder.loadTexts: vlanCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgTable.setDescription('The table of VLAN configuration.')
vlanCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 2, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "vlanCurCfgVlanId"))
if mibBuilder.loadTexts: vlanCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgTableEntry.setDescription('A row in the VLAN configuration table.')
vlanCurCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgVlanId.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgVlanId.setDescription('The VLAN identifier.')
vlanCurCfgVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgVlanName.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgVlanName.setDescription('The VLAN name.')
vlanCurCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgPorts.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgPorts.setDescription('The port list in the VLAN. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to the VLAN 0 - The represented port does not belong to the VLAN')
vlanCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgState.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgState.setDescription('Enable or disable a VLAN')
vlanCurCfgStg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgStg.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgStg.setDescription('The Spanning Tree Group for the VLAN.')
vlanNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 3), )
if mibBuilder.loadTexts: vlanNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgTable.setDescription('The table of VLAN configuration.')
vlanNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 3, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "vlanNewCfgVlanId"))
if mibBuilder.loadTexts: vlanNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgTableEntry.setDescription('A row in the VLAN configuration table.')
vlanNewCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNewCfgVlanId.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgVlanId.setDescription('The VLAN identifier.')
vlanNewCfgVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgVlanName.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgVlanName.setDescription('The VLAN name.')
vlanNewCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNewCfgPorts.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgPorts.setDescription('The port list in the VLAN. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to the VLAN 0 - The represented port does not belong to the VLAN')
vlanNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgState.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgState.setDescription('Enable or disable a VLAN')
vlanNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgAddPort.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgAddPort.setDescription("The port to be added to the specified VLAN. A '0' value is returned when read.")
vlanNewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgRemovePort.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgRemovePort.setDescription("The port to be removed from the specified VLAN. A '0' value is returned when read.")
vlanNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgDelete.setDescription('This is an action object to create or delete a VLAN. other(1) is returned always when read. The following values are writable: delete(2)...to delete a VLAN')
vlanNewCfgStg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgStg.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgStg.setDescription('The Spanning Tree Group for the VLAN.')
trunkGroupTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: trunkGroupTableMaxSize.setDescription('The maximum number of entries in trunk group table.')
trunkGroupCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 2), )
if mibBuilder.loadTexts: trunkGroupCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: trunkGroupCurCfgTable.setDescription('The table of trunk group configuration.')
trunkGroupCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 2, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "trunkGroupCurCfgIndex"))
if mibBuilder.loadTexts: trunkGroupCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: trunkGroupCurCfgTableEntry.setDescription('A row in the trunk group configuration table.')
trunkGroupCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgIndex.setStatus('current')
if mibBuilder.loadTexts: trunkGroupCurCfgIndex.setDescription('The identifier of the trunk group.')
trunkGroupCurCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgPorts.setStatus('current')
if mibBuilder.loadTexts: trunkGroupCurCfgPorts.setDescription('The port list in the trunk group. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to the trunk group 0 - The represented port does not belong to the trunk group')
trunkGroupCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgState.setStatus('current')
if mibBuilder.loadTexts: trunkGroupCurCfgState.setDescription('Enable or disable a trunk group.')
trunkGroupNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 3), )
if mibBuilder.loadTexts: trunkGroupNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgTable.setDescription('The table of trunk group configuration.')
trunkGroupNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 3, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "trunkGroupNewCfgIndex"))
if mibBuilder.loadTexts: trunkGroupNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgTableEntry.setDescription('A row in the trunk group configuration table.')
trunkGroupNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupNewCfgIndex.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgIndex.setDescription('The identifier of the trunk group.')
trunkGroupNewCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupNewCfgPorts.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgPorts.setDescription('The port list in the trunk group. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to the trunk group 0 - The represented port does not belong to the trunk group')
trunkGroupNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgAddPort.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgAddPort.setDescription('The port to be added in the trunk group. When read, 0 is returned.')
trunkGroupNewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgRemovePort.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgRemovePort.setDescription('The port to be deleted from the trunk group. when read, 0 is returned.')
trunkGroupNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgState.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgState.setDescription('Enable or disable a trunk group.')
trunkGroupNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgDelete.setDescription('Setting the value to delete(2) will delete the entire row. When read, other(1) is returned.')
l2ThashCurCfgSmacState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2ThashCurCfgSmacState.setStatus('current')
if mibBuilder.loadTexts: l2ThashCurCfgSmacState.setDescription('Enable or disable smac hash.')
l2ThashNewCfgSmacState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2ThashNewCfgSmacState.setStatus('current')
if mibBuilder.loadTexts: l2ThashNewCfgSmacState.setDescription('Enable or disable smac hash.')
l2ThashCurCfgDmacState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2ThashCurCfgDmacState.setStatus('current')
if mibBuilder.loadTexts: l2ThashCurCfgDmacState.setDescription('Enable or disable dmac hash.')
l2ThashNewCfgDmacState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2ThashNewCfgDmacState.setStatus('current')
if mibBuilder.loadTexts: l2ThashNewCfgDmacState.setDescription('Enable or disable dmac hash.')
l2ThashCurCfgSipState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2ThashCurCfgSipState.setStatus('current')
if mibBuilder.loadTexts: l2ThashCurCfgSipState.setDescription('Enable or disable sip hash.')
l2ThashNewCfgSipState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2ThashNewCfgSipState.setStatus('current')
if mibBuilder.loadTexts: l2ThashNewCfgSipState.setDescription('Enable or disable sip hash.')
l2ThashCurCfgDipState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2ThashCurCfgDipState.setStatus('current')
if mibBuilder.loadTexts: l2ThashCurCfgDipState.setDescription('Enable or disable dip hash.')
l2ThashNewCfgDipState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2ThashNewCfgDipState.setStatus('current')
if mibBuilder.loadTexts: l2ThashNewCfgDipState.setDescription('Enable or disable dip hash.')
stgCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1), )
if mibBuilder.loadTexts: stgCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgTable.setDescription('The table of Spanning Tree Group configuration.')
stgCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "stgCurCfgIndex"))
if mibBuilder.loadTexts: stgCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgTableEntry.setDescription('Information about a particular Spanning Tree Group configuration.')
stgCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgIndex.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgIndex.setDescription('The identifier of a particular Spanning Tree Group. This is also index to the entLogicalTable of Entity MIB.')
stgCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgState.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgState.setDescription('Turn on of off Spanning Tree operation of a particular Spanning Tree Group.')
stgCurCfgVlanBmap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgVlanBmap1.setStatus('obsolete')
if mibBuilder.loadTexts: stgCurCfgVlanBmap1.setDescription('The vlans applied to the spanning tree group. The vlans are presented in bitmap format. This string displays vlan number from 1 to 2048. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ vlan 9 || || || ||___ vlan 8 || |____ vlan 7 || . . . ||_________ vlan 2 |__________ vlan 1 (as index to stgCurCfgTable) where x : 1 - The represented vlan applied to the spanning tree. 0 - The represented vlan not applied to the spanning tree')
stgCurCfgVlanBmap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgVlanBmap2.setStatus('obsolete')
if mibBuilder.loadTexts: stgCurCfgVlanBmap2.setDescription('The vlans applied to the spanning tree group. The vlans are presented in bitmap format. This string displays vlan number from 2049 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ vlan 2057 || || || ||___ vlan 2056 || |____ vlan 2055 || . . . ||_________ vlan 2050 |__________ vlan 2049 (as index to stgCurCfgTable) where x : 1 - The represented vlan applied to the spanning tree. 0 - The represented vlan not applied to the spanning tree')
stgCurCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPriority.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPriority.setDescription('The value of the write-able portion of the Bridge ID, i.e., the first two octets of the (8 octet long) Bridge ID.')
stgCurCfgBrgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgBrgHelloTime.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgBrgHelloTime.setDescription('The value in seconds that all bridges use for HelloTime when this bridge is acting as the root.')
stgCurCfgBrgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgBrgForwardDelay.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgBrgForwardDelay.setDescription('The value in seconds that all bridges use for ForwardDelay when this bridge is acting as the root.')
stgCurCfgBrgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgBrgMaxAge.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgBrgMaxAge.setDescription('The value in seconds that all bridges use for MaxAge when this bridge is acting as the root.')
stgCurCfgAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgAgingTime.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgAgingTime.setDescription('The timeout period in seconds for aging out dynamically learned forwarding information.')
stgCurCfgVlanBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgVlanBmap.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgVlanBmap.setDescription('The vlans applied to the spanning tree group. The vlans are presented in bitmap format. This string displays vlan number from 1 to 4095. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ vlan 9 || || || ||___ vlan 8 || |____ vlan 7 || . . . ||_________ vlan 2 |__________ vlan 1 (as index to stgCurCfgTable) where x : 1 - The represented vlan applied to the spanning tree. 0 - The represented vlan not applied to the spanning tree')
stgNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2), )
if mibBuilder.loadTexts: stgNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgTable.setDescription('The table of Spanning Tree Groups configuration in the new_config.')
stgNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "stgNewCfgIndex"))
if mibBuilder.loadTexts: stgNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgTableEntry.setDescription('Information about a particular Spanning Tree Group configuration.')
stgNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgIndex.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgIndex.setDescription('The identifier of a particular Spanning Tree Group. This is also index to the entLogicalTable of Entity MIB.')
stgNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgState.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgState.setDescription('Turn on of off Spanning Tree operation of a particular Spanning Tree Group.')
stgNewCfgDefaultCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("default-config", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgDefaultCfg.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgDefaultCfg.setDescription('Setting the value to default-config(1) will set the default configuration as recommended by IEEE 802.1D for a particular Spanning Tree Group. default-config (1) is always returned When read, but it does not mean anything.')
stgNewCfgAddVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgAddVlan.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgAddVlan.setDescription("The vlan to be added to the specified Spanning Tree Group. A '0' value is returned when read.")
stgNewCfgRemoveVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgRemoveVlan.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgRemoveVlan.setDescription("The vlan to be removed from the specified Spanning Tree Group. A '0' value is returned when read.")
stgNewCfgVlanBmap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgVlanBmap1.setStatus('obsolete')
if mibBuilder.loadTexts: stgNewCfgVlanBmap1.setDescription('The vlans applied to the spanning tree group. The vlans are presented in bitmap format. This string displays vlan number from 1 to 2048. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ vlan 9 || || || ||___ vlan 8 || |____ vlan 7 || . . . ||_________ vlan 2 |__________ vlan 1 (as index to stgCurCfgTable) where x : 1 - The represented vlan applied to the spanning tree. 0 - The represented vlan not applied to the spanning tree')
stgNewCfgVlanBmap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgVlanBmap2.setStatus('obsolete')
if mibBuilder.loadTexts: stgNewCfgVlanBmap2.setDescription('The vlans applied to the spanning tree group. The vlans are presented in bitmap format. This string displays vlan number from 2049 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ vlan 2057 || || || ||___ vlan 2056 || |____ vlan 2055 || . . . ||_________ vlan 2050 |__________ vlan 2049 (as index to stgCurCfgTable) where x : 1 - The represented vlan applied to the spanning tree. 0 - The represented vlan not applied to the spanning tree')
stgNewCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPriority.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPriority.setDescription('The value of the write-able portion of the Bridge ID, i.e., the first two octets of the (8 octet long) Bridge ID.')
stgNewCfgBrgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgBrgHelloTime.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgBrgHelloTime.setDescription('The value in seconds that all bridges use for HelloTime when this bridge is acting as the root.')
stgNewCfgBrgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgBrgForwardDelay.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgBrgForwardDelay.setDescription('The value in seconds that all bridges use for ForwardDelay when this bridge is acting as the root.')
stgNewCfgBrgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgBrgMaxAge.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgBrgMaxAge.setDescription('The value in seconds that all bridges use for MaxAge when this bridge is acting as the root.')
stgNewCfgAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgAgingTime.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgAgingTime.setDescription('The timeout period in seconds for aging out dynamically learned forwarding information.')
stgNewCfgVlanBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgVlanBmap.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgVlanBmap.setDescription('The vlans applied to the spanning tree group. The vlans are presented in bitmap format. This string displays vlan number from 1 to 4095. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ vlan 9 || || || ||___ vlan 8 || |____ vlan 7 || . . . ||_________ vlan 2 |__________ vlan 1 (as index to stgCurCfgTable) where x : 1 - The represented vlan applied to the spanning tree. 0 - The represented vlan not applied to the spanning tree')
stgCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 3), )
if mibBuilder.loadTexts: stgCurCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortTable.setDescription('The table of Spanning Tree Group port configuration in the current_config.')
stgCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 3, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "stgCurCfgStgIndex"), (0, "BLADETYPE2-PHYSICAL-MIB", "stgCurCfgPortIndex"))
if mibBuilder.loadTexts: stgCurCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortTableEntry.setDescription('Information about port configuration of a particular Spanning Tree Group.')
stgCurCfgStgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgStgIndex.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgStgIndex.setDescription('The identifier of a particular Spanning Tree Group. This is also index to the entLogicalTable of Entity MIB.')
stgCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortIndex.setDescription('The port identifier of a particular Spanning Tree Group.')
stgCurCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortState.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortState.setDescription('Turn on of off Spanning Tree operation of a particular port of a Spanning Tree Group.')
stgCurCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortPriority.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortPriority.setDescription('The value of the priority field which is contained in the first (in network byte order) octet of the (2 octet long) Port ID.')
stgCurCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortPathCost.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the spanning tree root which include this port.')
stgCurCfgPortLink = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortLink.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortLink.setDescription('The type of the port link.')
stgCurCfgPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortEdge.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortEdge.setDescription('The state of port edge.')
stgCurCfgPortFastFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortFastFwd.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortFastFwd.setDescription('The state of port fast forwarding.')
stgNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 4), )
if mibBuilder.loadTexts: stgNewCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortTable.setDescription('The table of Spanning Tree Group port configuration in the new_config.')
stgNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 4, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "stgNewCfgStgIndex"), (0, "BLADETYPE2-PHYSICAL-MIB", "stgNewCfgPortIndex"))
if mibBuilder.loadTexts: stgNewCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortTableEntry.setDescription('Information about port configuration of a particular Spanning Tree Group.')
stgNewCfgStgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgStgIndex.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgStgIndex.setDescription('The identifier of a particular Spanning Tree Group. This is also index to the entLogicalTable of Entity MIB.')
stgNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortIndex.setDescription('The port identifier of a particular Spanning Tree Group.')
stgNewCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortState.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortState.setDescription('Turn on of off Spanning Tree operation of a particular port of a Spanning Tree Group.')
stgNewCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortPriority.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortPriority.setDescription('The value of the priority field which is contained in the first (in network byte order) octet of the (2 octet long) Port ID.')
stgNewCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortPathCost.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the spanning tree root which include this port.')
stgNewCfgPortLink = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortLink.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortLink.setDescription('The type of the port link.')
stgNewCfgPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortEdge.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortEdge.setDescription('The state of port edge.')
stgNewCfgPortFastFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortFastFwd.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortFastFwd.setDescription('The state of port fast forwarding.')
mstCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgState.setStatus('current')
if mibBuilder.loadTexts: mstCurCfgState.setDescription('Enable or disable MSTP/RSTP')
mstNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgState.setStatus('current')
if mibBuilder.loadTexts: mstNewCfgState.setDescription('Enable or disable MSTP/RSTP')
mstCurCfgRegionName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgRegionName.setStatus('current')
if mibBuilder.loadTexts: mstCurCfgRegionName.setDescription("The Name for the Region's configuration.")
mstNewCfgRegionName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgRegionName.setStatus('current')
if mibBuilder.loadTexts: mstNewCfgRegionName.setDescription("The Name for the Region's configuration.")
mstCurCfgRegionVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgRegionVersion.setStatus('current')
if mibBuilder.loadTexts: mstCurCfgRegionVersion.setDescription('Version of the MST Region.')
mstNewCfgRegionVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgRegionVersion.setStatus('current')
if mibBuilder.loadTexts: mstNewCfgRegionVersion.setDescription('Version of the MST Region.')
mstCurCfgMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgMaxHopCount.setStatus('current')
if mibBuilder.loadTexts: mstCurCfgMaxHopCount.setDescription('Indicates the maximum hop count value.')
mstNewCfgMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgMaxHopCount.setStatus('current')
if mibBuilder.loadTexts: mstNewCfgMaxHopCount.setDescription('Indicates the maximum hop count value.')
mstCurCfgStpMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mstp", 1), ("rstp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgStpMode.setStatus('current')
if mibBuilder.loadTexts: mstCurCfgStpMode.setDescription('The version of Spanning Tree Protocal the bridge is currently running.')
mstNewCfgStpMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mstp", 1), ("rstp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgStpMode.setStatus('current')
if mibBuilder.loadTexts: mstNewCfgStpMode.setDescription('The version of Spanning Tree Protocal the bridge is currently running.')
mstCistDefaultCfg = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("default", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistDefaultCfg.setStatus('current')
if mibBuilder.loadTexts: mstCistDefaultCfg.setDescription('Setting the value to default(1) will set the Multiple Spanning Tree and member parameters to default. default(1) is always returned when read, but it does not mean anything.')
mstCistBridgeCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 2))
mstCistCurCfgBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgBridgePriority.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgBridgePriority.setDescription('The value of the writable portion of the Brigde Identifier comprising of the first two octets.')
mstCistNewCfgBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgBridgePriority.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgBridgePriority.setDescription('The value of the writable portion of the Brigde Identifier comprising of the first two octets.')
mstCistCurCfgBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgBridgeMaxAge.setDescription('The value in seconds that all bridges use for MaxAge when this bridge is acting as the root.')
mstCistNewCfgBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgBridgeMaxAge.setDescription('The value in seconds that all bridges use for MaxAge when this bridge is acting as the root.')
mstCistCurCfgBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgBridgeForwardDelay.setDescription('The value in seconds that all bridges use for ForwardDelay when this bridge is acting as the root.')
mstCistNewCfgBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgBridgeForwardDelay.setDescription('The value in seconds that all bridges use for ForwardDelay when this bridge is acting as the root.')
mstCistCurCfgVlanBmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgVlanBmap.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgVlanBmap.setDescription('The vlans applied to the CIST group. The vlans are presented in bitmap format. This string displays vlan number from 1 to 4094. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ vlan 9 || || || ||___ vlan 8 || |____ vlan 7 || . . . ||_________ vlan 2 |__________ vlan 1 where x : 1 - The represented vlan applied to the CIST group. 0 - The represented vlan not applied to the group')
mstCistNewCfgVlanBmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 2, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistNewCfgVlanBmap.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgVlanBmap.setDescription('The vlans applied to the CIST group. The vlans are presented in bitmap format. This string displays vlan number from 1 to 4094. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ vlan 9 || || || ||___ vlan 8 || |____ vlan 7 || . . . ||_________ vlan 2 |__________ vlan 1 where x : 1 - The represented vlan applied to the CIST group. 0 - The represented vlan not applied to the group')
mstCistNewCfgAddVlan = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 2, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgAddVlan.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgAddVlan.setDescription("The vlan to be added to the CIST Group. A '0' value is returned when read.")
mstCistCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 3), )
if mibBuilder.loadTexts: mstCistCurCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortTable.setDescription('The table of CIST Port configuration.')
mstCistCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 3, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "mstCistCurCfgPortIndex"))
if mibBuilder.loadTexts: mstCistCurCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortTableEntry.setDescription('Information about a particular CIST Port configuration.')
mstCistCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortIndex.setDescription('The port number of the port for which this entry contains spanning tree configuration.')
mstCistCurCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortPriority.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortPriority.setDescription('The four most significant bits of the Port Identifier of the Spanning Tree instance can be modified by setting this value.')
mstCistCurCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortPathCost.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the CIST Root which include this port.')
mstCistCurCfgPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortLinkType.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortLinkType.setDescription('The administrative point-to-point status of the LAN segment attached to this port. A value of p2p (2) indicates that this port should always be treated as if it is connected to a point-to-point link. A value of shared(3) indicates that this port should be treated as having a shared media connection. A value of auto(1) indicates that this port is considered to have a point-to-point link if it is an Aggregator and all of its members are aggregatable, or if the MAC entity is configured for full duplex operation, either through auto-negotiation or by management means.')
mstCistCurCfgPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortEdge.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortEdge.setDescription('The value of the Edge Port parameter.')
mstCistCurCfgPortStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortStpState.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortStpState.setDescription("Turn port's Spanning Tree on/off.")
mstCistCurCfgPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortHelloTime.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortHelloTime.setDescription('The amount of time between the transmission of Configuration Port PDUs in seconds.')
mstCistNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 4), )
if mibBuilder.loadTexts: mstCistNewCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortTable.setDescription('The table of CIST Port configuration.')
mstCistNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 4, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "mstCistNewCfgPortIndex"))
if mibBuilder.loadTexts: mstCistNewCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortTableEntry.setDescription('Information about a particular CIST Port configuration.')
mstCistNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistNewCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortIndex.setDescription('The port number of the port for which this entry contains spanning tree configuration.')
mstCistNewCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgPortPriority.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortPriority.setDescription('The four most significant bits of the Port Identifier of the Spanning Tree instance can be modified by setting this value.')
mstCistNewCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgPortPathCost.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the CIST Root which include this port.')
mstCistNewCfgPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgPortLinkType.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortLinkType.setDescription('The administrative point-to-point status of the LAN segment attached to this port. A value of p2p (2) indicates that this port should always be treated as if it is connected to a point-to-point link. A value of shared(3) indicates that this port should be treated as having a shared media connection. A value of auto(1) indicates that this port is considered to have a point-to-point link if it is an Aggregator and all of its members are aggregatable, or if the MAC entity is configured for full duplex operation, either through auto-negotiation or by management means.')
mstCistNewCfgPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgPortEdge.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortEdge.setDescription('The value of the Edge Port parameter.')
mstCistNewCfgPortStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgPortStpState.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortStpState.setDescription("Turn port's Spanning Tree on/off.")
mstCistNewCfgPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgPortHelloTime.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortHelloTime.setDescription('The amount of time between the transmission of Configuration Port PDUs in seconds.')
pmCurCfgPortMirrState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPortMirrState.setStatus('current')
if mibBuilder.loadTexts: pmCurCfgPortMirrState.setDescription('The state of port-based port mirroring.')
pmNewCfgPortMirrState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgPortMirrState.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPortMirrState.setDescription('The state of port-based port mirroring.')
pmCurCfgPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 3), )
if mibBuilder.loadTexts: pmCurCfgPortMonitorTable.setStatus('current')
if mibBuilder.loadTexts: pmCurCfgPortMonitorTable.setDescription('The table of monitoring ports.')
pmCurCfgPortMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 3, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "pmCurCfgPmirrMoniPortIndex"), (0, "BLADETYPE2-PHYSICAL-MIB", "pmCurCfgPmirrMirrPortIndex"))
if mibBuilder.loadTexts: pmCurCfgPortMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: pmCurCfgPortMonitorEntry.setDescription('A row in the monitoring port table.')
pmCurCfgPmirrMoniPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrMoniPortIndex.setStatus('current')
if mibBuilder.loadTexts: pmCurCfgPmirrMoniPortIndex.setDescription('The monitoring port number.')
pmCurCfgPmirrMirrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrMirrPortIndex.setStatus('current')
if mibBuilder.loadTexts: pmCurCfgPmirrMirrPortIndex.setDescription('The mirrored port number')
pmCurCfgPmirrDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrDirection.setStatus('current')
if mibBuilder.loadTexts: pmCurCfgPmirrDirection.setDescription('The type of traffic to be monitored with respect to the mirrored port.')
pmNewCfgPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 4), )
if mibBuilder.loadTexts: pmNewCfgPortMonitorTable.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPortMonitorTable.setDescription('The table of monitoring ports.')
pmNewCfgPortMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 4, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "pmNewCfgPmirrMoniPortIndex"), (0, "BLADETYPE2-PHYSICAL-MIB", "pmNewCfgPmirrMirrPortIndex"))
if mibBuilder.loadTexts: pmNewCfgPortMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPortMonitorEntry.setDescription('A row in the monitoring port table.')
pmNewCfgPmirrMoniPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmNewCfgPmirrMoniPortIndex.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPmirrMoniPortIndex.setDescription('The monitoring port number.')
pmNewCfgPmirrMirrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmNewCfgPmirrMirrPortIndex.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPmirrMirrPortIndex.setDescription('The mirrored port number')
pmNewCfgPmirrDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmNewCfgPmirrDirection.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPmirrDirection.setDescription('The type of traffic to be monitored with respect to the mirrored port.')
pmNewCfgPmirrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmNewCfgPmirrDelete.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPmirrDelete.setDescription('Setting the value to delete(2) will delete the entire row. When read, other(1) is returned.')
pmNewCfgPmonDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmNewCfgPmonDelete.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPmonDelete.setDescription('Setting the value to delete(2) will delete the monitor port. When read, other(1) is returned.')
lacpCurSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurSystemPriority.setStatus('current')
if mibBuilder.loadTexts: lacpCurSystemPriority.setDescription("A 2-octet read-write value indicating the priority value associated with the Actor's System ID.")
lacpNewSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewSystemPriority.setStatus('current')
if mibBuilder.loadTexts: lacpNewSystemPriority.setDescription("A 2-octet read-write value indicating the priority value associated with the Actor's System ID.")
lacpCurSystemTimeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 90))).clone(namedValues=NamedValues(("short", 3), ("long", 90)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurSystemTimeoutTime.setStatus('current')
if mibBuilder.loadTexts: lacpCurSystemTimeoutTime.setDescription('If a port does not receive LACPDUs for Timeout time LACP information pertaining to the port is invalidated. Its every 3 sec (short) and every 90 sec (long 3).')
lacpNewSystemTimeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 90))).clone(namedValues=NamedValues(("short", 3), ("long", 90)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewSystemTimeoutTime.setStatus('current')
if mibBuilder.loadTexts: lacpNewSystemTimeoutTime.setDescription('If a port does not receive LACPDUs for Timeout time LACP information pertaining to the port is invalidated. Its every 3 sec (short) and every 90 sec (long 3).')
lacpCurPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 7), )
if mibBuilder.loadTexts: lacpCurPortCfgTable.setStatus('current')
if mibBuilder.loadTexts: lacpCurPortCfgTable.setDescription('The table of LACP port configuration.')
lacpCurPortCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 7, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "lacpCurPortCfgTableId"))
if mibBuilder.loadTexts: lacpCurPortCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: lacpCurPortCfgTableEntry.setDescription('A row in the LACP port configuration table.')
lacpCurPortCfgTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortCfgTableId.setStatus('current')
if mibBuilder.loadTexts: lacpCurPortCfgTableId.setDescription(' LACP port number.')
lacpCurPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("active", 2), ("passive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortState.setStatus('current')
if mibBuilder.loadTexts: lacpCurPortState.setDescription('LACP port state can be one of three states off (Not participating in LACP) Active (Initiates LACPDU updates) Passive (Does not initiate LACPDU updates but responds to peer.')
lacpCurPortActorPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortActorPortPriority.setStatus('current')
if mibBuilder.loadTexts: lacpCurPortActorPortPriority.setDescription('The priority value assigned to this Aggregation Port. This 16-bit value is read-only.')
lacpCurPortActorAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortActorAdminKey.setStatus('current')
if mibBuilder.loadTexts: lacpCurPortActorAdminKey.setDescription('The current administrative value of the Key for the Aggregation Port. This is a 16-bit read-only value. The meaning of particular Key values is of local significance.')
lacpNewPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 8), )
if mibBuilder.loadTexts: lacpNewPortCfgTable.setStatus('current')
if mibBuilder.loadTexts: lacpNewPortCfgTable.setDescription('The table of LACP port configuration.')
lacpNewPortCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 8, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "lacpNewPortCfgTableId"))
if mibBuilder.loadTexts: lacpNewPortCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: lacpNewPortCfgTableEntry.setDescription('A row in the LACP port configuration table.')
lacpNewPortCfgTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpNewPortCfgTableId.setStatus('current')
if mibBuilder.loadTexts: lacpNewPortCfgTableId.setDescription(' LACP port number.')
lacpNewPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("active", 2), ("passive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewPortState.setStatus('current')
if mibBuilder.loadTexts: lacpNewPortState.setDescription('LACP port state can be one of three states off (Not participating in LACP) Active (Initiates LACPDU updates) Passive (Does not initiate LACPDU updates but responds to peer.')
lacpNewPortActorPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewPortActorPortPriority.setStatus('current')
if mibBuilder.loadTexts: lacpNewPortActorPortPriority.setDescription('The priority value assigned to this Aggregation Port. This 16-bit value is read-write.')
lacpNewPortActorAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewPortActorAdminKey.setStatus('current')
if mibBuilder.loadTexts: lacpNewPortActorAdminKey.setDescription('The current administrative value of the Key for the Aggregation Port. This is a 16-bit read-write value. The meaning of particular Key values is of local significance.')
upfastCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upfastCurCfgState.setStatus('current')
if mibBuilder.loadTexts: upfastCurCfgState.setDescription('Enable or disable uplink fast')
upfastNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upfastNewCfgState.setStatus('current')
if mibBuilder.loadTexts: upfastNewCfgState.setDescription('Enable or disable uplink fast')
updateCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: updateCurCfgState.setStatus('current')
if mibBuilder.loadTexts: updateCurCfgState.setDescription('UplinkFast station update rate: packets per second')
updateNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: updateNewCfgState.setStatus('current')
if mibBuilder.loadTexts: updateNewCfgState.setDescription('UplinkFast station update rate: packets per second')
fdbStatsCreates = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsCreates.setStatus('current')
if mibBuilder.loadTexts: fdbStatsCreates.setDescription('Number of entries created in the Forwarding Database.')
fdbStatsDeletes = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsDeletes.setStatus('current')
if mibBuilder.loadTexts: fdbStatsDeletes.setDescription('Number of entries deleted from the Forwarding Database.')
fdbStatsCurrent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsCurrent.setStatus('current')
if mibBuilder.loadTexts: fdbStatsCurrent.setDescription('Current number of entries in the Forwarding Database.')
fdbStatsHiwat = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsHiwat.setStatus('current')
if mibBuilder.loadTexts: fdbStatsHiwat.setDescription('Highest number of entries recorded at any given time in the Forwarding Database.')
fdbStatsLookups = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsLookups.setStatus('current')
if mibBuilder.loadTexts: fdbStatsLookups.setDescription('Number of entry lookups in the Forwarding Database.')
fdbStatsLookupFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsLookupFails.setStatus('current')
if mibBuilder.loadTexts: fdbStatsLookupFails.setDescription('Number of unsuccessful searches made in the Forwarding Database.')
fdbStatsFinds = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsFinds.setStatus('current')
if mibBuilder.loadTexts: fdbStatsFinds.setDescription('Number of searches in the Forwarding Database.')
fdbStatsFindFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsFindFails.setStatus('current')
if mibBuilder.loadTexts: fdbStatsFindFails.setDescription('Number of search failures in the Forwarding Database.')
fdbStatsFindOrCreates = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsFindOrCreates.setStatus('current')
if mibBuilder.loadTexts: fdbStatsFindOrCreates.setDescription('Number of entries found or created in the Forwarding Database.')
fdbStatsOverflows = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsOverflows.setStatus('current')
if mibBuilder.loadTexts: fdbStatsOverflows.setDescription('Number of entries overflowing the Forwarding Database.')
stgStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 2, 1), )
if mibBuilder.loadTexts: stgStatsPortTable.setStatus('current')
if mibBuilder.loadTexts: stgStatsPortTable.setDescription('The table of Spanning Tree Group port statistics.')
stgStatsPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 2, 1, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "stgStatsStpIndex"), (0, "BLADETYPE2-PHYSICAL-MIB", "stgStatsPortIndex"))
if mibBuilder.loadTexts: stgStatsPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: stgStatsPortTableEntry.setDescription('Statistics about port of a particular Spanning Tree Group.')
stgStatsStpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsStpIndex.setStatus('current')
if mibBuilder.loadTexts: stgStatsStpIndex.setDescription('The identifier of a particular Spanning Tree Group.')
stgStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortIndex.setStatus('current')
if mibBuilder.loadTexts: stgStatsPortIndex.setDescription('The port identifier of a particular Spanning Tree Group.')
stgStatsPortRcvCfgBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortRcvCfgBpdus.setStatus('current')
if mibBuilder.loadTexts: stgStatsPortRcvCfgBpdus.setDescription("Number of Configuration BPDU's received on this port.")
stgStatsPortRcvTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortRcvTcnBpdus.setStatus('current')
if mibBuilder.loadTexts: stgStatsPortRcvTcnBpdus.setDescription("Number of TCN BPDU's received on this port.")
stgStatsPortXmtCfgBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortXmtCfgBpdus.setStatus('current')
if mibBuilder.loadTexts: stgStatsPortXmtCfgBpdus.setDescription("Number of Configuration BPDU's trasmitted from the port.")
stgStatsPortXmtTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortXmtTcnBpdus.setStatus('current')
if mibBuilder.loadTexts: stgStatsPortXmtTcnBpdus.setDescription("Number of TCN BPDU's trasmitted from the port.")
lacpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1), )
if mibBuilder.loadTexts: lacpStatsTable.setStatus('current')
if mibBuilder.loadTexts: lacpStatsTable.setDescription('The table of LACP Stats.')
lacpStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "lacpStatsIndex"))
if mibBuilder.loadTexts: lacpStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: lacpStatsTableEntry.setDescription('Lacp status info.')
lacpStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpStatsIndex.setStatus('current')
if mibBuilder.loadTexts: lacpStatsIndex.setDescription('Index')
lacpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpdusRx.setStatus('current')
if mibBuilder.loadTexts: lacpdusRx.setDescription('Valid LACPDUs received')
markerpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: markerpdusRx.setStatus('current')
if mibBuilder.loadTexts: markerpdusRx.setDescription('Valid Marker PDUs received')
markerresponsepdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: markerresponsepdusRx.setStatus('current')
if mibBuilder.loadTexts: markerresponsepdusRx.setDescription('Valid Marker Rsp PDUs received')
unknownRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownRx.setStatus('current')
if mibBuilder.loadTexts: unknownRx.setDescription('Unknown version/TLV type')
illegalRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: illegalRx.setStatus('current')
if mibBuilder.loadTexts: illegalRx.setDescription('Illegal subtype received')
lacpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpdusTx.setStatus('current')
if mibBuilder.loadTexts: lacpdusTx.setDescription('LACPDUs transmitted')
markerpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: markerpdusTx.setStatus('current')
if mibBuilder.loadTexts: markerpdusTx.setDescription('Market PDUs transmitted')
markerresponsepdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: markerresponsepdusTx.setStatus('current')
if mibBuilder.loadTexts: markerresponsepdusTx.setDescription('Marker Rsp PDUs transmitted ')
ufdNoLtMLinkFailure = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdNoLtMLinkFailure.setStatus('current')
if mibBuilder.loadTexts: ufdNoLtMLinkFailure.setDescription(' ')
ufdNoLtMLinkBlockingState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdNoLtMLinkBlockingState.setStatus('current')
if mibBuilder.loadTexts: ufdNoLtMLinkBlockingState.setDescription(' ')
ufdNoLtDAutoDisabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdNoLtDAutoDisabled.setStatus('current')
if mibBuilder.loadTexts: ufdNoLtDAutoDisabled.setDescription(' ')
fdbClear = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbClear.setStatus('current')
if mibBuilder.loadTexts: fdbClear.setDescription('Setting this value to clear(2) clears the entire master FDB.')
fdbTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2, 2), )
if mibBuilder.loadTexts: fdbTable.setStatus('current')
if mibBuilder.loadTexts: fdbTable.setDescription('The table of FDB entries.')
fdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2, 2, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "fdbMacAddr"))
if mibBuilder.loadTexts: fdbEntry.setStatus('current')
if mibBuilder.loadTexts: fdbEntry.setDescription('A row in the FDB table')
fdbMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2, 2, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacAddr.setStatus('current')
if mibBuilder.loadTexts: fdbMacAddr.setDescription('The MAC address for the FDB entry.')
fdbVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbVlan.setStatus('current')
if mibBuilder.loadTexts: fdbVlan.setDescription('The VLAN ID for the FDB entry.')
fdbSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbSrcPort.setStatus('current')
if mibBuilder.loadTexts: fdbSrcPort.setDescription("Either the value '0', or the port number of the port on which a frame having a source address equal to the value of the corresponding instance has been seen. A value of '0' indicates that the port number has not been learned but that the bridge does have some forwarding/filtering information about this address.")
fdbState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("ignore", 2), ("forward", 3), ("flood", 4), ("ffd", 5), ("trunk", 6), ("vir", 7), ("vsr", 8), ("vpr", 9), ("other", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbState.setStatus('current')
if mibBuilder.loadTexts: fdbState.setDescription('The state of the FDB entry. The meanings of the values are : unknown(1) : the MAC address has not yet been learned by the switch but has only been seen as a destination address forward(3) : the MAC address has been learned by the switch flood(4) : the MAC address is a multicast destination address trunk(6) : frames with this MAC address are forwarded to trunk group vir(7) : frames with this MAC address are forwarded for L3 processing')
fdbRefSps = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbRefSps.setStatus('current')
if mibBuilder.loadTexts: fdbRefSps.setDescription('The referenced SPs associated with this FDB entry.')
fdbLearnedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbLearnedPort.setStatus('current')
if mibBuilder.loadTexts: fdbLearnedPort.setDescription('The learned port associated with this FDB entry.')
fdbSrcTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbSrcTrunk.setStatus('current')
if mibBuilder.loadTexts: fdbSrcTrunk.setDescription("Either the value '0', or the trunk number of the trunk on which a frame having a source address equal to the value of the corresponding instance has been seen. A value of '0' indicates that the source address is not associated with a trunk.")
stpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1), )
if mibBuilder.loadTexts: stpInfoTable.setStatus('current')
if mibBuilder.loadTexts: stpInfoTable.setDescription('The table of Spanning Tree Group information.')
stpInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "stpInfoIndex"))
if mibBuilder.loadTexts: stpInfoTableEntry.setStatus('current')
if mibBuilder.loadTexts: stpInfoTableEntry.setDescription('Information about a particular Spanning Tree Group.')
stpInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoIndex.setStatus('current')
if mibBuilder.loadTexts: stpInfoIndex.setDescription('The identifier of a particular Spanning Tree Group. This is also index to the entLogicalTable of Entity MIB.')
stpInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoState.setStatus('current')
if mibBuilder.loadTexts: stpInfoState.setDescription('Turn on of off Spanning Tree operation of a particular Spanning Tree Group.')
stgInfoVlanBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgInfoVlanBmap.setStatus('current')
if mibBuilder.loadTexts: stgInfoVlanBmap.setDescription('The vlans applied to the spanning tree group. The vlans are presented in bitmap format. This string displays vlan number from 1 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ vlan 9 || || || ||___ vlan 8 || |____ vlan 7 || . . . ||_________ vlan 2 |__________ vlan 1 (as index to stgCurCfgTable) where x : 1 - The represented vlan applied to the spanning tree. 0 - The represented vlan not applied to the spanning tree')
stpInfoTimeSinceTopChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoTimeSinceTopChange.setStatus('current')
if mibBuilder.loadTexts: stpInfoTimeSinceTopChange.setDescription('The time (in hundredths of a second) since the last time a topology change was detected by the bridge entity.')
stpInfoTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoTopChanges.setStatus('current')
if mibBuilder.loadTexts: stpInfoTopChanges.setDescription('The total number of topology changes detected by this bridge since the management entity was last reset or initialized.')
stpInfoDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: stpInfoDesignatedRoot.setDescription('The bridge identifier of the root of the spanning tree as determined by the Spanning Tree Protocol as executed by this node. This value is used as the Root Identifier parameter in all Configuration Bridge PDUs originated by this node.')
stpInfoRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoRootCost.setStatus('current')
if mibBuilder.loadTexts: stpInfoRootCost.setDescription('The cost of the path to the root as seen from this bridge.')
stpInfoRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoRootPort.setStatus('current')
if mibBuilder.loadTexts: stpInfoRootPort.setDescription('The port number of the port which offers the lowest cost path from this bridge to the root bridge.')
stpInfoMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoMaxAge.setStatus('current')
if mibBuilder.loadTexts: stpInfoMaxAge.setDescription('The maximum age of Spanning Tree Protocol information learned from the network on any port before it is discarded, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
stpInfoHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoHelloTime.setStatus('current')
if mibBuilder.loadTexts: stpInfoHelloTime.setDescription('The amount of time between the transmission of Configuration bridge PDUs by this node on any port when it is the root of the spanning tree or trying to become so, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
stpInfoForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoForwardDelay.setStatus('current')
if mibBuilder.loadTexts: stpInfoForwardDelay.setDescription('This time value, measured in units of hundredths of a second, controls how fast a port changes its spanning state when moving towards the Forwarding state. The value determines how long the port stays in each of the Listening and Learning states, which precede the Forwarding state. This value is also used, when a topology change has been detected and is underway, to age all dynamic entries in the Forwarding Database.')
stpInfoHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoHoldTime.setStatus('current')
if mibBuilder.loadTexts: stpInfoHoldTime.setDescription('This time value determines the interval length during which no more than two Configuration bridge PDUs shall be transmitted by this node, in units of hundredths of a second.')
stpInfoBrgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoBrgPriority.setStatus('current')
if mibBuilder.loadTexts: stpInfoBrgPriority.setDescription('The value of the write-able portion of the Bridge ID, i.e., the first two octets of the (8 octet long) Bridge ID.')
stpInfoBrgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoBrgHelloTime.setStatus('current')
if mibBuilder.loadTexts: stpInfoBrgHelloTime.setDescription('The value in seconds that all bridges use for HelloTime when this bridge is acting as the root.')
stpInfoBrgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoBrgForwardDelay.setStatus('current')
if mibBuilder.loadTexts: stpInfoBrgForwardDelay.setDescription('The value in seconds that all bridges use for ForwardDelay when this bridge is acting as the root.')
stpInfoBrgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoBrgMaxAge.setStatus('current')
if mibBuilder.loadTexts: stpInfoBrgMaxAge.setDescription('The value in seconds that all bridges use for MaxAge when this bridge is acting as the root.')
stpInfoAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoAgingTime.setStatus('current')
if mibBuilder.loadTexts: stpInfoAgingTime.setDescription('The timeout period in seconds for aging out dynamically learned forwarding information.')
stpInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2), )
if mibBuilder.loadTexts: stpInfoPortTable.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortTable.setDescription('The table of Spanning Tree Group port information.')
stpInfoPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "stpInfoPortStpIndex"), (0, "BLADETYPE2-PHYSICAL-MIB", "stpInfoPortIndex"))
if mibBuilder.loadTexts: stpInfoPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortTableEntry.setDescription('Information about port configuration for a particular Spanning Tree Group.')
stpInfoPortStpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortStpIndex.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortStpIndex.setDescription('The identifier of a particular Spanning Tree Group.')
stpInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortIndex.setDescription('The port identifier of a particular Spanning Tree Group.')
stpInfoPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortState.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortState.setDescription("The port's current state as defined by application of the Spanning Tree Protocol. This state controls what action a port takes on reception of a frame. If the bridge has detected a port that is malfunctioning it will place that port into the broken(6) state. For ports which are disabled, this object will have a value of disabled(1).")
stpInfoPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortDesignatedRoot.setDescription('The unique Bridge Identifier of the Bridge recorded as the Root in the Configuration BPDUs transmitted by the Designated Bridge for the segment to which the port is attached.')
stpInfoPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortDesignatedCost.setDescription('The path cost of the Designated Port of the segment connected to this port. This value is compared to the Root Path Cost field in received bridge PDUs.')
stpInfoPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortDesignatedBridge.setDescription("The Bridge Identifier of the bridge which this port considers to be the Designated Bridge for this port's segment.")
stpInfoPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortDesignatedPort.setDescription("The Port Identifier of the port on the Designated Bridge for this port's segment.")
stpInfoPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortForwardTransitions.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortForwardTransitions.setDescription('The number of times this port has transitioned from the Learning state to the Forwarding state.')
stpInfoPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortPathCost.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortPathCost.setDescription('The path cost of the port.')
cistRoot = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 1), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRoot.setStatus('current')
if mibBuilder.loadTexts: cistRoot.setDescription('The bridge identifier of the Root of the common spanning tree as determined by the Spanning Tree Protocol as executed by this node. This value is used as the CIST Root Identifier parameter in all Configuration Bridge PDUs originated by this node.')
cistRootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRootPathCost.setStatus('current')
if mibBuilder.loadTexts: cistRootPathCost.setDescription('The cost of the path to the CIST Root as seen from this bridge.')
cistRootPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRootPort.setStatus('current')
if mibBuilder.loadTexts: cistRootPort.setDescription('The Port Number of the Port which offers the lowest path cost from this bridge to the CIST Root Bridge.')
cistRootHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRootHelloTime.setStatus('current')
if mibBuilder.loadTexts: cistRootHelloTime.setDescription('The amount of time between the transmission of Configuration bridge PDUs in seconds.')
cistRootMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRootMaxAge.setStatus('current')
if mibBuilder.loadTexts: cistRootMaxAge.setDescription('The value in seconds that all bridges use for MaxAge when this bridge is acting as the root.')
cistRootForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRootForwardDelay.setStatus('current')
if mibBuilder.loadTexts: cistRootForwardDelay.setDescription('The value in seconds that all bridges use for ForwardDelay when this bridge is acting as the root.')
cistRegionalRoot = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRegionalRoot.setStatus('current')
if mibBuilder.loadTexts: cistRegionalRoot.setDescription('The bridge identifier of the Root of the Multiple spanning tree region as determined by the Spanning Tree Protocol as executed by this node. This value is used as the CIST Regional Root Identifier parameter in all Configuration Bridge PDUs originated by this node.')
cistRegionalPathCost = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRegionalPathCost.setStatus('current')
if mibBuilder.loadTexts: cistRegionalPathCost.setDescription('The Cost of the path to the CIST Regional Root as seen from this bridge.')
cistBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistBridgePriority.setStatus('current')
if mibBuilder.loadTexts: cistBridgePriority.setDescription('The value of the writable portion of the Brigde Identifier comprising of the first two octets.')
cistBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: cistBridgeMaxAge.setDescription('The value in seconds that all bridges use for MaxAge when this bridge is acting as the root.')
cistBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: cistBridgeForwardDelay.setDescription('The value in seconds that all bridges use for ForwardDelay when this bridge is acting as the root.')
cistMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistMaxHopCount.setStatus('current')
if mibBuilder.loadTexts: cistMaxHopCount.setDescription('Indicates the maximum hop count value.')
mstpDigest = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpDigest.setStatus('current')
if mibBuilder.loadTexts: mstpDigest.setDescription('The digest of the mstp.')
cistInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2), )
if mibBuilder.loadTexts: cistInfoPortTable.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortTable.setDescription('The table of CIST Port information.')
cistInfoPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "cistInfoPortIndex"))
if mibBuilder.loadTexts: cistInfoPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortTableEntry.setDescription('Information about a particular CIST Port.')
cistInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortIndex.setDescription('The port number of the port for which this entry contains spanning tree configuration.')
cistInfoPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortPriority.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortPriority.setDescription('The four most significant bits of the Port Identifier of the Spanning Tree instance can be modified by setting this value.')
cistInfoPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortPathCost.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the CIST Root which include this port.')
cistInfoPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortState.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortState.setDescription('Current state of the Port as defined by the Common spanning tree protocol.')
cistInfoPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("alternate", 2), ("backup", 3), ("root", 4), ("designated", 5), ("master", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortRole.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortRole.setDescription('Selected Port Role of the port for this spanning tree instance.')
cistInfoPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortDesignatedBridge.setDescription("The unique Bridge Identifier of the bridge which this port considers to be the Designated Bridge for the port's segment.")
cistInfoPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortDesignatedPort.setDescription("The Port identifier of the port on the Designated Bridge for this port's segment.")
cistInfoPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("p2p", 1), ("shared", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortLinkType.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortLinkType.setDescription('The point-to-point status of the LAN segment attached to this port. A value of p2p (2) indicates that this port is being treated as if it is connected to a point-to-point link. A value of shared(3) indicates that this port is being treated as having a shared media connection.')
cistInfoPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortHelloTime.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortHelloTime.setDescription('The amount of time between the transmission of Configuration Port PDUs in seconds.')
lacpInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 4, 1), )
if mibBuilder.loadTexts: lacpInfoPortTable.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortTable.setDescription('The table of LACP port information.')
lacpInfoPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 4, 1, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "lacpInfoPortIndex"))
if mibBuilder.loadTexts: lacpInfoPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortTableEntry.setDescription('Information about a LACP port.')
lacpInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortIndex.setDescription('The port identifier.')
lacpInfoPortSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("selected", 1), ("unselected", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortSelected.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortSelected.setDescription('Selected flag value indicates that the selection logic has selected an appropriate Aggregator. A value of unselected indicates that no aggregator is currently selected. A value of standby indicates that although the selection logic has selected an appropriate Aggregator, aggregation restrictions currently precent the port from being enabled as part of the aggregation, and so the port is being held in standby condition.')
lacpInfoPortNtt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortNtt.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortNtt.setDescription('Need to transmit flag. True indicates that there is new protocol information that should be transmitted on the link.')
lacpInfoPortReadyN = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortReadyN.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortReadyN.setDescription('True value for Ready_N flag indicates that the wait while timer has expired and it is waiting to attach to an aggregator. There is one Ready_N value for each port.')
lacpInfoPortMoved = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortMoved.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortMoved.setDescription('Port Moved flag is set to true if the receive machine for a port is in the port_disabled state, and the combination of partner oper system and partner oper port number in use by the port has been used by received in an incoming LACPDU on a different port.')
ufdCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdCurCfgState.setStatus('current')
if mibBuilder.loadTexts: ufdCurCfgState.setDescription('Enable or disable UFD state')
ufdNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgState.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgState.setDescription('Enable or disable UFD state')
ufdCurCfgLtMPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdCurCfgLtMPorts.setStatus('current')
if mibBuilder.loadTexts: ufdCurCfgLtMPorts.setDescription('The LtM port list. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to LtM 0 - The represented port does not belong to LtM')
ufdNewCfgLtMPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgLtMPorts.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgLtMPorts.setDescription('The LtM port list. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to LtM 0 - The represented port does not belong to LtM')
ufdCurCfgLtMTrunks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdCurCfgLtMTrunks.setStatus('current')
if mibBuilder.loadTexts: ufdCurCfgLtMTrunks.setDescription('The LtM trunk list. The trunks are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ trunk 8 || || || ||___ trunk 7 || |____ trunk 6 || . . . ||_________ trunk 1 |__________ reserved where x : 1 - The represented trunk belongs to LtM 0 - The represented trunk does not belong to LtM')
ufdNewCfgLtMTrunks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgLtMTrunks.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgLtMTrunks.setDescription('The LtM trunk list. The trunks are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ trunk 8 || || || ||___ trunk 7 || |____ trunk 6 || . . . ||_________ trunk 1 |__________ reserved where x : 1 - The represented trunk belongs to LtM 0 - The represented trunk does not belong to LtM')
ufdCurCfgLtDPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdCurCfgLtDPorts.setStatus('current')
if mibBuilder.loadTexts: ufdCurCfgLtDPorts.setDescription('The LtD port list. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to LtD 0 - The represented port does not belong to LtD')
ufdNewCfgLtDPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgLtDPorts.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgLtDPorts.setDescription('The LtD port list. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to LtD 0 - The represented port does not belong to LtD')
ufdCurCfgLtDTrunks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdCurCfgLtDTrunks.setStatus('current')
if mibBuilder.loadTexts: ufdCurCfgLtDTrunks.setDescription('The LtD trunk list. The trunks are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ trunk 8 || || || ||___ trunk 7 || |____ trunk 6 || . . . ||_________ trunk 1 |__________ reserved where x : 1 - The represented trunk belongs to LtD 0 - The represented trunk does not belong to LtD')
ufdNewCfgLtDTrunks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgLtDTrunks.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgLtDTrunks.setDescription('The LtD trunk list. The trunks are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ trunk 8 || || || ||___ trunk 7 || |____ trunk 6 || . . . ||_________ trunk 1 |__________ reserved where x : 1 - The represented trunk belongs to LtD 0 - The represented trunk does not belong to LtD')
ufdNewCfgAddLtMPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgAddLtMPort.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgAddLtMPort.setDescription("The port to be added to LtM. A '0' value is returned when read.")
ufdNewCfgRemoveLtMPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgRemoveLtMPort.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgRemoveLtMPort.setDescription("The port to be removed from LtM. A '0' value is returned when read.")
ufdNewCfgAddLtMTrunk = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgAddLtMTrunk.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgAddLtMTrunk.setDescription("The trunk to be added to LtM. A '0' value is returned when read.")
ufdNewCfgRemoveLtMTrunk = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgRemoveLtMTrunk.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgRemoveLtMTrunk.setDescription("The trunk to be removed from LtM. A '0' value is returned when read.")
ufdNewCfgAddLtDPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgAddLtDPort.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgAddLtDPort.setDescription("The port to be added to LtD. A '0' value is returned when read.")
ufdNewCfgRemoveLtDPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgRemoveLtDPort.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgRemoveLtDPort.setDescription("The port to be removed from LtM. A '0' value is returned when read.")
ufdNewCfgAddLtDTrunk = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgAddLtDTrunk.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgAddLtDTrunk.setDescription("The trunk to be added to LtM. A '0' value is returned when read.")
ufdNewCfgRemoveLtDTrunk = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgRemoveLtDTrunk.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgRemoveLtDTrunk.setDescription("The trunk to be removed from LtD. A '0' value is returned when read.")
ufdCurCfgGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdCurCfgGlobalState.setStatus('current')
if mibBuilder.loadTexts: ufdCurCfgGlobalState.setDescription('Current global Failover settings.')
ufdNewCfgGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgGlobalState.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgGlobalState.setDescription('New global Failover settings.')
dot1xCurStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurStatus.setStatus('current')
if mibBuilder.loadTexts: dot1xCurStatus.setDescription(' Dot1x status ')
dot1xNewStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xNewStatus.setStatus('current')
if mibBuilder.loadTexts: dot1xNewStatus.setDescription(' Dot1x status ')
dot1xCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3), )
if mibBuilder.loadTexts: dot1xCurCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortTable.setDescription('The table of 8021x configuration in the Current_config.')
dot1xCurCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "dot1xCurCfgPortIndex"))
if mibBuilder.loadTexts: dot1xCurCfgPortEntry.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortEntry.setDescription('Information about 8021x Port Config')
dot1xCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortIndex.setDescription('The 8021x Port number for which the table is related.')
dot1xCurCfgPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceUnauth", 0), ("auto", 1), ("forceAuth", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortMode.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortMode.setDescription(' Port authenticaton mode forceUnauth(0), auto(1), forceAuth(2) ')
dot1xCurCfgPortQtPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortQtPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortQtPeriod.setDescription('Quiet period (0-65535) ')
dot1xCurCfgPortTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortTxPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortTxPeriod.setDescription(' Tx Period ')
dot1xCurCfgPortSupTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortSupTmout.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortSupTmout.setDescription(' Supplicant timeout (1..65535) ')
dot1xCurCfgPortSrvTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortSrvTmout.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortSrvTmout.setDescription(' Server timeout (1..65535) ')
dot1xCurCfgPortMaxRq = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortMaxRq.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortMaxRq.setDescription(' Maximum numer of requests (1..10) ')
dot1xCurCfgPortRaPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortRaPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortRaPeriod.setDescription(' Reautentication period (0..604800) ')
dot1xCurCfgPortReAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortReAuth.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortReAuth.setDescription(' ReAuthentication state off(0), on(1) ')
dot1xNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4), )
if mibBuilder.loadTexts: dot1xNewCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortTable.setDescription('The table of 8021x configuration in the new_config.')
dot1xNewCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "dot1xNewCfgPortIndex"))
if mibBuilder.loadTexts: dot1xNewCfgPortEntry.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortEntry.setDescription('Information about 8021x Port Config')
dot1xNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xNewCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortIndex.setDescription('The 8021x Port number for which the table is related.')
dot1xNewCfgPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceUnauth", 0), ("auto", 1), ("forceAuth", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortMode.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortMode.setDescription(' Port authentication mode forceUnauth(0), auto(1), forceAuth(2) ')
dot1xNewCfgPortQtPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortQtPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortQtPeriod.setDescription(' Quiet period (0..65535) ')
dot1xNewCfgPortTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortTxPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortTxPeriod.setDescription(' Tx Period (1..65535) ')
dot1xNewCfgPortSupTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortSupTmout.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortSupTmout.setDescription(' Supplicant Timeout (1..65535) ')
dot1xNewCfgPortSrvTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortSrvTmout.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortSrvTmout.setDescription(' Server Timeout (1..65535) ')
dot1xNewCfgPortMaxRq = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortMaxRq.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortMaxRq.setDescription(' Maximum number of requests (1..10) ')
dot1xNewCfgPortRaPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortRaPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortRaPeriod.setDescription(' Reauthentication period (1..604800) ')
dot1xNewCfgPortReAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortReAuth.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortReAuth.setDescription(' Reauthentication state off(0), on(1) ')
dot1xNewCfgPortDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("apply", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortDefault.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortDefault.setDescription(' Port default settings ')
dot1xNewCfgPortApplyGlobal = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("apply", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortApplyGlobal.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortApplyGlobal.setDescription(' Apply Global config ')
dot1xCurCfgGlobalMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceUnauth", 0), ("auto", 1), ("forceAuth", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalMode.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgGlobalMode.setDescription(' Autehtication Mode forceUnauth(0), auto(1), forceAuth(2) ')
dot1xCurCfgGlobalQtPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalQtPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgGlobalQtPeriod.setDescription(' Quiet period (0..65535) ')
dot1xCurCfgGlobalTxPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalTxPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgGlobalTxPeriod.setDescription(' Tx period (1..65535) ')
dot1xCurCfgGlobalSupTmout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalSupTmout.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgGlobalSupTmout.setDescription(' Supplicant timeout (1..65535) ')
dot1xCurCfgGlobalSrvTmout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalSrvTmout.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgGlobalSrvTmout.setDescription(' Server timeout (1..65535) ')
dot1xCurCfgGlobalMaxRq = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalMaxRq.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgGlobalMaxRq.setDescription(' Maximum number of requests (1..10) ')
dot1xCurCfgGlobalRaPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalRaPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgGlobalRaPeriod.setDescription(' Reauthentication period (0..604800) ')
dot1xCurCfgGlobalReAuth = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalReAuth.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgGlobalReAuth.setDescription(' ')
dot1xNewCfgGlobalMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceUnauth", 0), ("auto", 1), ("forceAuth", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalMode.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgGlobalMode.setDescription(' Authentication Mode ')
dot1xNewCfgGlobalQtPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalQtPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgGlobalQtPeriod.setDescription(' Quiet Period (0..65535) ')
dot1xNewCfgGlobalTxPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalTxPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgGlobalTxPeriod.setDescription(' Tx Period (1..65535) ')
dot1xNewCfgGlobalSupTmout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalSupTmout.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgGlobalSupTmout.setDescription(' Supplicand timeout (1..65535) ')
dot1xNewCfgGlobalSrvTmout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalSrvTmout.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgGlobalSrvTmout.setDescription(' Server timeout (1..65535) ')
dot1xNewCfgGlobalMaxRq = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalMaxRq.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgGlobalMaxRq.setDescription(' Maximum number of requests (1..10) ')
dot1xNewCfgGlobalRaPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalRaPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgGlobalRaPeriod.setDescription(' Reauthentication period (1..604800) ')
dot1xNewCfgGlobalReAuth = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalReAuth.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgGlobalReAuth.setDescription(' Reauthentication status ')
dot1xInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 1), )
if mibBuilder.loadTexts: dot1xInfoPortTable.setStatus('current')
if mibBuilder.loadTexts: dot1xInfoPortTable.setDescription('The table of 8021x configuration in the Current_config.')
dot1xInfoPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 1, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "dot1xInfoPortIndex"))
if mibBuilder.loadTexts: dot1xInfoPortEntry.setStatus('current')
if mibBuilder.loadTexts: dot1xInfoPortEntry.setDescription('Information about 8021x Port Config')
dot1xInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: dot1xInfoPortIndex.setDescription('The 8021x Port number for which the table is related.')
dot1xInfoPortAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceUnauth", 0), ("auto", 1), ("forceAuth", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xInfoPortAuthMode.setStatus('current')
if mibBuilder.loadTexts: dot1xInfoPortAuthMode.setDescription(' Authentication mode ')
dot1xInfoPortAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("authorized", 0), ("unauthorized", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xInfoPortAuthStatus.setStatus('current')
if mibBuilder.loadTexts: dot1xInfoPortAuthStatus.setDescription(' Authentication status ')
dot1xInfoPortCtrlDir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("both", 0), ("in", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xInfoPortCtrlDir.setStatus('current')
if mibBuilder.loadTexts: dot1xInfoPortCtrlDir.setDescription(' Controlled Directions ')
dot1xInfoPortAuthPAEState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("initialize", 0), ("disconnected", 1), ("connecting", 2), ("authenticating", 3), ("authenticated", 4), ("aborting", 5), ("held", 6), ("forceauth", 7), ("forceunauth", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xInfoPortAuthPAEState.setStatus('current')
if mibBuilder.loadTexts: dot1xInfoPortAuthPAEState.setDescription(' Authenticator PAE State ')
dot1xInfoPortBackAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("request", 0), ("response", 1), ("success", 2), ("fail", 3), ("timeout", 4), ("idle", 5), ("initialize", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xInfoPortBackAuthState.setStatus('current')
if mibBuilder.loadTexts: dot1xInfoPortBackAuthState.setDescription(' Backend authenticator PAE state ')
dot1xSystemCapability = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("authenticator", 0), ("supplicant", 1), ("authenticatorAndSupplicant", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSystemCapability.setStatus('current')
if mibBuilder.loadTexts: dot1xSystemCapability.setDescription(' System capability ')
dot1xSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSystemStatus.setStatus('current')
if mibBuilder.loadTexts: dot1xSystemStatus.setDescription(' System status ')
dot1xSystemProtoVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSystemProtoVersion.setStatus('current')
if mibBuilder.loadTexts: dot1xSystemProtoVersion.setDescription(' Protocol version ')
fdbCurCfgAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbCurCfgAgingTime.setStatus('current')
if mibBuilder.loadTexts: fdbCurCfgAgingTime.setDescription('Fdb current aging time')
fdbNewCfgAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbNewCfgAgingTime.setStatus('current')
if mibBuilder.loadTexts: fdbNewCfgAgingTime.setDescription('Fdb new aging time.')
fdbNewCfgStaticTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12, 2), )
if mibBuilder.loadTexts: fdbNewCfgStaticTable.setStatus('current')
if mibBuilder.loadTexts: fdbNewCfgStaticTable.setDescription('The table of FDB static entries.')
fdbNewCfgStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12, 2, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "fdbNewCfgEntryIndex"))
if mibBuilder.loadTexts: fdbNewCfgStaticEntry.setStatus('current')
if mibBuilder.loadTexts: fdbNewCfgStaticEntry.setDescription('A row in the fdb table.')
fdbNewCfgEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbNewCfgEntryIndex.setStatus('current')
if mibBuilder.loadTexts: fdbNewCfgEntryIndex.setDescription('The fdb entry index')
fdbNewCfgAddVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdbNewCfgAddVlan.setStatus('current')
if mibBuilder.loadTexts: fdbNewCfgAddVlan.setDescription('Add vlan for fdb entry index')
fdbNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdbNewCfgAddPort.setStatus('current')
if mibBuilder.loadTexts: fdbNewCfgAddPort.setDescription('The MAC address port number.')
fdbNewCfgAddMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12, 2, 1, 4), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdbNewCfgAddMac.setStatus('current')
if mibBuilder.loadTexts: fdbNewCfgAddMac.setDescription('Add a fdb entry.')
fdbNewCfgDelStaticEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdbNewCfgDelStaticEntry.setStatus('current')
if mibBuilder.loadTexts: fdbNewCfgDelStaticEntry.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
dot1pInfoPriorityCOSTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 1), )
if mibBuilder.loadTexts: dot1pInfoPriorityCOSTable.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPriorityCOSTable.setDescription('The table of current priority to COS queue information.')
dot1pInfoPriorityCOSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 1, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "dot1pInfoPriorityIndex"))
if mibBuilder.loadTexts: dot1pInfoPriorityCOSEntry.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPriorityCOSEntry.setDescription('Current information about 8021p priority to COS queue.')
dot1pInfoPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pInfoPriorityIndex.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPriorityIndex.setDescription('The 8021p priority for which the table is related.')
dot1pInfoPriorityCOSQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pInfoPriorityCOSQueue.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPriorityCOSQueue.setDescription('The 8021p priority COSq.')
dot1pInfoPriorityCOSWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pInfoPriorityCOSWeight.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPriorityCOSWeight.setDescription('The 8021p priority weight.')
dot1pInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 2), )
if mibBuilder.loadTexts: dot1pInfoPortTable.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPortTable.setDescription('The table of 8021p port priority configuration in the Current_config.')
dot1pInfoPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 2, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "dot1pInfoPortIndex"))
if mibBuilder.loadTexts: dot1pInfoPortEntry.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPortEntry.setDescription('Information about 8021p Port Priority')
dot1pInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPortIndex.setDescription('The 8021p Port number for which the table is related.')
dot1pInfoPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pInfoPortPriority.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPortPriority.setDescription('The 8021p Port number for which the table is related.')
dot1pInfoPortCOSq = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pInfoPortCOSq.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPortCOSq.setDescription('The 8021p port COSq.')
dot1pInfoPortWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pInfoPortWeight.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPortWeight.setDescription('The 8021p port weight.')
generalInfoStpUplinkFast = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generalInfoStpUplinkFast.setStatus('current')
if mibBuilder.loadTexts: generalInfoStpUplinkFast.setDescription('STP uplink fast mode')
generalInfoUplinkFastRate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generalInfoUplinkFastRate.setStatus('current')
if mibBuilder.loadTexts: generalInfoUplinkFastRate.setDescription('STP fast uplink rate.')
vlanInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 8, 1), )
if mibBuilder.loadTexts: vlanInfoTable.setStatus('current')
if mibBuilder.loadTexts: vlanInfoTable.setDescription('The table of VLAN information.')
vlanInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 8, 1, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "vlanInfoId"))
if mibBuilder.loadTexts: vlanInfoTableEntry.setStatus('current')
if mibBuilder.loadTexts: vlanInfoTableEntry.setDescription('Information about a particular VLAN.')
vlanInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoId.setStatus('current')
if mibBuilder.loadTexts: vlanInfoId.setDescription('The VLAN identifier.')
vlanInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoName.setStatus('current')
if mibBuilder.loadTexts: vlanInfoName.setDescription('The VLAN name.')
vlanInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoStatus.setStatus('current')
if mibBuilder.loadTexts: vlanInfoStatus.setDescription('Enable or disable, VLAN state information')
vlanInfoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 8, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoPorts.setStatus('current')
if mibBuilder.loadTexts: vlanInfoPorts.setDescription('The port list information in the VLAN. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to the VLAN 0 - The represented port does not belong to the VLAN')
trunkGroupInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 9, 1), )
if mibBuilder.loadTexts: trunkGroupInfoTable.setStatus('current')
if mibBuilder.loadTexts: trunkGroupInfoTable.setDescription('The table of trunk group information.')
trunkGroupInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 9, 1, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "trunkGroupInfoIndex"))
if mibBuilder.loadTexts: trunkGroupInfoTableEntry.setStatus('current')
if mibBuilder.loadTexts: trunkGroupInfoTableEntry.setDescription('A row in trunk group information table.')
trunkGroupInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupInfoIndex.setStatus('current')
if mibBuilder.loadTexts: trunkGroupInfoIndex.setDescription('The identifier of the trunk group.')
trunkGroupInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupInfoState.setStatus('current')
if mibBuilder.loadTexts: trunkGroupInfoState.setDescription('Trunk group state.')
trunkGroupInfoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 9, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupInfoPorts.setStatus('current')
if mibBuilder.loadTexts: trunkGroupInfoPorts.setDescription('The port list in the trunk group. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to the trunk group 0 - The represented port does not belong to the trunk group')
mibBuilder.exportSymbols("BLADETYPE2-PHYSICAL-MIB", stpInfoPortDesignatedBridge=stpInfoPortDesignatedBridge, dot1xCurCfgPortSupTmout=dot1xCurCfgPortSupTmout, hotlinksCurCfgFdbUpdateState=hotlinksCurCfgFdbUpdateState, dot1xCurCfgGlobalMaxRq=dot1xCurCfgGlobalMaxRq, trunkGroupNewCfgState=trunkGroupNewCfgState, stgNewCfgPortIndex=stgNewCfgPortIndex, vlanCurCfgTable=vlanCurCfgTable, ufdNoLtMLinkFailure=ufdNoLtMLinkFailure, dot1xNewCfgGlobalTxPeriod=dot1xNewCfgGlobalTxPeriod, dot1pInfoPriorityCOSEntry=dot1pInfoPriorityCOSEntry, stgNewCfgTable=stgNewCfgTable, dot1xCurCfgGlobalSupTmout=dot1xCurCfgGlobalSupTmout, vlanInfoPorts=vlanInfoPorts, stgNewCfgVlanBmap2=stgNewCfgVlanBmap2, hotlinksCurCfgTriggerId=hotlinksCurCfgTriggerId, stgCurCfgIndex=stgCurCfgIndex, dot1xCurCfgGlobalRaPeriod=dot1xCurCfgGlobalRaPeriod, markerresponsepdusRx=markerresponsepdusRx, mstCistCurCfgPortLinkType=mstCistCurCfgPortLinkType, dot1xCurCfgPortQtPeriod=dot1xCurCfgPortQtPeriod, hotlinksNewCfgTriggerBackupTrunk=hotlinksNewCfgTriggerBackupTrunk, lacpCurPortState=lacpCurPortState, genInfo=genInfo, fdbInfo=fdbInfo, mstCurCfgRegionName=mstCurCfgRegionName, stgNewCfgIndex=stgNewCfgIndex, vlanNewCfgState=vlanNewCfgState, fdbStatsCreates=fdbStatsCreates, ufdNewCfgRemoveLtMPort=ufdNewCfgRemoveLtMPort, dot1xNewCfgPortSupTmout=dot1xNewCfgPortSupTmout, stgCfg=stgCfg, dot1xNewCfgPortRaPeriod=dot1xNewCfgPortRaPeriod, dot1xNewCfgPortIndex=dot1xNewCfgPortIndex, vlanCurCfgVlanName=vlanCurCfgVlanName, stgNewCfgState=stgNewCfgState, stgCurCfgPortTableEntry=stgCurCfgPortTableEntry, ufdNoLtDAutoDisabled=ufdNoLtDAutoDisabled, dot1xNewCfgPortEntry=dot1xNewCfgPortEntry, stgCurCfgPortFastFwd=stgCurCfgPortFastFwd, ufdStats=ufdStats, dot1xCurCfgGlobalQtPeriod=dot1xCurCfgGlobalQtPeriod, l2ThashNewCfgDmacState=l2ThashNewCfgDmacState, dot1xInfoPortBackAuthState=dot1xInfoPortBackAuthState, ufdCurCfgLtMPorts=ufdCurCfgLtMPorts, dot1xNewCfgGlobalTable=dot1xNewCfgGlobalTable, lacpInfoPortNtt=lacpInfoPortNtt, dot1x=dot1x, hotlinksStats=hotlinksStats, lacpCurPortActorAdminKey=lacpCurPortActorAdminKey, stpStats=stpStats, dot1xInfoPortCtrlDir=dot1xInfoPortCtrlDir, lacpCurPortCfgTable=lacpCurPortCfgTable, stpInfoPortStpIndex=stpInfoPortStpIndex, dot1xInfoPortAuthMode=dot1xInfoPortAuthMode, pmNewCfgPmirrMoniPortIndex=pmNewCfgPmirrMoniPortIndex, lacpCurPortCfgTableId=lacpCurPortCfgTableId, mstCistNewCfgPortLinkType=mstCistNewCfgPortLinkType, hotlinksInfoOnState=hotlinksInfoOnState, vlanNewCfgTable=vlanNewCfgTable, cistRegionalRoot=cistRegionalRoot, trunkGroupCurCfgIndex=trunkGroupCurCfgIndex, dot1xSystemStatus=dot1xSystemStatus, fdbNewCfgAgingTime=fdbNewCfgAgingTime, dot1pInfoPortWeight=dot1pInfoPortWeight, lacp=lacp, mstCistNewCfgPortPriority=mstCistNewCfgPortPriority, fdbNewCfgAddMac=fdbNewCfgAddMac, layer2=layer2, dot1xInfo=dot1xInfo, lacpCurPortCfgTableEntry=lacpCurPortCfgTableEntry, dot1xInfoPortAuthStatus=dot1xInfoPortAuthStatus, stgNewCfgPortTableEntry=stgNewCfgPortTableEntry, upfastCurCfgState=upfastCurCfgState, trunkgroup=trunkgroup, lacpStatsIndex=lacpStatsIndex, fdbState=fdbState, dot1pInfoPortTable=dot1pInfoPortTable, vlanNewCfgTableEntry=vlanNewCfgTableEntry, trunkGroupNewCfgIndex=trunkGroupNewCfgIndex, lacpStatsTableEntry=lacpStatsTableEntry, fdbStatsOverflows=fdbStatsOverflows, dot1xCurCfgPortEntry=dot1xCurCfgPortEntry, fdb=fdb, stpInfoIndex=stpInfoIndex, stgCurCfgPortIndex=stgCurCfgPortIndex, l2GeneralCfg=l2GeneralCfg, dot1xCurStatus=dot1xCurStatus, l2ThashNewCfgSmacState=l2ThashNewCfgSmacState, hotlinksNewCfgTriggerState=hotlinksNewCfgTriggerState, lacpNewPortCfgTableId=lacpNewPortCfgTableId, vlanInfoName=vlanInfoName, ufdGeneralCfg=ufdGeneralCfg, dot1xInfoPortEntry=dot1xInfoPortEntry, mstNewCfgRegionVersion=mstNewCfgRegionVersion, fdbStatsCurrent=fdbStatsCurrent, mirrPortMirr=mirrPortMirr, vlan=vlan, stpInfoBrgForwardDelay=stpInfoBrgForwardDelay, lacpInfoPortMoved=lacpInfoPortMoved, ufdNewCfgAddLtDPort=ufdNewCfgAddLtDPort, layer2Info=layer2Info, hotlinksStatsTriggerId=hotlinksStatsTriggerId, dot1xNewCfgGlobalRaPeriod=dot1xNewCfgGlobalRaPeriod, mirroring=mirroring, stgNewCfgTableEntry=stgNewCfgTableEntry, vlanInfoId=vlanInfoId, hotlinksCfg=hotlinksCfg, mstCistNewCfgVlanBmap=mstCistNewCfgVlanBmap, mstCistCurCfgVlanBmap=mstCistCurCfgVlanBmap, pmCurCfgPmirrMirrPortIndex=pmCurCfgPmirrMirrPortIndex, lacpStats=lacpStats, mstCistNewCfgPortTable=mstCistNewCfgPortTable, lacpNewPortActorAdminKey=lacpNewPortActorAdminKey, cistInfoPortIndex=cistInfoPortIndex, stgCurCfgBrgHelloTime=stgCurCfgBrgHelloTime, markerresponsepdusTx=markerresponsepdusTx, mstNewCfgRegionName=mstNewCfgRegionName, hotlinksInfoTriggerTableEntry=hotlinksInfoTriggerTableEntry, mstCurCfgMaxHopCount=mstCurCfgMaxHopCount, ufdNewCfgAddLtMPort=ufdNewCfgAddLtMPort, trunkGroupInfoState=trunkGroupInfoState, thash=thash, dot1xCurCfgPortTable=dot1xCurCfgPortTable, dot1xCurCfgGlobalTxPeriod=dot1xCurCfgGlobalTxPeriod, fdbNewCfgDelStaticEntry=fdbNewCfgDelStaticEntry, thashL2=thashL2, vlanNewCfgVlanId=vlanNewCfgVlanId, pmCurCfgPmirrDirection=pmCurCfgPmirrDirection, dot1xNewCfgPortTxPeriod=dot1xNewCfgPortTxPeriod, stgCurCfgPortPathCost=stgCurCfgPortPathCost, fdbStatsFinds=fdbStatsFinds, lacpInfoPortTable=lacpInfoPortTable, hotlinksCurCfgTriggerBackupPort=hotlinksCurCfgTriggerBackupPort, dot1xNewCfgGlobalSrvTmout=dot1xNewCfgGlobalSrvTmout, lacpNewPortActorPortPriority=lacpNewPortActorPortPriority, dot1xNewCfgPortApplyGlobal=dot1xNewCfgPortApplyGlobal, mstCistCurCfgPortTable=mstCistCurCfgPortTable, mstCistCurCfgPortStpState=mstCistCurCfgPortStpState, mstCistNewCfgPortPathCost=mstCistNewCfgPortPathCost, mstGeneralCfg=mstGeneralCfg, dot1xNewCfgGlobalReAuth=dot1xNewCfgGlobalReAuth, markerpdusRx=markerpdusRx, cistRootMaxAge=cistRootMaxAge, mstCistCurCfgPortHelloTime=mstCistCurCfgPortHelloTime, hotlinksStatsTriggerTableEntry=hotlinksStatsTriggerTableEntry, hotlinksNewCfgTriggerId=hotlinksNewCfgTriggerId, trunkGroupCurCfgState=trunkGroupCurCfgState, dot1xNewCfgGlobalQtPeriod=dot1xNewCfgGlobalQtPeriod, mstNewCfgStpMode=mstNewCfgStpMode, ufdNewCfgRemoveLtMTrunk=ufdNewCfgRemoveLtMTrunk, dot1xNewStatus=dot1xNewStatus, dot1xCurCfgPortSrvTmout=dot1xCurCfgPortSrvTmout, mstCistCurCfgPortIndex=mstCistCurCfgPortIndex, dot1xCurCfgPortMaxRq=dot1xCurCfgPortMaxRq, ufdCurCfgGlobalState=ufdCurCfgGlobalState, vlanCurCfgVlanId=vlanCurCfgVlanId, lacpInfoPortSelected=lacpInfoPortSelected, mstNewCfgMaxHopCount=mstNewCfgMaxHopCount, stpInfo=stpInfo, cistMaxHopCount=cistMaxHopCount, fdbClear=fdbClear, l2ThashCurCfgSipState=l2ThashCurCfgSipState, illegalRx=illegalRx, stpInfoHelloTime=stpInfoHelloTime, mstCfg=mstCfg, stgCurCfgPortState=stgCurCfgPortState, cistInfoPortDesignatedBridge=cistInfoPortDesignatedBridge, fdbSrcPort=fdbSrcPort, stgNewCfgPortLink=stgNewCfgPortLink, mstCurCfgRegionVersion=mstCurCfgRegionVersion, hotlinksStatsTriggerMasterActive=hotlinksStatsTriggerMasterActive, stpInfoBrgMaxAge=stpInfoBrgMaxAge, stpInfoForwardDelay=stpInfoForwardDelay, trunkGroupInfoTableEntry=trunkGroupInfoTableEntry, stgCurCfgBrgMaxAge=stgCurCfgBrgMaxAge, trunkGroupCurCfgTableEntry=trunkGroupCurCfgTableEntry, l2ThashNewCfgSipState=l2ThashNewCfgSipState, stgCurCfgBrgForwardDelay=stgCurCfgBrgForwardDelay, ufdNewCfgGlobalState=ufdNewCfgGlobalState, ufdNewCfgLtMTrunks=ufdNewCfgLtMTrunks, dot1xNewCfgGlobalMaxRq=dot1xNewCfgGlobalMaxRq, stgStatsPortXmtTcnBpdus=stgStatsPortXmtTcnBpdus, ufdNewCfgLtDPorts=ufdNewCfgLtDPorts, stpInfoPortDesignatedRoot=stpInfoPortDesignatedRoot, dot1pInfoPortPriority=dot1pInfoPortPriority, mstCistNewCfgPortIndex=mstCistNewCfgPortIndex, stgCurCfgTableEntry=stgCurCfgTableEntry, stpInfoPortForwardTransitions=stpInfoPortForwardTransitions, pmNewCfgPortMonitorTable=pmNewCfgPortMonitorTable, ufdCurCfgLtMTrunks=ufdCurCfgLtMTrunks, pmNewCfgPmirrMirrPortIndex=pmNewCfgPmirrMirrPortIndex, lacpdusTx=lacpdusTx, lacpNewPortCfgTableEntry=lacpNewPortCfgTableEntry, ufdNewCfgLtDTrunks=ufdNewCfgLtDTrunks, stgCurCfgStgIndex=stgCurCfgStgIndex, stgCurCfgAgingTime=stgCurCfgAgingTime, dot1xCurCfgPortIndex=dot1xCurCfgPortIndex, hotlinksInfoTriggerState=hotlinksInfoTriggerState, vlanNewCfgStg=vlanNewCfgStg, stgNewCfgPortState=stgNewCfgPortState, dot1pInfoPortIndex=dot1pInfoPortIndex, cistInfo=cistInfo, vlanNewCfgRemovePort=vlanNewCfgRemovePort, lacpdusRx=lacpdusRx, dot1pInfoPriorityCOSTable=dot1pInfoPriorityCOSTable, mstCistCurCfgPortPathCost=mstCistCurCfgPortPathCost, hotlinksCurCfgTriggerTableEntry=hotlinksCurCfgTriggerTableEntry, fdbMacAddr=fdbMacAddr, ufdNewCfgAddLtDTrunk=ufdNewCfgAddLtDTrunk, dot1xCurCfgGlobalReAuth=dot1xCurCfgGlobalReAuth, stpInfoRootCost=stpInfoRootCost, stpInfoPortTableEntry=stpInfoPortTableEntry, fdbStatsHiwat=fdbStatsHiwat, dot1pInfoPortCOSq=dot1pInfoPortCOSq, stgCurCfgTable=stgCurCfgTable, mstCistNewCfgBridgePriority=mstCistNewCfgBridgePriority, mstpDigest=mstpDigest, generalInfoStpUplinkFast=generalInfoStpUplinkFast, dot1xInfoPortAuthPAEState=dot1xInfoPortAuthPAEState, dot1xCurCfgGlobalSrvTmout=dot1xCurCfgGlobalSrvTmout, stgNewCfgStgIndex=stgNewCfgStgIndex, dot1pInfoPortEntry=dot1pInfoPortEntry, trunkGroupInfoTable=trunkGroupInfoTable, hotlinksInfoTriggerPreemptState=hotlinksInfoTriggerPreemptState, l2ThashCurCfgSmacState=l2ThashCurCfgSmacState, hotlinksInfoTriggerId=hotlinksInfoTriggerId, fdbRefSps=fdbRefSps, stgStatsStpIndex=stgStatsStpIndex, mstNewCfgState=mstNewCfgState, vlanCurCfgState=vlanCurCfgState, fdbStatsLookupFails=fdbStatsLookupFails, fdbStats=fdbStats, unknownRx=unknownRx, pmCurCfgPortMonitorTable=pmCurCfgPortMonitorTable, cistInfoPortRole=cistInfoPortRole, dot1xCurCfgPortReAuth=dot1xCurCfgPortReAuth, ufdNewCfgRemoveLtDPort=ufdNewCfgRemoveLtDPort, lacpInfo=lacpInfo, pmCurCfgPmirrMoniPortIndex=pmCurCfgPmirrMoniPortIndex, cistRoot=cistRoot, trunkGroupInfoPorts=trunkGroupInfoPorts, mstCistCurCfgPortPriority=mstCistCurCfgPortPriority, vlanCurCfgStg=vlanCurCfgStg, ufdCurCfgLtDTrunks=ufdCurCfgLtDTrunks, stgStatsPortRcvCfgBpdus=stgStatsPortRcvCfgBpdus, stpInfoRootPort=stpInfoRootPort, stpInfoPortState=stpInfoPortState, stgStatsPortXmtCfgBpdus=stgStatsPortXmtCfgBpdus, hotlinksNewCfgFdbUpdateState=hotlinksNewCfgFdbUpdateState, hotlinksStatsTriggerFdbUpdate=hotlinksStatsTriggerFdbUpdate, dot1xCurCfgPortMode=dot1xCurCfgPortMode, hotlinksInfoTriggerTable=hotlinksInfoTriggerTable, stgNewCfgVlanBmap=stgNewCfgVlanBmap, cistInfoPortTableEntry=cistInfoPortTableEntry)
mibBuilder.exportSymbols("BLADETYPE2-PHYSICAL-MIB", pmNewCfgPortMirrState=pmNewCfgPortMirrState, lacpNewPortState=lacpNewPortState, upfastNewCfgState=upfastNewCfgState, fdbSrcTrunk=fdbSrcTrunk, dot1xNewCfgPortReAuth=dot1xNewCfgPortReAuth, stgNewCfgRemoveVlan=stgNewCfgRemoveVlan, lacpNewSystemPriority=lacpNewSystemPriority, stgCurCfgVlanBmap2=stgCurCfgVlanBmap2, hotlinksCurCfgTriggerBackupTrunk=hotlinksCurCfgTriggerBackupTrunk, trunkGroupNewCfgPorts=trunkGroupNewCfgPorts, cistInfoPortPathCost=cistInfoPortPathCost, dot1xNewCfgGlobalMode=dot1xNewCfgGlobalMode, vlanNewCfgPorts=vlanNewCfgPorts, pmNewCfgPmirrDelete=pmNewCfgPmirrDelete, stgStatsPortRcvTcnBpdus=stgStatsPortRcvTcnBpdus, stgNewCfgPortFastFwd=stgNewCfgPortFastFwd, lacpCurPortActorPortPriority=lacpCurPortActorPortPriority, hotlinksCurCfgOnState=hotlinksCurCfgOnState, lacpInfoPortTableEntry=lacpInfoPortTableEntry, stgNewCfgBrgHelloTime=stgNewCfgBrgHelloTime, cistInfoPortTable=cistInfoPortTable, cistInfoPortPriority=cistInfoPortPriority, pmNewCfgPmonDelete=pmNewCfgPmonDelete, cistBridgePriority=cistBridgePriority, vlanMaxEnt=vlanMaxEnt, stgNewCfgAgingTime=stgNewCfgAgingTime, markerpdusTx=markerpdusTx, mstCistCurCfgBridgeForwardDelay=mstCistCurCfgBridgeForwardDelay, stgStatsPortIndex=stgStatsPortIndex, cistRegionalPathCost=cistRegionalPathCost, lacpStatsTable=lacpStatsTable, stpInfoPortDesignatedPort=stpInfoPortDesignatedPort, l2ThashCurCfgDmacState=l2ThashCurCfgDmacState, ufdCurCfgState=ufdCurCfgState, dot1xInfoPortTable=dot1xInfoPortTable, dot1pInfoPriorityCOSQueue=dot1pInfoPriorityCOSQueue, dot1xCurCfgGlobalTable=dot1xCurCfgGlobalTable, stpInfoTableEntry=stpInfoTableEntry, stgStatsPortTableEntry=stgStatsPortTableEntry, cistBridgeMaxAge=cistBridgeMaxAge, hotlinksNewCfgTriggerTable=hotlinksNewCfgTriggerTable, ufdNoLtMLinkBlockingState=ufdNoLtMLinkBlockingState, trunkGroupNewCfgRemovePort=trunkGroupNewCfgRemovePort, PYSNMP_MODULE_ID=layer2, dot1pInfo=dot1pInfo, cistInfoPortHelloTime=cistInfoPortHelloTime, mstCistCurCfgPortEdge=mstCistCurCfgPortEdge, stpInfoAgingTime=stpInfoAgingTime, vlanInfoStatus=vlanInfoStatus, fdbCurCfgAgingTime=fdbCurCfgAgingTime, stgCurCfgVlanBmap=stgCurCfgVlanBmap, trunkGroupCurCfgPorts=trunkGroupCurCfgPorts, cistInfoPortLinkType=cistInfoPortLinkType, updateCurCfgState=updateCurCfgState, stpInfoState=stpInfoState, hotlinksNewCfgOnState=hotlinksNewCfgOnState, dot1xNewCfgPortMode=dot1xNewCfgPortMode, stgNewCfgPriority=stgNewCfgPriority, dot1xCurCfgGlobalMode=dot1xCurCfgGlobalMode, fdbGeneralCfg=fdbGeneralCfg, dot1xSystemProtoVersion=dot1xSystemProtoVersion, cistInfoPortDesignatedPort=cistInfoPortDesignatedPort, fdbNewCfgAddPort=fdbNewCfgAddPort, stgCurCfgState=stgCurCfgState, dot1xNewCfgPortTable=dot1xNewCfgPortTable, lacpInfoPortReadyN=lacpInfoPortReadyN, stpInfoTimeSinceTopChange=stpInfoTimeSinceTopChange, layer2Configs=layer2Configs, cistRootPort=cistRootPort, ufdNewCfgState=ufdNewCfgState, hotlinksCurCfgTriggerTable=hotlinksCurCfgTriggerTable, layer2Stats=layer2Stats, hotlinksInfo=hotlinksInfo, stgNewCfgBrgMaxAge=stgNewCfgBrgMaxAge, stgNewCfgPortPathCost=stgNewCfgPortPathCost, dot1xNewCfgPortMaxRq=dot1xNewCfgPortMaxRq, hotlinksNewCfgTriggerMasterPort=hotlinksNewCfgTriggerMasterPort, fdbNewCfgEntryIndex=fdbNewCfgEntryIndex, stgCurCfgPortEdge=stgCurCfgPortEdge, pmNewCfgPortMonitorEntry=pmNewCfgPortMonitorEntry, dot1xNewCfgPortQtPeriod=dot1xNewCfgPortQtPeriod, hotlinksInfoTriggerFdelay=hotlinksInfoTriggerFdelay, mstCistNewCfgPortStpState=mstCistNewCfgPortStpState, stgNewCfgPortTable=stgNewCfgPortTable, stpInfoPortDesignatedCost=stpInfoPortDesignatedCost, pmCurCfgPortMirrState=pmCurCfgPortMirrState, mstCistDefaultCfg=mstCistDefaultCfg, stpInfoBrgHelloTime=stpInfoBrgHelloTime, hotlinksNewCfgTriggerMasterTrunk=hotlinksNewCfgTriggerMasterTrunk, stpInfoPortTable=stpInfoPortTable, vlanNewCfgAddPort=vlanNewCfgAddPort, stgNewCfgPortEdge=stgNewCfgPortEdge, generalInfoUplinkFastRate=generalInfoUplinkFastRate, hotlinksNewCfgTriggerFdelay=hotlinksNewCfgTriggerFdelay, vlanCurCfgPorts=vlanCurCfgPorts, mstCistCurCfgBridgeMaxAge=mstCistCurCfgBridgeMaxAge, hotlinksStatsTriggerTable=hotlinksStatsTriggerTable, stgCurCfgVlanBmap1=stgCurCfgVlanBmap1, fdbVlan=fdbVlan, hotlinksNewCfgTriggerTableEntry=hotlinksNewCfgTriggerTableEntry, hotlinksCurCfgTriggerMasterTrunk=hotlinksCurCfgTriggerMasterTrunk, hotlinksStatsTriggerFdbFailed=hotlinksStatsTriggerFdbFailed, stpInfoTable=stpInfoTable, pmNewCfgPmirrDirection=pmNewCfgPmirrDirection, stpInfoBrgPriority=stpInfoBrgPriority, trunkGroupNewCfgTableEntry=trunkGroupNewCfgTableEntry, stpInfoTopChanges=stpInfoTopChanges, dot1xCurCfgPortTxPeriod=dot1xCurCfgPortTxPeriod, mstCistCurCfgBridgePriority=mstCistCurCfgBridgePriority, dot1xCurCfgPortRaPeriod=dot1xCurCfgPortRaPeriod, cistGeneralInfo=cistGeneralInfo, fdbStatsDeletes=fdbStatsDeletes, ufdCurCfgLtDPorts=ufdCurCfgLtDPorts, hotlinksCurCfgTriggerPreemptState=hotlinksCurCfgTriggerPreemptState, fdbStatsFindOrCreates=fdbStatsFindOrCreates, cistInfoPortState=cistInfoPortState, ufdNewCfgRemoveLtDTrunk=ufdNewCfgRemoveLtDTrunk, mstCistNewCfgPortHelloTime=mstCistNewCfgPortHelloTime, vlanNewCfgVlanName=vlanNewCfgVlanName, mstCistNewCfgPortEdge=mstCistNewCfgPortEdge, fdbLearnedPort=fdbLearnedPort, cistRootHelloTime=cistRootHelloTime, trunkGroupCurCfgTable=trunkGroupCurCfgTable, mstCistCurCfgPortTableEntry=mstCistCurCfgPortTableEntry, l2ThashCurCfgDipState=l2ThashCurCfgDipState, lacpNewPortCfgTable=lacpNewPortCfgTable, dot1xNewCfgGlobalSupTmout=dot1xNewCfgGlobalSupTmout, trunkGroupInfo=trunkGroupInfo, mstCistNewCfgBridgeForwardDelay=mstCistNewCfgBridgeForwardDelay, fdbTable=fdbTable, trunkGroupInfoIndex=trunkGroupInfoIndex, layer2Oper=layer2Oper, dot1xNewCfgPortSrvTmout=dot1xNewCfgPortSrvTmout, vlanInfoTable=vlanInfoTable, trunkGroupTableMaxSize=trunkGroupTableMaxSize, stpInfoPortIndex=stpInfoPortIndex, mstCistBridgeCfg=mstCistBridgeCfg, stpInfoMaxAge=stpInfoMaxAge, dot1pInfoPriorityIndex=dot1pInfoPriorityIndex, stgNewCfgPortPriority=stgNewCfgPortPriority, hotlinksStatsTriggerBackupActive=hotlinksStatsTriggerBackupActive, dot1xNewCfgPortDefault=dot1xNewCfgPortDefault, stgNewCfgDefaultCfg=stgNewCfgDefaultCfg, trunkGroupNewCfgDelete=trunkGroupNewCfgDelete, vlanCurCfgTableEntry=vlanCurCfgTableEntry, fdbNewCfgStaticEntry=fdbNewCfgStaticEntry, stpInfoDesignatedRoot=stpInfoDesignatedRoot, hotlinksCurCfgTriggerMasterPort=hotlinksCurCfgTriggerMasterPort, fdbEntry=fdbEntry, stgNewCfgBrgForwardDelay=stgNewCfgBrgForwardDelay, mstCistNewCfgPortTableEntry=mstCistNewCfgPortTableEntry, stgInfoVlanBmap=stgInfoVlanBmap, hotlinksMaxTriggerEntries=hotlinksMaxTriggerEntries, updateNewCfgState=updateNewCfgState, stgNewCfgAddVlan=stgNewCfgAddVlan, stgNewCfgVlanBmap1=stgNewCfgVlanBmap1, stgStatsPortTable=stgStatsPortTable, hotlinksNewCfgTriggerPreemptState=hotlinksNewCfgTriggerPreemptState, fdbStatsFindFails=fdbStatsFindFails, stgCurCfgPortTable=stgCurCfgPortTable, l2ThashNewCfgDipState=l2ThashNewCfgDipState, dot1xInfoPortIndex=dot1xInfoPortIndex, mstCistNewCfgBridgeMaxAge=mstCistNewCfgBridgeMaxAge, stgCurCfgPriority=stgCurCfgPriority, ufdNewCfgLtMPorts=ufdNewCfgLtMPorts, trunkGroupNewCfgTable=trunkGroupNewCfgTable, ufd=ufd, lacpCurSystemTimeoutTime=lacpCurSystemTimeoutTime, stgCurCfgPortPriority=stgCurCfgPortPriority, pmCurCfgPortMonitorEntry=pmCurCfgPortMonitorEntry, mstCurCfgState=mstCurCfgState, hotlinksCurCfgTriggerState=hotlinksCurCfgTriggerState, dot1xSystemCapability=dot1xSystemCapability, lacpCurSystemPriority=lacpCurSystemPriority, vlanNewCfgDelete=vlanNewCfgDelete, stgCurCfgPortLink=stgCurCfgPortLink, hotlinksInfoFdbUpdateState=hotlinksInfoFdbUpdateState, cistBridgeForwardDelay=cistBridgeForwardDelay, dot1xSystemInfo=dot1xSystemInfo, vlanInfo=vlanInfo, cistRootPathCost=cistRootPathCost, hotlinksNewCfgTriggerBackupPort=hotlinksNewCfgTriggerBackupPort, vlanInfoTableEntry=vlanInfoTableEntry, lacpInfoPortIndex=lacpInfoPortIndex, ufdNewCfgAddLtMTrunk=ufdNewCfgAddLtMTrunk, mstCistCfg=mstCistCfg, stpInfoPortPathCost=stpInfoPortPathCost, hotlinksInfoTriggerActive=hotlinksInfoTriggerActive, mstCistNewCfgAddVlan=mstCistNewCfgAddVlan, hotlinksCurCfgTriggerFdelay=hotlinksCurCfgTriggerFdelay, fdbNewCfgAddVlan=fdbNewCfgAddVlan, stpInfoHoldTime=stpInfoHoldTime, mstCurCfgStpMode=mstCurCfgStpMode, dot1pInfoPriorityCOSWeight=dot1pInfoPriorityCOSWeight, lacpNewSystemTimeoutTime=lacpNewSystemTimeoutTime, fdbNewCfgStaticTable=fdbNewCfgStaticTable, trunkGroupNewCfgAddPort=trunkGroupNewCfgAddPort, fdbStatsLookups=fdbStatsLookups, cistRootForwardDelay=cistRootForwardDelay)
