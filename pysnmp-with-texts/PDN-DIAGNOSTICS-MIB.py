#
# PySNMP MIB module PDN-DIAGNOSTICS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-DIAGNOSTICS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:38:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ifIndex, ifTestId = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifTestId")
pdn_diagnostics, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdn-diagnostics")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, Bits, ModuleIdentity, NotificationType, MibIdentifier, Integer32, ObjectIdentity, Counter64, Gauge32, Counter32, TimeTicks, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "Bits", "ModuleIdentity", "NotificationType", "MibIdentifier", "Integer32", "ObjectIdentity", "Counter64", "Gauge32", "Counter32", "TimeTicks", "NotificationType", "iso")
RowStatus, TextualConvention, AutonomousType, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "AutonomousType", "DisplayString")
diagTestMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1))
diagTestMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 2))
diagIfTest = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1))
diagApplTest = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2))
diagTest = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 3))
ifLoopbackTestTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1), )
if mibBuilder.loadTexts: ifLoopbackTestTable.setStatus('mandatory')
if mibBuilder.loadTexts: ifLoopbackTestTable.setDescription('This table contains input and results of a packet loopback test. This table is indexed by ifIndex. This is a interface related test. There can be only one test running per interface. This table should be used in conjunction with ifTestTable(Rfc 1573) with all the semantics of ifTestTable.')
ifLoopbackTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ifLoopbackTestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ifLoopbackTestEntry.setDescription('An entry containing objects for test input and result for packet loopback test')
loopbackTestInputNumCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopbackTestInputNumCycles.setStatus('mandatory')
if mibBuilder.loadTexts: loopbackTestInputNumCycles.setDescription('This object corresponds the number of cycles the test to be run for. One cycle corresponds to a 15 second interval. The default value for this object is 40.')
loopbackTestResultsPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopbackTestResultsPktsSent.setStatus('mandatory')
if mibBuilder.loadTexts: loopbackTestResultsPktsSent.setDescription('This object corresponds to the number of packets sent')
loopbackTestResultsPktsRcvdOK = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopbackTestResultsPktsRcvdOK.setStatus('mandatory')
if mibBuilder.loadTexts: loopbackTestResultsPktsRcvdOK.setDescription('This object corresponds to the number of packets which were received without any error')
loopbackTestResultsPktsRcvdErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopbackTestResultsPktsRcvdErr.setStatus('mandatory')
if mibBuilder.loadTexts: loopbackTestResultsPktsRcvdErr.setDescription('This object corresponds to the number of packets which were received with errors')
loopbackTestResultsPktsNotRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopbackTestResultsPktsNotRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: loopbackTestResultsPktsNotRcvd.setDescription('This object corresponds to the number of packets which were sent but not received')
loopbackTestResultsPktErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopbackTestResultsPktErrorRate.setStatus('mandatory')
if mibBuilder.loadTexts: loopbackTestResultsPktErrorRate.setDescription('Reflects the error rate of the loopback test. this string will represent a floating point number of the form [ErrRate][eE][+-][ErrRateBase] where ErrRate and ErrRateBase are integers. In Other Words ErrRate * [10^ -ErrRateBase] shown below are example of the values returned. 123456E-5 = 1.23456 344567e-6 = 0.344567')
loopbackTestResultsErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopbackTestResultsErrSecs.setStatus('mandatory')
if mibBuilder.loadTexts: loopbackTestResultsErrSecs.setDescription('This object corresponds to the number of errored seconds')
loopbackTestResultsSvrErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopbackTestResultsSvrErrSecs.setStatus('mandatory')
if mibBuilder.loadTexts: loopbackTestResultsSvrErrSecs.setDescription('This object corresponds to the number of severely errored seconds')
loopbackTestResultsElpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopbackTestResultsElpTime.setStatus('mandatory')
if mibBuilder.loadTexts: loopbackTestResultsElpTime.setDescription('This object corresponds to the number of seconds elapsed since the start of the test.')
ifBERTObjectsTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2), )
if mibBuilder.loadTexts: ifBERTObjectsTable.setStatus('mandatory')
if mibBuilder.loadTexts: ifBERTObjectsTable.setDescription('This table contains the objects for Bit Error Rate Test. This table is indexed by ifIndex.')
ifBERTObjectsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ifBERTObjectsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ifBERTObjectsEntry.setDescription('An Entry containing objects of BERT.')
ifBERTTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifBERTTestDuration.setStatus('mandatory')
if mibBuilder.loadTexts: ifBERTTestDuration.setDescription('This object represents the test duration in seconds.')
ifBERTElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: ifBERTElapsedTime.setDescription('This object represents the elapsed time in seconds.')
ifBERTDownSyncUP = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTDownSyncUP.setStatus('mandatory')
if mibBuilder.loadTexts: ifBERTDownSyncUP.setDescription('This object indicates whether Downstream sync is enabled .')
ifBERTUpSyncUP = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTUpSyncUP.setStatus('mandatory')
if mibBuilder.loadTexts: ifBERTUpSyncUP.setDescription('This object indicates whether upstream sync is enabled.')
ifBERTSegmentsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTSegmentsSent.setStatus('mandatory')
if mibBuilder.loadTexts: ifBERTSegmentsSent.setDescription('This object represents the number of segments sent during the test')
ifBERTDownMBitsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTDownMBitsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: ifBERTDownMBitsRcvd.setDescription('This represents the number of million bits rcvd downstream.')
ifBERTUpMBitsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTUpMBitsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: ifBERTUpMBitsRcvd.setDescription('This represents the number of million bits rcvd upstream.')
ifBERTDownBitErrDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTDownBitErrDetected.setStatus('mandatory')
if mibBuilder.loadTexts: ifBERTDownBitErrDetected.setDescription('This represents the number of bit errors detected downstream.')
ifBERTUpBitErrDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTUpBitErrDetected.setStatus('mandatory')
if mibBuilder.loadTexts: ifBERTUpBitErrDetected.setDescription('This represents the number of bit errors detected upstream.')
ifBERTDownBitErrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTDownBitErrRate.setStatus('mandatory')
if mibBuilder.loadTexts: ifBERTDownBitErrRate.setDescription('This string will represent a floating point number of the form [Er rRate] [eE] [+-] [ErrRatebase] where ErrTare and errRateBase are integers.')
ifBERTUpBitErrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTUpBitErrRate.setStatus('mandatory')
if mibBuilder.loadTexts: ifBERTUpBitErrRate.setDescription('This object reflects the error rate of BERT in Upstream direction. This string will represent a floating point number of the form [ErrRate] [eE] [+-] [ErrRatebase] where ErrTare and errRateBase are integers.')
ifBERTDownErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTDownErroredSecs.setStatus('mandatory')
if mibBuilder.loadTexts: ifBERTDownErroredSecs.setDescription('This represents number of errored seconds downstream. Errored second is a second in which there is at least 1 block error.')
ifBERTUpErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTUpErroredSecs.setStatus('mandatory')
if mibBuilder.loadTexts: ifBERTUpErroredSecs.setDescription('This represents number of errored seconds upstream. Errored second is a second in which there is at least 1 block error.')
ifBERTDownLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTDownLineRate.setStatus('mandatory')
if mibBuilder.loadTexts: ifBERTDownLineRate.setDescription('This represents the downstream line rate in KBPS')
ifBERTUpLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTUpLineRate.setStatus('mandatory')
if mibBuilder.loadTexts: ifBERTUpLineRate.setDescription('This represents the Upstream line rate in KBPS')
ifBERTDownMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTDownMargin.setStatus('mandatory')
if mibBuilder.loadTexts: ifBERTDownMargin.setDescription('This represents the Downstream margin in decibels (DB).')
ifBERTUpMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTUpMargin.setStatus('mandatory')
if mibBuilder.loadTexts: ifBERTUpMargin.setDescription('This represents the upstream margin in decibels (DB).')
applMaxNumberOfTests = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applMaxNumberOfTests.setStatus('mandatory')
if mibBuilder.loadTexts: applMaxNumberOfTests.setDescription('This object identifies the maximum number of application based tests that can be simultaneously instantiated on the device.')
applCurrentNumberOfTests = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applCurrentNumberOfTests.setStatus('mandatory')
if mibBuilder.loadTexts: applCurrentNumberOfTests.setDescription('This object identifies the current number of application based tests that are running on the device.')
applStopAllTests = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOp", 1), ("stop", 2), ("stopAndClear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applStopAllTests.setStatus('mandatory')
if mibBuilder.loadTexts: applStopAllTests.setDescription('The value of this object corresponds to stop all application based tests on the device. noOp -- no operation stop -- all the application tests will be stopped but current test results are still available stopAndClear -- all the application tests will be stoped and the results are cleared also')
applNewTestId = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applNewTestId.setStatus('mandatory')
if mibBuilder.loadTexts: applNewTestId.setDescription('This value of this object corresponds to getting a magic number to start an application based test. The magic number is used as an index to create a row for the diagApplTestTable. If no new rows can be created, this object will have a value of 0.')
applTestStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 5), )
if mibBuilder.loadTexts: applTestStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: applTestStatusTable.setDescription('This table controls all the application tests. It defines a test type, starts a test, and clears a test.')
applTestStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 5, 1), ).setIndexNames((0, "PDN-DIAGNOSTICS-MIB", "applTestId"))
if mibBuilder.loadTexts: applTestStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: applTestStatusEntry.setDescription('An entry containing objects for invoking application based tests')
applTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTestId.setStatus('mandatory')
if mibBuilder.loadTexts: applTestId.setDescription('A unique ID to identify each application test.')
applTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 5, 1, 2), AutonomousType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applTestType.setStatus('mandatory')
if mibBuilder.loadTexts: applTestType.setDescription('This object defines the application test type.')
applTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("failed", 4), ("abort", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: applTestStatus.setDescription('This object shows the current status of an application test. none - indicates waiting for test parameters. inProgress - indicates the test is in process. success - indicates the test is completed. failed - indicates the test is failed. abort - indicates the test was aborted')
applTestErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("timeout", 2), ("icmpError", 3), ("systemError", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTestErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: applTestErrorCode.setDescription('This object shows the reason for a test failure.')
applTestOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applTestOwner.setStatus('mandatory')
if mibBuilder.loadTexts: applTestOwner.setDescription('The network manager who has started the test')
applTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 5, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applTestRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: applTestRowStatus.setDescription('This object is used to create a new row or delete an existing row for an application test.')
applPingTestTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6), )
if mibBuilder.loadTexts: applPingTestTable.setStatus('mandatory')
if mibBuilder.loadTexts: applPingTestTable.setDescription('This table contains objects which allow network manager to ping a destination.')
applPingTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1), ).setIndexNames((0, "PDN-DIAGNOSTICS-MIB", "applPingTestId"))
if mibBuilder.loadTexts: applPingTestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: applPingTestEntry.setDescription('This table contains the input parameters for a ping test and the results of the ping test.')
applPingTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPingTestId.setStatus('mandatory')
if mibBuilder.loadTexts: applPingTestId.setDescription('A unique ID to identify each application test.')
applPingTestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applPingTestIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: applPingTestIpAddress.setDescription('The IP address to be pinged.')
applPingTestSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applPingTestSourceIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: applPingTestSourceIpAddr.setDescription('The Source IP address where we are pinging from. This is an optional object for some devices. See operational specification for its use.')
applPingTestPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applPingTestPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: applPingTestPacketSize.setDescription('This object corresponds to the size of the packet (in bytes) which will be sent during the Ping test. The default value for this object is 64 bytes')
applPingTestTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applPingTestTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: applPingTestTimeout.setDescription('This object corresponds to a timeout value (in seconds) between Pings. The default value for this object is 5 seconds')
applPingTestMaxPings = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applPingTestMaxPings.setStatus('mandatory')
if mibBuilder.loadTexts: applPingTestMaxPings.setDescription('This object corresponds to the maximum number of times the device should Ping for the destination. The default value for this object is 10')
applPingTestPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPingTestPktsSent.setStatus('mandatory')
if mibBuilder.loadTexts: applPingTestPktsSent.setDescription('This object corresponds to the total number of packets sent.')
applPingTestPktsRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPingTestPktsRecv.setStatus('mandatory')
if mibBuilder.loadTexts: applPingTestPktsRecv.setDescription('This object corresponds to the total number of packets received without error')
applPingTestMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPingTestMinTime.setStatus('mandatory')
if mibBuilder.loadTexts: applPingTestMinTime.setDescription('The minimum round trip time.')
applPingTestMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPingTestMaxTime.setStatus('mandatory')
if mibBuilder.loadTexts: applPingTestMaxTime.setDescription('The maximum round trip time.')
applPingTestAvgTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPingTestAvgTime.setStatus('mandatory')
if mibBuilder.loadTexts: applPingTestAvgTime.setDescription('The average round trip time.')
applPingTestDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noop", 1), ("mgmt", 2), ("service", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applPingTestDomain.setStatus('mandatory')
if mibBuilder.loadTexts: applPingTestDomain.setDescription("This object specifies the destination ip address's domain. The Default is service domain. Not allowed if source ip address is entered. This is an optional object for some devices. See operational specification its use.")
applPingTestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applPingTestIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: applPingTestIfIndex.setDescription('This object specifies the interface over which the ping test will take place. ')
applTracerouteConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 7), )
if mibBuilder.loadTexts: applTracerouteConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: applTracerouteConfigTable.setDescription('This table contains objects which allow network manager to enter the parameters of a traceroute test.')
applTracerouteConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 7, 1), ).setIndexNames((0, "PDN-DIAGNOSTICS-MIB", "applTracerouteTestId"))
if mibBuilder.loadTexts: applTracerouteConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: applTracerouteConfigEntry.setDescription('This table contains the input parameters for a traceroute test.')
applTracerouteTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTracerouteTestId.setStatus('mandatory')
if mibBuilder.loadTexts: applTracerouteTestId.setDescription('A unique ID to identify each application test.')
applTracerouteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applTracerouteIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: applTracerouteIpAddress.setDescription('The destination IP address of a traceroute test.')
applTracerouteSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 7, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applTracerouteSourceIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: applTracerouteSourceIpAddr.setDescription('The source IP address of where the traceroute test started. This is an optional object for some devices. See operational specification for its use.')
applTraceroutePktsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applTraceroutePktsSize.setStatus('mandatory')
if mibBuilder.loadTexts: applTraceroutePktsSize.setDescription('This object corresponds to the size of the packet (in bytes) which will be sent during the traceroute test. The default value for this object is 38 bytes')
applTracerouteTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applTracerouteTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: applTracerouteTimeout.setDescription('This object corresponds to a timeout value (in seconds) of a traceroute test. The default value for this object is 5 seconds')
applTracerouteMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applTracerouteMaxHops.setStatus('mandatory')
if mibBuilder.loadTexts: applTracerouteMaxHops.setDescription('This object corresponds to the maximum number of hops to reach the destination. The default value for this object is device specific. See Operational Specifications')
applTracerouteDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noop", 1), ("mgmt", 2), ("service", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applTracerouteDomain.setStatus('mandatory')
if mibBuilder.loadTexts: applTracerouteDomain.setDescription("This object specifies the destination ip address's domain. The Default is service domain. Not allowed if source ip address is entered. This is an optional object for some devices. See operational specification its use.")
applTracerouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applTracerouteIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: applTracerouteIfIndex.setDescription('This object specifies the interface over which the trace-route test will take place. ')
applTracerouteResultTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 8), )
if mibBuilder.loadTexts: applTracerouteResultTable.setStatus('mandatory')
if mibBuilder.loadTexts: applTracerouteResultTable.setDescription('This table contains results of traceroute test.')
applTracerouteResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 8, 1), ).setIndexNames((0, "PDN-DIAGNOSTICS-MIB", "applTracerouteResultTestId"), (0, "PDN-DIAGNOSTICS-MIB", "applTracerouteHopCount"))
if mibBuilder.loadTexts: applTracerouteResultEntry.setStatus('mandatory')
if mibBuilder.loadTexts: applTracerouteResultEntry.setDescription('An entry contains the objects for the traceroute test.')
applTracerouteResultTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTracerouteResultTestId.setStatus('mandatory')
if mibBuilder.loadTexts: applTracerouteResultTestId.setDescription('A unique ID to identify each application test.')
applTracerouteHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTracerouteHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: applTracerouteHopCount.setDescription('This object contains the number of hops to reach the gateway.')
applTracerouteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 8, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTracerouteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: applTracerouteIpAddr.setDescription('This object contains the IP address of the gateway.')
applTraceroutePktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTraceroutePktSize.setStatus('mandatory')
if mibBuilder.loadTexts: applTraceroutePktSize.setDescription('This object corresponds to the size of the packet (in bytes) which will be sent during the traceroute test. The default value for this object is 38 bytes')
applTracerouteProbe1RTT = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTracerouteProbe1RTT.setStatus('mandatory')
if mibBuilder.loadTexts: applTracerouteProbe1RTT.setDescription('This object contains the round trip time (rtt) of the first probe sent to the gateway. If the probe has a timeout the rtt is set to -1.')
applTracerouteProbe2RTT = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTracerouteProbe2RTT.setStatus('mandatory')
if mibBuilder.loadTexts: applTracerouteProbe2RTT.setDescription('This object contains the round trip time (rtt) of the second probe sent to the gateway. If the probe has a timeout the rtt is set to -1.')
applTracerouteProbe3RTT = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTracerouteProbe3RTT.setStatus('mandatory')
if mibBuilder.loadTexts: applTracerouteProbe3RTT.setDescription('This object contains the round trip time (rtt) of the third probe sent to the gateway. If the probe has a timeout the rtt is set to -1.')
diagTestTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagTestTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: diagTestTrapEnable.setDescription('This object is used to disable or enable TestOver and TestStart trap for all tests. It is bit sum and possible bit positions are 1 TestStart trap 2 TestOver trap')
diagApplTestStart = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 2) + (0,1)).setObjects(("IF-MIB", "ifIndex"), ("PDN-DIAGNOSTICS-MIB", "applTestId"), ("PDN-DIAGNOSTICS-MIB", "applTestType"))
if mibBuilder.loadTexts: diagApplTestStart.setDescription('This trap signifies that an application test has been initiated.')
diagApplTestStop = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 2) + (0,101)).setObjects(("IF-MIB", "ifIndex"), ("PDN-DIAGNOSTICS-MIB", "applTestId"), ("PDN-DIAGNOSTICS-MIB", "applTestType"), ("PDN-DIAGNOSTICS-MIB", "applTestStatus"))
if mibBuilder.loadTexts: diagApplTestStop.setDescription('This trap signifies that an application test has completed. This trap compliments the diagApplTestStart trap.')
diagIfTestStart = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 2) + (0,2)).setObjects(("IF-MIB", "ifTestId"))
if mibBuilder.loadTexts: diagIfTestStart.setDescription('This trap signifies that a diagnostic test has been initiated.')
diagIfTestOver = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 2) + (0,102)).setObjects(("IF-MIB", "ifTestId"))
if mibBuilder.loadTexts: diagIfTestOver.setDescription('This trap signifies that a diagnostic test has completed. This trap compliments the diagIfTestStart trap')
mibBuilder.exportSymbols("PDN-DIAGNOSTICS-MIB", applPingTestPktsSent=applPingTestPktsSent, ifBERTDownBitErrDetected=ifBERTDownBitErrDetected, applPingTestPktsRecv=applPingTestPktsRecv, applTestStatusEntry=applTestStatusEntry, applTracerouteProbe2RTT=applTracerouteProbe2RTT, ifBERTUpErroredSecs=ifBERTUpErroredSecs, applTestOwner=applTestOwner, applNewTestId=applNewTestId, ifBERTUpBitErrRate=ifBERTUpBitErrRate, applTracerouteResultEntry=applTracerouteResultEntry, ifBERTTestDuration=ifBERTTestDuration, loopbackTestResultsElpTime=loopbackTestResultsElpTime, applTracerouteMaxHops=applTracerouteMaxHops, ifBERTUpSyncUP=ifBERTUpSyncUP, diagApplTestStop=diagApplTestStop, applTracerouteTestId=applTracerouteTestId, applTestStatus=applTestStatus, loopbackTestResultsPktsRcvdOK=loopbackTestResultsPktsRcvdOK, applTraceroutePktsSize=applTraceroutePktsSize, applTracerouteIpAddr=applTracerouteIpAddr, applTestStatusTable=applTestStatusTable, loopbackTestResultsPktsSent=loopbackTestResultsPktsSent, loopbackTestResultsPktErrorRate=loopbackTestResultsPktErrorRate, ifLoopbackTestEntry=ifLoopbackTestEntry, ifBERTDownMargin=ifBERTDownMargin, applPingTestAvgTime=applPingTestAvgTime, diagIfTestOver=diagIfTestOver, applPingTestPacketSize=applPingTestPacketSize, ifBERTDownMBitsRcvd=ifBERTDownMBitsRcvd, ifBERTUpMargin=ifBERTUpMargin, ifLoopbackTestTable=ifLoopbackTestTable, ifBERTObjectsEntry=ifBERTObjectsEntry, applTracerouteDomain=applTracerouteDomain, loopbackTestResultsSvrErrSecs=loopbackTestResultsSvrErrSecs, diagTestMIBObjects=diagTestMIBObjects, ifBERTSegmentsSent=ifBERTSegmentsSent, ifBERTDownBitErrRate=ifBERTDownBitErrRate, applPingTestId=applPingTestId, ifBERTDownErroredSecs=ifBERTDownErroredSecs, applTestType=applTestType, ifBERTElapsedTime=ifBERTElapsedTime, ifBERTDownSyncUP=ifBERTDownSyncUP, applPingTestMinTime=applPingTestMinTime, applTestRowStatus=applTestRowStatus, ifBERTUpLineRate=ifBERTUpLineRate, loopbackTestResultsErrSecs=loopbackTestResultsErrSecs, loopbackTestResultsPktsNotRcvd=loopbackTestResultsPktsNotRcvd, ifBERTObjectsTable=ifBERTObjectsTable, applTracerouteIfIndex=applTracerouteIfIndex, applTestId=applTestId, applTracerouteTimeout=applTracerouteTimeout, applPingTestIpAddress=applPingTestIpAddress, applTracerouteSourceIpAddr=applTracerouteSourceIpAddr, applPingTestIfIndex=applPingTestIfIndex, ifBERTUpMBitsRcvd=ifBERTUpMBitsRcvd, diagApplTestStart=diagApplTestStart, applTracerouteProbe1RTT=applTracerouteProbe1RTT, applTracerouteResultTestId=applTracerouteResultTestId, applTracerouteIpAddress=applTracerouteIpAddress, applTracerouteConfigTable=applTracerouteConfigTable, applStopAllTests=applStopAllTests, applPingTestMaxPings=applPingTestMaxPings, applPingTestTimeout=applPingTestTimeout, diagTest=diagTest, applTracerouteConfigEntry=applTracerouteConfigEntry, ifBERTDownLineRate=ifBERTDownLineRate, loopbackTestResultsPktsRcvdErr=loopbackTestResultsPktsRcvdErr, diagIfTestStart=diagIfTestStart, applMaxNumberOfTests=applMaxNumberOfTests, applTracerouteHopCount=applTracerouteHopCount, applTestErrorCode=applTestErrorCode, applTraceroutePktSize=applTraceroutePktSize, applTracerouteProbe3RTT=applTracerouteProbe3RTT, diagTestTrapEnable=diagTestTrapEnable, ifBERTUpBitErrDetected=ifBERTUpBitErrDetected, applPingTestTable=applPingTestTable, applTracerouteResultTable=applTracerouteResultTable, diagTestMIBTraps=diagTestMIBTraps, diagIfTest=diagIfTest, applPingTestDomain=applPingTestDomain, applPingTestEntry=applPingTestEntry, applCurrentNumberOfTests=applCurrentNumberOfTests, applPingTestSourceIpAddr=applPingTestSourceIpAddr, applPingTestMaxTime=applPingTestMaxTime, loopbackTestInputNumCycles=loopbackTestInputNumCycles, diagApplTest=diagApplTest)
