#
# PySNMP MIB module PBC-CMTS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PBC-CMTS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:37:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
docsDevEvId, docsDevEvLevel, docsDevEvText = mibBuilder.importSymbols("DOCS-CABLE-DEVICE-MIB", "docsDevEvId", "docsDevEvLevel", "docsDevEvText")
docsIfCmtsCmStatusEntry, docsIfCmtsCmStatusIndex = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfCmtsCmStatusEntry", "docsIfCmtsCmStatusIndex")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
pbcModuleRegs, pbcManagement, pacificBroadband, pbcCaps = mibBuilder.importSymbols("PBC-ENT-MIB", "pbcModuleRegs", "pbcManagement", "pacificBroadband", "pbcCaps")
pbcCardIfPortIndex, = mibBuilder.importSymbols("PBC-GENERIC-MIB", "pbcCardIfPortIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, ModuleIdentity, Unsigned32, Counter32, Counter64, NotificationType, Gauge32, IpAddress, TimeTicks, Integer32, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Counter32", "Counter64", "NotificationType", "Gauge32", "IpAddress", "TimeTicks", "Integer32", "ObjectIdentity", "iso")
DisplayString, MacAddress, TimeInterval, TextualConvention, TruthValue, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TimeInterval", "TextualConvention", "TruthValue", "DateAndTime")
pbcCmtsMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 5987, 1, 1, 2))
if mibBuilder.loadTexts: pbcCmtsMib.setLastUpdated('200106211721Z')
if mibBuilder.loadTexts: pbcCmtsMib.setOrganization('Pacific Broadband Communications')
if mibBuilder.loadTexts: pbcCmtsMib.setContactInfo('Contact-info.')
if mibBuilder.loadTexts: pbcCmtsMib.setDescription('This module defines all management objects which are common to PBC CMTS products.')
class TenthdBmV(TextualConvention, Integer32):
    description = 'This data type represents power levels that are normally expressed in dBmV. Units are in tenths of a dBmV; for example, 5.1 dBmV will be represented as 51.'
    status = 'current'
    displayHint = 'd-1'

class TenthdB(TextualConvention, Integer32):
    description = 'his data type represents relationships which are normally expressed in decibels (dB). Units are in tenths of a dB; for example, 15.3 dB will be represented as 153.'
    status = 'current'

class OneHundredthdBmVPerHz(TextualConvention, Integer32):
    description = 'his data type represents power levels that are normally expressed in dBmV/Hz. Units are in hundredths of a dBmV/Hz; for example, 15.3 dBmV/Hz will be represented as 1530.'
    status = 'current'

pbcCmts = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2))
pbcCmtsIfMibExtendedObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1))
pbcGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 1))
pbcDownStreamMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 2))
pbcCmtsIfDownstreamNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfDownstreamNumEntries.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfDownstreamNumEntries.setDescription('Number of downstream channels represented in the downstream channel table.')
pbcCmtsIfDownstreamChannelTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 2, 2), )
if mibBuilder.loadTexts: pbcCmtsIfDownstreamChannelTable.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfDownstreamChannelTable.setDescription('PBC-specific management objects associated with downstream channels.')
pbcCmtsIfDownstreamChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pbcCmtsIfDownstreamChannelEntry.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfDownstreamChannelEntry.setDescription('PBC-specific management objects associated with one downstream channel.')
pbcCmtsIfDownstreamIfTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dBmV32", 1), ("dBmV38", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfDownstreamIfTxPower.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfDownstreamIfTxPower.setDescription('Intermediate Frequency (IF) signal power being supplied to the upconverter on this channel.')
pbcUpStreamMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3))
pbcCmtsIfUpstreamNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamNumEntries.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfUpstreamNumEntries.setDescription('Number of upstream channels in the upstream channel table.')
pbcCmtsIfUpstreamChannelTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2), )
if mibBuilder.loadTexts: pbcCmtsIfUpstreamChannelTable.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfUpstreamChannelTable.setDescription('PBC-specific management objects associated with upstream channels.')
pbcCmtsIfUpstreamChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pbcCmtsIfUpstreamChannelEntry.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfUpstreamChannelEntry.setDescription('PBC extended US management objects for one US channel.')
pbcCmtsIfUpstreamPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamPort.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfUpstreamPort.setDescription('Associates the upstream channel with one of the physical upstream cable connectors. A value of -1 indicates that the channel currently is not associated with any port.')
pbcCmtsIfUpstreamOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("available", 1), ("standby", 2), ("inUse", 3), ("scanning", 4), ("unlicensed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamOperMode.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfUpstreamOperMode.setDescription("Controls the usage of this channel as follows: 1 = available (for use) 2 = standby (for redundancy purposes) 3 = inUse (channel is configured for data) 4 = scanning (doing dedicated spectral analysis) 5 = unlicensed (a 'key' is required to access the channel) ")
pbcCmtsIfUpstreamCmdRcvdPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 3), TenthdBmV()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmdRcvdPwr.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmdRcvdPwr.setDescription('Commanded received power.')
pbcCmtsIfUpstreamPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 4), TenthdBmV()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamPowerLevel.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfUpstreamPowerLevel.setDescription("Upstream's sample-based measured received signal power.")
pbcCmtsIfUpstreamMER = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 5), TenthdB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamMER.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfUpstreamMER.setDescription("Upstream channel's modulation error ratio expressed in dB.")
pbcCmtsIfUpstreamHcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamHcsErrors.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfUpstreamHcsErrors.setDescription("Channel's HCS errors detected.")
pbcCmtsIfUpstreamCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCrcErrors.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCrcErrors.setDescription('CRC errors detected on this channel.')
pbcCmtsIfUpstreamCER = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCER.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCER.setDescription('Percentage of codewords that had unrecoverable errors.')
pbcCmtsIfUpstreamCmTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmTotal.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmTotal.setDescription('Total Number of CMs in this Upstream Channel.')
pbcCmtsIfUpstreamCmRangeAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmRangeAborted.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmRangeAborted.setDescription('Total Number of CMs with Range Abort Status in this Upstream Channel.')
pbcCmtsIfUpstreamCmRanging = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmRanging.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmRanging.setDescription('Total Number of Ranging CMs in this Upstream Channel.')
pbcCmtsIfUpstreamCmRangingComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmRangingComplete.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmRangingComplete.setDescription('Total Number of CMs with Ranging Complete Status in this Upstream Channel.')
pbcCmtsIfUpstreamCmIpComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmIpComplete.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmIpComplete.setDescription('Total Number of CMs with IP Complete Status in this Upstream Channel.')
pbcCmtsIfUpstreamCmRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmRegistered.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmRegistered.setDescription('Total Number of Registered CMs in this Upstream Channel.')
pbcCmtsIfUpstreamCmRogue = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmRogue.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmRogue.setDescription('Total Number of Rogue CMs in this Upstream Channel.')
pbcMacMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 4))
pbcCmtsIfMacTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 4, 1), )
if mibBuilder.loadTexts: pbcCmtsIfMacTable.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfMacTable.setDescription('Description.')
pbcCmtsIfMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pbcCmtsIfMacEntry.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfMacEntry.setDescription('Description.')
pbcCmtsIfMacCmTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 4, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfMacCmTotal.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfMacCmTotal.setDescription('Number of CMs in this MAC domain.')
pbcCmtsIfMacCmRangeAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfMacCmRangeAborted.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfMacCmRangeAborted.setDescription('Number of CMs with Ranging aborted status in this MAC domain.')
pbcCmtsIfMacCmRanging = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfMacCmRanging.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfMacCmRanging.setDescription('Number of CMs with Ranging status in this MAC domain.')
pbcCmtsIfMacCmRangingComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfMacCmRangingComplete.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfMacCmRangingComplete.setDescription('Number of Ranging completed CMs in this MAC domain.')
pbcCmtsIfMacCmIpComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfMacCmIpComplete.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfMacCmIpComplete.setDescription('Number of CMs with IP Complete status in this MAC domain.')
pbcCmtsIfMacCmRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 4, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfMacCmRegistered.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfMacCmRegistered.setDescription('Number of Registered CMs in this MAC domain.')
pbcCmtsIfMacCmRogue = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfMacCmRogue.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsIfMacCmRogue.setDescription('Number of Rogue CMs in this MAC domain.')
pbcCmtsCmMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5))
pbcCmtsCmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1), )
if mibBuilder.loadTexts: pbcCmtsCmStatusTable.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsCmStatusTable.setDescription('Extention of docsIfCmtsCmStatusTable. ')
pbcCmtsCmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1), )
docsIfCmtsCmStatusEntry.registerAugmentions(("PBC-CMTS-MIB", "pbcCmtsCmStatusEntry"))
pbcCmtsCmStatusEntry.setIndexNames(*docsIfCmtsCmStatusEntry.getIndexNames())
if mibBuilder.loadTexts: pbcCmtsCmStatusEntry.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsCmStatusEntry.setDescription('Extention of docsIfCmtsCmStatusEntry.')
pbcCmtsCmStatusFirstOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsCmStatusFirstOnline.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsCmStatusFirstOnline.setDescription('Date and Time when CM was seen by the system for the first time.')
pbcCmtsCmStatusLastOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsCmStatusLastOnline.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsCmStatusLastOnline.setDescription('Date and Time when the CM came online recently.')
pbcCmtsCmStatusTimesOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsCmStatusTimesOnline.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsCmStatusTimesOnline.setDescription('Number of times the CM came online.')
pbcCmtsCmStatusPercentOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsCmStatusPercentOnline.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsCmStatusPercentOnline.setDescription('Percent of time for the CM has been online.')
pbcCmtsCmStatusMinOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1, 5), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsCmStatusMinOnline.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsCmStatusMinOnline.setDescription('Minimum time interval the CM was online.')
pbcCmtsCmStatusMaxOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1, 6), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsCmStatusMaxOnline.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsCmStatusMaxOnline.setDescription('Maximum time interval the CM was online.')
pbcCmtsCmStatusAvgOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1, 7), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsCmStatusAvgOnline.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsCmStatusAvgOnline.setDescription('Average time interval the CM was online.')
pbcCmtsCmStatusMinOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1, 8), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsCmStatusMinOffline.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsCmStatusMinOffline.setDescription('Minimum time interval the CM was offline.')
pbcCmtsCmStatusMaxOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1, 9), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsCmStatusMaxOffline.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsCmStatusMaxOffline.setDescription('Maximum time interval the CM was offline.')
pbcCmtsCmStatusAvgOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1, 10), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsCmStatusAvgOffline.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsCmStatusAvgOffline.setDescription('Average time interval the CM was offline.')
pbcCmtsRogueCmTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 2), )
if mibBuilder.loadTexts: pbcCmtsRogueCmTable.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsRogueCmTable.setDescription('Contain information associated with all the Rogue Cable Modems detected by the CMTS.')
pbcCmtsRogueCmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 2, 1), ).setIndexNames((0, "PBC-CMTS-MIB", "pbcCmtsRogueCmMacAddress"))
if mibBuilder.loadTexts: pbcCmtsRogueCmEntry.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsRogueCmEntry.setDescription('An entry would be created for every rogue Cable Modem detected by CMTS.')
pbcCmtsRogueCmMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsRogueCmMacAddress.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsRogueCmMacAddress.setDescription('MAC Address of the Rogue CM.')
pbcCmtsRogueCmIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsRogueCmIpAddress.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsRogueCmIpAddress.setDescription('IP Address of the Rogue CM.')
pbcCmtsRogueCmPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsRogueCmPtr.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsRogueCmPtr.setDescription("An row index into docsIfCmtsCmStatusTable. When queried with the correct instance value (e.g. a CM's MAC address), returns the index in docsIfCmtsCmStatusTable which represents that CM.")
pbcCmtsRogueCmType = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unProvisioned", 1), ("rigged", 2), ("configured", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsRogueCmType.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsRogueCmType.setDescription('Type of the Rogue CM. Valid Values are unProvisioned (1), rigged (2), configured (3).')
pbcCmtsRogueCmFirstActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsRogueCmFirstActive.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsRogueCmFirstActive.setDescription('Date and Time when CM was seen by the system for the first time.')
pbcCmtsRogueCmLastActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsRogueCmLastActive.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsRogueCmLastActive.setDescription('Date and Time when the last time an IM was seen from this CM. The LastActive tells the latest time when CM was detected as rogue and put to rest.')
pbcCmtsCableSpectrumManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2))
pbcCmtsSpectrumAnalysisMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2))
pbcCmtsSpectrumAnalysisObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1))
pbcSpectrumAnalysisRFInputTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 1), )
if mibBuilder.loadTexts: pbcSpectrumAnalysisRFInputTable.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisRFInputTable.setDescription('There is an entry in this table for each upstream input connector on each DOCSIS module in the CMTS. Each port is uniquely identified within the CMTS by its pbcCardIfPortIndex value. This index object is defined under the generic chassis management section of the PBC private MIB tree.')
pbcSpectrumAnalysisRFInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 1, 1), ).setIndexNames((0, "PBC-GENERIC-MIB", "pbcCardIfPortIndex"))
if mibBuilder.loadTexts: pbcSpectrumAnalysisRFInputEntry.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisRFInputEntry.setDescription('An entry in the RF monitoring input (port) table.')
pbcSpectrumAnalysisEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcSpectrumAnalysisEnable.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisEnable.setDescription("True ('1') enables spectrum estimation. This should be set only after setting the other parameters affecting the scan. After setting this 'true', pbcSpectrumAnalysisCmdStatus will reflect initial and, ultimately, final status of the sweep attempt.")
pbcSpectrumAnalysisCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("available", 1), ("scanInProgress", 2), ("complete", 3), ("generalFailure", 4), ("noResources", 5))).clone('available')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcSpectrumAnalysisCmdStatus.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisCmdStatus.setDescription('Result of pbcSpectrumAnalysisEnable command.')
pbcSpectrumAnalysisIntegrationLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 1, 1, 3), Unsigned32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcSpectrumAnalysisIntegrationLen.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisIntegrationLen.setDescription('This specifies the number of estimates over which the peak of the noise power is calculated.')
pbcSpectrumAnalysisFreqStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("kHz20", 1), ("kHz40", 2), ("kHz80", 3), ("kHz160", 4))).clone('kHz160')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcSpectrumAnalysisFreqStep.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisFreqStep.setDescription('The frequency step for scanning which defines the frequency resolution. The choices are: 20KHz, 40KHz, 80KHz and 160KHz.')
pbcSpectrumAnalysisFreqMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 1, 1, 5), Unsigned32().clone(5000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcSpectrumAnalysisFreqMin.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisFreqMin.setDescription('The low end of the frequency range being scanned. The lowest legal value, per both the DOCSIS and Euro-DOCSIS standards, is 5MHz.')
pbcSpectrumAnalysisFreqMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 1, 1, 6), Unsigned32().clone(42000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcSpectrumAnalysisFreqMax.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisFreqMax.setDescription('Top end of the frequency range being scanned. For DOCSIS, the maximum is 42MHz and for Euro-DOCSIS it is 65MHz.')
pbcSpectrumAnalysisArraySize = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcSpectrumAnalysisArraySize.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisArraySize.setDescription("This variable holds/specifies the number of scan data tables to be allocated to this particular scan instance. The size of each table and, therefore, the total amount of buffer space required is determined by the other scan parameters. If the agent is unable to allocate that amount of space, a status of 'noResources' will be returned in pbcSpectrumAnalysisCmdStatus following the setting of pbcSpectrumAnalysisEnable. If successful, this becomes the total number of table entries in pbcSpectrumAnalysisArrayIndexTable. A size of '2' is the absolute minimum to permit the agent to fill one table with data points while the management application is 'draining' the other.")
pbcSpectrumAnalysisActiveArray = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcSpectrumAnalysisActiveArray.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisActiveArray.setDescription('Contains the pbcSpectrumAnalysisArrayIndex number of the data table currently being filled with spectral data points.')
pbcSpectrumAnalysisArrayIndexTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 2), )
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayIndexTable.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayIndexTable.setDescription('The table serves as an index, with status, into the pbcSpectrumAnalysisDataTable, thus uniquely identifying all of the data points which constitute one spectral sweep.')
pbcSpectrumAnalysisArrayIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 2, 1), ).setIndexNames((0, "PBC-GENERIC-MIB", "pbcCardIfPortIndex"), (0, "PBC-CMTS-MIB", "pbcSpectrumAnalysisArrayIndex"))
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayIndexEntry.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayIndexEntry.setDescription('An entry in the pbcSpectrumAnalysisArrayIndexTable.')
pbcSpectrumAnalysisArrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayIndex.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayIndex.setDescription('Index number of this data table.')
pbcSpectrumAnalysisArrayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("available", 1), ("scanning", 2), ("scanComplete", 3), ("abort", 4))).clone('available')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayStatus.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayStatus.setDescription("The operational status of this data table. The management application which is reading the spectrum monitoring data should, after reading all the data entries associated with this array (table),set this variable back to 'available'.")
pbcSpectrumAnalysisArrayScanStart = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 2, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayScanStart.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayScanStart.setDescription("The date and time when this table's spectral sweep began.")
pbcSpectrumAnalysisArrayScanStop = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayScanStop.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayScanStop.setDescription("The date and time when this table's spectral sweep was completed or stopped for some other reason.")
pbcSpectrumAnalysisDataTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 3), )
if mibBuilder.loadTexts: pbcSpectrumAnalysisDataTable.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisDataTable.setDescription('The Frequency-Power tuples are stored in this table. The maximum number of elements is determined by the size of the frequency step and the RF range to be scanned and can therefore not exceed 1850.')
pbcSpectrumAnalysisDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 3, 1), ).setIndexNames((0, "PBC-GENERIC-MIB", "pbcCardIfPortIndex"), (0, "PBC-CMTS-MIB", "pbcSpectrumAnalysisArrayIndex"), (0, "PBC-CMTS-MIB", "pbcSpectrumAnalysisFrequency"))
if mibBuilder.loadTexts: pbcSpectrumAnalysisDataEntry.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisDataEntry.setDescription('An entry in the spectrum analysis data table.')
pbcSpectrumAnalysisFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcSpectrumAnalysisFrequency.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisFrequency.setDescription('The frequency that was sampled.')
pbcSpectrumAnalysisPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 3, 1, 2), OneHundredthdBmVPerHz()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcSpectrumAnalysisPower.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisPower.setDescription('Measured power in hundredths of a dBmV/Hz.')
pbcCmtsSpectrumAnalysisNotificationEnables = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 2))
pbcCmtsSpectrumAnalysisNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 2, 1), )
if mibBuilder.loadTexts: pbcCmtsSpectrumAnalysisNotificationTable.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsSpectrumAnalysisNotificationTable.setDescription("Allows specific 'sweep complete' trap recipients to be specified on a per-port basis.")
pbcCmtsSpectrumAnalysisNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 2, 1, 1), ).setIndexNames((0, "PBC-GENERIC-MIB", "pbcCardIfPortIndex"))
if mibBuilder.loadTexts: pbcCmtsSpectrumAnalysisNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsSpectrumAnalysisNotificationEntry.setDescription("Contains the IP address of the desired trap recipient of 'sweep complete' notifications generated by active spectral monitoring on a specific US port.")
pbcCmtsSpectrumAnalysisEnableSweepNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 2, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsSpectrumAnalysisEnableSweepNotification.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsSpectrumAnalysisEnableSweepNotification.setDescription("True ('1') enables 'sweep complete' notifications so that the receiver knows it may/should retrieve the current spectral data points.")
pbcSweepNotificationRecipient = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcSweepNotificationRecipient.setStatus('current')
if mibBuilder.loadTexts: pbcSweepNotificationRecipient.setDescription("The IP address of the management station wishing to receive the 'sweep complete' notifications from this system for this monitored port.")
pbcSweepNotificationRecipientPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(162)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcSweepNotificationRecipientPort.setStatus('current')
if mibBuilder.loadTexts: pbcSweepNotificationRecipientPort.setDescription('Port that recipient is listening on for notifications.')
pbcCmtsSpectrumAnalysisNotificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("snmpv2c", 1), ("snmpv3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsSpectrumAnalysisNotificationType.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsSpectrumAnalysisNotificationType.setDescription('Selects between SNMPv2c and SNMPv3 traps.')
pbcCmtsSpectrumAnalysisNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 3))
pbcCmtsSpectrumAnalysisNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 3, 1))
pbcCardIfPortIndexID = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pbcCardIfPortIndexID.setStatus('current')
if mibBuilder.loadTexts: pbcCardIfPortIndexID.setDescription('Instance of the pbcCardIfPortIndex to be bound with the Trap/Notify PDU.')
pbcSpectrumAnalysisArrayIndexID = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 3, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayIndexID.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayIndexID.setDescription('Instance of the pbcSpectrumAnalysisArrayIndex to be bound with the Trap/Notify PDU.')
pbcSpectrumAnalysisArrayStatusID = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 3, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayStatusID.setStatus('current')
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayStatusID.setDescription('Instance of the pbcSpectrumAnalysisArrayStatus to be bound with the Trap/Notify PDU.')
pbcCmtsSpectrumAnalysisSweepComplete = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 3, 1, 1)).setObjects(("PBC-CMTS-MIB", "pbcSpectrumAnalysisArrayIndexID"), ("PBC-CMTS-MIB", "pbcCardIfPortIndexID"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisArrayStatusID"))
if mibBuilder.loadTexts: pbcCmtsSpectrumAnalysisSweepComplete.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsSpectrumAnalysisSweepComplete.setDescription('Denotes the conclusion, with status and data table identification, of an RF sweep operation.')
pbcCmtsNotificationManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3))
pbcCmtsEventsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsEventsEnable.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsEventsEnable.setDescription('Enables or disables vendor specific event generation.')
pbcCmtsNotificationsControl = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 2), Bits().clone(namedValues=NamedValues(("envMon", 0), ("chassis", 1), ("software", 2), ("access", 3), ("config", 4), ("dataPath", 5), ("rfInterface", 6), ("flapList", 7), ("debug", 8), ("cmStateChange", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsNotificationsControl.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsNotificationsControl.setDescription("A '1' in a given bit position enables that class of notifications.")
pbcCmtsSystemNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3))
pbcCmtsEnvMonNotification = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3, 1)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: pbcCmtsEnvMonNotification.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsEnvMonNotification.setDescription('Notifications generated by environmental monitoring.')
pbcCmtsChassisNotification = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3, 2)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: pbcCmtsChassisNotification.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsChassisNotification.setDescription('Chassis-related notifications.')
pbcCmtsSoftwareNotification = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3, 3)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: pbcCmtsSoftwareNotification.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsSoftwareNotification.setDescription('Notifications from the software management system.')
pbcCmtsAccessNotification = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3, 4)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: pbcCmtsAccessNotification.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsAccessNotification.setDescription('Access-related notifications.')
pbcCmtsConfigNotification = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3, 5)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: pbcCmtsConfigNotification.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsConfigNotification.setDescription('Notifications related to configuration changes.')
pbcCmtsDataPathNotification = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3, 6)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: pbcCmtsDataPathNotification.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsDataPathNotification.setDescription('Notifications related to datapath events.')
pbcCmtsRfInterfaceNotification = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3, 7)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: pbcCmtsRfInterfaceNotification.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsRfInterfaceNotification.setDescription('Notifications related to datapath events.')
pbcCmtsFlapListNotification = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3, 8)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: pbcCmtsFlapListNotification.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsFlapListNotification.setDescription('Notifications related to datapath events.')
pbcCmtsDebugNotification = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3, 9)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: pbcCmtsDebugNotification.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsDebugNotification.setDescription('Notifications generated for internal debugging. This can be enabled by setting debug class of CMTS notifications.')
pbcCmtsCmStateChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3, 10)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: pbcCmtsCmStateChangeNotification.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsCmStateChangeNotification.setDescription('Notifications generated to track MODEM state. This event can be enabled by setting cmStateChange bit of the CMTS Notification Control.')
pbcCmtsModemEventsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 4), Bits().clone(namedValues=NamedValues(("deRanging", 0), ("registration", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsModemEventsEnable.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsModemEventsEnable.setDescription('Enables or disables Modem De-Ranging and Registration event Generation.')
pbcCmtsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 4))
pbcCmtsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 4, 1))
pbcCmtsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5987, 2, 2, 4, 1, 1)).setObjects(("PBC-CMTS-MIB", "pbcCmtsIfDownstreamNumEntries"), ("PBC-CMTS-MIB", "pbcCmtsIfDownstreamIfTxPower"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamNumEntries"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamPort"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamOperMode"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamCmdRcvdPwr"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamPowerLevel"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamHcsErrors"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamCrcErrors"), ("PBC-CMTS-MIB", "pbcCmtsIfMacCmTotal"), ("PBC-CMTS-MIB", "pbcCmtsIfMacCmRangeAborted"), ("PBC-CMTS-MIB", "pbcCmtsIfMacCmRanging"), ("PBC-CMTS-MIB", "pbcCmtsIfMacCmRangingComplete"), ("PBC-CMTS-MIB", "pbcCmtsIfMacCmIpComplete"), ("PBC-CMTS-MIB", "pbcCmtsIfMacCmRegistered"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamCmTotal"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamCmRangeAborted"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamCmRanging"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamCmRangingComplete"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamCmIpComplete"), ("PBC-CMTS-MIB", "pbcCmtsRogueCmMacAddress"), ("PBC-CMTS-MIB", "pbcCmtsRogueCmIpAddress"), ("PBC-CMTS-MIB", "pbcCmtsRogueCmPtr"), ("PBC-CMTS-MIB", "pbcCmtsRogueCmType"), ("PBC-CMTS-MIB", "pbcCmtsRogueCmFirstActive"), ("PBC-CMTS-MIB", "pbcCmtsRogueCmLastActive"), ("PBC-CMTS-MIB", "pbcCmtsCmStatusFirstOnline"), ("PBC-CMTS-MIB", "pbcCmtsCmStatusLastOnline"), ("PBC-CMTS-MIB", "pbcCmtsCmStatusTimesOnline"), ("PBC-CMTS-MIB", "pbcCmtsCmStatusPercentOnline"), ("PBC-CMTS-MIB", "pbcCmtsCmStatusMinOnline"), ("PBC-CMTS-MIB", "pbcCmtsCmStatusMaxOnline"), ("PBC-CMTS-MIB", "pbcCmtsCmStatusAvgOnline"), ("PBC-CMTS-MIB", "pbcCmtsCmStatusMinOffline"), ("PBC-CMTS-MIB", "pbcCmtsCmStatusMaxOffline"), ("PBC-CMTS-MIB", "pbcCmtsCmStatusAvgOffline"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamCmRogue"), ("PBC-CMTS-MIB", "pbcCmtsIfMacCmRogue"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamCER"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamMER"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamCmRegistered"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbcCmtsGroup = pbcCmtsGroup.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsGroup.setDescription('Generic PBC CMTS registrations.')
pbcCableSpectrumManagementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5987, 2, 2, 4, 1, 2)).setObjects(("PBC-CMTS-MIB", "pbcSpectrumAnalysisEnable"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisCmdStatus"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisIntegrationLen"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisFreqStep"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisFreqMin"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisFreqMax"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisArraySize"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisActiveArray"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisArrayIndex"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisArrayStatus"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisFrequency"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisPower"), ("PBC-CMTS-MIB", "pbcCmtsSpectrumAnalysisEnableSweepNotification"), ("PBC-CMTS-MIB", "pbcSweepNotificationRecipient"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisArrayScanStart"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisArrayScanStop"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisArrayIndexID"), ("PBC-CMTS-MIB", "pbcCardIfPortIndexID"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisArrayStatusID"), ("PBC-CMTS-MIB", "pbcCmtsSpectrumAnalysisNotificationType"), ("PBC-CMTS-MIB", "pbcSweepNotificationRecipientPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbcCableSpectrumManagementGroup = pbcCableSpectrumManagementGroup.setStatus('current')
if mibBuilder.loadTexts: pbcCableSpectrumManagementGroup.setDescription('Group of objects implemented in Cable Modem Termination Systems providing Flap List information.')
pbcCmtsNotificationManagementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5987, 2, 2, 4, 1, 3)).setObjects(("PBC-CMTS-MIB", "pbcCmtsModemEventsEnable"), ("PBC-CMTS-MIB", "pbcCmtsNotificationsControl"), ("PBC-CMTS-MIB", "pbcCmtsEventsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbcCmtsNotificationManagementGroup = pbcCmtsNotificationManagementGroup.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsNotificationManagementGroup.setDescription('Group of objects associated with vendor-specific notification control.')
pbcCmtsNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5987, 2, 2, 4, 1, 4)).setObjects(("PBC-CMTS-MIB", "pbcCmtsEnvMonNotification"), ("PBC-CMTS-MIB", "pbcCmtsSpectrumAnalysisSweepComplete"), ("PBC-CMTS-MIB", "pbcCmtsChassisNotification"), ("PBC-CMTS-MIB", "pbcCmtsSoftwareNotification"), ("PBC-CMTS-MIB", "pbcCmtsAccessNotification"), ("PBC-CMTS-MIB", "pbcCmtsCmStateChangeNotification"), ("PBC-CMTS-MIB", "pbcCmtsRfInterfaceNotification"), ("PBC-CMTS-MIB", "pbcCmtsFlapListNotification"), ("PBC-CMTS-MIB", "pbcCmtsDataPathNotification"), ("PBC-CMTS-MIB", "pbcCmtsConfigNotification"), ("PBC-CMTS-MIB", "pbcCmtsDebugNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbcCmtsNotificationGroup = pbcCmtsNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsNotificationGroup.setDescription('Generic PBC Notifications.')
pbcFlapListManagementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5987, 2, 2, 4, 1, 5)).setObjects(("PBC-CMTS-MIB", "pbcCmtsFlapListAgeMinutes"), ("PBC-CMTS-MIB", "pbcCmtsFlapListIMRetryInterval"), ("PBC-CMTS-MIB", "pbcCmtsFlapListCERThreshold"), ("PBC-CMTS-MIB", "pbcCmtsFlapListMERThreshold"), ("PBC-CMTS-MIB", "pbcCmtsFlapListQPSKSNRThreshold"), ("PBC-CMTS-MIB", "pbcCmtsFlapListQAM16SNRThreshold"), ("PBC-CMTS-MIB", "pbcCmtsFlapListPowerAdjustThreshold"), ("PBC-CMTS-MIB", "pbcCmtsFlapListSMMissThreshold"), ("PBC-CMTS-MIB", "pbcCmtsFlapListFreqThreshold"), ("PBC-CMTS-MIB", "pbcCmtsFlapListSize"), ("PBC-CMTS-MIB", "pbcUsFlapListControlIMRetryInterval"), ("PBC-CMTS-MIB", "pbcUsFlapListControlCERThreshold"), ("PBC-CMTS-MIB", "pbcUsFlapListControlMERThreshold"), ("PBC-CMTS-MIB", "pbcUsFlapListControlQPSKSNRThreshold"), ("PBC-CMTS-MIB", "pbcUsFlapListControlQAM16SNRThreshold"), ("PBC-CMTS-MIB", "pbcUsFlapListControlPowerAdjustThreshold"), ("PBC-CMTS-MIB", "pbcUsFlapListControlSMMissThreshold"), ("PBC-CMTS-MIB", "pbcUsFlapListControlFreqThreshold"), ("PBC-CMTS-MIB", "pbcCmtsFlapListMacAddr"), ("PBC-CMTS-MIB", "pbcCmtsFlapListUpstreamIfIndex"), ("PBC-CMTS-MIB", "pbcCmtsFlapListDownstreamIfIndex"), ("PBC-CMTS-MIB", "pbcCmtsFlapListFlapCount"), ("PBC-CMTS-MIB", "pbcCmtsFlapListFlapCause"), ("PBC-CMTS-MIB", "pbcCmtsFlapListFreqDrift"), ("PBC-CMTS-MIB", "pbcCmtsFlapListEventsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbcFlapListManagementGroup = pbcFlapListManagementGroup.setStatus('current')
if mibBuilder.loadTexts: pbcFlapListManagementGroup.setDescription('Description.')
pbcCmtsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 4, 2))
pbcCmtsBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5987, 2, 2, 4, 2, 1)).setObjects(("PBC-CMTS-MIB", "pbcCmtsGroup"), ("PBC-CMTS-MIB", "pbcCableSpectrumManagementGroup"), ("PBC-CMTS-MIB", "pbcCmtsNotificationGroup"), ("PBC-CMTS-MIB", "pbcFlapListManagementGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbcCmtsBasicCompliance = pbcCmtsBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsBasicCompliance.setDescription('Object groups which must be supported.')
pbcFlapListManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5))
pbcFlapListObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1))
pbcCmtsFlapListAgeMinutes = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(1440)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListAgeMinutes.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsFlapListAgeMinutes.setDescription('Aging time in minutes (From 1 minute to 60 days).')
pbcCmtsFlapListIMRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListIMRetryInterval.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsFlapListIMRetryInterval.setDescription('Duration between two consecutive IM Retries that is considered a flap event in seconds.')
pbcCmtsFlapListCERThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListCERThreshold.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsFlapListCERThreshold.setDescription('CER Threshold 1 in millionth.')
pbcCmtsFlapListMERThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 4), TenthdB().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListMERThreshold.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsFlapListMERThreshold.setDescription('MER Threshold (in tenth of dB).')
pbcCmtsFlapListQPSKSNRThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 5), TenthdB().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListQPSKSNRThreshold.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsFlapListQPSKSNRThreshold.setDescription('QPSK SNR Threshold (in tenth of dB).')
pbcCmtsFlapListQAM16SNRThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 6), TenthdB().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListQAM16SNRThreshold.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsFlapListQAM16SNRThreshold.setDescription('QAM16 SNR Threshold (in tenth of dB).')
pbcCmtsFlapListPowerAdjustThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 7), TenthdB().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListPowerAdjustThreshold.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsFlapListPowerAdjustThreshold.setDescription('Power Adjust Threshold (in tenth of a dB).')
pbcCmtsFlapListSMMissThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListSMMissThreshold.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsFlapListSMMissThreshold.setDescription('SM Miss Quantity Threshold.')
pbcCmtsFlapListFreqThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListFreqThreshold.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsFlapListFreqThreshold.setDescription('Upstream Frequency drift Threshold (in Hertz). A non zero value of pbcCmtsUsFlapListFreqThreshold overrides this value for an upstream channel.')
pbcCmtsFlapListSize = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192)).clone(8192)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListSize.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsFlapListSize.setDescription('Maximum number of entries in the Flap List Table.')
pbcUsFlapListControlTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 11), )
if mibBuilder.loadTexts: pbcUsFlapListControlTable.setStatus('current')
if mibBuilder.loadTexts: pbcUsFlapListControlTable.setDescription('Various flap thresholds to be applied per upstream channel.')
pbcUsFlapListControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pbcUsFlapListControlEntry.setStatus('current')
if mibBuilder.loadTexts: pbcUsFlapListControlEntry.setDescription('An entry for every upstream channel in the system.')
pbcUsFlapListControlIMRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcUsFlapListControlIMRetryInterval.setStatus('current')
if mibBuilder.loadTexts: pbcUsFlapListControlIMRetryInterval.setDescription('Duration in seconds between two consecutive IM Retries that is considered a flap event. A non zero value overrides the global pbcCmtsFlapListIMRetryInterval for this upstream channel.')
pbcUsFlapListControlCERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcUsFlapListControlCERThreshold.setStatus('current')
if mibBuilder.loadTexts: pbcUsFlapListControlCERThreshold.setDescription('CER Threshold (in millionth, normalized 0 to 1). A non zero value overrides the global pbcCmtsFlapListCERThreshold for this upstream channel.')
pbcUsFlapListControlMERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 11, 1, 3), TenthdB().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcUsFlapListControlMERThreshold.setStatus('current')
if mibBuilder.loadTexts: pbcUsFlapListControlMERThreshold.setDescription('MER Threshold (in Tenth of a dB). A non zero value overrides the global pbcCmtsFlapListMERThreshold for this upstream channel.')
pbcUsFlapListControlQPSKSNRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 11, 1, 4), TenthdB().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcUsFlapListControlQPSKSNRThreshold.setStatus('current')
if mibBuilder.loadTexts: pbcUsFlapListControlQPSKSNRThreshold.setDescription('QPSK SNR Threshold (in tenth of dB). A non zero value overrides the global pbcCmtsFlapListQPSKSNRThreshold for this upstream channel.')
pbcUsFlapListControlQAM16SNRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 11, 1, 5), TenthdB().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcUsFlapListControlQAM16SNRThreshold.setStatus('current')
if mibBuilder.loadTexts: pbcUsFlapListControlQAM16SNRThreshold.setDescription('QAM16 SNR Threshold (in tenth of dB). A non zero value overrides the global pbcCmtsFlapListQPSKSNRThreshold for this upstream channel.')
pbcUsFlapListControlPowerAdjustThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 11, 1, 6), TenthdB().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcUsFlapListControlPowerAdjustThreshold.setStatus('current')
if mibBuilder.loadTexts: pbcUsFlapListControlPowerAdjustThreshold.setDescription('Power Adjust Threshold (in dB). A non zero value overrides the global pbcCmtsFlapListPowerAdjustThreshold for this upstream channel.')
pbcUsFlapListControlSMMissThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcUsFlapListControlSMMissThreshold.setStatus('current')
if mibBuilder.loadTexts: pbcUsFlapListControlSMMissThreshold.setDescription('SM Miss Quantity Threshold. A non zero value overrides the global pbcCmtsFlapListSMMissThreshold for this upstream channel.')
pbcUsFlapListControlFreqThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcUsFlapListControlFreqThreshold.setStatus('current')
if mibBuilder.loadTexts: pbcUsFlapListControlFreqThreshold.setDescription('Upstream Frequency drift Threshold (in Hertz). A non zero value overrides the global pbcCmtsFlapListFreqThreshold for this upstream channel.')
pbcCmtsFlapListTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 12), )
if mibBuilder.loadTexts: pbcCmtsFlapListTable.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsFlapListTable.setDescription('information about the recently flapping cable modems according to the various thresholds set in the pbcCmtsFlapListObjects.')
pbcCmtsFlapListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 12, 1), ).setIndexNames((0, "PBC-CMTS-MIB", "pbcCmtsFlapListMacAddr"))
if mibBuilder.loadTexts: pbcCmtsFlapListEntry.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsFlapListEntry.setDescription('An entry for every Flapping modem in the system.')
pbcCmtsFlapListMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 12, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsFlapListMacAddr.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsFlapListMacAddr.setDescription('MAC address of the Flapping modem.')
pbcCmtsFlapListUpstreamIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 12, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsFlapListUpstreamIfIndex.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsFlapListUpstreamIfIndex.setDescription('Upstream Interface Index of the Flapping modem.')
pbcCmtsFlapListDownstreamIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 12, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsFlapListDownstreamIfIndex.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsFlapListDownstreamIfIndex.setDescription('Downstream Interface Index of the Flapping modem.')
pbcCmtsFlapListFlapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsFlapListFlapCount.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsFlapListFlapCount.setDescription('Number of times the modem has Flapped.')
pbcCmtsFlapListFlapCause = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("imRetry", 1), ("cer", 2), ("mer", 3), ("snrQpsk", 4), ("snrQam16", 5), ("powerAdjust", 6), ("smMiss", 7), ("freqDrift", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsFlapListFlapCause.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsFlapListFlapCause.setDescription('Last flap cause for the modem.')
pbcCmtsFlapListFreqDrift = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 12, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsFlapListFreqDrift.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsFlapListFreqDrift.setDescription('Amount of Frequency Drift in case pbcCmtsFlapListFlapCause is freqDrift (8). Form othe flap causes, this value should be 0.')
pbcCmtsFlapListEventsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListEventsEnable.setStatus('current')
if mibBuilder.loadTexts: pbcCmtsFlapListEventsEnable.setDescription('Enables or disables the Flap List event generation.')
pbcG10CMTS = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 1001))
pbcG1CMTS = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 1002))
mibBuilder.exportSymbols("PBC-CMTS-MIB", pbcCmtsIfUpstreamOperMode=pbcCmtsIfUpstreamOperMode, pbcCmtsIfUpstreamCmRanging=pbcCmtsIfUpstreamCmRanging, pbcCmtsIfUpstreamPort=pbcCmtsIfUpstreamPort, pbcSpectrumAnalysisActiveArray=pbcSpectrumAnalysisActiveArray, pbcCmtsBasicCompliance=pbcCmtsBasicCompliance, pbcCmtsSpectrumAnalysisObjects=pbcCmtsSpectrumAnalysisObjects, pbcCmtsCmStatusMinOffline=pbcCmtsCmStatusMinOffline, OneHundredthdBmVPerHz=OneHundredthdBmVPerHz, pbcSpectrumAnalysisEnable=pbcSpectrumAnalysisEnable, pbcCmtsIfMacCmTotal=pbcCmtsIfMacCmTotal, pbcCmtsFlapListFlapCause=pbcCmtsFlapListFlapCause, pbcCmtsCompliances=pbcCmtsCompliances, pbcUsFlapListControlPowerAdjustThreshold=pbcUsFlapListControlPowerAdjustThreshold, pbcCmtsCmMgmt=pbcCmtsCmMgmt, pbcCmtsFlapListEntry=pbcCmtsFlapListEntry, pbcCmtsCmStatusMaxOffline=pbcCmtsCmStatusMaxOffline, pbcCmtsFlapListCERThreshold=pbcCmtsFlapListCERThreshold, pbcSpectrumAnalysisArrayIndexTable=pbcSpectrumAnalysisArrayIndexTable, PYSNMP_MODULE_ID=pbcCmtsMib, pbcCmtsIfUpstreamChannelEntry=pbcCmtsIfUpstreamChannelEntry, pbcCmtsIfDownstreamChannelTable=pbcCmtsIfDownstreamChannelTable, pbcCmtsCmStatusLastOnline=pbcCmtsCmStatusLastOnline, pbcCmtsFlapListUpstreamIfIndex=pbcCmtsFlapListUpstreamIfIndex, pbcCmtsGroups=pbcCmtsGroups, pbcSpectrumAnalysisArrayScanStop=pbcSpectrumAnalysisArrayScanStop, pbcSpectrumAnalysisArrayStatus=pbcSpectrumAnalysisArrayStatus, pbcSpectrumAnalysisArrayStatusID=pbcSpectrumAnalysisArrayStatusID, pbcSpectrumAnalysisArraySize=pbcSpectrumAnalysisArraySize, pbcCmtsIfMacCmIpComplete=pbcCmtsIfMacCmIpComplete, pbcCmtsIfUpstreamPowerLevel=pbcCmtsIfUpstreamPowerLevel, pbcCmtsIfUpstreamCrcErrors=pbcCmtsIfUpstreamCrcErrors, pbcCmtsIfUpstreamNumEntries=pbcCmtsIfUpstreamNumEntries, pbcSweepNotificationRecipientPort=pbcSweepNotificationRecipientPort, pbcCmtsRogueCmPtr=pbcCmtsRogueCmPtr, pbcCmtsRogueCmTable=pbcCmtsRogueCmTable, pbcUsFlapListControlEntry=pbcUsFlapListControlEntry, pbcSpectrumAnalysisCmdStatus=pbcSpectrumAnalysisCmdStatus, pbcCmtsIfUpstreamCER=pbcCmtsIfUpstreamCER, pbcCmtsIfMacCmRegistered=pbcCmtsIfMacCmRegistered, pbcCmtsSpectrumAnalysisMgmt=pbcCmtsSpectrumAnalysisMgmt, pbcCmtsSystemNotifications=pbcCmtsSystemNotifications, pbcCmtsCmStatusPercentOnline=pbcCmtsCmStatusPercentOnline, pbcCmtsIfUpstreamCmRangingComplete=pbcCmtsIfUpstreamCmRangingComplete, pbcCmtsCmStatusMaxOnline=pbcCmtsCmStatusMaxOnline, pbcCmtsAccessNotification=pbcCmtsAccessNotification, pbcSpectrumAnalysisArrayScanStart=pbcSpectrumAnalysisArrayScanStart, pbcCmtsSpectrumAnalysisNotificationTable=pbcCmtsSpectrumAnalysisNotificationTable, TenthdB=TenthdB, pbcCmtsFlapListIMRetryInterval=pbcCmtsFlapListIMRetryInterval, pbcCmtsRogueCmType=pbcCmtsRogueCmType, pbcCmtsFlapListMERThreshold=pbcCmtsFlapListMERThreshold, pbcCmtsFlapListSMMissThreshold=pbcCmtsFlapListSMMissThreshold, pbcCmtsIfMacEntry=pbcCmtsIfMacEntry, pbcCmtsFlapListQPSKSNRThreshold=pbcCmtsFlapListQPSKSNRThreshold, pbcCmtsEventsEnable=pbcCmtsEventsEnable, pbcCmtsRogueCmMacAddress=pbcCmtsRogueCmMacAddress, pbcCmtsIfUpstreamCmdRcvdPwr=pbcCmtsIfUpstreamCmdRcvdPwr, pbcCmtsNotificationManagementGroup=pbcCmtsNotificationManagementGroup, pbcCmtsCmStatusTable=pbcCmtsCmStatusTable, pbcUsFlapListControlIMRetryInterval=pbcUsFlapListControlIMRetryInterval, pbcUsFlapListControlQAM16SNRThreshold=pbcUsFlapListControlQAM16SNRThreshold, pbcCmtsSpectrumAnalysisSweepComplete=pbcCmtsSpectrumAnalysisSweepComplete, pbcCmtsSpectrumAnalysisNotificationPrefix=pbcCmtsSpectrumAnalysisNotificationPrefix, pbcCmtsIfUpstreamMER=pbcCmtsIfUpstreamMER, pbcCmtsDebugNotification=pbcCmtsDebugNotification, pbcCmtsFlapListDownstreamIfIndex=pbcCmtsFlapListDownstreamIfIndex, pbcCmtsIfDownstreamIfTxPower=pbcCmtsIfDownstreamIfTxPower, pbcSpectrumAnalysisFrequency=pbcSpectrumAnalysisFrequency, pbcCmtsFlapListNotification=pbcCmtsFlapListNotification, pbcCmtsConfigNotification=pbcCmtsConfigNotification, pbcFlapListManagementGroup=pbcFlapListManagementGroup, pbcCmtsRogueCmLastActive=pbcCmtsRogueCmLastActive, pbcUsFlapListControlSMMissThreshold=pbcUsFlapListControlSMMissThreshold, pbcCmtsIfUpstreamChannelTable=pbcCmtsIfUpstreamChannelTable, pbcUsFlapListControlTable=pbcUsFlapListControlTable, pbcSpectrumAnalysisArrayIndexEntry=pbcSpectrumAnalysisArrayIndexEntry, pbcCmtsSpectrumAnalysisNotificationType=pbcCmtsSpectrumAnalysisNotificationType, pbcCmtsCmStatusAvgOnline=pbcCmtsCmStatusAvgOnline, pbcCmtsIfUpstreamCmIpComplete=pbcCmtsIfUpstreamCmIpComplete, pbcFlapListManagement=pbcFlapListManagement, pbcCmtsFlapListPowerAdjustThreshold=pbcCmtsFlapListPowerAdjustThreshold, pbcCmtsRogueCmFirstActive=pbcCmtsRogueCmFirstActive, pbcCmtsRogueCmIpAddress=pbcCmtsRogueCmIpAddress, TenthdBmV=TenthdBmV, pbcCmtsNotificationsControl=pbcCmtsNotificationsControl, pbcCmtsFlapListEventsEnable=pbcCmtsFlapListEventsEnable, pbcMacMgmt=pbcMacMgmt, pbcCmtsIfMacCmRangeAborted=pbcCmtsIfMacCmRangeAborted, pbcCmtsIfMacCmRangingComplete=pbcCmtsIfMacCmRangingComplete, pbcCmtsIfMibExtendedObjects=pbcCmtsIfMibExtendedObjects, pbcCmtsCmStatusEntry=pbcCmtsCmStatusEntry, pbcUsFlapListControlFreqThreshold=pbcUsFlapListControlFreqThreshold, pbcCmtsCmStatusTimesOnline=pbcCmtsCmStatusTimesOnline, pbcDownStreamMgmt=pbcDownStreamMgmt, pbcCmtsFlapListMacAddr=pbcCmtsFlapListMacAddr, pbcUsFlapListControlMERThreshold=pbcUsFlapListControlMERThreshold, pbcCmtsIfUpstreamHcsErrors=pbcCmtsIfUpstreamHcsErrors, pbcSpectrumAnalysisArrayIndex=pbcSpectrumAnalysisArrayIndex, pbcCmtsCmStateChangeNotification=pbcCmtsCmStateChangeNotification, pbcCmtsFlapListAgeMinutes=pbcCmtsFlapListAgeMinutes, pbcCableSpectrumManagementGroup=pbcCableSpectrumManagementGroup, pbcCmtsSpectrumAnalysisEnableSweepNotification=pbcCmtsSpectrumAnalysisEnableSweepNotification, pbcGeneral=pbcGeneral, pbcUpStreamMgmt=pbcUpStreamMgmt, pbcCmtsIfMacCmRanging=pbcCmtsIfMacCmRanging, pbcCmtsIfUpstreamCmRegistered=pbcCmtsIfUpstreamCmRegistered, pbcG1CMTS=pbcG1CMTS, pbcCmtsGroup=pbcCmtsGroup, pbcCmtsFlapListSize=pbcCmtsFlapListSize, pbcSpectrumAnalysisFreqMax=pbcSpectrumAnalysisFreqMax, pbcCmtsRogueCmEntry=pbcCmtsRogueCmEntry, pbcCmtsIfDownstreamNumEntries=pbcCmtsIfDownstreamNumEntries, pbcCmtsIfDownstreamChannelEntry=pbcCmtsIfDownstreamChannelEntry, pbcCmtsSpectrumAnalysisNotificationEntry=pbcCmtsSpectrumAnalysisNotificationEntry, pbcCmtsCableSpectrumManagement=pbcCmtsCableSpectrumManagement, pbcCmtsCmStatusAvgOffline=pbcCmtsCmStatusAvgOffline, pbcSpectrumAnalysisRFInputTable=pbcSpectrumAnalysisRFInputTable, pbcSweepNotificationRecipient=pbcSweepNotificationRecipient, pbcSpectrumAnalysisDataTable=pbcSpectrumAnalysisDataTable, pbcCmtsConformance=pbcCmtsConformance, pbcUsFlapListControlCERThreshold=pbcUsFlapListControlCERThreshold, pbcCmtsSpectrumAnalysisNotifications=pbcCmtsSpectrumAnalysisNotifications, pbcCmtsIfUpstreamCmTotal=pbcCmtsIfUpstreamCmTotal, pbcCmtsNotificationGroup=pbcCmtsNotificationGroup, pbcCmtsEnvMonNotification=pbcCmtsEnvMonNotification, pbcSpectrumAnalysisFreqStep=pbcSpectrumAnalysisFreqStep, pbcCmtsCmStatusMinOnline=pbcCmtsCmStatusMinOnline, pbcCmtsSoftwareNotification=pbcCmtsSoftwareNotification, pbcUsFlapListControlQPSKSNRThreshold=pbcUsFlapListControlQPSKSNRThreshold, pbcCardIfPortIndexID=pbcCardIfPortIndexID, pbcCmtsIfUpstreamCmRogue=pbcCmtsIfUpstreamCmRogue, pbcCmtsNotificationManagement=pbcCmtsNotificationManagement, pbcSpectrumAnalysisFreqMin=pbcSpectrumAnalysisFreqMin, pbcCmtsChassisNotification=pbcCmtsChassisNotification, pbcCmtsDataPathNotification=pbcCmtsDataPathNotification, pbcCmtsRfInterfaceNotification=pbcCmtsRfInterfaceNotification, pbcCmts=pbcCmts, pbcSpectrumAnalysisIntegrationLen=pbcSpectrumAnalysisIntegrationLen, pbcCmtsFlapListFreqDrift=pbcCmtsFlapListFreqDrift, pbcCmtsSpectrumAnalysisNotificationEnables=pbcCmtsSpectrumAnalysisNotificationEnables, pbcCmtsIfUpstreamCmRangeAborted=pbcCmtsIfUpstreamCmRangeAborted, pbcG10CMTS=pbcG10CMTS, pbcSpectrumAnalysisDataEntry=pbcSpectrumAnalysisDataEntry, pbcSpectrumAnalysisArrayIndexID=pbcSpectrumAnalysisArrayIndexID, pbcCmtsIfMacCmRogue=pbcCmtsIfMacCmRogue, pbcCmtsFlapListQAM16SNRThreshold=pbcCmtsFlapListQAM16SNRThreshold, pbcSpectrumAnalysisPower=pbcSpectrumAnalysisPower, pbcSpectrumAnalysisRFInputEntry=pbcSpectrumAnalysisRFInputEntry, pbcCmtsCmStatusFirstOnline=pbcCmtsCmStatusFirstOnline, pbcCmtsModemEventsEnable=pbcCmtsModemEventsEnable, pbcCmtsIfMacTable=pbcCmtsIfMacTable, pbcCmtsMib=pbcCmtsMib, pbcFlapListObjects=pbcFlapListObjects, pbcCmtsFlapListFreqThreshold=pbcCmtsFlapListFreqThreshold, pbcCmtsFlapListFlapCount=pbcCmtsFlapListFlapCount, pbcCmtsFlapListTable=pbcCmtsFlapListTable)
