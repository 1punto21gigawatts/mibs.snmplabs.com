#
# PySNMP MIB module HPN-ICF-TRANSCEIVER-INFO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-TRANSCEIVER-INFO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:41:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, NotificationType, ObjectIdentity, IpAddress, Integer32, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, TimeTicks, Counter64, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "ObjectIdentity", "IpAddress", "Integer32", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "TimeTicks", "Counter64", "Bits", "Counter32")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
hpnicfTransceiver = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70))
hpnicfTransceiver.setRevisions(('2013-07-23 16:50', '2009-12-29 16:50',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfTransceiver.setRevisionsDescriptions((' Add hpnicfTransceiverChannelTable.', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hpnicfTransceiver.setLastUpdated('201307231650Z')
if mibBuilder.loadTexts: hpnicfTransceiver.setOrganization('')
if mibBuilder.loadTexts: hpnicfTransceiver.setContactInfo('')
if mibBuilder.loadTexts: hpnicfTransceiver.setDescription('The objects in this MIB module are used to display the information of transceiver on interface.')
hpnicfTransceiverInfoAdm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1))
hpnicfTransceiverInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1), )
if mibBuilder.loadTexts: hpnicfTransceiverInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverInfoTable.setDescription('This table show the information of transceiver on interface.')
hpnicfTransceiverInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfTransceiverInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverInfoEntry.setDescription('The entry of the hpnicfTransceiverInfoTable.')
hpnicfTransceiverHardwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverHardwareType.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverHardwareType.setDescription('Hardware type of the interface, such as SM(single mode).')
hpnicfTransceiverType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverType.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverType.setDescription('Type of the interface, such as SFP/XFP/GBIC.')
hpnicfTransceiverWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverWaveLength.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverWaveLength.setDescription('Wave length of the interface, measured in nanometer.')
hpnicfTransceiverVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverVendorName.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverVendorName.setDescription('Vendor name of the interface.')
hpnicfTransceiverSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverSerialNumber.setDescription('Serial number of the interface.')
hpnicfTransceiverFiberDiameterType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 65535))).clone(namedValues=NamedValues(("fiber9", 1), ("fiber50", 2), ("fiber625", 3), ("copper", 4), ("unknown", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverFiberDiameterType.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverFiberDiameterType.setDescription('The diameter of the fiber, measured in micron. fiber9 - 9 micron multi-mode fiber fiber50 - 50 micron multi-mode fiber fiber625 - 62.5 micron multi-mode fiber copper - copper cable.')
hpnicfTransceiverTransferDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverTransferDistance.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverTransferDistance.setDescription('The maximal distance which the interface could transmit, measured in meter.')
hpnicfTransceiverDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverDiagnostic.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverDiagnostic.setDescription('Indicating the digital diagnostic monitoring function .')
hpnicfTransceiverCurTXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverCurTXPower.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverCurTXPower.setDescription('Indicating the current transmitted power . The unit is in hundredths of dBM.')
hpnicfTransceiverMaxTXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverMaxTXPower.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverMaxTXPower.setDescription('Indicating the maximal transmitted power . The unit is in hundredths of dBM.')
hpnicfTransceiverMinTXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverMinTXPower.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverMinTXPower.setDescription('Indicating the minimal transmitted power . The unit is in hundredths of dBM.')
hpnicfTransceiverCurRXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverCurRXPower.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverCurRXPower.setDescription('Indicating the current received power . The unit is in hundredths of dBM.')
hpnicfTransceiverMaxRXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverMaxRXPower.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverMaxRXPower.setDescription('Indicating the maximal received power . The unit is in hundredths of dBM.')
hpnicfTransceiverMinRXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverMinRXPower.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverMinRXPower.setDescription('Indicating the minimal received power . The unit is in hundredths of dBM.')
hpnicfTransceiverTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverTemperature.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverTemperature.setDescription('Indicating the current temperature. The unit is Celsius centigrade.')
hpnicfTransceiverVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverVoltage.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverVoltage.setDescription('Indicating the current voltage . The unit is in hundredths of V')
hpnicfTransceiverBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverBiasCurrent.setDescription('Indicating the current bias electric current . The unit is in hundredths of mA')
hpnicfTransceiverTempHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverTempHiAlarm.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverTempHiAlarm.setDescription('Transceiver temperature high alarm threshold limit in thousandths of degrees Celsius. As an example: 49120 is 49.120 degrees Celsius.')
hpnicfTransceiverTempLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverTempLoAlarm.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverTempLoAlarm.setDescription('Transceiver temperature low alarm threshold limit in thousandths of degrees Celsius. As an example: 49120 is 49.120 degrees Celsius.')
hpnicfTransceiverTempHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverTempHiWarn.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverTempHiWarn.setDescription('Transceiver temperature high warning threshold limit in thousandths of degrees Celsius. As an example: 49120 is 49.120 degrees Celsius.')
hpnicfTransceiverTempLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverTempLoWarn.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverTempLoWarn.setDescription('Transceiver temperature low warning threshold limit in thousandths of degrees Celsius. As an example: 49120 is 49.120 degrees Celsius.')
hpnicfTransceiverVccHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverVccHiAlarm.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverVccHiAlarm.setDescription('Transceiver VCC high alarm threshold limit in hundreds of microvolts. As an example: 32928 is 3.2928 volts. Returns zero if not supported on the transceiver.')
hpnicfTransceiverVccLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverVccLoAlarm.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverVccLoAlarm.setDescription('Transceiver VCC low alarm threshold limit in hundreds of microvolts. As an example: 32928 is 3.2928 volts. Returns zero if not supported on the transceiver.')
hpnicfTransceiverVccHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverVccHiWarn.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverVccHiWarn.setDescription('Transceiver VCC high warning threshold limit in hundreds of microvolts. As an example: 32928 is 3.2928 volts. Returns zero if not supported on the transceiver.')
hpnicfTransceiverVccLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverVccLoWarn.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverVccLoWarn.setDescription('Transceiver VCC low warning threshold limit in hundreds of microvolts. As an example: 32928 is 3.2928 volts. Returns zero if not supported on the transceiver.')
hpnicfTransceiverBiasHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverBiasHiAlarm.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverBiasHiAlarm.setDescription('Transceiver bias high alarm threshold limit in microamps.')
hpnicfTransceiverBiasLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverBiasLoAlarm.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverBiasLoAlarm.setDescription('Transceiver bias low alarm threshold limit in microamps.')
hpnicfTransceiverBiasHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverBiasHiWarn.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverBiasHiWarn.setDescription('Transceiver bias high warning threshold limit in microamps.')
hpnicfTransceiverBiasLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverBiasLoWarn.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverBiasLoWarn.setDescription('Transceiver bias low warning threshold limit in microamps.')
hpnicfTransceiverPwrOutHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverPwrOutHiAlarm.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverPwrOutHiAlarm.setDescription('Transceiver transmit power high alarm threshold limit in tenths of microwatts. As an example: 10000 is 1 milliwatt.')
hpnicfTransceiverPwrOutLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverPwrOutLoAlarm.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverPwrOutLoAlarm.setDescription('Transceiver transmit power low alarm threshold limit in tenths of microwatts. As an example: 10000 is 1 milliwatt.')
hpnicfTransceiverPwrOutHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverPwrOutHiWarn.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverPwrOutHiWarn.setDescription('Transceiver transmit power high warning threshold limit in tenths of microwatts As an example: 10000 is 1 milliwatt.')
hpnicfTransceiverPwrOutLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverPwrOutLoWarn.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverPwrOutLoWarn.setDescription('Transceiver transmit power low warning threshold limit in tenths of microwatts. As an example: 10000 is 1 milliwatt.')
hpnicfTransceiverRcvPwrHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverRcvPwrHiAlarm.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverRcvPwrHiAlarm.setDescription('Transceiver receive power high alarm threshold limit in tenths of microwatts. As an example: 10000 is 1 milliwatt.')
hpnicfTransceiverRcvPwrLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverRcvPwrLoAlarm.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverRcvPwrLoAlarm.setDescription('Transceiver receive power low alarm threshold limit in tenths of microwatts. As an example: 10000 is 1 milliwatt.')
hpnicfTransceiverRcvPwrHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverRcvPwrHiWarn.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverRcvPwrHiWarn.setDescription('Transceiver receive power high warning threshold limit in tenths of microwatts. As an example: 10000 is 1 milliwatt.')
hpnicfTransceiverRcvPwrLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverRcvPwrLoWarn.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverRcvPwrLoWarn.setDescription('Transceiver receive power low warning threshold limit in tenths of microwatts. As an example: 10000 is 1 milliwatt.')
hpnicfTransceiverErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 1, 1, 38), Bits().clone(namedValues=NamedValues(("xcvrIOError", 0), ("xcvrChecksum", 1), ("xcvrTypeAndPortConfigMismatch", 2), ("xcvrTypeNotSupported", 3), ("wisLocalFault", 4), ("rcvOpticalPowerFault", 5), ("pmapmdReceiverLocalFault", 6), ("pcsReceiveLocalFault", 7), ("phyXSReceiveLocalFault", 8), ("laserBiasCurrentFault", 9), ("laserTemperatureFault", 10), ("laserOutputPowerFault", 11), ("txFault", 12), ("pmapmdTransmitterLocalFault", 13), ("pcsTransmitLocalFault", 14), ("phyXSTransmitLocalFault", 15), ("rxLossOfSignal", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverErrors.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverErrors.setDescription('Bitmask indicating transceiver errors. Transceiver information I/O error(0) Transceiver information checksum error(1) Transceiver type and port configuration mismatch(2) Transceiver type not supported by port hardware(3) WIS local fault(4) Receive optical power fault(5) PMA/PMD receiver local fault(6) PCS receive local fault(7) PHY XS receive local fault(8) Laser bias current fault(9) Laser temperature fault(10) Laser output power fault(11) TX fault(12) PMA/PMD transmitter local fault(13) PCS transmit local fault(14) PHY XS Transmit Local Fault(15) RX loss of signal(16) Unused(17-31)')
hpnicfTransceiverChannelTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 2), )
if mibBuilder.loadTexts: hpnicfTransceiverChannelTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverChannelTable.setDescription('This table provides statistics about transceiver with multi-channel.')
hpnicfTransceiverChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-TRANSCEIVER-INFO-MIB", "hpnicfTransceiverChannelIndex"))
if mibBuilder.loadTexts: hpnicfTransceiverChannelEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverChannelEntry.setDescription('The entry of the hpnicfTransceiverChannelTable.')
hpnicfTransceiverChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfTransceiverChannelIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverChannelIndex.setDescription('The channel index of transceiver. Indicating one channel of the interface.')
hpnicfTransceiverChannelCurTXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverChannelCurTXPower.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverChannelCurTXPower.setDescription('Indicating the current transmission power. The unit is in hundredths of dBM.')
hpnicfTransceiverChannelCurRXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverChannelCurRXPower.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverChannelCurRXPower.setDescription('Indicating the current received power. The unit is in hundredths of dBM.')
hpnicfTransceiverChannelTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverChannelTemperature.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverChannelTemperature.setDescription('Indicating the current temperature. The unit is Celsius centigrade.')
hpnicfTransceiverChannelBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 70, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTransceiverChannelBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: hpnicfTransceiverChannelBiasCurrent.setDescription('Indicating the current bias electric current. The unit is in hundredths of mA.')
mibBuilder.exportSymbols("HPN-ICF-TRANSCEIVER-INFO-MIB", hpnicfTransceiverFiberDiameterType=hpnicfTransceiverFiberDiameterType, hpnicfTransceiverChannelCurRXPower=hpnicfTransceiverChannelCurRXPower, hpnicfTransceiverChannelTemperature=hpnicfTransceiverChannelTemperature, hpnicfTransceiverMaxTXPower=hpnicfTransceiverMaxTXPower, hpnicfTransceiverPwrOutLoAlarm=hpnicfTransceiverPwrOutLoAlarm, hpnicfTransceiverInfoAdm=hpnicfTransceiverInfoAdm, hpnicfTransceiverRcvPwrHiAlarm=hpnicfTransceiverRcvPwrHiAlarm, hpnicfTransceiverChannelEntry=hpnicfTransceiverChannelEntry, hpnicfTransceiverVccHiWarn=hpnicfTransceiverVccHiWarn, hpnicfTransceiverChannelCurTXPower=hpnicfTransceiverChannelCurTXPower, hpnicfTransceiverTemperature=hpnicfTransceiverTemperature, hpnicfTransceiverRcvPwrHiWarn=hpnicfTransceiverRcvPwrHiWarn, hpnicfTransceiverInfoTable=hpnicfTransceiverInfoTable, hpnicfTransceiverInfoEntry=hpnicfTransceiverInfoEntry, hpnicfTransceiverBiasLoWarn=hpnicfTransceiverBiasLoWarn, hpnicfTransceiverSerialNumber=hpnicfTransceiverSerialNumber, hpnicfTransceiverErrors=hpnicfTransceiverErrors, hpnicfTransceiverPwrOutHiAlarm=hpnicfTransceiverPwrOutHiAlarm, hpnicfTransceiverTempLoWarn=hpnicfTransceiverTempLoWarn, hpnicfTransceiverPwrOutLoWarn=hpnicfTransceiverPwrOutLoWarn, hpnicfTransceiverTempLoAlarm=hpnicfTransceiverTempLoAlarm, hpnicfTransceiverTransferDistance=hpnicfTransceiverTransferDistance, hpnicfTransceiverChannelBiasCurrent=hpnicfTransceiverChannelBiasCurrent, hpnicfTransceiverVendorName=hpnicfTransceiverVendorName, PYSNMP_MODULE_ID=hpnicfTransceiver, hpnicfTransceiverTempHiWarn=hpnicfTransceiverTempHiWarn, hpnicfTransceiverBiasHiWarn=hpnicfTransceiverBiasHiWarn, hpnicfTransceiverMinTXPower=hpnicfTransceiverMinTXPower, hpnicfTransceiver=hpnicfTransceiver, hpnicfTransceiverBiasLoAlarm=hpnicfTransceiverBiasLoAlarm, hpnicfTransceiverVoltage=hpnicfTransceiverVoltage, hpnicfTransceiverHardwareType=hpnicfTransceiverHardwareType, hpnicfTransceiverRcvPwrLoWarn=hpnicfTransceiverRcvPwrLoWarn, hpnicfTransceiverMaxRXPower=hpnicfTransceiverMaxRXPower, hpnicfTransceiverWaveLength=hpnicfTransceiverWaveLength, hpnicfTransceiverCurRXPower=hpnicfTransceiverCurRXPower, hpnicfTransceiverBiasHiAlarm=hpnicfTransceiverBiasHiAlarm, hpnicfTransceiverPwrOutHiWarn=hpnicfTransceiverPwrOutHiWarn, hpnicfTransceiverDiagnostic=hpnicfTransceiverDiagnostic, hpnicfTransceiverCurTXPower=hpnicfTransceiverCurTXPower, hpnicfTransceiverBiasCurrent=hpnicfTransceiverBiasCurrent, hpnicfTransceiverRcvPwrLoAlarm=hpnicfTransceiverRcvPwrLoAlarm, hpnicfTransceiverMinRXPower=hpnicfTransceiverMinRXPower, hpnicfTransceiverTempHiAlarm=hpnicfTransceiverTempHiAlarm, hpnicfTransceiverVccLoAlarm=hpnicfTransceiverVccLoAlarm, hpnicfTransceiverVccHiAlarm=hpnicfTransceiverVccHiAlarm, hpnicfTransceiverType=hpnicfTransceiverType, hpnicfTransceiverChannelIndex=hpnicfTransceiverChannelIndex, hpnicfTransceiverVccLoWarn=hpnicfTransceiverVccLoWarn, hpnicfTransceiverChannelTable=hpnicfTransceiverChannelTable)
