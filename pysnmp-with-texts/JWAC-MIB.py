#
# PySNMP MIB module JWAC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JWAC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:01:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, Gauge32, Bits, Unsigned32, MibIdentifier, Counter64, iso, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "Gauge32", "Bits", "Unsigned32", "MibIdentifier", "Counter64", "iso", "NotificationType", "Counter32")
RowStatus, TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "MacAddress")
class VlanId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

swJWACMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 39))
if mibBuilder.loadTexts: swJWACMIB.setLastUpdated('1004220000Z')
if mibBuilder.loadTexts: swJWACMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swJWACMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swJWACMIB.setDescription('The structure of JWAC management for the proprietary enterprise.')
swJWACCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 39, 1))
swJWACInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 39, 2))
swJWACPortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 39, 3))
swJWACMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 39, 4))
swJWACNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 39, 5))
swJWACState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACState.setStatus('current')
if mibBuilder.loadTexts: swJWACState.setDescription('This object enables/disables the JWAC function. JWAC and WAC are mutually exclusive functions. That is, they can not be enabled at the same time. Using the JWAC function, PC users need to pass two stages of authentication. The first stage is to do the authentication with the quarantine server and the second stage is the authentication with the switch. For the second stage, the authentication is similar to WAC, except that there is no port VLAN membership change by JWAC after a host passes authentication. The RADIUS server will share the server configuration defined by the 1X command set. ')
swJWACRedirectState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACRedirectState.setStatus('current')
if mibBuilder.loadTexts: swJWACRedirectState.setDescription('This object enables/disables the JWAC redirect function. When the redirect quarantine_server is enabled, the unauthenticated host will be redirected to the quarantine server when it tries to access a random URL. When the redirect jwac_login_page is enabled, the unauthenticated host will be redirected to the jwac_login_page in the Switch to finish authentication. When redirect is disabled, only access to the quarantine_server and the jwac_login_page from the unauthenticated host are allowed, all other web access will be denied. NOTE: When enabling redirect to the quarantine_server, a quarantine_server must be configured first. ')
swJWACForcibleLogoutState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACForcibleLogoutState.setStatus('current')
if mibBuilder.loadTexts: swJWACForcibleLogoutState.setDescription('This object enables/disables the JWAC forcible_logout function. When forcible_logout is enabled, a PING packet from an authenticated host to the JWAC Switch with TTL=1 will be regarded as a logout request, and the host will move back to the unauthenticated state. ')
swJWACUDPFilteringState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACUDPFilteringState.setStatus('current')
if mibBuilder.loadTexts: swJWACUDPFilteringState.setDescription('This object enables/disables the JWAC udp_filtering function. When udp_filtering is enabled, all UDP and ICMP packets except DHCP and DNS packets from unauthenticated hosts will be dropped. ')
swJWACQuarantineServerMonitorState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACQuarantineServerMonitorState.setStatus('current')
if mibBuilder.loadTexts: swJWACQuarantineServerMonitorState.setDescription('This object enables/disables the JWAC Quarantine Server monitor function. When enabled, the JWAC Switch will monitor the Quarantine Server to ensure the server is okay. If the Switch detects no Quarantine Server, it will redirect all unauthenticated HTTP access attempts to the JWAC Login Page forcibly if the redirect is enabled and the redirect destination is configured to be a Quarantine Server. ')
swJWACQuarantineServerErrorTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACQuarantineServerErrorTimeOut.setStatus('current')
if mibBuilder.loadTexts: swJWACQuarantineServerErrorTimeOut.setDescription('Used to set the Quarantine Server error timeout. When the Quarantine Server monitor is enabled, the JWAC Switch will periodically check if the Quarantine works okay. If the Switch does not receive any response from the Quarantine Server during the configured error timeout, the Switch then regards it as not working properly. ')
swJWACRedirectDestination = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("quarantine_server", 1), ("jwac_login_page", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACRedirectDestination.setStatus('current')
if mibBuilder.loadTexts: swJWACRedirectDestination.setDescription('Specifies the destination before an unauthenticated host is redirected to the Quarantine Server or JWAC login web page. ')
swJWACRedirectDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACRedirectDelayTime.setStatus('current')
if mibBuilder.loadTexts: swJWACRedirectDelayTime.setDescription('Specifies the delay time before an unauthenticated host is redirected to the Quarantine Server or JWAC login web page. The unit of delay_time is seconds. 0 means no delay in the redirect. ')
swJWACVirtualIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACVirtualIpAddr.setStatus('current')
if mibBuilder.loadTexts: swJWACVirtualIpAddr.setDescription('Specifies the JWAC virtual IP address which is used to accept authentication requests from an unauthenticated host. The virtual IP of JWAC is used to accept authentication requests from an unauthenticated host. Only requests sent to this IP will get a correct response. NOTE: This IP does not respond to ARP requests or ICMP packets. ')
swJWACQuarantineServerURL = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACQuarantineServerURL.setStatus('current')
if mibBuilder.loadTexts: swJWACQuarantineServerURL.setDescription('Specifies the JWAC Quarantine Server URL. If the redirect is enabled and the redirect destination is the Quarantine Server, when an unauthenticated host sends the HTTP request packets to a random WEB server, the Switch will handle this HTTP packet and send back a message to the host to allow it access to the Quarantine Server with the configured URL. When the PC is connected to the specified URL, the quarantine server will request the PC user to input the user name and password to complete the authentication process. ')
swJWACSwitchHttpPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACSwitchHttpPortNumber.setStatus('current')
if mibBuilder.loadTexts: swJWACSwitchHttpPortNumber.setDescription('Specifies the TCP port which the JWAC Switch listens to and uses to finish the authenticating process.')
swJWACSwitchHttpProtocol = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("http", 1), ("https", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACSwitchHttpProtocol.setStatus('current')
if mibBuilder.loadTexts: swJWACSwitchHttpProtocol.setDescription('Specifies the protocol JWAC will run on this TCP port.')
swJWACRadiusProtocol = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("local", 1), ("pap", 2), ("chap", 3), ("ms_chap", 4), ("ms_chapv2", 5), ("eap_md5", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACRadiusProtocol.setStatus('current')
if mibBuilder.loadTexts: swJWACRadiusProtocol.setDescription('Specifies the RADIUS protocol used by JWAC to complete a RADIUS authentication.')
swJWACUpdateServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 14), )
if mibBuilder.loadTexts: swJWACUpdateServerTable.setStatus('obsolete')
if mibBuilder.loadTexts: swJWACUpdateServerTable.setDescription('A table that contains the JWAC Update Server information.')
swJWACUpdateServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 14, 1), ).setIndexNames((0, "JWAC-MIB", "swJWACUpdateServerIpAddr"), (0, "JWAC-MIB", "swJWACUpdateServerMask"))
if mibBuilder.loadTexts: swJWACUpdateServerEntry.setStatus('obsolete')
if mibBuilder.loadTexts: swJWACUpdateServerEntry.setDescription('A list of JWAC Update Server information.')
swJWACUpdateServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 14, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACUpdateServerIpAddr.setStatus('obsolete')
if mibBuilder.loadTexts: swJWACUpdateServerIpAddr.setDescription('Specifies the IP address.')
swJWACUpdateServerMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 14, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACUpdateServerMask.setStatus('obsolete')
if mibBuilder.loadTexts: swJWACUpdateServerMask.setDescription('Specifies the IP net mask.')
swJWACUpdateServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 14, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swJWACUpdateServerStatus.setStatus('obsolete')
if mibBuilder.loadTexts: swJWACUpdateServerStatus.setDescription('The status of this entry.')
swJWACAuthenticatePage = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("japanese", 1), ("english", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACAuthenticatePage.setStatus('current')
if mibBuilder.loadTexts: swJWACAuthenticatePage.setDescription('This lets an administrator decide which authentication page to use. japanese: Choose the Japanese page; english: Choose the English page.')
swJWACAuthFailOverState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACAuthFailOverState.setStatus('current')
if mibBuilder.loadTexts: swJWACAuthFailOverState.setDescription("This object enables/disables the web-based authentication auth_failover status of the device. When the authentication failover is enabled, if the RADIUS server's authentication is unreachable, the local database will be used for authentication.")
swJWACRadiusAuthorizeState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACRadiusAuthorizeState.setStatus('current')
if mibBuilder.loadTexts: swJWACRadiusAuthorizeState.setDescription(' Used to enable or disable the acceptance of an authorized configuration. When the authorization is enabled for the JWAC RADIUS, the authorized data assigned by the RADUIS server will be accepted if the global authorization network is enabled.')
swJWACLocalAuthorizeState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACLocalAuthorizeState.setStatus('current')
if mibBuilder.loadTexts: swJWACLocalAuthorizeState.setDescription(' Used to enable or disable the acceptance of an authorized configuration. When the authorization is enabled for the JWAC local, the authorized data assigned by the local database will be accepted. ')
swJWACUpdateSVRTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 19), )
if mibBuilder.loadTexts: swJWACUpdateSVRTable.setStatus('current')
if mibBuilder.loadTexts: swJWACUpdateSVRTable.setDescription('A table that contains JWAC Update Server information.')
swJWACUpdateSVREntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 19, 1), ).setIndexNames((0, "JWAC-MIB", "swJWACUpdateSVRIpAddr"), (0, "JWAC-MIB", "swJWACUpdateSVRMask"), (0, "JWAC-MIB", "swJWACUpdateSVRProtocol"), (0, "JWAC-MIB", "swJWACUpdateSVRPort"))
if mibBuilder.loadTexts: swJWACUpdateSVREntry.setStatus('current')
if mibBuilder.loadTexts: swJWACUpdateSVREntry.setDescription('A list of JWAC Update Server information.')
swJWACUpdateSVRIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 19, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACUpdateSVRIpAddr.setStatus('current')
if mibBuilder.loadTexts: swJWACUpdateSVRIpAddr.setDescription('Specifies the IP address.')
swJWACUpdateSVRMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 19, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACUpdateSVRMask.setStatus('current')
if mibBuilder.loadTexts: swJWACUpdateSVRMask.setDescription('Specifies the IP net mask.')
swJWACUpdateSVRProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACUpdateSVRProtocol.setStatus('current')
if mibBuilder.loadTexts: swJWACUpdateSVRProtocol.setDescription('Specifies the protocol.')
swJWACUpdateSVRPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACUpdateSVRPort.setStatus('current')
if mibBuilder.loadTexts: swJWACUpdateSVRPort.setDescription('Specifies the port, 0 denotes all ports.')
swJWACUpdateSVRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 19, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swJWACUpdateSVRStatus.setStatus('current')
if mibBuilder.loadTexts: swJWACUpdateSVRStatus.setDescription('The status of this entry.')
swJWACUpdateSVRState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACUpdateSVRState.setStatus('current')
if mibBuilder.loadTexts: swJWACUpdateSVRState.setDescription('Specifies the update server ACL state.')
swJWACVirtualIpURL = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 39, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACVirtualIpURL.setStatus('current')
if mibBuilder.loadTexts: swJWACVirtualIpURL.setDescription('Used to set the URL for virtual IP')
swJWACPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 39, 3, 1), )
if mibBuilder.loadTexts: swJWACPortTable.setStatus('current')
if mibBuilder.loadTexts: swJWACPortTable.setDescription('A table that contains JWAC port information.')
swJWACPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 39, 3, 1, 1), ).setIndexNames((0, "JWAC-MIB", "swJWACPortIndex"))
if mibBuilder.loadTexts: swJWACPortEntry.setStatus('current')
if mibBuilder.loadTexts: swJWACPortEntry.setDescription('A list containing JWAC port information.')
swJWACPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACPortIndex.setStatus('current')
if mibBuilder.loadTexts: swJWACPortIndex.setDescription('Specifies the JWAC port number.')
swJWACPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACPortState.setStatus('current')
if mibBuilder.loadTexts: swJWACPortState.setDescription('Specifies the JWAC port state.')
swJWACPortMaxAuthHost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACPortMaxAuthHost.setStatus('current')
if mibBuilder.loadTexts: swJWACPortMaxAuthHost.setDescription('Specifies the maximum number of host process authentication attempts allowed on each port at the same time. The value range is (0..N), the value of N is project dependent.')
swJWACPortAgeingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACPortAgeingTime.setStatus('current')
if mibBuilder.loadTexts: swJWACPortAgeingTime.setDescription('Specifies the time period during which an authenticated host will remain in the authenticated state. 0 indicates the authenticated host will never age out on the port. ')
swJWACPortIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACPortIdleTime.setStatus('current')
if mibBuilder.loadTexts: swJWACPortIdleTime.setDescription('Specifies the idle_time. If there is no traffic during idle_time, the host will be moved back to the unauthenticated state. 0 indicates the idle state of the authenticated host on the port will never be checked. ')
swJWACPortBlockTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACPortBlockTime.setStatus('current')
if mibBuilder.loadTexts: swJWACPortBlockTime.setDescription('Specifies the block_time. If a host fails to pass authentication, it will be blocked for a period specified by the block_time. ')
swJWACPortAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hostbased", 1), ("portbased", 2))).clone('hostbased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACPortAuthMode.setStatus('current')
if mibBuilder.loadTexts: swJWACPortAuthMode.setDescription('Specifies the authentication mode on the special port. The default mode is host based. ')
swJWACHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 1), )
if mibBuilder.loadTexts: swJWACHostTable.setStatus('current')
if mibBuilder.loadTexts: swJWACHostTable.setDescription('A table that contains JWAC client host information.')
swJWACHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 1, 1), ).setIndexNames((0, "JWAC-MIB", "swJWACHostPort"), (0, "JWAC-MIB", "swJWACHostAuthStatus"), (0, "JWAC-MIB", "swJWACHostMACAddr"))
if mibBuilder.loadTexts: swJWACHostEntry.setStatus('current')
if mibBuilder.loadTexts: swJWACHostEntry.setDescription('A list containing JWAC client host information.')
swJWACHostPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACHostPort.setStatus('current')
if mibBuilder.loadTexts: swJWACHostPort.setDescription('Specifies the JWAC host port number.')
swJWACHostAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("authenticated", 1), ("authenticating", 2), ("blocked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACHostAuthStatus.setStatus('current')
if mibBuilder.loadTexts: swJWACHostAuthStatus.setDescription('Specifies the JWAC host authentication state.')
swJWACHostMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACHostMACAddr.setStatus('current')
if mibBuilder.loadTexts: swJWACHostMACAddr.setDescription('Specifies the JWAC host MAC address.')
swJWACHostVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 1, 1, 4), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACHostVID.setStatus('current')
if mibBuilder.loadTexts: swJWACHostVID.setDescription('Specifies the JWAC host VID.')
swJWACHostRemainAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACHostRemainAgeTime.setStatus('current')
if mibBuilder.loadTexts: swJWACHostRemainAgeTime.setDescription('Specifies the remaining JWAC host agetime. 0 indicates the authenticated host on the port will never age out. ')
swJWACHostIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACHostIdleTime.setStatus('current')
if mibBuilder.loadTexts: swJWACHostIdleTime.setDescription('Specifies the JWAC host idle time. 0 indicates the idle state of the authenticated host on the port will never be checked. ')
swJWACHostBlockTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACHostBlockTime.setStatus('current')
if mibBuilder.loadTexts: swJWACHostBlockTime.setDescription('Specifies the JWAC host block time.')
swJWACHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACHostStatus.setStatus('current')
if mibBuilder.loadTexts: swJWACHostStatus.setDescription('Specifies the status of the JWAC host. Setting delete (2) will delete this JWAC host entry. ')
swJWACHostPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACHostPriority.setStatus('current')
if mibBuilder.loadTexts: swJWACHostPriority.setDescription('Specifies the JWAC host priority assigned when passing authentication. -1 indicates the host has no priority. ')
swJWACHostUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACHostUserName.setStatus('current')
if mibBuilder.loadTexts: swJWACHostUserName.setDescription('Specifies the user name who started the authentication process.')
swJWACHostIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACHostIP.setStatus('current')
if mibBuilder.loadTexts: swJWACHostIP.setDescription('Specifies the IP address of the JWAC host, which started the authentication process.')
swJWACPageElementTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 2), )
if mibBuilder.loadTexts: swJWACPageElementTable.setStatus('current')
if mibBuilder.loadTexts: swJWACPageElementTable.setDescription('A table that contains JWAC authentication page information.')
swJWACPageElementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 2, 1), ).setIndexNames((0, "JWAC-MIB", "swJWACPageElementPage"))
if mibBuilder.loadTexts: swJWACPageElementEntry.setStatus('current')
if mibBuilder.loadTexts: swJWACPageElementEntry.setDescription('A list containing JWAC authenticate page information. This allows an administrator to customize the authenticate page.')
swJWACPageElementPage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("japanese", 1), ("english", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACPageElementPage.setStatus('current')
if mibBuilder.loadTexts: swJWACPageElementPage.setDescription('Specifies the JWAC authenticate page.')
swJWACPageElementPageTitle = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACPageElementPageTitle.setStatus('current')
if mibBuilder.loadTexts: swJWACPageElementPageTitle.setDescription('Specifies the JWAC page title of the authenticate page.')
swJWACPageElementLoginWindowTitle = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACPageElementLoginWindowTitle.setStatus('current')
if mibBuilder.loadTexts: swJWACPageElementLoginWindowTitle.setDescription('Specifies the JWAC login window title mapping of the authenticate page.')
swJWACPageElementUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACPageElementUserName.setStatus('current')
if mibBuilder.loadTexts: swJWACPageElementUserName.setDescription('Specifies the JWAC user name mapping of the authenticate page.')
swJWACPageElementPassWord = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACPageElementPassWord.setStatus('current')
if mibBuilder.loadTexts: swJWACPageElementPassWord.setDescription('Specifies the remaining JWAC password mapping of the authenticate page.')
swJWACPageElementLogoutWindowTitle = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACPageElementLogoutWindowTitle.setStatus('current')
if mibBuilder.loadTexts: swJWACPageElementLogoutWindowTitle.setDescription('Specifies the JWAC logout window title mapping of the authenticate page.')
swJWACPageElementNotificationLine1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACPageElementNotificationLine1.setStatus('current')
if mibBuilder.loadTexts: swJWACPageElementNotificationLine1.setDescription('Used to set the notification information of line 1 in web page after successful authentication.')
swJWACPageElementNotificationLine2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACPageElementNotificationLine2.setStatus('current')
if mibBuilder.loadTexts: swJWACPageElementNotificationLine2.setDescription('Used to set the notification information of line 2 in web page after successful authentication.')
swJWACPageElementNotificationLine3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACPageElementNotificationLine3.setStatus('current')
if mibBuilder.loadTexts: swJWACPageElementNotificationLine3.setDescription('Used to set the notification information of line 3 in web page after successful authentication.')
swJWACPageElementNotificationLine4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACPageElementNotificationLine4.setStatus('current')
if mibBuilder.loadTexts: swJWACPageElementNotificationLine4.setDescription('Used to set the notification information of line 4 in web page after successful authentication.')
swJWACPageElementNotificationLine5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACPageElementNotificationLine5.setStatus('current')
if mibBuilder.loadTexts: swJWACPageElementNotificationLine5.setDescription('Used to set the notification information of line 5 in web page after successful authentication.')
swJWACWebAuthUserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 3), )
if mibBuilder.loadTexts: swJWACWebAuthUserTable.setStatus('current')
if mibBuilder.loadTexts: swJWACWebAuthUserTable.setDescription('A table that contains web-based authentication account info.')
swJWACWebAuthUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 3, 1), ).setIndexNames((0, "JWAC-MIB", "swJWACWebAuthUserNameIndex"))
if mibBuilder.loadTexts: swJWACWebAuthUserEntry.setStatus('current')
if mibBuilder.loadTexts: swJWACWebAuthUserEntry.setDescription('A list that contains web-based authentication account info.')
swJWACWebAuthUserNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACWebAuthUserNameIndex.setStatus('current')
if mibBuilder.loadTexts: swJWACWebAuthUserNameIndex.setDescription('This object indicates the username (maximum number of characters is 15).')
swJWACWebAuthUserPWD = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swJWACWebAuthUserPWD.setStatus('current')
if mibBuilder.loadTexts: swJWACWebAuthUserPWD.setDescription('This object indicates the password (maximum number of characters is 15) for this user account. It is write-only.')
swJWACWebAuthUserVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 3, 1, 3), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swJWACWebAuthUserVID.setStatus('current')
if mibBuilder.loadTexts: swJWACWebAuthUserVID.setDescription('This object indicates the VID for this user account.')
swJWACWebAuthUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swJWACWebAuthUserStatus.setStatus('current')
if mibBuilder.loadTexts: swJWACWebAuthUserStatus.setDescription('This object manages this entry.')
swJWACAuthStateTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 4), )
if mibBuilder.loadTexts: swJWACAuthStateTable.setStatus('current')
if mibBuilder.loadTexts: swJWACAuthStateTable.setDescription('This table contains JWAC client host information.')
swJWACAuthStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 4, 1), ).setIndexNames((0, "JWAC-MIB", "swJWACAuthStatePort"), (0, "JWAC-MIB", "swJWACAuthStateOriginalVid"), (0, "JWAC-MIB", "swJWACAuthStateMACAddr"))
if mibBuilder.loadTexts: swJWACAuthStateEntry.setStatus('current')
if mibBuilder.loadTexts: swJWACAuthStateEntry.setDescription('This list contains JWAC client host information.')
swJWACAuthStatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: swJWACAuthStatePort.setStatus('current')
if mibBuilder.loadTexts: swJWACAuthStatePort.setDescription('Specifies the JWAC host port number.')
swJWACAuthStateOriginalVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 4, 1, 2), VlanId())
if mibBuilder.loadTexts: swJWACAuthStateOriginalVid.setStatus('current')
if mibBuilder.loadTexts: swJWACAuthStateOriginalVid.setDescription('Specifies the JWAC host original receive VLAN-ID.')
swJWACAuthStateMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 4, 1, 3), MacAddress())
if mibBuilder.loadTexts: swJWACAuthStateMACAddr.setStatus('current')
if mibBuilder.loadTexts: swJWACAuthStateMACAddr.setDescription('Specifies the JWAC host MAC address.')
swJWACAuthStateAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("authenticated", 1), ("authenticating", 2), ("blocked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACAuthStateAuthStatus.setStatus('current')
if mibBuilder.loadTexts: swJWACAuthStateAuthStatus.setDescription('Specifies the JWAC host authentication state.')
swJWACAuthStateAssignVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 4, 1, 7), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACAuthStateAssignVid.setStatus('current')
if mibBuilder.loadTexts: swJWACAuthStateAssignVid.setDescription('Specifies the JWAC host assign VID.')
swJWACAuthStateAssignPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACAuthStateAssignPriority.setStatus('current')
if mibBuilder.loadTexts: swJWACAuthStateAssignPriority.setDescription('Specifies the JWAC host priority assigned when pass authentication. -1 indicates the host has no priority assigned.')
swJWACAuthStateRemainTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 4, 1, 12), Integer32()).setUnits('minutes/seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACAuthStateRemainTime.setStatus('current')
if mibBuilder.loadTexts: swJWACAuthStateRemainTime.setDescription("Specifies the remaining JWAC host aging time/ block time. When host's authentication state is 'authenticated' in swJWACAuthStateAuthStatus, this object indicates the host's aging time, the units is minutes. When host's authentication state is 'blocked' in swJWACAuthStateAuthStatus, this object indicates the host's block time, the units is seconds. 0 indicates the authenticated host on the port will never age out. ")
swJWACAuthStateIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 4, 1, 14), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACAuthStateIdleTime.setStatus('current')
if mibBuilder.loadTexts: swJWACAuthStateIdleTime.setDescription('Specifies the JWAC host idle time in seconds. 0 indicates the idle state of the authenticated host on the port will never be checked. ')
swJWACAuthStateUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 4, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACAuthStateUserName.setStatus('current')
if mibBuilder.loadTexts: swJWACAuthStateUserName.setDescription('Specifies the user name who starts the authentication process.')
swJWACAuthStateIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 4, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swJWACAuthStateIP.setStatus('current')
if mibBuilder.loadTexts: swJWACAuthStateIP.setDescription('Specifies the IP address of the JWAC host, which starts the authentication process.')
swJWACAuthStateDelAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 39, 4, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swJWACAuthStateDelAction.setStatus('current')
if mibBuilder.loadTexts: swJWACAuthStateDelAction.setDescription('Used to delete the specified authentication entry. Setting delete(2) will delete this JWAC host entry. ')
mibBuilder.exportSymbols("JWAC-MIB", swJWACPortMgmt=swJWACPortMgmt, swJWACAuthStateAssignVid=swJWACAuthStateAssignVid, swJWACRadiusProtocol=swJWACRadiusProtocol, swJWACHostRemainAgeTime=swJWACHostRemainAgeTime, swJWACForcibleLogoutState=swJWACForcibleLogoutState, swJWACHostMACAddr=swJWACHostMACAddr, swJWACHostUserName=swJWACHostUserName, swJWACAuthStateOriginalVid=swJWACAuthStateOriginalVid, swJWACHostPort=swJWACHostPort, PYSNMP_MODULE_ID=swJWACMIB, swJWACPageElementNotificationLine2=swJWACPageElementNotificationLine2, swJWACPageElementTable=swJWACPageElementTable, swJWACAuthStateAuthStatus=swJWACAuthStateAuthStatus, swJWACNotify=swJWACNotify, swJWACRedirectDestination=swJWACRedirectDestination, swJWACPageElementPage=swJWACPageElementPage, swJWACUpdateSVREntry=swJWACUpdateSVREntry, swJWACSwitchHttpProtocol=swJWACSwitchHttpProtocol, swJWACPageElementPageTitle=swJWACPageElementPageTitle, swJWACWebAuthUserTable=swJWACWebAuthUserTable, swJWACPageElementNotificationLine1=swJWACPageElementNotificationLine1, swJWACWebAuthUserVID=swJWACWebAuthUserVID, swJWACSwitchHttpPortNumber=swJWACSwitchHttpPortNumber, swJWACPageElementPassWord=swJWACPageElementPassWord, swJWACInfo=swJWACInfo, swJWACState=swJWACState, swJWACUpdateSVRProtocol=swJWACUpdateSVRProtocol, swJWACWebAuthUserStatus=swJWACWebAuthUserStatus, swJWACAuthStateIdleTime=swJWACAuthStateIdleTime, swJWACAuthStateDelAction=swJWACAuthStateDelAction, swJWACLocalAuthorizeState=swJWACLocalAuthorizeState, swJWACUpdateSVRPort=swJWACUpdateSVRPort, swJWACAuthStateIP=swJWACAuthStateIP, swJWACQuarantineServerURL=swJWACQuarantineServerURL, swJWACVirtualIpAddr=swJWACVirtualIpAddr, swJWACPortIndex=swJWACPortIndex, swJWACVirtualIpURL=swJWACVirtualIpURL, swJWACAuthFailOverState=swJWACAuthFailOverState, swJWACHostTable=swJWACHostTable, swJWACAuthStateUserName=swJWACAuthStateUserName, swJWACHostStatus=swJWACHostStatus, swJWACHostIdleTime=swJWACHostIdleTime, swJWACHostPriority=swJWACHostPriority, swJWACMgmt=swJWACMgmt, swJWACWebAuthUserNameIndex=swJWACWebAuthUserNameIndex, swJWACPageElementEntry=swJWACPageElementEntry, swJWACPortAuthMode=swJWACPortAuthMode, swJWACRadiusAuthorizeState=swJWACRadiusAuthorizeState, swJWACUpdateServerMask=swJWACUpdateServerMask, swJWACPageElementNotificationLine3=swJWACPageElementNotificationLine3, swJWACAuthStateEntry=swJWACAuthStateEntry, swJWACPortTable=swJWACPortTable, swJWACHostVID=swJWACHostVID, swJWACAuthenticatePage=swJWACAuthenticatePage, swJWACUpdateSVRStatus=swJWACUpdateSVRStatus, swJWACUpdateServerIpAddr=swJWACUpdateServerIpAddr, swJWACPortState=swJWACPortState, swJWACAuthStatePort=swJWACAuthStatePort, swJWACAuthStateRemainTime=swJWACAuthStateRemainTime, swJWACUpdateServerEntry=swJWACUpdateServerEntry, swJWACMIB=swJWACMIB, swJWACQuarantineServerErrorTimeOut=swJWACQuarantineServerErrorTimeOut, swJWACHostAuthStatus=swJWACHostAuthStatus, swJWACPageElementNotificationLine4=swJWACPageElementNotificationLine4, swJWACHostEntry=swJWACHostEntry, swJWACUpdateServerTable=swJWACUpdateServerTable, swJWACUpdateSVRState=swJWACUpdateSVRState, swJWACHostIP=swJWACHostIP, swJWACWebAuthUserEntry=swJWACWebAuthUserEntry, swJWACCtrl=swJWACCtrl, swJWACUpdateSVRIpAddr=swJWACUpdateSVRIpAddr, swJWACUpdateServerStatus=swJWACUpdateServerStatus, swJWACPageElementNotificationLine5=swJWACPageElementNotificationLine5, swJWACWebAuthUserPWD=swJWACWebAuthUserPWD, swJWACPortIdleTime=swJWACPortIdleTime, swJWACAuthStateTable=swJWACAuthStateTable, swJWACPageElementLoginWindowTitle=swJWACPageElementLoginWindowTitle, swJWACUpdateSVRTable=swJWACUpdateSVRTable, swJWACUpdateSVRMask=swJWACUpdateSVRMask, swJWACPageElementUserName=swJWACPageElementUserName, swJWACPortEntry=swJWACPortEntry, swJWACRedirectState=swJWACRedirectState, VlanId=VlanId, swJWACPortAgeingTime=swJWACPortAgeingTime, swJWACUDPFilteringState=swJWACUDPFilteringState, swJWACRedirectDelayTime=swJWACRedirectDelayTime, swJWACPageElementLogoutWindowTitle=swJWACPageElementLogoutWindowTitle, swJWACHostBlockTime=swJWACHostBlockTime, swJWACPortBlockTime=swJWACPortBlockTime, swJWACQuarantineServerMonitorState=swJWACQuarantineServerMonitorState, swJWACAuthStateMACAddr=swJWACAuthStateMACAddr, swJWACPortMaxAuthHost=swJWACPortMaxAuthHost, swJWACAuthStateAssignPriority=swJWACAuthStateAssignPriority)
