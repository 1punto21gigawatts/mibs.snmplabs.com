#
# PySNMP MIB module CISCO-SONET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SONET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:12:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndex, ifIndex, ifDescr = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex", "ifDescr")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
IpAddress, Integer32, ObjectIdentity, ModuleIdentity, Counter32, Counter64, TimeTicks, iso, Gauge32, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "ObjectIdentity", "ModuleIdentity", "Counter32", "Counter64", "TimeTicks", "iso", "Gauge32", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
sonetLineCurrentStatus, sonetPathCurrentEntry, sonetVTCurrentStatus, sonetSectionCurrentStatus, sonetPathCurrentStatus = mibBuilder.importSymbols("SONET-MIB", "sonetLineCurrentStatus", "sonetPathCurrentEntry", "sonetVTCurrentStatus", "sonetSectionCurrentStatus", "sonetPathCurrentStatus")
ciscoSonetMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 126))
ciscoSonetMIB.setRevisions(('2003-03-07 00:00', '2002-06-14 00:00', '2002-05-22 00:00', '2001-10-17 00:00', '2000-07-12 00:00', '1999-03-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSonetMIB.setRevisionsDescriptions(('(1) Added enumerations e3(8) and vtStructured(9) in object cspSonetPathPayload. (2) Added table csAu4Tug3Config to configure the VC(Virtual Container) related properties of a TUG-3 within a AU-4 paths.', '(1)Added following objects to cspConfigTable: cspTributaryMappingType cspSignallingTransportMode cspTributaryGroupingType (2)Added an optional ciscoSonetPathConfMIBGroup1 for the above objects.', '(1) Added cspConfigTable which augments sonetPathCurrentTable. (2) Added the Notifications - ciscoSonetSectionStatusChange, ciscoSonetLineStatusChange, ciscoSonetPathStatusChange, ciscoSonetVTStatusChange and the object - csNotificationsEnabled. (3) Changed the Module-Compliance and made ciscoSonetStatsMIBGroup and ciscoSonetApsMIBGroup1 groups as optional', '(1) Added CsApsLineFailureCode, CsApsLineFailureStatus, and CsApsLineSwitchReason TEXTUAL-CONVENTION. (2) Added csApsSwitchReason, csApsFailureStatus, and csApsPrimarySection columnar objects to CsApsConfigEntry. (3) Added csApsModeMismatch enumeration to CsApsLineFailureCode. (4) Added csApsNoSwitch enumeration to CsApsLineSwitchReason. (5) Changed descriptions for csApsWorkingIndex, and csApsProtectionIndex specifically related to ITU G.783 AnnexB protocol support. (6) Add objects csConfigRDIVType and csConfigRDIPType in table csConfigTable. (7) Add enum sonetSts3(9) for obj csConfigType. (8) Add table csVTConfigTable augmenting the table csConfigTable. The table csVTVonfigTable contains the following objects: csTributaryType csTributaryMappingType csTributaryFramingType csSignallingTransportMode csTributaryGroupingType', 'Made following changes (1) Added enumeration csApsNone(3) to csApsActiveLine object and updated the description. (2) Added enumerations sonetSts192c(7) and sonetStm64(8) to csConfigType object and updated the descripton. (3) Fixed description of csConfigType object.', 'Initial version of the MIB.',))
if mibBuilder.loadTexts: ciscoSonetMIB.setLastUpdated('200303070000Z')
if mibBuilder.loadTexts: ciscoSonetMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSonetMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoSonetMIB.setDescription('The MIB module to describe SONET/SDH interfaces objects. This is an extension to the standard SONET MIB(RFC 2558).')
ciscoSonetMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 0))
ciscoSonetMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 1))
csConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1))
csApsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2))
csSection = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3))
csLine = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4))
csPath = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5))
csStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 6))
cspConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 7))
csNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 8))
csAu4Tug3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 9))
class CsApsLineFailureCode(TextualConvention, Integer32):
    description = 'The Sonet APS line failure code - this is the failure encountered by the APS line. csApsChannelMismatch: Transmitted K1 byte and received K2 byte do not match. csApsProtectionByteFail: It could mean either K1 byte with invalid type of switch request bits was received, or, priority of received K1 byte is lower than the transmitted K1 byte. csApsFEProtectionFailure: Remote end error detected. csApsModeMismatch: APS architecture mode mismatch.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("csApsChannelMismatch", 1), ("csApsProtectionByteFail", 2), ("csApsFEProtectionFailure", 3), ("csApsModeMismatch", 4))

class CsApsLineFailureStatus(TextualConvention, Bits):
    description = 'The indication of the APS line failure status with a bit map representing multiple failures. noApsLineFailure bit indicates current failure status. This bit should be set ONLY if no other bit is set. csApsChannelMismatchBit is set when the APS line is in csApsChannelMismatch. csApsProtectionByteFailBit is set when the APS line is in csApsProtectionByteFail failure code. csApsFEProtectionFailureBit is set when the APS line is in csApsFEProtectionFailure. csApsModeMismatchBit is set when the APS line is in csApsModeMismatch.'
    status = 'current'
    namedValues = NamedValues(("noApsLineFailure", 0), ("csApsChannelMismatchBit", 1), ("csApsProtectionByteFailBit", 2), ("csApsFEProtectionFailureBit", 3), ("csApsModeMismatchBit", 4))

class CsApsLineSwitchReason(TextualConvention, Integer32):
    description = "The reason why APS switch happened. When the working line on one end fails, its other end is told to do an APS switch. The following options in the increasing order of priority indicate what type of switch request it is. csApsRevertive : Switch back to working line after the Wait-to-Restore interval is over, and failures are cleared. It is the lowest priority. csApsManual : Manual switch causes APS switch unless a request of equal or higher priority is in effect. csApsSignalDefectLow : Switch happened because threshold for 'csApsSigFaultBER' was exceeded. csApsSignalDefectHigh : Same as above, but higher priority. csApsSignalFailureLow : Switch happened because threshold for 'csApsSigDegradeBER' was exceeded. csApsSignalFailureHigh : Same as above, but higher priority. csApsForceSwitch : Forced switch forces hardware to switch the active line even if the other line (could be working line or protection line) is in alarm. csApsLockOut : This is the highest priority switch. This will override all other requests. csApsNoSwitch : This is a state when no switch happens."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("csApsOther", 1), ("csApsRevertive", 2), ("csApsManual", 3), ("csApsSignalDefectLow", 4), ("csApsSignalDefectHigh", 5), ("csApsSignalFailureLow", 6), ("csApsSignalFailureHigh", 7), ("csApsForceSwitch", 8), ("csApsLockOut", 9), ("csApsNoSwitch", 10))

csConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 1), )
if mibBuilder.loadTexts: csConfigTable.setStatus('current')
if mibBuilder.loadTexts: csConfigTable.setDescription('The SONET/SDH configuration table. This table has objects for configuring sonet lines.')
csConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: csConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csConfigEntry.setDescription("An entry in the table. There is an entry for each SONET line in the table. Entries are automatically created for an ifType value of sonet(39). 'ifAdminStatus' from the ifTable must be used to enable or disable a line. A line is in disabled(down) state unless provisioned 'up' using 'ifAdminStatus'.")
csConfigLoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noLoopback", 1), ("lineLocal", 2), ("lineRemote", 3))).clone('noLoopback')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csConfigLoopbackType.setStatus('current')
if mibBuilder.loadTexts: csConfigLoopbackType.setDescription('This object specifies the desired loopback mode configuration of the SONET line. The possible values of this objects are follows: noLoopback : Not in the loopback state. lineLocal : The signal transmitted from this interface is connected to the associated incoming receiver. This ensures that the SONET frame transmitted from the interface is received back at the interface. lineRemote : The signal received at the interface is looped back out to the associated transmitter. This ensures that the remote equipment that originated the signal receives it back. The signal may undergo degradation as a result of the characteristics of the transmission medium.')
csConfigXmtClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2))).clone('localTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csConfigXmtClockSource.setStatus('current')
if mibBuilder.loadTexts: csConfigXmtClockSource.setDescription('Specifies the source of the transmit clock. loopTiming: indicates that the recovered receive clock is used as the transmit clock. localTiming: indicates that a local clock source is used or that an external clock is attached to the box containing the interface. ')
csConfigFrameScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csConfigFrameScramble.setReference('GR-253-CORE Issue 3, September 2000: Section 5.1.3.')
if mibBuilder.loadTexts: csConfigFrameScramble.setStatus('current')
if mibBuilder.loadTexts: csConfigFrameScramble.setDescription('This object is used to disable or enable the Scrambling option in SONET line.')
csConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("sonetSts3c", 1), ("sonetStm1", 2), ("sonetSts12c", 3), ("sonetStm4", 4), ("sonetSts48c", 5), ("sonetStm16", 6), ("sonetSts192c", 7), ("sonetStm64", 8), ("sonetSts3", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csConfigType.setStatus('current')
if mibBuilder.loadTexts: csConfigType.setDescription('This object represents the configured line type. Sts is SONET format. Stm is SDH format. sonetSts3c : OC3 concatenated sonetStm1 : European standard OC3 sonetSts12c : OC12 concatenated sonetStm4 : European standard OC12 sonetSts48c : OC48 concatenated sonetStm16 : European standard OC48 sonetSts192c : OC-192 concatenated sonetStm64 : European standard OC-192 sonetSts3 : OC3 (unconcatenated) ')
csConfigRDIVType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("onebit", 1), ("threebit", 3))).clone('onebit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csConfigRDIVType.setStatus('current')
if mibBuilder.loadTexts: csConfigRDIVType.setDescription('This object specifies the type of RDI-V (Remote Defect Indication - Virtual Tributary/Container) sent by this Network Element (NE) to the remote Network Element. onebit : use 1 bit RDI-V threebit : use 3 bit enhanced RDI-V. Default is onebit.')
csConfigRDIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("onebit", 1), ("threebit", 3))).clone('onebit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csConfigRDIPType.setStatus('current')
if mibBuilder.loadTexts: csConfigRDIPType.setDescription('This object represents the type of RDI-P (Remote Defect Indication - Path) sent by this Network Element (NE) to remote Network Element. onebit : use 1 bit RDI-P threebit : use 3 bit enhanced RDI-P. Default is onebit.')
csVTConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 2), )
if mibBuilder.loadTexts: csVTConfigTable.setStatus('current')
if mibBuilder.loadTexts: csVTConfigTable.setDescription('This table contains objects to configure the VT/VC (Virtual Tributary / Virtual Container) related properties of SONET/SDH lines.')
csVTConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 2, 1), )
csConfigEntry.registerAugmentions(("CISCO-SONET-MIB", "csVTConfigEntry"))
csVTConfigEntry.setIndexNames(*csConfigEntry.getIndexNames())
if mibBuilder.loadTexts: csVTConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csVTConfigEntry.setDescription('There is an entry in this table for each SONET line that supports SONET virtual tributaries or SDH virtual containers. Each entry in this table will have a corresponding entry in csConfigTable.')
csTributaryType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vt15vc11", 1), ("vt2vc12", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csTributaryType.setStatus('current')
if mibBuilder.loadTexts: csTributaryType.setDescription('Type of the tributary carried within the SONET/SDH signal. vt15vc11 : carries T1 signal vt2vc12 : carries E1 signal ')
csTributaryMappingType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("asynchronous", 1), ("byteSynchronous", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csTributaryMappingType.setStatus('current')
if mibBuilder.loadTexts: csTributaryMappingType.setDescription('This object represents the VT/VC mapping type. asynchronous: In this mode, the channel structure of DS1/E1 is neither visible nor preserved. byteSynchronous: In this mode, the DS0 signals inside the VT/VC can be found and extracted from the frame. Default is asynchronous(1).')
csTributaryFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("dsx1D4", 2), ("dsx1ESF", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csTributaryFramingType.setStatus('current')
if mibBuilder.loadTexts: csTributaryFramingType.setDescription('This object represents the framing type to be assigned to the virtual tributaries in byte sync mapping mode. notApplicable : If VT mapping is not byteSynchronous(2). dsx1ESF : Extended Superframe Format dsx1D4 : Superframe Format Default is dsx1ESF(3) if csTributaryMappingType is byteSynchronous(2). For asynchronous(1) mapping, the default is notApplicable(1). The value notApplicable(1) can not be set.')
csSignallingTransportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("signallingTransferMode", 2), ("clearMode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csSignallingTransportMode.setStatus('current')
if mibBuilder.loadTexts: csSignallingTransportMode.setDescription('This object represents the mode used to transport DS0 signalling information for T1 byteSynchronous mapping (GR253). In signallingTransferMode(2), the robbed-bit signalling is transferred to the VT header. In clearMode(3), only the framing bit is transferred to the VT header. Default is signallingTransferMode(2) if csTributaryMappingType is byteSynchronous. For asynchronous mapping, it is notApplicable(1). The value notApplicable(1) can not be set.')
csTributaryGroupingType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("au3Grouping", 2), ("au4Grouping", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csTributaryGroupingType.setStatus('current')
if mibBuilder.loadTexts: csTributaryGroupingType.setDescription('This object represents the method used to group VCs into an STM-1 signal. Applicable only to SDH. au3Grouping: STM1<-AU-3<-TUG-2<-TU-12<-VC12 or STM1<-AU-3<-TUG-2<-TU-11<-VC11. au4Grouping: STM1<-AU-4<-TUG-3<-TUG-2<-TU-12<-VC12 or STM1<-AU-4<-TUG-3<-TUG-2<-TU-11<-VC11. Default is au3Grouping(2) for SDH and notApplicable(1) for SONET.')
csApsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1), )
if mibBuilder.loadTexts: csApsConfigTable.setStatus('current')
if mibBuilder.loadTexts: csApsConfigTable.setDescription('This table contains objects to configure APS (Automatic Protection Switching) feature in a SONET Line. APS is the ability to configure a pair of SONET lines for redundancy so that the hardware will automatically switch the active line from working line to the protection line or vice versa, within 60ms, when the active line fails.')
csApsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-SONET-MIB", "csApsWorkingIndex"))
if mibBuilder.loadTexts: csApsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csApsConfigEntry.setDescription("An entry is created when an APS pair is configured. To create an entry, the following objects must be specified: csApsWorkingIndex, csApsProtectionIndex, csApsEnable, csApsArchMode. The protection line must not be active, i.e, ifAdminStatus must be 'down', while configuring APS. An entry is created by setting the value of 'csApsEnable' to csApsEnabled (2) and deleted by setting it to csApsDisabled (1). Once a line is configured as working line or protection line, it remains in that role until APS is disabled on that sonet line pair. It remains in the working/protection role even after the card is reset.")
csApsWorkingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: csApsWorkingIndex.setReference('GR-253-CORE, G.783 AnnexB')
if mibBuilder.loadTexts: csApsWorkingIndex.setStatus('current')
if mibBuilder.loadTexts: csApsWorkingIndex.setDescription('When a pair of APS lines is configured, one line has to be the working line, which is the primary line, and the other has to be the protection line, which is the backup line. This object refers to the working line in the APS pair. For G.783 AnnexB, this index refers to Working Section 1.')
csApsProtectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 2), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csApsProtectionIndex.setReference('GR-253-CORE, G.783 AnnexB')
if mibBuilder.loadTexts: csApsProtectionIndex.setStatus('current')
if mibBuilder.loadTexts: csApsProtectionIndex.setDescription('The protection line indicates that it will become the active line when an APS switch occurs (APS switch could occur because of a failure on the working line). For G.783 AnnexB, This index refers to Working Section 2.')
csApsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csApsDisabled", 1), ("csApsEnabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csApsEnable.setStatus('current')
if mibBuilder.loadTexts: csApsEnable.setDescription('This object is used to enable or disable the APS feature on the working/protection line pairs. When enabled, the hardware will automatically switch the active line from the working line to the protection line within 60ms, or vice versa.')
csApsArchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("onePlusOne", 1), ("oneToOne", 2), ("anexBOnePlusOne", 3), ("ycableOnePlusOneNok1k2", 4), ("straightOnePlusOneNok1k2", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csApsArchMode.setStatus('current')
if mibBuilder.loadTexts: csApsArchMode.setDescription("This object is used to configure APS architecture mode on the working/protection line pairs. All of the following are supported on single slot. oneToOne(2) is not supported across 2 slots,i.e. the working and protection slot numbers must be the same in oneToOne(2). onePlusOne : This can be supported on the same card and across 2 cards. This mode means that the transmit and receive signals go only over the active line(which could be working or protection line). (straight cable implied) oneToOne : This is supported only on the same card This mode means that the transmit and receive signals go over the working and protection lines. (straight cable implied) anexBOnePlusOne : This can be supported on the same card and across 2 cards. This mode is like the onePlusOne mode, except that the 'csApsDirection' can only be bi-directional. (straight cable implied) ycableOnePlusOneNok1k2: With Y-cable ignore K1K2 bytes. This mode is the Y-cable redundancy mode. straightOnePlusOneNok1k2 : With straight cable, ignore K1K2 bytes. This mode is like onePlusOne, but with K1, K2 bytes ignored.")
csApsActiveLine = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("csApsWorkingLine", 1), ("csApsProtectionLine", 2), ("csApsNone", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csApsActiveLine.setReference('GR-253-CORE, G.783 AnnexB')
if mibBuilder.loadTexts: csApsActiveLine.setStatus('current')
if mibBuilder.loadTexts: csApsActiveLine.setDescription('This object indicates which line is currently active. It could be the working line(Section 1 for Annex B), the protection line(Section 2 for Annex B) or none if neither working nor protection line is active. This object reflects the status of receive direction.')
csApsSigFaultBER = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csApsSigFaultBER.setStatus('current')
if mibBuilder.loadTexts: csApsSigFaultBER.setDescription('This object contains the Bit Error Rate threshold for Signal Fault detection on the working line. Once this threshold is exceeded, an APS switch will occur. This value is 10 to the -n, where n is between 3 and 5.')
csApsSigDegradeBER = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 9)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csApsSigDegradeBER.setStatus('current')
if mibBuilder.loadTexts: csApsSigDegradeBER.setDescription('This object contains the Bit Error Rate threshold for Signal Degrade detection on the working line. Once this threshold is exceeded, an APS switch will occur. This value is 10 to -n where n is between 5 and 9.')
csApsWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: csApsWaitToRestore.setStatus('current')
if mibBuilder.loadTexts: csApsWaitToRestore.setDescription("This object contains interval in minutes to wait before attempting to switch back to working line. Not applicable if the line is configured in non-revertive mode, i.e. protection line will continue to be active, even if failures on the working line are cleared. The framer clears the signal-fault and signal-degrade when APS switch occurs. Please refer to 'csApsRevertive' for description of non-revertive.")
csApsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uniDirectional", 1), ("biDirectional", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csApsDirection.setStatus('current')
if mibBuilder.loadTexts: csApsDirection.setDescription('This object is used to configure the switching direction which this APS line supports. Unidirectional : APS switch only in one direction. Bidirectional : APS switch in both ends of the line.')
csApsRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonrevertive", 1), ("revertive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csApsRevertive.setStatus('current')
if mibBuilder.loadTexts: csApsRevertive.setDescription("This object is used to configure the APS revertive or nonrevertive option. revertive : Will switch the working line back to active state after the Wait-To-restore interval has expired and the working line Signal-Fault/Signal-Degrade has been cleared. Please refer to 'csApsWaitToRestore' for description of Wait-To-Restore interval. nonrevertive : The protection line continues to be the active line, The active line does not switch to the working line.")
csApsDirectionOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uniDirectional", 1), ("biDirectional", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csApsDirectionOperational.setStatus('current')
if mibBuilder.loadTexts: csApsDirectionOperational.setDescription('This object shows the actual APS direction that is implemented on the Near End terminal. APS direction configured through csApsDirection is negotiated with the Far End and APS direction setting acceptable to both ends is operational at the Near End.')
csApsArchModeOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("onePlusOne", 1), ("oneToOne", 2), ("anexBOnePlusOne", 3), ("ycableOnePlusOneNok1k2", 4), ("straightOnePlusOneNok1k2", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csApsArchModeOperational.setStatus('current')
if mibBuilder.loadTexts: csApsArchModeOperational.setDescription('This object shows the actual APS architecture mode that is implemented on the Near End terminal. APS architecture mode configured through csApsArchMode object is negotiated with the Far End through APS channel. Architecture mode acceptable to both the Near End and the Far End terminals is then operational at the Near End. This value can be different than the APS Architecture mode configured.')
csApsChannelProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bellcore", 1), ("itu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csApsChannelProtocol.setReference('GR-253-CORE, G.783')
if mibBuilder.loadTexts: csApsChannelProtocol.setStatus('current')
if mibBuilder.loadTexts: csApsChannelProtocol.setDescription('This object allows to configure APS channel protocol to be implemented at Near End terminal. K1 and K2 overhead bytes in a SONET signal are used as an APS channel. This channel is used to carry APS protocol. Possible values: bellcore(1) : Implements APS channel protocol as defined in bellcore document GR-253-CORE. itu(2) : Implements APS channel protocol as defined in ITU document G.783.')
csApsFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 14), CsApsLineFailureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csApsFailureStatus.setReference('GR-253-CORE, G.783')
if mibBuilder.loadTexts: csApsFailureStatus.setStatus('current')
if mibBuilder.loadTexts: csApsFailureStatus.setDescription('This object indicates APS line failure status.')
csApsSwitchReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 15), CsApsLineSwitchReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csApsSwitchReason.setReference('GR-253-CORE, G.783')
if mibBuilder.loadTexts: csApsSwitchReason.setStatus('current')
if mibBuilder.loadTexts: csApsSwitchReason.setDescription('This object indicates APS line switch reason.')
csApsPrimarySection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("workingSection1", 1), ("workingSection2", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csApsPrimarySection.setReference('G.783 AnnexB')
if mibBuilder.loadTexts: csApsPrimarySection.setStatus('current')
if mibBuilder.loadTexts: csApsPrimarySection.setDescription('This object indicates which working section is the APS primary section. In G.783 AnnexB, the K1/K2 Bytes are received on the secondary Section. All the Switch Requests are for a switch from the primary section to the secondary section. The object csApsActiveline will indicate which section is currently carrying the traffic. Once the switch request clears normally, traffic is maintained on the section to which it was switched by making that section the primary section. Possible values: workingSection1(1): Working Section 1 is Primary Section workingSection2(2): Working Section 2 is Primary Section none(3) : none.')
csApsLineFailureCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 2), CsApsLineFailureCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csApsLineFailureCode.setReference('GR-253-CORE, G.783')
if mibBuilder.loadTexts: csApsLineFailureCode.setStatus('current')
if mibBuilder.loadTexts: csApsLineFailureCode.setDescription('The object indicates the APS line failure code. This is the failure encountered by the APS line. Refer to CsApsLineFailureCode TC for failure code definitions. The object is used for notifications.')
csApsLineSwitchReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 3), CsApsLineSwitchReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csApsLineSwitchReason.setStatus('current')
if mibBuilder.loadTexts: csApsLineSwitchReason.setDescription('This object indicates the APS line switch reason. When the working line on one end fails, its other end is told to do an APS switch. Refer to CsApsLineSwitchReason TC for more information. The object is used for notifications.')
cssTotalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 1), )
if mibBuilder.loadTexts: cssTotalTable.setStatus('current')
if mibBuilder.loadTexts: cssTotalTable.setDescription("The SONET/SDH Section Total table. It contains the cumulative sum of the various statistics for the 24 hour period preceding the current interval. The object 'sonetMediumValidIntervals' from RFC2558 contains the number of 15 minute intervals that have elapsed since the line is enabled. ")
cssTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cssTotalEntry.setStatus('current')
if mibBuilder.loadTexts: cssTotalEntry.setDescription('An entry in the SONET/SDH Section Total table. Entries are created automatically for sonet lines.')
cssTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 1, 1, 1), Gauge32()).setUnits('errored seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cssTotalESs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cssTotalESs.setStatus('current')
if mibBuilder.loadTexts: cssTotalESs.setDescription('The number of Errored Seconds encountered by a SONET/SDH Section in the last 24 hours.')
cssTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 1, 1, 2), Gauge32()).setUnits('severely errored seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cssTotalSESs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cssTotalSESs.setStatus('current')
if mibBuilder.loadTexts: cssTotalSESs.setDescription('The number of Severely Errored Seconds encountered by a SONET/SDH Section in the last 24 hours.')
cssTotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 1, 1, 3), Gauge32()).setUnits('severely errored framing seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cssTotalSEFSs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cssTotalSEFSs.setStatus('current')
if mibBuilder.loadTexts: cssTotalSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a SONET/SDH Section in the last 24 hours.')
cssTotalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 1, 1, 4), Gauge32()).setUnits('coding violations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cssTotalCVs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cssTotalCVs.setStatus('current')
if mibBuilder.loadTexts: cssTotalCVs.setDescription('The number of Coding Violations encountered by a SONET/SDH Section in the last 24 hours.')
cssTraceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 2), )
if mibBuilder.loadTexts: cssTraceTable.setStatus('current')
if mibBuilder.loadTexts: cssTraceTable.setDescription('The SONET/SDH Section Trace table. This table contains objects for tracing the sonet section.')
cssTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cssTraceEntry.setStatus('current')
if mibBuilder.loadTexts: cssTraceEntry.setDescription('An entry in the trace table. Entries exist for active sonet lines. The objects in this table are used to verify continued connection between the two ends of the line.')
cssTraceToTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 2, 1, 1), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ValueSizeConstraint(64, 64), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssTraceToTransmit.setReference('GR-253-CORE')
if mibBuilder.loadTexts: cssTraceToTransmit.setStatus('current')
if mibBuilder.loadTexts: cssTraceToTransmit.setDescription('Sonet Section Trace To Transmit. This is string that is transmitted to perform Sonet section trace diagnostics. The trace string is repetitively transmited so that a trace receiving terminal can verify its continued connection to the intended transmitter. The default value is a zero-length string. Unless this object is set to a non-zero length string, tracing will not be performed.')
cssTraceToExpect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ValueSizeConstraint(64, 64), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssTraceToExpect.setReference('GR-253-CORE')
if mibBuilder.loadTexts: cssTraceToExpect.setStatus('current')
if mibBuilder.loadTexts: cssTraceToExpect.setDescription("Sonet Section Trace To Expect. The receiving terminal verifies if the incoming string matches this string. The value of 'cssTraceFailure' indicates whether a trace mismatch occurred. The default value is a zero-length string.")
cssTraceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssTraceFailure.setReference('GR-253-CORE')
if mibBuilder.loadTexts: cssTraceFailure.setStatus('current')
if mibBuilder.loadTexts: cssTraceFailure.setDescription("The value of this object is set to 'true' when Sonet Section received trace does not match the 'cssTraceToExpect'.")
cssTraceReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 2, 1, 4), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ValueSizeConstraint(64, 64), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssTraceReceived.setReference('GR-253-CORE')
if mibBuilder.loadTexts: cssTraceReceived.setStatus('current')
if mibBuilder.loadTexts: cssTraceReceived.setDescription('This object is used to view the Sonet Section Trace that is received by the receiving terminal.')
cslTotalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 1), )
if mibBuilder.loadTexts: cslTotalTable.setStatus('current')
if mibBuilder.loadTexts: cslTotalTable.setDescription("The SONET/SDH Line Total table. It contains the cumulative sum of the various statistics for the 24 hour period preceding the current interval. The object 'sonetMediumValidIntervals' from RFC2558 contains the number of 15 minute intervals that have elapsed since the line is enabled.")
cslTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cslTotalEntry.setStatus('current')
if mibBuilder.loadTexts: cslTotalEntry.setDescription('An entry in the SONET/SDH Line Total table. Entries are created automatically for sonet lines.')
cslTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 1, 1, 1), Gauge32()).setUnits('errored seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslTotalESs.setStatus('current')
if mibBuilder.loadTexts: cslTotalESs.setDescription('The number of Errored Seconds encountered by a SONET/SDH Line in the last 24 hours.')
cslTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 1, 1, 2), Gauge32()).setUnits('severely errored seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslTotalSESs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cslTotalSESs.setStatus('current')
if mibBuilder.loadTexts: cslTotalSESs.setDescription('The number of Severely Errored Seconds encountered by a SONET/SDH Line in the last 24 hours.')
cslTotalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 1, 1, 3), Gauge32()).setUnits('coding violations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslTotalCVs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cslTotalCVs.setStatus('current')
if mibBuilder.loadTexts: cslTotalCVs.setDescription('The number of Coding Violations encountered by a SONET/SDH Line in the last 24 hours.')
cslTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 1, 1, 4), Gauge32()).setUnits('unavailable seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslTotalUASs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cslTotalUASs.setStatus('current')
if mibBuilder.loadTexts: cslTotalUASs.setDescription('The number of Unavailable Seconds encountered by a SONET/SDH Line in the last 24 hours.')
cslFarEndTotalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 2), )
if mibBuilder.loadTexts: cslFarEndTotalTable.setStatus('current')
if mibBuilder.loadTexts: cslFarEndTotalTable.setDescription("The SONET/SDH Far End Line Total table. It contains the cumulative sum of the various statistics for the 24 hour period preceding the current interval. The object 'sonetMediumValidIntervals' from RFC2558 contains the number of 15 minute intervals that have elapsed since the line is enabled.")
cslFarEndTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cslFarEndTotalEntry.setStatus('current')
if mibBuilder.loadTexts: cslFarEndTotalEntry.setDescription('An entry in the SONET/SDH Far End Line Total table. Entries are created automatically for sonet lines.')
cslFarEndTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 2, 1, 1), Gauge32()).setUnits('errored seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslFarEndTotalESs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cslFarEndTotalESs.setStatus('current')
if mibBuilder.loadTexts: cslFarEndTotalESs.setDescription('The number of Errored Seconds encountered by a SONET/SDH Far End Line in the last 24 hours.')
cslFarEndTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 2, 1, 2), Gauge32()).setUnits('severely errored seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslFarEndTotalSESs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cslFarEndTotalSESs.setStatus('current')
if mibBuilder.loadTexts: cslFarEndTotalSESs.setDescription('The number of Severely Errored Seconds encountered by a SONET/SDH Far End Line in the last 24 hours.')
cslFarEndTotalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 2, 1, 3), Gauge32()).setUnits('coding violations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslFarEndTotalCVs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cslFarEndTotalCVs.setStatus('current')
if mibBuilder.loadTexts: cslFarEndTotalCVs.setDescription('The number of Coding Violations encountered by a SONET/SDH Far End Line in the last 24 hours.')
cslFarEndTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 2, 1, 4), Gauge32()).setUnits('unavailable seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslFarEndTotalUASs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cslFarEndTotalUASs.setStatus('current')
if mibBuilder.loadTexts: cslFarEndTotalUASs.setDescription('The number of Unavailable Seconds encountered by a SONET/SDH Far End Line in the last 24 hours.')
cspTotalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 1), )
if mibBuilder.loadTexts: cspTotalTable.setStatus('current')
if mibBuilder.loadTexts: cspTotalTable.setDescription("The SONET/SDH Path Total table. It contains the cumulative sum of the various statistics for the 24 hour period preceding the current interval.The object 'sonetMediumValidIntervals' from RFC2558 contains the number of 15 minute intervals that have elapsed since the line is enabled.")
cspTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cspTotalEntry.setStatus('current')
if mibBuilder.loadTexts: cspTotalEntry.setDescription('An entry in the SONET/SDH Path Total table. Entries are created automatically for sonet lines.')
cspTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 1, 1, 1), Gauge32()).setUnits('errored seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTotalESs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cspTotalESs.setStatus('current')
if mibBuilder.loadTexts: cspTotalESs.setDescription('The number of Errored Seconds encountered by a SONET/SDH Path in the last 24 hours.')
cspTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 1, 1, 2), Gauge32()).setUnits('severely errored seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTotalSESs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cspTotalSESs.setStatus('current')
if mibBuilder.loadTexts: cspTotalSESs.setDescription('The number of Severely Errored Seconds encountered by a SONET/SDH Path in the last 24 hours.')
cspTotalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 1, 1, 3), Gauge32()).setUnits('coding violations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTotalCVs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cspTotalCVs.setStatus('current')
if mibBuilder.loadTexts: cspTotalCVs.setDescription('The number of Coding Violations encountered by a SONET/SDH Path in the last 24 hours.')
cspTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 1, 1, 4), Gauge32()).setUnits('unavailable seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTotalUASs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cspTotalUASs.setStatus('current')
if mibBuilder.loadTexts: cspTotalUASs.setDescription('The number of Unavailable Seconds encountered by a SONET/SDH Path in the last 24 hours.')
cspFarEndTotalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 2), )
if mibBuilder.loadTexts: cspFarEndTotalTable.setStatus('current')
if mibBuilder.loadTexts: cspFarEndTotalTable.setDescription("The SONET/SDH Far End Path Total table. Far End is the remote end of the line. The table contains the cumulative sum of the various statistics for the 24 hour period preceding the current interval. The object 'sonetMediumValidIntervals' from RFC2558 contains the number of 15 minute intervals that have elapsed since the line is enabled. ")
cspFarEndTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cspFarEndTotalEntry.setStatus('current')
if mibBuilder.loadTexts: cspFarEndTotalEntry.setDescription('An entry in the SONET/SDH Far End Path Total table. Entries are created automatically for sonet lines.')
cspFarEndTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 2, 1, 1), Gauge32()).setUnits('errored seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspFarEndTotalESs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cspFarEndTotalESs.setStatus('current')
if mibBuilder.loadTexts: cspFarEndTotalESs.setDescription('The number of Errored Seconds encountered by a SONET/SDH far end path in the last 24 hours.')
cspFarEndTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 2, 1, 2), Gauge32()).setUnits('severely errored seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspFarEndTotalSESs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cspFarEndTotalSESs.setStatus('current')
if mibBuilder.loadTexts: cspFarEndTotalSESs.setDescription('The number of Severely Errored Seconds encountered by a SONET/SDH far end path in the last 24 hours.')
cspFarEndTotalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 2, 1, 3), Gauge32()).setUnits('coding violations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspFarEndTotalCVs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cspFarEndTotalCVs.setStatus('current')
if mibBuilder.loadTexts: cspFarEndTotalCVs.setDescription('The number of Coding Violations encountered by a SONET/SDH far end path in the last 24 hours.')
cspFarEndTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 2, 1, 4), Gauge32()).setUnits('unavailable seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspFarEndTotalUASs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cspFarEndTotalUASs.setStatus('current')
if mibBuilder.loadTexts: cspFarEndTotalUASs.setDescription('The number of Unavailable Seconds encountered by a SONET/SDH far end path in the last 24 hours.')
cspTraceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 3), )
if mibBuilder.loadTexts: cspTraceTable.setStatus('current')
if mibBuilder.loadTexts: cspTraceTable.setDescription('The SONET/SDH Path Trace table. This table contains objects for tracing the sonet path.')
cspTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cspTraceEntry.setStatus('current')
if mibBuilder.loadTexts: cspTraceEntry.setDescription('An entry in the SONET/SDH Path Trace table. The entries exist for active sonet lines. The objects in this table are used to verify continued connection between the two ends of the line.')
cspTraceToTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 3, 1, 1), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ValueSizeConstraint(64, 64), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cspTraceToTransmit.setReference('GR-253-CORE')
if mibBuilder.loadTexts: cspTraceToTransmit.setStatus('current')
if mibBuilder.loadTexts: cspTraceToTransmit.setDescription('Sonet Path Trace To Transmit. The trace string is repetitively transmited so that a trace receiving terminal can verify its continued receiving terminal can verify its continued connection to the intended transmitter. The default value is a zero-length string. Unless this object is set to a non-zero length string, tracing will not be performed.')
cspTraceToExpect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ValueSizeConstraint(64, 64), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cspTraceToExpect.setReference('GR-253-CORE')
if mibBuilder.loadTexts: cspTraceToExpect.setStatus('current')
if mibBuilder.loadTexts: cspTraceToExpect.setDescription("Sonet Path Trace To Expect. The receiving terminal verifies if the incoming string matches this string. The value of 'cspTraceFailure' indicates whether a trace mismatch occured. The default value is a zero-length string.")
cspTraceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTraceFailure.setReference('GR-253-CORE')
if mibBuilder.loadTexts: cspTraceFailure.setStatus('current')
if mibBuilder.loadTexts: cspTraceFailure.setDescription("The value of this object is set to 'true' when Sonet Path received trace does not match the 'cspTraceToExpect'.")
cspTraceReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 3, 1, 4), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ValueSizeConstraint(64, 64), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTraceReceived.setReference('GR-253-CORE')
if mibBuilder.loadTexts: cspTraceReceived.setStatus('current')
if mibBuilder.loadTexts: cspTraceReceived.setDescription('This object is used to view the Sonet Path Trace that is received by the receiving terminal.')
csStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 6, 1), )
if mibBuilder.loadTexts: csStatsTable.setStatus('current')
if mibBuilder.loadTexts: csStatsTable.setDescription('The SONET/SDH Section statistics table. This table maintains the number of times the line encountered Loss of Signal(LOS), Loss of frame(LOF), Alarm Indication signals(AISs), Remote failure indications(RFIs).')
csStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: csStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csStatsEntry.setDescription('An entry in the SONET/SDH statistics table. These are realtime statistics for the Sonet section, line and path layers. The statistics are gathered for each sonet line. An entry is created automatically and is indexed by ifIndex.')
cssLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 6, 1, 1, 1), Counter32()).setUnits('loss of signals').setMaxAccess("readonly")
if mibBuilder.loadTexts: cssLOSs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cssLOSs.setStatus('current')
if mibBuilder.loadTexts: cssLOSs.setDescription('The number of Loss of signals(LOS) encountered by a SONET/SDH Section. A high value for this object may indicate a problem with the Sonet Section layer.')
cssLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 6, 1, 1, 2), Counter32()).setUnits('loss of frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: cssLOFs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cssLOFs.setStatus('current')
if mibBuilder.loadTexts: cssLOFs.setDescription('The number of Loss of Frames (LOF) encountered by a SONET/SDH Section. A high value for this object may indicate a problem with the Sonet Section layer.')
cslAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 6, 1, 1, 3), Counter32()).setUnits('alarm indication signals').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslAISs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cslAISs.setStatus('current')
if mibBuilder.loadTexts: cslAISs.setDescription('The number of alarm indication signals(AIS) encountered by a SONET/SDH Line. A high value for this object may indicate a problem with the Sonet Line layer.')
cslRFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 6, 1, 1, 4), Counter32()).setUnits('remote failure indications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslRFIs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cslRFIs.setStatus('current')
if mibBuilder.loadTexts: cslRFIs.setDescription('The number of remote failure indications (RFI) encountered by a SONET/SDH Line. A high value for this object may indicate a problem with the Sonet Line layer.')
cspAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 6, 1, 1, 5), Counter32()).setUnits('alarm indication signals').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspAISs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cspAISs.setStatus('current')
if mibBuilder.loadTexts: cspAISs.setDescription('The number of alarm indication signals (AIS) encountered by a SONET/SDH Path. A high value for this object may indicate a problem with the Sonet Path layer.')
cspRFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 6, 1, 1, 6), Counter32()).setUnits('remote failure indications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspRFIs.setReference(' RFC2558 ')
if mibBuilder.loadTexts: cspRFIs.setStatus('current')
if mibBuilder.loadTexts: cspRFIs.setDescription('The number of remote failure indications (RFI) encountered by a SONET/SDH Path. A high value for this object may indicate a problem with the Sonet Path layer.')
cspConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 7, 1), )
if mibBuilder.loadTexts: cspConfigTable.setStatus('current')
if mibBuilder.loadTexts: cspConfigTable.setDescription('Cisco extension to SONET Path current table.')
cspConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 7, 1, 1), )
sonetPathCurrentEntry.registerAugmentions(("CISCO-SONET-MIB", "cspConfigEntry"))
cspConfigEntry.setIndexNames(*sonetPathCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: cspConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cspConfigEntry.setDescription('An entry in Cisco extension to the SONET path current table.')
cspSonetPathPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unequipped", 1), ("unspecified", 2), ("ds3", 3), ("vt15vc11", 4), ("vt2vc12", 5), ("atmCell", 6), ("hdlcFr", 7), ("e3", 8), ("vtStructured", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cspSonetPathPayload.setReference('Telcordia GR-253, ITU G.707')
if mibBuilder.loadTexts: cspSonetPathPayload.setStatus('current')
if mibBuilder.loadTexts: cspSonetPathPayload.setDescription('Specifies the payload carried by the SONET/SDH Path. The payload specification corresponds to C2 (Signal Label) overhead byte in SONET/SDH Path Overhead: unequipped(1) : Path is not provisioned to carry any payload. unspecified(2) : Path is carrying an unspecifed payload. ds3(3) : Path is carrying a DS3 path as payload. vt15vc11(4) : Path is carrying SONET-VT1.5/SDH-VC11 payload. vt2vc12(5) : Path is carrying SONET-VT2/SDH-VC12 as payload. atmCell(6) : Path is carrying ATM Cells as payload. hdlcFr(7) : Path is carrying Frame Relay (HDLC) payload. e3(8) : Path is carrying an E3 path as payload. vtStructured(9) : Path is carrying VTGs/TUG3s/TUG2s which may each carry a different payload. A write operation on this object will result in update to C2 overhead byte in the Path Overhead.')
cspTributaryMappingType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("asynchronous", 1), ("byteSynchronous", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cspTributaryMappingType.setStatus('current')
if mibBuilder.loadTexts: cspTributaryMappingType.setDescription('This object represents the VT/VC mapping type. asynchronous: In this mode, the channel structure of DS1/E1 is neither visible nor preserved. byteSynchronous: In this mode, the DS0 signals inside the VT/VC can be found and extracted from the frame. The initial value is asynchronous(1).')
cspSignallingTransportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("signallingTransferMode", 2), ("clearMode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cspSignallingTransportMode.setStatus('current')
if mibBuilder.loadTexts: cspSignallingTransportMode.setDescription('This object represents the mode used to transport DS0 Signalling information for T1 byteSynchronous mapping (GR253). In signallingTransferMode(2), the robbed-bit signalling is transferred to the VT header. In clearMode(3), only the framing bit is transferred to the VT header. The initial value is signallingTransferMode(2) if csTributaryMappingType is byteSynchronous. For asynchronous mapping, it is notApplicable(1). The value notApplicable(1) can not be set. ')
cspTributaryGroupingType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("au3Grouping", 2), ("au4Grouping", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cspTributaryGroupingType.setReference('ITU-T,G707, Section 6 Basic Multiplexing Priciples ')
if mibBuilder.loadTexts: cspTributaryGroupingType.setStatus('current')
if mibBuilder.loadTexts: cspTributaryGroupingType.setDescription('This object represents the method used to group VCs into an STM-1 signal. Applicable only to SDH. au3Grouping: STM1<-AU-3<-TUG-2<-TU-12<-VC12 or STM1<-AU-3<-TUG-2<-TU-11<-VC11. au4Grouping: STM1<-AU-4<-TUG-3<-TUG-2<-TU-12<-VC12 or STM1<-AU-4<-TUG-3<-TUG-2<-TU-11<-VC11. The initial value is au3Grouping(2) for SDH and notApplicable(1) for SONET. ')
csAu4Tug3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 9, 1), )
if mibBuilder.loadTexts: csAu4Tug3ConfigTable.setReference('ITU-T, G.707')
if mibBuilder.loadTexts: csAu4Tug3ConfigTable.setStatus('current')
if mibBuilder.loadTexts: csAu4Tug3ConfigTable.setDescription('This table contains objects to configure the VC( Virtual Container) related properties of a TUG-3 within a AU-4 paths. This table allows creation of following multiplexing structure: STM-1/AU-4/TUG-3/TU-3/DS3 STM-1/AU-4/TUG-3/TU-3/E3 STM-1/AU-4/TUG-3/TUG-2/TU-11/DS1 STM-1/AU-4/TUG-3/TUG-2/TU-12/E1 Three entries are created in this table for a given AU-4 path when cspSonetPathPayload object is set to one of the following: vt15vc11(4), vt2vc12(5), ds3(3), e3(8), vtStructured(9) ')
csAu4Tug3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SONET-MIB", "csAu4Tug3"))
if mibBuilder.loadTexts: csAu4Tug3ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csAu4Tug3ConfigEntry.setDescription('There is an entry in this table for each TUG-3 within a AU-4 SDH path that supports SDH virtual container VC-4. The ifIndex value represents an entry in ifTable with ifType = sonetPath(50).The ifTable entry applicable for this entry belongs to AU-4 path.')
csAu4Tug3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: csAu4Tug3.setReference('ITU-T G.707 for SDH Multiplexing hierarchy.')
if mibBuilder.loadTexts: csAu4Tug3.setStatus('current')
if mibBuilder.loadTexts: csAu4Tug3.setDescription('This object represents the TUG-3 number.')
csAu4Tug3Payload = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("vc11", 2), ("vc12", 3), ("tu3ds3", 4), ("tu3e3", 5))).clone('vc11')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAu4Tug3Payload.setStatus('current')
if mibBuilder.loadTexts: csAu4Tug3Payload.setDescription("This object is used for configuring the payload for the tributary group. The possible values are : vc11 : When set to 'vc11' following things are done: - 28 entries created in ifTable for TU-11 with ifType = sonetVT(51) - 28 entries created in ifTable for DS1 with ifType = ds1(18) STM1<-AU-4<-TUG-3<-TUG-2<-TU-11<-VC11 vc12 : When set to 'vc12' following things are done: - 21 entries created in ifTable for TU-12 with ifType = sonetVT(51) - 21 entries created in ifTable for E1 with ifType = ds1(18) STM1<-AU-4<-TUG-3<-TUG-2<-TU-12<-VC12 tu3ds3 : When set to 'tu3ds3' following things are done: - 1 entry created in ifTable for TU-3 with ifType = sonetVT(51) - 1 entry created in ifTable for DS3 with ifType = ds3(30) STM1<-AU-4<-TUG-3<-TU-3<-VC3 tu3e3 : When set to 'tu3e3' following things are done: - 1 entry created in ifTable for TU-3 with ifType = sonetVT(51) - 1 entry created in ifTable for E3 with ifType = ds3(30) STM1<-AU-4<-TUG-3<-TU-3<-VC3 The value 'other' can not be set. ")
csNotificationsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 8, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csNotificationsEnabled.setStatus('current')
if mibBuilder.loadTexts: csNotificationsEnabled.setDescription("This object controls if the generation of ciscoSonetSectionStatusChange, ciscoSonetLineStatusChange, ciscoSonetPathStatusChange and ciscoSonetVTStatusChange notifications is enabled. If the value of this object is 'true(1)', then all notifications in this MIB are enabled; otherwise they are disabled.")
ciscoSonetSectionStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 126, 0, 1)).setObjects(("SONET-MIB", "sonetSectionCurrentStatus"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: ciscoSonetSectionStatusChange.setStatus('current')
if mibBuilder.loadTexts: ciscoSonetSectionStatusChange.setDescription('This notification is generated whenever the value of sonetSectionCurrentStatus changes.')
ciscoSonetLineStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 126, 0, 2)).setObjects(("SONET-MIB", "sonetLineCurrentStatus"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: ciscoSonetLineStatusChange.setStatus('current')
if mibBuilder.loadTexts: ciscoSonetLineStatusChange.setDescription('This notification is generated whenever the value of sonetLineCurrentStatus changes.')
ciscoSonetPathStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 126, 0, 3)).setObjects(("SONET-MIB", "sonetPathCurrentStatus"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: ciscoSonetPathStatusChange.setStatus('current')
if mibBuilder.loadTexts: ciscoSonetPathStatusChange.setDescription('This notification is generated whenever the value of sonetPathCurrentStatus changes.')
ciscoSonetVTStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 126, 0, 4)).setObjects(("SONET-MIB", "sonetVTCurrentStatus"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: ciscoSonetVTStatusChange.setStatus('current')
if mibBuilder.loadTexts: ciscoSonetVTStatusChange.setDescription('This notification is generated whenever the value of sonetVTCurrentStatus changes.')
ciscoSonetMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 3))
ciscoSonetMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 1))
ciscoSonetMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2))
ciscoSonetMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 1, 1)).setObjects(("CISCO-SONET-MIB", "ciscoSonetConfMIBGroup"), ("CISCO-SONET-MIB", "ciscoSonetStatsMIBGroup"), ("CISCO-SONET-MIB", "ciscoSonetTraceMIBGroup"), ("CISCO-SONET-MIB", "ciscoSonetApsMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetMIBCompliance = ciscoSonetMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSonetMIBCompliance.setDescription('The Compliance statement for ciscoSonet management group.')
ciscoSonetMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 1, 2)).setObjects(("CISCO-SONET-MIB", "ciscoSonetConfMIBGroup1"), ("CISCO-SONET-MIB", "ciscoSonetStatsMIBGroup"), ("CISCO-SONET-MIB", "ciscoSonetTraceMIBGroup"), ("CISCO-SONET-MIB", "ciscoSonetApsMIBGroup1"), ("CISCO-SONET-MIB", "ciscoSonetVTConfMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetMIBCompliance1 = ciscoSonetMIBCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSonetMIBCompliance1.setDescription('The Compliance statement for ciscoSonet management group.')
ciscoSonetMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 1, 3)).setObjects(("CISCO-SONET-MIB", "ciscoSonetConfMIBGroup1"), ("CISCO-SONET-MIB", "ciscoSonetTraceMIBGroup"), ("CISCO-SONET-MIB", "ciscoSonetNotifEnableGroup"), ("CISCO-SONET-MIB", "ciscoSonetSectionNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetMIBCompliance2 = ciscoSonetMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSonetMIBCompliance2.setDescription('The Compliance statement for ciscoSonet management group.')
ciscoSonetMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 1, 4)).setObjects(("CISCO-SONET-MIB", "ciscoSonetConfMIBGroup1"), ("CISCO-SONET-MIB", "ciscoSonetTraceMIBGroup"), ("CISCO-SONET-MIB", "ciscoSonetNotifEnableGroup"), ("CISCO-SONET-MIB", "ciscoSonetSectionNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetMIBCompliance3 = ciscoSonetMIBCompliance3.setStatus('current')
if mibBuilder.loadTexts: ciscoSonetMIBCompliance3.setDescription('The Compliance statement for ciscoSonet management group.')
ciscoSonetConfMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 1)).setObjects(("CISCO-SONET-MIB", "csConfigLoopbackType"), ("CISCO-SONET-MIB", "csConfigXmtClockSource"), ("CISCO-SONET-MIB", "csConfigFrameScramble"), ("CISCO-SONET-MIB", "csConfigType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetConfMIBGroup = ciscoSonetConfMIBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSonetConfMIBGroup.setDescription('Objects used for configuring Sonet lines.')
ciscoSonetStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 2)).setObjects(("CISCO-SONET-MIB", "cssTotalESs"), ("CISCO-SONET-MIB", "cssTotalSESs"), ("CISCO-SONET-MIB", "cssTotalSEFSs"), ("CISCO-SONET-MIB", "cssTotalCVs"), ("CISCO-SONET-MIB", "cssLOSs"), ("CISCO-SONET-MIB", "cssLOFs"), ("CISCO-SONET-MIB", "cslAISs"), ("CISCO-SONET-MIB", "cslRFIs"), ("CISCO-SONET-MIB", "cspAISs"), ("CISCO-SONET-MIB", "cspRFIs"), ("CISCO-SONET-MIB", "cslTotalESs"), ("CISCO-SONET-MIB", "cslTotalSESs"), ("CISCO-SONET-MIB", "cslTotalCVs"), ("CISCO-SONET-MIB", "cslTotalUASs"), ("CISCO-SONET-MIB", "cslFarEndTotalESs"), ("CISCO-SONET-MIB", "cslFarEndTotalSESs"), ("CISCO-SONET-MIB", "cslFarEndTotalCVs"), ("CISCO-SONET-MIB", "cslFarEndTotalUASs"), ("CISCO-SONET-MIB", "cspTotalESs"), ("CISCO-SONET-MIB", "cspTotalSESs"), ("CISCO-SONET-MIB", "cspTotalCVs"), ("CISCO-SONET-MIB", "cspTotalUASs"), ("CISCO-SONET-MIB", "cspFarEndTotalESs"), ("CISCO-SONET-MIB", "cspFarEndTotalSESs"), ("CISCO-SONET-MIB", "cspFarEndTotalCVs"), ("CISCO-SONET-MIB", "cspFarEndTotalUASs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetStatsMIBGroup = ciscoSonetStatsMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSonetStatsMIBGroup.setDescription('These are objects related to Sonet line statistics.')
ciscoSonetTraceMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 3)).setObjects(("CISCO-SONET-MIB", "cssTraceToTransmit"), ("CISCO-SONET-MIB", "cssTraceToExpect"), ("CISCO-SONET-MIB", "cssTraceFailure"), ("CISCO-SONET-MIB", "cssTraceReceived"), ("CISCO-SONET-MIB", "cspTraceToTransmit"), ("CISCO-SONET-MIB", "cspTraceToExpect"), ("CISCO-SONET-MIB", "cspTraceFailure"), ("CISCO-SONET-MIB", "cspTraceReceived"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetTraceMIBGroup = ciscoSonetTraceMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSonetTraceMIBGroup.setDescription('Objects related to Sonet line connectivity.')
ciscoSonetApsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 4)).setObjects(("CISCO-SONET-MIB", "csApsProtectionIndex"), ("CISCO-SONET-MIB", "csApsEnable"), ("CISCO-SONET-MIB", "csApsArchMode"), ("CISCO-SONET-MIB", "csApsActiveLine"), ("CISCO-SONET-MIB", "csApsSigFaultBER"), ("CISCO-SONET-MIB", "csApsSigDegradeBER"), ("CISCO-SONET-MIB", "csApsWaitToRestore"), ("CISCO-SONET-MIB", "csApsDirection"), ("CISCO-SONET-MIB", "csApsRevertive"), ("CISCO-SONET-MIB", "csApsLineFailureCode"), ("CISCO-SONET-MIB", "csApsLineSwitchReason"), ("CISCO-SONET-MIB", "csApsDirectionOperational"), ("CISCO-SONET-MIB", "csApsArchModeOperational"), ("CISCO-SONET-MIB", "csApsChannelProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetApsMIBGroup = ciscoSonetApsMIBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSonetApsMIBGroup.setDescription('Objects used for configuring APS over Sonet lines.')
ciscoSonetApsMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 5)).setObjects(("CISCO-SONET-MIB", "csApsProtectionIndex"), ("CISCO-SONET-MIB", "csApsEnable"), ("CISCO-SONET-MIB", "csApsArchMode"), ("CISCO-SONET-MIB", "csApsActiveLine"), ("CISCO-SONET-MIB", "csApsSigFaultBER"), ("CISCO-SONET-MIB", "csApsSigDegradeBER"), ("CISCO-SONET-MIB", "csApsWaitToRestore"), ("CISCO-SONET-MIB", "csApsDirection"), ("CISCO-SONET-MIB", "csApsRevertive"), ("CISCO-SONET-MIB", "csApsLineFailureCode"), ("CISCO-SONET-MIB", "csApsLineSwitchReason"), ("CISCO-SONET-MIB", "csApsDirectionOperational"), ("CISCO-SONET-MIB", "csApsArchModeOperational"), ("CISCO-SONET-MIB", "csApsChannelProtocol"), ("CISCO-SONET-MIB", "csApsFailureStatus"), ("CISCO-SONET-MIB", "csApsSwitchReason"), ("CISCO-SONET-MIB", "csApsPrimarySection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetApsMIBGroup1 = ciscoSonetApsMIBGroup1.setStatus('current')
if mibBuilder.loadTexts: ciscoSonetApsMIBGroup1.setDescription('Objects used for configuring APS over Sonet lines. This group includes 3 new objects in addition to those in the deprecated group ciscoSonetApsMIBGroup.')
ciscoSonetConfMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 6)).setObjects(("CISCO-SONET-MIB", "csConfigLoopbackType"), ("CISCO-SONET-MIB", "csConfigXmtClockSource"), ("CISCO-SONET-MIB", "csConfigFrameScramble"), ("CISCO-SONET-MIB", "csConfigType"), ("CISCO-SONET-MIB", "csConfigRDIPType"), ("CISCO-SONET-MIB", "csConfigRDIVType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetConfMIBGroup1 = ciscoSonetConfMIBGroup1.setStatus('current')
if mibBuilder.loadTexts: ciscoSonetConfMIBGroup1.setDescription('Objects used for configuring Sonet lines.')
ciscoSonetVTConfMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 7)).setObjects(("CISCO-SONET-MIB", "csTributaryType"), ("CISCO-SONET-MIB", "csTributaryMappingType"), ("CISCO-SONET-MIB", "csTributaryFramingType"), ("CISCO-SONET-MIB", "csSignallingTransportMode"), ("CISCO-SONET-MIB", "csTributaryGroupingType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetVTConfMIBGroup = ciscoSonetVTConfMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSonetVTConfMIBGroup.setDescription('Objects used for configuring Sonet Virtual tributaries.')
ciscoSonetPathConfMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 8)).setObjects(("CISCO-SONET-MIB", "cspSonetPathPayload"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetPathConfMIBGroup = ciscoSonetPathConfMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSonetPathConfMIBGroup.setDescription('Objects used for configuring Sonet Paths.')
ciscoSonetNotifEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 9)).setObjects(("CISCO-SONET-MIB", "csNotificationsEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetNotifEnableGroup = ciscoSonetNotifEnableGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSonetNotifEnableGroup.setDescription('The collection of objects which enable notifications.')
ciscoSonetSectionNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 10)).setObjects(("CISCO-SONET-MIB", "ciscoSonetSectionStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetSectionNotifGroup = ciscoSonetSectionNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSonetSectionNotifGroup.setDescription('The collection of Section notifications which are required to be implemented.')
ciscoSonetLineNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 11)).setObjects(("CISCO-SONET-MIB", "ciscoSonetLineStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetLineNotifGroup = ciscoSonetLineNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSonetLineNotifGroup.setDescription('The collection of Line notifications which are required to be implemented.')
ciscoSonetPathNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 12)).setObjects(("CISCO-SONET-MIB", "ciscoSonetPathStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetPathNotifGroup = ciscoSonetPathNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSonetPathNotifGroup.setDescription('The collection of Path notifications which are required to be implemented.')
ciscoSonetVTNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 13)).setObjects(("CISCO-SONET-MIB", "ciscoSonetVTStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetVTNotifGroup = ciscoSonetVTNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSonetVTNotifGroup.setDescription('The collection of VT notifications which are required to be implemented.')
ciscoSonetPathConfMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 14)).setObjects(("CISCO-SONET-MIB", "cspTributaryMappingType"), ("CISCO-SONET-MIB", "cspSignallingTransportMode"), ("CISCO-SONET-MIB", "cspTributaryGroupingType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetPathConfMIBGroup1 = ciscoSonetPathConfMIBGroup1.setStatus('current')
if mibBuilder.loadTexts: ciscoSonetPathConfMIBGroup1.setDescription('Objects used for configuring Sonet Paths.')
ciscoSonetAu4Tug3Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 15)).setObjects(("CISCO-SONET-MIB", "csAu4Tug3Payload"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetAu4Tug3Group = ciscoSonetAu4Tug3Group.setStatus('current')
if mibBuilder.loadTexts: ciscoSonetAu4Tug3Group.setDescription('Objects used for configuring AU-4:TUG-3 paths.')
mibBuilder.exportSymbols("CISCO-SONET-MIB", cssTraceFailure=cssTraceFailure, ciscoSonetPathNotifGroup=ciscoSonetPathNotifGroup, csPath=csPath, cssTraceTable=cssTraceTable, csApsActiveLine=csApsActiveLine, cssTotalSEFSs=cssTotalSEFSs, csApsSigDegradeBER=csApsSigDegradeBER, cssTraceToExpect=cssTraceToExpect, cspTraceReceived=cspTraceReceived, csApsSigFaultBER=csApsSigFaultBER, ciscoSonetTraceMIBGroup=ciscoSonetTraceMIBGroup, cslFarEndTotalCVs=cslFarEndTotalCVs, csApsConfigTable=csApsConfigTable, cspFarEndTotalTable=cspFarEndTotalTable, cssTraceEntry=cssTraceEntry, cssLOFs=cssLOFs, csTributaryMappingType=csTributaryMappingType, ciscoSonetNotifEnableGroup=ciscoSonetNotifEnableGroup, ciscoSonetMIB=ciscoSonetMIB, csTributaryType=csTributaryType, cslTotalTable=cslTotalTable, cspTotalESs=cspTotalESs, csLine=csLine, PYSNMP_MODULE_ID=ciscoSonetMIB, csApsLineFailureCode=csApsLineFailureCode, ciscoSonetPathStatusChange=ciscoSonetPathStatusChange, csVTConfigTable=csVTConfigTable, cspFarEndTotalSESs=cspFarEndTotalSESs, ciscoSonetLineNotifGroup=ciscoSonetLineNotifGroup, csApsChannelProtocol=csApsChannelProtocol, csApsDirectionOperational=csApsDirectionOperational, cssTotalCVs=cssTotalCVs, csConfigEntry=csConfigEntry, ciscoSonetMIBCompliance3=ciscoSonetMIBCompliance3, cspFarEndTotalCVs=cspFarEndTotalCVs, cspTraceTable=cspTraceTable, cspTributaryMappingType=cspTributaryMappingType, ciscoSonetPathConfMIBGroup1=ciscoSonetPathConfMIBGroup1, cslTotalCVs=cslTotalCVs, cslFarEndTotalESs=cslFarEndTotalESs, csAu4Tug3ConfigEntry=csAu4Tug3ConfigEntry, csApsArchModeOperational=csApsArchModeOperational, csConfigXmtClockSource=csConfigXmtClockSource, cssTotalSESs=cssTotalSESs, cslFarEndTotalTable=cslFarEndTotalTable, cslTotalEntry=cslTotalEntry, csConfigRDIPType=csConfigRDIPType, ciscoSonetMIBConformance=ciscoSonetMIBConformance, cspTotalCVs=cspTotalCVs, cspTotalEntry=cspTotalEntry, csConfig=csConfig, cspConfigTable=cspConfigTable, csNotifications=csNotifications, cssLOSs=cssLOSs, ciscoSonetMIBObjects=ciscoSonetMIBObjects, cslFarEndTotalEntry=cslFarEndTotalEntry, cslRFIs=cslRFIs, csApsSwitchReason=csApsSwitchReason, csAu4Tug3=csAu4Tug3, cspTotalUASs=cspTotalUASs, cspFarEndTotalUASs=cspFarEndTotalUASs, csApsPrimarySection=csApsPrimarySection, cssTraceToTransmit=cssTraceToTransmit, cspFarEndTotalEntry=cspFarEndTotalEntry, csApsRevertive=csApsRevertive, csApsWorkingIndex=csApsWorkingIndex, csVTConfigEntry=csVTConfigEntry, cspTraceEntry=cspTraceEntry, ciscoSonetMIBCompliance=ciscoSonetMIBCompliance, csNotificationsEnabled=csNotificationsEnabled, ciscoSonetApsMIBGroup=ciscoSonetApsMIBGroup, ciscoSonetVTStatusChange=ciscoSonetVTStatusChange, cspSonetPathPayload=cspSonetPathPayload, cslFarEndTotalSESs=cslFarEndTotalSESs, cspTraceToExpect=cspTraceToExpect, csApsFailureStatus=csApsFailureStatus, cslTotalESs=cslTotalESs, ciscoSonetStatsMIBGroup=ciscoSonetStatsMIBGroup, cspFarEndTotalESs=cspFarEndTotalESs, csConfigLoopbackType=csConfigLoopbackType, cssTotalESs=cssTotalESs, csStatsEntry=csStatsEntry, cspTotalSESs=cspTotalSESs, ciscoSonetConfMIBGroup=ciscoSonetConfMIBGroup, cspTraceFailure=cspTraceFailure, cslAISs=cslAISs, csSignallingTransportMode=csSignallingTransportMode, ciscoSonetPathConfMIBGroup=ciscoSonetPathConfMIBGroup, cssTraceReceived=cssTraceReceived, csApsConfig=csApsConfig, ciscoSonetMIBNotifs=ciscoSonetMIBNotifs, cssTotalTable=cssTotalTable, ciscoSonetApsMIBGroup1=ciscoSonetApsMIBGroup1, csAu4Tug3Payload=csAu4Tug3Payload, csApsConfigEntry=csApsConfigEntry, csTributaryFramingType=csTributaryFramingType, csStats=csStats, csTributaryGroupingType=csTributaryGroupingType, ciscoSonetMIBGroups=ciscoSonetMIBGroups, ciscoSonetVTConfMIBGroup=ciscoSonetVTConfMIBGroup, cspRFIs=cspRFIs, cslFarEndTotalUASs=cslFarEndTotalUASs, csApsEnable=csApsEnable, ciscoSonetAu4Tug3Group=ciscoSonetAu4Tug3Group, csConfigType=csConfigType, csConfigRDIVType=csConfigRDIVType, csApsDirection=csApsDirection, csSection=csSection, ciscoSonetVTNotifGroup=ciscoSonetVTNotifGroup, cslTotalSESs=cslTotalSESs, ciscoSonetLineStatusChange=ciscoSonetLineStatusChange, csApsWaitToRestore=csApsWaitToRestore, csStatsTable=csStatsTable, ciscoSonetSectionStatusChange=ciscoSonetSectionStatusChange, ciscoSonetSectionNotifGroup=ciscoSonetSectionNotifGroup, ciscoSonetMIBCompliance2=ciscoSonetMIBCompliance2, CsApsLineFailureStatus=CsApsLineFailureStatus, CsApsLineSwitchReason=CsApsLineSwitchReason, cspConfig=cspConfig, csApsProtectionIndex=csApsProtectionIndex, cspAISs=cspAISs, csApsLineSwitchReason=csApsLineSwitchReason, cspTraceToTransmit=cspTraceToTransmit, cspConfigEntry=cspConfigEntry, cssTotalEntry=cssTotalEntry, csConfigTable=csConfigTable, cslTotalUASs=cslTotalUASs, csApsArchMode=csApsArchMode, ciscoSonetMIBCompliances=ciscoSonetMIBCompliances, cspSignallingTransportMode=cspSignallingTransportMode, ciscoSonetConfMIBGroup1=ciscoSonetConfMIBGroup1, csAu4Tug3Config=csAu4Tug3Config, CsApsLineFailureCode=CsApsLineFailureCode, cspTributaryGroupingType=cspTributaryGroupingType, csConfigFrameScramble=csConfigFrameScramble, cspTotalTable=cspTotalTable, csAu4Tug3ConfigTable=csAu4Tug3ConfigTable, ciscoSonetMIBCompliance1=ciscoSonetMIBCompliance1)
