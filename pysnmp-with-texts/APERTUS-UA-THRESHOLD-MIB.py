#
# PySNMP MIB module APERTUS-UA-THRESHOLD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APERTUS-UA-THRESHOLD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:23:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, NotificationType, MibIdentifier, IpAddress, Integer32, mib_2, Counter32, iso, ObjectIdentity, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "MibIdentifier", "IpAddress", "Integer32", "mib-2", "Counter32", "iso", "ObjectIdentity", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64", "Unsigned32")
DisplayString, TextualConvention, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "RowStatus")
internet = MibIdentifier((1, 3, 6, 1))
directory = MibIdentifier((1, 3, 6, 1, 1))
mgmt = MibIdentifier((1, 3, 6, 1, 2))
experimental = MibIdentifier((1, 3, 6, 1, 3))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
apertus = MibIdentifier((1, 3, 6, 1, 4, 1, 543))
isg = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3))
aperua = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3))
aperthresh = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 2))
aperThreshMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1))
aperThreshMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1))
aperThreshConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 1))
aperThreshDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 2))
aperThreshNode = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 3))
aperThreshConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("loading", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperThreshConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aperThreshConfigStatus.setDescription('Status of Universal Access server')
aperThreshConfigUpTime = MibScalar((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperThreshConfigUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: aperThreshConfigUpTime.setDescription('This value represents the time elapsed since the server was started in 1/100nths of a second.')
aperThreshDomainTable = MibTable((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: aperThreshDomainTable.setStatus('mandatory')
if mibBuilder.loadTexts: aperThreshDomainTable.setDescription('Domain information broken down domain name.')
aperThreshDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "APERTUS-UA-THRESHOLD-MIB", "aperThreshDomainName"))
if mibBuilder.loadTexts: aperThreshDomainEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aperThreshDomainEntry.setDescription('This table contains information on each of the load balance domains under its control.')
aperThreshDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperThreshDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: aperThreshDomainName.setDescription('The zone name for this load-balance domain.')
aperThreshDomainLbparms = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperThreshDomainLbparms.setStatus('mandatory')
if mibBuilder.loadTexts: aperThreshDomainLbparms.setDescription('The load-balance parameters for this load-balance domain.')
aperThreshDomainFreeSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperThreshDomainFreeSessions.setStatus('mandatory')
if mibBuilder.loadTexts: aperThreshDomainFreeSessions.setDescription('The number of total sessions report free for this zone.')
aperThreshDomainMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperThreshDomainMaxSessions.setStatus('mandatory')
if mibBuilder.loadTexts: aperThreshDomainMaxSessions.setDescription('The number of sessions, not including downed servers, possible for this zone.')
aperThreshDomainUpServers = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperThreshDomainUpServers.setStatus('mandatory')
if mibBuilder.loadTexts: aperThreshDomainUpServers.setDescription('The number of servers that are up at this time.')
aperThreshDomainDownServers = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperThreshDomainDownServers.setStatus('mandatory')
if mibBuilder.loadTexts: aperThreshDomainDownServers.setDescription('The number of servers in list that are marked as down at this time.')
aperThreshDomainCmpMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("absolute", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperThreshDomainCmpMethod.setStatus('mandatory')
if mibBuilder.loadTexts: aperThreshDomainCmpMethod.setDescription('The method used when comparing values within the zone. The percent(1) method indicates that balancing is done as a percentage of available resources. Absolute(2) indicates that the session values themselves are used during compares.')
aperThreshNodeTable = MibTable((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 3, 1), )
if mibBuilder.loadTexts: aperThreshNodeTable.setStatus('mandatory')
if mibBuilder.loadTexts: aperThreshNodeTable.setDescription('Node information broken down domain name and IP address')
aperThreshNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 3, 1, 1), ).setIndexNames((0, "APERTUS-UA-THRESHOLD-MIB", "aperThreshNodeName"), (0, "APERTUS-UA-THRESHOLD-MIB", "aperThreshNodeIP"))
if mibBuilder.loadTexts: aperThreshNodeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aperThreshNodeEntry.setDescription('This table contains information on each of the machines in the different laod balance zones.')
aperThreshNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperThreshNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: aperThreshNodeName.setDescription('The zone name for this Node.')
aperThreshNodeIP = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperThreshNodeIP.setStatus('mandatory')
if mibBuilder.loadTexts: aperThreshNodeIP.setDescription('The IP address of the NODE.')
aperThreshNodeThresholdPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperThreshNodeThresholdPercent.setStatus('mandatory')
if mibBuilder.loadTexts: aperThreshNodeThresholdPercent.setDescription('This value is the threshold percentage at which this node becomes available for consideration. All nodes with less threshold percentage than this must be either down or at this percentage of usage before the NODE processess for this IP will be queried for status. At least one 0% node must exist for the domain to function.')
aperThreshNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notqueried", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperThreshNodeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aperThreshNodeStatus.setDescription('Indicates the status of the node. Up(1) shows that the node is up and is being considered for use. Down(2) indicates that the last query to the NODE image resulted in a down marker for the node. Admindown(3) indicates that an administrator took the node offline manually (from the UA server end). Notqueried(4) is used to indicate that a node has never been queried. This is normally the case when threshold percentages are being used.')
aperThreshNodeSessionsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperThreshNodeSessionsAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: aperThreshNodeSessionsAvailable.setDescription('Number of session available at last query. If Status is not up(1), this value may be inaccurate.')
aperThreshNodeSessionsPossible = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperThreshNodeSessionsPossible.setStatus('mandatory')
if mibBuilder.loadTexts: aperThreshNodeSessionsPossible.setDescription('Number of sessions possible for this node. If Status is not up(1), this value may be inaccurate.')
aperThreshNodeHandFasted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 2, 1, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperThreshNodeHandFasted.setStatus('mandatory')
if mibBuilder.loadTexts: aperThreshNodeHandFasted.setDescription('Number of sessions assigned to this node for which a NODE query has not resolved.')
mibBuilder.exportSymbols("APERTUS-UA-THRESHOLD-MIB", aperthresh=aperthresh, internet=internet, aperThreshNodeSessionsAvailable=aperThreshNodeSessionsAvailable, aperua=aperua, aperThreshDomainMaxSessions=aperThreshDomainMaxSessions, isg=isg, aperThreshNodeSessionsPossible=aperThreshNodeSessionsPossible, aperThreshDomain=aperThreshDomain, aperThreshNodeName=aperThreshNodeName, enterprises=enterprises, aperThreshDomainUpServers=aperThreshDomainUpServers, aperThreshNodeEntry=aperThreshNodeEntry, aperThreshDomainDownServers=aperThreshDomainDownServers, aperThreshMIB=aperThreshMIB, aperThreshNodeThresholdPercent=aperThreshNodeThresholdPercent, aperThreshNodeStatus=aperThreshNodeStatus, mgmt=mgmt, private=private, aperThreshNode=aperThreshNode, aperThreshDomainCmpMethod=aperThreshDomainCmpMethod, aperThreshDomainName=aperThreshDomainName, aperThreshDomainTable=aperThreshDomainTable, aperThreshNodeHandFasted=aperThreshNodeHandFasted, aperThreshConfigStatus=aperThreshConfigStatus, experimental=experimental, aperThreshDomainFreeSessions=aperThreshDomainFreeSessions, aperThreshConfigUpTime=aperThreshConfigUpTime, aperThreshDomainLbparms=aperThreshDomainLbparms, directory=directory, apertus=apertus, aperThreshConfig=aperThreshConfig, aperThreshMIBObjects=aperThreshMIBObjects, aperThreshNodeIP=aperThreshNodeIP, aperThreshDomainEntry=aperThreshDomainEntry, aperThreshNodeTable=aperThreshNodeTable)
