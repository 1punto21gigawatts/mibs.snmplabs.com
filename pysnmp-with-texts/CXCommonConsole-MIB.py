#
# PySNMP MIB module CXCommonConsole-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXCommonConsole-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:32:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
cxCommonConsole, Alias = mibBuilder.importSymbols("CXProduct-SMI", "cxCommonConsole", "Alias")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, NotificationType, ObjectIdentity, IpAddress, ModuleIdentity, Counter32, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, Counter64, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "ObjectIdentity", "IpAddress", "ModuleIdentity", "Counter32", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "Counter64", "iso", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cxCcInactivityTimer = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 1), Integer32().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCcInactivityTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cxCcInactivityTimer.setDescription('Determines the amount of time (in seconds) that the Common Console will wait for input before terminating a user session. The user must logon again and start a new session to continue. Range of Values: 10 - 65,535 Default Value: 300 Configuration Changed: operative')
cxCcPassword = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 16)).clone('Supervisor')).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cxCcPassword.setStatus('mandatory')
if mibBuilder.loadTexts: cxCcPassword.setDescription('Determines the password required to logon through the CX1000 console port to the Common Console module. The password must be between 6 and 16 alphanumeric characters in length. Default Value: supervisor Configuration Changed: operative')
cxCcPrompt = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)).clone('Common Console')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCcPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: cxCcPrompt.setDescription('Determines the prompt that will appear after logging on to and establishing a session with the Common Console to prompt the user for the next command. Range of Values: from 1 to 16 alphanumeric characters Default Value: Common Console Configuration Changed: operative')
cxCcLogDevice = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCcLogDevice.setStatus('mandatory')
if mibBuilder.loadTexts: cxCcLogDevice.setDescription("Establishes the operational status (enabled or disabled) of the logging device within the chassis. If enabled, the Common Console will send system-generated messages to a log located in 'cxCcLogDeviceSlot'. Options: disabled (1): no events written to the log file enabled (2): events written to the log file Default Value: enabled (2) Related Objects: cxCcLogDeviceSlot Configuration Changed: operative")
cxCcLogDeviceSlot = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCcLogDeviceSlot.setStatus('mandatory')
if mibBuilder.loadTexts: cxCcLogDeviceSlot.setDescription("Establishes the physical slot number in the local chassis where the logging device is located. All log messages produced locally are routed to this slot. However, if this slot is more than one hop away from the current Common Console, messages are discarded. If the value of this object is set to '0', the console considers that there is no logging device in this chassis and sends log messages to all endpoints connected to the local User Interface. Range of Values: 1 - 16 Default Value: 0 Configuration Changed: operative")
cxCcQueueDepth = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCcQueueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: cxCcQueueDepth.setDescription("Determines the maximum number of log messages that are retained in the console device output when the console device is flow-controlled (XOFF'ed). Once the maximum number of log messages is attained, the Common Console module discards new log messages targeted for the console device. Range of Values: 0 - 218 Default Value: 0 Configuration Changed: administrative")
cxCcRemoteTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 7), )
if mibBuilder.loadTexts: cxCcRemoteTable.setStatus('mandatory')
if mibBuilder.loadTexts: cxCcRemoteTable.setDescription('A table containing the locally defined network access required to connect to the remote Common Console module.')
cxCcRemoteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 7, 1), ).setIndexNames((0, "CXCommonConsole-MIB", "cxCcRemoteIndex"))
if mibBuilder.loadTexts: cxCcRemoteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cxCcRemoteEntry.setDescription('Entry defining the network access.')
cxCcRemoteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxCcRemoteIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cxCcRemoteIndex.setDescription('Index for table management only. No other MIB object refers to this index.')
cxCcRemoteDestAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 7, 1, 2), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCcRemoteDestAlias.setStatus('mandatory')
if mibBuilder.loadTexts: cxCcRemoteDestAlias.setDescription('Identifies the name used to query the IAM module to resolve the location of this network service. Range of Values: 0 to 15 alphanumeric characters beginning with an alphabetic character Configuration Changed: operative')
cxCcRemoteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCcRemoteRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cxCcRemoteRowStatus.setDescription("Indicates if this entry in the table is valid. The entry may be deleted when this object is set to 'invalid'. Once deleted, the entry can not be read back. Options: invalid (1): entry can be deleted valid (2): entry is still in use and should not be deleted Default Value: valid (2) Configuration Changed: administrative")
mibBuilder.exportSymbols("CXCommonConsole-MIB", cxCcLogDeviceSlot=cxCcLogDeviceSlot, cxCcPassword=cxCcPassword, cxCcInactivityTimer=cxCcInactivityTimer, cxCcRemoteEntry=cxCcRemoteEntry, cxCcRemoteIndex=cxCcRemoteIndex, cxCcRemoteTable=cxCcRemoteTable, cxCcRemoteRowStatus=cxCcRemoteRowStatus, cxCcQueueDepth=cxCcQueueDepth, cxCcPrompt=cxCcPrompt, cxCcRemoteDestAlias=cxCcRemoteDestAlias, cxCcLogDevice=cxCcLogDevice)
