#
# PySNMP MIB module HIST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HIST-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:31:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, TimeTicks, Gauge32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32, Integer32, Counter32, ObjectIdentity, NotificationType, MibIdentifier, experimental, IpAddress, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "Gauge32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32", "Integer32", "Counter32", "ObjectIdentity", "NotificationType", "MibIdentifier", "experimental", "IpAddress", "Counter64", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
mdmHist = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 30))
mdmNacHistCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 30, 1), )
if mibBuilder.loadTexts: mdmNacHistCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmNacHistCurrentTable.setDescription('')
mdmNacHistCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 30, 1, 1), ).setIndexNames((0, "HIST-MIB", "mdmNacHistCurrentIndex"))
if mibBuilder.loadTexts: mdmNacHistCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmNacHistCurrentEntry.setDescription('Objects that define the history stats for NAC current interval.')
mdmNacHistCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmNacHistCurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmNacHistCurrentIndex.setDescription('Index in to the Current NAC History table. This index contains a unique value for each card in the chassis.')
mdmNacHistCurrentStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmNacHistCurrentStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmNacHistCurrentStartTime.setDescription('Specifies current interval start time in GMT.')
mdmNacHistCurrentMgmtBusFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmNacHistCurrentMgmtBusFailures.setStatus('mandatory')
if mibBuilder.loadTexts: mdmNacHistCurrentMgmtBusFailures.setDescription('Specifies number of Management Bus Failures occurred in the NAC during current interval so for.')
mdmNacHistCurrentWatchdogTimouts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmNacHistCurrentWatchdogTimouts.setStatus('mandatory')
if mibBuilder.loadTexts: mdmNacHistCurrentWatchdogTimouts.setDescription('Specifies number of Watchdog Timeouts occurred in the NAC during current interval so for.')
mdmNacHistIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 30, 2), )
if mibBuilder.loadTexts: mdmNacHistIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmNacHistIntervalTable.setDescription('')
mdmNacHistIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 30, 2, 1), ).setIndexNames((0, "HIST-MIB", "mdmNacHistIntervalIndex"), (0, "HIST-MIB", "mdmNacHistIntervalNumber"))
if mibBuilder.loadTexts: mdmNacHistIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmNacHistIntervalEntry.setDescription('Objects that define history stats for NAC intervals.')
mdmNacHistIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmNacHistIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmNacHistIntervalIndex.setDescription('Index in to NAC Interval History table. This index contains a unique value for each card in the chassis.')
mdmNacHistIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 104))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmNacHistIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mdmNacHistIntervalNumber.setDescription('This object is the index for one of 104 possibel history intervals for this NAC.')
mdmNacHistIntervalStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmNacHistIntervalStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmNacHistIntervalStartTime.setDescription('Specifies interval start time in GMT.')
mdmNacHistIntervalMgmtBusFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmNacHistIntervalMgmtBusFailures.setStatus('mandatory')
if mibBuilder.loadTexts: mdmNacHistIntervalMgmtBusFailures.setDescription('Specifies number of Management Bus Failures occurred in the NAC during the interval.')
mdmNacHistIntervalWatchdogTimouts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmNacHistIntervalWatchdogTimouts.setStatus('mandatory')
if mibBuilder.loadTexts: mdmNacHistIntervalWatchdogTimouts.setDescription('Specifies number of Watchdog Timeouts occurred in the NAC during the interval.')
mdmHistCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 30, 3), )
if mibBuilder.loadTexts: mdmHistCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistCurrentTable.setDescription('')
mdmHistCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 30, 3, 1), ).setIndexNames((0, "HIST-MIB", "mdmHistCurrentIndex"))
if mibBuilder.loadTexts: mdmHistCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistCurrentEntry.setDescription('Objects that define the history stats for modem current interval.')
mdmHistCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistCurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistCurrentIndex.setDescription('Index in to the Current modem history table. This index contains the unique value associated with the modem as defined in the chassis MIB entity table.')
mdmHistCurrentStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistCurrentStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistCurrentStartTime.setDescription('Specifies current interval start time in GMT.')
mdmHistCurrentInConnectEstabs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistCurrentInConnectEstabs.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistCurrentInConnectEstabs.setDescription('Specifies number of incoming calls established during current interval so for.')
mdmHistCurrentInConnectFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistCurrentInConnectFailures.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistCurrentInConnectFailures.setDescription('Specifies number of incoming call failures during current interval so for.')
mdmHistCurrentInConnectTerms = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistCurrentInConnectTerms.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistCurrentInConnectTerms.setDescription('Specifies number of incoming calls terminated during current interval so for.')
mdmHistCurrentInConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistCurrentInConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistCurrentInConnectTime.setDescription('Specifies length of all incoming calls during current interval so for.')
mdmHistCurrentInTotalBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistCurrentInTotalBytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistCurrentInTotalBytesRx.setDescription('Specifies number of bytes received through incoming calls during current interval so for.')
mdmHistCurrentInTotalBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistCurrentInTotalBytesTx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistCurrentInTotalBytesTx.setDescription('Specifies number of bytes sent out through incoming calls during current interval so for.')
mdmHistCurrentOutConnectEstabs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistCurrentOutConnectEstabs.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistCurrentOutConnectEstabs.setDescription('Specifies number of outgoing calls established during current interval so for.')
mdmHistCurrentOutConnectFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistCurrentOutConnectFailures.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistCurrentOutConnectFailures.setDescription('Specifies number of outgoing call failures during current interval so for.')
mdmHistCurrentOutConnectTerms = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistCurrentOutConnectTerms.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistCurrentOutConnectTerms.setDescription('Specifies number of outgoing calls terminated during current interval so for.')
mdmHistCurrentOutConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistCurrentOutConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistCurrentOutConnectTime.setDescription('Specifies length of all outgoing calls during current interval so for.')
mdmHistCurrentOutTotalBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistCurrentOutTotalBytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistCurrentOutTotalBytesRx.setDescription('Specifies number of bytes received through outgoing calls during current interval so for.')
mdmHistCurrentOutTotalBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistCurrentOutTotalBytesTx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistCurrentOutTotalBytesTx.setDescription('Specifies number of bytes sent out through outgoing calls during current interval so for.')
mdmHistCurrentBlers = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 3, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistCurrentBlers.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistCurrentBlers.setDescription('Specifies number of block errors received during current interval so for.')
mdmHistCurrentFallBacks = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistCurrentFallBacks.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistCurrentFallBacks.setDescription('Specifies number of link speed fallbacks occured during current interval so for.')
mdmHistIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 30, 4), )
if mibBuilder.loadTexts: mdmHistIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistIntervalTable.setDescription('')
mdmHistIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 30, 4, 1), ).setIndexNames((0, "HIST-MIB", "mdmHistIntervalIndex"), (0, "HIST-MIB", "mdmHistIntervalNumber"))
if mibBuilder.loadTexts: mdmHistIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistIntervalEntry.setDescription('Objects that define history stats for modem intervals.')
mdmHistIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistIntervalIndex.setDescription('Index in to the interval History table. This index contains the unique value associated with the modem as defined in the chassis MIB entity table.')
mdmHistIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 104))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistIntervalNumber.setDescription('This object is the index for one of 104 possibel history intervals for this modem.')
mdmHistIntervalStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistIntervalStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistIntervalStartTime.setDescription('Specifies interval start time in GMT.')
mdmHistIntervalInConnectEstabs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistIntervalInConnectEstabs.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistIntervalInConnectEstabs.setDescription('Specifies number of incoming calls established during the interval.')
mdmHistIntervalInConnectFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistIntervalInConnectFailures.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistIntervalInConnectFailures.setDescription('Specifies number of incoming call failures during the interval.')
mdmHistIntervalInConnectTerms = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistIntervalInConnectTerms.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistIntervalInConnectTerms.setDescription('Specifies number of incoming calls terminated during the interval.')
mdmHistIntervalInConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistIntervalInConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistIntervalInConnectTime.setDescription('Specifies length of all incoming calls during the intervals.')
mdmHistIntervalInTotalBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistIntervalInTotalBytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistIntervalInTotalBytesRx.setDescription('Specifies number of bytes received through incoming calls during the interval.')
mdmHistIntervalInTotalBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistIntervalInTotalBytesTx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistIntervalInTotalBytesTx.setDescription('Specifies number of bytes sent out through incoming calls during the interval.')
mdmHistIntervalOutConnectEstabs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistIntervalOutConnectEstabs.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistIntervalOutConnectEstabs.setDescription('Specifies number of outgoing calls established during the interval.')
mdmHistIntervalOutConnectFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 4, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistIntervalOutConnectFailures.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistIntervalOutConnectFailures.setDescription('Specifies number of outgoing call failures during the interval.')
mdmHistIntervalOutConnectTerms = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 4, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistIntervalOutConnectTerms.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistIntervalOutConnectTerms.setDescription('Specifies number of outgoing calls terminated during the interval.')
mdmHistIntervalOutConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistIntervalOutConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistIntervalOutConnectTime.setDescription('Specifies length of all outgoing calls during the interval.')
mdmHistIntervalOutTotalBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 4, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistIntervalOutTotalBytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistIntervalOutTotalBytesRx.setDescription('Specifies number of bytes received through outgoing calls during the interval.')
mdmHistIntervalOutTotalBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistIntervalOutTotalBytesTx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistIntervalOutTotalBytesTx.setDescription('Specifies number of bytes sent out through outgoing calls during the interval.')
mdmHistIntervalBlers = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistIntervalBlers.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistIntervalBlers.setDescription('Specifies number of block errors received during the interval.')
mdmHistIntervalFallBacks = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 30, 4, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHistIntervalFallBacks.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHistIntervalFallBacks.setDescription('Specifies number of link speed fallbacks occured during the interval.')
mibBuilder.exportSymbols("HIST-MIB", mdmHistCurrentOutTotalBytesTx=mdmHistCurrentOutTotalBytesTx, mdmHistCurrentOutConnectEstabs=mdmHistCurrentOutConnectEstabs, mdmHistIntervalInConnectFailures=mdmHistIntervalInConnectFailures, mdmHistIntervalOutTotalBytesRx=mdmHistIntervalOutTotalBytesRx, mdmHistCurrentOutTotalBytesRx=mdmHistCurrentOutTotalBytesRx, mdmNacHistCurrentWatchdogTimouts=mdmNacHistCurrentWatchdogTimouts, mdmHistCurrentBlers=mdmHistCurrentBlers, mdmHistIntervalStartTime=mdmHistIntervalStartTime, mdmHistIntervalTable=mdmHistIntervalTable, mdmHistCurrentInConnectTime=mdmHistCurrentInConnectTime, mdmHistCurrentOutConnectTime=mdmHistCurrentOutConnectTime, mdmHistIntervalInTotalBytesTx=mdmHistIntervalInTotalBytesTx, mdmHistIntervalBlers=mdmHistIntervalBlers, mdmHistCurrentInConnectEstabs=mdmHistCurrentInConnectEstabs, mdmHistIntervalOutTotalBytesTx=mdmHistIntervalOutTotalBytesTx, mdmHistIntervalInConnectTerms=mdmHistIntervalInConnectTerms, mdmHistCurrentTable=mdmHistCurrentTable, mdmHistCurrentEntry=mdmHistCurrentEntry, mdmNacHistIntervalMgmtBusFailures=mdmNacHistIntervalMgmtBusFailures, mdmHistCurrentOutConnectFailures=mdmHistCurrentOutConnectFailures, nas=nas, mdmHistCurrentInTotalBytesRx=mdmHistCurrentInTotalBytesRx, mdmNacHistIntervalWatchdogTimouts=mdmNacHistIntervalWatchdogTimouts, mdmHistCurrentInConnectFailures=mdmHistCurrentInConnectFailures, mdmNacHistCurrentIndex=mdmNacHistCurrentIndex, mdmHistIntervalNumber=mdmHistIntervalNumber, mdmHistCurrentStartTime=mdmHistCurrentStartTime, mdmHistIntervalOutConnectEstabs=mdmHistIntervalOutConnectEstabs, mdmNacHistCurrentEntry=mdmNacHistCurrentEntry, mdmNacHistIntervalTable=mdmNacHistIntervalTable, mdmHistIntervalOutConnectTime=mdmHistIntervalOutConnectTime, mdmNacHistCurrentStartTime=mdmNacHistCurrentStartTime, mdmHistCurrentFallBacks=mdmHistCurrentFallBacks, mdmHistIntervalFallBacks=mdmHistIntervalFallBacks, mdmNacHistCurrentTable=mdmNacHistCurrentTable, mdmHistCurrentOutConnectTerms=mdmHistCurrentOutConnectTerms, mdmHistCurrentIndex=mdmHistCurrentIndex, mdmHistCurrentInConnectTerms=mdmHistCurrentInConnectTerms, mdmHistCurrentInTotalBytesTx=mdmHistCurrentInTotalBytesTx, mdmHistIntervalInConnectTime=mdmHistIntervalInConnectTime, mdmHistIntervalIndex=mdmHistIntervalIndex, mdmNacHistCurrentMgmtBusFailures=mdmNacHistCurrentMgmtBusFailures, usr=usr, mdmNacHistIntervalNumber=mdmNacHistIntervalNumber, mdmNacHistIntervalStartTime=mdmNacHistIntervalStartTime, mdmHistIntervalInConnectEstabs=mdmHistIntervalInConnectEstabs, mdmHistIntervalInTotalBytesRx=mdmHistIntervalInTotalBytesRx, mdmHistIntervalOutConnectFailures=mdmHistIntervalOutConnectFailures, mdmHist=mdmHist, mdmHistIntervalOutConnectTerms=mdmHistIntervalOutConnectTerms, mdmHistIntervalEntry=mdmHistIntervalEntry, mdmNacHistIntervalEntry=mdmNacHistIntervalEntry, mdmNacHistIntervalIndex=mdmNacHistIntervalIndex)
