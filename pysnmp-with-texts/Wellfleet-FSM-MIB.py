#
# PySNMP MIB module Wellfleet-FSM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-FSM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:40:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, ModuleIdentity, Unsigned32, Gauge32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, Counter64, iso, NotificationType, MibIdentifier, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "Unsigned32", "Gauge32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "Counter64", "iso", "NotificationType", "MibIdentifier", "Integer32", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfFileSystemGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfFileSystemGroup")
wfFsBase = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 1))
wfFsVolLastUpdated = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsVolLastUpdated.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsVolLastUpdated.setDescription('Date and time the volume table was last updated')
wfFsVols = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsVols.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsVols.setDescription('The number of rows in the volume table')
wfFsVolTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 2), )
if mibBuilder.loadTexts: wfFsVolTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsVolTable.setDescription('Volume table')
wfFsVolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 2, 1), ).setIndexNames((0, "Wellfleet-FSM-MIB", "wfFsVolID"))
if mibBuilder.loadTexts: wfFsVolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsVolEntry.setDescription('A row in the Volume table')
wfFsVolID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsVolID.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsVolID.setDescription('Volume number')
wfFsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsSlot.setDescription('Processor owning the volume')
wfFsType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dos", 1), ("nvfs", 2), ("unix", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsType.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsType.setDescription('Type of volume - DOS, NVFS or UNIX')
wfFsRemoveable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("remove", 1), ("fixed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsRemoveable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsRemoveable.setDescription('Can this file system be removed or is it a fixed file system')
wfFsAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("readonly", 2), ("readwrite", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsAccess.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsAccess.setDescription("Read only or read-write file system. DOS file systems are always set to unknown since we can't tell what the state is until we actually try to write to the disk.")
wfFsState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("corrupt", 2), ("busy", 3), ("present", 4), ("incomplete", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsState.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsState.setDescription("The state that the file system is in. If it is corrupted then it is unusable, if it is busy, the MIB is being updated. Floppy not present is a state used in DOS only and means that the floppy isn't there or we couldn't mount it. Incomplete means that we got a mount for a DOS floppy duing boot, but because of 30 second timeouts in DOS, we are not willing to take the hit during boot. Fill in minimal information and let Site Manager do the 'DIR' that will fill in the rest.")
wfFsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsSize.setDescription('Physical size in bytes')
wfFsFreeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsFreeSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsFreeSize.setDescription('Total available bytes')
wfFsContigFree = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsContigFree.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsContigFree.setDescription('The amount of contiguous bytes free. In DOS and UNIX, contiguous = free. In NVFS, this may not be true.')
wfFsNumFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsNumFiles.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsNumFiles.setDescription('The number of files on this volume')
wfFsLastWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsLastWritten.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsLastWritten.setDescription('The last time a write request was written to this volume')
wfFsBecameActive = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsBecameActive.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsBecameActive.setDescription('The date and time this volume became active')
wfFsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("dir", 1), ("format", 2), ("compact", 3), ("purge", 4), ("partcre", 5), ("partdel", 6), ("noaction", 7))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFsAction.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsAction.setDescription('When set, performs a volume command (compact, format, dir, purge)')
wfFsActionArg = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 2, 1, 14), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFsActionArg.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsActionArg.setDescription('Optional argument for directory action for viewing file hierarchies')
wfFsPercentDone = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsPercentDone.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsPercentDone.setDescription('Percent of task completed')
wfFsDirBase = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 3))
wfFsDirEntries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsDirEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsDirEntries.setDescription('Number of entries in the directory table')
wfFsDirLastUpdated = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 3, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsDirLastUpdated.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsDirLastUpdated.setDescription('Time the directory table was last updated')
wfFsDirTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 5), )
if mibBuilder.loadTexts: wfFsDirTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsDirTable.setDescription('Directory table')
wfFsDirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 5, 1), ).setIndexNames((0, "Wellfleet-FSM-MIB", "wfFsDirVolID"), (0, "Wellfleet-FSM-MIB", "wfFsDirFileIndex"))
if mibBuilder.loadTexts: wfFsDirEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsDirEntry.setDescription('An entry in the directory table')
wfFsDirVolID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsDirVolID.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsDirVolID.setDescription('Volume number that this directory entry is contained on')
wfFsDirFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 5, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsDirFileIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsDirFileIndex.setDescription('Hierarchical file index')
wfFsDirFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsDirFileName.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsDirFileName.setDescription('Name of the file')
wfFsDirCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsDirCreated.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsDirCreated.setDescription('When the file was created')
wfFsDirFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsDirFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsDirFileSize.setDescription('Size of the file')
wfFsDirFileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 12, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFsDirFileMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfFsDirFileMask.setDescription('Access mode on file for UNIX and DOS file systems')
mibBuilder.exportSymbols("Wellfleet-FSM-MIB", wfFsRemoveable=wfFsRemoveable, wfFsDirLastUpdated=wfFsDirLastUpdated, wfFsAccess=wfFsAccess, wfFsDirEntry=wfFsDirEntry, wfFsContigFree=wfFsContigFree, wfFsFreeSize=wfFsFreeSize, wfFsAction=wfFsAction, wfFsDirCreated=wfFsDirCreated, wfFsDirFileSize=wfFsDirFileSize, wfFsVolID=wfFsVolID, wfFsState=wfFsState, wfFsLastWritten=wfFsLastWritten, wfFsPercentDone=wfFsPercentDone, wfFsDirTable=wfFsDirTable, wfFsBecameActive=wfFsBecameActive, wfFsSlot=wfFsSlot, wfFsDirFileMask=wfFsDirFileMask, wfFsDirVolID=wfFsDirVolID, wfFsDirFileIndex=wfFsDirFileIndex, wfFsVolTable=wfFsVolTable, wfFsType=wfFsType, wfFsDirBase=wfFsDirBase, wfFsActionArg=wfFsActionArg, wfFsNumFiles=wfFsNumFiles, wfFsDirEntries=wfFsDirEntries, wfFsSize=wfFsSize, wfFsVolLastUpdated=wfFsVolLastUpdated, wfFsVols=wfFsVols, wfFsDirFileName=wfFsDirFileName, wfFsBase=wfFsBase, wfFsVolEntry=wfFsVolEntry)
