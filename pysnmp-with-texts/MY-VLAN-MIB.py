#
# PySNMP MIB module MY-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MY-VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:16:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
myMgmt, = mibBuilder.importSymbols("MY-SMI", "myMgmt")
ConfigStatus, IfIndex, MemberMap = mibBuilder.importSymbols("MY-TC", "ConfigStatus", "IfIndex", "MemberMap")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
VlanId, PortList = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId", "PortList")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, Gauge32, Counter64, NotificationType, Integer32, MibIdentifier, iso, Counter32, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "Counter64", "NotificationType", "Integer32", "MibIdentifier", "iso", "Counter32", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "IpAddress")
RowStatus, DisplayString, MacAddress, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "MacAddress", "TruthValue", "TextualConvention")
myVlanMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9))
myVlanMIB.setRevisions(('2002-03-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: myVlanMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: myVlanMIB.setLastUpdated('200203200000Z')
if mibBuilder.loadTexts: myVlanMIB.setOrganization('D-Link Crop.')
if mibBuilder.loadTexts: myVlanMIB.setContactInfo(' http://support.dlink.com')
if mibBuilder.loadTexts: myVlanMIB.setDescription('This module defines my vlan mibs.')
myVlanMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1))
class VlanList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight vlans, with the first octet specifying vlans 1 through 8, the second octet specifying vlans 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered vlan, and the least significant bit represents the highest numbered vlan. Thus, each vlan of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1', then that vlan is included in the set of vlans; the vlan is not included if its bit has a value of '0'."
    status = 'current'

myVlanMaxNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myVlanMaxNumber.setStatus('current')
if mibBuilder.loadTexts: myVlanMaxNumber.setDescription('Number of MAX vlans this system supported.')
myVlanCurrentNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myVlanCurrentNumber.setStatus('current')
if mibBuilder.loadTexts: myVlanCurrentNumber.setDescription('Number of current vlans this system have.')
mySystemMaxVID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemMaxVID.setStatus('current')
if mibBuilder.loadTexts: mySystemMaxVID.setDescription('Max vlans of VID this system supported.')
myVlanIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 4), )
if mibBuilder.loadTexts: myVlanIfConfigTable.setStatus('obsolete')
if mibBuilder.loadTexts: myVlanIfConfigTable.setDescription('vlan table.')
myVlanIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 4, 1), ).setIndexNames((0, "MY-VLAN-MIB", "myVlanIfConfigIfIndex"))
if mibBuilder.loadTexts: myVlanIfConfigEntry.setStatus('obsolete')
if mibBuilder.loadTexts: myVlanIfConfigEntry.setDescription("list of vlan and it's port group table.")
myVlanIfConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 4, 1, 1), IfIndex())
if mibBuilder.loadTexts: myVlanIfConfigIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: myVlanIfConfigIfIndex.setDescription(' ')
myVlanIfAccessVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 4, 1, 2), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myVlanIfAccessVlan.setStatus('obsolete')
if mibBuilder.loadTexts: myVlanIfAccessVlan.setDescription('The value indicate the VID of the vlan which that this port belong to. This field is effective for only access port.')
myVlanIfNativeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 4, 1, 3), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myVlanIfNativeVlan.setStatus('obsolete')
if mibBuilder.loadTexts: myVlanIfNativeVlan.setDescription('The value indicate the VID of the native vlan of that this port . This field is effective for only trunk port.')
myVlanIfAllowedVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 512)).setFixedLength(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myVlanIfAllowedVlanList.setStatus('obsolete')
if mibBuilder.loadTexts: myVlanIfAllowedVlanList.setDescription('Each bit in every octet in octet string assigned to a vlan, the value of the bit indicates that if the vlan is belong to allowed vlan list of this interface. It indicates that assigned vlan is member of allowed vlan list of this interface if value of the bit is 1. The lowest bit of first byte correspond to vlan 1 and the lowest bit of second byte correspond to vlan 9 vlan. This field is effective for only trunk port.')
myVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 5), )
if mibBuilder.loadTexts: myVlanTable.setStatus('obsolete')
if mibBuilder.loadTexts: myVlanTable.setDescription('vlan table.')
myVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 5, 1), ).setIndexNames((0, "MY-VLAN-MIB", "myVlanVID"))
if mibBuilder.loadTexts: myVlanEntry.setStatus('obsolete')
if mibBuilder.loadTexts: myVlanEntry.setDescription("list of vlan and it's distribution table.")
myVlanVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 5, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myVlanVID.setStatus('obsolete')
if mibBuilder.loadTexts: myVlanVID.setDescription('VID of vlan .')
myVlanPortMemberAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 5, 1, 2), MemberMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myVlanPortMemberAction.setStatus('obsolete')
if mibBuilder.loadTexts: myVlanPortMemberAction.setDescription("Each octet in member map assigned to a physical port, the value of the octect indicates the action of a physical port in the vlan. Drop(1) indicate that the vlan doesn't include this physical port, Add(2) indicate that the vlan include this physical port.")
myVlanApMemberAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 5, 1, 3), MemberMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myVlanApMemberAction.setStatus('obsolete')
if mibBuilder.loadTexts: myVlanApMemberAction.setDescription("Each octet in member map assigned to a aggreate port, the value of the octect indicates the action of a aggreate port in the vlan. Drop(1) indicate that the vlan doesn't include this physical port, Add(2) indicate that the vlan include this physical port.")
myVlanAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myVlanAlias.setStatus('obsolete')
if mibBuilder.loadTexts: myVlanAlias.setDescription("Vlan's alias .")
myVlanEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 5, 1, 5), ConfigStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: myVlanEntryStatus.setStatus('obsolete')
if mibBuilder.loadTexts: myVlanEntryStatus.setDescription('Status of this entry, set this object to valid will creat a vlan of this entry, and set its value to invalid will delete the vlan of this entry.')
myVlanPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 6), )
if mibBuilder.loadTexts: myVlanPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: myVlanPortConfigTable.setDescription('The table of VLAN members.')
myVlanPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 6, 1), ).setIndexNames((0, "MY-VLAN-MIB", "myVlanPortConfigIndex"))
if mibBuilder.loadTexts: myVlanPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: myVlanPortConfigEntry.setDescription('list of ports.')
myVlanPortConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 6, 1, 1), IfIndex())
if mibBuilder.loadTexts: myVlanPortConfigIndex.setStatus('current')
if mibBuilder.loadTexts: myVlanPortConfigIndex.setDescription('port index')
myVlanPortConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("access", 1), ("trunk", 2), ("dot1q-tunnel", 3), ("hybrid", 4), ("other", 5), ("uplink", 6), ("host", 7), ("promiscuous", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myVlanPortConfigMode.setStatus('current')
if mibBuilder.loadTexts: myVlanPortConfigMode.setDescription('Port mode, indicates that port is an access(1), trunk(2), dot1q-tunnel(3), hybrid(4), other(5), uplink(6), host(7) or promiscuous(8) port.')
myVlanPortAccessVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 6, 1, 3), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myVlanPortAccessVlan.setStatus('current')
if mibBuilder.loadTexts: myVlanPortAccessVlan.setDescription('The value indicate the VID of the vlan which that this port belong to. This field is effective for only access port.')
myVlanPortNativeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 6, 1, 4), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myVlanPortNativeVlan.setStatus('current')
if mibBuilder.loadTexts: myVlanPortNativeVlan.setDescription('The value indicate the VID of the native vlan of that this port . This field is effective for only trunk,hybrid,uplink and dot1q_tunnel port.')
myVlanPortAllowedVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 6, 1, 5), VlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myVlanPortAllowedVlanList.setStatus('current')
if mibBuilder.loadTexts: myVlanPortAllowedVlanList.setDescription("Each octet within this value specifies a set of eight vlans, with the first octet specifying vlans 0 through 7, the second octet specifying vlans 8 through 15, etc. Within each octet, the most significant bit represents the lowest numbered vlan, and the least significant bit represents the highest numbered vlan. Thus, each vlan of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1', then that vlan is included in the set of vlans; the vlan is not included if its bit has a value of '0'")
myVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 7), )
if mibBuilder.loadTexts: myVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: myVlanConfigTable.setDescription('vlan table.')
myVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 7, 1), ).setIndexNames((0, "MY-VLAN-MIB", "myVlanConfigVID"))
if mibBuilder.loadTexts: myVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: myVlanConfigEntry.setDescription("list of vlan and it's distribution table.")
myVlanConfigVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 7, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myVlanConfigVID.setStatus('current')
if mibBuilder.loadTexts: myVlanConfigVID.setDescription('VID of vlan .')
myVlanConfigAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myVlanConfigAction.setStatus('current')
if mibBuilder.loadTexts: myVlanConfigAction.setDescription('The value 1 to create a vlan, 0 to delete a vlan.')
myVlanConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myVlanConfigName.setStatus('current')
if mibBuilder.loadTexts: myVlanConfigName.setDescription('vlan name.')
myVlanConfigPortMember = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 1, 7, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myVlanConfigPortMember.setStatus('current')
if mibBuilder.loadTexts: myVlanConfigPortMember.setDescription("Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1', then that port is included in the set of ports; the port is not included if its bit has a value of '0'.")
myVlanMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 2))
myVlanMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 2, 1))
myVlanMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 2, 2))
myVlanMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 2, 1, 1)).setObjects(("MY-VLAN-MIB", "myVlanMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myVlanMIBCompliance = myVlanMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: myVlanMIBCompliance.setDescription('The compliance statement for entities which implement the My Vlan MIB')
myVlanMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 9, 2, 2, 1)).setObjects(("MY-VLAN-MIB", "myVlanMaxNumber"), ("MY-VLAN-MIB", "myVlanCurrentNumber"), ("MY-VLAN-MIB", "mySystemMaxVID"), ("MY-VLAN-MIB", "myVlanIfAccessVlan"), ("MY-VLAN-MIB", "myVlanIfNativeVlan"), ("MY-VLAN-MIB", "myVlanIfAllowedVlanList"), ("MY-VLAN-MIB", "myVlanVID"), ("MY-VLAN-MIB", "myVlanApMemberAction"), ("MY-VLAN-MIB", "myVlanPortMemberAction"), ("MY-VLAN-MIB", "myVlanAlias"), ("MY-VLAN-MIB", "myVlanEntryStatus"), ("MY-VLAN-MIB", "myVlanPortConfigMode"), ("MY-VLAN-MIB", "myVlanPortAccessVlan"), ("MY-VLAN-MIB", "myVlanPortNativeVlan"), ("MY-VLAN-MIB", "myVlanPortAllowedVlanList"), ("MY-VLAN-MIB", "myVlanConfigVID"), ("MY-VLAN-MIB", "myVlanConfigAction"), ("MY-VLAN-MIB", "myVlanConfigName"), ("MY-VLAN-MIB", "myVlanConfigPortMember"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myVlanMIBGroup = myVlanMIBGroup.setStatus('current')
if mibBuilder.loadTexts: myVlanMIBGroup.setDescription('A collection of objects providing vlan configure .')
mibBuilder.exportSymbols("MY-VLAN-MIB", mySystemMaxVID=mySystemMaxVID, myVlanIfAllowedVlanList=myVlanIfAllowedVlanList, myVlanIfAccessVlan=myVlanIfAccessVlan, myVlanVID=myVlanVID, VlanList=VlanList, myVlanConfigTable=myVlanConfigTable, myVlanPortNativeVlan=myVlanPortNativeVlan, myVlanMIBGroup=myVlanMIBGroup, myVlanMaxNumber=myVlanMaxNumber, myVlanTable=myVlanTable, myVlanPortConfigTable=myVlanPortConfigTable, myVlanPortConfigIndex=myVlanPortConfigIndex, myVlanCurrentNumber=myVlanCurrentNumber, myVlanConfigName=myVlanConfigName, myVlanEntry=myVlanEntry, myVlanAlias=myVlanAlias, myVlanPortMemberAction=myVlanPortMemberAction, myVlanApMemberAction=myVlanApMemberAction, myVlanConfigPortMember=myVlanConfigPortMember, myVlanMIBConformance=myVlanMIBConformance, myVlanConfigAction=myVlanConfigAction, myVlanIfNativeVlan=myVlanIfNativeVlan, myVlanMIBObjects=myVlanMIBObjects, myVlanMIBCompliances=myVlanMIBCompliances, myVlanPortConfigMode=myVlanPortConfigMode, myVlanConfigEntry=myVlanConfigEntry, myVlanConfigVID=myVlanConfigVID, PYSNMP_MODULE_ID=myVlanMIB, myVlanIfConfigTable=myVlanIfConfigTable, myVlanPortAllowedVlanList=myVlanPortAllowedVlanList, myVlanMIBGroups=myVlanMIBGroups, myVlanIfConfigIfIndex=myVlanIfConfigIfIndex, myVlanMIBCompliance=myVlanMIBCompliance, myVlanEntryStatus=myVlanEntryStatus, myVlanIfConfigEntry=myVlanIfConfigEntry, myVlanPortAccessVlan=myVlanPortAccessVlan, myVlanMIB=myVlanMIB, myVlanPortConfigEntry=myVlanPortConfigEntry)
