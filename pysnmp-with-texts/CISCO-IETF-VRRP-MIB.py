#
# PySNMP MIB module CISCO-IETF-VRRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IETF-VRRP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:01:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, iso, Integer32, ModuleIdentity, Gauge32, Counter64, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Bits, ObjectIdentity, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "Integer32", "ModuleIdentity", "Gauge32", "Counter64", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Bits", "ObjectIdentity", "Counter32", "IpAddress")
MacAddress, TimeInterval, TruthValue, RowStatus, TimeStamp, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TimeInterval", "TruthValue", "RowStatus", "TimeStamp", "DisplayString", "TextualConvention")
ciscoVrrpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 999))
ciscoVrrpMIB.setRevisions(('2005-11-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVrrpMIB.setRevisionsDescriptions(('Ciscoized version of draft-ietf-vrrp-unified-mib-04.txt',))
if mibBuilder.loadTexts: ciscoVrrpMIB.setLastUpdated('200511170000Z')
if mibBuilder.loadTexts: ciscoVrrpMIB.setOrganization('Cisco Systems Inc')
if mibBuilder.loadTexts: ciscoVrrpMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoVrrpMIB.setDescription('This MIB describes objects used for managing Virtual Router Redundancy Protocol (VRRP) over IPv4 and IPv6 protocols. This MIB supports VRRP for IPv4 and IPv6 protocols simultaneously running on a given interface of a router.')
cVrrpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 999, 0))
cVrrpOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 999, 1))
cVrrpStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 999, 2))
cVrrpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 999, 3))
class CVrId(TextualConvention, Integer32):
    description = 'A number which, along with IP version and interface index (IfIndex), serves to uniquely identify a virtual router on a given VRRP router. There is no relationship between VrId value used on a IPv4 interface and VrId value used on IPv6 interface. It is legal to use same VrId value on IPv4 and IPv6 interfaces.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 255)

cVrrpNotificationCntl = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cVrrpNotificationCntl.setStatus('current')
if mibBuilder.loadTexts: cVrrpNotificationCntl.setDescription("This object indicates whether the agent should generate the notifications defined in this MIB module. If the value of this object is 'true', then the notifications are generated. If the value of this object is 'false', then the notifications are not generated.")
cVrrpOperationsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 7), )
if mibBuilder.loadTexts: cVrrpOperationsTable.setStatus('current')
if mibBuilder.loadTexts: cVrrpOperationsTable.setDescription("Unified Operations table for a VRRP router which consists of a sequence (i.e., one or more conceptual rows) of 'vrrpOperationsEntry' items.")
cVrrpOperationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 7, 1), ).setIndexNames((0, "CISCO-IETF-VRRP-MIB", "cVrrpOperationsInetAddrType"), (0, "CISCO-IETF-VRRP-MIB", "cVrrpOperationsVrId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cVrrpOperationsEntry.setStatus('current')
if mibBuilder.loadTexts: cVrrpOperationsEntry.setDescription("An entry in the cVrrpOperationsTable containing the operational characteristics of a virtual router. On a VRRP router, a given virtual router is identified by a combination of the IP version, VRID and ifIndex. Note that rows in this table can be distinguished on a multi-stacked device running VRRP over IPv4 and IPv6 on the same interface. Rows in the table cannot be modified unless the value of 'cVrrpOperationsState' has transitioned to 'initialize'")
cVrrpOperationsInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 7, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cVrrpOperationsInetAddrType.setStatus('current')
if mibBuilder.loadTexts: cVrrpOperationsInetAddrType.setDescription('The type of Internet address of CVrrpOperationsEntry. This value applies to both cVrrpOperationsMasterIpAddr and cVrrpOperationsPrimaryIpAddr.')
cVrrpOperationsVrId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 7, 1, 2), CVrId())
if mibBuilder.loadTexts: cVrrpOperationsVrId.setStatus('current')
if mibBuilder.loadTexts: cVrrpOperationsVrId.setDescription('This object contains the Virtual Router Identifier (VRID).')
cVrrpOperationsVirtualMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 7, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVrrpOperationsVirtualMacAddr.setStatus('current')
if mibBuilder.loadTexts: cVrrpOperationsVirtualMacAddr.setDescription("The virtual MAC address of the virtual router. Although the value of this object can be derived from the 'cVrrpOperationsVrId' object, i.e., 00-00-5E-00-01-(VRID) for IPv4 and 00-00-5E-00-02-(VRID) for IPv6, it is defined so that it is easily obtainable by a management application and can be included in VRRP-related SNMP notifications.")
cVrrpOperationsState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initialize", 1), ("backup", 2), ("master", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVrrpOperationsState.setStatus('current')
if mibBuilder.loadTexts: cVrrpOperationsState.setDescription("The current state of the virtual router. This object has three defined values: - `initialize', which indicates that the virtual router is waiting for a startup event. - `backup', which indicates that the virtual router is monitoring the availability of the master router. - `master', which indicates that the virtual router is forwarding packets for IP addresses that are associated with this router.")
cVrrpOperationsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cVrrpOperationsPriority.setStatus('current')
if mibBuilder.loadTexts: cVrrpOperationsPriority.setDescription("This object specifies the priority to be used for the virtual router master election process. Higher values imply higher priority. A priority of '0', although not settable, is sent by the master router to indicate that this router has ceased to participate in VRRP and a backup virtual router should transition to become a new master. A priority of 255 is used for the router that owns the associated IP address(es) for VRRP over IPv4 and hence not settable.")
cVrrpOperationsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vrrpv2", 1), ("vrrpv3", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cVrrpOperationsVersion.setStatus('current')
if mibBuilder.loadTexts: cVrrpOperationsVersion.setDescription('This object contains the VRRP version on which this VRRP instance is running.')
cVrrpOperationsAddrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVrrpOperationsAddrCount.setStatus('current')
if mibBuilder.loadTexts: cVrrpOperationsAddrCount.setDescription('The number of IP addresses that are associated with this virtual router. This number is equal to the number of rows in the cVrrpAssociatedAddrTable that correspond to a given IP version/VRID/ifIndex.')
cVrrpOperationsMasterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 7, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVrrpOperationsMasterIpAddr.setStatus('current')
if mibBuilder.loadTexts: cVrrpOperationsMasterIpAddr.setDescription("The master router's real IP address. This is the IP address listed as the source in VRRP advertisement last received by this virtual router.")
cVrrpOperationsPrimaryIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 7, 1, 10), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cVrrpOperationsPrimaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: cVrrpOperationsPrimaryIpAddr.setDescription("In the case where there are more than one IP Address (associated IP addresses) for a given `ifIndex', this object is used to specify the IP address that will become the cVrrpOperationsMasterIpAddr', should the virtual router transition from backup state to master.")
cVrrpOperationsAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 7, 1, 11), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(100)).setUnits('centiseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cVrrpOperationsAdvInterval.setStatus('current')
if mibBuilder.loadTexts: cVrrpOperationsAdvInterval.setDescription('The time interval, in centiseconds, between sending advertisement messages. Only the master router sends VRRP advertisements.')
cVrrpOperationsPreemptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 7, 1, 12), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cVrrpOperationsPreemptMode.setStatus('current')
if mibBuilder.loadTexts: cVrrpOperationsPreemptMode.setDescription("Controls whether a higher priority virtual router will preempt a lower priority master. If the value of this object is 'true', then the higer priority virtual router will preempt. If the value of this object is 'false', then the higer priority vritual router will not preempt.")
cVrrpOperationsAcceptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 7, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cVrrpOperationsAcceptMode.setStatus('current')
if mibBuilder.loadTexts: cVrrpOperationsAcceptMode.setDescription("Controls whether a virtual router in Master state will accept packets addressed to the address owner's IPv6 address as its own if it is not the IPv6 address owner. If the value of this object is 'true', then the virtual router in Master state will accept. If the value of this object is 'false', then the virtual router in Master state will not accept.")
cVrrpOperationsUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 7, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVrrpOperationsUpTime.setStatus('current')
if mibBuilder.loadTexts: cVrrpOperationsUpTime.setDescription("This is the value of the `sysUpTime' object when this virtual router (i.e., the `vrrpOperState') transitioned out of `initialized'.")
cVrrpOperationsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 7, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cVrrpOperationsRowStatus.setStatus('current')
if mibBuilder.loadTexts: cVrrpOperationsRowStatus.setDescription("The row status variable, used in accordance to installation and removal conventions for conceptual rows. The rowstatus of a currently active row in the cVrrpOperationsTable is constrained by the operational state of the corresponding virtual router. When `cVrrpOperationsRowStatus' is set to active(1), no other objects in the conceptual row can be modified. To create a row in this table, a manager sets this object to either createAndGo(4) or createAndWait(5). Until instances of all corresponding columns are appropriately configured, the value of the corresponding instance of the `cVrrpOperationsRowStatus' column will be read as notReady(3). In particular, a newly created row cannot be made active(1) until (minimally) the corresponding instance of cVrrpOperationsInetAddrType, cVrrpOperationsVrId and cVrrpOperationsPrimaryIpAddr has been set and there is at least one active row in the `cVrrpAssociatedIpAddrTable' defining an associated IP address. notInService(2) should be used to administratively bring the row down.")
cVrrpAssociatedIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 8), )
if mibBuilder.loadTexts: cVrrpAssociatedIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: cVrrpAssociatedIpAddrTable.setDescription('The table of addresses associated with this virtual router.')
cVrrpAssociatedIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 8, 1), ).setIndexNames((0, "CISCO-IETF-VRRP-MIB", "cVrrpAssociatedInetAddrType"), (0, "CISCO-IETF-VRRP-MIB", "cVrrpOperationsVrId"), (0, "IF-MIB", "ifIndex"), (0, "CISCO-IETF-VRRP-MIB", "cVrrpAssociatedIpAddr"))
if mibBuilder.loadTexts: cVrrpAssociatedIpAddrEntry.setStatus('current')
if mibBuilder.loadTexts: cVrrpAssociatedIpAddrEntry.setDescription("An entry in the table contains an IP address that is associated with a virtual router. The number of rows for a given IP version, VrID and ifIndex will equal the number of IP addresses associated (e.g., backed up) by the virtual router (equivalent to 'cVrrpOperationsIpAddrCount'). Rows in the table cannot be modified unless the value of `cVrrpOperationsState' has transitioned to `initialize'.")
cVrrpAssociatedInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 8, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cVrrpAssociatedInetAddrType.setStatus('current')
if mibBuilder.loadTexts: cVrrpAssociatedInetAddrType.setDescription('The type of Internet address of VrrpAssociatedIpAddrEntry.')
cVrrpAssociatedIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 8, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16))
if mibBuilder.loadTexts: cVrrpAssociatedIpAddr.setStatus('current')
if mibBuilder.loadTexts: cVrrpAssociatedIpAddr.setDescription('The assigned IP addresses that a virtual router is responsible for backing up.')
cVrrpAssociatedIpAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 8, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cVrrpAssociatedIpAddrRowStatus.setStatus('current')
if mibBuilder.loadTexts: cVrrpAssociatedIpAddrRowStatus.setDescription('The row status variable, used according to installation and removal conventions for conceptual rows. To create a row in this table, a manager sets this object to either createAndGo(4) or createAndWait(5). Setting this object to active(1) results in the addition of an associated address for a virtual router. Setting this object to createAndGo (4) results in creating a new instance of a conceptual row and setting it to active. The value of the other columns cannot be modified when the value of this object is active. Destroying the entry or setting it to destroy(6) removes the associated address from the virtual router. The use of other values is implementation-dependent.')
cVrrpRouterChecksumErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVrrpRouterChecksumErrors.setStatus('current')
if mibBuilder.loadTexts: cVrrpRouterChecksumErrors.setDescription('The total number of VRRP packets received with an invalid VRRP checksum value.')
cVrrpRouterVersionErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVrrpRouterVersionErrors.setStatus('current')
if mibBuilder.loadTexts: cVrrpRouterVersionErrors.setDescription('The total number of VRRP packets received with an unknown or unsupported version number.')
cVrrpRouterVrIdErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVrrpRouterVrIdErrors.setStatus('current')
if mibBuilder.loadTexts: cVrrpRouterVrIdErrors.setDescription('The total number of VRRP packets received with an invalid VRID for this virtual router.')
cVrrpRouterStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 5), )
if mibBuilder.loadTexts: cVrrpRouterStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: cVrrpRouterStatisticsTable.setDescription('Table of virtual router statistics.')
cVrrpRouterStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 5, 1), ).setIndexNames((0, "CISCO-IETF-VRRP-MIB", "cVrrpOperationsInetAddrType"), (0, "CISCO-IETF-VRRP-MIB", "cVrrpOperationsVrId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cVrrpRouterStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: cVrrpRouterStatisticsEntry.setDescription('An entry in the table, containing statistics information about a given virtual router.')
cVrrpStatisticsBecomeMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVrrpStatisticsBecomeMaster.setStatus('current')
if mibBuilder.loadTexts: cVrrpStatisticsBecomeMaster.setDescription("The total number of times that this virtual router's state has transitioned to MASTER. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of the corresponding instance of cVrrpStatisticsDiscontinuityTime.")
cVrrpStatisticsAdvertiseRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVrrpStatisticsAdvertiseRcvd.setStatus('current')
if mibBuilder.loadTexts: cVrrpStatisticsAdvertiseRcvd.setDescription('The total number of VRRP advertisements received by this virtual router. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of the corresponding instance of cVrrpStatisticsDiscontinuityTime.')
cVrrpStatisticsAdvIntervalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVrrpStatisticsAdvIntervalErrors.setStatus('current')
if mibBuilder.loadTexts: cVrrpStatisticsAdvIntervalErrors.setDescription('The total number of VRRP advertisement packets received for which the advertisement interval is different than the one configured for the local virtual router. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of the corresponding instance of cVrrpStatisticsDiscontinuityTime.')
cVrrpStatisticsIpTtlErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVrrpStatisticsIpTtlErrors.setStatus('current')
if mibBuilder.loadTexts: cVrrpStatisticsIpTtlErrors.setDescription('The total number of VRRP packets received by the Virtual router with IPv4 TTL (for VRRP over IPv4) or IPv6 Hop Limit (for VRRP over IPv6) not equal to 255. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of the corresponding instance of cVrrpStatisticsDiscontinuityTime.')
cVrrpStatisticsPriZeroPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVrrpStatisticsPriZeroPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: cVrrpStatisticsPriZeroPktsRcvd.setDescription("The total number of VRRP packets received by the virtual router with a priority of '0'. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of the corresponding instance of cVrrpStatisticsDiscontinuityTime.")
cVrrpStatisticsPriZeroPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVrrpStatisticsPriZeroPktsSent.setStatus('current')
if mibBuilder.loadTexts: cVrrpStatisticsPriZeroPktsSent.setDescription("The total number of VRRP packets sent by the virtual router with a priority of '0'. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of the corresponding instance of cVrrpStatisticsDiscontinuityTime.")
cVrrpStatisticsInvldTypePktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVrrpStatisticsInvldTypePktsRcvd.setStatus('current')
if mibBuilder.loadTexts: cVrrpStatisticsInvldTypePktsRcvd.setDescription("The number of VRRP packets received by the virtual router with an invalid value in the 'type' field. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of the corresponding instance of cVrrpStatisticsDiscontinuityTime.")
cVrrpStatisticsAddressListErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVrrpStatisticsAddressListErrors.setStatus('current')
if mibBuilder.loadTexts: cVrrpStatisticsAddressListErrors.setDescription('The total number of VRRP packets received for which the address list contained in the packets does not match the locally configured list that corresponds to rows in the cVrrpAssociatedAddrTable for the virtual router. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of the corresponding instance of cVrrpStatisticsDiscontinuityTime.')
cVrrpStatisticsPacketLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVrrpStatisticsPacketLengthErrors.setStatus('current')
if mibBuilder.loadTexts: cVrrpStatisticsPacketLengthErrors.setDescription('The total number of packets received with a packet length less than the length of the VRRP header. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of the corresponding instance of cVrrpStatisticsDiscontinuityTime.')
cVrrpStatisticsDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 5, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVrrpStatisticsDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: cVrrpStatisticsDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which any one or more of this entry's counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.")
cVrrpStatisticsRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 5, 1, 13), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVrrpStatisticsRefreshRate.setStatus('current')
if mibBuilder.loadTexts: cVrrpStatisticsRefreshRate.setDescription('The minimum reasonable polling interval for this entry. This object provides an indication of the minimum amount of time required to update the counters in this entry.')
cVrrpStatisticsInvalidAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999, 2, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVrrpStatisticsInvalidAuthType.setStatus('current')
if mibBuilder.loadTexts: cVrrpStatisticsInvalidAuthType.setDescription('The total number of packets received with an unknown authentication type.')
cVrrpNotificationNewMasterReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("priority", 0), ("preempted", 1), ("masterNoResponse", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cVrrpNotificationNewMasterReason.setStatus('current')
if mibBuilder.loadTexts: cVrrpNotificationNewMasterReason.setDescription('This indicates the reason for NewMaster notification. Used by cVrrpNotificationNewMaster notification.')
cVrrpNotificationProtoErrReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 999, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("hopLimitError", 0), ("versionError", 1), ("checksumError", 2), ("vridError", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cVrrpNotificationProtoErrReason.setStatus('current')
if mibBuilder.loadTexts: cVrrpNotificationProtoErrReason.setDescription('This indicates the reason for protocol error notification. Used by cVrrpNotificationProtoError notification.')
cVrrpNotificationNewMaster = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 999, 0, 1)).setObjects(("CISCO-IETF-VRRP-MIB", "cVrrpOperationsMasterIpAddr"), ("CISCO-IETF-VRRP-MIB", "cVrrpNotificationNewMasterReason"))
if mibBuilder.loadTexts: cVrrpNotificationNewMaster.setStatus('current')
if mibBuilder.loadTexts: cVrrpNotificationNewMaster.setDescription("The newMaster notification indicates that the sending agent has transitioned to 'Master' state.")
cVrrpNotificationProtoError = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 999, 0, 3)).setObjects(("CISCO-IETF-VRRP-MIB", "cVrrpNotificationProtoErrReason"))
if mibBuilder.loadTexts: cVrrpNotificationProtoError.setStatus('current')
if mibBuilder.loadTexts: cVrrpNotificationProtoError.setDescription('The error notification indicates that the sending agent has encountered the protocol error indicated by the value of cVrrpNotificationProtoErrorReason.')
cVrrpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 999, 3, 1))
cVrrpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 999, 3, 2))
cVrrpMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 999, 3, 1, 2)).setObjects(("CISCO-IETF-VRRP-MIB", "cVrrpOperationsGroup"), ("CISCO-IETF-VRRP-MIB", "cVrrpStatisticsGroup"), ("CISCO-IETF-VRRP-MIB", "cVrrpNotificationInfoGroup"), ("CISCO-IETF-VRRP-MIB", "cVrrpNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cVrrpMIBCompliance2 = cVrrpMIBCompliance2.setStatus('current')
if mibBuilder.loadTexts: cVrrpMIBCompliance2.setDescription('The compliance statement for both VRRP for IPv4 and VRRP for IPv6 implementations.')
cVrrpMIBReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 999, 3, 1, 3)).setObjects(("CISCO-IETF-VRRP-MIB", "cVrrpOperationsGroup"), ("CISCO-IETF-VRRP-MIB", "cVrrpStatisticsGroup"), ("CISCO-IETF-VRRP-MIB", "cVrrpNotificationInfoGroup"), ("CISCO-IETF-VRRP-MIB", "cVrrpNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cVrrpMIBReadOnlyCompliance = cVrrpMIBReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: cVrrpMIBReadOnlyCompliance.setDescription('The read-only compliance statement for all VRRP implementations VRRP for IPv4 and IPv6.')
cVrrpOperationsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 999, 3, 2, 5)).setObjects(("CISCO-IETF-VRRP-MIB", "cVrrpNotificationCntl"), ("CISCO-IETF-VRRP-MIB", "cVrrpOperationsVirtualMacAddr"), ("CISCO-IETF-VRRP-MIB", "cVrrpOperationsState"), ("CISCO-IETF-VRRP-MIB", "cVrrpOperationsPriority"), ("CISCO-IETF-VRRP-MIB", "cVrrpOperationsMasterIpAddr"), ("CISCO-IETF-VRRP-MIB", "cVrrpOperationsVersion"), ("CISCO-IETF-VRRP-MIB", "cVrrpOperationsAdvInterval"), ("CISCO-IETF-VRRP-MIB", "cVrrpOperationsPreemptMode"), ("CISCO-IETF-VRRP-MIB", "cVrrpOperationsAcceptMode"), ("CISCO-IETF-VRRP-MIB", "cVrrpOperationsUpTime"), ("CISCO-IETF-VRRP-MIB", "cVrrpOperationsRowStatus"), ("CISCO-IETF-VRRP-MIB", "cVrrpOperationsAddrCount"), ("CISCO-IETF-VRRP-MIB", "cVrrpOperationsPrimaryIpAddr"), ("CISCO-IETF-VRRP-MIB", "cVrrpAssociatedIpAddrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cVrrpOperationsGroup = cVrrpOperationsGroup.setStatus('current')
if mibBuilder.loadTexts: cVrrpOperationsGroup.setDescription('Conformance group for VRRP over IPv4 and IPv6 operations.')
cVrrpStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 999, 3, 2, 6)).setObjects(("CISCO-IETF-VRRP-MIB", "cVrrpRouterChecksumErrors"), ("CISCO-IETF-VRRP-MIB", "cVrrpRouterVersionErrors"), ("CISCO-IETF-VRRP-MIB", "cVrrpRouterVrIdErrors"), ("CISCO-IETF-VRRP-MIB", "cVrrpStatisticsBecomeMaster"), ("CISCO-IETF-VRRP-MIB", "cVrrpStatisticsAdvertiseRcvd"), ("CISCO-IETF-VRRP-MIB", "cVrrpStatisticsAdvIntervalErrors"), ("CISCO-IETF-VRRP-MIB", "cVrrpStatisticsPriZeroPktsRcvd"), ("CISCO-IETF-VRRP-MIB", "cVrrpStatisticsPriZeroPktsSent"), ("CISCO-IETF-VRRP-MIB", "cVrrpStatisticsInvldTypePktsRcvd"), ("CISCO-IETF-VRRP-MIB", "cVrrpStatisticsIpTtlErrors"), ("CISCO-IETF-VRRP-MIB", "cVrrpStatisticsAddressListErrors"), ("CISCO-IETF-VRRP-MIB", "cVrrpStatisticsPacketLengthErrors"), ("CISCO-IETF-VRRP-MIB", "cVrrpStatisticsDiscontinuityTime"), ("CISCO-IETF-VRRP-MIB", "cVrrpStatisticsRefreshRate"), ("CISCO-IETF-VRRP-MIB", "cVrrpStatisticsInvalidAuthType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cVrrpStatisticsGroup = cVrrpStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: cVrrpStatisticsGroup.setDescription('Conformance group for VRRP over IPv4 and IPv6 statistics.')
cVrrpNotificationInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 999, 3, 2, 8)).setObjects(("CISCO-IETF-VRRP-MIB", "cVrrpNotificationNewMasterReason"), ("CISCO-IETF-VRRP-MIB", "cVrrpNotificationProtoErrReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cVrrpNotificationInfoGroup = cVrrpNotificationInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cVrrpNotificationInfoGroup.setDescription('Conformance group for objects contained in VRRP notifications.')
cVrrpNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 999, 3, 2, 9)).setObjects(("CISCO-IETF-VRRP-MIB", "cVrrpNotificationNewMaster"), ("CISCO-IETF-VRRP-MIB", "cVrrpNotificationProtoError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cVrrpNotificationsGroup = cVrrpNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: cVrrpNotificationsGroup.setDescription('The VRRP MIB Notification Group.')
mibBuilder.exportSymbols("CISCO-IETF-VRRP-MIB", cVrrpNotificationProtoErrReason=cVrrpNotificationProtoErrReason, cVrrpOperationsMasterIpAddr=cVrrpOperationsMasterIpAddr, cVrrpMIBCompliances=cVrrpMIBCompliances, cVrrpStatisticsPriZeroPktsRcvd=cVrrpStatisticsPriZeroPktsRcvd, cVrrpMIBCompliance2=cVrrpMIBCompliance2, cVrrpAssociatedIpAddrEntry=cVrrpAssociatedIpAddrEntry, cVrrpRouterVersionErrors=cVrrpRouterVersionErrors, cVrrpStatisticsAdvertiseRcvd=cVrrpStatisticsAdvertiseRcvd, cVrrpNotificationNewMasterReason=cVrrpNotificationNewMasterReason, cVrrpRouterStatisticsEntry=cVrrpRouterStatisticsEntry, cVrrpNotificationsGroup=cVrrpNotificationsGroup, cVrrpOperationsAddrCount=cVrrpOperationsAddrCount, cVrrpNotificationCntl=cVrrpNotificationCntl, cVrrpStatisticsPacketLengthErrors=cVrrpStatisticsPacketLengthErrors, cVrrpStatisticsGroup=cVrrpStatisticsGroup, cVrrpRouterVrIdErrors=cVrrpRouterVrIdErrors, cVrrpNotificationInfoGroup=cVrrpNotificationInfoGroup, cVrrpRouterChecksumErrors=cVrrpRouterChecksumErrors, cVrrpStatisticsBecomeMaster=cVrrpStatisticsBecomeMaster, cVrrpOperationsState=cVrrpOperationsState, cVrrpAssociatedInetAddrType=cVrrpAssociatedInetAddrType, cVrrpStatisticsAdvIntervalErrors=cVrrpStatisticsAdvIntervalErrors, cVrrpStatisticsPriZeroPktsSent=cVrrpStatisticsPriZeroPktsSent, cVrrpStatistics=cVrrpStatistics, CVrId=CVrId, cVrrpOperationsPreemptMode=cVrrpOperationsPreemptMode, cVrrpRouterStatisticsTable=cVrrpRouterStatisticsTable, cVrrpOperations=cVrrpOperations, cVrrpStatisticsDiscontinuityTime=cVrrpStatisticsDiscontinuityTime, cVrrpConformance=cVrrpConformance, cVrrpOperationsGroup=cVrrpOperationsGroup, cVrrpOperationsVersion=cVrrpOperationsVersion, cVrrpOperationsAcceptMode=cVrrpOperationsAcceptMode, cVrrpStatisticsRefreshRate=cVrrpStatisticsRefreshRate, cVrrpNotifications=cVrrpNotifications, cVrrpStatisticsInvalidAuthType=cVrrpStatisticsInvalidAuthType, cVrrpMIBReadOnlyCompliance=cVrrpMIBReadOnlyCompliance, cVrrpOperationsInetAddrType=cVrrpOperationsInetAddrType, cVrrpAssociatedIpAddrTable=cVrrpAssociatedIpAddrTable, cVrrpOperationsVrId=cVrrpOperationsVrId, cVrrpOperationsUpTime=cVrrpOperationsUpTime, cVrrpAssociatedIpAddr=cVrrpAssociatedIpAddr, cVrrpAssociatedIpAddrRowStatus=cVrrpAssociatedIpAddrRowStatus, cVrrpOperationsPriority=cVrrpOperationsPriority, cVrrpOperationsPrimaryIpAddr=cVrrpOperationsPrimaryIpAddr, cVrrpStatisticsInvldTypePktsRcvd=cVrrpStatisticsInvldTypePktsRcvd, cVrrpOperationsEntry=cVrrpOperationsEntry, cVrrpStatisticsAddressListErrors=cVrrpStatisticsAddressListErrors, cVrrpOperationsAdvInterval=cVrrpOperationsAdvInterval, PYSNMP_MODULE_ID=ciscoVrrpMIB, cVrrpOperationsVirtualMacAddr=cVrrpOperationsVirtualMacAddr, cVrrpNotificationNewMaster=cVrrpNotificationNewMaster, cVrrpOperationsTable=cVrrpOperationsTable, ciscoVrrpMIB=ciscoVrrpMIB, cVrrpOperationsRowStatus=cVrrpOperationsRowStatus, cVrrpStatisticsIpTtlErrors=cVrrpStatisticsIpTtlErrors, cVrrpMIBGroups=cVrrpMIBGroups, cVrrpNotificationProtoError=cVrrpNotificationProtoError)
