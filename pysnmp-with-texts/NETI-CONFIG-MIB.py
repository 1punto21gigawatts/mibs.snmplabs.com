#
# PySNMP MIB module NETI-CONFIG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETI-CONFIG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:19:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
netiExperimentalGeneric, = mibBuilder.importSymbols("NETI-COMMON-MIB", "netiExperimentalGeneric")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ModuleIdentity, Integer32, ObjectIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, MibIdentifier, Gauge32, IpAddress, Bits, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "Integer32", "ObjectIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "MibIdentifier", "Gauge32", "IpAddress", "Bits", "Unsigned32", "Counter32")
DisplayString, TruthValue, TextualConvention, RowStatus, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "RowStatus", "DateAndTime")
netiConfigMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7))
if mibBuilder.loadTexts: netiConfigMIB.setLastUpdated('0002090000Z')
if mibBuilder.loadTexts: netiConfigMIB.setOrganization('Net Insight AB')
if mibBuilder.loadTexts: netiConfigMIB.setContactInfo('Martin Carlsson Net Insight AB E-mail: martin.carlsson@netinsight.se')
if mibBuilder.loadTexts: netiConfigMIB.setDescription('tbd: Describe the configuration model')
netiConfigMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7, 1))
configStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7, 1, 1))
configLocalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7, 1, 2))
configBackupGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7, 1, 3))
configStatusIsCurrentUnsaved = MibScalar((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configStatusIsCurrentUnsaved.setStatus('current')
if mibBuilder.loadTexts: configStatusIsCurrentUnsaved.setDescription('Set to true if the current configuration in the node contains unsaved data.')
configStatusCurrentLastChangedTime = MibScalar((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configStatusCurrentLastChangedTime.setStatus('current')
if mibBuilder.loadTexts: configStatusCurrentLastChangedTime.setDescription('The date and time when the current configuration was last changed.')
configLocalTableLastChangedTime = MibScalar((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7, 1, 2, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configLocalTableLastChangedTime.setStatus('current')
if mibBuilder.loadTexts: configLocalTableLastChangedTime.setDescription('The date and time when the configuration table was last changed.')
configLocalTableNrOfConfigs = MibScalar((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7, 1, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configLocalTableNrOfConfigs.setStatus('current')
if mibBuilder.loadTexts: configLocalTableNrOfConfigs.setDescription('The number of configurations currently in the configuration table.')
configLocalTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7, 1, 2, 4), )
if mibBuilder.loadTexts: configLocalTable.setStatus('current')
if mibBuilder.loadTexts: configLocalTable.setDescription('Table of configuration files stored in the node.')
configLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7, 1, 2, 4, 1), ).setIndexNames((0, "NETI-CONFIG-MIB", "configLocalIndex"))
if mibBuilder.loadTexts: configLocalEntry.setStatus('current')
if mibBuilder.loadTexts: configLocalEntry.setDescription('Each entry describes one configuration file.')
configLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: configLocalIndex.setStatus('current')
if mibBuilder.loadTexts: configLocalIndex.setDescription('Index in the config table.')
configLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: configLocalName.setStatus('current')
if mibBuilder.loadTexts: configLocalName.setDescription('The name of the configuration file.')
configLocalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7, 1, 2, 4, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: configLocalDescription.setStatus('current')
if mibBuilder.loadTexts: configLocalDescription.setDescription('A textual description of the configuration.')
configLocalCreatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7, 1, 2, 4, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configLocalCreatedTime.setStatus('current')
if mibBuilder.loadTexts: configLocalCreatedTime.setDescription('The date and time when the configuration was created.')
configLocalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configLocalSize.setStatus('current')
if mibBuilder.loadTexts: configLocalSize.setDescription('The size in bytes of the configuration filed.')
configLocalAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: configLocalAdminStatus.setStatus('current')
if mibBuilder.loadTexts: configLocalAdminStatus.setDescription('Set to enabled if this is the configuration to be loaded at boot time.')
configLocalRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7, 1, 2, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: configLocalRowStatus.setStatus('current')
if mibBuilder.loadTexts: configLocalRowStatus.setDescription('Note that local configurations are created by doing a backup, see the backup group.')
configBackupOperation = MibScalar((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("writeCurrentToLocal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configBackupOperation.setStatus('current')
if mibBuilder.loadTexts: configBackupOperation.setDescription('The backup operations supported: idle Resets the function. writeCurrentToLocal Writes the current config to local storage. Uses configBackupName and configBackupDescription.')
configBackupStatus = MibScalar((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("inProgress", 2), ("failed", 3), ("ready", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configBackupStatus.setStatus('current')
if mibBuilder.loadTexts: configBackupStatus.setDescription('The status of the backup function: idle The function is idle. inProgress A backup operation is in progress. failed The operation has failed. ready The operation is finished and has succeeded.')
configBackupName = MibScalar((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7, 1, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configBackupName.setStatus('current')
if mibBuilder.loadTexts: configBackupName.setDescription('The name of the configuration file. Defaults to a string containing the date and time.')
configBackupDescription = MibScalar((1, 3, 6, 1, 4, 1, 2928, 6, 2, 7, 1, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configBackupDescription.setStatus('current')
if mibBuilder.loadTexts: configBackupDescription.setDescription('The description for the new configuration file. Defaults to the empty string.')
mibBuilder.exportSymbols("NETI-CONFIG-MIB", configLocalTable=configLocalTable, configBackupGroup=configBackupGroup, configLocalAdminStatus=configLocalAdminStatus, configStatusGroup=configStatusGroup, configLocalIndex=configLocalIndex, configBackupStatus=configBackupStatus, configStatusIsCurrentUnsaved=configStatusIsCurrentUnsaved, configLocalEntry=configLocalEntry, netiConfigMIBObjects=netiConfigMIBObjects, configLocalSize=configLocalSize, configStatusCurrentLastChangedTime=configStatusCurrentLastChangedTime, configLocalRowStatus=configLocalRowStatus, configLocalDescription=configLocalDescription, configLocalGroup=configLocalGroup, configBackupOperation=configBackupOperation, configLocalTableNrOfConfigs=configLocalTableNrOfConfigs, configLocalCreatedTime=configLocalCreatedTime, configBackupDescription=configBackupDescription, configLocalTableLastChangedTime=configLocalTableLastChangedTime, netiConfigMIB=netiConfigMIB, configLocalName=configLocalName, PYSNMP_MODULE_ID=netiConfigMIB, configBackupName=configBackupName)
