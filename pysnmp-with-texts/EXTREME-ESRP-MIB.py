#
# PySNMP MIB module EXTREME-ESRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EXTREME-BASE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:07:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
extremeAgent, ExtremeGenAddr = mibBuilder.importSymbols("EXTREME-BASE-MIB", "extremeAgent", "ExtremeGenAddr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, IpAddress, Integer32, Gauge32, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, ModuleIdentity, ObjectIdentity, TimeTicks, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "Integer32", "Gauge32", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Bits", "Unsigned32")
MacAddress, RowStatus, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "TruthValue", "TextualConvention", "DisplayString")
extremeEsrp = ModuleIdentity((1, 3, 6, 1, 4, 1, 1916, 1, 12))
if mibBuilder.loadTexts: extremeEsrp.setLastUpdated('0007240000Z')
if mibBuilder.loadTexts: extremeEsrp.setOrganization('Extreme Networks, Inc.')
if mibBuilder.loadTexts: extremeEsrp.setContactInfo('www.extremenetworks.com')
if mibBuilder.loadTexts: extremeEsrp.setDescription('Extreme Standby Routing Protocol information')
extremeEsrpTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 12, 2), )
if mibBuilder.loadTexts: extremeEsrpTable.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpTable.setDescription('This table contains ESRP information for this device.')
extremeEsrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 12, 2, 1), ).setIndexNames((0, "EXTREME-ESRP-MIB", "extremeEsrpVlanIfIndex"), (0, "EXTREME-ESRP-MIB", "extremeEsrpGroup"))
if mibBuilder.loadTexts: extremeEsrpEntry.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpEntry.setDescription('An individual entry of this table contains ESRP information for a given vlan belonging to a given ESRP group.')
extremeEsrpVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremeEsrpVlanIfIndex.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpVlanIfIndex.setDescription('Any index to this table has a value that is the same as the ifIndex of one of the vlans present in the ifTable.')
extremeEsrpGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremeEsrpGroup.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpGroup.setDescription('Indicates a gateway addresses this router backs up. Any gateway address can be backed up by a group of routers with one as the master and the others as backup. An instance of this object refers to one such group. Only the default group 1 is supported currently.')
extremeEsrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeEsrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpRowStatus.setDescription('The status of this entry.')
extremeEsrpNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 2, 1, 4), ExtremeGenAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeEsrpNetAddress.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpNetAddress.setDescription('The IP/IPX address of this vlan. This entry is null if no address has been assigned to the vlan.')
extremeEsrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("neutral", 1), ("master", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeEsrpState.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpState.setDescription('This indicates the ESRP state of this ESRP router.')
extremeEsrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeEsrpPriority.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpPriority.setDescription('The priority which would be advertised by this router for determining the esrp master.')
extremeEsrpElectionAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("portsTrackPriorityMac", 1), ("trackPortsPriorityMac", 2), ("priorityPortsTrackMac", 3), ("priorityTrackPortsMac", 4), ("priorityMacOnly", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeEsrpElectionAlgorithm.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpElectionAlgorithm.setDescription('The algorithm to use in selecting the esrp master.')
extremeEsrpHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeEsrpHelloTimer.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpHelloTimer.setDescription('The time interval for exchanging hello messages.')
extremeEsrpActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeEsrpActivePorts.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpActivePorts.setDescription('The number of physical ports that are in this vlan.')
extremeEsrpTrackedActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeEsrpTrackedActivePorts.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpTrackedActivePorts.setDescription('The total number of ports belonging to the vlans that are tracked by this esrp router.')
extremeEsrpTrackedIpRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeEsrpTrackedIpRoutes.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpTrackedIpRoutes.setDescription('The total number of ip routes that are tracked by this esrp router.')
extremeEsrpTrackedPings = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeEsrpTrackedPings.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpTrackedPings.setDescription('The total number of ip addresses that are ping-tracked by this esrp router.')
extremeEsrpNumTransitionsToMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeEsrpNumTransitionsToMaster.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpNumTransitionsToMaster.setDescription('The total number of transitions to Master by this esrp router.')
extremeEsrpNumTransitionsToSlave = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeEsrpNumTransitionsToSlave.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpNumTransitionsToSlave.setDescription('The total number of transitions to Slave by this esrp router.')
extremeEsrpInternalActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeEsrpInternalActivePorts.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpInternalActivePorts.setDescription('The number of internal physical ports that are in this vlan.')
extremeEsrpNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 12, 3), )
if mibBuilder.loadTexts: extremeEsrpNeighborTable.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpNeighborTable.setDescription('This table contains ESRP information received from the ESRP neighbors of this device.')
extremeEsrpNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 12, 3, 1), ).setIndexNames((0, "EXTREME-ESRP-MIB", "extremeEsrpVlanIfIndex"), (0, "EXTREME-ESRP-MIB", "extremeEsrpGroup"), (0, "EXTREME-ESRP-MIB", "extremeEsrpNeighborMacAddress"))
if mibBuilder.loadTexts: extremeEsrpNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpNeighborEntry.setDescription('Each individual entry of this table contains ESRP information of one ESRP neighbor.')
extremeEsrpNeighborMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: extremeEsrpNeighborMacAddress.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpNeighborMacAddress.setDescription('Mac address of other esrp routers that backup this gateway address.')
extremeEsrpNeighborGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: extremeEsrpNeighborGroup.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpNeighborGroup.setDescription('Indicates a gateway addresses this router backs up. Any gateway address can be backed up by a group of routers with one as the master and the others as backup. An instance of this object refers to one such group. Note that this object is defined in addition to extremeEsrpGroup. Whereas the extremeEsrpGroup refers to the group information advertised by this host the extremeEsrpNeighborGroup refers to the group information reported by the neighbor. There might be a conflict. Only the default group 1 is supported currently.')
extremeEsrpNeighborNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 3, 1, 3), ExtremeGenAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeEsrpNeighborNetAddress.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpNeighborNetAddress.setDescription('The network layer address of this router. This may be null if no address was assigned.')
extremeEsrpNeighborState = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("neutral", 1), ("master", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeEsrpNeighborState.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpNeighborState.setDescription('State of the esrp neighbor.')
extremeEsrpNeighborPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeEsrpNeighborPriority.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpNeighborPriority.setDescription('The priority reported by this esrp neighbor.')
extremeEsrpNeighborElectionAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("portAndPriority", 1), ("priority", 2), ("priorityThenPort", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeEsrpNeighborElectionAlgorithm.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpNeighborElectionAlgorithm.setDescription('The algorithm to use in selecting the esrp master reported by this esrp neighbor.')
extremeEsrpNeighborHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeEsrpNeighborHelloTimer.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpNeighborHelloTimer.setDescription('The time interval for exchanging hello messages configured at this esrp neighbor.')
extremeEsrpNeighborActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeEsrpNeighborActivePorts.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpNeighborActivePorts.setDescription("The number of physical ports that are in present in the neighbor's vlan.")
extremeEsrpNeighborTrackedActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeEsrpNeighborTrackedActivePorts.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpNeighborTrackedActivePorts.setDescription('The total number of ports belonging to the vlans that are tracked by this esrp neighbor.')
extremeEsrpNeighborTrackedIpRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeEsrpNeighborTrackedIpRoutes.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpNeighborTrackedIpRoutes.setDescription('The total number of ip routes that are tracked by this esrp neighbor.')
extremeEsrpNeighborInternalActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeEsrpNeighborInternalActivePorts.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpNeighborInternalActivePorts.setDescription('The number of internal ports that are in present in the neighbor.')
extremeEsrpTrackVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 12, 4), )
if mibBuilder.loadTexts: extremeEsrpTrackVlanTable.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpTrackVlanTable.setDescription('A table containing information on the VLANs tracked by this ESRP router.')
extremeEsrpTrackVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 12, 4, 1), ).setIndexNames((0, "EXTREME-ESRP-MIB", "extremeEsrpVlanIfIndex"), (0, "EXTREME-ESRP-MIB", "extremeEsrpGroup"), (0, "EXTREME-ESRP-MIB", "extremeEsrpTrackVlanIfIndex"))
if mibBuilder.loadTexts: extremeEsrpTrackVlanEntry.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpTrackVlanEntry.setDescription('An entry in the table of tracked VLAN information.')
extremeEsrpTrackVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: extremeEsrpTrackVlanIfIndex.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpTrackVlanIfIndex.setDescription('The ifIndex of the tracked vlan.')
extremeEsrpTrackVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeEsrpTrackVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpTrackVlanRowStatus.setDescription('The status of this entry.')
extremeEsrpTrackIpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 12, 5), )
if mibBuilder.loadTexts: extremeEsrpTrackIpRouteTable.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpTrackIpRouteTable.setDescription('A table containing information on the IP routes tracked by this ESRP router.')
extremeEsrpTrackIpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 12, 5, 1), ).setIndexNames((0, "EXTREME-ESRP-MIB", "extremeEsrpVlanIfIndex"), (0, "EXTREME-ESRP-MIB", "extremeEsrpGroup"), (0, "EXTREME-ESRP-MIB", "extremeEsrpTrackIpRouteIpAddress"), (0, "EXTREME-ESRP-MIB", "extremeEsrpTrackIpRouteNetMask"))
if mibBuilder.loadTexts: extremeEsrpTrackIpRouteEntry.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpTrackIpRouteEntry.setDescription('An entry in the table of tracked IP routes information.')
extremeEsrpTrackIpRouteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: extremeEsrpTrackIpRouteIpAddress.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpTrackIpRouteIpAddress.setDescription('The ifIndex of the tracked vlan.')
extremeEsrpTrackIpRouteNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: extremeEsrpTrackIpRouteNetMask.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpTrackIpRouteNetMask.setDescription('The ifIndex of the tracked vlan.')
extremeEsrpTrackIpRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeEsrpTrackIpRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpTrackIpRouteRowStatus.setDescription('The status of this entry.')
extremeEsrpPortTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 12, 6), )
if mibBuilder.loadTexts: extremeEsrpPortTable.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpPortTable.setDescription('A table containing information on the ports belonging to the ESRP vlans on this router.')
extremeEsrpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 12, 6, 1), ).setIndexNames((0, "EXTREME-ESRP-MIB", "extremeEsrpVlanIfIndex"), (0, "EXTREME-ESRP-MIB", "extremeEsrpPortIfIndex"))
if mibBuilder.loadTexts: extremeEsrpPortEntry.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpPortEntry.setDescription('An entry in the table of ESRP port information.')
extremeEsrpPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: extremeEsrpPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpPortIfIndex.setDescription('The ifIndex of the physical port that is part of the vlan specified by the extremeEsrpVlanIfIndex.')
extremeEsrpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 12, 6, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeEsrpPortState.setStatus('current')
if mibBuilder.loadTexts: extremeEsrpPortState.setDescription('Indicates if esrp is enabled or disabled on this port.')
mibBuilder.exportSymbols("EXTREME-ESRP-MIB", extremeEsrpPortState=extremeEsrpPortState, extremeEsrpVlanIfIndex=extremeEsrpVlanIfIndex, extremeEsrpTable=extremeEsrpTable, extremeEsrpTrackedActivePorts=extremeEsrpTrackedActivePorts, extremeEsrpNeighborGroup=extremeEsrpNeighborGroup, extremeEsrpTrackVlanTable=extremeEsrpTrackVlanTable, extremeEsrpElectionAlgorithm=extremeEsrpElectionAlgorithm, extremeEsrpNeighborEntry=extremeEsrpNeighborEntry, extremeEsrpTrackVlanRowStatus=extremeEsrpTrackVlanRowStatus, extremeEsrpTrackIpRouteTable=extremeEsrpTrackIpRouteTable, extremeEsrpNeighborPriority=extremeEsrpNeighborPriority, extremeEsrpState=extremeEsrpState, extremeEsrpTrackIpRouteNetMask=extremeEsrpTrackIpRouteNetMask, extremeEsrp=extremeEsrp, extremeEsrpTrackedPings=extremeEsrpTrackedPings, extremeEsrpTrackIpRouteRowStatus=extremeEsrpTrackIpRouteRowStatus, extremeEsrpRowStatus=extremeEsrpRowStatus, extremeEsrpNeighborState=extremeEsrpNeighborState, extremeEsrpNeighborTrackedActivePorts=extremeEsrpNeighborTrackedActivePorts, extremeEsrpPortIfIndex=extremeEsrpPortIfIndex, extremeEsrpActivePorts=extremeEsrpActivePorts, extremeEsrpEntry=extremeEsrpEntry, extremeEsrpNeighborNetAddress=extremeEsrpNeighborNetAddress, extremeEsrpTrackVlanEntry=extremeEsrpTrackVlanEntry, PYSNMP_MODULE_ID=extremeEsrp, extremeEsrpNeighborHelloTimer=extremeEsrpNeighborHelloTimer, extremeEsrpTrackIpRouteIpAddress=extremeEsrpTrackIpRouteIpAddress, extremeEsrpNeighborElectionAlgorithm=extremeEsrpNeighborElectionAlgorithm, extremeEsrpNeighborTable=extremeEsrpNeighborTable, extremeEsrpTrackVlanIfIndex=extremeEsrpTrackVlanIfIndex, extremeEsrpTrackIpRouteEntry=extremeEsrpTrackIpRouteEntry, extremeEsrpPortTable=extremeEsrpPortTable, extremeEsrpTrackedIpRoutes=extremeEsrpTrackedIpRoutes, extremeEsrpNeighborInternalActivePorts=extremeEsrpNeighborInternalActivePorts, extremeEsrpNeighborTrackedIpRoutes=extremeEsrpNeighborTrackedIpRoutes, extremeEsrpPortEntry=extremeEsrpPortEntry, extremeEsrpNumTransitionsToSlave=extremeEsrpNumTransitionsToSlave, extremeEsrpNumTransitionsToMaster=extremeEsrpNumTransitionsToMaster, extremeEsrpNeighborActivePorts=extremeEsrpNeighborActivePorts, extremeEsrpInternalActivePorts=extremeEsrpInternalActivePorts, extremeEsrpNeighborMacAddress=extremeEsrpNeighborMacAddress, extremeEsrpGroup=extremeEsrpGroup, extremeEsrpHelloTimer=extremeEsrpHelloTimer, extremeEsrpPriority=extremeEsrpPriority, extremeEsrpNetAddress=extremeEsrpNetAddress)
