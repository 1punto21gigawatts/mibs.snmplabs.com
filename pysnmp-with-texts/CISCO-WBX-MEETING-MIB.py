#
# PySNMP MIB module CISCO-WBX-MEETING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WBX-MEETING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:21:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, Gauge32, NotificationType, IpAddress, Counter32, ObjectIdentity, iso, Bits, Unsigned32, ModuleIdentity, Integer32, MibIdentifier, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "NotificationType", "IpAddress", "Counter32", "ObjectIdentity", "iso", "Bits", "Unsigned32", "ModuleIdentity", "Integer32", "MibIdentifier", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, AutonomousType, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "AutonomousType", "DisplayString")
ciscoWebExMeetingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 809))
ciscoWebExMeetingMIB.setRevisions(('2013-05-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWebExMeetingMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoWebExMeetingMIB.setLastUpdated('201305290000Z')
if mibBuilder.loadTexts: ciscoWebExMeetingMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoWebExMeetingMIB.setContactInfo('Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cisco-webex-support@cisco.com')
if mibBuilder.loadTexts: ciscoWebExMeetingMIB.setDescription('Cisco WebEx Collaboration Host is a software-only system, with hardware independence a key goal. To that end, it will be designed to work only on a VMware virtual platform. Cisco WebEx Collaboration Host consists of various components that allow user to collaborate using web, video, and audio in a meeting. These host components are as follows: i) Web service component - serves the web application to allow user to schedule and start the meeting ii) Web admin service component - serves the web application to allow user to configure, manage, and monitor the whole collaboration platform. iii) meeting service component - serves the WebEx meetingroom application to allow user to share or view, and perform in-session control for the meeting and participants. iv) multi-media service component - serves the VOIP conference application for video and audio. v) telephony service component - serves the in-session control for the audio participants. vi) network-based recording service component - serves to record meeting. Each service component except i and ii as described above could be clustered to run on multiple systems. Each cluster is related to a zone in WebEx terminology. A group of service components that are deployed to make up various zone with failover capability is known as a meeting domain. This MIB provides the common objects that will be monitored by WebEx web monitoring system to indicate performance and capacity issues. This MIB covers following 1. System Resource Utilization 2. Notification resources usage changes')
ciscoWebExMeetingMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 809, 0))
ciscoWebExMeetingMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 809, 1))
ciscoWebExMeetingMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 809, 2))
class CiscoWebExCommSysResource(TextualConvention, Integer32):
    description = 'This object is the enumerations for system resources monitored by WebEx system manager. cpu(0) : CPU usage. memory(1) : memory usage. swap(2) : memory swap usage. fileDesciptor(3) : file usage. disk(4) : disk usage.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("cpu", 0), ("memory", 1), ("swap", 2), ("fileDescriptor", 3), ("disk", 4))

class CiscoWebExCommSysResMonitoringStatus(TextualConvention, Integer32):
    description = 'This object defines the enumerations of resource status. The object is used to monitoring system resources. closed(0) : Resource not available open(1) : Resource available'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("closed", 0), ("open", 1))

ciscoWebExCommInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 1))
ciscoWebExCommSystemResource = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2))
cwCommSystemVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommSystemVersion.setStatus('current')
if mibBuilder.loadTexts: cwCommSystemVersion.setDescription('This object provides the version of webEx system.')
cwCommSystemObjectID = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommSystemObjectID.setStatus('current')
if mibBuilder.loadTexts: cwCommSystemObjectID.setDescription('This object provides the sysObjectID defined in SNMPv2-MIB')
cwCommCPUUsageObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 1))
if mibBuilder.loadTexts: cwCommCPUUsageObject.setStatus('current')
if mibBuilder.loadTexts: cwCommCPUUsageObject.setDescription('This object provides the system CPU usage.')
cwCommCPUTotalUsage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommCPUTotalUsage.setStatus('current')
if mibBuilder.loadTexts: cwCommCPUTotalUsage.setDescription('This object provides the total percentage of CPU usage of a host component. The total CPU usage contains CPU user usage, CPU system usage and CPU nice usage. The CPU user time: CPU time spent in user space. The CPU system time: CPU time spent in kernel space. The CPU nice time: CPU time spent on low priority processes.')
cwCommCPUUsageWindow = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('Minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwCommCPUUsageWindow.setStatus('current')
if mibBuilder.loadTexts: cwCommCPUUsageWindow.setDescription('This object controls the duration to wait before sending notification (trap) after a CPU usage threshold is crossed. The notification is sent only if CPU usage crossed a threshold level (normal/minor/major) and remains in the new threshold level over the duration defined in this window.')
cwCommCPUTotalNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommCPUTotalNumber.setStatus('current')
if mibBuilder.loadTexts: cwCommCPUTotalNumber.setDescription('This object provides the total number of CPUs on the system.')
cwCommCPUUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 1, 4), )
if mibBuilder.loadTexts: cwCommCPUUsageTable.setStatus('current')
if mibBuilder.loadTexts: cwCommCPUUsageTable.setDescription('A list of CPU usage registering on the device.')
cwCommCPUUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 1, 4, 1), ).setIndexNames((0, "CISCO-WBX-MEETING-MIB", "cwCommCPUIndex"))
if mibBuilder.loadTexts: cwCommCPUUsageEntry.setStatus('current')
if mibBuilder.loadTexts: cwCommCPUUsageEntry.setDescription('An entry containing management information generic to the CPU usage.')
cwCommCPUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: cwCommCPUIndex.setStatus('current')
if mibBuilder.loadTexts: cwCommCPUIndex.setDescription('This object uniquely identifies a CPU in the table. Each CPU has its own usage and breakdown values.')
cwCommCPUName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 1, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommCPUName.setStatus('current')
if mibBuilder.loadTexts: cwCommCPUName.setDescription("This object provides the CPU name. For example, 'Intel(R) Xeon(TM) CPU 3.00GHz'.")
cwCommCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 1, 4, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommCPUUsage.setStatus('current')
if mibBuilder.loadTexts: cwCommCPUUsage.setDescription('This object provides how many percentage of total CPU resource is used. Usually GHz is used for measuring CPU power. Since GHz is too large for measuring some CPU usage categories, KHz is used as the measuring unit. The system speed (in KHz) multiply by the fraction of each CPU sections (e.g. idle, nice, user, etc.) to get the CPU KHz of each category; Khz is used as the unit for all the CPU categories below.')
cwCommCPUUsageUser = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 1, 4, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommCPUUsageUser.setStatus('current')
if mibBuilder.loadTexts: cwCommCPUUsageUser.setDescription('This object provides the CPU power executed in user mode.')
cwCommCPUUsageNice = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 1, 4, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommCPUUsageNice.setStatus('current')
if mibBuilder.loadTexts: cwCommCPUUsageNice.setDescription('This object provides the CPU power executed on low priority processes. Nice is a program found on Unix and Linux. It directly maps to a kernel call of the same name. nice is used to invoke a utility or shell script with a particular priority, thus giving the process more or less CPU time than other processes.')
cwCommCPUUsageSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 1, 4, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommCPUUsageSystem.setStatus('current')
if mibBuilder.loadTexts: cwCommCPUUsageSystem.setDescription('This object provides the CPU power now is executed in kernel mode.')
cwCommCPUUsageIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 1, 4, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommCPUUsageIdle.setStatus('current')
if mibBuilder.loadTexts: cwCommCPUUsageIdle.setDescription('This object provides the CPU power now is in idle status.')
cwCommCPUUsageIOWait = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 1, 4, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommCPUUsageIOWait.setStatus('current')
if mibBuilder.loadTexts: cwCommCPUUsageIOWait.setDescription('This object provides the CPU power that is spending in wait disk I/O to complete.')
cwCommCPUUsageIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 1, 4, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommCPUUsageIRQ.setStatus('current')
if mibBuilder.loadTexts: cwCommCPUUsageIRQ.setDescription('This object provides the CPU usage that is spending on handling interrupt request.')
cwCommCPUUsageSoftIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 1, 4, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommCPUUsageSoftIRQ.setStatus('current')
if mibBuilder.loadTexts: cwCommCPUUsageSoftIRQ.setDescription('This object provides the CPU usage that is spending on handling software interrupt request.')
cwCommCPUUsageSteal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 1, 4, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommCPUUsageSteal.setStatus('current')
if mibBuilder.loadTexts: cwCommCPUUsageSteal.setDescription('This object provides the CPU usage spent on other tasks when running in a virtualized environment.')
cwCommCPUUsageCapacitySubTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 1, 4, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommCPUUsageCapacitySubTotal.setStatus('current')
if mibBuilder.loadTexts: cwCommCPUUsageCapacitySubTotal.setDescription('This object provides the current total CPU capacity.')
cwCommCPUMonitoringStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 1, 5), CiscoWebExCommSysResMonitoringStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommCPUMonitoringStatus.setStatus('current')
if mibBuilder.loadTexts: cwCommCPUMonitoringStatus.setDescription('This object provides the monitoring status of CPU resource. closed (0) - Resource not available open (1) - Resource available')
cwCommCPUCapacityTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommCPUCapacityTotal.setStatus('current')
if mibBuilder.loadTexts: cwCommCPUCapacityTotal.setDescription('This object provides the overall CPU capacity.')
cwCommMEMUsageObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 2))
if mibBuilder.loadTexts: cwCommMEMUsageObject.setStatus('current')
if mibBuilder.loadTexts: cwCommMEMUsageObject.setDescription('This object provides the system memory usage status.')
cwCommMEMUsage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 2, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommMEMUsage.setStatus('current')
if mibBuilder.loadTexts: cwCommMEMUsage.setDescription('This object indicates the physical memory usage of the virtual machine.')
cwCommMEMMonitoringStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 2, 2), CiscoWebExCommSysResMonitoringStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommMEMMonitoringStatus.setStatus('current')
if mibBuilder.loadTexts: cwCommMEMMonitoringStatus.setDescription('This object provides the monitoring status of memory resource. closed (0) - Resource not available open(1) - Resource available')
cwCommMEMTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 2, 3), Gauge32()).setUnits('MBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommMEMTotal.setStatus('current')
if mibBuilder.loadTexts: cwCommMEMTotal.setDescription('This object provides the total physical memory size of the host')
cwCommMEMSwapUsageObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 3))
if mibBuilder.loadTexts: cwCommMEMSwapUsageObject.setStatus('current')
if mibBuilder.loadTexts: cwCommMEMSwapUsageObject.setDescription('This object provides the system memory and swap memory usage.')
cwCommMEMSwapUsage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 3, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommMEMSwapUsage.setStatus('current')
if mibBuilder.loadTexts: cwCommMEMSwapUsage.setDescription("This object provides the host's physical memory usage and swap memory usage.")
cwCommMEMSwapMonitoringStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 3, 2), CiscoWebExCommSysResMonitoringStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommMEMSwapMonitoringStatus.setStatus('current')
if mibBuilder.loadTexts: cwCommMEMSwapMonitoringStatus.setDescription('This object provides the monitoring status of memory and swap memory. closed (0) - The memory and swap memory status is available open (1) - The memory and swap memory status is not available')
cwCommSysResourceNotificationObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 4))
if mibBuilder.loadTexts: cwCommSysResourceNotificationObject.setStatus('current')
if mibBuilder.loadTexts: cwCommSysResourceNotificationObject.setDescription('This object provides all the notification information.')
cwCommNotificationHostAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 4, 1), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cwCommNotificationHostAddressType.setStatus('current')
if mibBuilder.loadTexts: cwCommNotificationHostAddressType.setDescription('This object represents the type of the network address made available through cwCommNotificationHostAddress.')
cwCommNotificationHostAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 4, 2), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cwCommNotificationHostAddress.setStatus('current')
if mibBuilder.loadTexts: cwCommNotificationHostAddress.setDescription("This object provides the host IP address sent with the notification. For example, '10.224.3.49'.")
cwCommNotificationResName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 4, 3), CiscoWebExCommSysResource()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cwCommNotificationResName.setStatus('current')
if mibBuilder.loadTexts: cwCommNotificationResName.setDescription('This object provides the system resource name which is sent with notification. It indicates the named system resource has over pre-defined warning levels. 0. cwCommTtoalCPUUsage, 1. cwCommMemUsage, 2. cwCommMemSwapUsage, 3. open file descriptor (no MIB data) 4. one of the cwCommDiskTotal')
cwCommNotificationResValue = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 4, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cwCommNotificationResValue.setStatus('current')
if mibBuilder.loadTexts: cwCommNotificationResValue.setDescription('This object provides the system resource usage value with notification.')
cwCommNotificationSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 4, 5), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cwCommNotificationSeqNum.setStatus('current')
if mibBuilder.loadTexts: cwCommNotificationSeqNum.setDescription("This object provides sequence number. It's for tracking the order of the Notifications.")
cwCommDiskUsageObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 5))
if mibBuilder.loadTexts: cwCommDiskUsageObject.setStatus('current')
if mibBuilder.loadTexts: cwCommDiskUsageObject.setDescription("This object provides the system's disk usage status.")
cwCommDiskUsageCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 5, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommDiskUsageCount.setStatus('current')
if mibBuilder.loadTexts: cwCommDiskUsageCount.setDescription('This object provides the count of how many disks (e.g. local disk, remote disk, meeting recording disk) available in the system.')
cwCommDiskUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 5, 2), )
if mibBuilder.loadTexts: cwCommDiskUsageTable.setStatus('current')
if mibBuilder.loadTexts: cwCommDiskUsageTable.setDescription('A list of the detailed disk usage status at the partition level for the host, registering on the device.')
cwCommDiskUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 5, 2, 1), ).setIndexNames((0, "CISCO-WBX-MEETING-MIB", "cwCommDiskUsageIndex"))
if mibBuilder.loadTexts: cwCommDiskUsageEntry.setStatus('current')
if mibBuilder.loadTexts: cwCommDiskUsageEntry.setDescription('An entry containing management information generic to the disk usage.')
cwCommDiskUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 5, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: cwCommDiskUsageIndex.setStatus('current')
if mibBuilder.loadTexts: cwCommDiskUsageIndex.setDescription('This object is an index of entries in the table that contain management information generic to the disk usage.')
cwCommDiskPartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 5, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommDiskPartitionName.setStatus('current')
if mibBuilder.loadTexts: cwCommDiskPartitionName.setDescription("this object provides the disk partition name. For example, the partition '/opt', or '/dev' etc.")
cwCommDiskUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 5, 2, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommDiskUsage.setStatus('current')
if mibBuilder.loadTexts: cwCommDiskUsage.setDescription('This object provides the current disk usage on the host.')
cwCommDiskTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 5, 2, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommDiskTotal.setStatus('current')
if mibBuilder.loadTexts: cwCommDiskTotal.setDescription('This object provides the total disk space size of this host.')
cwCommDiskMonitoringStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 809, 1, 2, 5, 3), CiscoWebExCommSysResMonitoringStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwCommDiskMonitoringStatus.setStatus('current')
if mibBuilder.loadTexts: cwCommDiskMonitoringStatus.setDescription('This object provides the monitoring status of disk resource. close (0) - the disk usage status is not available open (1) - the disk usage status is available')
cwCommSystemResourceUsageNormalEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 809, 0, 1)).setObjects(("CISCO-WBX-MEETING-MIB", "cwCommNotificationHostAddressType"), ("CISCO-WBX-MEETING-MIB", "cwCommNotificationHostAddress"), ("CISCO-WBX-MEETING-MIB", "cwCommNotificationResName"), ("CISCO-WBX-MEETING-MIB", "cwCommNotificationResValue"), ("CISCO-WBX-MEETING-MIB", "cwCommNotificationSeqNum"))
if mibBuilder.loadTexts: cwCommSystemResourceUsageNormalEvent.setStatus('current')
if mibBuilder.loadTexts: cwCommSystemResourceUsageNormalEvent.setDescription('This notification indicates that some system resource usage changes to the normal status. System could send out this notification once one of the following cases happens: 1. The cwCommCPUUsage value of one CPU changes to be less than the value of pre-defined CPU Minor Threshold. 2. The value of cwCommMEMUsage changes to be less than the value of pre-defined MEM Minor Threshold. 3. The value of cwCommMEMSwapUsage changes to be less than in the value of pre-defined MEM SwapMinor Threshold. 4. The value of cwCommFileUsage changes to be less than the value of pre-defined File Minor Threshold. 5. The value of cwCommDiskUsage on one disk changes to be less than the value of pre-defined Disk Minor Threshold.')
cwCommSystemResourceUsageMinorEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 809, 0, 2)).setObjects(("CISCO-WBX-MEETING-MIB", "cwCommNotificationHostAddressType"), ("CISCO-WBX-MEETING-MIB", "cwCommNotificationHostAddress"), ("CISCO-WBX-MEETING-MIB", "cwCommNotificationResName"), ("CISCO-WBX-MEETING-MIB", "cwCommNotificationResValue"), ("CISCO-WBX-MEETING-MIB", "cwCommNotificationSeqNum"))
if mibBuilder.loadTexts: cwCommSystemResourceUsageMinorEvent.setStatus('current')
if mibBuilder.loadTexts: cwCommSystemResourceUsageMinorEvent.setDescription('This notification indicates that some system resource usage changes to the minor status. System could send out this notification once one of the following cases happens: 1. The cwCommCPUUsage value of one CPU changes to be larger than or equal to the value of pre-defined CPU Minor Threshold and be less than the value of cwCommCPUMajorThreshold. 2. The cwCommMEMUsage value changes to be larger than or equal to the value of the pre-defined MEM Minor Threshold and be less than the value of pre-defined MEM Major Threshold. 3. The cwCommMEMSwapUsage value changes to be larger than or equal to the value of pre-defined MEM Swap Minor Threshold and be less than the value of pre-defined MEM Swap Major Threshold. 4. The cwCommFileUsage value changes to be larger than or equal to the value of pre-defined File Minor Threshold and be less than the value of pre-defined File Major Threshold. 5. The cwCommDiskUsage value of one disk changes to be larger than or equal to the value of pre-defined Disk Minor Threshold and be less than the value of pre-defined Disk Major Threshold. The minor notification means the system has some issues, the system administrator needs to pay attention.')
cwCommSystemResourceUsageMajorEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 809, 0, 3)).setObjects(("CISCO-WBX-MEETING-MIB", "cwCommNotificationHostAddressType"), ("CISCO-WBX-MEETING-MIB", "cwCommNotificationHostAddress"), ("CISCO-WBX-MEETING-MIB", "cwCommNotificationResName"), ("CISCO-WBX-MEETING-MIB", "cwCommNotificationResValue"), ("CISCO-WBX-MEETING-MIB", "cwCommNotificationSeqNum"))
if mibBuilder.loadTexts: cwCommSystemResourceUsageMajorEvent.setStatus('current')
if mibBuilder.loadTexts: cwCommSystemResourceUsageMajorEvent.setDescription('This notification indicates that some system resource usage changes to the major status. System could send out this notification once one of the following cases happens: 1. The cwCommCPUUsage value of one CPU changes to be larger than or equal to the value of pre-defined CPU Major Threshold. 2. The cwCommMEMUsage value changes to be larger than or equal to the value of pre-defined MEM Major Threshold. 3. The cwCommMEMSwapUsage value changes to be larger than or equal to the value of pre-defined MEM Swap Major Threshold. 4. The cwCommFileUsage value changes to be larger than or equal to the value of pre-defined File Major Threshold. 5. The cwCommDiskUsage value of one disk changes to be larger than or equal to the value of pre-defined Disk Major Threshold. The major notification means the system is in critical status, it needs the system administrator to take action immediately.')
cwCommMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 809, 2, 1))
cwCommMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 809, 2, 1, 1)).setObjects(("CISCO-WBX-MEETING-MIB", "ciscoWebExCommInfoGroup"), ("CISCO-WBX-MEETING-MIB", "ciscoWebExCommSystemResourceGroup"), ("CISCO-WBX-MEETING-MIB", "ciscoWebExMeetingMIBNotifsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwCommMIBCompliance = cwCommMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cwCommMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco WebEx Common MIB.')
cwCommMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 809, 2, 2))
ciscoWebExCommInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 809, 2, 2, 1)).setObjects(("CISCO-WBX-MEETING-MIB", "cwCommSystemVersion"), ("CISCO-WBX-MEETING-MIB", "cwCommSystemObjectID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWebExCommInfoGroup = ciscoWebExCommInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWebExCommInfoGroup.setDescription('This group is a collection of objects representing common host information within Cisco WebEx.')
ciscoWebExCommSystemResourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 809, 2, 2, 2)).setObjects(("CISCO-WBX-MEETING-MIB", "cwCommCPUTotalUsage"), ("CISCO-WBX-MEETING-MIB", "cwCommCPUUsageWindow"), ("CISCO-WBX-MEETING-MIB", "cwCommCPUTotalNumber"), ("CISCO-WBX-MEETING-MIB", "cwCommCPUName"), ("CISCO-WBX-MEETING-MIB", "cwCommCPUUsage"), ("CISCO-WBX-MEETING-MIB", "cwCommCPUMonitoringStatus"), ("CISCO-WBX-MEETING-MIB", "cwCommCPUUsageUser"), ("CISCO-WBX-MEETING-MIB", "cwCommCPUUsageNice"), ("CISCO-WBX-MEETING-MIB", "cwCommCPUUsageSystem"), ("CISCO-WBX-MEETING-MIB", "cwCommCPUUsageIdle"), ("CISCO-WBX-MEETING-MIB", "cwCommCPUUsageIOWait"), ("CISCO-WBX-MEETING-MIB", "cwCommCPUUsageIRQ"), ("CISCO-WBX-MEETING-MIB", "cwCommCPUUsageSoftIRQ"), ("CISCO-WBX-MEETING-MIB", "cwCommCPUUsageSteal"), ("CISCO-WBX-MEETING-MIB", "cwCommCPUUsageCapacitySubTotal"), ("CISCO-WBX-MEETING-MIB", "cwCommCPUCapacityTotal"), ("CISCO-WBX-MEETING-MIB", "cwCommMEMUsage"), ("CISCO-WBX-MEETING-MIB", "cwCommMEMMonitoringStatus"), ("CISCO-WBX-MEETING-MIB", "cwCommMEMSwapUsage"), ("CISCO-WBX-MEETING-MIB", "cwCommMEMSwapMonitoringStatus"), ("CISCO-WBX-MEETING-MIB", "cwCommMEMTotal"), ("CISCO-WBX-MEETING-MIB", "cwCommNotificationHostAddressType"), ("CISCO-WBX-MEETING-MIB", "cwCommNotificationHostAddress"), ("CISCO-WBX-MEETING-MIB", "cwCommNotificationResName"), ("CISCO-WBX-MEETING-MIB", "cwCommNotificationResValue"), ("CISCO-WBX-MEETING-MIB", "cwCommNotificationSeqNum"), ("CISCO-WBX-MEETING-MIB", "cwCommDiskUsageCount"), ("CISCO-WBX-MEETING-MIB", "cwCommDiskPartitionName"), ("CISCO-WBX-MEETING-MIB", "cwCommDiskUsage"), ("CISCO-WBX-MEETING-MIB", "cwCommDiskTotal"), ("CISCO-WBX-MEETING-MIB", "cwCommDiskMonitoringStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWebExCommSystemResourceGroup = ciscoWebExCommSystemResourceGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWebExCommSystemResourceGroup.setDescription('this group is a collection of objects representing system resource information of the host.')
ciscoWebExMeetingMIBNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 809, 2, 2, 3)).setObjects(("CISCO-WBX-MEETING-MIB", "cwCommSystemResourceUsageNormalEvent"), ("CISCO-WBX-MEETING-MIB", "cwCommSystemResourceUsageMinorEvent"), ("CISCO-WBX-MEETING-MIB", "cwCommSystemResourceUsageMajorEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWebExMeetingMIBNotifsGroup = ciscoWebExMeetingMIBNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWebExMeetingMIBNotifsGroup.setDescription('This group defines the notifications generated by this MIB module.')
mibBuilder.exportSymbols("CISCO-WBX-MEETING-MIB", cwCommCPUMonitoringStatus=cwCommCPUMonitoringStatus, cwCommCPUUsageObject=cwCommCPUUsageObject, cwCommMIBCompliances=cwCommMIBCompliances, cwCommNotificationResName=cwCommNotificationResName, cwCommMEMSwapMonitoringStatus=cwCommMEMSwapMonitoringStatus, cwCommMEMUsageObject=cwCommMEMUsageObject, cwCommDiskUsageTable=cwCommDiskUsageTable, ciscoWebExMeetingMIBConform=ciscoWebExMeetingMIBConform, cwCommMEMSwapUsageObject=cwCommMEMSwapUsageObject, cwCommDiskTotal=cwCommDiskTotal, ciscoWebExCommSystemResourceGroup=ciscoWebExCommSystemResourceGroup, cwCommCPUTotalNumber=cwCommCPUTotalNumber, cwCommMEMTotal=cwCommMEMTotal, cwCommCPUUsage=cwCommCPUUsage, cwCommSystemVersion=cwCommSystemVersion, cwCommDiskUsageIndex=cwCommDiskUsageIndex, cwCommCPUUsageSystem=cwCommCPUUsageSystem, cwCommCPUUsageIOWait=cwCommCPUUsageIOWait, cwCommCPUUsageSoftIRQ=cwCommCPUUsageSoftIRQ, cwCommNotificationSeqNum=cwCommNotificationSeqNum, PYSNMP_MODULE_ID=ciscoWebExMeetingMIB, ciscoWebExMeetingMIBNotifsGroup=ciscoWebExMeetingMIBNotifsGroup, ciscoWebExMeetingMIB=ciscoWebExMeetingMIB, cwCommSystemResourceUsageMinorEvent=cwCommSystemResourceUsageMinorEvent, cwCommCPUUsageTable=cwCommCPUUsageTable, cwCommCPUUsageNice=cwCommCPUUsageNice, cwCommCPUIndex=cwCommCPUIndex, cwCommDiskUsageObject=cwCommDiskUsageObject, cwCommDiskPartitionName=cwCommDiskPartitionName, cwCommDiskUsage=cwCommDiskUsage, ciscoWebExCommInfoGroup=ciscoWebExCommInfoGroup, cwCommCPUTotalUsage=cwCommCPUTotalUsage, cwCommNotificationHostAddressType=cwCommNotificationHostAddressType, cwCommSystemResourceUsageNormalEvent=cwCommSystemResourceUsageNormalEvent, cwCommDiskUsageCount=cwCommDiskUsageCount, cwCommCPUName=cwCommCPUName, CiscoWebExCommSysResource=CiscoWebExCommSysResource, cwCommDiskUsageEntry=cwCommDiskUsageEntry, cwCommMIBGroups=cwCommMIBGroups, ciscoWebExCommSystemResource=ciscoWebExCommSystemResource, CiscoWebExCommSysResMonitoringStatus=CiscoWebExCommSysResMonitoringStatus, cwCommCPUUsageSteal=cwCommCPUUsageSteal, ciscoWebExMeetingMIBObjects=ciscoWebExMeetingMIBObjects, cwCommSysResourceNotificationObject=cwCommSysResourceNotificationObject, cwCommMEMMonitoringStatus=cwCommMEMMonitoringStatus, cwCommMIBCompliance=cwCommMIBCompliance, cwCommNotificationResValue=cwCommNotificationResValue, cwCommCPUUsageCapacitySubTotal=cwCommCPUUsageCapacitySubTotal, cwCommMEMSwapUsage=cwCommMEMSwapUsage, ciscoWebExMeetingMIBNotifs=ciscoWebExMeetingMIBNotifs, cwCommCPUUsageUser=cwCommCPUUsageUser, cwCommMEMUsage=cwCommMEMUsage, cwCommCPUUsageIdle=cwCommCPUUsageIdle, cwCommSystemResourceUsageMajorEvent=cwCommSystemResourceUsageMajorEvent, cwCommDiskMonitoringStatus=cwCommDiskMonitoringStatus, cwCommSystemObjectID=cwCommSystemObjectID, cwCommCPUUsageEntry=cwCommCPUUsageEntry, cwCommCPUUsageIRQ=cwCommCPUUsageIRQ, cwCommCPUUsageWindow=cwCommCPUUsageWindow, ciscoWebExCommInfo=ciscoWebExCommInfo, cwCommNotificationHostAddress=cwCommNotificationHostAddress, cwCommCPUCapacityTotal=cwCommCPUCapacityTotal)
