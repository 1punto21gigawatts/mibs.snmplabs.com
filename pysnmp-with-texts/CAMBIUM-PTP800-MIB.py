#
# PySNMP MIB module CAMBIUM-PTP800-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CAMBIUM-PTP800-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:46:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
iso, Gauge32, enterprises, Bits, Integer32, IpAddress, Counter32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, MibIdentifier, Counter64, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "enterprises", "Bits", "Integer32", "IpAddress", "Counter32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Counter64", "TimeTicks", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cambium = ModuleIdentity((1, 3, 6, 1, 4, 1, 17713))
cambium.setRevisions(('2012-04-20 12:26', '2011-08-19 12:29', '2011-03-16 17:23', '2010-09-30 16:29', '2010-07-30 13:07', '2010-05-27 19:52', '2010-03-31 13:09', '2010-01-04 18:33', '2009-10-21 14:26',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cambium.setRevisionsDescriptions(("PTP800-05-00: Added objects and traps to support IRFU, and 1+1 hot standby with receive diversity. Added queue mapping objects for L3 QOS. Added securityLevel to the licence group. Added syslogClientTrap. Updated objects and traps for multiple secure SNTP servers. Renamed 'oDU' objects to 'rFU'. Renamed antennaProtection to numberOfAntennas. Renamed 'vLANPriority' objects to 'ethernetPriority'. Renamed 'l2CPQueueMapping' objects to 'l2CPPriority'. Renamed 'fipsOperationalMode' objects to 'secureMode'. Renamed 'motorolaPTP' productVariant enumerations to 'pTP'. Renamed sNTPSynchronizationFailed bit to sNTPSync in enabledDiagnosticAlarms. Renamed activeElapsedTime to activeCounterMeasurementPeriod. Corrected spelling of 'advertisement' attributes.", 'PTP800-04-00: Renamed oDUIfSynthLockAlarm to oduCommonSynthLockAlarm. Increased range for radioLicenseRegion, radioLicenseBandwidth, transmitCapacityLimitDetail and rFUStatus. Added objects for http, https, and telnet. Added objects and traps for syslog. Replaced single instance of trap receiver with a table.', 'PTP800-03-00: Added objects and traps to support 1+1 Hot Standby. Updated range and description text for a number of objects. Made enableTransmission read-write. Added enableDiagnosticAlarms. Made byteErrorRatio and codeWordErrorRatio 64 bit counters.', 'PTP800-02-04: Updated & re-formatted description text. Corrected DisplayString sizes. Changed longitude and latitude types. Updated transmitCapacityLimit & dataPortCopperForcedConfiguration ranges.', 'PTP800-02-02: Added new phyStatusGroup objects. Updated oDUFreqSpacing & linkLoss ranges.', 'PTP800-02-01: data & management port status traps, writeable auto-negotiation.', 'PTP800-02-00: BIT STRING types now OCTET STRING. Added linkName, siteName, & support for l2CPQueueMapping & ACM ranges.', 'PTP800-01-01', 'PTP800-01-00',))
if mibBuilder.loadTexts: cambium.setLastUpdated('201204201226Z')
if mibBuilder.loadTexts: cambium.setOrganization('Cambium Networks Ltd.')
if mibBuilder.loadTexts: cambium.setContactInfo('Post: Simon Whitaker Cambium Networks Ltd. Unit B2, Linhay Business Park, Eastern Road, Ashburton, Devon. TQ13 7UP United Kingdom Phone: +44 (0) 1364 655 500 Email: simon.whitaker@cambiumnetworks.com')
if mibBuilder.loadTexts: cambium.setDescription('MIB for licenced microwave point to point wireless ethernet bridge.')
ptp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 1))
ptmp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 2))
ptp800 = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8))
bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 4))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 5))
ethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 6))
licence = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 8))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 9))
phyControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 10))
phyStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 12))
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 13))
smtp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 15))
snmpControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 16))
sntp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 17))
reset = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 18))
versions = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 19))
pubStats = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 20))
encryption = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 22))
rfu = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 23))
radioLicense = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 24))
protectionConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 25))
protectionStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 26))
protectionStats = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 27))
syslogControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 28))
supplementary = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 96))
ptpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 98))
ptpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 99))
ptpTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0))
ptpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 17713, 8, 97)).setObjects(("CAMBIUM-PTP800-MIB", "bridgeGroup"), ("CAMBIUM-PTP800-MIB", "configurationGroup"), ("CAMBIUM-PTP800-MIB", "ethernetGroup"), ("CAMBIUM-PTP800-MIB", "licenceGroup"), ("CAMBIUM-PTP800-MIB", "managementGroup"), ("CAMBIUM-PTP800-MIB", "phyControlGroup"), ("CAMBIUM-PTP800-MIB", "phyStatusGroup"), ("CAMBIUM-PTP800-MIB", "alarmsGroup"), ("CAMBIUM-PTP800-MIB", "smtpGroup"), ("CAMBIUM-PTP800-MIB", "snmpControlGroup"), ("CAMBIUM-PTP800-MIB", "sntpGroup"), ("CAMBIUM-PTP800-MIB", "resetGroup"), ("CAMBIUM-PTP800-MIB", "versionsGroup"), ("CAMBIUM-PTP800-MIB", "pubStatsGroup"), ("CAMBIUM-PTP800-MIB", "encryptionGroup"), ("CAMBIUM-PTP800-MIB", "rfuGroup"), ("CAMBIUM-PTP800-MIB", "radioLicenseGroup"), ("CAMBIUM-PTP800-MIB", "protectionConfigGroup"), ("CAMBIUM-PTP800-MIB", "protectionStatusGroup"), ("CAMBIUM-PTP800-MIB", "protectionStatsGroup"), ("CAMBIUM-PTP800-MIB", "syslogControlGroup"), ("CAMBIUM-PTP800-MIB", "supplementaryGroup"), ("CAMBIUM-PTP800-MIB", "notificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ptpCompliance = ptpCompliance.setStatus('current')
if mibBuilder.loadTexts: ptpCompliance.setDescription('The compliance statement for the Cambium PTP MIB')
bridgeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 4)).setObjects(("CAMBIUM-PTP800-MIB", "localPacketFiltering"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeGroup = bridgeGroup.setStatus('current')
if mibBuilder.loadTexts: bridgeGroup.setDescription('The bridge object group.')
configurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 5)).setObjects(("CAMBIUM-PTP800-MIB", "iPAddress"), ("CAMBIUM-PTP800-MIB", "subnetMask"), ("CAMBIUM-PTP800-MIB", "gatewayIPAddress"), ("CAMBIUM-PTP800-MIB", "maximumTransmitPower"), ("CAMBIUM-PTP800-MIB", "antennaGain"), ("CAMBIUM-PTP800-MIB", "rFFeederLoss"), ("CAMBIUM-PTP800-MIB", "remoteIPAddress"), ("CAMBIUM-PTP800-MIB", "remoteMACAddress"), ("CAMBIUM-PTP800-MIB", "enableTransmission"), ("CAMBIUM-PTP800-MIB", "aTPCEnable"), ("CAMBIUM-PTP800-MIB", "iFCableLength"), ("CAMBIUM-PTP800-MIB", "linkName"), ("CAMBIUM-PTP800-MIB", "siteName"), ("CAMBIUM-PTP800-MIB", "diverseAntennaGain"), ("CAMBIUM-PTP800-MIB", "diverseRfFeederLoss"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configurationGroup = configurationGroup.setStatus('current')
if mibBuilder.loadTexts: configurationGroup.setDescription('The configuration object group.')
ethernetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 6)).setObjects(("CAMBIUM-PTP800-MIB", "dataPortCopperAutoNegotiation"), ("CAMBIUM-PTP800-MIB", "dataPortCopperAutoNegAdvertisement"), ("CAMBIUM-PTP800-MIB", "dataPortStatus"), ("CAMBIUM-PTP800-MIB", "dataPortSpeedAndDuplex"), ("CAMBIUM-PTP800-MIB", "dataPortWirelessDownAlert"), ("CAMBIUM-PTP800-MIB", "useVLANForManagementInterfaces"), ("CAMBIUM-PTP800-MIB", "vLANManagementPriority"), ("CAMBIUM-PTP800-MIB", "vLANManagementVIDValidation"), ("CAMBIUM-PTP800-MIB", "vLANManagementVID"), ("CAMBIUM-PTP800-MIB", "ethernetPriorityTableNumber"), ("CAMBIUM-PTP800-MIB", "managementPortAutoNegotiation"), ("CAMBIUM-PTP800-MIB", "managementPortAutoNegAdvertisement"), ("CAMBIUM-PTP800-MIB", "managementPortStatus"), ("CAMBIUM-PTP800-MIB", "managementPortSpeedAndDuplex"), ("CAMBIUM-PTP800-MIB", "managementPortWirelessDownAlert"), ("CAMBIUM-PTP800-MIB", "managementMode"), ("CAMBIUM-PTP800-MIB", "managementCommittedInformationRate"), ("CAMBIUM-PTP800-MIB", "dataPortPauseFrames"), ("CAMBIUM-PTP800-MIB", "transmitCapacityLimit"), ("CAMBIUM-PTP800-MIB", "transmitCapacityLimitDetail"), ("CAMBIUM-PTP800-MIB", "dataPortEthernetMediaTypeToUse"), ("CAMBIUM-PTP800-MIB", "dataPortCopperForcedConfiguration"), ("CAMBIUM-PTP800-MIB", "managementPortForcedConfiguration"), ("CAMBIUM-PTP800-MIB", "l2CPPriorityTableNumber"), ("CAMBIUM-PTP800-MIB", "unknownNetworkPriorityQueueMapping"), ("CAMBIUM-PTP800-MIB", "dSCPManagementPriority"), ("CAMBIUM-PTP800-MIB", "qOSPriorityScheme"), ("CAMBIUM-PTP800-MIB", "iPDSCPPriorityTableNumber"), ("CAMBIUM-PTP800-MIB", "mPLSTCPriorityTableNumber"), ("CAMBIUM-PTP800-MIB", "ethernetPriorityQueueMapping"), ("CAMBIUM-PTP800-MIB", "l2CPPriorityQueueMapping"), ("CAMBIUM-PTP800-MIB", "iPDSCPPriorityQueueMapping"), ("CAMBIUM-PTP800-MIB", "mPLSTCPriorityQueueMapping"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetGroup = ethernetGroup.setStatus('current')
if mibBuilder.loadTexts: ethernetGroup.setDescription('The ethernet object group.')
licenceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 8)).setObjects(("CAMBIUM-PTP800-MIB", "productVariant"), ("CAMBIUM-PTP800-MIB", "productName"), ("CAMBIUM-PTP800-MIB", "ethernetFiberSupport"), ("CAMBIUM-PTP800-MIB", "transmitCapacity"), ("CAMBIUM-PTP800-MIB", "encryptionAlgorithmsAvail"), ("CAMBIUM-PTP800-MIB", "securityLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    licenceGroup = licenceGroup.setStatus('current')
if mibBuilder.loadTexts: licenceGroup.setDescription('The licence object group.')
managementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 9)).setObjects(("CAMBIUM-PTP800-MIB", "linkNameMismatch"), ("CAMBIUM-PTP800-MIB", "alignmentMode"), ("CAMBIUM-PTP800-MIB", "tFTPServerIPAddress"), ("CAMBIUM-PTP800-MIB", "tFTPServerPortNumber"), ("CAMBIUM-PTP800-MIB", "tFTPSoftwareUpgradeFileName"), ("CAMBIUM-PTP800-MIB", "tFTPStartSoftwareUpgrade"), ("CAMBIUM-PTP800-MIB", "tFTPSoftwareUpgradeStatus"), ("CAMBIUM-PTP800-MIB", "tFTPSoftwareUpgradeStatusText"), ("CAMBIUM-PTP800-MIB", "tFTPSoftwareUpgradeStatusAdditionalText"), ("CAMBIUM-PTP800-MIB", "hTTPAccessEnabled"), ("CAMBIUM-PTP800-MIB", "telnetAccessEnabled"), ("CAMBIUM-PTP800-MIB", "hTTPPortNumber"), ("CAMBIUM-PTP800-MIB", "hTTPSPortNumber"), ("CAMBIUM-PTP800-MIB", "telnetPortNumber"), ("CAMBIUM-PTP800-MIB", "hTTPSAccessEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    managementGroup = managementGroup.setStatus('current')
if mibBuilder.loadTexts: managementGroup.setDescription('The management object group.')
phyControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 10)).setObjects(("CAMBIUM-PTP800-MIB", "remoteMaximumTransmitPower"), ("CAMBIUM-PTP800-MIB", "minModulation"), ("CAMBIUM-PTP800-MIB", "minCodeRate"), ("CAMBIUM-PTP800-MIB", "maxModulation"), ("CAMBIUM-PTP800-MIB", "maxCodeRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    phyControlGroup = phyControlGroup.setStatus('current')
if mibBuilder.loadTexts: phyControlGroup.setDescription('The phyControl object group.')
phyStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 12)).setObjects(("CAMBIUM-PTP800-MIB", "receivePower"), ("CAMBIUM-PTP800-MIB", "vectorError"), ("CAMBIUM-PTP800-MIB", "transmitPower"), ("CAMBIUM-PTP800-MIB", "linkLoss"), ("CAMBIUM-PTP800-MIB", "receiveModulation"), ("CAMBIUM-PTP800-MIB", "transmitModulation"), ("CAMBIUM-PTP800-MIB", "receiveCodeRate"), ("CAMBIUM-PTP800-MIB", "transmitCodeRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    phyStatusGroup = phyStatusGroup.setStatus('current')
if mibBuilder.loadTexts: phyStatusGroup.setDescription('The phyStatus object group.')
alarmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 13)).setObjects(("CAMBIUM-PTP800-MIB", "unitOutOfCalibration"), ("CAMBIUM-PTP800-MIB", "encryptionEnabledMismatch"), ("CAMBIUM-PTP800-MIB", "wirelessLinkDisabledWarning"), ("CAMBIUM-PTP800-MIB", "dataPortDisabledWarning"), ("CAMBIUM-PTP800-MIB", "dataPortFiberStatus"), ("CAMBIUM-PTP800-MIB", "dataPortConfigurationMismatch"), ("CAMBIUM-PTP800-MIB", "managementPortDisabledWarning"), ("CAMBIUM-PTP800-MIB", "rFUStatus"), ("CAMBIUM-PTP800-MIB", "managementPortConfigurationMismatch"), ("CAMBIUM-PTP800-MIB", "secureModeAlarm"), ("CAMBIUM-PTP800-MIB", "rFUPlatformCompatibility"), ("CAMBIUM-PTP800-MIB", "rFUProtectionCompatibility"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alarmsGroup = alarmsGroup.setStatus('current')
if mibBuilder.loadTexts: alarmsGroup.setDescription('The alarms object group.')
smtpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 15)).setObjects(("CAMBIUM-PTP800-MIB", "sMTPEmailAlert"), ("CAMBIUM-PTP800-MIB", "sMTPServerIPAddress"), ("CAMBIUM-PTP800-MIB", "sMTPServerPortNumber"), ("CAMBIUM-PTP800-MIB", "sMTPSourceEmailAddress"), ("CAMBIUM-PTP800-MIB", "sMTPDestinationEmailAddress"), ("CAMBIUM-PTP800-MIB", "sMTPEnabledMessages"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    smtpGroup = smtpGroup.setStatus('current')
if mibBuilder.loadTexts: smtpGroup.setDescription('The smtp object group.')
snmpControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 16)).setObjects(("CAMBIUM-PTP800-MIB", "sNMPPortNumber"), ("CAMBIUM-PTP800-MIB", "sNMPCommunityString"), ("CAMBIUM-PTP800-MIB", "sNMPTrapVersion"), ("CAMBIUM-PTP800-MIB", "sNMPEnabledTraps"), ("CAMBIUM-PTP800-MIB", "enabledDiagnosticAlarms"), ("CAMBIUM-PTP800-MIB", "enabledDiagnosticProtectionAlarms"), ("CAMBIUM-PTP800-MIB", "sNMPTrapTableNumber"), ("CAMBIUM-PTP800-MIB", "sNMPTrapIPAddress"), ("CAMBIUM-PTP800-MIB", "sNMPTrapPortNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpControlGroup = snmpControlGroup.setStatus('current')
if mibBuilder.loadTexts: snmpControlGroup.setDescription('The snmpControl object group.')
sntpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 17)).setObjects(("CAMBIUM-PTP800-MIB", "sNTPState"), ("CAMBIUM-PTP800-MIB", "sNTPPollInterval"), ("CAMBIUM-PTP800-MIB", "sNTPSync"), ("CAMBIUM-PTP800-MIB", "sNTPLastSync"), ("CAMBIUM-PTP800-MIB", "systemClock"), ("CAMBIUM-PTP800-MIB", "timeZone"), ("CAMBIUM-PTP800-MIB", "daylightSaving"), ("CAMBIUM-PTP800-MIB", "sNTPPrimaryServer"), ("CAMBIUM-PTP800-MIB", "sNTPPrimaryServerDeadTime"), ("CAMBIUM-PTP800-MIB", "sNTPServerRetries"), ("CAMBIUM-PTP800-MIB", "sNTPServerTimeout"), ("CAMBIUM-PTP800-MIB", "sNTPServerTableNumber"), ("CAMBIUM-PTP800-MIB", "sNTPServerIPAddress"), ("CAMBIUM-PTP800-MIB", "sNTPServerPortNumber"), ("CAMBIUM-PTP800-MIB", "sNTPServerResponse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sntpGroup = sntpGroup.setStatus('current')
if mibBuilder.loadTexts: sntpGroup.setDescription('The sntp object group.')
resetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 18)).setObjects(("CAMBIUM-PTP800-MIB", "systemReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    resetGroup = resetGroup.setStatus('current')
if mibBuilder.loadTexts: resetGroup.setDescription('The reset object group.')
versionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 19)).setObjects(("CAMBIUM-PTP800-MIB", "softwareVersion"), ("CAMBIUM-PTP800-MIB", "hardwareVersion"), ("CAMBIUM-PTP800-MIB", "secondarySoftwareVersion"), ("CAMBIUM-PTP800-MIB", "bootVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    versionsGroup = versionsGroup.setStatus('current')
if mibBuilder.loadTexts: versionsGroup.setDescription('The versions object group.')
pubStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 20)).setObjects(("CAMBIUM-PTP800-MIB", "receiveDataRate"), ("CAMBIUM-PTP800-MIB", "transmitDataRate"), ("CAMBIUM-PTP800-MIB", "aggregateDataRate"), ("CAMBIUM-PTP800-MIB", "wirelessLinkAvailability"), ("CAMBIUM-PTP800-MIB", "wirelessLinkStatus"), ("CAMBIUM-PTP800-MIB", "byteErrorRatio"), ("CAMBIUM-PTP800-MIB", "codeWordErrorRatio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pubStatsGroup = pubStatsGroup.setStatus('current')
if mibBuilder.loadTexts: pubStatsGroup.setDescription('The pubStats object group.')
encryptionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 22)).setObjects(("CAMBIUM-PTP800-MIB", "encryptionAlgorithm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    encryptionGroup = encryptionGroup.setStatus('current')
if mibBuilder.loadTexts: encryptionGroup.setDescription('The encryption object group.')
rfuGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 23)).setObjects(("CAMBIUM-PTP800-MIB", "rFURfBand"), ("CAMBIUM-PTP800-MIB", "rFUTxBandAboveRx"), ("CAMBIUM-PTP800-MIB", "rFUFreqSpacing"), ("CAMBIUM-PTP800-MIB", "rFUTxPowerMin"), ("CAMBIUM-PTP800-MIB", "rFUTxPowerMax"), ("CAMBIUM-PTP800-MIB", "rFURxFreqMin"), ("CAMBIUM-PTP800-MIB", "rFURxFreqMax"), ("CAMBIUM-PTP800-MIB", "rFUTxFreqMin"), ("CAMBIUM-PTP800-MIB", "rFUTxFreqMax"), ("CAMBIUM-PTP800-MIB", "rFUSerial"), ("CAMBIUM-PTP800-MIB", "rFUActiveFirmwareBank"), ("CAMBIUM-PTP800-MIB", "rFUVersionBank1"), ("CAMBIUM-PTP800-MIB", "rFUVersionBank2"), ("CAMBIUM-PTP800-MIB", "rFUType"), ("CAMBIUM-PTP800-MIB", "rFURxRFSynthLockAlarm"), ("CAMBIUM-PTP800-MIB", "rFUTxRFSynthLockAlarm"), ("CAMBIUM-PTP800-MIB", "rFUTxPowerAlarm"), ("CAMBIUM-PTP800-MIB", "rFUCommonIFSynthLockAlarm"), ("CAMBIUM-PTP800-MIB", "rFUPowerAlarm"), ("CAMBIUM-PTP800-MIB", "rFULockoutAlarm"), ("CAMBIUM-PTP800-MIB", "rFUCableAlarm"), ("CAMBIUM-PTP800-MIB", "rFUCableAttenuationAdjustAlarm"), ("CAMBIUM-PTP800-MIB", "rFUTxPowerDegradedAlarm"), ("CAMBIUM-PTP800-MIB", "rFURpsAlarm"), ("CAMBIUM-PTP800-MIB", "rFUTxMuteStatus"), ("CAMBIUM-PTP800-MIB", "rFUFanAssemblyAlarm"), ("CAMBIUM-PTP800-MIB", "rFUHighTemperatureAlarm"), ("CAMBIUM-PTP800-MIB", "rFURFSwitchAlarm"), ("CAMBIUM-PTP800-MIB", "rFURxIFSynthLockAlarm"), ("CAMBIUM-PTP800-MIB", "rFUTxIFSynthLockAlarm"), ("CAMBIUM-PTP800-MIB", "rFUPowerButtonPressed"), ("CAMBIUM-PTP800-MIB", "rFUConnectedPlatform"), ("CAMBIUM-PTP800-MIB", "rFUCommonRFSynthLockAlarm"), ("CAMBIUM-PTP800-MIB", "rFUBranchingConfiguration"), ("CAMBIUM-PTP800-MIB", "rFUTransceiverLocation"), ("CAMBIUM-PTP800-MIB", "rFURfSwitchCableAlarm"), ("CAMBIUM-PTP800-MIB", "rFUReceiveBranchingUnitLoss"), ("CAMBIUM-PTP800-MIB", "rFUTransmitBranchingUnitLoss"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rfuGroup = rfuGroup.setStatus('current')
if mibBuilder.loadTexts: rfuGroup.setDescription('The rfu object group.')
radioLicenseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 24)).setObjects(("CAMBIUM-PTP800-MIB", "radioLicenseIdentifier"), ("CAMBIUM-PTP800-MIB", "radioLicenseBand"), ("CAMBIUM-PTP800-MIB", "radioLicenseRegion"), ("CAMBIUM-PTP800-MIB", "radioLicenseTxFreq"), ("CAMBIUM-PTP800-MIB", "radioLicenseRxFreq"), ("CAMBIUM-PTP800-MIB", "radioLicenseBandwidth"), ("CAMBIUM-PTP800-MIB", "radioLicenseMaxEIRP"), ("CAMBIUM-PTP800-MIB", "radioLicenseModulation"), ("CAMBIUM-PTP800-MIB", "radioLicenseCodeRate"), ("CAMBIUM-PTP800-MIB", "radioLicenseIncompatibleAlarm"), ("CAMBIUM-PTP800-MIB", "radioLicenseMinModulation"), ("CAMBIUM-PTP800-MIB", "radioLicenseMinCodeRate"), ("CAMBIUM-PTP800-MIB", "radioLicenseMaxModulation"), ("CAMBIUM-PTP800-MIB", "radioLicenseMaxCodeRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    radioLicenseGroup = radioLicenseGroup.setStatus('current')
if mibBuilder.loadTexts: radioLicenseGroup.setDescription('The radioLicense object group.')
protectionConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 25)).setObjects(("CAMBIUM-PTP800-MIB", "protection"), ("CAMBIUM-PTP800-MIB", "faultProtectionSwitching"), ("CAMBIUM-PTP800-MIB", "primarySecondaryMode"), ("CAMBIUM-PTP800-MIB", "numberOfAntennas"), ("CAMBIUM-PTP800-MIB", "primaryRecovery"), ("CAMBIUM-PTP800-MIB", "primaryRecoveryPeriod"), ("CAMBIUM-PTP800-MIB", "requestedProtectionState"), ("CAMBIUM-PTP800-MIB", "antennaReceiveLevelDeltaThreshold"), ("CAMBIUM-PTP800-MIB", "antennaReceiveLevelMeasurementWindow"), ("CAMBIUM-PTP800-MIB", "fiberY"), ("CAMBIUM-PTP800-MIB", "rxDiversityVlanTpid"), ("CAMBIUM-PTP800-MIB", "rxDiversityVid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    protectionConfigGroup = protectionConfigGroup.setStatus('current')
if mibBuilder.loadTexts: protectionConfigGroup.setDescription('The protectionConfig object group.')
protectionStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 26)).setObjects(("CAMBIUM-PTP800-MIB", "protectionAvailabilityStatus"), ("CAMBIUM-PTP800-MIB", "protectionConfigurationStatus"), ("CAMBIUM-PTP800-MIB", "protectionState"), ("CAMBIUM-PTP800-MIB", "activeUnit"), ("CAMBIUM-PTP800-MIB", "protectionSwitchCause"), ("CAMBIUM-PTP800-MIB", "endId"), ("CAMBIUM-PTP800-MIB", "neighborIPAddress"), ("CAMBIUM-PTP800-MIB", "neighborMACAddress"), ("CAMBIUM-PTP800-MIB", "wirelessReceiveSignalStatus"), ("CAMBIUM-PTP800-MIB", "licensedTransmitCapacityStatus"), ("CAMBIUM-PTP800-MIB", "dataPortEthernetSpeedStatus"), ("CAMBIUM-PTP800-MIB", "managementPortEthernetSpeedStatus"), ("CAMBIUM-PTP800-MIB", "protectionInterfaceStatus"), ("CAMBIUM-PTP800-MIB", "remotePrimaryIPAddress"), ("CAMBIUM-PTP800-MIB", "remoteSecondaryIPAddress"), ("CAMBIUM-PTP800-MIB", "remotePrimaryMACAddress"), ("CAMBIUM-PTP800-MIB", "remoteSecondaryMACAddress"), ("CAMBIUM-PTP800-MIB", "remotePrimarySecondaryMode"), ("CAMBIUM-PTP800-MIB", "transmitterStatus"), ("CAMBIUM-PTP800-MIB", "endWirelessReceiveSignalStatus"), ("CAMBIUM-PTP800-MIB", "rxDiversityDataPortStatus"), ("CAMBIUM-PTP800-MIB", "rxDiversityAvailabilityStatus"), ("CAMBIUM-PTP800-MIB", "rxDiversityConfigurationStatus"), ("CAMBIUM-PTP800-MIB", "rxDiversityNeighborCompatibility"), ("CAMBIUM-PTP800-MIB", "rxDiversityVlanTpidNeighborCompatibility"), ("CAMBIUM-PTP800-MIB", "rxDiversityVidNeighborCompatibility"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    protectionStatusGroup = protectionStatusGroup.setStatus('current')
if mibBuilder.loadTexts: protectionStatusGroup.setDescription('The protectionStatus object group.')
protectionStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 27)).setObjects(("CAMBIUM-PTP800-MIB", "activeCodeWordCount"), ("CAMBIUM-PTP800-MIB", "activeCodeWordErrorCount"), ("CAMBIUM-PTP800-MIB", "activeByteCount"), ("CAMBIUM-PTP800-MIB", "activeByteErrorCount"), ("CAMBIUM-PTP800-MIB", "activeAvailableTime"), ("CAMBIUM-PTP800-MIB", "activeCounterMeasurementPeriod"), ("CAMBIUM-PTP800-MIB", "activeWirelessLinkAvailability"), ("CAMBIUM-PTP800-MIB", "activeCodeWordErrorRatio"), ("CAMBIUM-PTP800-MIB", "activeByteErrorRatio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    protectionStatsGroup = protectionStatsGroup.setStatus('current')
if mibBuilder.loadTexts: protectionStatsGroup.setDescription('The protectionStats object group.')
syslogControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 28)).setObjects(("CAMBIUM-PTP800-MIB", "syslogClient"), ("CAMBIUM-PTP800-MIB", "syslogState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    syslogControlGroup = syslogControlGroup.setStatus('current')
if mibBuilder.loadTexts: syslogControlGroup.setDescription('The syslogControl object group.')
supplementaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 96)).setObjects(("CAMBIUM-PTP800-MIB", "longitude"), ("CAMBIUM-PTP800-MIB", "latitude"), ("CAMBIUM-PTP800-MIB", "altitude"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    supplementaryGroup = supplementaryGroup.setStatus('current')
if mibBuilder.loadTexts: supplementaryGroup.setDescription('The supplementary object group.')
notificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 99)).setObjects(("CAMBIUM-PTP800-MIB", "dataPortStatusTrap"), ("CAMBIUM-PTP800-MIB", "linkNameMismatchTrap"), ("CAMBIUM-PTP800-MIB", "alignmentModeTrap"), ("CAMBIUM-PTP800-MIB", "unitOutOfCalibrationTrap"), ("CAMBIUM-PTP800-MIB", "encryptionEnabledMismatchTrap"), ("CAMBIUM-PTP800-MIB", "wirelessLinkDisabledWarningTrap"), ("CAMBIUM-PTP800-MIB", "dataPortDisabledWarningTrap"), ("CAMBIUM-PTP800-MIB", "dataPortFiberStatusTrap"), ("CAMBIUM-PTP800-MIB", "dataPortConfigurationMismatchTrap"), ("CAMBIUM-PTP800-MIB", "sNTPSyncTrap"), ("CAMBIUM-PTP800-MIB", "managementPortStatusTrap"), ("CAMBIUM-PTP800-MIB", "managementPortDisabledWarningTrap"), ("CAMBIUM-PTP800-MIB", "rFUStatusTrap"), ("CAMBIUM-PTP800-MIB", "managementPortConfigurationMismatchTrap"), ("CAMBIUM-PTP800-MIB", "wirelessLinkStatusTrap"), ("CAMBIUM-PTP800-MIB", "protectionAvailabilityStatusTrap"), ("CAMBIUM-PTP800-MIB", "protectionConfigurationStatusTrap"), ("CAMBIUM-PTP800-MIB", "protectionStateTrap"), ("CAMBIUM-PTP800-MIB", "wirelessReceiveSignalStatusTrap"), ("CAMBIUM-PTP800-MIB", "licensedTransmitCapacityStatusTrap"), ("CAMBIUM-PTP800-MIB", "dataPortEthernetSpeedStatusTrap"), ("CAMBIUM-PTP800-MIB", "managementPortEthernetSpeedStatusTrap"), ("CAMBIUM-PTP800-MIB", "protectionInterfaceStatusTrap"), ("CAMBIUM-PTP800-MIB", "syslogStateTrap"), ("CAMBIUM-PTP800-MIB", "syslogLocalNearlyFullTrap"), ("CAMBIUM-PTP800-MIB", "syslogLocalWrappedTrap"), ("CAMBIUM-PTP800-MIB", "secureModeAlarmTrap"), ("CAMBIUM-PTP800-MIB", "endWirelessReceiveSignalStatusTrap"), ("CAMBIUM-PTP800-MIB", "rxDiversityDataPortStatusTrap"), ("CAMBIUM-PTP800-MIB", "rxDiversityAvailabilityStatusTrap"), ("CAMBIUM-PTP800-MIB", "rxDiversityConfigurationStatusTrap"), ("CAMBIUM-PTP800-MIB", "rFUPowerButtonPressedTrap"), ("CAMBIUM-PTP800-MIB", "syslogClientTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    notificationsGroup = notificationsGroup.setStatus('current')
if mibBuilder.loadTexts: notificationsGroup.setDescription('The notifications group.')
ethernetPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 8, 6, 15), )
if mibBuilder.loadTexts: ethernetPriorityTable.setStatus('current')
if mibBuilder.loadTexts: ethernetPriorityTable.setDescription(' A priority queue mapping table. This is a list of packet queues indexed by Ethernet priority.')
ethernetPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 8, 6, 15, 1), ).setIndexNames((0, "CAMBIUM-PTP800-MIB", "ethernetPriorityTableIndex"))
if mibBuilder.loadTexts: ethernetPriorityTableEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetPriorityTableEntry.setDescription('Table EthernetPriorityTable')
l2CPPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 8, 6, 32), )
if mibBuilder.loadTexts: l2CPPriorityTable.setStatus('current')
if mibBuilder.loadTexts: l2CPPriorityTable.setDescription(' A priority queue mapping table. This is a list of packet queues associated with the different layer 2 control protocol frameworks.')
l2CPPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 8, 6, 32, 1), ).setIndexNames((0, "CAMBIUM-PTP800-MIB", "l2CPPriorityTableIndex"))
if mibBuilder.loadTexts: l2CPPriorityTableEntry.setStatus('current')
if mibBuilder.loadTexts: l2CPPriorityTableEntry.setDescription('Table L2CPPriorityTable')
iPDSCPPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 8, 6, 38), )
if mibBuilder.loadTexts: iPDSCPPriorityTable.setStatus('current')
if mibBuilder.loadTexts: iPDSCPPriorityTable.setDescription(' A priority queue mapping table. This is a list of packet queues indexed by L3 IP DSCP priority.')
iPDSCPPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 8, 6, 38, 1), ).setIndexNames((0, "CAMBIUM-PTP800-MIB", "iPDSCPPriorityTableIndex"))
if mibBuilder.loadTexts: iPDSCPPriorityTableEntry.setStatus('current')
if mibBuilder.loadTexts: iPDSCPPriorityTableEntry.setDescription('Table IPDSCPPriorityTable')
mPLSTCPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 8, 6, 40), )
if mibBuilder.loadTexts: mPLSTCPriorityTable.setStatus('current')
if mibBuilder.loadTexts: mPLSTCPriorityTable.setDescription(' A priority queue mapping table. This is a list of priority queues indexed by MPLS TC priority.')
mPLSTCPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 8, 6, 40, 1), ).setIndexNames((0, "CAMBIUM-PTP800-MIB", "mPLSTCPriorityTableIndex"))
if mibBuilder.loadTexts: mPLSTCPriorityTableEntry.setStatus('current')
if mibBuilder.loadTexts: mPLSTCPriorityTableEntry.setDescription('Table MPLSTCPriorityTable')
sNMPTrapTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 8, 16, 10), )
if mibBuilder.loadTexts: sNMPTrapTable.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapTable.setDescription(' SNMP trap configuration table.')
sNMPTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 8, 16, 10, 1), ).setIndexNames((0, "CAMBIUM-PTP800-MIB", "sNMPTrapTableIndex"))
if mibBuilder.loadTexts: sNMPTrapTableEntry.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapTableEntry.setDescription('Table SNMPTrapTable')
sNTPServerTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 8, 17, 15), )
if mibBuilder.loadTexts: sNTPServerTable.setStatus('current')
if mibBuilder.loadTexts: sNTPServerTable.setDescription('')
sNTPServerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 8, 17, 15, 1), ).setIndexNames((0, "CAMBIUM-PTP800-MIB", "sNTPServerTableIndex"))
if mibBuilder.loadTexts: sNTPServerTableEntry.setStatus('current')
if mibBuilder.loadTexts: sNTPServerTableEntry.setDescription('Table SNTPServerTable')
localPacketFiltering = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localPacketFiltering.setStatus('current')
if mibBuilder.loadTexts: localPacketFiltering.setDescription('Controls filtering for Ethernet frames that have source or destination address equal to the MAC address of the CMU. When Local Packet Filtering is disabled, frames generated within the management agent are sent to both Ethernet and wireless interfaces. When Local Packet Filtering is enabled, frames generated within the management agent are transmitted at the port learned for the destination address, and frames addressed to the management agent are not bridged')
iPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPAddress.setStatus('current')
if mibBuilder.loadTexts: iPAddress.setDescription('Internet protocol (IP) address. This address is used by the family of Internet protocols to uniquely identify the unit on a network.')
subnetMask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask.setStatus('current')
if mibBuilder.loadTexts: subnetMask.setDescription('A subnet allows the flow of network traffic between hosts to be segregated based on a network configuration. By organizing hosts into logical groups, subnetting can improve network security and performance')
gatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayIPAddress.setStatus('current')
if mibBuilder.loadTexts: gatewayIPAddress.setDescription('The IP address of a computer on the current network that is currently acting as a network gateway. A gateway acts as an entrance / exit to packets from / to other networks.')
maximumTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 370))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumTransmitPower.setStatus('current')
if mibBuilder.loadTexts: maximumTransmitPower.setDescription('Maximum transmit power the wireless unit is permitted to use when establishing and maintaining the wireless link, expressed in tenths of a dBm. Note that when an IRFU is connected rather than an ODU, the transmit power refers to the power at the transceiver output and not the IRFU antenna port. See the User Guide for more details')
antennaGain = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 610))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: antennaGain.setStatus('current')
if mibBuilder.loadTexts: antennaGain.setDescription('Antenna Gain. Expressed in 10ths of dBi.')
rFFeederLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFFeederLoss.setStatus('current')
if mibBuilder.loadTexts: rFFeederLoss.setDescription('Insertion loss of the microwave connection between the RFU and the antenna. The feeder loss should be 0 dB for the standard 1 + 0 direct mount configuration. Expressed in 10ths of dB.')
remoteIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteIPAddress.setStatus('current')
if mibBuilder.loadTexts: remoteIPAddress.setDescription('IP Address of the peer wireless unit')
remoteMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteMACAddress.setStatus('current')
if mibBuilder.loadTexts: remoteMACAddress.setDescription('MAC Address of the peer wireless unit')
enableTransmission = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("muted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableTransmission.setStatus('current')
if mibBuilder.loadTexts: enableTransmission.setDescription('Permits the transmitter to radiate. Once the unit is installed and configured, use this to enable the transmitter')
aTPCEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aTPCEnable.setStatus('current')
if mibBuilder.loadTexts: aTPCEnable.setDescription('Enables Automatic Transmitter Power Control (ATPC). NOTE: Use of ATPC is mandatory in some regions. When ATPC is enabled, the transmit power is dynamically adjusted to optimize link performance. The transmit power will always be adjusted within the constraints set by Maximum Transmit Power. When ATPC is disabled, the transmit power will be fixed at the level set by Maximum Transmit Power. When adaptive modulation is enabled, this setting can limit the capacity of the system by capping the modulation to a mode which is consistent with the configured Maximum Transmit Power.')
iFCableLength = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 19000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iFCableLength.setStatus('current')
if mibBuilder.loadTexts: iFCableLength.setDescription('IF Cable Length in cm - please refer to the user manual for more information on the recommended cable type.')
linkName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkName.setStatus('current')
if mibBuilder.loadTexts: linkName.setDescription('Name of the PTP link allocated by the System Administrator. Used to establish a connection with the correct PTP wireless unit at the other end of the link. NOTE: The link name MUST be the same at both ends of the PTP link.')
siteName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteName.setStatus('current')
if mibBuilder.loadTexts: siteName.setDescription('This field is allocated by the system administrator and contains a description of the site name together with any additional notes')
diverseAntennaGain = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 610))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diverseAntennaGain.setStatus('current')
if mibBuilder.loadTexts: diverseAntennaGain.setDescription('Diverse Antenna Receive Gain. Expressed in 10ths of dBi.')
diverseRfFeederLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diverseRfFeederLoss.setStatus('current')
if mibBuilder.loadTexts: diverseRfFeederLoss.setDescription('Insertion loss of the microwave connection between the RFU and the diverse antenna. Expressed in 10ths of dB.')
dataPortCopperAutoNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortCopperAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: dataPortCopperAutoNegotiation.setDescription('This controls whether the configuration of the copper data Ethernet interface is automatically negotiated or forced. WARNING: ONLY USE FORCED AS A LAST RESORT. To operate an Ethernet link at a fixed speed, leave auto negotiation enabled and limit the Auto Neg Advertisement to the desired speed. Only force Ethernet configuration as a last resort if constrained auto negotiation fails. NB: Auto-MDI/MDIX is disabled when Forced is set, and the unit defaults to MDIX, so the correct straight through or crossover cable will be required to establish a connection. NB: both ends of an Ethernet link must be configured identically, as Forced and auto negotiation are NOT compatible. A mixed configuration will cause a duplex mismatch')
dataPortCopperAutoNegAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 2), Bits().clone(namedValues=NamedValues(("neg100MbpsFullDuplex", 6), ("neg1000MbpsFullDuplex", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortCopperAutoNegAdvertisement.setStatus('current')
if mibBuilder.loadTexts: dataPortCopperAutoNegAdvertisement.setDescription('This sets the different configurations of the copper data Ethernet interface that will be advertised during auto negotiation. WARNING: Duplex mismatch may result if both ends of the Ethernet link do not have the same settings. Do not use auto negotiation together with a fixed setting at the Ethernet link partner (other end of the link). WARNING: Make sure that you select option(s) that you know your connected equipment can cater for!')
dataPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("down", 0), ("copperLinkUp", 1), ("fiberLinkUp", 2), ("fiberYInactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortStatus.setStatus('current')
if mibBuilder.loadTexts: dataPortStatus.setDescription('Current status of the data Ethernet link. NB: a change of state may generate an SNMP trap and/or SMTP email alert')
dataPortSpeedAndDuplex = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("speed1000MbpsFullDuplex", 0), ("speed100MbpsFullDuplex", 1), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortSpeedAndDuplex.setStatus('current')
if mibBuilder.loadTexts: dataPortSpeedAndDuplex.setDescription('The current speed and duplex of the data Ethernet link')
dataPortWirelessDownAlert = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortWirelessDownAlert.setStatus('current')
if mibBuilder.loadTexts: dataPortWirelessDownAlert.setDescription('When enabled, this causes the data Ethernet link to be dropped briefly when the wireless link drops. This is so that spanning tree algorithms can quickly detect that there is a problem')
useVLANForManagementInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noVLANTagging", 0), ("iEEE8021QTaggedCTagType8100", 1), ("iEEE8021adTaggedSTagorBTagType88a8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useVLANForManagementInterfaces.setStatus('current')
if mibBuilder.loadTexts: useVLANForManagementInterfaces.setDescription('This controls whether the management interfaces (WWW/SNMP/SMTP/SNTP) use VLAN tags or not')
vLANManagementPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLANManagementPriority.setStatus('current')
if mibBuilder.loadTexts: vLANManagementPriority.setDescription('This VLAN Priority (0-7) will be included in packets generated by the management interfaces')
vLANManagementVIDValidation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLANManagementVIDValidation.setStatus('current')
if mibBuilder.loadTexts: vLANManagementVIDValidation.setDescription('If enabled, the management interfaces will only respond to Ethernet packets tagged with the configured VLAN Management VID, otherwise packets with any VID will be accepted')
vLANManagementVID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLANManagementVID.setStatus('current')
if mibBuilder.loadTexts: vLANManagementVID.setDescription('This VLAN VID (0-4094) will be included in packets generated by the management interfaces')
ethernetPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPriorityTableNumber.setStatus('current')
if mibBuilder.loadTexts: ethernetPriorityTableNumber.setDescription('Number of entries in the ethernetPriorityTable.')
managementPortAutoNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementPortAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: managementPortAutoNegotiation.setDescription('This controls whether the configuration of the out-of-band management Ethernet interface is automatically negotiated or forced. WARNING: ONLY USE FORCED AS A LAST RESORT. To operate an Ethernet link at a fixed speed, leave auto negotiation enabled and limit the Auto Neg Advertisement to the desired speed. Only force Ethernet configuration as a last resort if constrained auto negotiation fails. NB: Auto-MDI/MDIX is disabled when Forced is set, and the unit defaults to MDIX, so the correct straight through or crossover cable will be required to establish a connection. NB: both ends of an Ethernet link must be configured identically, as Forced and auto negotiation are NOT compatible. A mixed configuration will cause a duplex mismatch')
managementPortAutoNegAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 17), Bits().clone(namedValues=NamedValues(("neg10MbpsFullDuplex", 6), ("neg100MbpsFullDuplex", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementPortAutoNegAdvertisement.setStatus('current')
if mibBuilder.loadTexts: managementPortAutoNegAdvertisement.setDescription('This sets the different configurations of the out-of-band management Ethernet interface that will be advertised during auto negotiation. WARNING: Duplex mismatch may result if both ends of the Ethernet link do not have the same settings. Do not use auto negotiation together with a fixed setting at the Ethernet link partner (other end of the link). WARNING: Make sure that you select option(s) that you know your connected equipment can cater for!')
managementPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("copperLinkUp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortStatus.setStatus('current')
if mibBuilder.loadTexts: managementPortStatus.setDescription('Current status of the out-of-band management Ethernet link')
managementPortSpeedAndDuplex = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("speed100MbpsFullDuplex", 1), ("speed10MbpsFullDuplex", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortSpeedAndDuplex.setStatus('current')
if mibBuilder.loadTexts: managementPortSpeedAndDuplex.setDescription('The current speed and duplex of the out-of-band management Ethernet link')
managementPortWirelessDownAlert = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementPortWirelessDownAlert.setStatus('current')
if mibBuilder.loadTexts: managementPortWirelessDownAlert.setDescription('When enabled, this causes the out-of-band management Ethernet link to be dropped briefly when the wireless link drops. This is so that spanning tree algorithms can quickly detect that there is a problem')
managementMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("outofBandLocal", 0), ("outofBand", 1), ("inBand", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementMode.setStatus('current')
if mibBuilder.loadTexts: managementMode.setDescription('Management mode: Out-of-band management. End-to-end out-of-band mode in which the management agent can be reached from the management port at the local CMU, and (assuming that the wireless link is established) the management port at the remote CMU. Out-of-band local management. (default) Similar to the standard out-of-band mode, except that management frames are not forwarded over the wireless link. In-band management. The management agent can be reached from the data port at the local CMU, and (assuming that the wireless link is established) the data port at the remote CMU. In this mode, the management port is disabled.')
managementCommittedInformationRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("kbps200", 0), ("kbps300", 1), ("kbps400", 2), ("kbps500", 3), ("kbps600", 4), ("kbps700", 5), ("kbps800", 6), ("kbps900", 7), ("kbps1000", 8), ("kbps1100", 9), ("kbps1200", 10), ("kbps1300", 11), ("kbps1400", 12), ("kbps1500", 13), ("kbps1600", 14), ("kbps1700", 15), ("kbps1800", 16), ("kbps1900", 17), ("kbps2000", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementCommittedInformationRate.setStatus('current')
if mibBuilder.loadTexts: managementCommittedInformationRate.setDescription('The Management Network Committed Information Rate (CIR). The Management Network guarantees this capacity will be available for management traffic')
dataPortPauseFrames = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tunnel", 0), ("discard", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortPauseFrames.setStatus('current')
if mibBuilder.loadTexts: dataPortPauseFrames.setDescription('Controls whether the bridge tunnels or discards Layer 2 PAUSE frames arriving at the data Ethernet port. Such frames are identified by the destination MAC Address being equal to 01-80-C2-00-00-01')
transmitCapacityLimit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitCapacityLimit.setStatus('current')
if mibBuilder.loadTexts: transmitCapacityLimit.setDescription('Transmit capacity is limited by the lower of: 1) the capacity limit specified by the installed License Key. 2) the Ethernet speed negotiated at the other end of the wireless link. Value expressed in 10ths of Mbps. 0 indicates unlimited')
transmitCapacityLimitDetail = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("limitedDueToAbsenceOfLicenseKey", 0), ("runningAtTheCapacityLimit", 1), ("runningAtUnlimitedCapacity", 2), ("restrictedDueToRemoteEthernetSpeed", 3), ("limitedDueToDevelopmentOverride", 4), ("unlimitedDueToDevelopmentOverride", 5), ("unlimitedCapacityTrialPeriod", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitCapacityLimitDetail.setStatus('current')
if mibBuilder.loadTexts: transmitCapacityLimitDetail.setDescription('A brief description of the reason (if any) for the limit being applied to the transmit capacity')
dataPortEthernetMediaTypeToUse = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("autowithFiberPreference", 0), ("forceCopper", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortEthernetMediaTypeToUse.setStatus('current')
if mibBuilder.loadTexts: dataPortEthernetMediaTypeToUse.setDescription('The physical media type to use on the data Ethernet port ')
dataPortCopperForcedConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("force100MbpsFullDuplex", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortCopperForcedConfiguration.setStatus('current')
if mibBuilder.loadTexts: dataPortCopperForcedConfiguration.setDescription('This forces the configuration of the copper data Ethernet interface rather than using auto negotiation. THE CONFIGURATION SHOULD ONLY BE FORCED IF YOU ARE HAVING PROBLEMS WITH AUTO NEGOTIATION - AND YOU MUST ENSURE THAT YOU CONFIGURE BOTH THIS UNIT AND THE Ethernet PORT TO WHICH IT IS CONNECTED IDENTICALLY! WARNING: Duplex mismatch may result if both ends of the Ethernet link do not have the same settings. Do not use auto negotiation together with a fixed setting at the Ethernet link partner (other end of the link)')
managementPortForcedConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("force100MbpsFullDuplex", 0), ("force10MbpsFullDuplex", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortForcedConfiguration.setStatus('current')
if mibBuilder.loadTexts: managementPortForcedConfiguration.setDescription('This forces the configuration of the out-of-band management Ethernet interface rather than using auto negotiation. THE CONFIGURATION SHOULD ONLY BE FORCED IF YOU ARE HAVING PROBLEMS WITH AUTO NEGOTIATION - AND YOU MUST ENSURE THAT YOU CONFIGURE BOTH THIS UNIT AND THE Ethernet PORT TO WHICH IT IS CONNECTED IDENTICALLY! WARNING: Duplex mismatch may result if both ends of the Ethernet link do not have the same settings. Do not use auto negotiation together with a fixed setting at the Ethernet link partner (other end of the link)')
l2CPPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2CPPriorityTableNumber.setStatus('current')
if mibBuilder.loadTexts: l2CPPriorityTableNumber.setDescription('Number of entries in the l2CPPriorityTable.')
unknownNetworkPriorityQueueMapping = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unknownNetworkPriorityQueueMapping.setStatus('current')
if mibBuilder.loadTexts: unknownNetworkPriorityQueueMapping.setDescription('Configures the classification of unknown network protocols to an egress queue at the wireless port. Unknown means something other than IP and MPLS')
dSCPManagementPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dSCPManagementPriority.setStatus('current')
if mibBuilder.loadTexts: dSCPManagementPriority.setDescription('This Differentiated Services Code Point value will be inserted in the IP Header of all IP Datagrams transmitted by the management interfaces')
qOSPriorityScheme = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ethernet", 0), ("iPMPLS", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qOSPriorityScheme.setStatus('current')
if mibBuilder.loadTexts: qOSPriorityScheme.setDescription('Selects classification based on fields in the Ethernet header (Layer 2) or in the Network header (Layer 3). The unit recognises two network layer protocols: IP and MPLS')
iPDSCPPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPDSCPPriorityTableNumber.setStatus('current')
if mibBuilder.loadTexts: iPDSCPPriorityTableNumber.setDescription('Number of entries in the iPDSCPPriorityTable.')
mPLSTCPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mPLSTCPriorityTableNumber.setStatus('current')
if mibBuilder.loadTexts: mPLSTCPriorityTableNumber.setDescription('Number of entries in the mPLSTCPriorityTable.')
ethernetPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetPriorityQueueMapping.setStatus('current')
if mibBuilder.loadTexts: ethernetPriorityQueueMapping.setDescription('Configures the classification of this Ethernet priority (also known as IEEE 802.1p value) to an egress queue at the wireless port.')
ethernetPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("p0", 1), ("p1", 2), ("p2", 3), ("p3", 4), ("p4", 5), ("p5", 6), ("p6", 7), ("p7", 8), ("untagged", 9))))
if mibBuilder.loadTexts: ethernetPriorityTableIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetPriorityTableIndex.setDescription('Ethernet priority flag, used to index values in the ethernetPriorityTable.')
l2CPPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 32, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2CPPriorityQueueMapping.setStatus('current')
if mibBuilder.loadTexts: l2CPPriorityQueueMapping.setDescription('Configures the classification of this layer two control protocol (L2CP) to an egress queue at the wireless port')
l2CPPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 32, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bridge", 1), ("gARPMRP", 2), ("cFM", 3), ("rAPS", 4), ("eAPS", 5))))
if mibBuilder.loadTexts: l2CPPriorityTableIndex.setStatus('current')
if mibBuilder.loadTexts: l2CPPriorityTableIndex.setDescription('layer 2 control protocol, used to index values in the l2CPPriorityTable.')
iPDSCPPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 38, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPDSCPPriorityQueueMapping.setStatus('current')
if mibBuilder.loadTexts: iPDSCPPriorityQueueMapping.setDescription('Configures the classification of this IP differentiated services code point (DSCP) value to an egress queue at the wireless port')
iPDSCPPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 38, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: iPDSCPPriorityTableIndex.setStatus('current')
if mibBuilder.loadTexts: iPDSCPPriorityTableIndex.setDescription('IP DSCP priority flag, used to index values in the iPDSCPPriorityTable')
mPLSTCPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 40, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mPLSTCPriorityQueueMapping.setStatus('current')
if mibBuilder.loadTexts: mPLSTCPriorityQueueMapping.setDescription('Configures the classification of this MPLS traffic class (the field formerly known as EXP) to an egress queue at the wireless port')
mPLSTCPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 40, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: mPLSTCPriorityTableIndex.setStatus('current')
if mibBuilder.loadTexts: mPLSTCPriorityTableIndex.setDescription('MPLS TC priority flag, used to index values in the mPLSTCPriorityTable')
productVariant = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("pTPxx400Full", 0), ("pTPxx400Deprecated1", 1), ("pTPxx400Deprecated2", 2), ("pTPxx400Lite", 3), ("spare1", 4), ("pTPxx300", 5), ("spare2", 6), ("spare3", 7), ("pTPxx500FullDeprecated", 8), ("pTPxx500LiteDeprecated", 9), ("pTPxx500", 10), ("pTPxx600Lite", 11), ("pTPxx600Full", 12), ("spare5", 13), ("spare6", 14), ("pTP800", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVariant.setStatus('current')
if mibBuilder.loadTexts: productVariant.setDescription('The product variant')
productName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productName.setStatus('current')
if mibBuilder.loadTexts: productName.setDescription('Name of the product variant')
ethernetFiberSupport = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetFiberSupport.setStatus('current')
if mibBuilder.loadTexts: ethernetFiberSupport.setDescription('Ethernet fiber support availability on this wireless unit')
transmitCapacity = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("rate10Mbps", 0), ("rate20Mbps", 1), ("rate30Mbps", 2), ("rate40Mbps", 3), ("rate50Mbps", 4), ("rate100Mbps", 5), ("rate150Mbps", 6), ("rate200Mbps", 7), ("rate300Mbps", 8), ("rateUnlimited", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitCapacity.setStatus('current')
if mibBuilder.loadTexts: transmitCapacity.setDescription('Maximum capacity the wireless link may provide in the transmit direction. This is restricted by the License Key.')
encryptionAlgorithmsAvail = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("aESRijndael", 1), ("aES256bitRijndael", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: encryptionAlgorithmsAvail.setStatus('current')
if mibBuilder.loadTexts: encryptionAlgorithmsAvail.setDescription('The Encryption Algorithm(s) available to the wireless link. N.B. The same Encryption Algorithm must be configured at BOTH ends of the link for it to function correctly')
securityLevel = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 8, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityLevel.setStatus('current')
if mibBuilder.loadTexts: securityLevel.setDescription('The maximum configurable security level')
linkNameMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("linkNameMismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNameMismatch.setStatus('current')
if mibBuilder.loadTexts: linkNameMismatch.setDescription('Signaling was received with the wrong Link Name. Either the Link Name is configured differently at each end of the wireless link, or this unit is aligned to the wrong link partner. NB: A change of value during operation may generate an SNMP trap and/or SMTP email alert')
alignmentMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("aligning", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alignmentMode.setStatus('current')
if mibBuilder.loadTexts: alignmentMode.setDescription('Indicates if the unit is undergoing alignment. NB: a change of state during operation may generate an SNMP trap and/or SMTP email alert')
tFTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: tFTPServerIPAddress.setDescription('IP address of the TFTP Server from which the TFTP Software Upgrade File Name will be retrieved')
tFTPServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: tFTPServerPortNumber.setDescription('The port number of the TFTP Server from which the TFTP Software Upgrade File Name will be retrieved')
tFTPSoftwareUpgradeFileName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeFileName.setStatus('current')
if mibBuilder.loadTexts: tFTPSoftwareUpgradeFileName.setDescription('Filename of the Software Upgrade to be loaded from the TFTP Server')
tFTPStartSoftwareUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPStartSoftwareUpgrade.setStatus('current')
if mibBuilder.loadTexts: tFTPStartSoftwareUpgrade.setDescription("Write '1' to this attribute to start the TFTP software upgrade process. The attribute will be reset to 0 when the upgrade process has finished")
tFTPSoftwareUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 0), ("uploadinprogress", 1), ("uploadsuccessfulprogrammingFLASH", 2), ("upgradesuccessfulreboottorunthenewsoftwareimage", 3), ("upgradefailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatus.setStatus('current')
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatus.setDescription('The current status of the TFTP Software upgrade process')
tFTPSoftwareUpgradeStatusText = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusText.setStatus('current')
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusText.setDescription('Descriptive text describing the status of the TFTP Software upgrade process, including any error details')
tFTPSoftwareUpgradeStatusAdditionalText = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusAdditionalText.setStatus('current')
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusAdditionalText.setDescription('Any additional text describing the status of the TFTP Software upgrade process, including any error details')
hTTPAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPAccessEnabled.setStatus('current')
if mibBuilder.loadTexts: hTTPAccessEnabled.setDescription('This controls whether or not HTTP access is enabled, i.e. if this is disabled (0) then the unit will not respond to any requests on the HTTP port. Remote management via HTTPS is not affected by this setting. Any change in this setting will not take effect until the unit has been rebooted. (Factory default = Enabled)')
telnetAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetAccessEnabled.setStatus('current')
if mibBuilder.loadTexts: telnetAccessEnabled.setDescription('This controls whether or not Telnet access is enabled, i.e. if this is disabled (0) then the unit will not respond to any requests on the TELNET port. Any change in this setting will not take effect until the unit has been rebooted. (Factory default = Disabled)')
hTTPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPPortNumber.setStatus('current')
if mibBuilder.loadTexts: hTTPPortNumber.setDescription('This controls the port number for HTTP access. A value of zero will use the default port number. Any change in this setting will not take effect until the unit has been rebooted. (Factory default = 80)')
hTTPSPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPSPortNumber.setStatus('current')
if mibBuilder.loadTexts: hTTPSPortNumber.setDescription('This controls the port number for HTTPS access. A value of zero will use the default port number. Availability of HTTPS is controlled via the Licence Key. Any change in this setting will not take effect until the unit has been rebooted. (Factory default = 443)')
telnetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortNumber.setStatus('current')
if mibBuilder.loadTexts: telnetPortNumber.setDescription('This controls the port number for TELNET access. A value of zero will use the default port number. Any change in this setting will not take effect until the unit has been rebooted. (Factory default = 23)')
hTTPSAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hTTPSAccessEnabled.setStatus('current')
if mibBuilder.loadTexts: hTTPSAccessEnabled.setDescription('This controls whether or not HTTPS access is enabled, i.e. if this is disabled (0) then the unit will not respond to any requests on the configured HTTPS Port Number. Remote management via HTTP is not affected by this setting. Any change in this setting will not take effect until the unit has been rebooted. (Factory default = Enabled)')
remoteMaximumTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 370))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteMaximumTransmitPower.setStatus('current')
if mibBuilder.loadTexts: remoteMaximumTransmitPower.setDescription('Maximum transmit power the remote wireless unit is permitted to use when establishing and maintaining the wireless link, expressed in tenths of a dBm. Note that when an IRFU is connected rather than an ODU, the transmit power refers to the power at the transceiver output and not the IRFU antenna port. See the User Guide for more details')
minModulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("modQPSK", 0), ("mod8PSK", 1), ("mod16QAM", 2), ("mod32QAM", 3), ("mod64QAM", 4), ("mod128QAM", 5), ("mod256QAM", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: minModulation.setStatus('current')
if mibBuilder.loadTexts: minModulation.setDescription('When adaptive modulation is enabled, PTP 800 will adapt the modulation mode between a minimum and maximum modulation mode. Depending on the region, minimum and maximum modulation modes will be either derived from the radio license, e.g. FCC and Industry Canada, or will be user adjustable, e.g. ETSI.In general, a modulation mode is defined by two aspects, a modulation and a code rate. This integer attribute identifies the modulation aspect of the minimum modulation mode. For example, if the minimum modulation mode is 16QAM 0.91, this attribute will be set to a value of 2 which identifies a modulation of 16QAM.')
minCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: minCodeRate.setStatus('current')
if mibBuilder.loadTexts: minCodeRate.setDescription('When adaptive modulation is enabled, PTP 800 will adapt the modulation mode between a minimum and maximum modulation mode. Depending on the region, minimum and maximum modulation modes will be either derived from the radio license, e.g. FCC and Industry Canada, or will be user adjustable, e.g. ETSI. In general, a modulation mode is defined by two aspects, a modulation and a code rate. This attribute is equal to 100 times the code rate aspect of the minimum modulation mode. For example, if the minimum modulation mode is 16QAM 0.91, this attribute will be set to a value of 91.')
maxModulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("modQPSK", 0), ("mod8PSK", 1), ("mod16QAM", 2), ("mod32QAM", 3), ("mod64QAM", 4), ("mod128QAM", 5), ("mod256QAM", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxModulation.setStatus('current')
if mibBuilder.loadTexts: maxModulation.setDescription('When adaptive modulation is enabled, PTP 800 will adapt the modulation mode between a minimum and maximum modulation mode. Depending on the region, minimum and maximum modulation modes will be either derived from the radio license, e.g. FCC and Industry Canada, or will be user adjustable, e.g. ETSI. In general, a modulation mode is defined by two aspects, a modulation and a code rate. This integer attribute identifies the modulation aspect of the maximum modulation mode. For example, if the maximum modulation mode is 256QAM 0.91, this attribute will be set to a value of 6 which identifies a modulation of 256QAM.')
maxCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 10, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxCodeRate.setStatus('current')
if mibBuilder.loadTexts: maxCodeRate.setDescription('When adaptive modulation is enabled, PTP 800 will adapt the modulation mode between a minimum and maximum modulation mode. Depending on the region, minimum and maximum modulation modes will be either derived from the radio license, e.g. FCC and Industry Canada, or will be user adjustable, e.g. ETSI. In general, a modulation mode is defined by two aspects, a modulation and a code rate. This attribute is equal to 100 times the code rate aspect of the maximum modulation mode. For example, if the maximum modulation mode is 256QAM 0.91, this attribute will be set to a value of 91.')
receivePower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receivePower.setStatus('current')
if mibBuilder.loadTexts: receivePower.setDescription('This is the receive power measured by the RFU. When an IRFU transceiver is connected rather than an ODU, the Receive Power refers to the power at the input to the transceiver and not the IRFU antenna port. Expressed in tenths of a dBm.')
vectorError = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vectorError.setStatus('current')
if mibBuilder.loadTexts: vectorError.setDescription('Vector Error is a measure of received signal quality. The value is generally in the range from -6 dB to -38 dB, a more negative number indicating a higher quality signal. Expressed in tenths of a dB.')
transmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitPower.setStatus('current')
if mibBuilder.loadTexts: transmitPower.setDescription('This is the transmit power of the RFU. When an IRFU transceiver is connected rather than an ODU, the Transmit Power refers to the power at the transceiver output and not the IRFU antenna port. Expressed in tenths of a dBm.')
linkLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 1800))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLoss.setStatus('current')
if mibBuilder.loadTexts: linkLoss.setDescription('Link Loss is a measurement of the loss in signal level as the radio wave propagates between the antennas installed at each end of the link. The Link Loss is only accurate if the Antenna Gain and RF Feeder Loss have been configured correctly at both ends of the link. Expressed in tenths of a dB.')
receiveModulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("modQPSK", 0), ("mod8PSK", 1), ("mod16QAM", 2), ("mod32QAM", 3), ("mod64QAM", 4), ("mod128QAM", 5), ("mod256QAM", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveModulation.setStatus('current')
if mibBuilder.loadTexts: receiveModulation.setDescription('Current active receive modulation')
transmitModulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("modQPSK", 0), ("mod8PSK", 1), ("mod16QAM", 2), ("mod32QAM", 3), ("mod64QAM", 4), ("mod128QAM", 5), ("mod256QAM", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitModulation.setStatus('current')
if mibBuilder.loadTexts: transmitModulation.setDescription('Current active transmit modulation')
receiveCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveCodeRate.setStatus('current')
if mibBuilder.loadTexts: receiveCodeRate.setDescription('Indicates the code rate applied to the signal being received at the wireless interface. The reported value is the code rate multiplied by 100.')
transmitCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitCodeRate.setStatus('current')
if mibBuilder.loadTexts: transmitCodeRate.setDescription('Indicates the code rate applied to the signal transmitted at the wireless interface. The reported value is the code rate multiplied by 100.')
unitOutOfCalibration = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("calibrated", 0), ("partialCalibration", 1), ("invalidCalibration", 2), ("bandwidthvariantunsupportedPAsShutdown", 3), ("outOfCalibrationPAsShutdown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitOutOfCalibration.setStatus('current')
if mibBuilder.loadTexts: unitOutOfCalibration.setDescription('The unit is out of calibration')
encryptionEnabledMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("encryptionEnabledMismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: encryptionEnabledMismatch.setStatus('current')
if mibBuilder.loadTexts: encryptionEnabledMismatch.setDescription('Encryption has been enabled on one end of the wireless link but not the other')
wirelessLinkDisabledWarning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("disabledBySNMPifAdminStatus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkDisabledWarning.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkDisabledWarning.setDescription('The SNMP ifAdminStatus of the wireless interface has disabled wireless traffic')
dataPortDisabledWarning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("disabledBySNMPifAdminStatus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortDisabledWarning.setStatus('current')
if mibBuilder.loadTexts: dataPortDisabledWarning.setDescription('The SNMP ifAdminStatus of the data Ethernet interface has disabled Ethernet traffic')
dataPortFiberStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("installedFiberNotLicensed", 1), ("noFiberLinkEstablishedButLOSNotDetected", 2), ("noFiberLinkEstablishedAndLOSDetected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortFiberStatus.setStatus('current')
if mibBuilder.loadTexts: dataPortFiberStatus.setDescription('If the fiber interface on the data Ethernet port is not OK, there are three possible causes: 1) the fiber interface has been installed but disabled, 2) the interface could not be established even though no LOS was detected (i.e. an optical carrier was detected, which could be due to a broken TX fiber, or because the interface is disabled at the other end of the fiber link), or 3) the interface could not be established and LOS is detected (i.e. no optical carrier is detected). NB: a change of status may generate an SNMP trap and/or SMTP email alert')
dataPortConfigurationMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noError", 0), ("mismatchDetected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortConfigurationMismatch.setStatus('current')
if mibBuilder.loadTexts: dataPortConfigurationMismatch.setDescription('The detection of Ethernet fragments (runt packets) on the data Ethernet port when the link is in full duplex is an indication of an auto-negotiation or forced configuration mismatch')
managementPortDisabledWarning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("disabledBySNMPifAdminStatus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortDisabledWarning.setStatus('current')
if mibBuilder.loadTexts: managementPortDisabledWarning.setDescription('The SNMP ifAdminStatus of the out-of-band management Ethernet interface has disabled Ethernet traffic')
rFUStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("ok", 0), ("fault", 1), ("unknown3", 2), ("inReset", 3), ("downloadInProgress", 4), ("incompatibleFirmwareVersion", 5), ("incompatibleDevice", 6), ("iFICardAttached", 7), ("noResponse", 8), ("powerSupplyFault", 9), ("powerSupplyDisabled", 10), ("switchingmemorybanks", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUStatus.setStatus('current')
if mibBuilder.loadTexts: rFUStatus.setDescription("Current status of the RFU. A state of 'ok' indicates that the RFU is fully operational, although may not be transmitting.")
managementPortConfigurationMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noError", 0), ("mismatchDetected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortConfigurationMismatch.setStatus('current')
if mibBuilder.loadTexts: managementPortConfigurationMismatch.setDescription('The detection of Ethernet fragments (runt packets) on the out-of-band management Ethernet port when the link is in full duplex is an indication of an auto-negotiation or forced configuration mismatch')
secureModeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("secureModeIsActive", 0), ("secureModeIsNotConfigured", 1), ("secureModeIsConfiguredButNotActive", 2), ("secureModeIsNotSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureModeAlarm.setStatus('current')
if mibBuilder.loadTexts: secureModeAlarm.setDescription('The secure mode (e.g. FIPS, UC-APL) state of the unit. The secure mode is not configured(1) state indicates that the unit is capable of secure mode operation, and one or more of the following security materials has not been configured: Key Of Keys, Private Key, Public Certificate, DRNG Entropy Status, Wireless Encryption Key. The secure mode mode is configured but not active(2) state indicates that the unit is capable of secure mode operation, and the security material has been configured, but the configuration of interfaces is not consistent with secure mode operation. The secure mode is not supported(3) state indicates that the unit is not capable of secure mode operation. The secure mode capability requires appropriate hardware compatibility, license key and software image.')
rFUPlatformCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("mismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUPlatformCompatibility.setStatus('current')
if mibBuilder.loadTexts: rFUPlatformCompatibility.setDescription('This indicates when the RFU currently connected to the CMU does not match the RFU Platform which was installed. Either re-run the Installation Wizard or connect the correct RFU')
rFUProtectionCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("mismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUProtectionCompatibility.setStatus('current')
if mibBuilder.loadTexts: rFUProtectionCompatibility.setDescription('This indicates when the IRFU branching unit configuration is not compatible with the protection configuration or if the left hand transceiver has been configured as Secondary or the right hand transceiver has been configured as Primary')
sMTPEmailAlert = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPEmailAlert.setStatus('current')
if mibBuilder.loadTexts: sMTPEmailAlert.setDescription('Simple Mail Transfer Protocol is used to send equipment alerts via email to a specified email address. This utility can only be configured by the system administrator')
sMTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 15, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: sMTPServerIPAddress.setDescription('IP address of the SMTP server')
sMTPServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: sMTPServerPortNumber.setDescription('Port number of the SMTP server')
sMTPSourceEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 15, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPSourceEmailAddress.setStatus('current')
if mibBuilder.loadTexts: sMTPSourceEmailAddress.setDescription("The 'from' email address used when constructing the automatically generated e-mail message")
sMTPDestinationEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 15, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPDestinationEmailAddress.setStatus('current')
if mibBuilder.loadTexts: sMTPDestinationEmailAddress.setDescription("The 'to' email address used when constructing the automatically generated e-mail message")
sMTPEnabledMessages = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 15, 6), Bits().clone(namedValues=NamedValues(("protectionState", 3), ("enabledDiagnosticAlarms", 4), ("managementPortUpDown", 5), ("dataPortUpDown", 6), ("wirelessLinkUpDown", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPEnabledMessages.setStatus('current')
if mibBuilder.loadTexts: sMTPEnabledMessages.setDescription('This controls which SMTP messages the unit will send')
sNMPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 16, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPPortNumber.setStatus('current')
if mibBuilder.loadTexts: sNMPPortNumber.setDescription('The IP port number used to access the SNMP MIB (i.e. Gets and Sets). NB: A system reboot is required to activate changes to this attribute')
sNMPCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 16, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPCommunityString.setStatus('current')
if mibBuilder.loadTexts: sNMPCommunityString.setDescription('The SNMP community string. NB: A system reboot is required to activate changes to this attribute')
sNMPTrapVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 16, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("v1", 0), ("v2c", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapVersion.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapVersion.setDescription('The SNMP protocol version to use for SNMP Traps.')
sNMPEnabledTraps = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 16, 6), Bits().clone(namedValues=NamedValues(("protectionState", 1), ("authenticationFailure", 2), ("enabledDiagnosticAlarms", 3), ("managementPortUpDown", 4), ("dataPortUpDown", 5), ("wirelessLinkUpDown", 6), ("coldStart", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPEnabledTraps.setStatus('current')
if mibBuilder.loadTexts: sNMPEnabledTraps.setDescription('This controls which SNMP Traps the unit will send')
enabledDiagnosticAlarms = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 16, 7), Bits().clone(namedValues=NamedValues(("dataPortConfigurationMismatch", 0), ("wirelessLinkDisabledWarning", 1), ("wirelessLinkStatus", 2), ("sNTPSync", 3), ("encryptionEnabledMismatch", 4), ("unitOutOfCalibration", 5), ("linkNameMismatch", 6), ("alignmentMode", 7), ("syslogDisabledWarning", 8), ("managementPortStatus", 9), ("dataPortStatus", 10), ("rFUStatus", 11), ("managementPortDisabledWarning", 12), ("managementPortConfigurationMismatch", 13), ("dataPortFiberStatus", 14), ("dataPortDisabledWarning", 15), ("syslogClientDisabledWarning", 19), ("rFUPowerButtonPressed", 20), ("secureMode", 21), ("syslogLocalWrapped", 22), ("syslogLocalNearlyFull", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enabledDiagnosticAlarms.setStatus('current')
if mibBuilder.loadTexts: enabledDiagnosticAlarms.setDescription('Controls which individual diagnostic alarms are enabled.')
enabledDiagnosticProtectionAlarms = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 16, 8), Bits().clone(namedValues=NamedValues(("endWirelessReceiveSignalStatus", 0), ("protectionInterfaceStatus", 1), ("managementPortEthernetSpeedStatus", 2), ("dataPortEthernetSpeedStatus", 3), ("licensedTransmitCapacityStatus", 4), ("wirelessReceiveSignalStatus", 5), ("protectionConfigurationStatus", 6), ("protectionAvailabilityStatus", 7), ("rxDiversityAvailabilityStatus", 13), ("rxDiversityConfigurationStatus", 14), ("rxDiversityDataPortStatus", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enabledDiagnosticProtectionAlarms.setStatus('current')
if mibBuilder.loadTexts: enabledDiagnosticProtectionAlarms.setDescription('Controls which individual diagnostic protection alarms are enabled.')
sNMPTrapTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 16, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPTrapTableNumber.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapTableNumber.setDescription('Number of entries in the sNMPTrapTable.')
sNMPTrapTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 16, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: sNMPTrapTableIndex.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapTableIndex.setDescription('SNMP trap value, used to index the SNMPTrapTable.')
sNMPTrapIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 16, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapIPAddress.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapIPAddress.setDescription('The IP address to which all SNMP Traps are sent. An IP Address of 0.0.0.0 disables all TRAP generation. NB: A system reboot is required to activate changes to this attribute.')
sNMPTrapPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 16, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapPortNumber.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapPortNumber.setDescription('Destination port for SNMP Traps (default=162). A value of 0 will disable the trap receiver. NB: A system reboot is required to activate changes to this attribute.')
sNTPState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPState.setStatus('current')
if mibBuilder.loadTexts: sNTPState.setDescription('SNTP control state')
sNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 43200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPPollInterval.setStatus('current')
if mibBuilder.loadTexts: sNTPPollInterval.setDescription('The SNTP server polling interval')
sNTPSync = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noSync", 0), ("inSync", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPSync.setStatus('current')
if mibBuilder.loadTexts: sNTPSync.setDescription('If SNTP Sync fails then check the server settings in the Remote Management page, or disable SNTP. NB: a change of state may generate an SNMP trap and/or SMTP email alert')
sNTPLastSync = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPLastSync.setStatus('current')
if mibBuilder.loadTexts: sNTPLastSync.setDescription('Last SNTP sync time')
systemClock = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemClock.setStatus('current')
if mibBuilder.loadTexts: systemClock.setDescription('System clock presented as local time')
timeZone = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50))).clone(namedValues=NamedValues(("gmtMinus1200", 0), ("gmtMinus1130", 1), ("gmtMinus1100", 2), ("gmtMinus1030", 3), ("gmtMinus1000", 4), ("gmtMinus0930", 5), ("gmtMinus0900", 6), ("gmtMinus0830", 7), ("gmtMinus0800", 8), ("gmtMinus0730", 9), ("gmtMinus0700", 10), ("gmtMinus0630", 11), ("gmtMinus0600", 12), ("gmtMinus0530", 13), ("gmtMinus0500", 14), ("gmtMinus0430", 15), ("gmtMinus0400", 16), ("gmtMinus0330", 17), ("gmtMinus0300", 18), ("gmtMinus0230", 19), ("gmtMinus0200", 20), ("gmtMinus0130", 21), ("gmtMinus0100", 22), ("gmtMinus0030", 23), ("gmtZero", 24), ("gmtPlus0030", 25), ("gmtPlus0100", 26), ("gmtPlus0130", 27), ("gmtPlus0200", 28), ("gmtPlus0230", 29), ("gmtPlus0300", 30), ("gmtPlus0330", 31), ("gmtPlus0400", 32), ("gmtPlus0430", 33), ("gmtPlus0500", 34), ("gmtPlus0530", 35), ("gmtPlus0600", 36), ("gmtPlus0630", 37), ("gmtPlus0700", 38), ("gmtPlus0730", 39), ("gmtPlus0800", 40), ("gmtPlus0830", 41), ("gmtPlus0900", 42), ("gmtPlus0930", 43), ("gmtPlus1000", 44), ("gmtPlus1030", 45), ("gmtPlus1100", 46), ("gmtPlus1130", 47), ("gmtPlus1200", 48), ("gmtPlus1230", 49), ("gmtPlus1300", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZone.setStatus('current')
if mibBuilder.loadTexts: timeZone.setDescription('Time zone offsets from Greenwich Mean Time (GMT)')
daylightSaving = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daylightSaving.setStatus('current')
if mibBuilder.loadTexts: daylightSaving.setDescription('Daylight Saving Time')
sNTPPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("server1", 0), ("server2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPPrimaryServer.setStatus('current')
if mibBuilder.loadTexts: sNTPPrimaryServer.setDescription('Specifies the primary SNTP server, determining the order in which the servers are tried.')
sNTPPrimaryServerDeadTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPPrimaryServerDeadTime.setStatus('current')
if mibBuilder.loadTexts: sNTPPrimaryServerDeadTime.setDescription('Time (in seconds) to wait before retrying communications with an unresponsive primary SNTP server. Setting the value to 0 disables the timer.')
sNTPServerRetries = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerRetries.setStatus('current')
if mibBuilder.loadTexts: sNTPServerRetries.setDescription('Number of times the PTP will retry after an SNTP server fails to respond.')
sNTPServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerTimeout.setStatus('current')
if mibBuilder.loadTexts: sNTPServerTimeout.setDescription('Time (in seconds) the PTP will wait for a response from an SNTP server.')
sNTPServerTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPServerTableNumber.setStatus('current')
if mibBuilder.loadTexts: sNTPServerTableNumber.setDescription('Number of entries in the SNTPServerTable.')
sNTPServerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 17, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: sNTPServerTableIndex.setStatus('current')
if mibBuilder.loadTexts: sNTPServerTableIndex.setDescription('Index range for the SNTPServerTable.')
sNTPServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 17, 15, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: sNTPServerIPAddress.setDescription('The IP address of a valid SNTP server')
sNTPServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 17, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: sNTPServerPortNumber.setDescription('The IP port number of the SNTP server. Defaults to port 123.')
sNTPServerResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 17, 15, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPServerResponse.setStatus('current')
if mibBuilder.loadTexts: sNTPServerResponse.setDescription('The most recent response received from the SNTP server, if used')
systemReset = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("running", 0), ("consoleReboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReset.setStatus('current')
if mibBuilder.loadTexts: systemReset.setDescription("Setting this attribute to '1' will cause a system reboot. NB: a system reboot will apply any pending new settings held in memory")
softwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 19, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('current')
if mibBuilder.loadTexts: softwareVersion.setDescription('Current software version')
hardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 19, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareVersion.setStatus('current')
if mibBuilder.loadTexts: hardwareVersion.setDescription('Hardware platform version')
secondarySoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 19, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secondarySoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: secondarySoftwareVersion.setDescription('Secondary software version, used when the primary software image is invalid or erased')
bootVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 19, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootVersion.setStatus('current')
if mibBuilder.loadTexts: bootVersion.setDescription('Boot code software version')
receiveDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveDataRate.setStatus('current')
if mibBuilder.loadTexts: receiveDataRate.setDescription('Data rate received by the wireless interface. Expressed in kbps, rounded down to nearest 100 kbps.')
transmitDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 20, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitDataRate.setStatus('current')
if mibBuilder.loadTexts: transmitDataRate.setDescription('Data rate transmitted from the wireless interface. Expressed in kbps, rounded down to nearest 100 kbps.')
aggregateDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregateDataRate.setStatus('current')
if mibBuilder.loadTexts: aggregateDataRate.setDescription('Total data rate across the wireless interface summed over both link directions. Expressed in kbps, rounded down to nearest 100 kbps.')
wirelessLinkAvailability = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 20, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkAvailability.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkAvailability.setDescription('The percentage of time that the unit has been able to successfully demodulate the signal transmitted from the remote end of the link. Calculated since the last reset of the system counters. The reported value is the percentage multiplied by 10000.')
wirelessLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 0), ("registering", 1), ("searching", 2), ("acquiring", 3), ("radarCAC", 4), ("initialising", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkStatus.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkStatus.setDescription('Current status of the wireless link')
byteErrorRatio = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 20, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: byteErrorRatio.setStatus('current')
if mibBuilder.loadTexts: byteErrorRatio.setDescription('The byte error ratio calculated since the last reset of the system counters. The reported value is the ratio multiplied by 10 to the power of 12.')
codeWordErrorRatio = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 20, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: codeWordErrorRatio.setStatus('current')
if mibBuilder.loadTexts: codeWordErrorRatio.setDescription('The wireless link sends data in error correctable blocks called code words. This attribute reports the ratio of uncorrected code words to the total number of code words received since the last reset of the system counters. The reported value is the ratio multiplied by 10 to the power of 12.')
encryptionAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("aESRijndael", 1), ("aES256bitRijndael", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: encryptionAlgorithm.setStatus('current')
if mibBuilder.loadTexts: encryptionAlgorithm.setDescription('The Encryption Algorithm used by the wireless link. NB: A system reboot is required to activate changes to this attribute. NB: The same Encryption Algorithm must be configured at BOTH ends of the link for it to function correctly')
rFURfBand = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6000, 38000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURfBand.setStatus('current')
if mibBuilder.loadTexts: rFURfBand.setDescription('RFU RF band in MHz')
rFUTxBandAboveRx = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxBandAboveRx.setStatus('current')
if mibBuilder.loadTexts: rFUTxBandAboveRx.setDescription('Yes means RFU transmitter frequency band is above receiver frequency band')
rFUFreqSpacing = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUFreqSpacing.setStatus('current')
if mibBuilder.loadTexts: rFUFreqSpacing.setDescription('Tx-Rx frequency spacing in kHz')
rFUTxPowerMin = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxPowerMin.setStatus('current')
if mibBuilder.loadTexts: rFUTxPowerMin.setDescription('Minimum transmitter power level, in 10ths of dBm')
rFUTxPowerMax = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(160, 370))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxPowerMax.setStatus('current')
if mibBuilder.loadTexts: rFUTxPowerMax.setDescription('Maximum transmitter power level, in 10ths of dBm')
rFURxFreqMin = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5725000, 41000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURxFreqMin.setStatus('current')
if mibBuilder.loadTexts: rFURxFreqMin.setDescription('Minimum receiver frequency in kHz')
rFURxFreqMax = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5725000, 41000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURxFreqMax.setStatus('current')
if mibBuilder.loadTexts: rFURxFreqMax.setDescription('Maximum receiver frequency in kHz')
rFUTxFreqMin = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5725000, 41000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxFreqMin.setStatus('current')
if mibBuilder.loadTexts: rFUTxFreqMin.setDescription('Minimum transmitter frequency in kHz')
rFUTxFreqMax = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5725000, 41000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxFreqMax.setStatus('current')
if mibBuilder.loadTexts: rFUTxFreqMax.setDescription('Maximum transmitter frequency in kHz')
rFUSerial = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUSerial.setStatus('current')
if mibBuilder.loadTexts: rFUSerial.setDescription('RFU serial number')
rFUActiveFirmwareBank = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUActiveFirmwareBank.setStatus('current')
if mibBuilder.loadTexts: rFUActiveFirmwareBank.setDescription('RFU active firmware bank number')
rFUVersionBank1 = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUVersionBank1.setStatus('current')
if mibBuilder.loadTexts: rFUVersionBank1.setDescription('RFU firmware version number (nnn/ddMMYY) in bank 1')
rFUVersionBank2 = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUVersionBank2.setStatus('current')
if mibBuilder.loadTexts: rFUVersionBank2.setDescription('RFU firmware version number (nnn/ddMMYY) in bank 2')
rFUType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUType.setStatus('current')
if mibBuilder.loadTexts: rFUType.setDescription('RFU type as: RFU platform, frequency band, Tx-Rx frequency spacing, Hi/Lo band and transmit frequency range')
rFURxRFSynthLockAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("outOfLock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURxRFSynthLockAlarm.setStatus('current')
if mibBuilder.loadTexts: rFURxRFSynthLockAlarm.setDescription('RFU RF receiver out of lock alarm')
rFUTxRFSynthLockAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("outOfLock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxRFSynthLockAlarm.setStatus('current')
if mibBuilder.loadTexts: rFUTxRFSynthLockAlarm.setDescription('RFU RF transmitter out of lock alarm')
rFUTxPowerAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("txOutputFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxPowerAlarm.setStatus('current')
if mibBuilder.loadTexts: rFUTxPowerAlarm.setDescription('RFU transmitter output failed alarm')
rFUCommonIFSynthLockAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("outOfLock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUCommonIFSynthLockAlarm.setStatus('current')
if mibBuilder.loadTexts: rFUCommonIFSynthLockAlarm.setDescription('Alarm indicating when the common IF RFU synthesizer is out of lock')
rFUPowerAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("powerFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUPowerAlarm.setStatus('current')
if mibBuilder.loadTexts: rFUPowerAlarm.setDescription('RFU general power alarm')
rFULockoutAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("lockedOut", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFULockoutAlarm.setStatus('current')
if mibBuilder.loadTexts: rFULockoutAlarm.setDescription('RFU locked pending unlock code alarm')
rFUCableAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("iFCableVoltageOutOfRange", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUCableAlarm.setStatus('current')
if mibBuilder.loadTexts: rFUCableAlarm.setDescription('RFU cable detector voltage out of range alarm')
rFUCableAttenuationAdjustAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("iFCableAttenuatorAdjusting", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUCableAttenuationAdjustAlarm.setStatus('current')
if mibBuilder.loadTexts: rFUCableAttenuationAdjustAlarm.setDescription('RFU cable attenuator not yet adjusted alarm')
rFUTxPowerDegradedAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("degraded", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxPowerDegradedAlarm.setStatus('current')
if mibBuilder.loadTexts: rFUTxPowerDegradedAlarm.setDescription('Indicates when the current transmit power is more than 3 dB below or more than 3 dB above the correct transmit power.')
rFURpsAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("rPSAlarmActive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURpsAlarm.setStatus('current')
if mibBuilder.loadTexts: rFURpsAlarm.setDescription('RFU radio protection switch (RPS) alarm')
rFUTxMuteStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("transmitting", 0), ("mutedByUser", 1), ("mutedDueToConfigurationError", 2), ("mutedDueToRFUFault", 3), ("mutedDueToRFUConfiguring", 4), ("mutedDueToRFUIncompatiblewithCMU", 5), ("mutedDueToInactive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxMuteStatus.setStatus('current')
if mibBuilder.loadTexts: rFUTxMuteStatus.setDescription('Indicates whether the RFU is transmitting or muted. If it is muted, it will also indicate the reason.')
rFUFanAssemblyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("partialFanFailure", 1), ("totalFanFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUFanAssemblyAlarm.setStatus('current')
if mibBuilder.loadTexts: rFUFanAssemblyAlarm.setDescription('This indicates when the IRFU transceiver fan assembly has failed. The assembly consists of two fans and if one fan fails, the this will report partial failure. If both fans fail, this will report total failure')
rFUHighTemperatureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("highTemperature", 1), ("veryHighTemperature", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUHighTemperatureAlarm.setStatus('current')
if mibBuilder.loadTexts: rFUHighTemperatureAlarm.setDescription('Indicates when the temperature of the IRFU transceiver has risen above either of two thresholds. If the temperature exceeds the High Temperature threshold, the transmit power may reduce. If the temperature exceeds the Very High Temperature threshold, the transceiver will mute the transmitter')
rFURFSwitchAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("fault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURFSwitchAlarm.setStatus('current')
if mibBuilder.loadTexts: rFURFSwitchAlarm.setDescription('This indicates that an RF switch is not present when it should be or that on the most recent attempt to make this unit active, the IRFU RF Switch was not able to switch to the correct position')
rFURxIFSynthLockAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("outOfLock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURxIFSynthLockAlarm.setStatus('current')
if mibBuilder.loadTexts: rFURxIFSynthLockAlarm.setDescription('RFU IF receiver out of lock alarm')
rFUTxIFSynthLockAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("outOfLock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxIFSynthLockAlarm.setStatus('current')
if mibBuilder.loadTexts: rFUTxIFSynthLockAlarm.setDescription('RFU IF transmitter out of lock alarm')
rFUPowerButtonPressed = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("iRFUPowerButtonwaspressed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUPowerButtonPressed.setStatus('current')
if mibBuilder.loadTexts: rFUPowerButtonPressed.setDescription('IRFU power button have been pressed, IFRU has powered down unexpectedly')
rFUConnectedPlatform = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("oDUA", 1), ("oDUB", 2), ("iRFUHP", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUConnectedPlatform.setStatus('current')
if mibBuilder.loadTexts: rFUConnectedPlatform.setDescription('The type of RFU platform currently connected to the CMU')
rFUCommonRFSynthLockAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("outOfLock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUCommonRFSynthLockAlarm.setStatus('current')
if mibBuilder.loadTexts: rFUCommonRFSynthLockAlarm.setDescription('Alarm indicating when the common RFU RF synthesizer is out of lock')
rFUBranchingConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rFU1plus0", 0), ("rFU1plus0MHSBReadyEqual", 1), ("rFU1plus0MHSBReadyUnequal", 2), ("rFU1plus1MHSBEqual", 3), ("rFU1plus1MHSBUnequal", 4), ("rFU1plus1TxMHSBRxSD", 5), ("rFU2plus0", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rFUBranchingConfiguration.setStatus('current')
if mibBuilder.loadTexts: rFUBranchingConfiguration.setDescription('When an IRFU is being installed, the configuration of the IRFU branching unit must be configured. Please see the User Guide for further details')
rFUTransceiverLocation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("leftTRxA", 0), ("rightTRxB", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rFUTransceiverLocation.setStatus('current')
if mibBuilder.loadTexts: rFUTransceiverLocation.setDescription('When a 2+0 IRFU is being installed, the user must configure which of the two IRFU transceivers the CMU is controlling in order to ensure correct operation')
rFURfSwitchCableAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("fault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURfSwitchCableAlarm.setStatus('current')
if mibBuilder.loadTexts: rFURfSwitchCableAlarm.setDescription('The RF switch in the IRFU is indicating an invalid switch position. The most likely cause is a fault or a disconnection of the cable which connects the transceiver to the RF switch')
rFUReceiveBranchingUnitLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUReceiveBranchingUnitLoss.setStatus('current')
if mibBuilder.loadTexts: rFUReceiveBranchingUnitLoss.setDescription('The receive loss in the IRFU branching unit, expressed in tenths of a dB. The branching unit is a component of the IRFU which is situated between the IRFU transceiver and IRFU antenna port. It provides the necessary filtering, isolation and coupling.')
rFUTransmitBranchingUnitLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTransmitBranchingUnitLoss.setStatus('current')
if mibBuilder.loadTexts: rFUTransmitBranchingUnitLoss.setDescription('The transmit loss in the IRFU branching unit, expressed in tenths of a dB. The branching unit is a component of the IRFU which is situated between the IRFU transceiver and IRFU antenna port. It provides the necessary filtering, isolation and coupling.')
radioLicenseIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseIdentifier.setStatus('current')
if mibBuilder.loadTexts: radioLicenseIdentifier.setDescription('Radio license identifier')
radioLicenseBand = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("bandLower6GHz", 0), ("band7GHz", 1), ("band8GHz", 2), ("band11GHz", 3), ("band13GHz", 4), ("band15GHz", 5), ("band18GHz", 6), ("band23GHz", 7), ("band26GHz", 8), ("band32GHz", 9), ("band38GHz", 10), ("bandUpper6GHz", 11), ("band28GHz", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseBand.setStatus('current')
if mibBuilder.loadTexts: radioLicenseBand.setDescription('Radio license band')
radioLicenseRegion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("eTSI", 0), ("fCC", 1), ("canada", 2), ("brazil", 3), ("nTIA", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseRegion.setStatus('current')
if mibBuilder.loadTexts: radioLicenseRegion.setDescription('Radio license region')
radioLicenseTxFreq = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5925000, 40105000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseTxFreq.setStatus('current')
if mibBuilder.loadTexts: radioLicenseTxFreq.setDescription('Radio license transmit frequency in kHz')
radioLicenseRxFreq = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5925000, 40105000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseRxFreq.setStatus('current')
if mibBuilder.loadTexts: radioLicenseRxFreq.setDescription('Radio license receive frequency in kHz')
radioLicenseBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("bw7MHz", 0), ("bw10MHz", 1), ("bw1375MHz", 2), ("bw14MHz", 3), ("bw20MHz", 4), ("bw275MHz", 5), ("bw28MHz", 6), ("bw30MHz", 7), ("bw40MHz", 8), ("bw50MHz", 9), ("bw55MHz", 10), ("bw56MHz", 11), ("bw80MHz", 12), ("bw25MHz", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseBandwidth.setStatus('current')
if mibBuilder.loadTexts: radioLicenseBandwidth.setDescription('Radio license bandwidth')
radioLicenseMaxEIRP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-300, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseMaxEIRP.setStatus('current')
if mibBuilder.loadTexts: radioLicenseMaxEIRP.setDescription('Maximum Effective Isotropic Radiated Power (EIRP) permitted by the license. Expressed in 10ths of dBm')
radioLicenseModulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("modQPSK", 0), ("mod8PSK", 1), ("mod16QAM", 2), ("mod32QAM", 3), ("mod64QAM", 4), ("mod128QAM", 5), ("mod256QAM", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseModulation.setStatus('current')
if mibBuilder.loadTexts: radioLicenseModulation.setDescription('Radio license modulation')
radioLicenseCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseCodeRate.setStatus('current')
if mibBuilder.loadTexts: radioLicenseCodeRate.setDescription('Radio license code rate, multiplied by 100 to give two decimal places of precision')
radioLicenseIncompatibleAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("radioLicenseIncompatiblewithRFU", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseIncompatibleAlarm.setStatus('current')
if mibBuilder.loadTexts: radioLicenseIncompatibleAlarm.setDescription('Indicates if the radio license is incompatible with the attached RFU. Re-run Installation to correct the issue')
radioLicenseMinModulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("modQPSK", 0), ("mod8PSK", 1), ("mod16QAM", 2), ("mod32QAM", 3), ("mod64QAM", 4), ("mod128QAM", 5), ("mod256QAM", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseMinModulation.setStatus('current')
if mibBuilder.loadTexts: radioLicenseMinModulation.setDescription('Certain licensing authorities, for example FCC and Industry Canada, require adaptive modulation to be bound by a minimum and maximum modulation mode as defined by the radio license. This attribute is only of significance in such regions and when adaptive modulation is enabled. For other regions, for example ETSI, minimum and maximum modulation mode are directly adjustable by the user and are not defined by the radio license. In general, a modulation mode is defined by two aspects, a modulation and a code rate. This integer attribute identifies the modulation aspect of the RadioLicenseMinModMode attribute required by the radio license. For example, if RadioLicenseMinModMode is configured for 16QAM 0.79, this attribute will be set to a value of 2 which identifies a modulation of 16QAM.')
radioLicenseMinCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseMinCodeRate.setStatus('current')
if mibBuilder.loadTexts: radioLicenseMinCodeRate.setDescription('Certain licensing authorities, for example FCC and Industry Canada, require adaptive modulation to be bound by a minimum and maximum modulation mode as defined by the radio license. This attribute is only of significance in such regions and when adaptive modulation is enabled. For other regions, for example ETSI, minimum and maximum modulation mode are directly adjustable by the user and are not defined by the radio license. In general, a modulation mode is defined by two aspects, a modulation and a code rate. This attribute is equal to 100 times the code rate aspect of the RadioLicenseMinModMode attribute required by the radio license. For example, if RadioLicenseMinModMode is configured for QPSK 0.80, this attribute will read 80.')
radioLicenseMaxModulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("modQPSK", 0), ("mod8PSK", 1), ("mod16QAM", 2), ("mod32QAM", 3), ("mod64QAM", 4), ("mod128QAM", 5), ("mod256QAM", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseMaxModulation.setStatus('current')
if mibBuilder.loadTexts: radioLicenseMaxModulation.setDescription('Certain licensing authorities, for example FCC and Industry Canada, require adaptive modulation to be bound by a minimum and maximum modulation mode as defined by the radio license. This attribute is only of significance in such regions and when adaptive modulation is enabled. For other regions, for example ETSI, minimum and maximum modulation mode are directly adjustable by the user and are not defined by the radio license. In general, a modulation mode is defined by two aspects, a modulation and a code rate. This integer attribute identifies the modulation aspect of the RadioLicenseMaxModMode attribute required by the radio license. For example, if RadioLicenseMaxModMode is configured for 256QAM 0.91, this attribute will be set to a value of 6 which identifies a modulation of 256QAM.')
radioLicenseMaxCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseMaxCodeRate.setStatus('current')
if mibBuilder.loadTexts: radioLicenseMaxCodeRate.setDescription('Certain licensing authorities, for example FCC and Industry Canada, require adaptive modulation to be bound by a minimum and maximum modulation mode as defined by the radio license. This attribute is only of significance in such regions and when adaptive modulation is enabled. For other regions, for example ETSI, minimum and maximum modulation mode are directly adjustable by the user and are not defined by the radio license. In general, a modulation mode is defined by two aspects, a modulation and a code rate. This attribute is equal to 100 times the code rate aspect of the RadioLicenseMaxModMode attribute required by the radio license. For example, if RadioLicenseMaxModMode is configured for 256QAM 0.91, this attribute will read 91.')
protection = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("hotStandby1plus1", 1), ("hotStandby1plus1withRxDiversity", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protection.setStatus('current')
if mibBuilder.loadTexts: protection.setDescription('PTP 800 supports a 1+1 Hot Standby configuration where the wireless link is protected against hardware failure. This requires the installation of redundant equipment at each end of the wireless link including a secondary CMU and RFU. At a given end of the wireless link, only one CMU / RFU is Active at any one time, the neighbor CMU / RFU being Inactive. When a fault is detected on the Active CMU / RFU, the Active role will automatically switch to the Inactive CMU / RFU. To enable functionality associated with this feature, this attribute must be configured for a setting of 1+1.')
faultProtectionSwitching = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faultProtectionSwitching.setStatus('current')
if mibBuilder.loadTexts: faultProtectionSwitching.setDescription('In a 1+1 Hot Standby configuration, protection switching on detection of a fault can be enabled/disabled using this attribute.')
primarySecondaryMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primarySecondaryMode.setStatus('current')
if mibBuilder.loadTexts: primarySecondaryMode.setDescription('At a given end of a 1+1 Hot Standby configuration, one CMU must be configured as Primary, the other CMU as Secondary. When a Protected Link initialises with no faults, the CMUs configured as Primary will become the Active CMUs, that is, the Primary CMUs are the preferred CMUs. When RFUs are connected to the antenna via an Asymmetric Coupler, the RFU which is connected to the Primary CMU should be connected to the Main path of the coupler. This is the path with the lowest loss.')
numberOfAntennas = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("one", 0), ("two", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfAntennas.setStatus('current')
if mibBuilder.loadTexts: numberOfAntennas.setDescription('This must be configured to match the number of antennas installed at this end of the link.')
primaryRecovery = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryRecovery.setStatus('current')
if mibBuilder.loadTexts: primaryRecovery.setDescription('At a given end of a 1+1 Hot Standby configuration, the CMU configured as Primary is the preferred unit to take the Active role. If the Primary Recovery attribute is set to Enabled at a given end, a protection switch back to the preferred Primary CMU / RFU will occur autonomously if it has stayed free of faults for a configurable period of time determined by the Primary Recovery Period.')
primaryRecoveryPeriod = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2880))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryRecoveryPeriod.setStatus('current')
if mibBuilder.loadTexts: primaryRecoveryPeriod.setDescription('At a given end of a 1+1 Hot Standby configuration, the CMU configured as Primary is the preferred unit to take the Active role. If the Primary Recovery attribute is set to Enabled at a given end, a protection switch back to the preferred Primary CMU / RFU will occur autonomously if it has stayed free of faults for a configurable period of time determined by the Primary Recovery Period.')
requestedProtectionState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: requestedProtectionState.setStatus('current')
if mibBuilder.loadTexts: requestedProtectionState.setDescription('In a 1+1 Hot Standby configuration, only one CMU / RFU at a given end of the link is Active at any one time, the neighbor CMU / RFU being Inactive. Use the Requested Protection State attribute to request whether this CMU / RFU should be in the Active or Inactive state.')
antennaReceiveLevelDeltaThreshold = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: antennaReceiveLevelDeltaThreshold.setStatus('current')
if mibBuilder.loadTexts: antennaReceiveLevelDeltaThreshold.setDescription('At a given end of a 1+1 Hot Standby configuration, a CMU will raise an alarm to the management system when the measured receive level adjusted by antenna gain and feeder loss is less than that of its neighbor by more than the Antenna Receive Level Delta Threshold.')
antennaReceiveLevelMeasurementWindow = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2880))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: antennaReceiveLevelMeasurementWindow.setStatus('current')
if mibBuilder.loadTexts: antennaReceiveLevelMeasurementWindow.setDescription('At a given end of a 1+1 Hot Standby configuration, a CMU will raise an alarm to the management system when the measured receive level adjusted by antenna gain and feeder loss is less than that of its neighbor by more than the Antenna Receive Level Delta Threshold. The measurements are averaged over the most recent Antenna Receive Level Measurement Window.')
fiberY = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fiberY.setStatus('current')
if mibBuilder.loadTexts: fiberY.setDescription("One or both ends of a 1+1 Hot Standby system can be connected to the network using an 'Optical-Y Splitter Kit per end'. This end configuration provides a single fiber interface to the network. Any end which is connected to the network using this method must have the Fiber Y attribute set to Enabled. Please note: CMUs must be loaded with boot code version 03-00 or later and recovery version 04-00 or later for Fiber Y to work correctly.")
rxDiversityVlanTpid = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("iEEE8021QTaggedCTagType8100", 0), ("iEEE8021adTaggedSTagorBTagType88a8", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxDiversityVlanTpid.setStatus('current')
if mibBuilder.loadTexts: rxDiversityVlanTpid.setDescription('When Receive Diversity is enabled, the Inactive CMU sends Rx Diversity Ethernet Frames to the Active CMU. These Ethernet Frames must be VLAN tagged and this attribute controls whether the frames are tagged using the TPID defined by 802.1Q or the TPID defined by 802.1ad.')
rxDiversityVid = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxDiversityVid.setStatus('current')
if mibBuilder.loadTexts: rxDiversityVid.setDescription('When Receive Diversity is enabled, the Inactive CMU sends Rx Diversity Ethernet Frames to the Active CMU. These Ethernet Frames must be VLAN tagged and this attribute controls the VLAN Identifier')
protectionAvailabilityStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("notProtected", 1), ("notProtecting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionAvailabilityStatus.setStatus('current')
if mibBuilder.loadTexts: protectionAvailabilityStatus.setDescription("In a 1+1 Hot Standby configuration, the Protection Availability Status attribute indicates whether the Active unit is currently being protected by the Inactive unit. If it isn't being protected, the Active unit will report Not Protected and the Inactive unit will report Not Protecting.")
protectionConfigurationStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("configurationNotProtecting", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionConfigurationStatus.setStatus('current')
if mibBuilder.loadTexts: protectionConfigurationStatus.setDescription('In a 1+1 Hot Standby configuration, this attribute will indicate whether the configuration will support protection.')
protectionState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionState.setStatus('current')
if mibBuilder.loadTexts: protectionState.setDescription('In a 1+1 Hot Standby configuration, only one CMU / RFU at a given end of the link is Active at any one time, the neighbor CMU / RFU being Inactive. The Protection State attribute indicates whether a CMU / RFU is in the Active or Inactive state.')
activeUnit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeUnit.setStatus('current')
if mibBuilder.loadTexts: activeUnit.setDescription('At a given end of a 1+1 Hot Standby configuration, one CMU must be configured as Primary, the other CMU as Secondary. When a Protected Link initialises with no faults, the CMU configured as Primary will become the Active CMU, that is, the Primary CMU is the preferred CMUs. The Active Unit attribute indicates whether the active unit is configured as Primary or Secondary.')
protectionSwitchCause = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("noPreviousProtectionSwitch", 0), ("neighborCMUConnectedButNotResponding", 1), ("rFUNotResponding", 2), ("rFURxRFSynthOutofLock", 3), ("rFUTxRFSynthOutofLock", 4), ("rFUCommonRFSynthOutofLock", 5), ("rFUCableFailure", 6), ("rFUCableAttenuatorAdjustmentFailure", 7), ("rFUTxPowerDegraded", 8), ("dataPortDown", 9), ("managementPortDown", 10), ("wirelessReceiveSignalNotDetected", 11), ("byteErrorRatioOverThreshold", 12), ("codeWordErrorRatioOverThreshold", 13), ("cMURebooting", 14), ("configurationNotProtecting", 15), ("wirelessReceiveSignalNotDetectedatRemoteEnd", 16), ("byteErrorRatioOverThresholdatRemoteEnd", 17), ("codeWordErrorRatioOverThresholdatRemoteEnd", 18), ("multipleReceiveFailureatRemoteEnd", 19), ("primaryRecovery", 20), ("managedProtectionSwitch", 21), ("rFURxIFSynthOutofLock", 22), ("rFUTxIFSynthOutofLock", 23), ("rFUCommonIFSynthOutofLock", 24), ("rFUVeryHighTemperature", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionSwitchCause.setStatus('current')
if mibBuilder.loadTexts: protectionSwitchCause.setDescription('In a 1+1 Hot Standby configuration, the Protection Switch Cause attribute reports the reason for the last protection switch.')
endId = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: endId.setStatus('current')
if mibBuilder.loadTexts: endId.setDescription('In a 1+1 Hot Standby configuration, the End Id contains the IP address of neighboring CMUs starting with the highest IP address and with a space separating the addresses. It is a single identifier of neighboring CMUs.')
neighborIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborIPAddress.setStatus('current')
if mibBuilder.loadTexts: neighborIPAddress.setDescription('In a 1+1 Hot Standby configuration, the Neighbor IP Address identifies the IP Address of the neighbor CMU connected via the Protection Interface.')
neighborMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborMACAddress.setStatus('current')
if mibBuilder.loadTexts: neighborMACAddress.setDescription('In a 1+1 Hot Standby configuration, the Neighbor MAC Address identifies the MAC Address of the neighbor CMU connected via the Protection Interface.')
wirelessReceiveSignalStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("notDetected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessReceiveSignalStatus.setStatus('current')
if mibBuilder.loadTexts: wirelessReceiveSignalStatus.setDescription('The Wireless Receive Signal Status indicates if the receiver is able to demodulate the transmit signal from the remote end of the link. If it cannot demodulate the signal, a protection switch may occur in a system configured for 1+1 Hot Standby.')
licensedTransmitCapacityStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("lessThanNeighbor", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensedTransmitCapacityStatus.setStatus('current')
if mibBuilder.loadTexts: licensedTransmitCapacityStatus.setDescription('In a 1+1 Hot Standby configuration, the Licensed Transmit Capacity Status attribute indicates when the Licensed Transmit Capacity is below that of its neighbor.')
dataPortEthernetSpeedStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("lessThanNeighbor", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortEthernetSpeedStatus.setStatus('current')
if mibBuilder.loadTexts: dataPortEthernetSpeedStatus.setDescription('In a 1+1 Hot Standby configuration, the Data Port Ethernet Speed Status attribute indicates if the Ethernet Speed of the Data Port is below that of its neighbor.')
managementPortEthernetSpeedStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("lessThanNeighbor", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortEthernetSpeedStatus.setStatus('current')
if mibBuilder.loadTexts: managementPortEthernetSpeedStatus.setDescription('In a 1+1 Hot Standby configuration, the Management Port Ethernet Speed Status attribute indicates if the Ethernet Speed of the Management Port is below that of its neighbor.')
protectionInterfaceStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("neighborNotResponding", 1), ("neighborNotConnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: protectionInterfaceStatus.setDescription('In a 1+1 Hot Standby configuration, information is shared between neighbor CMUs over the Protection Interface. The Protection Interface Status attribute reports whether the neighbor CMU is successfully responding, physically disconnected or whether it is physically connected but not responding, e.g. powered down.')
remotePrimaryIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePrimaryIPAddress.setStatus('current')
if mibBuilder.loadTexts: remotePrimaryIPAddress.setDescription('In a 1+1 Hot Standby configuration, the Remote Primary IP Address reports the IP address of the CMU which is configured as Primary at the remote end of the wireless link.')
remoteSecondaryIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteSecondaryIPAddress.setStatus('current')
if mibBuilder.loadTexts: remoteSecondaryIPAddress.setDescription('In a 1+1 Hot Standby configuration, the Remote Secondary IP Address reports the IP address of the CMU which is configured as Secondary at the remote end of the wireless link.')
remotePrimaryMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePrimaryMACAddress.setStatus('current')
if mibBuilder.loadTexts: remotePrimaryMACAddress.setDescription('In a 1+1 Hot Standby configuration, the Remote Primary MAC Address reports the MAC address of the CMU which is configured as Primary at the remote end of the wireless link.')
remoteSecondaryMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteSecondaryMACAddress.setStatus('current')
if mibBuilder.loadTexts: remoteSecondaryMACAddress.setDescription('In a 1+1 Hot Standby configuration, the Remote Secondary MAC Address reports the MAC address of the CMU which is configured as Secondary at the remote end of the wireless link.')
remotePrimarySecondaryMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePrimarySecondaryMode.setStatus('current')
if mibBuilder.loadTexts: remotePrimarySecondaryMode.setDescription('In a 1+1 Hot Standby configuration, this attribute identifies whether the Active Unit at the remote end of the link is configured as Primary or Secondary.')
transmitterStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("muted", 0), ("transmitting", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitterStatus.setStatus('current')
if mibBuilder.loadTexts: transmitterStatus.setDescription('Indicates whether the RFU is transmitting or muted. In a 1+1 Hot Standby configuration, it will also indicate if the RFU is Inactive and therefore ready to transmit.')
endWirelessReceiveSignalStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("notDetected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: endWirelessReceiveSignalStatus.setStatus('current')
if mibBuilder.loadTexts: endWirelessReceiveSignalStatus.setDescription('The End Wireless Receive Signal Status indicates if the end of a link is unable to demodulate the signal transmitted from the remote end of the link. When Protection is set to 1+1 Hot Standby, this attribute will indicate Not Detected if the Active CMU is unable to demodulate the wireless signal. When Receive Diversity is enabled, this attribute will indicate Not Detected if both the Active and Inactive CMUs are unable to demodulate the wireless signal.')
rxDiversityDataPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("notProtecting", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiversityDataPortStatus.setStatus('current')
if mibBuilder.loadTexts: rxDiversityDataPortStatus.setDescription('When Receive Diversity is enabled, the Inactive CMU sends Rx Diversity Ethernet Frames to the Active CMU. Before sending these frames, the Data Port MUST be negotiated at 1000 Mbps. This attribute indicates if this is not the case')
rxDiversityAvailabilityStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("notProtected", 1), ("notProtecting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiversityAvailabilityStatus.setStatus('current')
if mibBuilder.loadTexts: rxDiversityAvailabilityStatus.setDescription('The Rx Diversity Availability Status attribute will indicate when Receive Diversity is not operating correctly, either due to a fault or due to an incorrect configuration')
rxDiversityConfigurationStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("configurationNotProtecting", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiversityConfigurationStatus.setStatus('current')
if mibBuilder.loadTexts: rxDiversityConfigurationStatus.setDescription('For Receive Diversity to operate correctly, certain attributes must be configured correctly on both neighbor CMUs. The Rx Diversity Configuration Status attribute will indicate when this is not the case')
rxDiversityNeighborCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("mismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiversityNeighborCompatibility.setStatus('current')
if mibBuilder.loadTexts: rxDiversityNeighborCompatibility.setDescription('For Receive Diversity to operate correctly, both neighbor CMUs must both be configured with the Protection attribute set to �1+1 Hot Standby with Rx Diversity�. The Rx Diversity Neighbor Compatibility attribute indicates when the neighbor CMU is configured to a different setting')
rxDiversityVlanTpidNeighborCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("mismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiversityVlanTpidNeighborCompatibility.setStatus('current')
if mibBuilder.loadTexts: rxDiversityVlanTpidNeighborCompatibility.setDescription('For Receive Diversity to operate correctly, both neighbor CMUs must be configured with the same value of Rx Diversity VLAN TPID. The Rx Diversity VLAN TPID Neighbor Compatibility attribute indicates when this is not the case')
rxDiversityVidNeighborCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("mismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiversityVidNeighborCompatibility.setStatus('current')
if mibBuilder.loadTexts: rxDiversityVidNeighborCompatibility.setDescription('For Receive Diversity to operate correctly, both neighbor CMUs must be configured with the same value of Rx Diversity VID. The Rx Diversity VID Neighbor Compatibility attribute indicates when this is not the case')
activeCodeWordCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 27, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeCodeWordCount.setStatus('current')
if mibBuilder.loadTexts: activeCodeWordCount.setDescription('The Active Code Word Count reports the number of code words received over the wireless interface whilst the CMU / RFU is in the Active role of a 1+1 Hot Standby configuration. The count is since the last statistics reset.')
activeCodeWordErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 27, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeCodeWordErrorCount.setStatus('current')
if mibBuilder.loadTexts: activeCodeWordErrorCount.setDescription('The Active Code Word Error Count reports the number of code word errors which have been detected at the wireless interface whilst the CMU / RFU is in the Active role of a 1+1 Hot Standby configuration. The count is since the last statistics reset.')
activeByteCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 27, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeByteCount.setStatus('current')
if mibBuilder.loadTexts: activeByteCount.setDescription('The Active Byte Count reports the number of bytes received over the wireless interface whilst the CMU / RFU is in the Active role of a 1+1 Hot Standby configuration. The count is since the last statistics reset.')
activeByteErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 27, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeByteErrorCount.setStatus('current')
if mibBuilder.loadTexts: activeByteErrorCount.setDescription('The Active Byte Error Count reports the number of byte errors which have been detected at the wireless interface whilst the CMU / RFU is in the Active role of a 1+1 Hot Standby configuration. The count is since the last statistics reset.')
activeAvailableTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 27, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAvailableTime.setStatus('current')
if mibBuilder.loadTexts: activeAvailableTime.setDescription('The Active Available Time reports the time which the Wireless Link Status has been Up whilst the CMU/RFU has been in the Active role of a 1+1 Hot Standby configuration. The reported time is since the last statistics reset.')
activeCounterMeasurementPeriod = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 27, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeCounterMeasurementPeriod.setStatus('current')
if mibBuilder.loadTexts: activeCounterMeasurementPeriod.setDescription('For a 1+1 Hot Standby link, the elapsed time that the Protection State of the unit has been in the active state since the last reset of the system counters.')
activeWirelessLinkAvailability = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 27, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeWirelessLinkAvailability.setStatus('current')
if mibBuilder.loadTexts: activeWirelessLinkAvailability.setDescription('For a 1+1 Hot Standby link, the percentage of time that the unit has been able to successfully demodulate the signal transmitted from the remote end of the link whilst the Protecion State of the unit has been active. This attribute is not updated whilst the Protection State is inactive. Calculated since the last reset of the system counters. The reported value is the percentage multiplied by 10000')
activeCodeWordErrorRatio = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 27, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeCodeWordErrorRatio.setStatus('current')
if mibBuilder.loadTexts: activeCodeWordErrorRatio.setDescription('The wireless link sends data in error correctable blocks called code words. For a 1+1 Hot Standby link, this attribute reports the ratio of uncorrected code words to the total number of code words received whilst the Protecion State of the unit has been active. This ratio is not updated whilst the Protection State is inactive. Calculated since the last reset of the system counters. The reported value is the ratio multiplied by 10 to the power of 12')
activeByteErrorRatio = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 27, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeByteErrorRatio.setStatus('current')
if mibBuilder.loadTexts: activeByteErrorRatio.setDescription('For a 1+1 Hot Standby link, the Byte Error Ratio measured by the unit whilst the Protecion State has been active. This ratio is not updated whilst the Protection State is inactive. Calculated since the last reset of the system counters. The reported value is the ratio multiplied by 10 to the power of 12')
syslogClient = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 28, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogClient.setStatus('current')
if mibBuilder.loadTexts: syslogClient.setDescription('Enable or disable the syslog client')
syslogState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 28, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogState.setStatus('current')
if mibBuilder.loadTexts: syslogState.setDescription('The syslog service has been enabled or disabled')
longitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 96, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: longitude.setStatus('current')
if mibBuilder.loadTexts: longitude.setDescription('The longitude of the unit, measured in decimal degrees. This object is set by the SNMP manager and has no internal function.')
latitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 96, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latitude.setStatus('current')
if mibBuilder.loadTexts: latitude.setDescription('The latitude of the unit, measured in decimal degrees. This object is set by the SNMP manager and has no internal function.')
altitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 96, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: altitude.setStatus('current')
if mibBuilder.loadTexts: altitude.setDescription('The altitude of the unit, measured in metres. This object is set by the SNMP manager and has no internal function.')
dataPortStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 3)).setObjects(("CAMBIUM-PTP800-MIB", "dataPortStatus"))
if mibBuilder.loadTexts: dataPortStatusTrap.setStatus('current')
if mibBuilder.loadTexts: dataPortStatusTrap.setDescription('Current status of the data Ethernet link. NB: a change of state may generate an SNMP trap and/or SMTP email alert')
linkNameMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 9)).setObjects(("CAMBIUM-PTP800-MIB", "linkNameMismatch"))
if mibBuilder.loadTexts: linkNameMismatchTrap.setStatus('current')
if mibBuilder.loadTexts: linkNameMismatchTrap.setDescription('Signaling was received with the wrong Link Name. Either the Link Name is configured differently at each end of the wireless link, or this unit is aligned to the wrong link partner. NB: A change of value during operation may generate an SNMP trap and/or SMTP email alert')
alignmentModeTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 10)).setObjects(("CAMBIUM-PTP800-MIB", "alignmentMode"))
if mibBuilder.loadTexts: alignmentModeTrap.setStatus('current')
if mibBuilder.loadTexts: alignmentModeTrap.setDescription('Indicates if the unit is undergoing alignment. NB: a change of state during operation may generate an SNMP trap and/or SMTP email alert')
unitOutOfCalibrationTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 11)).setObjects(("CAMBIUM-PTP800-MIB", "unitOutOfCalibration"))
if mibBuilder.loadTexts: unitOutOfCalibrationTrap.setStatus('current')
if mibBuilder.loadTexts: unitOutOfCalibrationTrap.setDescription('The unit is out of calibration')
encryptionEnabledMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 13)).setObjects(("CAMBIUM-PTP800-MIB", "encryptionEnabledMismatch"))
if mibBuilder.loadTexts: encryptionEnabledMismatchTrap.setStatus('current')
if mibBuilder.loadTexts: encryptionEnabledMismatchTrap.setDescription('Encryption has been enabled on one end of the wireless link but not the other')
wirelessLinkDisabledWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 16)).setObjects(("CAMBIUM-PTP800-MIB", "wirelessLinkDisabledWarning"))
if mibBuilder.loadTexts: wirelessLinkDisabledWarningTrap.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkDisabledWarningTrap.setDescription('The SNMP ifAdminStatus of the wireless interface has disabled wireless traffic')
dataPortDisabledWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 17)).setObjects(("CAMBIUM-PTP800-MIB", "dataPortDisabledWarning"))
if mibBuilder.loadTexts: dataPortDisabledWarningTrap.setStatus('current')
if mibBuilder.loadTexts: dataPortDisabledWarningTrap.setDescription('The SNMP ifAdminStatus of the data Ethernet interface has disabled Ethernet traffic')
dataPortFiberStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 18)).setObjects(("CAMBIUM-PTP800-MIB", "dataPortFiberStatus"))
if mibBuilder.loadTexts: dataPortFiberStatusTrap.setStatus('current')
if mibBuilder.loadTexts: dataPortFiberStatusTrap.setDescription('If the fiber interface on the data Ethernet port is not OK, there are three possible causes: 1) the fiber interface has been installed but disabled, 2) the interface could not be established even though no LOS was detected (i.e. an optical carrier was detected, which could be due to a broken TX fiber, or because the interface is disabled at the other end of the fiber link), or 3) the interface could not be established and LOS is detected (i.e. no optical carrier is detected). NB: a change of status may generate an SNMP trap and/or SMTP email alert')
dataPortConfigurationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 19)).setObjects(("CAMBIUM-PTP800-MIB", "dataPortConfigurationMismatch"))
if mibBuilder.loadTexts: dataPortConfigurationMismatchTrap.setStatus('current')
if mibBuilder.loadTexts: dataPortConfigurationMismatchTrap.setDescription('The detection of Ethernet fragments (runt packets) on the data Ethernet port when the link is in full duplex is an indication of an auto-negotiation or forced configuration mismatch')
sNTPSyncTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 21)).setObjects(("CAMBIUM-PTP800-MIB", "sNTPSync"))
if mibBuilder.loadTexts: sNTPSyncTrap.setStatus('current')
if mibBuilder.loadTexts: sNTPSyncTrap.setDescription('If SNTP Sync fails then check the server settings in the Remote Management page, or disable SNTP. NB: a change of state may generate an SNMP trap and/or SMTP email alert')
managementPortStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 23)).setObjects(("CAMBIUM-PTP800-MIB", "managementPortStatus"))
if mibBuilder.loadTexts: managementPortStatusTrap.setStatus('current')
if mibBuilder.loadTexts: managementPortStatusTrap.setDescription('Current status of the out-of-band management Ethernet link')
managementPortDisabledWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 24)).setObjects(("CAMBIUM-PTP800-MIB", "managementPortDisabledWarning"))
if mibBuilder.loadTexts: managementPortDisabledWarningTrap.setStatus('current')
if mibBuilder.loadTexts: managementPortDisabledWarningTrap.setDescription('The SNMP ifAdminStatus of the out-of-band management Ethernet interface has disabled Ethernet traffic')
rFUStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 27)).setObjects(("CAMBIUM-PTP800-MIB", "rFUStatus"))
if mibBuilder.loadTexts: rFUStatusTrap.setStatus('current')
if mibBuilder.loadTexts: rFUStatusTrap.setDescription("Current status of the RFU. A state of 'ok' indicates that the RFU is fully operational, although may not be transmitting.")
managementPortConfigurationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 28)).setObjects(("CAMBIUM-PTP800-MIB", "managementPortConfigurationMismatch"))
if mibBuilder.loadTexts: managementPortConfigurationMismatchTrap.setStatus('current')
if mibBuilder.loadTexts: managementPortConfigurationMismatchTrap.setDescription('The detection of Ethernet fragments (runt packets) on the out-of-band management Ethernet port when the link is in full duplex is an indication of an auto-negotiation or forced configuration mismatch')
wirelessLinkStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 29)).setObjects(("CAMBIUM-PTP800-MIB", "wirelessLinkStatus"))
if mibBuilder.loadTexts: wirelessLinkStatusTrap.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkStatusTrap.setDescription('Current status of the wireless link')
protectionAvailabilityStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 31)).setObjects(("CAMBIUM-PTP800-MIB", "protectionAvailabilityStatus"))
if mibBuilder.loadTexts: protectionAvailabilityStatusTrap.setStatus('current')
if mibBuilder.loadTexts: protectionAvailabilityStatusTrap.setDescription("In a 1+1 Hot Standby configuration, the Protection Availability Status attribute indicates whether the Active unit is currently being protected by the Inactive unit. If it isn't being protected, the Active unit will report Not Protected and the Inactive unit will report Not Protecting.")
protectionConfigurationStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 32)).setObjects(("CAMBIUM-PTP800-MIB", "protectionConfigurationStatus"))
if mibBuilder.loadTexts: protectionConfigurationStatusTrap.setStatus('current')
if mibBuilder.loadTexts: protectionConfigurationStatusTrap.setDescription('In a 1+1 Hot Standby configuration, this attribute will indicate whether the configuration will support protection.')
protectionStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 33)).setObjects(("CAMBIUM-PTP800-MIB", "protectionState"))
if mibBuilder.loadTexts: protectionStateTrap.setStatus('current')
if mibBuilder.loadTexts: protectionStateTrap.setDescription('In a 1+1 Hot Standby configuration, only one CMU / RFU at a given end of the link is Active at any one time, the neighbor CMU / RFU being Inactive. The Protection State attribute indicates whether a CMU / RFU is in the Active or Inactive state.')
wirelessReceiveSignalStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 34)).setObjects(("CAMBIUM-PTP800-MIB", "wirelessReceiveSignalStatus"))
if mibBuilder.loadTexts: wirelessReceiveSignalStatusTrap.setStatus('current')
if mibBuilder.loadTexts: wirelessReceiveSignalStatusTrap.setDescription('The Wireless Receive Signal Status indicates if the receiver is able to demodulate the transmit signal from the remote end of the link. If it cannot demodulate the signal, a protection switch may occur in a system configured for 1+1 Hot Standby.')
licensedTransmitCapacityStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 36)).setObjects(("CAMBIUM-PTP800-MIB", "licensedTransmitCapacityStatus"))
if mibBuilder.loadTexts: licensedTransmitCapacityStatusTrap.setStatus('current')
if mibBuilder.loadTexts: licensedTransmitCapacityStatusTrap.setDescription('In a 1+1 Hot Standby configuration, the Licensed Transmit Capacity Status attribute indicates when the Licensed Transmit Capacity is below that of its neighbor.')
dataPortEthernetSpeedStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 37)).setObjects(("CAMBIUM-PTP800-MIB", "dataPortEthernetSpeedStatus"))
if mibBuilder.loadTexts: dataPortEthernetSpeedStatusTrap.setStatus('current')
if mibBuilder.loadTexts: dataPortEthernetSpeedStatusTrap.setDescription('In a 1+1 Hot Standby configuration, the Data Port Ethernet Speed Status attribute indicates if the Ethernet Speed of the Data Port is below that of its neighbor.')
managementPortEthernetSpeedStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 38)).setObjects(("CAMBIUM-PTP800-MIB", "managementPortEthernetSpeedStatus"))
if mibBuilder.loadTexts: managementPortEthernetSpeedStatusTrap.setStatus('current')
if mibBuilder.loadTexts: managementPortEthernetSpeedStatusTrap.setDescription('In a 1+1 Hot Standby configuration, the Management Port Ethernet Speed Status attribute indicates if the Ethernet Speed of the Management Port is below that of its neighbor.')
protectionInterfaceStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 39)).setObjects(("CAMBIUM-PTP800-MIB", "protectionInterfaceStatus"))
if mibBuilder.loadTexts: protectionInterfaceStatusTrap.setStatus('current')
if mibBuilder.loadTexts: protectionInterfaceStatusTrap.setDescription('In a 1+1 Hot Standby configuration, information is shared between neighbor CMUs over the Protection Interface. The Protection Interface Status attribute reports whether the neighbor CMU is successfully responding, physically disconnected or whether it is physically connected but not responding, e.g. powered down.')
syslogStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 40)).setObjects(("CAMBIUM-PTP800-MIB", "syslogState"))
if mibBuilder.loadTexts: syslogStateTrap.setStatus('current')
if mibBuilder.loadTexts: syslogStateTrap.setDescription('The syslog service has been enabled or disabled')
syslogLocalNearlyFullTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 41))
if mibBuilder.loadTexts: syslogLocalNearlyFullTrap.setStatus('current')
if mibBuilder.loadTexts: syslogLocalNearlyFullTrap.setDescription('The syslog local log is nearly full (90%)')
syslogLocalWrappedTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 42))
if mibBuilder.loadTexts: syslogLocalWrappedTrap.setStatus('current')
if mibBuilder.loadTexts: syslogLocalWrappedTrap.setDescription('The syslog local log has wrapped')
secureModeAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 43)).setObjects(("CAMBIUM-PTP800-MIB", "secureModeAlarm"))
if mibBuilder.loadTexts: secureModeAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: secureModeAlarmTrap.setDescription('The secure mode (e.g. FIPS, UC-APL) state of the unit. The secure mode is not configured(1) state indicates that the unit is capable of secure mode operation, and one or more of the following security materials has not been configured: Key Of Keys, Private Key, Public Certificate, DRNG Entropy Status, Wireless Encryption Key. The secure mode mode is configured but not active(2) state indicates that the unit is capable of secure mode operation, and the security material has been configured, but the configuration of interfaces is not consistent with secure mode operation. The secure mode is not supported(3) state indicates that the unit is not capable of secure mode operation. The secure mode capability requires appropriate hardware compatibility, license key and software image.')
endWirelessReceiveSignalStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 44)).setObjects(("CAMBIUM-PTP800-MIB", "endWirelessReceiveSignalStatus"))
if mibBuilder.loadTexts: endWirelessReceiveSignalStatusTrap.setStatus('current')
if mibBuilder.loadTexts: endWirelessReceiveSignalStatusTrap.setDescription('The End Wireless Receive Signal Status indicates if the end of a link is unable to demodulate the signal transmitted from the remote end of the link. When Protection is set to 1+1 Hot Standby, this attribute will indicate Not Detected if the Active CMU is unable to demodulate the wireless signal. When Receive Diversity is enabled, this attribute will indicate Not Detected if both the Active and Inactive CMUs are unable to demodulate the wireless signal.')
rxDiversityDataPortStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 45)).setObjects(("CAMBIUM-PTP800-MIB", "rxDiversityDataPortStatus"))
if mibBuilder.loadTexts: rxDiversityDataPortStatusTrap.setStatus('current')
if mibBuilder.loadTexts: rxDiversityDataPortStatusTrap.setDescription('When Receive Diversity is enabled, the Inactive CMU sends Rx Diversity Ethernet Frames to the Active CMU. Before sending these frames, the Data Port MUST be negotiated at 1000 Mbps. This attribute indicates if this is not the case')
rxDiversityAvailabilityStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 46)).setObjects(("CAMBIUM-PTP800-MIB", "rxDiversityAvailabilityStatus"))
if mibBuilder.loadTexts: rxDiversityAvailabilityStatusTrap.setStatus('current')
if mibBuilder.loadTexts: rxDiversityAvailabilityStatusTrap.setDescription('The Rx Diversity Availability Status attribute will indicate when Receive Diversity is not operating correctly, either due to a fault or due to an incorrect configuration')
rxDiversityConfigurationStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 47)).setObjects(("CAMBIUM-PTP800-MIB", "rxDiversityConfigurationStatus"))
if mibBuilder.loadTexts: rxDiversityConfigurationStatusTrap.setStatus('current')
if mibBuilder.loadTexts: rxDiversityConfigurationStatusTrap.setDescription('For Receive Diversity to operate correctly, certain attributes must be configured correctly on both neighbor CMUs. The Rx Diversity Configuration Status attribute will indicate when this is not the case')
rFUPowerButtonPressedTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 48)).setObjects(("CAMBIUM-PTP800-MIB", "rFUPowerButtonPressed"))
if mibBuilder.loadTexts: rFUPowerButtonPressedTrap.setStatus('current')
if mibBuilder.loadTexts: rFUPowerButtonPressedTrap.setDescription('IRFU power button have been pressed, IFRU has powered down unexpectedly')
syslogClientTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 49)).setObjects(("CAMBIUM-PTP800-MIB", "syslogClient"))
if mibBuilder.loadTexts: syslogClientTrap.setStatus('current')
if mibBuilder.loadTexts: syslogClientTrap.setDescription('Enable or disable the syslog client')
mibBuilder.exportSymbols("CAMBIUM-PTP800-MIB", rFUFreqSpacing=rFUFreqSpacing, sNMPEnabledTraps=sNMPEnabledTraps, wirelessLinkDisabledWarningTrap=wirelessLinkDisabledWarningTrap, sNTPServerTableNumber=sNTPServerTableNumber, rFUBranchingConfiguration=rFUBranchingConfiguration, rFUPlatformCompatibility=rFUPlatformCompatibility, mPLSTCPriorityTableIndex=mPLSTCPriorityTableIndex, tFTPSoftwareUpgradeFileName=tFTPSoftwareUpgradeFileName, dataPortEthernetSpeedStatus=dataPortEthernetSpeedStatus, secureModeAlarm=secureModeAlarm, rxDiversityVlanTpidNeighborCompatibility=rxDiversityVlanTpidNeighborCompatibility, dataPortCopperForcedConfiguration=dataPortCopperForcedConfiguration, sNTPPrimaryServerDeadTime=sNTPPrimaryServerDeadTime, radioLicenseRegion=radioLicenseRegion, radioLicenseBandwidth=radioLicenseBandwidth, rFUTxFreqMax=rFUTxFreqMax, linkLoss=linkLoss, encryptionAlgorithm=encryptionAlgorithm, protectionState=protectionState, protectionConfigGroup=protectionConfigGroup, rFURfSwitchCableAlarm=rFURfSwitchCableAlarm, ethernetPriorityTableNumber=ethernetPriorityTableNumber, endWirelessReceiveSignalStatus=endWirelessReceiveSignalStatus, linkName=linkName, alignmentMode=alignmentMode, receiveDataRate=receiveDataRate, wirelessLinkDisabledWarning=wirelessLinkDisabledWarning, dataPortStatus=dataPortStatus, protectionAvailabilityStatus=protectionAvailabilityStatus, mPLSTCPriorityTableEntry=mPLSTCPriorityTableEntry, rFUActiveFirmwareBank=rFUActiveFirmwareBank, vectorError=vectorError, maximumTransmitPower=maximumTransmitPower, activeByteErrorCount=activeByteErrorCount, dataPortEthernetSpeedStatusTrap=dataPortEthernetSpeedStatusTrap, tFTPServerIPAddress=tFTPServerIPAddress, rFURxFreqMax=rFURxFreqMax, tFTPSoftwareUpgradeStatus=tFTPSoftwareUpgradeStatus, licensedTransmitCapacityStatus=licensedTransmitCapacityStatus, sMTPEmailAlert=sMTPEmailAlert, linkNameMismatch=linkNameMismatch, sNTPServerTableEntry=sNTPServerTableEntry, pubStatsGroup=pubStatsGroup, longitude=longitude, dataPortCopperAutoNegotiation=dataPortCopperAutoNegotiation, managementPortStatus=managementPortStatus, rFUCableAlarm=rFUCableAlarm, protection=protection, PYSNMP_MODULE_ID=cambium, telnetPortNumber=telnetPortNumber, transmitterStatus=transmitterStatus, managementPortSpeedAndDuplex=managementPortSpeedAndDuplex, rFUPowerButtonPressed=rFUPowerButtonPressed, remotePrimaryMACAddress=remotePrimaryMACAddress, aTPCEnable=aTPCEnable, radioLicenseIncompatibleAlarm=radioLicenseIncompatibleAlarm, rFULockoutAlarm=rFULockoutAlarm, wirelessReceiveSignalStatus=wirelessReceiveSignalStatus, radioLicenseIdentifier=radioLicenseIdentifier, iPDSCPPriorityQueueMapping=iPDSCPPriorityQueueMapping, neighborIPAddress=neighborIPAddress, rFUTxFreqMin=rFUTxFreqMin, ethernetPriorityTable=ethernetPriorityTable, sNMPTrapPortNumber=sNMPTrapPortNumber, latitude=latitude, bridge=bridge, dataPortPauseFrames=dataPortPauseFrames, sNTPPollInterval=sNTPPollInterval, sntpGroup=sntpGroup, primaryRecovery=primaryRecovery, activeWirelessLinkAvailability=activeWirelessLinkAvailability, rFUTransceiverLocation=rFUTransceiverLocation, sNTPServerIPAddress=sNTPServerIPAddress, syslogClientTrap=syslogClientTrap, rFUStatusTrap=rFUStatusTrap, sNTPServerTableIndex=sNTPServerTableIndex, activeCounterMeasurementPeriod=activeCounterMeasurementPeriod, productName=productName, sNMPTrapTableIndex=sNMPTrapTableIndex, receiveCodeRate=receiveCodeRate, telnetAccessEnabled=telnetAccessEnabled, dataPortConfigurationMismatchTrap=dataPortConfigurationMismatchTrap, ptpTrapPrefix=ptpTrapPrefix, useVLANForManagementInterfaces=useVLANForManagementInterfaces, cambium=cambium, protectionConfig=protectionConfig, rFUPowerButtonPressedTrap=rFUPowerButtonPressedTrap, protectionStatusGroup=protectionStatusGroup, l2CPPriorityTableEntry=l2CPPriorityTableEntry, rFUTxIFSynthLockAlarm=rFUTxIFSynthLockAlarm, sNMPTrapTableEntry=sNMPTrapTableEntry, productVariant=productVariant, primaryRecoveryPeriod=primaryRecoveryPeriod, endWirelessReceiveSignalStatusTrap=endWirelessReceiveSignalStatusTrap, rFURFSwitchAlarm=rFURFSwitchAlarm, transmitCapacity=transmitCapacity, rxDiversityAvailabilityStatus=rxDiversityAvailabilityStatus, sNTPServerTable=sNTPServerTable, qOSPriorityScheme=qOSPriorityScheme, sMTPEnabledMessages=sMTPEnabledMessages, sMTPDestinationEmailAddress=sMTPDestinationEmailAddress, rFUVersionBank1=rFUVersionBank1, remotePrimarySecondaryMode=remotePrimarySecondaryMode, rFUCommonIFSynthLockAlarm=rFUCommonIFSynthLockAlarm, softwareVersion=softwareVersion, radioLicenseRxFreq=radioLicenseRxFreq, rFURfBand=rFURfBand, rxDiversityDataPortStatus=rxDiversityDataPortStatus, hTTPSPortNumber=hTTPSPortNumber, sNTPPrimaryServer=sNTPPrimaryServer, endId=endId, tFTPStartSoftwareUpgrade=tFTPStartSoftwareUpgrade, managementGroup=managementGroup, l2CPPriorityTable=l2CPPriorityTable, managementPortAutoNegAdvertisement=managementPortAutoNegAdvertisement, tFTPSoftwareUpgradeStatusText=tFTPSoftwareUpgradeStatusText, licensedTransmitCapacityStatusTrap=licensedTransmitCapacityStatusTrap, rxDiversityVlanTpid=rxDiversityVlanTpid, encryptionGroup=encryptionGroup, timeZone=timeZone, dataPortEthernetMediaTypeToUse=dataPortEthernetMediaTypeToUse, rFUStatus=rFUStatus, configurationGroup=configurationGroup, secureModeAlarmTrap=secureModeAlarmTrap, ptpTraps=ptpTraps, minCodeRate=minCodeRate, phyStatusGroup=phyStatusGroup, bridgeGroup=bridgeGroup, rFUConnectedPlatform=rFUConnectedPlatform, transmitPower=transmitPower, rFUTxPowerDegradedAlarm=rFUTxPowerDegradedAlarm, vLANManagementVID=vLANManagementVID, protectionStatsGroup=protectionStatsGroup, unitOutOfCalibration=unitOutOfCalibration, pubStats=pubStats, radioLicenseGroup=radioLicenseGroup, tFTPServerPortNumber=tFTPServerPortNumber, protectionConfigurationStatus=protectionConfigurationStatus, maxModulation=maxModulation, mPLSTCPriorityTable=mPLSTCPriorityTable, rFUFanAssemblyAlarm=rFUFanAssemblyAlarm, tFTPSoftwareUpgradeStatusAdditionalText=tFTPSoftwareUpgradeStatusAdditionalText, sNTPSync=sNTPSync, rFUTxPowerMin=rFUTxPowerMin, encryptionAlgorithmsAvail=encryptionAlgorithmsAvail, phyStatus=phyStatus, rFUProtectionCompatibility=rFUProtectionCompatibility, encryptionEnabledMismatch=encryptionEnabledMismatch, localPacketFiltering=localPacketFiltering, ptpCompliance=ptpCompliance, ptp=ptp, l2CPPriorityTableNumber=l2CPPriorityTableNumber, sMTPServerPortNumber=sMTPServerPortNumber, rxDiversityConfigurationStatusTrap=rxDiversityConfigurationStatusTrap, managementPortConfigurationMismatchTrap=managementPortConfigurationMismatchTrap, activeCodeWordErrorRatio=activeCodeWordErrorRatio, byteErrorRatio=byteErrorRatio, iPAddress=iPAddress, systemReset=systemReset, l2CPPriorityQueueMapping=l2CPPriorityQueueMapping, managementPortAutoNegotiation=managementPortAutoNegotiation, rFUTxMuteStatus=rFUTxMuteStatus, managementPortDisabledWarning=managementPortDisabledWarning, syslogStateTrap=syslogStateTrap, licenceGroup=licenceGroup, bootVersion=bootVersion, dataPortWirelessDownAlert=dataPortWirelessDownAlert, licence=licence, supplementaryGroup=supplementaryGroup, maxCodeRate=maxCodeRate, vLANManagementPriority=vLANManagementPriority, ethernetPriorityTableEntry=ethernetPriorityTableEntry, securityLevel=securityLevel, rFUReceiveBranchingUnitLoss=rFUReceiveBranchingUnitLoss, iPDSCPPriorityTableIndex=iPDSCPPriorityTableIndex, requestedProtectionState=requestedProtectionState, rfu=rfu, notificationsGroup=notificationsGroup, transmitModulation=transmitModulation, remoteSecondaryIPAddress=remoteSecondaryIPAddress, managementMode=managementMode, codeWordErrorRatio=codeWordErrorRatio, rxDiversityDataPortStatusTrap=rxDiversityDataPortStatusTrap, radioLicense=radioLicense, wirelessLinkStatusTrap=wirelessLinkStatusTrap, transmitCodeRate=transmitCodeRate, sNTPState=sNTPState, managementPortStatusTrap=managementPortStatusTrap, altitude=altitude, receiveModulation=receiveModulation, syslogControl=syslogControl, remoteSecondaryMACAddress=remoteSecondaryMACAddress, sNMPTrapTable=sNMPTrapTable, protectionInterfaceStatusTrap=protectionInterfaceStatusTrap, rFURxIFSynthLockAlarm=rFURxIFSynthLockAlarm, syslogClient=syslogClient, vLANManagementVIDValidation=vLANManagementVIDValidation, remoteIPAddress=remoteIPAddress, rFUTxBandAboveRx=rFUTxBandAboveRx, dSCPManagementPriority=dSCPManagementPriority, sNTPServerRetries=sNTPServerRetries, radioLicenseBand=radioLicenseBand, rFUTxPowerMax=rFUTxPowerMax, rFUPowerAlarm=rFUPowerAlarm, secondarySoftwareVersion=secondarySoftwareVersion, sNTPSyncTrap=sNTPSyncTrap, protectionConfigurationStatusTrap=protectionConfigurationStatusTrap, reset=reset, sNTPServerResponse=sNTPServerResponse, activeUnit=activeUnit, enabledDiagnosticProtectionAlarms=enabledDiagnosticProtectionAlarms, activeByteCount=activeByteCount, sNTPServerPortNumber=sNTPServerPortNumber, linkNameMismatchTrap=linkNameMismatchTrap, snmpControlGroup=snmpControlGroup, resetGroup=resetGroup, activeCodeWordCount=activeCodeWordCount, radioLicenseMaxModulation=radioLicenseMaxModulation, mPLSTCPriorityQueueMapping=mPLSTCPriorityQueueMapping, rFURxFreqMin=rFURxFreqMin, managementPortDisabledWarningTrap=managementPortDisabledWarningTrap, dataPortStatusTrap=dataPortStatusTrap, wirelessLinkStatus=wirelessLinkStatus, rxDiversityAvailabilityStatusTrap=rxDiversityAvailabilityStatusTrap, rFUTransmitBranchingUnitLoss=rFUTransmitBranchingUnitLoss, hTTPPortNumber=hTTPPortNumber, managementPortEthernetSpeedStatus=managementPortEthernetSpeedStatus, hardwareVersion=hardwareVersion, rFURpsAlarm=rFURpsAlarm, rFURxRFSynthLockAlarm=rFURxRFSynthLockAlarm, dataPortConfigurationMismatch=dataPortConfigurationMismatch, fiberY=fiberY, versions=versions, gatewayIPAddress=gatewayIPAddress, rxDiversityVidNeighborCompatibility=rxDiversityVidNeighborCompatibility, protectionStateTrap=protectionStateTrap, minModulation=minModulation, transmitCapacityLimitDetail=transmitCapacityLimitDetail, iPDSCPPriorityTableNumber=iPDSCPPriorityTableNumber, sNTPServerTimeout=sNTPServerTimeout, rFUCommonRFSynthLockAlarm=rFUCommonRFSynthLockAlarm, dataPortSpeedAndDuplex=dataPortSpeedAndDuplex, management=management, encryptionEnabledMismatchTrap=encryptionEnabledMismatchTrap, rFUHighTemperatureAlarm=rFUHighTemperatureAlarm, numberOfAntennas=numberOfAntennas, ptmp=ptmp, alarmsGroup=alarmsGroup, rFUTxRFSynthLockAlarm=rFUTxRFSynthLockAlarm, sMTPSourceEmailAddress=sMTPSourceEmailAddress, protectionAvailabilityStatusTrap=protectionAvailabilityStatusTrap, managementPortConfigurationMismatch=managementPortConfigurationMismatch, syslogLocalNearlyFullTrap=syslogLocalNearlyFullTrap, faultProtectionSwitching=faultProtectionSwitching)
mibBuilder.exportSymbols("CAMBIUM-PTP800-MIB", subnetMask=subnetMask, sMTPServerIPAddress=sMTPServerIPAddress, wirelessLinkAvailability=wirelessLinkAvailability, sNTPLastSync=sNTPLastSync, syslogState=syslogState, rxDiversityNeighborCompatibility=rxDiversityNeighborCompatibility, dataPortDisabledWarningTrap=dataPortDisabledWarningTrap, rxDiversityConfigurationStatus=rxDiversityConfigurationStatus, phyControlGroup=phyControlGroup, managementPortWirelessDownAlert=managementPortWirelessDownAlert, neighborMACAddress=neighborMACAddress, ethernetGroup=ethernetGroup, enableTransmission=enableTransmission, activeAvailableTime=activeAvailableTime, snmpControl=snmpControl, iPDSCPPriorityTableEntry=iPDSCPPriorityTableEntry, primarySecondaryMode=primarySecondaryMode, configuration=configuration, siteName=siteName, aggregateDataRate=aggregateDataRate, receivePower=receivePower, protectionStatus=protectionStatus, dataPortCopperAutoNegAdvertisement=dataPortCopperAutoNegAdvertisement, sNMPTrapTableNumber=sNMPTrapTableNumber, transmitCapacityLimit=transmitCapacityLimit, activeCodeWordErrorCount=activeCodeWordErrorCount, rFUTxPowerAlarm=rFUTxPowerAlarm, iPDSCPPriorityTable=iPDSCPPriorityTable, remoteMACAddress=remoteMACAddress, unknownNetworkPriorityQueueMapping=unknownNetworkPriorityQueueMapping, transmitDataRate=transmitDataRate, iFCableLength=iFCableLength, sNMPTrapVersion=sNMPTrapVersion, radioLicenseMaxEIRP=radioLicenseMaxEIRP, ethernetFiberSupport=ethernetFiberSupport, dataPortFiberStatus=dataPortFiberStatus, ethernet=ethernet, rxDiversityVid=rxDiversityVid, l2CPPriorityTableIndex=l2CPPriorityTableIndex, diverseAntennaGain=diverseAntennaGain, radioLicenseMinCodeRate=radioLicenseMinCodeRate, alignmentModeTrap=alignmentModeTrap, dataPortDisabledWarning=dataPortDisabledWarning, unitOutOfCalibrationTrap=unitOutOfCalibrationTrap, protectionInterfaceStatus=protectionInterfaceStatus, managementCommittedInformationRate=managementCommittedInformationRate, antennaGain=antennaGain, managementPortForcedConfiguration=managementPortForcedConfiguration, diverseRfFeederLoss=diverseRfFeederLoss, wirelessReceiveSignalStatusTrap=wirelessReceiveSignalStatusTrap, radioLicenseMinModulation=radioLicenseMinModulation, antennaReceiveLevelDeltaThreshold=antennaReceiveLevelDeltaThreshold, phyControl=phyControl, smtp=smtp, radioLicenseModulation=radioLicenseModulation, hTTPAccessEnabled=hTTPAccessEnabled, rFUVersionBank2=rFUVersionBank2, remoteMaximumTransmitPower=remoteMaximumTransmitPower, enabledDiagnosticAlarms=enabledDiagnosticAlarms, mPLSTCPriorityTableNumber=mPLSTCPriorityTableNumber, syslogLocalWrappedTrap=syslogLocalWrappedTrap, alarms=alarms, activeByteErrorRatio=activeByteErrorRatio, rFUType=rFUType, rFUCableAttenuationAdjustAlarm=rFUCableAttenuationAdjustAlarm, smtpGroup=smtpGroup, rfuGroup=rfuGroup, radioLicenseTxFreq=radioLicenseTxFreq, protectionSwitchCause=protectionSwitchCause, ptp800=ptp800, supplementary=supplementary, antennaReceiveLevelMeasurementWindow=antennaReceiveLevelMeasurementWindow, sNMPPortNumber=sNMPPortNumber, radioLicenseMaxCodeRate=radioLicenseMaxCodeRate, dataPortFiberStatusTrap=dataPortFiberStatusTrap, systemClock=systemClock, rFFeederLoss=rFFeederLoss, encryption=encryption, remotePrimaryIPAddress=remotePrimaryIPAddress, sntp=sntp, hTTPSAccessEnabled=hTTPSAccessEnabled, radioLicenseCodeRate=radioLicenseCodeRate, sNMPTrapIPAddress=sNMPTrapIPAddress, rFUSerial=rFUSerial, sNMPCommunityString=sNMPCommunityString, daylightSaving=daylightSaving, managementPortEthernetSpeedStatusTrap=managementPortEthernetSpeedStatusTrap, ptpGroups=ptpGroups, syslogControlGroup=syslogControlGroup, protectionStats=protectionStats, ethernetPriorityTableIndex=ethernetPriorityTableIndex, ethernetPriorityQueueMapping=ethernetPriorityQueueMapping, versionsGroup=versionsGroup)
