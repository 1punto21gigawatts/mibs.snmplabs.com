#
# PySNMP MIB module HUAWEI-PFLT-EUDM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-PFLT-EUDM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:47:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
mplsVpnVrfName, = mibBuilder.importSymbols("MPLS-VPN-MIB", "mplsVpnVrfName")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, Counter32, ObjectIdentity, MibIdentifier, TimeTicks, IpAddress, Integer32, ModuleIdentity, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "Counter32", "ObjectIdentity", "MibIdentifier", "TimeTicks", "IpAddress", "Integer32", "ModuleIdentity", "Gauge32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hwPFLTEudm = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2))
if mibBuilder.loadTexts: hwPFLTEudm.setLastUpdated('200304110900Z')
if mibBuilder.loadTexts: hwPFLTEudm.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwPFLTEudm.setContactInfo(' R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwPFLTEudm.setDescription(' V1.00 The HUAWEI-SLOG-EUDM-MIB contains objects to manage the security log for firewall product. ')
class AclAction(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("aclPermit", 1), ("aclDeny", 2))

class AclType(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("aclTypeNum", 1), ("aclTypeName", 2))

hwPFLT = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12))
hwPFltEudmCfgMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 1))
hwPFltEudmDefaultActionTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 1, 1), )
if mibBuilder.loadTexts: hwPFltEudmDefaultActionTable.setStatus('current')
if mibBuilder.loadTexts: hwPFltEudmDefaultActionTable.setDescription('This table define the default action in the interzone.')
hwPFltEudmDefaultActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 1, 1, 1), ).setIndexNames((0, "HUAWEI-PFLT-EUDM-MIB", "hwPFltEudmDefaultActZoneID1"), (0, "HUAWEI-PFLT-EUDM-MIB", "hwPFltEudmDefaultActZoneID2"))
if mibBuilder.loadTexts: hwPFltEudmDefaultActionEntry.setStatus('current')
if mibBuilder.loadTexts: hwPFltEudmDefaultActionEntry.setDescription('Define the default action when no match acl.')
hwPFltEudmDefaultActZoneID1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hwPFltEudmDefaultActZoneID1.setStatus('current')
if mibBuilder.loadTexts: hwPFltEudmDefaultActZoneID1.setDescription('The ID of first zone.')
hwPFltEudmDefaultActZoneID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hwPFltEudmDefaultActZoneID2.setStatus('current')
if mibBuilder.loadTexts: hwPFltEudmDefaultActZoneID2.setDescription('The ID of second zone.')
hwPFltEudmDeaultActInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 1, 1, 1, 3), AclAction().clone('aclDeny')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPFltEudmDeaultActInbound.setStatus('current')
if mibBuilder.loadTexts: hwPFltEudmDeaultActInbound.setDescription('The default action for inbound direction of interzone.')
hwPFltEudmDeaultActOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 1, 1, 1, 4), AclAction().clone('aclPermit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPFltEudmDeaultActOutbound.setStatus('current')
if mibBuilder.loadTexts: hwPFltEudmDeaultActOutbound.setDescription('The default action for outbound direction of interzone.')
hwPFltEudmPolicyApplyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 1, 2), )
if mibBuilder.loadTexts: hwPFltEudmPolicyApplyTable.setStatus('current')
if mibBuilder.loadTexts: hwPFltEudmPolicyApplyTable.setDescription('This table define the packet filter policy applied to the interzone.')
hwPFltEudmPolicyApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 1, 2, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "HUAWEI-PFLT-EUDM-MIB", "hwPFltEudmPolicyZoneID1"), (0, "HUAWEI-PFLT-EUDM-MIB", "hwPFltEudmPolicyZoneID2"))
if mibBuilder.loadTexts: hwPFltEudmPolicyApplyEntry.setStatus('current')
if mibBuilder.loadTexts: hwPFltEudmPolicyApplyEntry.setDescription('Define the packet filter policy.')
hwPFltEudmPolicyZoneID1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: hwPFltEudmPolicyZoneID1.setStatus('current')
if mibBuilder.loadTexts: hwPFltEudmPolicyZoneID1.setDescription('The ID of first security zone.')
hwPFltEudmPolicyZoneID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: hwPFltEudmPolicyZoneID2.setStatus('current')
if mibBuilder.loadTexts: hwPFltEudmPolicyZoneID2.setDescription('The ID of second security zone.')
hwPFltEudmPolicyInAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 1, 2, 1, 3), AclType().clone('aclTypeNum')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPFltEudmPolicyInAclType.setStatus('current')
if mibBuilder.loadTexts: hwPFltEudmPolicyInAclType.setDescription('The type of acl applied to the interzone on the inbound direction. ')
hwPFltEudmPolicyInAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1000, 3999), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPFltEudmPolicyInAclNum.setStatus('current')
if mibBuilder.loadTexts: hwPFltEudmPolicyInAclNum.setDescription(' The number of acl for inbound direction, This value is valid when hwPFltPolicyInAclType is aclTypeNum only. When do SET action, the hwPFltEudmPolicyInAclNum and hwPFltEudmPolicyInAclName can only specify one. ')
hwPFltEudmPolicyInAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPFltEudmPolicyInAclName.setStatus('current')
if mibBuilder.loadTexts: hwPFltEudmPolicyInAclName.setDescription(' IThe name of acl for inbound direction, This value is valid when hwPFltPolicyInAclType is aclTypeName only. When do SET action, the hwPFltEudmPolicyInAclNum and hwPFltEudmPolicyInAclName can only specify one. ')
hwPFltEudmPolicyOutAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 1, 2, 1, 6), AclType().clone('aclTypeNum')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPFltEudmPolicyOutAclType.setStatus('current')
if mibBuilder.loadTexts: hwPFltEudmPolicyOutAclType.setDescription('The type of acl applied to the interzone on the outbound direction.')
hwPFltEudmPolicyOutAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1000, 3999), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPFltEudmPolicyOutAclNum.setStatus('current')
if mibBuilder.loadTexts: hwPFltEudmPolicyOutAclNum.setDescription(' The number of acl for outbound direction, This value is valid when hwPFltPolicyOutAclType is aclTypeNum only. When do SET action, the hwPFltEudmPolicyOutAclNum and hwPFltEudmPolicyOutAclName can only specify one. ')
hwPFltEudmPolicyOutAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPFltEudmPolicyOutAclName.setStatus('current')
if mibBuilder.loadTexts: hwPFltEudmPolicyOutAclName.setDescription(' IThe name of acl for outbound direction, This value is valid when hwPFltPolicyOutAclType is aclTypeName only. When do SET action, the hwPFltEudmPolicyOutAclNum and hwPFltEudmPolicyOutAclName can only specify one. ')
hwPFltEudmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 2))
hwPFltEudmCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 2, 1))
hwPFltEudmMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 2, 2))
hwPFltEudmDefaultActionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 2, 2, 1)).setObjects(("HUAWEI-PFLT-EUDM-MIB", "hwPFltEudmDeaultActInbound"), ("HUAWEI-PFLT-EUDM-MIB", "hwPFltEudmDeaultActOutbound"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPFltEudmDefaultActionGroup = hwPFltEudmDefaultActionGroup.setStatus('current')
if mibBuilder.loadTexts: hwPFltEudmDefaultActionGroup.setDescription('Description.')
hwPFltEudmPolicyApplyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 12, 2, 2, 2, 2)).setObjects(("HUAWEI-PFLT-EUDM-MIB", "hwPFltEudmPolicyInAclType"), ("HUAWEI-PFLT-EUDM-MIB", "hwPFltEudmPolicyInAclNum"), ("HUAWEI-PFLT-EUDM-MIB", "hwPFltEudmPolicyInAclName"), ("HUAWEI-PFLT-EUDM-MIB", "hwPFltEudmPolicyOutAclType"), ("HUAWEI-PFLT-EUDM-MIB", "hwPFltEudmPolicyOutAclNum"), ("HUAWEI-PFLT-EUDM-MIB", "hwPFltEudmPolicyOutAclName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPFltEudmPolicyApplyGroup = hwPFltEudmPolicyApplyGroup.setStatus('current')
if mibBuilder.loadTexts: hwPFltEudmPolicyApplyGroup.setDescription('Description.')
mibBuilder.exportSymbols("HUAWEI-PFLT-EUDM-MIB", AclType=AclType, hwPFltEudmPolicyZoneID2=hwPFltEudmPolicyZoneID2, hwPFltEudmPolicyInAclName=hwPFltEudmPolicyInAclName, hwPFltEudmDefaultActionEntry=hwPFltEudmDefaultActionEntry, hwPFLT=hwPFLT, hwPFltEudmPolicyOutAclName=hwPFltEudmPolicyOutAclName, hwPFltEudmConformance=hwPFltEudmConformance, hwPFltEudmDefaultActZoneID1=hwPFltEudmDefaultActZoneID1, hwPFltEudmMibGroups=hwPFltEudmMibGroups, hwPFltEudmPolicyApplyGroup=hwPFltEudmPolicyApplyGroup, hwPFltEudmPolicyZoneID1=hwPFltEudmPolicyZoneID1, hwPFltEudmDeaultActInbound=hwPFltEudmDeaultActInbound, hwPFltEudmCompliance=hwPFltEudmCompliance, hwPFltEudmDefaultActZoneID2=hwPFltEudmDefaultActZoneID2, hwPFltEudmDefaultActionGroup=hwPFltEudmDefaultActionGroup, hwPFLTEudm=hwPFLTEudm, hwPFltEudmPolicyApplyEntry=hwPFltEudmPolicyApplyEntry, hwPFltEudmDefaultActionTable=hwPFltEudmDefaultActionTable, hwPFltEudmPolicyOutAclType=hwPFltEudmPolicyOutAclType, hwPFltEudmPolicyOutAclNum=hwPFltEudmPolicyOutAclNum, hwPFltEudmDeaultActOutbound=hwPFltEudmDeaultActOutbound, PYSNMP_MODULE_ID=hwPFLTEudm, AclAction=AclAction, hwPFltEudmPolicyApplyTable=hwPFltEudmPolicyApplyTable, hwPFltEudmPolicyInAclNum=hwPFltEudmPolicyInAclNum, hwPFltEudmPolicyInAclType=hwPFltEudmPolicyInAclType, hwPFltEudmCfgMibObjects=hwPFltEudmCfgMibObjects)
