#
# PySNMP MIB module Wellfleet-PIM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-PIM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, ObjectIdentity, Gauge32, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, Counter64, NotificationType, Unsigned32, IpAddress, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "Gauge32", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "Counter64", "NotificationType", "Unsigned32", "IpAddress", "Counter32", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfPimGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfPimGroup")
wfPim = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1))
wfPimDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimDelete.setDescription('This is a global parameter that creates/deletes PIM in the box. Default is created. Users perform a set operation on this object in order to create/delete Pim.')
wfPimDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimDisable.setDescription('This is a global parameter that enables/disables PIM in the box. Default is enabled. Users perform a set operation on this object in order to enable/disable Pim.')
wfPimState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpres", 4))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimState.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimState.setDescription('The current state of the entire PIM. This state is up when PIM process is up and PIM global is created and enabled. This state is down when the PIM process is down or when PIM global is disabled. This state is init when PIM is coming up and started to do initialization.')
wfPimInfoWarning = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimInfoWarning.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimInfoWarning.setDescription('Turn PIM log ON or OFF for PIM Info/Warning messages. The bit position is used to represent a PIM module: PIM_LOG_BOOTSTRAP_PROC 0x00000001 Bootstrap procedure PIM_LOG_HELLO_PROC 0x00000002 Hello procedure PIM_LOG_JOIN_PRUNE_PROC 0x00000004 join/prune send procedure PIM_LOG_REGISTER_PROC 0x00000008 Registration procedure PIM_LOG_MAINTAIN_PTE 0x00000010 Maintaining PIM rout table PIM_LOG_ASSERT_PROC 0x00000020 Assert procedure PIM_LOG_FORWARD_PROC 0x00000040 data forwarding/tree switching PIM_LOG_MAIN_PROC 0x00000080 PIM Main gate processing PIM_LOG_CCT_PROC 0x00000100 PIM Cct gate general processing PIM_LOG_ROUTE_CHG_PROC 0x00000200 PIM Route Change processing PIM_LOG_STARG_PTE 0x00000400 PIM (*,G) processing PIM_LOG_TIMERS_PTE_OIF 0x00000800 PIM pte/oif timers PIM_LOG_PIM_MTM_MSG 0x00001000 PIM-MTM signals/messages PIM_LOG_PIM_PIM_MSG 0x00002000 PIM-PIM messages PIM_LOG_PIM_PROTO_MSG 0x00004000 PIM protocol messages/first data PIM_LOG_RECV_JOIN_PRUNE 0x00008000 join/prune received PIM_LOG_UTILITIES 0x00010000 PIM utilities including timers ')
wfPimDebug = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimDebug.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimDebug.setDescription('Turn PIM log ON or OFF for PIM debugging messages. The bit position is used to represent a PIM module: PIM_LOG_BOOTSTRAP_PROC 0x00000001 Bootstrap procedure PIM_LOG_HELLO_PROC 0x00000002 Hello procedure PIM_LOG_JOIN_PRUNE_PROC 0x00000004 join/prune send procedure PIM_LOG_REGISTER_PROC 0x00000008 Registration procedure PIM_LOG_MAINTAIN_PTE 0x00000010 Maintaining PIM rout table PIM_LOG_ASSERT_PROC 0x00000020 Assert procedure PIM_LOG_FORWARD_PROC 0x00000040 data forwarding/tree switching PIM_LOG_MAIN_PROC 0x00000080 PIM Main gate processing PIM_LOG_CCT_PROC 0x00000100 PIM Cct gate general processing PIM_LOG_ROUTE_CHG_PROC 0x00000200 PIM Route Change processing PIM_LOG_STARG_PTE 0x00000400 PIM (*,G) processing PIM_LOG_TIMERS_PTE_OIF 0x00000800 PIM pte/oif timers PIM_LOG_PIM_MTM_MSG 0x00001000 PIM-MTM signals/messages PIM_LOG_PIM_PIM_MSG 0x00002000 PIM-PIM messages PIM_LOG_PIM_PROTO_MSG 0x00004000 PIM protocol messages/first data PIM_LOG_RECV_JOIN_PRUNE 0x00008000 join/prune received PIM_LOG_UTILITIES 0x00010000 PIM utilities including timers PIM_LOG_TI_COMMANDS 0x00020000 PIM debug option for TI ip pim_fwd ')
wfPimTrace = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimTrace.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimTrace.setDescription('Turn PIM log ON or OFF for PIM trace messages. The bit position is used to represent a PIM module: PIM_LOG_BOOTSTRAP_PROC 0x00000001 Bootstrap procedure PIM_LOG_HELLO_PROC 0x00000002 Hello procedure PIM_LOG_JOIN_PRUNE_PROC 0x00000004 join/prune send procedure PIM_LOG_REGISTER_PROC 0x00000008 Registration procedure PIM_LOG_MAINTAIN_PTE 0x00000010 Maintaining PIM rout table PIM_LOG_ASSERT_PROC 0x00000020 Assert procedure PIM_LOG_FORWARD_PROC 0x00000040 data forwarding/tree switching PIM_LOG_MAIN_PROC 0x00000080 PIM Main gate processing PIM_LOG_CCT_PROC 0x00000100 PIM Cct gate general processing PIM_LOG_ROUTE_CHG_PROC 0x00000200 PIM Route Change processing PIM_LOG_STARG_PTE 0x00000400 PIM (*,G) processing PIM_LOG_TIMERS_PTE_OIF 0x00000800 PIM pte/oif timers PIM_LOG_PIM_MTM_MSG 0x00001000 PIM-MTM signals/messages PIM_LOG_PIM_PIM_MSG 0x00002000 PIM-PIM messages PIM_LOG_PIM_PROTO_MSG 0x00004000 PIM protocol messages/first data PIM_LOG_RECV_JOIN_PRUNE 0x00008000 join/prune received PIM_LOG_UTILITIES 0x00010000 PIM utilities including timers ')
wfPimTotalCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimTotalCacheEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimTotalCacheEntries.setDescription('The total number of cache entries in the box. These are the (S,G), (*,G) and/or (*,*,RP) entries')
wfPimJoinPruneInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 18724)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimJoinPruneInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimJoinPruneInterval.setDescription('The default interval at which periodic PIM-SM Join/Prune messages are to be sent')
wfPimLastHopDataThresholdDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimLastHopDataThresholdDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimLastHopDataThresholdDisable.setDescription('Enable/Disable Last Hop router to switch to SPT. Default is enabled. If enabled, the data rate is monitored at the last hop router connected to the receiver. If the rate exceeds wfPimLastHopDataThreshold, the router will setup a shortest path tree to the source of that data. If disabled, the router will never switch to the shortest path tree regardless of the data rate.')
wfPimLastHopDataThreshold = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(2048)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimLastHopDataThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimLastHopDataThreshold.setDescription('The data rate from the source in bytes per second at which the last hop router creates (S,G) state and switches to the shortest path tree. This switch will happen immediately when the first packet is received if this threshold is between 0 and 64 inclusive.')
wfPimRPDataThresholdDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimRPDataThresholdDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimRPDataThresholdDisable.setDescription('Enable/Disable RP router to switch to SPT. Default is enabled. If enabled, the data rate is monitored at the RP responsible for the group of the data. If the rate exceeds wfPimRPDataThreshold, the router will setup a shortest path tree to the source of that data. If disabled, the router will never switch to the shortest path tree regardless of the data rate.')
wfPimRPDataThreshold = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimRPDataThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimRPDataThreshold.setDescription('The data rate from the source in bytes per second at which the RP router creates (S,G) state and switches to the shortest path tree. This switch will happen immediately when the first packet is received if this threshold is between 0 and 64 inclusive.')
wfPimThresholdSampleInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 300)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimThresholdSampleInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimThresholdSampleInterval.setDescription('This is the sample interval in seconds during which the rate of the current data flow is calculated. This sampling time is in multiples of 16. If this value entered is not multiples of 16, it will be rounded to the lower value of a 16 multiple. This is used to reduce the load of calculation during data forwarding.')
wfPimPMBREnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimPMBREnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimPMBREnable.setDescription('Enable/Disable the router to be a PIM Border Router. Default is disabled.')
wfPimHelloOptionGenIdDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimHelloOptionGenIdDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimHelloOptionGenIdDisable.setDescription("Enable/Disable the Bay Networks Hello Neighbor Option in Hello packets to include a generation identifier. Default is enabled. By enabling this neighbor option, Bay Networks PIM router can quickly learn whether its neighbor was just rebooted and came back up within the Hello Holdtime. This can be detected if the neighbor's GenId received is different from the previous one. The rebooted neighbor will be updated with the most recent RP-Set information immediately and thus the network can converge even faster in terms of Bootstrap, RP-Set consistence and Join/Prune. When interoperating with other vendors' PIM routers, this option should be disabled.")
wfPimBSRAddress = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimBSRAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimBSRAddress.setDescription('The elected Bootstrap Router IP address for PIM domain.')
wfPimBSRPriority = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 17), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimBSRPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimBSRPriority.setDescription('Priority for BSR - this is the priority of the elected BSR as the result of BSR election procedure. It may change over time when the BSR address is switched to another router.')
wfPimBSRHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimBSRHoldTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimBSRHoldTime.setDescription('The period at which BSR is declared down. This period is set to (2 * wfPimCBSRInterval) + 10')
wfPimBSRHashMaskLen = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 19), Integer32().clone(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimBSRHashMaskLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimBSRHashMaskLen.setDescription('Hash mask length -- that is the length of the hash-mask for the elected BSR as the result of BSR election procedure. It may change over time when the BSR address is switched to another router.')
wfPimCBSREnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimCBSREnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimCBSREnable.setDescription('Enable/Disable router to be a Candidate BSR. Default is disabled.')
wfPimCBSRAddress = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimCBSRAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimCBSRAddress.setDescription('The Candidate Bootstrap Router IP address for PIM domain.')
wfPimCBSRPriority = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimCBSRPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimCBSRPriority.setDescription('Priority for Candidate BSR - used in election mechanism with IP ADDRESS of BSR ')
wfPimCBSRInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 32757)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimCBSRInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimCBSRInterval.setDescription('If this is the elected BSR, then this is the interval at which periodic Bootstrap (RP-Set) messages are transmitted (multicast out) on all PIM interfaces. This parameter is also used to determine wfPimBSRHoldTime, the period at which BSR is declared down. It is important all routers in a PIM domain should have this parameter set to the same value.')
wfPimCBSRHashMaskLen = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 32)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimCBSRHashMaskLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimCBSRHashMaskLen.setDescription('The length of the hash-mask that is used to map a group to one of the C-RPs from RP-Set message')
wfPimCRPEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimCRPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimCRPEnable.setDescription('Enable/Disable router to be a Candidate RP. Default is disabled.')
wfPimCRPAddress = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimCRPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimCRPAddress.setDescription('The Candidate RP IP address used to map the configured wfPimCRPGrPrefix.')
wfPimCRPPriority = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimCRPPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimCRPPriority.setDescription('Priority for Candidate RP - used in hash mechanism to determine RP for the Group ')
wfPimCRPGrPrefix = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimCRPGrPrefix.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimCRPGrPrefix.setDescription('The string of mask-len/group address for C-RP-Advs messages. If configured the router is considered to be a C-RP for the configured groups. Ex. for 238.1.1.1/255.255.255.255 this parameter should be set to 0x20ee010101')
wfPimCRPAdvInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 26214)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimCRPAdvInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimCRPAdvInterval.setDescription('The interval at which periodic PIM-SM CRP Advertize messages are transmitted (unicast to the elected BSR) from a Candidate RP router.')
wfPimCRPHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimCRPHoldTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimCRPHoldTime.setDescription("This is to tell the BSR how soon the RP entry should be removed from the BSR's RP set table. This is set to 2.5 * wfPimCRPAdvInterval")
wfPimRPRcvRegisterCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535)).clone(210)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimRPRcvRegisterCacheTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimRPRcvRegisterCacheTimeout.setDescription('The timeout value for all entries whose inbound interface are created from receiving PIM Register packets in the RP router. If PIM Register packet has not been received for this period of time, the relevant forwarding cache entry associated with this interface is deleted.')
wfPimRPRegisterDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimRPRegisterDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimRPRegisterDisable.setDescription('Enable/Disable parameter. Default is enabled. This is used to activate a RP Register process to efficiently handle forwarding of encapsulated PIM Register packets. One process is created for sending to each RP. If this is disabled, the default PIM_REGISTER process will be used. With PIM_REGISTER forwarding, each time we have to do 2 lookups; one for searching the RP table for destination group, the other for RP route lookup')
wfPimRegisterSuppressTimeout = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimRegisterSuppressTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimRegisterSuppressTimeout.setDescription('The period used to suppress sending of PIM Register packets from the source DR when the RP is receiving data packets natively or the RP has no downstream receivers. This timer is triggered on the source DR by Register Stop from RP.')
wfPimProbeTime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimProbeTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimProbeTime.setDescription('The time between sending a null Register and the Register-Suppression-Timer expiring unless it is restarted by receiving a Register-Stop. A zero will disable the sending of Probe (NULL Registered Packet). If non-zero, this value has to be less than wfPimRegisterSuppressTimeout')
wfPimCiscoCompatibilityEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimCiscoCompatibilityEnable.setStatus('obsolete')
if mibBuilder.loadTexts: wfPimCiscoCompatibilityEnable.setDescription("Enable/Disable router to be compatible with Cisco PIM routers. This is to cope with those portions of Cisco's implementation that do not comply with the PIM standard. By enabling this parameter, we work around the incompatability areas. By default we disable this paramter so that we comply with the standard PIM specification.")
wfPimRfcComplianceDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimRfcComplianceDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimRfcComplianceDisable.setDescription('Allows router to be compatible with those portions of implementation by other vendors which do not comply with the standards specified in RFC 2362 for PIM. Turn RFC2362 non-compliance on or off for different issues of compatibility : PIM_BSR_ZERO_FRAGMENT_TAG 0x00000001 Allows fragment tag in Bootstrap messages to be zero PIM_RP_ZERO_PREFIX_COUNT 0x00000002 Sends non-zero prefix count in RP_Adv messages PIM_REGISTER_CHECKSUM 0x00000004 Computes register packet checksum on header and data ')
wfPimIfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2), )
if mibBuilder.loadTexts: wfPimIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfTable.setDescription("The (conceptual) table listing the router's PIM interfaces. IGMP and PIM are enabled on all interfaces listed in this table.")
wfPimIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1), ).setIndexNames((0, "Wellfleet-PIM-MIB", "wfPimIfCct"))
if mibBuilder.loadTexts: wfPimIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfEntry.setDescription('An PIM interface description')
wfPimIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimIfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfDelete.setDescription('Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete a PIM interface.')
wfPimIfDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimIfDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform a set operation on this object in order to enable/disable a PIM interface.')
wfPimIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpres", 4))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfState.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfState.setDescription('The current state of the PIM interface. This state is up when the underlying IGMP is up and PIM global is created and enabled. This state is down when the underlying IGMP is down or when PIM global is disabled. This state is init when PIM is coming up and started to do initialization.')
wfPimIfCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfCct.setDescription('The Circuit Number that this interface runs over')
wfPimIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfIpAddress.setDescription("The IP Address to which this entry's addressing information pertains")
wfPimIfIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfIpMask.setDescription('The network mask for the IP address of the PIM interface.')
wfPimIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimIfHelloInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfHelloInterval.setDescription('The frequency at which PIM Hello messages are transmitted on this PIM interface. Recommends a higher number for slower speed serial lines.')
wfPimIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dense", 1), ("sparse", 2))).clone('sparse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimIfMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfMode.setDescription('Configure this interface for Sparse Mode or Dense Mode')
wfPimIfCacheTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 2147483647)).clone(210)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimIfCacheTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfCacheTimeOut.setDescription('How long an entry should remain in the PIM cache before being timed out and deleted')
wfPimIfDefaultGlobalJoinPruneIntervalDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimIfDefaultGlobalJoinPruneIntervalDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfDefaultGlobalJoinPruneIntervalDisable.setDescription('If enabled, the Join/Prune interval used on this interface will be the one defined in pim global wfPimJoinPruneInterval. If disabled, the interface mib wfPimIfJoinPruneInterval will be in effect.')
wfPimIfJoinPruneInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 18724)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimIfJoinPruneInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfJoinPruneInterval.setDescription('The interval at which periodic PIM-SM Join/Prune messages are transmitted on this PIM interface. This will only be in effect if wfPimIfDefaultGlobalJoinPruneIntervalDisable is enabled.')
wfPimIfDownstreamIgmpRelayEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimIfDownstreamIgmpRelayEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfDownstreamIgmpRelayEnable.setDescription('Enable/disable support for IGMP Relay as downstream router. By default, we disable this support. By enabling this support, PIM router is allowed to receive multicast data from IGMP Relay downstream, encapsulate it within Register, and send it to RP. If this mib is enabled for an interface, all other PIM routers on the same physical link as this interface should have this mib enabled for the same interface.')
wfPimIfLocalDRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimIfLocalDRPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfLocalDRPriority.setDescription('The DR Election Priority option is used when people want to have control over which router is elected as the DR, irrespective of the address of routers on the same LAN. This is needed on LANs where new routers can be added and configured by different operators. The numerically larger priority is always preferred. The DR election priority is used only when all routers on the LAN include this option in their Hellos. A value of zero will disable this feature on the LAN.')
wfPimIfDR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfDR.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfDR.setDescription('The Designated Router on this PIM interface. For point- to-point interfaces, this object has the value 0.0.0.0.')
wfPimIfDRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 15), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfDRPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfDRPriority.setDescription('The elected Designated Router priority on the LAN which connects to this PIM interface. If this is zero, it indicates the DR is elected using the highest ip address. Otherwise priority mechanism is used.')
wfPimIfInHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfInHellos.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfInHellos.setDescription('Number of Pim Hello packets recieved')
wfPimIfOutHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfOutHellos.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfOutHellos.setDescription('Number of Pim Hello packets sent')
wfPimIfInPrunes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfInPrunes.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfInPrunes.setDescription('The number of prunes this circuit has recieved')
wfPimIfOutPrunes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfOutPrunes.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfOutPrunes.setDescription('The number of prunes this circuit has sent')
wfPimIfInGrafts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfInGrafts.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfInGrafts.setDescription('The number of grafts this circuit has recieved')
wfPimIfOutGrafts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfOutGrafts.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfOutGrafts.setDescription('The number of grafts this circuit has sent')
wfPimIfInCRPAdvs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfInCRPAdvs.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfInCRPAdvs.setDescription('Number of C-RP-Adv packets received on this interface. ')
wfPimIfOutCRPAdvs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfOutCRPAdvs.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfOutCRPAdvs.setDescription('Number of C-RP-Adv packets transmitted out of this interface')
wfPimIfInRPSets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfInRPSets.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfInRPSets.setDescription('Number of RP-Set packets received on this interface. ')
wfPimIfOutRPSets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfOutRPSets.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfOutRPSets.setDescription('Number of RP-Set packets send out of this interface. ')
wfPimIfInRegisters = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfInRegisters.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfInRegisters.setDescription('Number of Register messages received on this interface. ')
wfPimIfOutRegisters = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfOutRegisters.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfOutRegisters.setDescription('Number of Register messages sent from this interface. ')
wfPimIfInRegStop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfInRegStop.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfInRegStop.setDescription('Number of Register Stop packets received on this interface. ')
wfPimIfOutRegStop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfOutRegStop.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfOutRegStop.setDescription('Number of Register Stop packets sent from this interface. ')
wfPimIfInJoinPrunes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfInJoinPrunes.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfInJoinPrunes.setDescription('The number of Join/Prunes this circuit has recieved')
wfPimIfOutJoinPrunes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimIfOutJoinPrunes.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfOutJoinPrunes.setDescription('The number of Join/Prunes this circuit has sent')
wfPimIfBootstrapBorder = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimIfBootstrapBorder.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimIfBootstrapBorder.setDescription('Define whether this PIM interface is a PIM Bootstrap Border interface or not. When set to enable, it is a border interface and both incoming (from other PIM router) and outgoing (from other PIM interface in the same router) Bootstrap messages are discarded. When set to disable, this interface follows RFC2362, i.e., accept the incoming message and forward the outgoing message.')
wfPimNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 3), )
if mibBuilder.loadTexts: wfPimNeighborTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimNeighborTable.setDescription("The (conceptual) table listing the router's PIM neighbors.")
wfPimNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 3, 1), ).setIndexNames((0, "Wellfleet-PIM-MIB", "wfPimNeighborAddress"))
if mibBuilder.loadTexts: wfPimNeighborEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimNeighborEntry.setDescription('An entry in the Pim Neighbor table')
wfPimNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimNeighborAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimNeighborAddress.setDescription('The IP address of the PIM neighbor for which this entry contains information.')
wfPimNeighborCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimNeighborCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimNeighborCct.setDescription('The value of Cct for the interface used to reach this PIM neighbor.')
wfPimNeighborUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimNeighborUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimNeighborUpTime.setDescription('The time since this PIM neighbor (last) became a neighbor of the local router.')
wfPimNeighborExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimNeighborExpiryTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimNeighborExpiryTime.setDescription('The minimum time remaining before this PIM neighbor will be aged out.')
wfPimNeighboringRouterGenId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimNeighboringRouterGenId.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimNeighboringRouterGenId.setDescription("The neighboring router's generation identifier. If this id is different from before, then this neighbor was just rebooted.")
wfPimNeighboringRouterDRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 14, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPimNeighboringRouterDRPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimNeighboringRouterDRPriority.setDescription("The neighboring router's local DR Priority. The neighbor with the highest priority will be elected as the DR on the LAN. This is only true if all neighbors on this LAN participate in DR Priority election. Otherwise, the highest ip address on the LAN will be elected as the DR.")
mibBuilder.exportSymbols("Wellfleet-PIM-MIB", wfPimIfMode=wfPimIfMode, wfPimLastHopDataThresholdDisable=wfPimLastHopDataThresholdDisable, wfPimIfInJoinPrunes=wfPimIfInJoinPrunes, wfPimLastHopDataThreshold=wfPimLastHopDataThreshold, wfPimIfDR=wfPimIfDR, wfPimCRPHoldTime=wfPimCRPHoldTime, wfPimNeighborTable=wfPimNeighborTable, wfPimCBSRAddress=wfPimCBSRAddress, wfPimIfInHellos=wfPimIfInHellos, wfPimIfBootstrapBorder=wfPimIfBootstrapBorder, wfPimIfOutJoinPrunes=wfPimIfOutJoinPrunes, wfPimDisable=wfPimDisable, wfPimProbeTime=wfPimProbeTime, wfPimDelete=wfPimDelete, wfPimCRPGrPrefix=wfPimCRPGrPrefix, wfPimDebug=wfPimDebug, wfPimCRPAddress=wfPimCRPAddress, wfPim=wfPim, wfPimInfoWarning=wfPimInfoWarning, wfPimRegisterSuppressTimeout=wfPimRegisterSuppressTimeout, wfPimBSRHoldTime=wfPimBSRHoldTime, wfPimIfOutRegStop=wfPimIfOutRegStop, wfPimCBSRPriority=wfPimCBSRPriority, wfPimJoinPruneInterval=wfPimJoinPruneInterval, wfPimIfInRPSets=wfPimIfInRPSets, wfPimNeighborExpiryTime=wfPimNeighborExpiryTime, wfPimIfDRPriority=wfPimIfDRPriority, wfPimNeighboringRouterGenId=wfPimNeighboringRouterGenId, wfPimIfHelloInterval=wfPimIfHelloInterval, wfPimPMBREnable=wfPimPMBREnable, wfPimNeighborUpTime=wfPimNeighborUpTime, wfPimRPRegisterDisable=wfPimRPRegisterDisable, wfPimNeighboringRouterDRPriority=wfPimNeighboringRouterDRPriority, wfPimIfDefaultGlobalJoinPruneIntervalDisable=wfPimIfDefaultGlobalJoinPruneIntervalDisable, wfPimIfInGrafts=wfPimIfInGrafts, wfPimIfOutPrunes=wfPimIfOutPrunes, wfPimCRPAdvInterval=wfPimCRPAdvInterval, wfPimIfOutHellos=wfPimIfOutHellos, wfPimThresholdSampleInterval=wfPimThresholdSampleInterval, wfPimIfJoinPruneInterval=wfPimIfJoinPruneInterval, wfPimIfOutRPSets=wfPimIfOutRPSets, wfPimIfCct=wfPimIfCct, wfPimIfIpMask=wfPimIfIpMask, wfPimIfInPrunes=wfPimIfInPrunes, wfPimRPRcvRegisterCacheTimeout=wfPimRPRcvRegisterCacheTimeout, wfPimIfDisable=wfPimIfDisable, wfPimTrace=wfPimTrace, wfPimIfState=wfPimIfState, wfPimIfDelete=wfPimIfDelete, wfPimRPDataThreshold=wfPimRPDataThreshold, wfPimIfTable=wfPimIfTable, wfPimIfOutCRPAdvs=wfPimIfOutCRPAdvs, wfPimNeighborAddress=wfPimNeighborAddress, wfPimIfInCRPAdvs=wfPimIfInCRPAdvs, wfPimTotalCacheEntries=wfPimTotalCacheEntries, wfPimIfIpAddress=wfPimIfIpAddress, wfPimCRPPriority=wfPimCRPPriority, wfPimIfLocalDRPriority=wfPimIfLocalDRPriority, wfPimCBSRInterval=wfPimCBSRInterval, wfPimIfOutRegisters=wfPimIfOutRegisters, wfPimNeighborEntry=wfPimNeighborEntry, wfPimRPDataThresholdDisable=wfPimRPDataThresholdDisable, wfPimBSRPriority=wfPimBSRPriority, wfPimCBSREnable=wfPimCBSREnable, wfPimBSRAddress=wfPimBSRAddress, wfPimIfCacheTimeOut=wfPimIfCacheTimeOut, wfPimCBSRHashMaskLen=wfPimCBSRHashMaskLen, wfPimState=wfPimState, wfPimBSRHashMaskLen=wfPimBSRHashMaskLen, wfPimIfDownstreamIgmpRelayEnable=wfPimIfDownstreamIgmpRelayEnable, wfPimIfOutGrafts=wfPimIfOutGrafts, wfPimHelloOptionGenIdDisable=wfPimHelloOptionGenIdDisable, wfPimRfcComplianceDisable=wfPimRfcComplianceDisable, wfPimCiscoCompatibilityEnable=wfPimCiscoCompatibilityEnable, wfPimIfInRegisters=wfPimIfInRegisters, wfPimNeighborCct=wfPimNeighborCct, wfPimCRPEnable=wfPimCRPEnable, wfPimIfEntry=wfPimIfEntry, wfPimIfInRegStop=wfPimIfInRegStop)
