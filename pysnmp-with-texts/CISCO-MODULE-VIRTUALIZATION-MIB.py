#
# PySNMP MIB module CISCO-MODULE-VIRTUALIZATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MODULE-VIRTUALIZATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:07:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
CiscoResourceClass, = mibBuilder.importSymbols("CISCO-L4L7MODULE-RESOURCE-LIMIT-MIB", "CiscoResourceClass")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoURLString, = mibBuilder.importSymbols("CISCO-TC", "CiscoURLString")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, Unsigned32, Gauge32, Counter64, TimeTicks, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, IpAddress, NotificationType, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "Gauge32", "Counter64", "TimeTicks", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "IpAddress", "NotificationType", "iso", "ObjectIdentity")
TextualConvention, DisplayString, RowStatus, StorageType, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "StorageType", "TruthValue")
ciscoModuleVirtualizationMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 472))
ciscoModuleVirtualizationMIB.setRevisions(('2006-05-29 00:00', '2005-12-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoModuleVirtualizationMIB.setRevisionsDescriptions(('Corrected the contact E-mail id: cs-l4l7security@cisco.com', 'Initial version of the MIB module.',))
if mibBuilder.loadTexts: ciscoModuleVirtualizationMIB.setLastUpdated('200605290000Z')
if mibBuilder.loadTexts: ciscoModuleVirtualizationMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoModuleVirtualizationMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-l4l7security@cisco.com')
if mibBuilder.loadTexts: ciscoModuleVirtualizationMIB.setDescription('This MIB provides a way to create virtual contexts, and managing them. A virtual context is logical partition of a physical device. The Virtual context provide different type of services and can be managed independently. Each virtual context is an independent entity, with its own configuration and supports almost all the options that can be configured on stand-alone hardware. Each context can have a separate management IP address that the user can Telnet/SSH into and send other requests(SNMP, FTP etc). This MIB contains tables for creating/deleting virtual contexts and assigning interfaces and/or interface ranges to virtual contexts.')
cmVirtualizationNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 472, 0))
cmVirtualizationMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 472, 1))
cmVirtualizationMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 472, 2))
cmVirtualContext = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 472, 1, 1))
cmVirtualContextNotifControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 472, 1, 2))
cmVirtualContextNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 472, 1, 3))
cmVirtualContextTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 472, 1, 1, 1), )
if mibBuilder.loadTexts: cmVirtualContextTable.setStatus('current')
if mibBuilder.loadTexts: cmVirtualContextTable.setDescription('This is the virtual context table. A virtual context can be created for a module. This table is used for creating/deleting virtual contexts. The entries can be created/deleted by SNMP and/or by console commands.')
cmVirtualContextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 472, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-MODULE-VIRTUALIZATION-MIB", "cmVirtContextName"))
if mibBuilder.loadTexts: cmVirtualContextEntry.setStatus('current')
if mibBuilder.loadTexts: cmVirtualContextEntry.setDescription("An entry in virtual context table. Each entry provides information about a particular virtual context. To create a virtual context, following procedure is used: - choose the appropriate value for entPhysicalIndex to point to an entry(with entPhysicaClass = 'module') in entPhysicalTable. - specify the name of the virtual context. - create an entry in the table by specifying ciscoVirtualContextRowStatus value of 'createAndGo' or 'createAndWait'. One or more virtual contexts can be created in a module. Each of these contexts are identified by a unique name. Resources can be assigned/mapped to each virtual context. Configurations and Monitoring can be done each virtual context independent of each other. Configuration changes in one virtual context will not affect other.")
cmVirtContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 472, 1, 1, 1, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: cmVirtContextName.setStatus('current')
if mibBuilder.loadTexts: cmVirtContextName.setDescription('This object uniquely identifies a virtual context.')
cmVirtContextDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 472, 1, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmVirtContextDescr.setStatus('current')
if mibBuilder.loadTexts: cmVirtContextDescr.setDescription('This object is used for configuring the description of virtual context.')
cmVirtContextURL = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 472, 1, 1, 1, 1, 3), CiscoURLString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmVirtContextURL.setStatus('current')
if mibBuilder.loadTexts: cmVirtContextURL.setDescription('This object is used for configuring the URL from which virtual context configuration will be downloaded. The configuration contains information on anything that is configured in a virtual context. Some examples of possible values for this object are: disk://[path/]filename ftp://[user[:password]@]server/[path/]filename tftp://server/[path/]filename http://server/[path/]filename https://server/[path/]filename. NOTE: Above list is just an example. It does not specify/limit only these values to be supported.')
cmVirtContextResourceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 472, 1, 1, 1, 1, 4), CiscoResourceClass()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmVirtContextResourceClass.setReference('cmResourceClassTable in CISCO-RESOURCE-LIMIT-MIB.')
if mibBuilder.loadTexts: cmVirtContextResourceClass.setStatus('current')
if mibBuilder.loadTexts: cmVirtContextResourceClass.setDescription('This object is used for assigning a resource class to a context. The resource class contains information on the resources that are managed/applicable to a context. The type of resources that may be applicable are governed by the CiscoResourceClass TEXTUAL CONVENTION. This object value must correspond to an entry in cmResourceClassTable.')
cmVirtContextStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 472, 1, 1, 1, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmVirtContextStorageType.setStatus('current')
if mibBuilder.loadTexts: cmVirtContextStorageType.setDescription("The storage type for this conceptual row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
cmVirtContextRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 472, 1, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmVirtContextRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmVirtContextRowStatus.setDescription('This object is used for creating/deleting entries in this table.')
cmVirtContextIfMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 472, 1, 1, 2), )
if mibBuilder.loadTexts: cmVirtContextIfMapTable.setStatus('current')
if mibBuilder.loadTexts: cmVirtContextIfMapTable.setDescription('This table is used for assigning interfaces to a virtual context. This table will configure the set of interfaces that can be used by a virtual context.')
cmVirtContextIfMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 472, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-MODULE-VIRTUALIZATION-MIB", "cmVirtContextName"), (0, "CISCO-MODULE-VIRTUALIZATION-MIB", "cmVirtContextIfMapType"), (0, "CISCO-MODULE-VIRTUALIZATION-MIB", "cmVirtContextIfMapIdLow"))
if mibBuilder.loadTexts: cmVirtContextIfMapEntry.setStatus('current')
if mibBuilder.loadTexts: cmVirtContextIfMapEntry.setDescription('An entry in Interface Map table. Each entry represents the interface or interface range that are assigned to a virtual context.')
cmVirtContextIfMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 472, 1, 1, 2, 1, 1), IANAifType())
if mibBuilder.loadTexts: cmVirtContextIfMapType.setStatus('current')
if mibBuilder.loadTexts: cmVirtContextIfMapType.setDescription('This object specifies the interface type for which cmVirtContextIfMapIdHigh and cmVirtContextIfMapIdLow are applicable.')
cmVirtContextIfMapIdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 472, 1, 1, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cmVirtContextIfMapIdLow.setStatus('current')
if mibBuilder.loadTexts: cmVirtContextIfMapIdLow.setDescription('This object specifies the interface that can be assigned to a context. This object either represents an interface or lower value of the interface range.')
cmVirtContextIfMapIdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 472, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmVirtContextIfMapIdHigh.setStatus('current')
if mibBuilder.loadTexts: cmVirtContextIfMapIdHigh.setDescription('This object specifies the interface that will be assigned to a virtual context. The non-zero value specifies the upper value of the interface range. This value must be greater than the value in cmVirtContextIfMapIdLow. The value zero specifies that value specified in cmVirtContextIfMapIdLow is assigned.')
cmVirtContextIfMapStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 472, 1, 1, 2, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmVirtContextIfMapStorageType.setStatus('current')
if mibBuilder.loadTexts: cmVirtContextIfMapStorageType.setDescription("The storage type for this conceptual row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
cmVirtContextIfMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 472, 1, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmVirtContextIfMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmVirtContextIfMapRowStatus.setDescription('This object is used for creating/deleting entries in this table.')
cmVirtContextNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 472, 1, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmVirtContextNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cmVirtContextNotifEnable.setDescription('This object is used for enabling/disabling notifications related to virtual context.')
cmNotifVirtContextName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 472, 1, 3, 1), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmNotifVirtContextName.setStatus('current')
if mibBuilder.loadTexts: cmNotifVirtContextName.setDescription('This object is used in notifications only. This object contains the virtual context name. (i.e. value of cmVirtContextName).')
cmVirtContextAdded = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 472, 0, 1)).setObjects(("CISCO-MODULE-VIRTUALIZATION-MIB", "cmNotifVirtContextName"))
if mibBuilder.loadTexts: cmVirtContextAdded.setStatus('current')
if mibBuilder.loadTexts: cmVirtContextAdded.setDescription('This notifications will be sent when a virtual context is added.')
cmVirtContextRemoved = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 472, 0, 2)).setObjects(("CISCO-MODULE-VIRTUALIZATION-MIB", "cmNotifVirtContextName"))
if mibBuilder.loadTexts: cmVirtContextRemoved.setStatus('current')
if mibBuilder.loadTexts: cmVirtContextRemoved.setDescription('This notifications will be sent when a virtual context is removed/deleted.')
cmVirtualizationCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 472, 2, 1))
cmVirtualizationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 472, 2, 2))
cmVirtualizationCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 472, 2, 1, 1)).setObjects(("CISCO-MODULE-VIRTUALIZATION-MIB", "cmVirtContextconfigGroup"), ("CISCO-MODULE-VIRTUALIZATION-MIB", "cmVirtContextIfMapGroup"), ("CISCO-MODULE-VIRTUALIZATION-MIB", "cmVirtContextNotifControlGroup"), ("CISCO-MODULE-VIRTUALIZATION-MIB", "cmVirtContextNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmVirtualizationCompliance = cmVirtualizationCompliance.setStatus('current')
if mibBuilder.loadTexts: cmVirtualizationCompliance.setDescription('The compliance statement for SNMP entities which implement virtualization MIB.')
cmVirtContextconfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 472, 2, 2, 1)).setObjects(("CISCO-MODULE-VIRTUALIZATION-MIB", "cmVirtContextDescr"), ("CISCO-MODULE-VIRTUALIZATION-MIB", "cmVirtContextURL"), ("CISCO-MODULE-VIRTUALIZATION-MIB", "cmVirtContextResourceClass"), ("CISCO-MODULE-VIRTUALIZATION-MIB", "cmVirtContextStorageType"), ("CISCO-MODULE-VIRTUALIZATION-MIB", "cmVirtContextRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmVirtContextconfigGroup = cmVirtContextconfigGroup.setStatus('current')
if mibBuilder.loadTexts: cmVirtContextconfigGroup.setDescription('The collection of objects which are used to represent virtual contexts in a virtualized system.')
cmVirtContextIfMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 472, 2, 2, 2)).setObjects(("CISCO-MODULE-VIRTUALIZATION-MIB", "cmVirtContextIfMapIdHigh"), ("CISCO-MODULE-VIRTUALIZATION-MIB", "cmVirtContextIfMapStorageType"), ("CISCO-MODULE-VIRTUALIZATION-MIB", "cmVirtContextIfMapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmVirtContextIfMapGroup = cmVirtContextIfMapGroup.setStatus('current')
if mibBuilder.loadTexts: cmVirtContextIfMapGroup.setDescription('The collection of objects which are used for assigning interfaces to a virtual context.')
cmVirtContextNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 472, 2, 2, 3)).setObjects(("CISCO-MODULE-VIRTUALIZATION-MIB", "cmVirtContextNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmVirtContextNotifControlGroup = cmVirtContextNotifControlGroup.setStatus('current')
if mibBuilder.loadTexts: cmVirtContextNotifControlGroup.setDescription('The collection of object to control notifications that are sent.')
cmVirtContextNotifObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 472, 2, 2, 4)).setObjects(("CISCO-MODULE-VIRTUALIZATION-MIB", "cmNotifVirtContextName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmVirtContextNotifObjectsGroup = cmVirtContextNotifObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: cmVirtContextNotifObjectsGroup.setDescription('The collection of objects sent only in notifications.')
cmVirtContextNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 472, 2, 2, 5)).setObjects(("CISCO-MODULE-VIRTUALIZATION-MIB", "cmVirtContextAdded"), ("CISCO-MODULE-VIRTUALIZATION-MIB", "cmVirtContextRemoved"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmVirtContextNotificationGroup = cmVirtContextNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cmVirtContextNotificationGroup.setDescription('The collection of objects which are used to represent virtual contexts in a virtualized system.')
mibBuilder.exportSymbols("CISCO-MODULE-VIRTUALIZATION-MIB", cmVirtContextRowStatus=cmVirtContextRowStatus, cmVirtContextRemoved=cmVirtContextRemoved, cmVirtContextNotifEnable=cmVirtContextNotifEnable, cmVirtContextNotifControlGroup=cmVirtContextNotifControlGroup, cmVirtContextIfMapGroup=cmVirtContextIfMapGroup, cmVirtContextStorageType=cmVirtContextStorageType, cmVirtualContext=cmVirtualContext, cmVirtContextIfMapType=cmVirtContextIfMapType, cmNotifVirtContextName=cmNotifVirtContextName, cmVirtContextResourceClass=cmVirtContextResourceClass, cmVirtualContextNotifControl=cmVirtualContextNotifControl, cmVirtContextNotifObjectsGroup=cmVirtContextNotifObjectsGroup, cmVirtContextName=cmVirtContextName, cmVirtContextAdded=cmVirtContextAdded, cmVirtContextIfMapIdHigh=cmVirtContextIfMapIdHigh, cmVirtualizationMIBConformance=cmVirtualizationMIBConformance, cmVirtContextURL=cmVirtContextURL, cmVirtContextIfMapIdLow=cmVirtContextIfMapIdLow, cmVirtContextIfMapRowStatus=cmVirtContextIfMapRowStatus, cmVirtContextDescr=cmVirtContextDescr, cmVirtualizationNotifs=cmVirtualizationNotifs, PYSNMP_MODULE_ID=ciscoModuleVirtualizationMIB, cmVirtContextIfMapEntry=cmVirtContextIfMapEntry, cmVirtualContextNotifObjects=cmVirtualContextNotifObjects, cmVirtualContextEntry=cmVirtualContextEntry, cmVirtContextIfMapTable=cmVirtContextIfMapTable, cmVirtualizationCompliance=cmVirtualizationCompliance, cmVirtContextIfMapStorageType=cmVirtContextIfMapStorageType, cmVirtualizationCompliances=cmVirtualizationCompliances, cmVirtualizationMIBObjects=cmVirtualizationMIBObjects, cmVirtContextNotificationGroup=cmVirtContextNotificationGroup, cmVirtualizationGroups=cmVirtualizationGroups, cmVirtualContextTable=cmVirtualContextTable, cmVirtContextconfigGroup=cmVirtContextconfigGroup, ciscoModuleVirtualizationMIB=ciscoModuleVirtualizationMIB)
