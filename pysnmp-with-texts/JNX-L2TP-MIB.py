#
# PySNMP MIB module JNX-L2TP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JNX-L2TP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:58:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
InetAddressType, InetAddress, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetPortNumber")
jnxL2tpMibRoot, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxL2tpMibRoot")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, transmission, ModuleIdentity, Counter64, Gauge32, NotificationType, Counter32, ObjectIdentity, IpAddress, Bits, TimeTicks, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "transmission", "ModuleIdentity", "Counter64", "Gauge32", "NotificationType", "Counter32", "ObjectIdentity", "IpAddress", "Bits", "TimeTicks", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
DisplayString, TextualConvention, StorageType, RowStatus, DateAndTime, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "StorageType", "RowStatus", "DateAndTime", "TruthValue")
jnxL2tp = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1))
jnxL2tp.setRevisions(('2007-01-11 00:00', '2012-06-08 00:00', '2013-09-19 00:00', '2013-11-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxL2tp.setRevisionsDescriptions(('Initial revision.', 'Changes are done to change all Data packet/octet counters from 32 to 64 bit counter. 32 bit counters were too small for data packets/octects and were consumed too early. All old counters are deprecated and new counters are added.', 'Updated the revision history and LAST-UPDATED field.', 'Corrected order of revision history',))
if mibBuilder.loadTexts: jnxL2tp.setLastUpdated('201311210000Z')
if mibBuilder.loadTexts: jnxL2tp.setOrganization('Juniper Networks Inc.')
if mibBuilder.loadTexts: jnxL2tp.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxL2tp.setDescription('Provides monitoring information regarding the Layer Two Transport Protocol. This MIB is based on the standard MIB defined in RFC 3371. However, there are significant differences including the INDEX fields of l2tpTunnelStatsTable and l2tpSessionStatsTable.')
jnxL2tpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1))
jnxL2tpScalar = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1))
jnxL2tpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1))
jnxL2tpStatsTotalTunnels = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsTotalTunnels.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpStatsTotalTunnels.setDescription('This object returns the total number of tunnels that are currently in the established state. This is an instantaneously accumulated value which can increase or decrease depending on number of tunnels established at the time of querying.')
jnxL2tpStatsTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsTotalSessions.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpStatsTotalSessions.setDescription('This object returns the total number of sessions that are currently in the established state. This is an instantaneously accumulated value which can increase or decrease depending on number of tunnels established at the time of querying.')
jnxL2tpStatsControlRxOctets = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsControlRxOctets.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpStatsControlRxOctets.setDescription('This object returns the number of control channel octets received by the existing tunnels. This is an instantaneously accumulated value which can increase or decrease depending on number of tunnels established at the time of querying.')
jnxL2tpStatsControlRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsControlRxPkts.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpStatsControlRxPkts.setDescription('This object returns the number of control packets received by the existing tunnels. This is an instantaneously accumulated value which can increase or decrease depending on number of tunnels established at the time of querying.')
jnxL2tpStatsControlTxOctets = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsControlTxOctets.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpStatsControlTxOctets.setDescription('This object returns the number of control channel octets that were transmitted to the existing tunnel endpoints. This is an instantaneously accumulated value which can increase or decrease depending on number of tunnels established at the time of querying.')
jnxL2tpStatsControlTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsControlTxPkts.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpStatsControlTxPkts.setDescription('This object returns the number of control packets that were transmitted to the existing tunnel endpoints.This is an instantaneously accumulated value which can increase or decrease depending on number of tunnels established at the time of querying.')
jnxL2tpStatsPayloadRxOctets = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsPayloadRxOctets.setStatus('deprecated')
if mibBuilder.loadTexts: jnxL2tpStatsPayloadRxOctets.setDescription('This object returns the number of payload channel octets that were received on the exisiting tunnels. This is an instantaneously accumulated value which can increase or decrease depending on number of tunnels established at the time of querying. This is deprecated and replaced by jnxL2tpStatsPayloadRxOctets64')
jnxL2tpStatsPayloadRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsPayloadRxPkts.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpStatsPayloadRxPkts.setDescription('This object returns the number of payload packets that were received on the existing tunnels. This is an instantaneously accumulated value which can increase or decrease depending on number of tunnels established at the time of querying.')
jnxL2tpStatsPayloadTxOctets = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 9), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsPayloadTxOctets.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpStatsPayloadTxOctets.setDescription('This object returns the number of payload channel octets that were transmitted to the existing tunnel peers. This is an instantaneously accumulated value which can increase or decrease depending on number of tunnels established at the time of querying.')
jnxL2tpStatsPayloadTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 10), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsPayloadTxPkts.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpStatsPayloadTxPkts.setDescription('This object returns the number of payload packets that were transmitted to existing tunnel peers. This is an instantaneously accumulated value which can increase or decrease depending on number of tunnels established at the time of querying.')
jnxL2tpStatsErrorTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 11), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsErrorTxPkts.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpStatsErrorTxPkts.setDescription('This object returns the number of errored packet transmission attempts to the existing tunnel peers. This is an instantaneously accumulated value which can increase or decrease depending on number of tunnels established at the time of querying.')
jnxL2tpStatsErrorRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 12), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsErrorRxPkts.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpStatsErrorRxPkts.setDescription('This object returns the number of errored packets that were received from the existing tunnel peers. This is an instantaneously accumulated value which can increase or decrease depending on number of tunnels established at the time of querying.')
jnxL2tpStatsPayloadRxOctets64 = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 1, 1, 13), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpStatsPayloadRxOctets64.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpStatsPayloadRxOctets64.setDescription('This object returns the number of payload channel octets that were received on the exisiting tunnels. This is an instantaneously accumulated value which can increase or decrease depending on number of tunnels established at the time of querying.')
jnxL2tpTunnelGroupStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 2), )
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsTable.setDescription('The L2TP tunnel group status and statistics table. This table contains objects that can be used to describe the current status and statistics of a single L2TP tunnel group.')
jnxL2tpTunnelGroupStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 2, 1), ).setIndexNames((1, "JNX-L2TP-MIB", "jnxL2tpTunnelGroupStatsTnlGrpName"))
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsEntry.setDescription('An L2TP tunnel group stats entry.')
jnxL2tpTunnelGroupStatsTnlGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)))
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsTnlGrpName.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsTnlGrpName.setDescription('This object contains the name of this tunnel group.')
jnxL2tpTunnelGroupStatsGatewayAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsGatewayAddrType.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsGatewayAddrType.setDescription('This object contains the type of local IP address for L2TP tunnels that are part of this group.')
jnxL2tpTunnelGroupStatsGatewayAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsGatewayAddr.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsGatewayAddr.setDescription('This object contains the local IP address for L2TP tunnels that are part of this group.')
jnxL2tpTunnelGroupStatsSvcIntfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 2, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsSvcIntfName.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsSvcIntfName.setDescription('This object contains the name of the service interface that is hosting this tunnel group.')
jnxL2tpTunnelGroupStatsTotalTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsTotalTunnels.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsTotalTunnels.setDescription('This object returns the total number of tunnels that are currently in the established state in this tunnel group.')
jnxL2tpTunnelGroupStatsTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsTotalSessions.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelGroupStatsTotalSessions.setDescription('This object returns the total number of sessions that are currently in the established state in this tunnel group.')
jnxL2tpTunnelStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3), )
if mibBuilder.loadTexts: jnxL2tpTunnelStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsTable.setDescription('The L2TP tunnel status and statistics table. This table contains objects that can be used to describe the current status and statistics of a single L2TP tunnel.')
jnxL2tpTunnelStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1), ).setIndexNames((0, "JNX-L2TP-MIB", "jnxL2tpTunnelStatsLocalTID"))
if mibBuilder.loadTexts: jnxL2tpTunnelStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsEntry.setDescription('An L2TP tunnel interface stats entry.')
jnxL2tpTunnelStatsLocalTID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: jnxL2tpTunnelStatsLocalTID.setReference('RFC 2661, Section 3.1')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsLocalTID.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsLocalTID.setDescription('This object contains the local tunnel Identifier.')
jnxL2tpTunnelStatsServiceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsServiceInterface.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsServiceInterface.setDescription('This object contains the name of the service interface on which this tunnel is being hosted.')
jnxL2tpTunnelStatsTunnelGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsTunnelGroup.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsTunnelGroup.setDescription('This object contains the name of the tunnel group that this tunnel is part of.')
jnxL2tpTunnelStatsRemoteTID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsRemoteTID.setReference('RFC 2661, Section 3.1')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsRemoteTID.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsRemoteTID.setDescription('This object contains the remote tunnel Identifier.')
jnxL2tpTunnelStatsRemoteIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsRemoteIpAddrType.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsRemoteIpAddrType.setDescription('This object contains the type of the remote end address of this tunnel.')
jnxL2tpTunnelStatsRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsRemoteIpAddress.setDescription('This object contains the remote end address of this tunnel.')
jnxL2tpTunnelStatsRemoteUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsRemoteUdpPort.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsRemoteUdpPort.setDescription('This object contains the remote end UDP port of this tunnel.')
jnxL2tpTunnelStatsActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsActiveSessions.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsActiveSessions.setDescription('This object contains the total number of sessions in the established state for this tunnel.')
jnxL2tpTunnelStatsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("cc-responder-accept-new", 1), ("cc-responder-reject-new", 2), ("cc-responder-idle", 3), ("cc-responder-wait-ctl-conn", 4), ("cleanup", 5), ("closed", 6), ("destroyed", 7), ("established", 8), ("terminate", 9), ("unknown", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsState.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsState.setDescription('This field contains the current state of the control tunnel - one of the internal tunnel state names as described below: cc_responder_accept_new The tunnel has received and accepted the start control connection request (SCCRQ) cc_responder_reject_new The tunnel has received and rejected the SCCRQ cc_responder_idle The tunnel has just been created cc_responder_wait_ctl_conn The tunnel has sent the start control connection response (SCCRP) and is waiting for the start control connection connected (SCCCN) message cleanup The tunnel is being cleaned up closed The tunnel is being closed destroyed The tunnel is being destroyed established The tunnel is operating terminate The tunnel is terminating Unknown The tunnel is not connected to the router.')
jnxL2tpTunnelStatsLocalIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsLocalIpAddrType.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsLocalIpAddrType.setDescription('This object contains the type of the local end address of this tunnel.')
jnxL2tpTunnelStatsLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsLocalIpAddress.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsLocalIpAddress.setDescription('This object contains the local end address of this tunnel.')
jnxL2tpTunnelStatsLocalUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 12), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsLocalUdpPort.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsLocalUdpPort.setDescription('This object contains the local end UDP port of this tunnel.')
jnxL2tpTunnelStatsLocalHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsLocalHostName.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsLocalHostName.setDescription('This object contains the local host name of this tunnel.')
jnxL2tpTunnelStatsRemoteHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsRemoteHostName.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsRemoteHostName.setDescription('This object contains the host name as discovered during the tunnel establishment phase (via the Host Name AVP) of the L2TP peer. If the tunnel is idle this object should maintain its value from the last time it was connected.')
jnxL2tpTunnelMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelMaxSessions.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelMaxSessions.setDescription('This object represents the maximum number of sessions configured on this tunnel. It could be any positive number or unlimited (0).')
jnxL2tpTunnelStatsWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsWindowSize.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsWindowSize.setDescription('This object contains the send window size for this tunnel.')
jnxL2tpTunnelStatsHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsHelloInterval.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsHelloInterval.setDescription('This object contains the hello interval for this tunnel.')
jnxL2tpTunnelStatsCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsCreationTime.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsCreationTime.setDescription('This object represents the time of creation of this tunnel.')
jnxL2tpTunnelStatsUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsUpTime.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsUpTime.setDescription('This object represents the time elapsed since this tunnel was established.')
jnxL2tpTunnelStatsIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 20), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsIdleTime.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsIdleTime.setDescription('This object represents the time elapsed since this tunnel had last data activity (transmission or reception).')
jnxL2tpTunnelStatsCollectionStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsCollectionStart.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsCollectionStart.setDescription('This object represents the time at which the statistics gathering started for this tunnel.')
jnxL2tpTunnelStatsControlTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsControlTxPkts.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsControlTxPkts.setDescription('This object contains the number of control packets that were transmitted to the tunnel peer.')
jnxL2tpTunnelStatsControlTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsControlTxBytes.setStatus('deprecated')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsControlTxBytes.setDescription('This object contains the number of control bytes that were transmitted to the tunnel peer. This is deprecated and replaced by jnxL2tpTunnelStatsControlTxBytes32')
jnxL2tpTunnelStatsControlRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsControlRxPkts.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsControlRxPkts.setDescription('This object contains the number of control packets received on the tunnel.')
jnxL2tpTunnelStatsControlRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsControlRxBytes.setStatus('deprecated')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsControlRxBytes.setDescription('This object contains the number of control bytes that were received from the tunnel peer. This has been deprecated and replaced by jnxL2tpTunnelStatsControlRxBytes32')
jnxL2tpTunnelStatsDataTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsDataTxPkts.setStatus('deprecated')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsDataTxPkts.setDescription('This object contains the number of data packets transmitted to the tunnel. This has been deprecated and replaced by jnxL2tpTunnelStatsDataTxPkts64')
jnxL2tpTunnelStatsDataTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsDataTxBytes.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsDataTxBytes.setDescription('This object contains the number of data bytes that were transmitted to the tunnel peer.')
jnxL2tpTunnelStatsDataRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsDataRxPkts.setStatus('deprecated')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsDataRxPkts.setDescription('This object contains the number of data packets received from this tunnel. This is deprecated and replaced by jnxL2tpTunnelStatsDataRxPkts64')
jnxL2tpTunnelStatsDataRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsDataRxBytes.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsDataRxBytes.setDescription('This object contains the number of data bytes that were received from the tunnel peer.')
jnxL2tpTunnelStatsErrorTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsErrorTxPkts.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsErrorTxPkts.setDescription('This object contains the number of error transmit packets on the tunnel.')
jnxL2tpTunnelStatsErrorRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsErrorRxPkts.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsErrorRxPkts.setDescription('This object contains the number of error receive packets on the tunnel.')
jnxL2tpTunnelStatsControlTxBytes32 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsControlTxBytes32.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsControlTxBytes32.setDescription('This object contains the number of control bytes that were transmitted to the tunnel peer.')
jnxL2tpTunnelStatsControlRxBytes32 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsControlRxBytes32.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsControlRxBytes32.setDescription('This object contains the number of control bytes that were received from the tunnel peer.')
jnxL2tpTunnelStatsDataTxPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsDataTxPkts64.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsDataTxPkts64.setDescription('This object contains the number of data packets transmitted to the tunnel.')
jnxL2tpTunnelStatsDataRxPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpTunnelStatsDataRxPkts64.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpTunnelStatsDataRxPkts64.setDescription('This object contains the number of data packets received from this tunnel.')
jnxL2tpSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4), )
if mibBuilder.loadTexts: jnxL2tpSessionStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsTable.setDescription('The L2TP session status and statistics table. This table contains the objects that can be used to describe the current status and statistics of a single L2TP tunneled session.')
jnxL2tpSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1), ).setIndexNames((0, "JNX-L2TP-MIB", "jnxL2tpSessionStatsLocalTID"), (0, "JNX-L2TP-MIB", "jnxL2tpSessionStatsLocalSID"))
if mibBuilder.loadTexts: jnxL2tpSessionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsEntry.setDescription('An L2TP session interface stats entry.')
jnxL2tpSessionStatsLocalTID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: jnxL2tpSessionStatsLocalTID.setReference('RFC 2661, Section 3.1')
if mibBuilder.loadTexts: jnxL2tpSessionStatsLocalTID.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsLocalTID.setDescription('This object contains the local tunnel Identifier.')
jnxL2tpSessionStatsLocalSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: jnxL2tpSessionStatsLocalSID.setReference('RFC 2661, Section 3.1')
if mibBuilder.loadTexts: jnxL2tpSessionStatsLocalSID.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsLocalSID.setDescription('This object contains the local session Identifier.')
jnxL2tpSessionStatsServiceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsServiceInterface.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsServiceInterface.setDescription('This object contains the name of the service interface on which this session is being hosted.')
jnxL2tpSessionStatsTunnelGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsTunnelGroup.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsTunnelGroup.setDescription('This object contains the name of the tunnel group that this session is part of.')
jnxL2tpSessionStatsRemoteSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsRemoteSID.setReference('RFC 2661, Section 3.1')
if mibBuilder.loadTexts: jnxL2tpSessionStatsRemoteSID.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsRemoteSID.setDescription('This object contains the remote end assigned session identifier for this session. When a session is starting this value may be zero until the remote tunnel endpoint has responded.')
jnxL2tpSessionStatsInterfaceUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsInterfaceUnit.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsInterfaceUnit.setDescription('This object contains the interface unit number corresponding to the logical service interface on which the session is being hosted.')
jnxL2tpSessionStatsEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ppp", 1), ("multilink-ppp", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsEncapType.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsEncapType.setDescription('This object contains the tunnel encapsulation type.')
jnxL2tpSessionStatsBundleID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsBundleID.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsBundleID.setDescription('This object identifies the bundle that this session is a link of. This field is valid only for tunnel encapsulation type multilink-ppp.')
jnxL2tpSessionStatsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("established", 1), ("closed", 2), ("destroyed", 3), ("cleanup", 4), ("lns-ic-accept-new", 5), ("lns-ic-idle", 6), ("lns-ic-reject-new", 7), ("lns-ic-wait-connect", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsState.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsState.setDescription("This field contains the current state of the session - one of the internal session related state names as described below: established The session is operating closed The session is being closed destroyed The session is being destroyed cleanup The session is being cleaned up lns_ic_accept_new A new session is being accepted lns_ic_idle The session has been created and is idle lns_ic_reject_new The new session is being rejected lns_ic_wait_connect The session is waiting for the peer's incoming call connected (ICCN) message.")
jnxL2tpSessionStatsUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsUserName.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsUserName.setDescription('This object identifies the peer session name on this interface. This is typically the login name of the remote user. If the user name is unknown to the local tunnel peer then this object will contain a null string.')
jnxL2tpSessionStatsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("shared", 1), ("dedicate", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsMode.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsMode.setDescription('This object identifies the configured mode value for this session.')
jnxL2tpSessionStatsLocalAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsLocalAddrType.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsLocalAddrType.setDescription('This object contains the type of the local end address of the tunnel that is hosting this session.')
jnxL2tpSessionStatsLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsLocalAddress.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsLocalAddress.setDescription('This object contains the local end address of the tunnel that is hosting this session.')
jnxL2tpSessionStatsLocalUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 14), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsLocalUdpPort.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsLocalUdpPort.setDescription('This object contains the UDP port of the local end of the tunnel that is hosting this session.')
jnxL2tpSessionStatsRemoteAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 15), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsRemoteAddrType.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsRemoteAddrType.setDescription('This object contains the type of the remote end address of the tunnel hosting this session.')
jnxL2tpSessionStatsRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 16), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsRemoteAddress.setDescription('This object contains the remote end address of the tunnel hosting this session.')
jnxL2tpSessionStatsRemoteUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 17), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsRemoteUdpPort.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsRemoteUdpPort.setDescription('This object contains the UDP port of the remote end of the tunnel hosting this session.')
jnxL2tpSessionStatsLocalHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsLocalHostName.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsLocalHostName.setDescription('This object contains the local host name of the tunnel that is hosting this session.')
jnxL2tpSessionStatsRemoteHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsRemoteHostName.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsRemoteHostName.setDescription('This object contains the host name as discovered during the tunnel establishment phase (via the Host Name AVP) of the L2TP peer.')
jnxL2tpSessionAssignedIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 20), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionAssignedIpAddrType.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionAssignedIpAddrType.setDescription('This object contains the type of IP address of PPP client being tunneled as obtained from IPCP configuration during session establishment.')
jnxL2tpSessionAssignedIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 21), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionAssignedIpAddress.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionAssignedIpAddress.setDescription('This object contains the IP address of the PPP client being tunneled as obtained from IPCP configuration during session establishment.')
jnxL2tpSessionLocalMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionLocalMRU.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionLocalMRU.setDescription('The current value of the MRU for the local PPP Entity. This value is the MRU that the remote entity is using when sending packets to this session.')
jnxL2tpSessionRemoteMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionRemoteMRU.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionRemoteMRU.setDescription('The current value of the MRU for the remote PPP Entity. This value is the MRU that the local entity is using when sending packets to the remote PPP client.')
jnxL2tpSessionStatsTxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 24), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsTxSpeed.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsTxSpeed.setDescription('This object returns the last known transmit baud rate for this session.')
jnxL2tpSessionStatsRxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 25), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsRxSpeed.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsRxSpeed.setDescription('This object returns the last known receive baud rate for this session established.')
jnxL2tpSessionStatsCallBearerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("digital", 2), ("analog", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsCallBearerType.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsCallBearerType.setDescription('This object describes the bearer type of this session.')
jnxL2tpSessionStatsFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("sync", 2), ("async", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsFramingType.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsFramingType.setDescription('This object describes the framing type of this session.')
jnxL2tpSessionStatsLCPRenegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsLCPRenegotiation.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsLCPRenegotiation.setDescription('This object returns whether LCP renegotiation is on or off for this session.')
jnxL2tpSessionStatsAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("text", 2), ("pppChap", 3), ("pppPap", 4), ("pppEap", 5), ("pppMsChapV1", 6), ("pppMsChapV2", 7), ("other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsAuthMethod.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsAuthMethod.setDescription('This object contains the proxy authentication method employed by the LAC for the session.')
jnxL2tpSessionStatsNasIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 30), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsNasIpAddrType.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsNasIpAddrType.setDescription('This object contains the type of IP address of the RADIUS network address server to which the accounting records for this session are being sent to.')
jnxL2tpSessionStatsNasIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 31), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsNasIpAddress.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsNasIpAddress.setDescription('This object contains the IP address of the RADIUS network address server to which the accounting records for this session are being sent to.')
jnxL2tpSessionStatsNasIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 32), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsNasIpPort.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsNasIpPort.setDescription('This object contains the port on which RADIUS network address server accounting messages will be sent.')
jnxL2tpSessionStatsFramedProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 100))).clone(namedValues=NamedValues(("ppp", 1), ("slip", 2), ("arap", 3), ("gandalf", 4), ("xylogicsIPX-SLIP", 5), ("x75-sync", 6), ("none", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsFramedProtocol.setReference('RFC 2865, Section 5.7')
if mibBuilder.loadTexts: jnxL2tpSessionStatsFramedProtocol.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsFramedProtocol.setDescription('This object contains the frame protocol attribute obtained from RADIUS server for this session.')
jnxL2tpSessionStatsFramedIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 34), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsFramedIpAddrType.setReference('RFC 2865, Section 5.8')
if mibBuilder.loadTexts: jnxL2tpSessionStatsFramedIpAddrType.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsFramedIpAddrType.setDescription('This Attribute indicates the type of address to be configured for the user, as provided by the RADIUS server in response to authentication request.')
jnxL2tpSessionStatsFramedIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 35), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsFramedIpAddress.setReference('RFC 2865, Section 5.8')
if mibBuilder.loadTexts: jnxL2tpSessionStatsFramedIpAddress.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsFramedIpAddress.setDescription('This Attribute indicates the address to be configured for the user, as provided by the RADIUS server in response to authentication request.')
jnxL2tpSessionStatsCallingStationID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 36), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsCallingStationID.setReference('RFC 2865, Section 5.31')
if mibBuilder.loadTexts: jnxL2tpSessionStatsCallingStationID.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsCallingStationID.setDescription('This Attribute allows the RADIUS NAS to send in the Access-Request packet the phone number that the call came from, using Automatic Number Identification (ANI) or similar technology. It is only used in Access-Request packets.')
jnxL2tpSessionStatsCalledStationID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 37), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsCalledStationID.setReference('RFC 2865, Section 5.30')
if mibBuilder.loadTexts: jnxL2tpSessionStatsCalledStationID.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsCalledStationID.setDescription('This Attribute allows the RADIUS NAS to send in the Access-Request packet the phone number that the user called, using Dialed Number Identification (DNIS) or similar technology. It is only used in Access-Request packets.')
jnxL2tpSessionStatsAcctDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctDelayTime.setReference('RFC 2866, Section 5.2')
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctDelayTime.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctDelayTime.setDescription('This attribute indicates how many seconds the RADIUS accounting client has been trying to send a record for, and can be subtracted from the time of arrival on the server to find the approximate time of the event generating this Accounting-Request.')
jnxL2tpSessionStatsAcctSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 39), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctSessionID.setReference('RFC 2866, Section 5.5')
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctSessionID.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctSessionID.setDescription('This attribute is a unique Accounting ID to make it easy to match start and stop records in a log file.')
jnxL2tpSessionStatsAcctMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("radius", 1), ("local", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctMethod.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctMethod.setDescription('This object contains the accounting method employed for this session.')
jnxL2tpSessionStatsAcctSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctSessionTime.setReference('RFC 2866, Section 5.7')
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctSessionTime.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctSessionTime.setDescription('This attribute indicates how many seconds the user has received service for.')
jnxL2tpSessionStatsAcctNasPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("async", 1), ("sync", 2), ("isdn-sync", 3), ("isdn-asunc-v-120", 4), ("isdn-async-v-110", 5), ("virtual", 6), ("piafs", 7), ("hdlc-clear-channel", 8), ("x-25", 9), ("x-75", 10), ("g-3-fax", 11), ("sdsl", 12), ("adsl-cap", 13), ("adsl-dmt", 14), ("idsl", 15), ("ethernet", 16), ("xdsl", 17), ("cable", 18), ("wireless-other", 19), ("wireless-ieee-802-1", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctNasPortType.setReference('RFC 2865, Section 5.41')
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctNasPortType.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctNasPortType.setDescription('This Attribute indicates the type of the physical port of the NAS which is performing accounting for the user.')
jnxL2tpSessionStatsAcctTnlClientEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctTnlClientEndPoint.setReference('RFC 2661, Section 3.1')
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctTnlClientEndPoint.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctTnlClientEndPoint.setDescription('This object contains the remote tunnel Identifier of the tunnel hosting this session.')
jnxL2tpSessionStatsAcctTnlServerEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctTnlServerEndPoint.setReference('RFC 2661, Section 3.1')
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctTnlServerEndPoint.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctTnlServerEndPoint.setDescription('This object contains the local tunnel Identifier of the tunnel hosting this session.')
jnxL2tpSessionStatsAcctTnlClientAuthID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 45), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctTnlClientAuthID.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctTnlClientAuthID.setDescription('This object contains the host name as discovered during the tunnel establishment phase (via the Host Name AVP) of the L2TP peer, for the tunnel that is hosting this session.')
jnxL2tpSessionStatsAcctTnlServerAuthID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 46), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctTnlServerAuthID.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsAcctTnlServerAuthID.setDescription('This object contains the local host name of the tunnel that is hosting this session.')
jnxL2tpSessionStatsUserProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 47), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsUserProfileName.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsUserProfileName.setDescription('This object contains the configured access profile name that is being used for this session.')
jnxL2tpSessionStatsInterfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 48), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsInterfaceID.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsInterfaceID.setDescription('This object contains the interface identification (name) for the session bearing service interface.')
jnxL2tpSessionStatsCallSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsCallSerialNumber.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsCallSerialNumber.setDescription('This object contains the serial number that has been assigned to this session.')
jnxL2tpSessionStatsCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 50), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsCreationTime.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsCreationTime.setDescription('This object represents the time of creation of this session.')
jnxL2tpSessionStatsUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 51), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsUpTime.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsUpTime.setDescription('This object represents the time elapsed since this session was established.')
jnxL2tpSessionStatsIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 52), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsIdleTime.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsIdleTime.setDescription('This object represents the time elapsed since this session had last data activity (transmission or reception).')
jnxL2tpSessionStatsCollectionStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 53), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsCollectionStart.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsCollectionStart.setDescription('This object represents the time at which the statistics gathering started for this session.')
jnxL2tpSessionStatsControlTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsControlTxPkts.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsControlTxPkts.setDescription('This object contains the number of control packets that were transmitted to the session peer.')
jnxL2tpSessionStatsControlTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsControlTxBytes.setStatus('deprecated')
if mibBuilder.loadTexts: jnxL2tpSessionStatsControlTxBytes.setDescription('This object contains the number of control bytes that were transmitted to the session peer. This is deprecated and replaced by jnxL2tpSessionStatsControlTxBytes32')
jnxL2tpSessionStatsControlRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsControlRxPkts.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsControlRxPkts.setDescription('This object contains the number of control packets received on the session.')
jnxL2tpSessionStatsControlRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsControlRxBytes.setStatus('deprecated')
if mibBuilder.loadTexts: jnxL2tpSessionStatsControlRxBytes.setDescription('This object contains the number of control bytes that were received from the session peer. This is deprecated and replaced by jnxL2tpSessionStatsControlRxBytes32')
jnxL2tpSessionStatsDataTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsDataTxPkts.setStatus('deprecated')
if mibBuilder.loadTexts: jnxL2tpSessionStatsDataTxPkts.setDescription('This object contains the number of data packets transmitted to the remote session peer. This is deprecated and replaced by jnxL2tpSessionStatsDataTxPkts64')
jnxL2tpSessionStatsDataTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsDataTxBytes.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsDataTxBytes.setDescription('This object contains the number of data bytes that were transmitted to the session peer.')
jnxL2tpSessionStatsDataRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsDataRxPkts.setStatus('deprecated')
if mibBuilder.loadTexts: jnxL2tpSessionStatsDataRxPkts.setDescription('This object contains the number of data packets received on this session. This is deprecated and replaced by jnxL2tpSessionStatsDataRxPkts64')
jnxL2tpSessionStatsDataRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsDataRxBytes.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsDataRxBytes.setDescription('This object contains the number of data bytes that were received from the session peer.')
jnxL2tpSessionStatsErrorTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsErrorTxPkts.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsErrorTxPkts.setDescription('This object contains the number of error transmit packets on the session.')
jnxL2tpSessionStatsErrorRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsErrorRxPkts.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsErrorRxPkts.setDescription('This object contains the number of error receive packets on the session.')
jnxL2tpSessionStatsControlTxBytes32 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsControlTxBytes32.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsControlTxBytes32.setDescription('This object contains the number of control bytes that were transmitted to the session peer.')
jnxL2tpSessionStatsControlRxBytes32 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsControlRxBytes32.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsControlRxBytes32.setDescription('This object contains the number of control bytes that were received from the session peer.')
jnxL2tpSessionStatsDataTxPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsDataTxPkts64.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsDataTxPkts64.setDescription('This object contains the number of data packets transmitted to the remote session peer.')
jnxL2tpSessionStatsDataRxPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 4, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpSessionStatsDataRxPkts64.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpSessionStatsDataRxPkts64.setDescription('This object contains the number of data packets received on this session.')
jnxL2tpMlpppBundleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 5), )
if mibBuilder.loadTexts: jnxL2tpMlpppBundleStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpMlpppBundleStatsTable.setDescription('The L2TP MLPPP bundle status and statistics table. This table contains the objects that can be used to describe the current status and statistics of a single L2TP tunneled multilink PPP bundle.')
jnxL2tpMlpppBundleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 5, 1), ).setIndexNames((0, "JNX-L2TP-MIB", "jnxL2tpMlpppBundleStatsBundleID"))
if mibBuilder.loadTexts: jnxL2tpMlpppBundleStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpMlpppBundleStatsEntry.setDescription('An L2TP MLPPP bundle statistics entry.')
jnxL2tpMlpppBundleStatsBundleID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)))
if mibBuilder.loadTexts: jnxL2tpMlpppBundleStatsBundleID.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpMlpppBundleStatsBundleID.setDescription("This object identifies the session's associated bundle.")
jnxL2tpMlpppBundleStatsNumLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpMlpppBundleStatsNumLinks.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpMlpppBundleStatsNumLinks.setDescription('This object identifies the current number of links that have joined the bundle.')
jnxL2tpMlpppBundleStatsEndpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 5, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpMlpppBundleStatsEndpoint.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpMlpppBundleStatsEndpoint.setDescription('This object identifies the username of the MLPPP bundle.')
jnxL2tpMlpppBundleStatsInputMrru = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 4500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpMlpppBundleStatsInputMrru.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpMlpppBundleStatsInputMrru.setDescription('This object identifies the maximum packet size that the input inteface can process.')
jnxL2tpMlpppBundleStatsOutputMrru = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 49, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 4500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxL2tpMlpppBundleStatsOutputMrru.setStatus('current')
if mibBuilder.loadTexts: jnxL2tpMlpppBundleStatsOutputMrru.setDescription('This object identifies the maximum packet size that the output interface can process.')
mibBuilder.exportSymbols("JNX-L2TP-MIB", jnxL2tpSessionStatsBundleID=jnxL2tpSessionStatsBundleID, jnxL2tpSessionStatsRemoteUdpPort=jnxL2tpSessionStatsRemoteUdpPort, jnxL2tpTunnelStatsCollectionStart=jnxL2tpTunnelStatsCollectionStart, jnxL2tpTunnelStatsDataRxBytes=jnxL2tpTunnelStatsDataRxBytes, jnxL2tpSessionStatsLocalUdpPort=jnxL2tpSessionStatsLocalUdpPort, jnxL2tpTunnelStatsRemoteIpAddrType=jnxL2tpTunnelStatsRemoteIpAddrType, jnxL2tpStatsPayloadRxOctets=jnxL2tpStatsPayloadRxOctets, jnxL2tpSessionStatsAcctTnlClientEndPoint=jnxL2tpSessionStatsAcctTnlClientEndPoint, jnxL2tpSessionRemoteMRU=jnxL2tpSessionRemoteMRU, jnxL2tpSessionStatsAuthMethod=jnxL2tpSessionStatsAuthMethod, jnxL2tpSessionStatsFramingType=jnxL2tpSessionStatsFramingType, jnxL2tpSessionStatsAcctSessionID=jnxL2tpSessionStatsAcctSessionID, jnxL2tpSessionStatsFramedProtocol=jnxL2tpSessionStatsFramedProtocol, jnxL2tpSessionStatsFramedIpAddress=jnxL2tpSessionStatsFramedIpAddress, jnxL2tpStatsErrorRxPkts=jnxL2tpStatsErrorRxPkts, jnxL2tpTunnelGroupStatsEntry=jnxL2tpTunnelGroupStatsEntry, jnxL2tpTunnelStatsRemoteHostName=jnxL2tpTunnelStatsRemoteHostName, jnxL2tpSessionStatsCallingStationID=jnxL2tpSessionStatsCallingStationID, jnxL2tpSessionStatsDataRxPkts=jnxL2tpSessionStatsDataRxPkts, jnxL2tpSessionStatsEncapType=jnxL2tpSessionStatsEncapType, jnxL2tpTunnelStatsControlTxBytes32=jnxL2tpTunnelStatsControlTxBytes32, jnxL2tpSessionStatsRemoteAddress=jnxL2tpSessionStatsRemoteAddress, jnxL2tpMlpppBundleStatsInputMrru=jnxL2tpMlpppBundleStatsInputMrru, jnxL2tpTunnelStatsControlRxBytes=jnxL2tpTunnelStatsControlRxBytes, jnxL2tpMlpppBundleStatsEntry=jnxL2tpMlpppBundleStatsEntry, jnxL2tpTunnelGroupStatsTnlGrpName=jnxL2tpTunnelGroupStatsTnlGrpName, jnxL2tpTunnelMaxSessions=jnxL2tpTunnelMaxSessions, jnxL2tpTunnelGroupStatsTotalTunnels=jnxL2tpTunnelGroupStatsTotalTunnels, jnxL2tpSessionStatsDataTxPkts64=jnxL2tpSessionStatsDataTxPkts64, jnxL2tpSessionStatsCreationTime=jnxL2tpSessionStatsCreationTime, jnxL2tpTunnelStatsLocalIpAddrType=jnxL2tpTunnelStatsLocalIpAddrType, jnxL2tpTunnelStatsDataRxPkts64=jnxL2tpTunnelStatsDataRxPkts64, jnxL2tpSessionStatsAcctTnlServerAuthID=jnxL2tpSessionStatsAcctTnlServerAuthID, jnxL2tpSessionStatsServiceInterface=jnxL2tpSessionStatsServiceInterface, jnxL2tpTunnelStatsWindowSize=jnxL2tpTunnelStatsWindowSize, jnxL2tpSessionStatsAcctTnlClientAuthID=jnxL2tpSessionStatsAcctTnlClientAuthID, jnxL2tpScalar=jnxL2tpScalar, jnxL2tpSessionStatsCallSerialNumber=jnxL2tpSessionStatsCallSerialNumber, jnxL2tpTunnelStatsDataTxBytes=jnxL2tpTunnelStatsDataTxBytes, jnxL2tpSessionStatsRemoteHostName=jnxL2tpSessionStatsRemoteHostName, jnxL2tpStatsControlTxPkts=jnxL2tpStatsControlTxPkts, jnxL2tpTunnelStatsLocalUdpPort=jnxL2tpTunnelStatsLocalUdpPort, jnxL2tpSessionStatsLCPRenegotiation=jnxL2tpSessionStatsLCPRenegotiation, jnxL2tpSessionStatsInterfaceID=jnxL2tpSessionStatsInterfaceID, jnxL2tpMlpppBundleStatsBundleID=jnxL2tpMlpppBundleStatsBundleID, jnxL2tpSessionStatsFramedIpAddrType=jnxL2tpSessionStatsFramedIpAddrType, jnxL2tpSessionStatsDataTxBytes=jnxL2tpSessionStatsDataTxBytes, jnxL2tpSessionStatsDataRxBytes=jnxL2tpSessionStatsDataRxBytes, jnxL2tpSessionStatsErrorTxPkts=jnxL2tpSessionStatsErrorTxPkts, jnxL2tpMlpppBundleStatsNumLinks=jnxL2tpMlpppBundleStatsNumLinks, jnxL2tpTunnelStatsControlRxBytes32=jnxL2tpTunnelStatsControlRxBytes32, jnxL2tpSessionStatsRxSpeed=jnxL2tpSessionStatsRxSpeed, jnxL2tpSessionStatsRemoteAddrType=jnxL2tpSessionStatsRemoteAddrType, jnxL2tpSessionStatsNasIpAddress=jnxL2tpSessionStatsNasIpAddress, jnxL2tpTunnelStatsControlTxPkts=jnxL2tpTunnelStatsControlTxPkts, jnxL2tpTunnelStatsState=jnxL2tpTunnelStatsState, jnxL2tpSessionStatsLocalAddress=jnxL2tpSessionStatsLocalAddress, jnxL2tpSessionStatsUpTime=jnxL2tpSessionStatsUpTime, jnxL2tpSessionStatsState=jnxL2tpSessionStatsState, jnxL2tpStatsPayloadTxPkts=jnxL2tpStatsPayloadTxPkts, jnxL2tpSessionStatsControlTxBytes32=jnxL2tpSessionStatsControlTxBytes32, jnxL2tpSessionAssignedIpAddrType=jnxL2tpSessionAssignedIpAddrType, jnxL2tpTunnelStatsTunnelGroup=jnxL2tpTunnelStatsTunnelGroup, jnxL2tpSessionStatsNasIpPort=jnxL2tpSessionStatsNasIpPort, PYSNMP_MODULE_ID=jnxL2tp, jnxL2tpSessionStatsControlTxBytes=jnxL2tpSessionStatsControlTxBytes, jnxL2tpTunnelStatsHelloInterval=jnxL2tpTunnelStatsHelloInterval, jnxL2tpSessionStatsControlRxPkts=jnxL2tpSessionStatsControlRxPkts, jnxL2tpSessionAssignedIpAddress=jnxL2tpSessionAssignedIpAddress, jnxL2tpSessionStatsCalledStationID=jnxL2tpSessionStatsCalledStationID, jnxL2tpSessionStatsLocalSID=jnxL2tpSessionStatsLocalSID, jnxL2tpSessionStatsCollectionStart=jnxL2tpSessionStatsCollectionStart, jnxL2tpTunnelStatsErrorTxPkts=jnxL2tpTunnelStatsErrorTxPkts, jnxL2tpSessionStatsErrorRxPkts=jnxL2tpSessionStatsErrorRxPkts, jnxL2tpTunnelStatsDataTxPkts64=jnxL2tpTunnelStatsDataTxPkts64, jnxL2tpTunnelStatsServiceInterface=jnxL2tpTunnelStatsServiceInterface, jnxL2tpTunnelStatsCreationTime=jnxL2tpTunnelStatsCreationTime, jnxL2tpTunnelStatsDataRxPkts=jnxL2tpTunnelStatsDataRxPkts, jnxL2tpMlpppBundleStatsEndpoint=jnxL2tpMlpppBundleStatsEndpoint, jnxL2tpTunnelStatsControlRxPkts=jnxL2tpTunnelStatsControlRxPkts, jnxL2tpObjects=jnxL2tpObjects, jnxL2tpSessionStatsAcctNasPortType=jnxL2tpSessionStatsAcctNasPortType, jnxL2tpSessionStatsControlRxBytes32=jnxL2tpSessionStatsControlRxBytes32, jnxL2tpSessionStatsLocalTID=jnxL2tpSessionStatsLocalTID, jnxL2tpStatsControlTxOctets=jnxL2tpStatsControlTxOctets, jnxL2tpTunnelStatsRemoteTID=jnxL2tpTunnelStatsRemoteTID, jnxL2tpSessionStatsUserName=jnxL2tpSessionStatsUserName, jnxL2tpTunnelStatsActiveSessions=jnxL2tpTunnelStatsActiveSessions, jnxL2tpSessionStatsNasIpAddrType=jnxL2tpSessionStatsNasIpAddrType, jnxL2tpStatsPayloadRxOctets64=jnxL2tpStatsPayloadRxOctets64, jnxL2tpSessionStatsControlRxBytes=jnxL2tpSessionStatsControlRxBytes, jnxL2tpStatsTotalSessions=jnxL2tpStatsTotalSessions, jnxL2tpSessionStatsTunnelGroup=jnxL2tpSessionStatsTunnelGroup, jnxL2tpSessionStatsCallBearerType=jnxL2tpSessionStatsCallBearerType, jnxL2tpStatsErrorTxPkts=jnxL2tpStatsErrorTxPkts, jnxL2tpTunnelStatsRemoteIpAddress=jnxL2tpTunnelStatsRemoteIpAddress, jnxL2tpSessionStatsAcctDelayTime=jnxL2tpSessionStatsAcctDelayTime, jnxL2tpSessionStatsTxSpeed=jnxL2tpSessionStatsTxSpeed, jnxL2tpStats=jnxL2tpStats, jnxL2tpSessionStatsMode=jnxL2tpSessionStatsMode, jnxL2tpTunnelStatsEntry=jnxL2tpTunnelStatsEntry, jnxL2tpTunnelGroupStatsGatewayAddr=jnxL2tpTunnelGroupStatsGatewayAddr, jnxL2tpSessionStatsTable=jnxL2tpSessionStatsTable, jnxL2tpSessionLocalMRU=jnxL2tpSessionLocalMRU, jnxL2tpTunnelStatsLocalHostName=jnxL2tpTunnelStatsLocalHostName, jnxL2tpSessionStatsAcctSessionTime=jnxL2tpSessionStatsAcctSessionTime, jnxL2tpTunnelGroupStatsTotalSessions=jnxL2tpTunnelGroupStatsTotalSessions, jnxL2tpTunnelStatsRemoteUdpPort=jnxL2tpTunnelStatsRemoteUdpPort, jnxL2tpSessionStatsRemoteSID=jnxL2tpSessionStatsRemoteSID, jnxL2tpMlpppBundleStatsOutputMrru=jnxL2tpMlpppBundleStatsOutputMrru, jnxL2tpTunnelStatsErrorRxPkts=jnxL2tpTunnelStatsErrorRxPkts, jnxL2tpStatsControlRxPkts=jnxL2tpStatsControlRxPkts, jnxL2tp=jnxL2tp, jnxL2tpSessionStatsDataRxPkts64=jnxL2tpSessionStatsDataRxPkts64, jnxL2tpSessionStatsIdleTime=jnxL2tpSessionStatsIdleTime, jnxL2tpTunnelGroupStatsTable=jnxL2tpTunnelGroupStatsTable, jnxL2tpSessionStatsLocalAddrType=jnxL2tpSessionStatsLocalAddrType, jnxL2tpSessionStatsDataTxPkts=jnxL2tpSessionStatsDataTxPkts, jnxL2tpTunnelStatsUpTime=jnxL2tpTunnelStatsUpTime, jnxL2tpTunnelStatsControlTxBytes=jnxL2tpTunnelStatsControlTxBytes, jnxL2tpSessionStatsInterfaceUnit=jnxL2tpSessionStatsInterfaceUnit, jnxL2tpTunnelStatsLocalTID=jnxL2tpTunnelStatsLocalTID, jnxL2tpTunnelStatsDataTxPkts=jnxL2tpTunnelStatsDataTxPkts, jnxL2tpStatsPayloadTxOctets=jnxL2tpStatsPayloadTxOctets, jnxL2tpSessionStatsUserProfileName=jnxL2tpSessionStatsUserProfileName, jnxL2tpMlpppBundleStatsTable=jnxL2tpMlpppBundleStatsTable, jnxL2tpSessionStatsLocalHostName=jnxL2tpSessionStatsLocalHostName, jnxL2tpTunnelGroupStatsSvcIntfName=jnxL2tpTunnelGroupStatsSvcIntfName, jnxL2tpTunnelStatsTable=jnxL2tpTunnelStatsTable, jnxL2tpTunnelGroupStatsGatewayAddrType=jnxL2tpTunnelGroupStatsGatewayAddrType, jnxL2tpSessionStatsControlTxPkts=jnxL2tpSessionStatsControlTxPkts, jnxL2tpTunnelStatsIdleTime=jnxL2tpTunnelStatsIdleTime, jnxL2tpSessionStatsAcctMethod=jnxL2tpSessionStatsAcctMethod, jnxL2tpStatsTotalTunnels=jnxL2tpStatsTotalTunnels, jnxL2tpSessionStatsEntry=jnxL2tpSessionStatsEntry, jnxL2tpStatsControlRxOctets=jnxL2tpStatsControlRxOctets, jnxL2tpSessionStatsAcctTnlServerEndPoint=jnxL2tpSessionStatsAcctTnlServerEndPoint, jnxL2tpStatsPayloadRxPkts=jnxL2tpStatsPayloadRxPkts, jnxL2tpTunnelStatsLocalIpAddress=jnxL2tpTunnelStatsLocalIpAddress)
