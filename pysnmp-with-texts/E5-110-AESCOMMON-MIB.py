#
# PySNMP MIB module E5-110-AESCOMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/E5-110-AESCOMMON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:58:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
aesSeriesCommon, = mibBuilder.importSymbols("E5-110-MIB", "aesSeriesCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, MibIdentifier, Counter32, NotificationType, ModuleIdentity, Counter64, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, IpAddress, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibIdentifier", "Counter32", "NotificationType", "ModuleIdentity", "Counter64", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "IpAddress", "Integer32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
aesMaxNumOfProfiles = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesMaxNumOfProfiles.setStatus('current')
if mibBuilder.loadTexts: aesMaxNumOfProfiles.setDescription('The maximum number of ADSL profiles which the system supports.')
aesLineConfTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 2), )
if mibBuilder.loadTexts: aesLineConfTable.setStatus('current')
if mibBuilder.loadTexts: aesLineConfTable.setDescription('This table includes common attributes describing the ADSL line.')
aesLineConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: aesLineConfEntry.setStatus('current')
if mibBuilder.loadTexts: aesLineConfEntry.setDescription('An entry in aesLineConfTable.')
aesLineConfAdslMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("gDotLite", 1), ("gDotDmt", 2), ("t1Dot413", 3), ("auto", 4), ("etsi", 5), ("adsl2", 6), ("adsl2Plus", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesLineConfAdslMode.setStatus('current')
if mibBuilder.loadTexts: aesLineConfAdslMode.setDescription('The mode of the ADSL line.')
aesLineConfEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("llc", 1), ("vc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesLineConfEncap.setStatus('current')
if mibBuilder.loadTexts: aesLineConfEncap.setDescription('The encapsulation of the ADSL line.')
aesLineConfVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesLineConfVpi.setStatus('current')
if mibBuilder.loadTexts: aesLineConfVpi.setDescription('The VPI of the ADSL line.')
aesLineConfVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesLineConfVci.setStatus('current')
if mibBuilder.loadTexts: aesLineConfVci.setDescription('The VCI of the ADSL line.')
aesLineConfAnnexL = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableNarrowMode", 1), ("enableWideMode", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesLineConfAnnexL.setStatus('current')
if mibBuilder.loadTexts: aesLineConfAnnexL.setDescription('The annex L setting of the ADSL line(Only in AnnexA).')
aesLineConfPmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableL2Mode", 1), ("enableL2Mode", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesLineConfPmMode.setStatus('current')
if mibBuilder.loadTexts: aesLineConfPmMode.setDescription('The power management mode of the ADSL line.')
aesLineConfRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fixed", 1), ("adaptAtStartup", 2), ("adaptAtRuntime", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesLineConfRateMode.setStatus('current')
if mibBuilder.loadTexts: aesLineConfRateMode.setDescription('Defines what form of transmit rate adaptation is configured on this modem. See ADSL Forum TR-005 [3] for more information.')
aesLineConfAnnexM = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesLineConfAnnexM.setStatus('current')
if mibBuilder.loadTexts: aesLineConfAnnexM.setDescription('The annex M setting of the ADSL line.')
aesLineDiagnostic = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3))
aesAtucLineDiagLATN = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 1), Integer32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAtucLineDiagLATN.setStatus('current')
if mibBuilder.loadTexts: aesAtucLineDiagLATN.setDescription('Line Attenuation.')
aesAtucLineDiagSATN = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 2), Integer32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAtucLineDiagSATN.setStatus('current')
if mibBuilder.loadTexts: aesAtucLineDiagSATN.setDescription('Signal Attenuation.')
aesAtucLineDiagSNRM = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 3), Integer32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAtucLineDiagSNRM.setStatus('current')
if mibBuilder.loadTexts: aesAtucLineDiagSNRM.setDescription('Signal-to-Noise Ratio Margin.')
aesAtucLineDiagACTATP = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 4), Integer32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAtucLineDiagACTATP.setStatus('current')
if mibBuilder.loadTexts: aesAtucLineDiagACTATP.setDescription('Actual Aggregate Transmit Power.')
aesAtucLineDiagATTNDR = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAtucLineDiagATTNDR.setStatus('current')
if mibBuilder.loadTexts: aesAtucLineDiagATTNDR.setDescription('Attainable Net Data Rate, in bps.')
aesAturLineDiagLATN = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 6), Integer32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAturLineDiagLATN.setStatus('current')
if mibBuilder.loadTexts: aesAturLineDiagLATN.setDescription('Line Attenuation.')
aesAturLineDiagSATN = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 7), Integer32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAturLineDiagSATN.setStatus('current')
if mibBuilder.loadTexts: aesAturLineDiagSATN.setDescription('Signal Attenuation.')
aesAturLineDiagSNRM = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 8), Integer32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAturLineDiagSNRM.setStatus('current')
if mibBuilder.loadTexts: aesAturLineDiagSNRM.setDescription('Signal-to-Noise Ratio Margin.')
aesAturLineDiagACTATP = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 9), Integer32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAturLineDiagACTATP.setStatus('current')
if mibBuilder.loadTexts: aesAturLineDiagACTATP.setDescription('Actual Aggregate Transmit Power.')
aesAturLineDiagATTNDR = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAturLineDiagATTNDR.setStatus('current')
if mibBuilder.loadTexts: aesAturLineDiagATTNDR.setDescription('Attainable Net Data Rate, in bps.')
aesLineDiagTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesLineDiagTarget.setStatus('current')
if mibBuilder.loadTexts: aesLineDiagTarget.setDescription('Ifindex of the ADSL port which will be diagnosed.')
aesLineDiagOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesLineDiagOps.setStatus('current')
if mibBuilder.loadTexts: aesLineDiagOps.setDescription('The manager sets the object to one to start line diagnostics and the agent clears the object to zero when diagnostics is successfully completed.')
aesLineDiagFailReason = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesLineDiagFailReason.setStatus('current')
if mibBuilder.loadTexts: aesLineDiagFailReason.setDescription('The reason of failed diagnostics.')
aesLineDiagPs = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4))
aesAtucNumOfSubcarriersPerPort = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAtucNumOfSubcarriersPerPort.setStatus('current')
if mibBuilder.loadTexts: aesAtucNumOfSubcarriersPerPort.setDescription('The number of subcarriers per port for ATU-C.')
aesAturNumOfSubcarriersPerPort = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAturNumOfSubcarriersPerPort.setStatus('current')
if mibBuilder.loadTexts: aesAturNumOfSubcarriersPerPort.setDescription('The number of subcarriers per port for ATU-R.')
aesLineDiagPsCCFLirl1 = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesLineDiagPsCCFLirl1.setStatus('current')
if mibBuilder.loadTexts: aesLineDiagPsCCFLirl1.setDescription('Channel Characteristics Function H(f) per subcarrier. The value is the real part of a complex value in liner scale. The first two octets specify the li.rl value for subcarrier 1, and the second two octets specify the li.rl value for subcarrier 2, and so on. The object provides li.rl values for subcarrier 1 to 256.')
aesLineDiagPsCCFLirl2 = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesLineDiagPsCCFLirl2.setStatus('current')
if mibBuilder.loadTexts: aesLineDiagPsCCFLirl2.setDescription('Channel Characteristics Function H(f) per subcarrier. The value is the real part of a complex value in liner scale. The first two octets specify the li.rl value for subcarrier 257, and the second two octets specify the li.rl value for subcarrier 258, and so on. The object provides li.rl values for subcarrier 257 to 512.')
aesLineDiagPsCCFLiim1 = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesLineDiagPsCCFLiim1.setStatus('current')
if mibBuilder.loadTexts: aesLineDiagPsCCFLiim1.setDescription('Channel Characteristics Function H(f) per subcarrier. The value is the image part of a complex value in liner scale. The first two octets specify the li.im value for subcarrier 1, and the second two octets specify the li.im value for subcarrier 2, and so on. The object provides li.im values for subcarrier 1 to 256.')
aesLineDiagPsCCFLiim2 = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesLineDiagPsCCFLiim2.setStatus('current')
if mibBuilder.loadTexts: aesLineDiagPsCCFLiim2.setDescription('Channel Characteristics Function H(f) per subcarrier. The value is the image part of a complex value in liner scale. The first two octets specify the li.im value for subcarrier 257, and the second two octets specify the li.im value for subcarrier 258, and so on. The object provides li.im values for subcarrier 257 to 512.')
aesLineDiagPsCCFLog1 = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesLineDiagPsCCFLog1.setStatus('current')
if mibBuilder.loadTexts: aesLineDiagPsCCFLog1.setDescription('Channel Characteristics Function H(f) per subcarrier. The value provides magnitude value in a logarithmic scale. The first two octets specify the log value for subcarrier 1, and the second two octets specify the log value for subcarrier 2, and so on. The object provides log values for subcarrier 1 to 256.')
aesLineDiagPsCCFLog2 = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesLineDiagPsCCFLog2.setStatus('current')
if mibBuilder.loadTexts: aesLineDiagPsCCFLog2.setDescription('Channel Characteristics Function H(f) per subcarrier. The value provides magnitude value in a logarithmic scale. The first two octets specify the log value for subcarrier 257, and the second two octets specify the log value for subcarrier 258, and so on. The object provides log values for subcarrier 257 to 512.')
aesLineDiagPsQLN = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4, 9), OctetString()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aesLineDiagPsQLN.setStatus('current')
if mibBuilder.loadTexts: aesLineDiagPsQLN.setDescription('Quiet Line Noise PSD QLN(f) per subcarrier. The first octet specify QLN for subcarrier 1, and the second octet specify QLN for subcarrier 2, and so on. The object provides QLN for subcarrier 1 to 512.')
aesLineDiagPsSNR = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4, 10), OctetString()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aesLineDiagPsSNR.setStatus('current')
if mibBuilder.loadTexts: aesLineDiagPsSNR.setDescription('Signal-to-Noise Ratio SNR(f) per subcarrier. The first octet specify SNR for subcarrier 1, and the second octet specify SNR for subcarrier 2, and so on. The object provides SNR for subcarrier 1 to 512.')
aesMaxNumOfAlarmProfiles = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesMaxNumOfAlarmProfiles.setStatus('current')
if mibBuilder.loadTexts: aesMaxNumOfAlarmProfiles.setDescription('The maximum number of ADSL alarm profiles which the system supports.')
aesBitLoadingTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 6), )
if mibBuilder.loadTexts: aesBitLoadingTable.setStatus('current')
if mibBuilder.loadTexts: aesBitLoadingTable.setDescription('This table provides the number of bits per carrier for each ADSL port.')
aesBitLoadingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: aesBitLoadingEntry.setStatus('current')
if mibBuilder.loadTexts: aesBitLoadingEntry.setDescription('An entry in aesBitLoadingTable.')
aesBitLoadingBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 6, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesBitLoadingBits.setStatus('current')
if mibBuilder.loadTexts: aesBitLoadingBits.setDescription('This object provides the number of bits for all carriers in the port. The first octet specify the number of bits for carrier 1, and the second octet specify the number of bits for carrier 2, and so on. The object provides the number of bits for carrier 1 to 512.')
aesBitLoadingAtucNumOfCarriers = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesBitLoadingAtucNumOfCarriers.setStatus('current')
if mibBuilder.loadTexts: aesBitLoadingAtucNumOfCarriers.setDescription('The number of carriers for ATU-C.')
aesBitLoadingAturNumOfCarriers = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesBitLoadingAturNumOfCarriers.setStatus('current')
if mibBuilder.loadTexts: aesBitLoadingAturNumOfCarriers.setDescription('The number of carriers for ATU-R.')
aesLineStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 7), )
if mibBuilder.loadTexts: aesLineStatusTable.setStatus('current')
if mibBuilder.loadTexts: aesLineStatusTable.setDescription('This table includes the ADSL line status.')
aesLineStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: aesLineStatusEntry.setStatus('current')
if mibBuilder.loadTexts: aesLineStatusEntry.setDescription('An entry in aesLineStatusTable.')
aesLineStatusAdslMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("gDotLite", 1), ("gDotDmt", 2), ("t1Dot413", 3), ("etsi", 4), ("adsl2", 5), ("adsl2Plus", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesLineStatusAdslMode.setStatus('current')
if mibBuilder.loadTexts: aesLineStatusAdslMode.setDescription('The link up mode of the ADSL line.')
selt = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 8))
seltTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: seltTarget.setStatus('current')
if mibBuilder.loadTexts: seltTarget.setDescription('IfIndex of the port which would be performed single end loopback test.')
seltOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: seltOps.setStatus('current')
if mibBuilder.loadTexts: seltOps.setDescription('The manager sets the object to 1 to start the selt and the agent clears the object to zero when selt is successfully completed.')
seltStatus = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 8, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: seltStatus.setStatus('current')
if mibBuilder.loadTexts: seltStatus.setDescription('Status description of the selt result.')
seltCableType = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("awg24", 1), ("awg26", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: seltCableType.setStatus('current')
if mibBuilder.loadTexts: seltCableType.setDescription('The cable type that selt result indicates.')
seltLoopEstimateLengthFt = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 8, 5), Integer32()).setUnits('feet').setMaxAccess("readonly")
if mibBuilder.loadTexts: seltLoopEstimateLengthFt.setStatus('current')
if mibBuilder.loadTexts: seltLoopEstimateLengthFt.setDescription('The estimated loop length that selt result indicates.')
seltLoopEstimateLengthMeter = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 8, 6), Integer32()).setUnits('meter').setMaxAccess("readonly")
if mibBuilder.loadTexts: seltLoopEstimateLengthMeter.setStatus('current')
if mibBuilder.loadTexts: seltLoopEstimateLengthMeter.setDescription('The estimated loop length that selt result indicates.')
mibBuilder.exportSymbols("E5-110-AESCOMMON-MIB", aesLineDiagFailReason=aesLineDiagFailReason, aesAtucLineDiagSNRM=aesAtucLineDiagSNRM, aesLineDiagPsCCFLiim2=aesLineDiagPsCCFLiim2, aesLineDiagPsCCFLiim1=aesLineDiagPsCCFLiim1, aesLineConfVci=aesLineConfVci, seltStatus=seltStatus, aesAturLineDiagSNRM=aesAturLineDiagSNRM, aesAtucNumOfSubcarriersPerPort=aesAtucNumOfSubcarriersPerPort, aesLineDiagPsCCFLog1=aesLineDiagPsCCFLog1, aesLineConfAdslMode=aesLineConfAdslMode, seltLoopEstimateLengthMeter=seltLoopEstimateLengthMeter, seltCableType=seltCableType, aesAturLineDiagATTNDR=aesAturLineDiagATTNDR, seltTarget=seltTarget, aesAturLineDiagACTATP=aesAturLineDiagACTATP, selt=selt, aesLineConfEncap=aesLineConfEncap, aesAtucLineDiagACTATP=aesAtucLineDiagACTATP, aesLineStatusEntry=aesLineStatusEntry, aesBitLoadingAturNumOfCarriers=aesBitLoadingAturNumOfCarriers, aesLineConfEntry=aesLineConfEntry, aesAtucLineDiagLATN=aesAtucLineDiagLATN, aesBitLoadingBits=aesBitLoadingBits, aesMaxNumOfAlarmProfiles=aesMaxNumOfAlarmProfiles, aesBitLoadingTable=aesBitLoadingTable, aesLineDiagTarget=aesLineDiagTarget, aesLineDiagPsCCFLirl1=aesLineDiagPsCCFLirl1, aesLineConfVpi=aesLineConfVpi, aesLineDiagPs=aesLineDiagPs, aesAturNumOfSubcarriersPerPort=aesAturNumOfSubcarriersPerPort, aesLineDiagPsCCFLog2=aesLineDiagPsCCFLog2, aesLineStatusAdslMode=aesLineStatusAdslMode, aesLineConfRateMode=aesLineConfRateMode, seltLoopEstimateLengthFt=seltLoopEstimateLengthFt, aesAtucLineDiagSATN=aesAtucLineDiagSATN, aesLineDiagnostic=aesLineDiagnostic, aesLineDiagPsSNR=aesLineDiagPsSNR, aesAturLineDiagLATN=aesAturLineDiagLATN, aesLineConfTable=aesLineConfTable, aesBitLoadingEntry=aesBitLoadingEntry, aesAtucLineDiagATTNDR=aesAtucLineDiagATTNDR, aesAturLineDiagSATN=aesAturLineDiagSATN, aesLineConfAnnexL=aesLineConfAnnexL, seltOps=seltOps, aesLineConfPmMode=aesLineConfPmMode, aesLineConfAnnexM=aesLineConfAnnexM, aesLineDiagPsCCFLirl2=aesLineDiagPsCCFLirl2, aesMaxNumOfProfiles=aesMaxNumOfProfiles, aesLineDiagOps=aesLineDiagOps, aesLineDiagPsQLN=aesLineDiagPsQLN, aesLineStatusTable=aesLineStatusTable, aesBitLoadingAtucNumOfCarriers=aesBitLoadingAtucNumOfCarriers)
