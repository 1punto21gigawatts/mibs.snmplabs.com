#
# PySNMP MIB module ADAPTECDURALINK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADAPTECDURALINK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:13:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, ModuleIdentity, iso, NotificationType, Bits, enterprises, Unsigned32, MibIdentifier, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "ModuleIdentity", "iso", "NotificationType", "Bits", "enterprises", "Unsigned32", "MibIdentifier", "Counter64", "Counter32")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
adaptec = MibIdentifier((1, 3, 6, 1, 4, 1, 795))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 3))
nic = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 3, 1))
npg = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 3, 1, 2))
duralink = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3))
information = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 1))
numInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numInterfaces.setStatus('mandatory')
if mibBuilder.loadTexts: numInterfaces.setDescription('The number of Adaptec network interfaces present on this system.')
numPorts = MibScalar((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPorts.setStatus('mandatory')
if mibBuilder.loadTexts: numPorts.setDescription('The number of Adaptec network ports present on this system.')
numCards = MibScalar((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numCards.setStatus('mandatory')
if mibBuilder.loadTexts: numCards.setDescription('The number of Adaptec network adapters present on this system.')
interfaceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 2), )
if mibBuilder.loadTexts: interfaceStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: interfaceStatsTable.setDescription('The table listing Adaptec network interface statistics.')
interfaceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 2, 1), ).setIndexNames((0, "ADAPTECDURALINK-MIB", "iInterfaceIndex"))
if mibBuilder.loadTexts: interfaceStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: interfaceStatsEntry.setDescription('Each entry lists statistics for a single network interface.')
iInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: iInterfaceIndex.setDescription('A unique value assigned to each interface This is an increasing numeric value ranging between 1 and the value of NumInterfaces.')
iInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iInterfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: iInterfaceName.setDescription('The descriptive name assigned to the interface at the time the interface was configured.')
iInterfacePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iInterfacePorts.setStatus('mandatory')
if mibBuilder.loadTexts: iInterfacePorts.setDescription('The number of ports in the interface. An interface may consist of one or more ports.')
iPermNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 2, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPermNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: iPermNetAddress.setDescription('The permanent network address assigned to this interface. This is the node address stored permanently in the adapter.')
iCurrentNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 2, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iCurrentNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: iCurrentNetAddress.setDescription('The network address currently assigned this interface. This address may be administered by software.')
iDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: iDataRate.setDescription('This is the rate at which data is transferred over this interface, measured in MPBS.')
iTotalPacketsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iTotalPacketsTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: iTotalPacketsTransmitted.setDescription('This is the total number of packets transmitted over this interface.')
iTotalBytesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iTotalBytesTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: iTotalBytesTransmitted.setDescription('This is the total number of bytes transmitted over this interface.')
iTotalPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iTotalPacketsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: iTotalPacketsReceived.setDescription('This is the total number of packets received over this interface.')
iTotalBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iTotalBytesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: iTotalBytesReceived.setDescription('This is the total number of bytes received over this interface.')
iTotalTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iTotalTransmitErrors.setStatus('mandatory')
if mibBuilder.loadTexts: iTotalTransmitErrors.setDescription('This is the total number of Transmit errors seen on this interface.')
iTotalReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iTotalReceiveErrors.setStatus('mandatory')
if mibBuilder.loadTexts: iTotalReceiveErrors.setDescription('This is the total number of Receive errors seen on this interface.')
iInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standalone", 1), ("failover", 2), ("loadBalanced", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: iInterfaceType.setDescription('This is the interface type. standalone indicates a single port configuration. failover indicates a two port group supporting failover resiliency. loadBalanced indicates a multiple port group providing load balancing.')
portStatsTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 3), )
if mibBuilder.loadTexts: portStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsTable.setDescription('The table listing Adaptec network port statistics.')
portStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 3, 1), ).setIndexNames((0, "ADAPTECDURALINK-MIB", "pInterfaceIndex"), (0, "ADAPTECDURALINK-MIB", "pPortIndex"))
if mibBuilder.loadTexts: portStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsEntry.setDescription('Each entry lists statistics for a single network port.')
pInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pInterfaceIndex.setDescription('A unique value assigned to each interface This is an increasing numeric value ranging between 1 and the value of NumInterfaces.')
pPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pPortIndex.setDescription('A unique value assigned to each port on a particular interface. This is an increasing numeric value ranging between 1 and the value of iInterfacePorts for the interface indexed by iInterfaceIndex.')
pPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pPortName.setStatus('mandatory')
if mibBuilder.loadTexts: pPortName.setDescription('The descriptive name assigned to the port. This may not be supported by all operating systems.')
pCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCardNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pCardNumber.setDescription('The value of cpCardIndex that corresponds to this port.')
pCardPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCardPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pCardPortNumber.setDescription('The value of cpPortIndex that corresponds to this port.')
pPermNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 3, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pPermNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pPermNetAddress.setDescription('The permanent network address assigned to this port. This is the node address stored permanently in the adapter.')
pCurrentNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 3, 1, 7), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCurrentNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pCurrentNetAddress.setDescription('The network address currently assigned to this port. This address may be administered by software.')
pDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: pDataRate.setDescription('This is the rate at which data is transferred over this port, measured in MPBS.')
pTotalPacketsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pTotalPacketsTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: pTotalPacketsTransmitted.setDescription('This is the total number of packets transmitted over this port.')
pTotalBytesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pTotalBytesTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: pTotalBytesTransmitted.setDescription('This is the total number of bytes transmitted over this port.')
pTotalPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pTotalPacketsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: pTotalPacketsReceived.setDescription('This is the total number of packets received over this port.')
pTotalBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pTotalBytesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: pTotalBytesReceived.setDescription('This is the total number of bytes received over this port.')
pTotalTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pTotalTransmitErrors.setStatus('mandatory')
if mibBuilder.loadTexts: pTotalTransmitErrors.setDescription('This is the total number of transmit errors seen on this port.')
pTotalReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pTotalReceiveErrors.setStatus('mandatory')
if mibBuilder.loadTexts: pTotalReceiveErrors.setDescription('This is the total number of receive errors seen on this port.')
pStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portActive", 1), ("portDown", 2), ("portInStandby", 3), ("portDisabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pStatus.setDescription('The current status of the port. portActive indicates a functioning port. portDown indicates a port that is not functioning. portDisabled indicates a port that has been down for some time or has demonstrated a serious problem which should be addressed by the system administrator. portInStandby indicates a port which is designated as a backup in a failover interface.')
cardInformationTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 4), )
if mibBuilder.loadTexts: cardInformationTable.setStatus('mandatory')
if mibBuilder.loadTexts: cardInformationTable.setDescription('A table listing Adaptec network card information.')
cardInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 4, 1), ).setIndexNames((0, "ADAPTECDURALINK-MIB", "cCardIndex"))
if mibBuilder.loadTexts: cardInformationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cardInformationEntry.setDescription('Each entry lists information about a single network card.')
cCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cCardIndex.setDescription('A unique value assigned to each network card. This is an increasing numeric value ranging between 1 and the value of NumCards.')
cCardDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCardDescription.setStatus('mandatory')
if mibBuilder.loadTexts: cCardDescription.setDescription('The descriptive name assigned to the network card.')
cPortsOnCard = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPortsOnCard.setStatus('mandatory')
if mibBuilder.loadTexts: cPortsOnCard.setDescription('The number of ports on the network card.')
cardPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 5), )
if mibBuilder.loadTexts: cardPortInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: cardPortInfoTable.setDescription('This table indicates the interface and port number associated with each port on all installed network cards.')
cardPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 5, 1), ).setIndexNames((0, "ADAPTECDURALINK-MIB", "cpCardIndex"), (0, "ADAPTECDURALINK-MIB", "cpPortIndex"))
if mibBuilder.loadTexts: cardPortInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cardPortInfoEntry.setDescription('Each entry lists information for a single port on a network card.')
cpCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpCardIndex.setDescription('A unique value assigned to each network card. This is an increasing numeric value ranging between 1 and the value of NumCards.')
cpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpPortIndex.setDescription('A unique value assigned to each port on a particular network card. This is an increasing numeric value ranging between 1 and the value of cPortsOnCard for the card indexed by cCardIndex.')
cpInterfaceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpInterfaceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpInterfaceNumber.setDescription('The value of pInterfaceIndex that corresponds to this port. If this port is not part of an interface it will be set to 0')
cpPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpPortNumber.setDescription('The value of pPortIndex that corresponds to this port. If this port is not part of an interface it will be set to 0')
cpTableNumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpTableNumber1.setStatus('mandatory')
if mibBuilder.loadTexts: cpTableNumber1.setDescription('The value of Lan Adapter component table rows that correspond to this port. This provides a mapping to entries in an SNMP implementation of the Desktop Management Interface Lan Adapter Component. If this port is not in use on the system this value will be set to 0')
duralinkStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 1, 2, 3) + (0,1)).setObjects(("ADAPTECDURALINK-MIB", "pInterfaceIndex"), ("ADAPTECDURALINK-MIB", "pPortIndex"), ("ADAPTECDURALINK-MIB", "pStatus"))
if mibBuilder.loadTexts: duralinkStatusTrap.setDescription('The port status has changed.')
mibBuilder.exportSymbols("ADAPTECDURALINK-MIB", duralink=duralink, iInterfacePorts=iInterfacePorts, iInterfaceType=iInterfaceType, cCardDescription=cCardDescription, information=information, cpTableNumber1=cpTableNumber1, pDataRate=pDataRate, iTotalBytesReceived=iTotalBytesReceived, iTotalPacketsTransmitted=iTotalPacketsTransmitted, pTotalPacketsTransmitted=pTotalPacketsTransmitted, pPermNetAddress=pPermNetAddress, cpPortNumber=cpPortNumber, pTotalTransmitErrors=pTotalTransmitErrors, pCurrentNetAddress=pCurrentNetAddress, pTotalPacketsReceived=pTotalPacketsReceived, cardPortInfoTable=cardPortInfoTable, interfaceStatsEntry=interfaceStatsEntry, products=products, pTotalBytesTransmitted=pTotalBytesTransmitted, iTotalPacketsReceived=iTotalPacketsReceived, portStatsEntry=portStatsEntry, pCardPortNumber=pCardPortNumber, numInterfaces=numInterfaces, iInterfaceIndex=iInterfaceIndex, pInterfaceIndex=pInterfaceIndex, duralinkStatusTrap=duralinkStatusTrap, pPortName=pPortName, cCardIndex=cCardIndex, iCurrentNetAddress=iCurrentNetAddress, numCards=numCards, portStatsTable=portStatsTable, pStatus=pStatus, pCardNumber=pCardNumber, pTotalBytesReceived=pTotalBytesReceived, numPorts=numPorts, adaptec=adaptec, iTotalBytesTransmitted=iTotalBytesTransmitted, pTotalReceiveErrors=pTotalReceiveErrors, cardInformationTable=cardInformationTable, cardInformationEntry=cardInformationEntry, cpCardIndex=cpCardIndex, iDataRate=iDataRate, iPermNetAddress=iPermNetAddress, cardPortInfoEntry=cardPortInfoEntry, cpInterfaceNumber=cpInterfaceNumber, iTotalReceiveErrors=iTotalReceiveErrors, interfaceStatsTable=interfaceStatsTable, pPortIndex=pPortIndex, iTotalTransmitErrors=iTotalTransmitErrors, cpPortIndex=cpPortIndex, nic=nic, npg=npg, cPortsOnCard=cPortsOnCard, iInterfaceName=iInterfaceName)
