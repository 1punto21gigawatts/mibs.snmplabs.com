#
# PySNMP MIB module NNC-PKT-STATISTICS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NNC-PKT-STATISTICS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:22:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
atmVclVpi, atmVclVci = mibBuilder.importSymbols("ATM-MIB", "atmVclVpi", "atmVclVci")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NncExtRelIntvlNumberType, NncExtAbsIntvlNumberType, NncExtIntvlStateType = mibBuilder.importSymbols("NNC-INTERVAL-STATISTICS-TC-MIB", "NncExtRelIntvlNumberType", "NncExtAbsIntvlNumberType", "NncExtIntvlStateType")
nncExtensions, NncExtCounter64 = mibBuilder.importSymbols("NNCGNI0001-SMI", "nncExtensions", "NncExtCounter64")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, TimeTicks, Counter32, Bits, NotificationType, Gauge32, IpAddress, ObjectIdentity, Integer32, iso, MibIdentifier, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "Counter32", "Bits", "NotificationType", "Gauge32", "IpAddress", "ObjectIdentity", "Integer32", "iso", "MibIdentifier", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nncExtPktStatistics = ModuleIdentity((1, 3, 6, 1, 4, 1, 123, 3, 50))
if mibBuilder.loadTexts: nncExtPktStatistics.setLastUpdated('9801160330Z')
if mibBuilder.loadTexts: nncExtPktStatistics.setOrganization('Newbridge Networks Corporation')
if mibBuilder.loadTexts: nncExtPktStatistics.setContactInfo('Newbridge Networks Corporation Postal: 600 March Road Kanata, Ontario Canada K2K 2E6 Phone: +1 613 591 3600 Fax: +1 613 591 3680')
if mibBuilder.loadTexts: nncExtPktStatistics.setDescription(" This module contains definitions for performance monitoring of the packets routed. This MIB module contains the following tables: PKT VCL 15 Minute Current Table PKT VCL 15 Minute Interval Table and the following non-table objects: nncDepthOfHistoricalStrata These tables are heavily influenced by the definition of VPL/VCL described in rfc1695, and by the statistic table definitions described in rfc2233. The number of intervals supported is dependent upon resource availibility on any given product, but should nominally be 32. To avoid building in massive amounts of storage, some products may adopt a bulk collection scheme. Note that IP packets are counted because of rfc1483. Intervals: Statistics on the performance of VPL/VCLs are collected over a historical stratum of up to a maximum of M intervals. The value of M is a function of a product's storage capability. For example, on the 36170 product, M = 1. Refer to a product's NEID document for a description of these limits. The intervals are 15 minutes and are aligned to the quarter of one hour of a wall clock. The current interval spans back to the last 15 minute tick on the wall clock. Continuing along the timeline from that point is the most recently completed interval and has an index of 1. The previous interval has an index of 2 and so on. Note that the oldest interval may be incomplete since the statistic collection may have been enabled offset to the quarter or one hour tick. t 0 -1i -2i -3i ===========|===========|===========|===========|=========== current N = 1 N = 2 N = 3 N = 4 ... N = M interval ")
nncPktStatisticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 50, 1))
nncPktStatisticsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 50, 2))
nncPktStatisticsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 50, 3))
nncPktStatisticsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 50, 4))
class NncPktVclCoSType(TextualConvention, Integer32):
    description = 'The type describing the Class of Service provided for a particular VC. Currently, there are three classes of service provided for the Amethyst release of CSI: a) controlAndRouting - the level of service provided for control and routing information being passed b) standard - no guarantees for either delay or packet loss c) premium - SLA values for delay and packet loss are detailed in 34FS0119[9] '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("controlAndRouting", 1), ("standard", 2), ("premium", 3))

nncPktVcl15MinCurTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 1), )
if mibBuilder.loadTexts: nncPktVcl15MinCurTable.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinCurTable.setDescription('The nncPktVcl15MinCurTable contains objects for monitoring the packet performance of a VCL during the current 15 minute interval.')
nncPktVcl15MinCurEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinCurCoS"))
if mibBuilder.loadTexts: nncPktVcl15MinCurEntry.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinCurEntry.setDescription('An entry in the 15 minute current statistics table. Each conceptual row contains current packet statistics for a particular VCL.')
nncPktVcl15MinCurCoS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 1, 1, 1), NncPktVclCoSType())
if mibBuilder.loadTexts: nncPktVcl15MinCurCoS.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinCurCoS.setDescription('The Class of Service provided for the cells in the current interval.')
nncPktVcl15MinCurState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 1, 1, 2), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinCurState.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinCurState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by th user, or have been subject to a wall clock time change.')
nncPktVcl15MinCurAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 1, 1, 3), NncExtAbsIntvlNumberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinCurAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinCurAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval')
nncPktVcl15MinCurInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 1, 1, 4), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinCurInOctets.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinCurInOctets.setDescription('The total number of octets received on the interface, including protocol overhead, but excluding ATMs & AAL overhead. This object is a 64-bit version of ifInOctets. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinCurInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 1, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinCurInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinCurInUcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were not addressed to a multicast or broadcast address at this sub-layer. This object is a 64-bit version of ifInUcastPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinCurInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 1, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinCurInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinCurInMulticastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a multicast address at this sub-layer. For a MAC layer protocol, this includes both Group and Functional addresses. This object is a 64-bit version of ifInMulticastPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinCurInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 1, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinCurInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinCurInBroadcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a broadcast address at this sub-layer. This object is a 64-bit version of ifInBroadcastPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinCurInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 1, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinCurInDiscards.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinCurInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinCurInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 1, 1, 9), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinCurInErrors.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinCurInErrors.setDescription('For packet-oriented interfaces, the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol. For character-oriented or fixed-length interfaces, the number of inbound transmission units that contained errors preventing them from being deliverable to a higher-layer protocol. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinCurOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 1, 1, 10), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinCurOutOctets.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinCurOutOctets.setDescription('The total number of octets transmitted out of the interface, including protocol overhead, but excluding ATMs & AAL overhead. This object is a 64-bit version of ifOutOctets. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinCurOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 1, 1, 11), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinCurOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinCurOutUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were not addressed to a multicast or broadcast address at this sub-layer, including those that were discarded or not sent. This object is a 64-bit version of ifOutUcastPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinCurOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 1, 1, 12), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinCurOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinCurOutMulticastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a multicast address at this sub-layer, including those that were discarded or not sent. For a MAC layer protocol, this includes both Group and Functional addresses. This object is a 64-bit version of ifOutMulticastPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinCurOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 1, 1, 13), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinCurOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinCurOutBroadcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a broadcast address at this sub-layer, including those that were discarded or not sent. This object is a 64-bit version of ifOutBroadcastPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinCurOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 1, 1, 14), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinCurOutDiscards.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinCurOutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinCurOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 1, 1, 15), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinCurOutErrors.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinCurOutErrors.setDescription('For packet-oriented interfaces, the number of outbound packets that could not be transmitted because of errors. For character-oriented or fixed-length interfaces, the number of outbound transmission units that could not be transmitted because of errors. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinIntTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 2), )
if mibBuilder.loadTexts: nncPktVcl15MinIntTable.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinIntTable.setDescription('The nncPktVcl15MinIntTable contains objects for monitoring the packet performance of a virtual channel link over a historical stratum of M 15 minute intervals. ')
nncPktVcl15MinIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinIntNumber"), (0, "NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinIntCoS"))
if mibBuilder.loadTexts: nncPktVcl15MinIntEntry.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinIntEntry.setDescription('An entry in the 15 minute interval statistics table. Each conceptual row contains packet statistics for a particular VCL and interval.')
nncPktVcl15MinIntNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 2, 1, 1), NncExtRelIntvlNumberType())
if mibBuilder.loadTexts: nncPktVcl15MinIntNumber.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinIntNumber.setDescription('The interval number (N) of the statistics in this row.')
nncPktVcl15MinIntCoS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 2, 1, 2), NncPktVclCoSType())
if mibBuilder.loadTexts: nncPktVcl15MinIntCoS.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinIntCoS.setDescription('The Class of Service provided for the cells in the current interval.')
nncPktVcl15MinIntState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 2, 1, 3), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinIntState.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinIntState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change. ')
nncPktVcl15MinIntAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 2, 1, 4), NncExtAbsIntvlNumberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinIntAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinIntAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncPktVcl15MinIntInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 2, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinIntInOctets.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinIntInOctets.setDescription('The total number of octets received on the interface, including protocol overhead, but excluding ATMs & AAL overhead. This object is a 64-bit version of ifInOctets. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinIntInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 2, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinIntInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinIntInUcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were not addressed to a multicast or broadcast address at this sub-layer. This object is a 64-bit version of ifInUcastPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinIntInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 2, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinIntInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinIntInMulticastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a multicast address at this sub-layer. For a MAC layer protocol, this includes both Group and Functional addresses. This object is a 64-bit version of ifInMulticastPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinIntInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 2, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinIntInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinIntInBroadcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a broadcast address at this sub-layer. This object is a 64-bit version of ifInBroadcastPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinIntInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 2, 1, 9), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinIntInDiscards.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinIntInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinIntInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 2, 1, 10), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinIntInErrors.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinIntInErrors.setDescription('For packet-oriented interfaces, the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol. For character-oriented or fixed-length interfaces, the number of inbound transmission units that contained errors preventing them from being deliverable to a higher-layer protocol. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinIntOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 2, 1, 11), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinIntOutOctets.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinIntOutOctets.setDescription('The total number of octets transmitted out of the interface, including protocol overhead, but excluding ATMs & AAL overhead. This object is a 64-bit version of ifOutOctets. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinIntOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 2, 1, 12), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinIntOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinIntOutUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were not addressed to a multicast or broadcast address at this sub-layer, including those that were discarded or not sent. This object is a 64-bit version of ifOutUcastPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinIntOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 2, 1, 13), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinIntOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinIntOutMulticastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a multicast address at this sub-layer, including those that were discarded or not sent. For a MAC layer protocol, this includes both Group and Functional addresses. This object is a 64-bit version of ifOutMulticastPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinIntOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 2, 1, 14), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinIntOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinIntOutBroadcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a broadcast address at this sub-layer, including those that were discarded or not sent. This object is a 64-bit version of ifOutBroadcastPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinIntOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 2, 1, 15), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinIntOutDiscards.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinIntOutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinIntOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 2, 1, 16), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVcl15MinIntOutErrors.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinIntOutErrors.setDescription('For packet-oriented interfaces, the number of outbound packets that could not be transmitted because of errors. For character-oriented or fixed-length interfaces, the number of outbound transmission units that could not be transmitted because of errors. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVclStatTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 3), )
if mibBuilder.loadTexts: nncPktVclStatTable.setStatus('current')
if mibBuilder.loadTexts: nncPktVclStatTable.setDescription('The nncPktVclStatTable contains objects for monitoring the accumulated packet performance of a VCL since measurement started on the VCL.')
nncPktVclStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "NNC-PKT-STATISTICS-MIB", "nncPktVclStatCoS"))
if mibBuilder.loadTexts: nncPktVclStatEntry.setStatus('current')
if mibBuilder.loadTexts: nncPktVclStatEntry.setDescription('An entry in the Stat table. Each conceptual row contains accumulated stpacket atistics for a particular VCL.')
nncPktVclStatCoS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 3, 1, 1), NncPktVclCoSType())
if mibBuilder.loadTexts: nncPktVclStatCoS.setStatus('current')
if mibBuilder.loadTexts: nncPktVclStatCoS.setDescription('The Class of Service provided for the cells in the current interval.')
nncPktVclStatInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 3, 1, 2), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVclStatInOctets.setStatus('current')
if mibBuilder.loadTexts: nncPktVclStatInOctets.setDescription('The total number of octets received on the interface, including protocol overhead, but excluding ATMs & AAL overhead. This object is a 64-bit version of ifInOctets. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVclStatInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 3, 1, 3), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVclStatInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: nncPktVclStatInUcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were not addressed to a multicast or broadcast address at this sub-layer. This object is a 64-bit version of ifInUcastPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVclStatInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 3, 1, 4), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVclStatInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: nncPktVclStatInMulticastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a multicast address at this sub-layer. For a MAC layer protocol, this includes both Group and Functional addresses. This object is a 64-bit version of ifInMulticastPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVclStatInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 3, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVclStatInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: nncPktVclStatInBroadcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a broadcast address at this sub-layer. This object is a 64-bit version of ifInBroadcastPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVclStatInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 3, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVclStatInDiscards.setStatus('current')
if mibBuilder.loadTexts: nncPktVclStatInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVclStatInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 3, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVclStatInErrors.setStatus('current')
if mibBuilder.loadTexts: nncPktVclStatInErrors.setDescription('For packet-oriented interfaces, the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol. For character-oriented or fixed-length interfaces, the number of inbound transmission units that contained errors preventing them from being deliverable to a higher-layer protocol. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVclStatOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 3, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVclStatOutOctets.setStatus('current')
if mibBuilder.loadTexts: nncPktVclStatOutOctets.setDescription('The total number of octets transmitted out of the interface, including protocol overhead, but excluding ATMs & AAL overhead. This object is a 64-bit version of ifOutOctets. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVclStatOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 3, 1, 9), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVclStatOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: nncPktVclStatOutUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were not addressed to a multicast or broadcast address at this sub-layer, including those that were discarded or not sent. This object is a 64-bit version of ifOutUcastPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVclStatOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 3, 1, 10), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVclStatOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: nncPktVclStatOutMulticastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a multicast address at this sub-layer, including those that were discarded or not sent. For a MAC layer protocol, this includes both Group and Functional addresses. This object is a 64-bit version of ifOutMulticastPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVclStatOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 3, 1, 11), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVclStatOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: nncPktVclStatOutBroadcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a broadcast address at this sub-layer, including those that were discarded or not sent. This object is a 64-bit version of ifOutBroadcastPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVclStatOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 3, 1, 12), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVclStatOutDiscards.setStatus('current')
if mibBuilder.loadTexts: nncPktVclStatOutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVclStatOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 50, 1, 3, 1, 13), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncPktVclStatOutErrors.setStatus('current')
if mibBuilder.loadTexts: nncPktVclStatOutErrors.setDescription('For packet-oriented interfaces, the number of outbound packets that could not be transmitted because of errors. For character-oriented or fixed-length interfaces, the number of outbound transmission units that could not be transmitted because of errors. Discontinuities in the value of this counter can occur at re-initialization of the management system, or if the VCL is disconnected')
nncPktVcl15MinCurGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 50, 3, 5)).setObjects(("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinCurState"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinCurAbsoluteIntervalNumber"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinCurInOctets"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinCurInUcastPkts"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinCurInMulticastPkts"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinCurInBroadcastPkts"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinCurInDiscards"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinCurInErrors"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinCurOutOctets"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinCurOutUcastPkts"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinCurOutMulticastPkts"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinCurOutBroadcastPkts"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinCurOutDiscards"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinCurOutErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncPktVcl15MinCurGroup = nncPktVcl15MinCurGroup.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinCurGroup.setDescription('A collection of objects providing 15 Min current statistics for a VCI endpoint')
nncPktVcl15MinIntGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 50, 3, 6)).setObjects(("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinIntAbsoluteIntervalNumber"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinIntInOctets"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinIntInUcastPkts"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinIntInMulticastPkts"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinIntInBroadcastPkts"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinIntInDiscards"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinIntInErrors"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinIntOutOctets"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinIntOutUcastPkts"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinIntOutMulticastPkts"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinIntOutBroadcastPkts"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinIntOutDiscards"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinIntOutErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncPktVcl15MinIntGroup = nncPktVcl15MinIntGroup.setStatus('current')
if mibBuilder.loadTexts: nncPktVcl15MinIntGroup.setDescription('A collection of objects providing 15 Min interval statistics for a VCI endpoint')
nncPktVclStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 50, 3, 7)).setObjects(("NNC-PKT-STATISTICS-MIB", "nncPktVclStatInOctets"), ("NNC-PKT-STATISTICS-MIB", "nncPktVclStatInUcastPkts"), ("NNC-PKT-STATISTICS-MIB", "nncPktVclStatInMulticastPkts"), ("NNC-PKT-STATISTICS-MIB", "nncPktVclStatInBroadcastPkts"), ("NNC-PKT-STATISTICS-MIB", "nncPktVclStatInDiscards"), ("NNC-PKT-STATISTICS-MIB", "nncPktVclStatInErrors"), ("NNC-PKT-STATISTICS-MIB", "nncPktVclStatOutOctets"), ("NNC-PKT-STATISTICS-MIB", "nncPktVclStatOutUcastPkts"), ("NNC-PKT-STATISTICS-MIB", "nncPktVclStatOutMulticastPkts"), ("NNC-PKT-STATISTICS-MIB", "nncPktVclStatOutBroadcastPkts"), ("NNC-PKT-STATISTICS-MIB", "nncPktVclStatOutDiscards"), ("NNC-PKT-STATISTICS-MIB", "nncPktVclStatOutErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncPktVclStatGroup = nncPktVclStatGroup.setStatus('current')
if mibBuilder.loadTexts: nncPktVclStatGroup.setDescription('A collection of objects providing cumulative statistics for a VCI endpoint')
nncVclIntervalStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 50, 3, 8)).setObjects(("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinCurState"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinIntState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVclIntervalStateGroup = nncVclIntervalStateGroup.setStatus('current')
if mibBuilder.loadTexts: nncVclIntervalStateGroup.setDescription('A collection of objects providing the state of intervals in the VCL current and interval tables.')
nncPktStatisticsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 123, 3, 50, 4, 1)).setObjects(("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinCurGroup"), ("NNC-PKT-STATISTICS-MIB", "nncPktVcl15MinIntGroup"), ("NNC-PKT-STATISTICS-MIB", "nncPktVclStatGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncPktStatisticsCompliance = nncPktStatisticsCompliance.setStatus('current')
if mibBuilder.loadTexts: nncPktStatisticsCompliance.setDescription('The compliance statement for Newbridge SNMP entities which have Vpl endpoints which perform Bridging or IP Routing over ATM.')
mibBuilder.exportSymbols("NNC-PKT-STATISTICS-MIB", nncPktVclStatInErrors=nncPktVclStatInErrors, nncPktVclStatInOctets=nncPktVclStatInOctets, nncPktVcl15MinCurInBroadcastPkts=nncPktVcl15MinCurInBroadcastPkts, nncPktVcl15MinCurInErrors=nncPktVcl15MinCurInErrors, nncPktVcl15MinCurOutBroadcastPkts=nncPktVcl15MinCurOutBroadcastPkts, nncPktVclStatTable=nncPktVclStatTable, nncPktVcl15MinIntOutBroadcastPkts=nncPktVcl15MinIntOutBroadcastPkts, nncPktVclStatOutErrors=nncPktVclStatOutErrors, nncPktVclStatOutDiscards=nncPktVclStatOutDiscards, nncPktVclStatInUcastPkts=nncPktVclStatInUcastPkts, nncPktVcl15MinCurCoS=nncPktVcl15MinCurCoS, nncPktVcl15MinCurInOctets=nncPktVcl15MinCurInOctets, nncPktVcl15MinIntInErrors=nncPktVcl15MinIntInErrors, nncPktVcl15MinCurOutOctets=nncPktVcl15MinCurOutOctets, nncPktVcl15MinCurInDiscards=nncPktVcl15MinCurInDiscards, nncPktVcl15MinCurGroup=nncPktVcl15MinCurGroup, nncPktVcl15MinCurTable=nncPktVcl15MinCurTable, nncPktVcl15MinCurState=nncPktVcl15MinCurState, nncPktVclStatInDiscards=nncPktVclStatInDiscards, nncPktStatisticsTraps=nncPktStatisticsTraps, nncPktVcl15MinIntOutErrors=nncPktVcl15MinIntOutErrors, nncPktVcl15MinIntState=nncPktVcl15MinIntState, nncPktVcl15MinCurOutMulticastPkts=nncPktVcl15MinCurOutMulticastPkts, nncPktVclStatInBroadcastPkts=nncPktVclStatInBroadcastPkts, nncPktVcl15MinIntOutOctets=nncPktVcl15MinIntOutOctets, nncExtPktStatistics=nncExtPktStatistics, nncPktVclStatCoS=nncPktVclStatCoS, nncPktVclStatOutBroadcastPkts=nncPktVclStatOutBroadcastPkts, nncPktVcl15MinIntInMulticastPkts=nncPktVcl15MinIntInMulticastPkts, nncPktVcl15MinIntInOctets=nncPktVcl15MinIntInOctets, nncVclIntervalStateGroup=nncVclIntervalStateGroup, nncPktVcl15MinCurOutUcastPkts=nncPktVcl15MinCurOutUcastPkts, nncPktStatisticsObjects=nncPktStatisticsObjects, nncPktVclStatEntry=nncPktVclStatEntry, nncPktStatisticsGroups=nncPktStatisticsGroups, nncPktVcl15MinIntInDiscards=nncPktVcl15MinIntInDiscards, nncPktStatisticsCompliance=nncPktStatisticsCompliance, nncPktVcl15MinIntCoS=nncPktVcl15MinIntCoS, nncPktVclStatGroup=nncPktVclStatGroup, NncPktVclCoSType=NncPktVclCoSType, nncPktVcl15MinCurOutErrors=nncPktVcl15MinCurOutErrors, nncPktVcl15MinIntTable=nncPktVcl15MinIntTable, nncPktVclStatInMulticastPkts=nncPktVclStatInMulticastPkts, nncPktVcl15MinCurInUcastPkts=nncPktVcl15MinCurInUcastPkts, nncPktVcl15MinIntOutMulticastPkts=nncPktVcl15MinIntOutMulticastPkts, nncPktVclStatOutMulticastPkts=nncPktVclStatOutMulticastPkts, nncPktVcl15MinIntInBroadcastPkts=nncPktVcl15MinIntInBroadcastPkts, nncPktVclStatOutUcastPkts=nncPktVclStatOutUcastPkts, nncPktVcl15MinCurAbsoluteIntervalNumber=nncPktVcl15MinCurAbsoluteIntervalNumber, nncPktVcl15MinIntEntry=nncPktVcl15MinIntEntry, nncPktVcl15MinIntInUcastPkts=nncPktVcl15MinIntInUcastPkts, nncPktVcl15MinCurEntry=nncPktVcl15MinCurEntry, nncPktVcl15MinCurInMulticastPkts=nncPktVcl15MinCurInMulticastPkts, nncPktVcl15MinIntGroup=nncPktVcl15MinIntGroup, nncPktVclStatOutOctets=nncPktVclStatOutOctets, nncPktVcl15MinIntAbsoluteIntervalNumber=nncPktVcl15MinIntAbsoluteIntervalNumber, nncPktStatisticsCompliances=nncPktStatisticsCompliances, nncPktVcl15MinCurOutDiscards=nncPktVcl15MinCurOutDiscards, nncPktVcl15MinIntOutUcastPkts=nncPktVcl15MinIntOutUcastPkts, nncPktVcl15MinIntOutDiscards=nncPktVcl15MinIntOutDiscards, PYSNMP_MODULE_ID=nncExtPktStatistics, nncPktVcl15MinIntNumber=nncPktVcl15MinIntNumber)
