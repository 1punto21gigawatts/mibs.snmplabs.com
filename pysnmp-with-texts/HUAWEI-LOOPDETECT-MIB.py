#
# PySNMP MIB module HUAWEI-LOOPDETECT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-LOOPDETECT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:46:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
huawei, = mibBuilder.importSymbols("HUAWEI-MIB", "huawei")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Bits, ModuleIdentity, Unsigned32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Integer32, Counter32, IpAddress, NotificationType, ObjectIdentity, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "ModuleIdentity", "Unsigned32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Integer32", "Counter32", "IpAddress", "NotificationType", "ObjectIdentity", "TimeTicks", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hwDatacomm = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 25))
hwLoopDetectMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 25, 180))
if mibBuilder.loadTexts: hwLoopDetectMIB.setLastUpdated('200810070000Z')
if mibBuilder.loadTexts: hwLoopDetectMIB.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwLoopDetectMIB.setContactInfo('L2-Adp Team Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China http://www.huawei.com Zip:100085 ')
if mibBuilder.loadTexts: hwLoopDetectMIB.setDescription('The LoopDetect MIB module is defined to indicate loop-detect function of Huawei Technologies co.,Ltd.')
hwLoopDetectCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 25, 180, 1), )
if mibBuilder.loadTexts: hwLoopDetectCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwLoopDetectCfgTable.setDescription('Indicates the table that shows the loop detect configuration and blocking state.')
hwLoopDetectCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 25, 180, 1, 1), ).setIndexNames((0, "HUAWEI-LOOPDETECT-MIB", "hwLoopDetectCfgPortIndex"))
if mibBuilder.loadTexts: hwLoopDetectCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwLoopDetectCfgEntry.setDescription('Indicates the entries about the loop detect configuration and blocking state.')
hwLoopDetectCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 25, 180, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hwLoopDetectCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwLoopDetectCfgPortIndex.setDescription('Indicates the interface index.')
hwLoopDetectCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 25, 180, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLoopDetectCfgPortName.setStatus('current')
if mibBuilder.loadTexts: hwLoopDetectCfgPortName.setDescription('Indicates the interface name.')
hwLoopDetectCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 25, 180, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLoopDetectCfg.setStatus('current')
if mibBuilder.loadTexts: hwLoopDetectCfg.setDescription('Indicates whether the loop detect function is enabled.')
hwLoopDetectCfgBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 25, 180, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLoopDetectCfgBlock.setStatus('current')
if mibBuilder.loadTexts: hwLoopDetectCfgBlock.setDescription('Indicates whether the interface can enter the blocking state after a loop is detected.')
hwLoopDetectCfgBlockTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 25, 180, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLoopDetectCfgBlockTime.setStatus('current')
if mibBuilder.loadTexts: hwLoopDetectCfgBlockTime.setDescription('Indicates the interval that is used to judge whether the loop disappears and the blocking state ends.')
hwLoopDetectCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 25, 180, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLoopDetectCfgPriority.setStatus('current')
if mibBuilder.loadTexts: hwLoopDetectCfgPriority.setDescription('Indicates the priority in loop detect.')
hwLoopDetectCfgTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 25, 180, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLoopDetectCfgTrigger.setStatus('current')
if mibBuilder.loadTexts: hwLoopDetectCfgTrigger.setDescription('Indicates whether the function of immediate interface Down/Up is triggered after a loop is detected.')
hwLoopDetectCfgSta = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 25, 180, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLoopDetectCfgSta.setStatus('current')
if mibBuilder.loadTexts: hwLoopDetectCfgSta.setDescription('Identify the interface that is blocked after a loop is detected.')
hwLoopDetectTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 25, 180, 2))
hwLoopDetectEnabled = NotificationType((1, 3, 6, 1, 4, 1, 2011, 25, 180, 2, 1)).setObjects(("HUAWEI-LOOPDETECT-MIB", "hwLoopDetectCfgPortName"))
if mibBuilder.loadTexts: hwLoopDetectEnabled.setStatus('current')
if mibBuilder.loadTexts: hwLoopDetectEnabled.setDescription('The loop detect function is enabled.')
hwLoopDetectDisabled = NotificationType((1, 3, 6, 1, 4, 1, 2011, 25, 180, 2, 2)).setObjects(("HUAWEI-LOOPDETECT-MIB", "hwLoopDetectCfgPortName"))
if mibBuilder.loadTexts: hwLoopDetectDisabled.setStatus('current')
if mibBuilder.loadTexts: hwLoopDetectDisabled.setDescription('The loop detect function is disabled.')
hwLoopDetectBlocked = NotificationType((1, 3, 6, 1, 4, 1, 2011, 25, 180, 2, 3)).setObjects(("HUAWEI-LOOPDETECT-MIB", "hwLoopDetectCfgPortName"))
if mibBuilder.loadTexts: hwLoopDetectBlocked.setStatus('current')
if mibBuilder.loadTexts: hwLoopDetectBlocked.setDescription('The interface is blocked.')
hwLoopDetectUnBlocked = NotificationType((1, 3, 6, 1, 4, 1, 2011, 25, 180, 2, 4)).setObjects(("HUAWEI-LOOPDETECT-MIB", "hwLoopDetectCfgPortName"))
if mibBuilder.loadTexts: hwLoopDetectUnBlocked.setStatus('current')
if mibBuilder.loadTexts: hwLoopDetectUnBlocked.setDescription('The interface is unblocked.')
hwLoopDetectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 25, 180, 3))
hwLoopDetectCfgEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 25, 180, 3, 1)).setObjects(("HUAWEI-LOOPDETECT-MIB", "hwLoopDetectCfgPortName"), ("HUAWEI-LOOPDETECT-MIB", "hwLoopDetectCfg"), ("HUAWEI-LOOPDETECT-MIB", "hwLoopDetectCfgBlock"), ("HUAWEI-LOOPDETECT-MIB", "hwLoopDetectCfgBlockTime"), ("HUAWEI-LOOPDETECT-MIB", "hwLoopDetectCfgPriority"), ("HUAWEI-LOOPDETECT-MIB", "hwLoopDetectCfgTrigger"), ("HUAWEI-LOOPDETECT-MIB", "hwLoopDetectCfgSta"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLoopDetectCfgEntryGroup = hwLoopDetectCfgEntryGroup.setStatus('current')
if mibBuilder.loadTexts: hwLoopDetectCfgEntryGroup.setDescription('Entries about the loop detect configuration and blocking state group.')
hwLoopDetectTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 25, 180, 3, 2)).setObjects(("HUAWEI-LOOPDETECT-MIB", "hwLoopDetectEnabled"), ("HUAWEI-LOOPDETECT-MIB", "hwLoopDetectDisabled"), ("HUAWEI-LOOPDETECT-MIB", "hwLoopDetectBlocked"), ("HUAWEI-LOOPDETECT-MIB", "hwLoopDetectUnBlocked"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLoopDetectTrapsGroup = hwLoopDetectTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: hwLoopDetectTrapsGroup.setDescription('Loop-detect traps group.')
mibBuilder.exportSymbols("HUAWEI-LOOPDETECT-MIB", hwLoopDetectCfgBlockTime=hwLoopDetectCfgBlockTime, hwLoopDetectCfgEntryGroup=hwLoopDetectCfgEntryGroup, hwLoopDetectCfgBlock=hwLoopDetectCfgBlock, hwLoopDetectCfg=hwLoopDetectCfg, hwLoopDetectCfgPriority=hwLoopDetectCfgPriority, hwLoopDetectGroups=hwLoopDetectGroups, hwLoopDetectCfgSta=hwLoopDetectCfgSta, hwLoopDetectTraps=hwLoopDetectTraps, hwLoopDetectCfgPortIndex=hwLoopDetectCfgPortIndex, PYSNMP_MODULE_ID=hwLoopDetectMIB, hwLoopDetectCfgEntry=hwLoopDetectCfgEntry, hwLoopDetectDisabled=hwLoopDetectDisabled, hwLoopDetectUnBlocked=hwLoopDetectUnBlocked, hwLoopDetectBlocked=hwLoopDetectBlocked, hwLoopDetectEnabled=hwLoopDetectEnabled, hwLoopDetectCfgPortName=hwLoopDetectCfgPortName, hwLoopDetectCfgTrigger=hwLoopDetectCfgTrigger, hwLoopDetectCfgTable=hwLoopDetectCfgTable, hwDatacomm=hwDatacomm, hwLoopDetectMIB=hwLoopDetectMIB, hwLoopDetectTrapsGroup=hwLoopDetectTrapsGroup)
