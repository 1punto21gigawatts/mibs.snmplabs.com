#
# PySNMP MIB module Nortel-Magellan-Passport-LanDriversMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-LanDriversMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:27:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
lp, lpIndex = mibBuilder.importSymbols("Nortel-Magellan-Passport-LogicalProcessorMIB", "lp", "lpIndex")
DisplayString, MacAddress, InterfaceIndex, Integer32, PassportCounter64, Counter32, FddiMACLongAddressType, FddiTimeNano, Gauge32, StorageType, FddiTimeMilli, Unsigned32, RowStatus = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "DisplayString", "MacAddress", "InterfaceIndex", "Integer32", "PassportCounter64", "Counter32", "FddiMACLongAddressType", "FddiTimeNano", "Gauge32", "StorageType", "FddiTimeMilli", "Unsigned32", "RowStatus")
EnterpriseDateAndTime, Link, AsciiString, NonReplicated = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "EnterpriseDateAndTime", "Link", "AsciiString", "NonReplicated")
components, passportMIBs = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "components", "passportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, TimeTicks, Counter32, Bits, iso, MibIdentifier, NotificationType, ModuleIdentity, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "TimeTicks", "Counter32", "Bits", "iso", "MibIdentifier", "NotificationType", "ModuleIdentity", "Unsigned32", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
lanDriversMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 30))
lpEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3))
lpEnetRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 1), )
if mibBuilder.loadTexts: lpEnetRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetRowStatusTable.setDescription('This entry controls the addition and deletion of lpEnet components.')
lpEnetRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"))
if mibBuilder.loadTexts: lpEnetRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetRowStatusEntry.setDescription('A single entry in the table represents a single lpEnet component.')
lpEnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEnet components. These components can be added and deleted.')
lpEnetComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEnetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetStorageType.setDescription('This variable represents the storage type value for the lpEnet tables.')
lpEnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)))
if mibBuilder.loadTexts: lpEnetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetIndex.setDescription('This variable represents the index for the lpEnet tables.')
lpEnetCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 10), )
if mibBuilder.loadTexts: lpEnetCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
lpEnetCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"))
if mibBuilder.loadTexts: lpEnetCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetCidDataEntry.setDescription('An entry in the lpEnetCidDataTable.')
lpEnetCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
lpEnetIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 11), )
if mibBuilder.loadTexts: lpEnetIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
lpEnetIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"))
if mibBuilder.loadTexts: lpEnetIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetIfEntryEntry.setDescription('An entry in the lpEnetIfEntryTable.')
lpEnetIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
lpEnetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 11, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
lpEnetProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 12), )
if mibBuilder.loadTexts: lpEnetProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetProvTable.setDescription('This group contains provisioned attributes for the Ethernet component.')
lpEnetProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"))
if mibBuilder.loadTexts: lpEnetProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetProvEntry.setDescription('An entry in the lpEnetProvTable.')
lpEnetHeartbeatPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetHeartbeatPacket.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetHeartbeatPacket.setDescription('The heartbeat packet feature is used to select whether or not the station will generate a heartbeat packet. If enabled, the station will generate one heartbeat packet every second. If disabled, the station will not generate any heartbeat packets.')
lpEnetApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 12, 1, 2), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetApplicationFramerName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetApplicationFramerName.setDescription('This attribute contains the component name of a Framer which is associated with the Ethernet component. This link is used by the component administration system (CAS) to identify which card the application component (associated with the Framer component) is to be created.')
lpEnetAdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 13), )
if mibBuilder.loadTexts: lpEnetAdminInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetAdminInfoTable.setDescription('This group contains the attributes pertaining to the vendor of the equipment.')
lpEnetAdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"))
if mibBuilder.loadTexts: lpEnetAdminInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetAdminInfoEntry.setDescription('An entry in the lpEnetAdminInfoTable.')
lpEnetVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 13, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetVendor.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetVendor.setDescription('This is the name of the vendor supplying the facility.')
lpEnetCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 13, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetCommentText.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetCommentText.setDescription('Any miscellaneous text about the facility.')
lpEnetStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 15), )
if mibBuilder.loadTexts: lpEnetStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
lpEnetStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"))
if mibBuilder.loadTexts: lpEnetStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetStateEntry.setDescription('An entry in the lpEnetStateTable.')
lpEnetAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
lpEnetOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
lpEnetUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
lpEnetOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 16), )
if mibBuilder.loadTexts: lpEnetOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
lpEnetOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"))
if mibBuilder.loadTexts: lpEnetOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetOperStatusEntry.setDescription('An entry in the lpEnetOperStatusTable.')
lpEnetSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
lpEnetOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 17), )
if mibBuilder.loadTexts: lpEnetOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetOperTable.setDescription('This group contains the operational attributes of the Ethernet component.')
lpEnetOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 17, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"))
if mibBuilder.loadTexts: lpEnetOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetOperEntry.setDescription('An entry in the lpEnetOperTable.')
lpEnetMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 17, 1, 1), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetMacAddress.setDescription('The medium access controller (MAC) address is an address that is only recognized by one station on the network The value of this attribute will be assigned by the system. MAC address is displayed in canonical format.')
lpEnetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 18), )
if mibBuilder.loadTexts: lpEnetStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetStatsTable.setDescription('This group contains statistical attributes for the Ethernet component.')
lpEnetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 18, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"))
if mibBuilder.loadTexts: lpEnetStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetStatsEntry.setDescription('An entry in the lpEnetStatsTable.')
lpEnetAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetAlignmentErrors.setDescription('The alignmentErrors counter indicates the number of frames received which were not an integral number of octets in length. Frames will be checked for alignmentErrors before they are checked for Frame Check Sequence (FCS) errors. If there is an alignment error, the error will only be counted here and not in fcsErrors. This counter will wrap around after it reaches its maximum value.')
lpEnetFcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetFcsErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetFcsErrors.setDescription('The fcsErrors, Frame Check Sequence (FCS) error, counter indicates the number of frames received which were an integral number of octets in length and did not pass the FCS check. This counter will wrap around after it reaches its maximum value.')
lpEnetSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetSingleCollisionFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetSingleCollisionFrames.setDescription('The singleCollisionFrames counter indicates the number of frames successfully transmitted which experienced exactly one collision. This counter will wrap around after it reaches its maximum value.')
lpEnetMultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetMultipleCollisionFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetMultipleCollisionFrames.setDescription('The multipleCollisionFrames counter indicates the number of frames successfully transmitted which experienced more than one collision. This counter will wrap around after it reaches its maximum value.')
lpEnetSqeTestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetSqeTestErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetSqeTestErrors.setDescription("The sqeTestErrors, Signal Quality Error (SQE) Test errors, counter indicates the number of times the 'SQE Test Error' message has been generated for the station. This counter will wrap around after it reaches its maximum value.")
lpEnetDeferredTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetDeferredTransmissions.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetDeferredTransmissions.setDescription('The deferredTransmissions counter indicates the number of frames which experienced a transmission delay because the medium was busy. This counter will wrap around after it reaches its maximum value.')
lpEnetLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLateCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLateCollisions.setDescription('The lateCollisions counter indicates the number of times a collision was detected later than 512 bit-times into the transmission of a packet. This counter will wrap around after it reaches its maximum value.')
lpEnetExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetExcessiveCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetExcessiveCollisions.setDescription('The excessiveCollisions counter indicates the number of frames which failed to get transmitted due to excessive collisions. This counter will wrap around after it reaches its maximum value.')
lpEnetMacTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetMacTransmitErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetMacTransmitErrors.setDescription('The Medium Access Controller (MAC) transmit error counter indicates the number of times that a transmission failed due to internal MAC transmit errors. This counter will wrap around after it reaches its maximum value.')
lpEnetCarrierSenseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetCarrierSenseErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetCarrierSenseErrors.setDescription('The carrier sense error counter indicates the number of times that the carrier sense condition was lost or never asserted when attempting to transmit a frame. This counter will wrap around after it reaches its maximum value.')
lpEnetFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetFrameTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetFrameTooLongs.setDescription('The frame too long counter indicates the number of frames received which exceeded the maximum frame size. This counter will wrap around after it reaches its maximum value.')
lpEnetMacReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetMacReceiveErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetMacReceiveErrors.setDescription('The Medium Access Controller (MAC) receive error counter indicates the number of times a receive failed due to internal MAC receive errors. This counter will wrap around after it reaches its maximum value.')
lpEnetLt = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2))
lpEnetLtRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 1), )
if mibBuilder.loadTexts: lpEnetLtRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtRowStatusTable.setDescription('This entry controls the addition and deletion of lpEnetLt components.')
lpEnetLtRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"))
if mibBuilder.loadTexts: lpEnetLtRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtRowStatusEntry.setDescription('A single entry in the table represents a single lpEnetLt component.')
lpEnetLtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEnetLt components. These components cannot be added nor deleted.')
lpEnetLtComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEnetLtStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtStorageType.setDescription('This variable represents the storage type value for the lpEnetLt tables.')
lpEnetLtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEnetLtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtIndex.setDescription('This variable represents the index for the lpEnetLt tables.')
lpEnetLtTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 20), )
if mibBuilder.loadTexts: lpEnetLtTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEnetLtTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 20, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"))
if mibBuilder.loadTexts: lpEnetLtTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtTopEntry.setDescription('An entry in the lpEnetLtTopTable.')
lpEnetLtTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 20, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetLtTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtTData.setDescription('This attribute is used to display and set attributes.')
lpEnetLtFrmCmp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 2))
lpEnetLtFrmCmpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 2, 1), )
if mibBuilder.loadTexts: lpEnetLtFrmCmpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFrmCmpRowStatusTable.setDescription('This entry controls the addition and deletion of lpEnetLtFrmCmp components.')
lpEnetLtFrmCmpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFrmCmpIndex"))
if mibBuilder.loadTexts: lpEnetLtFrmCmpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFrmCmpRowStatusEntry.setDescription('A single entry in the table represents a single lpEnetLtFrmCmp component.')
lpEnetLtFrmCmpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFrmCmpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFrmCmpRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEnetLtFrmCmp components. These components cannot be added nor deleted.')
lpEnetLtFrmCmpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFrmCmpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFrmCmpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEnetLtFrmCmpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFrmCmpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFrmCmpStorageType.setDescription('This variable represents the storage type value for the lpEnetLtFrmCmp tables.')
lpEnetLtFrmCmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEnetLtFrmCmpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFrmCmpIndex.setDescription('This variable represents the index for the lpEnetLtFrmCmp tables.')
lpEnetLtFrmCmpTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 2, 10), )
if mibBuilder.loadTexts: lpEnetLtFrmCmpTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFrmCmpTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEnetLtFrmCmpTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFrmCmpIndex"))
if mibBuilder.loadTexts: lpEnetLtFrmCmpTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFrmCmpTopEntry.setDescription('An entry in the lpEnetLtFrmCmpTopTable.')
lpEnetLtFrmCmpTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetLtFrmCmpTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFrmCmpTData.setDescription('This attribute is used to display and set attributes.')
lpEnetLtFrmCpy = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 3))
lpEnetLtFrmCpyRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 3, 1), )
if mibBuilder.loadTexts: lpEnetLtFrmCpyRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFrmCpyRowStatusTable.setDescription('This entry controls the addition and deletion of lpEnetLtFrmCpy components.')
lpEnetLtFrmCpyRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFrmCpyIndex"))
if mibBuilder.loadTexts: lpEnetLtFrmCpyRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFrmCpyRowStatusEntry.setDescription('A single entry in the table represents a single lpEnetLtFrmCpy component.')
lpEnetLtFrmCpyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFrmCpyRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFrmCpyRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEnetLtFrmCpy components. These components cannot be added nor deleted.')
lpEnetLtFrmCpyComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFrmCpyComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFrmCpyComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEnetLtFrmCpyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFrmCpyStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFrmCpyStorageType.setDescription('This variable represents the storage type value for the lpEnetLtFrmCpy tables.')
lpEnetLtFrmCpyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEnetLtFrmCpyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFrmCpyIndex.setDescription('This variable represents the index for the lpEnetLtFrmCpy tables.')
lpEnetLtFrmCpyTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 3, 10), )
if mibBuilder.loadTexts: lpEnetLtFrmCpyTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFrmCpyTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEnetLtFrmCpyTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFrmCpyIndex"))
if mibBuilder.loadTexts: lpEnetLtFrmCpyTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFrmCpyTopEntry.setDescription('An entry in the lpEnetLtFrmCpyTopTable.')
lpEnetLtFrmCpyTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetLtFrmCpyTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFrmCpyTData.setDescription('This attribute is used to display and set attributes.')
lpEnetLtPrtCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 4))
lpEnetLtPrtCfgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 4, 1), )
if mibBuilder.loadTexts: lpEnetLtPrtCfgRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtPrtCfgRowStatusTable.setDescription('This entry controls the addition and deletion of lpEnetLtPrtCfg components.')
lpEnetLtPrtCfgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtPrtCfgIndex"))
if mibBuilder.loadTexts: lpEnetLtPrtCfgRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtPrtCfgRowStatusEntry.setDescription('A single entry in the table represents a single lpEnetLtPrtCfg component.')
lpEnetLtPrtCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtPrtCfgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtPrtCfgRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEnetLtPrtCfg components. These components cannot be added nor deleted.')
lpEnetLtPrtCfgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtPrtCfgComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtPrtCfgComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEnetLtPrtCfgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtPrtCfgStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtPrtCfgStorageType.setDescription('This variable represents the storage type value for the lpEnetLtPrtCfg tables.')
lpEnetLtPrtCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEnetLtPrtCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtPrtCfgIndex.setDescription('This variable represents the index for the lpEnetLtPrtCfg tables.')
lpEnetLtPrtCfgTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 4, 10), )
if mibBuilder.loadTexts: lpEnetLtPrtCfgTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtPrtCfgTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEnetLtPrtCfgTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtPrtCfgIndex"))
if mibBuilder.loadTexts: lpEnetLtPrtCfgTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtPrtCfgTopEntry.setDescription('An entry in the lpEnetLtPrtCfgTopTable.')
lpEnetLtPrtCfgTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetLtPrtCfgTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtPrtCfgTData.setDescription('This attribute is used to display and set attributes.')
lpEnetLtFb = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5))
lpEnetLtFbRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 1), )
if mibBuilder.loadTexts: lpEnetLtFbRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbRowStatusTable.setDescription('This entry controls the addition and deletion of lpEnetLtFb components.')
lpEnetLtFbRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIndex"))
if mibBuilder.loadTexts: lpEnetLtFbRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbRowStatusEntry.setDescription('A single entry in the table represents a single lpEnetLtFb component.')
lpEnetLtFbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEnetLtFb components. These components cannot be added nor deleted.')
lpEnetLtFbComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEnetLtFbStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbStorageType.setDescription('This variable represents the storage type value for the lpEnetLtFb tables.')
lpEnetLtFbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEnetLtFbIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbIndex.setDescription('This variable represents the index for the lpEnetLtFb tables.')
lpEnetLtFbTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 20), )
if mibBuilder.loadTexts: lpEnetLtFbTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEnetLtFbTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 20, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIndex"))
if mibBuilder.loadTexts: lpEnetLtFbTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbTopEntry.setDescription('An entry in the lpEnetLtFbTopTable.')
lpEnetLtFbTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 20, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetLtFbTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbTData.setDescription('This attribute is used to display and set attributes.')
lpEnetLtFbTxInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 2))
lpEnetLtFbTxInfoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 2, 1), )
if mibBuilder.loadTexts: lpEnetLtFbTxInfoRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbTxInfoRowStatusTable.setDescription('This entry controls the addition and deletion of lpEnetLtFbTxInfo components.')
lpEnetLtFbTxInfoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbTxInfoIndex"))
if mibBuilder.loadTexts: lpEnetLtFbTxInfoRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbTxInfoRowStatusEntry.setDescription('A single entry in the table represents a single lpEnetLtFbTxInfo component.')
lpEnetLtFbTxInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbTxInfoRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbTxInfoRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEnetLtFbTxInfo components. These components cannot be added nor deleted.')
lpEnetLtFbTxInfoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbTxInfoComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbTxInfoComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEnetLtFbTxInfoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbTxInfoStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbTxInfoStorageType.setDescription('This variable represents the storage type value for the lpEnetLtFbTxInfo tables.')
lpEnetLtFbTxInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEnetLtFbTxInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbTxInfoIndex.setDescription('This variable represents the index for the lpEnetLtFbTxInfo tables.')
lpEnetLtFbTxInfoTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 2, 10), )
if mibBuilder.loadTexts: lpEnetLtFbTxInfoTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbTxInfoTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEnetLtFbTxInfoTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbTxInfoIndex"))
if mibBuilder.loadTexts: lpEnetLtFbTxInfoTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbTxInfoTopEntry.setDescription('An entry in the lpEnetLtFbTxInfoTopTable.')
lpEnetLtFbTxInfoTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetLtFbTxInfoTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbTxInfoTData.setDescription('This attribute is used to display and set attributes.')
lpEnetLtFbFddiMac = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 3))
lpEnetLtFbFddiMacRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 3, 1), )
if mibBuilder.loadTexts: lpEnetLtFbFddiMacRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbFddiMacRowStatusTable.setDescription('This entry controls the addition and deletion of lpEnetLtFbFddiMac components.')
lpEnetLtFbFddiMacRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbFddiMacIndex"))
if mibBuilder.loadTexts: lpEnetLtFbFddiMacRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbFddiMacRowStatusEntry.setDescription('A single entry in the table represents a single lpEnetLtFbFddiMac component.')
lpEnetLtFbFddiMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbFddiMacRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbFddiMacRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEnetLtFbFddiMac components. These components cannot be added nor deleted.')
lpEnetLtFbFddiMacComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbFddiMacComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbFddiMacComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEnetLtFbFddiMacStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbFddiMacStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbFddiMacStorageType.setDescription('This variable represents the storage type value for the lpEnetLtFbFddiMac tables.')
lpEnetLtFbFddiMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEnetLtFbFddiMacIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbFddiMacIndex.setDescription('This variable represents the index for the lpEnetLtFbFddiMac tables.')
lpEnetLtFbFddiMacTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 3, 10), )
if mibBuilder.loadTexts: lpEnetLtFbFddiMacTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbFddiMacTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEnetLtFbFddiMacTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbFddiMacIndex"))
if mibBuilder.loadTexts: lpEnetLtFbFddiMacTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbFddiMacTopEntry.setDescription('An entry in the lpEnetLtFbFddiMacTopTable.')
lpEnetLtFbFddiMacTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetLtFbFddiMacTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbFddiMacTData.setDescription('This attribute is used to display and set attributes.')
lpEnetLtFbMacEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 4))
lpEnetLtFbMacEnetRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 4, 1), )
if mibBuilder.loadTexts: lpEnetLtFbMacEnetRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbMacEnetRowStatusTable.setDescription('This entry controls the addition and deletion of lpEnetLtFbMacEnet components.')
lpEnetLtFbMacEnetRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbMacEnetIndex"))
if mibBuilder.loadTexts: lpEnetLtFbMacEnetRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbMacEnetRowStatusEntry.setDescription('A single entry in the table represents a single lpEnetLtFbMacEnet component.')
lpEnetLtFbMacEnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbMacEnetRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbMacEnetRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEnetLtFbMacEnet components. These components cannot be added nor deleted.')
lpEnetLtFbMacEnetComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbMacEnetComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbMacEnetComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEnetLtFbMacEnetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbMacEnetStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbMacEnetStorageType.setDescription('This variable represents the storage type value for the lpEnetLtFbMacEnet tables.')
lpEnetLtFbMacEnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEnetLtFbMacEnetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbMacEnetIndex.setDescription('This variable represents the index for the lpEnetLtFbMacEnet tables.')
lpEnetLtFbMacEnetTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 4, 10), )
if mibBuilder.loadTexts: lpEnetLtFbMacEnetTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbMacEnetTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEnetLtFbMacEnetTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbMacEnetIndex"))
if mibBuilder.loadTexts: lpEnetLtFbMacEnetTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbMacEnetTopEntry.setDescription('An entry in the lpEnetLtFbMacEnetTopTable.')
lpEnetLtFbMacEnetTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetLtFbMacEnetTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbMacEnetTData.setDescription('This attribute is used to display and set attributes.')
lpEnetLtFbMacTr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 5))
lpEnetLtFbMacTrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 5, 1), )
if mibBuilder.loadTexts: lpEnetLtFbMacTrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbMacTrRowStatusTable.setDescription('This entry controls the addition and deletion of lpEnetLtFbMacTr components.')
lpEnetLtFbMacTrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbMacTrIndex"))
if mibBuilder.loadTexts: lpEnetLtFbMacTrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbMacTrRowStatusEntry.setDescription('A single entry in the table represents a single lpEnetLtFbMacTr component.')
lpEnetLtFbMacTrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbMacTrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbMacTrRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEnetLtFbMacTr components. These components cannot be added nor deleted.')
lpEnetLtFbMacTrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbMacTrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbMacTrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEnetLtFbMacTrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbMacTrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbMacTrStorageType.setDescription('This variable represents the storage type value for the lpEnetLtFbMacTr tables.')
lpEnetLtFbMacTrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEnetLtFbMacTrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbMacTrIndex.setDescription('This variable represents the index for the lpEnetLtFbMacTr tables.')
lpEnetLtFbMacTrTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 5, 10), )
if mibBuilder.loadTexts: lpEnetLtFbMacTrTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbMacTrTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEnetLtFbMacTrTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbMacTrIndex"))
if mibBuilder.loadTexts: lpEnetLtFbMacTrTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbMacTrTopEntry.setDescription('An entry in the lpEnetLtFbMacTrTopTable.')
lpEnetLtFbMacTrTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 5, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetLtFbMacTrTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbMacTrTData.setDescription('This attribute is used to display and set attributes.')
lpEnetLtFbData = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 6))
lpEnetLtFbDataRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 6, 1), )
if mibBuilder.loadTexts: lpEnetLtFbDataRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbDataRowStatusTable.setDescription('This entry controls the addition and deletion of lpEnetLtFbData components.')
lpEnetLtFbDataRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbDataIndex"))
if mibBuilder.loadTexts: lpEnetLtFbDataRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbDataRowStatusEntry.setDescription('A single entry in the table represents a single lpEnetLtFbData component.')
lpEnetLtFbDataRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbDataRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbDataRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEnetLtFbData components. These components cannot be added nor deleted.')
lpEnetLtFbDataComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbDataComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbDataComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEnetLtFbDataStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbDataStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbDataStorageType.setDescription('This variable represents the storage type value for the lpEnetLtFbData tables.')
lpEnetLtFbDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEnetLtFbDataIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbDataIndex.setDescription('This variable represents the index for the lpEnetLtFbData tables.')
lpEnetLtFbDataTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 6, 10), )
if mibBuilder.loadTexts: lpEnetLtFbDataTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbDataTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEnetLtFbDataTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbDataIndex"))
if mibBuilder.loadTexts: lpEnetLtFbDataTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbDataTopEntry.setDescription('An entry in the lpEnetLtFbDataTopTable.')
lpEnetLtFbDataTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 6, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetLtFbDataTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbDataTData.setDescription('This attribute is used to display and set attributes.')
lpEnetLtFbIpH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 7))
lpEnetLtFbIpHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 7, 1), )
if mibBuilder.loadTexts: lpEnetLtFbIpHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbIpHRowStatusTable.setDescription('This entry controls the addition and deletion of lpEnetLtFbIpH components.')
lpEnetLtFbIpHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIpHIndex"))
if mibBuilder.loadTexts: lpEnetLtFbIpHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbIpHRowStatusEntry.setDescription('A single entry in the table represents a single lpEnetLtFbIpH component.')
lpEnetLtFbIpHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbIpHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbIpHRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEnetLtFbIpH components. These components cannot be added nor deleted.')
lpEnetLtFbIpHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbIpHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbIpHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEnetLtFbIpHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbIpHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbIpHStorageType.setDescription('This variable represents the storage type value for the lpEnetLtFbIpH tables.')
lpEnetLtFbIpHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEnetLtFbIpHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbIpHIndex.setDescription('This variable represents the index for the lpEnetLtFbIpH tables.')
lpEnetLtFbIpHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 7, 10), )
if mibBuilder.loadTexts: lpEnetLtFbIpHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbIpHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEnetLtFbIpHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 7, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIpHIndex"))
if mibBuilder.loadTexts: lpEnetLtFbIpHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbIpHTopEntry.setDescription('An entry in the lpEnetLtFbIpHTopTable.')
lpEnetLtFbIpHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 7, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetLtFbIpHTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbIpHTData.setDescription('This attribute is used to display and set attributes.')
lpEnetLtFbLlch = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 8))
lpEnetLtFbLlchRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 8, 1), )
if mibBuilder.loadTexts: lpEnetLtFbLlchRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbLlchRowStatusTable.setDescription('This entry controls the addition and deletion of lpEnetLtFbLlch components.')
lpEnetLtFbLlchRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 8, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbLlchIndex"))
if mibBuilder.loadTexts: lpEnetLtFbLlchRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbLlchRowStatusEntry.setDescription('A single entry in the table represents a single lpEnetLtFbLlch component.')
lpEnetLtFbLlchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 8, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbLlchRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbLlchRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEnetLtFbLlch components. These components cannot be added nor deleted.')
lpEnetLtFbLlchComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbLlchComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbLlchComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEnetLtFbLlchStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbLlchStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbLlchStorageType.setDescription('This variable represents the storage type value for the lpEnetLtFbLlch tables.')
lpEnetLtFbLlchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 8, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEnetLtFbLlchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbLlchIndex.setDescription('This variable represents the index for the lpEnetLtFbLlch tables.')
lpEnetLtFbLlchTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 8, 10), )
if mibBuilder.loadTexts: lpEnetLtFbLlchTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbLlchTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEnetLtFbLlchTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 8, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbLlchIndex"))
if mibBuilder.loadTexts: lpEnetLtFbLlchTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbLlchTopEntry.setDescription('An entry in the lpEnetLtFbLlchTopTable.')
lpEnetLtFbLlchTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 8, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetLtFbLlchTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbLlchTData.setDescription('This attribute is used to display and set attributes.')
lpEnetLtFbAppleH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 9))
lpEnetLtFbAppleHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 9, 1), )
if mibBuilder.loadTexts: lpEnetLtFbAppleHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbAppleHRowStatusTable.setDescription('This entry controls the addition and deletion of lpEnetLtFbAppleH components.')
lpEnetLtFbAppleHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 9, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbAppleHIndex"))
if mibBuilder.loadTexts: lpEnetLtFbAppleHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbAppleHRowStatusEntry.setDescription('A single entry in the table represents a single lpEnetLtFbAppleH component.')
lpEnetLtFbAppleHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbAppleHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbAppleHRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEnetLtFbAppleH components. These components cannot be added nor deleted.')
lpEnetLtFbAppleHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbAppleHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbAppleHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEnetLtFbAppleHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbAppleHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbAppleHStorageType.setDescription('This variable represents the storage type value for the lpEnetLtFbAppleH tables.')
lpEnetLtFbAppleHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 9, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEnetLtFbAppleHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbAppleHIndex.setDescription('This variable represents the index for the lpEnetLtFbAppleH tables.')
lpEnetLtFbAppleHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 9, 10), )
if mibBuilder.loadTexts: lpEnetLtFbAppleHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbAppleHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEnetLtFbAppleHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 9, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbAppleHIndex"))
if mibBuilder.loadTexts: lpEnetLtFbAppleHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbAppleHTopEntry.setDescription('An entry in the lpEnetLtFbAppleHTopTable.')
lpEnetLtFbAppleHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 9, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetLtFbAppleHTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbAppleHTData.setDescription('This attribute is used to display and set attributes.')
lpEnetLtFbIpxH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 10))
lpEnetLtFbIpxHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 10, 1), )
if mibBuilder.loadTexts: lpEnetLtFbIpxHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbIpxHRowStatusTable.setDescription('This entry controls the addition and deletion of lpEnetLtFbIpxH components.')
lpEnetLtFbIpxHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 10, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIpxHIndex"))
if mibBuilder.loadTexts: lpEnetLtFbIpxHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbIpxHRowStatusEntry.setDescription('A single entry in the table represents a single lpEnetLtFbIpxH component.')
lpEnetLtFbIpxHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 10, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbIpxHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbIpxHRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEnetLtFbIpxH components. These components cannot be added nor deleted.')
lpEnetLtFbIpxHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbIpxHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbIpxHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEnetLtFbIpxHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtFbIpxHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbIpxHStorageType.setDescription('This variable represents the storage type value for the lpEnetLtFbIpxH tables.')
lpEnetLtFbIpxHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 10, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEnetLtFbIpxHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbIpxHIndex.setDescription('This variable represents the index for the lpEnetLtFbIpxH tables.')
lpEnetLtFbIpxHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 10, 10), )
if mibBuilder.loadTexts: lpEnetLtFbIpxHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbIpxHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEnetLtFbIpxHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 10, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtFbIpxHIndex"))
if mibBuilder.loadTexts: lpEnetLtFbIpxHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbIpxHTopEntry.setDescription('An entry in the lpEnetLtFbIpxHTopTable.')
lpEnetLtFbIpxHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 5, 10, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetLtFbIpxHTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtFbIpxHTData.setDescription('This attribute is used to display and set attributes.')
lpEnetLtCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 6))
lpEnetLtCntlRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 6, 1), )
if mibBuilder.loadTexts: lpEnetLtCntlRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtCntlRowStatusTable.setDescription('This entry controls the addition and deletion of lpEnetLtCntl components.')
lpEnetLtCntlRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtCntlIndex"))
if mibBuilder.loadTexts: lpEnetLtCntlRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtCntlRowStatusEntry.setDescription('A single entry in the table represents a single lpEnetLtCntl component.')
lpEnetLtCntlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtCntlRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtCntlRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEnetLtCntl components. These components cannot be added nor deleted.')
lpEnetLtCntlComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtCntlComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtCntlComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEnetLtCntlStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetLtCntlStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtCntlStorageType.setDescription('This variable represents the storage type value for the lpEnetLtCntl tables.')
lpEnetLtCntlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEnetLtCntlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtCntlIndex.setDescription('This variable represents the index for the lpEnetLtCntl tables.')
lpEnetLtCntlTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 6, 10), )
if mibBuilder.loadTexts: lpEnetLtCntlTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtCntlTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEnetLtCntlTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetLtCntlIndex"))
if mibBuilder.loadTexts: lpEnetLtCntlTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtCntlTopEntry.setDescription('An entry in the lpEnetLtCntlTopTable.')
lpEnetLtCntlTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 2, 6, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetLtCntlTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetLtCntlTData.setDescription('This attribute is used to display and set attributes.')
lpEnetTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5))
lpEnetTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5, 1), )
if mibBuilder.loadTexts: lpEnetTestRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetTestRowStatusTable.setDescription('This entry controls the addition and deletion of lpEnetTest components.')
lpEnetTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetTestIndex"))
if mibBuilder.loadTexts: lpEnetTestRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetTestRowStatusEntry.setDescription('A single entry in the table represents a single lpEnetTest component.')
lpEnetTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetTestRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetTestRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEnetTest components. These components cannot be added nor deleted.')
lpEnetTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetTestComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetTestComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEnetTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetTestStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetTestStorageType.setDescription('This variable represents the storage type value for the lpEnetTest tables.')
lpEnetTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEnetTestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetTestIndex.setDescription('This variable represents the index for the lpEnetTest tables.')
lpEnetTestPTOTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5, 10), )
if mibBuilder.loadTexts: lpEnetTestPTOTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetTestPTOTable.setDescription('This group contains the operational data for the LanPortTest component.')
lpEnetTestPTOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetTestIndex"))
if mibBuilder.loadTexts: lpEnetTestPTOEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetTestPTOEntry.setDescription('An entry in the lpEnetTestPTOTable.')
lpEnetTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268))).clone(namedValues=NamedValues(("onCard", 0), ("normal", 1), ("wrapA", 257), ("wrapB", 258), ("thruA", 259), ("thruB", 260), ("extWrapA", 263), ("extWrapB", 264), ("extThruA", 265), ("extThruB", 266), ("extWrapAB", 267), ("extWrapBA", 268)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetTestType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetTestType.setDescription('This attribute is the type of test to be run. The available test types include the following: card test sets up an internal loop on the board and runs a bit error rate test; manual test assumes the line is looped back externally and a bit error rate test is performed; localLoop test loops back the local modem and performs a bit error rate test; remoteLoop test loops back the remote modem (or CSU) and performs a bit error rate test; externalLoop test loops back the line to the far end; payloadLoop test only loops back the payload data received from the incoming line; Note that localLoop, remoteLoop and payloadLoop are not supported by all function processors.')
lpEnetTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetTestFrmSize.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetTestFrmSize.setDescription('This attribute defines the size of the test data frames in number of bytes.')
lpEnetTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEnetTestDuration.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetTestDuration.setDescription('This attribute is the duration (in minutes) that test data will be transmitted. In the case of an externalLoop, this is the time that the loop is in effect. Note that dataStartDelay does not apply to the externalLoop.')
lpEnetTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5, 11), )
if mibBuilder.loadTexts: lpEnetTestResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetTestResultsTable.setDescription('This group contains all the statistics related attributes of the Test component.')
lpEnetTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEnetTestIndex"))
if mibBuilder.loadTexts: lpEnetTestResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetTestResultsEntry.setDescription('An entry in the lpEnetTestResultsTable.')
lpEnetTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetTestElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetTestElapsedTime.setDescription('This attribute is the number of minutes elapsed since the test started for an externalLoop test. For a data test, this is the time since test data was first transmitted.')
lpEnetTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetTestTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetTestTimeRemaining.setDescription('This attribute is the number of minutes remaining before the test is to be stopped according to the duration attribute.')
lpEnetTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetTestCauseOfTermination.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetTestCauseOfTermination.setDescription('This attribute records the reason the test is terminated.')
lpEnetTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5, 11, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetTestFrmTx.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetTestFrmTx.setDescription('This attribute is the total number of frames sent during the test period. This counter is not expected to reach its maximum value.')
lpEnetTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5, 11, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetTestBitsTx.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetTestBitsTx.setDescription('This attribute is the total number of bits sent during the test period. This counter is not expected to reach its maximum value.')
lpEnetTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5, 11, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetTestFrmRx.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetTestFrmRx.setDescription('This attribute is the total number of frames received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
lpEnetTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5, 11, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetTestBitsRx.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetTestBitsRx.setDescription('This attribute is the total number of bits received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
lpEnetTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 3, 5, 11, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEnetTestErroredFrmRx.setStatus('mandatory')
if mibBuilder.loadTexts: lpEnetTestErroredFrmRx.setDescription('This attribute is the total number of errored frames received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
lpFi = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4))
lpFiRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 1), )
if mibBuilder.loadTexts: lpFiRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiRowStatusTable.setDescription('This entry controls the addition and deletion of lpFi components.')
lpFiRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"))
if mibBuilder.loadTexts: lpFiRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiRowStatusEntry.setDescription('A single entry in the table represents a single lpFi component.')
lpFiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpFi components. These components can be added and deleted.')
lpFiComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpFiStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiStorageType.setDescription('This variable represents the storage type value for the lpFi tables.')
lpFiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: lpFiIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiIndex.setDescription('This variable represents the index for the lpFi tables.')
lpFiCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 10), )
if mibBuilder.loadTexts: lpFiCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
lpFiCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"))
if mibBuilder.loadTexts: lpFiCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiCidDataEntry.setDescription('An entry in the lpFiCidDataTable.')
lpFiCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
lpFiIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 11), )
if mibBuilder.loadTexts: lpFiIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
lpFiIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"))
if mibBuilder.loadTexts: lpFiIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiIfEntryEntry.setDescription('An entry in the lpFiIfEntryTable.')
lpFiIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
lpFiIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 11, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
lpFiSmtProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 12), )
if mibBuilder.loadTexts: lpFiSmtProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiSmtProvTable.setDescription('This group contains the provisionable Station Management (SMT) attributes of the Fddi component.')
lpFiSmtProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"))
if mibBuilder.loadTexts: lpFiSmtProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiSmtProvEntry.setDescription('An entry in the lpFiSmtProvTable.')
lpFiUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="46444449")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiUserData.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiUserData.setDescription('The user data field is used to identify the FDDI interface on the ring. The user data contains a message with a maximum of 32 characters.')
lpFiAcceptAa = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiAcceptAa.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiAcceptAa.setDescription('The acceptAa attribute defines the station type A to station type A connection policy. If enabled, the connection will be accepted. If disabled, the connection will be rejected.')
lpFiAcceptBb = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiAcceptBb.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiAcceptBb.setDescription('The acceptBb attribute defines the station type B to station type B connection policy. If enabled, the connection will be accepted. If disabled, the connection will be rejected.')
lpFiAcceptAs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiAcceptAs.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiAcceptAs.setDescription('The acceptAs attribute defines the station type A to station type S connection policy. If enabled, the connection will be accepted. If disabled, the connection will be rejected.')
lpFiAcceptBs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiAcceptBs.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiAcceptBs.setDescription('The acceptBs attribute defines the station type B to station type S connection policy. If enabled, the connection will be accepted. If disabled, the connection will be rejected.')
lpFiAcceptAm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiAcceptAm.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiAcceptAm.setDescription('The acceptAm attribute defines the station type A to station type M connection policy. If enabled, the connection will be accepted. If disabled, the connection will be rejected.')
lpFiAcceptBm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiAcceptBm.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiAcceptBm.setDescription('The acceptBm attribute defines the station type B to station type M connection policy. If enabled, the connection will be accepted. If disabled, the connection will be rejected.')
lpFiUseThruBa = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiUseThruBa.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiUseThruBa.setDescription('The useThruBa attribute is used to configure the requested path of the associated station. If enabled, only the secondary preferred path is permitted. If disabled, only the primary preferred path is permitted.')
lpFiNeighborNotifyInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 30)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiNeighborNotifyInterval.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiNeighborNotifyInterval.setDescription('The neighborNotifyInterval attribute contains the amount of time, expressed in seconds, between neighbor notification frames.')
lpFiStatusReportPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiStatusReportPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiStatusReportPolicy.setDescription('The statusReportPolicy attribute indicates whether or not the station will generate status reporting frames for its implemented events and conditions. If true, the station will generate the status frames. If false, the station will not generate the status frames.')
lpFiTraceMaxExpirationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 12, 1, 12), FddiTimeMilli().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(7000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiTraceMaxExpirationTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTraceMaxExpirationTimer.setDescription('The traceMaxExpirationTimer attribute is used to configure the maximum propagation time, expressed in milliseconds, for a trace on a FDDI topology. This value places a lower bound on the detection time for an unrecovered ring.')
lpFiApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 12, 1, 13), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiApplicationFramerName.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiApplicationFramerName.setDescription('This attribute contains the component name of a Framer which is associated with the Fddi component. This defines which LanApplication/n Framer will be using this Fddi interface.')
lpFiMacProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 13), )
if mibBuilder.loadTexts: lpFiMacProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiMacProvTable.setDescription('This group contains the provisionable MAC attributes of the Fddi component.')
lpFiMacProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"))
if mibBuilder.loadTexts: lpFiMacProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiMacProvEntry.setDescription('An entry in the lpFiMacProvTable.')
lpFiTokenRequestTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 13, 1, 1), FddiTimeNano().subtype(subtypeSpec=ValueRangeConstraint(20480, 1340000000)).clone(165290000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiTokenRequestTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTokenRequestTimer.setDescription('The tokenRequestTimer value contains the token request value assigned to the associated medium access controller (MAC). Warning: Changes to this attribute can have adverse effects on the performance of the FDDI ring. Therefore it is recommended that this parameter only be modified by personnel with a thorough understanding of the consequences that may result from changes to this attribute.')
lpFiTokenMaxTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 13, 1, 2), FddiTimeNano().subtype(subtypeSpec=ValueRangeConstraint(40960, 1342200000)).clone(167770000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiTokenMaxTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTokenMaxTimer.setDescription('The tokenMaxTimer value is the maximum timer value the negotiated token rotation time may assume. Warning: Changes to this attribute can have adverse effects on the performance of the FDDI ring. Therefore it is recommended that this parameter only be modified by personnel with a thorough understanding of the consequences that may result from changes to this attribute.')
lpFiValidTransmissionTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 13, 1, 3), FddiTimeNano().subtype(subtypeSpec=ValueRangeConstraint(40960, 1342200000)).clone(2621400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiValidTransmissionTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiValidTransmissionTimer.setDescription('The validTransmissionTimer (Tvx) value specifies the amount of time required for a valid transmission. The station must receive a valid transmission once every Tvx. Warning: Changes to this attribute can have adverse effects on the performance of the FDDI ring. Therefore it is recommended that this parameter only be modified by personnel with a thorough understanding of the consequences that may result from changes to this attribute.')
lpFiAdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 14), )
if mibBuilder.loadTexts: lpFiAdminInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiAdminInfoTable.setDescription('This group contains the attributes pertaining to the vendor of the equipment.')
lpFiAdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"))
if mibBuilder.loadTexts: lpFiAdminInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiAdminInfoEntry.setDescription('An entry in the lpFiAdminInfoTable.')
lpFiVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 14, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiVendor.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiVendor.setDescription('This is the name of the vendor supplying the facility.')
lpFiCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 14, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiCommentText.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiCommentText.setDescription('Any miscellaneous text about the facility.')
lpFiStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 16), )
if mibBuilder.loadTexts: lpFiStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
lpFiStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"))
if mibBuilder.loadTexts: lpFiStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiStateEntry.setDescription('An entry in the lpFiStateTable.')
lpFiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
lpFiOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
lpFiUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
lpFiOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 17), )
if mibBuilder.loadTexts: lpFiOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
lpFiOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 17, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"))
if mibBuilder.loadTexts: lpFiOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiOperStatusEntry.setDescription('An entry in the lpFiOperStatusTable.')
lpFiSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
lpFiSmtOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 18), )
if mibBuilder.loadTexts: lpFiSmtOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiSmtOperTable.setDescription('This group contains the operational station management (SMT) attributes of the Fddi component.')
lpFiSmtOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 18, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"))
if mibBuilder.loadTexts: lpFiSmtOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiSmtOperEntry.setDescription('An entry in the lpFiSmtOperTable.')
lpFiVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 18, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiVersion.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiVersion.setDescription('The version attribute contains a copy of the currently supported version numbers of the management information base (MIB) and the station management (SMT).')
lpFiBypassPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 18, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiBypassPresent.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiBypassPresent.setDescription('The bypassPresent attribute indicates whether the optical bypass switch is present on its AB port pair. If true, the optical bypass switch is present. If false, it is not present.')
lpFiEcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 18, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("out", 1), ("in", 2), ("trace", 3), ("leave", 4), ("pathTest", 5), ("insert", 6), ("check", 7), ("deinsert", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiEcmState.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiEcmState.setDescription('The ecmState, Entity Coordination Manager (ECM), state indicates the current state of the ECM state machine.')
lpFiCfState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 18, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("isolated", 1), ("localA", 2), ("localB", 3), ("localAB", 4), ("localS", 5), ("wrapA", 6), ("wrapB", 7), ("wrapAB", 8), ("wrapS", 9), ("cWrapA", 10), ("cWrapB", 11), ("cWrapS", 12), ("thru", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiCfState.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiCfState.setDescription('The cfState attribute indicates the current state of the configuration management (CFM) state machine.')
lpFiMacOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 19), )
if mibBuilder.loadTexts: lpFiMacOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiMacOperTable.setDescription('This group contains the operational Medium Access Controller (MAC) attributes of the of the Fddi component.')
lpFiMacOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 19, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"))
if mibBuilder.loadTexts: lpFiMacOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiMacOperEntry.setDescription('An entry in the lpFiMacOperTable.')
lpFiRingLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 19, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1280, 1342000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiRingLatency.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiRingLatency.setDescription('The ringLatency attribute contains the measured ring latency of the ring the station is attached to.')
lpFiMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 19, 1, 10), FddiMACLongAddressType().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiMacAddress.setDescription('The medium access controller (MAC) address is an address that is recognized by only one station on the attached ring. The value of this attribute is assigned by the system. This attribute is displayed in canonical format. The non-canonical version of this address is indicated in ncMacAddress.')
lpFiUpstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 19, 1, 11), FddiMACLongAddressType().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiUpstreamNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiUpstreamNeighbor.setDescription('The upstreamNeighbor attribute contains the MAC address associated with the upstream neighbor station on the ring. This attribute is displayed in canonical format. The non-canonical version of this address is indicated in ncUpstreamNeighbor.')
lpFiDownstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 19, 1, 12), FddiMACLongAddressType().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiDownstreamNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiDownstreamNeighbor.setDescription('The downstreamNeighbor attribute contains the MAC address associated with the downstream station on the ring. This attribute is displayed in canonical format. The non-canonical version of this address is indicated in ncDownstreamNeighbor.')
lpFiOldUpstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 19, 1, 13), FddiMACLongAddressType().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiOldUpstreamNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiOldUpstreamNeighbor.setDescription('The oldUpstreamNeighbor attribute contains the previous value of the MAC address associated with the upstream station on the ring. This attribute is displayed in canonical format. The non-canonical version of this address is indicated in ncOldUpstreamNeighbor.')
lpFiOldDownstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 19, 1, 14), FddiMACLongAddressType().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiOldDownstreamNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiOldDownstreamNeighbor.setDescription('The oldDownstreamNeighbor attribute contains the previous value of the MAC address associated with the downstream station on the ring. This attribute is displayed in canonical format. The non-canonical version of this address is indicated in ncOldDownstreamNeighbor.')
lpFiDupAddressTest = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 19, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notDone", 1), ("pass", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiDupAddressTest.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiDupAddressTest.setDescription('The dupAddressTest attribute indicates the condition results of the duplicate address test. If notDone, the test has not been executed. If pass, the test has successfully executed. If fail, the test has failed.')
lpFiTokenNegotiatedTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 19, 1, 18), FddiTimeNano().subtype(subtypeSpec=ValueRangeConstraint(80, 1340000000)).clone(167772000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiTokenNegotiatedTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTokenNegotiatedTimer.setDescription('The tokenNegotiatedTimer specifies the negotiated token rotation time.')
lpFiFrameCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 19, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiFrameCounts.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiFrameCounts.setDescription('The frameCounts attribute contains the number of frames that have been received by the station. This counter will wrap around after it reaches its maximum value.')
lpFiCopiedCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 19, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiCopiedCounts.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiCopiedCounts.setDescription("The copiedCounts attribute contains the number of frames successfully copied into this station's receive buffers, not including MAC control frames. This counter will wrap around after it reaches its maximum value.")
lpFiTransmitCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 19, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiTransmitCounts.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTransmitCounts.setDescription('The transmitCounts attribute contains the number of frames transmitted by this station, not including MAC control frames. This counter will wrap around after it reaches its maximum value.')
lpFiErrorCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 19, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiErrorCounts.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiErrorCounts.setDescription('The errorCounts attribute contains the number of error frames first detected by this station. This counter will wrap around after it reaches its maximum value.')
lpFiLostCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 19, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLostCounts.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLostCounts.setDescription('The lostCounts attribute contains the number of instances that the station has detected a format error during frame reception such that the frame was stripped. This counter will wrap around after it reaches its maximum value.')
lpFiRmtState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 19, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 1), ("nonOp", 2), ("ringOp", 3), ("detect", 4), ("nonOpDup", 5), ("ringOpDup", 6), ("directed", 7), ("trace", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiRmtState.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiRmtState.setDescription('The rmtState, ring management (RMT), state indicates the current state of the RMT state machine.')
lpFiFrameErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 19, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiFrameErrorFlag.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiFrameErrorFlag.setDescription('The frameErrorFlag attribute indicates the MAC frame error condition status. If true, a MAC frame error is present. If false, a MAC frame error condition is not present.')
lpFiMacCOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 20), )
if mibBuilder.loadTexts: lpFiMacCOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiMacCOperTable.setDescription('This group contains the operational attributes of the Medium Access Controller (MAC) Counters Table of the Fddi component.')
lpFiMacCOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 20, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"))
if mibBuilder.loadTexts: lpFiMacCOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiMacCOperEntry.setDescription('An entry in the lpFiMacCOperTable.')
lpFiTokenCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 20, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiTokenCounts.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTokenCounts.setDescription('The tokenCounts attribute contains the number of times the station has received a token. This counter will wrap around after it reaches its maximum value.')
lpFiTvxExpiredCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 20, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiTvxExpiredCounts.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTvxExpiredCounts.setDescription('The tvxExpiredCounts, Transmission Valid eXpired (TVX), attribute contains the number of times that TVX timer has expired. This counter may increment as stations go on and off the ring. A rapidly increasing value may indicate a problem. This counter will wrap around after it reaches its maximum value.')
lpFiNotCopiedCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 20, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiNotCopiedCounts.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiNotCopiedCounts.setDescription('The notCopiedCounts attribute contains the number of times that the station has detected a frame addressed to itself but did not copy it due to local buffer congestion. This counter will wrap around after it reaches its maximum value.')
lpFiLateCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 20, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLateCounts.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLateCounts.setDescription('The lateCounts attribute contains the number of token rotation time (TRT) expirations since the station was reset or a token was received. This counter may increment as stations go on and off the ring. A rapidly increasing value may indicate a problem. This counter will wrap around after it reaches its maximum value.')
lpFiRingOpCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 20, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiRingOpCounts.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiRingOpCounts.setDescription('The ringOpCounts attribute contains the number of times the station has made the transition from the ring not operational state to the ring operational state.')
lpFiNcMacOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 26), )
if mibBuilder.loadTexts: lpFiNcMacOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiNcMacOperTable.setDescription('This group contains the operational attributes of the Fddi component related to non-canonical MAC addresses.')
lpFiNcMacOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 26, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"))
if mibBuilder.loadTexts: lpFiNcMacOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiNcMacOperEntry.setDescription('An entry in the lpFiNcMacOperTable.')
lpFiNcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 26, 1, 1), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiNcMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiNcMacAddress.setDescription('The medium access controller (MAC) address is an address that is recognized by only one station on the attached ring. The value of this attribute is assigned by the system. This attribute is displayed in non- canonical format. The canonical version of this address is indicated in macAddress.')
lpFiNcUpstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 26, 1, 2), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiNcUpstreamNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiNcUpstreamNeighbor.setDescription('The ncUpstreamNeighbor attribute contains the MAC address associated with the upstream neighbor station on the ring. This attribute is displayed in non-canonical format. The canonical version of this address is indicated in upstreamNeighbor.')
lpFiNcDownstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 26, 1, 3), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiNcDownstreamNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiNcDownstreamNeighbor.setDescription('The ncDownstreamNeighbor attribute contains the MAC address associated with the downstream station on the ring. This attribute is displayed in non-canonical format. The canonical version of this address is indicated in downstreamNeighbor')
lpFiNcOldUpstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 26, 1, 4), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiNcOldUpstreamNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiNcOldUpstreamNeighbor.setDescription('The ncOldUpstreamNeighbor attribute contains the previous value of the MAC address associated with the upstream station on the ring. This attribute is displayed in non-canonical format. The canonical version of this address is indicated in oldUpstreamNeighbor.')
lpFiNcOldDownstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 26, 1, 5), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiNcOldDownstreamNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiNcOldDownstreamNeighbor.setDescription('The ncOldDownstreamNeighbor attribute contains the previous value of the MAC address associated with the downstream station on the ring. This attribute is displayed in non-canonical format. The canonical version of this address is indicated in oldDownstreamNeighbor.')
lpFiLt = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2))
lpFiLtRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 1), )
if mibBuilder.loadTexts: lpFiLtRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtRowStatusTable.setDescription('This entry controls the addition and deletion of lpFiLt components.')
lpFiLtRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"))
if mibBuilder.loadTexts: lpFiLtRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtRowStatusEntry.setDescription('A single entry in the table represents a single lpFiLt component.')
lpFiLtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpFiLt components. These components cannot be added nor deleted.')
lpFiLtComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpFiLtStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtStorageType.setDescription('This variable represents the storage type value for the lpFiLt tables.')
lpFiLtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpFiLtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtIndex.setDescription('This variable represents the index for the lpFiLt tables.')
lpFiLtTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 20), )
if mibBuilder.loadTexts: lpFiLtTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpFiLtTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 20, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"))
if mibBuilder.loadTexts: lpFiLtTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtTopEntry.setDescription('An entry in the lpFiLtTopTable.')
lpFiLtTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 20, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiLtTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtTData.setDescription('This attribute is used to display and set attributes.')
lpFiLtFrmCmp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 2))
lpFiLtFrmCmpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 2, 1), )
if mibBuilder.loadTexts: lpFiLtFrmCmpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFrmCmpRowStatusTable.setDescription('This entry controls the addition and deletion of lpFiLtFrmCmp components.')
lpFiLtFrmCmpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFrmCmpIndex"))
if mibBuilder.loadTexts: lpFiLtFrmCmpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFrmCmpRowStatusEntry.setDescription('A single entry in the table represents a single lpFiLtFrmCmp component.')
lpFiLtFrmCmpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFrmCmpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFrmCmpRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpFiLtFrmCmp components. These components cannot be added nor deleted.')
lpFiLtFrmCmpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFrmCmpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFrmCmpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpFiLtFrmCmpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFrmCmpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFrmCmpStorageType.setDescription('This variable represents the storage type value for the lpFiLtFrmCmp tables.')
lpFiLtFrmCmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpFiLtFrmCmpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFrmCmpIndex.setDescription('This variable represents the index for the lpFiLtFrmCmp tables.')
lpFiLtFrmCmpTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 2, 10), )
if mibBuilder.loadTexts: lpFiLtFrmCmpTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFrmCmpTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpFiLtFrmCmpTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFrmCmpIndex"))
if mibBuilder.loadTexts: lpFiLtFrmCmpTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFrmCmpTopEntry.setDescription('An entry in the lpFiLtFrmCmpTopTable.')
lpFiLtFrmCmpTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiLtFrmCmpTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFrmCmpTData.setDescription('This attribute is used to display and set attributes.')
lpFiLtFrmCpy = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 3))
lpFiLtFrmCpyRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 3, 1), )
if mibBuilder.loadTexts: lpFiLtFrmCpyRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFrmCpyRowStatusTable.setDescription('This entry controls the addition and deletion of lpFiLtFrmCpy components.')
lpFiLtFrmCpyRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFrmCpyIndex"))
if mibBuilder.loadTexts: lpFiLtFrmCpyRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFrmCpyRowStatusEntry.setDescription('A single entry in the table represents a single lpFiLtFrmCpy component.')
lpFiLtFrmCpyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFrmCpyRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFrmCpyRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpFiLtFrmCpy components. These components cannot be added nor deleted.')
lpFiLtFrmCpyComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFrmCpyComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFrmCpyComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpFiLtFrmCpyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFrmCpyStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFrmCpyStorageType.setDescription('This variable represents the storage type value for the lpFiLtFrmCpy tables.')
lpFiLtFrmCpyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpFiLtFrmCpyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFrmCpyIndex.setDescription('This variable represents the index for the lpFiLtFrmCpy tables.')
lpFiLtFrmCpyTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 3, 10), )
if mibBuilder.loadTexts: lpFiLtFrmCpyTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFrmCpyTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpFiLtFrmCpyTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFrmCpyIndex"))
if mibBuilder.loadTexts: lpFiLtFrmCpyTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFrmCpyTopEntry.setDescription('An entry in the lpFiLtFrmCpyTopTable.')
lpFiLtFrmCpyTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiLtFrmCpyTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFrmCpyTData.setDescription('This attribute is used to display and set attributes.')
lpFiLtPrtCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 4))
lpFiLtPrtCfgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 4, 1), )
if mibBuilder.loadTexts: lpFiLtPrtCfgRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtPrtCfgRowStatusTable.setDescription('This entry controls the addition and deletion of lpFiLtPrtCfg components.')
lpFiLtPrtCfgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtPrtCfgIndex"))
if mibBuilder.loadTexts: lpFiLtPrtCfgRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtPrtCfgRowStatusEntry.setDescription('A single entry in the table represents a single lpFiLtPrtCfg component.')
lpFiLtPrtCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtPrtCfgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtPrtCfgRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpFiLtPrtCfg components. These components cannot be added nor deleted.')
lpFiLtPrtCfgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtPrtCfgComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtPrtCfgComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpFiLtPrtCfgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtPrtCfgStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtPrtCfgStorageType.setDescription('This variable represents the storage type value for the lpFiLtPrtCfg tables.')
lpFiLtPrtCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpFiLtPrtCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtPrtCfgIndex.setDescription('This variable represents the index for the lpFiLtPrtCfg tables.')
lpFiLtPrtCfgTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 4, 10), )
if mibBuilder.loadTexts: lpFiLtPrtCfgTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtPrtCfgTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpFiLtPrtCfgTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtPrtCfgIndex"))
if mibBuilder.loadTexts: lpFiLtPrtCfgTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtPrtCfgTopEntry.setDescription('An entry in the lpFiLtPrtCfgTopTable.')
lpFiLtPrtCfgTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiLtPrtCfgTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtPrtCfgTData.setDescription('This attribute is used to display and set attributes.')
lpFiLtFb = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5))
lpFiLtFbRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 1), )
if mibBuilder.loadTexts: lpFiLtFbRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbRowStatusTable.setDescription('This entry controls the addition and deletion of lpFiLtFb components.')
lpFiLtFbRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIndex"))
if mibBuilder.loadTexts: lpFiLtFbRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbRowStatusEntry.setDescription('A single entry in the table represents a single lpFiLtFb component.')
lpFiLtFbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpFiLtFb components. These components cannot be added nor deleted.')
lpFiLtFbComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpFiLtFbStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbStorageType.setDescription('This variable represents the storage type value for the lpFiLtFb tables.')
lpFiLtFbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpFiLtFbIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbIndex.setDescription('This variable represents the index for the lpFiLtFb tables.')
lpFiLtFbTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 20), )
if mibBuilder.loadTexts: lpFiLtFbTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpFiLtFbTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 20, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIndex"))
if mibBuilder.loadTexts: lpFiLtFbTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbTopEntry.setDescription('An entry in the lpFiLtFbTopTable.')
lpFiLtFbTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 20, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiLtFbTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbTData.setDescription('This attribute is used to display and set attributes.')
lpFiLtFbTxInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 2))
lpFiLtFbTxInfoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 2, 1), )
if mibBuilder.loadTexts: lpFiLtFbTxInfoRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbTxInfoRowStatusTable.setDescription('This entry controls the addition and deletion of lpFiLtFbTxInfo components.')
lpFiLtFbTxInfoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbTxInfoIndex"))
if mibBuilder.loadTexts: lpFiLtFbTxInfoRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbTxInfoRowStatusEntry.setDescription('A single entry in the table represents a single lpFiLtFbTxInfo component.')
lpFiLtFbTxInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbTxInfoRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbTxInfoRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpFiLtFbTxInfo components. These components cannot be added nor deleted.')
lpFiLtFbTxInfoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbTxInfoComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbTxInfoComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpFiLtFbTxInfoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbTxInfoStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbTxInfoStorageType.setDescription('This variable represents the storage type value for the lpFiLtFbTxInfo tables.')
lpFiLtFbTxInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpFiLtFbTxInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbTxInfoIndex.setDescription('This variable represents the index for the lpFiLtFbTxInfo tables.')
lpFiLtFbTxInfoTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 2, 10), )
if mibBuilder.loadTexts: lpFiLtFbTxInfoTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbTxInfoTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpFiLtFbTxInfoTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbTxInfoIndex"))
if mibBuilder.loadTexts: lpFiLtFbTxInfoTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbTxInfoTopEntry.setDescription('An entry in the lpFiLtFbTxInfoTopTable.')
lpFiLtFbTxInfoTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiLtFbTxInfoTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbTxInfoTData.setDescription('This attribute is used to display and set attributes.')
lpFiLtFbFddiMac = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 3))
lpFiLtFbFddiMacRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 3, 1), )
if mibBuilder.loadTexts: lpFiLtFbFddiMacRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbFddiMacRowStatusTable.setDescription('This entry controls the addition and deletion of lpFiLtFbFddiMac components.')
lpFiLtFbFddiMacRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbFddiMacIndex"))
if mibBuilder.loadTexts: lpFiLtFbFddiMacRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbFddiMacRowStatusEntry.setDescription('A single entry in the table represents a single lpFiLtFbFddiMac component.')
lpFiLtFbFddiMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbFddiMacRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbFddiMacRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpFiLtFbFddiMac components. These components cannot be added nor deleted.')
lpFiLtFbFddiMacComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbFddiMacComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbFddiMacComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpFiLtFbFddiMacStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbFddiMacStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbFddiMacStorageType.setDescription('This variable represents the storage type value for the lpFiLtFbFddiMac tables.')
lpFiLtFbFddiMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpFiLtFbFddiMacIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbFddiMacIndex.setDescription('This variable represents the index for the lpFiLtFbFddiMac tables.')
lpFiLtFbFddiMacTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 3, 10), )
if mibBuilder.loadTexts: lpFiLtFbFddiMacTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbFddiMacTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpFiLtFbFddiMacTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbFddiMacIndex"))
if mibBuilder.loadTexts: lpFiLtFbFddiMacTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbFddiMacTopEntry.setDescription('An entry in the lpFiLtFbFddiMacTopTable.')
lpFiLtFbFddiMacTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiLtFbFddiMacTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbFddiMacTData.setDescription('This attribute is used to display and set attributes.')
lpFiLtFbMacEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 4))
lpFiLtFbMacEnetRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 4, 1), )
if mibBuilder.loadTexts: lpFiLtFbMacEnetRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbMacEnetRowStatusTable.setDescription('This entry controls the addition and deletion of lpFiLtFbMacEnet components.')
lpFiLtFbMacEnetRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbMacEnetIndex"))
if mibBuilder.loadTexts: lpFiLtFbMacEnetRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbMacEnetRowStatusEntry.setDescription('A single entry in the table represents a single lpFiLtFbMacEnet component.')
lpFiLtFbMacEnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbMacEnetRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbMacEnetRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpFiLtFbMacEnet components. These components cannot be added nor deleted.')
lpFiLtFbMacEnetComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbMacEnetComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbMacEnetComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpFiLtFbMacEnetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbMacEnetStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbMacEnetStorageType.setDescription('This variable represents the storage type value for the lpFiLtFbMacEnet tables.')
lpFiLtFbMacEnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpFiLtFbMacEnetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbMacEnetIndex.setDescription('This variable represents the index for the lpFiLtFbMacEnet tables.')
lpFiLtFbMacEnetTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 4, 10), )
if mibBuilder.loadTexts: lpFiLtFbMacEnetTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbMacEnetTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpFiLtFbMacEnetTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbMacEnetIndex"))
if mibBuilder.loadTexts: lpFiLtFbMacEnetTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbMacEnetTopEntry.setDescription('An entry in the lpFiLtFbMacEnetTopTable.')
lpFiLtFbMacEnetTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiLtFbMacEnetTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbMacEnetTData.setDescription('This attribute is used to display and set attributes.')
lpFiLtFbMacTr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 5))
lpFiLtFbMacTrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 5, 1), )
if mibBuilder.loadTexts: lpFiLtFbMacTrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbMacTrRowStatusTable.setDescription('This entry controls the addition and deletion of lpFiLtFbMacTr components.')
lpFiLtFbMacTrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbMacTrIndex"))
if mibBuilder.loadTexts: lpFiLtFbMacTrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbMacTrRowStatusEntry.setDescription('A single entry in the table represents a single lpFiLtFbMacTr component.')
lpFiLtFbMacTrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbMacTrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbMacTrRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpFiLtFbMacTr components. These components cannot be added nor deleted.')
lpFiLtFbMacTrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbMacTrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbMacTrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpFiLtFbMacTrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbMacTrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbMacTrStorageType.setDescription('This variable represents the storage type value for the lpFiLtFbMacTr tables.')
lpFiLtFbMacTrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpFiLtFbMacTrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbMacTrIndex.setDescription('This variable represents the index for the lpFiLtFbMacTr tables.')
lpFiLtFbMacTrTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 5, 10), )
if mibBuilder.loadTexts: lpFiLtFbMacTrTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbMacTrTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpFiLtFbMacTrTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbMacTrIndex"))
if mibBuilder.loadTexts: lpFiLtFbMacTrTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbMacTrTopEntry.setDescription('An entry in the lpFiLtFbMacTrTopTable.')
lpFiLtFbMacTrTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 5, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiLtFbMacTrTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbMacTrTData.setDescription('This attribute is used to display and set attributes.')
lpFiLtFbData = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 6))
lpFiLtFbDataRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 6, 1), )
if mibBuilder.loadTexts: lpFiLtFbDataRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbDataRowStatusTable.setDescription('This entry controls the addition and deletion of lpFiLtFbData components.')
lpFiLtFbDataRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbDataIndex"))
if mibBuilder.loadTexts: lpFiLtFbDataRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbDataRowStatusEntry.setDescription('A single entry in the table represents a single lpFiLtFbData component.')
lpFiLtFbDataRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbDataRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbDataRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpFiLtFbData components. These components cannot be added nor deleted.')
lpFiLtFbDataComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbDataComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbDataComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpFiLtFbDataStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbDataStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbDataStorageType.setDescription('This variable represents the storage type value for the lpFiLtFbData tables.')
lpFiLtFbDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpFiLtFbDataIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbDataIndex.setDescription('This variable represents the index for the lpFiLtFbData tables.')
lpFiLtFbDataTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 6, 10), )
if mibBuilder.loadTexts: lpFiLtFbDataTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbDataTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpFiLtFbDataTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbDataIndex"))
if mibBuilder.loadTexts: lpFiLtFbDataTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbDataTopEntry.setDescription('An entry in the lpFiLtFbDataTopTable.')
lpFiLtFbDataTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 6, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiLtFbDataTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbDataTData.setDescription('This attribute is used to display and set attributes.')
lpFiLtFbIpH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 7))
lpFiLtFbIpHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 7, 1), )
if mibBuilder.loadTexts: lpFiLtFbIpHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbIpHRowStatusTable.setDescription('This entry controls the addition and deletion of lpFiLtFbIpH components.')
lpFiLtFbIpHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIpHIndex"))
if mibBuilder.loadTexts: lpFiLtFbIpHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbIpHRowStatusEntry.setDescription('A single entry in the table represents a single lpFiLtFbIpH component.')
lpFiLtFbIpHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbIpHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbIpHRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpFiLtFbIpH components. These components cannot be added nor deleted.')
lpFiLtFbIpHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbIpHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbIpHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpFiLtFbIpHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbIpHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbIpHStorageType.setDescription('This variable represents the storage type value for the lpFiLtFbIpH tables.')
lpFiLtFbIpHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpFiLtFbIpHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbIpHIndex.setDescription('This variable represents the index for the lpFiLtFbIpH tables.')
lpFiLtFbIpHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 7, 10), )
if mibBuilder.loadTexts: lpFiLtFbIpHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbIpHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpFiLtFbIpHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 7, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIpHIndex"))
if mibBuilder.loadTexts: lpFiLtFbIpHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbIpHTopEntry.setDescription('An entry in the lpFiLtFbIpHTopTable.')
lpFiLtFbIpHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 7, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiLtFbIpHTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbIpHTData.setDescription('This attribute is used to display and set attributes.')
lpFiLtFbLlch = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 8))
lpFiLtFbLlchRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 8, 1), )
if mibBuilder.loadTexts: lpFiLtFbLlchRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbLlchRowStatusTable.setDescription('This entry controls the addition and deletion of lpFiLtFbLlch components.')
lpFiLtFbLlchRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 8, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbLlchIndex"))
if mibBuilder.loadTexts: lpFiLtFbLlchRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbLlchRowStatusEntry.setDescription('A single entry in the table represents a single lpFiLtFbLlch component.')
lpFiLtFbLlchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 8, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbLlchRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbLlchRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpFiLtFbLlch components. These components cannot be added nor deleted.')
lpFiLtFbLlchComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbLlchComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbLlchComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpFiLtFbLlchStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbLlchStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbLlchStorageType.setDescription('This variable represents the storage type value for the lpFiLtFbLlch tables.')
lpFiLtFbLlchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 8, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpFiLtFbLlchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbLlchIndex.setDescription('This variable represents the index for the lpFiLtFbLlch tables.')
lpFiLtFbLlchTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 8, 10), )
if mibBuilder.loadTexts: lpFiLtFbLlchTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbLlchTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpFiLtFbLlchTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 8, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbLlchIndex"))
if mibBuilder.loadTexts: lpFiLtFbLlchTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbLlchTopEntry.setDescription('An entry in the lpFiLtFbLlchTopTable.')
lpFiLtFbLlchTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 8, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiLtFbLlchTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbLlchTData.setDescription('This attribute is used to display and set attributes.')
lpFiLtFbAppleH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 9))
lpFiLtFbAppleHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 9, 1), )
if mibBuilder.loadTexts: lpFiLtFbAppleHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbAppleHRowStatusTable.setDescription('This entry controls the addition and deletion of lpFiLtFbAppleH components.')
lpFiLtFbAppleHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 9, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbAppleHIndex"))
if mibBuilder.loadTexts: lpFiLtFbAppleHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbAppleHRowStatusEntry.setDescription('A single entry in the table represents a single lpFiLtFbAppleH component.')
lpFiLtFbAppleHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbAppleHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbAppleHRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpFiLtFbAppleH components. These components cannot be added nor deleted.')
lpFiLtFbAppleHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbAppleHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbAppleHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpFiLtFbAppleHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbAppleHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbAppleHStorageType.setDescription('This variable represents the storage type value for the lpFiLtFbAppleH tables.')
lpFiLtFbAppleHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 9, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpFiLtFbAppleHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbAppleHIndex.setDescription('This variable represents the index for the lpFiLtFbAppleH tables.')
lpFiLtFbAppleHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 9, 10), )
if mibBuilder.loadTexts: lpFiLtFbAppleHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbAppleHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpFiLtFbAppleHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 9, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbAppleHIndex"))
if mibBuilder.loadTexts: lpFiLtFbAppleHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbAppleHTopEntry.setDescription('An entry in the lpFiLtFbAppleHTopTable.')
lpFiLtFbAppleHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 9, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiLtFbAppleHTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbAppleHTData.setDescription('This attribute is used to display and set attributes.')
lpFiLtFbIpxH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 10))
lpFiLtFbIpxHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 10, 1), )
if mibBuilder.loadTexts: lpFiLtFbIpxHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbIpxHRowStatusTable.setDescription('This entry controls the addition and deletion of lpFiLtFbIpxH components.')
lpFiLtFbIpxHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 10, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIpxHIndex"))
if mibBuilder.loadTexts: lpFiLtFbIpxHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbIpxHRowStatusEntry.setDescription('A single entry in the table represents a single lpFiLtFbIpxH component.')
lpFiLtFbIpxHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 10, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbIpxHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbIpxHRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpFiLtFbIpxH components. These components cannot be added nor deleted.')
lpFiLtFbIpxHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbIpxHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbIpxHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpFiLtFbIpxHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtFbIpxHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbIpxHStorageType.setDescription('This variable represents the storage type value for the lpFiLtFbIpxH tables.')
lpFiLtFbIpxHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 10, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpFiLtFbIpxHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbIpxHIndex.setDescription('This variable represents the index for the lpFiLtFbIpxH tables.')
lpFiLtFbIpxHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 10, 10), )
if mibBuilder.loadTexts: lpFiLtFbIpxHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbIpxHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpFiLtFbIpxHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 10, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtFbIpxHIndex"))
if mibBuilder.loadTexts: lpFiLtFbIpxHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbIpxHTopEntry.setDescription('An entry in the lpFiLtFbIpxHTopTable.')
lpFiLtFbIpxHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 5, 10, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiLtFbIpxHTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtFbIpxHTData.setDescription('This attribute is used to display and set attributes.')
lpFiLtCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 6))
lpFiLtCntlRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 6, 1), )
if mibBuilder.loadTexts: lpFiLtCntlRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtCntlRowStatusTable.setDescription('This entry controls the addition and deletion of lpFiLtCntl components.')
lpFiLtCntlRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtCntlIndex"))
if mibBuilder.loadTexts: lpFiLtCntlRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtCntlRowStatusEntry.setDescription('A single entry in the table represents a single lpFiLtCntl component.')
lpFiLtCntlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtCntlRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtCntlRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpFiLtCntl components. These components cannot be added nor deleted.')
lpFiLtCntlComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtCntlComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtCntlComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpFiLtCntlStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiLtCntlStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtCntlStorageType.setDescription('This variable represents the storage type value for the lpFiLtCntl tables.')
lpFiLtCntlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpFiLtCntlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtCntlIndex.setDescription('This variable represents the index for the lpFiLtCntl tables.')
lpFiLtCntlTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 6, 10), )
if mibBuilder.loadTexts: lpFiLtCntlTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtCntlTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpFiLtCntlTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiLtCntlIndex"))
if mibBuilder.loadTexts: lpFiLtCntlTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtCntlTopEntry.setDescription('An entry in the lpFiLtCntlTopTable.')
lpFiLtCntlTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 2, 6, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiLtCntlTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiLtCntlTData.setDescription('This attribute is used to display and set attributes.')
lpFiPhy = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3))
lpFiPhyRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 1), )
if mibBuilder.loadTexts: lpFiPhyRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhyRowStatusTable.setDescription('This entry controls the addition and deletion of lpFiPhy components.')
lpFiPhyRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiPhyFddiPhyTypeIndex"))
if mibBuilder.loadTexts: lpFiPhyRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhyRowStatusEntry.setDescription('A single entry in the table represents a single lpFiPhy component.')
lpFiPhyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiPhyRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhyRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpFiPhy components. These components can be added.')
lpFiPhyComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiPhyComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhyComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpFiPhyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiPhyStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhyStorageType.setDescription('This variable represents the storage type value for the lpFiPhy tables.')
lpFiPhyFddiPhyTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("a", 0), ("b", 1))))
if mibBuilder.loadTexts: lpFiPhyFddiPhyTypeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhyFddiPhyTypeIndex.setDescription('This variable represents the index for the lpFiPhy tables.')
lpFiPhyProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 10), )
if mibBuilder.loadTexts: lpFiPhyProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhyProvTable.setDescription('This group contains the provisionable attributes of the Fddi Phy component.')
lpFiPhyProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiPhyFddiPhyTypeIndex"))
if mibBuilder.loadTexts: lpFiPhyProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhyProvEntry.setDescription('An entry in the lpFiPhyProvTable.')
lpFiPhyLerCutoff = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 15)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiPhyLerCutoff.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhyLerCutoff.setDescription('The lerCutoff attribute contains the link error rate estimate at which a link connection will be broken. The values will range from 10**-4 to 10**-15. Only the absolute value of the base 10 log is reported.')
lpFiPhyLerAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 15)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiPhyLerAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhyLerAlarm.setDescription('The lerAlarm attribute contains the link error rate estimate at which a link connection will generate an alarm. The values will range from 10**-4 to 10**-15. Only the absolute value of the base 10 log is reported')
lpFiPhyLinkErrorMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiPhyLinkErrorMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhyLinkErrorMonitor.setDescription('The linkErrorMonitor attribute is used to select the state of the link error monitor for the associated Phy component. If enabled, the link error monitor will send the correct test status to the neighboring station. If disabled, the link error monitor will always send a test passed status to the neighboring station.')
lpFiPhyOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 11), )
if mibBuilder.loadTexts: lpFiPhyOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhyOperTable.setDescription('This group contains the operational attributes of the Fddi Phy component.')
lpFiPhyOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiPhyFddiPhyTypeIndex"))
if mibBuilder.loadTexts: lpFiPhyOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhyOperEntry.setDescription('An entry in the lpFiPhyOperTable.')
lpFiPhyNeighborType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("s", 3), ("m", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiPhyNeighborType.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhyNeighborType.setDescription('This attribute indicates the neighbor type of the neighbor physical layer.')
lpFiPhyLctFailCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiPhyLctFailCounts.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhyLctFailCounts.setDescription('The lctFailCounts attribute contains the number of consecutive times the Link Confidence Test (LCT) has failed. This counter will wrap around after it reaches its maximum value.')
lpFiPhyLerEstimate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 11, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiPhyLerEstimate.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhyLerEstimate.setDescription('The lerEstimate attribute contains a long term average link error rate. The values will range from 10**-4 to 10**-15. Only the absolute value of the base 10 log is reported')
lpFiPhyLemRejectCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 11, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiPhyLemRejectCounts.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhyLemRejectCounts.setDescription('The lemRejectCounts attribute contains the number of times that a link has been rejected. This counter will wrap around after it reaches its maximum value.')
lpFiPhyLemCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 11, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiPhyLemCounts.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhyLemCounts.setDescription('The lemCounts attribute contains the aggregate link error monitor error count. This counter is set to zero only on station initialization. This counter will wrap around after it reaches its maximum value.')
lpFiPhyPcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("off", 1), ("break", 2), ("trace", 3), ("connect", 4), ("next", 5), ("signal", 6), ("join", 7), ("verify", 8), ("active", 9), ("maint", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiPhyPcmState.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhyPcmState.setDescription('The pcmState, physical connection manager (PCM), state indicates the current state of the PCM state machine.')
lpFiPhyLerFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 11, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiPhyLerFlag.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhyLerFlag.setDescription('The lerFlag attribute indicates when the link error rate estimate is less than or equal to the link error rate alarm. If true, the value of the link error rate estimate is less than or equal to the link error rate alarm. If false, the value of the link error rate estimate is greater than the link error rate alarm.')
lpFiPhySignalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 11, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("escape", 0), ("phyTypeL", 1), ("phyTypeH", 2), ("accept", 3), ("lctLengthL", 4), ("lctLengthH", 5), ("macAvail", 6), ("lctResult", 7), ("macLoop", 8), ("macOnPhy", 9), ("signalingDone", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiPhySignalState.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhySignalState.setDescription('The signalState attribute contains the current physical connection manager (PCM) signal bit being transmitted, or was transmitted, during the PCM signal state.')
lpFiPhySignalBitsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 11, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiPhySignalBitsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhySignalBitsRcvd.setDescription('The signalBitsRcvd attribute contains the current physical connection manager (PCM) signal bits received. Description of bits: escape(0) phyTypeL(1) phyTypeH(2) accept(3) lctLengthL(4) lctLengthH(5) macAvail(6) lctResult(7) macLoop(8) macOnPhy(9)')
lpFiPhySignalBitsTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 3, 11, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiPhySignalBitsTxmt.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiPhySignalBitsTxmt.setDescription('The signalBitsTxmt attribute contains the current physical connection manager (PCM) signal bits transmitted. Description of bits: escape(0) phyTypeL(1) phyTypeH(2) accept(3) lctLengthL(4) lctLengthH(5) macAvail(6) lctResult(7) macLoop(8) macOnPhy(9)')
lpFiTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5))
lpFiTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5, 1), )
if mibBuilder.loadTexts: lpFiTestRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTestRowStatusTable.setDescription('This entry controls the addition and deletion of lpFiTest components.')
lpFiTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiTestIndex"))
if mibBuilder.loadTexts: lpFiTestRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTestRowStatusEntry.setDescription('A single entry in the table represents a single lpFiTest component.')
lpFiTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiTestRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTestRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpFiTest components. These components cannot be added nor deleted.')
lpFiTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiTestComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTestComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpFiTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiTestStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTestStorageType.setDescription('This variable represents the storage type value for the lpFiTest tables.')
lpFiTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpFiTestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTestIndex.setDescription('This variable represents the index for the lpFiTest tables.')
lpFiTestPTOTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5, 10), )
if mibBuilder.loadTexts: lpFiTestPTOTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTestPTOTable.setDescription('This group contains the operational data for the LanPortTest component.')
lpFiTestPTOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiTestIndex"))
if mibBuilder.loadTexts: lpFiTestPTOEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTestPTOEntry.setDescription('An entry in the lpFiTestPTOTable.')
lpFiTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268))).clone(namedValues=NamedValues(("onCard", 0), ("normal", 1), ("wrapA", 257), ("wrapB", 258), ("thruA", 259), ("thruB", 260), ("extWrapA", 263), ("extWrapB", 264), ("extThruA", 265), ("extThruB", 266), ("extWrapAB", 267), ("extWrapBA", 268)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiTestType.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTestType.setDescription('This attribute is the type of test to be run. The available test types include the following: card test sets up an internal loop on the board and runs a bit error rate test; manual test assumes the line is looped back externally and a bit error rate test is performed; localLoop test loops back the local modem and performs a bit error rate test; remoteLoop test loops back the remote modem (or CSU) and performs a bit error rate test; externalLoop test loops back the line to the far end; payloadLoop test only loops back the payload data received from the incoming line; Note that localLoop, remoteLoop and payloadLoop are not supported by all function processors.')
lpFiTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiTestFrmSize.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTestFrmSize.setDescription('This attribute defines the size of the test data frames in number of bytes.')
lpFiTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpFiTestDuration.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTestDuration.setDescription('This attribute is the duration (in minutes) that test data will be transmitted. In the case of an externalLoop, this is the time that the loop is in effect. Note that dataStartDelay does not apply to the externalLoop.')
lpFiTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5, 11), )
if mibBuilder.loadTexts: lpFiTestResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTestResultsTable.setDescription('This group contains all the statistics related attributes of the Test component.')
lpFiTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpFiTestIndex"))
if mibBuilder.loadTexts: lpFiTestResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTestResultsEntry.setDescription('An entry in the lpFiTestResultsTable.')
lpFiTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiTestElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTestElapsedTime.setDescription('This attribute is the number of minutes elapsed since the test started for an externalLoop test. For a data test, this is the time since test data was first transmitted.')
lpFiTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiTestTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTestTimeRemaining.setDescription('This attribute is the number of minutes remaining before the test is to be stopped according to the duration attribute.')
lpFiTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiTestCauseOfTermination.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTestCauseOfTermination.setDescription('This attribute records the reason the test is terminated.')
lpFiTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5, 11, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiTestFrmTx.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTestFrmTx.setDescription('This attribute is the total number of frames sent during the test period. This counter is not expected to reach its maximum value.')
lpFiTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5, 11, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiTestBitsTx.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTestBitsTx.setDescription('This attribute is the total number of bits sent during the test period. This counter is not expected to reach its maximum value.')
lpFiTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5, 11, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiTestFrmRx.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTestFrmRx.setDescription('This attribute is the total number of frames received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
lpFiTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5, 11, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiTestBitsRx.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTestBitsRx.setDescription('This attribute is the total number of bits received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
lpFiTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 4, 5, 11, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpFiTestErroredFrmRx.setStatus('mandatory')
if mibBuilder.loadTexts: lpFiTestErroredFrmRx.setDescription('This attribute is the total number of errored frames received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
lpTr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13))
lpTrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 1), )
if mibBuilder.loadTexts: lpTrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrRowStatusTable.setDescription('This entry controls the addition and deletion of lpTr components.')
lpTrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"))
if mibBuilder.loadTexts: lpTrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrRowStatusEntry.setDescription('A single entry in the table represents a single lpTr component.')
lpTrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpTr components. These components can be added and deleted.')
lpTrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpTrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrStorageType.setDescription('This variable represents the storage type value for the lpTr tables.')
lpTrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)))
if mibBuilder.loadTexts: lpTrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrIndex.setDescription('This variable represents the index for the lpTr tables.')
lpTrCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 10), )
if mibBuilder.loadTexts: lpTrCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
lpTrCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"))
if mibBuilder.loadTexts: lpTrCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrCidDataEntry.setDescription('An entry in the lpTrCidDataTable.')
lpTrCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
lpTrIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 11), )
if mibBuilder.loadTexts: lpTrIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
lpTrIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"))
if mibBuilder.loadTexts: lpTrIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrIfEntryEntry.setDescription('An entry in the lpTrIfEntryTable.')
lpTrIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
lpTrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 11, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
lpTrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 12), )
if mibBuilder.loadTexts: lpTrProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrProvTable.setDescription('This group contains the provisionable attributes of the Token Ring port.')
lpTrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"))
if mibBuilder.loadTexts: lpTrProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrProvEntry.setDescription('An entry in the lpTrProvTable.')
lpTrRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("fourMegabit", 3), ("sixteenMegabit", 4))).clone('sixteenMegabit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrRingSpeed.setDescription('This attribute indicates the ring speed at the next insertion into the ring. Note that all the interfaces on a ring must operate at the same speed.')
lpTrMonitorParticipate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrMonitorParticipate.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrMonitorParticipate.setDescription('This attribute determines whether the interface will participate in the active monitor selection process.')
lpTrFunctionalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 12, 1, 3), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6).clone(hexValue="0300feff8f01")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrFunctionalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrFunctionalAddress.setDescription('This attribute contains a bit mask of all token ring functional addresses for which this interface will accept frames. The address is displayed in canonical form.')
lpTrNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 12, 1, 4), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6).clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrNodeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrNodeAddress.setDescription('This attribute identifies the primary, node specific address recognized by this interface. If an operator does not provision a MAC address, the interface will use a predefined, permanently assigned address. A valid node address must not be any of the following: a broadcast address, a group address, a functional address or a null address. A node address should be entered in the canonical form.')
lpTrGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 12, 1, 5), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6).clone(hexValue="030001000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrGroupAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrGroupAddress.setDescription('This attribute identifies the group address for which this interface will accept frames. The address is displayed in canonical form. For a valid group address, the least significant bit of the first octet should be set to 1. Currently, only one group address can be provisioned for one interface.')
lpTrProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 12, 1, 6), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 18)).clone(hexValue="4c414e20546f6b656e2052696e67")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrProductId.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrProductId.setDescription('This attribute is used to identify the host system attached to this interface. This information is transmitted in response to Request Station Attachment MAC frames.')
lpTrApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 12, 1, 7), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrApplicationFramerName.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrApplicationFramerName.setDescription('This attribute contains the component name of a Framer which is associated with the Tr component.')
lpTrAdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 13), )
if mibBuilder.loadTexts: lpTrAdminInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrAdminInfoTable.setDescription('This group contains the attributes pertaining to the vendor of the equipment.')
lpTrAdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"))
if mibBuilder.loadTexts: lpTrAdminInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrAdminInfoEntry.setDescription('An entry in the lpTrAdminInfoTable.')
lpTrVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 13, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrVendor.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrVendor.setDescription('This is the name of the vendor supplying the facility.')
lpTrCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 13, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrCommentText.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrCommentText.setDescription('Any miscellaneous text about the facility.')
lpTrStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 15), )
if mibBuilder.loadTexts: lpTrStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
lpTrStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"))
if mibBuilder.loadTexts: lpTrStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrStateEntry.setDescription('An entry in the lpTrStateTable.')
lpTrAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
lpTrOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
lpTrUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
lpTrOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 16), )
if mibBuilder.loadTexts: lpTrOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
lpTrOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"))
if mibBuilder.loadTexts: lpTrOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrOperStatusEntry.setDescription('An entry in the lpTrOperStatusTable.')
lpTrSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
lpTrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 17), )
if mibBuilder.loadTexts: lpTrOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrOperTable.setDescription('This group contains the operational attributes of the Token Ring component.')
lpTrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 17, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"))
if mibBuilder.loadTexts: lpTrOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrOperEntry.setDescription('An entry in the lpTrOperTable.')
lpTrMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 17, 1, 2), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6).clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrMacAddress.setDescription('This attribute contains the actual MAC address. The value is assigned by the system if nodeAddress is not provisioned. This address is displayed in canonical form. The non-canonical version of this address is indicated in ncMacAddress.')
lpTrRingState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("opened", 1), ("closed", 2), ("opening", 3), ("closing", 4), ("openFailure", 5), ("ringFailure", 6))).clone('ringFailure')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrRingState.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrRingState.setDescription('This attribute contains the value of the current interface state with respect to entering or leaving the ring.')
lpTrRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 17, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3).clone(hexValue="000040")).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrRingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrRingStatus.setDescription('This attribute contains the value of the current interface status after the station has entered the ring. The value is a sum of values, one for each currently applicable condition. Before the station attempts an open this attribute has the value of noStatus. noProblems = 0, ringRecovery = 32, singleStation = 64, removeReceived = 256, reserved = 512, autoRemovalError = 1024, lobeWireFault = 2048, transmitBeacon = 4096, softError = 8192, hardError = 16384, signalLoss = 32768, noStatus = 131072 Description of bits: noProblems(0) notused1(1) notused2(2) notused3(3) notused4(4) ringRecovery(5) singleStation(6) notused7(7) removeReceived(8) reserved(9) autoRemovalError(10) lobeWireFault(11) transmitBeacon(12) softError(13) hardError(14) signalLoss(15) notused16(16) noStatus(17)')
lpTrRingOpenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noOpen", 1), ("badParam", 2), ("lobeFailed", 3), ("signalLoss", 4), ("insertionTimeout", 5), ("ringFailed", 6), ("beaconing", 7), ("duplicateMac", 8), ("requestFailed", 9), ("removeReceived", 10), ("open", 11))).clone('noOpen')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrRingOpenStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrRingOpenStatus.setDescription('This attribute indicates what happened the last time the station attempted to enter into the ring.')
lpTrUpStream = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 17, 1, 7), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6).clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrUpStream.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrUpStream.setDescription("This attribute is the MAC address of the station's up-stream neighbor. This address is displayed in canonical form. The non- canonical version of this address is indicated in ncUpStream.")
lpTrChipSet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ibm16", 1), ("titms380", 2), ("titms380c16", 3), ("titms380c26", 4))).clone('titms380c16')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrChipSet.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrChipSet.setDescription('This attribute identifies the hardware chip set in use by an interface.')
lpTrLastTimeBeaconSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 17, 1, 10), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLastTimeBeaconSent.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLastTimeBeaconSent.setDescription('This attribute indicates the time at which a Beacon frame was last transmitted on this interface.')
lpTrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 18), )
if mibBuilder.loadTexts: lpTrStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrStatsTable.setDescription('This group contains statistical information for the Token Ring port.')
lpTrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 18, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"))
if mibBuilder.loadTexts: lpTrStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrStatsEntry.setDescription('An entry in the lpTrStatsTable.')
lpTrLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLineErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLineErrors.setDescription('This attribute contains the number of frames or tokens copied or repeated by a station where there is a non-data bit or a FCS error. This counter wraps around when the maximum value is reached.')
lpTrBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrBurstErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrBurstErrors.setDescription('This attribute contains the number of times the station detects the absence of transitions for five consecutive half-bit times. This counter wraps around when the maximum value is reached.')
lpTrAcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrAcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrAcErrors.setDescription('This attribute contains the number of times that a station can not set the AC bits properly. This counter wraps around when the maximum value is reached.')
lpTrAbortTransErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrAbortTransErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrAbortTransErrors.setDescription('This attribute contains the number of aborted frames. This counter wraps around when the maximum value is reached.')
lpTrInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrInternalErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrInternalErrors.setDescription('This attribute contains the number of internal errors. When the value of the counter soars up quickly, it indicates a potential hardware problem. This counter wraps around when the maximum value is reached.')
lpTrLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLostFrameErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLostFrameErrors.setDescription('This attribute contains the number of times a station is transmitting and its TRR timer expires. This counter wraps around when the maximum value is reached.')
lpTrReceiveCongestions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrReceiveCongestions.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrReceiveCongestions.setDescription('This attribute contains the number of times a station is supposed to receive a frame but cannot due to lack of buffer space. This counter wraps around when the maximum value is reached.')
lpTrFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrFrameCopiedErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrFrameCopiedErrors.setDescription('This attribute contains the number of times a station receives a frame addressed to its specific address and detects that the A bit is set. This counter wraps around when the maximum value is reached.')
lpTrTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrTokenErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTokenErrors.setDescription('This attribute contains the number of times a station acting as the active monitor recognizes an error condition that needs a token transmission. This counter wraps around when the maximum value is reached.')
lpTrSoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrSoftErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrSoftErrors.setDescription('This attribute contains the number of soft errors or the number of Report Error Mac frames the station has transmitted. This counter wraps around when the maximum value is reached.')
lpTrHardErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrHardErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrHardErrors.setDescription('This attribute contains the number of times this interface has detected an immediately recoverable fatal error. This counter wraps around when the maximum value is reached.')
lpTrSignalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrSignalLoss.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrSignalLoss.setDescription('This attribute contains the number of times signal condition has been lost. This counter wraps around when the maximum value is reached.')
lpTrTransmitBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrTransmitBeacons.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTransmitBeacons.setDescription('This attribute contains the number of beacon frames transmitted. This counter wraps around when the maximum value is reached.')
lpTrRingRecoverys = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 18, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrRingRecoverys.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrRingRecoverys.setDescription('This attribute contains the number of times the ring has been purged. This counter wraps around when the maximum value is reached.')
lpTrLobeWires = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 18, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLobeWires.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLobeWires.setDescription('This attribute contains the number of times the interface has detected a short circuit in the lobe data path. This counter wraps around when the maximum value is reached.')
lpTrRemoveRings = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 18, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrRemoveRings.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrRemoveRings.setDescription('This attribute contains the number of Remove Ring Station Mac frames received. This counter wraps around when the maximum value is reached.')
lpTrSingleStation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 18, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrSingleStation.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrSingleStation.setDescription('This attribute contains the number of times the station has determined it is the only one on the ring. This is not necessarily an error. This counter wraps around when the maximum value is reached.')
lpTrFreqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 18, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrFreqErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrFreqErrors.setDescription('This attribute contains the number of signal frequency errors detected. This counter wraps around when the maximum value is reached.')
lpTrNcMacOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 20), )
if mibBuilder.loadTexts: lpTrNcMacOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrNcMacOperTable.setDescription('This group contains the operational attributes of the TokenRing port component related to non-canonical MAC addresses.')
lpTrNcMacOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 20, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"))
if mibBuilder.loadTexts: lpTrNcMacOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrNcMacOperEntry.setDescription('An entry in the lpTrNcMacOperTable.')
lpTrNcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 20, 1, 1), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrNcMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrNcMacAddress.setDescription('This attribute contains the actual MAC address. The value is assigned by the system if nodeAddress is not provisioned. This address is displayed in non-canonical form. The canonical version of this address is indicated in macAddress.')
lpTrNcUpStream = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 20, 1, 2), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrNcUpStream.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrNcUpStream.setDescription("This attribute is the MAC address of the station's up-stream neighbor. This address is displayed in non-canonical form. The canonical version of this address is indicated in upStream.")
lpTrLt = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2))
lpTrLtRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 1), )
if mibBuilder.loadTexts: lpTrLtRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtRowStatusTable.setDescription('This entry controls the addition and deletion of lpTrLt components.')
lpTrLtRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"))
if mibBuilder.loadTexts: lpTrLtRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtRowStatusEntry.setDescription('A single entry in the table represents a single lpTrLt component.')
lpTrLtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpTrLt components. These components cannot be added nor deleted.')
lpTrLtComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpTrLtStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtStorageType.setDescription('This variable represents the storage type value for the lpTrLt tables.')
lpTrLtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpTrLtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtIndex.setDescription('This variable represents the index for the lpTrLt tables.')
lpTrLtTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 20), )
if mibBuilder.loadTexts: lpTrLtTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpTrLtTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 20, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"))
if mibBuilder.loadTexts: lpTrLtTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtTopEntry.setDescription('An entry in the lpTrLtTopTable.')
lpTrLtTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 20, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrLtTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtTData.setDescription('This attribute is used to display and set attributes.')
lpTrLtFrmCmp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 2))
lpTrLtFrmCmpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 2, 1), )
if mibBuilder.loadTexts: lpTrLtFrmCmpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFrmCmpRowStatusTable.setDescription('This entry controls the addition and deletion of lpTrLtFrmCmp components.')
lpTrLtFrmCmpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFrmCmpIndex"))
if mibBuilder.loadTexts: lpTrLtFrmCmpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFrmCmpRowStatusEntry.setDescription('A single entry in the table represents a single lpTrLtFrmCmp component.')
lpTrLtFrmCmpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFrmCmpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFrmCmpRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpTrLtFrmCmp components. These components cannot be added nor deleted.')
lpTrLtFrmCmpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFrmCmpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFrmCmpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpTrLtFrmCmpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFrmCmpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFrmCmpStorageType.setDescription('This variable represents the storage type value for the lpTrLtFrmCmp tables.')
lpTrLtFrmCmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpTrLtFrmCmpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFrmCmpIndex.setDescription('This variable represents the index for the lpTrLtFrmCmp tables.')
lpTrLtFrmCmpTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 2, 10), )
if mibBuilder.loadTexts: lpTrLtFrmCmpTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFrmCmpTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpTrLtFrmCmpTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFrmCmpIndex"))
if mibBuilder.loadTexts: lpTrLtFrmCmpTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFrmCmpTopEntry.setDescription('An entry in the lpTrLtFrmCmpTopTable.')
lpTrLtFrmCmpTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrLtFrmCmpTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFrmCmpTData.setDescription('This attribute is used to display and set attributes.')
lpTrLtFrmCpy = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 3))
lpTrLtFrmCpyRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 3, 1), )
if mibBuilder.loadTexts: lpTrLtFrmCpyRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFrmCpyRowStatusTable.setDescription('This entry controls the addition and deletion of lpTrLtFrmCpy components.')
lpTrLtFrmCpyRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFrmCpyIndex"))
if mibBuilder.loadTexts: lpTrLtFrmCpyRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFrmCpyRowStatusEntry.setDescription('A single entry in the table represents a single lpTrLtFrmCpy component.')
lpTrLtFrmCpyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFrmCpyRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFrmCpyRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpTrLtFrmCpy components. These components cannot be added nor deleted.')
lpTrLtFrmCpyComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFrmCpyComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFrmCpyComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpTrLtFrmCpyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFrmCpyStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFrmCpyStorageType.setDescription('This variable represents the storage type value for the lpTrLtFrmCpy tables.')
lpTrLtFrmCpyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpTrLtFrmCpyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFrmCpyIndex.setDescription('This variable represents the index for the lpTrLtFrmCpy tables.')
lpTrLtFrmCpyTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 3, 10), )
if mibBuilder.loadTexts: lpTrLtFrmCpyTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFrmCpyTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpTrLtFrmCpyTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFrmCpyIndex"))
if mibBuilder.loadTexts: lpTrLtFrmCpyTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFrmCpyTopEntry.setDescription('An entry in the lpTrLtFrmCpyTopTable.')
lpTrLtFrmCpyTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrLtFrmCpyTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFrmCpyTData.setDescription('This attribute is used to display and set attributes.')
lpTrLtPrtCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 4))
lpTrLtPrtCfgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 4, 1), )
if mibBuilder.loadTexts: lpTrLtPrtCfgRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtPrtCfgRowStatusTable.setDescription('This entry controls the addition and deletion of lpTrLtPrtCfg components.')
lpTrLtPrtCfgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtPrtCfgIndex"))
if mibBuilder.loadTexts: lpTrLtPrtCfgRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtPrtCfgRowStatusEntry.setDescription('A single entry in the table represents a single lpTrLtPrtCfg component.')
lpTrLtPrtCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtPrtCfgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtPrtCfgRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpTrLtPrtCfg components. These components cannot be added nor deleted.')
lpTrLtPrtCfgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtPrtCfgComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtPrtCfgComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpTrLtPrtCfgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtPrtCfgStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtPrtCfgStorageType.setDescription('This variable represents the storage type value for the lpTrLtPrtCfg tables.')
lpTrLtPrtCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpTrLtPrtCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtPrtCfgIndex.setDescription('This variable represents the index for the lpTrLtPrtCfg tables.')
lpTrLtPrtCfgTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 4, 10), )
if mibBuilder.loadTexts: lpTrLtPrtCfgTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtPrtCfgTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpTrLtPrtCfgTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtPrtCfgIndex"))
if mibBuilder.loadTexts: lpTrLtPrtCfgTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtPrtCfgTopEntry.setDescription('An entry in the lpTrLtPrtCfgTopTable.')
lpTrLtPrtCfgTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrLtPrtCfgTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtPrtCfgTData.setDescription('This attribute is used to display and set attributes.')
lpTrLtFb = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5))
lpTrLtFbRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 1), )
if mibBuilder.loadTexts: lpTrLtFbRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbRowStatusTable.setDescription('This entry controls the addition and deletion of lpTrLtFb components.')
lpTrLtFbRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIndex"))
if mibBuilder.loadTexts: lpTrLtFbRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbRowStatusEntry.setDescription('A single entry in the table represents a single lpTrLtFb component.')
lpTrLtFbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpTrLtFb components. These components cannot be added nor deleted.')
lpTrLtFbComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpTrLtFbStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbStorageType.setDescription('This variable represents the storage type value for the lpTrLtFb tables.')
lpTrLtFbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpTrLtFbIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbIndex.setDescription('This variable represents the index for the lpTrLtFb tables.')
lpTrLtFbTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 20), )
if mibBuilder.loadTexts: lpTrLtFbTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpTrLtFbTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 20, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIndex"))
if mibBuilder.loadTexts: lpTrLtFbTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbTopEntry.setDescription('An entry in the lpTrLtFbTopTable.')
lpTrLtFbTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 20, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrLtFbTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbTData.setDescription('This attribute is used to display and set attributes.')
lpTrLtFbTxInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 2))
lpTrLtFbTxInfoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 2, 1), )
if mibBuilder.loadTexts: lpTrLtFbTxInfoRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbTxInfoRowStatusTable.setDescription('This entry controls the addition and deletion of lpTrLtFbTxInfo components.')
lpTrLtFbTxInfoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbTxInfoIndex"))
if mibBuilder.loadTexts: lpTrLtFbTxInfoRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbTxInfoRowStatusEntry.setDescription('A single entry in the table represents a single lpTrLtFbTxInfo component.')
lpTrLtFbTxInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbTxInfoRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbTxInfoRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpTrLtFbTxInfo components. These components cannot be added nor deleted.')
lpTrLtFbTxInfoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbTxInfoComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbTxInfoComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpTrLtFbTxInfoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbTxInfoStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbTxInfoStorageType.setDescription('This variable represents the storage type value for the lpTrLtFbTxInfo tables.')
lpTrLtFbTxInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpTrLtFbTxInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbTxInfoIndex.setDescription('This variable represents the index for the lpTrLtFbTxInfo tables.')
lpTrLtFbTxInfoTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 2, 10), )
if mibBuilder.loadTexts: lpTrLtFbTxInfoTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbTxInfoTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpTrLtFbTxInfoTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbTxInfoIndex"))
if mibBuilder.loadTexts: lpTrLtFbTxInfoTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbTxInfoTopEntry.setDescription('An entry in the lpTrLtFbTxInfoTopTable.')
lpTrLtFbTxInfoTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrLtFbTxInfoTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbTxInfoTData.setDescription('This attribute is used to display and set attributes.')
lpTrLtFbFddiMac = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 3))
lpTrLtFbFddiMacRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 3, 1), )
if mibBuilder.loadTexts: lpTrLtFbFddiMacRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbFddiMacRowStatusTable.setDescription('This entry controls the addition and deletion of lpTrLtFbFddiMac components.')
lpTrLtFbFddiMacRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbFddiMacIndex"))
if mibBuilder.loadTexts: lpTrLtFbFddiMacRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbFddiMacRowStatusEntry.setDescription('A single entry in the table represents a single lpTrLtFbFddiMac component.')
lpTrLtFbFddiMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbFddiMacRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbFddiMacRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpTrLtFbFddiMac components. These components cannot be added nor deleted.')
lpTrLtFbFddiMacComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbFddiMacComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbFddiMacComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpTrLtFbFddiMacStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbFddiMacStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbFddiMacStorageType.setDescription('This variable represents the storage type value for the lpTrLtFbFddiMac tables.')
lpTrLtFbFddiMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpTrLtFbFddiMacIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbFddiMacIndex.setDescription('This variable represents the index for the lpTrLtFbFddiMac tables.')
lpTrLtFbFddiMacTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 3, 10), )
if mibBuilder.loadTexts: lpTrLtFbFddiMacTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbFddiMacTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpTrLtFbFddiMacTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbFddiMacIndex"))
if mibBuilder.loadTexts: lpTrLtFbFddiMacTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbFddiMacTopEntry.setDescription('An entry in the lpTrLtFbFddiMacTopTable.')
lpTrLtFbFddiMacTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrLtFbFddiMacTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbFddiMacTData.setDescription('This attribute is used to display and set attributes.')
lpTrLtFbMacEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 4))
lpTrLtFbMacEnetRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 4, 1), )
if mibBuilder.loadTexts: lpTrLtFbMacEnetRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbMacEnetRowStatusTable.setDescription('This entry controls the addition and deletion of lpTrLtFbMacEnet components.')
lpTrLtFbMacEnetRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbMacEnetIndex"))
if mibBuilder.loadTexts: lpTrLtFbMacEnetRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbMacEnetRowStatusEntry.setDescription('A single entry in the table represents a single lpTrLtFbMacEnet component.')
lpTrLtFbMacEnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbMacEnetRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbMacEnetRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpTrLtFbMacEnet components. These components cannot be added nor deleted.')
lpTrLtFbMacEnetComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbMacEnetComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbMacEnetComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpTrLtFbMacEnetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbMacEnetStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbMacEnetStorageType.setDescription('This variable represents the storage type value for the lpTrLtFbMacEnet tables.')
lpTrLtFbMacEnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpTrLtFbMacEnetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbMacEnetIndex.setDescription('This variable represents the index for the lpTrLtFbMacEnet tables.')
lpTrLtFbMacEnetTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 4, 10), )
if mibBuilder.loadTexts: lpTrLtFbMacEnetTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbMacEnetTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpTrLtFbMacEnetTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbMacEnetIndex"))
if mibBuilder.loadTexts: lpTrLtFbMacEnetTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbMacEnetTopEntry.setDescription('An entry in the lpTrLtFbMacEnetTopTable.')
lpTrLtFbMacEnetTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrLtFbMacEnetTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbMacEnetTData.setDescription('This attribute is used to display and set attributes.')
lpTrLtFbMacTr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 5))
lpTrLtFbMacTrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 5, 1), )
if mibBuilder.loadTexts: lpTrLtFbMacTrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbMacTrRowStatusTable.setDescription('This entry controls the addition and deletion of lpTrLtFbMacTr components.')
lpTrLtFbMacTrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbMacTrIndex"))
if mibBuilder.loadTexts: lpTrLtFbMacTrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbMacTrRowStatusEntry.setDescription('A single entry in the table represents a single lpTrLtFbMacTr component.')
lpTrLtFbMacTrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbMacTrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbMacTrRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpTrLtFbMacTr components. These components cannot be added nor deleted.')
lpTrLtFbMacTrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbMacTrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbMacTrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpTrLtFbMacTrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbMacTrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbMacTrStorageType.setDescription('This variable represents the storage type value for the lpTrLtFbMacTr tables.')
lpTrLtFbMacTrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpTrLtFbMacTrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbMacTrIndex.setDescription('This variable represents the index for the lpTrLtFbMacTr tables.')
lpTrLtFbMacTrTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 5, 10), )
if mibBuilder.loadTexts: lpTrLtFbMacTrTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbMacTrTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpTrLtFbMacTrTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbMacTrIndex"))
if mibBuilder.loadTexts: lpTrLtFbMacTrTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbMacTrTopEntry.setDescription('An entry in the lpTrLtFbMacTrTopTable.')
lpTrLtFbMacTrTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 5, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrLtFbMacTrTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbMacTrTData.setDescription('This attribute is used to display and set attributes.')
lpTrLtFbData = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 6))
lpTrLtFbDataRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 6, 1), )
if mibBuilder.loadTexts: lpTrLtFbDataRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbDataRowStatusTable.setDescription('This entry controls the addition and deletion of lpTrLtFbData components.')
lpTrLtFbDataRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbDataIndex"))
if mibBuilder.loadTexts: lpTrLtFbDataRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbDataRowStatusEntry.setDescription('A single entry in the table represents a single lpTrLtFbData component.')
lpTrLtFbDataRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbDataRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbDataRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpTrLtFbData components. These components cannot be added nor deleted.')
lpTrLtFbDataComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbDataComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbDataComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpTrLtFbDataStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbDataStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbDataStorageType.setDescription('This variable represents the storage type value for the lpTrLtFbData tables.')
lpTrLtFbDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpTrLtFbDataIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbDataIndex.setDescription('This variable represents the index for the lpTrLtFbData tables.')
lpTrLtFbDataTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 6, 10), )
if mibBuilder.loadTexts: lpTrLtFbDataTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbDataTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpTrLtFbDataTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbDataIndex"))
if mibBuilder.loadTexts: lpTrLtFbDataTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbDataTopEntry.setDescription('An entry in the lpTrLtFbDataTopTable.')
lpTrLtFbDataTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 6, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrLtFbDataTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbDataTData.setDescription('This attribute is used to display and set attributes.')
lpTrLtFbIpH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 7))
lpTrLtFbIpHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 7, 1), )
if mibBuilder.loadTexts: lpTrLtFbIpHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbIpHRowStatusTable.setDescription('This entry controls the addition and deletion of lpTrLtFbIpH components.')
lpTrLtFbIpHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIpHIndex"))
if mibBuilder.loadTexts: lpTrLtFbIpHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbIpHRowStatusEntry.setDescription('A single entry in the table represents a single lpTrLtFbIpH component.')
lpTrLtFbIpHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbIpHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbIpHRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpTrLtFbIpH components. These components cannot be added nor deleted.')
lpTrLtFbIpHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbIpHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbIpHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpTrLtFbIpHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbIpHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbIpHStorageType.setDescription('This variable represents the storage type value for the lpTrLtFbIpH tables.')
lpTrLtFbIpHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpTrLtFbIpHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbIpHIndex.setDescription('This variable represents the index for the lpTrLtFbIpH tables.')
lpTrLtFbIpHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 7, 10), )
if mibBuilder.loadTexts: lpTrLtFbIpHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbIpHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpTrLtFbIpHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 7, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIpHIndex"))
if mibBuilder.loadTexts: lpTrLtFbIpHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbIpHTopEntry.setDescription('An entry in the lpTrLtFbIpHTopTable.')
lpTrLtFbIpHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 7, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrLtFbIpHTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbIpHTData.setDescription('This attribute is used to display and set attributes.')
lpTrLtFbLlch = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 8))
lpTrLtFbLlchRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 8, 1), )
if mibBuilder.loadTexts: lpTrLtFbLlchRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbLlchRowStatusTable.setDescription('This entry controls the addition and deletion of lpTrLtFbLlch components.')
lpTrLtFbLlchRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 8, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbLlchIndex"))
if mibBuilder.loadTexts: lpTrLtFbLlchRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbLlchRowStatusEntry.setDescription('A single entry in the table represents a single lpTrLtFbLlch component.')
lpTrLtFbLlchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 8, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbLlchRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbLlchRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpTrLtFbLlch components. These components cannot be added nor deleted.')
lpTrLtFbLlchComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbLlchComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbLlchComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpTrLtFbLlchStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbLlchStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbLlchStorageType.setDescription('This variable represents the storage type value for the lpTrLtFbLlch tables.')
lpTrLtFbLlchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 8, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpTrLtFbLlchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbLlchIndex.setDescription('This variable represents the index for the lpTrLtFbLlch tables.')
lpTrLtFbLlchTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 8, 10), )
if mibBuilder.loadTexts: lpTrLtFbLlchTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbLlchTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpTrLtFbLlchTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 8, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbLlchIndex"))
if mibBuilder.loadTexts: lpTrLtFbLlchTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbLlchTopEntry.setDescription('An entry in the lpTrLtFbLlchTopTable.')
lpTrLtFbLlchTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 8, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrLtFbLlchTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbLlchTData.setDescription('This attribute is used to display and set attributes.')
lpTrLtFbAppleH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 9))
lpTrLtFbAppleHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 9, 1), )
if mibBuilder.loadTexts: lpTrLtFbAppleHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbAppleHRowStatusTable.setDescription('This entry controls the addition and deletion of lpTrLtFbAppleH components.')
lpTrLtFbAppleHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 9, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbAppleHIndex"))
if mibBuilder.loadTexts: lpTrLtFbAppleHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbAppleHRowStatusEntry.setDescription('A single entry in the table represents a single lpTrLtFbAppleH component.')
lpTrLtFbAppleHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbAppleHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbAppleHRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpTrLtFbAppleH components. These components cannot be added nor deleted.')
lpTrLtFbAppleHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbAppleHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbAppleHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpTrLtFbAppleHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbAppleHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbAppleHStorageType.setDescription('This variable represents the storage type value for the lpTrLtFbAppleH tables.')
lpTrLtFbAppleHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 9, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpTrLtFbAppleHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbAppleHIndex.setDescription('This variable represents the index for the lpTrLtFbAppleH tables.')
lpTrLtFbAppleHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 9, 10), )
if mibBuilder.loadTexts: lpTrLtFbAppleHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbAppleHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpTrLtFbAppleHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 9, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbAppleHIndex"))
if mibBuilder.loadTexts: lpTrLtFbAppleHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbAppleHTopEntry.setDescription('An entry in the lpTrLtFbAppleHTopTable.')
lpTrLtFbAppleHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 9, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrLtFbAppleHTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbAppleHTData.setDescription('This attribute is used to display and set attributes.')
lpTrLtFbIpxH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 10))
lpTrLtFbIpxHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 10, 1), )
if mibBuilder.loadTexts: lpTrLtFbIpxHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbIpxHRowStatusTable.setDescription('This entry controls the addition and deletion of lpTrLtFbIpxH components.')
lpTrLtFbIpxHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 10, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIpxHIndex"))
if mibBuilder.loadTexts: lpTrLtFbIpxHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbIpxHRowStatusEntry.setDescription('A single entry in the table represents a single lpTrLtFbIpxH component.')
lpTrLtFbIpxHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 10, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbIpxHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbIpxHRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpTrLtFbIpxH components. These components cannot be added nor deleted.')
lpTrLtFbIpxHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbIpxHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbIpxHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpTrLtFbIpxHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtFbIpxHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbIpxHStorageType.setDescription('This variable represents the storage type value for the lpTrLtFbIpxH tables.')
lpTrLtFbIpxHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 10, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpTrLtFbIpxHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbIpxHIndex.setDescription('This variable represents the index for the lpTrLtFbIpxH tables.')
lpTrLtFbIpxHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 10, 10), )
if mibBuilder.loadTexts: lpTrLtFbIpxHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbIpxHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpTrLtFbIpxHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 10, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtFbIpxHIndex"))
if mibBuilder.loadTexts: lpTrLtFbIpxHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbIpxHTopEntry.setDescription('An entry in the lpTrLtFbIpxHTopTable.')
lpTrLtFbIpxHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 5, 10, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrLtFbIpxHTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtFbIpxHTData.setDescription('This attribute is used to display and set attributes.')
lpTrLtCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 6))
lpTrLtCntlRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 6, 1), )
if mibBuilder.loadTexts: lpTrLtCntlRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtCntlRowStatusTable.setDescription('This entry controls the addition and deletion of lpTrLtCntl components.')
lpTrLtCntlRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtCntlIndex"))
if mibBuilder.loadTexts: lpTrLtCntlRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtCntlRowStatusEntry.setDescription('A single entry in the table represents a single lpTrLtCntl component.')
lpTrLtCntlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtCntlRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtCntlRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpTrLtCntl components. These components cannot be added nor deleted.')
lpTrLtCntlComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtCntlComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtCntlComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpTrLtCntlStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrLtCntlStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtCntlStorageType.setDescription('This variable represents the storage type value for the lpTrLtCntl tables.')
lpTrLtCntlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpTrLtCntlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtCntlIndex.setDescription('This variable represents the index for the lpTrLtCntl tables.')
lpTrLtCntlTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 6, 10), )
if mibBuilder.loadTexts: lpTrLtCntlTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtCntlTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpTrLtCntlTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrLtCntlIndex"))
if mibBuilder.loadTexts: lpTrLtCntlTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtCntlTopEntry.setDescription('An entry in the lpTrLtCntlTopTable.')
lpTrLtCntlTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 2, 6, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrLtCntlTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrLtCntlTData.setDescription('This attribute is used to display and set attributes.')
lpTrTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5))
lpTrTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5, 1), )
if mibBuilder.loadTexts: lpTrTestRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTestRowStatusTable.setDescription('This entry controls the addition and deletion of lpTrTest components.')
lpTrTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrTestIndex"))
if mibBuilder.loadTexts: lpTrTestRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTestRowStatusEntry.setDescription('A single entry in the table represents a single lpTrTest component.')
lpTrTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrTestRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTestRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpTrTest components. These components cannot be added nor deleted.')
lpTrTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrTestComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTestComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpTrTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrTestStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTestStorageType.setDescription('This variable represents the storage type value for the lpTrTest tables.')
lpTrTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpTrTestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTestIndex.setDescription('This variable represents the index for the lpTrTest tables.')
lpTrTestPTOTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5, 10), )
if mibBuilder.loadTexts: lpTrTestPTOTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTestPTOTable.setDescription('This group contains the operational data for the LanPortTest component.')
lpTrTestPTOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrTestIndex"))
if mibBuilder.loadTexts: lpTrTestPTOEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTestPTOEntry.setDescription('An entry in the lpTrTestPTOTable.')
lpTrTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268))).clone(namedValues=NamedValues(("onCard", 0), ("normal", 1), ("wrapA", 257), ("wrapB", 258), ("thruA", 259), ("thruB", 260), ("extWrapA", 263), ("extWrapB", 264), ("extThruA", 265), ("extThruB", 266), ("extWrapAB", 267), ("extWrapBA", 268)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrTestType.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTestType.setDescription('This attribute is the type of test to be run. The available test types include the following: card test sets up an internal loop on the board and runs a bit error rate test; manual test assumes the line is looped back externally and a bit error rate test is performed; localLoop test loops back the local modem and performs a bit error rate test; remoteLoop test loops back the remote modem (or CSU) and performs a bit error rate test; externalLoop test loops back the line to the far end; payloadLoop test only loops back the payload data received from the incoming line; Note that localLoop, remoteLoop and payloadLoop are not supported by all function processors.')
lpTrTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrTestFrmSize.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTestFrmSize.setDescription('This attribute defines the size of the test data frames in number of bytes.')
lpTrTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpTrTestDuration.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTestDuration.setDescription('This attribute is the duration (in minutes) that test data will be transmitted. In the case of an externalLoop, this is the time that the loop is in effect. Note that dataStartDelay does not apply to the externalLoop.')
lpTrTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5, 11), )
if mibBuilder.loadTexts: lpTrTestResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTestResultsTable.setDescription('This group contains all the statistics related attributes of the Test component.')
lpTrTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpTrTestIndex"))
if mibBuilder.loadTexts: lpTrTestResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTestResultsEntry.setDescription('An entry in the lpTrTestResultsTable.')
lpTrTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrTestElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTestElapsedTime.setDescription('This attribute is the number of minutes elapsed since the test started for an externalLoop test. For a data test, this is the time since test data was first transmitted.')
lpTrTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrTestTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTestTimeRemaining.setDescription('This attribute is the number of minutes remaining before the test is to be stopped according to the duration attribute.')
lpTrTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrTestCauseOfTermination.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTestCauseOfTermination.setDescription('This attribute records the reason the test is terminated.')
lpTrTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5, 11, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrTestFrmTx.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTestFrmTx.setDescription('This attribute is the total number of frames sent during the test period. This counter is not expected to reach its maximum value.')
lpTrTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5, 11, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrTestBitsTx.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTestBitsTx.setDescription('This attribute is the total number of bits sent during the test period. This counter is not expected to reach its maximum value.')
lpTrTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5, 11, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrTestFrmRx.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTestFrmRx.setDescription('This attribute is the total number of frames received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
lpTrTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5, 11, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrTestBitsRx.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTestBitsRx.setDescription('This attribute is the total number of bits received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
lpTrTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 13, 5, 11, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTrTestErroredFrmRx.setStatus('mandatory')
if mibBuilder.loadTexts: lpTrTestErroredFrmRx.setDescription('This attribute is the total number of errored frames received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
lpIlsFwdr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21))
lpIlsFwdrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 1), )
if mibBuilder.loadTexts: lpIlsFwdrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrRowStatusTable.setDescription('This entry controls the addition and deletion of lpIlsFwdr components.')
lpIlsFwdrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"))
if mibBuilder.loadTexts: lpIlsFwdrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrRowStatusEntry.setDescription('A single entry in the table represents a single lpIlsFwdr component.')
lpIlsFwdrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpIlsFwdrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpIlsFwdr components. These components can be added and deleted.')
lpIlsFwdrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpIlsFwdrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrStorageType.setDescription('This variable represents the storage type value for the lpIlsFwdr tables.')
lpIlsFwdrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: lpIlsFwdrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrIndex.setDescription('This variable represents the index for the lpIlsFwdr tables.')
lpIlsFwdrIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 11), )
if mibBuilder.loadTexts: lpIlsFwdrIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
lpIlsFwdrIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"))
if mibBuilder.loadTexts: lpIlsFwdrIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrIfEntryEntry.setDescription('An entry in the lpIlsFwdrIfEntryTable.')
lpIlsFwdrIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpIlsFwdrIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
lpIlsFwdrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 11, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
lpIlsFwdrStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 12), )
if mibBuilder.loadTexts: lpIlsFwdrStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
lpIlsFwdrStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"))
if mibBuilder.loadTexts: lpIlsFwdrStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrStateEntry.setDescription('An entry in the lpIlsFwdrStateTable.')
lpIlsFwdrAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
lpIlsFwdrOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
lpIlsFwdrUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
lpIlsFwdrOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 13), )
if mibBuilder.loadTexts: lpIlsFwdrOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
lpIlsFwdrOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"))
if mibBuilder.loadTexts: lpIlsFwdrOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrOperStatusEntry.setDescription('An entry in the lpIlsFwdrOperStatusTable.')
lpIlsFwdrSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
lpIlsFwdrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 14), )
if mibBuilder.loadTexts: lpIlsFwdrStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrStatsTable.setDescription('This group contains the operational frame statistics related attributes of the IlsForwarder component.')
lpIlsFwdrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"))
if mibBuilder.loadTexts: lpIlsFwdrStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrStatsEntry.setDescription('An entry in the lpIlsFwdrStatsTable.')
lpIlsFwdrFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 14, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrFramesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrFramesReceived.setDescription('This attribute counts the total number of frames that have been received by this card. This counter will wrap around after it reaches its maximum value.')
lpIlsFwdrProcessedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 14, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrProcessedCount.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrProcessedCount.setDescription('This attribute counts the number of frames successfully processed by this card. This counter will wrap around after it reaches its maximum value.')
lpIlsFwdrErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 14, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrErrorCount.setDescription('This attribute counts the number of internal errors detected in transferring frames from an ATM card to this card. A continuous increment of this count indicates that the hardware may probably be defective. This counter will wrap around after it reaches its maximum value.')
lpIlsFwdrFramesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 14, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrFramesDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrFramesDiscarded.setDescription('This attribute counts the number of frames which are discarded due to local buffer congestion. This counter will wrap around after it reaches its maximum value.')
lpIlsFwdrLinkToTrafficSourceTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 312), )
if mibBuilder.loadTexts: lpIlsFwdrLinkToTrafficSourceTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLinkToTrafficSourceTable.setDescription('This attribute contains a list of components that are using this IlsForwarder.')
lpIlsFwdrLinkToTrafficSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 312, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLinkToTrafficSourceValue"))
if mibBuilder.loadTexts: lpIlsFwdrLinkToTrafficSourceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLinkToTrafficSourceEntry.setDescription('An entry in the lpIlsFwdrLinkToTrafficSourceTable.')
lpIlsFwdrLinkToTrafficSourceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 312, 1, 1), Link()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLinkToTrafficSourceValue.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLinkToTrafficSourceValue.setDescription('This variable represents both the value and the index for the lpIlsFwdrLinkToTrafficSourceTable.')
lpIlsFwdrLt = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2))
lpIlsFwdrLtRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 1), )
if mibBuilder.loadTexts: lpIlsFwdrLtRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtRowStatusTable.setDescription('This entry controls the addition and deletion of lpIlsFwdrLt components.')
lpIlsFwdrLtRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtRowStatusEntry.setDescription('A single entry in the table represents a single lpIlsFwdrLt component.')
lpIlsFwdrLtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpIlsFwdrLt components. These components cannot be added nor deleted.')
lpIlsFwdrLtComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpIlsFwdrLtStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtStorageType.setDescription('This variable represents the storage type value for the lpIlsFwdrLt tables.')
lpIlsFwdrLtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpIlsFwdrLtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtIndex.setDescription('This variable represents the index for the lpIlsFwdrLt tables.')
lpIlsFwdrLtTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 20), )
if mibBuilder.loadTexts: lpIlsFwdrLtTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpIlsFwdrLtTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 20, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtTopEntry.setDescription('An entry in the lpIlsFwdrLtTopTable.')
lpIlsFwdrLtTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 20, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpIlsFwdrLtTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtTData.setDescription('This attribute is used to display and set attributes.')
lpIlsFwdrLtFrmCmp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 2))
lpIlsFwdrLtFrmCmpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 2, 1), )
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCmpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCmpRowStatusTable.setDescription('This entry controls the addition and deletion of lpIlsFwdrLtFrmCmp components.')
lpIlsFwdrLtFrmCmpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFrmCmpIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCmpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCmpRowStatusEntry.setDescription('A single entry in the table represents a single lpIlsFwdrLtFrmCmp component.')
lpIlsFwdrLtFrmCmpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCmpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCmpRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpIlsFwdrLtFrmCmp components. These components cannot be added nor deleted.')
lpIlsFwdrLtFrmCmpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCmpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCmpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpIlsFwdrLtFrmCmpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCmpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCmpStorageType.setDescription('This variable represents the storage type value for the lpIlsFwdrLtFrmCmp tables.')
lpIlsFwdrLtFrmCmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCmpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCmpIndex.setDescription('This variable represents the index for the lpIlsFwdrLtFrmCmp tables.')
lpIlsFwdrLtFrmCmpTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 2, 10), )
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCmpTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCmpTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpIlsFwdrLtFrmCmpTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFrmCmpIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCmpTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCmpTopEntry.setDescription('An entry in the lpIlsFwdrLtFrmCmpTopTable.')
lpIlsFwdrLtFrmCmpTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCmpTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCmpTData.setDescription('This attribute is used to display and set attributes.')
lpIlsFwdrLtFrmCpy = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 3))
lpIlsFwdrLtFrmCpyRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 3, 1), )
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCpyRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCpyRowStatusTable.setDescription('This entry controls the addition and deletion of lpIlsFwdrLtFrmCpy components.')
lpIlsFwdrLtFrmCpyRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFrmCpyIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCpyRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCpyRowStatusEntry.setDescription('A single entry in the table represents a single lpIlsFwdrLtFrmCpy component.')
lpIlsFwdrLtFrmCpyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCpyRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCpyRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpIlsFwdrLtFrmCpy components. These components cannot be added nor deleted.')
lpIlsFwdrLtFrmCpyComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCpyComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCpyComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpIlsFwdrLtFrmCpyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCpyStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCpyStorageType.setDescription('This variable represents the storage type value for the lpIlsFwdrLtFrmCpy tables.')
lpIlsFwdrLtFrmCpyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCpyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCpyIndex.setDescription('This variable represents the index for the lpIlsFwdrLtFrmCpy tables.')
lpIlsFwdrLtFrmCpyTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 3, 10), )
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCpyTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCpyTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpIlsFwdrLtFrmCpyTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFrmCpyIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCpyTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCpyTopEntry.setDescription('An entry in the lpIlsFwdrLtFrmCpyTopTable.')
lpIlsFwdrLtFrmCpyTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCpyTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFrmCpyTData.setDescription('This attribute is used to display and set attributes.')
lpIlsFwdrLtPrtCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 4))
lpIlsFwdrLtPrtCfgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 4, 1), )
if mibBuilder.loadTexts: lpIlsFwdrLtPrtCfgRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtPrtCfgRowStatusTable.setDescription('This entry controls the addition and deletion of lpIlsFwdrLtPrtCfg components.')
lpIlsFwdrLtPrtCfgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtPrtCfgIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtPrtCfgRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtPrtCfgRowStatusEntry.setDescription('A single entry in the table represents a single lpIlsFwdrLtPrtCfg component.')
lpIlsFwdrLtPrtCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtPrtCfgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtPrtCfgRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpIlsFwdrLtPrtCfg components. These components cannot be added nor deleted.')
lpIlsFwdrLtPrtCfgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtPrtCfgComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtPrtCfgComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpIlsFwdrLtPrtCfgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtPrtCfgStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtPrtCfgStorageType.setDescription('This variable represents the storage type value for the lpIlsFwdrLtPrtCfg tables.')
lpIlsFwdrLtPrtCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpIlsFwdrLtPrtCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtPrtCfgIndex.setDescription('This variable represents the index for the lpIlsFwdrLtPrtCfg tables.')
lpIlsFwdrLtPrtCfgTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 4, 10), )
if mibBuilder.loadTexts: lpIlsFwdrLtPrtCfgTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtPrtCfgTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpIlsFwdrLtPrtCfgTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtPrtCfgIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtPrtCfgTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtPrtCfgTopEntry.setDescription('An entry in the lpIlsFwdrLtPrtCfgTopTable.')
lpIlsFwdrLtPrtCfgTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpIlsFwdrLtPrtCfgTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtPrtCfgTData.setDescription('This attribute is used to display and set attributes.')
lpIlsFwdrLtFb = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5))
lpIlsFwdrLtFbRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 1), )
if mibBuilder.loadTexts: lpIlsFwdrLtFbRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbRowStatusTable.setDescription('This entry controls the addition and deletion of lpIlsFwdrLtFb components.')
lpIlsFwdrLtFbRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFbRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbRowStatusEntry.setDescription('A single entry in the table represents a single lpIlsFwdrLtFb component.')
lpIlsFwdrLtFbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpIlsFwdrLtFb components. These components cannot be added nor deleted.')
lpIlsFwdrLtFbComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpIlsFwdrLtFbStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbStorageType.setDescription('This variable represents the storage type value for the lpIlsFwdrLtFb tables.')
lpIlsFwdrLtFbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpIlsFwdrLtFbIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbIndex.setDescription('This variable represents the index for the lpIlsFwdrLtFb tables.')
lpIlsFwdrLtFbTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 20), )
if mibBuilder.loadTexts: lpIlsFwdrLtFbTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpIlsFwdrLtFbTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 20, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFbTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbTopEntry.setDescription('An entry in the lpIlsFwdrLtFbTopTable.')
lpIlsFwdrLtFbTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 20, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpIlsFwdrLtFbTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbTData.setDescription('This attribute is used to display and set attributes.')
lpIlsFwdrLtFbTxInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 2))
lpIlsFwdrLtFbTxInfoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 2, 1), )
if mibBuilder.loadTexts: lpIlsFwdrLtFbTxInfoRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbTxInfoRowStatusTable.setDescription('This entry controls the addition and deletion of lpIlsFwdrLtFbTxInfo components.')
lpIlsFwdrLtFbTxInfoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbTxInfoIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFbTxInfoRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbTxInfoRowStatusEntry.setDescription('A single entry in the table represents a single lpIlsFwdrLtFbTxInfo component.')
lpIlsFwdrLtFbTxInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbTxInfoRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbTxInfoRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpIlsFwdrLtFbTxInfo components. These components cannot be added nor deleted.')
lpIlsFwdrLtFbTxInfoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbTxInfoComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbTxInfoComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpIlsFwdrLtFbTxInfoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbTxInfoStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbTxInfoStorageType.setDescription('This variable represents the storage type value for the lpIlsFwdrLtFbTxInfo tables.')
lpIlsFwdrLtFbTxInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpIlsFwdrLtFbTxInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbTxInfoIndex.setDescription('This variable represents the index for the lpIlsFwdrLtFbTxInfo tables.')
lpIlsFwdrLtFbTxInfoTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 2, 10), )
if mibBuilder.loadTexts: lpIlsFwdrLtFbTxInfoTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbTxInfoTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpIlsFwdrLtFbTxInfoTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbTxInfoIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFbTxInfoTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbTxInfoTopEntry.setDescription('An entry in the lpIlsFwdrLtFbTxInfoTopTable.')
lpIlsFwdrLtFbTxInfoTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpIlsFwdrLtFbTxInfoTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbTxInfoTData.setDescription('This attribute is used to display and set attributes.')
lpIlsFwdrLtFbFddiMac = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 3))
lpIlsFwdrLtFbFddiMacRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 3, 1), )
if mibBuilder.loadTexts: lpIlsFwdrLtFbFddiMacRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbFddiMacRowStatusTable.setDescription('This entry controls the addition and deletion of lpIlsFwdrLtFbFddiMac components.')
lpIlsFwdrLtFbFddiMacRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbFddiMacIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFbFddiMacRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbFddiMacRowStatusEntry.setDescription('A single entry in the table represents a single lpIlsFwdrLtFbFddiMac component.')
lpIlsFwdrLtFbFddiMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbFddiMacRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbFddiMacRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpIlsFwdrLtFbFddiMac components. These components cannot be added nor deleted.')
lpIlsFwdrLtFbFddiMacComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbFddiMacComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbFddiMacComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpIlsFwdrLtFbFddiMacStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbFddiMacStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbFddiMacStorageType.setDescription('This variable represents the storage type value for the lpIlsFwdrLtFbFddiMac tables.')
lpIlsFwdrLtFbFddiMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpIlsFwdrLtFbFddiMacIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbFddiMacIndex.setDescription('This variable represents the index for the lpIlsFwdrLtFbFddiMac tables.')
lpIlsFwdrLtFbFddiMacTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 3, 10), )
if mibBuilder.loadTexts: lpIlsFwdrLtFbFddiMacTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbFddiMacTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpIlsFwdrLtFbFddiMacTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbFddiMacIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFbFddiMacTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbFddiMacTopEntry.setDescription('An entry in the lpIlsFwdrLtFbFddiMacTopTable.')
lpIlsFwdrLtFbFddiMacTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpIlsFwdrLtFbFddiMacTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbFddiMacTData.setDescription('This attribute is used to display and set attributes.')
lpIlsFwdrLtFbMacEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 4))
lpIlsFwdrLtFbMacEnetRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 4, 1), )
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacEnetRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacEnetRowStatusTable.setDescription('This entry controls the addition and deletion of lpIlsFwdrLtFbMacEnet components.')
lpIlsFwdrLtFbMacEnetRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbMacEnetIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacEnetRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacEnetRowStatusEntry.setDescription('A single entry in the table represents a single lpIlsFwdrLtFbMacEnet component.')
lpIlsFwdrLtFbMacEnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacEnetRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacEnetRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpIlsFwdrLtFbMacEnet components. These components cannot be added nor deleted.')
lpIlsFwdrLtFbMacEnetComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacEnetComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacEnetComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpIlsFwdrLtFbMacEnetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacEnetStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacEnetStorageType.setDescription('This variable represents the storage type value for the lpIlsFwdrLtFbMacEnet tables.')
lpIlsFwdrLtFbMacEnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacEnetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacEnetIndex.setDescription('This variable represents the index for the lpIlsFwdrLtFbMacEnet tables.')
lpIlsFwdrLtFbMacEnetTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 4, 10), )
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacEnetTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacEnetTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpIlsFwdrLtFbMacEnetTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbMacEnetIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacEnetTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacEnetTopEntry.setDescription('An entry in the lpIlsFwdrLtFbMacEnetTopTable.')
lpIlsFwdrLtFbMacEnetTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacEnetTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacEnetTData.setDescription('This attribute is used to display and set attributes.')
lpIlsFwdrLtFbMacTr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 5))
lpIlsFwdrLtFbMacTrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 5, 1), )
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacTrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacTrRowStatusTable.setDescription('This entry controls the addition and deletion of lpIlsFwdrLtFbMacTr components.')
lpIlsFwdrLtFbMacTrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbMacTrIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacTrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacTrRowStatusEntry.setDescription('A single entry in the table represents a single lpIlsFwdrLtFbMacTr component.')
lpIlsFwdrLtFbMacTrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacTrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacTrRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpIlsFwdrLtFbMacTr components. These components cannot be added nor deleted.')
lpIlsFwdrLtFbMacTrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacTrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacTrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpIlsFwdrLtFbMacTrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacTrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacTrStorageType.setDescription('This variable represents the storage type value for the lpIlsFwdrLtFbMacTr tables.')
lpIlsFwdrLtFbMacTrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacTrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacTrIndex.setDescription('This variable represents the index for the lpIlsFwdrLtFbMacTr tables.')
lpIlsFwdrLtFbMacTrTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 5, 10), )
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacTrTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacTrTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpIlsFwdrLtFbMacTrTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbMacTrIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacTrTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacTrTopEntry.setDescription('An entry in the lpIlsFwdrLtFbMacTrTopTable.')
lpIlsFwdrLtFbMacTrTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 5, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacTrTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbMacTrTData.setDescription('This attribute is used to display and set attributes.')
lpIlsFwdrLtFbData = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 6))
lpIlsFwdrLtFbDataRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 6, 1), )
if mibBuilder.loadTexts: lpIlsFwdrLtFbDataRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbDataRowStatusTable.setDescription('This entry controls the addition and deletion of lpIlsFwdrLtFbData components.')
lpIlsFwdrLtFbDataRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbDataIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFbDataRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbDataRowStatusEntry.setDescription('A single entry in the table represents a single lpIlsFwdrLtFbData component.')
lpIlsFwdrLtFbDataRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbDataRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbDataRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpIlsFwdrLtFbData components. These components cannot be added nor deleted.')
lpIlsFwdrLtFbDataComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbDataComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbDataComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpIlsFwdrLtFbDataStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbDataStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbDataStorageType.setDescription('This variable represents the storage type value for the lpIlsFwdrLtFbData tables.')
lpIlsFwdrLtFbDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpIlsFwdrLtFbDataIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbDataIndex.setDescription('This variable represents the index for the lpIlsFwdrLtFbData tables.')
lpIlsFwdrLtFbDataTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 6, 10), )
if mibBuilder.loadTexts: lpIlsFwdrLtFbDataTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbDataTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpIlsFwdrLtFbDataTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbDataIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFbDataTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbDataTopEntry.setDescription('An entry in the lpIlsFwdrLtFbDataTopTable.')
lpIlsFwdrLtFbDataTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 6, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpIlsFwdrLtFbDataTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbDataTData.setDescription('This attribute is used to display and set attributes.')
lpIlsFwdrLtFbIpH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 7))
lpIlsFwdrLtFbIpHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 7, 1), )
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpHRowStatusTable.setDescription('This entry controls the addition and deletion of lpIlsFwdrLtFbIpH components.')
lpIlsFwdrLtFbIpHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIpHIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpHRowStatusEntry.setDescription('A single entry in the table represents a single lpIlsFwdrLtFbIpH component.')
lpIlsFwdrLtFbIpHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpHRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpIlsFwdrLtFbIpH components. These components cannot be added nor deleted.')
lpIlsFwdrLtFbIpHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpIlsFwdrLtFbIpHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpHStorageType.setDescription('This variable represents the storage type value for the lpIlsFwdrLtFbIpH tables.')
lpIlsFwdrLtFbIpHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpHIndex.setDescription('This variable represents the index for the lpIlsFwdrLtFbIpH tables.')
lpIlsFwdrLtFbIpHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 7, 10), )
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpIlsFwdrLtFbIpHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 7, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIpHIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpHTopEntry.setDescription('An entry in the lpIlsFwdrLtFbIpHTopTable.')
lpIlsFwdrLtFbIpHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 7, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpHTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpHTData.setDescription('This attribute is used to display and set attributes.')
lpIlsFwdrLtFbLlch = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 8))
lpIlsFwdrLtFbLlchRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 8, 1), )
if mibBuilder.loadTexts: lpIlsFwdrLtFbLlchRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbLlchRowStatusTable.setDescription('This entry controls the addition and deletion of lpIlsFwdrLtFbLlch components.')
lpIlsFwdrLtFbLlchRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 8, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbLlchIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFbLlchRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbLlchRowStatusEntry.setDescription('A single entry in the table represents a single lpIlsFwdrLtFbLlch component.')
lpIlsFwdrLtFbLlchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 8, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbLlchRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbLlchRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpIlsFwdrLtFbLlch components. These components cannot be added nor deleted.')
lpIlsFwdrLtFbLlchComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbLlchComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbLlchComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpIlsFwdrLtFbLlchStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbLlchStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbLlchStorageType.setDescription('This variable represents the storage type value for the lpIlsFwdrLtFbLlch tables.')
lpIlsFwdrLtFbLlchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 8, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpIlsFwdrLtFbLlchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbLlchIndex.setDescription('This variable represents the index for the lpIlsFwdrLtFbLlch tables.')
lpIlsFwdrLtFbLlchTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 8, 10), )
if mibBuilder.loadTexts: lpIlsFwdrLtFbLlchTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbLlchTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpIlsFwdrLtFbLlchTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 8, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbLlchIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFbLlchTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbLlchTopEntry.setDescription('An entry in the lpIlsFwdrLtFbLlchTopTable.')
lpIlsFwdrLtFbLlchTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 8, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpIlsFwdrLtFbLlchTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbLlchTData.setDescription('This attribute is used to display and set attributes.')
lpIlsFwdrLtFbAppleH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 9))
lpIlsFwdrLtFbAppleHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 9, 1), )
if mibBuilder.loadTexts: lpIlsFwdrLtFbAppleHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbAppleHRowStatusTable.setDescription('This entry controls the addition and deletion of lpIlsFwdrLtFbAppleH components.')
lpIlsFwdrLtFbAppleHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 9, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbAppleHIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFbAppleHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbAppleHRowStatusEntry.setDescription('A single entry in the table represents a single lpIlsFwdrLtFbAppleH component.')
lpIlsFwdrLtFbAppleHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbAppleHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbAppleHRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpIlsFwdrLtFbAppleH components. These components cannot be added nor deleted.')
lpIlsFwdrLtFbAppleHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbAppleHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbAppleHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpIlsFwdrLtFbAppleHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbAppleHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbAppleHStorageType.setDescription('This variable represents the storage type value for the lpIlsFwdrLtFbAppleH tables.')
lpIlsFwdrLtFbAppleHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 9, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpIlsFwdrLtFbAppleHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbAppleHIndex.setDescription('This variable represents the index for the lpIlsFwdrLtFbAppleH tables.')
lpIlsFwdrLtFbAppleHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 9, 10), )
if mibBuilder.loadTexts: lpIlsFwdrLtFbAppleHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbAppleHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpIlsFwdrLtFbAppleHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 9, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbAppleHIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFbAppleHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbAppleHTopEntry.setDescription('An entry in the lpIlsFwdrLtFbAppleHTopTable.')
lpIlsFwdrLtFbAppleHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 9, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpIlsFwdrLtFbAppleHTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbAppleHTData.setDescription('This attribute is used to display and set attributes.')
lpIlsFwdrLtFbIpxH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 10))
lpIlsFwdrLtFbIpxHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 10, 1), )
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpxHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpxHRowStatusTable.setDescription('This entry controls the addition and deletion of lpIlsFwdrLtFbIpxH components.')
lpIlsFwdrLtFbIpxHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 10, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIpxHIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpxHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpxHRowStatusEntry.setDescription('A single entry in the table represents a single lpIlsFwdrLtFbIpxH component.')
lpIlsFwdrLtFbIpxHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 10, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpxHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpxHRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpIlsFwdrLtFbIpxH components. These components cannot be added nor deleted.')
lpIlsFwdrLtFbIpxHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpxHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpxHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpIlsFwdrLtFbIpxHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpxHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpxHStorageType.setDescription('This variable represents the storage type value for the lpIlsFwdrLtFbIpxH tables.')
lpIlsFwdrLtFbIpxHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 10, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpxHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpxHIndex.setDescription('This variable represents the index for the lpIlsFwdrLtFbIpxH tables.')
lpIlsFwdrLtFbIpxHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 10, 10), )
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpxHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpxHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpIlsFwdrLtFbIpxHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 10, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtFbIpxHIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpxHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpxHTopEntry.setDescription('An entry in the lpIlsFwdrLtFbIpxHTopTable.')
lpIlsFwdrLtFbIpxHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 5, 10, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpxHTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtFbIpxHTData.setDescription('This attribute is used to display and set attributes.')
lpIlsFwdrLtCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 6))
lpIlsFwdrLtCntlRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 6, 1), )
if mibBuilder.loadTexts: lpIlsFwdrLtCntlRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtCntlRowStatusTable.setDescription('This entry controls the addition and deletion of lpIlsFwdrLtCntl components.')
lpIlsFwdrLtCntlRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtCntlIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtCntlRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtCntlRowStatusEntry.setDescription('A single entry in the table represents a single lpIlsFwdrLtCntl component.')
lpIlsFwdrLtCntlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtCntlRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtCntlRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpIlsFwdrLtCntl components. These components cannot be added nor deleted.')
lpIlsFwdrLtCntlComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtCntlComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtCntlComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpIlsFwdrLtCntlStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrLtCntlStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtCntlStorageType.setDescription('This variable represents the storage type value for the lpIlsFwdrLtCntl tables.')
lpIlsFwdrLtCntlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpIlsFwdrLtCntlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtCntlIndex.setDescription('This variable represents the index for the lpIlsFwdrLtCntl tables.')
lpIlsFwdrLtCntlTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 6, 10), )
if mibBuilder.loadTexts: lpIlsFwdrLtCntlTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtCntlTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpIlsFwdrLtCntlTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrLtCntlIndex"))
if mibBuilder.loadTexts: lpIlsFwdrLtCntlTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtCntlTopEntry.setDescription('An entry in the lpIlsFwdrLtCntlTopTable.')
lpIlsFwdrLtCntlTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 2, 6, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpIlsFwdrLtCntlTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrLtCntlTData.setDescription('This attribute is used to display and set attributes.')
lpIlsFwdrTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5))
lpIlsFwdrTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5, 1), )
if mibBuilder.loadTexts: lpIlsFwdrTestRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrTestRowStatusTable.setDescription('This entry controls the addition and deletion of lpIlsFwdrTest components.')
lpIlsFwdrTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrTestIndex"))
if mibBuilder.loadTexts: lpIlsFwdrTestRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrTestRowStatusEntry.setDescription('A single entry in the table represents a single lpIlsFwdrTest component.')
lpIlsFwdrTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrTestRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrTestRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpIlsFwdrTest components. These components cannot be added nor deleted.')
lpIlsFwdrTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrTestComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrTestComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpIlsFwdrTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrTestStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrTestStorageType.setDescription('This variable represents the storage type value for the lpIlsFwdrTest tables.')
lpIlsFwdrTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpIlsFwdrTestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrTestIndex.setDescription('This variable represents the index for the lpIlsFwdrTest tables.')
lpIlsFwdrTestPTOTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5, 10), )
if mibBuilder.loadTexts: lpIlsFwdrTestPTOTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrTestPTOTable.setDescription('This group contains the operational data for the LanPortTest component.')
lpIlsFwdrTestPTOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrTestIndex"))
if mibBuilder.loadTexts: lpIlsFwdrTestPTOEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrTestPTOEntry.setDescription('An entry in the lpIlsFwdrTestPTOTable.')
lpIlsFwdrTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268))).clone(namedValues=NamedValues(("onCard", 0), ("normal", 1), ("wrapA", 257), ("wrapB", 258), ("thruA", 259), ("thruB", 260), ("extWrapA", 263), ("extWrapB", 264), ("extThruA", 265), ("extThruB", 266), ("extWrapAB", 267), ("extWrapBA", 268)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpIlsFwdrTestType.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrTestType.setDescription('This attribute is the type of test to be run. The available test types include the following: card test sets up an internal loop on the board and runs a bit error rate test; manual test assumes the line is looped back externally and a bit error rate test is performed; localLoop test loops back the local modem and performs a bit error rate test; remoteLoop test loops back the remote modem (or CSU) and performs a bit error rate test; externalLoop test loops back the line to the far end; payloadLoop test only loops back the payload data received from the incoming line; Note that localLoop, remoteLoop and payloadLoop are not supported by all function processors.')
lpIlsFwdrTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpIlsFwdrTestFrmSize.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrTestFrmSize.setDescription('This attribute defines the size of the test data frames in number of bytes.')
lpIlsFwdrTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpIlsFwdrTestDuration.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrTestDuration.setDescription('This attribute is the duration (in minutes) that test data will be transmitted. In the case of an externalLoop, this is the time that the loop is in effect. Note that dataStartDelay does not apply to the externalLoop.')
lpIlsFwdrTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5, 11), )
if mibBuilder.loadTexts: lpIlsFwdrTestResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrTestResultsTable.setDescription('This group contains all the statistics related attributes of the Test component.')
lpIlsFwdrTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpIlsFwdrTestIndex"))
if mibBuilder.loadTexts: lpIlsFwdrTestResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrTestResultsEntry.setDescription('An entry in the lpIlsFwdrTestResultsTable.')
lpIlsFwdrTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrTestElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrTestElapsedTime.setDescription('This attribute is the number of minutes elapsed since the test started for an externalLoop test. For a data test, this is the time since test data was first transmitted.')
lpIlsFwdrTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrTestTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrTestTimeRemaining.setDescription('This attribute is the number of minutes remaining before the test is to be stopped according to the duration attribute.')
lpIlsFwdrTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrTestCauseOfTermination.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrTestCauseOfTermination.setDescription('This attribute records the reason the test is terminated.')
lpIlsFwdrTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5, 11, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrTestFrmTx.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrTestFrmTx.setDescription('This attribute is the total number of frames sent during the test period. This counter is not expected to reach its maximum value.')
lpIlsFwdrTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5, 11, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrTestBitsTx.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrTestBitsTx.setDescription('This attribute is the total number of bits sent during the test period. This counter is not expected to reach its maximum value.')
lpIlsFwdrTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5, 11, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrTestFrmRx.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrTestFrmRx.setDescription('This attribute is the total number of frames received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
lpIlsFwdrTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5, 11, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrTestBitsRx.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrTestBitsRx.setDescription('This attribute is the total number of bits received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
lpIlsFwdrTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 21, 5, 11, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpIlsFwdrTestErroredFrmRx.setStatus('mandatory')
if mibBuilder.loadTexts: lpIlsFwdrTestErroredFrmRx.setDescription('This attribute is the total number of errored frames received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
lpEth100 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25))
lpEth100RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 1), )
if mibBuilder.loadTexts: lpEth100RowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100RowStatusTable.setDescription('This entry controls the addition and deletion of lpEth100 components.')
lpEth100RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"))
if mibBuilder.loadTexts: lpEth100RowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100RowStatusEntry.setDescription('A single entry in the table represents a single lpEth100 component.')
lpEth100RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100RowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100RowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEth100 components. These components can be added and deleted.')
lpEth100ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100ComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100ComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEth100StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100StorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100StorageType.setDescription('This variable represents the storage type value for the lpEth100 tables.')
lpEth100Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: lpEth100Index.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100Index.setDescription('This variable represents the index for the lpEth100 tables.')
lpEth100CidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 10), )
if mibBuilder.loadTexts: lpEth100CidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100CidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
lpEth100CidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"))
if mibBuilder.loadTexts: lpEth100CidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100CidDataEntry.setDescription('An entry in the lpEth100CidDataTable.')
lpEth100CustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100CustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100CustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
lpEth100IfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 11), )
if mibBuilder.loadTexts: lpEth100IfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100IfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
lpEth100IfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"))
if mibBuilder.loadTexts: lpEth100IfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100IfEntryEntry.setDescription('An entry in the lpEth100IfEntryTable.')
lpEth100IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100IfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100IfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
lpEth100IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 11, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100IfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
lpEth100ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 12), )
if mibBuilder.loadTexts: lpEth100ProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100ProvTable.setDescription('This group contains the provisionable attributes of the Eth100BaseT component.')
lpEth100ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"))
if mibBuilder.loadTexts: lpEth100ProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100ProvEntry.setDescription('An entry in the lpEth100ProvTable.')
lpEth100DuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2))).clone('half')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100DuplexMode.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100DuplexMode.setDescription('This attribute specifies the duplex mode of the port. This attribute is ignored if auto negotiation is successful.')
lpEth100LineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(100, 100), )).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100LineSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LineSpeed.setDescription('This attribute sets the operating speed for the Ethernet 100BaseT port. This attribute is ignored if auto negotiation is successful.')
lpEth100AutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100AutoNegotiation.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100AutoNegotiation.setDescription('This attribute is used to select whether or not the port does auto negotiation. The provisionable values of duplexMode and lineSpeed are ignored if auto negotiation is successful. Refer to the operational attribute autoNegStatus for auto negotiation results.')
lpEth100ApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 12, 1, 4), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100ApplicationFramerName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100ApplicationFramerName.setDescription('This attribute contains the component name of a Framer which is associated with the Eth100BaseT component. This defines which Lan Application will be using this Eth100BaseT interface.')
lpEth100AdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 13), )
if mibBuilder.loadTexts: lpEth100AdminInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100AdminInfoTable.setDescription('This group contains the attributes pertaining to the vendor of the equipment.')
lpEth100AdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"))
if mibBuilder.loadTexts: lpEth100AdminInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100AdminInfoEntry.setDescription('An entry in the lpEth100AdminInfoTable.')
lpEth100Vendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 13, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100Vendor.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100Vendor.setDescription('This is the name of the vendor supplying the facility.')
lpEth100CommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 13, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100CommentText.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100CommentText.setDescription('Any miscellaneous text about the facility.')
lpEth100StateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 15), )
if mibBuilder.loadTexts: lpEth100StateTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100StateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
lpEth100StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"))
if mibBuilder.loadTexts: lpEth100StateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100StateEntry.setDescription('An entry in the lpEth100StateTable.')
lpEth100AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100AdminState.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100AdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
lpEth100OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100OperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100OperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
lpEth100UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100UsageState.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100UsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
lpEth100OperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 16), )
if mibBuilder.loadTexts: lpEth100OperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100OperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
lpEth100OperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"))
if mibBuilder.loadTexts: lpEth100OperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100OperStatusEntry.setDescription('An entry in the lpEth100OperStatusTable.')
lpEth100SnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100SnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100SnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
lpEth100OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 17), )
if mibBuilder.loadTexts: lpEth100OperTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100OperTable.setDescription('This group contains the Port operational attributes of the Eth100BaseT component.')
lpEth100OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 17, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"))
if mibBuilder.loadTexts: lpEth100OperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100OperEntry.setDescription('An entry in the lpEth100OperTable.')
lpEth100MacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 17, 1, 1), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100MacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100MacAddress.setDescription('This attribute indicates the medium access controller (MAC) address. The MAC address is displayed in canonical format.')
lpEth100AutoNegStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("succeeded", 1), ("failed", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100AutoNegStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100AutoNegStatus.setDescription('This attribute displays the status of the auto negotiation at the Phy level.')
lpEth100ActualLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 17, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(100, 100), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100ActualLineSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100ActualLineSpeed.setDescription('This attribute indicates the line speed of the Eth100BaseT port.')
lpEth100ActualDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100ActualDuplexMode.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100ActualDuplexMode.setDescription('This attribute indicates whether the hardware is in half duplex or full duplex mode.')
lpEth100Eth100StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 18), )
if mibBuilder.loadTexts: lpEth100Eth100StatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100Eth100StatsTable.setDescription('This group contains the statistical attributes for the Eth100BaseT component.')
lpEth100Eth100StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 18, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"))
if mibBuilder.loadTexts: lpEth100Eth100StatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100Eth100StatsEntry.setDescription('An entry in the lpEth100Eth100StatsTable.')
lpEth100FramesTransmittedOk = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 18, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100FramesTransmittedOk.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100FramesTransmittedOk.setDescription('This attribute counts the number of frames which were transmitted without errors. This counter wraps to zero after it reaches its maximum value.')
lpEth100FramesReceivedOk = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100FramesReceivedOk.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100FramesReceivedOk.setDescription('This attribute counts the number of frames which were received without errors. This counter wraps to zero after it reaches its maximum value.')
lpEth100OctetsTransmittedOk = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100OctetsTransmittedOk.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100OctetsTransmittedOk.setDescription('This attribute counts the number of octets which were transmitted without errors. This counter wraps to zero after it reaches its maximum value.')
lpEth100OctetsReceivedOk = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100OctetsReceivedOk.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100OctetsReceivedOk.setDescription('This attribute counts the number of octets which were received without errors. This counter wraps to zero after it reaches its maximum value.')
lpEth100UndersizeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100UndersizeFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100UndersizeFrames.setDescription('This attribute counts the number of frames that were received but were less than the minimum size (64 bytes). This counter wraps to zero after it reaches its maximum value.')
lpEth100ReceivedOctetsIntoRouterBr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100ReceivedOctetsIntoRouterBr.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100ReceivedOctetsIntoRouterBr.setDescription('This attribute counts the number of octets that were not hardware switched but were passed the Router or Bridge software. This counter wraps to zero after it reaches its maximum value.')
lpEth100ReceivedFramesIntoRouterBr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100ReceivedFramesIntoRouterBr.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100ReceivedFramesIntoRouterBr.setDescription('This attribute counts the number of frames which were not hardware switched but were passed to the Router or Bridge software. This counter wraps to zero after it reaches its maximum value.')
lpEth100StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 19), )
if mibBuilder.loadTexts: lpEth100StatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100StatsTable.setDescription('This group contains statistical attributes for the Ethernet component.')
lpEth100StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 19, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"))
if mibBuilder.loadTexts: lpEth100StatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100StatsEntry.setDescription('An entry in the lpEth100StatsTable.')
lpEth100AlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 19, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100AlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100AlignmentErrors.setDescription('The alignmentErrors counter indicates the number of frames received which were not an integral number of octets in length. Frames will be checked for alignmentErrors before they are checked for Frame Check Sequence (FCS) errors. If there is an alignment error, the error will only be counted here and not in fcsErrors. This counter will wrap around after it reaches its maximum value.')
lpEth100FcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100FcsErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100FcsErrors.setDescription('The fcsErrors, Frame Check Sequence (FCS) error, counter indicates the number of frames received which were an integral number of octets in length and did not pass the FCS check. This counter will wrap around after it reaches its maximum value.')
lpEth100SingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100SingleCollisionFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100SingleCollisionFrames.setDescription('The singleCollisionFrames counter indicates the number of frames successfully transmitted which experienced exactly one collision. This counter will wrap around after it reaches its maximum value.')
lpEth100MultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100MultipleCollisionFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100MultipleCollisionFrames.setDescription('The multipleCollisionFrames counter indicates the number of frames successfully transmitted which experienced more than one collision. This counter will wrap around after it reaches its maximum value.')
lpEth100SqeTestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100SqeTestErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100SqeTestErrors.setDescription("The sqeTestErrors, Signal Quality Error (SQE) Test errors, counter indicates the number of times the 'SQE Test Error' message has been generated for the station. This counter will wrap around after it reaches its maximum value.")
lpEth100DeferredTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100DeferredTransmissions.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100DeferredTransmissions.setDescription('The deferredTransmissions counter indicates the number of frames which experienced a transmission delay because the medium was busy. This counter will wrap around after it reaches its maximum value.')
lpEth100LateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LateCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LateCollisions.setDescription('The lateCollisions counter indicates the number of times a collision was detected later than 512 bit-times into the transmission of a packet. This counter will wrap around after it reaches its maximum value.')
lpEth100ExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100ExcessiveCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100ExcessiveCollisions.setDescription('The excessiveCollisions counter indicates the number of frames which failed to get transmitted due to excessive collisions. This counter will wrap around after it reaches its maximum value.')
lpEth100MacTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 19, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100MacTransmitErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100MacTransmitErrors.setDescription('The Medium Access Controller (MAC) transmit error counter indicates the number of times that a transmission failed due to internal MAC transmit errors. This counter will wrap around after it reaches its maximum value.')
lpEth100CarrierSenseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 19, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100CarrierSenseErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100CarrierSenseErrors.setDescription('The carrier sense error counter indicates the number of times that the carrier sense condition was lost or never asserted when attempting to transmit a frame. This counter will wrap around after it reaches its maximum value.')
lpEth100FrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 19, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100FrameTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100FrameTooLongs.setDescription('The frame too long counter indicates the number of frames received which exceeded the maximum frame size. This counter will wrap around after it reaches its maximum value.')
lpEth100MacReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 19, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100MacReceiveErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100MacReceiveErrors.setDescription('The Medium Access Controller (MAC) receive error counter indicates the number of times a receive failed due to internal MAC receive errors. This counter will wrap around after it reaches its maximum value.')
lpEth100Lt = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2))
lpEth100LtRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 1), )
if mibBuilder.loadTexts: lpEth100LtRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtRowStatusTable.setDescription('This entry controls the addition and deletion of lpEth100Lt components.')
lpEth100LtRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"))
if mibBuilder.loadTexts: lpEth100LtRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtRowStatusEntry.setDescription('A single entry in the table represents a single lpEth100Lt component.')
lpEth100LtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEth100Lt components. These components cannot be added nor deleted.')
lpEth100LtComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEth100LtStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtStorageType.setDescription('This variable represents the storage type value for the lpEth100Lt tables.')
lpEth100LtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEth100LtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtIndex.setDescription('This variable represents the index for the lpEth100Lt tables.')
lpEth100LtTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 20), )
if mibBuilder.loadTexts: lpEth100LtTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEth100LtTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 20, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"))
if mibBuilder.loadTexts: lpEth100LtTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtTopEntry.setDescription('An entry in the lpEth100LtTopTable.')
lpEth100LtTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 20, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100LtTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtTData.setDescription('This attribute is used to display and set attributes.')
lpEth100LtFrmCmp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 2))
lpEth100LtFrmCmpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 2, 1), )
if mibBuilder.loadTexts: lpEth100LtFrmCmpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFrmCmpRowStatusTable.setDescription('This entry controls the addition and deletion of lpEth100LtFrmCmp components.')
lpEth100LtFrmCmpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFrmCmpIndex"))
if mibBuilder.loadTexts: lpEth100LtFrmCmpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFrmCmpRowStatusEntry.setDescription('A single entry in the table represents a single lpEth100LtFrmCmp component.')
lpEth100LtFrmCmpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFrmCmpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFrmCmpRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEth100LtFrmCmp components. These components cannot be added nor deleted.')
lpEth100LtFrmCmpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFrmCmpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFrmCmpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEth100LtFrmCmpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFrmCmpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFrmCmpStorageType.setDescription('This variable represents the storage type value for the lpEth100LtFrmCmp tables.')
lpEth100LtFrmCmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEth100LtFrmCmpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFrmCmpIndex.setDescription('This variable represents the index for the lpEth100LtFrmCmp tables.')
lpEth100LtFrmCmpTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 2, 10), )
if mibBuilder.loadTexts: lpEth100LtFrmCmpTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFrmCmpTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEth100LtFrmCmpTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFrmCmpIndex"))
if mibBuilder.loadTexts: lpEth100LtFrmCmpTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFrmCmpTopEntry.setDescription('An entry in the lpEth100LtFrmCmpTopTable.')
lpEth100LtFrmCmpTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100LtFrmCmpTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFrmCmpTData.setDescription('This attribute is used to display and set attributes.')
lpEth100LtFrmCpy = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 3))
lpEth100LtFrmCpyRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 3, 1), )
if mibBuilder.loadTexts: lpEth100LtFrmCpyRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFrmCpyRowStatusTable.setDescription('This entry controls the addition and deletion of lpEth100LtFrmCpy components.')
lpEth100LtFrmCpyRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFrmCpyIndex"))
if mibBuilder.loadTexts: lpEth100LtFrmCpyRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFrmCpyRowStatusEntry.setDescription('A single entry in the table represents a single lpEth100LtFrmCpy component.')
lpEth100LtFrmCpyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFrmCpyRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFrmCpyRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEth100LtFrmCpy components. These components cannot be added nor deleted.')
lpEth100LtFrmCpyComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFrmCpyComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFrmCpyComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEth100LtFrmCpyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFrmCpyStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFrmCpyStorageType.setDescription('This variable represents the storage type value for the lpEth100LtFrmCpy tables.')
lpEth100LtFrmCpyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEth100LtFrmCpyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFrmCpyIndex.setDescription('This variable represents the index for the lpEth100LtFrmCpy tables.')
lpEth100LtFrmCpyTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 3, 10), )
if mibBuilder.loadTexts: lpEth100LtFrmCpyTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFrmCpyTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEth100LtFrmCpyTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFrmCpyIndex"))
if mibBuilder.loadTexts: lpEth100LtFrmCpyTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFrmCpyTopEntry.setDescription('An entry in the lpEth100LtFrmCpyTopTable.')
lpEth100LtFrmCpyTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100LtFrmCpyTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFrmCpyTData.setDescription('This attribute is used to display and set attributes.')
lpEth100LtPrtCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 4))
lpEth100LtPrtCfgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 4, 1), )
if mibBuilder.loadTexts: lpEth100LtPrtCfgRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtPrtCfgRowStatusTable.setDescription('This entry controls the addition and deletion of lpEth100LtPrtCfg components.')
lpEth100LtPrtCfgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtPrtCfgIndex"))
if mibBuilder.loadTexts: lpEth100LtPrtCfgRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtPrtCfgRowStatusEntry.setDescription('A single entry in the table represents a single lpEth100LtPrtCfg component.')
lpEth100LtPrtCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtPrtCfgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtPrtCfgRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEth100LtPrtCfg components. These components cannot be added nor deleted.')
lpEth100LtPrtCfgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtPrtCfgComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtPrtCfgComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEth100LtPrtCfgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtPrtCfgStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtPrtCfgStorageType.setDescription('This variable represents the storage type value for the lpEth100LtPrtCfg tables.')
lpEth100LtPrtCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEth100LtPrtCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtPrtCfgIndex.setDescription('This variable represents the index for the lpEth100LtPrtCfg tables.')
lpEth100LtPrtCfgTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 4, 10), )
if mibBuilder.loadTexts: lpEth100LtPrtCfgTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtPrtCfgTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEth100LtPrtCfgTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtPrtCfgIndex"))
if mibBuilder.loadTexts: lpEth100LtPrtCfgTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtPrtCfgTopEntry.setDescription('An entry in the lpEth100LtPrtCfgTopTable.')
lpEth100LtPrtCfgTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100LtPrtCfgTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtPrtCfgTData.setDescription('This attribute is used to display and set attributes.')
lpEth100LtFb = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5))
lpEth100LtFbRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 1), )
if mibBuilder.loadTexts: lpEth100LtFbRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbRowStatusTable.setDescription('This entry controls the addition and deletion of lpEth100LtFb components.')
lpEth100LtFbRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIndex"))
if mibBuilder.loadTexts: lpEth100LtFbRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbRowStatusEntry.setDescription('A single entry in the table represents a single lpEth100LtFb component.')
lpEth100LtFbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEth100LtFb components. These components cannot be added nor deleted.')
lpEth100LtFbComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEth100LtFbStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbStorageType.setDescription('This variable represents the storage type value for the lpEth100LtFb tables.')
lpEth100LtFbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEth100LtFbIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbIndex.setDescription('This variable represents the index for the lpEth100LtFb tables.')
lpEth100LtFbTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 20), )
if mibBuilder.loadTexts: lpEth100LtFbTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEth100LtFbTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 20, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIndex"))
if mibBuilder.loadTexts: lpEth100LtFbTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbTopEntry.setDescription('An entry in the lpEth100LtFbTopTable.')
lpEth100LtFbTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 20, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100LtFbTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbTData.setDescription('This attribute is used to display and set attributes.')
lpEth100LtFbTxInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 2))
lpEth100LtFbTxInfoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 2, 1), )
if mibBuilder.loadTexts: lpEth100LtFbTxInfoRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbTxInfoRowStatusTable.setDescription('This entry controls the addition and deletion of lpEth100LtFbTxInfo components.')
lpEth100LtFbTxInfoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbTxInfoIndex"))
if mibBuilder.loadTexts: lpEth100LtFbTxInfoRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbTxInfoRowStatusEntry.setDescription('A single entry in the table represents a single lpEth100LtFbTxInfo component.')
lpEth100LtFbTxInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbTxInfoRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbTxInfoRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEth100LtFbTxInfo components. These components cannot be added nor deleted.')
lpEth100LtFbTxInfoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbTxInfoComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbTxInfoComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEth100LtFbTxInfoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbTxInfoStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbTxInfoStorageType.setDescription('This variable represents the storage type value for the lpEth100LtFbTxInfo tables.')
lpEth100LtFbTxInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEth100LtFbTxInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbTxInfoIndex.setDescription('This variable represents the index for the lpEth100LtFbTxInfo tables.')
lpEth100LtFbTxInfoTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 2, 10), )
if mibBuilder.loadTexts: lpEth100LtFbTxInfoTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbTxInfoTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEth100LtFbTxInfoTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbTxInfoIndex"))
if mibBuilder.loadTexts: lpEth100LtFbTxInfoTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbTxInfoTopEntry.setDescription('An entry in the lpEth100LtFbTxInfoTopTable.')
lpEth100LtFbTxInfoTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100LtFbTxInfoTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbTxInfoTData.setDescription('This attribute is used to display and set attributes.')
lpEth100LtFbFddiMac = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 3))
lpEth100LtFbFddiMacRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 3, 1), )
if mibBuilder.loadTexts: lpEth100LtFbFddiMacRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbFddiMacRowStatusTable.setDescription('This entry controls the addition and deletion of lpEth100LtFbFddiMac components.')
lpEth100LtFbFddiMacRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbFddiMacIndex"))
if mibBuilder.loadTexts: lpEth100LtFbFddiMacRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbFddiMacRowStatusEntry.setDescription('A single entry in the table represents a single lpEth100LtFbFddiMac component.')
lpEth100LtFbFddiMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbFddiMacRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbFddiMacRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEth100LtFbFddiMac components. These components cannot be added nor deleted.')
lpEth100LtFbFddiMacComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbFddiMacComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbFddiMacComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEth100LtFbFddiMacStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbFddiMacStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbFddiMacStorageType.setDescription('This variable represents the storage type value for the lpEth100LtFbFddiMac tables.')
lpEth100LtFbFddiMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEth100LtFbFddiMacIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbFddiMacIndex.setDescription('This variable represents the index for the lpEth100LtFbFddiMac tables.')
lpEth100LtFbFddiMacTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 3, 10), )
if mibBuilder.loadTexts: lpEth100LtFbFddiMacTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbFddiMacTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEth100LtFbFddiMacTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbFddiMacIndex"))
if mibBuilder.loadTexts: lpEth100LtFbFddiMacTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbFddiMacTopEntry.setDescription('An entry in the lpEth100LtFbFddiMacTopTable.')
lpEth100LtFbFddiMacTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100LtFbFddiMacTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbFddiMacTData.setDescription('This attribute is used to display and set attributes.')
lpEth100LtFbMacEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 4))
lpEth100LtFbMacEnetRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 4, 1), )
if mibBuilder.loadTexts: lpEth100LtFbMacEnetRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbMacEnetRowStatusTable.setDescription('This entry controls the addition and deletion of lpEth100LtFbMacEnet components.')
lpEth100LtFbMacEnetRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbMacEnetIndex"))
if mibBuilder.loadTexts: lpEth100LtFbMacEnetRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbMacEnetRowStatusEntry.setDescription('A single entry in the table represents a single lpEth100LtFbMacEnet component.')
lpEth100LtFbMacEnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbMacEnetRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbMacEnetRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEth100LtFbMacEnet components. These components cannot be added nor deleted.')
lpEth100LtFbMacEnetComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbMacEnetComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbMacEnetComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEth100LtFbMacEnetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbMacEnetStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbMacEnetStorageType.setDescription('This variable represents the storage type value for the lpEth100LtFbMacEnet tables.')
lpEth100LtFbMacEnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEth100LtFbMacEnetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbMacEnetIndex.setDescription('This variable represents the index for the lpEth100LtFbMacEnet tables.')
lpEth100LtFbMacEnetTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 4, 10), )
if mibBuilder.loadTexts: lpEth100LtFbMacEnetTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbMacEnetTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEth100LtFbMacEnetTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbMacEnetIndex"))
if mibBuilder.loadTexts: lpEth100LtFbMacEnetTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbMacEnetTopEntry.setDescription('An entry in the lpEth100LtFbMacEnetTopTable.')
lpEth100LtFbMacEnetTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100LtFbMacEnetTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbMacEnetTData.setDescription('This attribute is used to display and set attributes.')
lpEth100LtFbMacTr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 5))
lpEth100LtFbMacTrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 5, 1), )
if mibBuilder.loadTexts: lpEth100LtFbMacTrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbMacTrRowStatusTable.setDescription('This entry controls the addition and deletion of lpEth100LtFbMacTr components.')
lpEth100LtFbMacTrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbMacTrIndex"))
if mibBuilder.loadTexts: lpEth100LtFbMacTrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbMacTrRowStatusEntry.setDescription('A single entry in the table represents a single lpEth100LtFbMacTr component.')
lpEth100LtFbMacTrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbMacTrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbMacTrRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEth100LtFbMacTr components. These components cannot be added nor deleted.')
lpEth100LtFbMacTrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbMacTrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbMacTrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEth100LtFbMacTrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbMacTrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbMacTrStorageType.setDescription('This variable represents the storage type value for the lpEth100LtFbMacTr tables.')
lpEth100LtFbMacTrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEth100LtFbMacTrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbMacTrIndex.setDescription('This variable represents the index for the lpEth100LtFbMacTr tables.')
lpEth100LtFbMacTrTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 5, 10), )
if mibBuilder.loadTexts: lpEth100LtFbMacTrTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbMacTrTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEth100LtFbMacTrTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbMacTrIndex"))
if mibBuilder.loadTexts: lpEth100LtFbMacTrTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbMacTrTopEntry.setDescription('An entry in the lpEth100LtFbMacTrTopTable.')
lpEth100LtFbMacTrTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 5, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100LtFbMacTrTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbMacTrTData.setDescription('This attribute is used to display and set attributes.')
lpEth100LtFbData = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 6))
lpEth100LtFbDataRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 6, 1), )
if mibBuilder.loadTexts: lpEth100LtFbDataRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbDataRowStatusTable.setDescription('This entry controls the addition and deletion of lpEth100LtFbData components.')
lpEth100LtFbDataRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbDataIndex"))
if mibBuilder.loadTexts: lpEth100LtFbDataRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbDataRowStatusEntry.setDescription('A single entry in the table represents a single lpEth100LtFbData component.')
lpEth100LtFbDataRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbDataRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbDataRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEth100LtFbData components. These components cannot be added nor deleted.')
lpEth100LtFbDataComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbDataComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbDataComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEth100LtFbDataStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbDataStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbDataStorageType.setDescription('This variable represents the storage type value for the lpEth100LtFbData tables.')
lpEth100LtFbDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEth100LtFbDataIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbDataIndex.setDescription('This variable represents the index for the lpEth100LtFbData tables.')
lpEth100LtFbDataTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 6, 10), )
if mibBuilder.loadTexts: lpEth100LtFbDataTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbDataTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEth100LtFbDataTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbDataIndex"))
if mibBuilder.loadTexts: lpEth100LtFbDataTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbDataTopEntry.setDescription('An entry in the lpEth100LtFbDataTopTable.')
lpEth100LtFbDataTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 6, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100LtFbDataTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbDataTData.setDescription('This attribute is used to display and set attributes.')
lpEth100LtFbIpH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 7))
lpEth100LtFbIpHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 7, 1), )
if mibBuilder.loadTexts: lpEth100LtFbIpHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbIpHRowStatusTable.setDescription('This entry controls the addition and deletion of lpEth100LtFbIpH components.')
lpEth100LtFbIpHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIpHIndex"))
if mibBuilder.loadTexts: lpEth100LtFbIpHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbIpHRowStatusEntry.setDescription('A single entry in the table represents a single lpEth100LtFbIpH component.')
lpEth100LtFbIpHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbIpHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbIpHRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEth100LtFbIpH components. These components cannot be added nor deleted.')
lpEth100LtFbIpHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbIpHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbIpHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEth100LtFbIpHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbIpHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbIpHStorageType.setDescription('This variable represents the storage type value for the lpEth100LtFbIpH tables.')
lpEth100LtFbIpHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEth100LtFbIpHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbIpHIndex.setDescription('This variable represents the index for the lpEth100LtFbIpH tables.')
lpEth100LtFbIpHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 7, 10), )
if mibBuilder.loadTexts: lpEth100LtFbIpHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbIpHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEth100LtFbIpHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 7, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIpHIndex"))
if mibBuilder.loadTexts: lpEth100LtFbIpHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbIpHTopEntry.setDescription('An entry in the lpEth100LtFbIpHTopTable.')
lpEth100LtFbIpHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 7, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100LtFbIpHTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbIpHTData.setDescription('This attribute is used to display and set attributes.')
lpEth100LtFbLlch = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 8))
lpEth100LtFbLlchRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 8, 1), )
if mibBuilder.loadTexts: lpEth100LtFbLlchRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbLlchRowStatusTable.setDescription('This entry controls the addition and deletion of lpEth100LtFbLlch components.')
lpEth100LtFbLlchRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 8, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbLlchIndex"))
if mibBuilder.loadTexts: lpEth100LtFbLlchRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbLlchRowStatusEntry.setDescription('A single entry in the table represents a single lpEth100LtFbLlch component.')
lpEth100LtFbLlchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 8, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbLlchRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbLlchRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEth100LtFbLlch components. These components cannot be added nor deleted.')
lpEth100LtFbLlchComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbLlchComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbLlchComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEth100LtFbLlchStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbLlchStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbLlchStorageType.setDescription('This variable represents the storage type value for the lpEth100LtFbLlch tables.')
lpEth100LtFbLlchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 8, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEth100LtFbLlchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbLlchIndex.setDescription('This variable represents the index for the lpEth100LtFbLlch tables.')
lpEth100LtFbLlchTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 8, 10), )
if mibBuilder.loadTexts: lpEth100LtFbLlchTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbLlchTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEth100LtFbLlchTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 8, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbLlchIndex"))
if mibBuilder.loadTexts: lpEth100LtFbLlchTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbLlchTopEntry.setDescription('An entry in the lpEth100LtFbLlchTopTable.')
lpEth100LtFbLlchTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 8, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100LtFbLlchTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbLlchTData.setDescription('This attribute is used to display and set attributes.')
lpEth100LtFbAppleH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 9))
lpEth100LtFbAppleHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 9, 1), )
if mibBuilder.loadTexts: lpEth100LtFbAppleHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbAppleHRowStatusTable.setDescription('This entry controls the addition and deletion of lpEth100LtFbAppleH components.')
lpEth100LtFbAppleHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 9, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbAppleHIndex"))
if mibBuilder.loadTexts: lpEth100LtFbAppleHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbAppleHRowStatusEntry.setDescription('A single entry in the table represents a single lpEth100LtFbAppleH component.')
lpEth100LtFbAppleHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbAppleHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbAppleHRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEth100LtFbAppleH components. These components cannot be added nor deleted.')
lpEth100LtFbAppleHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbAppleHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbAppleHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEth100LtFbAppleHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbAppleHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbAppleHStorageType.setDescription('This variable represents the storage type value for the lpEth100LtFbAppleH tables.')
lpEth100LtFbAppleHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 9, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEth100LtFbAppleHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbAppleHIndex.setDescription('This variable represents the index for the lpEth100LtFbAppleH tables.')
lpEth100LtFbAppleHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 9, 10), )
if mibBuilder.loadTexts: lpEth100LtFbAppleHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbAppleHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEth100LtFbAppleHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 9, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbAppleHIndex"))
if mibBuilder.loadTexts: lpEth100LtFbAppleHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbAppleHTopEntry.setDescription('An entry in the lpEth100LtFbAppleHTopTable.')
lpEth100LtFbAppleHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 9, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100LtFbAppleHTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbAppleHTData.setDescription('This attribute is used to display and set attributes.')
lpEth100LtFbIpxH = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 10))
lpEth100LtFbIpxHRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 10, 1), )
if mibBuilder.loadTexts: lpEth100LtFbIpxHRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbIpxHRowStatusTable.setDescription('This entry controls the addition and deletion of lpEth100LtFbIpxH components.')
lpEth100LtFbIpxHRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 10, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIpxHIndex"))
if mibBuilder.loadTexts: lpEth100LtFbIpxHRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbIpxHRowStatusEntry.setDescription('A single entry in the table represents a single lpEth100LtFbIpxH component.')
lpEth100LtFbIpxHRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 10, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbIpxHRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbIpxHRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEth100LtFbIpxH components. These components cannot be added nor deleted.')
lpEth100LtFbIpxHComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbIpxHComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbIpxHComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEth100LtFbIpxHStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtFbIpxHStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbIpxHStorageType.setDescription('This variable represents the storage type value for the lpEth100LtFbIpxH tables.')
lpEth100LtFbIpxHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 10, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEth100LtFbIpxHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbIpxHIndex.setDescription('This variable represents the index for the lpEth100LtFbIpxH tables.')
lpEth100LtFbIpxHTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 10, 10), )
if mibBuilder.loadTexts: lpEth100LtFbIpxHTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbIpxHTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEth100LtFbIpxHTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 10, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtFbIpxHIndex"))
if mibBuilder.loadTexts: lpEth100LtFbIpxHTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbIpxHTopEntry.setDescription('An entry in the lpEth100LtFbIpxHTopTable.')
lpEth100LtFbIpxHTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 5, 10, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100LtFbIpxHTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtFbIpxHTData.setDescription('This attribute is used to display and set attributes.')
lpEth100LtCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 6))
lpEth100LtCntlRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 6, 1), )
if mibBuilder.loadTexts: lpEth100LtCntlRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtCntlRowStatusTable.setDescription('This entry controls the addition and deletion of lpEth100LtCntl components.')
lpEth100LtCntlRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtCntlIndex"))
if mibBuilder.loadTexts: lpEth100LtCntlRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtCntlRowStatusEntry.setDescription('A single entry in the table represents a single lpEth100LtCntl component.')
lpEth100LtCntlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtCntlRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtCntlRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEth100LtCntl components. These components cannot be added nor deleted.')
lpEth100LtCntlComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtCntlComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtCntlComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEth100LtCntlStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100LtCntlStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtCntlStorageType.setDescription('This variable represents the storage type value for the lpEth100LtCntl tables.')
lpEth100LtCntlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEth100LtCntlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtCntlIndex.setDescription('This variable represents the index for the lpEth100LtCntl tables.')
lpEth100LtCntlTopTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 6, 10), )
if mibBuilder.loadTexts: lpEth100LtCntlTopTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtCntlTopTable.setDescription('This group contains the operational data for the LanTest component and its subcomponents.')
lpEth100LtCntlTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100LtCntlIndex"))
if mibBuilder.loadTexts: lpEth100LtCntlTopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtCntlTopEntry.setDescription('An entry in the lpEth100LtCntlTopTable.')
lpEth100LtCntlTData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 2, 6, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100LtCntlTData.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100LtCntlTData.setDescription('This attribute is used to display and set attributes.')
lpEth100Test = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3))
lpEth100TestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3, 1), )
if mibBuilder.loadTexts: lpEth100TestRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100TestRowStatusTable.setDescription('This entry controls the addition and deletion of lpEth100Test components.')
lpEth100TestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100TestIndex"))
if mibBuilder.loadTexts: lpEth100TestRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100TestRowStatusEntry.setDescription('A single entry in the table represents a single lpEth100Test component.')
lpEth100TestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100TestRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100TestRowStatus.setDescription('This variable is used as the basis for SNMP naming of lpEth100Test components. These components cannot be added nor deleted.')
lpEth100TestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100TestComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100TestComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
lpEth100TestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100TestStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100TestStorageType.setDescription('This variable represents the storage type value for the lpEth100Test tables.')
lpEth100TestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEth100TestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100TestIndex.setDescription('This variable represents the index for the lpEth100Test tables.')
lpEth100TestPTOTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3, 10), )
if mibBuilder.loadTexts: lpEth100TestPTOTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100TestPTOTable.setDescription('This group contains the operational data for the LanPortTest component.')
lpEth100TestPTOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100TestIndex"))
if mibBuilder.loadTexts: lpEth100TestPTOEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100TestPTOEntry.setDescription('An entry in the lpEth100TestPTOTable.')
lpEth100TestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268))).clone(namedValues=NamedValues(("onCard", 0), ("normal", 1), ("wrapA", 257), ("wrapB", 258), ("thruA", 259), ("thruB", 260), ("extWrapA", 263), ("extWrapB", 264), ("extThruA", 265), ("extThruB", 266), ("extWrapAB", 267), ("extWrapBA", 268)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100TestType.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100TestType.setDescription('This attribute is the type of test to be run. The available test types include the following: card test sets up an internal loop on the board and runs a bit error rate test; manual test assumes the line is looped back externally and a bit error rate test is performed; localLoop test loops back the local modem and performs a bit error rate test; remoteLoop test loops back the remote modem (or CSU) and performs a bit error rate test; externalLoop test loops back the line to the far end; payloadLoop test only loops back the payload data received from the incoming line; Note that localLoop, remoteLoop and payloadLoop are not supported by all function processors.')
lpEth100TestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100TestFrmSize.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100TestFrmSize.setDescription('This attribute defines the size of the test data frames in number of bytes.')
lpEth100TestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEth100TestDuration.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100TestDuration.setDescription('This attribute is the duration (in minutes) that test data will be transmitted. In the case of an externalLoop, this is the time that the loop is in effect. Note that dataStartDelay does not apply to the externalLoop.')
lpEth100TestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3, 11), )
if mibBuilder.loadTexts: lpEth100TestResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100TestResultsTable.setDescription('This group contains all the statistics related attributes of the Test component.')
lpEth100TestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100Index"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "lpEth100TestIndex"))
if mibBuilder.loadTexts: lpEth100TestResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100TestResultsEntry.setDescription('An entry in the lpEth100TestResultsTable.')
lpEth100TestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100TestElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100TestElapsedTime.setDescription('This attribute is the number of minutes elapsed since the test started for an externalLoop test. For a data test, this is the time since test data was first transmitted.')
lpEth100TestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100TestTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100TestTimeRemaining.setDescription('This attribute is the number of minutes remaining before the test is to be stopped according to the duration attribute.')
lpEth100TestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100TestCauseOfTermination.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100TestCauseOfTermination.setDescription('This attribute records the reason the test is terminated.')
lpEth100TestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3, 11, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100TestFrmTx.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100TestFrmTx.setDescription('This attribute is the total number of frames sent during the test period. This counter is not expected to reach its maximum value.')
lpEth100TestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3, 11, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100TestBitsTx.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100TestBitsTx.setDescription('This attribute is the total number of bits sent during the test period. This counter is not expected to reach its maximum value.')
lpEth100TestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3, 11, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100TestFrmRx.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100TestFrmRx.setDescription('This attribute is the total number of frames received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
lpEth100TestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3, 11, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100TestBitsRx.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100TestBitsRx.setDescription('This attribute is the total number of bits received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
lpEth100TestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 25, 3, 11, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEth100TestErroredFrmRx.setStatus('mandatory')
if mibBuilder.loadTexts: lpEth100TestErroredFrmRx.setDescription('This attribute is the total number of errored frames received during the test period. This counter is not expected to reach its maximum value. The counter will wrap around to 0 if it does reach its maximum value.')
la = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105))
laRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 1), )
if mibBuilder.loadTexts: laRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: laRowStatusTable.setDescription('This entry controls the addition and deletion of la components.')
laRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LanDriversMIB", "laIndex"))
if mibBuilder.loadTexts: laRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: laRowStatusEntry.setDescription('A single entry in the table represents a single la component.')
laRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: laRowStatus.setDescription('This variable is used as the basis for SNMP naming of la components. These components can be added and deleted.')
laComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: laComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
laStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: laStorageType.setDescription('This variable represents the storage type value for the la tables.')
laIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: laIndex.setStatus('mandatory')
if mibBuilder.loadTexts: laIndex.setDescription('This variable represents the index for the la tables.')
laCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 10), )
if mibBuilder.loadTexts: laCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: laCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
laCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LanDriversMIB", "laIndex"))
if mibBuilder.loadTexts: laCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: laCidDataEntry.setDescription('An entry in the laCidDataTable.')
laCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: laCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
laMediaProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 11), )
if mibBuilder.loadTexts: laMediaProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: laMediaProvTable.setDescription('This group contains the base provisioning data for the Media Application component.')
laMediaProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LanDriversMIB", "laIndex"))
if mibBuilder.loadTexts: laMediaProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: laMediaProvEntry.setDescription('An entry in the laMediaProvTable.')
laLinkToProtocolPort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 11, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laLinkToProtocolPort.setStatus('mandatory')
if mibBuilder.loadTexts: laLinkToProtocolPort.setDescription('This attribute contains a protocol port component name. The attribute associates the application with a protocol port.')
laIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 12), )
if mibBuilder.loadTexts: laIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: laIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
laIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LanDriversMIB", "laIndex"))
if mibBuilder.loadTexts: laIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: laIfEntryEntry.setDescription('An entry in the laIfEntryTable.')
laIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: laIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
laIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 12, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: laIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: laIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
laStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 13), )
if mibBuilder.loadTexts: laStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: laStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
laStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LanDriversMIB", "laIndex"))
if mibBuilder.loadTexts: laStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: laStateEntry.setDescription('An entry in the laStateTable.')
laAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: laAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: laAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
laOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: laOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: laOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
laUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: laUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: laUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
laOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 14), )
if mibBuilder.loadTexts: laOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: laOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
laOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LanDriversMIB", "laIndex"))
if mibBuilder.loadTexts: laOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: laOperStatusEntry.setDescription('An entry in the laOperStatusTable.')
laSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: laSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: laSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
laFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 2))
laFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 2, 1), )
if mibBuilder.loadTexts: laFramerRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: laFramerRowStatusTable.setDescription('This entry controls the addition and deletion of laFramer components.')
laFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LanDriversMIB", "laIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "laFramerIndex"))
if mibBuilder.loadTexts: laFramerRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: laFramerRowStatusEntry.setDescription('A single entry in the table represents a single laFramer component.')
laFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laFramerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: laFramerRowStatus.setDescription('This variable is used as the basis for SNMP naming of laFramer components. These components cannot be added nor deleted.')
laFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laFramerComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: laFramerComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
laFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laFramerStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: laFramerStorageType.setDescription('This variable represents the storage type value for the laFramer tables.')
laFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: laFramerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: laFramerIndex.setDescription('This variable represents the index for the laFramer tables.')
laFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 2, 10), )
if mibBuilder.loadTexts: laFramerProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: laFramerProvTable.setDescription('This group contains the link to the Lan interface such as Ethernet, Fddi, or TokenRing.')
laFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LanDriversMIB", "laIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "laFramerIndex"))
if mibBuilder.loadTexts: laFramerProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: laFramerProvEntry.setDescription('An entry in the laFramerProvTable.')
laFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laFramerInterfaceName.setStatus('obsolete')
if mibBuilder.loadTexts: laFramerInterfaceName.setDescription("This attribute associates the LanApplication with a specific Lan interface such as Ethernet, Fddi, or TokenRing. This also defines the LogicalProcessor on which Framer's parent component (as well as Framer itself) will run. This attribute is OBSOLETED and is redefined above as InterfaceName. The new attribute type is a LIST OF LINK with a maximum of two (2) HW components in a list. DESCRIPTION")
laFramerInterfaceNamesTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 2, 431), )
if mibBuilder.loadTexts: laFramerInterfaceNamesTable.setStatus('mandatory')
if mibBuilder.loadTexts: laFramerInterfaceNamesTable.setDescription("This attribute associates the LanApplication with a specific Lan interface such as Ethernet, Fddi, or TokenRing. This also defines the LogicalProcessor on which Framer's parent component (as well as Framer itself) will run. Only one (1) LAN interface can be linked to a Framer except for Ethernet100BaseT LAN interface, for which up to two (2) interfaces residing on the same LogicalProcessor can be linked. DESCRIPTION")
laFramerInterfaceNamesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 2, 431, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LanDriversMIB", "laIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "laFramerIndex"), (0, "Nortel-Magellan-Passport-LanDriversMIB", "laFramerInterfaceNamesValue"))
if mibBuilder.loadTexts: laFramerInterfaceNamesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: laFramerInterfaceNamesEntry.setDescription('An entry in the laFramerInterfaceNamesTable.')
laFramerInterfaceNamesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 2, 431, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laFramerInterfaceNamesValue.setStatus('mandatory')
if mibBuilder.loadTexts: laFramerInterfaceNamesValue.setDescription('This variable represents both the value and the index for the laFramerInterfaceNamesTable.')
laFramerInterfaceNamesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 105, 2, 431, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: laFramerInterfaceNamesRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: laFramerInterfaceNamesRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the laFramerInterfaceNamesTable.')
lanDriversGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 30, 1))
lanDriversGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 30, 1, 5))
lanDriversGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 30, 1, 5, 2))
lanDriversGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 30, 1, 5, 2, 2))
lanDriversCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 30, 3))
lanDriversCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 30, 3, 5))
lanDriversCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 30, 3, 5, 2))
lanDriversCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 30, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-LanDriversMIB", lpEth100LtComponentName=lpEth100LtComponentName, lpEnetLtFrmCmpRowStatus=lpEnetLtFrmCmpRowStatus, lpFiLtFbIpxHRowStatusEntry=lpFiLtFbIpxHRowStatusEntry, lpFiPhyComponentName=lpFiPhyComponentName, lpEth100LtPrtCfgTopTable=lpEth100LtPrtCfgTopTable, laIfIndex=laIfIndex, lpTrLtFbFddiMac=lpTrLtFbFddiMac, lpFiLtFbIpxHComponentName=lpFiLtFbIpxHComponentName, lpFiTestRowStatus=lpFiTestRowStatus, lpIlsFwdrLtPrtCfgTopEntry=lpIlsFwdrLtPrtCfgTopEntry, lpEnetLtTopEntry=lpEnetLtTopEntry, lpFiLtPrtCfgRowStatus=lpFiLtPrtCfgRowStatus, lpIlsFwdr=lpIlsFwdr, lpIlsFwdrLtPrtCfgComponentName=lpIlsFwdrLtPrtCfgComponentName, lpIlsFwdrLtFbIpHTopEntry=lpIlsFwdrLtFbIpHTopEntry, lpIlsFwdrTestStorageType=lpIlsFwdrTestStorageType, lpIlsFwdrLtPrtCfgTData=lpIlsFwdrLtPrtCfgTData, lpEth100LtFrmCpyRowStatus=lpEth100LtFrmCpyRowStatus, lpEnetLtFbTData=lpEnetLtFbTData, lpTrMonitorParticipate=lpTrMonitorParticipate, lpEth100LtFbAppleHIndex=lpEth100LtFbAppleHIndex, lpEnetTestPTOEntry=lpEnetTestPTOEntry, lpIlsFwdrLtFbIpHStorageType=lpIlsFwdrLtFbIpHStorageType, lpEth100LtFbTopTable=lpEth100LtFbTopTable, lpFiNcUpstreamNeighbor=lpFiNcUpstreamNeighbor, lpEth100TestErroredFrmRx=lpEth100TestErroredFrmRx, laRowStatusTable=laRowStatusTable, lpEnetLtFrmCmpStorageType=lpEnetLtFrmCmpStorageType, lpEth100Eth100StatsTable=lpEth100Eth100StatsTable, lpEnetLtFbTxInfoRowStatusEntry=lpEnetLtFbTxInfoRowStatusEntry, lpTrRowStatus=lpTrRowStatus, lpIlsFwdrLtFbFddiMacTopEntry=lpIlsFwdrLtFbFddiMacTopEntry, lpFiLtFbDataTopTable=lpFiLtFbDataTopTable, lpTrIfEntryEntry=lpTrIfEntryEntry, lpTrLtPrtCfgTopTable=lpTrLtPrtCfgTopTable, laFramerInterfaceNamesRowStatus=laFramerInterfaceNamesRowStatus, lpEth100AdminInfoTable=lpEth100AdminInfoTable, lpEth100ReceivedFramesIntoRouterBr=lpEth100ReceivedFramesIntoRouterBr, lpEth100TestBitsRx=lpEth100TestBitsRx, lpFiLtFbMacEnetIndex=lpFiLtFbMacEnetIndex, lpEth100LtFbTxInfoStorageType=lpEth100LtFbTxInfoStorageType, lpTrLtFbTopEntry=lpTrLtFbTopEntry, lpFiLtFbMacTrTopEntry=lpFiLtFbMacTrTopEntry, lpIlsFwdrLtFbAppleHComponentName=lpIlsFwdrLtFbAppleHComponentName, lpEnetSnmpOperStatus=lpEnetSnmpOperStatus, lpEnetLtPrtCfg=lpEnetLtPrtCfg, lpFiNcDownstreamNeighbor=lpFiNcDownstreamNeighbor, lpFiLtFbMacEnetRowStatus=lpFiLtFbMacEnetRowStatus, lpFiTest=lpFiTest, lpIlsFwdrLtStorageType=lpIlsFwdrLtStorageType, lpFiLtFbIpxHTopTable=lpFiLtFbIpxHTopTable, lpFiTestTimeRemaining=lpFiTestTimeRemaining, laIfEntryEntry=laIfEntryEntry, lpFiPhy=lpFiPhy, lpFiLtFbMacTrRowStatus=lpFiLtFbMacTrRowStatus, lpEth100LtRowStatus=lpEth100LtRowStatus, laLinkToProtocolPort=laLinkToProtocolPort, lpTrRowStatusTable=lpTrRowStatusTable, lpEnetLtFbIpHTopEntry=lpEnetLtFbIpHTopEntry, lpTrSingleStation=lpTrSingleStation, lpTrLtFbMacTrIndex=lpTrLtFbMacTrIndex, lpFiLtFrmCmp=lpFiLtFrmCmp, lpTrLtPrtCfgTopEntry=lpTrLtPrtCfgTopEntry, lpIlsFwdrLtFbIpxHTopEntry=lpIlsFwdrLtFbIpxHTopEntry, lpTrFreqErrors=lpTrFreqErrors, laFramerProvEntry=laFramerProvEntry, lpEth100TestDuration=lpEth100TestDuration, lpFiPhyStorageType=lpFiPhyStorageType, lpTrLtFbMacEnetComponentName=lpTrLtFbMacEnetComponentName, lpIlsFwdrLtFbTxInfoTData=lpIlsFwdrLtFbTxInfoTData, lpFiLtFbLlchTopEntry=lpFiLtFbLlchTopEntry, lpTrLtFrmCpyTData=lpTrLtFrmCpyTData, lpFiNeighborNotifyInterval=lpFiNeighborNotifyInterval, lpEth100RowStatusTable=lpEth100RowStatusTable, lpFiTestResultsEntry=lpFiTestResultsEntry, lpTrLtFbLlchTopTable=lpTrLtFbLlchTopTable, lpEth100LtTopTable=lpEth100LtTopTable, lpTrLtFbIpHRowStatusEntry=lpTrLtFbIpHRowStatusEntry, lpEnetIfEntryEntry=lpEnetIfEntryEntry, lpTrLtFrmCmpTopEntry=lpTrLtFrmCmpTopEntry, lpTrOperStatusEntry=lpTrOperStatusEntry, lpTrLtFbIpHTopEntry=lpTrLtFbIpHTopEntry, lpEnetStateEntry=lpEnetStateEntry, lpTrLtFbAppleHTopTable=lpTrLtFbAppleHTopTable, lpIlsFwdrLtPrtCfgTopTable=lpIlsFwdrLtPrtCfgTopTable, lpEnetLtFbFddiMacRowStatusEntry=lpEnetLtFbFddiMacRowStatusEntry, lpFiLtFbComponentName=lpFiLtFbComponentName, lpTrStateEntry=lpTrStateEntry, lpEnetCustomerIdentifier=lpEnetCustomerIdentifier, lpEth100ApplicationFramerName=lpEth100ApplicationFramerName, lpEth100OperStatusEntry=lpEth100OperStatusEntry, lpFiNcOldDownstreamNeighbor=lpFiNcOldDownstreamNeighbor, lpTrHardErrors=lpTrHardErrors, lpIlsFwdrStatsEntry=lpIlsFwdrStatsEntry, lpTrRingStatus=lpTrRingStatus, lpEnetLtFbMacTrRowStatus=lpEnetLtFbMacTrRowStatus, lpFiTestDuration=lpFiTestDuration, lpEnetLtFbFddiMacIndex=lpEnetLtFbFddiMacIndex, laOperStatusTable=laOperStatusTable, lpEnetLtFbRowStatus=lpEnetLtFbRowStatus, lpIlsFwdrLtRowStatusTable=lpIlsFwdrLtRowStatusTable, lpFiIfEntryTable=lpFiIfEntryTable, lpFiUpstreamNeighbor=lpFiUpstreamNeighbor, lpIlsFwdrLtFbAppleHIndex=lpIlsFwdrLtFbAppleHIndex, lpIlsFwdrLtFbMacEnetRowStatus=lpIlsFwdrLtFbMacEnetRowStatus, lpEth100LtFbTData=lpEth100LtFbTData, lpEth100LtFbTxInfoTData=lpEth100LtFbTxInfoTData, lpEnetProvEntry=lpEnetProvEntry, lpEnetUsageState=lpEnetUsageState, lpIlsFwdrLtCntlStorageType=lpIlsFwdrLtCntlStorageType, lpEth100OctetsReceivedOk=lpEth100OctetsReceivedOk, lpIlsFwdrLtFbMacEnetTData=lpIlsFwdrLtFbMacEnetTData, lpEnetTestStorageType=lpEnetTestStorageType, lpFiLtFbDataRowStatusTable=lpFiLtFbDataRowStatusTable, lpEth100LtFbMacEnetRowStatusEntry=lpEth100LtFbMacEnetRowStatusEntry, lpEth100LtFbDataTData=lpEth100LtFbDataTData, lpEth100LtFbAppleH=lpEth100LtFbAppleH, lpEnetLtFbLlchRowStatus=lpEnetLtFbLlchRowStatus, lpEnetTestDuration=lpEnetTestDuration, lpFiLtFbDataRowStatusEntry=lpFiLtFbDataRowStatusEntry, lpFiLtFrmCpyTopEntry=lpFiLtFrmCpyTopEntry, lpIlsFwdrLtFbRowStatusTable=lpIlsFwdrLtFbRowStatusTable, lpIlsFwdrLtFbData=lpIlsFwdrLtFbData, lpTrRingRecoverys=lpTrRingRecoverys, lpFiAcceptAs=lpFiAcceptAs, lpEth100OperEntry=lpEth100OperEntry, lpEnetLtFbIpHComponentName=lpEnetLtFbIpHComponentName, lpFiNotCopiedCounts=lpFiNotCopiedCounts, lpIlsFwdrLtFbLlchTData=lpIlsFwdrLtFbLlchTData, lpFiLtTData=lpFiLtTData, lpIlsFwdrLtFrmCpyIndex=lpIlsFwdrLtFrmCpyIndex, lpIlsFwdrLtCntlRowStatusEntry=lpIlsFwdrLtCntlRowStatusEntry, lpIlsFwdrTestResultsTable=lpIlsFwdrTestResultsTable, lpEth100LtCntlTData=lpEth100LtCntlTData, lpTrLtFbMacEnetTopEntry=lpTrLtFbMacEnetTopEntry, lpEth100LtFbIpHStorageType=lpEth100LtFbIpHStorageType, lpIlsFwdrLtFbMacEnet=lpIlsFwdrLtFbMacEnet, lpFiStateTable=lpFiStateTable, lpEth100LtFbMacEnetIndex=lpEth100LtFbMacEnetIndex, lpEnetTestErroredFrmRx=lpEnetTestErroredFrmRx, lpTrLtFbData=lpTrLtFbData, lpTrLtTData=lpTrLtTData, lpEth100LtFbAppleHTData=lpEth100LtFbAppleHTData, lpTrLtFrmCmpRowStatusEntry=lpTrLtFrmCmpRowStatusEntry, lpIlsFwdrLtFrmCmpTopEntry=lpIlsFwdrLtFrmCmpTopEntry, lpEnetLtCntlRowStatusEntry=lpEnetLtCntlRowStatusEntry, lpFiStateEntry=lpFiStateEntry, lpTrLtFbMacEnet=lpTrLtFbMacEnet, lpTrLt=lpTrLt, lpIlsFwdrLtFbDataIndex=lpIlsFwdrLtFbDataIndex, lpTrLtFbLlchIndex=lpTrLtFbLlchIndex, lpEnetLtFbIpHTopTable=lpEnetLtFbIpHTopTable, lpIlsFwdrLtFbMacEnetRowStatusEntry=lpIlsFwdrLtFbMacEnetRowStatusEntry, lpEth100SqeTestErrors=lpEth100SqeTestErrors, lpIlsFwdrLtFbFddiMacTopTable=lpIlsFwdrLtFbFddiMacTopTable, lpIlsFwdrTest=lpIlsFwdrTest, lpEth100LtFbMacTrTData=lpEth100LtFbMacTrTData, lpIlsFwdrLtFrmCmpRowStatus=lpIlsFwdrLtFrmCmpRowStatus, lpFiLtFbDataTopEntry=lpFiLtFbDataTopEntry, lpIlsFwdrLtFrmCpyTData=lpIlsFwdrLtFrmCpyTData, lpEth100=lpEth100, lpEth100LtFbIndex=lpEth100LtFbIndex, lpEnetIfAdminStatus=lpEnetIfAdminStatus, lpTrLtFbMacTrTData=lpTrLtFbMacTrTData, lpEnetLtFbAppleHRowStatusEntry=lpEnetLtFbAppleHRowStatusEntry, lpFiLtRowStatusTable=lpFiLtRowStatusTable, lpTrLtFbTxInfoTopEntry=lpTrLtFbTxInfoTopEntry, lpFiMacOperTable=lpFiMacOperTable, lpTrProvTable=lpTrProvTable, lpFiAcceptBm=lpFiAcceptBm, lpEth100LtFbIpHTopEntry=lpEth100LtFbIpHTopEntry, lpFiLtFbFddiMacTData=lpFiLtFbFddiMacTData, lpFiComponentName=lpFiComponentName, lpEth100LtFbIpHComponentName=lpEth100LtFbIpHComponentName, lpTrLtFbComponentName=lpTrLtFbComponentName, lpIlsFwdrLtFrmCpy=lpIlsFwdrLtFrmCpy, lpEth100LtCntlIndex=lpEth100LtCntlIndex, lpEnetLtFrmCmpComponentName=lpEnetLtFrmCmpComponentName, lpEnetMacTransmitErrors=lpEnetMacTransmitErrors, lpEnetLtFbFddiMacRowStatus=lpEnetLtFbFddiMacRowStatus, lpEnetLtFbIpxHRowStatusTable=lpEnetLtFbIpxHRowStatusTable, lpFiLtFbIpxHRowStatusTable=lpFiLtFbIpxHRowStatusTable, lpEnetCarrierSenseErrors=lpEnetCarrierSenseErrors, lpEnetTestRowStatusEntry=lpEnetTestRowStatusEntry, lpEth100LtFrmCpyTData=lpEth100LtFrmCpyTData, lpEth100LtFbTxInfoIndex=lpEth100LtFbTxInfoIndex, lpEnetLtFbTxInfoTData=lpEnetLtFbTxInfoTData, lpTrLtFrmCmpStorageType=lpTrLtFrmCmpStorageType, lpEth100StatsEntry=lpEth100StatsEntry, lpIlsFwdrTestFrmSize=lpIlsFwdrTestFrmSize, lpTrLtFbIpHRowStatus=lpTrLtFbIpHRowStatus, lpFiDownstreamNeighbor=lpFiDownstreamNeighbor, lpFiPhyLemRejectCounts=lpFiPhyLemRejectCounts, lanDriversCapabilities=lanDriversCapabilities, lpFiLtFbAppleHComponentName=lpFiLtFbAppleHComponentName, lpFiPhyOperTable=lpFiPhyOperTable, lpEth100TestRowStatusTable=lpEth100TestRowStatusTable, lpIlsFwdrOperationalState=lpIlsFwdrOperationalState, lpIlsFwdrTestIndex=lpIlsFwdrTestIndex, lpTrCustomerIdentifier=lpTrCustomerIdentifier, lpIlsFwdrLtFbTxInfoTopTable=lpIlsFwdrLtFbTxInfoTopTable, lpEth100TestFrmTx=lpEth100TestFrmTx, lpEth100LateCollisions=lpEth100LateCollisions, lpFiLtFbTxInfoTData=lpFiLtFbTxInfoTData, lpIlsFwdrTestElapsedTime=lpIlsFwdrTestElapsedTime, lpEth100TestIndex=lpEth100TestIndex, lpFiLtFbIpHTData=lpFiLtFbIpHTData, lpTrLtFbAppleHTopEntry=lpTrLtFbAppleHTopEntry, lpFiDupAddressTest=lpFiDupAddressTest, lpEnetLtPrtCfgTData=lpEnetLtPrtCfgTData, lpFiTestCauseOfTermination=lpFiTestCauseOfTermination, lpIlsFwdrLtFrmCpyRowStatusTable=lpIlsFwdrLtFrmCpyRowStatusTable, lpEnetLtFbDataTopTable=lpEnetLtFbDataTopTable, lpTrStorageType=lpTrStorageType, lpFiMacCOperEntry=lpFiMacCOperEntry, lpEth100LtFbLlchTData=lpEth100LtFbLlchTData, lpEnetLtTopTable=lpEnetLtTopTable, lpTrLtFbTxInfoTopTable=lpTrLtFbTxInfoTopTable, lpEnetLtFbAppleHRowStatusTable=lpEnetLtFbAppleHRowStatusTable, lpTrLtFbFddiMacTData=lpTrLtFbFddiMacTData, lpTrLtFrmCpyComponentName=lpTrLtFrmCpyComponentName, lpTrLtRowStatusEntry=lpTrLtRowStatusEntry, lpFiRmtState=lpFiRmtState, lpEnetLtFbTxInfoRowStatus=lpEnetLtFbTxInfoRowStatus, lpTrRingOpenStatus=lpTrRingOpenStatus, lpEth100CommentText=lpEth100CommentText, lpFiAcceptAa=lpFiAcceptAa, lpIlsFwdrLtFbDataTopTable=lpIlsFwdrLtFbDataTopTable, lpTrLtRowStatusTable=lpTrLtRowStatusTable, lpFiLtFbLlchStorageType=lpFiLtFbLlchStorageType, lpEnetTest=lpEnetTest, lpFiErrorCounts=lpFiErrorCounts, lpFiLtPrtCfgTData=lpFiLtPrtCfgTData, lpEnetLtFbMacTrTData=lpEnetLtFbMacTrTData, lpTrLtStorageType=lpTrLtStorageType, lpTrChipSet=lpTrChipSet, lpEth100LtFrmCpyTopTable=lpEth100LtFrmCpyTopTable, lpIlsFwdrLtFbIpHRowStatus=lpIlsFwdrLtFbIpHRowStatus, lpEth100LtFrmCpyIndex=lpEth100LtFrmCpyIndex, lpEth100TestTimeRemaining=lpEth100TestTimeRemaining, lpIlsFwdrLtFbFddiMacComponentName=lpIlsFwdrLtFbFddiMacComponentName, lpFiPhyLctFailCounts=lpFiPhyLctFailCounts, lpEth100LtFbDataTopTable=lpEth100LtFbDataTopTable, lpEnetLtFbIpxHTData=lpEnetLtFbIpxHTData, lpEnetLtFbFddiMacTopEntry=lpEnetLtFbFddiMacTopEntry, lpEnetLtFbStorageType=lpEnetLtFbStorageType, lpTrOperationalState=lpTrOperationalState, lpTrLtFbMacEnetRowStatusEntry=lpTrLtFbMacEnetRowStatusEntry, lpFiLtCntlComponentName=lpFiLtCntlComponentName, lpEth100LtFbMacEnetRowStatusTable=lpEth100LtFbMacEnetRowStatusTable, lpFiLtFbIpHIndex=lpFiLtFbIpHIndex, lpFiLtCntlRowStatusTable=lpFiLtCntlRowStatusTable, lpEth100CustomerIdentifier=lpEth100CustomerIdentifier, lpFiTestFrmRx=lpFiTestFrmRx)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-LanDriversMIB", lpFiLtFbFddiMacTopEntry=lpFiLtFbFddiMacTopEntry, lpTrIfAdminStatus=lpTrIfAdminStatus, lpEth100LtFbTxInfoTopTable=lpEth100LtFbTxInfoTopTable, laFramerInterfaceNamesEntry=laFramerInterfaceNamesEntry, lpEnetLtFbIpHStorageType=lpEnetLtFbIpHStorageType, lpFiRowStatusEntry=lpFiRowStatusEntry, lpFiLtFbMacEnetTopEntry=lpFiLtFbMacEnetTopEntry, lpFiOperStatusEntry=lpFiOperStatusEntry, lpIlsFwdrTestTimeRemaining=lpIlsFwdrTestTimeRemaining, lpFiLtFbIpHRowStatusTable=lpFiLtFbIpHRowStatusTable, lpFiPhyRowStatusEntry=lpFiPhyRowStatusEntry, lpFiTokenCounts=lpFiTokenCounts, lpFiLtFrmCpyTData=lpFiLtFrmCpyTData, lpFiTestPTOEntry=lpFiTestPTOEntry, lpTrLtFbDataTData=lpTrLtFbDataTData, lpTrLtFbIpxHIndex=lpTrLtFbIpxHIndex, lpIlsFwdrLtTData=lpIlsFwdrLtTData, lpIlsFwdrRowStatusEntry=lpIlsFwdrRowStatusEntry, lpEth100LtFbAppleHTopEntry=lpEth100LtFbAppleHTopEntry, lpTrOperTable=lpTrOperTable, lpFiLostCounts=lpFiLostCounts, lpTrLtCntlIndex=lpTrLtCntlIndex, lpEth100LtFbComponentName=lpEth100LtFbComponentName, lpEnetTestIndex=lpEnetTestIndex, lpEnetLtFrmCmpTopEntry=lpEnetLtFrmCmpTopEntry, lpIlsFwdrLtFbMacEnetStorageType=lpIlsFwdrLtFbMacEnetStorageType, lpTrLtFbTxInfoTData=lpTrLtFbTxInfoTData, lpTrLtFbTxInfoComponentName=lpTrLtFbTxInfoComponentName, lpTrLtFbIpHRowStatusTable=lpTrLtFbIpHRowStatusTable, lpFiLtFbRowStatus=lpFiLtFbRowStatus, lpTrNcMacOperEntry=lpTrNcMacOperEntry, lpEnetLtFrmCmpIndex=lpEnetLtFrmCmpIndex, lpIlsFwdrLtFbDataRowStatusTable=lpIlsFwdrLtFbDataRowStatusTable, lpEnetLtFbAppleHStorageType=lpEnetLtFbAppleHStorageType, lpIlsFwdrProcessedCount=lpIlsFwdrProcessedCount, lpFiPhyRowStatusTable=lpFiPhyRowStatusTable, lpTrLtCntl=lpTrLtCntl, lpFiCommentText=lpFiCommentText, lpFiLtFbAppleHStorageType=lpFiLtFbAppleHStorageType, lpTrLtFbTxInfoRowStatus=lpTrLtFbTxInfoRowStatus, lpIlsFwdrLtFbFddiMac=lpIlsFwdrLtFbFddiMac, lpFiLtFbTxInfoIndex=lpFiLtFbTxInfoIndex, lpFiCidDataTable=lpFiCidDataTable, lpEnetLtFrmCpyTopEntry=lpEnetLtFrmCpyTopEntry, lpFiLtFbFddiMacStorageType=lpFiLtFbFddiMacStorageType, lpFiLtFbIpHTopTable=lpFiLtFbIpHTopTable, laAdminState=laAdminState, lpFiLtFbMacEnetComponentName=lpFiLtFbMacEnetComponentName, lpFiLtFbData=lpFiLtFbData, lpEth100LtPrtCfgRowStatus=lpEth100LtPrtCfgRowStatus, lpEnetRowStatus=lpEnetRowStatus, lpFiTestFrmSize=lpFiTestFrmSize, lpEnetStorageType=lpEnetStorageType, lpFiLtCntlTopEntry=lpFiLtCntlTopEntry, lpEth100LtFbAppleHRowStatusEntry=lpEth100LtFbAppleHRowStatusEntry, lpFiLtFbTxInfoComponentName=lpFiLtFbTxInfoComponentName, lpEth100LtFbIpxH=lpEth100LtFbIpxH, lpFiLtFbAppleHRowStatusTable=lpFiLtFbAppleHRowStatusTable, lpEth100LtFbFddiMacTopEntry=lpEth100LtFbFddiMacTopEntry, lpEth100LtFbDataComponentName=lpEth100LtFbDataComponentName, lpFiLtFrmCpyStorageType=lpFiLtFrmCpyStorageType, lpIlsFwdrTestResultsEntry=lpIlsFwdrTestResultsEntry, lpEnetLtFbAppleHIndex=lpEnetLtFbAppleHIndex, lpFiTraceMaxExpirationTimer=lpFiTraceMaxExpirationTimer, lpEnetAdminInfoTable=lpEnetAdminInfoTable, lpTrSnmpOperStatus=lpTrSnmpOperStatus, lpFiLtFbLlchRowStatus=lpFiLtFbLlchRowStatus, lpTrLtFbLlchRowStatusTable=lpTrLtFbLlchRowStatusTable, lpEth100TestComponentName=lpEth100TestComponentName, lpIlsFwdrTestPTOEntry=lpIlsFwdrTestPTOEntry, lpTrLtFbFddiMacIndex=lpTrLtFbFddiMacIndex, lpFiLtFbLlchIndex=lpFiLtFbLlchIndex, lpTrTestType=lpTrTestType, lpIlsFwdrLtFbAppleHRowStatusEntry=lpIlsFwdrLtFbAppleHRowStatusEntry, lpFiLtFbAppleH=lpFiLtFbAppleH, lpTrLtCntlRowStatusTable=lpTrLtCntlRowStatusTable, lpEth100LtCntlTopTable=lpEth100LtCntlTopTable, lpFiTestResultsTable=lpFiTestResultsTable, lpTrLtFbRowStatusTable=lpTrLtFbRowStatusTable, lpFiSmtProvEntry=lpFiSmtProvEntry, lpFiLtTopEntry=lpFiLtTopEntry, lpTrLtFbDataRowStatus=lpTrLtFbDataRowStatus, lpIlsFwdrLtFbIpHComponentName=lpIlsFwdrLtFbIpHComponentName, lpEth100LtFbDataTopEntry=lpEth100LtFbDataTopEntry, lpTrLtFbIpHTopTable=lpTrLtFbIpHTopTable, lpEth100TestCauseOfTermination=lpEth100TestCauseOfTermination, lpFiVendor=lpFiVendor, lpIlsFwdrLtFbIpHTData=lpIlsFwdrLtFbIpHTData, laRowStatusEntry=laRowStatusEntry, lpTrLtTopEntry=lpTrLtTopEntry, lpEnetLtFbFddiMac=lpEnetLtFbFddiMac, lpTrTestTimeRemaining=lpTrTestTimeRemaining, lpTrLtFrmCmpIndex=lpTrLtFrmCmpIndex, lpTrLtIndex=lpTrLtIndex, lpEnetOperStatusEntry=lpEnetOperStatusEntry, lpFiLtFbDataIndex=lpFiLtFbDataIndex, lpEnet=lpEnet, lpIlsFwdrOperStatusTable=lpIlsFwdrOperStatusTable, lpIlsFwdrLinkToTrafficSourceTable=lpIlsFwdrLinkToTrafficSourceTable, lpEnetLtFbRowStatusTable=lpEnetLtFbRowStatusTable, lpFiEcmState=lpFiEcmState, lpFiTokenMaxTimer=lpFiTokenMaxTimer, lpEnetLtFbMacEnetRowStatusEntry=lpEnetLtFbMacEnetRowStatusEntry, lpFiMacOperEntry=lpFiMacOperEntry, lpIlsFwdrUsageState=lpIlsFwdrUsageState, lpIlsFwdrLtFbTxInfoTopEntry=lpIlsFwdrLtFbTxInfoTopEntry, lpFiTransmitCounts=lpFiTransmitCounts, lpEth100LtFbFddiMacStorageType=lpEth100LtFbFddiMacStorageType, lpEnetLtCntlIndex=lpEnetLtCntlIndex, lpEth100LtFbDataRowStatusTable=lpEth100LtFbDataRowStatusTable, lpIlsFwdrLtFbTxInfo=lpIlsFwdrLtFbTxInfo, lpFiIfEntryEntry=lpFiIfEntryEntry, lpIlsFwdrLtFbMacTrIndex=lpIlsFwdrLtFbMacTrIndex, lpIlsFwdrStorageType=lpIlsFwdrStorageType, lpIlsFwdrTestRowStatusEntry=lpIlsFwdrTestRowStatusEntry, lpTrLtFbMacTrRowStatusEntry=lpTrLtFbMacTrRowStatusEntry, lpTrLtFbTxInfoStorageType=lpTrLtFbTxInfoStorageType, lpIlsFwdrLtFrmCpyRowStatus=lpIlsFwdrLtFrmCpyRowStatus, lpEth100LtFbMacTrComponentName=lpEth100LtFbMacTrComponentName, lpTrLtFbIpxHTData=lpTrLtFbIpxHTData, lpEth100LtFbRowStatusEntry=lpEth100LtFbRowStatusEntry, lpFiLtFbMacTrRowStatusTable=lpFiLtFbMacTrRowStatusTable, lpFiLtPrtCfgStorageType=lpFiLtPrtCfgStorageType, lanDriversGroupBE01=lanDriversGroupBE01, lpFiLtFbDataTData=lpFiLtFbDataTData, lpFiLtFbMacEnet=lpFiLtFbMacEnet, lpTrApplicationFramerName=lpTrApplicationFramerName, lpFiLtFrmCpyTopTable=lpFiLtFrmCpyTopTable, lpIlsFwdrLtFbRowStatusEntry=lpIlsFwdrLtFbRowStatusEntry, lpFiLtFbMacTr=lpFiLtFbMacTr, lpEth100LtFrmCpyComponentName=lpEth100LtFrmCpyComponentName, lpEth100LtPrtCfgRowStatusTable=lpEth100LtPrtCfgRowStatusTable, lpEth100LtFbLlchRowStatusEntry=lpEth100LtFbLlchRowStatusEntry, lpTrLtFbAppleH=lpTrLtFbAppleH, lpEnetTestType=lpEnetTestType, laOperationalState=laOperationalState, lpFiIndex=lpFiIndex, lpIlsFwdrLtFbMacEnetIndex=lpIlsFwdrLtFbMacEnetIndex, lpEth100ComponentName=lpEth100ComponentName, lpFiLtPrtCfgIndex=lpFiLtPrtCfgIndex, lpFiLtFbIpHComponentName=lpFiLtFbIpHComponentName, lpFiTestFrmTx=lpFiTestFrmTx, lpTrLtFbRowStatusEntry=lpTrLtFbRowStatusEntry, lpFiPhyLerCutoff=lpFiPhyLerCutoff, lpEnetTestTimeRemaining=lpEnetTestTimeRemaining, lpEth100LtRowStatusEntry=lpEth100LtRowStatusEntry, lpIlsFwdrLtFbTData=lpIlsFwdrLtFbTData, lpTrLtFbDataIndex=lpTrLtFbDataIndex, lpFiNcMacOperTable=lpFiNcMacOperTable, lpIlsFwdrLtFrmCpyStorageType=lpIlsFwdrLtFrmCpyStorageType, lpEth100LtFbTxInfoRowStatusEntry=lpEth100LtFbTxInfoRowStatusEntry, lpEth100TestFrmSize=lpEth100TestFrmSize, lanDriversGroupBE=lanDriversGroupBE, lpTrLtFrmCpyRowStatusEntry=lpTrLtFrmCpyRowStatusEntry, lpTrLtFbMacTrTopTable=lpTrLtFbMacTrTopTable, lpFiTestPTOTable=lpFiTestPTOTable, lpIlsFwdrLtFbIpHRowStatusTable=lpIlsFwdrLtFbIpHRowStatusTable, lpEnetLtFbMacEnetIndex=lpEnetLtFbMacEnetIndex, lpIlsFwdrAdminState=lpIlsFwdrAdminState, lpEnetLtFbAppleHTData=lpEnetLtFbAppleHTData, lpEnetLtFbIpxH=lpEnetLtFbIpxH, lpTrLtFbIpHStorageType=lpTrLtFbIpHStorageType, lpEnetLtFbLlchRowStatusTable=lpEnetLtFbLlchRowStatusTable, lpIlsFwdrLtFbLlchStorageType=lpIlsFwdrLtFbLlchStorageType, lpIlsFwdrLtFbMacTrTopEntry=lpIlsFwdrLtFbMacTrTopEntry, lpEth100LtPrtCfg=lpEth100LtPrtCfg, lpIlsFwdrOperStatusEntry=lpIlsFwdrOperStatusEntry, lpEth100TestFrmRx=lpEth100TestFrmRx, lpFiLtPrtCfgTopEntry=lpFiLtPrtCfgTopEntry, lpEth100Lt=lpEth100Lt, laFramer=laFramer, lpIlsFwdrLtFbIpxH=lpIlsFwdrLtFbIpxH, lpTrLtFrmCmpTData=lpTrLtFrmCmpTData, lpTrTokenErrors=lpTrTokenErrors, lpEnetLtFbIpHRowStatusTable=lpEnetLtFbIpHRowStatusTable, lpFiLtCntlStorageType=lpFiLtCntlStorageType, lpIlsFwdrLtFrmCpyRowStatusEntry=lpIlsFwdrLtFrmCpyRowStatusEntry, lpIlsFwdrLtFbMacTr=lpIlsFwdrLtFbMacTr, lpIlsFwdrLtFbLlch=lpIlsFwdrLtFbLlch, lpFiSnmpOperStatus=lpFiSnmpOperStatus, lpIlsFwdrLtFbLlchRowStatus=lpIlsFwdrLtFbLlchRowStatus, lpEnetVendor=lpEnetVendor, lpIlsFwdrLtCntlRowStatus=lpIlsFwdrLtCntlRowStatus, lpEth100OperTable=lpEth100OperTable, laCustomerIdentifier=laCustomerIdentifier, lpIlsFwdrLtFbIpxHComponentName=lpIlsFwdrLtFbIpxHComponentName, lpEth100StorageType=lpEth100StorageType, lpEnetLtFbIpxHStorageType=lpEnetLtFbIpxHStorageType, lpTrLtPrtCfgRowStatusTable=lpTrLtPrtCfgRowStatusTable, lpEnetLtFbAppleH=lpEnetLtFbAppleH, lpIlsFwdrFramesDiscarded=lpIlsFwdrFramesDiscarded, lpIlsFwdrLtFbAppleHTData=lpIlsFwdrLtFbAppleHTData, lpEth100MultipleCollisionFrames=lpEth100MultipleCollisionFrames, lpEth100TestElapsedTime=lpEth100TestElapsedTime, lpEnetMacReceiveErrors=lpEnetMacReceiveErrors, lpTrLtFbFddiMacTopEntry=lpTrLtFbFddiMacTopEntry, lpEnetStatsTable=lpEnetStatsTable, lpEnetLtCntlComponentName=lpEnetLtCntlComponentName, lpIlsFwdrLtFrmCmpTopTable=lpIlsFwdrLtFrmCmpTopTable, lpEth100LtFbAppleHTopTable=lpEth100LtFbAppleHTopTable, lpEnetMacAddress=lpEnetMacAddress, lpEnetOperationalState=lpEnetOperationalState, lpIlsFwdrLtFbMacTrTopTable=lpIlsFwdrLtFbMacTrTopTable, lpEth100LtFbRowStatusTable=lpEth100LtFbRowStatusTable, lpEnetLtFbMacTrIndex=lpEnetLtFbMacTrIndex, lpFiPhyLemCounts=lpFiPhyLemCounts, lpIlsFwdrLtFrmCmpRowStatusTable=lpIlsFwdrLtFrmCmpRowStatusTable, lpEnetOperStatusTable=lpEnetOperStatusTable, lpTrLtFbMacEnetRowStatusTable=lpTrLtFbMacEnetRowStatusTable, lpTrTestFrmTx=lpTrTestFrmTx, lpTrTestPTOTable=lpTrTestPTOTable, laSnmpOperStatus=laSnmpOperStatus, lpEnetAlignmentErrors=lpEnetAlignmentErrors, lpEnetLtPrtCfgStorageType=lpEnetLtPrtCfgStorageType, lpTrUpStream=lpTrUpStream, lpTrLtFbIpxHRowStatusEntry=lpTrLtFbIpxHRowStatusEntry, lpIlsFwdrLtFrmCmpStorageType=lpIlsFwdrLtFrmCmpStorageType, lpEnetSqeTestErrors=lpEnetSqeTestErrors, lpFiLtFbFddiMacRowStatusEntry=lpFiLtFbFddiMacRowStatusEntry, lpFiPhySignalState=lpFiPhySignalState, lpTrBurstErrors=lpTrBurstErrors, lpFiLtFbTxInfoRowStatusEntry=lpFiLtFbTxInfoRowStatusEntry, lpFiLtFbLlchRowStatusTable=lpFiLtFbLlchRowStatusTable, lpEth100SnmpOperStatus=lpEth100SnmpOperStatus, lpEth100LtFbAppleHStorageType=lpEth100LtFbAppleHStorageType, lpTrTestRowStatusTable=lpTrTestRowStatusTable, lpEnetLt=lpEnetLt, lpIlsFwdrLtCntlTData=lpIlsFwdrLtCntlTData, lpEth100LtFrmCpyStorageType=lpEth100LtFrmCpyStorageType, lpEth100LtFbIpxHRowStatus=lpEth100LtFbIpxHRowStatus, lpFiLtFbDataStorageType=lpFiLtFbDataStorageType, lpTrLtFbIpxHRowStatusTable=lpTrLtFbIpxHRowStatusTable, lpTrLtFrmCmpRowStatus=lpTrLtFrmCmpRowStatus, lpEth100CarrierSenseErrors=lpEth100CarrierSenseErrors, laComponentName=laComponentName, lpTrLtFbTxInfoRowStatusEntry=lpTrLtFbTxInfoRowStatusEntry, lpIlsFwdrTestType=lpIlsFwdrTestType, lpFiTestComponentName=lpFiTestComponentName, lpEth100UsageState=lpEth100UsageState, lpEnetCidDataEntry=lpEnetCidDataEntry, lpTrLtFbMacTr=lpTrLtFbMacTr, lpEnetLtFbTxInfoIndex=lpEnetLtFbTxInfoIndex, lpEth100Eth100StatsEntry=lpEth100Eth100StatsEntry, lpTrProductId=lpTrProductId, lpTrLtFrmCpyRowStatus=lpTrLtFrmCpyRowStatus, lpTrLtPrtCfgRowStatus=lpTrLtPrtCfgRowStatus, lpEth100LtFbIpHTopTable=lpEth100LtFbIpHTopTable, lpEnetStatsEntry=lpEnetStatsEntry, lpIlsFwdrLtFbDataComponentName=lpIlsFwdrLtFbDataComponentName, lpEnetLtFbTxInfoTopEntry=lpEnetLtFbTxInfoTopEntry, lpTrOperEntry=lpTrOperEntry, lpIlsFwdrLtFrmCmp=lpIlsFwdrLtFrmCmp, lpFiLtFbTData=lpFiLtFbTData, lpEnetLtFbTxInfoComponentName=lpEnetLtFbTxInfoComponentName)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-LanDriversMIB", lpEnetLtFbMacEnetTData=lpEnetLtFbMacEnetTData, lpFiLtFbMacTrTData=lpFiLtFbMacTrTData, lpEnetLtPrtCfgTopTable=lpEnetLtPrtCfgTopTable, lpIlsFwdrLtCntlIndex=lpIlsFwdrLtCntlIndex, lpEth100StateEntry=lpEth100StateEntry, laFramerComponentName=laFramerComponentName, lpTrLtRowStatus=lpTrLtRowStatus, lpEth100LtFbRowStatus=lpEth100LtFbRowStatus, lpEth100LtFbFddiMacTData=lpEth100LtFbFddiMacTData, lpEnetLtFbFddiMacTData=lpEnetLtFbFddiMacTData, lpFiIfAdminStatus=lpFiIfAdminStatus, lpEnetProvTable=lpEnetProvTable, lpEnetLtFbIpxHTopEntry=lpEnetLtFbIpxHTopEntry, lpEth100LtFbMacTr=lpEth100LtFbMacTr, lpTrMacAddress=lpTrMacAddress, lpTrLtFbAppleHRowStatusEntry=lpTrLtFbAppleHRowStatusEntry, lpEnetLtFrmCpyRowStatusTable=lpEnetLtFrmCpyRowStatusTable, lpEth100OperationalState=lpEth100OperationalState, lpFiLtFbMacEnetTopTable=lpFiLtFbMacEnetTopTable, lpEth100LtFbMacTrIndex=lpEth100LtFbMacTrIndex, lpEnetLtFbAppleHTopEntry=lpEnetLtFbAppleHTopEntry, lpEnetLtFbMacEnet=lpEnetLtFbMacEnet, lpIlsFwdrLtFbIpHRowStatusEntry=lpIlsFwdrLtFbIpHRowStatusEntry, lpEnetLtCntlTopEntry=lpEnetLtCntlTopEntry, lpIlsFwdrLtFbIpxHTopTable=lpIlsFwdrLtFbIpxHTopTable, lpFiLtFbIpxH=lpFiLtFbIpxH, lpFiTestIndex=lpFiTestIndex, lpEnetLtFbDataTData=lpEnetLtFbDataTData, lpEth100LtFbFddiMacRowStatusTable=lpEth100LtFbFddiMacRowStatusTable, lpIlsFwdrTestFrmRx=lpIlsFwdrTestFrmRx, lpEth100AutoNegotiation=lpEth100AutoNegotiation, lpTrLtFbDataRowStatusTable=lpTrLtFbDataRowStatusTable, lpTrLtFbFddiMacTopTable=lpTrLtFbFddiMacTopTable, lpTrLtComponentName=lpTrLtComponentName, lpEth100CidDataTable=lpEth100CidDataTable, lpEnetLtPrtCfgIndex=lpEnetLtPrtCfgIndex, lpFiLtFbMacEnetRowStatusEntry=lpFiLtFbMacEnetRowStatusEntry, lpTrLostFrameErrors=lpTrLostFrameErrors, lpIlsFwdrLtFbAppleHTopTable=lpIlsFwdrLtFbAppleHTopTable, lpEth100LtFbIpHTData=lpEth100LtFbIpHTData, lpFiLtFrmCpyRowStatusEntry=lpFiLtFrmCpyRowStatusEntry, lpEnetLtFbIpxHTopTable=lpEnetLtFbIpxHTopTable, lpFiCidDataEntry=lpFiCidDataEntry, lpEth100IfEntryEntry=lpEth100IfEntryEntry, lpFiLtFbMacTrRowStatusEntry=lpFiLtFbMacTrRowStatusEntry, lpFiTestErroredFrmRx=lpFiTestErroredFrmRx, lpTrTestBitsTx=lpTrTestBitsTx, lpTrCommentText=lpTrCommentText, lpEth100LtPrtCfgRowStatusEntry=lpEth100LtPrtCfgRowStatusEntry, lpFiLtCntlRowStatus=lpFiLtCntlRowStatus, lpFiLtFbTxInfoRowStatus=lpFiLtFbTxInfoRowStatus, lpEnetLtFrmCmpTData=lpEnetLtFrmCmpTData, lpFiValidTransmissionTimer=lpFiValidTransmissionTimer, lpFiLtFbAppleHTData=lpFiLtFbAppleHTData, lpEnetComponentName=lpEnetComponentName, lpTrLtFbFddiMacRowStatus=lpTrLtFbFddiMacRowStatus, lpIlsFwdrSnmpOperStatus=lpIlsFwdrSnmpOperStatus, lpIlsFwdrLtRowStatusEntry=lpIlsFwdrLtRowStatusEntry, lpEth100LtFb=lpEth100LtFb, lpIlsFwdrLtFbAppleHRowStatus=lpIlsFwdrLtFbAppleHRowStatus, lpEth100LtFbIpxHComponentName=lpEth100LtFbIpxHComponentName, lpEth100LtCntlTopEntry=lpEth100LtCntlTopEntry, lpIlsFwdrLtFbLlchComponentName=lpIlsFwdrLtFbLlchComponentName, lpEnetLtFrmCpyIndex=lpEnetLtFrmCpyIndex, lpIlsFwdrLtCntlRowStatusTable=lpIlsFwdrLtCntlRowStatusTable, lpTrLtFbIpxHTopEntry=lpTrLtFbIpxHTopEntry, lpEnetStateTable=lpEnetStateTable, lpFiTvxExpiredCounts=lpFiTvxExpiredCounts, laStateTable=laStateTable, lpIlsFwdrLtFbLlchRowStatusTable=lpIlsFwdrLtFbLlchRowStatusTable, lpIlsFwdrLtFbMacEnetTopTable=lpIlsFwdrLtFbMacEnetTopTable, lpEth100LtFbMacEnetStorageType=lpEth100LtFbMacEnetStorageType, lpEnetTestResultsTable=lpEnetTestResultsTable, lpFiAdminState=lpFiAdminState, lpEnetLtFbMacTrTopTable=lpEnetLtFbMacTrTopTable, lpEth100LtFbDataRowStatus=lpEth100LtFbDataRowStatus, lpFiRingOpCounts=lpFiRingOpCounts, lpEnetLtFbLlchStorageType=lpEnetLtFbLlchStorageType, lpEnetTestBitsTx=lpEnetTestBitsTx, lpEnetLtFbDataRowStatusTable=lpEnetLtFbDataRowStatusTable, lpEnetLtTData=lpEnetLtTData, lpFiTokenNegotiatedTimer=lpFiTokenNegotiatedTimer, lpFiLtFbTxInfoTopTable=lpFiLtFbTxInfoTopTable, lpIlsFwdrLtFbTxInfoRowStatus=lpIlsFwdrLtFbTxInfoRowStatus, lpEth100LtFbAppleHRowStatusTable=lpEth100LtFbAppleHRowStatusTable, lpTrLtFbMacTrTopEntry=lpTrLtFbMacTrTopEntry, lpFiTokenRequestTimer=lpFiTokenRequestTimer, lpIlsFwdrLtFrmCmpTData=lpIlsFwdrLtFrmCmpTData, lpEnetLtFbDataStorageType=lpEnetLtFbDataStorageType, lpIlsFwdrRowStatus=lpIlsFwdrRowStatus, lpFiLtFrmCpyComponentName=lpFiLtFrmCpyComponentName, lpEth100StateTable=lpEth100StateTable, lpEth100Index=lpEth100Index, lpEth100IfIndex=lpEth100IfIndex, lpFiLtFbMacTrComponentName=lpFiLtFbMacTrComponentName, lpTrLtFbLlchRowStatus=lpTrLtFbLlchRowStatus, lpEth100LtFbMacEnetTopEntry=lpEth100LtFbMacEnetTopEntry, lpTrLobeWires=lpTrLobeWires, lpEth100LtFbLlchIndex=lpEth100LtFbLlchIndex, lpIlsFwdrLtFbDataTData=lpIlsFwdrLtFbDataTData, lpEth100LtFbStorageType=lpEth100LtFbStorageType, lpEnetLtStorageType=lpEnetLtStorageType, lpIlsFwdrLtFbComponentName=lpIlsFwdrLtFbComponentName, lpFiTestBitsTx=lpFiTestBitsTx, lpIlsFwdrLinkToTrafficSourceValue=lpIlsFwdrLinkToTrafficSourceValue, lpFiAcceptBs=lpFiAcceptBs, lpFiSmtOperTable=lpFiSmtOperTable, lpEth100CidDataEntry=lpEth100CidDataEntry, lpTrLtFbAppleHRowStatus=lpTrLtFbAppleHRowStatus, lpEnetIndex=lpEnetIndex, lpTrRingSpeed=lpTrRingSpeed, lpEnetLtFbMacTr=lpEnetLtFbMacTr, lpTrTestPTOEntry=lpTrTestPTOEntry, lpTrLtCntlTopTable=lpTrLtCntlTopTable, lpEth100LtFbDataRowStatusEntry=lpEth100LtFbDataRowStatusEntry, lpFiRowStatusTable=lpFiRowStatusTable, lpTrLtFbMacTrRowStatus=lpTrLtFbMacTrRowStatus, lpIlsFwdrLtFbAppleHRowStatusTable=lpIlsFwdrLtFbAppleHRowStatusTable, lpIlsFwdrTestDuration=lpIlsFwdrTestDuration, lpTrLtFbDataRowStatusEntry=lpTrLtFbDataRowStatusEntry, lpEth100LtFbDataIndex=lpEth100LtFbDataIndex, lpTrLtFbIpxH=lpTrLtFbIpxH, lpEth100ProvTable=lpEth100ProvTable, lpIlsFwdrLtFbMacEnetComponentName=lpIlsFwdrLtFbMacEnetComponentName, lpFiLtFbLlch=lpFiLtFbLlch, lpEnetTestBitsRx=lpEnetTestBitsRx, lpEnetTestCauseOfTermination=lpEnetTestCauseOfTermination, lpTrLtPrtCfgRowStatusEntry=lpTrLtPrtCfgRowStatusEntry, lpTrLtFbMacEnetTopTable=lpTrLtFbMacEnetTopTable, lpFiOperationalState=lpFiOperationalState, lpTrLtFbMacEnetRowStatus=lpTrLtFbMacEnetRowStatus, lpTrLtFbIpxHTopTable=lpTrLtFbIpxHTopTable, lpTrTestCauseOfTermination=lpTrTestCauseOfTermination, lpEnetLtPrtCfgRowStatusEntry=lpEnetLtPrtCfgRowStatusEntry, lpEnetLtComponentName=lpEnetLtComponentName, lpEth100LtFrmCmpTopTable=lpEth100LtFrmCmpTopTable, laRowStatus=laRowStatus, lpEth100LtFbTxInfo=lpEth100LtFbTxInfo, lpFiLtFbIpH=lpFiLtFbIpH, lpFiIfIndex=lpFiIfIndex, lpFiUseThruBa=lpFiUseThruBa, lpTrLtFrmCpyRowStatusTable=lpTrLtFrmCpyRowStatusTable, lpIlsFwdrLtFbFddiMacStorageType=lpIlsFwdrLtFbFddiMacStorageType, lpEth100FrameTooLongs=lpEth100FrameTooLongs, lpEnetLtFbLlchComponentName=lpEnetLtFbLlchComponentName, lpEnetLtFbTxInfo=lpEnetLtFbTxInfo, lpIlsFwdrLtFbMacTrRowStatusEntry=lpIlsFwdrLtFbMacTrRowStatusEntry, lpIlsFwdrLtIndex=lpIlsFwdrLtIndex, lpFiLtFbLlchTopTable=lpFiLtFbLlchTopTable, lpTrNodeAddress=lpTrNodeAddress, lpEnetLtCntlTData=lpEnetLtCntlTData, lpFi=lpFi, lpFiLtFbFddiMacComponentName=lpFiLtFbFddiMacComponentName, lpTrLtFbTxInfo=lpTrLtFbTxInfo, lpEnetLtFbDataIndex=lpEnetLtFbDataIndex, lpTrLtFbLlchTopEntry=lpTrLtFbLlchTopEntry, lpFiAdminInfoEntry=lpFiAdminInfoEntry, lpIlsFwdrTestRowStatusTable=lpIlsFwdrTestRowStatusTable, lpTrAdminState=lpTrAdminState, lpEth100LtFbIpxHTopTable=lpEth100LtFbIpxHTopTable, lpFiLtFbFddiMac=lpFiLtFbFddiMac, lpTrLtFrmCmp=lpTrLtFrmCmp, lpIlsFwdrTestFrmTx=lpIlsFwdrTestFrmTx, lpEnetTestRowStatusTable=lpEnetTestRowStatusTable, lpEth100AutoNegStatus=lpEth100AutoNegStatus, lpTrLtFbLlchComponentName=lpTrLtFbLlchComponentName, lpEnetLtFbDataRowStatus=lpEnetLtFbDataRowStatus, lpEth100LtFbIpHIndex=lpEth100LtFbIpHIndex, lpIlsFwdrLtFbMacTrComponentName=lpIlsFwdrLtFbMacTrComponentName, laMediaProvEntry=laMediaProvEntry, lpIlsFwdrLtFbMacTrTData=lpIlsFwdrLtFbMacTrTData, lpTrLtFbIpH=lpTrLtFbIpH, lpFiLtPrtCfgRowStatusEntry=lpFiLtPrtCfgRowStatusEntry, lpFiPhySignalBitsRcvd=lpFiPhySignalBitsRcvd, lpFiLtComponentName=lpFiLtComponentName, lpTrTestFrmRx=lpTrTestFrmRx, lpIlsFwdrTestRowStatus=lpIlsFwdrTestRowStatus, lpIlsFwdrLtPrtCfgStorageType=lpIlsFwdrLtPrtCfgStorageType, lpEth100LtFbTxInfoComponentName=lpEth100LtFbTxInfoComponentName, lpFiRingLatency=lpFiRingLatency, lpIlsFwdrLtFbFddiMacRowStatusTable=lpIlsFwdrLtFbFddiMacRowStatusTable, lpEth100TestRowStatus=lpEth100TestRowStatus, lpIlsFwdrTestErroredFrmRx=lpIlsFwdrTestErroredFrmRx, lpEnetLtFrmCpyComponentName=lpEnetLtFrmCpyComponentName, lpIlsFwdrLtFbTxInfoComponentName=lpIlsFwdrLtFbTxInfoComponentName, lpEnetLtFrmCmpRowStatusEntry=lpEnetLtFrmCmpRowStatusEntry, lpFiUsageState=lpFiUsageState, lpEnetLtFbLlchRowStatusEntry=lpEnetLtFbLlchRowStatusEntry, lpEnetLtRowStatusEntry=lpEnetLtRowStatusEntry, lpTrLtPrtCfgTData=lpTrLtPrtCfgTData, laFramerInterfaceName=laFramerInterfaceName, lpEth100LtFbMacEnetTData=lpEth100LtFbMacEnetTData, lpFiPhyFddiPhyTypeIndex=lpFiPhyFddiPhyTypeIndex, lpFiLtFrmCmpTopTable=lpFiLtFrmCmpTopTable, lpIlsFwdrLtFbIpxHIndex=lpIlsFwdrLtFbIpxHIndex, lpEth100MacReceiveErrors=lpEth100MacReceiveErrors, lpEnetLtFbFddiMacComponentName=lpEnetLtFbFddiMacComponentName, lpTrLtFbTxInfoIndex=lpTrLtFbTxInfoIndex, lpTrLtFrmCmpComponentName=lpTrLtFrmCmpComponentName, lpEth100LtFbFddiMacIndex=lpEth100LtFbFddiMacIndex, lpEth100LtFbLlch=lpEth100LtFbLlch, laStateEntry=laStateEntry, lpEth100LtFbFddiMacTopTable=lpEth100LtFbFddiMacTopTable, lpTrLtFrmCmpTopTable=lpTrLtFrmCmpTopTable, lpEnetLtFbTxInfoTopTable=lpEnetLtFbTxInfoTopTable, lpEnetLateCollisions=lpEnetLateCollisions, lpEnetLtFrmCmp=lpEnetLtFrmCmp, lpIlsFwdrLtFbLlchTopEntry=lpIlsFwdrLtFbLlchTopEntry, lpTrStatsEntry=lpTrStatsEntry, lpTrLtFbMacEnetTData=lpTrLtFbMacEnetTData, lpTrIfEntryTable=lpTrIfEntryTable, lpIlsFwdrLtComponentName=lpIlsFwdrLtComponentName, lpEth100TestRowStatusEntry=lpEth100TestRowStatusEntry, lpFiLtFbMacTrIndex=lpFiLtFbMacTrIndex, lpEth100LtFbTopEntry=lpEth100LtFbTopEntry, lpFiLtFbIpxHStorageType=lpFiLtFbIpxHStorageType, lpIlsFwdrLtFbAppleHTopEntry=lpIlsFwdrLtFbAppleHTopEntry, lpEth100LtFbLlchTopEntry=lpEth100LtFbLlchTopEntry, laCidDataTable=laCidDataTable, lpFiLtCntlRowStatusEntry=lpFiLtCntlRowStatusEntry, laCidDataEntry=laCidDataEntry, lpEnetLtFrmCpyTopTable=lpEnetLtFrmCpyTopTable, lpEnetLtFbTopEntry=lpEnetLtFbTopEntry, lpFiMacAddress=lpFiMacAddress, lpFiFrameErrorFlag=lpFiFrameErrorFlag, lpEth100LtFbTxInfoRowStatusTable=lpEth100LtFbTxInfoRowStatusTable, lpEth100TestPTOEntry=lpEth100TestPTOEntry, lpEth100LtFbMacTrTopEntry=lpEth100LtFbMacTrTopEntry, lpFiStorageType=lpFiStorageType, lpFiSmtOperEntry=lpFiSmtOperEntry, lpIlsFwdrTestBitsTx=lpIlsFwdrTestBitsTx, laIfEntryTable=laIfEntryTable, lpEnetLtFbMacEnetStorageType=lpEnetLtFbMacEnetStorageType, lpTrNcMacOperTable=lpTrNcMacOperTable, lpTrLtFbStorageType=lpTrLtFbStorageType, lpFiMacProvEntry=lpFiMacProvEntry, lpTrLtFbTopTable=lpTrLtFbTopTable, lpIlsFwdrLtFbTopEntry=lpIlsFwdrLtFbTopEntry, lpFiLtFbFddiMacTopTable=lpFiLtFbFddiMacTopTable, lpFiLtRowStatus=lpFiLtRowStatus, lpTrNcMacAddress=lpTrNcMacAddress, lpEnetLtFbMacTrRowStatusTable=lpEnetLtFbMacTrRowStatusTable, lpEnetLtFbMacTrStorageType=lpEnetLtFbMacTrStorageType, lpTrComponentName=lpTrComponentName, lpTrLtFbAppleHRowStatusTable=lpTrLtFbAppleHRowStatusTable, lpTrLtFbTData=lpTrLtFbTData, lpEnetLtFbFddiMacStorageType=lpEnetLtFbFddiMacStorageType, lpEth100LtFbMacEnetTopTable=lpEth100LtFbMacEnetTopTable, lpTrFrameCopiedErrors=lpTrFrameCopiedErrors, lpEnetLtFbIpHRowStatus=lpEnetLtFbIpHRowStatus, lpFiVersion=lpFiVersion, lpFiLtRowStatusEntry=lpFiLtRowStatusEntry, lpEnetLtPrtCfgRowStatus=lpEnetLtPrtCfgRowStatus, lpFiBypassPresent=lpFiBypassPresent)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-LanDriversMIB", lpEnetLtFbTxInfoRowStatusTable=lpEnetLtFbTxInfoRowStatusTable, lpTrLtPrtCfgStorageType=lpTrLtPrtCfgStorageType, lpTrTestErroredFrmRx=lpTrTestErroredFrmRx, lpFiPhyLerFlag=lpFiPhyLerFlag, lpIlsFwdrLtFbIpHIndex=lpIlsFwdrLtFbIpHIndex, lpEnetLtFbDataComponentName=lpEnetLtFbDataComponentName, lpFiPhyProvTable=lpFiPhyProvTable, lpFiTestBitsRx=lpFiTestBitsRx, lpEth100AdminState=lpEth100AdminState, lpFiPhySignalBitsTxmt=lpFiPhySignalBitsTxmt, lpTrCidDataTable=lpTrCidDataTable, lpFiFrameCounts=lpFiFrameCounts, lpFiLtFbMacEnetRowStatusTable=lpFiLtFbMacEnetRowStatusTable, lpEth100ExcessiveCollisions=lpEth100ExcessiveCollisions, lpEnetLtFrmCpyStorageType=lpEnetLtFrmCpyStorageType, lpFiLtFrmCmpTData=lpFiLtFrmCmpTData, lpFiPhyLerAlarm=lpFiPhyLerAlarm, lpEth100LtPrtCfgStorageType=lpEth100LtPrtCfgStorageType, lpIlsFwdrErrorCount=lpIlsFwdrErrorCount, lpEth100LtFbMacTrRowStatus=lpEth100LtFbMacTrRowStatus, lanDriversCapabilitiesBE01A=lanDriversCapabilitiesBE01A, lpEth100LtCntlComponentName=lpEth100LtCntlComponentName, lpEnetLtFbMacTrRowStatusEntry=lpEnetLtFbMacTrRowStatusEntry, lpTrLtPrtCfg=lpTrLtPrtCfg, lpTrTestRowStatusEntry=lpTrTestRowStatusEntry, lpEnetRowStatusTable=lpEnetRowStatusTable, lpTrCidDataEntry=lpTrCidDataEntry, lpTrTestResultsEntry=lpTrTestResultsEntry, lpEnetLtPrtCfgTopEntry=lpEnetLtPrtCfgTopEntry, lpIlsFwdrLtFbMacEnetTopEntry=lpIlsFwdrLtFbMacEnetTopEntry, lpFiAdminInfoTable=lpFiAdminInfoTable, lpFiCfState=lpFiCfState, laIfAdminStatus=laIfAdminStatus, lpEth100TestPTOTable=lpEth100TestPTOTable, lpEth100AlignmentErrors=lpEth100AlignmentErrors, lpTrRemoveRings=lpTrRemoveRings, lpIlsFwdrLtFbMacTrStorageType=lpIlsFwdrLtFbMacTrStorageType, lpFiLtFbFddiMacRowStatusTable=lpFiLtFbFddiMacRowStatusTable, lpIlsFwdrLtFbMacTrRowStatus=lpIlsFwdrLtFbMacTrRowStatus, lpFiLtFbIndex=lpFiLtFbIndex, lpIlsFwdrLtFbLlchIndex=lpIlsFwdrLtFbLlchIndex, lpFiLtFbAppleHRowStatus=lpFiLtFbAppleHRowStatus, laIndex=laIndex, lpIlsFwdrLtFbMacTrRowStatusTable=lpIlsFwdrLtFbMacTrRowStatusTable, lpIlsFwdrTestCauseOfTermination=lpIlsFwdrTestCauseOfTermination, lpFiLtFbIpHRowStatusEntry=lpFiLtFbIpHRowStatusEntry, lpEnetLtFbLlch=lpEnetLtFbLlch, lpTrStateTable=lpTrStateTable, lpEnetLtFbLlchTData=lpEnetLtFbLlchTData, lpEth100LtFrmCmpTopEntry=lpEth100LtFrmCmpTopEntry, lpEth100LtFbMacTrStorageType=lpEth100LtFbMacTrStorageType, lpTrLtFbMacEnetStorageType=lpTrLtFbMacEnetStorageType, lpEnetLtFbLlchIndex=lpEnetLtFbLlchIndex, lpFiLtFbIpxHTData=lpFiLtFbIpxHTData, lpEnetOperTable=lpEnetOperTable, lpFiLtFbAppleHTopEntry=lpFiLtFbAppleHTopEntry, lpIlsFwdrLtFrmCpyTopEntry=lpIlsFwdrLtFrmCpyTopEntry, lpIlsFwdrLtFbStorageType=lpIlsFwdrLtFbStorageType, lpEth100LtFbIpxHTopEntry=lpEth100LtFbIpxHTopEntry, lpEth100LtFbIpHRowStatusEntry=lpEth100LtFbIpHRowStatusEntry, lpFiCustomerIdentifier=lpFiCustomerIdentifier, lpEnetRowStatusEntry=lpEnetRowStatusEntry, lpFiOldDownstreamNeighbor=lpFiOldDownstreamNeighbor, lpFiTestElapsedTime=lpFiTestElapsedTime, lpTrLtFbMacEnetIndex=lpTrLtFbMacEnetIndex, lpIlsFwdrLtFbFddiMacTData=lpIlsFwdrLtFbFddiMacTData, lpTrLtFbIpHIndex=lpTrLtFbIpHIndex, lpIlsFwdrLtFbRowStatus=lpIlsFwdrLtFbRowStatus, lpFiLtIndex=lpFiLtIndex, lpEth100LtPrtCfgIndex=lpEth100LtPrtCfgIndex, lpEnetLtFrmCmpTopTable=lpEnetLtFrmCmpTopTable, lanDriversCapabilitiesBE=lanDriversCapabilitiesBE, lpTrTestStorageType=lpTrTestStorageType, lpFiMacCOperTable=lpFiMacCOperTable, laFramerProvTable=laFramerProvTable, lpIlsFwdrTestBitsRx=lpIlsFwdrTestBitsRx, lpEth100MacTransmitErrors=lpEth100MacTransmitErrors, lpEnetLtFbDataTopEntry=lpEnetLtFbDataTopEntry, lpTrLtCntlTData=lpTrLtCntlTData, lpFiLtPrtCfgRowStatusTable=lpFiLtPrtCfgRowStatusTable, lpEth100LtFbMacEnet=lpEth100LtFbMacEnet, lpEnetAdminState=lpEnetAdminState, lpFiLtPrtCfgComponentName=lpFiLtPrtCfgComponentName, lpTrLastTimeBeaconSent=lpTrLastTimeBeaconSent, lanDriversMIB=lanDriversMIB, lpTrLtCntlRowStatus=lpTrLtCntlRowStatus, lpEnetLtFbIpHRowStatusEntry=lpEnetLtFbIpHRowStatusEntry, lpFiSmtProvTable=lpFiSmtProvTable, lpIlsFwdrTestPTOTable=lpIlsFwdrTestPTOTable, lpEth100LtCntlRowStatus=lpEth100LtCntlRowStatus, lpIlsFwdrLtPrtCfgRowStatusEntry=lpIlsFwdrLtPrtCfgRowStatusEntry, lpEth100TestResultsTable=lpEth100TestResultsTable, lpIlsFwdrLtFbIpHTopTable=lpIlsFwdrLtFbIpHTopTable, lanDriversGroup=lanDriversGroup, lpEth100FramesTransmittedOk=lpEth100FramesTransmittedOk, lpEth100Vendor=lpEth100Vendor, lpTrLtFbLlchStorageType=lpTrLtFbLlchStorageType, lpEnetLtRowStatus=lpEnetLtRowStatus, lpFiLtStorageType=lpFiLtStorageType, lpTrLtFrmCpyStorageType=lpTrLtFrmCpyStorageType, lpEnetLtFbIpxHRowStatusEntry=lpEnetLtFbIpxHRowStatusEntry, lpTrLtFbRowStatus=lpTrLtFbRowStatus, lpIlsFwdrIfEntryEntry=lpIlsFwdrIfEntryEntry, lpIlsFwdrLtFbDataTopEntry=lpIlsFwdrLtFbDataTopEntry, lpEnetLtCntlStorageType=lpEnetLtCntlStorageType, lpTrLtFbIndex=lpTrLtFbIndex, lpIlsFwdrLtFbIndex=lpIlsFwdrLtFbIndex, lpEth100Test=lpEth100Test, la=la, laFramerInterfaceNamesValue=laFramerInterfaceNamesValue, lpTrLtFbDataStorageType=lpTrLtFbDataStorageType, lpEnetAdminInfoEntry=lpEnetAdminInfoEntry, lpTrTestComponentName=lpTrTestComponentName, lpTrGroupAddress=lpTrGroupAddress, laFramerRowStatus=laFramerRowStatus, lpFiLtPrtCfg=lpFiLtPrtCfg, lpFiLtFrmCmpStorageType=lpFiLtFrmCmpStorageType, lpFiPhyRowStatus=lpFiPhyRowStatus, lpEth100LtPrtCfgTopEntry=lpEth100LtPrtCfgTopEntry, lpTrTestIndex=lpTrTestIndex, lpTrLtFbTxInfoRowStatusTable=lpTrLtFbTxInfoRowStatusTable, lpTrUsageState=lpTrUsageState, lpFiLtFrmCmpRowStatus=lpFiLtFrmCmpRowStatus, lpEnetLtFbMacEnetComponentName=lpEnetLtFbMacEnetComponentName, lpTrLtFbIpHTData=lpTrLtFbIpHTData, lpEnetLtFbIpxHComponentName=lpEnetLtFbIpxHComponentName, lpFiOldUpstreamNeighbor=lpFiOldUpstreamNeighbor, lpTrLtFrmCpyIndex=lpTrLtFrmCpyIndex, lpEth100LtFbMacEnetComponentName=lpEth100LtFbMacEnetComponentName, lpEnetOperEntry=lpEnetOperEntry, lpEth100OctetsTransmittedOk=lpEth100OctetsTransmittedOk, lpEnetLtFb=lpEnetLtFb, lpFiTestStorageType=lpFiTestStorageType, lpTrLtFbAppleHTData=lpTrLtFbAppleHTData, lpIlsFwdrIfIndex=lpIlsFwdrIfIndex, lpEnetTestFrmSize=lpEnetTestFrmSize, lpFiLtPrtCfgTopTable=lpFiLtPrtCfgTopTable, lpTrLtFbDataTopTable=lpTrLtFbDataTopTable, lpFiLtFbLlchTData=lpFiLtFbLlchTData, lpEth100LtTopEntry=lpEth100LtTopEntry, lpTrSignalLoss=lpTrSignalLoss, laFramerInterfaceNamesTable=laFramerInterfaceNamesTable, lpFiApplicationFramerName=lpFiApplicationFramerName, lpIlsFwdrLtFbIpxHTData=lpIlsFwdrLtFbIpxHTData, lpEth100LtPrtCfgComponentName=lpEth100LtPrtCfgComponentName, lpEnetLtFbIpHTData=lpEnetLtFbIpHTData, lpTrAdminInfoEntry=lpTrAdminInfoEntry, lpTrLtFbIpxHComponentName=lpTrLtFbIpxHComponentName, lpEth100ProvEntry=lpEth100ProvEntry, lpEth100LtFbTxInfoTopEntry=lpEth100LtFbTxInfoTopEntry, lpEth100LtFbIpxHTData=lpEth100LtFbIpxHTData, lpEnetApplicationFramerName=lpEnetApplicationFramerName, lpEth100LtTData=lpEth100LtTData, lpEnetTestComponentName=lpEnetTestComponentName, lpEth100LtFbFddiMacComponentName=lpEth100LtFbFddiMacComponentName, lpEth100LtFbIpHRowStatusTable=lpEth100LtFbIpHRowStatusTable, lpEth100LtFbIpxHRowStatusEntry=lpEth100LtFbIpxHRowStatusEntry, lpFiAcceptBb=lpFiAcceptBb, lpEth100LtFbData=lpEth100LtFbData, lpTrLtFbLlchTData=lpTrLtFbLlchTData, lpEth100DeferredTransmissions=lpEth100DeferredTransmissions, lpEnetLtPrtCfgRowStatusTable=lpEnetLtPrtCfgRowStatusTable, lpTrIfIndex=lpTrIfIndex, lpEnetLtFbIpH=lpEnetLtFbIpH, lpEnetIfIndex=lpEnetIfIndex, lpIlsFwdrLtFbIpxHRowStatusEntry=lpIlsFwdrLtFbIpxHRowStatusEntry, lpFiLtFbIpHStorageType=lpFiLtFbIpHStorageType, lpEth100LtFbLlchComponentName=lpEth100LtFbLlchComponentName, lpFiLtFbDataComponentName=lpFiLtFbDataComponentName, lpTrLtFrmCmpRowStatusTable=lpTrLtFrmCmpRowStatusTable, lpIlsFwdrLinkToTrafficSourceEntry=lpIlsFwdrLinkToTrafficSourceEntry, lpEth100LtFrmCmpRowStatusTable=lpEth100LtFrmCmpRowStatusTable, lpIlsFwdrLtFbLlchRowStatusEntry=lpIlsFwdrLtFbLlchRowStatusEntry, lpFiLtFbAppleHRowStatusEntry=lpFiLtFbAppleHRowStatusEntry, lpEnetLtFrmCpy=lpEnetLtFrmCpy, lpEnetLtFbData=lpEnetLtFbData, lpEnetLtFbMacEnetRowStatus=lpEnetLtFbMacEnetRowStatus, lpTrLtFbFddiMacRowStatusTable=lpTrLtFbFddiMacRowStatusTable, lpEnetLtFrmCpyRowStatusEntry=lpEnetLtFrmCpyRowStatusEntry, lpEth100MacAddress=lpEth100MacAddress, lpFiLtFrmCpyRowStatus=lpFiLtFrmCpyRowStatus, lpEth100LtStorageType=lpEth100LtStorageType, lpIlsFwdrIndex=lpIlsFwdrIndex, lpTrLtFrmCpyTopTable=lpTrLtFrmCpyTopTable, lpFiLtCntlIndex=lpFiLtCntlIndex, lpEnetExcessiveCollisions=lpEnetExcessiveCollisions, lpFiLtCntlTData=lpFiLtCntlTData, laStorageType=laStorageType, lpTrLtFbDataTopEntry=lpTrLtFbDataTopEntry, lpEnetLtCntlRowStatus=lpEnetLtCntlRowStatus, lpFiLtFbLlchRowStatusEntry=lpFiLtFbLlchRowStatusEntry, lpFiLtFbRowStatusEntry=lpFiLtFbRowStatusEntry, lpEnetCidDataTable=lpEnetCidDataTable, lpFiLtFbTxInfoTopEntry=lpFiLtFbTxInfoTopEntry, lpEth100LtFbFddiMacRowStatus=lpEth100LtFbFddiMacRowStatus, lpIlsFwdrLtFbDataStorageType=lpIlsFwdrLtFbDataStorageType, lpFiLtFbIpHRowStatus=lpFiLtFbIpHRowStatus, lpTrLtTopTable=lpTrLtTopTable, lpEnetLtFbMacEnetTopEntry=lpEnetLtFbMacEnetTopEntry, lpTrLtFbLlch=lpTrLtFbLlch, lpEth100LtFrmCmpComponentName=lpEth100LtFrmCmpComponentName, lpEth100LtCntlRowStatusEntry=lpEth100LtCntlRowStatusEntry, lpIlsFwdrLtTopEntry=lpIlsFwdrLtTopEntry, lpEth100TestType=lpEth100TestType, lpEnetLtFbMacTrTopEntry=lpEnetLtFbMacTrTopEntry, lpTrSoftErrors=lpTrSoftErrors, lpEnetTestFrmTx=lpEnetTestFrmTx, lpEth100LtFbLlchRowStatusTable=lpEth100LtFbLlchRowStatusTable, lpEnetLtFbAppleHTopTable=lpEnetLtFbAppleHTopTable, lpTrInternalErrors=lpTrInternalErrors, lpEth100LtFrmCmp=lpEth100LtFrmCmp, lpIlsFwdrLtFbDataRowStatusEntry=lpIlsFwdrLtFbDataRowStatusEntry, lpFiTestRowStatusTable=lpFiTestRowStatusTable, lpIlsFwdrLt=lpIlsFwdrLt, lpTrProvEntry=lpTrProvEntry, lpEth100LtFbMacTrRowStatusTable=lpEth100LtFbMacTrRowStatusTable, lpEnetLtFbFddiMacRowStatusTable=lpEnetLtFbFddiMacRowStatusTable, lpFiLtFbMacTrTopTable=lpFiLtFbMacTrTopTable, lpTrLtFbMacTrStorageType=lpTrLtFbMacTrStorageType, lpEnetLtFrmCpyRowStatus=lpEnetLtFrmCpyRowStatus, lpFiLtFbIpxHTopEntry=lpFiLtFbIpxHTopEntry, lpIlsFwdrLtFrmCpyComponentName=lpIlsFwdrLtFrmCpyComponentName, lpEth100LtFrmCmpRowStatus=lpEth100LtFrmCmpRowStatus, lpEth100LtFbTxInfoRowStatus=lpEth100LtFbTxInfoRowStatus, lpFiLtFrmCpy=lpFiLtFrmCpy, lpFiNcOldUpstreamNeighbor=lpFiNcOldUpstreamNeighbor, lpEth100ActualDuplexMode=lpEth100ActualDuplexMode, lpIlsFwdrLtPrtCfg=lpIlsFwdrLtPrtCfg, lpEnetLtFrmCpyTData=lpEnetLtFrmCpyTData, lpEth100ReceivedOctetsIntoRouterBr=lpEth100ReceivedOctetsIntoRouterBr, lpFiNcMacOperEntry=lpFiNcMacOperEntry, lpTrLtCntlRowStatusEntry=lpTrLtCntlRowStatusEntry, lpFiLtFbTopEntry=lpFiLtFbTopEntry, lpEth100LtFbLlchRowStatus=lpEth100LtFbLlchRowStatus, lpFiLtFbIpxHIndex=lpFiLtFbIpxHIndex, lpEnetTestFrmRx=lpEnetTestFrmRx, lpEth100LtFrmCmpStorageType=lpEth100LtFrmCmpStorageType, lpEth100LtFbDataStorageType=lpEth100LtFbDataStorageType, lpIlsFwdrLtFbFddiMacIndex=lpIlsFwdrLtFbFddiMacIndex, lpEnetLtFbComponentName=lpEnetLtFbComponentName, lpIlsFwdrLtCntlComponentName=lpIlsFwdrLtCntlComponentName, lpFiLtFbMacEnetStorageType=lpFiLtFbMacEnetStorageType, lpTrLtFbIpxHStorageType=lpTrLtFbIpxHStorageType, lpEth100LtFbMacEnetRowStatus=lpEth100LtFbMacEnetRowStatus, lpEth100IfAdminStatus=lpEth100IfAdminStatus, lpFiLtFrmCpyRowStatusTable=lpFiLtFrmCpyRowStatusTable, lpIlsFwdrFramesReceived=lpIlsFwdrFramesReceived, lpEnetLtPrtCfgComponentName=lpEnetLtPrtCfgComponentName, lpEth100LtFbAppleHRowStatus=lpEth100LtFbAppleHRowStatus, lpFiNcMacAddress=lpFiNcMacAddress, lpEth100RowStatusEntry=lpEth100RowStatusEntry, lpEth100TestStorageType=lpEth100TestStorageType, laFramerIndex=laFramerIndex, lpFiLtFbLlchComponentName=lpFiLtFbLlchComponentName)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-LanDriversMIB", lpEnetFrameTooLongs=lpEnetFrameTooLongs, lpEth100LtFrmCpyTopEntry=lpEth100LtFrmCpyTopEntry, lpEth100LtFrmCmpRowStatusEntry=lpEth100LtFrmCmpRowStatusEntry, lpTrLtCntlStorageType=lpTrLtCntlStorageType, lpEnetTestResultsEntry=lpEnetTestResultsEntry, lpIlsFwdrStateTable=lpIlsFwdrStateTable, lpIlsFwdrLtFrmCmpComponentName=lpIlsFwdrLtFrmCmpComponentName, lpFiLtFbAppleHTopTable=lpFiLtFbAppleHTopTable, lpFiLtFbAppleHIndex=lpFiLtFbAppleHIndex, lpFiRowStatus=lpFiRowStatus, lpTr=lpTr, lpTrLtFbIpxHRowStatus=lpTrLtFbIpxHRowStatus, lpTrTestDuration=lpTrTestDuration, laFramerRowStatusEntry=laFramerRowStatusEntry, lpEnetLtFbFddiMacTopTable=lpEnetLtFbFddiMacTopTable, lpTrLtFbAppleHComponentName=lpTrLtFbAppleHComponentName, lpEth100FramesReceivedOk=lpEth100FramesReceivedOk, lpEth100LtFbMacTrTopTable=lpEth100LtFbMacTrTopTable, lanDriversGroupBE01A=lanDriversGroupBE01A, lpFiLtFrmCpyIndex=lpFiLtFrmCpyIndex, lpEth100LtFrmCpy=lpEth100LtFrmCpy, lpTrNcUpStream=lpTrNcUpStream, lpIlsFwdrLtCntlTopTable=lpIlsFwdrLtCntlTopTable, lpIlsFwdrLtFbIpxHRowStatus=lpIlsFwdrLtFbIpxHRowStatus, lpEth100UndersizeFrames=lpEth100UndersizeFrames, lpFiPhyLerEstimate=lpFiPhyLerEstimate, lpEnetCommentText=lpEnetCommentText, lpTrAcErrors=lpTrAcErrors, lpTrLtPrtCfgComponentName=lpTrLtPrtCfgComponentName, lpIlsFwdrLtRowStatus=lpIlsFwdrLtRowStatus, lpIlsFwdrLtFbTxInfoStorageType=lpIlsFwdrLtFbTxInfoStorageType, lpFiLtFbTopTable=lpFiLtFbTopTable, lpFiLtFrmCmpRowStatusEntry=lpFiLtFrmCmpRowStatusEntry, lpTrLtPrtCfgIndex=lpTrLtPrtCfgIndex, lpEnetDeferredTransmissions=lpEnetDeferredTransmissions, lpTrLtFbAppleHIndex=lpTrLtFbAppleHIndex, lpTrTest=lpTrTest, lpIlsFwdrLtFbFddiMacRowStatusEntry=lpIlsFwdrLtFbFddiMacRowStatusEntry, lpTrVendor=lpTrVendor, laFramerStorageType=laFramerStorageType, lpFiTestRowStatusEntry=lpFiTestRowStatusEntry, lpFiLtFbMacEnetTData=lpFiLtFbMacEnetTData, lpFiTestType=lpFiTestType, lpTrLtFbMacTrRowStatusTable=lpTrLtFbMacTrRowStatusTable, lpTrAdminInfoTable=lpTrAdminInfoTable, lpEth100LtFrmCmpTData=lpEth100LtFrmCmpTData, lpFiLtFbMacTrStorageType=lpFiLtFbMacTrStorageType, lpIlsFwdrLtFbFddiMacRowStatus=lpIlsFwdrLtFbFddiMacRowStatus, lpIlsFwdrLtCntlTopEntry=lpIlsFwdrLtCntlTopEntry, lpEth100FcsErrors=lpEth100FcsErrors, lpTrLtFrmCpyTopEntry=lpTrLtFrmCpyTopEntry, lpTrLtFb=lpTrLtFb, lpEnetLtCntlRowStatusTable=lpEnetLtCntlRowStatusTable, lpEnetLtFbMacTrComponentName=lpEnetLtFbMacTrComponentName, lpEnetLtFbIpHIndex=lpEnetLtFbIpHIndex, lpEnetLtFbRowStatusEntry=lpEnetLtFbRowStatusEntry, lpFiPhyNeighborType=lpFiPhyNeighborType, lpTrTransmitBeacons=lpTrTransmitBeacons, lpIlsFwdrLtFbAppleH=lpIlsFwdrLtFbAppleH, lpEth100LtFbIpxHRowStatusTable=lpEth100LtFbIpxHRowStatusTable, lpIlsFwdrLtFrmCmpIndex=lpIlsFwdrLtFrmCmpIndex, lpIlsFwdrLtFbLlchTopTable=lpIlsFwdrLtFbLlchTopTable, lpEth100TestResultsEntry=lpEth100TestResultsEntry, lpFiLtFbTxInfoRowStatusTable=lpFiLtFbTxInfoRowStatusTable, lpFiLtFbDataRowStatus=lpFiLtFbDataRowStatus, lpIlsFwdrRowStatusTable=lpIlsFwdrRowStatusTable, lpEnetIfEntryTable=lpEnetIfEntryTable, lpEth100LtFrmCpyRowStatusEntry=lpEth100LtFrmCpyRowStatusEntry, lpIlsFwdrLtPrtCfgIndex=lpIlsFwdrLtPrtCfgIndex, lpEnetLtIndex=lpEnetLtIndex, lpEnetLtFbMacEnetTopTable=lpEnetLtFbMacEnetTopTable, lpFiLtFrmCmpTopEntry=lpFiLtFrmCmpTopEntry, lpTrFunctionalAddress=lpTrFunctionalAddress, lpTrLtFbIpHComponentName=lpTrLtFbIpHComponentName, lpEth100LtPrtCfgTData=lpEth100LtPrtCfgTData, lpFiLtFbStorageType=lpFiLtFbStorageType, lpFiLtFbIpHTopEntry=lpFiLtFbIpHTopEntry, lpFiCopiedCounts=lpFiCopiedCounts, lpEth100LtFbFddiMacRowStatusEntry=lpEth100LtFbFddiMacRowStatusEntry, lpEth100LtFbIpHRowStatus=lpEth100LtFbIpHRowStatus, lpEth100LtCntlRowStatusTable=lpEth100LtCntlRowStatusTable, lpEth100RowStatus=lpEth100RowStatus, lpEth100LtCntlStorageType=lpEth100LtCntlStorageType, lpEnetLtFbDataRowStatusEntry=lpEnetLtFbDataRowStatusEntry, lpEnetHeartbeatPacket=lpEnetHeartbeatPacket, lpFiLtFbFddiMacRowStatus=lpFiLtFbFddiMacRowStatus, lpIlsFwdrLtFbAppleHStorageType=lpIlsFwdrLtFbAppleHStorageType, lpTrRowStatusEntry=lpTrRowStatusEntry, lpEnetLtFbAppleHComponentName=lpEnetLtFbAppleHComponentName, lpIlsFwdrLtPrtCfgRowStatus=lpIlsFwdrLtPrtCfgRowStatus, lpFiPhyOperEntry=lpFiPhyOperEntry, lpTrLtFbFddiMacComponentName=lpTrLtFbFddiMacComponentName, lpIlsFwdrLtPrtCfgRowStatusTable=lpIlsFwdrLtPrtCfgRowStatusTable, lpEth100SingleCollisionFrames=lpEth100SingleCollisionFrames, lpEnetLtCntlTopTable=lpEnetLtCntlTopTable, lpEth100LtFbLlchStorageType=lpEth100LtFbLlchStorageType, lpFiLtFrmCmpIndex=lpFiLtFrmCmpIndex, lpFiLt=lpFiLt, lpFiLtFbIpxHRowStatus=lpFiLtFbIpxHRowStatus, lpIlsFwdrLtCntl=lpIlsFwdrLtCntl, lanDriversCapabilitiesBE01=lanDriversCapabilitiesBE01, lpEth100LtIndex=lpEth100LtIndex, lpEnetLtFbTxInfoStorageType=lpEnetLtFbTxInfoStorageType, lpFiLtCntlTopTable=lpFiLtCntlTopTable, lpFiLtFrmCmpRowStatusTable=lpFiLtFrmCmpRowStatusTable, lpEnetLtFbLlchTopTable=lpEnetLtFbLlchTopTable, lpEnetSingleCollisionFrames=lpEnetSingleCollisionFrames, lpFiLtFbFddiMacIndex=lpFiLtFbFddiMacIndex, lpTrAbortTransErrors=lpTrAbortTransErrors, lpTrTestResultsTable=lpTrTestResultsTable, lpIlsFwdrStateEntry=lpIlsFwdrStateEntry, lpFiOperStatusTable=lpFiOperStatusTable, lpIlsFwdrLtFbDataRowStatus=lpIlsFwdrLtFbDataRowStatus, lpEth100LtRowStatusTable=lpEth100LtRowStatusTable, lpIlsFwdrLtFbTopTable=lpIlsFwdrLtFbTopTable, lpIlsFwdrIfAdminStatus=lpIlsFwdrIfAdminStatus, lpIlsFwdrLtFbTxInfoRowStatusTable=lpIlsFwdrLtFbTxInfoRowStatusTable, lpEnetLtFbIndex=lpEnetLtFbIndex, lpIlsFwdrIfEntryTable=lpIlsFwdrIfEntryTable, lpEth100LtFbMacTrRowStatusEntry=lpEth100LtFbMacTrRowStatusEntry, lpEth100ActualLineSpeed=lpEth100ActualLineSpeed, lpEth100LtFrmCmpIndex=lpEth100LtFrmCmpIndex, lpEnetLtFbMacEnetRowStatusTable=lpEnetLtFbMacEnetRowStatusTable, lpEth100LtCntl=lpEth100LtCntl, lpEth100TestBitsTx=lpEth100TestBitsTx, lpFiMacProvTable=lpFiMacProvTable, lpEnetLtFbIpxHIndex=lpEnetLtFbIpxHIndex, lpEnetLtFbIpxHRowStatus=lpEnetLtFbIpxHRowStatus, lpTrTestElapsedTime=lpTrTestElapsedTime, lpIlsFwdrLtFbTxInfoIndex=lpIlsFwdrLtFbTxInfoIndex, lpIlsFwdrComponentName=lpIlsFwdrComponentName, lpTrIndex=lpTrIndex, lpTrLineErrors=lpTrLineErrors, lpTrLtFbFddiMacRowStatusEntry=lpTrLtFbFddiMacRowStatusEntry, lpTrTestBitsRx=lpTrTestBitsRx, lpTrLtFrmCpy=lpTrLtFrmCpy, lpFiLtCntl=lpFiLtCntl, laUsageState=laUsageState, lpEnetLtFbAppleHRowStatus=lpEnetLtFbAppleHRowStatus, lpTrOperStatusTable=lpTrOperStatusTable, lpIlsFwdrLtFbIpxHRowStatusTable=lpIlsFwdrLtFbIpxHRowStatusTable, lpFiAcceptAm=lpFiAcceptAm, laMediaProvTable=laMediaProvTable, lpEth100LtFbIpH=lpEth100LtFbIpH, lpTrLtFbDataComponentName=lpTrLtFbDataComponentName, lpEth100LtFbFddiMac=lpEth100LtFbFddiMac, lpTrLtCntlTopEntry=lpTrLtCntlTopEntry, lpFiLtFbRowStatusTable=lpFiLtFbRowStatusTable, lpIlsFwdrLtTopTable=lpIlsFwdrLtTopTable, lpIlsFwdrLtFb=lpIlsFwdrLtFb, lpEnetLtFrmCmpRowStatusTable=lpEnetLtFrmCmpRowStatusTable, lpEnetFcsErrors=lpEnetFcsErrors, lpFiLtTopTable=lpFiLtTopTable, lpEnetTestPTOTable=lpEnetTestPTOTable, lpFiPhyPcmState=lpFiPhyPcmState, lpIlsFwdrLtFrmCmpRowStatusEntry=lpIlsFwdrLtFrmCmpRowStatusEntry, lpIlsFwdrLtFbTxInfoRowStatusEntry=lpIlsFwdrLtFbTxInfoRowStatusEntry, lpEth100LineSpeed=lpEth100LineSpeed, lpEnetLtCntl=lpEnetLtCntl, lpIlsFwdrLtFbIpH=lpIlsFwdrLtFbIpH, lpEth100LtFbIpxHStorageType=lpEth100LtFbIpxHStorageType, lpEth100LtFbIpxHIndex=lpEth100LtFbIpxHIndex, laFramerRowStatusTable=laFramerRowStatusTable, lpEnetTestRowStatus=lpEnetTestRowStatus, lpTrStatsTable=lpTrStatsTable, lpEnetTestElapsedTime=lpEnetTestElapsedTime, lpEth100DuplexMode=lpEth100DuplexMode, lpTrLtCntlComponentName=lpTrLtCntlComponentName, lpFiLtFb=lpFiLtFb, lpIlsFwdrStatsTable=lpIlsFwdrStatsTable, lpEth100StatsTable=lpEth100StatsTable, lpFiLateCounts=lpFiLateCounts, lpFiUserData=lpFiUserData, lpEth100IfEntryTable=lpEth100IfEntryTable, lpEth100LtFbLlchTopTable=lpEth100LtFbLlchTopTable, lpEth100LtFbAppleHComponentName=lpEth100LtFbAppleHComponentName, laOperStatusEntry=laOperStatusEntry, lpEnetLtFbTopTable=lpEnetLtFbTopTable, lpFiStatusReportPolicy=lpFiStatusReportPolicy, lpTrRingState=lpTrRingState, lpFiPhyLinkErrorMonitor=lpFiPhyLinkErrorMonitor, lpTrTestFrmSize=lpTrTestFrmSize, lpTrReceiveCongestions=lpTrReceiveCongestions, lpTrLtFbLlchRowStatusEntry=lpTrLtFbLlchRowStatusEntry, lpEnetLtFbLlchTopEntry=lpEnetLtFbLlchTopEntry, lpTrLtFbAppleHStorageType=lpTrLtFbAppleHStorageType, lpTrTestRowStatus=lpTrTestRowStatus, lpIlsFwdrTestComponentName=lpIlsFwdrTestComponentName, lpEth100LtFrmCpyRowStatusTable=lpEth100LtFrmCpyRowStatusTable, lpEth100AdminInfoEntry=lpEth100AdminInfoEntry, lpEnetLtRowStatusTable=lpEnetLtRowStatusTable, lpFiLtFbTxInfoStorageType=lpFiLtFbTxInfoStorageType, lpFiLtFbTxInfo=lpFiLtFbTxInfo, lpIlsFwdrLtFbIpxHStorageType=lpIlsFwdrLtFbIpxHStorageType, lpTrLtFbMacTrComponentName=lpTrLtFbMacTrComponentName, lpIlsFwdrLtFrmCpyTopTable=lpIlsFwdrLtFrmCpyTopTable, lpFiPhyProvEntry=lpFiPhyProvEntry, lpEnetMultipleCollisionFrames=lpEnetMultipleCollisionFrames, lpEth100OperStatusTable=lpEth100OperStatusTable, lpTrLtFbFddiMacStorageType=lpTrLtFbFddiMacStorageType, lpFiLtFrmCmpComponentName=lpFiLtFrmCmpComponentName, lpIlsFwdrLtFbMacEnetRowStatusTable=lpIlsFwdrLtFbMacEnetRowStatusTable)
