#
# PySNMP MIB module OKIDATA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OKIDATA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:32:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, Counter64, Gauge32, NotificationType, Unsigned32, MibIdentifier, IpAddress, Counter32, ObjectIdentity, NotificationType, iso, Bits, ModuleIdentity, Integer32, mib_2, MibScalar, MibTable, MibTableRow, MibTableColumn, private, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Counter64", "Gauge32", "NotificationType", "Unsigned32", "MibIdentifier", "IpAddress", "Counter32", "ObjectIdentity", "NotificationType", "iso", "Bits", "ModuleIdentity", "Integer32", "mib-2", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "private", "TimeTicks")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
okidata = MibIdentifier((1, 3, 6, 1, 4, 1, 2001))
peripheral = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1))
printer = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1))
printserver = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2))
nip = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1))
inkjet = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 2))
fax = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 3))
mfp = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 4))
sidm = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 5))
niptype1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1))
niptype2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 2))
cfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1))
stat = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 2))
cfg2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11))
usage = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100))
cfg2General = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1))
cfg2JobControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 2))
cfg2PaperHandling = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3))
cfg2PrintProcessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4))
cfg2HostInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 5))
cfg2LocalResources = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 6))
cfg2Emulation = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 7))
cfg2Test = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 8))
cfg2Menu = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 9))
usagePrinterUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 1))
usageTray = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 2))
usageToner = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 3))
usageDrum = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 4))
usageBelt = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 5))
usageFuser = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 6))
usageOil = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 7))
usageWasteToner = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 8))
psVendor = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 100))
okips = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683))
general = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1))
commands = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 2))
okipsSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3))
okipsSNMPCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 2))
okipsSNMPTrapMasks = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 6))
driver = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 4))
tokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 5))
printServers = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6))
psGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 1))
psOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2))
psProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3))
genProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 15))
outputCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 2))
outputConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3))
outputJobLog = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 6))
trCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 5, 2))
trConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 5, 3))
tcpip = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1))
netware = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2))
vines = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3))
lanManager = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 4))
eTalk = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5))
tcpipCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 3))
tcpipConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4))
tcpipStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 5))
nwCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 3))
nwConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4))
nwStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 5))
bvCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 3))
bvConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 4))
bvStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5))
eTalkCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 3))
eTalkConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4))
eTalkStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 5))
cfgPersonality = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPersonality.setStatus('optional')
if mibBuilder.loadTexts: cfgPersonality.setDescription('Printer language that is interpreted according to default setting.')
cfgManualFeed = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgManualFeed.setStatus('optional')
if mibBuilder.loadTexts: cfgManualFeed.setDescription('Manual Feed Valid/Invalid')
cfgOkiPaperFeed = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiPaperFeed.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiPaperFeed.setDescription('Paper Tray')
cfgOkiAutoTraySwitch = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiAutoTraySwitch.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiAutoTraySwitch.setDescription('Auto Tray Switch Valid/Invalid')
cfgOkiPriorityTray = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiPriorityTray.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiPriorityTray.setDescription('Priority Tray Valid/Invalid')
cfgPaper = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPaper.setStatus('optional')
if mibBuilder.loadTexts: cfgPaper.setDescription('Edit size')
cfgOkiCustomPaperWidth = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 61), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiCustomPaperWidth.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiCustomPaperWidth.setDescription('Custom Paper Width(Only Japan)')
cfgOkiCustomPaperLength = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiCustomPaperLength.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiCustomPaperLength.setDescription('Custom Paper Length(Only Japan)')
cfgInTray2Size = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgInTray2Size.setStatus('optional')
if mibBuilder.loadTexts: cfgInTray2Size.setDescription('Size of media in Upper Tray.(This has no meaning to the printer with the paper size auto-detecting function.)')
cfgInTray3Size = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgInTray3Size.setStatus('optional')
if mibBuilder.loadTexts: cfgInTray3Size.setDescription('Size of media in Lower Tray.(This has no meaning to the printer with the paper size auto-detecting function.)')
cfgInTray5Size = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgInTray5Size.setStatus('optional')
if mibBuilder.loadTexts: cfgInTray5Size.setDescription('Size of media in Tray3.(This has no meaning to the printer with the paper size auto-detecting function.)')
cfgInTray1Size = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 100), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgInTray1Size.setStatus('optional')
if mibBuilder.loadTexts: cfgInTray1Size.setDescription('Size of media loeded in Front Tray/Manual Feeder.')
cfgInTray4Size = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 110), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgInTray4Size.setStatus('optional')
if mibBuilder.loadTexts: cfgInTray4Size.setDescription('Size of paper inserted in the multi-purpose Feeder.')
cfgOkiMediaInTray2 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 120), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiMediaInTray2.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiMediaInTray2.setDescription('Types(Weight) of media loeded in Upper Tray.')
cfgOkiMediaInTray3 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 130), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiMediaInTray3.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiMediaInTray3.setDescription('Types(Weight) of media loaded in Lower Tray.')
cfgOkiMediaInTray5 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 140), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiMediaInTray5.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiMediaInTray5.setDescription('Types(Weight) of media loaded in Tray3.')
cfgOkiMediaInTray1 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 150), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiMediaInTray1.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiMediaInTray1.setDescription('Types(Weight) of media loaded in Front Tray/Manual Feeder')
cfgOkiMediaInTray4 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 160), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiMediaInTray4.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiMediaInTray4.setDescription('Types(Weight) of media loaded in Multi-purpose Feeder')
cfgOkiPaperSizeCheck = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 170), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiPaperSizeCheck.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiPaperSizeCheck.setDescription('Paper Length Check valid/invalid')
cfgMptray = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 180), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgMptray.setStatus('optional')
if mibBuilder.loadTexts: cfgMptray.setDescription('Returns the configuration value of the front tray')
cfgIntray1 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 190), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgIntray1.setStatus('optional')
if mibBuilder.loadTexts: cfgIntray1.setDescription('Returns the auto-selection lock status for the front tray (MP tray)')
cfgIntray2 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 200), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgIntray2.setStatus('optional')
if mibBuilder.loadTexts: cfgIntray2.setDescription('Returns the auto-selection lock status for the standard cassette')
cfgIntray3 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 210), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgIntray3.setStatus('optional')
if mibBuilder.loadTexts: cfgIntray3.setDescription('Returns the auto-selection lock status for the optional cassette')
cfgCopies = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 220), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgCopies.setStatus('optional')
if mibBuilder.loadTexts: cfgCopies.setDescription('Number of Copies(1-999)')
cfgDuplex = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 230), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgDuplex.setStatus('optional')
if mibBuilder.loadTexts: cfgDuplex.setDescription('Duplex valid/invalid')
cfgBinding = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 240), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgBinding.setStatus('optional')
if mibBuilder.loadTexts: cfgBinding.setDescription('Binding Direction')
cfgPclFontSource = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 250), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPclFontSource.setStatus('optional')
if mibBuilder.loadTexts: cfgPclFontSource.setDescription('Font Source')
cfgPclFontNumber = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 260), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPclFontNumber.setStatus('optional')
if mibBuilder.loadTexts: cfgPclFontNumber.setDescription('Font Number')
cfgPclPitch = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 270), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPclPitch.setStatus('optional')
if mibBuilder.loadTexts: cfgPclPitch.setDescription('Font Pitch (CPI)')
cfgPclPtSize = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 280), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPclPtSize.setStatus('optional')
if mibBuilder.loadTexts: cfgPclPtSize.setDescription('Font Height (Point)')
cfgPclSymSet = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 290), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPclSymSet.setStatus('optional')
if mibBuilder.loadTexts: cfgPclSymSet.setDescription('Symbol Set')
cfgPclOkiA4PrintWidth = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 300), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPclOkiA4PrintWidth.setStatus('optional')
if mibBuilder.loadTexts: cfgPclOkiA4PrintWidth.setDescription('How many columns are printed in A4 width (78 or 80 columns)')
cfgPclOkiWhitePageSkip = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 310), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPclOkiWhitePageSkip.setStatus('optional')
if mibBuilder.loadTexts: cfgPclOkiWhitePageSkip.setDescription('Blank page print skip (OFF means No skip)')
cfgPclOkiCrFunction = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 320), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPclOkiCrFunction.setStatus('optional')
if mibBuilder.loadTexts: cfgPclOkiCrFunction.setDescription('Function when CR is received CR:CR only , CRLF:CR+LF')
cfgPclOkiLfFunction = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 330), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPclOkiLfFunction.setStatus('optional')
if mibBuilder.loadTexts: cfgPclOkiLfFunction.setDescription('Function when LF is received LF:LF only , LFCR:LF+CR')
cfgIbmpprCharacterPitch = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 340), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprCharacterPitch.setStatus('optional')
if mibBuilder.loadTexts: cfgIbmpprCharacterPitch.setDescription('Character Pitch (CPI)')
cfgIbmpprFontCondense = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 350), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprFontCondense.setStatus('optional')
if mibBuilder.loadTexts: cfgIbmpprFontCondense.setDescription('12CPI Pitch in Condense: 20:12cpi to 20cpi 12:12cpi to 12cpi')
cfgIbmpprCharacterSet = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 360), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprCharacterSet.setStatus('optional')
if mibBuilder.loadTexts: cfgIbmpprCharacterSet.setDescription('Character Set')
cfgIbmpprSymbolSet = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 370), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprSymbolSet.setStatus('optional')
if mibBuilder.loadTexts: cfgIbmpprSymbolSet.setDescription('Symbol Set(Code Page)')
cfgIbmpprLetterOStyle = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 380), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprLetterOStyle.setStatus('optional')
if mibBuilder.loadTexts: cfgIbmpprLetterOStyle.setDescription('O(Ou style) DISABLE : ENABLE :O with slash')
cfgIbmpprLinePitch = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 390), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprLinePitch.setStatus('optional')
if mibBuilder.loadTexts: cfgIbmpprLinePitch.setDescription('Line per Inch (LPI)')
cfgIbmpprWhitePageSkip = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 400), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprWhitePageSkip.setStatus('optional')
if mibBuilder.loadTexts: cfgIbmpprWhitePageSkip.setDescription('Blank page print skip (OFF means No skip)')
cfgIbmpprCrFunction = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 410), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprCrFunction.setStatus('optional')
if mibBuilder.loadTexts: cfgIbmpprCrFunction.setDescription('Function upon receiving CR(Cursor CR) CR:CR only , CRLF:CR+LF')
cfgIbmpprLfFunction = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 420), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprLfFunction.setStatus('optional')
if mibBuilder.loadTexts: cfgIbmpprLfFunction.setDescription('Function upon receiving LF(Cursor LF) LF:LF only , LFCR:LF+CR')
cfgIbmpprLineLength = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 430), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprLineLength.setStatus('optional')
if mibBuilder.loadTexts: cfgIbmpprLineLength.setDescription('Number of characters in a line(columns)')
cfgIbmpprFormLength = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 440), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprFormLength.setStatus('optional')
if mibBuilder.loadTexts: cfgIbmpprFormLength.setDescription('Paper length (Inches) 11:Letter , 11.7:A4 , 12:12inches')
cfgIbmpprTofPosition = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 450), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprTofPosition.setStatus('optional')
if mibBuilder.loadTexts: cfgIbmpprTofPosition.setDescription('Print start position from top edge of paper(0-1.0)')
cfgIbmpprLeftMargine = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 460), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgIbmpprLeftMargine.setStatus('optional')
if mibBuilder.loadTexts: cfgIbmpprLeftMargine.setDescription('Left margin(0-1.0)')
cfgEpsonfxCharacterPitch = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 470), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxCharacterPitch.setStatus('optional')
if mibBuilder.loadTexts: cfgEpsonfxCharacterPitch.setDescription('Character Pitch (CPI)')
cfgEpsonfxCharacterSet = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 480), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxCharacterSet.setStatus('optional')
if mibBuilder.loadTexts: cfgEpsonfxCharacterSet.setDescription('Character Set')
cfgEpsonfxSymbolSet = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 490), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxSymbolSet.setStatus('optional')
if mibBuilder.loadTexts: cfgEpsonfxSymbolSet.setDescription('Symbol Set(Code Page)')
cfgEpsonfxLetterOStyle = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 500), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxLetterOStyle.setStatus('optional')
if mibBuilder.loadTexts: cfgEpsonfxLetterOStyle.setDescription('0(Ou style) DISABLE : ENABLE :O with slash')
cfgEpsonfxLinePitch = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 510), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxLinePitch.setStatus('optional')
if mibBuilder.loadTexts: cfgEpsonfxLinePitch.setDescription('Line per Inch (LPI)')
cfgEpsonfxWhitePageSkip = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 520), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxWhitePageSkip.setStatus('optional')
if mibBuilder.loadTexts: cfgEpsonfxWhitePageSkip.setDescription('Blank page print skip (OFF means No skip)')
cfgEpsonfxCrFunction = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 530), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxCrFunction.setStatus('optional')
if mibBuilder.loadTexts: cfgEpsonfxCrFunction.setDescription('Function upon receiving CR(Cursor CR) CR:CR only , CRLF:CR+LF')
cfgEpsonfxLineLength = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 540), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxLineLength.setStatus('optional')
if mibBuilder.loadTexts: cfgEpsonfxLineLength.setDescription('Number of characters in a line(columns)')
cfgEpsonfxFormLength = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 550), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxFormLength.setStatus('optional')
if mibBuilder.loadTexts: cfgEpsonfxFormLength.setDescription('Paper length (Inches) 11:Letter , 11.7:A4 , 12:12inches')
cfgEpsonfxTofPosition = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 560), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxTofPosition.setStatus('optional')
if mibBuilder.loadTexts: cfgEpsonfxTofPosition.setDescription('Print start position from top edge of paper (0-1.0)')
cfgEpsonfxLeftMargine = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 570), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEpsonfxLeftMargine.setStatus('optional')
if mibBuilder.loadTexts: cfgEpsonfxLeftMargine.setDescription('Left margin(0-1.0)')
cfgHiperwOkiDensity = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 580), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgHiperwOkiDensity.setStatus('optional')
if mibBuilder.loadTexts: cfgHiperwOkiDensity.setDescription('Hiper-W Data Resolution')
cfgHiperwOkiFirstbit = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 590), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgHiperwOkiFirstbit.setStatus('optional')
if mibBuilder.loadTexts: cfgHiperwOkiFirstbit.setDescription('Data bit order')
cfgHiperwOkiReverse = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 600), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgHiperwOkiReverse.setStatus('optional')
if mibBuilder.loadTexts: cfgHiperwOkiReverse.setDescription('Posi/Nega Print')
cfgHiperwPrintSpeed = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 610), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgHiperwPrintSpeed.setStatus('optional')
if mibBuilder.loadTexts: cfgHiperwPrintSpeed.setDescription('Engine Print Speed')
cfgEscpKanjiFont = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 611), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEscpKanjiFont.setStatus('optional')
if mibBuilder.loadTexts: cfgEscpKanjiFont.setDescription('Kanji Font(Only Japan)')
cfgEscpAnkFont = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 612), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEscpAnkFont.setStatus('optional')
if mibBuilder.loadTexts: cfgEscpAnkFont.setDescription('Ank Font(Only Japan)')
cfgEscpCharacterSet = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 613), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEscpCharacterSet.setStatus('optional')
if mibBuilder.loadTexts: cfgEscpCharacterSet.setDescription('Character Set(Only Japan)')
cfgEscpZeroCharacter = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 614), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEscpZeroCharacter.setStatus('optional')
if mibBuilder.loadTexts: cfgEscpZeroCharacter.setDescription('O Character(Only Japan)')
cfgEscpZoom = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 615), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEscpZoom.setStatus('optional')
if mibBuilder.loadTexts: cfgEscpZoom.setDescription('Zoom(Only Japan)')
cfgEscpTofPosition = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 616), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEscpTofPosition.setStatus('optional')
if mibBuilder.loadTexts: cfgEscpTofPosition.setDescription('Tof Position(Only Japan)')
cfgEscpLineLength = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 617), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEscpLineLength.setStatus('optional')
if mibBuilder.loadTexts: cfgEscpLineLength.setDescription('Line Length(Only Japan)')
cfgEscpCrFunction = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 618), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEscpCrFunction.setStatus('optional')
if mibBuilder.loadTexts: cfgEscpCrFunction.setDescription('Cr Function(Only Japan)')
cfgEscpAutoLf = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 619), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEscpAutoLf.setStatus('optional')
if mibBuilder.loadTexts: cfgEscpAutoLf.setDescription('Auto Lf(Only Japan)')
cfgOrientation = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 620), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOrientation.setStatus('optional')
if mibBuilder.loadTexts: cfgOrientation.setDescription('Orientation')
cfgFormLines = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 630), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgFormLines.setStatus('optional')
if mibBuilder.loadTexts: cfgFormLines.setDescription('Lines per page')
cfgParallel = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 640), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgParallel.setStatus('optional')
if mibBuilder.loadTexts: cfgParallel.setDescription('Parallel Interface valid/invalid')
cfgRs232c = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 650), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs232c.setStatus('optional')
if mibBuilder.loadTexts: cfgRs232c.setDescription('RS232C valid/invalid')
cfgRs422 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 660), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs422.setStatus('optional')
if mibBuilder.loadTexts: cfgRs422.setDescription('RS422 valid/invalid')
cfgLocalTalk = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 670), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgLocalTalk.setStatus('optional')
if mibBuilder.loadTexts: cfgLocalTalk.setDescription('LocalTalk valid/invalid')
cfgNetwork = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 680), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgNetwork.setStatus('optional')
if mibBuilder.loadTexts: cfgNetwork.setDescription('Network(OKIHSP) valid/invalid')
cfgUsb = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 690), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgUsb.setStatus('optional')
if mibBuilder.loadTexts: cfgUsb.setDescription('USB valid/invalid')
cfgResolution = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2000), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgResolution.setStatus('optional')
if mibBuilder.loadTexts: cfgResolution.setDescription('Print resolution')
cfgRet = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2010), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRet.setStatus('optional')
if mibBuilder.loadTexts: cfgRet.setDescription('Smoothing(Oki Smoothing Technology)')
cfgOkiRasterBuffer = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2020), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiRasterBuffer.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiRasterBuffer.setDescription('Raster Buffer size')
cfgPageProtect = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2030), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgPageProtect.setStatus('optional')
if mibBuilder.loadTexts: cfgPageProtect.setDescription('Page Protection')
cfgPrintProtect = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2035), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPrintProtect.setStatus('optional')
if mibBuilder.loadTexts: cfgPrintProtect.setDescription('Print Protection')
cfgOkiReceiveBuffer = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2040), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgOkiReceiveBuffer.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiReceiveBuffer.setDescription('Receive Buffer size (KB)')
cfgOkiFontProtection = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2050), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgOkiFontProtection.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiFontProtection.setDescription('Font cache size n*100KB')
cfgOkiResourceSave = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2060), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgOkiResourceSave.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiResourceSave.setDescription('Resource save size n*100KB')
cfgAutoCont = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2070), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAutoCont.setStatus('optional')
if mibBuilder.loadTexts: cfgAutoCont.setDescription('Auto continuation at error occurrence')
cfgOkiAutoEject = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2080), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiAutoEject.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiAutoEject.setDescription('Paper eject at receive time-out(Sec)')
cfgManualTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2090), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgManualTimeOut.setStatus('optional')
if mibBuilder.loadTexts: cfgManualTimeOut.setDescription('Manual Insert timeout 0:infinit,30:30sec,60:1min')
cfgDensity = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2100), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgDensity.setStatus('optional')
if mibBuilder.loadTexts: cfgDensity.setDescription('Print darkness for mono printer')
cfgOkiYellowDarkness = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiYellowDarkness.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiYellowDarkness.setDescription('Yellow print darkness for color printer')
cfgOkiMagentaDarkness = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiMagentaDarkness.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiMagentaDarkness.setDescription('Magenta print darkness for color printer')
cfgOkiCyanDarkness = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2103), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiCyanDarkness.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiCyanDarkness.setDescription('Cyan print darkness for color printer')
cfgOkiBlackDarkness = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2104), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiBlackDarkness.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiBlackDarkness.setDescription('Black print darkness for color printer')
cfgOkiPowerSaving = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2110), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiPowerSaving.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiPowerSaving.setDescription('Time for shifting to Power Save Mode 0:0Sec , 8:8Min')
cfgOkiQuietMode = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2115), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiQuietMode.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiQuietMode.setDescription('Quiet Mode ON:Default')
cfgLowToner = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2120), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgLowToner.setStatus('optional')
if mibBuilder.loadTexts: cfgLowToner.setDescription('Off:shift to On-line in Toner Low state On:remaining On-line')
cfgEconoMode = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2130), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgEconoMode.setStatus('optional')
if mibBuilder.loadTexts: cfgEconoMode.setDescription('Toner saving')
cfgClearableWarnings = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2140), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgClearableWarnings.setStatus('optional')
if mibBuilder.loadTexts: cfgClearableWarnings.setDescription('Handling of clearable warning JOB:Clearing by jobs')
cfgOkiPrintErrors = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2150), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiPrintErrors.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiPrintErrors.setDescription('Outputing report at error occurrence.')
cfgParallelSpeed = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2160), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgParallelSpeed.setStatus('optional')
if mibBuilder.loadTexts: cfgParallelSpeed.setDescription('Parallel I/F receiving speed')
cfgBiDirection = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2170), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgBiDirection.setStatus('optional')
if mibBuilder.loadTexts: cfgBiDirection.setDescription('Bi-directional parallel')
cfgOkiIPrime = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2180), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiIPrime.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiIPrime.setDescription('I-Prime valid/invalid On:valid')
cfgLang = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2190), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgLang.setStatus('optional')
if mibBuilder.loadTexts: cfgLang.setDescription('Local message language')
cfgOkiJobSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2195), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiJobSwitch.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiJobSwitch.setDescription('Job Switch Timing')
cfgRs232cBaud = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2200), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs232cBaud.setStatus('optional')
if mibBuilder.loadTexts: cfgRs232cBaud.setDescription('RS232C Baud Rate')
cfgRs232cDataBits = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2210), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs232cDataBits.setStatus('optional')
if mibBuilder.loadTexts: cfgRs232cDataBits.setDescription('RS232C Data Bit length')
cfgRs232cStopBits = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2215), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs232cStopBits.setStatus('optional')
if mibBuilder.loadTexts: cfgRs232cStopBits.setDescription('RS232C Stop Bits')
cfgRs232cParity = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2220), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs232cParity.setStatus('optional')
if mibBuilder.loadTexts: cfgRs232cParity.setDescription('RS232C Parity')
cfgRs232cBusyTime = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2230), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs232cBusyTime.setStatus('optional')
if mibBuilder.loadTexts: cfgRs232cBusyTime.setDescription('RS232C Minimum Busy time')
cfgRs232cFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2240), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs232cFlowControl.setStatus('optional')
if mibBuilder.loadTexts: cfgRs232cFlowControl.setDescription('RS232C Flow Control')
cfgRs422Baud = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2300), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs422Baud.setStatus('optional')
if mibBuilder.loadTexts: cfgRs422Baud.setDescription('RS422 Baud Rate')
cfgRs422DataBits = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2310), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs422DataBits.setStatus('optional')
if mibBuilder.loadTexts: cfgRs422DataBits.setDescription('RS422 Data Bit length')
cfgRs422StopBits = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2320), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs422StopBits.setStatus('optional')
if mibBuilder.loadTexts: cfgRs422StopBits.setDescription('RS422 stop bits')
cfgRs422Parity = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 2330), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRs422Parity.setStatus('optional')
if mibBuilder.loadTexts: cfgRs422Parity.setDescription('RS422 Parity')
cfgOkiUser = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3000), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiUser.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiUser.setDescription(' User')
cfgOkiEcp = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3005), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiEcp.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiEcp.setDescription('ECP mode Setting(User Maintenance)')
cfgOkiXAdjust = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3010), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiXAdjust.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiXAdjust.setDescription('X Adjust Value(User Maintenance)')
cfgOkiYAdjust = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3020), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiYAdjust.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiYAdjust.setDescription('Y Adjust Value(User Maintenance)')
cfgOkiDuplexAdjust = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3022), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiDuplexAdjust.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiDuplexAdjust.setDescription('Duplex Position Adjust Value')
cfgOkiMediaSourceTray2 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3024), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiMediaSourceTray2.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiMediaSourceTray2.setDescription('Feeding destination of 2nd tray in PCL5 Emulation (User Maintenance)')
cfgOkiMediaSourceTray3 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3025), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiMediaSourceTray3.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiMediaSourceTray3.setDescription('Feeding destination of 3rd tray in PCL5 Emulation (User Maintenance)')
cfgOkiMediaSourceFront = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3026), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiMediaSourceFront.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiMediaSourceFront.setDescription('Feeding destination of Front tray in PCL5 Emulation (User Maintenance)')
cfgPlacePage = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3028), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgPlacePage.setStatus('optional')
if mibBuilder.loadTexts: cfgPlacePage.setDescription('The mechanical sheet setting position(User Maintenance)')
cfgOkiColorAdjustPrint = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3041), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgOkiColorAdjustPrint.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiColorAdjustPrint.setDescription('Print position Adjustment for color printer')
cfgOkiColorAdjustYellow = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3042), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgOkiColorAdjustYellow.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiColorAdjustYellow.setDescription('Yellow print position Adjustment for color printer Value: Left, Center, Right ; Range: -7 to 7')
cfgOkiColorAdjustMagenta = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3043), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgOkiColorAdjustMagenta.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiColorAdjustMagenta.setDescription('Magenta print position Adjustment for color printer Value: Left, Center, Right ; Range: -7 to 7')
cfgOkiColorAdjustCyan = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3044), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfgOkiColorAdjustCyan.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiColorAdjustCyan.setDescription('Cyan print position Adjustment for color printer Value: Left, Center, Right ; Range: -7 to 7')
cfgOkiJamRecovery = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3142), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgOkiJamRecovery.setStatus('optional')
if mibBuilder.loadTexts: cfgOkiJamRecovery.setDescription('Jam Recovery Mode(User Maintenance)')
cfgFirmCpuVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3160), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgFirmCpuVersion.setStatus('optional')
if mibBuilder.loadTexts: cfgFirmCpuVersion.setDescription('Firmware Version ex. FW = 01.00 A00 C745 (F/W ver . User . CPU ver)')
cfgEngineFirmVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3170), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgEngineFirmVersion.setStatus('optional')
if mibBuilder.loadTexts: cfgEngineFirmVersion.setDescription('Engine Version ex. ENG = 01.00')
cfgMessageVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3180), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgMessageVersion.setStatus('optional')
if mibBuilder.loadTexts: cfgMessageVersion.setDescription('Local Message Version ex. MSG = L01.00,P01.20')
cfgPclFirmVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3190), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgPclFirmVersion.setStatus('optional')
if mibBuilder.loadTexts: cfgPclFirmVersion.setDescription('PCL5e Version')
cfgPclxlFirmVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3200), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgPclxlFirmVersion.setStatus('optional')
if mibBuilder.loadTexts: cfgPclxlFirmVersion.setDescription('PCL-XL Version')
cfgSidmFirmVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3210), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgSidmFirmVersion.setStatus('optional')
if mibBuilder.loadTexts: cfgSidmFirmVersion.setDescription('SIDM Version')
cfgHdFirmVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3220), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgHdFirmVersion.setStatus('optional')
if mibBuilder.loadTexts: cfgHdFirmVersion.setDescription('Hex dump Version')
cfgPsFirmVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3230), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgPsFirmVersion.setStatus('optional')
if mibBuilder.loadTexts: cfgPsFirmVersion.setDescription('PostScript Version')
cfgEmulationTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3500), )
if mibBuilder.loadTexts: cfgEmulationTable.setStatus('optional')
if mibBuilder.loadTexts: cfgEmulationTable.setDescription('Installed emulation name table')
cfgEmulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3500, 1), ).setIndexNames((0, "OKIDATA-MIB", "cfgEmulationIndex"))
if mibBuilder.loadTexts: cfgEmulationEntry.setStatus('optional')
if mibBuilder.loadTexts: cfgEmulationEntry.setDescription('Installed emulation name entry')
cfgEmulationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3500, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgEmulationIndex.setStatus('optional')
if mibBuilder.loadTexts: cfgEmulationIndex.setDescription('Installed emulation name index')
cfgEmulationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3500, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgEmulationName.setStatus('optional')
if mibBuilder.loadTexts: cfgEmulationName.setDescription('Installed emulation name')
cfgRamInstalledSize = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3510), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRamInstalledSize.setStatus('optional')
if mibBuilder.loadTexts: cfgRamInstalledSize.setDescription('Installed RAM size')
cfgTrayTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3520), )
if mibBuilder.loadTexts: cfgTrayTable.setStatus('optional')
if mibBuilder.loadTexts: cfgTrayTable.setDescription('Installed tray name table')
cfgTrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3520, 1), )
if mibBuilder.loadTexts: cfgTrayEntry.setStatus('optional')
if mibBuilder.loadTexts: cfgTrayEntry.setDescription('Installed tray name entry')
cfgTrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3520, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgTrayIndex.setStatus('optional')
if mibBuilder.loadTexts: cfgTrayIndex.setDescription('Installed tray name index')
cfgTrayName = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3520, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgTrayName.setStatus('optional')
if mibBuilder.loadTexts: cfgTrayName.setDescription('Installed tray name')
cfgPrinterName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 1, 3530), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgPrinterName.setStatus('optional')
if mibBuilder.loadTexts: cfgPrinterName.setDescription('Printer model name')
stPjlStatus = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stPjlStatus.setStatus('optional')
if mibBuilder.loadTexts: stPjlStatus.setDescription('PJL Status Code (Refer to the System Spec PJL Version for codes.)')
stLcdMessage = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 2, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stLcdMessage.setStatus('optional')
if mibBuilder.loadTexts: stLcdMessage.setDescription('Character strings displayed on LCD. An extension of Roman-8 applies to Symbol Set.')
stOnline = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 2, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stOnline.setStatus('optional')
if mibBuilder.loadTexts: stOnline.setDescription("Host Interface's on-line state TRUE:ON-LINE , FALSE:OFF-LINE")
stManualLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 2, 100), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stManualLedStatus.setStatus('optional')
if mibBuilder.loadTexts: stManualLedStatus.setDescription('MANUAL LED status on front panel.')
stOperatorLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 2, 110), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stOperatorLedStatus.setStatus('optional')
if mibBuilder.loadTexts: stOperatorLedStatus.setDescription('OPERATOR LED status on front panel.')
stServiceLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 2, 120), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stServiceLedStatus.setStatus('optional')
if mibBuilder.loadTexts: stServiceLedStatus.setDescription('SERVICE LED status on front panel.')
stOnlineLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 2, 130), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stOnlineLedStatus.setStatus('optional')
if mibBuilder.loadTexts: stOnlineLedStatus.setDescription('ON-LINE LED status on front panel.)')
stPsStatus = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 2, 140), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stPsStatus.setStatus('optional')
if mibBuilder.loadTexts: stPsStatus.setDescription('PS message same as when the printer receives ^T(CTR-T)')
cfg2PrinterInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10))
cfg2PrinterConsumption = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 20))
cfg2JamRecovery = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 70))
cfg2JamRecoveryCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 70, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2JamRecoveryCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2JamRecoveryCurrentValue.setDescription('Jam recovery setting')
cfg2OPPanelLock = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 130))
cfg2OPPanelLockCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 130, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2OPPanelLockCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2OPPanelLockCurrentValue.setDescription('Operation Panel setting')
cfg2Controlt = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 160))
cfg2ControltCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 160, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2ControltCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2ControltCurrentValue.setDescription('Control T setting')
cfg2Type1MIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2Type1MIBVersion.setStatus('optional')
if mibBuilder.loadTexts: cfg2Type1MIBVersion.setDescription('Type1 MIB Version')
cfg2ModelId = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2ModelId.setStatus('optional')
if mibBuilder.loadTexts: cfg2ModelId.setDescription('Printer Model ID')
cfg2PrinterVersions = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50))
cfg2PrinterVersion1Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 1))
cfg2PrinterVersion2Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 2))
cfg2PrinterVersion3Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 3))
cfg2PrinterVersion4Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 4))
cfg2PrinterVersion5Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 5))
cfg2PrinterVersion6Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 6))
cfg2PrinterVersion7Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 7))
cfg2PrinterVersion8Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 8))
cfg2PrinterVersion9Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 9))
cfg2PrinterVersion10Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 10))
cfg2PrinterVersion1 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterVersion1.setStatus('optional')
if mibBuilder.loadTexts: cfg2PrinterVersion1.setDescription('Printer Version1')
cfg2PrinterVersion2 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterVersion2.setStatus('optional')
if mibBuilder.loadTexts: cfg2PrinterVersion2.setDescription('Printer Version2')
cfg2PrinterVersion3 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterVersion3.setStatus('optional')
if mibBuilder.loadTexts: cfg2PrinterVersion3.setDescription('Printer Version3')
cfg2PrinterVersion4 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterVersion4.setStatus('optional')
if mibBuilder.loadTexts: cfg2PrinterVersion4.setDescription('Printer Version4')
cfg2PrinterVersion5 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterVersion5.setStatus('optional')
if mibBuilder.loadTexts: cfg2PrinterVersion5.setDescription('Printer Version5')
cfg2PrinterVersion6 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterVersion6.setStatus('optional')
if mibBuilder.loadTexts: cfg2PrinterVersion6.setDescription('Printer Version6')
cfg2PrinterVersion7 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterVersion7.setStatus('optional')
if mibBuilder.loadTexts: cfg2PrinterVersion7.setDescription('Printer Version7')
cfg2PrinterVersion8 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 8, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterVersion8.setStatus('optional')
if mibBuilder.loadTexts: cfg2PrinterVersion8.setDescription('Printer Version8')
cfg2PrinterVersion9 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 9, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterVersion9.setStatus('optional')
if mibBuilder.loadTexts: cfg2PrinterVersion9.setDescription('Printer Version9')
cfg2PrinterVersion10 = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 50, 10, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterVersion10.setStatus('optional')
if mibBuilder.loadTexts: cfg2PrinterVersion10.setDescription('Printer Version10')
cfg2PrinterType = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 10, 70), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2PrinterType.setStatus('optional')
if mibBuilder.loadTexts: cfg2PrinterType.setDescription('Printer Type')
cfg2PowerSave = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 20, 10))
cfg2PowerSaveCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 20, 10, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2PowerSaveCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2PowerSaveCurrentValue.setDescription('PowerSave setting')
cfg2PowerSaveShift = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 20, 11))
cfg2PowerSaveShiftCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 1, 20, 11, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2PowerSaveShiftCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2PowerSaveShiftCurrentValue.setDescription('PowerSave Shift setting')
cfg2PHCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 1))
cfg2PHInput = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2))
cfg2PHOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 3))
cfg2PHDuplex = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 4))
cfg2MonoPrintSpeed = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 1, 20))
cfg2MonoPrintSpeedCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 1, 20, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2MonoPrintSpeedCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2MonoPrintSpeedCurrentValue.setDescription('Mono Print Speed setting')
cfg2PriorityTray = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 30))
cfg2PriorityTrayCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 30, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2PriorityTrayCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2PriorityTrayCurrentValue.setDescription('Priority Tray setting')
cfg2TrayTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40))
cfg2Tray1Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 1))
cfg2Tray2Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 2))
cfg2Tray3Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 3))
cfg2Tray4Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 4))
cfg2Tray5Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 5))
cfg2Tray6Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 6))
cfg2Tray7Table = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 7))
cfg2Tray1PaperSize = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 1, 1))
cfg2Tray2PaperSize = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 2, 1))
cfg2Tray3PaperSize = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 3, 1))
cfg2Tray4PaperSize = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 4, 1))
cfg2Tray5PaperSize = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 5, 1))
cfg2Tray6PaperSize = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 6, 1))
cfg2Tray7PaperSize = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 7, 1))
cfg2Tray1PaperSizeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray1PaperSizeCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray1PaperSizeCurrentValue.setDescription('Tray1 Paper Size setting')
cfg2Tray2PaperSizeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray2PaperSizeCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray2PaperSizeCurrentValue.setDescription('Tray2 Paper Size setting')
cfg2Tray3PaperSizeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray3PaperSizeCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray3PaperSizeCurrentValue.setDescription('Tray3 Paper Size setting')
cfg2Tray4PaperSizeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray4PaperSizeCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray4PaperSizeCurrentValue.setDescription('Tray4 Paper Size setting')
cfg2Tray5PaperSizeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray5PaperSizeCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray5PaperSizeCurrentValue.setDescription('Tray5 Paper Size setting')
cfg2Tray6PaperSizeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray6PaperSizeCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray6PaperSizeCurrentValue.setDescription('Tray6 Paper Size setting')
cfg2Tray7PaperSizeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray7PaperSizeCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray7PaperSizeCurrentValue.setDescription('Tray7 Paper Size setting')
cfg2Tray1MediaType = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 1, 2))
cfg2Tray2MediaType = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 2, 2))
cfg2Tray3MediaType = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 3, 2))
cfg2Tray4MediaType = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 4, 2))
cfg2Tray5MediaType = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 5, 2))
cfg2Tray6MediaType = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 6, 2))
cfg2Tray7MediaType = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 7, 2))
cfg2Tray1MediaTypeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 1, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray1MediaTypeCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray1MediaTypeCurrentValue.setDescription('Tray1 Media Type setting')
cfg2Tray2MediaTypeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 2, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray2MediaTypeCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray2MediaTypeCurrentValue.setDescription('Tray2 Media Type setting')
cfg2Tray3MediaTypeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 3, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray3MediaTypeCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray3MediaTypeCurrentValue.setDescription('Tray3 Media Type setting')
cfg2Tray4MediaTypeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 4, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray4MediaTypeCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray4MediaTypeCurrentValue.setDescription('Tray4 Media Type setting')
cfg2Tray5MediaTypeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 5, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray5MediaTypeCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray5MediaTypeCurrentValue.setDescription('Tray5 Media Type setting')
cfg2Tray6MediaTypeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 6, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray6MediaTypeCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray6MediaTypeCurrentValue.setDescription('Tray6 Media Type setting')
cfg2Tray7MediaTypeCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 7, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray7MediaTypeCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray7MediaTypeCurrentValue.setDescription('Tray7 Media Type setting')
cfg2Tray1MediaWeight = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 1, 3))
cfg2Tray2MediaWeight = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 2, 3))
cfg2Tray3MediaWeight = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 3, 3))
cfg2Tray4MediaWeight = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 4, 3))
cfg2Tray5MediaWeight = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 5, 3))
cfg2Tray6MediaWeight = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 6, 3))
cfg2Tray7MediaWeight = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 7, 3))
cfg2Tray1MediaWeightCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 1, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray1MediaWeightCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray1MediaWeightCurrentValue.setDescription('Tray1 Media Weight setting')
cfg2Tray2MediaWeightCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 2, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray2MediaWeightCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray2MediaWeightCurrentValue.setDescription('Tray2 Media Weight setting')
cfg2Tray3MediaWeightCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 3, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray3MediaWeightCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray3MediaWeightCurrentValue.setDescription('Tray3 Media Weight setting')
cfg2Tray4MediaWeightCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 4, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray4MediaWeightCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray4MediaWeightCurrentValue.setDescription('Tray4 Media Weight setting')
cfg2Tray5MediaWeightCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 5, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray5MediaWeightCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray5MediaWeightCurrentValue.setDescription('Tray5 Media Weight setting')
cfg2Tray6MediaWeightCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 6, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray6MediaWeightCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray6MediaWeightCurrentValue.setDescription('Tray6 Media Weight setting')
cfg2Tray7MediaWeightCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 40, 7, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray7MediaWeightCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray7MediaWeightCurrentValue.setDescription('Tray7 Media Weight setting')
cfg2UnitOfMeasure = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 50))
cfg2UnitOfMeasureCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 50, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2UnitOfMeasureCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2UnitOfMeasureCurrentValue.setDescription('Unit of Measure setting')
cfg2XDimension = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 60))
cfg2XDimensionCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 60, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2XDimensionCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2XDimensionCurrentValue.setDescription('X Dimension setting')
cfg2YDimension = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 70))
cfg2YDimensionCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 70, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2YDimensionCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2YDimensionCurrentValue.setDescription('Y Dimension setting')
cfg2TrayA3Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90))
cfg2Tray1A3Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 1))
cfg2Tray2A3Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 2))
cfg2Tray3A3Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 3))
cfg2Tray4A3Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 4))
cfg2Tray5A3Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 5))
cfg2Tray6A3Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 6))
cfg2Tray7A3Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 7))
cfg2Tray1A3PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray1A3PaperCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray1A3PaperCurrentValue.setDescription('Tray1 A3 Paper setting')
cfg2Tray2A3PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray2A3PaperCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray2A3PaperCurrentValue.setDescription('Tray2 A3 Paper setting')
cfg2Tray3A3PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray3A3PaperCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray3A3PaperCurrentValue.setDescription('Tray3 A3 Paper setting')
cfg2Tray4A3PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray4A3PaperCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray4A3PaperCurrentValue.setDescription('Tray4 A3 Paper setting')
cfg2Tray5A3PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray5A3PaperCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray5A3PaperCurrentValue.setDescription('Tray5 A3 Paper setting')
cfg2Tray6A3PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray6A3PaperCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray6A3PaperCurrentValue.setDescription('Tray6 A3 Paper setting')
cfg2Tray7A3PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 90, 7, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray7A3PaperCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray7A3PaperCurrentValue.setDescription('Tray7 A3 Paper setting')
cfg2TrayLegal14Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100))
cfg2Tray1Legal14Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 1))
cfg2Tray2Legal14Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 2))
cfg2Tray3Legal14Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 3))
cfg2Tray4Legal14Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 4))
cfg2Tray5Legal14Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 5))
cfg2Tray6Legal14Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 6))
cfg2Tray7Legal14Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 7))
cfg2Tray1Legal14PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray1Legal14PaperCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray1Legal14PaperCurrentValue.setDescription('Tray1 Legal14 Paper setting')
cfg2Tray2Legal14PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray2Legal14PaperCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray2Legal14PaperCurrentValue.setDescription('Tray2 Legal14 Paper setting')
cfg2Tray3Legal14PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray3Legal14PaperCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray3Legal14PaperCurrentValue.setDescription('Tray3 Legal14 Paper setting')
cfg2Tray4Legal14PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray4Legal14PaperCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray4Legal14PaperCurrentValue.setDescription('Tray4 Legal14 Paper setting')
cfg2Tray5Legal14PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray5Legal14PaperCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray5Legal14PaperCurrentValue.setDescription('Tray5 Legal14 Paper setting')
cfg2Tray6Legal14PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray6Legal14PaperCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray6Legal14PaperCurrentValue.setDescription('Tray6 Legal14 Paper setting')
cfg2Tray7Legal14PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 100, 7, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray7Legal14PaperCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray7Legal14PaperCurrentValue.setDescription('Tray7 Legal14 Paper setting')
cfg2TrayA5A6Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110))
cfg2Tray1A5A6Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 1))
cfg2Tray2A5A6Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 2))
cfg2Tray3A5A6Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 3))
cfg2Tray4A5A6Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 4))
cfg2Tray5A5A6Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 5))
cfg2Tray6A5A6Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 6))
cfg2Tray7A5A6Paper = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 7))
cfg2Tray1A5A6PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray1A5A6PaperCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray1A5A6PaperCurrentValue.setDescription('Tray1 A5/A6 Paper setting')
cfg2Tray2A5A6PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray2A5A6PaperCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray2A5A6PaperCurrentValue.setDescription('Tray2 A5/A6 Paper setting')
cfg2Tray3A5A6PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray3A5A6PaperCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray3A5A6PaperCurrentValue.setDescription('Tray3 A5/A6 Paper setting')
cfg2Tray4A5A6PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray4A5A6PaperCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray4A5A6PaperCurrentValue.setDescription('Tray4 A5/A6 Paper setting')
cfg2Tray5A5A6PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray5A5A6PaperCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray5A5A6PaperCurrentValue.setDescription('Tray5 A5/A6 Paper setting')
cfg2Tray6A5A6PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray6A5A6PaperCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray6A5A6PaperCurrentValue.setDescription('Tray6 A5/A6 Paper setting')
cfg2Tray7A5A6PaperCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 2, 110, 7, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2Tray7A5A6PaperCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2Tray7A5A6PaperCurrentValue.setDescription('Tray7 A5/A6 Paper setting')
cfg2OutputBin = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 3, 10))
cfg2OutputBinCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 3, 10, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2OutputBinCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2OutputBinCurrentValue.setDescription('Output Bin setting')
cfg2Duplex = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 4, 10))
cfg2DuplexCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 4, 10, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2DuplexCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2DuplexCurrentValue.setDescription('Duplex setting')
cfg2Binding = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 4, 20))
cfg2BindingCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 3, 4, 20, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2BindingCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2BindingCurrentValue.setDescription('Binding setting')
cfg2PPCColor = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 1))
cfg2PPCDevelopmentControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 2))
cfg2PPCLEDHeadControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 3))
cfg2PPCFusingControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 4))
cfg2PPCPrintPositionControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 5))
cfg2PPCTonerControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 6))
cfg2PPCDrumControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 7))
cfg2AutoRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 1, 30))
cfg2AutoRegistrationCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 1, 30, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2AutoRegistrationCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2AutoRegistrationCurrentValue.setDescription('Auto Registration setting')
cfg2JobOffset = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 2, 20))
cfg2JobOffsetCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 4, 2, 20, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfg2JobOffsetCurrentValue.setStatus('optional')
if mibBuilder.loadTexts: cfg2JobOffsetCurrentValue.setDescription('Job Offset setting')
cfg2LRCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 6, 1))
cfg2LRMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 6, 2))
cfg2LRHdd = MibIdentifier((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 6, 3))
cfg2StoragePartitionTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 6, 1, 1), )
if mibBuilder.loadTexts: cfg2StoragePartitionTable.setStatus('optional')
if mibBuilder.loadTexts: cfg2StoragePartitionTable.setDescription('storage partition table')
cfg2StoragePartitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 6, 1, 1, 1), ).setIndexNames((0, "OKIDATA-MIB", "hrDeviceIndex"), (0, "OKIDATA-MIB", "hrPartitionIndex"))
if mibBuilder.loadTexts: cfg2StoragePartitionEntry.setStatus('optional')
if mibBuilder.loadTexts: cfg2StoragePartitionEntry.setDescription('storage partition entry')
cfg2StoragePartitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2StoragePartitionIndex.setStatus('optional')
if mibBuilder.loadTexts: cfg2StoragePartitionIndex.setDescription('storage partition index')
cfg2StoragePartitionFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 11, 6, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfg2StoragePartitionFree.setStatus('optional')
if mibBuilder.loadTexts: cfg2StoragePartitionFree.setDescription('storage partition free size')
usagePrinterUnitTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 1, 1), )
if mibBuilder.loadTexts: usagePrinterUnitTable.setStatus('optional')
if mibBuilder.loadTexts: usagePrinterUnitTable.setDescription('usage PrinterUnit table')
usagePrinterUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 1, 1, 1), ).setIndexNames((0, "OKIDATA-MIB", "usagePrinterUnitIndex"))
if mibBuilder.loadTexts: usagePrinterUnitEntry.setStatus('optional')
if mibBuilder.loadTexts: usagePrinterUnitEntry.setDescription('usage PrinterUnit entry')
usagePrinterUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usagePrinterUnitIndex.setStatus('optional')
if mibBuilder.loadTexts: usagePrinterUnitIndex.setDescription('usage PrinterUnit index')
usagePrinterUnitCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usagePrinterUnitCounter.setStatus('optional')
if mibBuilder.loadTexts: usagePrinterUnitCounter.setDescription('usage PrinterUnit Counter')
usagePrinterUnitCounterLife = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usagePrinterUnitCounterLife.setStatus('optional')
if mibBuilder.loadTexts: usagePrinterUnitCounterLife.setDescription('usage PrinterUnit Counter Life')
usageTrayTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 2, 1), )
if mibBuilder.loadTexts: usageTrayTable.setStatus('optional')
if mibBuilder.loadTexts: usageTrayTable.setDescription('usage Tray table')
usageTrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 2, 1, 1), ).setIndexNames((0, "OKIDATA-MIB", "usageTrayIndex"))
if mibBuilder.loadTexts: usageTrayEntry.setStatus('optional')
if mibBuilder.loadTexts: usageTrayEntry.setDescription('usage Tray entry')
usageTrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageTrayIndex.setStatus('optional')
if mibBuilder.loadTexts: usageTrayIndex.setDescription('usage Tray index')
usageTrayMaxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageTrayMaxLevel.setStatus('optional')
if mibBuilder.loadTexts: usageTrayMaxLevel.setDescription('usage Tray Max Level')
usageTrayCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageTrayCounter.setStatus('optional')
if mibBuilder.loadTexts: usageTrayCounter.setDescription('usage Tray Counter')
usageTonerTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 3, 1), )
if mibBuilder.loadTexts: usageTonerTable.setStatus('optional')
if mibBuilder.loadTexts: usageTonerTable.setDescription('usage Toner table')
usageTonerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 3, 1, 1), ).setIndexNames((0, "OKIDATA-MIB", "usageTonerIndex"))
if mibBuilder.loadTexts: usageTonerEntry.setStatus('optional')
if mibBuilder.loadTexts: usageTonerEntry.setDescription('usage Toner entry')
usageTonerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageTonerIndex.setStatus('optional')
if mibBuilder.loadTexts: usageTonerIndex.setDescription('usage Toner index')
usageTonerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageTonerDescription.setStatus('optional')
if mibBuilder.loadTexts: usageTonerDescription.setDescription('usage Toner Description')
usageTonerCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageTonerCurrentLevel.setStatus('optional')
if mibBuilder.loadTexts: usageTonerCurrentLevel.setDescription('usage Toner Current Level')
usageTonerMaxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageTonerMaxLevel.setStatus('optional')
if mibBuilder.loadTexts: usageTonerMaxLevel.setDescription('usage Toner Max Level')
usageTonerLevelUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageTonerLevelUnit.setStatus('optional')
if mibBuilder.loadTexts: usageTonerLevelUnit.setDescription('usage Toner Level Unit')
usageDrumTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 4, 1), )
if mibBuilder.loadTexts: usageDrumTable.setStatus('optional')
if mibBuilder.loadTexts: usageDrumTable.setDescription('usage Drum table')
usageDrumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 4, 1, 1), ).setIndexNames((0, "OKIDATA-MIB", "usageDrumIndex"))
if mibBuilder.loadTexts: usageDrumEntry.setStatus('optional')
if mibBuilder.loadTexts: usageDrumEntry.setDescription('usage Drum entry')
usageDrumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageDrumIndex.setStatus('optional')
if mibBuilder.loadTexts: usageDrumIndex.setDescription('usage Drum index')
usageDrumCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageDrumCurrentLevel.setStatus('optional')
if mibBuilder.loadTexts: usageDrumCurrentLevel.setDescription('usage Drum Current Level')
usageDrumMaxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageDrumMaxLevel.setStatus('optional')
if mibBuilder.loadTexts: usageDrumMaxLevel.setDescription('usage Drum Max Level')
usageBeltTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 5, 1), )
if mibBuilder.loadTexts: usageBeltTable.setStatus('optional')
if mibBuilder.loadTexts: usageBeltTable.setDescription('usage Belt table')
usageBeltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 5, 1, 1), ).setIndexNames((0, "OKIDATA-MIB", "usageBeltIndex"))
if mibBuilder.loadTexts: usageBeltEntry.setStatus('optional')
if mibBuilder.loadTexts: usageBeltEntry.setDescription('usage Belt entry')
usageBeltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageBeltIndex.setStatus('optional')
if mibBuilder.loadTexts: usageBeltIndex.setDescription('usage Belt index')
usageBeltCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageBeltCurrentLevel.setStatus('optional')
if mibBuilder.loadTexts: usageBeltCurrentLevel.setDescription('usage Belt Current Level')
usageBeltMaxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageBeltMaxLevel.setStatus('optional')
if mibBuilder.loadTexts: usageBeltMaxLevel.setDescription('usage Belt Max Level')
usageFuserTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 6, 1), )
if mibBuilder.loadTexts: usageFuserTable.setStatus('optional')
if mibBuilder.loadTexts: usageFuserTable.setDescription('usage Fuser table')
usageFuserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 6, 1, 1), ).setIndexNames((0, "OKIDATA-MIB", "usageFuserIndex"))
if mibBuilder.loadTexts: usageFuserEntry.setStatus('optional')
if mibBuilder.loadTexts: usageFuserEntry.setDescription('usage Fuser entry')
usageFuserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageFuserIndex.setStatus('optional')
if mibBuilder.loadTexts: usageFuserIndex.setDescription('usage Fuser index')
usageFuserCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageFuserCurrentLevel.setStatus('optional')
if mibBuilder.loadTexts: usageFuserCurrentLevel.setDescription('usage Fuser Current Level')
usageFuserMaxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 1, 1, 1, 100, 6, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageFuserMaxLevel.setStatus('optional')
if mibBuilder.loadTexts: usageFuserMaxLevel.setDescription('usage Fuser Max Level')
psVendorId = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 100, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psVendorId.setStatus('mandatory')
if mibBuilder.loadTexts: psVendorId.setDescription('The vendor ID branch.')
psMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 100, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psMibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: psMibVersion.setDescription('A textual description of the MIB Version.')
genGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupVersion.setStatus('mandatory')
if mibBuilder.loadTexts: genGroupVersion.setDescription('The version for the general group.')
genMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: genMIBVersion.setDescription('The version of the MIB.')
genProductName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genProductName.setStatus('mandatory')
if mibBuilder.loadTexts: genProductName.setDescription('A textual description of the device.')
genProductNumber = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genProductNumber.setStatus('mandatory')
if mibBuilder.loadTexts: genProductNumber.setDescription('The product number of the device.')
genSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: genSerialNumber.setDescription('The serial number of the device.')
genHWAddress = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: genHWAddress.setStatus('mandatory')
if mibBuilder.loadTexts: genHWAddress.setDescription("The device's hardware address.")
genCableType = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("tenbase2", 1), ("tenbaseT", 2), ("aui", 3), ("utp", 4), ("stp", 5), ("fiber100fx", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCableType.setStatus('mandatory')
if mibBuilder.loadTexts: genCableType.setDescription('Indicates the network cable type connected to the device.')
genDateCode = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genDateCode.setStatus('mandatory')
if mibBuilder.loadTexts: genDateCode.setDescription("The device's datecode.")
genVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genVersion.setStatus('mandatory')
if mibBuilder.loadTexts: genVersion.setDescription('A string indicating the version of the firmware.')
genConfigurationDirty = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genConfigurationDirty.setStatus('mandatory')
if mibBuilder.loadTexts: genConfigurationDirty.setDescription("A variable's value has been changed which will require that the device be reset or power cycled before it will take effect. Set cmdReset to take this action. A list of critical variables that will cause genConfigurationDirty to be set follows: snmpGetCommunityName, snmpSetCommunityName, trPriority, trEarlyTokenRelease, trPacketSize, trRouting, trLocallyAdminAddr, psJetAdminEnabled, outputType, outputHandshake, tcpipEnabled, tcpipIPAddress, tcpipDefaultGateway, tcpipSubnetMask, tcpipUsingNetProtocols, tcpipBootProtocolsEnabled, tcpipRawPortNumber, tcpipMLPTCPPort, tcpipMLPPort, nwEnabled, nwSetFrameFormat, nwMode, nwPrintServerName, nwPrintServerPassword, nwQueueScanTime, nwFileServerName, nwPortPrinterNumber, nwPortFontDownload, nwPortPCLQueue, nwPortPSQueue, nwPortFormsOn, nwPortNotification, bvEnabled, bvSetSequencedRouting, bvLoginName, bvLoginPassword, bvPrintServiceName, bvPrintServiceRouting, lmEnabled, eTalkEnabled")
genCompanyName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCompanyName.setStatus('mandatory')
if mibBuilder.loadTexts: genCompanyName.setDescription('A string indicating the manufacturer of the device.')
genCompanyLoc = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCompanyLoc.setStatus('mandatory')
if mibBuilder.loadTexts: genCompanyLoc.setDescription('A string indicating the location of the manufacturer of the device.')
genCompanyPhone = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCompanyPhone.setStatus('mandatory')
if mibBuilder.loadTexts: genCompanyPhone.setDescription('A string indicating the phone number of the manufacturer of the device.')
genCompanyTechSupport = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCompanyTechSupport.setStatus('mandatory')
if mibBuilder.loadTexts: genCompanyTechSupport.setDescription('A string indicating the technical support information for the device.')
genNumProtocols = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genNumProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: genNumProtocols.setDescription('The number of network protocols supported on the device.')
genProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 15, 2), )
if mibBuilder.loadTexts: genProtocolTable.setStatus('mandatory')
if mibBuilder.loadTexts: genProtocolTable.setDescription('A list of network protocols. The number of entries is given by the value of genNumProtocols.')
genProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 15, 2, 1), ).setIndexNames((0, "OKIDATA-MIB", "genProtocolIndex"))
if mibBuilder.loadTexts: genProtocolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genProtocolEntry.setDescription('A network protocol supported on the device.')
genProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genProtocolIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genProtocolIndex.setDescription("A unique value for each network protocol. Its value ranges between 1 and the value of genNumProtocols. The value for each protocol must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization.")
genProtocolDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 15, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genProtocolDescr.setStatus('mandatory')
if mibBuilder.loadTexts: genProtocolDescr.setDescription('A textual string describing the network protocol.')
genProtocolID = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("tcp-ip", 1), ("netware", 2), ("vines", 3), ("lanmanger", 4), ("ethertalk", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genProtocolID.setStatus('mandatory')
if mibBuilder.loadTexts: genProtocolID.setDescription('A unique identification number for the network protocol.')
genSysUpTimeString = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genSysUpTimeString.setStatus('mandatory')
if mibBuilder.loadTexts: genSysUpTimeString.setDescription('A string indicating the system up time for the device.')
cmdGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdGroupVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cmdGroupVersion.setDescription('The version for the commands group.')
cmdReset = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdReset.setStatus('optional')
if mibBuilder.loadTexts: cmdReset.setDescription('A value of 2 will reset the device. The following list of variables will also cause the device to reset itself. cmdRestoreDefaults, snmpRestoreDefaults, trRestoreDefaults, outputRestoreDefaults, tcpipRestoreDefaults, tcpipFirmwareUpgrade, nwRestoreDefaults, nwFirmwareUpgrade, bvRestoreDefaults, bvFirmwareUpgrade, eTalkRestoreDefaults')
cmdPrintConfig = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdPrintConfig.setStatus('optional')
if mibBuilder.loadTexts: cmdPrintConfig.setDescription('A value of 2 will cause the device to print a configuration page.')
cmdRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdRestoreDefaults.setStatus('optional')
if mibBuilder.loadTexts: cmdRestoreDefaults.setDescription('A value of 2 will restore all parameters on the device to factory defaults, as well as reset the device.')
snmpGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpGroupVersion.setStatus('mandatory')
if mibBuilder.loadTexts: snmpGroupVersion.setDescription('The version for the snmp group.')
snmpRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpRestoreDefaults.setStatus('optional')
if mibBuilder.loadTexts: snmpRestoreDefaults.setDescription('A value of 2 will restore all SNMP parameters on the device to factory defaults, as well as reset the device.')
snmpGetCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGetCommunityName.setStatus('optional')
if mibBuilder.loadTexts: snmpGetCommunityName.setDescription('Get community name for the managed node. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
snmpSetCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSetCommunityName.setStatus('optional')
if mibBuilder.loadTexts: snmpSetCommunityName.setDescription('Set community name for the managed node. This value cannot be read, just set. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
snmpTrapCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapCommunityName.setStatus('optional')
if mibBuilder.loadTexts: snmpTrapCommunityName.setDescription('Trap community name for the managed node.')
snmpPrinterTrapMaskUsed = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPrinterTrapMaskUsed.setStatus('optional')
if mibBuilder.loadTexts: snmpPrinterTrapMaskUsed.setDescription('A bit mask showing which bits in the printer trap mask are valid.')
snmpPrinter2TrapMaskUsed = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPrinter2TrapMaskUsed.setStatus('optional')
if mibBuilder.loadTexts: snmpPrinter2TrapMaskUsed.setDescription('A bit mask showing which bits in the printer2 trap mask are valid.')
snmpTrapMaskTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 6, 3), )
if mibBuilder.loadTexts: snmpTrapMaskTable.setStatus('mandatory')
if mibBuilder.loadTexts: snmpTrapMaskTable.setDescription('A list of strings which show how each bit in the printer2 trap mask is used.')
snmpTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 6, 3, 1), ).setIndexNames((0, "OKIDATA-MIB", "SNMPTrapMaskIndex"))
if mibBuilder.loadTexts: snmpTrapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snmpTrapEntry.setDescription('A physical output port on the print server.')
snmpTrapMaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapMaskIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snmpTrapMaskIndex.setDescription('A unique value for each bit in the SNMPTrapMask.')
snmpTrapMaskString = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 3, 6, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(30, 30)).setFixedLength(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapMaskString.setStatus('optional')
if mibBuilder.loadTexts: snmpTrapMaskString.setDescription('String describing how the bit in the SNMPTrapMask is used.')
driverGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverGroupVersion.setStatus('mandatory')
if mibBuilder.loadTexts: driverGroupVersion.setDescription('The version for the driver group.')
driverRXPackets = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverRXPackets.setStatus('mandatory')
if mibBuilder.loadTexts: driverRXPackets.setDescription('The number of packets received.')
driverTXPackets = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverTXPackets.setStatus('mandatory')
if mibBuilder.loadTexts: driverTXPackets.setDescription('The number of packets transmitted.')
driverRXPacketsUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverRXPacketsUnavailable.setStatus('mandatory')
if mibBuilder.loadTexts: driverRXPacketsUnavailable.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol due to a lack of buffer space.')
driverRXPacketErrors = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverRXPacketErrors.setStatus('mandatory')
if mibBuilder.loadTexts: driverRXPacketErrors.setDescription('The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
driverTXPacketErrors = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverTXPacketErrors.setStatus('mandatory')
if mibBuilder.loadTexts: driverTXPacketErrors.setDescription('The number of outbound packets that could not be transmitted because of errors.')
driverTXPacketRetries = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverTXPacketRetries.setStatus('mandatory')
if mibBuilder.loadTexts: driverTXPacketRetries.setDescription('The number of retransmitted packets.')
driverChecksumErrors = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverChecksumErrors.setStatus('mandatory')
if mibBuilder.loadTexts: driverChecksumErrors.setDescription('The number of packets containing checksum errors received.')
trGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trGroupVersion.setStatus('mandatory')
if mibBuilder.loadTexts: trGroupVersion.setDescription('The version for the tokenRing group.')
trRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trRestoreDefaults.setStatus('optional')
if mibBuilder.loadTexts: trRestoreDefaults.setDescription('A value of 2 will restore all token-ring parameters on the device to factory defaults, as well as reset the device.')
trPriority = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 5, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trPriority.setStatus('optional')
if mibBuilder.loadTexts: trPriority.setDescription('The token which is passed around the ring until a station needs it can be assigned a priority from 0 to 6. Priority 0 is the lowest and 6 is the highest. The priority of the device can be increased to improve performance. However, the performance of file servers and crucial stations could be affected. In order for changes to this variable to take effect, the device must be reset. See cmdReset to do this.')
trEarlyTokenRelease = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trEarlyTokenRelease.setStatus('optional')
if mibBuilder.loadTexts: trEarlyTokenRelease.setDescription('Early token release allows the device to release the token immediately after transmitting data but only on 16 Mbps systems. This feature enhances ring performance. In order for changes to this variable to take effect, the device must be reset. See cmdReset to do this.')
trPacketSize = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 5, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one-k", 1), ("two-k", 2), ("four-k", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trPacketSize.setStatus('optional')
if mibBuilder.loadTexts: trPacketSize.setDescription('You should only change the packet size if you are using a driver for your Token Ring adapter which allows packet sizes greater than One-K. In order for changes to this variable to take effect, the device must be reset. See cmdReset to do this.')
trRouting = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("all-None", 2), ("single-All", 3), ("single-None", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trRouting.setStatus('optional')
if mibBuilder.loadTexts: trRouting.setDescription('Set this variable to change the source routing configuration on the device. Off: No source routing. All, None: All-routes broadcast, nonbroadcast return. The frame will be transmitted on every route within the network resulting in multiple copies on a given ring. Single, All: Single-route broadcast, all routes broadcast return. The frame will be transmitted across the designated bridges, which will result in the frame appearing only once on each ring. The response frame is on all routes broadcast to the originator. Single, None: Single-route broadcast, nonbroadcast return. The frame will be transmitted across designated bridges, which will result in the frame appearing only once each ring. In order for changes to this variable to take effect, the device must be reset. See cmdReset to do this.')
trLocallyAdminAddr = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 5, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trLocallyAdminAddr.setStatus('optional')
if mibBuilder.loadTexts: trLocallyAdminAddr.setDescription('This is the locally administered node address for the device. Valid values are 000000000000 and between 400000000000 and 7FFFFFFFFFFF. A value of 000000000000 indicates that a locally administered address is not in use.')
psGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psGroupVersion.setStatus('mandatory')
if mibBuilder.loadTexts: psGroupVersion.setDescription('The version for the psGeneral group.')
psJetAdminEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psJetAdminEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: psJetAdminEnabled.setDescription('Indicates whether or not the JetAdmin support is enabled on the print server. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
psVerifyConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("getvalue", 0), ("serial-configuration", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psVerifyConfiguration.setStatus('optional')
if mibBuilder.loadTexts: psVerifyConfiguration.setDescription('This variable is used to force the print server to verify valid configuration settings. Setting the variable to the appropriate enumeration will cause the print server to verify the settings for that enumeration. If the settings are valid, the result of the set will be OK. If the settings are not valid, the result will be BadValue. Gets on this variable will always return 0. 1 - Indicates whether or not the current serial configuration is valid. Valid configurations - If the serial port is set in bidirectional mode, the baud rate must be less than 115200 and the handshaking must be set to hardware handshaking. 2 - Not used yet. ')
outputGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputGroupVersion.setStatus('mandatory')
if mibBuilder.loadTexts: outputGroupVersion.setDescription('The version for the output group.')
outputRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputRestoreDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: outputRestoreDefaults.setDescription('A value of 2 will restore all output parameters on the print server to factory defaults, as well as reset the print server.')
outputCommandsTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 2, 2), )
if mibBuilder.loadTexts: outputCommandsTable.setStatus('mandatory')
if mibBuilder.loadTexts: outputCommandsTable.setDescription('A list of physical output ports. The number of entries is given by the value of outputNumPorts.')
outputCommandsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 2, 2, 1), ).setIndexNames((0, "OKIDATA-MIB", "outputIndex"))
if mibBuilder.loadTexts: outputCommandsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: outputCommandsEntry.setDescription('A physical output port on the print server.')
outputCancelCurrentJob = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputCancelCurrentJob.setStatus('optional')
if mibBuilder.loadTexts: outputCancelCurrentJob.setDescription('A value of 2 will cancel the job currently printing on that port.')
outputNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputNumPorts.setStatus('mandatory')
if mibBuilder.loadTexts: outputNumPorts.setDescription('The number of physical output ports on the print server.')
outputTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2), )
if mibBuilder.loadTexts: outputTable.setStatus('mandatory')
if mibBuilder.loadTexts: outputTable.setDescription('A list of physical output ports. The number of entries is given by the value of outputNumPorts.')
outputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1), ).setIndexNames((0, "OKIDATA-MIB", "outputIndex"))
if mibBuilder.loadTexts: outputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: outputEntry.setDescription('A physical output port on the print server.')
outputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outputIndex.setDescription("A unique value for each physical output port. Its value ranges between 1 and the value of outputNumPorts. The value for each protocol must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization.")
outputName = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputName.setStatus('mandatory')
if mibBuilder.loadTexts: outputName.setDescription('A textual description of the output port.')
outputStatusString = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputStatusString.setStatus('mandatory')
if mibBuilder.loadTexts: outputStatusString.setDescription('A string indicating the status of the physical output port.')
outputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on-Line", 1), ("off-Line", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: outputStatus.setDescription('Indicates status of the printer. Get outputExtendedStatus for further information.')
outputExtendedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 15))).clone(namedValues=NamedValues(("none", 1), ("no-Printer-Attached", 2), ("toner-Low", 3), ("paper-Out", 4), ("paper-Jam", 5), ("door-Open", 6), ("printer-Error", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputExtendedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: outputExtendedStatus.setDescription('Indicates printer status to be used in conjunction with outputStatus.')
outputPrinter = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4))).clone(namedValues=NamedValues(("okidata", 2), ("no-Specific-Printer", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputPrinter.setStatus('optional')
if mibBuilder.loadTexts: outputPrinter.setDescription('The type of printer the output port is attached to. Even if the group is supported, this variable may not be supported.')
outputLanguageSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("pcl", 2), ("postScript", 3), ("als", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputLanguageSwitching.setStatus('optional')
if mibBuilder.loadTexts: outputLanguageSwitching.setDescription('Indicates the language switching option for the physical port. Even if the group is supported, this variable may not be supported.')
outputConfigLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("text", 1), ("pcl", 2), ("postScript", 3), ("off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputConfigLanguage.setStatus('mandatory')
if mibBuilder.loadTexts: outputConfigLanguage.setDescription('Indicates the language that configuration pages will be printed in. If set to off, a config sheet will not be printed on this port.')
outputPCLString = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(127, 127)).setFixedLength(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputPCLString.setStatus('optional')
if mibBuilder.loadTexts: outputPCLString.setDescription('This string will be sent out the physical port if (1) outputLanguageSwitching is set to PCL or outputLanguageSwitching is set to Auto and the job is determined to be PCL, and (2) outputPrinter is set to No-Specific-Printer. Even if the group is supported, this variable may not be supported.')
outputPSString = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(127, 127)).setFixedLength(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputPSString.setStatus('optional')
if mibBuilder.loadTexts: outputPSString.setDescription('This string will be sent out the physical port if (1) outputLanguageSwitching is set to PostScript or outputLanguageSwitching is set to Auto and the job is determined to be PostScript, and (2) outputPrinter is set to No-Specific-Printer. Even if the group is supported, this variable may not be supported.')
outputSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32758, 32759, 32760, 32761, 32762, 32763, 32764, 32765, 32766, 32767))).clone(namedValues=NamedValues(("serial-infrared", 32758), ("serial-bidirectional", 32759), ("serial-unidirectional", 32760), ("serial-input", 32761), ("parallel-compatibility-no-bidi", 32762), ("ieee-1284-std-nibble-mode", 32763), ("z-Link", 32764), ("internal", 32765), ("ieee-1284-ecp-or-fast-nibble-mode", 32766), ("extendedLink", 32767)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputSetting.setStatus('mandatory')
if mibBuilder.loadTexts: outputSetting.setDescription('Indicates the type (and optionally speed) for the physical output port. Setting this variable to physical connections (such as Parallel) will result in an error. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
outputOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("no-Owner", 1), ("tcpip", 2), ("netware", 3), ("vines", 4), ("lanManager", 5), ("etherTalk", 6), ("config-Page", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputOwner.setStatus('mandatory')
if mibBuilder.loadTexts: outputOwner.setDescription('Indicates which protocol or task currently is printing on the port.')
outputBIDIStatusEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputBIDIStatusEnabled.setStatus('optional')
if mibBuilder.loadTexts: outputBIDIStatusEnabled.setDescription('A value of 2 indicates that the BIDI status system is enabled.')
outputPrinterModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputPrinterModel.setStatus('optional')
if mibBuilder.loadTexts: outputPrinterModel.setDescription('A string indicating the printer model attached to the output port.')
outputPrinterDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputPrinterDisplay.setStatus('optional')
if mibBuilder.loadTexts: outputPrinterDisplay.setDescription('A string indicating the message on the attached printer front panel.')
outputCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 524288, 1048576, 2097152, 4194304, 8388608, 33554432, 67108864, 134217728, 536870912, 1073741824))).clone(namedValues=NamedValues(("serial-Uni-Baud-9600", 1), ("serial-Uni-Baud-19200", 2), ("serial-Uni-Baud-38400", 4), ("serial-Uni-Baud-57600", 8), ("serial-Uni-Baud-115200", 16), ("serial-bidi-Baud-9600", 32), ("serial-bidi-Baud-19200", 64), ("serial-bidi-Baud-38400", 128), ("serial-bidi-Baud-57600", 256), ("serial-irin", 524288), ("serial-in", 1048576), ("serial-config-settings", 2097152), ("parallel-compatibility-no-bidi", 4194304), ("ieee-1284-std-nibble-mode", 8388608), ("bidirectional", 33554432), ("serial-Software-Handshake", 67108864), ("serial-Output", 134217728), ("internal", 536870912), ("ieee-1284-ecp-or-fast-nibble-mode", 1073741824)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: outputCapabilities.setDescription('This field is implemented as a BIT mask. If the bit is set then the port is capable of functioning in this mode. Bit Property --- ------------------------ 0 Serial Unidirectional Baud 9600 1 Serial Unidirectional Baud 19200 2 Serial Unidirectional Baud 38400 3 Serial Unidirectional Baud 57600 4 Serial Unidirectional Baud 115200 5 Serial Bidirectional Baud 9600 6 Serial Bidirectional Baud 19200 7 Serial Bidirectional Baud 38400 8 Serial Bidirectional Baud 57600 19 Infrared Input on serial port 20 Serial Input 21 Serial Configuration Settings 22 Parallel Compatibility Mode (no bidi) 23 IEEE 1284 Standard Nibble Mode 25 Bidirectional Support (PJL status) 26 Serial Software Handshaking 27 Serial Output 29 Printer Internal (MIO) 30 IEEE 1284 ECP or Fast Nibble Mode')
outputHandshake = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-Supported", 1), ("hardware-Software", 2), ("hardware", 3), ("software", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputHandshake.setStatus('optional')
if mibBuilder.loadTexts: outputHandshake.setDescription("If the port in serial mode operation this indicates the handshaking method being used. Setting this value to 'not- supported' will result in an error. Setting this value on non serial capable ports will result in an error. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.")
outputProtocolManager = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("protocol-none", 0), ("protocol-compatibility", 1), ("protocol-1284-4", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputProtocolManager.setStatus('optional')
if mibBuilder.loadTexts: outputProtocolManager.setDescription(' Indicates the type of output protocol manager being used on the port. Protocol-none means either there is no printer attached or the print server has not yet determined which output managers are supported on the printer. Protocol-compatibility means the printer does not support any of the protocol managers supported by the print server. Protocol-1284-4 means the output is using the 1284.4 logical port protocol manager. ')
outputDisplayMask = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputDisplayMask.setStatus('mandatory')
if mibBuilder.loadTexts: outputDisplayMask.setDescription('Bit mask describing what should be displayed by the utilities bit Description --- ----------- 0 outputCancelCurrentJob (Includes all CancelCurrentJob info) 1 outputName 2 outputStatusString 3 outputStatus 4 outputExtendedStatus 5 outputPrinter 6 outputLanguageSwitching 7 outputConfigLanguage 8 outputString (Includes outputPCLString and outputPSString) 9 outputCascaded 10 outputSetting 11 outputOwner 12 outputBIDIStatusEnabled 13 outputPrinterModel 14 outputPrinterDisplay 15 outputHandshake 16 outputJobLog (includes all job logging) 17 outputSerialConfig 18 NoPrinterType1 19 NoPrinterType2 20 NoPrinterType3 21 NoPrinterType4')
outputAvailableTrapsMask = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputAvailableTrapsMask.setStatus('mandatory')
if mibBuilder.loadTexts: outputAvailableTrapsMask.setDescription('Bit mask describing what output printer traps are available bit Description --- ----------- 0 online 1 offline 2 printer attached 3 toner low 4 paper out 5 paper jam 6 door open 7 printer error')
outputNumLogEntries = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputNumLogEntries.setStatus('mandatory')
if mibBuilder.loadTexts: outputNumLogEntries.setDescription('The number of job log entries per output port.')
outputJobLogTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 6, 2), )
if mibBuilder.loadTexts: outputJobLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: outputJobLogTable.setDescription('A 2 dimensional list of Job log entries indexed by the output port number and the log entry index (1 through outputNumJobLogEntries). The number of entries per output port is given by the value of outputNumJobLogEntries.')
outputJobLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 6, 2, 1), ).setIndexNames((0, "OKIDATA-MIB", "outputIndex"))
if mibBuilder.loadTexts: outputJobLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: outputJobLogEntry.setDescription('A Job log entry.')
outputJobLogInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 6, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputJobLogInformation.setStatus('mandatory')
if mibBuilder.loadTexts: outputJobLogInformation.setDescription('A textual description of print job information. The protocol, source, and file size are always included. Other information such as File Server, Queue, File Name, etc will be included if available.')
outputJobLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputJobLogTime.setStatus('mandatory')
if mibBuilder.loadTexts: outputJobLogTime.setDescription('A string indicating the elasped time since the last job was printed. Reported in form X hours X minutes X seconds.')
outputTotalJobTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 6, 3), )
if mibBuilder.loadTexts: outputTotalJobTable.setStatus('mandatory')
if mibBuilder.loadTexts: outputTotalJobTable.setDescription('Table showing the total number of jobs printed for each port.')
outputTotalJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 6, 3, 1), ).setIndexNames((0, "OKIDATA-MIB", "outputTotalJobIndex"))
if mibBuilder.loadTexts: outputTotalJobEntry.setStatus('mandatory')
if mibBuilder.loadTexts: outputTotalJobEntry.setDescription('An entry in the outputTotalJobTable.')
outputTotalJobIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputTotalJobIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outputTotalJobIndex.setDescription('A unique value for entry in the outputTotalJobTable. Its value ranges between 1 and the value of numPorts.')
outputTotalJobsLogged = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 2, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputTotalJobsLogged.setStatus('mandatory')
if mibBuilder.loadTexts: outputTotalJobsLogged.setDescription('The total number of jobs printed by the port since the print server was powered on. ')
tcpipGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipGroupVersion.setStatus('mandatory')
if mibBuilder.loadTexts: tcpipGroupVersion.setDescription('The version for the tcpip group.')
tcpipEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipEnabled.setStatus('optional')
if mibBuilder.loadTexts: tcpipEnabled.setDescription('Indicates whether or not the tcpip protocol stack is enabled on the print server. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
tcpipRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipRestoreDefaults.setStatus('optional')
if mibBuilder.loadTexts: tcpipRestoreDefaults.setDescription('A value of 2 will restore all tcpip parameters on the print server to factory defaults, as well as reset the print server.')
tcpipFirmwareUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipFirmwareUpgrade.setStatus('optional')
if mibBuilder.loadTexts: tcpipFirmwareUpgrade.setDescription('A value of 2 will put the print server into firmware upgrade mode waiting to receive a firmware upgrade file via tftp.')
tcpipIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipIPAddress.setStatus('optional')
if mibBuilder.loadTexts: tcpipIPAddress.setDescription('The Internet Address. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
tcpipDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipDefaultGateway.setStatus('optional')
if mibBuilder.loadTexts: tcpipDefaultGateway.setDescription('The default gateway for the print server. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
tcpipSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSubnetMask.setStatus('optional')
if mibBuilder.loadTexts: tcpipSubnetMask.setDescription('The subnet mask for the print server. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
tcpipUsingNetProtocols = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipUsingNetProtocols.setStatus('optional')
if mibBuilder.loadTexts: tcpipUsingNetProtocols.setDescription('A value of 2 indicates that the print server is using a combination of RARP, BOOTP, default IP address, or gleaning to determine its IP address. See tcpipBootProtocolsEnabled to determine which boot protocols are enabled. If the value of tcpipUsingNetProtocols is 1, the IP address is stored permanently in flash memory. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
tcpipBootProtocolsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipBootProtocolsEnabled.setStatus('optional')
if mibBuilder.loadTexts: tcpipBootProtocolsEnabled.setDescription("This is the 16 bit mask which determines which boot protocols will be used to determine the print server's IP address. BIT Boot Protocol Enabled --- -------------------------- 0 RARP 1 BootP 2 DHCP 3 Gleaning 4 Default Address Enabled (If no address after 2 minutes timeout and go to 198.102.102.254) A value of 31 indicates that all boot protocols are enabled. These protocols will only be used if tcpipUsingNetProtocols is set to 2. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.")
tcpipIPAddressSource = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("permanent", 1), ("default", 2), ("rarp", 3), ("bootp", 4), ("dhcp", 5), ("glean", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipIPAddressSource.setStatus('optional')
if mibBuilder.loadTexts: tcpipIPAddressSource.setDescription('This variable indicates how the IP address for the print server was determined.')
tcpipIPAddressServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipIPAddressServerAddress.setStatus('optional')
if mibBuilder.loadTexts: tcpipIPAddressServerAddress.setDescription('This variable indicates the source of the IP address if a boot protocol was used. This value will be 0.0.0.0 if no boot server was used.')
tcpipTimeoutChecking = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipTimeoutChecking.setStatus('optional')
if mibBuilder.loadTexts: tcpipTimeoutChecking.setDescription('A value of 2 indicates that a packet timeout will be active on all tcp connections. If a packet has not been received from the connection within this timeout the connection will be reset. To set this timeout, see tcpipTimeoutCheckingValue')
tcpipNumTraps = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipNumTraps.setStatus('mandatory')
if mibBuilder.loadTexts: tcpipNumTraps.setDescription('The number of UDP trap destinations.')
tcpipTrapTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 10), )
if mibBuilder.loadTexts: tcpipTrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: tcpipTrapTable.setDescription('A list of UDP trap definitions. The number of entries is given by the value of tcpipNumTraps.')
tcpipTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 10, 1), ).setIndexNames((0, "OKIDATA-MIB", "tcpipTrapIndex"))
if mibBuilder.loadTexts: tcpipTrapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tcpipTrapEntry.setDescription('An entry in the tcpipTrapTable.')
tcpipTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipTrapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tcpipTrapIndex.setDescription('A unique value for entry in the tcpipTrapTable. Its value ranges between 1 and the value of tcpipNumTraps.')
tcpipTrapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipTrapDestination.setStatus('optional')
if mibBuilder.loadTexts: tcpipTrapDestination.setDescription('This is the IP address that traps are sent to. A value of 0.0.0.0 will disable traps over UDP.')
tcpipPrinter2TrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 10, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipPrinter2TrapMask.setStatus('optional')
if mibBuilder.loadTexts: tcpipPrinter2TrapMask.setDescription('This is the 16 bit mask which determines which protocol specific traps will be sent out via UDP. Currently no protocol specific traps are supported.')
tcpipPrinterTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 10, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipPrinterTrapMask.setStatus('optional')
if mibBuilder.loadTexts: tcpipPrinterTrapMask.setDescription('This is the 16 bit mask which determines which printer specific traps will be sent out via UDP. A value of 65535 indicates that all printer specific traps should be reported via UDP. BIT CONDITION --- -------------------------- 0 On-line (Condition cleared) 1 Off-line 2 No printer attached 3 Toner Low 4 Paper Out 5 Paper Jam 6 Door Open 15 Printer Error')
tcpipOutputTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipOutputTrapMask.setStatus('optional')
if mibBuilder.loadTexts: tcpipOutputTrapMask.setDescription('This is the 16 bit mask which determines which physical output ports will be checked when generating printer specific traps to be sent out via UDP. A value of 65535 indicates that all physical output ports will generate traps. BIT CONDITION --- -------------------------- 0 Port 1 1 Port 2 2 Port 3 3 Port 4 ... ...')
tcpipBanners = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipBanners.setStatus('optional')
if mibBuilder.loadTexts: tcpipBanners.setDescription('A value of 2 indicates that banners will be printed with tcpip jobs. Even if the group is supported, this variable may not be supported.')
tcpipWinsAddress = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWinsAddress.setStatus('optional')
if mibBuilder.loadTexts: tcpipWinsAddress.setDescription('The IP address of the WINS server. The print server will register its sysName to this WINS server.')
tcpipWinsAddressSource = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhcp", 1), ("permanent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWinsAddressSource.setStatus('optional')
if mibBuilder.loadTexts: tcpipWinsAddressSource.setDescription('The source of the WINS server address. If set to dhcp, the print server will use the WINS address supplied with dhcp. If it is set to permanent, it will use the WINS address stored in flash.')
tcpipConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipConfigPassword.setStatus('optional')
if mibBuilder.loadTexts: tcpipConfigPassword.setDescription('The print server html/telnet configuration password. This value cannot be read, just set.')
tcpipTimeoutCheckingValue = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipTimeoutCheckingValue.setStatus('optional')
if mibBuilder.loadTexts: tcpipTimeoutCheckingValue.setDescription('The TCP connection timeout in seconds. A value of 0 has the same effect as disabling timeout checking.')
tcpipArpInterval = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipArpInterval.setStatus('optional')
if mibBuilder.loadTexts: tcpipArpInterval.setDescription('The ARP interval in minutes. The print server will ARP itself once when this timer expires. Set to 0 to disable.')
tcpipRawPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipRawPortNumber.setStatus('optional')
if mibBuilder.loadTexts: tcpipRawPortNumber.setDescription('The raw TCP port number the print server will listen for print jobs on. On multiple port devices, additional ports will sequentially follow this port number. The default port is 9100. Setting this value to a TCP port that is in use by another TCP application will return an error. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
tcpipNumSecurity = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipNumSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: tcpipNumSecurity.setDescription('The number of secure IP address ranges.')
tcpipSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 19), )
if mibBuilder.loadTexts: tcpipSecurityTable.setStatus('mandatory')
if mibBuilder.loadTexts: tcpipSecurityTable.setDescription('A list of secure IP address ranges. This adds security for both printing and admin rights. AdminEnabled: When the admin enabled field is set to yes for a secure address range, the print server may only be configured via IP from IP address within that range. If the admin field is not set for any address ranges, the print server will accept admin commands from any IP address which has the valid community names and/or passwords. PortMask: When there is a port mask set for a secure IP address range, the print server will only accept TCP/IP print jobs from hosts that are in the secure address range. If there are no ranges with a port mask set, the print server will accept TCP/IP print jobs from any host. The number of entries is given by the value of tcpipNumSecurity.')
tcpipSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 19, 1), ).setIndexNames((0, "OKIDATA-MIB", "tcpipSecurityIndex"))
if mibBuilder.loadTexts: tcpipSecurityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tcpipSecurityEntry.setDescription('An entry in the tcpipSecurityTable.')
tcpipSecurityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipSecurityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tcpipSecurityIndex.setDescription('A unique value for entry in the tcpipSecurityTable. Its value ranges between 1 and the value of tcpipNumSecurity.')
tcpipSecureStartIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 19, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSecureStartIPAddress.setStatus('optional')
if mibBuilder.loadTexts: tcpipSecureStartIPAddress.setDescription('This is the starting IP address for the secure IP address range. A value of 0.0.0.0 for both tcpipStartIPAddress and tcpipEndIPAddress will disable the address range.')
tcpipSecureEndIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 19, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSecureEndIPAddress.setStatus('optional')
if mibBuilder.loadTexts: tcpipSecureEndIPAddress.setDescription('This is the ending IP address for the secure IP address range. A value of 0.0.0.0 for both tcpipStartIPAddress and tcpipEndIPAddress will disable the address range.')
tcpipSecurePrinterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 19, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSecurePrinterMask.setStatus('optional')
if mibBuilder.loadTexts: tcpipSecurePrinterMask.setDescription('This is the 8 bit mask which determines which physical output ports this range of IP addresses can print to. A value of 127 indicates that the range of IP addresses can print to any of the output ports. This value can not be configured until a valid start and end address range have been configured. BIT CONDITION --- -------------------------- 0 Port 1 1 Port 2 2 Port 3 3 Port 4 ... ... 8 Reserved, must be set to 0.')
tcpipSecureAdminEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSecureAdminEnabled.setStatus('optional')
if mibBuilder.loadTexts: tcpipSecureAdminEnabled.setDescription(' This allows an advanced level of admin security for IP. Setting this will restrict which IP addresses can configure the print server. The correct community names and passwords are still required if this is used, it just adds another level of security. Indicates whether or not admin rights are enabled for this range of IP addresses. If no range of addresses has this enabled, then any IP address can configure the print server if it has the correct community names and/or passwords. If this field is set to yes for any range of addresses, the print server will only be configurable via IP from that range of addresses. This value can not be configured until a valid start and end address range have been configured.')
tcpipLowBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipLowBandwidth.setStatus('optional')
if mibBuilder.loadTexts: tcpipLowBandwidth.setDescription('A value of 2 will optimize the TCP stack for low bandwidth networks. A value of 1 will optimize the TCP stack for high bandwidth networks.')
tcpipNumLogicalPrinters = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipNumLogicalPrinters.setStatus('mandatory')
if mibBuilder.loadTexts: tcpipNumLogicalPrinters.setDescription('The number of available logical printers.')
tcpipMLPTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 22), )
if mibBuilder.loadTexts: tcpipMLPTable.setStatus('mandatory')
if mibBuilder.loadTexts: tcpipMLPTable.setDescription('A table of the available logical printers. The number of entries is given by the value of tcpipNumLogicalPrinters.')
tcpipMLPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 22, 1), ).setIndexNames((0, "OKIDATA-MIB", "tcpipMLPIndex"))
if mibBuilder.loadTexts: tcpipMLPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tcpipMLPEntry.setDescription('An entry in the tcpipMLPTable.')
tcpipMLPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipMLPIndex.setStatus('optional')
if mibBuilder.loadTexts: tcpipMLPIndex.setDescription('A unique value for entry in the tcpipMLPTable. Its value ranges between 1 and the value of tcpipNumLogicalPrinters.')
tcpipMLPName = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 22, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipMLPName.setStatus('optional')
if mibBuilder.loadTexts: tcpipMLPName.setDescription('Contains the name of the logical printer. This name is also the LPR remote queue name associated with the logical printer.')
tcpipMLPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 22, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipMLPPort.setStatus('optional')
if mibBuilder.loadTexts: tcpipMLPPort.setDescription('The number of the physical output port associated with the logical printer. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
tcpipMLPTCPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 22, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipMLPTCPPort.setStatus('optional')
if mibBuilder.loadTexts: tcpipMLPTCPPort.setDescription('The TCP port associated with the logical printer. Any print data sent to this TCP port will be processed through this logical printer entry. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
tcpipMLPPreString = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 22, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipMLPPreString.setStatus('optional')
if mibBuilder.loadTexts: tcpipMLPPreString.setDescription("This contains any data that should be sent down to the printer at the beginning of jobs sent to this logical printer. To enter non-printable ascii characters in the string, enclose the decimal value inside of <>. For example, to enter an ESC-E the string would be '<27>E'.")
tcpipMLPPostString = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 22, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipMLPPostString.setStatus('optional')
if mibBuilder.loadTexts: tcpipMLPPostString.setDescription("This contains any data that should be sent down to the printer at the end of jobs sent to this logical printer. To enter non-printable ascii characters in the string, enclose the decimal value inside of <>. For example, to enter an ESC-E the string would be '<27>E'.")
tcpipMLPDeleteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 22, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipMLPDeleteBytes.setStatus('optional')
if mibBuilder.loadTexts: tcpipMLPDeleteBytes.setDescription('The number of bytes that will be deleted from the beginning of jobs sent to this logical printer.')
tcpipSmtpServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSmtpServerAddr.setStatus('optional')
if mibBuilder.loadTexts: tcpipSmtpServerAddr.setDescription('The IP address of the e-mail server which will be used to send e-mail notification of printer status conditions. This address must contain the valid IP address of an e-mail server before any of the contents of the SmtpTable are used.')
tcpipNumSmtpDestinations = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipNumSmtpDestinations.setStatus('mandatory')
if mibBuilder.loadTexts: tcpipNumSmtpDestinations.setDescription('The number of configurable e-mail destinations to receive printer status conditions. ')
tcpipSmtpTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 25), )
if mibBuilder.loadTexts: tcpipSmtpTable.setStatus('mandatory')
if mibBuilder.loadTexts: tcpipSmtpTable.setDescription('A list of SMTP e-mail addresses and printer status conditions to send e-mails for. The number of entries is given by the value of tcpipNumSmtpDestinations.')
tcpipSmtpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 25, 1), ).setIndexNames((0, "OKIDATA-MIB", "tcpipSmtpIndex"))
if mibBuilder.loadTexts: tcpipSmtpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tcpipSmtpEntry.setDescription('An entry in the tcpipSmtpTable.')
tcpipSmtpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipSmtpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tcpipSmtpIndex.setDescription('A unique value for entry in the tcpipSmtpTable. Its value ranges between 1 and the value of tcpipNumSmtpDestinations.')
tcpipSmtpEmailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 25, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSmtpEmailAddr.setStatus('optional')
if mibBuilder.loadTexts: tcpipSmtpEmailAddr.setDescription('This is the e-mail address that printer status conditions are sent to. If this string is empty the status conditions will not be sent.')
tcpipSmtpProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 25, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSmtpProtocolMask.setStatus('optional')
if mibBuilder.loadTexts: tcpipSmtpProtocolMask.setDescription('This is the 16 bit mask which determines which protocol specific conditions will be sent out via e-mail. Currently no protocol specific conditions are supported.')
tcpipSmtpPrinterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 25, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSmtpPrinterMask.setStatus('optional')
if mibBuilder.loadTexts: tcpipSmtpPrinterMask.setDescription('This is the 16 bit mask which determines which printer specific conditions will be sent out via e-mail. A value of 65535 indicates that all printer specific conditions should be reported via e-mail. BIT CONDITION --- -------------------------- 0 On-line (Condition cleared) 1 Off-line 2 No printer attached 3 Toner Low 4 Paper Out 5 Paper Jam 6 Door Open 15 Printer Error')
tcpipSmtpOutputMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 25, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSmtpOutputMask.setStatus('optional')
if mibBuilder.loadTexts: tcpipSmtpOutputMask.setDescription('This is the 16 bit mask which determines which physical output ports will be checked when generating printer specific conditions to be sent out via e-mail. A value of 65535 indicates that all physical output ports will generate e-mails upon a change in status. BIT CONDITION --- -------------------------- 0 Port 1 1 Port 2 2 Port 3 3 Port 4 ... ...')
tcpipWebAdminName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebAdminName.setStatus('optional')
if mibBuilder.loadTexts: tcpipWebAdminName.setDescription('This is the admin name used by web configuration for login.')
tcpipWebAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebAdminPassword.setStatus('optional')
if mibBuilder.loadTexts: tcpipWebAdminPassword.setDescription('This is the admin password used by web configuration for login.')
tcpipWebUserName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebUserName.setStatus('optional')
if mibBuilder.loadTexts: tcpipWebUserName.setDescription('This is the user name used by web configuration for login. Not currently used. ')
tcpipWebUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebUserPassword.setStatus('optional')
if mibBuilder.loadTexts: tcpipWebUserPassword.setDescription('This is the user password used by web configuration for login. Not currently used.')
tcpipWebHtttpPort = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebHtttpPort.setStatus('optional')
if mibBuilder.loadTexts: tcpipWebHtttpPort.setDescription('The port number used to communicate over http. Must be between 0 and 65535. It must not be the same as any other port used. Other ports used are 20, 21, 23, 515, & raw port numbers (9100, 9101, ... if at default)')
tcpipWebFaqURL = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebFaqURL.setStatus('optional')
if mibBuilder.loadTexts: tcpipWebFaqURL.setDescription('This is the URL for FAQ at the ESI (or other OEM) website.')
tcpipWebUpdateURL = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebUpdateURL.setStatus('optional')
if mibBuilder.loadTexts: tcpipWebUpdateURL.setDescription('This is the URL for finding firmware updates at the ESI (or other OEM) website.')
tcpipWebCustomLinkName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebCustomLinkName.setStatus('optional')
if mibBuilder.loadTexts: tcpipWebCustomLinkName.setDescription('This is the name assigned to the custom link defined by the user.')
tcpipWebCustomLinkURL = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebCustomLinkURL.setStatus('optional')
if mibBuilder.loadTexts: tcpipWebCustomLinkURL.setDescription('This is the URL for a custom link specified by the user.')
tcpipPOP3ServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 35), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipPOP3ServerAddress.setStatus('optional')
if mibBuilder.loadTexts: tcpipPOP3ServerAddress.setDescription('The IP address of the POP3 server from which email will be retrieved. This address must contain the valid IP address of a POP3 server before any attempts to retrieve email will be made.')
tcpipPOP3PollInterval = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipPOP3PollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tcpipPOP3PollInterval.setDescription('The number of seconds between attempts to retrieve mail from the POP3 server. ')
tcpipPOP3UserName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipPOP3UserName.setStatus('optional')
if mibBuilder.loadTexts: tcpipPOP3UserName.setDescription("This is the user name for the print server's email account on the POP3 server.")
tcpipPOP3Password = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 38), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipPOP3Password.setStatus('optional')
if mibBuilder.loadTexts: tcpipPOP3Password.setDescription("This is the password for the print server's email account on the POP3 server.")
tcpipDomainName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 39), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipDomainName.setStatus('optional')
if mibBuilder.loadTexts: tcpipDomainName.setDescription('This is the Domain name used by POP3 and SMTP.')
tcpipCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 4, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: tcpipCapabilities.setDescription('Bit mask describing TCPIP capabilities. If the BIT is set then the feature is supported. bit Description --- ----------- 0 LPR/LPD 1 Raw port printing 2 FTP 3 POP3 printing 4 Multiple logical printers 5 IPP 6 HTTP 7 HTTP Variables 8 Telnet 9 IP Security 10 Timeout checking 11 Fragmentation 12 Default IP address assignment 13 DHCP IP address assignment 14 BOOTP IP address assignment 15 RARP IP address assignment 16 Gleaning IP address assignment 17 IP Enterprise Traps 18 SMTP Traps 19 WINS 20 DDNS 21 Encryption1')
tcpipError = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipError.setStatus('optional')
if mibBuilder.loadTexts: tcpipError.setDescription('Contains any tcpip specific error information.')
tcpipDisplayMask = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipDisplayMask.setStatus('mandatory')
if mibBuilder.loadTexts: tcpipDisplayMask.setDescription('Bit mask describing what should be displayed by the utilities bit Description --- ----------- 0 tcpipAddress (Includes tcpipDefaultGateway and tcpipSubnetMask) 1 tcpipUsingNetProtocols (Includes tcpipBootProtocolsEnabled, tcpipAddressSource, tcpipAddressServerAddress) 2 tcpipTimeoutChecking 3 tcpipTraps (Includes all trap info) 4 tcpipBanners 5 tcpipSecurity (Includes all security info) 6 tcpipWinsAddress (Includes tcpipWinsAddressSource) 7 tcpipConfigPassword 8 tcpipTimeoutCheckingValue 9 tcpipArpInterval 10 tcpipRawPortNumber 11 tcpipError 12 tcpipLowBandwidth 13 tcpipMLP (Includes all logical printer settings) 14 tcpipPOP3')
nwGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwGroupVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nwGroupVersion.setDescription('The version for the netware group.')
nwEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwEnabled.setStatus('optional')
if mibBuilder.loadTexts: nwEnabled.setDescription('Indicates whether or not the NetWare protocol stack is enabled on the print server. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
nwRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwRestoreDefaults.setStatus('optional')
if mibBuilder.loadTexts: nwRestoreDefaults.setDescription('A value of 2 will restore all NetWare parameters on the print server to factory defaults, as well as reset the print server.')
nwFirmwareUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwFirmwareUpgrade.setStatus('optional')
if mibBuilder.loadTexts: nwFirmwareUpgrade.setDescription('A value of 2 will put the print server into firmware upgrade mode.')
nwFrameFormat = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("ethernet-II", 2), ("ethernet-802-3", 3), ("ethernet-802-2", 4), ("ethernet-Snap", 5), ("token-Ring", 6), ("token-Ring-Snap", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFrameFormat.setStatus('optional')
if mibBuilder.loadTexts: nwFrameFormat.setDescription('Indicates the frame format that the print server is using. See nwSetFrameFormat to determine which frame frame format the print server is configured for.')
nwSetFrameFormat = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("auto-Sense", 1), ("forced-Ethernet-II", 2), ("forced-Ethernet-802-3", 3), ("forced-Ethernet-802-2", 4), ("forced-Ethernet-Snap", 5), ("forced-Token-Ring", 6), ("forced-Token-Ring-Snap", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwSetFrameFormat.setStatus('optional')
if mibBuilder.loadTexts: nwSetFrameFormat.setDescription('Indicates the frame format that the print server is using. Setting this value to 1 (Auto-Sense) indicates that automatic frame format sensing will be used. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
nwMode = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("pserver", 2), ("rprinter", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwMode.setStatus('optional')
if mibBuilder.loadTexts: nwMode.setDescription('Mode the print server is running in. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
nwPrintServerName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPrintServerName.setStatus('optional')
if mibBuilder.loadTexts: nwPrintServerName.setDescription('Contains print server name. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
nwPrintServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPrintServerPassword.setStatus('optional')
if mibBuilder.loadTexts: nwPrintServerPassword.setDescription('The print server password. This value cannot be read, just set. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
nwQueueScanTime = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwQueueScanTime.setStatus('optional')
if mibBuilder.loadTexts: nwQueueScanTime.setDescription('Determines how often, in tenths of a second that the print server will scan the queues for jobs. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
nwNetworkNumber = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNetworkNumber.setStatus('optional')
if mibBuilder.loadTexts: nwNetworkNumber.setDescription("The print server's network number.")
nwMaxFileServers = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwMaxFileServers.setStatus('optional')
if mibBuilder.loadTexts: nwMaxFileServers.setDescription('The print server maximum number of file servers which it can be attached to at once.')
nwFileServerTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 9), )
if mibBuilder.loadTexts: nwFileServerTable.setStatus('optional')
if mibBuilder.loadTexts: nwFileServerTable.setDescription('A table of file servers to service.')
nwFileServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 9, 1), ).setIndexNames((0, "OKIDATA-MIB", "nwFileServerIndex"))
if mibBuilder.loadTexts: nwFileServerEntry.setStatus('optional')
if mibBuilder.loadTexts: nwFileServerEntry.setDescription('A file server for the print server to service.')
nwFileServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFileServerIndex.setStatus('optional')
if mibBuilder.loadTexts: nwFileServerIndex.setDescription("A unique value for each file server. Its value ranges between 1 and the value of nwMaxFileServers. The value for each server must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization. The first entry in the table is the default file server.")
nwFileServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwFileServerName.setStatus('optional')
if mibBuilder.loadTexts: nwFileServerName.setDescription('The file server name. This name will be NULL if there is no file server to be serviced. Only the default file server (the first entry in the table) can be set. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
nwFileServerConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 258, 261, 276, 512, 515, 768, 769, 32767))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("startupInProgress", 3), ("serverReattaching", 4), ("serverNeverAttached", 5), ("pse-UNKNOWN-FILE-SERVER", 258), ("pse-NO-RESPONSE", 261), ("pse-CANT-LOGIN", 276), ("pse-NO-SUCH-QUEUE", 512), ("pse-UNABLE-TO-ATTACH-TO-QUEUE", 515), ("bad-CONNECTION", 768), ("bad-SERVICE-CONNECTION", 769), ("other", 32767)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFileServerConnectionStatus.setStatus('optional')
if mibBuilder.loadTexts: nwFileServerConnectionStatus.setDescription('The value describes the status of the connection between the file server and the print server.')
nwPortTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10), )
if mibBuilder.loadTexts: nwPortTable.setStatus('optional')
if mibBuilder.loadTexts: nwPortTable.setDescription('A table of NetWare port specific information.')
nwPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10, 1), ).setIndexNames((0, "OKIDATA-MIB", "nwPortIndex"))
if mibBuilder.loadTexts: nwPortEntry.setStatus('optional')
if mibBuilder.loadTexts: nwPortEntry.setDescription('An entry of NetWare port specific information.')
nwPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwPortIndex.setStatus('optional')
if mibBuilder.loadTexts: nwPortIndex.setDescription("A unique value for each physical output port. Its value ranges between 1 and the value of outputNumPorts. The value for each port must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization.")
nwPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwPortStatus.setStatus('optional')
if mibBuilder.loadTexts: nwPortStatus.setDescription('A string indicating the NetWare specific status of the physical output port.')
nwPortPrinterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPortPrinterNumber.setStatus('optional')
if mibBuilder.loadTexts: nwPortPrinterNumber.setDescription('Indicates the printer number for the print server to use when running in RPRinter mode. A value of 255 indicates that the port is unconfigured for RPRinter mode. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
nwPortFontDownload = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled-No-Power-Sense", 2), ("enabled-Power-Sense", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPortFontDownload.setStatus('optional')
if mibBuilder.loadTexts: nwPortFontDownload.setDescription('This variable controls the font downloading feature of the print server. Disabled - Do not download fonts. Enabled, without Printer Sense - Only download fonts after the print server has been reset or power cycled. Enabled, with Printer Sense - Download fonts after the print server has been reset or power-cycled, or after the printer has been power-cycled. This option is only available on certain print servers. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
nwPortPCLQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPortPCLQueue.setStatus('optional')
if mibBuilder.loadTexts: nwPortPCLQueue.setDescription('A string indicating the name of the queue containing the PCL fonts to download when font downloading is enabled. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
nwPortPSQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPortPSQueue.setStatus('optional')
if mibBuilder.loadTexts: nwPortPSQueue.setDescription('A string indicating the name of the queue containing the PS fonts to download when font downloading is enabled. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
nwPortFormsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPortFormsOn.setStatus('optional')
if mibBuilder.loadTexts: nwPortFormsOn.setDescription('A value of 2 will enable forms checking. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
nwPortFormNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPortFormNumber.setStatus('optional')
if mibBuilder.loadTexts: nwPortFormNumber.setDescription('Indicates the form number to check jobs against when nwPortFormsOn is enabled.')
nwPortNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPortNotification.setStatus('optional')
if mibBuilder.loadTexts: nwPortNotification.setDescription('A value of 2 will enable job notification.')
nwNumTraps = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNumTraps.setStatus('mandatory')
if mibBuilder.loadTexts: nwNumTraps.setDescription('The number of IPX trap destinations.')
nwTrapTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 12), )
if mibBuilder.loadTexts: nwTrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwTrapTable.setDescription('A list of IPX trap definitions. The number of entries is given by the value of nwNumTraps.')
nwTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 12, 1), ).setIndexNames((0, "OKIDATA-MIB", "nwTrapIndex"))
if mibBuilder.loadTexts: nwTrapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwTrapEntry.setDescription('An entry in the nwTrapTable.')
nwTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwTrapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwTrapIndex.setDescription('A unique value for entry in the nwTrapTable. Its value ranges between 1 and the value of nwNumTraps.')
nwTrapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 12, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwTrapDestination.setStatus('optional')
if mibBuilder.loadTexts: nwTrapDestination.setDescription('This is the network address that IPX traps are sent to. A value of 00 00 00 00 00 00 in conjunction with a nwTrapDestinationNet of 00 00 00 00 will disable traps over IPX.')
nwTrapDestinationNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 12, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwTrapDestinationNet.setStatus('mandatory')
if mibBuilder.loadTexts: nwTrapDestinationNet.setDescription('This is the network number that IPX traps are sent to. A value of 00 00 00 00 in conjunction with a nwTrapDestination of 00 00 00 00 00 00 will disable traps over IPX.')
nwPrinter2TrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 12, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPrinter2TrapMask.setStatus('optional')
if mibBuilder.loadTexts: nwPrinter2TrapMask.setDescription('This is the 16 bit mask which determines which protocol specific traps will be sent out via IPX. Currently no protocol specific traps are supported.')
nwPrinterTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 12, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPrinterTrapMask.setStatus('optional')
if mibBuilder.loadTexts: nwPrinterTrapMask.setDescription('This is the 16 bit mask which determines which printer specific traps will be sent out via IPX. A value of 65535 indicates that all printer specific traps should be reported via IPX. BIT CONDITION --- -------------------------- 0 On-line (Condition cleared) 1 Off-line 2 No printer attached 3 Toner Low 4 Paper Out 5 Paper Jam 6 Door Open 15 Printer Error')
nwOutputTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 12, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwOutputTrapMask.setStatus('optional')
if mibBuilder.loadTexts: nwOutputTrapMask.setDescription('This is the 16 bit mask which determines which physical output ports will be checked when generating printer specific traps to be sent out via IPX. A value of 65535 indicates that all physical output ports will generate traps. BIT CONDITION --- -------------------------- 0 Port 1 1 Port 2 2 Port 3 3 Port 4 ... ...')
nwNDSPrintServerName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwNDSPrintServerName.setStatus('optional')
if mibBuilder.loadTexts: nwNDSPrintServerName.setDescription('Directory Services object used by the print server to connect to the NDS tree. This string contains the entire canonicalized name. NOTE: This variable must be stored in Unicode.')
nwNDSPreferredDSTree = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwNDSPreferredDSTree.setStatus('optional')
if mibBuilder.loadTexts: nwNDSPreferredDSTree.setDescription('Directory Services tree to which the NDS print server initially connects.')
nwNDSPreferredDSFileServer = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwNDSPreferredDSFileServer.setStatus('optional')
if mibBuilder.loadTexts: nwNDSPreferredDSFileServer.setDescription('The NetWare server to which the NDS print server initially makes a bindery connection.')
nwNDSPacketCheckSumEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwNDSPacketCheckSumEnabled.setStatus('optional')
if mibBuilder.loadTexts: nwNDSPacketCheckSumEnabled.setDescription('Compute the checksum for packets. 1 = disabled 2 = enabled')
nwNDSPacketSignatureLevel = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwNDSPacketSignatureLevel.setStatus('optional')
if mibBuilder.loadTexts: nwNDSPacketSignatureLevel.setDescription('Packet signature is a security method to prevent packet forging. 1 = disabled 2 = enabled 3 = preferred 4 = required')
nwAvailablePrintModes = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAvailablePrintModes.setStatus('optional')
if mibBuilder.loadTexts: nwAvailablePrintModes.setDescription('Reports which NetWare print modes are available. BIT CONDITION --- -------------------------- 0 PServer 1 RPrinter 2 NDS 3 SPX Direct 4 JetAdmin ')
nwDirectPrintEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDirectPrintEnabled.setStatus('optional')
if mibBuilder.loadTexts: nwDirectPrintEnabled.setDescription('Indicates whether or not direct mode ipx/spx printing is enabled.')
nwJAConfig = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwJAConfig.setStatus('optional')
if mibBuilder.loadTexts: nwJAConfig.setDescription('Indicates whether or not JetAdmin was used to configure the netware settings.')
nwDisableSAP = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 4, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDisableSAP.setStatus('optional')
if mibBuilder.loadTexts: nwDisableSAP.setDescription('Indicates whether or not SAPs are enabled.')
nwError = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwError.setStatus('optional')
if mibBuilder.loadTexts: nwError.setDescription('Contains any NetWare specific error information.')
nwDisplayMask = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDisplayMask.setStatus('mandatory')
if mibBuilder.loadTexts: nwDisplayMask.setDescription('Bit mask describing what should be displayed by the utilities bit Description --- ----------- 0 nwFrameFormat 1 nwJetAdmin 2 nwFileServer (Includes all file server info) 3 nwMode 4 nwPrintServerName 5 nwPrintServerPassword 6 nwQueueScanTime 7 nwNetworkNumber 8 nwPortStatus 9 nwPortPrinterNumber 10 nwPortFontDownload (Includes nwPortPCLQueue and nwPortPSQueue) 11 nwPortFormsOn (Includes nwPortFormsNumber) 12 nwPortNotification 13 nwTraps (Includes all trap info) 14 nwNDSPrintServerName 15 nwNDSPreferredDSTree 16 nwNDSPreferredDSFileServer 17 nwNDSPacketCheckSumEnabled 18 nwNDSPacketSignatureLevel 19 nwDirectPrintEnabled 20 nwError 21 nwSapDisable')
bvGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvGroupVersion.setStatus('mandatory')
if mibBuilder.loadTexts: bvGroupVersion.setDescription('The version for the vines group.')
bvEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvEnabled.setStatus('optional')
if mibBuilder.loadTexts: bvEnabled.setDescription('Indicates whether or not the Banyan VINES protocol stack is enabled on the print server.')
bvRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvRestoreDefaults.setStatus('optional')
if mibBuilder.loadTexts: bvRestoreDefaults.setDescription('A value of 2 will restore all VINES parameters on the print server to factory defaults, as well as reset the device.')
bvFirmwareUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvFirmwareUpgrade.setStatus('optional')
if mibBuilder.loadTexts: bvFirmwareUpgrade.setDescription('A value of 2 will put the print server into firmware upgrade mode.')
bvSetSequenceRouting = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic-Routing", 1), ("force-Sequenced-Routing", 2), ("force-Non-Sequenced-Routing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvSetSequenceRouting.setStatus('optional')
if mibBuilder.loadTexts: bvSetSequenceRouting.setDescription('Sets the VINES Routing selection. Automatic - Utilizes Sequenced Routing if available, otherwise uses Non-Sequenced Routing. Force-Sequenced - Will only use Sequenced Routing. Force-Non-Sequenced - Will only use Non-Sequenced Routing In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this. WARNING - Sequential Routing requires a VINES 5.5 or greater server on the same subnet.')
bvDisableVPMan = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvDisableVPMan.setStatus('optional')
if mibBuilder.loadTexts: bvDisableVPMan.setDescription('A value of 2 will disable VPMan access to the print server for one minute.')
bvLoginName = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvLoginName.setStatus('optional')
if mibBuilder.loadTexts: bvLoginName.setDescription('The StreetTalk name the device will use to login with. This value will be OKIxxxxxxxx where xxxxxxx is the Serial number of the device if it is unconfigured. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
bvLoginPassword = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvLoginPassword.setStatus('optional')
if mibBuilder.loadTexts: bvLoginPassword.setDescription('The password for the login name, bvLoginName. This value cannot be read, just set. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
bvNumberPrintServices = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvNumberPrintServices.setStatus('optional')
if mibBuilder.loadTexts: bvNumberPrintServices.setDescription('The number of Print Services this device supports.')
bvPrintServiceTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 4, 4), )
if mibBuilder.loadTexts: bvPrintServiceTable.setStatus('optional')
if mibBuilder.loadTexts: bvPrintServiceTable.setDescription('Table of Print Services for this device.')
bvPrintServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 4, 4, 1), ).setIndexNames((0, "OKIDATA-MIB", "bvPrintServiceIndex"))
if mibBuilder.loadTexts: bvPrintServiceEntry.setStatus('optional')
if mibBuilder.loadTexts: bvPrintServiceEntry.setDescription('Print Services Table entry.')
bvPrintServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvPrintServiceIndex.setStatus('optional')
if mibBuilder.loadTexts: bvPrintServiceIndex.setDescription('A unique value for each print service.')
bvPrintServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 4, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvPrintServiceName.setStatus('optional')
if mibBuilder.loadTexts: bvPrintServiceName.setDescription('The StreetTalk Name for this Print Service. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
bvPrintServiceRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 4, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvPrintServiceRouting.setStatus('optional')
if mibBuilder.loadTexts: bvPrintServiceRouting.setDescription('The output port that the print service will print to. This value will range from 0 to the number of output ports, see outputNumPorts. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
bvPnicDescription = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvPnicDescription.setStatus('optional')
if mibBuilder.loadTexts: bvPnicDescription.setDescription('Contains the VINES PNIC description.')
bvError = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvError.setStatus('optional')
if mibBuilder.loadTexts: bvError.setDescription('Contains any VINES specific error information.')
bvRouting = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 32766, 32767))).clone(namedValues=NamedValues(("sequenced-Routing", 1), ("non-Sequenced-Routing", 2), ("unknown-Routing", 32766), ("protocol-Disabled", 32767)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvRouting.setStatus('optional')
if mibBuilder.loadTexts: bvRouting.setDescription('The current VINES Routing being used by the device.')
bvNumPrintServices = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvNumPrintServices.setStatus('optional')
if mibBuilder.loadTexts: bvNumPrintServices.setDescription('The number of Print Services this device supports.')
bvPrintServiceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4), )
if mibBuilder.loadTexts: bvPrintServiceStatusTable.setStatus('optional')
if mibBuilder.loadTexts: bvPrintServiceStatusTable.setDescription("Table of Print Service Status Entry's.")
bvPrintServiceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1), ).setIndexNames((0, "OKIDATA-MIB", "bvPSStatusIndex"))
if mibBuilder.loadTexts: bvPrintServiceStatusEntry.setStatus('optional')
if mibBuilder.loadTexts: bvPrintServiceStatusEntry.setDescription('Print Service Status Entry.')
bvPSStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvPSStatusIndex.setStatus('optional')
if mibBuilder.loadTexts: bvPSStatusIndex.setDescription('A unique value for each status entry.')
bvPSName = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvPSName.setStatus('optional')
if mibBuilder.loadTexts: bvPSName.setDescription('The StreetTalk Name for this Print Service.')
bvPSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvPSStatus.setStatus('optional')
if mibBuilder.loadTexts: bvPSStatus.setDescription('Print Service Status.')
bvPSDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvPSDestination.setStatus('optional')
if mibBuilder.loadTexts: bvPSDestination.setDescription('Port Destination for this print service.')
bvPrinterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvPrinterStatus.setStatus('optional')
if mibBuilder.loadTexts: bvPrinterStatus.setDescription('Printer status for this Print Service.')
bvJobActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvJobActive.setStatus('optional')
if mibBuilder.loadTexts: bvJobActive.setDescription('Whether there is a VINES job active for this print service.')
bvJobSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvJobSource.setStatus('optional')
if mibBuilder.loadTexts: bvJobSource.setDescription('The active print jobs source.')
bvJobTitle = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvJobTitle.setStatus('optional')
if mibBuilder.loadTexts: bvJobTitle.setDescription('The title of the active print job.')
bvJobSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvJobSize.setStatus('optional')
if mibBuilder.loadTexts: bvJobSize.setDescription('The size of the active print job.')
bvJobNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 3, 5, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvJobNumber.setStatus('optional')
if mibBuilder.loadTexts: bvJobNumber.setDescription('The VINES job number of the active print job.')
lmGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmGroupVersion.setStatus('mandatory')
if mibBuilder.loadTexts: lmGroupVersion.setDescription('The version for the lanManger group.')
lmEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmEnabled.setStatus('optional')
if mibBuilder.loadTexts: lmEnabled.setDescription('Indicates whether or not the Lan Manager protocol stack is enabled on the print server. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
eTalkGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkGroupVersion.setStatus('mandatory')
if mibBuilder.loadTexts: eTalkGroupVersion.setDescription('The version for the eTalk group.')
eTalkEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTalkEnabled.setStatus('optional')
if mibBuilder.loadTexts: eTalkEnabled.setDescription('Indicates whether or not the EtherTalk protocol stack is enabled on the print server. In order for changes to this variable to take effect, the print server must be reset. See cmdReset to do this.')
eTalkRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTalkRestoreDefaults.setStatus('optional')
if mibBuilder.loadTexts: eTalkRestoreDefaults.setDescription('A value of 2 will restore all EtherTalk parameters on the print server to factory defaults, as well as reset the print server.')
eTalkNetwork = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkNetwork.setStatus('optional')
if mibBuilder.loadTexts: eTalkNetwork.setDescription('Indicates the EtherTalk network number that the print server is currently using.')
eTalkNode = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkNode.setStatus('optional')
if mibBuilder.loadTexts: eTalkNode.setDescription('Indicates the EtherTalk node number that the print server is currently using.')
eTalkNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkNumPorts.setStatus('optional')
if mibBuilder.loadTexts: eTalkNumPorts.setDescription('Indicates the number of physical output ports that are EtherTalk compatible.')
eTalkPortTable = MibTable((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 4), )
if mibBuilder.loadTexts: eTalkPortTable.setStatus('optional')
if mibBuilder.loadTexts: eTalkPortTable.setDescription('A table of EtherTalk specific port configuration information.')
eTalkPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 4, 1), ).setIndexNames((0, "OKIDATA-MIB", "eTalkPortIndex"))
if mibBuilder.loadTexts: eTalkPortEntry.setStatus('optional')
if mibBuilder.loadTexts: eTalkPortEntry.setDescription('An entry of EtherTalk port specific information.')
eTalkPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkPortIndex.setStatus('optional')
if mibBuilder.loadTexts: eTalkPortIndex.setDescription("A unique value for each physical output port which is compatible with EtherTalk. Its value ranges between 1 and the value of eTalkNumPorts. The value for each port must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization.")
eTalkPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTalkPortEnable.setStatus('optional')
if mibBuilder.loadTexts: eTalkPortEnable.setDescription('Indicates whether or not the physical output port is enabled to print via EtherTalk and will show up in the Chooser.')
eTalkName = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTalkName.setStatus('optional')
if mibBuilder.loadTexts: eTalkName.setDescription('This is the EtherTalk name for the print server.')
eTalkActiveName = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkActiveName.setStatus('optional')
if mibBuilder.loadTexts: eTalkActiveName.setDescription('This is the EtherTalk name for the print server that is currently being used.')
eTalkType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTalkType1.setStatus('optional')
if mibBuilder.loadTexts: eTalkType1.setDescription('Indicates the first EtherTalk type. This type is mandatory.')
eTalkType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTalkType2.setStatus('optional')
if mibBuilder.loadTexts: eTalkType2.setDescription('Indicates the second EtherTalk type. This type is optional. Setting this name to NULL will disable it.')
eTalkZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTalkZone.setStatus('optional')
if mibBuilder.loadTexts: eTalkZone.setDescription('Indicates the EtherTalk zone. This must be defined on the router.')
eTalkActiveZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 4, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkActiveZone.setStatus('optional')
if mibBuilder.loadTexts: eTalkActiveZone.setDescription('Indicates the EtherTalk zone that is currently being used. This must be defined on the router.')
eTalkError = MibScalar((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6, 3, 5, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkError.setStatus('optional')
if mibBuilder.loadTexts: eTalkError.setDescription('Shows any errors for the EtherTalk protocol.')
trapPrinterOnline = NotificationType((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6) + (0,1)).setObjects(("OKIDATA-MIB", "outputIndex"))
if mibBuilder.loadTexts: trapPrinterOnline.setDescription('The printer is on-line. This trap will be sent out after a printer error condition has been cleared.')
trapPrinterOffline = NotificationType((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6) + (0,2)).setObjects(("OKIDATA-MIB", "outputIndex"))
if mibBuilder.loadTexts: trapPrinterOffline.setDescription('The printer is off-line.')
trapNoPrinterAttached = NotificationType((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6) + (0,3)).setObjects(("OKIDATA-MIB", "outputIndex"))
if mibBuilder.loadTexts: trapNoPrinterAttached.setDescription('No printer is attached to the output port.')
trapPrinterTonerLow = NotificationType((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6) + (0,4)).setObjects(("OKIDATA-MIB", "outputIndex"))
if mibBuilder.loadTexts: trapPrinterTonerLow.setDescription('The printer toner is low.')
trapPrinterPaperOut = NotificationType((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6) + (0,5)).setObjects(("OKIDATA-MIB", "outputIndex"))
if mibBuilder.loadTexts: trapPrinterPaperOut.setDescription('The printer is out of paper.')
trapPrinterPaperJam = NotificationType((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6) + (0,6)).setObjects(("OKIDATA-MIB", "outputIndex"))
if mibBuilder.loadTexts: trapPrinterPaperJam.setDescription('The printer has a paper jam.')
trapPrinterDoorOpen = NotificationType((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6) + (0,7)).setObjects(("OKIDATA-MIB", "outputIndex"))
if mibBuilder.loadTexts: trapPrinterDoorOpen.setDescription('The printer door is open.')
trapPrinterError = NotificationType((1, 3, 6, 1, 4, 1, 2001, 1, 2, 683, 6) + (0,16)).setObjects(("OKIDATA-MIB", "outputIndex"))
if mibBuilder.loadTexts: trapPrinterError.setDescription('General printer error.')
mibBuilder.exportSymbols("OKIDATA-MIB", psVerifyConfiguration=psVerifyConfiguration, cfgHdFirmVersion=cfgHdFirmVersion, cfg2PrinterVersion8=cfg2PrinterVersion8, usageTray=usageTray, cfg2Tray1Table=cfg2Tray1Table, cfg2PrintProcessControl=cfg2PrintProcessControl, stLcdMessage=stLcdMessage, cfgEmulationEntry=cfgEmulationEntry, tcpipStatus=tcpipStatus, outputTotalJobEntry=outputTotalJobEntry, nwError=nwError, cfgEscpCrFunction=cfgEscpCrFunction, outputIndex=outputIndex, cfgOkiMediaSourceTray2=cfgOkiMediaSourceTray2, cfgPersonality=cfgPersonality, trapPrinterOnline=trapPrinterOnline, tcpipTimeoutChecking=tcpipTimeoutChecking, nwNDSPacketSignatureLevel=nwNDSPacketSignatureLevel, eTalkConfigure=eTalkConfigure, cfgIbmpprLeftMargine=cfgIbmpprLeftMargine, outputNumLogEntries=outputNumLogEntries, cfgRs232c=cfgRs232c, usageBeltIndex=usageBeltIndex, outputHandshake=outputHandshake, cfg2Tray4Legal14PaperCurrentValue=cfg2Tray4Legal14PaperCurrentValue, tcpipCapabilities=tcpipCapabilities, cfg2UnitOfMeasure=cfg2UnitOfMeasure, outputStatus=outputStatus, cfg2Tray3MediaWeightCurrentValue=cfg2Tray3MediaWeightCurrentValue, driverChecksumErrors=driverChecksumErrors, cfg2PrinterVersion8Table=cfg2PrinterVersion8Table, nwTrapIndex=nwTrapIndex, eTalkStatus=eTalkStatus, outputProtocolManager=outputProtocolManager, tcpipPOP3Password=tcpipPOP3Password, usageFuser=usageFuser, psVendor=psVendor, stOnlineLedStatus=stOnlineLedStatus, cfg2PrinterVersion5=cfg2PrinterVersion5, nwPortEntry=nwPortEntry, tokenRing=tokenRing, cfg2Tray7A5A6PaperCurrentValue=cfg2Tray7A5A6PaperCurrentValue, cfgOkiPaperFeed=cfgOkiPaperFeed, cfg2PrinterConsumption=cfg2PrinterConsumption, nwPortFormsOn=nwPortFormsOn, cfg2Tray2Legal14Paper=cfg2Tray2Legal14Paper, cfg2PrinterVersion10Table=cfg2PrinterVersion10Table, tcpipSecurityEntry=tcpipSecurityEntry, niptype1=niptype1, cfg2Tray1A3Paper=cfg2Tray1A3Paper, cfgPsFirmVersion=cfgPsFirmVersion, cfgEscpCharacterSet=cfgEscpCharacterSet, cfgAutoCont=cfgAutoCont, genMIBVersion=genMIBVersion, cfgEpsonfxSymbolSet=cfgEpsonfxSymbolSet, cfgEmulationIndex=cfgEmulationIndex, outputExtendedStatus=outputExtendedStatus, cfg2TrayA3Paper=cfg2TrayA3Paper, cfg2PPCFusingControl=cfg2PPCFusingControl, trPriority=trPriority, genProductName=genProductName, bvGroupVersion=bvGroupVersion, bvError=bvError, cfgOkiCustomPaperLength=cfgOkiCustomPaperLength, tcpipMLPTCPPort=tcpipMLPTCPPort, tcpipSmtpEmailAddr=tcpipSmtpEmailAddr, cfgPclFirmVersion=cfgPclFirmVersion, stServiceLedStatus=stServiceLedStatus, cfgEscpKanjiFont=cfgEscpKanjiFont, printServers=printServers, cfgHiperwPrintSpeed=cfgHiperwPrintSpeed, eTalkEnabled=eTalkEnabled, eTalkGroupVersion=eTalkGroupVersion, cfg2Binding=cfg2Binding, cfgEpsonfxFormLength=cfgEpsonfxFormLength, nwGroupVersion=nwGroupVersion, stPsStatus=stPsStatus, cfg2PrinterVersion6=cfg2PrinterVersion6, tcpipUsingNetProtocols=tcpipUsingNetProtocols, genCompanyLoc=genCompanyLoc, tcpipTrapEntry=tcpipTrapEntry, tcpipSecurityIndex=tcpipSecurityIndex, cfg2Tray1Legal14Paper=cfg2Tray1Legal14Paper, genProductNumber=genProductNumber, cfgEngineFirmVersion=cfgEngineFirmVersion, outputJobLogTime=outputJobLogTime, cfg2XDimensionCurrentValue=cfg2XDimensionCurrentValue, genCompanyPhone=genCompanyPhone, tcpipTrapIndex=tcpipTrapIndex, cmdPrintConfig=cmdPrintConfig, outputPSString=outputPSString, bvNumberPrintServices=bvNumberPrintServices, tcpipPOP3PollInterval=tcpipPOP3PollInterval, cfgRs232cStopBits=cfgRs232cStopBits, cfg2OPPanelLockCurrentValue=cfg2OPPanelLockCurrentValue, nwPrintServerName=nwPrintServerName, cfg2Tray4Legal14Paper=cfg2Tray4Legal14Paper, usageBeltTable=usageBeltTable, bvStatus=bvStatus, cfgEpsonfxCharacterSet=cfgEpsonfxCharacterSet, cfgPclFontSource=cfgPclFontSource, peripheral=peripheral, cfg2PowerSaveShift=cfg2PowerSaveShift, genHWAddress=genHWAddress, nwTrapEntry=nwTrapEntry, cfgOkiPrintErrors=cfgOkiPrintErrors, cfg2PHInput=cfg2PHInput, cfgIbmpprSymbolSet=cfgIbmpprSymbolSet, cfgBinding=cfgBinding, tcpipSecureEndIPAddress=tcpipSecureEndIPAddress, nwPortTable=nwPortTable, usageTrayTable=usageTrayTable, cfgEmulationTable=cfgEmulationTable, genProtocolID=genProtocolID, snmpPrinter2TrapMaskUsed=snmpPrinter2TrapMaskUsed, cfgOkiAutoTraySwitch=cfgOkiAutoTraySwitch, cfg2BindingCurrentValue=cfg2BindingCurrentValue, cfgOkiMediaInTray4=cfgOkiMediaInTray4, cfgOkiMagentaDarkness=cfgOkiMagentaDarkness, eTalkRestoreDefaults=eTalkRestoreDefaults, cfgIbmpprLfFunction=cfgIbmpprLfFunction, cfgPlacePage=cfgPlacePage, usageDrumTable=usageDrumTable, tcpipWebCustomLinkName=tcpipWebCustomLinkName, cfg2Tray4A3Paper=cfg2Tray4A3Paper, genSerialNumber=genSerialNumber, cfg2PrinterInformation=cfg2PrinterInformation, usageTonerDescription=usageTonerDescription, driverGroupVersion=driverGroupVersion, cfgEpsonfxLetterOStyle=cfgEpsonfxLetterOStyle, psGroupVersion=psGroupVersion, cfg2XDimension=cfg2XDimension, tcpipSecureAdminEnabled=tcpipSecureAdminEnabled, cfgRs422Baud=cfgRs422Baud, cfg2Tray7A3PaperCurrentValue=cfg2Tray7A3PaperCurrentValue, stPjlStatus=stPjlStatus, nwStatus=nwStatus, trEarlyTokenRelease=trEarlyTokenRelease, cfg2Tray5Legal14Paper=cfg2Tray5Legal14Paper, bvCommands=bvCommands, cfg2TrayA5A6Paper=cfg2TrayA5A6Paper, cfgTrayIndex=cfgTrayIndex, snmpTrapMaskString=snmpTrapMaskString, cfg2PrinterVersion7=cfg2PrinterVersion7, tcpipEnabled=tcpipEnabled, cfg2PrinterVersion1=cfg2PrinterVersion1, nwFrameFormat=nwFrameFormat, bvPrintServiceRouting=bvPrintServiceRouting, usageDrumEntry=usageDrumEntry, outputNumPorts=outputNumPorts, outputPrinter=outputPrinter, okipsSNMP=okipsSNMP, usageFuserIndex=usageFuserIndex, nwQueueScanTime=nwQueueScanTime, cfgRs422StopBits=cfgRs422StopBits, inkjet=inkjet, cfg2Tray1Legal14PaperCurrentValue=cfg2Tray1Legal14PaperCurrentValue, outputEntry=outputEntry, cfg2PrinterVersions=cfg2PrinterVersions, eTalkNetwork=eTalkNetwork, cfg2Type1MIBVersion=cfg2Type1MIBVersion, outputJobLogTable=outputJobLogTable, cfgPclxlFirmVersion=cfgPclxlFirmVersion, usageTonerMaxLevel=usageTonerMaxLevel, genProtocolTable=genProtocolTable, cfgOkiJamRecovery=cfgOkiJamRecovery, tcpipPOP3ServerAddress=tcpipPOP3ServerAddress, driverRXPacketsUnavailable=driverRXPacketsUnavailable, cfg2Test=cfg2Test, cfg2Menu=cfg2Menu, psGeneral=psGeneral, usageTonerLevelUnit=usageTonerLevelUnit, usageDrumMaxLevel=usageDrumMaxLevel, genGroupVersion=genGroupVersion, cfgEscpZeroCharacter=cfgEscpZeroCharacter, cfg2Tray3A5A6PaperCurrentValue=cfg2Tray3A5A6PaperCurrentValue, cfg2MonoPrintSpeedCurrentValue=cfg2MonoPrintSpeedCurrentValue, tcpip=tcpip, cfgEpsonfxLeftMargine=cfgEpsonfxLeftMargine, cfgOkiMediaInTray1=cfgOkiMediaInTray1, cfg2Tray2A3Paper=cfg2Tray2A3Paper, cfg2Tray4PaperSizeCurrentValue=cfg2Tray4PaperSizeCurrentValue, tcpipConfigure=tcpipConfigure, nwNetworkNumber=nwNetworkNumber, snmpPrinterTrapMaskUsed=snmpPrinterTrapMaskUsed, cfg2PrinterVersion2Table=cfg2PrinterVersion2Table, tcpipSubnetMask=tcpipSubnetMask, cfg2Tray4A5A6PaperCurrentValue=cfg2Tray4A5A6PaperCurrentValue, cfg2Tray2Legal14PaperCurrentValue=cfg2Tray2Legal14PaperCurrentValue, cfg2Tray4MediaWeightCurrentValue=cfg2Tray4MediaWeightCurrentValue, cfg2Tray5A5A6PaperCurrentValue=cfg2Tray5A5A6PaperCurrentValue, cfgTrayEntry=cfgTrayEntry, tcpipDisplayMask=tcpipDisplayMask, bvJobActive=bvJobActive, bvPSName=bvPSName, usageBeltMaxLevel=usageBeltMaxLevel, nwNDSPreferredDSFileServer=nwNDSPreferredDSFileServer, cfg2Tray3A3PaperCurrentValue=cfg2Tray3A3PaperCurrentValue, cfgLang=cfgLang, outputPrinterDisplay=outputPrinterDisplay, bvRestoreDefaults=bvRestoreDefaults, nwSetFrameFormat=nwSetFrameFormat, tcpipSecurePrinterMask=tcpipSecurePrinterMask, cfg2ControltCurrentValue=cfg2ControltCurrentValue, cfg2PrinterVersion3Table=cfg2PrinterVersion3Table, cfgEscpAnkFont=cfgEscpAnkFont, usageFuserTable=usageFuserTable, snmpTrapMaskIndex=snmpTrapMaskIndex, nwTrapTable=nwTrapTable, cfgTrayName=cfgTrayName, cfgIbmpprFontCondense=cfgIbmpprFontCondense, tcpipBootProtocolsEnabled=tcpipBootProtocolsEnabled, bvSetSequenceRouting=bvSetSequenceRouting, bvPrintServiceStatusEntry=bvPrintServiceStatusEntry, genDateCode=genDateCode, cfg2Tray1MediaTypeCurrentValue=cfg2Tray1MediaTypeCurrentValue, cfgUsb=cfgUsb, cfg2MonoPrintSpeed=cfg2MonoPrintSpeed, tcpipWebAdminPassword=tcpipWebAdminPassword, cfg2PrinterType=cfg2PrinterType, cfgIntray2=cfgIntray2, trLocallyAdminAddr=trLocallyAdminAddr, cfgEpsonfxTofPosition=cfgEpsonfxTofPosition, trGroupVersion=trGroupVersion, tcpipSecureStartIPAddress=tcpipSecureStartIPAddress, cfg2Tray2PaperSizeCurrentValue=cfg2Tray2PaperSizeCurrentValue, genNumProtocols=genNumProtocols, cfgPclOkiCrFunction=cfgPclOkiCrFunction, cfgInTray4Size=cfgInTray4Size, cfgHiperwOkiReverse=cfgHiperwOkiReverse, cfgInTray3Size=cfgInTray3Size, cfg2Tray4MediaType=cfg2Tray4MediaType, cfgRet=cfgRet, nwJAConfig=nwJAConfig, cfgDensity=cfgDensity, usagePrinterUnit=usagePrinterUnit, outputPrinterModel=outputPrinterModel, cfgMptray=cfgMptray, cfg2PPCTonerControl=cfg2PPCTonerControl, cfg2YDimensionCurrentValue=cfg2YDimensionCurrentValue, nwFileServerName=nwFileServerName, trapPrinterOffline=trapPrinterOffline, cfgOkiPaperSizeCheck=cfgOkiPaperSizeCheck, cfgPclPitch=cfgPclPitch, cfgIntray1=cfgIntray1, nwNDSPreferredDSTree=nwNDSPreferredDSTree, nwPortPrinterNumber=nwPortPrinterNumber, cfgOkiUser=cfgOkiUser, snmpRestoreDefaults=snmpRestoreDefaults, cfg2Tray5MediaWeight=cfg2Tray5MediaWeight, driverRXPacketErrors=driverRXPacketErrors, outputCommandsEntry=outputCommandsEntry, nwPortIndex=nwPortIndex, bvJobTitle=bvJobTitle)
mibBuilder.exportSymbols("OKIDATA-MIB", cfgOkiCustomPaperWidth=cfgOkiCustomPaperWidth, usageTrayCounter=usageTrayCounter, outputBIDIStatusEnabled=outputBIDIStatusEnabled, tcpipWinsAddressSource=tcpipWinsAddressSource, cfg2Tray3Table=cfg2Tray3Table, cfgOkiColorAdjustMagenta=cfgOkiColorAdjustMagenta, cfg2PPCPrintPositionControl=cfg2PPCPrintPositionControl, cfg2Tray5PaperSizeCurrentValue=cfg2Tray5PaperSizeCurrentValue, cfgOkiPriorityTray=cfgOkiPriorityTray, cfgCopies=cfgCopies, cfg2JobOffset=cfg2JobOffset, cfg2PrinterVersion9=cfg2PrinterVersion9, netware=netware, cfgIbmpprCharacterPitch=cfgIbmpprCharacterPitch, cfgHiperwOkiDensity=cfgHiperwOkiDensity, cfgOkiColorAdjustYellow=cfgOkiColorAdjustYellow, cfg2Tray1A5A6PaperCurrentValue=cfg2Tray1A5A6PaperCurrentValue, cfgManualFeed=cfgManualFeed, outputJobLogInformation=outputJobLogInformation, cfgOkiColorAdjustPrint=cfgOkiColorAdjustPrint, cfg2Tray3MediaType=cfg2Tray3MediaType, bvPrintServiceTable=bvPrintServiceTable, cfgNetwork=cfgNetwork, cfgInTray2Size=cfgInTray2Size, cfg2PrinterVersion7Table=cfg2PrinterVersion7Table, cfg=cfg, cfgIbmpprLetterOStyle=cfgIbmpprLetterOStyle, trRestoreDefaults=trRestoreDefaults, eTalkCommands=eTalkCommands, cfgOkiReceiveBuffer=cfgOkiReceiveBuffer, nwCommands=nwCommands, cfgPageProtect=cfgPageProtect, cfg2Emulation=cfg2Emulation, cfgEpsonfxWhitePageSkip=cfgEpsonfxWhitePageSkip, cfg2PPCColor=cfg2PPCColor, cfg2Tray7A3Paper=cfg2Tray7A3Paper, cfgPclSymSet=cfgPclSymSet, tcpipError=tcpipError, cfg2PHOutput=cfg2PHOutput, cfg2Tray4MediaTypeCurrentValue=cfg2Tray4MediaTypeCurrentValue, cfg2PrinterVersion2=cfg2PrinterVersion2, tcpipWebHtttpPort=tcpipWebHtttpPort, nwPortNotification=nwPortNotification, tcpipWebAdminName=tcpipWebAdminName, tcpipConfigPassword=tcpipConfigPassword, tcpipRestoreDefaults=tcpipRestoreDefaults, outputTotalJobIndex=outputTotalJobIndex, nwEnabled=nwEnabled, cfg2Tray2MediaWeight=cfg2Tray2MediaWeight, tcpipSmtpServerAddr=tcpipSmtpServerAddr, eTalkActiveName=eTalkActiveName, cfg2LRCommon=cfg2LRCommon, cfg2PPCDrumControl=cfg2PPCDrumControl, cfg2PowerSaveCurrentValue=cfg2PowerSaveCurrentValue, cfg2=cfg2, cfg2Tray3MediaTypeCurrentValue=cfg2Tray3MediaTypeCurrentValue, genSysUpTimeString=genSysUpTimeString, bvPSStatusIndex=bvPSStatusIndex, eTalkNumPorts=eTalkNumPorts, cfgManualTimeOut=cfgManualTimeOut, bvLoginPassword=bvLoginPassword, cfgEmulationName=cfgEmulationName, cfg2PrinterVersion10=cfg2PrinterVersion10, cfgInTray5Size=cfgInTray5Size, cfg2Tray3PaperSizeCurrentValue=cfg2Tray3PaperSizeCurrentValue, tcpipNumSecurity=tcpipNumSecurity, cfg2LocalResources=cfg2LocalResources, usageDrumCurrentLevel=usageDrumCurrentLevel, cfg2Tray6Legal14Paper=cfg2Tray6Legal14Paper, cfgInTray1Size=cfgInTray1Size, cfg2Tray6MediaWeightCurrentValue=cfg2Tray6MediaWeightCurrentValue, cfg2Tray2MediaTypeCurrentValue=cfg2Tray2MediaTypeCurrentValue, usageBeltCurrentLevel=usageBeltCurrentLevel, cfg2JobOffsetCurrentValue=cfg2JobOffsetCurrentValue, cfgOkiJobSwitch=cfgOkiJobSwitch, cfg2Duplex=cfg2Duplex, outputTotalJobsLogged=outputTotalJobsLogged, usage=usage, cfgRs422DataBits=cfgRs422DataBits, cfgRs422Parity=cfgRs422Parity, cfg2Tray2MediaType=cfg2Tray2MediaType, tcpipSmtpProtocolMask=tcpipSmtpProtocolMask, cfgRs422=cfgRs422, usageOil=usageOil, cfgOkiMediaSourceTray3=cfgOkiMediaSourceTray3, tcpipMLPPostString=tcpipMLPPostString, cfg2Tray7MediaWeight=cfg2Tray7MediaWeight, cfgIbmpprCharacterSet=cfgIbmpprCharacterSet, bvConfigure=bvConfigure, outputConfigure=outputConfigure, usageTonerIndex=usageTonerIndex, psMibVersion=psMibVersion, cfgOkiYAdjust=cfgOkiYAdjust, tcpipWebCustomLinkURL=tcpipWebCustomLinkURL, cfg2Tray2A5A6PaperCurrentValue=cfg2Tray2A5A6PaperCurrentValue, cfg2OutputBinCurrentValue=cfg2OutputBinCurrentValue, genProtocolEntry=genProtocolEntry, cfgOkiRasterBuffer=cfgOkiRasterBuffer, bvJobSize=bvJobSize, nwDisableSAP=nwDisableSAP, cfgEpsonfxCharacterPitch=cfgEpsonfxCharacterPitch, cfgPrinterName=cfgPrinterName, cfg2Tray5A5A6Paper=cfg2Tray5A5A6Paper, eTalkType1=eTalkType1, cfg2Tray5MediaWeightCurrentValue=cfg2Tray5MediaWeightCurrentValue, driverRXPackets=driverRXPackets, cfgFormLines=cfgFormLines, cfg2Tray2MediaWeightCurrentValue=cfg2Tray2MediaWeightCurrentValue, cfgRs232cDataBits=cfgRs232cDataBits, nwPrintServerPassword=nwPrintServerPassword, eTalkActiveZone=eTalkActiveZone, cfg2Tray5Legal14PaperCurrentValue=cfg2Tray5Legal14PaperCurrentValue, cfgOkiMediaInTray3=cfgOkiMediaInTray3, nwPrinterTrapMask=nwPrinterTrapMask, okidata=okidata, cfg2Tray6Table=cfg2Tray6Table, cfg2Tray6A3Paper=cfg2Tray6A3Paper, nwConfigure=nwConfigure, cfgOkiXAdjust=cfgOkiXAdjust, cfg2PrinterVersion1Table=cfg2PrinterVersion1Table, cfg2Tray6A5A6PaperCurrentValue=cfg2Tray6A5A6PaperCurrentValue, usageTonerCurrentLevel=usageTonerCurrentLevel, cfg2Tray7Legal14PaperCurrentValue=cfg2Tray7Legal14PaperCurrentValue, usageWasteToner=usageWasteToner, tcpipArpInterval=tcpipArpInterval, cfg2Tray7PaperSize=cfg2Tray7PaperSize, cfg2Tray1A3PaperCurrentValue=cfg2Tray1A3PaperCurrentValue, cfg2Tray4A5A6Paper=cfg2Tray4A5A6Paper, snmpTrapEntry=snmpTrapEntry, cfg2Tray3A3Paper=cfg2Tray3A3Paper, cfg2Tray1PaperSize=cfg2Tray1PaperSize, nwPortPCLQueue=nwPortPCLQueue, usageBelt=usageBelt, snmpGetCommunityName=snmpGetCommunityName, eTalkPortEntry=eTalkPortEntry, bvJobSource=bvJobSource, psOutput=psOutput, cfg2Tray5Table=cfg2Tray5Table, tcpipWebUpdateURL=tcpipWebUpdateURL, cfgIbmpprLineLength=cfgIbmpprLineLength, outputJobLog=outputJobLog, outputOwner=outputOwner, trRouting=trRouting, general=general, trapPrinterPaperJam=trapPrinterPaperJam, cfg2StoragePartitionIndex=cfg2StoragePartitionIndex, cfg2LRHdd=cfg2LRHdd, cfgRs232cParity=cfgRs232cParity, nwPortFontDownload=nwPortFontDownload, okips=okips, nwRestoreDefaults=nwRestoreDefaults, bvPSDestination=bvPSDestination, cfg2PrinterVersion9Table=cfg2PrinterVersion9Table, cfgPclFontNumber=cfgPclFontNumber, cfgIbmpprCrFunction=cfgIbmpprCrFunction, cfgEpsonfxCrFunction=cfgEpsonfxCrFunction, cfg2AutoRegistration=cfg2AutoRegistration, cfg2Tray5MediaType=cfg2Tray5MediaType, cfg2JamRecovery=cfg2JamRecovery, usagePrinterUnitCounter=usagePrinterUnitCounter, cfg2Tray3A5A6Paper=cfg2Tray3A5A6Paper, nwDisplayMask=nwDisplayMask, tcpipNumLogicalPrinters=tcpipNumLogicalPrinters, cmdRestoreDefaults=cmdRestoreDefaults, tcpipCommands=tcpipCommands, snmpSetCommunityName=snmpSetCommunityName, stManualLedStatus=stManualLedStatus, psProtocols=psProtocols, trConfigure=trConfigure, tcpipWinsAddress=tcpipWinsAddress, bvEnabled=bvEnabled, bvRouting=bvRouting, cfgOkiEcp=cfgOkiEcp, nip=nip, commands=commands, nwFileServerConnectionStatus=nwFileServerConnectionStatus, usageTonerEntry=usageTonerEntry, nwNDSPacketCheckSumEnabled=nwNDSPacketCheckSumEnabled, usageTrayEntry=usageTrayEntry, bvPrintServiceName=bvPrintServiceName, cfgIbmpprFormLength=cfgIbmpprFormLength, outputCancelCurrentJob=outputCancelCurrentJob, cfg2StoragePartitionFree=cfg2StoragePartitionFree, tcpipRawPortNumber=tcpipRawPortNumber, nwDirectPrintEnabled=nwDirectPrintEnabled, nwPortStatus=nwPortStatus, trCommands=trCommands, cfgIntray3=cfgIntray3, cfgEconoMode=cfgEconoMode, usagePrinterUnitIndex=usagePrinterUnitIndex, driverTXPacketRetries=driverTXPacketRetries, trapPrinterError=trapPrinterError, niptype2=niptype2, cfgClearableWarnings=cfgClearableWarnings, cfg2Tray4A3PaperCurrentValue=cfg2Tray4A3PaperCurrentValue, cmdGroupVersion=cmdGroupVersion, cfg2PowerSave=cfg2PowerSave, cfg2TrayLegal14Paper=cfg2TrayLegal14Paper, genVersion=genVersion, tcpipMLPEntry=tcpipMLPEntry, cfg2OutputBin=cfg2OutputBin, eTalkPortEnable=eTalkPortEnable, tcpipTrapDestination=tcpipTrapDestination, nwFileServerEntry=nwFileServerEntry, usagePrinterUnitEntry=usagePrinterUnitEntry, cfg2Tray5A3Paper=cfg2Tray5A3Paper, cfg2Tray1MediaWeight=cfg2Tray1MediaWeight, outputRestoreDefaults=outputRestoreDefaults, cfgPclOkiA4PrintWidth=cfgPclOkiA4PrintWidth, cfgHiperwOkiFirstbit=cfgHiperwOkiFirstbit, eTalkPortTable=eTalkPortTable, trapPrinterTonerLow=trapPrinterTonerLow, cfg2ModelId=cfg2ModelId, usageDrum=usageDrum, nwPortFormNumber=nwPortFormNumber, tcpipPOP3UserName=tcpipPOP3UserName, cfg2PrinterVersion3=cfg2PrinterVersion3, driverTXPackets=driverTXPackets, usagePrinterUnitCounterLife=usagePrinterUnitCounterLife, outputCapabilities=outputCapabilities, outputStatusString=outputStatusString, cfg2Tray2PaperSize=cfg2Tray2PaperSize, cfg2YDimension=cfg2YDimension, cfg2Tray4Table=cfg2Tray4Table, tcpipSmtpOutputMask=tcpipSmtpOutputMask, nwMode=nwMode, cfg2Tray6A3PaperCurrentValue=cfg2Tray6A3PaperCurrentValue, tcpipMLPName=tcpipMLPName, tcpipIPAddressServerAddress=tcpipIPAddressServerAddress, nwPrinter2TrapMask=nwPrinter2TrapMask, cfgLocalTalk=cfgLocalTalk, tcpipMLPDeleteBytes=tcpipMLPDeleteBytes, cfg2Tray7MediaWeightCurrentValue=cfg2Tray7MediaWeightCurrentValue, nwTrapDestinationNet=nwTrapDestinationNet, cfgMessageVersion=cfgMessageVersion, eTalkName=eTalkName, cfg2DuplexCurrentValue=cfg2DuplexCurrentValue, cfgEscpLineLength=cfgEscpLineLength, cfg2Tray6MediaTypeCurrentValue=cfg2Tray6MediaTypeCurrentValue, cfgIbmpprWhitePageSkip=cfgIbmpprWhitePageSkip, snmpTrapMaskTable=snmpTrapMaskTable, snmpTrapCommunityName=snmpTrapCommunityName, cfgBiDirection=cfgBiDirection, psJetAdminEnabled=psJetAdminEnabled, tcpipSmtpIndex=tcpipSmtpIndex, outputCommands=outputCommands, tcpipLowBandwidth=tcpipLowBandwidth, stOnline=stOnline, usageFuserCurrentLevel=usageFuserCurrentLevel, driver=driver, cfgDuplex=cfgDuplex, bvJobNumber=bvJobNumber, cfg2Tray2Table=cfg2Tray2Table, genProtocolIndex=genProtocolIndex)
mibBuilder.exportSymbols("OKIDATA-MIB", cfg2UnitOfMeasureCurrentValue=cfg2UnitOfMeasureCurrentValue, cfgPaper=cfgPaper, cfg2Tray3PaperSize=cfg2Tray3PaperSize, cfgOkiBlackDarkness=cfgOkiBlackDarkness, tcpipMLPTable=tcpipMLPTable, tcpipWebUserName=tcpipWebUserName, cfg2PriorityTray=cfg2PriorityTray, cfg2Tray5PaperSize=cfg2Tray5PaperSize, tcpipNumTraps=tcpipNumTraps, cfg2PriorityTrayCurrentValue=cfg2PriorityTrayCurrentValue, cfgEscpZoom=cfgEscpZoom, cfgOkiMediaInTray2=cfgOkiMediaInTray2, cfg2Tray7MediaTypeCurrentValue=cfg2Tray7MediaTypeCurrentValue, cfg2StoragePartitionTable=cfg2StoragePartitionTable, usageTonerTable=usageTonerTable, tcpipFirmwareUpgrade=tcpipFirmwareUpgrade, cfgResolution=cfgResolution, genCompanyName=genCompanyName, usageBeltEntry=usageBeltEntry, tcpipWebUserPassword=tcpipWebUserPassword, lmEnabled=lmEnabled, usageFuserEntry=usageFuserEntry, cfgPrintProtect=cfgPrintProtect, outputName=outputName, tcpipDomainName=tcpipDomainName, cfg2Tray6PaperSizeCurrentValue=cfg2Tray6PaperSizeCurrentValue, tcpipPrinterTrapMask=tcpipPrinterTrapMask, stat=stat, nwFileServerTable=nwFileServerTable, bvLoginName=bvLoginName, cfg2PowerSaveShiftCurrentValue=cfg2PowerSaveShiftCurrentValue, bvPSStatus=bvPSStatus, tcpipMLPPort=tcpipMLPPort, trapPrinterDoorOpen=trapPrinterDoorOpen, cfg2TrayTable=cfg2TrayTable, cfg2PrinterVersion4Table=cfg2PrinterVersion4Table, cfg2Tray4PaperSize=cfg2Tray4PaperSize, cfgIbmpprTofPosition=cfgIbmpprTofPosition, cfg2Tray5MediaTypeCurrentValue=cfg2Tray5MediaTypeCurrentValue, tcpipGroupVersion=tcpipGroupVersion, cfgOkiYellowDarkness=cfgOkiYellowDarkness, outputTable=outputTable, cfg2JamRecoveryCurrentValue=cfg2JamRecoveryCurrentValue, outputDisplayMask=outputDisplayMask, cfgOkiAutoEject=cfgOkiAutoEject, vines=vines, usagePrinterUnitTable=usagePrinterUnitTable, outputJobLogEntry=outputJobLogEntry, tcpipSecurityTable=tcpipSecurityTable, nwPortPSQueue=nwPortPSQueue, cfg2Tray5A3PaperCurrentValue=cfg2Tray5A3PaperCurrentValue, eTalk=eTalk, cfg2Tray3Legal14PaperCurrentValue=cfg2Tray3Legal14PaperCurrentValue, cfg2Tray7A5A6Paper=cfg2Tray7A5A6Paper, tcpipSmtpTable=tcpipSmtpTable, eTalkError=eTalkError, cfg2HostInterface=cfg2HostInterface, bvDisableVPMan=bvDisableVPMan, nwMaxFileServers=nwMaxFileServers, tcpipSmtpPrinterMask=tcpipSmtpPrinterMask, lanManager=lanManager, cfgOkiPowerSaving=cfgOkiPowerSaving, cfgRs232cFlowControl=cfgRs232cFlowControl, cfg2LRMemory=cfg2LRMemory, cfgEscpAutoLf=cfgEscpAutoLf, cfgOrientation=cfgOrientation, genCableType=genCableType, printserver=printserver, cfg2Tray6Legal14PaperCurrentValue=cfg2Tray6Legal14PaperCurrentValue, usageTrayMaxLevel=usageTrayMaxLevel, trPacketSize=trPacketSize, cfg2Tray7PaperSizeCurrentValue=cfg2Tray7PaperSizeCurrentValue, tcpipMLPPreString=tcpipMLPPreString, nwTrapDestination=nwTrapDestination, cfgIbmpprLinePitch=cfgIbmpprLinePitch, printer=printer, cmdReset=cmdReset, fax=fax, nwNumTraps=nwNumTraps, bvPrintServiceEntry=bvPrintServiceEntry, cfg2Tray3MediaWeight=cfg2Tray3MediaWeight, cfg2PrinterVersion5Table=cfg2PrinterVersion5Table, outputPCLString=outputPCLString, cfgOkiQuietMode=cfgOkiQuietMode, cfg2Controlt=cfg2Controlt, genCompanyTechSupport=genCompanyTechSupport, lmGroupVersion=lmGroupVersion, trapNoPrinterAttached=trapNoPrinterAttached, cfg2PrinterVersion6Table=cfg2PrinterVersion6Table, cfgOkiMediaInTray5=cfgOkiMediaInTray5, cfg2PPCLEDHeadControl=cfg2PPCLEDHeadControl, snmpGroupVersion=snmpGroupVersion, cfg2Tray3Legal14Paper=cfg2Tray3Legal14Paper, cfg2OPPanelLock=cfg2OPPanelLock, cfg2StoragePartitionEntry=cfg2StoragePartitionEntry, cfgLowToner=cfgLowToner, cfg2AutoRegistrationCurrentValue=cfg2AutoRegistrationCurrentValue, cfgFirmCpuVersion=cfgFirmCpuVersion, tcpipDefaultGateway=tcpipDefaultGateway, driverTXPacketErrors=driverTXPacketErrors, tcpipTimeoutCheckingValue=tcpipTimeoutCheckingValue, cfg2PrinterVersion4=cfg2PrinterVersion4, cfgParallel=cfgParallel, nwNDSPrintServerName=nwNDSPrintServerName, cfgEscpTofPosition=cfgEscpTofPosition, okipsSNMPCommands=okipsSNMPCommands, eTalkZone=eTalkZone, okipsSNMPTrapMasks=okipsSNMPTrapMasks, tcpipTrapTable=tcpipTrapTable, outputAvailableTrapsMask=outputAvailableTrapsMask, cfgParallelSpeed=cfgParallelSpeed, cfgOkiColorAdjustCyan=cfgOkiColorAdjustCyan, bvPrinterStatus=bvPrinterStatus, cfg2Tray6MediaWeight=cfg2Tray6MediaWeight, outputCommandsTable=outputCommandsTable, cfg2Tray6PaperSize=cfg2Tray6PaperSize, tcpipMLPIndex=tcpipMLPIndex, eTalkType2=eTalkType2, cfgOkiDuplexAdjust=cfgOkiDuplexAdjust, cfgTrayTable=cfgTrayTable, cfg2Tray6A5A6Paper=cfg2Tray6A5A6Paper, cfg2Tray1MediaType=cfg2Tray1MediaType, cfg2Tray2A5A6Paper=cfg2Tray2A5A6Paper, outputLanguageSwitching=outputLanguageSwitching, nwAvailablePrintModes=nwAvailablePrintModes, cfg2General=cfg2General, cfg2PHCommon=cfg2PHCommon, eTalkNode=eTalkNode, cfg2Tray1PaperSizeCurrentValue=cfg2Tray1PaperSizeCurrentValue, bvFirmwareUpgrade=bvFirmwareUpgrade, cfgPclPtSize=cfgPclPtSize, tcpipWebFaqURL=tcpipWebFaqURL, cfg2Tray7MediaType=cfg2Tray7MediaType, cfg2JobControl=cfg2JobControl, stOperatorLedStatus=stOperatorLedStatus, nwFileServerIndex=nwFileServerIndex, outputGroupVersion=outputGroupVersion, tcpipNumSmtpDestinations=tcpipNumSmtpDestinations, genProtocolDescr=genProtocolDescr, cfgEpsonfxLineLength=cfgEpsonfxLineLength, cfgSidmFirmVersion=cfgSidmFirmVersion, cfg2Tray4MediaWeight=cfg2Tray4MediaWeight, usageToner=usageToner, usageTrayIndex=usageTrayIndex, cfg2Tray2A3PaperCurrentValue=cfg2Tray2A3PaperCurrentValue, bvPnicDescription=bvPnicDescription, cfgRs232cBaud=cfgRs232cBaud, bvPrintServiceIndex=bvPrintServiceIndex, cfgOkiFontProtection=cfgOkiFontProtection, cfgOkiMediaSourceFront=cfgOkiMediaSourceFront, usageDrumIndex=usageDrumIndex, bvPrintServiceStatusTable=bvPrintServiceStatusTable, eTalkPortIndex=eTalkPortIndex, cfgPclOkiLfFunction=cfgPclOkiLfFunction, tcpipBanners=tcpipBanners, cfgPclOkiWhitePageSkip=cfgPclOkiWhitePageSkip, outputConfigLanguage=outputConfigLanguage, cfg2PaperHandling=cfg2PaperHandling, psVendorId=psVendorId, cfg2PHDuplex=cfg2PHDuplex, mfp=mfp, cfg2Tray1A5A6Paper=cfg2Tray1A5A6Paper, cfg2Tray1MediaWeightCurrentValue=cfg2Tray1MediaWeightCurrentValue, cfgRamInstalledSize=cfgRamInstalledSize, genConfigurationDirty=genConfigurationDirty, tcpipPrinter2TrapMask=tcpipPrinter2TrapMask, cfgOkiIPrime=cfgOkiIPrime, cfg2Tray7Table=cfg2Tray7Table, tcpipIPAddress=tcpipIPAddress, cfg2Tray7Legal14Paper=cfg2Tray7Legal14Paper, cfgRs232cBusyTime=cfgRs232cBusyTime, tcpipSmtpEntry=tcpipSmtpEntry, tcpipIPAddressSource=tcpipIPAddressSource, usageFuserMaxLevel=usageFuserMaxLevel, cfgEpsonfxLinePitch=cfgEpsonfxLinePitch, trapPrinterPaperOut=trapPrinterPaperOut, cfg2Tray6MediaType=cfg2Tray6MediaType, nwFirmwareUpgrade=nwFirmwareUpgrade, sidm=sidm, outputSetting=outputSetting, genProtocols=genProtocols, cfgOkiResourceSave=cfgOkiResourceSave, cfgOkiCyanDarkness=cfgOkiCyanDarkness, outputTotalJobTable=outputTotalJobTable, nwOutputTrapMask=nwOutputTrapMask, bvNumPrintServices=bvNumPrintServices, cfg2PPCDevelopmentControl=cfg2PPCDevelopmentControl, tcpipOutputTrapMask=tcpipOutputTrapMask)
