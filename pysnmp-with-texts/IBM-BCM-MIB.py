#
# PySNMP MIB module IBM-BCM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBM-BCM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:50:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
busConfIndex, busConfEntry = mibBuilder.importSymbols("LAN-EMULATION-BUS-MIB", "busConfIndex", "busConfEntry")
AtmLaneAddress, = mibBuilder.importSymbols("LAN-EMULATION-CLIENT-MIB", "AtmLaneAddress")
mssServerLanE, = mibBuilder.importSymbols("NWAYSMSS-MIB", "mssServerLanE")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Integer32, Bits, ModuleIdentity, ObjectIdentity, Unsigned32, NotificationType, Gauge32, IpAddress, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Integer32", "Bits", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "NotificationType", "Gauge32", "IpAddress", "Counter32", "Counter64")
MacAddress, RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
ibmBcmMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3))
bcmConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1))
bcmStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2))
bcmMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 3))
bcmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 3, 1))
bcmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 3, 2))
class BcmCacheAge(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

bcmConfTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 1), )
if mibBuilder.loadTexts: bcmConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: bcmConfTable.setDescription('This table contains configuration values for the broadcast management functions of a BUS. It is an extension to the busConfTable.')
bcmConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 1, 1), ).setIndexNames((0, "LAN-EMULATION-BUS-MIB", "busConfIndex"))
if mibBuilder.loadTexts: bcmConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bcmConfEntry.setDescription('Each entry in this table represents an extension of a corresponding enty in the busConfTable.')
bcmRouteCacheEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmRouteCacheEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: bcmRouteCacheEnabled.setDescription("When 'true', the BCM will cache routes. When 'false', it will not.")
bcmStaticTargetsNextId = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmStaticTargetsNextId.setStatus('mandatory')
if mibBuilder.loadTexts: bcmStaticTargetsNextId.setDescription('The next available index in the bcmStaticTargetsTable. The value of this object can be used as the index by the network manager to create an entry in the table. Note: since the bcmStaticTargetsTable is statically defined, by the MSS agent this object has no meaning. This object always has a value of 1. The agent statically defines three rows in this table and sets rowStatus based on initial configuration.')
bcmStaticTargetsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 3), )
if mibBuilder.loadTexts: bcmStaticTargetsTable.setStatus('mandatory')
if mibBuilder.loadTexts: bcmStaticTargetsTable.setDescription('This table contains static broadcast target addresses for all the BCMs at this agent. Each BCM may have multiple entries. Object bcmStaticTargetsRowStatus is required during row creation and deletion.')
bcmStaticTargetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 3, 1), ).setIndexNames((0, "IBM-BCM-MIB", "bcmStaticTargetsIndex"), (0, "LAN-EMULATION-BUS-MIB", "busConfIndex"))
if mibBuilder.loadTexts: bcmStaticTargetsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bcmStaticTargetsEntry.setDescription('Each entry in this table defines a broadcast target address for a BCM.')
bcmStaticTargetsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmStaticTargetsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bcmStaticTargetsIndex.setDescription('A value which uniquely identifies a conceptual row in the bcmStaticTargetsTable.')
bcmStaticTargetsAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 3, 1, 2), AtmLaneAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmStaticTargetsAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: bcmStaticTargetsAtmAddress.setDescription('The ATM address of the static broadcast target.')
bcmStaticTargetsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 3, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmStaticTargetsMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: bcmStaticTargetsMacAddress.setDescription('The MAC address of the static broadcast target. This object is optional.')
bcmStaticTargetsProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4))).clone(namedValues=NamedValues(("noStaticProtocolDefined", 0), ("ipx", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmStaticTargetsProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: bcmStaticTargetsProtocol.setDescription('The protocol designation for static broadcast target. Indicates for which protocol broadcast frames are forwarded. Currently, only IPX is supported (i.e., configured static entries only apply to IPX).')
bcmStaticTargetsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 3, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmStaticTargetsRowStatus.setReference('RFC1903, Textual Conventions for version 2 of the Simple Network Management Protocol (SNMPv2).')
if mibBuilder.loadTexts: bcmStaticTargetsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bcmStaticTargetsRowStatus.setDescription('This object is used to create or activate and inactivate entries in the bcmStaticTargetsTable. Note: in order to set RowStatus active bcmStaticTargetsProtocol and bcmStaticTargetsAtmAddress must be set to in the same SET bindings. If the optional object bcmStaticTargetsMacAddress is desired it must also be SET in the same bindings. Once the RowStatus is set to active, objects maybe individually set. Only values of active(1) and inActive(2) are supported for this table. ')
bcmIpConfTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 4), )
if mibBuilder.loadTexts: bcmIpConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpConfTable.setDescription('This table contains configuration parameters for the IP protocol for the BCMs at the agent. This table augments the bcmConfTable.')
bcmIpConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 4, 1), ).setIndexNames((0, "LAN-EMULATION-BUS-MIB", "busConfIndex"))
if mibBuilder.loadTexts: bcmIpConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpConfEntry.setDescription('Each entry in this table represents the configuration for the IP protocol of a single BCM.')
bcmIpConfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpConfOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpConfOperStatus.setDescription('The operational state of BCM/IP on this entry. Other defines the transition states between up and down.')
bcmIpConfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmIpConfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpConfAdminStatus.setDescription('The administrative state of the BCM/IP on this entry.')
bcmIpConfCacheAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 4, 1, 3), BcmCacheAge()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmIpConfCacheAge.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpConfCacheAge.setDescription('The maximum number of minutes an IP Address entry is kept without re-verification of its location.')
bcmIpxConfTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 5), )
if mibBuilder.loadTexts: bcmIpxConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpxConfTable.setDescription('This table contains configuration parameters for the IPX protocol for the BCMs at the agent. This table augments the bcmConfTable.')
bcmIpxConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 5, 1), ).setIndexNames((0, "LAN-EMULATION-BUS-MIB", "busConfIndex"))
if mibBuilder.loadTexts: bcmIpxConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpxConfEntry.setDescription('Each entry in this table represents the configuration for the IPX protocol of a single BCM.')
bcmIpxConfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpxConfOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpxConfOperStatus.setDescription('The operational state of BCM/IPX on this entry. Other defines the transition states between up and down.')
bcmIpxConfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmIpxConfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpxConfAdminStatus.setDescription('The administrative state of the BCM/IPX on this entry.')
bcmIpxConfCacheAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 5, 1, 3), BcmCacheAge()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmIpxConfCacheAge.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpxConfCacheAge.setDescription('The maximum number of minutes an IPX Address entry is kept without re-verification of its location.')
bcmNbConfTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 6), )
if mibBuilder.loadTexts: bcmNbConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbConfTable.setDescription('This table contains configuration parameters for the NetBIOS protocol for the BCMs at the agent. This table augments the bcmConfTable.')
bcmNbConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 6, 1), ).setIndexNames((0, "LAN-EMULATION-BUS-MIB", "busConfIndex"))
if mibBuilder.loadTexts: bcmNbConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbConfEntry.setDescription('Each entry in this table represents the configuration for the NetBIOS protocol of a single BCM.')
bcmNbConfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmNbConfOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbConfOperStatus.setDescription('The operational state of BCM/NetBIOS on this entry. Other defines the transition states between up and down.')
bcmNbConfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmNbConfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbConfAdminStatus.setDescription('The administrative state of the BCM/NetBIOS on this entry.')
bcmNbConfCacheAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 1, 6, 1, 3), BcmCacheAge()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmNbConfCacheAge.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbConfCacheAge.setDescription('The maximum number of minutes an NetBIOS Address entry is kept without re-verification of its location.')
bcmStatTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 1), )
if mibBuilder.loadTexts: bcmStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: bcmStatTable.setDescription('This table contains all the counters maintained by the BCMs within the scope of an agent. This table augments the bcmConfTable.')
bcmStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 1, 1), ).setIndexNames((0, "LAN-EMULATION-BUS-MIB", "busConfIndex"))
if mibBuilder.loadTexts: bcmStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bcmStatEntry.setDescription('Each entry in this table contains a BCM and its counters. These counters accumulate totals for all protocols.')
bcmFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmFramesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: bcmFramesReceived.setDescription('Total number of frames received by BCM for all protocols.')
bcmOctetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmOctetsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: bcmOctetsReceived.setDescription('Total number of octets received by BCM for all protocols.')
bcmFramesReturned = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmFramesReturned.setStatus('mandatory')
if mibBuilder.loadTexts: bcmFramesReturned.setDescription('Total number of frames, for all protocols, not managed by BCM and returned to BUS for transmission.')
bcmOctetsReturned = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmOctetsReturned.setStatus('mandatory')
if mibBuilder.loadTexts: bcmOctetsReturned.setDescription('Total number of octets, for all protocols, not managed by BCM and returned to BUS for transmission.')
bcmFramesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmFramesDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: bcmFramesDiscarded.setDescription('Total number of frames discarded (filtered) by BCM for all protocols.')
bcmOctetsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmOctetsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: bcmOctetsDiscarded.setDescription('Total number of octets discarded (filtered) by BCM for all protocols.')
bcmFramesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmFramesTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: bcmFramesTransmitted.setDescription('Total number of frames transmitted by BCM for all protocols.')
bcmOctetsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmOctetsTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: bcmOctetsTransmitted.setDescription('Total number of octets transmitted by BCM for all protocols.')
bcmTransmitErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmTransmitErrorFrames.setStatus('mandatory')
if mibBuilder.loadTexts: bcmTransmitErrorFrames.setDescription('Total number of frames, for all protocols, that the BCM could not sent due to an error.')
bcmTransmitErrorOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmTransmitErrorOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bcmTransmitErrorOctets.setDescription('Total number of octets, for all protocols, that the BCM could not sent due to an error.')
bcmBroadcastFramesDirectedNoRif = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmBroadcastFramesDirectedNoRif.setStatus('mandatory')
if mibBuilder.loadTexts: bcmBroadcastFramesDirectedNoRif.setDescription('Total number of frames, for all protocols, transmitted by BCM with no RI Field.')
bcmBroadcastFramesDirectedAre = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmBroadcastFramesDirectedAre.setStatus('mandatory')
if mibBuilder.loadTexts: bcmBroadcastFramesDirectedAre.setDescription('Total number of frames, for all protocols, transmitted by BCM left as ARE.')
bcmBroadcastFramesDirectedSte = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmBroadcastFramesDirectedSte.setStatus('mandatory')
if mibBuilder.loadTexts: bcmBroadcastFramesDirectedSte.setDescription('Total number of frames, for all protocols, transmitted by BCM that were converted from ARE or STE to SRF by Source Route Management, or left as SRF multicast frame (a rare frame type).')
bcmBroadcastFramesDirectedSrf = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmBroadcastFramesDirectedSrf.setStatus('mandatory')
if mibBuilder.loadTexts: bcmBroadcastFramesDirectedSrf.setDescription('Frames sent on one VCC, changed to SRF.')
bcmIpStatTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 2), )
if mibBuilder.loadTexts: bcmIpStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpStatTable.setDescription('Each entry in this table contains the counters for the IP operation of a BCM. The table augments the bcmStatTable.')
bcmIpStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 2, 1), ).setIndexNames((0, "LAN-EMULATION-BUS-MIB", "busConfIndex"))
if mibBuilder.loadTexts: bcmIpStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpStatEntry.setDescription('Each entry in this table contains the counters for the IP operation of a BCM. The table augments the bcmStatTable.')
bcmIpFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpFramesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpFramesReceived.setDescription('Number of (IP) frames received by BCM.')
bcmIpOctetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpOctetsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpOctetsReceived.setDescription('Number of (IP) octets received by BCM.')
bcmIpFramesReturned = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpFramesReturned.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpFramesReturned.setDescription('Number of (IP) frames not managed by BCM and returned to BUS for transmission.')
bcmIpOctetsReturned = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpOctetsReturned.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpOctetsReturned.setDescription('Number of (IP) octets not managed by BCM and returned to BUS for transmission.')
bcmIpFramesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpFramesDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpFramesDiscarded.setDescription('Number of (IP) frames discarded (filtered) by BCM.')
bcmIpOctetsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpOctetsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpOctetsDiscarded.setDescription('Number of (IP) octets discarded (filtered) by BCM.')
bcmIpFramesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpFramesTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpFramesTransmitted.setDescription('Number of (IP) frames transmitted by BCM.')
bcmIpOctetsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpOctetsTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpOctetsTransmitted.setDescription('Number of (IP) octets transmitted by BCM.')
bcmIpTransmitErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpTransmitErrorFrames.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpTransmitErrorFrames.setDescription('Number of (IP) frames that the BCM could not sent due to an error.')
bcmIpTransmitErrorOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpTransmitErrorOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpTransmitErrorOctets.setDescription('Number of (IP) octets that the BCM could not sent due to an error.')
bcmIpBroadcastFramesDirectedNoRif = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpBroadcastFramesDirectedNoRif.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpBroadcastFramesDirectedNoRif.setDescription('Number of (IP) frames transmitted by BCM with no RI Field.')
bcmIpBroadcastFramesDirectedAre = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpBroadcastFramesDirectedAre.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpBroadcastFramesDirectedAre.setDescription('Number of (IP) frames transmitted by BCM left as ARE.')
bcmIpBroadcastFramesDirectedSte = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpBroadcastFramesDirectedSte.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpBroadcastFramesDirectedSte.setDescription('Number of (IP) frames transmitted by BCM left as STE.')
bcmIpBroadcastFramesDirectedSrf = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpBroadcastFramesDirectedSrf.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpBroadcastFramesDirectedSrf.setDescription('Number of (IP) frames transmitted by BCM that were converted from ARE or STE to SRF by Source Route Management, or left as SRF multicast frame (a rare frame type).')
bcmIpxStatTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 3), )
if mibBuilder.loadTexts: bcmIpxStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpxStatTable.setDescription('Each entry in this table contains the counters for the IPX operation of a BCM. The table augments the bcmStatTable.')
bcmIpxStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 3, 1), ).setIndexNames((0, "LAN-EMULATION-BUS-MIB", "busConfIndex"))
if mibBuilder.loadTexts: bcmIpxStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpxStatEntry.setDescription('Each entry in this table contains the counters for the IPX operation of a BCM. The table augments the bcmStatTable.')
bcmIpxFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpxFramesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpxFramesReceived.setDescription('Number of (IPX) frames received by BCM.')
bcmIpxOctetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpxOctetsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpxOctetsReceived.setDescription('Number of (IPX) octets received by BCM.')
bcmIpxFramesReturned = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpxFramesReturned.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpxFramesReturned.setDescription('Number of (IPX) frames not managed by BCM and returned to BUS for transmission.')
bcmIpxOctetsReturned = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpxOctetsReturned.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpxOctetsReturned.setDescription('Number of (IPX) octets not managed by BCM and returned to BUS for transmission.')
bcmIpxFramesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpxFramesDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpxFramesDiscarded.setDescription('Number of (IPX) frames discarded (filtered) by BCM.')
bcmIpxOctetsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpxOctetsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpxOctetsDiscarded.setDescription('Number of (IPX) octets discarded (filtered) by BCM.')
bcmIpxFramesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpxFramesTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpxFramesTransmitted.setDescription('Number of (IPX) frames transmitted by BCM.')
bcmIpxOctetsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpxOctetsTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpxOctetsTransmitted.setDescription('Number of (IPX) octets transmitted by BCM.')
bcmIpxTransmitErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpxTransmitErrorFrames.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpxTransmitErrorFrames.setDescription('Number of (IPX) frames that the BCM could not sent due to an error.')
bcmIpxTransmitErrorOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpxTransmitErrorOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpxTransmitErrorOctets.setDescription('Number of (IPX) octets that the BCM could not sent due to an error.')
bcmIpxBroadcastFramesDirectedNoRif = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpxBroadcastFramesDirectedNoRif.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpxBroadcastFramesDirectedNoRif.setDescription('Frame sent on one VCC, no RIF in them.')
bcmIpxBroadcastFramesDirectedAre = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpxBroadcastFramesDirectedAre.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpxBroadcastFramesDirectedAre.setDescription('Number of (IPX) frames transmitted by BCM left as ARE.')
bcmIpxBroadcastFramesDirectedSte = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpxBroadcastFramesDirectedSte.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpxBroadcastFramesDirectedSte.setDescription('Number of (IPX) frames transmitted by BCM left as STE.')
bcmIpxBroadcastFramesDirectedSrf = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmIpxBroadcastFramesDirectedSrf.setStatus('mandatory')
if mibBuilder.loadTexts: bcmIpxBroadcastFramesDirectedSrf.setDescription('Number of (IPX) frames transmitted by BCM that were converted from ARE or STE to SRF by Source Route Management, or left as SRF multicast frame (a rare frame type).')
bcmNbStatTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 4), )
if mibBuilder.loadTexts: bcmNbStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbStatTable.setDescription('Each entry in this table contains the counters for the NetBIOS operation of a BCM. The table augments the bcmStatTable.')
bcmNbStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 4, 1), ).setIndexNames((0, "LAN-EMULATION-BUS-MIB", "busConfIndex"))
if mibBuilder.loadTexts: bcmNbStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbStatEntry.setDescription('Each entry in this table contains the counters for the NetBIOS operation of a BCM. The table augments the bcmStatTable.')
bcmNbFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmNbFramesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbFramesReceived.setDescription('Number of (NetBIOS) frames received by BCM.')
bcmNbOctetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmNbOctetsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbOctetsReceived.setDescription('Number of (NetBIOS) octets received by BCM.')
bcmNbFramesReturned = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmNbFramesReturned.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbFramesReturned.setDescription('Number of (NetBIOS) frames not managed by BCM and returned to BUS for transmission.')
bcmNbOctetsReturned = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmNbOctetsReturned.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbOctetsReturned.setDescription('Number of (NetBIOS) octets not managed by BCM and returned to BUS for transmission.')
bcmNbFramesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmNbFramesDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbFramesDiscarded.setDescription('Number of (NetBIOS) frames discarded (filtered) by BCM.')
bcmNbOctetsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmNbOctetsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbOctetsDiscarded.setDescription('Number of (NetBIOS) octets discarded (filtered) by BCM.')
bcmNbFramesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmNbFramesTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbFramesTransmitted.setDescription('Number of (NetBIOS) frames transmitted by BCM.')
bcmNbOctetsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmNbOctetsTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbOctetsTransmitted.setDescription('Number of (NetBIOS) octets transmitted by BCM.')
bcmNbTransmitErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmNbTransmitErrorFrames.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbTransmitErrorFrames.setDescription('Number of (NetBIOS) frames that the BCM could not sent due to an error.')
bcmNbTransmitErrorOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmNbTransmitErrorOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbTransmitErrorOctets.setDescription('Number of (NetBIOS) octets that the BCM could not sent due to an error.')
bcmNbBroadcastFramesDirectedNoRif = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmNbBroadcastFramesDirectedNoRif.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbBroadcastFramesDirectedNoRif.setDescription('Number of (NetBIOS) frames transmitted by BCM with no RI Field.')
bcmNbBroadcastFramesDirectedAre = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmNbBroadcastFramesDirectedAre.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbBroadcastFramesDirectedAre.setDescription('Number of (NetBIOS) frames transmitted by BCM left as ARE.')
bcmNbBroadcastFramesDirectedSte = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmNbBroadcastFramesDirectedSte.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbBroadcastFramesDirectedSte.setDescription('Number of (NetBIOS) frames transmitted by BCM left as STE.')
bcmNbBroadcastFramesDirectedSrf = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmNbBroadcastFramesDirectedSrf.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbBroadcastFramesDirectedSrf.setDescription('Number of (NetBIOS) frames transmitted by BCM that were converted from ARE or STE to SRF by Source Route Management, or left as SRF ulticast frame (a rare frame type).')
bcmCConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 3, 1, 1))
bcmCStaticTargetsConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 3, 1, 2))
bcmCIpConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 3, 1, 3))
bcmCIpxConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 3, 1, 4))
bcmCNbConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 3, 1, 5))
bcmCStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 3, 1, 6))
bcmCIpStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 3, 1, 7))
bcmCIpxStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 3, 1, 8))
bcmCNbStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 3, 1, 9))
bcmMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 3, 3, 2, 1))
mibBuilder.exportSymbols("IBM-BCM-MIB", ibmBcmMIB=ibmBcmMIB, bcmStatTable=bcmStatTable, bcmIpxBroadcastFramesDirectedAre=bcmIpxBroadcastFramesDirectedAre, bcmIpxConfCacheAge=bcmIpxConfCacheAge, bcmOctetsReturned=bcmOctetsReturned, bcmIpStatEntry=bcmIpStatEntry, bcmNbOctetsReturned=bcmNbOctetsReturned, bcmConfTable=bcmConfTable, bcmNbBroadcastFramesDirectedSte=bcmNbBroadcastFramesDirectedSte, bcmRouteCacheEnabled=bcmRouteCacheEnabled, bcmNbBroadcastFramesDirectedAre=bcmNbBroadcastFramesDirectedAre, bcmOctetsReceived=bcmOctetsReceived, bcmIpxConfEntry=bcmIpxConfEntry, bcmIpxBroadcastFramesDirectedNoRif=bcmIpxBroadcastFramesDirectedNoRif, bcmFramesReceived=bcmFramesReceived, bcmNbConfOperStatus=bcmNbConfOperStatus, bcmConfGroup=bcmConfGroup, bcmNbFramesReceived=bcmNbFramesReceived, bcmTransmitErrorOctets=bcmTransmitErrorOctets, bcmNbStatTable=bcmNbStatTable, bcmIpConfEntry=bcmIpConfEntry, BcmCacheAge=BcmCacheAge, bcmStaticTargetsRowStatus=bcmStaticTargetsRowStatus, bcmIpxFramesReceived=bcmIpxFramesReceived, bcmNbBroadcastFramesDirectedSrf=bcmNbBroadcastFramesDirectedSrf, bcmNbFramesDiscarded=bcmNbFramesDiscarded, bcmStatGroup=bcmStatGroup, bcmCIpStatGroup=bcmCIpStatGroup, bcmIpxBroadcastFramesDirectedSte=bcmIpxBroadcastFramesDirectedSte, bcmNbBroadcastFramesDirectedNoRif=bcmNbBroadcastFramesDirectedNoRif, bcmNbFramesTransmitted=bcmNbFramesTransmitted, bcmMIBGroups=bcmMIBGroups, bcmIpOctetsDiscarded=bcmIpOctetsDiscarded, bcmIpxStatEntry=bcmIpxStatEntry, bcmIpBroadcastFramesDirectedNoRif=bcmIpBroadcastFramesDirectedNoRif, bcmMIBCompliance=bcmMIBCompliance, bcmIpxConfTable=bcmIpxConfTable, bcmNbOctetsReceived=bcmNbOctetsReceived, bcmCNbConfigGroup=bcmCNbConfigGroup, bcmIpxConfAdminStatus=bcmIpxConfAdminStatus, bcmIpConfOperStatus=bcmIpConfOperStatus, bcmOctetsTransmitted=bcmOctetsTransmitted, bcmNbOctetsDiscarded=bcmNbOctetsDiscarded, bcmIpxBroadcastFramesDirectedSrf=bcmIpxBroadcastFramesDirectedSrf, bcmFramesTransmitted=bcmFramesTransmitted, bcmIpxOctetsDiscarded=bcmIpxOctetsDiscarded, bcmCStatGroup=bcmCStatGroup, bcmIpxFramesReturned=bcmIpxFramesReturned, bcmNbConfEntry=bcmNbConfEntry, bcmIpFramesReturned=bcmIpFramesReturned, bcmIpFramesDiscarded=bcmIpFramesDiscarded, bcmFramesDiscarded=bcmFramesDiscarded, bcmIpxOctetsReturned=bcmIpxOctetsReturned, bcmIpxOctetsTransmitted=bcmIpxOctetsTransmitted, bcmIpxConfOperStatus=bcmIpxConfOperStatus, bcmIpxStatTable=bcmIpxStatTable, bcmIpTransmitErrorFrames=bcmIpTransmitErrorFrames, bcmNbFramesReturned=bcmNbFramesReturned, bcmCStaticTargetsConfigGroup=bcmCStaticTargetsConfigGroup, bcmFramesReturned=bcmFramesReturned, bcmIpFramesTransmitted=bcmIpFramesTransmitted, bcmNbTransmitErrorOctets=bcmNbTransmitErrorOctets, bcmConfEntry=bcmConfEntry, bcmStatEntry=bcmStatEntry, bcmMIBConformance=bcmMIBConformance, bcmIpOctetsReturned=bcmIpOctetsReturned, bcmIpConfCacheAge=bcmIpConfCacheAge, bcmIpConfAdminStatus=bcmIpConfAdminStatus, bcmCIpxStatGroup=bcmCIpxStatGroup, bcmIpBroadcastFramesDirectedSrf=bcmIpBroadcastFramesDirectedSrf, bcmBroadcastFramesDirectedNoRif=bcmBroadcastFramesDirectedNoRif, bcmNbConfCacheAge=bcmNbConfCacheAge, bcmIpTransmitErrorOctets=bcmIpTransmitErrorOctets, bcmNbTransmitErrorFrames=bcmNbTransmitErrorFrames, bcmIpxFramesTransmitted=bcmIpxFramesTransmitted, bcmCIpxConfigGroup=bcmCIpxConfigGroup, bcmNbStatEntry=bcmNbStatEntry, bcmStaticTargetsAtmAddress=bcmStaticTargetsAtmAddress, bcmStaticTargetsNextId=bcmStaticTargetsNextId, bcmNbOctetsTransmitted=bcmNbOctetsTransmitted, bcmMIBCompliances=bcmMIBCompliances, bcmStaticTargetsMacAddress=bcmStaticTargetsMacAddress, bcmIpBroadcastFramesDirectedSte=bcmIpBroadcastFramesDirectedSte, bcmCConfGroup=bcmCConfGroup, bcmTransmitErrorFrames=bcmTransmitErrorFrames, bcmOctetsDiscarded=bcmOctetsDiscarded, bcmIpFramesReceived=bcmIpFramesReceived, bcmBroadcastFramesDirectedAre=bcmBroadcastFramesDirectedAre, bcmIpStatTable=bcmIpStatTable, bcmIpOctetsReceived=bcmIpOctetsReceived, bcmBroadcastFramesDirectedSrf=bcmBroadcastFramesDirectedSrf, bcmCNbStatGroup=bcmCNbStatGroup, bcmIpxOctetsReceived=bcmIpxOctetsReceived, bcmStaticTargetsIndex=bcmStaticTargetsIndex, bcmBroadcastFramesDirectedSte=bcmBroadcastFramesDirectedSte, bcmStaticTargetsTable=bcmStaticTargetsTable, bcmStaticTargetsEntry=bcmStaticTargetsEntry, bcmNbConfTable=bcmNbConfTable, bcmIpConfTable=bcmIpConfTable, bcmCIpConfigGroup=bcmCIpConfigGroup, bcmStaticTargetsProtocol=bcmStaticTargetsProtocol, bcmIpBroadcastFramesDirectedAre=bcmIpBroadcastFramesDirectedAre, bcmIpOctetsTransmitted=bcmIpOctetsTransmitted, bcmNbConfAdminStatus=bcmNbConfAdminStatus, bcmIpxTransmitErrorFrames=bcmIpxTransmitErrorFrames, bcmIpxFramesDiscarded=bcmIpxFramesDiscarded, bcmIpxTransmitErrorOctets=bcmIpxTransmitErrorOctets)
