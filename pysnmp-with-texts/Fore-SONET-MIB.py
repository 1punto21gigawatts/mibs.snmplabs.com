#
# PySNMP MIB module Fore-SONET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-SONET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:17:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
asx, = mibBuilder.importSymbols("Fore-Common-MIB", "asx")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Gauge32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, ObjectIdentity, IpAddress, ModuleIdentity, MibIdentifier, Unsigned32, iso, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "ObjectIdentity", "IpAddress", "ModuleIdentity", "MibIdentifier", "Unsigned32", "iso", "Counter32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
foreSonetModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4))
if mibBuilder.loadTexts: foreSonetModule.setLastUpdated('9911050000Z')
if mibBuilder.loadTexts: foreSonetModule.setOrganization('FORE')
if mibBuilder.loadTexts: foreSonetModule.setContactInfo(' Postal: FORE Systems Inc. 1000 FORE Drive Warrendale, PA 15086-7502 Tel: +1 724 742 6900 Email: nm_mibs@fore.com Web: http://www.fore.com')
if mibBuilder.loadTexts: foreSonetModule.setDescription(' The implementation of the foreSonet tables is mandatory for all switches that have SONET/SDH port modules.')
sonetConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1))
sonetStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2))
sonetConfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1), )
if mibBuilder.loadTexts: sonetConfTable.setStatus('current')
if mibBuilder.loadTexts: sonetConfTable.setDescription('A table of SONET switch port configuration information.')
sonetConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1), ).setIndexNames((0, "Fore-SONET-MIB", "sonetConfBoard"), (0, "Fore-SONET-MIB", "sonetConfModule"), (0, "Fore-SONET-MIB", "sonetConfPort"))
if mibBuilder.loadTexts: sonetConfEntry.setStatus('current')
if mibBuilder.loadTexts: sonetConfEntry.setDescription('A table entry containing SONET configuration information for each port.')
sonetConfBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetConfBoard.setStatus('current')
if mibBuilder.loadTexts: sonetConfBoard.setDescription("The index of this port's switch board.")
sonetConfModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetConfModule.setStatus('current')
if mibBuilder.loadTexts: sonetConfModule.setDescription('The network module of this port.')
sonetConfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetConfPort.setStatus('current')
if mibBuilder.loadTexts: sonetConfPort.setDescription('The number of this port.')
sonetLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sonetOther", 1), ("sonetSingleModeShortRange", 2), ("sonetSingleModeMediumRange", 3), ("sonetMultiMode", 4), ("sonetUTP", 5), ("sonetCoax", 6))).clone('sonetMultiMode')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineType.setStatus('current')
if mibBuilder.loadTexts: sonetLineType.setDescription('This variable describes the line type for this interface. The line type for optical SONET signals may be single-mode (short or long range) or multi-mode fiber. For electrical interfaces, the line type is Unshielded Twisted Pair (UTP) or coax. This variable is defined in the SONET IETF draft photonic table as sonetPhotonicLineType with some different values.')
sonetLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sonetOther", 1), ("sonetB3ZS", 2), ("sonetCMI", 3), ("sonetNRZ", 4), ("sonetRZ", 5))).clone('sonetNRZ')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCoding.setStatus('current')
if mibBuilder.loadTexts: sonetLineCoding.setDescription('This variable describes the line coding for this interface. The B3ZS and CMI are used for electrical SONET signals (STS-1 and STS-3). The Non-Return to Zero (NRZ) and the Return to Zero (RZ) are used for optical SONET signals. This variable is defined in the SONET IETF draft photonic table as sonetPhotonicLineCoding.')
sonetFramingStandardDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atmSONET", 1), ("atmSDH", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFramingStandardDefault.setStatus('current')
if mibBuilder.loadTexts: sonetFramingStandardDefault.setDescription('This variable identify the default value of the framing standard that is used by this port (SONET or SDH).')
sonetFramingStandardOper = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atmSONET", 1), ("atmSDH", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetFramingStandardOper.setStatus('current')
if mibBuilder.loadTexts: sonetFramingStandardOper.setDescription('This variable identify the operational value of the framing standard that is used by this port (SONET or SDH).')
sonetPathWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sts1", 1), ("sts3c", 2), ("sts9c", 3), ("sts12c", 4), ("sts24c", 5), ("sts48c", 6))).clone('sts3c')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathWidth.setStatus('current')
if mibBuilder.loadTexts: sonetPathWidth.setDescription('This variable indicates the type of the SONET Path. Assigned types are the STS-Nc Synchronous Payload Envelopes where N=1,3,9,12,24,48. STS-1 is equal to 51.84Mbps, STS-3c is 155.52 Mbps, etc. The SDH transmission rates STM-1 (155.52 Mbps), STM-4 (622.08 Mbps) and STM-16 (2488.32 Mbps) are equivalent to SONET rates STS-3, STS-12 and STS-48, respectively. This variable is defined in the SONET IETF draft path configuration table as sonetPathWidth.')
sonetLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sonetNoLoop", 1), ("sonetLineLoop", 2), ("sonetDiagLoop", 3), ("sonetOtherLoop", 4), ("sonetPathLoop", 5))).clone('sonetNoLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLoopbackConfig.setStatus('current')
if mibBuilder.loadTexts: sonetLoopbackConfig.setDescription('This variable represents the current loopback status of the SONET interface. The possible values are: sonetNoLoop (1) means that the interface is not in a loopback state. sonetLineLoop (2) means that the receive data and clock are connected to the transmit data and clock. sonetDiagLoop (3) means that the transmit data stream and clock are looped back to the receiver. sonetOtherLoop (4) means that the interface is in a loopback that is not defined here. sonetPathLoop (5) means that the loopback point is between the TPOP and RPOP blocks and the transmit parallel stream is connected to the receive stream.')
sonetTxClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rxTiming", 1), ("localTiming", 2))).clone('localTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetTxClockSource.setStatus('current')
if mibBuilder.loadTexts: sonetTxClockSource.setDescription('The source of the transmit clock.')
sonetRxScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("descrambling", 1), ("noDescrambling", 2))).clone('descrambling')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetRxScrambling.setStatus('current')
if mibBuilder.loadTexts: sonetRxScrambling.setDescription('This variable indicates whether the information is being descrambled on receiving. It should be set the same as the transmitting side.')
sonetTxScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("scrambling", 1), ("noScrambling", 2))).clone('scrambling')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetTxScrambling.setStatus('current')
if mibBuilder.loadTexts: sonetTxScrambling.setDescription('This variable indicates whether the information (48 octet payload) is being scrambled before transmitting. It should be set the same as the receiving side.')
sonetSectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionStatus.setStatus('current')
if mibBuilder.loadTexts: sonetSectionStatus.setDescription('This variable indicates the Section Status of the interface. It is defined in the SONET IETF draft section configuration table as sonetSectionStatus. The variable is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The sonetSectionNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 sonetSectionNoDefect 2 sonetSectionLOS Loss Of Signal was detected. LOS is declared when 20 +/- 3us of all zero patterns is detected. 4 sonetSectionLOF Loss Of Frame was detected. LOF is declared when an out-of-frame condition persists for 3ms.')
sonetLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineStatus.setStatus('current')
if mibBuilder.loadTexts: sonetLineStatus.setDescription('This variable indicates the Line Status of the interface. A similar variable is defined in the SONET IETF draft line configuration table as sonetLineStatus. The variable is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The sonetLineNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 sonetLineNoDefect 2 sonetLineAIS Line Alarm Indication Signal was detected. Line AIS is asserted when a 111 binary pattern is detected in bits 6,7,8 of the K2 byte for five consecutive frames. 4 sonetLineRDI Line Remote Defect Indication was detected. RDI is asserted when a 110 binary pattern is detected in bits 6,7,8 of the K2 byte for five consecutive frames.')
sonetPathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 62)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathStatus.setStatus('current')
if mibBuilder.loadTexts: sonetPathStatus.setDescription("This variable indicates the Path Status of the interface. It is defined in the SONET IETF draft path configuration table as sonetPathStatus. The variable is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The sonetPathNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 sonetPathNoDefect 2 sonetPathLOP Path Loss Of Pointer was detected. Path LOP is declared when a 'normal pointer value' is not found for eight consecutive frames. 4 sonetPathAIS Path Alarm Indication Signal was detected. Path AIS is asserted when an all ones pattern is detected in the pointer bytes (H1 and H2) for three consecutive frames. 8 sonetPathRDI Path RDI alarm has been detected. RDI alarm is declared when bit 5 of the path status byte is high for ten consecutive frames. 16 sonetPathUnequiped Path is not provisioned (idle). 32 sonetPathSignalLabelMismatch A received Path Signal Label mismatch. A received Signal Label is considered mismatched if it does not equal either the locally provisioned value or the value 'equipped non-specific' (1 hex).")
sonetIdleUnassignedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unassigned", 1), ("idle", 2))).clone('unassigned')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetIdleUnassignedCells.setStatus('current')
if mibBuilder.loadTexts: sonetIdleUnassignedCells.setDescription("This variable indicates the type of cells that should be sent in case there is no data to send. According to the ATM Forum, Unassigned cells should be sent (octet 1-3 are 0's, octet 4 is 0000xxx0, where x is 'don't care'). According to the CCITT specifications, Idle cells should be sent (everything is '0' except for the CLP bit which is '1'). By default, unassigned cells are transmitted in case there is no data to send.")
sonetAtmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetAtmStatus.setStatus('current')
if mibBuilder.loadTexts: sonetAtmStatus.setDescription("This variable indicates the ATM Status of the interface. The variable is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The sonetAtmNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 sonetAtmNoDefect 2 sonetAtmLCD Loss of Cell Delineation was detected. LCD is declared when a 'normal pointer value' is not found for eight consecutive frames.")
sonetLineAis = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonetLineAisOff", 1), ("sonetLineAisOn", 2))).clone('sonetLineAisOff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineAis.setStatus('current')
if mibBuilder.loadTexts: sonetLineAis.setDescription('This variable controls the insertion of line alarm indication signal (AIS_L). When set to sonetLineAisOn, AIS is inserted into the transmit SONET stream. Line AIS insertion results in all bits of the SONET frame being set to 1 prior to scrambling except for the section overhead.')
sonetLineRdi = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sonetLineRdiOff", 1), ("sonetLineRdiOn", 2), ("sonetLineRdiAuto", 3))).clone('sonetLineRdiAuto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineRdi.setStatus('current')
if mibBuilder.loadTexts: sonetLineRdi.setDescription('The variable controls the insertion of Line Remote Defect Indication (RDI_L). When set to sonetLineRdiAuto, RDI_L is automatically inserted into the transmit SONET stream whenever a Loss Of Signal (LOS), Loss Of Frame (LOF), or Line AIS (AIS_L) is detected. When set to sonetLineRdiOn, RDI_L is always inserted into the transmit SONET stream. Line RDI is inserted by transmitting the code 110 in bit positions 6, 7, and 8 of the K2 byte of the transmit stream.')
sonetPathAis = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonetPathAisOff", 1), ("sonetPathAisOn", 2))).clone('sonetPathAisOff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathAis.setStatus('current')
if mibBuilder.loadTexts: sonetPathAis.setDescription('This variable controls the insertion of STS Path Alarm Indication Signal (AIS_P). When set to sonetPathAisOn, the complete SPE, and the pointer bytes (H1, H2, and H3) are overwritten with the all ones pattern. When set to sonetPathAisOff, the pointer bytes and the SPE are processed normally.')
sonetPathRdi = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sonetPathRdiOff", 1), ("sonetPathRdiOn", 2), ("sonetPathRdiAuto", 3))).clone('sonetPathRdiAuto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathRdi.setStatus('current')
if mibBuilder.loadTexts: sonetPathRdi.setDescription('This variable controls the insertion of Path Remote Defect Indication (RDI_P). When set to sonetPathRdiAuto, RDI_P is automatically inserted into the transmit SONET stream whenever Loss Of Signal (LOS), Loss of Frame (LOF), Line AIS (AIS_L), Loss of Pointer (LOP), Path AIS (AIS_P), or Loss of Cell delineation (LCD) is detected. When set to sonetPathRdiOn, RDI_P is always inserted into the transmit SONET stream. Path RDI is inserted by setting RDI_P bit position in the path status byte (G1) high.')
sonetFebe = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("sonetFebeOff", 1), ("sonetFebeAuto", 3))).clone('sonetFebeAuto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetFebe.setStatus('current')
if mibBuilder.loadTexts: sonetFebe.setDescription('This variable controls the insertion of line and path far end block errors. When set to sonetFebeAuto, one line or path FEBE is inserted for each line or path BIP error event, respectively. When set to sonetFebeOff, incoming line or path BIP error events do not generate FEBE events.')
sonetRxPathSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 23), Integer32().clone(19)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetRxPathSignalLabel.setStatus('current')
if mibBuilder.loadTexts: sonetRxPathSignalLabel.setDescription('This variable contains the path signal label byte (C2). The value in this variable is updated to a new path signal label value if the same new value is observed for two consecutive frames.')
sonetTxPathSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 24), Integer32().clone(19)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetTxPathSignalLabel.setStatus('current')
if mibBuilder.loadTexts: sonetTxPathSignalLabel.setDescription('This variable controls the transmit path signal label. The default value for ATM is 0x13 (19 decimal).')
sonetArbitraryPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 25), Integer32().clone(522)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetArbitraryPointer.setStatus('current')
if mibBuilder.loadTexts: sonetArbitraryPointer.setDescription('This variable controls bits APTR[9:0] of arbitrary pointer register. It may be used along with the sonetPathPointerDiagnostic variable to generate LOP errors on the outgoing stream.')
sonetSectionDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 26), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionDiagnostic.setStatus('current')
if mibBuilder.loadTexts: sonetSectionDiagnostic.setDescription('This variable controls the insertion of various types of section diagnostic bit patterns in the transmit stream. It is a bit map that is netmod specific. Under normal operation it should be set to: 1 None -- No diagnostics 2 DFP -- Controls the insertion of single bit errors continuously in the most significant bit (bit 1) of the A1 section overhead framing byte. When DFP is on the A1 bytes are set to 0x76 instaed of 0xF6 4 DBIP8 -- Controls the insertion of bit errors continuously in the section BIP-8 byte (B1). When DBIB8 is on the B1 byte is inverted. 8 DLOS -- Controls the insertion of all zeros in the stream. When DLOST is on the transmit stream is forced to 0x00. ')
sonetLineDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 27), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineDiagnostic.setStatus('current')
if mibBuilder.loadTexts: sonetLineDiagnostic.setDescription('This variable controls the insertion of various types of line diagnostic bit patterns in the transmit stream. It is a bit map that is netmod specific. Under normal operation it should be set to: 1 None -- No diagnostics 2 DBIP24 -- Controls the insertion of bit errors continuously in the line BIP bytes (B2). When DBIP24 is on, the B2 bytes are inverted. ')
sonetPathDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 28), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathDiagnostic.setStatus('current')
if mibBuilder.loadTexts: sonetPathDiagnostic.setDescription('This variable controls the insertion of various types of path diagnostic bit patterns in the transmit stream. It is a bit map that is netmod specific. Under normal operation it should be set to: 1 None -- No diagnostics 2 DB3 -- Controls the insertion of eight path BIP-8 errors per frame continuously in the B3 byte. When DB3 is on, the B3 byte is inverted. ')
sonetPathPointerDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 29), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathPointerDiagnostic.setStatus('current')
if mibBuilder.loadTexts: sonetPathPointerDiagnostic.setDescription('This variable controls the insertion of various types of path pointer diagnostic bit patterns in the transmit stream. It is a bit map that is netmod specific. Under normal operation it should be set to: 1 None -- No diagnostics 2 FTPTR -- Controls the insertion of the pointer value contained in the Arbitrary Pointer Registers into the stream. This allows upstream payload mapping circuitry to continue functioning normally and a valid SPE to continue to be generated, although it is unlikely to be extraced by downstream circuitry which should be in a loss of pointer state. If FTPTR is on, the APTR[9:0] bits of the Arbitrary Pointer Registers are inserted into the H1 and H2 bytes of the stream. At least one corrupted pointer is guaranteed to be sent. ')
sonetAtmDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 30), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetAtmDiagnostic.setStatus('current')
if mibBuilder.loadTexts: sonetAtmDiagnostic.setDescription('This variable controls the insertion of various types of atm diagnostic bit patterns in the transmit stream. It is a bit map that is netmod specific. Under normal operation it should be set to: 1 None -- No diagnostics 2 DHCS -- Controls the insertion of HCS errors. When DHCS is on, the HCS octet is inverted prior to insertion in the synchronous payload envelope. DHCS takes effect unconditionally regardless of whether a null/unassigned cell is being transmitted or whether the HCS octet has been read from the FIFO. ')
sonetLineBipThrSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 31), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineBipThrSeconds.setStatus('current')
if mibBuilder.loadTexts: sonetLineBipThrSeconds.setDescription('This variable represents the consecutive number of BAD/GOOD seconds to detect/clear a B2 byte Line Bit Interleaved Parity (BIP) Defect. The range of the values it can take is between 2 and 10 inclusive. This variable is only applicable when sonetLineErrorModel is set to errorModelBurst.')
sonetLineBipThrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineBipThrErrors.setStatus('current')
if mibBuilder.loadTexts: sonetLineBipThrErrors.setDescription('This variable is a threshold for the number of B2 byte Line Bit Interleaved Parity (BIP) Errors per second and is used as a parameter to the Line BIP Defect. If the number of errors exceeds the threshold, the particular second is declared BAD, otherwise it is declared GOOD. This variable is only applicable when sonetLineBerErrorModel is set to errorModelBurst.')
sonetLineBipFailEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineBipFailEnable.setStatus('current')
if mibBuilder.loadTexts: sonetLineBipFailEnable.setDescription("This variable controls whether declaration of a Line BIP Defect forces the port's operState to Down. This variable is only applicable when sonetLineBerErrorModel is set to errorModelBurst.")
sonetLineSignalDegradeBer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineSignalDegradeBer.setStatus('current')
if mibBuilder.loadTexts: sonetLineSignalDegradeBer.setDescription('This is the exponent of 10 for the current signal degrade bit error rate (BER) threshold for this port. The value -7, for example, represents a BER of 1E-7. This variable is only applicable when sonetLineBerErrorModel is set to errorModelRandom.')
sonetLineSignalFailBer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineSignalFailBer.setStatus('current')
if mibBuilder.loadTexts: sonetLineSignalFailBer.setDescription('This is the exponent of 10 for the current signal fail bit error rate (BER) threshold for this port. The value -4, for example, represents a BER of 1E-4. This variable is only applicable when sonetLineBerErrorModel is set to errorModelRandom.')
sonetLineBerErrorModel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("errorModelNone", 0), ("errorModelRandom", 1), ("errorModelBurst", 2))).clone('errorModelRandom')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineBerErrorModel.setStatus('current')
if mibBuilder.loadTexts: sonetLineBerErrorModel.setDescription('This is the error distribution model to be used to identify signal degrade and signal fail conditions. errorModelRandom selects a random error distribution and declares signal conditions based on the thresholds set in sonetLineSignalDegradeBer and sonetLineSignalFailBer. errorModelBurst selects a burst error model and declares signal degrade conditions based on the thresholds set in sonetLineBipThrSeconds and sonetLineBipThrErrors. errorModelNone disables detection of signal conditions.')
sonetLineBerState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("berStateOk", 0), ("berStateSigDegrade", 1), ("berStateSigFail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineBerState.setStatus('current')
if mibBuilder.loadTexts: sonetLineBerState.setDescription('This value describes the current state of the port as determined through bit error rate analysis.')
sonetSectionTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 1), )
if mibBuilder.loadTexts: sonetSectionTable.setStatus('current')
if mibBuilder.loadTexts: sonetSectionTable.setDescription('A table of SONET Section statistics and errors information.')
sonetSectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 1, 1), ).setIndexNames((0, "Fore-SONET-MIB", "sonetSectionBoard"), (0, "Fore-SONET-MIB", "sonetSectionModule"), (0, "Fore-SONET-MIB", "sonetSectionPort"))
if mibBuilder.loadTexts: sonetSectionEntry.setStatus('current')
if mibBuilder.loadTexts: sonetSectionEntry.setDescription('A table entry containing SONET Section statistics and errors information for every port.')
sonetSectionBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionBoard.setStatus('current')
if mibBuilder.loadTexts: sonetSectionBoard.setDescription("The index of this port's switch board.")
sonetSectionModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionModule.setStatus('current')
if mibBuilder.loadTexts: sonetSectionModule.setDescription('The network module of this port.')
sonetSectionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionPort.setStatus('current')
if mibBuilder.loadTexts: sonetSectionPort.setDescription('The number of this port.')
sonetSectionBIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionBIPs.setStatus('current')
if mibBuilder.loadTexts: sonetSectionBIPs.setDescription('The number of Section BIP-8 (Bit Interleaved Parity) errors that have been detected since the last time the port has been reset. The calculated BIP-8 code is compared with the BIP-8 code extracted from the B1 byte of the following frame. Differences indicate that a section level bit error has occurred.')
sonetSectionLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionLOSs.setStatus('current')
if mibBuilder.loadTexts: sonetSectionLOSs.setDescription('The number of seconds in which Loss Of Signal (LOS) has occurred. A LOS is declared when 20 +/- 3us of all zeros patterns is detected. LOS is cleared when two valid framing words are detected and during the intervening time no LOS condition is detected.')
sonetSectionLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionLOFs.setStatus('current')
if mibBuilder.loadTexts: sonetSectionLOFs.setDescription('The number of seconds in which Loss Of Frame (LOF) has occurred. A LOF is declared when an out-of-frame (OOF) condition persists for 3ms. The LOF is cleared when an in-frame condition persists for 3ms. While in-frame the framing bytes (A1, A2) in each frame are compared against the expected pattern. Out-of-frame is declared when four consecutive frames containing one or more framing pattern errors have been received.')
sonetLineTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 2), )
if mibBuilder.loadTexts: sonetLineTable.setStatus('current')
if mibBuilder.loadTexts: sonetLineTable.setDescription('A table of SONET Line statistics and errors information.')
sonetLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 2, 1), ).setIndexNames((0, "Fore-SONET-MIB", "sonetLineBoard"), (0, "Fore-SONET-MIB", "sonetLineModule"), (0, "Fore-SONET-MIB", "sonetLinePort"))
if mibBuilder.loadTexts: sonetLineEntry.setStatus('current')
if mibBuilder.loadTexts: sonetLineEntry.setDescription('A table entry containing SONET Line statistics and errors information for every port.')
sonetLineBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineBoard.setStatus('current')
if mibBuilder.loadTexts: sonetLineBoard.setDescription("The index of this port's switch board.")
sonetLineModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineModule.setStatus('current')
if mibBuilder.loadTexts: sonetLineModule.setDescription('The network module of this port.')
sonetLinePort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLinePort.setStatus('current')
if mibBuilder.loadTexts: sonetLinePort.setDescription('The number of this port.')
sonetLineBIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineBIPs.setStatus('current')
if mibBuilder.loadTexts: sonetLineBIPs.setDescription('The number of Line BIP-24 (Bit Interleaved Parity) errors that have been detected since the last time the port has been reset. The calculated BIP-24 code is based on the line overhead and synchronous payload envelope (SPE) of the STS-3c stream. The line BIP-24 code is a bit interleaved parity calculation using even parity. The calculated code is compared with the BIP-24 code extracted from the B2 bytes of the following frame. Differences indicate that a line layer bit error has occurred.')
sonetLineFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineFEBEs.setStatus('current')
if mibBuilder.loadTexts: sonetLineFEBEs.setDescription('The number of line Far End Block Errors (FEBE) that have been detected since the last time the port has been reset.')
sonetLineAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineAISs.setStatus('current')
if mibBuilder.loadTexts: sonetLineAISs.setDescription('The number of seconds in which line Alarm Indication Signal (AIS) has occurred. A line AIS is asserted when a 111 binary pattern is detected in bits 6,7,8 of the K2 byte for five consecutive frames. A line AIS is removed when any pattern other than 111 is detected in these bits for five consecutive frames.')
sonetLineRDIs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineRDIs.setStatus('current')
if mibBuilder.loadTexts: sonetLineRDIs.setDescription('The number of seconds in which line Far End Receive Failure (RDI) has occurred. A line RDI is asserted when a 110 binary pattern is detected in bits 6,7,8 of the K2 byte for five consecutive frames. A line RDI is removed when any pattern other than 110 is detected in these bits for five consecutive frames.')
sonetPathTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3), )
if mibBuilder.loadTexts: sonetPathTable.setStatus('current')
if mibBuilder.loadTexts: sonetPathTable.setDescription('A table of SONET Path statistics and errors information.')
sonetPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1), ).setIndexNames((0, "Fore-SONET-MIB", "sonetPathBoard"), (0, "Fore-SONET-MIB", "sonetPathModule"), (0, "Fore-SONET-MIB", "sonetPathPort"))
if mibBuilder.loadTexts: sonetPathEntry.setStatus('current')
if mibBuilder.loadTexts: sonetPathEntry.setDescription('A table entry containing SONET Path statistics and errors information for every port.')
sonetPathBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathBoard.setStatus('current')
if mibBuilder.loadTexts: sonetPathBoard.setDescription("The index of this port's switch board.")
sonetPathModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathModule.setStatus('current')
if mibBuilder.loadTexts: sonetPathModule.setDescription('The network module of this port.')
sonetPathPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathPort.setStatus('current')
if mibBuilder.loadTexts: sonetPathPort.setDescription('The number of this port.')
sonetPathBIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathBIPs.setStatus('current')
if mibBuilder.loadTexts: sonetPathBIPs.setDescription('The number of Path BIP-8 (Bit Interleaved Parity) errors that have been detected since the last time the port has been reset. A path BIP-8 error is detected by comparing the path BIP-8 byte (B3) extracted from the current frame, to the path BIP-8 computed for the previous frame.')
sonetPathFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathFEBEs.setStatus('current')
if mibBuilder.loadTexts: sonetPathFEBEs.setDescription('The number of path Far End Block Errors (FEBE) that have been detected since the last time the port has been reset. FEBEs are detected by extracting the 4-bit FEBE field from the path status byte (G1). The legal range for the 4 bit field is between 0000 and 1000, representing zero to eight errors. Any other value is interpreted as zero errors.')
sonetPathLOPs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathLOPs.setStatus('current')
if mibBuilder.loadTexts: sonetPathLOPs.setDescription("The number of seconds in which path Loss Of Pointer (LOP) has occurred. A path LOP is detected when a 'normal pointer value' is not found in eight consecutive frames. The LOP is cleared when a 'normal pointer value' is detected for three consecutive frames.")
sonetPathAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathAISs.setStatus('current')
if mibBuilder.loadTexts: sonetPathAISs.setDescription('The number of seconds in which path Alarm Indication Signal (AIS) has occurred. A path AIS is asserted when an all-ones pattern is detected in the pointer bytes (H1 and H2) for three consecutive frames. It is cleared when a valid pointer is detected for three consecutive frames. AIS indicates that an upstream failure has been detected.')
sonetPathRDIs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathRDIs.setStatus('current')
if mibBuilder.loadTexts: sonetPathRDIs.setDescription('The number of seconds in which path RDI alarm has occurred. A path RDI alarm is detected by extracting bit 5 of the path status byte. If bit 5 is high for ten consecutive frames, a RDI alarm is declared. A RDI alarm is cleared when bit 5 is low for ten consecutive frames. RDI signals are used to alert upstream terminals of a downstream failure in order to initiate trunk conditioning on the failure circuit.')
sonetPathUNEQs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathUNEQs.setStatus('current')
if mibBuilder.loadTexts: sonetPathUNEQs.setDescription('The number of seconds in which a path UNEQ defect has occurred. A path UNEQ defect is detected when the STS Signal label (C2 byte) == 0x00')
sonetPathPLMs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathPLMs.setStatus('current')
if mibBuilder.loadTexts: sonetPathPLMs.setDescription('The number of seconds in which a path PLM defect has occrred. A path PLM defect is detected when the STS Signal lable (C2 bytes) != 0x00, 0x01, 0x13, 0xFC or 0xFF.')
sonetAtmTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 4), )
if mibBuilder.loadTexts: sonetAtmTable.setStatus('current')
if mibBuilder.loadTexts: sonetAtmTable.setDescription('A table of SONET ATM layer statistics and errors information.')
sonetAtmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 4, 1), ).setIndexNames((0, "Fore-SONET-MIB", "sonetAtmBoard"), (0, "Fore-SONET-MIB", "sonetAtmModule"), (0, "Fore-SONET-MIB", "sonetAtmPort"))
if mibBuilder.loadTexts: sonetAtmEntry.setStatus('current')
if mibBuilder.loadTexts: sonetAtmEntry.setDescription('A table entry containing SONET ATM layer statistics and errors information for every port.')
sonetAtmBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetAtmBoard.setStatus('current')
if mibBuilder.loadTexts: sonetAtmBoard.setDescription("The index of this port's switch board.")
sonetAtmModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetAtmModule.setStatus('current')
if mibBuilder.loadTexts: sonetAtmModule.setDescription('The network module of this port.')
sonetAtmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetAtmPort.setStatus('current')
if mibBuilder.loadTexts: sonetAtmPort.setDescription('The number of this port.')
sonetAtmCorrectableHCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetAtmCorrectableHCSs.setStatus('current')
if mibBuilder.loadTexts: sonetAtmCorrectableHCSs.setDescription('The number of correctable Header Check Sequence (HCS) error events that occurred since the port was reset. The HCS is a CRC-8 calculation over the first 4 octets of the ATM cell header. The value of this variable reflects the number of single bit HCS errors, that were corrected.')
sonetAtmUncorrectableHCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetAtmUncorrectableHCSs.setStatus('current')
if mibBuilder.loadTexts: sonetAtmUncorrectableHCSs.setDescription('The number of uncorrectable Header Check Sequence (HCS) error events that occurred since the port was reset. The HCS is a CRC-8 calculation over the first 4 octets of the ATM cell header.')
sonetAtmLCDs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetAtmLCDs.setStatus('current')
if mibBuilder.loadTexts: sonetAtmLCDs.setDescription('The number of seconds in which Loss of Cell Delineation (LCD) has occurred. An LCD defect is detected when an out of cell delination state has persisted for 4ms. An LCD defect is cleared when the sync state has been maintained for 4ms.')
mibBuilder.exportSymbols("Fore-SONET-MIB", sonetLineTable=sonetLineTable, sonetSectionDiagnostic=sonetSectionDiagnostic, sonetAtmUncorrectableHCSs=sonetAtmUncorrectableHCSs, sonetAtmTable=sonetAtmTable, sonetFramingStandardOper=sonetFramingStandardOper, sonetPathRdi=sonetPathRdi, sonetLineBipThrSeconds=sonetLineBipThrSeconds, sonetSectionBIPs=sonetSectionBIPs, sonetLineAISs=sonetLineAISs, PYSNMP_MODULE_ID=foreSonetModule, sonetPathPort=sonetPathPort, sonetPathAISs=sonetPathAISs, sonetLineBerState=sonetLineBerState, sonetLineDiagnostic=sonetLineDiagnostic, sonetSectionPort=sonetSectionPort, sonetLineType=sonetLineType, sonetPathPointerDiagnostic=sonetPathPointerDiagnostic, sonetLineBipFailEnable=sonetLineBipFailEnable, sonetConfModule=sonetConfModule, sonetTxScrambling=sonetTxScrambling, foreSonetModule=foreSonetModule, sonetSectionLOFs=sonetSectionLOFs, sonetLineBIPs=sonetLineBIPs, sonetArbitraryPointer=sonetArbitraryPointer, sonetLineBipThrErrors=sonetLineBipThrErrors, sonetLineRdi=sonetLineRdi, sonetAtmEntry=sonetAtmEntry, sonetPathWidth=sonetPathWidth, sonetSectionBoard=sonetSectionBoard, sonetPathStatus=sonetPathStatus, sonetPathRDIs=sonetPathRDIs, sonetPathBIPs=sonetPathBIPs, sonetAtmStatus=sonetAtmStatus, sonetAtmDiagnostic=sonetAtmDiagnostic, sonetLineBoard=sonetLineBoard, sonetStatsGroup=sonetStatsGroup, sonetAtmBoard=sonetAtmBoard, sonetPathBoard=sonetPathBoard, sonetTxPathSignalLabel=sonetTxPathSignalLabel, sonetPathTable=sonetPathTable, sonetLineSignalDegradeBer=sonetLineSignalDegradeBer, sonetLineFEBEs=sonetLineFEBEs, sonetLineEntry=sonetLineEntry, sonetSectionEntry=sonetSectionEntry, sonetLineSignalFailBer=sonetLineSignalFailBer, sonetConfTable=sonetConfTable, sonetSectionTable=sonetSectionTable, sonetAtmPort=sonetAtmPort, sonetLineModule=sonetLineModule, sonetConfGroup=sonetConfGroup, sonetLoopbackConfig=sonetLoopbackConfig, sonetLinePort=sonetLinePort, sonetIdleUnassignedCells=sonetIdleUnassignedCells, sonetFramingStandardDefault=sonetFramingStandardDefault, sonetFebe=sonetFebe, sonetTxClockSource=sonetTxClockSource, sonetLineCoding=sonetLineCoding, sonetPathModule=sonetPathModule, sonetPathFEBEs=sonetPathFEBEs, sonetLineRDIs=sonetLineRDIs, sonetConfEntry=sonetConfEntry, sonetPathDiagnostic=sonetPathDiagnostic, sonetConfPort=sonetConfPort, sonetLineBerErrorModel=sonetLineBerErrorModel, sonetAtmLCDs=sonetAtmLCDs, sonetRxPathSignalLabel=sonetRxPathSignalLabel, sonetLineAis=sonetLineAis, sonetSectionLOSs=sonetSectionLOSs, sonetLineStatus=sonetLineStatus, sonetPathLOPs=sonetPathLOPs, sonetAtmCorrectableHCSs=sonetAtmCorrectableHCSs, sonetPathPLMs=sonetPathPLMs, sonetRxScrambling=sonetRxScrambling, sonetAtmModule=sonetAtmModule, sonetPathEntry=sonetPathEntry, sonetPathUNEQs=sonetPathUNEQs, sonetConfBoard=sonetConfBoard, sonetPathAis=sonetPathAis, sonetSectionModule=sonetSectionModule, sonetSectionStatus=sonetSectionStatus)
