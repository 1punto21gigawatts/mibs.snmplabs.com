#
# PySNMP MIB module TIMETRA-SAS-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-SAS-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:22:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, Gauge32, NotificationType, ModuleIdentity, Counter64, ObjectIdentity, Unsigned32, iso, Counter32, Bits, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "Gauge32", "NotificationType", "ModuleIdentity", "Counter64", "ObjectIdentity", "Unsigned32", "iso", "Counter32", "Bits", "TimeTicks", "MibIdentifier")
DisplayString, TruthValue, RowPointer, TextualConvention, RowStatus, DateAndTime, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "RowPointer", "TextualConvention", "RowStatus", "DateAndTime", "TimeStamp")
tmnxHwOperState, tmnxChassisPowerSupplyEntry, tmnxCpmCardEntry, tmnxChassisEntry, tmnxHwTemperature, tmnxChassisIndex, tmnxChassisPowerSupplyOutputStatus, TmnxSlotNumOrZero, tmnxChassisFanEntry, tmnxHwName, tmnxHwClass, tmnxChassisPowerSupplyInputStatus, tmnxHwID, tmnxCardEntry, tmnxChassisNotifyHwIndex, TmnxLEDState, tmnxHwEntry = mibBuilder.importSymbols("TIMETRA-CHASSIS-MIB", "tmnxHwOperState", "tmnxChassisPowerSupplyEntry", "tmnxCpmCardEntry", "tmnxChassisEntry", "tmnxHwTemperature", "tmnxChassisIndex", "tmnxChassisPowerSupplyOutputStatus", "TmnxSlotNumOrZero", "tmnxChassisFanEntry", "tmnxHwName", "tmnxHwClass", "tmnxChassisPowerSupplyInputStatus", "tmnxHwID", "tmnxCardEntry", "tmnxChassisNotifyHwIndex", "TmnxLEDState", "tmnxHwEntry")
tmnxSRNotifyPrefix, tmnxSRConfs, tmnxSRObjs, timetraSRMIBModules = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRNotifyPrefix", "tmnxSRConfs", "tmnxSRObjs", "timetraSRMIBModules")
timetraSASObjs, timetraSASConfs, timetraSASNotifyPrefix, timetraSASModules = mibBuilder.importSymbols("TIMETRA-SAS-GLOBAL-MIB", "timetraSASObjs", "timetraSASConfs", "timetraSASNotifyPrefix", "timetraSASModules")
TTcpUdpPort, TPolicyID, TmnxOperState, TNamedItem, TCIRRate, TItemDescription, TmnxOperGrpHoldUpTime, TmnxOperGrpHoldDownTime, TNamedItemOrEmpty, IpAddressPrefixLength, TSysResource, TmnxAdminState, TmnxPortID, TBurstSize, ServiceOperStatus, TPIRRate, TmnxVwmCardType, TmnxActionType = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TTcpUdpPort", "TPolicyID", "TmnxOperState", "TNamedItem", "TCIRRate", "TItemDescription", "TmnxOperGrpHoldUpTime", "TmnxOperGrpHoldDownTime", "TNamedItemOrEmpty", "IpAddressPrefixLength", "TSysResource", "TmnxAdminState", "TmnxPortID", "TBurstSize", "ServiceOperStatus", "TPIRRate", "TmnxVwmCardType", "TmnxActionType")
timetraSASysMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 6, 2, 1, 1, 7))
timetraSASysMIBModule.setRevisions(('1908-01-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: timetraSASysMIBModule.setRevisionsDescriptions(('Rev 0.1 01 Jan 2008 00:00 First version of the TIMETRA-SAS-SYSTEM-MIB.',))
if mibBuilder.loadTexts: timetraSASysMIBModule.setLastUpdated('0701010000Z')
if mibBuilder.loadTexts: timetraSASysMIBModule.setOrganization('Alcatel')
if mibBuilder.loadTexts: timetraSASysMIBModule.setContactInfo('Alcatel 7x50 Support Web: http://www.alcatel.com/comps/pages/carrier_support.jhtml')
if mibBuilder.loadTexts: timetraSASysMIBModule.setDescription("This document is the System SNMP MIB module for the Alcatel 7x50 device. The System MIB module defines SNMP objects to manage and provision system features. Copyright 2003-2014 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel's proprietary intellectual property. Alcatel retains all title and ownership in the Specification, including any revisions. Alcatel grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied `as is', and Alcatel makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tmnxSASSysObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5))
tmnxSASChassisObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6))
tmnxSASSysConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 3))
tmnxSASSysMIBNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 3, 1))
tmnxSASSysNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 3, 1, 3))
tmnxSASChassisNotificationObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 1))
tmnxSASChassisNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 2))
sysSASBofInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11))
sysEthMgmtBofInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 12))
sysMpointMgmtInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 15))
sysLoopBackInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 16))
sysResourceProfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17))
sysSASObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 18))
sysSASVwmObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 19))
sysQosObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 20))
sysClockInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 21))
sysResProfPlcyObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22))
sysResProfDecommObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 23))
sysOperGrpObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 24))
tmnxSASSecurityObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 15))
tmnxSASSecurityNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 3, 2))
tmnxSASSecurityNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 3, 2, 0))
class TmnxFanCfgMode(TextualConvention, Integer32):
    description = 'User controlled fan oper modes'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("on", 1), ("off", 2), ("auto", 3))

class TmnxPtpTime(TextualConvention, Integer32):
    description = 'Identify usage of PTP derived time.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("noPtpTime", 0), ("system", 1), ("oam", 2))

class TmnxSysOperGrpCreationOrigin(TextualConvention, Integer32):
    description = 'A number used to identify creation origin for the system operational group.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("manual", 1), ("mvrp", 2))

sbiUplinkAPort = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 1), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiUplinkAPort.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkAPort.setDescription("Primary bof port used for autoconfig. When set to zero 'uplinAport' would be reset")
sbiUplinkAIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiUplinkAIpAddr.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkAIpAddr.setDescription('Primary bof port ip address')
sbiUplinkAMask = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 3), IpAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiUplinkAMask.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkAMask.setDescription('The value of sbiActiveIpMask specifies the mask length of the subnet associated with the IP address of the primary bof port.')
sbiUplinkAVlan = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiUplinkAVlan.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkAVlan.setDescription('Vlan tag to be used on uplinkA, if set to -1 packets are sent out without vlan tag')
sbiUplinkBPort = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 6), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiUplinkBPort.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkBPort.setDescription("Secondary bof port used for autoconfig. When set to zero 'uplinBport' would be reset")
sbiUplinkBIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiUplinkBIpAddr.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkBIpAddr.setDescription('Secondary bof port ip address')
sbiUplinkBMask = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 8), IpAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiUplinkBMask.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkBMask.setDescription('The value of sbiActiveIpMask specifies the mask length of the subnet associated with the IP address of the bof uplink B port.')
sbiUplinkBVlan = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiUplinkBVlan.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkBVlan.setDescription('Vlan tag to be used on uplinkB, if set to -1 packets are sent out without vlan tag')
sbiPingAddress = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiPingAddress.setStatus('current')
if mibBuilder.loadTexts: sbiPingAddress.setDescription('IP address to be used for ping-test after booting. This is the last step in the auto-init process')
sbiUplinkRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 12), )
if mibBuilder.loadTexts: sbiUplinkRouteTable.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkRouteTable.setDescription('The sbiUplinkRouteTable contains an entry for each static route configured for the given uplink A or B. These static routes are only used during the system bootup')
sbiUplinkRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 12, 1), ).setIndexNames((0, "TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkAorB"), (0, "TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkRouteDest"), (0, "TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkRouteMask"))
if mibBuilder.loadTexts: sbiUplinkRouteEntry.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkRouteEntry.setDescription('Each row entry contains information about a static route configured for the inband mangement. Entries in this table can be created and deleted via SNMP SET operations to sbiUplinkRouteRowStatus.')
sbiUplinkAorB = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )))
if mibBuilder.loadTexts: sbiUplinkAorB.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkAorB.setDescription('If set to 1 this route is for the uplinkA, if it is set to 2 it is for uplinkB')
sbiUplinkRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 12, 1, 2), IpAddress())
if mibBuilder.loadTexts: sbiUplinkRouteDest.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkRouteDest.setDescription("The value of 'sbiUplinkBofRouteDest' specifies the destination IP address of this static route.")
sbiUplinkRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 12, 1, 3), IpAddressPrefixLength())
if mibBuilder.loadTexts: sbiUplinkRouteMask.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkRouteMask.setDescription('The value of sbiUplinkRouteMask specifies the length of the subnet mask associated with the destination IP address of this static route.')
sbiUplinkRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 12, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbiUplinkRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkRouteNextHop.setDescription('The value of sbiUplinkRouteNextHop specifies the IP address of the next hop for this static route. This IP address should be in the same subnet as the ethernet port on the active CPM. The value of sbiUplinkRouteNextHop must be set to a valid IP address for the row creation to succeed.')
sbiUplinkRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbiUplinkRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkRouteRowStatus.setDescription("sbiUplinkRouteRowStatus controls the creation and deletion of rows in the table. To create a row in this table, set the row status to createAndGo(4)'. The value of sbiUplinkRouteNextHop must also be set to a valid IP address for the row creation to succeed. To delete a row in this table, set the row status to delete(6).")
sbiEthMgmtDisabled = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 12, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiEthMgmtDisabled.setStatus('current')
if mibBuilder.loadTexts: sbiEthMgmtDisabled.setDescription("The value of sbiEthMgmtDisabled determines whether or not the out of band ethernet management port is enabled. When set to 'true', out of band ethernet management port is disabled.")
sbiEthMgmtActiveIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 12, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiEthMgmtActiveIpAddr.setStatus('current')
if mibBuilder.loadTexts: sbiEthMgmtActiveIpAddr.setDescription('The value of sbiEthMgmtActiveIpAddr specifies the IP address of the out of band ethernet port.')
sbiEthMgmtActiveIpMask = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 12, 3), IpAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiEthMgmtActiveIpMask.setStatus('current')
if mibBuilder.loadTexts: sbiEthMgmtActiveIpMask.setDescription('The value of sbiEthMgmtActiveIpMask specifies the mask length of the subnet associated with the IP address of the out of band ethernet port.')
sbiEthMgmtAutoNegotiate = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 12, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiEthMgmtAutoNegotiate.setStatus('current')
if mibBuilder.loadTexts: sbiEthMgmtAutoNegotiate.setDescription('The value of sbiEthMgmtAutoNegotiate determines whether or not the speed and duplex parameters will be automatically negotiated on the out of band ethernet port. ')
sbiEthMgmtSpeed = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 12, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(100, 100), )).clone(100)).setUnits('Mbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiEthMgmtSpeed.setStatus('current')
if mibBuilder.loadTexts: sbiEthMgmtSpeed.setDescription('The value of sbiEthMgmtSpeed specifies the speed of the out of band ethernet port. This value is ignored if auto-negotiation is enabled.')
sbiEthMgmtDuplex = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("half", 2))).clone('full')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiEthMgmtDuplex.setStatus('current')
if mibBuilder.loadTexts: sbiEthMgmtDuplex.setDescription('The value of sbiEthMgmtDuplex specifies the duplex mode for the out of band ethernet port. This value is ignored if auto-negotiation is enabled.')
sbiEthMgmtStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 12, 7), )
if mibBuilder.loadTexts: sbiEthMgmtStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: sbiEthMgmtStaticRouteTable.setDescription('The sbiEthMgmtStaticRouteTable contains an entry for each static route configured for the out of band ethernet port. These static routes are only used to route traffic generated by the out of band ethernet port.The table can have upto a maximum of 10 entries.')
sbiEthMgmtStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 12, 7, 1), ).setIndexNames((0, "TIMETRA-SAS-SYSTEM-MIB", "sbiEthMgmtStaticRouteDest"), (0, "TIMETRA-SAS-SYSTEM-MIB", "sbiEthMgmtStaticRouteMask"))
if mibBuilder.loadTexts: sbiEthMgmtStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: sbiEthMgmtStaticRouteEntry.setDescription('Each row entry contains information about a static route configured for the out of band ethernet port. Entries in this table can be created and deleted via SNMP SET operations to sbiEthMgmtStaticRouteRowStatus.')
sbiEthMgmtStaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 12, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: sbiEthMgmtStaticRouteDest.setStatus('current')
if mibBuilder.loadTexts: sbiEthMgmtStaticRouteDest.setDescription('The value of sbiEthMgmtStaticRouteDest specifies the destination IP address of this static route.')
sbiEthMgmtStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 12, 7, 1, 2), IpAddressPrefixLength())
if mibBuilder.loadTexts: sbiEthMgmtStaticRouteMask.setStatus('current')
if mibBuilder.loadTexts: sbiEthMgmtStaticRouteMask.setDescription('The value of sbiEthMgmtStaticRouteMask specifies the length of the subnet mask associated with the destination IP address of this static route.')
sbiEthMgmtStaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 12, 7, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbiEthMgmtStaticRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: sbiEthMgmtStaticRouteNextHop.setDescription('The value of sbiEthMgmtStaticRouteNextHop specifies the IP address of the next hop for this static route. This IP address should be in the same subnet as the ethernet port on the active CPM. The value of sbiEthMgmtStaticRouteNextHop must be set to a valid IP address for the row creation to succeed.')
sbiEthMgmtStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 12, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbiEthMgmtStaticRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: sbiEthMgmtStaticRouteRowStatus.setDescription("sbiEthMgmtStaticRouteRowStatus controls the creation and deletion of rows in the table. To create a row in this table, set the row status to createAndGo(4)'. The value of sbiEthMgmtStaticRouteNextHop must also be set to a valid IP address for the row creation to succeed. To delete a row in this table, set the row status to delete(6).")
sbiNoServicePortOne = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 13), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiNoServicePortOne.setStatus('current')
if mibBuilder.loadTexts: sbiNoServicePortOne.setDescription('The value of sbiNoServicePortOne indicates service traffic on the port identified by this InterfaceIndex is disabled.')
sbiNoServicePortTwo = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 14), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiNoServicePortTwo.setStatus('current')
if mibBuilder.loadTexts: sbiNoServicePortTwo.setDescription('The value of sbiNoServicePortTwo indicates service traffic on the port identified by this InterfaceIndex is disabled.')
sbiUplinkAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("access-uplink", 2))).clone('network')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiUplinkAdminMode.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkAdminMode.setDescription('sbiUplinkAdminMode when set to access-uplink, bof uplink would be used in l2 mode,the default mode is network')
sbiUplinkOperMode = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("access-uplink", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbiUplinkOperMode.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkOperMode.setDescription('sbiUplinkOperMode is operational mode of the system. This object is initialized during system bootup based on sbiUplinkAdminMode setting')
sbiExpansionCardType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("m4-ds1-ces", 1), ("m2-xfp", 2))).clone('m4-ds1-ces')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiExpansionCardType.setStatus('current')
if mibBuilder.loadTexts: sbiExpansionCardType.setDescription('sbiExpansionCardType identifies the expansion card type to the system before boot up. The system will not allow for provisioning of a different MDA than the one currently specified in the BOF. Changes to sbiExpansionCardType equires a reboot to take effect')
sbiConsoleDisabled = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiConsoleDisabled.setStatus('current')
if mibBuilder.loadTexts: sbiConsoleDisabled.setDescription("The value of sbiConsoleDisabled determines whether or not the system console is disabled. When set to 'true' console is disabled.")
sbiPassword = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiPassword.setStatus('current')
if mibBuilder.loadTexts: sbiPassword.setDescription('sbiPassword is used to enable the user to configure the bof password.')
sbiUplinkAAutoNegotiate = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 20), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiUplinkAAutoNegotiate.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkAAutoNegotiate.setDescription("The value of sbiUplinkAAutoNegotiate determines whether or not the speed and duplex parameters will be automatically negotiated on the uplinkAport. When set to 'true', auto-negotiation is enabled.")
sbiUplinkASpeed = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 21), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(100, 100), ValueRangeConstraint(1000, 1000), )).clone(100)).setUnits('Mbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiUplinkASpeed.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkASpeed.setDescription('The value of sbiSpeed specifies the speed of the uplinkA port. This value is ignored if auto-negotiation is enabled.')
sbiUplinkADuplex = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("half", 2))).clone('full')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiUplinkADuplex.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkADuplex.setDescription('The value of sbiDuplex specifies the duplex mode for the uplinkA port. This value is ignored if auto-negotiation is enabled.')
sbiUplinkBAutoNegotiate = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 23), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiUplinkBAutoNegotiate.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkBAutoNegotiate.setDescription("The value of sbiUplinkBAutoNegotiate determines whether or not the speed and duplex parameters will be automatically negotiated on the uplinkBport. When set to 'true', auto-negotiation is enabled.")
sbiUplinkBSpeed = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 24), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(100, 100), ValueRangeConstraint(1000, 1000), )).clone(100)).setUnits('Mbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiUplinkBSpeed.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkBSpeed.setDescription('The value of sbiSpeed specifies the speed of the uplinkB port. This value is ignored if auto-negotiation is enabled.')
sbiUplinkBDuplex = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 11, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("half", 2))).clone('full')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiUplinkBDuplex.setStatus('current')
if mibBuilder.loadTexts: sbiUplinkBDuplex.setDescription('The value of sbiDuplex specifies the duplex mode for the uplinkB port. This value is ignored if auto-negotiation is enabled.')
tmnxChassisExtnTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 3), )
if mibBuilder.loadTexts: tmnxChassisExtnTable.setStatus('current')
if mibBuilder.loadTexts: tmnxChassisExtnTable.setDescription('The chassis table has an entry for each chassis in the system. This table extends the tmnxChassisTable for the SAS platform')
tmnxChassisExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 3, 1), )
tmnxChassisEntry.registerAugmentions(("TIMETRA-SAS-SYSTEM-MIB", "tmnxChassisExtnEntry"))
tmnxChassisExtnEntry.setIndexNames(*tmnxChassisEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxChassisExtnEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxChassisExtnEntry.setDescription('An entry in this table would be created for every entry in the tmnxChassisEntry')
tmnxChassisUpdateGoldenBootstrapImage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 3, 1, 1), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxChassisUpdateGoldenBootstrapImage.setStatus('current')
if mibBuilder.loadTexts: tmnxChassisUpdateGoldenBootstrapImage.setDescription("Setting this action variable to 'doAction' causes the current golden bootstrap image to be updated with the image at the location specified by tmnxChassisGoldenBootstrapImageSrc. If no location is specified by tmnxChassisGoldenBootstrapImageSrc, cf1:/boot.tim will be saved as the golden bootstrap image.")
tmnxChassisGoldenBootstrapImageSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxChassisGoldenBootstrapImageSrc.setStatus('current')
if mibBuilder.loadTexts: tmnxChassisGoldenBootstrapImageSrc.setDescription("The value of tmnxChassisGoldenBootstrapImageSrc specifies the source filepath or file-URL which will be saved as the golden bootstrap image when tmnxChassisUpdateGoldenBootstrapImage is set to 'doAction'. If 'tmnxChassisGoldenBootstrapImage' is set to the empty string, ''H, cf1:/boot.tim will be saved as the golden bootstrap image.")
tmnxChassisValidateGoldenBootstrapImage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 3, 1, 3), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxChassisValidateGoldenBootstrapImage.setStatus('current')
if mibBuilder.loadTexts: tmnxChassisValidateGoldenBootstrapImage.setDescription("Setting this action variable to 'doAction' causes the current golden bootstrap image to be validated and upon completion tmnxChassisGoldenBootstrapImageVersion will be populated with its version. If the validation fails tmnxChassisGoldenBootstrapImageVersion will be populated apropriately. ")
tmnxChassisGoldenBootstrapImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 3, 1, 4), DisplayString().clone('not-validated')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisGoldenBootstrapImageVersion.setStatus('current')
if mibBuilder.loadTexts: tmnxChassisGoldenBootstrapImageVersion.setDescription("This object is populated with the version of the golden bootstrap image when validation is completed. If the validation fails, one of the following values is set: 'Invalid Golden Bootstrap Image' - Indicates the image is invalid.")
tmnxChassisRebootAutoInit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 3, 1, 5), TmnxActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxChassisRebootAutoInit.setStatus('current')
if mibBuilder.loadTexts: tmnxChassisRebootAutoInit.setDescription("Setting this action variable to 'doAction', will reset the bof and reboot the system")
tmnxChassisLowTempState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stateOk", 1), ("stateLowTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisLowTempState.setStatus('current')
if mibBuilder.loadTexts: tmnxChassisLowTempState.setDescription('The current Low Temperature state of this chassis. stateOk Indicates chassis is above the low temperature threshold. stateLowTemp Indicates chassis is below the low temperature threshold.')
tmnxChassisSystemLEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 3, 1, 7), TmnxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisSystemLEDState.setStatus('current')
if mibBuilder.loadTexts: tmnxChassisSystemLEDState.setDescription('The current state of the System LED in this chassis.')
tmnxHwExtnTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 4), )
if mibBuilder.loadTexts: tmnxHwExtnTable.setStatus('current')
if mibBuilder.loadTexts: tmnxHwExtnTable.setDescription('The tmnxHwTable has an entry for each managed hardware component. This table extends the TmnxHwEntry for the SAS platform')
tmnxHwExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 4, 1), )
tmnxHwEntry.registerAugmentions(("TIMETRA-SAS-SYSTEM-MIB", "tmnxHwExtnEntry"))
tmnxHwExtnEntry.setIndexNames(*tmnxHwEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxHwExtnEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxHwExtnEntry.setDescription('An entry in this table would be created for every entry in the tmnxChassisEntry')
tmnxHwLowTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 4, 1, 1), Integer32()).setUnits('degrees celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwLowTempThreshold.setStatus('current')
if mibBuilder.loadTexts: tmnxHwLowTempThreshold.setDescription("The low temperature threshold for this hardware component in degrees celsius. When the value of tmnxHwTemperature lowers below tmnxHwLowTempThreshold, a 'temperature too low' event will be generated.")
tmnxFabricPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 5), )
if mibBuilder.loadTexts: tmnxFabricPolicyTable.setStatus('current')
if mibBuilder.loadTexts: tmnxFabricPolicyTable.setDescription('This table provides the context to configure the fabric policy in use by different applications. Currently, PBB is the only application using it and only one default object is supported')
tmnxFabricPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 5, 1), ).setIndexNames((0, "TIMETRA-SAS-SYSTEM-MIB", "tmnxFabricPolicyIndex"))
if mibBuilder.loadTexts: tmnxFabricPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxFabricPolicyEntry.setDescription('')
tmnxFabricPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 5, 1, 1), TPolicyID().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: tmnxFabricPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxFabricPolicyIndex.setDescription('the policy ID is the index to this table.')
tmnxFabricPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFabricPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxFabricPolicyRowStatus.setDescription('Row Status for the policy.')
tmnxFabricPolicyCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 5, 1, 3), TCIRRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFabricPolicyCIR.setStatus('current')
if mibBuilder.loadTexts: tmnxFabricPolicyCIR.setDescription('The CIR specified by the user.')
tmnxFabricPolicyPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 5, 1, 4), TPIRRate().clone(8000000)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFabricPolicyPIR.setStatus('current')
if mibBuilder.loadTexts: tmnxFabricPolicyPIR.setDescription('The PIR specified by the user.')
tmnxFabricPolicyCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 5, 1, 5), TBurstSize().clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFabricPolicyCBS.setStatus('current')
if mibBuilder.loadTexts: tmnxFabricPolicyCBS.setDescription('The amount of reserved buffer space (in kilo bytes).')
tmnxFabricPolicyMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 5, 1, 6), TBurstSize().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFabricPolicyMBS.setStatus('current')
if mibBuilder.loadTexts: tmnxFabricPolicyMBS.setDescription('The maximum amount of buffer space (in kilo bytes) allowed')
tmnxFabricPolicyMpointFabricPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFabricPolicyMpointFabricPort.setStatus('current')
if mibBuilder.loadTexts: tmnxFabricPolicyMpointFabricPort.setDescription('')
tmnxChassisPowerSupplyExtnTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 6), )
if mibBuilder.loadTexts: tmnxChassisPowerSupplyExtnTable.setStatus('current')
if mibBuilder.loadTexts: tmnxChassisPowerSupplyExtnTable.setDescription('This table extends the Power Supply Information defined in tmnxChassisPowerSupplyTable')
tmnxChassisPowerSupplyExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 6, 1), )
tmnxChassisPowerSupplyEntry.registerAugmentions(("TIMETRA-SAS-SYSTEM-MIB", "tmnxChassisPowerSupplyExtnEntry"))
tmnxChassisPowerSupplyExtnEntry.setIndexNames(*tmnxChassisPowerSupplyEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxChassisPowerSupplyExtnEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxChassisPowerSupplyExtnEntry.setDescription('Contains information regarding a power supply tray.')
tmnxChassisPowerSupplyAssignedDCType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("not-applicable", 0), ("m48-dc", 1), ("p24-dc", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyAssignedDCType.setStatus('current')
if mibBuilder.loadTexts: tmnxChassisPowerSupplyAssignedDCType.setDescription(' tmnxChassisPowerSupplyAssignedDCType when set to `m48-dc`, the power supply is -48V DC, when set to P24-dc it is +24V DC. tmnxChassisPowerSupplyAssignedDCType is set to m48-dc or p24-dc if tmnxChassisPowerSupplyAssignedType is of type `dc`, If tmnxChassisPowerSupplyAssignedType is not `dc` tmnxChassisPowerSupplyAssignedDCType will be set to not-applicable. ')
tmnxChassisFanExtnTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 7), )
if mibBuilder.loadTexts: tmnxChassisFanExtnTable.setStatus('current')
if mibBuilder.loadTexts: tmnxChassisFanExtnTable.setDescription('This table extends the system fan information')
tmnxChassisFanExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 7, 1), )
tmnxChassisFanEntry.registerAugmentions(("TIMETRA-SAS-SYSTEM-MIB", "tmnxChassisFanExtnEntry"))
tmnxChassisFanExtnEntry.setIndexNames(*tmnxChassisFanEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxChassisFanExtnEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxChassisFanExtnEntry.setDescription('Contains information regarding Fan tray.')
tmnxChassisFanCfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 7, 1, 1), TmnxFanCfgMode().clone('auto')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisFanCfgMode.setStatus('current')
if mibBuilder.loadTexts: tmnxChassisFanCfgMode.setDescription(" tmnxChassisFanCfgMode is the configuration object used to determine how the fan in controlled. It can be either user controlled (on|off) or in 'auto' mode where the operation will be based on threshold values.")
tmnxChassisFanOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisFanOperMode.setStatus('current')
if mibBuilder.loadTexts: tmnxChassisFanOperMode.setDescription(' tmnxChassisFanOperMode is a read only object which will determine the current mode of operation.')
tmnxSASCardObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 8))
tmnxCardExtnTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 8, 1), )
if mibBuilder.loadTexts: tmnxCardExtnTable.setStatus('current')
if mibBuilder.loadTexts: tmnxCardExtnTable.setDescription('The tmnxCardExtnTable has an entry for each one of the entry in tmnxCardTable')
tmnxCardExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 8, 1, 1), )
tmnxCardEntry.registerAugmentions(("TIMETRA-SAS-SYSTEM-MIB", "tmnxCardExtnEntry"))
tmnxCardExtnEntry.setIndexNames(*tmnxCardEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxCardExtnEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxCardExtnEntry.setDescription('The tmnxCardExtnEntry extends tmnxCardEntry capabilities')
tmnxCardSysResPlcyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardSysResPlcyId.setStatus('current')
if mibBuilder.loadTexts: tmnxCardSysResPlcyId.setDescription(' system resource policy id attached to this card')
tmnxCpmCardExtnTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 8, 2), )
if mibBuilder.loadTexts: tmnxCpmCardExtnTable.setStatus('current')
if mibBuilder.loadTexts: tmnxCpmCardExtnTable.setDescription('The tmnxCpmCardExtnTable has an entry for each CPM card or module in each chassis in the TMNX system.')
tmnxCpmCardExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 8, 2, 1), )
tmnxCpmCardEntry.registerAugmentions(("TIMETRA-SAS-SYSTEM-MIB", "tmnxCpmCardExtnEntry"))
tmnxCpmCardExtnEntry.setIndexNames(*tmnxCpmCardEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxCpmCardExtnEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxCpmCardExtnEntry.setDescription('Each row entry represents a CPM card or module in a chassis in the system. Entries cannot be created and deleted via SNMP SET operations. When a tmnxChassisEntry is created, a tmnxCpmCardExtnEntry is created for each CPM card or module in that chassis. Before a tmnxChassisEntry can be deleted, each tmnxCpmCardEntry for that chassis must be in the proper state for removal.')
tmnxCpmCardBootImageSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 8, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardBootImageSource.setStatus('current')
if mibBuilder.loadTexts: tmnxCpmCardBootImageSource.setDescription("tmnxCpmCardBootImageSource indicates the compact flash slot where the Boot image file was found when the system last rebooted. For example, if the BOF file was found on compact flash slot 1, the value of this variable will be 'cf1:'")
sysLoopbackNoServPort = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 16, 1), TmnxPortID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLoopbackNoServPort.setStatus('current')
if mibBuilder.loadTexts: sysLoopbackNoServPort.setDescription(' Second loopback port used for internal sap creation')
sysMirrorLoopbackNoServPort = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 16, 2), TmnxPortID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorLoopbackNoServPort.setStatus('current')
if mibBuilder.loadTexts: sysMirrorLoopbackNoServPort.setDescription(' Loopback port for mirroring')
sysTestHdNoServPort = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 16, 3), TmnxPortID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTestHdNoServPort.setStatus('current')
if mibBuilder.loadTexts: sysTestHdNoServPort.setDescription(' Loopback port for testhead')
sysG8032FastFloodEnable = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysG8032FastFloodEnable.setStatus('current')
if mibBuilder.loadTexts: sysG8032FastFloodEnable.setDescription(' Enable disable G.8032 fast flood enable')
sysResIngTcamSapIngAcl = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 2), TSysResource().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResIngTcamSapIngAcl.setStatus('current')
if mibBuilder.loadTexts: sysResIngTcamSapIngAcl.setDescription(' sysResIngTcamSapIngAcl sets the resource to be used for Sap Ingress Acl application')
sysResIngTcamIngAclMac = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 3), TSysResource().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResIngTcamIngAclMac.setStatus('current')
if mibBuilder.loadTexts: sysResIngTcamIngAclMac.setDescription(' sysResIngTcamIngAclMac sets the resource to be used for mac match from the allocated sysResIngTcamSapIngAcl')
sysResIngTcamIngAclIpv4 = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 4), TSysResource().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResIngTcamIngAclIpv4.setStatus('current')
if mibBuilder.loadTexts: sysResIngTcamIngAclIpv4.setDescription(' sysResIngTcamIngAclIpv4 sets the resource to be used for ipv4 match from the allocated sysResIngTcamSapIngAcl')
sysResIngTcamIngAcl64bitIpv4Ipv6 = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 5), TSysResource().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResIngTcamIngAcl64bitIpv4Ipv6.setStatus('current')
if mibBuilder.loadTexts: sysResIngTcamIngAcl64bitIpv4Ipv6.setDescription(' sysResIngTcamIngAcl64bitIpv4 sets the resource to be used for ipv6 64 bit match from the allocated sysResIngTcamSapIngAcl')
sysResIngTcamIngAcl128bitIpv4Ipv6 = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 6), TSysResource().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResIngTcamIngAcl128bitIpv4Ipv6.setStatus('current')
if mibBuilder.loadTexts: sysResIngTcamIngAcl128bitIpv4Ipv6.setDescription(' sysResIngTcamIngAcl128bitIpv4Ipv6 sets the resource to be used for ipv6 128 bit match from the allocated sysResIngTcamSapIngAcl')
sysResIngTcamIngAcl64bitIpv6Only = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 7), TSysResource().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResIngTcamIngAcl64bitIpv6Only.setStatus('current')
if mibBuilder.loadTexts: sysResIngTcamIngAcl64bitIpv6Only.setDescription(' sysResIngTcamIngAcl64bitIpv6Only sets the resource to be used for Ipv6 64 bit match only from the allocated sysResIngTcamSapIngAcl')
sysResIngSapIngClass = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 8), TSysResource().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResIngSapIngClass.setStatus('current')
if mibBuilder.loadTexts: sysResIngSapIngClass.setDescription(' sysResIngSapIngClass sets the resource to be used for Sap Ingress classification')
sysResIngSapIngClassMac = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 9), TSysResource().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResIngSapIngClassMac.setStatus('current')
if mibBuilder.loadTexts: sysResIngSapIngClassMac.setDescription(' sysResIngSapIngClassMac sets the resource to be used for mac match from the allocated sysResIngSapIngClass')
sysResIngSapIngClassIpv4 = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 10), TSysResource().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResIngSapIngClassIpv4.setStatus('current')
if mibBuilder.loadTexts: sysResIngSapIngClassIpv4.setDescription(' sysResIngSapIngClassIpv4 sets the resource to be used for ipv4 match from the allocated sysResIngSapIngClass')
sysResIngSapIngClassIpv4Ipv6 = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 11), TSysResource().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResIngSapIngClassIpv4Ipv6.setStatus('current')
if mibBuilder.loadTexts: sysResIngSapIngClassIpv4Ipv6.setDescription(' sysResIngSapIngClassIpv4Ipv4Ipv6 sets the resource to be used for ipv4, ipv6 match from the allocated sysResIngSapIngClass')
sysResFabricPathBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lb1-11-lb2-25", 1), ("lb1-24-lb2-12", 2), ("lb1-25-lb2-11", 3), ("lb1-18-lb2-18", 4))).clone('lb1-11-lb2-25')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResFabricPathBandwidth.setStatus('obsolete')
if mibBuilder.loadTexts: sysResFabricPathBandwidth.setDescription('This object is used to configure the system fabric path bandwidth ')
sysResMaxIPv6Routes = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 16000)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sysResMaxIPv6Routes.setStatus('current')
if mibBuilder.loadTexts: sysResMaxIPv6Routes.setDescription('Specifies the number of routes to be reserved for use by IPv6. If the value is -1, then there is no limit.')
sysResIngTcamEthCfm = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 14), TSysResource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResIngTcamEthCfm.setStatus('current')
if mibBuilder.loadTexts: sysResIngTcamEthCfm.setDescription(' sysResIngTcamEthCfm sets the resource to be used for Eth Cfm application')
sysResIngTcamEthCfmUpMep = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 15), TSysResource().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResIngTcamEthCfmUpMep.setStatus('current')
if mibBuilder.loadTexts: sysResIngTcamEthCfmUpMep.setDescription(' sysResIngTcamEthCfmUpMep sets the resource to be used for Up MEP from the allocated sysResIngTcamEthCfm')
sysG8032FastFloodEnableOperVal = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 16), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysG8032FastFloodEnableOperVal.setStatus('current')
if mibBuilder.loadTexts: sysG8032FastFloodEnableOperVal.setDescription(' Shows current active value of sysG8032FastFloodEnable ')
sysResEgrTcamSapEgrAcl = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 17), TSysResource().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResEgrTcamSapEgrAcl.setStatus('current')
if mibBuilder.loadTexts: sysResEgrTcamSapEgrAcl.setDescription(' sysResEgrTcamSapEgrAcl sets the resource to be used for Sap Egress Acl application')
sysResEgrTcamEgrAclMac = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 18), TSysResource().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResEgrTcamEgrAclMac.setStatus('current')
if mibBuilder.loadTexts: sysResEgrTcamEgrAclMac.setDescription(' sysResEgrTcamEgrAclMac sets the resource to be used for mac match from the allocated sysResEgrTcamSapEgrAcl')
sysResEgrTcamEgrAclIpv4 = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 19), TSysResource().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResEgrTcamEgrAclIpv4.setStatus('current')
if mibBuilder.loadTexts: sysResEgrTcamEgrAclIpv4.setDescription(' sysResEgrTcamEgrAclIpv4 sets the resource to be used for ipv4 match from the allocated sysResEgrTcamSapEgrAcl')
sysResEgrTcamEgrAcl64bitIpv4Ipv6 = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 20), TSysResource().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResEgrTcamEgrAcl64bitIpv4Ipv6.setStatus('current')
if mibBuilder.loadTexts: sysResEgrTcamEgrAcl64bitIpv4Ipv6.setDescription(' sysResEgrTcamEgrAcl64bitIpv4 sets the resource to be used for ipv6 64 bit match from the allocated sysResEgrTcamSapEgrAcl')
sysResEgrTcamEgrAcl128bitIpv4Ipv6 = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 21), TSysResource().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResEgrTcamEgrAcl128bitIpv4Ipv6.setStatus('current')
if mibBuilder.loadTexts: sysResEgrTcamEgrAcl128bitIpv4Ipv6.setDescription(' sysResEgrTcamEgrAcl128bitIpv4Ipv6 sets the resource to be used for ipv6 128 bit match from the allocated sysResEgrTcamSapEgrAcl')
sysResEgrTcamEgrAcl64bitIpv6Only = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 22), TSysResource().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResEgrTcamEgrAcl64bitIpv6Only.setStatus('current')
if mibBuilder.loadTexts: sysResEgrTcamEgrAcl64bitIpv6Only.setDescription(' sysResEgrTcamEgrAcl64bitIpv6Only sets the resource to be used for Ipv6 64 bit match only from the allocated sysResEgrTcamSapEgrAcl')
sysResEgrSapEgrClass = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 23), TSysResource().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResEgrSapEgrClass.setStatus('current')
if mibBuilder.loadTexts: sysResEgrSapEgrClass.setDescription(' sysResEgrSapEgrClass sets the resource to be used for Sap Egress classification')
sysResEgrSapEgrClassMac = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 24), TSysResource().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResEgrSapEgrClassMac.setStatus('current')
if mibBuilder.loadTexts: sysResEgrSapEgrClassMac.setDescription(' sysResEgrSapEgrClassMac sets the resource to be used for mac match from the allocated sysResEgrSapEgrClass')
sysResEgrSapEgrClassIpv4 = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 25), TSysResource().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResEgrSapEgrClassIpv4.setStatus('current')
if mibBuilder.loadTexts: sysResEgrSapEgrClassIpv4.setDescription(' sysResEgrSapEgrClassIpv4 sets the resource to be used for ipv4 match from the allocated sysResEgrSapEgrClass')
sysResEgrSapEgrClassIpv4Ipv6 = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 26), TSysResource().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResEgrSapEgrClassIpv4Ipv6.setStatus('current')
if mibBuilder.loadTexts: sysResEgrSapEgrClassIpv4Ipv6.setDescription(' sysResEgrSapEgrClassIpv4Ipv4Ipv6 sets the resource to be used for ipv4, ipv6 match from the allocated sysResEgrSapEgrClass')
sysResIngTcamSapAggMeter = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 27), TSysResource().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResIngTcamSapAggMeter.setStatus('current')
if mibBuilder.loadTexts: sysResIngTcamSapAggMeter.setDescription(' sysResIngTcamSapAggMeter sets the resource to be used for sap-aggregate-meters')
sysResIngTcamSapAggMeterOperVal = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 28), TSysResource().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResIngTcamSapAggMeterOperVal.setStatus('current')
if mibBuilder.loadTexts: sysResIngTcamSapAggMeterOperVal.setDescription(' This object shows the operational value of sysResIngTcamSapAggMeter')
sysResQosSapIngQMode = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 29), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResQosSapIngQMode.setStatus('current')
if mibBuilder.loadTexts: sysResQosSapIngQMode.setDescription(' This object allows the user to switch between the current mode and 22Gig mode.')
sysResQosSapIngQOperMode = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 30), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResQosSapIngQOperMode.setStatus('current')
if mibBuilder.loadTexts: sysResQosSapIngQOperMode.setDescription(' This object returns the current operational value of sysResQosSapIngQMode')
sysResRouterEcmpMaxRoutesDst = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sysResRouterEcmpMaxRoutesDst.setStatus('current')
if mibBuilder.loadTexts: sysResRouterEcmpMaxRoutesDst.setDescription('Specifies the number of routes to be reserved for use by ECMP.')
sysDhcpSnoopingSdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 32), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDhcpSnoopingSdpEnable.setStatus('current')
if mibBuilder.loadTexts: sysDhcpSnoopingSdpEnable.setDescription(' Enable/disable dhcp snooping on SDPs')
sysDhcpSnoopingEnable = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 33), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDhcpSnoopingEnable.setStatus('current')
if mibBuilder.loadTexts: sysDhcpSnoopingEnable.setDescription(' Enable/disable dhcp snooping on the system. Currently for STU only.')
sysResRouterEcmpMaxRoutesDstOperVal = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResRouterEcmpMaxRoutesDstOperVal.setStatus('obsolete')
if mibBuilder.loadTexts: sysResRouterEcmpMaxRoutesDstOperVal.setDescription('Specifies the operational value of number of routes to be reserved for use by ECMP.')
sysResIpMacMatchEnable = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 10), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sysResIpMacMatchEnable.setStatus('current')
if mibBuilder.loadTexts: sysResIpMacMatchEnable.setDescription('Resource allocation for ip mac match enable')
sysG8032FastFlood = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysG8032FastFlood.setStatus('current')
if mibBuilder.loadTexts: sysG8032FastFlood.setDescription('sysG8032FastFlood sets max-slices of 1 to 5')
sysResIngTcamEthCfmDownMep = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 51), TSysResource().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResIngTcamEthCfmDownMep.setStatus('current')
if mibBuilder.loadTexts: sysResIngTcamEthCfmDownMep.setDescription(' sysResIngTcamEthCfmDownMep sets the resource to be used for Down MEP from the allocated sysResIngTcamEthCfm')
sysResQosMbsPool = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("node", 1), ("port", 2))).clone('node')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResQosMbsPool.setStatus('current')
if mibBuilder.loadTexts: sysResQosMbsPool.setDescription("This object allows the user to set buffer allocation at node or port level. 'node' means no change in the buffer allocation and works without any decommission ports. 'port' means buffers will be divided and shared across ports. In absence of decommission, buffers will be equally divided. If decommission entries are present, the division will happen as per decommission logic. Refer to tResDecommTable")
sysResIngTcamEthCfmUpMepPrimaryVlan = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResIngTcamEthCfmUpMepPrimaryVlan.setStatus('current')
if mibBuilder.loadTexts: sysResIngTcamEthCfmUpMepPrimaryVlan.setDescription('sysResIngTcamEthCfmUpMepPrimaryVlan sets max-slices of 0 to 8')
sysResIngTcamEthCfmDownMepPrimaryVlan = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResIngTcamEthCfmDownMepPrimaryVlan.setStatus('current')
if mibBuilder.loadTexts: sysResIngTcamEthCfmDownMepPrimaryVlan.setDescription('sysResIngTcamEthCfmDownMepPrimaryVlan sets max-slices of 0 to 8')
sysResRouterMaxIPSubnets = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32000)).clone(2000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sysResRouterMaxIPSubnets.setStatus('current')
if mibBuilder.loadTexts: sysResRouterMaxIPSubnets.setDescription('Specifies the number of subnets to be reserved for IP.')
sysQosPortSchedModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 57), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysQosPortSchedModeEnable.setStatus('current')
if mibBuilder.loadTexts: sysQosPortSchedModeEnable.setDescription(' Enable disable qos port scheduler mode')
sysResMaxIPv6RoutesOperVal = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 17, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 16000)).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResMaxIPv6RoutesOperVal.setStatus('current')
if mibBuilder.loadTexts: sysResMaxIPv6RoutesOperVal.setDescription('Specifies the number of routes to be reserved for use by IPv6. If the value is -1, then there is no limit.')
tResPlcyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1), )
if mibBuilder.loadTexts: tResPlcyTable.setStatus('current')
if mibBuilder.loadTexts: tResPlcyTable.setDescription('The tResPlcyTable has an entry for each user configured system resource policy.')
tResPlcyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1), ).setIndexNames((0, "TIMETRA-SAS-SYSTEM-MIB", "tResPlcyId"))
if mibBuilder.loadTexts: tResPlcyEntry.setStatus('current')
if mibBuilder.loadTexts: tResPlcyEntry.setDescription('An entry in this table would be created for every resource policy creation')
tResPlcyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: tResPlcyId.setStatus('current')
if mibBuilder.loadTexts: tResPlcyId.setDescription(' system resource policy id')
tResPlcyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tResPlcyRowStatus.setDescription(' RowStatus of this policy entry')
tResPlcyIngTcamSapAggMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyIngTcamSapAggMeter.setStatus('current')
if mibBuilder.loadTexts: tResPlcyIngTcamSapAggMeter.setDescription(' Ingress tcam sap aggregate meter resource')
tResPlcyIngTcamQosSapIng = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyIngTcamQosSapIng.setStatus('current')
if mibBuilder.loadTexts: tResPlcyIngTcamQosSapIng.setDescription(' Ingress tcam sap sap ingress resource')
tResPlcyIngTcamQosSapIngIpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyIngTcamQosSapIngIpv4.setStatus('current')
if mibBuilder.loadTexts: tResPlcyIngTcamQosSapIngIpv4.setDescription(' Ingress tcam sap ingress ipv4 resource')
tResPlcyIngTcamQosSapIngIpv4Ipv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyIngTcamQosSapIngIpv4Ipv6.setStatus('current')
if mibBuilder.loadTexts: tResPlcyIngTcamQosSapIngIpv4Ipv6.setDescription(' Ingress tcam sap ingress ipv4, ipv6 resource')
tResPlcyIngTcamQosSapIngMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyIngTcamQosSapIngMac.setStatus('current')
if mibBuilder.loadTexts: tResPlcyIngTcamQosSapIngMac.setDescription(' Ingress tcam sap ingress mac resource')
tResPlcyIngTcamAclSapIng = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyIngTcamAclSapIng.setStatus('current')
if mibBuilder.loadTexts: tResPlcyIngTcamAclSapIng.setDescription(' Ingress tcam acl sap ingress resource')
tResPlcyIngTcamAclSapIngIpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyIngTcamAclSapIngIpv4.setStatus('current')
if mibBuilder.loadTexts: tResPlcyIngTcamAclSapIngIpv4.setDescription(' Ingress tcam acl sap ingress ipv4 resource')
tResPlcyIngTcamAclSapIng64Ipv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyIngTcamAclSapIng64Ipv6.setStatus('current')
if mibBuilder.loadTexts: tResPlcyIngTcamAclSapIng64Ipv6.setDescription(' Ingress tcam acl sap ingress 64 bit ipv6 match resource')
tResPlcyIngTcamAclSapIng128Ipv4Ipv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyIngTcamAclSapIng128Ipv4Ipv6.setStatus('current')
if mibBuilder.loadTexts: tResPlcyIngTcamAclSapIng128Ipv4Ipv6.setDescription(' Ingress tcam acl sap ingress 128 bit ipv6 resource')
tResPlcyIngTcamAclSapIngMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyIngTcamAclSapIngMac.setStatus('current')
if mibBuilder.loadTexts: tResPlcyIngTcamAclSapIngMac.setDescription(' Ingress tcam acl sap ingress mac resource')
tResPlcyEgrTcamAclSapEgr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 2), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyEgrTcamAclSapEgr.setStatus('current')
if mibBuilder.loadTexts: tResPlcyEgrTcamAclSapEgr.setDescription(' Egress tcam acl sap sap egress 1resource')
tResPlcyEgrTcamAclSapEgrMacIpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 2), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyEgrTcamAclSapEgrMacIpv4.setStatus('current')
if mibBuilder.loadTexts: tResPlcyEgrTcamAclSapEgrMacIpv4.setDescription(' Egress tcam acl sap egress mac ipv4 resource')
tResPlcyEgrTcamAclSapEgr128Ipv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 2), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyEgrTcamAclSapEgr128Ipv6.setStatus('current')
if mibBuilder.loadTexts: tResPlcyEgrTcamAclSapEgr128Ipv6.setDescription('Egress tcam acl sap egress 128bit ipv6 resource')
tResPlcyEgrTcamAclSapEgr64MacIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 2), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyEgrTcamAclSapEgr64MacIpv6.setStatus('current')
if mibBuilder.loadTexts: tResPlcyEgrTcamAclSapEgr64MacIpv6.setDescription('Egress tcam acl sap egress mac resource')
tResPlcyEgrTcamAclSapEgrMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 2), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyEgrTcamAclSapEgrMac.setStatus('current')
if mibBuilder.loadTexts: tResPlcyEgrTcamAclSapEgrMac.setDescription('Egress tcam acl sap egress mac resource')
tResPlcyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 18), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyDescription.setStatus('current')
if mibBuilder.loadTexts: tResPlcyDescription.setDescription('user-provided description of the policy.')
tResPlcyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tResPlcyLastChanged.setStatus('current')
if mibBuilder.loadTexts: tResPlcyLastChanged.setDescription('timestamp of last change to this row.')
tResPlcyIngTcamEthCfm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyIngTcamEthCfm.setStatus('current')
if mibBuilder.loadTexts: tResPlcyIngTcamEthCfm.setDescription(' Ingress tcam eth cfm resource')
tResPlcyIngTcamEthCfmUpMep = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyIngTcamEthCfmUpMep.setStatus('current')
if mibBuilder.loadTexts: tResPlcyIngTcamEthCfmUpMep.setDescription(' Ingress tcam eth cfm up-mep resource')
tResPlcyG8032CtrlSapStartVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3000, 3512), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyG8032CtrlSapStartVlan.setStatus('current')
if mibBuilder.loadTexts: tResPlcyG8032CtrlSapStartVlan.setDescription('G8032 control sap tag start vlan')
tResPlcyG8032CtrlSapEndVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3000, 3512), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyG8032CtrlSapEndVlan.setStatus('current')
if mibBuilder.loadTexts: tResPlcyG8032CtrlSapEndVlan.setDescription('G8032 control sap tag End vlan')
tResPlcyResIpMacMatchEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 10), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyResIpMacMatchEnable.setStatus('current')
if mibBuilder.loadTexts: tResPlcyResIpMacMatchEnable.setDescription('Resource allocation for ip mac match enable')
tResPlcyIngTcamEthCfmDownMep = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResPlcyIngTcamEthCfmDownMep.setStatus('current')
if mibBuilder.loadTexts: tResPlcyIngTcamEthCfmDownMep.setDescription(' Ingress tcam eth cfm down-mep resource')
tResPlcyIngTcamEthCfmUpMepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 27), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tResPlcyIngTcamEthCfmUpMepEnable.setStatus('current')
if mibBuilder.loadTexts: tResPlcyIngTcamEthCfmUpMepEnable.setDescription('Enable/Disable Up Mep')
tResPlcyIngTcamEthCfmDownMepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 22, 1, 1, 28), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tResPlcyIngTcamEthCfmDownMepEnable.setStatus('current')
if mibBuilder.loadTexts: tResPlcyIngTcamEthCfmDownMepEnable.setDescription('Enable/Disable Down Mep')
tResDecommTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 23, 1), )
if mibBuilder.loadTexts: tResDecommTable.setStatus('current')
if mibBuilder.loadTexts: tResDecommTable.setDescription('The tResDecommTable has an entry for each user configured system decommissioned resource port.')
tResDecommEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 23, 1, 1), ).setIndexNames((0, "TIMETRA-SAS-SYSTEM-MIB", "tResDecommId"))
if mibBuilder.loadTexts: tResDecommEntry.setStatus('current')
if mibBuilder.loadTexts: tResDecommEntry.setDescription('An entry in this table would be created for every decommissioned entry created ')
tResDecommId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: tResDecommId.setStatus('current')
if mibBuilder.loadTexts: tResDecommId.setDescription(' system resource decommision id')
tResDecommRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 23, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResDecommRowStatus.setStatus('current')
if mibBuilder.loadTexts: tResDecommRowStatus.setDescription(' RowStatus of this policy entry')
tResDecommFromPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 23, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResDecommFromPortMap.setStatus('current')
if mibBuilder.loadTexts: tResDecommFromPortMap.setDescription(' tResDecommFromPortMap is the bit map of ports that are decommissioned')
tResDecommToPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 23, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tResDecommToPortMap.setStatus('current')
if mibBuilder.loadTexts: tResDecommToPortMap.setDescription(' tResDecommToPortMap is the bit map of ports that are are allocated the resources freed up by the ports in tResDecommFromPortMap')
tResDecommOperTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 23, 2), )
if mibBuilder.loadTexts: tResDecommOperTable.setStatus('current')
if mibBuilder.loadTexts: tResDecommOperTable.setDescription('The tResDecommOperTable has an entry for each user configured system decommissioned resource port. This table is updated only at boot time, the entries in this table will match the entries available in tResDecommTable until administrative decommission entries are modified by the user')
tResDecommOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 23, 2, 1), ).setIndexNames((0, "TIMETRA-SAS-SYSTEM-MIB", "tResDecommOperId"))
if mibBuilder.loadTexts: tResDecommOperEntry.setStatus('current')
if mibBuilder.loadTexts: tResDecommOperEntry.setDescription('An entry in this table would be created for every decommissioned entry created ')
tResDecommOperId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 23, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: tResDecommOperId.setStatus('current')
if mibBuilder.loadTexts: tResDecommOperId.setDescription(' system resource decommision id')
tResDecommOperFromPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 23, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tResDecommOperFromPortMap.setStatus('current')
if mibBuilder.loadTexts: tResDecommOperFromPortMap.setDescription(' tResDecommOperFromPortMap is the bit map of ports that are decommissioned')
tResDecommOperToPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 23, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tResDecommOperToPortMap.setStatus('current')
if mibBuilder.loadTexts: tResDecommOperToPortMap.setDescription(' tResDecommOperToPortMap is the bit map of ports that are are allocated the resources freed up by the ports in tResDecommFromPortMap')
sysQosWredSlopes = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("high-low", 1), ("tcp-non-tcp", 2))).clone('tcp-non-tcp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysQosWredSlopes.setStatus('current')
if mibBuilder.loadTexts: sysQosWredSlopes.setDescription('When tcp-non-tcp is set, 3 WRED slopes are used per queue. When high-low is set, 2 slopes are used per queue for both tcp and non-tcp traffic ')
sysOperGrpTblLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 24, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysOperGrpTblLastChanged.setStatus('current')
if mibBuilder.loadTexts: sysOperGrpTblLastChanged.setDescription('The value of sysOperGrpTblLastChanged indicates the sysUpTime at the time of the last modification of sysOperGrpTable. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
sysOperGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 24, 2), )
if mibBuilder.loadTexts: sysOperGrpTable.setStatus('current')
if mibBuilder.loadTexts: sysOperGrpTable.setDescription('A table that contains Operational-Group information.')
sysOperGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 24, 2, 1), ).setIndexNames((0, "TIMETRA-SAS-SYSTEM-MIB", "sysOperGrpName"))
if mibBuilder.loadTexts: sysOperGrpEntry.setStatus('current')
if mibBuilder.loadTexts: sysOperGrpEntry.setDescription('Each row specifies information about a specific Operational-Group.')
sysOperGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 24, 2, 1, 1), TNamedItem())
if mibBuilder.loadTexts: sysOperGrpName.setStatus('current')
if mibBuilder.loadTexts: sysOperGrpName.setDescription('The value of the object sysOperGrpName specifies the Operational-Group identifier.')
sysOperGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 24, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sysOperGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: sysOperGrpRowStatus.setDescription('This value of the object sysOperGrpRowStatus specifies the status of this row.')
sysOperGrpLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 24, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysOperGrpLastChange.setStatus('current')
if mibBuilder.loadTexts: sysOperGrpLastChange.setDescription('The value of sysOperGrpLastChange indicates the timestamp of last change to this row in sysOperGrpTable.')
sysOperGrpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 24, 2, 1, 4), ServiceOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysOperGrpOperStatus.setStatus('current')
if mibBuilder.loadTexts: sysOperGrpOperStatus.setDescription('The value of sysOperGrpOperStatus indicates the operational state of this group.')
sysOperGrpHoldDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 24, 2, 1, 5), TmnxOperGrpHoldDownTime()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sysOperGrpHoldDownTime.setStatus('current')
if mibBuilder.loadTexts: sysOperGrpHoldDownTime.setDescription('The value of sysOperGrpHoldDownTime specifies number of seconds to wait before notifying clients monitoring this group when its operational status transitions from up to down.')
sysOperGrpCreationOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 24, 2, 1, 6), TmnxSysOperGrpCreationOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysOperGrpCreationOrigin.setStatus('current')
if mibBuilder.loadTexts: sysOperGrpCreationOrigin.setDescription('The value of sysOperGrpCreationOrigin indicates the protocol or mechanism which created this group.')
sysOperGrpHoldUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 24, 2, 1, 7), TmnxOperGrpHoldUpTime().clone(4)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sysOperGrpHoldUpTime.setStatus('current')
if mibBuilder.loadTexts: sysOperGrpHoldUpTime.setDescription('The value of sysOperGrpHoldUpTime specifies number of seconds to wait before notifying clients monitoring this group when its operational status transitions from down to up.')
sysOperGrpHoldUpTimeRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 24, 2, 1, 8), TmnxOperGrpHoldUpTime()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: sysOperGrpHoldUpTimeRemain.setStatus('current')
if mibBuilder.loadTexts: sysOperGrpHoldUpTimeRemain.setDescription('The value of sysOperGrpHoldUpTimeRemain indicates the number of seconds remaining in the sysOperGrpHoldUpTime.')
sysOperGrpHoldDownTimeRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 24, 2, 1, 9), TmnxOperGrpHoldDownTime()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: sysOperGrpHoldDownTimeRemain.setStatus('current')
if mibBuilder.loadTexts: sysOperGrpHoldDownTimeRemain.setDescription('The value of sysOperGrpHoldDownTimeRemain indicates the number of seconds remaining in the sysOperGrpHoldDownTime.')
sysOperGrpNumMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 24, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysOperGrpNumMembers.setStatus('current')
if mibBuilder.loadTexts: sysOperGrpNumMembers.setDescription('The value of sysOperGrpNumMembers indicates the number of members as part of this operational-group.')
sysOperGrpNumMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 24, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysOperGrpNumMonitoring.setStatus('current')
if mibBuilder.loadTexts: sysOperGrpNumMonitoring.setDescription('The value of sysOperGrpNumMonitoring indicates the number of objects monitoring this operational-group.')
tmnxEnvTempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 2, 1)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTemperature"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxHwLowTempThreshold"))
if mibBuilder.loadTexts: tmnxEnvTempTooLow.setStatus('current')
if mibBuilder.loadTexts: tmnxEnvTempTooLow.setDescription('Generated when the temperature sensor reading on an equipment object is lesser than its configured threshold.')
tmnxEqMDACfgMissing = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 2, 5)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwOperState"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxChassisNotifyMDACfgFailReason"))
if mibBuilder.loadTexts: tmnxEqMDACfgMissing.setStatus('current')
if mibBuilder.loadTexts: tmnxEqMDACfgMissing.setDescription('Generated when a supported MDA is inserted into a slot, but the current configuration is not sufficient for the MDA to operate.')
tmnxVwmShelfInserted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 2, 6)).setObjects(("TIMETRA-SAS-SYSTEM-MIB", "tmnxVwmShelfId"))
if mibBuilder.loadTexts: tmnxVwmShelfInserted.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfInserted.setDescription('Generated when the vwm-shelf is inserted')
tmnxVwmShelfIdMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 2, 7)).setObjects(("TIMETRA-SAS-SYSTEM-MIB", "tmnxVwmShelfId"))
if mibBuilder.loadTexts: tmnxVwmShelfIdMismatch.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfIdMismatch.setDescription('tmnxVwmShelfIdMismatch is when the vwm-shelf configured by the user does not match the rotary switch setting')
tmnxVwmShelfRemoved = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 2, 8)).setObjects(("TIMETRA-SAS-SYSTEM-MIB", "tmnxVwmShelfId"))
if mibBuilder.loadTexts: tmnxVwmShelfRemoved.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfRemoved.setDescription('Generated when the vwm-shelf is removed')
tmnxUsbUnknownDev = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 2, 9))
if mibBuilder.loadTexts: tmnxUsbUnknownDev.setStatus('current')
if mibBuilder.loadTexts: tmnxUsbUnknownDev.setDescription('Generated when unsupported USB device is inserted into a 7210 device')
tmnxVwmShelfCardInserted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 2, 11)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxVwmShelfCardId"))
if mibBuilder.loadTexts: tmnxVwmShelfCardInserted.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfCardInserted.setDescription('Generated when a VWM shelf line card is inserted.')
tmnxVwmShelfCardRemoved = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 2, 12)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxVwmShelfCardId"))
if mibBuilder.loadTexts: tmnxVwmShelfCardRemoved.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfCardRemoved.setDescription('Generated when a VWM shelf line card is removed.')
tmnxVwmShelfCardIdMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 2, 13)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxVwmShelfCardId"))
if mibBuilder.loadTexts: tmnxVwmShelfCardIdMismatch.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfCardIdMismatch.setDescription('Generated when there is a VWM shelf line card mismatch with configured id.')
tmnxVwmShelfPSInputFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 2, 14)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxVwmShelfCardId"))
if mibBuilder.loadTexts: tmnxVwmShelfPSInputFailure.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfPSInputFailure.setDescription('Generated when there is a input power supply failure on VWM shelf')
tmnxVwmShelfPSOutputFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 2, 15)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxVwmShelfCardId"))
if mibBuilder.loadTexts: tmnxVwmShelfPSOutputFailure.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfPSOutputFailure.setDescription('Generated when there is a output power supply failure on VWM shelf')
tmnxVwmShelfInputLoss = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 2, 16)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxVwmShelfCardId"))
if mibBuilder.loadTexts: tmnxVwmShelfInputLoss.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfInputLoss.setDescription('Generated when there is a loss on VWM shelf input')
tmnxVwmShelfOutputLoss = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 2, 17)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxVwmShelfCardId"))
if mibBuilder.loadTexts: tmnxVwmShelfOutputLoss.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfOutputLoss.setDescription('Generated when there is a loss on VWM shelf output')
tmnxVwmShelfCardCfgError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 2, 18)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxVwmShelfCardId"))
if mibBuilder.loadTexts: tmnxVwmShelfCardCfgError.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfCardCfgError.setDescription('Generated when the vwm shelf inserted does not match with configured shelf id, card')
tmnxAlarmInputVoltageFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 2, 10)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxAlarmInputVoltageFailure.setStatus('current')
if mibBuilder.loadTexts: tmnxAlarmInputVoltageFailure.setDescription('Generated when the internal alam input voltage fails')
tmnxRootDirFull = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 2, 2)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwName"))
if mibBuilder.loadTexts: tmnxRootDirFull.setStatus('current')
if mibBuilder.loadTexts: tmnxRootDirFull.setDescription('Generated when the dosfs root directory is full, number of files in root directory has reached the threshold limit.')
tSASMpointBwPlcy = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 15, 1), TNamedItem().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tSASMpointBwPlcy.setStatus('current')
if mibBuilder.loadTexts: tSASMpointBwPlcy.setDescription('The value of multipoint bandwidth management policy.')
tmnxPtpTimeUsePtp = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 21, 1), TmnxPtpTime().clone('noPtpTime')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPtpTimeUsePtp.setStatus('current')
if mibBuilder.loadTexts: tmnxPtpTimeUsePtp.setDescription("If this object is configured with 'system', ptp derived time (in UTC timescale) is used for all the system applications that need time, including the timestamps needed for OAM tools. If configured with 'oam', the system will use the PTP derived time (in UTC timescale) for only the timestamps needed by OAM. By default NTP derived time is used for all system applications. If NTP is not configured, then the system RTC is used for obtaining timestmaps in UTC timescale for all system applications")
tmnxSysConsoleAlarmInput = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 18, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysConsoleAlarmInput.setStatus('current')
if mibBuilder.loadTexts: tmnxSysConsoleAlarmInput.setDescription('Enable/Disable Console Alarm Input')
tmnxDyingGasp = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 3, 1, 3, 1))
if mibBuilder.loadTexts: tmnxDyingGasp.setStatus('current')
if mibBuilder.loadTexts: tmnxDyingGasp.setDescription(' tmnxDyingGasp trap is generated when the system goes down due to power failure. System would make best effort to send out this trap with the power remaining in Dying Gasp capacitor')
tmnxVwmShelfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 19, 1), )
if mibBuilder.loadTexts: tmnxVwmShelfTable.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfTable.setDescription('The tmnxVwmShelfTable contains an entry for each VWM shelf in the device')
tmnxVwmShelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 19, 1, 1), ).setIndexNames((0, "TIMETRA-SAS-SYSTEM-MIB", "tmnxVwmShelfId"))
if mibBuilder.loadTexts: tmnxVwmShelfEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfEntry.setDescription('Each row entry contains information about a VWM shelf Entries in this table can be created and deleted via SNMP SET operations to tmnxVwmShelfRowStatus.')
tmnxVwmShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxVwmShelfId.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfId.setDescription('Shelf ID of the VWM Shelf')
tmnxVwmShelfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 19, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVwmShelfRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfRowStatus.setDescription("tmnxVwmShelfRowStatus controls the creation and deletion of rows in the table. To create a row in this table, set the row status to createAndGo(4)'. ")
tmnxVwmShelfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 19, 1, 1, 3), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVwmShelfAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfAdminState.setDescription('The value of tmnxVwmShelfAdminState specifies the administrative state of the VWM shelf.')
tmnxVwmShelfOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 19, 1, 1, 4), TmnxAdminState().clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVwmShelfOperState.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfOperState.setDescription('The value of tmnxVwmShelfOperState specifies the operational state of the VWM shelf.')
tmnxVwmShelfVwmType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 19, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ec-cw", 1), ("ec-dw", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVwmShelfVwmType.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfVwmType.setDescription('The value of tmnxVwmShelfVwmType specifies the vwm shelf type. ')
tmnxVwmShelfEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 19, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("not-equipped", 0), ("unknown", 1), ("cwdm", 2), ("dwdm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVwmShelfEquippedType.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfEquippedType.setDescription('The value of tmnxVwmshelfTypeConnected specifies the vwm shelf type.equipped to the system. ')
tmnxVwmshelfTypeConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 19, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("usb", 1), ("i2c", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVwmshelfTypeConnected.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmshelfTypeConnected.setDescription('The value of tmnxVwmshelfTypeConnected specifies the vwm shelf optical type.connected to the system. ')
tmnxVwmShelfCardTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 19, 2), )
if mibBuilder.loadTexts: tmnxVwmShelfCardTable.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfCardTable.setDescription('The tmnxVwmShelfCardTable contains an entry for each VWM shelf slot in the device')
tmnxVwmShelfCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 19, 2, 1), ).setIndexNames((0, "TIMETRA-SAS-SYSTEM-MIB", "tmnxVwmShelfId"), (0, "TIMETRA-SAS-SYSTEM-MIB", "tmnxVwmShelfCardId"))
if mibBuilder.loadTexts: tmnxVwmShelfCardEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfCardEntry.setDescription('Each row entry contains information about a VWM shelf slot Entries in this table can be created and deleted via SNMP SET operations to tmnxVwmShelfRowStatus.')
tmnxVwmShelfCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxVwmShelfCardId.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfCardId.setDescription('Slot ID of the VWM Shelf slot')
tmnxVwmShelfCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 19, 2, 1, 2), TmnxVwmCardType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxVwmShelfCardType.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfCardType.setDescription('tmnxVwmShelfCardType is the vwm slot type that is being configured by user')
tmnxVwmShelfCardEqType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 19, 2, 1, 3), TmnxVwmCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVwmShelfCardEqType.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfCardEqType.setDescription('tmnxVwmShelfCardEqType is the vwm slot type that is being provisioned')
tmnxVwmShelfCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 19, 2, 1, 4), TmnxAdminState().clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxVwmShelfCardAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfCardAdminState.setDescription('The value of tmnxVwmShelfCardAdminState specifies the administrative state of the VWM shelf slot.')
tmnxVwmShelfCardOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 5, 19, 2, 1, 5), TmnxAdminState().clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVwmShelfCardOperState.setStatus('current')
if mibBuilder.loadTexts: tmnxVwmShelfCardOperState.setDescription('The value of tmnxVwmShelfCardOperState specifies the operational state of the VWM shelf slot.')
aluExtTmnxChassisTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 9), )
if mibBuilder.loadTexts: aluExtTmnxChassisTable.setStatus('current')
if mibBuilder.loadTexts: aluExtTmnxChassisTable.setDescription('The chassis table has an entry for each chassis in the system.')
aluExtTmnxChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 9, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"))
if mibBuilder.loadTexts: aluExtTmnxChassisEntry.setStatus('current')
if mibBuilder.loadTexts: aluExtTmnxChassisEntry.setDescription('Each row entry represents a chassis in the system. The agent creates the row for the first chassis in the system, with tmnxChassisIndex = 1, which is auto-discovered by the active CPM card. Additional chassis entries can be created and deleted via SNMP SET operations. Creation requires a SET request containing at least tmnxChassisAdminMode and tmnxChassisRowStatus. Note that the first Alcatel 7x50 series product release does not support multiple chassis, therefore there will not be more than one row entry in this table; attempts to create additional rows in this table will be denied.')
aluExtPoePowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("internal", 1), ("external", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aluExtPoePowerMode.setStatus('current')
if mibBuilder.loadTexts: aluExtPoePowerMode.setDescription('aluExtPoePowerMode represents set of poe capabilities, the mode is general for all MDAs, ports ')
aluExtPoePowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("bad", 1), ("good", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluExtPoePowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: aluExtPoePowerSupplyStatus.setDescription('Current status of the PoE Power Supply.')
aluExtPoeExternalPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("absent", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluExtPoeExternalPowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: aluExtPoeExternalPowerSupplyStatus.setDescription('Current status of the PoE External Power Supply connection')
tCardResOperTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10), )
if mibBuilder.loadTexts: tCardResOperTable.setStatus('current')
if mibBuilder.loadTexts: tCardResOperTable.setDescription('The tCardResOperTable has an entry for each CPM card or module in each chassis in the TMNX system, this table provides the operations system resource values used on the card')
tCardResOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1), )
tmnxCpmCardEntry.registerAugmentions(("TIMETRA-SAS-SYSTEM-MIB", "tCardResOperEntry"))
tCardResOperEntry.setIndexNames(*tmnxCpmCardEntry.getIndexNames())
if mibBuilder.loadTexts: tCardResOperEntry.setStatus('current')
if mibBuilder.loadTexts: tCardResOperEntry.setDescription('Each row entry represents a CPM card or module in a chassis in the system. Entries cannot be created and deleted via SNMP SET operations. When a tmnxChassisEntry is created, a tCardResOperEntry is created for each CPM card or module in that chassis. Before a tmnxChassisEntry can be deleted, each tCardResOperEntry for that chassis must be in the proper state for removal.')
tCardResOperIngTcamSapAggMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperIngTcamSapAggMeter.setStatus('current')
if mibBuilder.loadTexts: tCardResOperIngTcamSapAggMeter.setDescription(' Ingress tcam sap aggregate meter resource')
tCardResOperIngTcamQosSapIng = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperIngTcamQosSapIng.setStatus('current')
if mibBuilder.loadTexts: tCardResOperIngTcamQosSapIng.setDescription(' Ingress tcam sap sap ingress resource')
tCardResOperIngTcamQosSapIngIpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperIngTcamQosSapIngIpv4.setStatus('current')
if mibBuilder.loadTexts: tCardResOperIngTcamQosSapIngIpv4.setDescription(' Ingress tcam sap ingress ipv4 resource')
tCardResOperIngTcamQosSapIngIpv4Ipv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperIngTcamQosSapIngIpv4Ipv6.setStatus('current')
if mibBuilder.loadTexts: tCardResOperIngTcamQosSapIngIpv4Ipv6.setDescription(' Ingress tcam sap ingress ipv4, ipv6 resource')
tCardResOperIngTcamQosSapIngMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperIngTcamQosSapIngMac.setStatus('current')
if mibBuilder.loadTexts: tCardResOperIngTcamQosSapIngMac.setDescription(' Ingress tcam sap ingress mac resource')
tCardResOperIngTcamAclSapIng = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperIngTcamAclSapIng.setStatus('current')
if mibBuilder.loadTexts: tCardResOperIngTcamAclSapIng.setDescription(' Ingress tcam acl sap ingress resource')
tCardResOperIngTcamAclSapIngIpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperIngTcamAclSapIngIpv4.setStatus('current')
if mibBuilder.loadTexts: tCardResOperIngTcamAclSapIngIpv4.setDescription(' Ingress tcam acl sap ingress ipv4 resource')
tCardResOperIngTcamAclSapIng64Ipv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperIngTcamAclSapIng64Ipv6.setStatus('current')
if mibBuilder.loadTexts: tCardResOperIngTcamAclSapIng64Ipv6.setDescription(' Ingress tcam acl sap ingress 64 bit ipv6 match resource')
tCardResOperIngTcamAclSapIng128Ipv4Ipv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperIngTcamAclSapIng128Ipv4Ipv6.setStatus('current')
if mibBuilder.loadTexts: tCardResOperIngTcamAclSapIng128Ipv4Ipv6.setDescription(' Ingress tcam acl sap ingress 128 bit ipv6 resource')
tCardResOperIngTcamAclSapIngMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperIngTcamAclSapIngMac.setStatus('current')
if mibBuilder.loadTexts: tCardResOperIngTcamAclSapIngMac.setDescription(' Ingress tcam acl sap ingress mac resource')
tCardResOperEgrTcamAclSapEgr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperEgrTcamAclSapEgr.setStatus('current')
if mibBuilder.loadTexts: tCardResOperEgrTcamAclSapEgr.setDescription(' Egress tcam acl sap sap egress 1resource')
tCardResOperEgrTcamAclSapEgrMacIpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperEgrTcamAclSapEgrMacIpv4.setStatus('current')
if mibBuilder.loadTexts: tCardResOperEgrTcamAclSapEgrMacIpv4.setDescription(' Egress tcam acl sap egress mac ipv4 resource')
tCardResOperEgrTcamAclSapEgr128Ipv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperEgrTcamAclSapEgr128Ipv6.setStatus('current')
if mibBuilder.loadTexts: tCardResOperEgrTcamAclSapEgr128Ipv6.setDescription('Egress tcam acl sap egress 128bit ipv6 resource')
tCardResOperEgrTcamAclSapEgr64MacIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperEgrTcamAclSapEgr64MacIpv6.setStatus('current')
if mibBuilder.loadTexts: tCardResOperEgrTcamAclSapEgr64MacIpv6.setDescription('Egress tcam acl sap egress mac resource')
tCardResOperEgrTcamAclSapEgrMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperEgrTcamAclSapEgrMac.setStatus('current')
if mibBuilder.loadTexts: tCardResOperEgrTcamAclSapEgrMac.setDescription('Egress tcam acl sap egress mac resource')
tCardResOperIngTcamEthCfm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperIngTcamEthCfm.setStatus('current')
if mibBuilder.loadTexts: tCardResOperIngTcamEthCfm.setDescription(' Ingress tcam eth cfm resource')
tCardResOperIngTcamEthCfmUpMep = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperIngTcamEthCfmUpMep.setStatus('current')
if mibBuilder.loadTexts: tCardResOperIngTcamEthCfmUpMep.setDescription(' Ingress tcam eth cfm up-mep resource')
tCardResOperG8032CtrlSapStartVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperG8032CtrlSapStartVlan.setStatus('current')
if mibBuilder.loadTexts: tCardResOperG8032CtrlSapStartVlan.setDescription('G8032 control sap tag start vlan')
tCardResOperG8032CtrlSapEndVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperG8032CtrlSapEndVlan.setStatus('current')
if mibBuilder.loadTexts: tCardResOperG8032CtrlSapEndVlan.setDescription('G8032 control sap tag End vlan')
tCardResOperResIpMacMatchEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 10), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperResIpMacMatchEnable.setStatus('current')
if mibBuilder.loadTexts: tCardResOperResIpMacMatchEnable.setDescription('Resource allocation for ip mac match enable')
tCardResOperIngTcamEthCfmDownMep = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperIngTcamEthCfmDownMep.setStatus('current')
if mibBuilder.loadTexts: tCardResOperIngTcamEthCfmDownMep.setDescription(' Ingress tcam eth cfm down-mep resource')
tCardResOperIngTcamIpMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 10, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResOperIngTcamIpMulticast.setStatus('current')
if mibBuilder.loadTexts: tCardResOperIngTcamIpMulticast.setDescription('tCardResOperIngTcamIpMulticast sets the resource to be used for ip-multicast.')
tmnxSASSecurityNotificationObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 15, 5))
tmnxLoginUserName = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 15, 5, 1), TNamedItem().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxLoginUserName.setStatus('current')
if mibBuilder.loadTexts: tmnxLoginUserName.setDescription('The value of tmnxUserName specifies the name for a system user. This name must be unique amongst the table entries. tmnxUserName will be sent in the notifications when the user crosses the threshold login attempts configured in tmnxPasswordAttemptsCount')
tmnxLoginUserSrcIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 15, 5, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxLoginUserSrcIPAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxLoginUserSrcIPAddress.setDescription('The value of tmnxLoginUserSrcIPAddress specifies the source address of the client station from where the user has tried to login')
tmnxLoginMaxAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 15, 5, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxLoginMaxAttempts.setStatus('current')
if mibBuilder.loadTexts: tmnxLoginMaxAttempts.setDescription('The value of tmnxLoginMaxAttempts specifies the number of times user could attempt to login before raising a max attempt trap')
tmnxUserLoginMaxAttempts = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 3, 2, 0, 1)).setObjects(("TIMETRA-SAS-SYSTEM-MIB", "tmnxLoginUserName"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxLoginUserSrcIPAddress"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxLoginMaxAttempts"))
if mibBuilder.loadTexts: tmnxUserLoginMaxAttempts.setStatus('current')
if mibBuilder.loadTexts: tmnxUserLoginMaxAttempts.setDescription('The tmnxUserLoginMaxAttempts is generated when a user failed to authenticate in more than the permitted number of login retries.')
tmnxSSHUserLoginMaxAttempts = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 3, 2, 0, 3)).setObjects(("TIMETRA-SAS-SYSTEM-MIB", "tmnxLoginUserName"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxLoginUserSrcIPAddress"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxLoginMaxAttempts"))
if mibBuilder.loadTexts: tmnxSSHUserLoginMaxAttempts.setStatus('current')
if mibBuilder.loadTexts: tmnxSSHUserLoginMaxAttempts.setDescription('The tmnxSSHUserLoginMaxAttempts is generated when a user failed to authenticate in more than the permitted number of login retries through SSH.')
tmnxEqPowerInputFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 2, 3)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwName"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyInputStatus"))
if mibBuilder.loadTexts: tmnxEqPowerInputFailure.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPowerInputFailure.setDescription("Generated when one of the chassis's power source supplies fails.")
tmnxEqPowerOutputFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 2, 4)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwName"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyOutputStatus"))
if mibBuilder.loadTexts: tmnxEqPowerOutputFailure.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPowerOutputFailure.setDescription("Generated when one of the chassis's power output fails.")
sysOperGrpOperStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 6, 2, 25)).setObjects(("TIMETRA-SAS-SYSTEM-MIB", "sysOperGrpOperStatus"))
if mibBuilder.loadTexts: sysOperGrpOperStatusChanged.setStatus('current')
if mibBuilder.loadTexts: sysOperGrpOperStatusChanged.setDescription('[CAUSE] The svcOperGrpOperStatusChanged notification is generated when there is a change in the value of svcOperGrpOperStatus. [EFFECT] Status of the one or more of the members of the operational group has changed. [RECOVERY] Operational status of the members of the operational-group will need to be investigated.')
tmnxChassisNotifyMDACfgFailReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 15, 5, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyMDACfgFailReason.setStatus('current')
if mibBuilder.loadTexts: tmnxChassisNotifyMDACfgFailReason.setDescription('Used by tmnxEqMDACfgMissing, the value of tmnxChassisNotifyMDACfgFailReason contains the reason for MDA config failure.')
tmnxSASSysCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 3, 1))
tmnxSASSysGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 3, 2))
tmnxSASSysSecConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 3, 4))
tmnxSASSysSecGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 3, 4, 1))
tmnxSASChassisGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 10))
tmnxSASSysV1v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 3, 2, 1)).setObjects(("TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkAPort"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkAIpAddr"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkAMask"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkAVlan"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkBPort"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkBIpAddr"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkBMask"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkBVlan"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiPingAddress"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkRouteNextHop"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkRouteRowStatus"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxChassisUpdateGoldenBootstrapImage"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxChassisGoldenBootstrapImageSrc"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxChassisValidateGoldenBootstrapImage"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxChassisGoldenBootstrapImageVersion"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxChassisRebootAutoInit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASSysV1v0Group = tmnxSASSysV1v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSASSysV1v0Group.setDescription(' sas system group object definition for first release')
tmnxSASSysV2v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 3, 2, 2)).setObjects(("TIMETRA-SAS-SYSTEM-MIB", "tSASMpointBwPlcy"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkAPort"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkAIpAddr"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkAMask"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkAVlan"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkBPort"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkBIpAddr"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkBMask"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkBVlan"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiPingAddress"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkRouteNextHop"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiUplinkRouteRowStatus"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxChassisUpdateGoldenBootstrapImage"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxChassisGoldenBootstrapImageSrc"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxChassisValidateGoldenBootstrapImage"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxChassisGoldenBootstrapImageVersion"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxChassisRebootAutoInit"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiEthMgmtDisabled"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiEthMgmtActiveIpAddr"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiEthMgmtActiveIpMask"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiEthMgmtAutoNegotiate"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiEthMgmtSpeed"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiEthMgmtDuplex"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiEthMgmtStaticRouteNextHop"), ("TIMETRA-SAS-SYSTEM-MIB", "sbiEthMgmtStaticRouteRowStatus"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxChassisLowTempState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASSysV2v0Group = tmnxSASSysV2v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSASSysV2v0Group.setDescription(' sas system group object definition for 2.0 release')
tmnxSASSysV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 3, 2, 3)).setObjects(("TIMETRA-SAS-SYSTEM-MIB", "sbiExpansionCardType"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxFabricPolicyRowStatus"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxFabricPolicyCIR"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxFabricPolicyPIR"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxFabricPolicyCBS"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxFabricPolicyMBS"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxFabricPolicyMpointFabricPort"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxChassisPowerSupplyAssignedDCType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASSysV3v0Group = tmnxSASSysV3v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSASSysV3v0Group.setDescription(' sas system group object definition for 3.0 release')
tmnxSASSysV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 3, 2, 4)).setObjects(("TIMETRA-SAS-SYSTEM-MIB", "sbiConsoleDisabled"), ("TIMETRA-SAS-SYSTEM-MIB", "sysLoopbackNoServPort"), ("TIMETRA-SAS-SYSTEM-MIB", "sysG8032FastFloodEnable"), ("TIMETRA-SAS-SYSTEM-MIB", "sysMirrorLoopbackNoServPort"), ("TIMETRA-SAS-SYSTEM-MIB", "sysResFabricPathBandwidth"), ("TIMETRA-SAS-SYSTEM-MIB", "sysResMaxIPv6Routes"), ("TIMETRA-SAS-SYSTEM-MIB", "sysResIngTcamEthCfm"), ("TIMETRA-SAS-SYSTEM-MIB", "sysResIngTcamEthCfmUpMep"), ("TIMETRA-SAS-SYSTEM-MIB", "sysG8032FastFloodEnableOperVal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASSysV4v0Group = tmnxSASSysV4v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSASSysV4v0Group.setDescription(' sas system group object definition for 4.0 release')
tmnxSASSysV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 3, 2, 5)).setObjects(("TIMETRA-SAS-SYSTEM-MIB", "sysResIngTcamIngAclMac"), ("TIMETRA-SAS-SYSTEM-MIB", "sysResEgrTcamSapEgrAcl"), ("TIMETRA-SAS-SYSTEM-MIB", "sysResEgrTcamEgrAclMac"), ("TIMETRA-SAS-SYSTEM-MIB", "sysResEgrTcamEgrAclIpv4"), ("TIMETRA-SAS-SYSTEM-MIB", "sysResEgrTcamEgrAcl64bitIpv4Ipv6"), ("TIMETRA-SAS-SYSTEM-MIB", "sysResEgrTcamEgrAcl128bitIpv4Ipv6"), ("TIMETRA-SAS-SYSTEM-MIB", "sysResEgrTcamEgrAcl64bitIpv6Only"), ("TIMETRA-SAS-SYSTEM-MIB", "sysResEgrSapEgrClass"), ("TIMETRA-SAS-SYSTEM-MIB", "sysResEgrSapEgrClassMac"), ("TIMETRA-SAS-SYSTEM-MIB", "sysResEgrSapEgrClassIpv4"), ("TIMETRA-SAS-SYSTEM-MIB", "sysResEgrSapEgrClassIpv4Ipv6"), ("TIMETRA-SAS-SYSTEM-MIB", "sysResIngTcamSapAggMeter"), ("TIMETRA-SAS-SYSTEM-MIB", "sysResIngTcamSapAggMeterOperVal"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxChassisFanCfgMode"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxChassisFanOperMode"), ("TIMETRA-SAS-SYSTEM-MIB", "sysResIngTcamIngAcl64bitIpv4Ipv6"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxPtpTimeUsePtp"), ("TIMETRA-SAS-SYSTEM-MIB", "sysResQosSapIngQMode"), ("TIMETRA-SAS-SYSTEM-MIB", "sysResQosSapIngQOperMode"), ("TIMETRA-SAS-SYSTEM-MIB", "sysResRouterEcmpMaxRoutesDst"), ("TIMETRA-SAS-SYSTEM-MIB", "sysResRouterEcmpMaxRoutesDstOperVal"), ("TIMETRA-SAS-SYSTEM-MIB", "sysTestHdNoServPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASSysV5v0Group = tmnxSASSysV5v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSASSysV5v0Group.setDescription(' sas system group object definition for 5.0 release')
tmnxSASSysObjsV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 3, 2, 6)).setObjects(("TIMETRA-SAS-SYSTEM-MIB", "tmnxSysConsoleAlarmInput"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASSysObjsV6v0Group = tmnxSASSysObjsV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSASSysObjsV6v0Group.setDescription(' sas system group object definition for 5.0 release')
tmnxSASSysQosV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 3, 2, 7)).setObjects(("TIMETRA-SAS-SYSTEM-MIB", "sysQosWredSlopes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASSysQosV5v0Group = tmnxSASSysQosV5v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSASSysQosV5v0Group.setDescription(' sas system group object definition for 5.0 release')
tmnxSASSysV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 3, 2, 8)).setObjects(("TIMETRA-SAS-SYSTEM-MIB", "sysDhcpSnoopingSdpEnable"), ("TIMETRA-SAS-SYSTEM-MIB", "sysDhcpSnoopingEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASSysV6v0Group = tmnxSASSysV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSASSysV6v0Group.setDescription(' sas system group object definition for 6.0 release')
tmnxSASSysConsoleV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 3, 2, 9)).setObjects(("TIMETRA-SAS-SYSTEM-MIB", "tmnxSysConsoleAlarmInput"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASSysConsoleV6v0Group = tmnxSASSysConsoleV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSASSysConsoleV6v0Group.setDescription(' sas system group object definition for 6.0 release')
tmnxSASSysResPlcyV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 3, 2, 10)).setObjects(("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyRowStatus"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyIngTcamSapAggMeter"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyIngTcamQosSapIng"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyIngTcamQosSapIngIpv4"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyIngTcamQosSapIngIpv4Ipv6"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyIngTcamQosSapIngMac"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyIngTcamAclSapIng"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyIngTcamAclSapIngIpv4"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyIngTcamAclSapIng64Ipv6"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyIngTcamAclSapIng128Ipv4Ipv6"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyIngTcamAclSapIngMac"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyEgrTcamAclSapEgr"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyEgrTcamAclSapEgrMacIpv4"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyEgrTcamAclSapEgr128Ipv6"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyEgrTcamAclSapEgr64MacIpv6"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyEgrTcamAclSapEgrMac"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyDescription"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyLastChanged"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyIngTcamEthCfm"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyIngTcamEthCfmUpMep"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyG8032CtrlSapStartVlan"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyG8032CtrlSapEndVlan"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyResIpMacMatchEnable"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyIngTcamEthCfmDownMep"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyIngTcamEthCfmUpMepEnable"), ("TIMETRA-SAS-SYSTEM-MIB", "tResPlcyIngTcamEthCfmDownMepEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASSysResPlcyV6v1Group = tmnxSASSysResPlcyV6v1Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSASSysResPlcyV6v1Group.setDescription(' sas system resource policy group object definition for 6.1 release')
tmnxSASSysSecV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 3, 4, 1, 1)).setObjects(("TIMETRA-SAS-SYSTEM-MIB", "tmnxLoginUserName"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxLoginUserSrcIPAddress"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxLoginMaxAttempts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASSysSecV4v0Group = tmnxSASSysSecV4v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSASSysSecV4v0Group.setDescription(' sas system security group object definition for 4.0 release')
tmnxSASSysSecNotifyV4v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 3, 4, 1, 2)).setObjects(("TIMETRA-SAS-SYSTEM-MIB", "tmnxUserLoginMaxAttempts"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxSSHUserLoginMaxAttempts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASSysSecNotifyV4v0Group = tmnxSASSysSecNotifyV4v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSASSysSecNotifyV4v0Group.setDescription('The group of notifications supported in 7210 4.0 release')
tmnxSASChassisNotificationV3v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 10, 1)).setObjects(("TIMETRA-SAS-SYSTEM-MIB", "tmnxEnvTempTooLow"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxRootDirFull"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxEqPowerInputFailure"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxEqPowerOutputFailure"), ("TIMETRA-SAS-SYSTEM-MIB", "tmnxEqMDACfgMissing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASChassisNotificationV3v0Group = tmnxSASChassisNotificationV3v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSASChassisNotificationV3v0Group.setDescription('The group of notifications supported in 7210 3.0 release')
tmnxSASChassisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 10, 2)).setObjects(("TIMETRA-SAS-SYSTEM-MIB", "tmnxChassisSystemLEDState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASChassisGroup = tmnxSASChassisGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxSASChassisGroup.setDescription('The group of notifications supported in 7210 5.0 release')
tmnxSASChassisV61Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 10, 3)).setObjects(("TIMETRA-SAS-SYSTEM-MIB", "tmnxCpmCardBootImageSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASChassisV61Group = tmnxSASChassisV61Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSASChassisV61Group.setDescription('The group of notifications supported in 7210 6.1 release')
mibBuilder.exportSymbols("TIMETRA-SAS-SYSTEM-MIB", tmnxChassisRebootAutoInit=tmnxChassisRebootAutoInit, tResDecommOperEntry=tResDecommOperEntry, sbiUplinkRouteRowStatus=sbiUplinkRouteRowStatus, tmnxHwExtnTable=tmnxHwExtnTable, tmnxSASSecurityObjects=tmnxSASSecurityObjects, sbiNoServicePortTwo=sbiNoServicePortTwo, sbiEthMgmtStaticRouteDest=sbiEthMgmtStaticRouteDest, tResDecommId=tResDecommId, tResDecommOperTable=tResDecommOperTable, sysResRouterMaxIPSubnets=sysResRouterMaxIPSubnets, tmnxEnvTempTooLow=tmnxEnvTempTooLow, sbiUplinkBSpeed=sbiUplinkBSpeed, tmnxVwmShelfCardEqType=tmnxVwmShelfCardEqType, tmnxFabricPolicyEntry=tmnxFabricPolicyEntry, tmnxVwmShelfCardIdMismatch=tmnxVwmShelfCardIdMismatch, tmnxChassisGoldenBootstrapImageSrc=tmnxChassisGoldenBootstrapImageSrc, tmnxVwmShelfCardId=tmnxVwmShelfCardId, tResPlcyIngTcamQosSapIngMac=tResPlcyIngTcamQosSapIngMac, tmnxCpmCardBootImageSource=tmnxCpmCardBootImageSource, sysResMaxIPv6RoutesOperVal=sysResMaxIPv6RoutesOperVal, sysMpointMgmtInfo=sysMpointMgmtInfo, sysResEgrSapEgrClass=sysResEgrSapEgrClass, sysDhcpSnoopingEnable=sysDhcpSnoopingEnable, sysSASObjs=sysSASObjs, tmnxSASChassisNotification=tmnxSASChassisNotification, tmnxSASSecurityNotifyPrefix=tmnxSASSecurityNotifyPrefix, sysResFabricPathBandwidth=sysResFabricPathBandwidth, sbiUplinkBAutoNegotiate=sbiUplinkBAutoNegotiate, tmnxVwmShelfCardEntry=tmnxVwmShelfCardEntry, tmnxChassisNotifyMDACfgFailReason=tmnxChassisNotifyMDACfgFailReason, tCardResOperIngTcamAclSapIng128Ipv4Ipv6=tCardResOperIngTcamAclSapIng128Ipv4Ipv6, tmnxFabricPolicyCIR=tmnxFabricPolicyCIR, tmnxVwmShelfCardOperState=tmnxVwmShelfCardOperState, tCardResOperEgrTcamAclSapEgrMac=tCardResOperEgrTcamAclSapEgrMac, tResPlcyIngTcamEthCfm=tResPlcyIngTcamEthCfm, sbiEthMgmtStaticRouteRowStatus=sbiEthMgmtStaticRouteRowStatus, sysOperGrpTable=sysOperGrpTable, tCardResOperIngTcamIpMulticast=tCardResOperIngTcamIpMulticast, tCardResOperTable=tCardResOperTable, sbiExpansionCardType=sbiExpansionCardType, tSASMpointBwPlcy=tSASMpointBwPlcy, tmnxSASSysV6v0Group=tmnxSASSysV6v0Group, sbiNoServicePortOne=sbiNoServicePortOne, sysOperGrpEntry=sysOperGrpEntry, sysResIngSapIngClassIpv4Ipv6=sysResIngSapIngClassIpv4Ipv6, sysResEgrTcamSapEgrAcl=sysResEgrTcamSapEgrAcl, sysResQosMbsPool=sysResQosMbsPool, tmnxSASChassisGroup=tmnxSASChassisGroup, tResPlcyResIpMacMatchEnable=tResPlcyResIpMacMatchEnable, tmnxFabricPolicyCBS=tmnxFabricPolicyCBS, sbiEthMgmtActiveIpMask=sbiEthMgmtActiveIpMask, sbiUplinkBIpAddr=sbiUplinkBIpAddr, tmnxChassisPowerSupplyExtnTable=tmnxChassisPowerSupplyExtnTable, tmnxDyingGasp=tmnxDyingGasp, tmnxVwmShelfCardType=tmnxVwmShelfCardType, tCardResOperEgrTcamAclSapEgr128Ipv6=tCardResOperEgrTcamAclSapEgr128Ipv6, tmnxSASSysV4v0Group=tmnxSASSysV4v0Group, sysLoopBackInfo=sysLoopBackInfo, tCardResOperIngTcamQosSapIngIpv4=tCardResOperIngTcamQosSapIngIpv4, sysResEgrSapEgrClassIpv4Ipv6=sysResEgrSapEgrClassIpv4Ipv6, tmnxSASSysSecGroups=tmnxSASSysSecGroups, sysOperGrpOperStatusChanged=sysOperGrpOperStatusChanged, sysOperGrpHoldDownTime=sysOperGrpHoldDownTime, sbiUplinkAdminMode=sbiUplinkAdminMode, tmnxSASSysSecV4v0Group=tmnxSASSysSecV4v0Group, aluExtPoePowerSupplyStatus=aluExtPoePowerSupplyStatus, sysClockInfo=sysClockInfo, tCardResOperEntry=tCardResOperEntry, sbiUplinkAMask=sbiUplinkAMask, tmnxSASSysMIBNotifyPrefix=tmnxSASSysMIBNotifyPrefix, sysResIngTcamSapAggMeter=sysResIngTcamSapAggMeter, tCardResOperIngTcamAclSapIng64Ipv6=tCardResOperIngTcamAclSapIng64Ipv6, tmnxVwmShelfIdMismatch=tmnxVwmShelfIdMismatch, sbiUplinkBPort=sbiUplinkBPort, sysOperGrpRowStatus=sysOperGrpRowStatus, sbiUplinkAPort=sbiUplinkAPort, sysResEgrTcamEgrAclIpv4=sysResEgrTcamEgrAclIpv4, tResPlcyIngTcamAclSapIng64Ipv6=tResPlcyIngTcamAclSapIng64Ipv6, aluExtPoeExternalPowerSupplyStatus=aluExtPoeExternalPowerSupplyStatus, tmnxSASSysQosV5v0Group=tmnxSASSysQosV5v0Group, aluExtTmnxChassisTable=aluExtTmnxChassisTable, sbiEthMgmtStaticRouteNextHop=sbiEthMgmtStaticRouteNextHop, tResPlcyEgrTcamAclSapEgr64MacIpv6=tResPlcyEgrTcamAclSapEgr64MacIpv6, sysOperGrpCreationOrigin=sysOperGrpCreationOrigin, sbiUplinkOperMode=sbiUplinkOperMode, sbiUplinkAAutoNegotiate=sbiUplinkAAutoNegotiate, sysResRouterEcmpMaxRoutesDstOperVal=sysResRouterEcmpMaxRoutesDstOperVal, tResPlcyIngTcamAclSapIngIpv4=tResPlcyIngTcamAclSapIngIpv4, sysResIngTcamEthCfmDownMep=sysResIngTcamEthCfmDownMep, sysResIngTcamEthCfmUpMepPrimaryVlan=sysResIngTcamEthCfmUpMepPrimaryVlan, tResPlcyEgrTcamAclSapEgrMacIpv4=tResPlcyEgrTcamAclSapEgrMacIpv4, tResPlcyEgrTcamAclSapEgr128Ipv6=tResPlcyEgrTcamAclSapEgr128Ipv6, sysOperGrpTblLastChanged=sysOperGrpTblLastChanged, tmnxSASSysGroups=tmnxSASSysGroups, sysResIngTcamSapAggMeterOperVal=sysResIngTcamSapAggMeterOperVal, tmnxLoginMaxAttempts=tmnxLoginMaxAttempts, sysQosPortSchedModeEnable=sysQosPortSchedModeEnable, tmnxVwmShelfInserted=tmnxVwmShelfInserted, tmnxVwmShelfCardRemoved=tmnxVwmShelfCardRemoved, sbiUplinkBVlan=sbiUplinkBVlan, sysResIngSapIngClassIpv4=sysResIngSapIngClassIpv4, tmnxChassisLowTempState=tmnxChassisLowTempState, tCardResOperIngTcamQosSapIngIpv4Ipv6=tCardResOperIngTcamQosSapIngIpv4Ipv6, tCardResOperResIpMacMatchEnable=tCardResOperResIpMacMatchEnable, sysResProfPlcyObjs=sysResProfPlcyObjs, tmnxSASSysSecConformance=tmnxSASSysSecConformance, tmnxVwmShelfRemoved=tmnxVwmShelfRemoved, tmnxFabricPolicyMBS=tmnxFabricPolicyMBS, sysResEgrTcamEgrAcl128bitIpv4Ipv6=sysResEgrTcamEgrAcl128bitIpv4Ipv6, tResPlcyTable=tResPlcyTable, sysResEgrTcamEgrAcl64bitIpv4Ipv6=sysResEgrTcamEgrAcl64bitIpv4Ipv6, tCardResOperEgrTcamAclSapEgrMacIpv4=tCardResOperEgrTcamAclSapEgrMacIpv4, tmnxSASSecurityNotifications=tmnxSASSecurityNotifications, tCardResOperIngTcamSapAggMeter=tCardResOperIngTcamSapAggMeter, sbiConsoleDisabled=sbiConsoleDisabled, tmnxLoginUserSrcIPAddress=tmnxLoginUserSrcIPAddress, sysResEgrSapEgrClassMac=sysResEgrSapEgrClassMac, tmnxChassisUpdateGoldenBootstrapImage=tmnxChassisUpdateGoldenBootstrapImage, sysOperGrpName=sysOperGrpName, tResPlcyG8032CtrlSapEndVlan=tResPlcyG8032CtrlSapEndVlan, tResPlcyIngTcamQosSapIngIpv4Ipv6=tResPlcyIngTcamQosSapIngIpv4Ipv6, tResPlcyIngTcamEthCfmUpMep=tResPlcyIngTcamEthCfmUpMep, tmnxVwmShelfPSInputFailure=tmnxVwmShelfPSInputFailure, sbiPingAddress=sbiPingAddress, tmnxVwmShelfVwmType=tmnxVwmShelfVwmType, tmnxEqPowerInputFailure=tmnxEqPowerInputFailure, tResDecommTable=tResDecommTable, tmnxEqPowerOutputFailure=tmnxEqPowerOutputFailure, tmnxSASSysObjsV6v0Group=tmnxSASSysObjsV6v0Group, tmnxCpmCardExtnEntry=tmnxCpmCardExtnEntry, sysResEgrTcamEgrAcl64bitIpv6Only=sysResEgrTcamEgrAcl64bitIpv6Only, sbiEthMgmtDuplex=sbiEthMgmtDuplex, tmnxCpmCardExtnTable=tmnxCpmCardExtnTable, sysResIngTcamIngAcl128bitIpv4Ipv6=sysResIngTcamIngAcl128bitIpv4Ipv6, tResPlcyG8032CtrlSapStartVlan=tResPlcyG8032CtrlSapStartVlan, timetraSASysMIBModule=timetraSASysMIBModule, tResPlcyIngTcamEthCfmUpMepEnable=tResPlcyIngTcamEthCfmUpMepEnable, tmnxSASChassisObjs=tmnxSASChassisObjs, tmnxVwmShelfInputLoss=tmnxVwmShelfInputLoss, tmnxChassisFanOperMode=tmnxChassisFanOperMode, tCardResOperIngTcamEthCfm=tCardResOperIngTcamEthCfm, sysResIngTcamSapIngAcl=sysResIngTcamSapIngAcl, tCardResOperG8032CtrlSapStartVlan=tCardResOperG8032CtrlSapStartVlan, sbiEthMgmtActiveIpAddr=sbiEthMgmtActiveIpAddr, tmnxChassisValidateGoldenBootstrapImage=tmnxChassisValidateGoldenBootstrapImage, sbiEthMgmtStaticRouteTable=sbiEthMgmtStaticRouteTable, sbiEthMgmtAutoNegotiate=sbiEthMgmtAutoNegotiate, tmnxSASCardObjs=tmnxSASCardObjs, tmnxChassisGoldenBootstrapImageVersion=tmnxChassisGoldenBootstrapImageVersion, tResDecommEntry=tResDecommEntry, sysResIngSapIngClass=sysResIngSapIngClass, tmnxChassisPowerSupplyExtnEntry=tmnxChassisPowerSupplyExtnEntry, sbiUplinkAVlan=sbiUplinkAVlan, sysOperGrpLastChange=sysOperGrpLastChange, tmnxSASSysV1v0Group=tmnxSASSysV1v0Group, sysEthMgmtBofInfo=sysEthMgmtBofInfo, tmnxRootDirFull=tmnxRootDirFull, tmnxSASSysV5v0Group=tmnxSASSysV5v0Group, sbiUplinkRouteEntry=sbiUplinkRouteEntry, tmnxSysConsoleAlarmInput=tmnxSysConsoleAlarmInput, tResPlcyRowStatus=tResPlcyRowStatus, tResPlcyIngTcamSapAggMeter=tResPlcyIngTcamSapAggMeter, sysOperGrpNumMembers=sysOperGrpNumMembers, sbiUplinkAIpAddr=sbiUplinkAIpAddr, tResPlcyLastChanged=tResPlcyLastChanged, tmnxSASChassisNotificationV3v0Group=tmnxSASChassisNotificationV3v0Group, tmnxSASSysV3v0Group=tmnxSASSysV3v0Group, tmnxFabricPolicyTable=tmnxFabricPolicyTable, tResPlcyDescription=tResPlcyDescription, sysOperGrpNumMonitoring=sysOperGrpNumMonitoring, sbiEthMgmtStaticRouteMask=sbiEthMgmtStaticRouteMask, sysResourceProfInfo=sysResourceProfInfo, tmnxFabricPolicyRowStatus=tmnxFabricPolicyRowStatus, tCardResOperIngTcamEthCfmDownMep=tCardResOperIngTcamEthCfmDownMep, tmnxSASSysV2v0Group=tmnxSASSysV2v0Group, tmnxAlarmInputVoltageFailure=tmnxAlarmInputVoltageFailure, tmnxSASChassisNotificationObjs=tmnxSASChassisNotificationObjs, tmnxSASSysConformance=tmnxSASSysConformance, sysSASBofInfo=sysSASBofInfo, tResDecommOperToPortMap=tResDecommOperToPortMap, sysOperGrpHoldDownTimeRemain=sysOperGrpHoldDownTimeRemain, tmnxHwExtnEntry=tmnxHwExtnEntry, TmnxPtpTime=TmnxPtpTime, sbiEthMgmtStaticRouteEntry=sbiEthMgmtStaticRouteEntry, tResPlcyIngTcamEthCfmDownMepEnable=tResPlcyIngTcamEthCfmDownMepEnable, sbiUplinkRouteMask=sbiUplinkRouteMask, tmnxChassisSystemLEDState=tmnxChassisSystemLEDState, tmnxVwmShelfEquippedType=tmnxVwmShelfEquippedType, tCardResOperIngTcamEthCfmUpMep=tCardResOperIngTcamEthCfmUpMep, sysResQosSapIngQOperMode=sysResQosSapIngQOperMode, tCardResOperIngTcamAclSapIngMac=tCardResOperIngTcamAclSapIngMac, tmnxCardExtnTable=tmnxCardExtnTable, tmnxSASSysResPlcyV6v1Group=tmnxSASSysResPlcyV6v1Group, sysResIngTcamIngAclIpv4=sysResIngTcamIngAclIpv4, tmnxHwLowTempThreshold=tmnxHwLowTempThreshold, tmnxUserLoginMaxAttempts=tmnxUserLoginMaxAttempts, tResDecommOperFromPortMap=tResDecommOperFromPortMap, sbiUplinkRouteTable=sbiUplinkRouteTable, sysMirrorLoopbackNoServPort=sysMirrorLoopbackNoServPort, tmnxVwmshelfTypeConnected=tmnxVwmshelfTypeConnected, tmnxSASSysConsoleV6v0Group=tmnxSASSysConsoleV6v0Group, sysG8032FastFloodEnableOperVal=sysG8032FastFloodEnableOperVal, sysOperGrpHoldUpTime=sysOperGrpHoldUpTime, tResPlcyId=tResPlcyId, sysDhcpSnoopingSdpEnable=sysDhcpSnoopingSdpEnable, tmnxVwmShelfCardCfgError=tmnxVwmShelfCardCfgError, tmnxSASSysNotifications=tmnxSASSysNotifications, tCardResOperIngTcamQosSapIngMac=tCardResOperIngTcamQosSapIngMac, tResDecommToPortMap=tResDecommToPortMap, tmnxPtpTimeUsePtp=tmnxPtpTimeUsePtp, aluExtTmnxChassisEntry=aluExtTmnxChassisEntry, tResPlcyIngTcamAclSapIng=tResPlcyIngTcamAclSapIng, sbiPassword=sbiPassword, tmnxFabricPolicyMpointFabricPort=tmnxFabricPolicyMpointFabricPort, aluExtPoePowerMode=aluExtPoePowerMode, sysSASVwmObjs=sysSASVwmObjs, TmnxSysOperGrpCreationOrigin=TmnxSysOperGrpCreationOrigin, sbiUplinkRouteNextHop=sbiUplinkRouteNextHop, sysResIngSapIngClassMac=sysResIngSapIngClassMac, tmnxCardSysResPlcyId=tmnxCardSysResPlcyId, sysResRouterEcmpMaxRoutesDst=sysResRouterEcmpMaxRoutesDst, tResPlcyIngTcamAclSapIngMac=tResPlcyIngTcamAclSapIngMac, tResDecommRowStatus=tResDecommRowStatus, sysOperGrpOperStatus=sysOperGrpOperStatus, tmnxVwmShelfCardTable=tmnxVwmShelfCardTable, tmnxChassisPowerSupplyAssignedDCType=tmnxChassisPowerSupplyAssignedDCType, sysResMaxIPv6Routes=sysResMaxIPv6Routes, tmnxVwmShelfTable=tmnxVwmShelfTable, sysLoopbackNoServPort=sysLoopbackNoServPort, tmnxVwmShelfEntry=tmnxVwmShelfEntry, sysResIngTcamIngAclMac=sysResIngTcamIngAclMac, tmnxChassisFanExtnEntry=tmnxChassisFanExtnEntry, tResPlcyIngTcamQosSapIngIpv4=tResPlcyIngTcamQosSapIngIpv4, tmnxVwmShelfCardInserted=tmnxVwmShelfCardInserted, tmnxSASChassisV61Group=tmnxSASChassisV61Group, tResPlcyEntry=tResPlcyEntry, sysResProfDecommObjs=sysResProfDecommObjs, sysQosWredSlopes=sysQosWredSlopes, tmnxEqMDACfgMissing=tmnxEqMDACfgMissing, tmnxVwmShelfAdminState=tmnxVwmShelfAdminState, tResPlcyEgrTcamAclSapEgrMac=tResPlcyEgrTcamAclSapEgrMac, sysResIngTcamEthCfm=sysResIngTcamEthCfm, sbiUplinkRouteDest=sbiUplinkRouteDest, tmnxSASSysCompliances=tmnxSASSysCompliances, sbiUplinkADuplex=sbiUplinkADuplex, sbiEthMgmtDisabled=sbiEthMgmtDisabled, tmnxChassisFanCfgMode=tmnxChassisFanCfgMode, sysResIngTcamEthCfmDownMepPrimaryVlan=sysResIngTcamEthCfmDownMepPrimaryVlan, tmnxVwmShelfPSOutputFailure=tmnxVwmShelfPSOutputFailure, tmnxVwmShelfRowStatus=tmnxVwmShelfRowStatus, PYSNMP_MODULE_ID=timetraSASysMIBModule, tmnxFabricPolicyPIR=tmnxFabricPolicyPIR, sysTestHdNoServPort=sysTestHdNoServPort, tCardResOperEgrTcamAclSapEgr=tCardResOperEgrTcamAclSapEgr)
mibBuilder.exportSymbols("TIMETRA-SAS-SYSTEM-MIB", sbiUplinkBMask=sbiUplinkBMask, tmnxChassisExtnEntry=tmnxChassisExtnEntry, tmnxSASSecurityNotificationObjs=tmnxSASSecurityNotificationObjs, tCardResOperEgrTcamAclSapEgr64MacIpv6=tCardResOperEgrTcamAclSapEgr64MacIpv6, tmnxVwmShelfCardAdminState=tmnxVwmShelfCardAdminState, tmnxSASChassisGroups=tmnxSASChassisGroups, tmnxUsbUnknownDev=tmnxUsbUnknownDev, sysResIpMacMatchEnable=sysResIpMacMatchEnable, sysResIngTcamEthCfmUpMep=sysResIngTcamEthCfmUpMep, tCardResOperIngTcamQosSapIng=tCardResOperIngTcamQosSapIng, tResDecommFromPortMap=tResDecommFromPortMap, sysResIngTcamIngAcl64bitIpv4Ipv6=sysResIngTcamIngAcl64bitIpv4Ipv6, sysG8032FastFlood=sysG8032FastFlood, tmnxVwmShelfOutputLoss=tmnxVwmShelfOutputLoss, tCardResOperIngTcamAclSapIng=tCardResOperIngTcamAclSapIng, sysOperGrpObjs=sysOperGrpObjs, tResPlcyEgrTcamAclSapEgr=tResPlcyEgrTcamAclSapEgr, tResPlcyIngTcamEthCfmDownMep=tResPlcyIngTcamEthCfmDownMep, sysResQosSapIngQMode=sysResQosSapIngQMode, sbiUplinkBDuplex=sbiUplinkBDuplex, tmnxCardExtnEntry=tmnxCardExtnEntry, sysOperGrpHoldUpTimeRemain=sysOperGrpHoldUpTimeRemain, tCardResOperG8032CtrlSapEndVlan=tCardResOperG8032CtrlSapEndVlan, sysResEgrSapEgrClassIpv4=sysResEgrSapEgrClassIpv4, sbiUplinkASpeed=sbiUplinkASpeed, tmnxSASSysSecNotifyV4v0Group=tmnxSASSysSecNotifyV4v0Group, tmnxSASSysObjs=tmnxSASSysObjs, tmnxChassisExtnTable=tmnxChassisExtnTable, tmnxChassisFanExtnTable=tmnxChassisFanExtnTable, tmnxVwmShelfOperState=tmnxVwmShelfOperState, sbiUplinkAorB=sbiUplinkAorB, sysResIngTcamIngAcl64bitIpv6Only=sysResIngTcamIngAcl64bitIpv6Only, tmnxVwmShelfId=tmnxVwmShelfId, tmnxSSHUserLoginMaxAttempts=tmnxSSHUserLoginMaxAttempts, TmnxFanCfgMode=TmnxFanCfgMode, tmnxFabricPolicyIndex=tmnxFabricPolicyIndex, tResPlcyIngTcamAclSapIng128Ipv4Ipv6=tResPlcyIngTcamAclSapIng128Ipv4Ipv6, tResPlcyIngTcamQosSapIng=tResPlcyIngTcamQosSapIng, sysResEgrTcamEgrAclMac=sysResEgrTcamEgrAclMac, tCardResOperIngTcamAclSapIngIpv4=tCardResOperIngTcamAclSapIngIpv4, tmnxLoginUserName=tmnxLoginUserName, sbiEthMgmtSpeed=sbiEthMgmtSpeed, sysG8032FastFloodEnable=sysG8032FastFloodEnable, tResDecommOperId=tResDecommOperId, sysQosObjs=sysQosObjs)
