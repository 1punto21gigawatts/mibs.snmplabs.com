#
# PySNMP MIB module TIMETRA-PPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-PPP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:20:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, NotificationType, Bits, Gauge32, Counter64, TimeTicks, Unsigned32, Counter32, IpAddress, Integer32, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "NotificationType", "Bits", "Gauge32", "Counter64", "TimeTicks", "Unsigned32", "Counter32", "IpAddress", "Integer32", "ObjectIdentity", "iso")
TextualConvention, TimeInterval, DisplayString, MacAddress, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeInterval", "DisplayString", "MacAddress", "TimeStamp")
tmnxChassisIndex, tmnxHwObjs, tmnxHwNotification, tmnxHwConformance = mibBuilder.importSymbols("TIMETRA-CHASSIS-MIB", "tmnxChassisIndex", "tmnxHwObjs", "tmnxHwNotification", "tmnxHwConformance")
timetraSRMIBModules, = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "timetraSRMIBModules")
tmnxPortPortID, = mibBuilder.importSymbols("TIMETRA-PORT-MIB", "tmnxPortPortID")
tmnxPppMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 26))
tmnxPppMIBModule.setRevisions(('1908-01-01 00:00', '1907-01-01 00:00', '1906-03-15 00:00', '1905-01-24 00:00', '1904-03-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tmnxPppMIBModule.setRevisionsDescriptions(('Rev 6.0 01 Jan 2008 00:00 6.0 release of the TIMETRA-PPP-MIB.', 'Rev 5.0 01 Jan 2007 00:00 5.0 release of the TIMETRA-PPP-MIB.', 'Rev 4.0 15 Mar 2006 00:00 4.0 release of the TIMETRA-PPP-MIB.', 'Rev 2.1 24 Jan 2005 00:00 2.1 release of the TIMETRA-PPP-MIB.', 'Rev 2.0 01 Mar 2004 00:00 2.0 release of the TIMETRA-PPP-MIB.',))
if mibBuilder.loadTexts: tmnxPppMIBModule.setLastUpdated('0801010000Z')
if mibBuilder.loadTexts: tmnxPppMIBModule.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: tmnxPppMIBModule.setContactInfo('Alcatel-Lucent SROS Support Web: http://support.alcatel-lucent.com')
if mibBuilder.loadTexts: tmnxPppMIBModule.setDescription("This document is the SNMP MIB module to manage and provision the hardware components of the Alcatel-Lucent SROS device. Copyright 2003-2011 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel-Lucent's proprietary intellectual property. Alcatel-Lucent retains all title and ownership in the Specification, including any revisions. Alcatel-Lucent grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel-Lucent products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel-Lucent makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tmnxPppObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5))
tmnxPppNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 3))
tmnxPppNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 3, 0))
tmnxPppConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3))
class TmnxPppCpState(TextualConvention, Integer32):
    description = 'The TmnxPppCpState data type is an enumerated integer that describes the current status of a PPP link. It can be applied to both LCP and NCP links.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("requestSent", 7), ("ackReceived", 8), ("ackSent", 9), ("opened", 10))

tmnxPppTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1), )
if mibBuilder.loadTexts: tmnxPppTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPppTable.setDescription('The tmnxPppTable has an entry for each port in the system that is configured for PPP.')
tmnxPppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxPppEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPppEntry.setDescription('Each row entry represents a port from the tmnxPortTable that is configured for PPP. Entries cannot be created and deleted via SNMP SET operations.')
tmnxPppLinkPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dead", 1), ("establish", 2), ("authenticate", 3), ("network", 4), ("terminate", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLinkPhase.setStatus('current')
if mibBuilder.loadTexts: tmnxPppLinkPhase.setDescription('The current link phase for this PPP connection.')
tmnxPppLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLocalAddress.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPppLocalAddress.setDescription('The Ip address assigned the local end of the PPP link. This object was made obsolete in the 4.0 release.')
tmnxPppRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppRemoteAddress.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPppRemoteAddress.setDescription('The Ip address of the remote end of the PPP link. This object was made obsolete in the 4.0 release.')
tmnxPppRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppRemoteMacAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxPppRemoteMacAddress.setDescription('The Ethernet MacAddress sent by the remote end of the PPP link.')
tmnxPppLineMonitorMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("keepalive", 2), ("lqm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLineMonitorMethod.setStatus('current')
if mibBuilder.loadTexts: tmnxPppLineMonitorMethod.setDescription('The type of line monitoring packets being sent and received on this PPP link. Note that this can be deduced from the values of tmnxPppKaPeriod and tmnxPppQuality. One can find out whether lqm or keepalive is enabled or not. That is, lqm is enabled (keepalive is disabled) if tmnxPppQuality is not zero; and keepalive is enabled if tmnxPppKaPeriod is not zero and tmnxPppQuality is zero. If tmnxPppQuality and tmnxPppKaPeriod are both set to zero, no line monitoring is used.')
tmnxPppKaPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPppKaPeriod.setStatus('current')
if mibBuilder.loadTexts: tmnxPppKaPeriod.setDescription('The value tmnxPppKaPeriod is used to configure the time interval in seconds at which keepalive requests are issued. When LQM is enabled by setting tmnxPppQuality equal to some value other than zero (0), keepalives are replaced with LQR messages.')
tmnxPppKaDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPppKaDropCount.setStatus('current')
if mibBuilder.loadTexts: tmnxPppKaDropCount.setDescription('The value of tmnxPppKaDropCount determines how many keepalive or LQR messages can be missed before the line is brought down.')
tmnxPppKaLastClearedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppKaLastClearedTime.setStatus('current')
if mibBuilder.loadTexts: tmnxPppKaLastClearedTime.setDescription('The last time that keepalive stats were cleared. Note that the keepalive stats are cleared when changing from LQM to keepalives or vice versa.')
tmnxPppKaThresholdExceedsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppKaThresholdExceedsCount.setStatus('current')
if mibBuilder.loadTexts: tmnxPppKaThresholdExceedsCount.setDescription('The number of times that tmnxPppKaDropCount was reached.')
tmnxPppKaInPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppKaInPktCount.setStatus('current')
if mibBuilder.loadTexts: tmnxPppKaInPktCount.setDescription('The number of echo-reply packets received.')
tmnxPppKaOutPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppKaOutPktCount.setStatus('current')
if mibBuilder.loadTexts: tmnxPppKaOutPktCount.setDescription('The number of echo-request packets sent.')
tmnxPppKaTimeDropLink = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 12), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppKaTimeDropLink.setStatus('current')
if mibBuilder.loadTexts: tmnxPppKaTimeDropLink.setDescription('The time remaining before the link will be declared dropped if a keepalive echo reply packet is not received.')
tmnxPppQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPppQuality.setStatus('current')
if mibBuilder.loadTexts: tmnxPppQuality.setDescription('The value of tmnxPppQuality is a percentage used by LQM to monitor the link quality. If the quality drops below this percentage, the router shuts down the link. The percentages are calculated for both the incoming and outgoing directions. When LQM is enabled by setting tmnxPppQuality to a non-zero value, Link Quality Reports (LQRs) are sent, in place of keepalives, every keepalive period. All incoming keepalives and/or LQRs are always responded to regardless of the setting of tmnxPppQuality. A value of zero (0) implies no LQM quality monitoring and is the only value supported.')
tmnxPppLqmOperPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLqmOperPeriod.setStatus('current')
if mibBuilder.loadTexts: tmnxPppLqmOperPeriod.setDescription('The value tmnxPppLqmOperPeriod is the negotiated time interval in seconds at which LQM LQR requests are issued.')
tmnxPppLqmInRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 15), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLqmInRate.setStatus('current')
if mibBuilder.loadTexts: tmnxPppLqmInRate.setDescription("The average of 'SaveInPackets'/'PeerOutPackets' in the last five consecutive LQRs received.")
tmnxPppLqmOutRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 16), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLqmOutRate.setStatus('current')
if mibBuilder.loadTexts: tmnxPppLqmOutRate.setDescription("The average of 'PeerInPackets'/'LastOutPackets' in the last five consecutive LQRs received.")
tmnxPppLqmLastClearedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLqmLastClearedTime.setStatus('current')
if mibBuilder.loadTexts: tmnxPppLqmLastClearedTime.setDescription('The last time that LQM stats were cleared.')
tmnxPppLqmThresholdExceedsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLqmThresholdExceedsCount.setStatus('current')
if mibBuilder.loadTexts: tmnxPppLqmThresholdExceedsCount.setDescription('The number of times that either tmnxPppLqmInRate or tmnxPppLqmOutRate falls below the specified quality percentage when PPP quality or LQM is enforced.')
tmnxPppLqmInPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLqmInPktCount.setStatus('current')
if mibBuilder.loadTexts: tmnxPppLqmInPktCount.setDescription('The number of LQR packets received.')
tmnxPppLqmOutPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLqmOutPktCount.setStatus('current')
if mibBuilder.loadTexts: tmnxPppLqmOutPktCount.setDescription('The number of LQR packets sent.')
tmnxPppLqmTimeDropLink = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 21), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLqmTimeDropLink.setStatus('current')
if mibBuilder.loadTexts: tmnxPppLqmTimeDropLink.setDescription('The time remaining before the link will be declared dropped if a LQM LQR message packet is not received.')
tmnxPppLocalMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLocalMagicNumber.setStatus('current')
if mibBuilder.loadTexts: tmnxPppLocalMagicNumber.setDescription('tmnxPppLocalMagicNumber is the local magic number to be sent to the peer. The magic number provides a method to detect loopbacks. If the value of tmnxPppLocalMagicNumber is the same as the value of tmnxPppRemoteMagicNumber, then it is possible that the link might be looped back. If the two magic numbers do not match, then the link is not looped back.')
tmnxPppRemoteMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppRemoteMagicNumber.setStatus('current')
if mibBuilder.loadTexts: tmnxPppRemoteMagicNumber.setDescription('tmnxPppRemoteMagicNumber is the magic number sent by the peer. If the value of tmnxPppRemoteMagicNumber is the same as the value of tmnxPppLocalMagicNumber, then it is possible that the link might be looped back. If the two magic numbers do not match, then the link is not looped back.')
tmnxPppLocalIPv4AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 24), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLocalIPv4AddressType.setStatus('current')
if mibBuilder.loadTexts: tmnxPppLocalIPv4AddressType.setDescription('tmnxPppLocalIPv4AddressType indicates the address type of the address at the local end of the PPP link.')
tmnxPppLocalIPv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 25), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLocalIPv4Address.setStatus('current')
if mibBuilder.loadTexts: tmnxPppLocalIPv4Address.setDescription('tmnxPppLocalIPv4Address indicates the IPv4 address of the local end of the PPP link.')
tmnxPppLocalIPv6AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 26), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLocalIPv6AddressType.setStatus('current')
if mibBuilder.loadTexts: tmnxPppLocalIPv6AddressType.setDescription('tmnxPppLocalIPv6AddressType indicates the address type of the address at the local end of the PPP link.')
tmnxPppLocalIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 27), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLocalIPv6Address.setStatus('current')
if mibBuilder.loadTexts: tmnxPppLocalIPv6Address.setDescription('tmnxPppLocalIPv6Address indicates the IPv6 address of the local end of the PPP link.')
tmnxPppRemoteIPv4AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 28), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppRemoteIPv4AddressType.setStatus('current')
if mibBuilder.loadTexts: tmnxPppRemoteIPv4AddressType.setDescription('tmnxPppRemoteIPv4AddressType indicates the address type of the address at the remote end of the PPP link.')
tmnxPppRemoteIPv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 29), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppRemoteIPv4Address.setStatus('current')
if mibBuilder.loadTexts: tmnxPppRemoteIPv4Address.setDescription('tmnxPppRemoteIPv4Address indicates the IPv4 address of the remote end of the PPP link.')
tmnxPppRemoteIPv6AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 30), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppRemoteIPv6AddressType.setStatus('current')
if mibBuilder.loadTexts: tmnxPppRemoteIPv6AddressType.setDescription('tmnxPppRemoteIPv6AddressType indicates the address type of the address at the remote end of the PPP link.')
tmnxPppRemoteIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 31), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppRemoteIPv6Address.setStatus('current')
if mibBuilder.loadTexts: tmnxPppRemoteIPv6Address.setDescription('tmnxPppRemoteIPv6Address indicates the IPv6 address of the remote end of the PPP link.')
tmnxPppHdrCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 32), Bits().clone(namedValues=NamedValues(("acfc", 0), ("pfc", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPppHdrCompression.setStatus('current')
if mibBuilder.loadTexts: tmnxPppHdrCompression.setDescription('The value of tmnxPppHdrCompression specifies Address Control Field Compression (ACFC) and Protocol Field Compression (PFC) behaviour over this PPP link as detailed below. tmnxPppHdrCompression| Protocol action ---------------------|----------------------------------------------- acfc | ACFC is requested in config requests sent and | accepted in config request received pfc | PFC is requested in config requests sent and | accepted in config request received')
tmnxPppCpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 2), )
if mibBuilder.loadTexts: tmnxPppCpTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPppCpTable.setDescription('The tmnxPppCpTable has an entry for each PPP Control Protocol run on each port in the system that is configured for PPP.')
tmnxPppCpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 2, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PPP-MIB", "tmnxPppCpProtocol"))
if mibBuilder.loadTexts: tmnxPppCpEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPppCpEntry.setDescription('Each row entry represents a specific Ppp Control Protocol being run on a specific port from the tmnxPortTable that is configured for PPP. Entries cannot be created and deleted via SNMP SET operations; rows are created and deleted by the agent as the tmnxPortClass and tmnxPortEncapType values are modified. For any specific link, there is one Link Control Protocol (LCP) plus one or more Network Control Protocols (NCP) depending on the type of protocols supported on the link: ipcp, mplscp, bcp or osicp.')
tmnxPppCpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("lcp", 1), ("ipcp", 2), ("mplscp", 3), ("bcp", 4), ("osicp", 5), ("lqr", 6), ("ipv6cp", 7))))
if mibBuilder.loadTexts: tmnxPppCpProtocol.setStatus('current')
if mibBuilder.loadTexts: tmnxPppCpProtocol.setDescription('The enumerated value of tmnxPppCpProtocol indicates the type of Control Protocol represented by this row entry. For any specific link, there is one Link Control Protocol (LCP) plus one or more Network Control Protocols (NCP) depending on the type of protocols supported on the link: ipcp, mplscp, bcp or osicp.')
tmnxPppCpState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 2, 1, 2), TmnxPppCpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppCpState.setStatus('current')
if mibBuilder.loadTexts: tmnxPppCpState.setDescription('The tmnxPppCpState variable indicates the current state of the PPP Control Protocol on this interface.')
tmnxPppCpLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppCpLastChange.setStatus('current')
if mibBuilder.loadTexts: tmnxPppCpLastChange.setDescription('The last time the value of tmnxPppCpState changed.')
tmnxPppCpRestartCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppCpRestartCount.setStatus('current')
if mibBuilder.loadTexts: tmnxPppCpRestartCount.setDescription("The number of times that this Control Protocol has reached the 'open' state.")
tmnxPppCpLastClearedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppCpLastClearedTime.setStatus('current')
if mibBuilder.loadTexts: tmnxPppCpLastClearedTime.setDescription('The last time tmnxPppCpRestartCount has been reset to zero.')
tmnxPppCpUp = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 3, 0, 1)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppCpState"))
if mibBuilder.loadTexts: tmnxPppCpUp.setStatus('current')
if mibBuilder.loadTexts: tmnxPppCpUp.setDescription('Generated when the finite state machine of a control protocol (LCP, LQR, etc.) reaches the OPENED state.')
tmnxPppCpDown = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 3, 0, 2)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppCpState"))
if mibBuilder.loadTexts: tmnxPppCpDown.setStatus('current')
if mibBuilder.loadTexts: tmnxPppCpDown.setDescription('Generated when the finite state machine of a control protocol (LCP, LQR, etc.) leaves the OPENED state.')
tmnxPppNcpUp = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 3, 0, 3)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppCpState"))
if mibBuilder.loadTexts: tmnxPppNcpUp.setStatus('current')
if mibBuilder.loadTexts: tmnxPppNcpUp.setDescription('Generated when the finite state machine of a network control protocol (IPCP, MPLSCP, BCP, OSICP, etc.) reaches the OPENED state.')
tmnxPppNcpDown = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 3, 0, 4)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppCpState"))
if mibBuilder.loadTexts: tmnxPppNcpDown.setStatus('current')
if mibBuilder.loadTexts: tmnxPppNcpDown.setDescription('Generated when the finite state machine of a network control protocol (IPCP, MPLSCP, BCP, OSICP, etc.) leaves the OPENED state.')
tmnxPppKeepaliveFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 3, 0, 5)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppKaPeriod"))
if mibBuilder.loadTexts: tmnxPppKeepaliveFailure.setStatus('current')
if mibBuilder.loadTexts: tmnxPppKeepaliveFailure.setDescription('Generated when the keepalive based on echo packets failed.')
tmnxPppLqmFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 3, 0, 6)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppLqmInRate"), ("TIMETRA-PPP-MIB", "tmnxPppLqmOutRate"), ("TIMETRA-PPP-MIB", "tmnxPppQuality"))
if mibBuilder.loadTexts: tmnxPppLqmFailure.setStatus('current')
if mibBuilder.loadTexts: tmnxPppLqmFailure.setDescription('Generated when the link has failed in meeting the specified quality percentage.')
tmnxPppLoopback = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 3, 0, 7)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppLocalMagicNumber"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteMagicNumber"))
if mibBuilder.loadTexts: tmnxPppLoopback.setStatus('current')
if mibBuilder.loadTexts: tmnxPppLoopback.setDescription('Generated when the value of tmnxPppLocalMagicNumber is the same as the value of tmnxPppRemoteMagicNumber sent by the peer.')
tmnxPppLoopbackClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 3, 0, 8)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppLocalMagicNumber"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteMagicNumber"))
if mibBuilder.loadTexts: tmnxPppLoopbackClear.setStatus('current')
if mibBuilder.loadTexts: tmnxPppLoopbackClear.setDescription('Generated when the loopback condition is cleared. It means that the value of tmnxPppLocalMagicNumber is different than the value of tmnxPppRemoteMagicNumber sent by the peer.')
tmnxPppCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 1))
tmnxPppGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 2))
tmnxPppCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 1, 1)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppGroup"), ("TIMETRA-PPP-MIB", "tmnxPppNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPppCompliance = tmnxPppCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPppCompliance.setDescription('The compliance statement for management of PPP protocol features using the TIMETRA-PPP-MIB.')
tmnxPpp7450V4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 1, 2)).setObjects(("TIMETRA-PPP-MIB", "tmnxPpp7450V4v0Group"), ("TIMETRA-PPP-MIB", "tmnxPppNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPpp7450V4v0Compliance = tmnxPpp7450V4v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPpp7450V4v0Compliance.setDescription('The compliance statement for management of PPP protocol features for revision 4.0 on the Alcatel 7450 SR series systems.')
tmnxPpp7750V4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 1, 3)).setObjects(("TIMETRA-PPP-MIB", "tmnxPpp7750V4v0Group"), ("TIMETRA-PPP-MIB", "tmnxPppNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPpp7750V4v0Compliance = tmnxPpp7750V4v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPpp7750V4v0Compliance.setDescription('The compliance statement for management of PPP protocol features for revision 4.0 on the Alcatel 7750 SR series systems.')
tmnxPpp7450V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 1, 4)).setObjects(("TIMETRA-PPP-MIB", "tmnxPpp7450V4v0Group"), ("TIMETRA-PPP-MIB", "tmnxPppNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPpp7450V6v0Compliance = tmnxPpp7450V6v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tmnxPpp7450V6v0Compliance.setDescription('The compliance statement for management of PPP protocol features for revision 6.0 on the Alcatel 7450 SR series systems.')
tmnxPpp77x0V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 1, 5)).setObjects(("TIMETRA-PPP-MIB", "tmnxPpp7750V4v0Group"), ("TIMETRA-PPP-MIB", "tmnxPppNotificationGroup"), ("TIMETRA-PPP-MIB", "tmnxPppCompressionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPpp77x0V6v0Compliance = tmnxPpp77x0V6v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tmnxPpp77x0V6v0Compliance.setDescription('The compliance statement for management of PPP protocol features for revision 6.0 on the Alcatel 77x0 SR series systems.')
tmnxPppGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 2, 1)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppLinkPhase"), ("TIMETRA-PPP-MIB", "tmnxPppLocalAddress"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteAddress"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteMacAddress"), ("TIMETRA-PPP-MIB", "tmnxPppLineMonitorMethod"), ("TIMETRA-PPP-MIB", "tmnxPppKaPeriod"), ("TIMETRA-PPP-MIB", "tmnxPppKaDropCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaLastClearedTime"), ("TIMETRA-PPP-MIB", "tmnxPppKaThresholdExceedsCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaInPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaOutPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaTimeDropLink"), ("TIMETRA-PPP-MIB", "tmnxPppQuality"), ("TIMETRA-PPP-MIB", "tmnxPppLqmOperPeriod"), ("TIMETRA-PPP-MIB", "tmnxPppLqmInRate"), ("TIMETRA-PPP-MIB", "tmnxPppLqmOutRate"), ("TIMETRA-PPP-MIB", "tmnxPppLqmLastClearedTime"), ("TIMETRA-PPP-MIB", "tmnxPppLqmThresholdExceedsCount"), ("TIMETRA-PPP-MIB", "tmnxPppLqmInPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppLqmOutPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppLqmTimeDropLink"), ("TIMETRA-PPP-MIB", "tmnxPppLocalMagicNumber"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteMagicNumber"), ("TIMETRA-PPP-MIB", "tmnxPppCpState"), ("TIMETRA-PPP-MIB", "tmnxPppCpLastChange"), ("TIMETRA-PPP-MIB", "tmnxPppCpRestartCount"), ("TIMETRA-PPP-MIB", "tmnxPppCpLastClearedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPppGroup = tmnxPppGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPppGroup.setDescription('The group of objects supporting management of Point-to-Point Protocol (PPP) capabilities on Alcatel 7x50 SR series systems.')
tmnxPppNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 2, 3)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppCpUp"), ("TIMETRA-PPP-MIB", "tmnxPppCpDown"), ("TIMETRA-PPP-MIB", "tmnxPppCpDown"), ("TIMETRA-PPP-MIB", "tmnxPppNcpUp"), ("TIMETRA-PPP-MIB", "tmnxPppNcpDown"), ("TIMETRA-PPP-MIB", "tmnxPppKeepaliveFailure"), ("TIMETRA-PPP-MIB", "tmnxPppLqmFailure"), ("TIMETRA-PPP-MIB", "tmnxPppLoopback"), ("TIMETRA-PPP-MIB", "tmnxPppLoopbackClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPppNotificationGroup = tmnxPppNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxPppNotificationGroup.setDescription('The group of notifications supporting the management of Point-to-Point Protocol (PPP) on Alcatel 7x50 SR series systems.')
tmnxPPPObsoleteV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 2, 4)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppLocalAddress"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPPPObsoleteV4v0Group = tmnxPPPObsoleteV4v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPPPObsoleteV4v0Group.setDescription('The group of objects in TIMETRA-PPP-MIB which are obsoleted.')
tmnxPpp7450V4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 2, 5)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppLinkPhase"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteMacAddress"), ("TIMETRA-PPP-MIB", "tmnxPppLineMonitorMethod"), ("TIMETRA-PPP-MIB", "tmnxPppKaPeriod"), ("TIMETRA-PPP-MIB", "tmnxPppKaDropCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaLastClearedTime"), ("TIMETRA-PPP-MIB", "tmnxPppKaThresholdExceedsCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaInPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaOutPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaTimeDropLink"), ("TIMETRA-PPP-MIB", "tmnxPppQuality"), ("TIMETRA-PPP-MIB", "tmnxPppLqmOperPeriod"), ("TIMETRA-PPP-MIB", "tmnxPppLqmInRate"), ("TIMETRA-PPP-MIB", "tmnxPppLqmOutRate"), ("TIMETRA-PPP-MIB", "tmnxPppLqmLastClearedTime"), ("TIMETRA-PPP-MIB", "tmnxPppLqmThresholdExceedsCount"), ("TIMETRA-PPP-MIB", "tmnxPppLqmInPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppLqmOutPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppLqmTimeDropLink"), ("TIMETRA-PPP-MIB", "tmnxPppLocalMagicNumber"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteMagicNumber"), ("TIMETRA-PPP-MIB", "tmnxPppCpState"), ("TIMETRA-PPP-MIB", "tmnxPppCpLastChange"), ("TIMETRA-PPP-MIB", "tmnxPppCpRestartCount"), ("TIMETRA-PPP-MIB", "tmnxPppCpLastClearedTime"), ("TIMETRA-PPP-MIB", "tmnxPppLocalIPv4AddressType"), ("TIMETRA-PPP-MIB", "tmnxPppLocalIPv4Address"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteIPv4AddressType"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteIPv4Address"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPpp7450V4v0Group = tmnxPpp7450V4v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPpp7450V4v0Group.setDescription('The group of objects supporting management of Point-to-Point Protocol (PPP) capabilities on the 4.0 version of Alcatel 7450 SR systems.')
tmnxPpp7750V4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 2, 6)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppLinkPhase"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteMacAddress"), ("TIMETRA-PPP-MIB", "tmnxPppLineMonitorMethod"), ("TIMETRA-PPP-MIB", "tmnxPppKaPeriod"), ("TIMETRA-PPP-MIB", "tmnxPppKaDropCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaLastClearedTime"), ("TIMETRA-PPP-MIB", "tmnxPppKaThresholdExceedsCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaInPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaOutPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaTimeDropLink"), ("TIMETRA-PPP-MIB", "tmnxPppQuality"), ("TIMETRA-PPP-MIB", "tmnxPppLqmOperPeriod"), ("TIMETRA-PPP-MIB", "tmnxPppLqmInRate"), ("TIMETRA-PPP-MIB", "tmnxPppLqmOutRate"), ("TIMETRA-PPP-MIB", "tmnxPppLqmLastClearedTime"), ("TIMETRA-PPP-MIB", "tmnxPppLqmThresholdExceedsCount"), ("TIMETRA-PPP-MIB", "tmnxPppLqmInPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppLqmOutPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppLqmTimeDropLink"), ("TIMETRA-PPP-MIB", "tmnxPppLocalMagicNumber"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteMagicNumber"), ("TIMETRA-PPP-MIB", "tmnxPppCpState"), ("TIMETRA-PPP-MIB", "tmnxPppCpLastChange"), ("TIMETRA-PPP-MIB", "tmnxPppCpRestartCount"), ("TIMETRA-PPP-MIB", "tmnxPppCpLastClearedTime"), ("TIMETRA-PPP-MIB", "tmnxPppLocalIPv4AddressType"), ("TIMETRA-PPP-MIB", "tmnxPppLocalIPv4Address"), ("TIMETRA-PPP-MIB", "tmnxPppLocalIPv6AddressType"), ("TIMETRA-PPP-MIB", "tmnxPppLocalIPv6Address"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteIPv4AddressType"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteIPv4Address"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteIPv6AddressType"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteIPv6Address"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPpp7750V4v0Group = tmnxPpp7750V4v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPpp7750V4v0Group.setDescription('The group of objects supporting management of Point-to-Point Protocol (PPP) capabilities on the 4.0 version of Alcatel 7750 SR systems.')
tmnxPppCompressionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 2, 7)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppHdrCompression"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPppCompressionGroup = tmnxPppCompressionGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxPppCompressionGroup.setDescription('The group of objects supporting management of compression capabilities over Point-to-Point Protocol (PPP) interfaces on the Alcatel 7750 SR systems.')
mibBuilder.exportSymbols("TIMETRA-PPP-MIB", tmnxPppLocalAddress=tmnxPppLocalAddress, tmnxPPPObsoleteV4v0Group=tmnxPPPObsoleteV4v0Group, tmnxPppCpProtocol=tmnxPppCpProtocol, tmnxPppKaLastClearedTime=tmnxPppKaLastClearedTime, tmnxPppGroup=tmnxPppGroup, tmnxPppCpRestartCount=tmnxPppCpRestartCount, tmnxPppCpLastChange=tmnxPppCpLastChange, tmnxPppCpDown=tmnxPppCpDown, tmnxPpp77x0V6v0Compliance=tmnxPpp77x0V6v0Compliance, tmnxPppNotificationGroup=tmnxPppNotificationGroup, tmnxPppKaThresholdExceedsCount=tmnxPppKaThresholdExceedsCount, tmnxPppRemoteMacAddress=tmnxPppRemoteMacAddress, tmnxPppQuality=tmnxPppQuality, tmnxPppRemoteIPv6AddressType=tmnxPppRemoteIPv6AddressType, tmnxPppLinkPhase=tmnxPppLinkPhase, tmnxPpp7750V4v0Compliance=tmnxPpp7750V4v0Compliance, tmnxPppConformance=tmnxPppConformance, tmnxPppLqmInPktCount=tmnxPppLqmInPktCount, tmnxPppCpTable=tmnxPppCpTable, tmnxPppRemoteIPv4AddressType=tmnxPppRemoteIPv4AddressType, tmnxPppLineMonitorMethod=tmnxPppLineMonitorMethod, tmnxPppNcpDown=tmnxPppNcpDown, tmnxPpp7450V4v0Group=tmnxPpp7450V4v0Group, tmnxPppHdrCompression=tmnxPppHdrCompression, tmnxPppCpUp=tmnxPppCpUp, tmnxPppLocalIPv6Address=tmnxPppLocalIPv6Address, tmnxPppLocalIPv4AddressType=tmnxPppLocalIPv4AddressType, tmnxPppCpState=tmnxPppCpState, tmnxPpp7750V4v0Group=tmnxPpp7750V4v0Group, tmnxPpp7450V6v0Compliance=tmnxPpp7450V6v0Compliance, TmnxPppCpState=TmnxPppCpState, tmnxPppLoopback=tmnxPppLoopback, tmnxPppLqmOperPeriod=tmnxPppLqmOperPeriod, tmnxPppKaPeriod=tmnxPppKaPeriod, tmnxPppNotifyPrefix=tmnxPppNotifyPrefix, tmnxPppNcpUp=tmnxPppNcpUp, tmnxPppCompliances=tmnxPppCompliances, tmnxPppLqmLastClearedTime=tmnxPppLqmLastClearedTime, tmnxPppLqmOutPktCount=tmnxPppLqmOutPktCount, tmnxPppLqmFailure=tmnxPppLqmFailure, tmnxPppNotification=tmnxPppNotification, tmnxPppKaTimeDropLink=tmnxPppKaTimeDropLink, tmnxPppRemoteIPv6Address=tmnxPppRemoteIPv6Address, tmnxPppRemoteMagicNumber=tmnxPppRemoteMagicNumber, tmnxPppCpEntry=tmnxPppCpEntry, tmnxPppLqmInRate=tmnxPppLqmInRate, tmnxPppRemoteIPv4Address=tmnxPppRemoteIPv4Address, tmnxPppKaInPktCount=tmnxPppKaInPktCount, tmnxPppKaDropCount=tmnxPppKaDropCount, tmnxPppEntry=tmnxPppEntry, tmnxPppRemoteAddress=tmnxPppRemoteAddress, tmnxPppLoopbackClear=tmnxPppLoopbackClear, tmnxPppTable=tmnxPppTable, tmnxPppMIBModule=tmnxPppMIBModule, tmnxPppLocalIPv6AddressType=tmnxPppLocalIPv6AddressType, tmnxPppLqmOutRate=tmnxPppLqmOutRate, tmnxPppLocalMagicNumber=tmnxPppLocalMagicNumber, tmnxPppKeepaliveFailure=tmnxPppKeepaliveFailure, tmnxPppCompliance=tmnxPppCompliance, tmnxPppCompressionGroup=tmnxPppCompressionGroup, PYSNMP_MODULE_ID=tmnxPppMIBModule, tmnxPpp7450V4v0Compliance=tmnxPpp7450V4v0Compliance, tmnxPppKaOutPktCount=tmnxPppKaOutPktCount, tmnxPppLqmThresholdExceedsCount=tmnxPppLqmThresholdExceedsCount, tmnxPppLocalIPv4Address=tmnxPppLocalIPv4Address, tmnxPppLqmTimeDropLink=tmnxPppLqmTimeDropLink, tmnxPppObjs=tmnxPppObjs, tmnxPppCpLastClearedTime=tmnxPppCpLastClearedTime, tmnxPppGroups=tmnxPppGroups)
