#
# PySNMP MIB module CISCO-6400-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-6400-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:49:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ObjectIdentity, NotificationType, ModuleIdentity, TimeTicks, Counter32, Gauge32, Counter64, iso, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "NotificationType", "ModuleIdentity", "TimeTicks", "Counter32", "Gauge32", "Counter64", "iso", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "Integer32")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
cisco6400ChassisMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 27))
cisco6400ChassisMIB.setRevisions(('2001-10-22 00:00', '2001-05-10 12:34', '2000-09-25 12:34', '1999-03-22 00:00', '1998-08-05 00:00', '1997-12-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cisco6400ChassisMIB.setRevisionsDescriptions(('Add nrpBootUpAlarm. Deprecated cisco6400ChassisMIBCompliance and cisco6400RedundantGroup. Created cisco6400ChassisMIBCompliance and cisco6400RedundantGroup2.', 'Add diskAlarm and imageAlarm.', '6400 Chassis MIB.', 'Add Signal Fail BER.', 'Update chassis alarm threshold setup range & main-cpu auto-sync flags.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: cisco6400ChassisMIB.setLastUpdated('200110220000Z')
if mibBuilder.loadTexts: cisco6400ChassisMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: cisco6400ChassisMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-atm@cisco.com')
if mibBuilder.loadTexts: cisco6400ChassisMIB.setDescription('Add nrpSwitchoverAlarm, nrpSecondaryFailureAlarm, nrpSecondaryRemovedAlarm, and nrpMismatchAlarm.')
class APSEventStatus(TextualConvention, Integer32):
    description = 'APS event status of APS channel.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("good", 1), ("noHardware", 2), ("doNotRevert", 3), ("manualSwitch", 4), ("signgalDegrade", 5), ("forceSwitch", 6), ("lockOut", 7), ("adminDown", 8))

cisco6400ChassisMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 27, 1))
c64RedundantGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1))
c64ChassisGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 2))
c64MainCPUConfigAutoSync = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c64MainCPUConfigAutoSync.setStatus('current')
if mibBuilder.loadTexts: c64MainCPUConfigAutoSync.setDescription('This object is an OR bit mask indicating various auto-sync configuration: Bit 0, if set, indicates that standard syncable objects are set for auto-sync. The standard set of objects may evolve from software release to release. In release 1, this set is startup-config, bootvar and config-register. This flag is independent to the other flag settings described below. Bit 1, if set, indicates startup-config is set for auto-sync Bit 2. if set, indicates running-config is set for auto-sync. This flag is not supported in revison 1. Bit 3, if set, indicates bootvar is set for auto-sync Bit 4, if set, indicates config-register is set for auto-sync. Bit 5..31, are reserved for future expansion. Setting any bit in this range will have no effect.')
c64MainCPUSwitchOver = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("forceOver", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c64MainCPUSwitchOver.setStatus('current')
if mibBuilder.loadTexts: c64MainCPUSwitchOver.setDescription('This object, when read always return a value of ok(1). Setting this object to forceOver(2) will have: For a redundant NSP-A|B, force them to exchange the primary and secondary roles. The primary NSP will be reloaded.')
c64SlotConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 3), )
if mibBuilder.loadTexts: c64SlotConfigTable.setStatus('current')
if mibBuilder.loadTexts: c64SlotConfigTable.setDescription('A list of redundant slot-pair entries. A managment station that wish to create the redundancy entry other than NSP should perform the following steps: Get the ciscoLS1010ModuleIndex from ciscoLS1010ModuleTable which are mapped to the corresponding pair of the physical slots to be configured for redundancy. Use the pair of the ciscoLS1010ModuleIndex and a unique entry index to create table entry. Only the adjacent slots can be configured for redundancy.')
c64SlotConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-6400-CHASSIS-MIB", "c64SlotConfigModule1Index"), (0, "CISCO-6400-CHASSIS-MIB", "c64SlotConfigModule2Index"))
if mibBuilder.loadTexts: c64SlotConfigEntry.setStatus('current')
if mibBuilder.loadTexts: c64SlotConfigEntry.setDescription('Entry containing information for a particular pair of redundant slots. The object value of c64Slot1Index & c64Slot2Index refer to the pair of ciscoLS1010ModuleIndex in ciscoLS1010ModuleTable to be configured as redundant.')
c64SlotConfigModule1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: c64SlotConfigModule1Index.setStatus('current')
if mibBuilder.loadTexts: c64SlotConfigModule1Index.setDescription('This object specify the first slot in the pair of slots to be configured for the redundacy. Its value is obtained from ciscoLS1010ModuleIndex in ciscoLS1010ModuleTable.')
c64SlotConfigModule2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: c64SlotConfigModule2Index.setStatus('current')
if mibBuilder.loadTexts: c64SlotConfigModule2Index.setDescription('This object specify the second slot in the pair of slots to be configured for the redundacy. Its value is the obtained from ciscoLS1010ModuleIndex in ciscoLS1010ModuleTable.')
c64Slot1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64Slot1Name.setStatus('current')
if mibBuilder.loadTexts: c64Slot1Name.setDescription('Name of slot#1 in the pair of slots configured to redundant.')
c64Slot2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64Slot2Name.setStatus('current')
if mibBuilder.loadTexts: c64Slot2Name.setDescription('Name of slot#2 in the pair of slots configured to redundant.')
c64SlotConfigPrefIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primarySlot", 1), ("secondarySlot", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c64SlotConfigPrefIndex.setStatus('deprecated')
if mibBuilder.loadTexts: c64SlotConfigPrefIndex.setDescription('This object specify which slot in the pair of redundancy to be used as prefer slot. The value of: primarySlot(1) is telling the system use the slot referred by c64Slot1Index as preferred slot. secondarySlot(2) is to use the slot referred by c64Slot2Index. The default is primarySlot(1). The slot prefer feature is removed and the the object is deprecated')
c64SlotSwitchOver = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("forceOver", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c64SlotSwitchOver.setStatus('current')
if mibBuilder.loadTexts: c64SlotSwitchOver.setDescription('This object, when read always return a value of ok(1). Setting this object to forceOver(2) will have: For a redundant NRP slot pair, force them to exchange the primary and secondary roles. For a redundant carrier slot pair, force both the subslots (line cards) to exchange the primary(working) and secondary(protection) roles.')
c64SlotConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c64SlotConfigStatus.setStatus('current')
if mibBuilder.loadTexts: c64SlotConfigStatus.setDescription('The status object for the c64SlotTable entry.')
c64SubSlotConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 5), )
if mibBuilder.loadTexts: c64SubSlotConfigTable.setStatus('current')
if mibBuilder.loadTexts: c64SubSlotConfigTable.setDescription('A list of redundant subslot pair entries. A managment station that wish to create the subslot redundancy entry should perform the following steps: Get the ciscoLS1010ModuleIndex & ciscoLS1010SubModuleIndex from ciscoLS1010SubModuleTable which are mapped to the corresponding pair of the physical sub-slots to be configured for the redundancy. Use the pair of the ciscoLS1010ModuleIndex & ciscoLS1010SubModuleIndex and an unique entry index to create table entry. Only the adjacent sub-slots can be configured for redundancy.')
c64SubSlotConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-6400-CHASSIS-MIB", "c64SubSlotConfigModule1Index"), (0, "CISCO-6400-CHASSIS-MIB", "c64SubSlotConfigSubModule1Index"), (0, "CISCO-6400-CHASSIS-MIB", "c64SubSlotConfigModule2Index"), (0, "CISCO-6400-CHASSIS-MIB", "c64SubSlotConfigSubModule2Index"), (0, "CISCO-6400-CHASSIS-MIB", "c64SubSlotRedundantIndex"))
if mibBuilder.loadTexts: c64SubSlotConfigEntry.setStatus('current')
if mibBuilder.loadTexts: c64SubSlotConfigEntry.setDescription('Entry containing information for a particular pair of redundant subslots.')
c64SubSlotRedundantIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: c64SubSlotRedundantIndex.setStatus('current')
if mibBuilder.loadTexts: c64SubSlotRedundantIndex.setDescription('An arbitrary integer-value to uniquely identify a redundant slot pair. This value must remain constant while the NSP is running. It is not guarenteed to be constant between reboots or switchover of the NSP.')
c64SubSlotConfigModule1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: c64SubSlotConfigModule1Index.setStatus('current')
if mibBuilder.loadTexts: c64SubSlotConfigModule1Index.setDescription('This object specify the first slot in the pair of sub-slots to be configured for the redundancy. Its value is obtained from the ciscoLS1010ModuleIndex in ciscoLS1010SubModuleTable.')
c64SubSlotConfigSubModule1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: c64SubSlotConfigSubModule1Index.setStatus('current')
if mibBuilder.loadTexts: c64SubSlotConfigSubModule1Index.setDescription('This object specify the first sub-slot in the pair of sub-slots to be configured for the redundancy. Its value is obtained from the ciscoLS1010SubModuleIndex in ciscoLS1010SubModuleTable.')
c64SubSlotConfigModule2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: c64SubSlotConfigModule2Index.setStatus('current')
if mibBuilder.loadTexts: c64SubSlotConfigModule2Index.setDescription('This object specify the second slot in the pair of sub-slots to be configured for the redundancy. Its value is obtained from the ciscoLS1010ModuleIndex in ciscoLS1010SubModuleTable.')
c64SubSlotConfigSubModule2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: c64SubSlotConfigSubModule2Index.setStatus('current')
if mibBuilder.loadTexts: c64SubSlotConfigSubModule2Index.setDescription('This object specify the second sub-slot in the pair of sub-slots to be configured for the redundancy. Its value is obtained from the ciscoLS1010SubModuleIndex in ciscoLS1010SubModuleTable.')
c64SubSlot1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64SubSlot1Name.setStatus('current')
if mibBuilder.loadTexts: c64SubSlot1Name.setDescription('This object is to reflect the string name in the format of #/# for the sub-slot1 in the pair of redundancy. This is produced by agent when the table entry is created.')
c64SubSlot2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64SubSlot2Name.setStatus('current')
if mibBuilder.loadTexts: c64SubSlot2Name.setDescription('This object is to reflect the string name in the format of #/# for the sub-slot2 in the pair of redundancy. This is produced by agent when table entry is created.')
c64SubSlotConfigPrefIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primarySubslot", 1), ("secondarySubslot", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c64SubSlotConfigPrefIndex.setStatus('deprecated')
if mibBuilder.loadTexts: c64SubSlotConfigPrefIndex.setDescription('This object specify which sub-slot in the pair of redundancy to be used as prefer sub-slot. The value of: primarySubslot(1) is telling the system use the subslot referred by c64SubSlotConfigModule1Index and c64SubSlotConfigSubModule1Index as preferred sub-slot. secondarySubslot(2) is to use the sub-slot referred by c64SubSlotConfigModule2Index and c64SubSlotConfigSubModule2Index. The default is primarySubslot(1). The subslot prefer feature is removed and the object is deprecated')
c64SubSlotSwitchOver = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("forceOver", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c64SubSlotSwitchOver.setStatus('current')
if mibBuilder.loadTexts: c64SubSlotSwitchOver.setDescription('This object, when read always return a value of ok(1). Setting this object to forceOver(2) will have the result of: For a redundant subslot card pair, force the current master and slave cards (for NRPs) or working and protection cards (for linecards) to exchange roles.')
c64SubSlotConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 5, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c64SubSlotConfigStatus.setStatus('current')
if mibBuilder.loadTexts: c64SubSlotConfigStatus.setDescription('The status object for c64SubSlotConfigTable entry. ')
c64PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 6), )
if mibBuilder.loadTexts: c64PortConfigTable.setStatus('current')
if mibBuilder.loadTexts: c64PortConfigTable.setDescription("A list of redundant port-pair entries. A management station that wish to create the redundant entry should perform the following steps: Get the ciscoLS1010ModuleIndex, ciscoLS1010SubModuleIndex and ciscoLS1010PortIndex from ciscoLS1010PortTable which are mapped to the corresponding pair of the physical ports to be configured for the redundancy. Lookup the c64SubSlotConfigTable to see if the corresponding sub-slots has been configured for redundancy. If yes, get the entry's c64SubSlotRedundantIndex. Otherwise the application should abort this port redundancy configuration. Use the c64SubSlotRedundantIndex value and ciscoLS1010ModuleIndex, ciscoLS1010SubModuleIndex and ciscoLS1010PortIndex to create table entry. Only the adjacent ports in the adjacent sub-slots can be configured for redundancy.")
c64PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-6400-CHASSIS-MIB", "c64PortConfigModule1Index"), (0, "CISCO-6400-CHASSIS-MIB", "c64PortConfigSubModule1Index"), (0, "CISCO-6400-CHASSIS-MIB", "c64PortConfigPort1Index"), (0, "CISCO-6400-CHASSIS-MIB", "c64PortConfigModule2Index"), (0, "CISCO-6400-CHASSIS-MIB", "c64PortConfigSubModule2Index"), (0, "CISCO-6400-CHASSIS-MIB", "c64PortConfigPort2Index"), (0, "CISCO-6400-CHASSIS-MIB", "c64SubSlotRedundantIndex"))
if mibBuilder.loadTexts: c64PortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: c64PortConfigEntry.setDescription('Entry containing information for a particual pair of redundant ports.')
c64PortConfigModule1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: c64PortConfigModule1Index.setStatus('current')
if mibBuilder.loadTexts: c64PortConfigModule1Index.setDescription('This object specify the first slot which contain the port to be configured as the redundancy pair. Its value is obtained from the ciscoLS1010ModuleIndex in ciscoLS1010PortTable.')
c64PortConfigSubModule1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: c64PortConfigSubModule1Index.setStatus('current')
if mibBuilder.loadTexts: c64PortConfigSubModule1Index.setDescription('This object specify the first sub-slot which contain the port to be configured as the redundancy pair. Its value is obtained from ciscoLS1010SubModuleIndex in ciscoLS1010PortTable.')
c64PortConfigPort1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: c64PortConfigPort1Index.setStatus('current')
if mibBuilder.loadTexts: c64PortConfigPort1Index.setDescription('This object specify the first port in the pair of ports to be configured for the redundancy. Its value is obtained from ciscoLS1010PortIndex in ciscoLS1010PortTable.')
c64PortConfigModule2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: c64PortConfigModule2Index.setStatus('current')
if mibBuilder.loadTexts: c64PortConfigModule2Index.setDescription('This object specify the second slot which contain the port to be configured as the redundancy pair. Its value is obtained from the ciscoLS1010ModuleIndex in ciscoLS1010PortTable.')
c64PortConfigSubModule2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: c64PortConfigSubModule2Index.setStatus('current')
if mibBuilder.loadTexts: c64PortConfigSubModule2Index.setDescription('This object specify the second sub-slot which contain the port to be configured as the redundancy pair. Its value is obtained from the ciscoLS1010SubModuleIndex in ciscoLS1010PortTable.')
c64PortConfigPort2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: c64PortConfigPort2Index.setStatus('current')
if mibBuilder.loadTexts: c64PortConfigPort2Index.setDescription('This object specify the second port in the pair of ports to be configured for the redundancy. Its value is obtained from the ciscoLS1010PortIndex in ciscoLS1010PortTable.')
c64Port1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 6, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64Port1Name.setStatus('current')
if mibBuilder.loadTexts: c64Port1Name.setDescription('This object is to reflect the string name in the format of #/#/# for the port1 in the pair of redundancy. This is produced by agent when the table entry is created.')
c64Port2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 6, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64Port2Name.setStatus('current')
if mibBuilder.loadTexts: c64Port2Name.setDescription('This object is to reflect the string name in the format of #/#/# for the port2 in the pair of redundancy. This is produced by agent when the table entry is created.')
c64PortConfigPrefIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primaryPort", 1), ("secondaryPort", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c64PortConfigPrefIndex.setStatus('current')
if mibBuilder.loadTexts: c64PortConfigPrefIndex.setDescription('This object specify which port in the pair of redundancy to be used as prefer port. The value of: primaryPort(1) is telling the system use the port referred by c64PortConfigModule1Index, c64PortConfigSubModule1Index and c64PortConfigPort1Index as preferred port. secondaryPort(2) is to use the port referred by c64PortConfigModule2Index, c64PortConfigSubModule2Index and c64PortConfigPort2Index. The default is primaryPort(1).')
c64PortSwitchOver = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("forceOver", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c64PortSwitchOver.setStatus('current')
if mibBuilder.loadTexts: c64PortSwitchOver.setDescription('This object, when read always return a value of ok(1). Setting this object to one of the acceptable values gives the following results: forceOver(2): Force the current working and protection ports to exchange roles.')
c64PortConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 6, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c64PortConfigStatus.setStatus('current')
if mibBuilder.loadTexts: c64PortConfigStatus.setDescription('The status object for c64PortConfigTable entry.')
c64SonetAPSConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 7), )
if mibBuilder.loadTexts: c64SonetAPSConfigTable.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSConfigTable.setDescription('A table containing all instances of Sonet APS configuration informations. To configure any APS objects in this table, the corresponding subslots pair have to be already configured for redundancy.')
c64SonetAPSConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: c64SonetAPSConfigEntry.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSConfigEntry.setDescription('Entry containing APS information for a particular interface.')
c64SonetAPSMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("linear", 1), ("yCable", 2), ("disable", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c64SonetAPSMode.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSMode.setDescription('This object is used to set the APS mode on the corresponding interface referenced by ifIndex object. The value linear(1) is the APS mode of linear 1+1 nonreverting and unidirectional. This only true APS mode supported in cisco6400 at FCS. The value yCable(2) is providing the port hardware redundancy but not transmission line redundancy and is not strictly an APS mode.')
c64SonetAPSBERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 150000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c64SonetAPSBERThreshold.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSBERThreshold.setDescription("This is object is used to set the Bit-Error-Rate threshold at which an APS request of priority 'Signal Degrade' will be posted. Value of 0 to disable the threshold.")
c64SonetAPSSwitchCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lockOut", 1), ("forceWorking", 2), ("forceProtect", 3), ("manualWorking", 4), ("manualProtect", 5), ("clear", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c64SonetAPSSwitchCmd.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSSwitchCmd.setDescription('This object when set except clear(4) is used to post an APS priority request. This request succeeds if no higher-priority request is posted. lockOut(1): locks out the protection channel corresponding to this entry forceWorking(2) & manualWorking(4): post a request to switch away from the working channel to protection channel of this entry forceProtect(3) & manualProtect(5): post a request to switch away from the protection channel to working channel of this entry clear(6): Clears all posted APS priority requests in this channel.')
c64SonetAPSSFBERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c64SonetAPSSFBERThreshold.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSSFBERThreshold.setDescription("This is object is used to set the Signal Fail Bit-Error-Rate threshold at which an APS request of priority 'Signal Fail' will be posted. 3 => 10E-3, 4 => 10E-4, 5 => 10E-5")
c64SonetAPSStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 8), )
if mibBuilder.loadTexts: c64SonetAPSStatsTable.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSStatsTable.setDescription('A table containing APS statistics and alarms information for each interface.')
c64SonetAPSStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: c64SonetAPSStatsEntry.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSStatsEntry.setDescription('A row in the c64SonetAPSStatsTable which corresponds to the statistics/alarms kept by a particular APS interface.')
c64SonetAPSWorkSectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64SonetAPSWorkSectionStatus.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSWorkSectionStatus.setDescription('This variable indicates the section level status of the working channel in APS. The c64SonetAPSWorkSectionStatus is a bit map represented as a sum of multiple alarms simultaneously. The sonetSectionNoDefect should be set if and only if no other flag is set. The various bit position are: 1 sonetSectionNoDefect 2 sonetSectionLOS 3 sonetSectionLOF 4 sonetBIPE(BIp-8)')
c64SonetAPSWorkLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64SonetAPSWorkLineStatus.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSWorkLineStatus.setDescription('This variable indicates the line level status of the working channel in APS. The c64SonetAPSWorkLineStatus is a bit map represented as a sum of multiple alarms simultaneously. The sonetLineNoDefect should be set if and only if no other flag is set. The various bit position are: 1 sonetLineNoDefect 2 sonetLineAIS 3 sonetLineRDI 4 sonetBIPE(BIP-8/24) 5 sonetFEBE')
c64SonetAPSWorkPathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64SonetAPSWorkPathStatus.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSWorkPathStatus.setDescription('This variable indicates the path level status of the working channel in APS. The c64SonetAPSWorkPathStatus is a bit map represented as a sum of multiple alarms simultaneously. The sonetPathNoDefect should be set if and only if no other flag is set. The various bit position are: 1 sonetPathNoDefect 2 sonetPathSTSAIS 3 sonetPathSTSRDI 4 sonetPathSTSLOP 5 sonetBIPE(BIP-8) 6 sonetFEBE 7 sonetPathUnequipped 8 sonetPathSignalLabelMismatch')
c64SonetAPSWorkSectionBIPE = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64SonetAPSWorkSectionBIPE.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSWorkSectionBIPE.setDescription('This object counts the number of section BIP-8 errors in working channel.')
c64SonetAPSWorkLineBIPE = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64SonetAPSWorkLineBIPE.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSWorkLineBIPE.setDescription('This object counts the number of line BIP-8/24 errors in working channel.')
c64SonetAPSWorkLineFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64SonetAPSWorkLineFEBE.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSWorkLineFEBE.setDescription('This object counts the number of line far-end-block-errors in working channel.')
c64SonetAPSWorkPathBIPE = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64SonetAPSWorkPathBIPE.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSWorkPathBIPE.setDescription('This object counts the number of path BIP-8 errors in working channel.')
c64SonetAPSWorkPathFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64SonetAPSWorkPathFEBE.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSWorkPathFEBE.setDescription('This object counts the number of path far-end-block-errors in working channel.')
c64SonetAPSWorkPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 8, 1, 9), APSEventStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64SonetAPSWorkPortStatus.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSWorkPortStatus.setDescription('This object indicates the last aps event detected in working port.')
c64SonetAPSProtectSectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64SonetAPSProtectSectionStatus.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSProtectSectionStatus.setDescription('This variable indicates the section level status of the protection channel in APS. The c64SonetAPSProtectSectionStatus is a bit map represented as a sum of multiple alarms simultaneously. The sonetSectionNoDefect should be set if and only if no other flag is set. The various bit position are: 1 sonetSectionNoDefect 2 sonetSectionLOS 4 sonetSectionLOF 8 sonetBIPE(BIp-8)')
c64SonetAPSProtectLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64SonetAPSProtectLineStatus.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSProtectLineStatus.setDescription('This variable indicates the line level status of the protection channel in APS. The c64SonetAPSProtectLineStatus is a bit map represented as a sum of multiple alarms simultaneously. The sonetLineNoDefect should be set if and only if no other flag is set. The various bit position are: 1 sonetLineNoDefect 2 sonetLineAIS 4 sonetLineRDI 8 sonetBIPE(BIP-8/24) 16 sonetFEBE')
c64SonetAPSProtectPathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64SonetAPSProtectPathStatus.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSProtectPathStatus.setDescription('This variable indicates the path level status of the protection channel in APS. The c64SonetAPSProtectPathStatus is a bit map represented as a sum of multiple alarms simultaneously. The sonetPathNoDefect should be set if and only if no other flag is set. The various bit position are: 1 sonetPathNoDefect 2 sonetPathSTSLOP 4 sonetPathSTSAIS 8 sonetBIPE(BIP-8) 16 sonetFEBE 32 sonetPathSTSRDI 64 sonetPathUnequipped 128 sonetPathSignalLabelMismatch')
c64SonetAPSProtectSectionBIPE = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64SonetAPSProtectSectionBIPE.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSProtectSectionBIPE.setDescription('This object counts the number of section BIP-8 errors in protection channel.')
c64SonetAPSProtectLineBIPE = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64SonetAPSProtectLineBIPE.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSProtectLineBIPE.setDescription('This object counts the number of line BIP-8/24 errors in protection channel.')
c64SonetAPSProtectLineFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64SonetAPSProtectLineFEBE.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSProtectLineFEBE.setDescription('This object counts the number of line far-end-block-errors in protection channel.')
c64SonetAPSProtectPathBIPE = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64SonetAPSProtectPathBIPE.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSProtectPathBIPE.setDescription('This object counts the number of path BIP-8 errors in protection channel.')
c64SonetAPSProtectPathFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64SonetAPSProtectPathFEBE.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSProtectPathFEBE.setDescription('This object counts the number of path far-end-block-errors in protection channel.')
c64SonetAPSProtectPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 8, 1, 18), APSEventStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64SonetAPSProtectPortStatus.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSProtectPortStatus.setDescription('This object indicates the last aps event detected in protection port.')
c64SonetAPSChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 1, 8, 1, 19), APSEventStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64SonetAPSChannelStatus.setStatus('current')
if mibBuilder.loadTexts: c64SonetAPSChannelStatus.setDescription('This object indicates the last aps event detected in the APS channel.')
c64TelcoAlarmMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 2, 1))
c64ChassisFacilityAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64ChassisFacilityAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: c64ChassisFacilityAlarmStatus.setDescription('This object is an OR bit mask indicating the presence of critical/major/minor telco alarm: Bit 0, if set, indicates the presence of minor alarm Bit 1, if set, indicates the presence of major alarm Bit 2, if set, indicates the presence of critical alarm ')
c64ChassisClearAlarms = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("done", 0), ("all", 1), ("minor", 2), ("major", 3), ("critical", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c64ChassisClearAlarms.setStatus('current')
if mibBuilder.loadTexts: c64ChassisClearAlarms.setDescription('This object is used to clear all, major or minor alarms indication and reset the alarm contacts. When the clear command is done the value of this object will be set to done(0).')
c64ChassisTempIntakeMinorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 57))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c64ChassisTempIntakeMinorThreshold.setStatus('current')
if mibBuilder.loadTexts: c64ChassisTempIntakeMinorThreshold.setDescription('This object is used to set the intake minor temperature alarm threshold in degrees centigrade. The default value is ???.')
c64ChassisTempIntakeMajorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 57))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c64ChassisTempIntakeMajorThreshold.setStatus('current')
if mibBuilder.loadTexts: c64ChassisTempIntakeMajorThreshold.setDescription('This object is used to set the intake major temperature alarm threshold in degrees centigrade. The default value is ???.')
c64ChassisTempCoreMinorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c64ChassisTempCoreMinorThreshold.setStatus('current')
if mibBuilder.loadTexts: c64ChassisTempCoreMinorThreshold.setDescription('This object is used to set the core minor temperature alarm threshold in degrees centigrade. The default value is ???.')
c64ChassisTempCoreMajorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c64ChassisTempCoreMajorThreshold.setStatus('current')
if mibBuilder.loadTexts: c64ChassisTempCoreMajorThreshold.setDescription('This object is used to set the core major temperature alarm threshold in degrees centigrade. The default value is ???.')
c64ChassisTempThresholdAdmin = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c64ChassisTempThresholdAdmin.setStatus('current')
if mibBuilder.loadTexts: c64ChassisTempThresholdAdmin.setDescription('This object is used to enable/disable various threshold limit. Bit 0, if set to 0 disable the intake minor threshold otherwise enable it. Bit 1, if set to 0 disable the intake major threshold otherwise enable it. Bit 2, if set to 0 disable the core minor threshold otherwise enable it. Bit 3, if set to 0 disable the core major threshold otherwise enable it.')
c64ChassisAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 2, 2), )
if mibBuilder.loadTexts: c64ChassisAlarmTable.setStatus('current')
if mibBuilder.loadTexts: c64ChassisAlarmTable.setDescription('The table contains the current alarm status in the system.')
c64ChassisAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-6400-CHASSIS-MIB", "c64ChassisAlarmIndex"))
if mibBuilder.loadTexts: c64ChassisAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: c64ChassisAlarmEntry.setDescription('Entry containing alarm information occurred in the system.')
c64ChassisAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64ChassisAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: c64ChassisAlarmIndex.setDescription('An arbitrary integer value to uniquely identify a alarm information entry.')
c64ChassisAlarmSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64ChassisAlarmSource.setStatus('current')
if mibBuilder.loadTexts: c64ChassisAlarmSource.setDescription("This object indicates the source of alarm. The variable will contain string in the following formats: 'Chassis' indicate the chassis alarms 'Submodule' indicate the submodule alarms 'port@slot#/subslot#/port#' indicate the port alarms. NMS app. will need to recognize the above three format in order to tell the alarm sources. The value other than the above three format cannot be allowed.")
c64ChassisAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("minor", 1), ("major", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64ChassisAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: c64ChassisAlarmSeverity.setDescription('This object indicates the severity of the alarm.')
c64ChassisAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("coreTemp", 1), ("inletTemp", 2), ("totalFanFail", 3), ("partialFanFail", 4), ("fanMissing", 5), ("pem0Fail", 6), ("pem1Fail", 7), ("sonetLineFail", 8), ("cardOIRAlarm", 9), ("cardFail", 10), ("cardPartialFail", 11), ("linkDownAlarm", 12), ("networkClockAlarm", 13), ("nrpSARFail", 14), ("nrpPAMDataError", 15), ("diskAlarm", 16), ("imageAlarm", 17), ("nrpBootUpAlarm", 18), ("nrpSwitchoverAlarm", 19), ("nrpSecondaryFailureAlarm", 20), ("nrpSecondaryRemovedAlarm", 21), ("nrpMismatchAlarm", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64ChassisAlarmType.setStatus('current')
if mibBuilder.loadTexts: c64ChassisAlarmType.setDescription('This object indicates the type of alarm.')
c64ChassisAlarmACOStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 27, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("cutoff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c64ChassisAlarmACOStatus.setStatus('current')
if mibBuilder.loadTexts: c64ChassisAlarmACOStatus.setDescription("This object indicates whether the audible/visible local alarm relay has been locally cut off for this particular alarm source. When this status is 'normal', the alarm in this entry has closed the local audible/visible alarm relay contacts. When this status is 'cutoff', the alarm in this entry initially closed the local relay contacts, but was suppressed by a local user pressing the external ACO button on the 6400 NSP.")
cisco6400ChassisMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 27, 2))
cisco6400ChassisMIBNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 27, 2, 0))
cisco6400ChassisFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 27, 2, 0, 1)).setObjects(("CISCO-6400-CHASSIS-MIB", "c64ChassisFacilityAlarmStatus"))
if mibBuilder.loadTexts: cisco6400ChassisFailureNotification.setStatus('current')
if mibBuilder.loadTexts: cisco6400ChassisFailureNotification.setDescription('The notification signifies that the agent detects a change in the c64ChassisAlarmTable, the NMS application should start to poll the c64ChassisAlarmTable to get up-to-date alarm information.')
cisco6400ChassisMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 27, 3))
cisco6400ChassisMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 27, 3, 1))
cisco6400ChassisMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 27, 3, 2))
cisco6400ChassisMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 27, 3, 1, 2)).setObjects(("CISCO-6400-CHASSIS-MIB", "cisco6400RedundantGroup2"), ("CISCO-6400-CHASSIS-MIB", "cisco6400ChassisMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisco6400ChassisMIBCompliance2 = cisco6400ChassisMIBCompliance2.setStatus('current')
if mibBuilder.loadTexts: cisco6400ChassisMIBCompliance2.setDescription('The compliance statement for 6400s, used in Santa NSP, which implement the Cisco 6400 Chassis MIB')
cisco6400RedundantGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 27, 3, 2, 3)).setObjects(("CISCO-6400-CHASSIS-MIB", "c64MainCPUConfigAutoSync"), ("CISCO-6400-CHASSIS-MIB", "c64MainCPUSwitchOver"), ("CISCO-6400-CHASSIS-MIB", "c64Slot1Name"), ("CISCO-6400-CHASSIS-MIB", "c64Slot2Name"), ("CISCO-6400-CHASSIS-MIB", "c64SlotSwitchOver"), ("CISCO-6400-CHASSIS-MIB", "c64SlotConfigStatus"), ("CISCO-6400-CHASSIS-MIB", "c64SubSlot1Name"), ("CISCO-6400-CHASSIS-MIB", "c64SubSlot2Name"), ("CISCO-6400-CHASSIS-MIB", "c64SubSlotSwitchOver"), ("CISCO-6400-CHASSIS-MIB", "c64SubSlotConfigStatus"), ("CISCO-6400-CHASSIS-MIB", "c64Port1Name"), ("CISCO-6400-CHASSIS-MIB", "c64Port2Name"), ("CISCO-6400-CHASSIS-MIB", "c64PortConfigPrefIndex"), ("CISCO-6400-CHASSIS-MIB", "c64PortSwitchOver"), ("CISCO-6400-CHASSIS-MIB", "c64PortConfigStatus"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSMode"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSBERThreshold"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSSwitchCmd"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSSFBERThreshold"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSWorkSectionStatus"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSWorkLineStatus"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSWorkPathStatus"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSWorkSectionBIPE"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSWorkLineBIPE"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSWorkLineFEBE"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSWorkPathBIPE"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSWorkPathFEBE"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSWorkPortStatus"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSProtectSectionStatus"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSProtectLineStatus"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSProtectPathStatus"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSProtectSectionBIPE"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSProtectLineBIPE"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSProtectLineFEBE"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSProtectPathBIPE"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSProtectPathFEBE"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSProtectPortStatus"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSChannelStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisco6400RedundantGroup2 = cisco6400RedundantGroup2.setStatus('current')
if mibBuilder.loadTexts: cisco6400RedundantGroup2.setDescription('A collection of objects providing satan redundancy config. and information.')
cisco6400ChassisMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 27, 3, 2, 2)).setObjects(("CISCO-6400-CHASSIS-MIB", "c64ChassisFacilityAlarmStatus"), ("CISCO-6400-CHASSIS-MIB", "c64ChassisClearAlarms"), ("CISCO-6400-CHASSIS-MIB", "c64ChassisTempIntakeMinorThreshold"), ("CISCO-6400-CHASSIS-MIB", "c64ChassisTempIntakeMajorThreshold"), ("CISCO-6400-CHASSIS-MIB", "c64ChassisTempCoreMinorThreshold"), ("CISCO-6400-CHASSIS-MIB", "c64ChassisTempCoreMajorThreshold"), ("CISCO-6400-CHASSIS-MIB", "c64ChassisTempThresholdAdmin"), ("CISCO-6400-CHASSIS-MIB", "c64ChassisAlarmIndex"), ("CISCO-6400-CHASSIS-MIB", "c64ChassisAlarmSource"), ("CISCO-6400-CHASSIS-MIB", "c64ChassisAlarmType"), ("CISCO-6400-CHASSIS-MIB", "c64ChassisAlarmSeverity"), ("CISCO-6400-CHASSIS-MIB", "c64ChassisAlarmACOStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisco6400ChassisMIBGroup = cisco6400ChassisMIBGroup.setStatus('current')
if mibBuilder.loadTexts: cisco6400ChassisMIBGroup.setDescription('A collection of objects providing santa telco alarm information.')
cisco6400ChassisMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 27, 3, 1, 1)).setObjects(("CISCO-6400-CHASSIS-MIB", "cisco6400RedundantGroup"), ("CISCO-6400-CHASSIS-MIB", "cisco6400ChassisMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisco6400ChassisMIBCompliance = cisco6400ChassisMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cisco6400ChassisMIBCompliance.setDescription('The compliance statement for 6400s, used in Santa NSP, which implement the Cisco 6400 Chassis MIB. This compliance statement is deprecated as some objects were deprecated in cisco6400RedundantGroup.')
cisco6400RedundantGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 27, 3, 2, 1)).setObjects(("CISCO-6400-CHASSIS-MIB", "c64MainCPUConfigAutoSync"), ("CISCO-6400-CHASSIS-MIB", "c64MainCPUSwitchOver"), ("CISCO-6400-CHASSIS-MIB", "c64Slot1Name"), ("CISCO-6400-CHASSIS-MIB", "c64Slot2Name"), ("CISCO-6400-CHASSIS-MIB", "c64SlotConfigPrefIndex"), ("CISCO-6400-CHASSIS-MIB", "c64SlotSwitchOver"), ("CISCO-6400-CHASSIS-MIB", "c64SlotConfigStatus"), ("CISCO-6400-CHASSIS-MIB", "c64SubSlot1Name"), ("CISCO-6400-CHASSIS-MIB", "c64SubSlot2Name"), ("CISCO-6400-CHASSIS-MIB", "c64SubSlotConfigPrefIndex"), ("CISCO-6400-CHASSIS-MIB", "c64SubSlotSwitchOver"), ("CISCO-6400-CHASSIS-MIB", "c64SubSlotConfigStatus"), ("CISCO-6400-CHASSIS-MIB", "c64Port1Name"), ("CISCO-6400-CHASSIS-MIB", "c64Port2Name"), ("CISCO-6400-CHASSIS-MIB", "c64PortConfigPrefIndex"), ("CISCO-6400-CHASSIS-MIB", "c64PortSwitchOver"), ("CISCO-6400-CHASSIS-MIB", "c64PortConfigStatus"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSMode"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSBERThreshold"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSSwitchCmd"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSSFBERThreshold"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSWorkSectionStatus"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSWorkLineStatus"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSWorkPathStatus"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSWorkSectionBIPE"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSWorkLineBIPE"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSWorkLineFEBE"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSWorkPathBIPE"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSWorkPathFEBE"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSWorkPortStatus"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSProtectSectionStatus"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSProtectLineStatus"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSProtectPathStatus"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSProtectSectionBIPE"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSProtectLineBIPE"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSProtectLineFEBE"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSProtectPathBIPE"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSProtectPathFEBE"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSProtectPortStatus"), ("CISCO-6400-CHASSIS-MIB", "c64SonetAPSChannelStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisco6400RedundantGroup = cisco6400RedundantGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cisco6400RedundantGroup.setDescription('A collection of objects providing satan redundancy config. and information. This RFC 2155-level group was deprecated when the c64SlotConfigPrefIndex and c64SubSlotConfigPrefIndex objects were deprecated.')
mibBuilder.exportSymbols("CISCO-6400-CHASSIS-MIB", c64SubSlotConfigSubModule2Index=c64SubSlotConfigSubModule2Index, c64PortConfigEntry=c64PortConfigEntry, c64SonetAPSConfigTable=c64SonetAPSConfigTable, c64SonetAPSProtectPortStatus=c64SonetAPSProtectPortStatus, c64SlotConfigEntry=c64SlotConfigEntry, c64SubSlotConfigModule1Index=c64SubSlotConfigModule1Index, c64SonetAPSWorkPathBIPE=c64SonetAPSWorkPathBIPE, cisco6400ChassisMIBCompliance2=cisco6400ChassisMIBCompliance2, c64ChassisGroup=c64ChassisGroup, c64PortConfigModule1Index=c64PortConfigModule1Index, c64SonetAPSChannelStatus=c64SonetAPSChannelStatus, cisco6400ChassisMIBCompliances=cisco6400ChassisMIBCompliances, cisco6400ChassisMIBConformance=cisco6400ChassisMIBConformance, c64SlotConfigModule1Index=c64SlotConfigModule1Index, c64SonetAPSConfigEntry=c64SonetAPSConfigEntry, c64PortConfigPort2Index=c64PortConfigPort2Index, c64ChassisTempCoreMajorThreshold=c64ChassisTempCoreMajorThreshold, c64SubSlotConfigModule2Index=c64SubSlotConfigModule2Index, cisco6400ChassisFailureNotification=cisco6400ChassisFailureNotification, c64PortConfigPrefIndex=c64PortConfigPrefIndex, c64Port1Name=c64Port1Name, c64MainCPUConfigAutoSync=c64MainCPUConfigAutoSync, c64Slot1Name=c64Slot1Name, c64ChassisFacilityAlarmStatus=c64ChassisFacilityAlarmStatus, APSEventStatus=APSEventStatus, c64SubSlotConfigEntry=c64SubSlotConfigEntry, cisco6400ChassisMIB=cisco6400ChassisMIB, c64SubSlotConfigSubModule1Index=c64SubSlotConfigSubModule1Index, c64SlotConfigModule2Index=c64SlotConfigModule2Index, c64Port2Name=c64Port2Name, c64SonetAPSWorkLineFEBE=c64SonetAPSWorkLineFEBE, c64SonetAPSProtectLineFEBE=c64SonetAPSProtectLineFEBE, c64ChassisAlarmType=c64ChassisAlarmType, c64SonetAPSProtectLineBIPE=c64SonetAPSProtectLineBIPE, cisco6400ChassisMIBCompliance=cisco6400ChassisMIBCompliance, PYSNMP_MODULE_ID=cisco6400ChassisMIB, c64PortConfigStatus=c64PortConfigStatus, cisco6400ChassisMIBObjects=cisco6400ChassisMIBObjects, c64SlotConfigStatus=c64SlotConfigStatus, c64RedundantGroup=c64RedundantGroup, c64PortConfigTable=c64PortConfigTable, c64SlotSwitchOver=c64SlotSwitchOver, c64SonetAPSStatsTable=c64SonetAPSStatsTable, c64SubSlot1Name=c64SubSlot1Name, c64MainCPUSwitchOver=c64MainCPUSwitchOver, c64SonetAPSProtectPathFEBE=c64SonetAPSProtectPathFEBE, cisco6400RedundantGroup2=cisco6400RedundantGroup2, c64SonetAPSBERThreshold=c64SonetAPSBERThreshold, c64SonetAPSWorkLineStatus=c64SonetAPSWorkLineStatus, c64SonetAPSStatsEntry=c64SonetAPSStatsEntry, c64SonetAPSSwitchCmd=c64SonetAPSSwitchCmd, c64SubSlot2Name=c64SubSlot2Name, c64SonetAPSProtectSectionBIPE=c64SonetAPSProtectSectionBIPE, cisco6400ChassisMIBNotification=cisco6400ChassisMIBNotification, c64SubSlotConfigPrefIndex=c64SubSlotConfigPrefIndex, c64SonetAPSSFBERThreshold=c64SonetAPSSFBERThreshold, c64TelcoAlarmMgmt=c64TelcoAlarmMgmt, c64ChassisTempThresholdAdmin=c64ChassisTempThresholdAdmin, cisco6400ChassisMIBNotificationPrefix=cisco6400ChassisMIBNotificationPrefix, c64SubSlotRedundantIndex=c64SubSlotRedundantIndex, c64PortSwitchOver=c64PortSwitchOver, c64SonetAPSWorkSectionStatus=c64SonetAPSWorkSectionStatus, c64SlotConfigTable=c64SlotConfigTable, c64ChassisClearAlarms=c64ChassisClearAlarms, c64Slot2Name=c64Slot2Name, c64SonetAPSWorkPathFEBE=c64SonetAPSWorkPathFEBE, c64SonetAPSWorkLineBIPE=c64SonetAPSWorkLineBIPE, c64SonetAPSWorkPortStatus=c64SonetAPSWorkPortStatus, c64SubSlotConfigTable=c64SubSlotConfigTable, c64PortConfigSubModule2Index=c64PortConfigSubModule2Index, c64ChassisAlarmSeverity=c64ChassisAlarmSeverity, c64ChassisTempIntakeMinorThreshold=c64ChassisTempIntakeMinorThreshold, cisco6400ChassisMIBGroup=cisco6400ChassisMIBGroup, c64SonetAPSProtectPathBIPE=c64SonetAPSProtectPathBIPE, c64ChassisAlarmIndex=c64ChassisAlarmIndex, c64PortConfigModule2Index=c64PortConfigModule2Index, c64SonetAPSMode=c64SonetAPSMode, c64SonetAPSWorkPathStatus=c64SonetAPSWorkPathStatus, c64ChassisAlarmTable=c64ChassisAlarmTable, c64SubSlotConfigStatus=c64SubSlotConfigStatus, c64ChassisAlarmEntry=c64ChassisAlarmEntry, c64SlotConfigPrefIndex=c64SlotConfigPrefIndex, c64ChassisTempIntakeMajorThreshold=c64ChassisTempIntakeMajorThreshold, c64PortConfigPort1Index=c64PortConfigPort1Index, c64SonetAPSProtectSectionStatus=c64SonetAPSProtectSectionStatus, c64PortConfigSubModule1Index=c64PortConfigSubModule1Index, c64ChassisAlarmACOStatus=c64ChassisAlarmACOStatus, c64SonetAPSWorkSectionBIPE=c64SonetAPSWorkSectionBIPE, c64SubSlotSwitchOver=c64SubSlotSwitchOver, cisco6400RedundantGroup=cisco6400RedundantGroup, c64ChassisTempCoreMinorThreshold=c64ChassisTempCoreMinorThreshold, c64SonetAPSProtectLineStatus=c64SonetAPSProtectLineStatus, c64SonetAPSProtectPathStatus=c64SonetAPSProtectPathStatus, cisco6400ChassisMIBGroups=cisco6400ChassisMIBGroups, c64ChassisAlarmSource=c64ChassisAlarmSource)
