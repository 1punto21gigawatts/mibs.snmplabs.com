#
# PySNMP MIB module OLD-CISCO-MEMORY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OLD-CISCO-MEMORY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:32:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
local, = mibBuilder.importSymbols("CISCO-SMI", "local")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Integer32, Counter64, ModuleIdentity, Gauge32, Unsigned32, ObjectIdentity, NotificationType, TimeTicks, iso, IpAddress, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "Counter64", "ModuleIdentity", "Gauge32", "Unsigned32", "ObjectIdentity", "NotificationType", "TimeTicks", "iso", "IpAddress", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
lmem = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 1))
freeMem = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeMem.setStatus('obsolete')
if mibBuilder.loadTexts: freeMem.setDescription('Return the amount of free memory in bytes. NOTE WELL: this mib object is obsolete as of IOS release 11.1. IOS release 11.1 introduced the CISCO-MEMORY-POOL-MIB which better instruments all of the memory pools')
bufferElFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferElFree.setStatus('mandatory')
if mibBuilder.loadTexts: bufferElFree.setDescription('Contains the number of free buffer elements.')
bufferElMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferElMax.setStatus('mandatory')
if mibBuilder.loadTexts: bufferElMax.setDescription('Contains the maximum number of buffer elements.')
bufferElHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferElHit.setStatus('mandatory')
if mibBuilder.loadTexts: bufferElHit.setDescription('Contains the number of buffer element hits.')
bufferElMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferElMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bufferElMiss.setDescription('Contains the number of buffer element misses.')
bufferElCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferElCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bufferElCreate.setDescription('Contains the number of buffer element creates.')
bufferSmSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmSize.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmSize.setDescription('Contains the size of small buffers.')
bufferSmTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmTotal.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmTotal.setDescription('Contains the total number of small buffers.')
bufferSmFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmFree.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmFree.setDescription('Contains the number of free small buffers.')
bufferSmMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmMax.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmMax.setDescription('Contains the maximum number of small buffers.')
bufferSmHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmHit.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmHit.setDescription('Contains the number of small buffer hits.')
bufferSmMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmMiss.setDescription('Contains the number of small buffer misses.')
bufferSmTrim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmTrim.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmTrim.setDescription('Contains the number of small buffer trims.')
bufferSmCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmCreate.setDescription('Contains the number of small buffer creates.')
bufferMdSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdSize.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdSize.setDescription('Contains the size of medium buffers.')
bufferMdTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdTotal.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdTotal.setDescription('Contains the total number of medium buffers.')
bufferMdFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdFree.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdFree.setDescription('Contains the number of free medium buffers.')
bufferMdMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdMax.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdMax.setDescription('Contains the maximum number of medium buffers.')
bufferMdHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdHit.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdHit.setDescription('Contains the number of medium buffer hits.')
bufferMdMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdMiss.setDescription('Contains the number of medium buffer misses.')
bufferMdTrim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdTrim.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdTrim.setDescription('Contains the number of medium buffer trims.')
bufferMdCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdCreate.setDescription('Contains the number of medium buffer creates.')
bufferBgSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgSize.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgSize.setDescription('Contains the size of big buffers.')
bufferBgTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgTotal.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgTotal.setDescription('Contains the total number of big buffers.')
bufferBgFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgFree.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgFree.setDescription('Contains the number of free big buffers.')
bufferBgMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgMax.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgMax.setDescription('Contains the maximum number of big buffers.')
bufferBgHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgHit.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgHit.setDescription('Contains the number of big buffer hits.')
bufferBgMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgMiss.setDescription('Contains the number of big buffer misses.')
bufferBgTrim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgTrim.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgTrim.setDescription('Contains the number of big buffer trims.')
bufferBgCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgCreate.setDescription('Contains the number of big buffer creates.')
bufferLgSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgSize.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgSize.setDescription('Contains the size of large buffers.')
bufferLgTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgTotal.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgTotal.setDescription('Contains the total number of large buffers.')
bufferLgFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgFree.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgFree.setDescription('Contains the number of free large buffers.')
bufferLgMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgMax.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgMax.setDescription('Contains the maximum number of large buffers.')
bufferLgHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgHit.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgHit.setDescription('Contains the number of large buffer hits.')
bufferLgMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgMiss.setDescription('Contains the number of large buffer misses.')
bufferLgTrim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgTrim.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgTrim.setDescription('Contains the number of large buffer trims.')
bufferLgCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgCreate.setDescription('Contains the number of large buffer creates.')
bufferFail = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferFail.setStatus('mandatory')
if mibBuilder.loadTexts: bufferFail.setDescription('Count of the number of buffer allocation failures.')
bufferNoMem = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferNoMem.setStatus('mandatory')
if mibBuilder.loadTexts: bufferNoMem.setDescription('Count of the number of buffer create failures due to no free memory.')
bufferHgSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgSize.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgSize.setDescription('Contains the size of huge buffers.')
bufferHgTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgTotal.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgTotal.setDescription('Contains the total number of huge buffers.')
bufferHgFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgFree.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgFree.setDescription('Contains the number of free huge buffers.')
bufferHgMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgMax.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgMax.setDescription('Contains the maximum number of huge buffers.')
bufferHgHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgHit.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgHit.setDescription('Contains the number of huge buffer hits.')
bufferHgMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgMiss.setDescription('Contains the number of huge buffer misses.')
bufferHgTrim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgTrim.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgTrim.setDescription('Contains the number of huge buffer trims.')
bufferHgCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgCreate.setDescription('Contains the number of huge buffer creates.')
mibBuilder.exportSymbols("OLD-CISCO-MEMORY-MIB", bufferSmHit=bufferSmHit, bufferMdTrim=bufferMdTrim, bufferHgCreate=bufferHgCreate, bufferMdSize=bufferMdSize, bufferMdFree=bufferMdFree, bufferSmSize=bufferSmSize, bufferMdTotal=bufferMdTotal, bufferHgMiss=bufferHgMiss, bufferSmFree=bufferSmFree, bufferBgCreate=bufferBgCreate, bufferSmMax=bufferSmMax, bufferLgMax=bufferLgMax, bufferLgHit=bufferLgHit, bufferFail=bufferFail, bufferHgSize=bufferHgSize, bufferHgMax=bufferHgMax, bufferElCreate=bufferElCreate, bufferHgHit=bufferHgHit, bufferNoMem=bufferNoMem, bufferHgFree=bufferHgFree, bufferBgMax=bufferBgMax, bufferSmTotal=bufferSmTotal, bufferMdMiss=bufferMdMiss, bufferBgTotal=bufferBgTotal, bufferBgHit=bufferBgHit, bufferMdHit=bufferMdHit, bufferMdMax=bufferMdMax, bufferElMiss=bufferElMiss, bufferElFree=bufferElFree, bufferElHit=bufferElHit, bufferLgTrim=bufferLgTrim, bufferBgTrim=bufferBgTrim, bufferLgFree=bufferLgFree, bufferBgSize=bufferBgSize, lmem=lmem, bufferLgMiss=bufferLgMiss, bufferBgFree=bufferBgFree, bufferBgMiss=bufferBgMiss, bufferLgTotal=bufferLgTotal, bufferSmTrim=bufferSmTrim, bufferHgTrim=bufferHgTrim, bufferLgCreate=bufferLgCreate, bufferLgSize=bufferLgSize, bufferSmMiss=bufferSmMiss, bufferElMax=bufferElMax, bufferSmCreate=bufferSmCreate, freeMem=freeMem, bufferMdCreate=bufferMdCreate, bufferHgTotal=bufferHgTotal)
