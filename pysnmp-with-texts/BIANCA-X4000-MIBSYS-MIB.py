#
# PySNMP MIB module BIANCA-X4000-MIBSYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-X4000-MIBSYS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:38:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, sysDescr = mibBuilder.importSymbols("SNMPv2-MIB", "sysName", "sysDescr")
Unsigned32, Integer32, NotificationType, IpAddress, MibIdentifier, ObjectIdentity, TimeTicks, Counter64, Gauge32, Counter32, NotificationType, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "NotificationType", "IpAddress", "MibIdentifier", "ObjectIdentity", "TimeTicks", "Counter64", "Gauge32", "Counter32", "NotificationType", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
sys = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 17))
x4 = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 17, 2))
sysX4Config = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 1))
sysX4Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 2))
sysX4ConfigLcdBrightness = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysX4ConfigLcdBrightness.setStatus('mandatory')
if mibBuilder.loadTexts: sysX4ConfigLcdBrightness.setDescription('This variable allows to control the brightness of the LCD display. Lower values mean less, higher values mean more brightness. Zero means no brightness.')
sysX4ConfigLcdContrast = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysX4ConfigLcdContrast.setStatus('mandatory')
if mibBuilder.loadTexts: sysX4ConfigLcdContrast.setDescription('This variable allows to control the contrast of the LCD display. Lower values mean less, higher values mean more contrast. Zero means factory settings.')
sysX4ConfigLcdConfigure = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysX4ConfigLcdConfigure.setStatus('mandatory')
if mibBuilder.loadTexts: sysX4ConfigLcdConfigure.setDescription('This variable determines whether it is possible to configure the brick by using the LCD display and the buttons.')
sysX4ConfigLcdPin = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysX4ConfigLcdPin.setStatus('mandatory')
if mibBuilder.loadTexts: sysX4ConfigLcdPin.setDescription("The PIN is the personal identification number that is needed for authorisation for display configurations. It consists solely of digits and must be 4 characters long. Default Value is '0000'.")
sysX4ConfigLcdIdleTimer = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysX4ConfigLcdIdleTimer.setStatus('mandatory')
if mibBuilder.loadTexts: sysX4ConfigLcdIdleTimer.setDescription('After this time the display screen changes to default screen. Default Value is 5. If this value is set to 0, change to defaultscreen is disabled')
sysX4ConfigLcdDefaultScreen = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysX4ConfigLcdDefaultScreen.setStatus('mandatory')
if mibBuilder.loadTexts: sysX4ConfigLcdDefaultScreen.setDescription('This screen will be displayed after the LcdIdleTimer has elapsed. Default Value is MainMenu.')
sysX4ConfigLcdLanguage = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysX4ConfigLcdLanguage.setStatus('mandatory')
if mibBuilder.loadTexts: sysX4ConfigLcdLanguage.setDescription('Choose your display language.')
sysX4ConfigTempUnit = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysX4ConfigTempUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sysX4ConfigTempUnit.setDescription('This variable defines the unit of sysX4Config*Temp, either Celsius or Fahrenheit.')
sysX4ConfigMainTemp = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysX4ConfigMainTemp.setStatus('mandatory')
if mibBuilder.loadTexts: sysX4ConfigMainTemp.setDescription('This variable shows the actual main board temperature measured in the units Fahrenheit or Celsius.')
sysX4ConfigMainTempAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysX4ConfigMainTempAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sysX4ConfigMainTempAlarmThreshold.setDescription('system mainboard temperature threshold.')
sysX4ConfigMainTempAlarmTrap = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("critical", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysX4ConfigMainTempAlarmTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sysX4ConfigMainTempAlarmTrap.setDescription('If the system temperature raises above the threshold, a alarm trap is generated every 60 seconds.')
sysX4ConfigMod1Temp = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysX4ConfigMod1Temp.setStatus('mandatory')
if mibBuilder.loadTexts: sysX4ConfigMod1Temp.setDescription('This variable shows the actual module sensor1 temperature in the units Fahrenheit or Celsius.')
sysX4ConfigMod1TempAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysX4ConfigMod1TempAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sysX4ConfigMod1TempAlarmThreshold.setDescription('actual module sensor1 temperature threshold.')
sysX4ConfigMod1TempAlarmTrap = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("critical", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysX4ConfigMod1TempAlarmTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sysX4ConfigMod1TempAlarmTrap.setDescription('If the actual module sensor1 temperature raises above the threshold, a alarm trap is generated every 60 seconds.')
sysX4ConfigMod2Temp = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysX4ConfigMod2Temp.setStatus('mandatory')
if mibBuilder.loadTexts: sysX4ConfigMod2Temp.setDescription('This variable shows the actual module sensor2 temperature in the units Fahrenheit or Celsius.')
sysX4ConfigMod2TempAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysX4ConfigMod2TempAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sysX4ConfigMod2TempAlarmThreshold.setDescription('actual module sensor2 temperature threshold.')
sysX4ConfigMod2TempAlarmTrap = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("critical", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysX4ConfigMod2TempAlarmTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sysX4ConfigMod2TempAlarmTrap.setDescription('If the actual module sensor2 temperature raises above the threshold, a alarm trap is generated every 60 seconds.')
sysX4TrapMainTempCritical = NotificationType((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 2) + (0,1)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigTempUnit"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMainTemp"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMainTempAlarmThreshold"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMod1Temp"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMod2Temp"))
if mibBuilder.loadTexts: sysX4TrapMainTempCritical.setDescription('This trap signifies that the system board temperature raises above the critical alarm-threshold')
sysX4TrapMainTempOk = NotificationType((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 2) + (0,2)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigTempUnit"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMainTemp"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMainTempAlarmThreshold"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMod1Temp"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMod2Temp"))
if mibBuilder.loadTexts: sysX4TrapMainTempOk.setDescription('Normal system board temperature has been restored.')
sysX4TrapMod1TempCritical = NotificationType((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 2) + (0,3)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigTempUnit"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMainTemp"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMod1Temp"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMod1TempAlarmThreshold"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMod2Temp"))
if mibBuilder.loadTexts: sysX4TrapMod1TempCritical.setDescription('This trap signifies that the actual module (sensor 1) temperature raises above the critical alarm-threshold')
sysX4TrapMod1Temp1Ok = NotificationType((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 2) + (0,4)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigTempUnit"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMainTemp"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMod1Temp"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMod1TempAlarmThreshold"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMod2Temp"))
if mibBuilder.loadTexts: sysX4TrapMod1Temp1Ok.setDescription('Normal temperature of actual module (sensor 1) has been restored.')
sysX4TrapMod2TempCritical = NotificationType((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 2) + (0,5)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigTempUnit"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMainTemp"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMod1Temp"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMod2Temp"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMod2TempAlarmThreshold"))
if mibBuilder.loadTexts: sysX4TrapMod2TempCritical.setDescription('This trap signifies that the actual module (sensor 2) temperature raises above the critical alarm-threshold')
sysX4TrapMod2TempOk = NotificationType((1, 3, 6, 1, 4, 1, 272, 4, 17, 2, 2) + (0,6)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysName"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigTempUnit"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMainTemp"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMod1Temp"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMod2Temp"), ("BIANCA-X4000-MIBSYS-MIB", "sysX4ConfigMod2TempAlarmThreshold"))
if mibBuilder.loadTexts: sysX4TrapMod2TempOk.setDescription('Normal temperature of actual module (sensor 2) has been restored.')
mibBuilder.exportSymbols("BIANCA-X4000-MIBSYS-MIB", sysX4Config=sysX4Config, sysX4ConfigLcdConfigure=sysX4ConfigLcdConfigure, sysX4ConfigMod1TempAlarmThreshold=sysX4ConfigMod1TempAlarmThreshold, sysX4TrapMainTempOk=sysX4TrapMainTempOk, bintec=bintec, sysX4ConfigMod2Temp=sysX4ConfigMod2Temp, sysX4TrapMod2TempOk=sysX4TrapMod2TempOk, sysX4ConfigTempUnit=sysX4ConfigTempUnit, dod=dod, org=org, bibo=bibo, enterprises=enterprises, sysX4ConfigLcdIdleTimer=sysX4ConfigLcdIdleTimer, sysX4ConfigLcdDefaultScreen=sysX4ConfigLcdDefaultScreen, sysX4ConfigMod2TempAlarmThreshold=sysX4ConfigMod2TempAlarmThreshold, sysX4TrapMod2TempCritical=sysX4TrapMod2TempCritical, x4=x4, internet=internet, sysX4TrapMod1TempCritical=sysX4TrapMod1TempCritical, sysX4Traps=sysX4Traps, sysX4ConfigLcdBrightness=sysX4ConfigLcdBrightness, sysX4ConfigLcdLanguage=sysX4ConfigLcdLanguage, sysX4ConfigMainTemp=sysX4ConfigMainTemp, sys=sys, sysX4ConfigMainTempAlarmTrap=sysX4ConfigMainTempAlarmTrap, sysX4ConfigMod2TempAlarmTrap=sysX4ConfigMod2TempAlarmTrap, sysX4ConfigMainTempAlarmThreshold=sysX4ConfigMainTempAlarmThreshold, sysX4ConfigMod1TempAlarmTrap=sysX4ConfigMod1TempAlarmTrap, sysX4ConfigLcdPin=sysX4ConfigLcdPin, sysX4TrapMainTempCritical=sysX4TrapMainTempCritical, private=private, sysX4TrapMod1Temp1Ok=sysX4TrapMod1Temp1Ok, sysX4ConfigLcdContrast=sysX4ConfigLcdContrast, sysX4ConfigMod1Temp=sysX4ConfigMod1Temp)
