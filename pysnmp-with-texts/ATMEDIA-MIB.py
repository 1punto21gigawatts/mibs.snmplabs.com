#
# PySNMP MIB module ATMEDIA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ATMEDIA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:31:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Unsigned32, enterprises, NotificationType, Counter64, Gauge32, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, IpAddress, Integer32, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "enterprises", "NotificationType", "Counter64", "Gauge32", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "IpAddress", "Integer32", "Counter32", "iso")
DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention")
class DisplayString(OctetString):
    pass

atmedia = MibIdentifier((1, 3, 6, 1, 4, 1, 13458))
atmcrypt = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1))
acMachine = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 1))
acSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 2))
acHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 3))
acStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 4))
acMaintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 5))
acTransmission = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6))
acInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 3, 3))
acEncryptors = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 3, 4))
acInterfaceStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 4, 1))
acEncryptorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 4, 2))
acSonet = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1))
acE3 = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2))
acE1 = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 3))
acGigabit = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4))
acFibrechannel = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5))
acSonetStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 1))
acSonetAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 2))
acSonetErrCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 3))
acSonetEtsCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 4))
acE3Status = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 1))
acE3Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 2))
acE3ErrCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 3))
acE3EtsCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 4))
acE1Status = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 3, 1))
acE1Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 3, 2))
acE1ErrCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 3, 3))
acE1EtsCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 3, 4))
acGigabitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 1))
acGigabitAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 2))
acGigabitErrCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 3))
acGigabitEtsCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 4))
acFibrechannelStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 1))
acFibrechannelAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 2))
acFibrechannelErrCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 3))
acFibrechannelEtsCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 4))
acProductID = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acProductID.setStatus('current')
if mibBuilder.loadTexts: acProductID.setDescription('The product identifier of the ATMedia Encryptor device.')
acSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSerialNumber.setStatus('current')
if mibBuilder.loadTexts: acSerialNumber.setDescription('The serial number of the ATMedia Encryptor device.')
acHostname = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acHostname.setStatus('current')
if mibBuilder.loadTexts: acHostname.setDescription('The actual host name of the ATMedia Encryptor device.')
acContact = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acContact.setStatus('current')
if mibBuilder.loadTexts: acContact.setDescription('The contact person for ATMedia Encryptor administration.')
acLocation = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLocation.setStatus('current')
if mibBuilder.loadTexts: acLocation.setDescription('The location of the ATMedia Encryptor device.')
acDescr = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDescr.setStatus('current')
if mibBuilder.loadTexts: acDescr.setDescription('The description of the ATMedia Encryptor device.')
acSoftVersion = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSoftVersion.setStatus('current')
if mibBuilder.loadTexts: acSoftVersion.setDescription('The software version running on the ATMedia Encryptor device.')
acSoftDescr = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSoftDescr.setStatus('current')
if mibBuilder.loadTexts: acSoftDescr.setDescription('Description of the ATMedia Encryptor software.')
acHardVersion = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acHardVersion.setStatus('current')
if mibBuilder.loadTexts: acHardVersion.setDescription('The hardware version of the ATMedia Encryptor device.')
acHardDescr = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acHardDescr.setStatus('current')
if mibBuilder.loadTexts: acHardDescr.setDescription('Description of the ATMedia Encryptor hardware.')
acIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acIfNumber.setStatus('current')
if mibBuilder.loadTexts: acIfNumber.setDescription('The number of physical ATMedia Encryptor interfaces.')
acIfTable = MibTable((1, 3, 6, 1, 4, 1, 13458, 1, 3, 3, 2), )
if mibBuilder.loadTexts: acIfTable.setStatus('current')
if mibBuilder.loadTexts: acIfTable.setDescription('A list of physical ATMedia Encryptor interfaces. The number of entries is given by the value of acsIfNumber.')
acIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13458, 1, 3, 3, 2, 1), ).setIndexNames((0, "ATMEDIA-MIB", "acIfIndex"))
if mibBuilder.loadTexts: acIfEntry.setStatus('current')
if mibBuilder.loadTexts: acIfEntry.setDescription('An entry containing management information applicable to a particular physical interface.')
acIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acIfIndex.setStatus('current')
if mibBuilder.loadTexts: acIfIndex.setDescription("A unique value, greater than zero, for each physical interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 3, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acIfDescr.setStatus('current')
if mibBuilder.loadTexts: acIfDescr.setDescription('Description of the physical interface.')
acIfPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 0), ("sonet", 1), ("e3", 2), ("ds3", 3), ("e1", 4), ("ds1", 5), ("gigabit", 6), ("sonetlink", 7), ("fibrechannel", 8), ("ethernet", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acIfPhyType.setStatus('current')
if mibBuilder.loadTexts: acIfPhyType.setDescription('Type of the physical interface.')
acIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 3, 3, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acIfSpeed.setStatus('current')
if mibBuilder.loadTexts: acIfSpeed.setDescription('Speed of the physical interface in bps.')
acIfRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 3, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acIfRevision.setStatus('current')
if mibBuilder.loadTexts: acIfRevision.setDescription('Revision of the physical interface.')
acEcNumber = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEcNumber.setStatus('current')
if mibBuilder.loadTexts: acEcNumber.setDescription('The number of ATMedia encryptor engines.')
acEcTable = MibTable((1, 3, 6, 1, 4, 1, 13458, 1, 3, 4, 2), )
if mibBuilder.loadTexts: acEcTable.setStatus('current')
if mibBuilder.loadTexts: acEcTable.setDescription('A list of ATMedia encryptor engines. The number of entries is given by the value of acsEcNumber.')
acEcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13458, 1, 3, 4, 2, 1), ).setIndexNames((0, "ATMEDIA-MIB", "acEcIndex"))
if mibBuilder.loadTexts: acEcEntry.setStatus('current')
if mibBuilder.loadTexts: acEcEntry.setDescription('An entry containing management information applicable to a particular encryptor engine.')
acEcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEcIndex.setStatus('current')
if mibBuilder.loadTexts: acEcIndex.setDescription("A unique value, greater than zero, for each encryptor engine. It is recommended that values are assigned contiguously starting from 1. The value for each encryptor must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acEcDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 3, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEcDescr.setStatus('current')
if mibBuilder.loadTexts: acEcDescr.setDescription('Description of the encryptor engine.')
acEcRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 3, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEcRevision.setStatus('current')
if mibBuilder.loadTexts: acEcRevision.setDescription('Revision of the encryptor engine.')
acInterfaceStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acInterfaceStatusNumber.setStatus('current')
if mibBuilder.loadTexts: acInterfaceStatusNumber.setDescription('The number of ATMedia Encryptor physical interfaces.')
acInterfaceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 13458, 1, 4, 1, 2), )
if mibBuilder.loadTexts: acInterfaceStatusTable.setStatus('current')
if mibBuilder.loadTexts: acInterfaceStatusTable.setDescription('A list of interface cell counter informations. The number of entries is given by the value of acInferfaceStatusNumber.')
acInterfaceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13458, 1, 4, 1, 2, 1), ).setIndexNames((0, "ATMEDIA-MIB", "acInterfaceStatusIndex"))
if mibBuilder.loadTexts: acInterfaceStatusEntry.setStatus('current')
if mibBuilder.loadTexts: acInterfaceStatusEntry.setDescription('An entry containing alarm informations applicable to a particular physical interface.')
acInterfaceStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acInterfaceStatusIndex.setStatus('current')
if mibBuilder.loadTexts: acInterfaceStatusIndex.setDescription("A unique value, greater than zero, for each physical interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acInterfaceStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acInterfaceStatusState.setStatus('current')
if mibBuilder.loadTexts: acInterfaceStatusState.setDescription('The current operational state of the interface.')
acInterfaceStatusLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 4, 1, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acInterfaceStatusLastChange.setStatus('current')
if mibBuilder.loadTexts: acInterfaceStatusLastChange.setDescription('The value of sysUpTime at the time the interface entered its current operational state.')
acInterfaceStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 4, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acInterfaceStatusDescr.setStatus('current')
if mibBuilder.loadTexts: acInterfaceStatusDescr.setDescription('Description of the encryptor engine status.')
acInterfaceStatusRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 4, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acInterfaceStatusRxCells.setStatus('current')
if mibBuilder.loadTexts: acInterfaceStatusRxCells.setDescription('Number of cells received by the physical interface.')
acInterfaceStatusTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 4, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acInterfaceStatusTxCells.setStatus('current')
if mibBuilder.loadTexts: acInterfaceStatusTxCells.setDescription('Number of cells sent by the physical interface.')
acInterfaceStatusRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 4, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acInterfaceStatusRxBytes.setStatus('current')
if mibBuilder.loadTexts: acInterfaceStatusRxBytes.setDescription('Number of bytes received by the physical interface.')
acInterfaceStatusTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 4, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acInterfaceStatusTxBytes.setStatus('current')
if mibBuilder.loadTexts: acInterfaceStatusTxBytes.setDescription('Number of bytes sent by the physical interface.')
acInterfaceStatusRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 4, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acInterfaceStatusRxRate.setStatus('current')
if mibBuilder.loadTexts: acInterfaceStatusRxRate.setDescription('Data rate with which cells are received by the physical interface.')
acInterfaceStatusTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 4, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acInterfaceStatusTxRate.setStatus('current')
if mibBuilder.loadTexts: acInterfaceStatusTxRate.setDescription('Data rate with which cells are sent by the physical interface.')
acEncryptorStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEncryptorStatusNumber.setStatus('current')
if mibBuilder.loadTexts: acEncryptorStatusNumber.setDescription('The number of ATMedia encryptor engines.')
acEncryptorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 13458, 1, 4, 2, 2), )
if mibBuilder.loadTexts: acEncryptorStatusTable.setStatus('current')
if mibBuilder.loadTexts: acEncryptorStatusTable.setDescription('A list of ATMedia encryptor engine status informations. The number of entries is given by the value of acsEcstatNumber.')
acEncryptorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13458, 1, 4, 2, 2, 1), ).setIndexNames((0, "ATMEDIA-MIB", "acEncryptorStatusIndex"))
if mibBuilder.loadTexts: acEncryptorStatusEntry.setStatus('current')
if mibBuilder.loadTexts: acEncryptorStatusEntry.setDescription('An entry containing status information applicable to a particular encryptor engine.')
acEncryptorStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 4, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEncryptorStatusIndex.setStatus('current')
if mibBuilder.loadTexts: acEncryptorStatusIndex.setDescription("A unique value, greater than zero, for each encryptor engine. It is recommended that values are assigned contiguously starting from 1. The value for each encryptor must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acEncryptorStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("plain", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEncryptorStatusState.setStatus('current')
if mibBuilder.loadTexts: acEncryptorStatusState.setDescription('Status of the encryptor engine. Since version 2.1 all encryptors will distinguish between crypt (running) and plaintext mode')
acEncryptorStatusLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 4, 2, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEncryptorStatusLastChange.setStatus('current')
if mibBuilder.loadTexts: acEncryptorStatusLastChange.setDescription('The value of sysUpTime at the time the encryptor entered its current operational state.')
acEncryptorStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 4, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEncryptorStatusDescr.setStatus('current')
if mibBuilder.loadTexts: acEncryptorStatusDescr.setDescription('Description of the encryptor engine status.')
acMaUptime = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 5, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acMaUptime.setStatus('current')
if mibBuilder.loadTexts: acMaUptime.setDescription('Hundredth of seconds since system start.')
acMaLastBoot = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 5, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acMaLastBoot.setStatus('current')
if mibBuilder.loadTexts: acMaLastBoot.setDescription('Hundredth of seconds since last reboot.')
acMaSystime = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 5, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acMaSystime.setStatus('current')
if mibBuilder.loadTexts: acMaSystime.setDescription('System Date/Time of ATMedia Encryptor device (UTC).')
acMaTemperature = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 5, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acMaTemperature.setStatus('current')
if mibBuilder.loadTexts: acMaTemperature.setDescription('Temperature of ATMedia Encryptor device in hundredth of degree celsius.')
acMaCpuTemperature1 = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 5, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acMaCpuTemperature1.setStatus('current')
if mibBuilder.loadTexts: acMaCpuTemperature1.setDescription('Temperature of the first CPU of the ATMedia Encryptor device in hundredth of degree celsius.')
acMaCpuTemperature2 = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 5, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acMaCpuTemperature2.setStatus('current')
if mibBuilder.loadTexts: acMaCpuTemperature2.setDescription('Temperature of the second CPU of the ATMedia Encryptor device in hundredth of degree celsius.')
acMaFanSpeed1 = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 5, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acMaFanSpeed1.setStatus('current')
if mibBuilder.loadTexts: acMaFanSpeed1.setDescription('Speed of the first fan of the ATMedia Encryptor device in rpm (revolutions per minute)')
acMaFanSpeed2 = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 5, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acMaFanSpeed2.setStatus('current')
if mibBuilder.loadTexts: acMaFanSpeed2.setDescription('Speed of the second fan of the ATMedia Encryptor device in rpm (revolutions per minute)')
acMaFanSpeed3 = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 5, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acMaFanSpeed3.setStatus('current')
if mibBuilder.loadTexts: acMaFanSpeed3.setDescription('Speed of the third fan of the ATMedia Encryptor device in rpm (revolutions per minute)')
acMaFanSpeed4 = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 5, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acMaFanSpeed4.setStatus('current')
if mibBuilder.loadTexts: acMaFanSpeed4.setDescription('Speed of the fourth fan of the ATMedia Encryptor device in rpm (revolutions per minute)')
acMaPowerState = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acMaPowerState.setStatus('current')
if mibBuilder.loadTexts: acMaPowerState.setDescription('State of the power supply of the ATMedia Encryptor device')
acMaPowerLastChange = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 5, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acMaPowerLastChange.setStatus('current')
if mibBuilder.loadTexts: acMaPowerLastChange.setDescription('The value of sysUpTime at the time the power supply entered its current state.')
acSonetStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetStatusNumber.setStatus('current')
if mibBuilder.loadTexts: acSonetStatusNumber.setDescription('The number of physical Sonet interfaces.')
acSonetStatusTable = MibTable((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 1, 2), )
if mibBuilder.loadTexts: acSonetStatusTable.setStatus('current')
if mibBuilder.loadTexts: acSonetStatusTable.setDescription('A list of physical Sonet interface status informations. The number of entries is given by the value of acsIfstatNumber.')
acSonetStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 1, 2, 1), ).setIndexNames((0, "ATMEDIA-MIB", "acSonetStatusIndex"))
if mibBuilder.loadTexts: acSonetStatusEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetStatusEntry.setDescription('An entry containing status information applicable to a particular Sonet physical interface.')
acSonetStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetStatusIndex.setStatus('current')
if mibBuilder.loadTexts: acSonetStatusIndex.setDescription("A unique value, greater than zero, for each physical interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acSonetStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetStatusState.setStatus('current')
if mibBuilder.loadTexts: acSonetStatusState.setDescription('Status of the physical Sonet interface.')
acSonetStatusLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetStatusLOS.setStatus('current')
if mibBuilder.loadTexts: acSonetStatusLOS.setDescription('Alarm condition of type LOS at the physical Sonet interface.')
acSonetStatusOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetStatusOOF.setStatus('current')
if mibBuilder.loadTexts: acSonetStatusOOF.setDescription('Alarm condition of type OOF at the physical Sonet interface.')
acSonetStatusLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetStatusLOC.setStatus('current')
if mibBuilder.loadTexts: acSonetStatusLOC.setDescription('Alarm condition of type LOC at the physical Sonet interface.')
acSonetStatusLineAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetStatusLineAIS.setStatus('current')
if mibBuilder.loadTexts: acSonetStatusLineAIS.setDescription('Alarm condition of type LineAIS at the physical Sonet interface.')
acSonetStatusLineRDI = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetStatusLineRDI.setStatus('current')
if mibBuilder.loadTexts: acSonetStatusLineRDI.setDescription('Alarm condition of type LineRDI at the physical Sonet interface.')
acSonetStatusPathAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetStatusPathAIS.setStatus('current')
if mibBuilder.loadTexts: acSonetStatusPathAIS.setDescription('Alarm condition of type PathAIS at the physical Sonet interface.')
acSonetStatusPathYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetStatusPathYellow.setStatus('current')
if mibBuilder.loadTexts: acSonetStatusPathYellow.setDescription('Alarm condition of type PathYellow at the physical Sonet interface.')
acSonetStatusCustom = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetStatusCustom.setStatus('current')
if mibBuilder.loadTexts: acSonetStatusCustom.setDescription('Numerical status information of the physical Sonet interface. The AcSonetStatusCustom is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The various bit positions are: 0x0001 STATUS_LOS 0x0002 STATUS_LOP 0x0004 STATUS_LINE_AIS 0x0008 STATUS_PATH_AIS 0x0010 STATUS_PATH_YELLOW 0x0020 STATUS_STS_OOF 0x0040 STATUS_STS_LOF 0x0080 STATUS_STS_LOF23 0x0100 STATUS_LOC 0x0200 STATUS_LINE_FERF 0x1000 STATUS_PATH_FERF')
acSonetStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetStatusDescr.setStatus('current')
if mibBuilder.loadTexts: acSonetStatusDescr.setDescription('Textual description of the status of the physical Sonet interface.')
acSonetAlarmsNumber = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetAlarmsNumber.setStatus('current')
if mibBuilder.loadTexts: acSonetAlarmsNumber.setDescription('The number of physical Sonet interfaces.')
acSonetAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 2, 2), )
if mibBuilder.loadTexts: acSonetAlarmsTable.setStatus('current')
if mibBuilder.loadTexts: acSonetAlarmsTable.setDescription('A list of Sonet interface alarm informations. The number of entries is given by the value of acSonetAlarmsNumber.')
acSonetAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 2, 2, 1), ).setIndexNames((0, "ATMEDIA-MIB", "acSonetAlarmsIndex"))
if mibBuilder.loadTexts: acSonetAlarmsEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetAlarmsEntry.setDescription('An entry containing alarm informations applicable to a particular physical Sonet interface.')
acSonetAlarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetAlarmsIndex.setStatus('current')
if mibBuilder.loadTexts: acSonetAlarmsIndex.setDescription("A unique value, greater than zero, for each physical interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acSonetAlarmsLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetAlarmsLOS.setStatus('current')
if mibBuilder.loadTexts: acSonetAlarmsLOS.setDescription('Number of alarm conditions of type LOS at the physical interface.')
acSonetAlarmsLineAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetAlarmsLineAIS.setStatus('current')
if mibBuilder.loadTexts: acSonetAlarmsLineAIS.setDescription('Number of alarm conditions of type LineAIS at the physical interface.')
acSonetAlarmsLineRDI = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetAlarmsLineRDI.setStatus('current')
if mibBuilder.loadTexts: acSonetAlarmsLineRDI.setDescription('Number of alarm conditions of type LineRDI at the physical interface.')
acSonetAlarmsPathAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetAlarmsPathAIS.setStatus('current')
if mibBuilder.loadTexts: acSonetAlarmsPathAIS.setDescription('Number of alarm conditions of type PathAIS at the physical interface.')
acSonetAlarmsPathYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetAlarmsPathYellow.setStatus('current')
if mibBuilder.loadTexts: acSonetAlarmsPathYellow.setDescription('Number of alarm conditions of type PathYellow at the physical interface.')
acSonetErrCounterNumber = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetErrCounterNumber.setStatus('current')
if mibBuilder.loadTexts: acSonetErrCounterNumber.setDescription('The number of physical Sonet interfaces.')
acSonetErrCounterTable = MibTable((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 3, 2), )
if mibBuilder.loadTexts: acSonetErrCounterTable.setStatus('current')
if mibBuilder.loadTexts: acSonetErrCounterTable.setDescription('A list of Sonet interface alarm informations. The number of entries is given by the value of acSonetErrCounterNumber.')
acSonetErrCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 3, 2, 1), ).setIndexNames((0, "ATMEDIA-MIB", "acSonetErrCounterIndex"))
if mibBuilder.loadTexts: acSonetErrCounterEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetErrCounterEntry.setDescription('An entry containing alarm informations applicable to a particular physical Sonet interface.')
acSonetErrCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetErrCounterIndex.setStatus('current')
if mibBuilder.loadTexts: acSonetErrCounterIndex.setDescription("A unique value, greater than zero, for each physical interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acSonetErrCounterOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 3, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetErrCounterOOF.setStatus('current')
if mibBuilder.loadTexts: acSonetErrCounterOOF.setDescription('Number of error conditions of type OOF at the physical interface.')
acSonetErrCounterLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetErrCounterLOC.setStatus('current')
if mibBuilder.loadTexts: acSonetErrCounterLOC.setDescription('Number of error conditions of type LOC at the physical interface.')
acSonetErrCounterB1BIP = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetErrCounterB1BIP.setStatus('current')
if mibBuilder.loadTexts: acSonetErrCounterB1BIP.setDescription('Number of error conditions of type B1BIP at the physical interface.')
acSonetErrCounterB2BIP = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 3, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetErrCounterB2BIP.setStatus('current')
if mibBuilder.loadTexts: acSonetErrCounterB2BIP.setDescription('Number of error conditions of type B2BIP at the physical interface.')
acSonetErrCounterB3BIP = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 3, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetErrCounterB3BIP.setStatus('current')
if mibBuilder.loadTexts: acSonetErrCounterB3BIP.setDescription('Number of error conditions of type B3BIP at the physical interface.')
acSonetErrCounterLineFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 3, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetErrCounterLineFEBE.setStatus('current')
if mibBuilder.loadTexts: acSonetErrCounterLineFEBE.setDescription('Number of error conditions of type LineFEBE at the physical interface.')
acSonetErrCounterPathFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 3, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetErrCounterPathFEBE.setStatus('current')
if mibBuilder.loadTexts: acSonetErrCounterPathFEBE.setDescription('Number of error conditions of type PathFEBE at the physical interface.')
acSonetErrCounterHEC = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 3, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetErrCounterHEC.setStatus('current')
if mibBuilder.loadTexts: acSonetErrCounterHEC.setDescription('Number of error conditions of type HEC at the physical interface.')
acSonetEtsCounterNumber = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetEtsCounterNumber.setStatus('current')
if mibBuilder.loadTexts: acSonetEtsCounterNumber.setDescription('The number of physical Sonet interfaces.')
acSonetEtsCounterTable = MibTable((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 4, 2), )
if mibBuilder.loadTexts: acSonetEtsCounterTable.setStatus('current')
if mibBuilder.loadTexts: acSonetEtsCounterTable.setDescription('A list of Sonet interface alarm informations. The number of entries is given by the value of acSonetEtsCounterNumber.')
acSonetEtsCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 4, 2, 1), ).setIndexNames((0, "ATMEDIA-MIB", "acSonetEtsCounterIndex"))
if mibBuilder.loadTexts: acSonetEtsCounterEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetEtsCounterEntry.setDescription('An entry containing alarm informations applicable to a particular physical Sonet interface.')
acSonetEtsCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetEtsCounterIndex.setStatus('current')
if mibBuilder.loadTexts: acSonetEtsCounterIndex.setDescription("A unique value, greater than zero, for each physical interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acSonetEtsCounterOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 4, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetEtsCounterOOF.setStatus('current')
if mibBuilder.loadTexts: acSonetEtsCounterOOF.setDescription('Number of error conditions of type OOF at the physical interface.')
acSonetEtsCounterLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 4, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetEtsCounterLOC.setStatus('current')
if mibBuilder.loadTexts: acSonetEtsCounterLOC.setDescription('Number of error conditions of type LOC at the physical interface.')
acSonetEtsCounterB1BIP = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 4, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetEtsCounterB1BIP.setStatus('current')
if mibBuilder.loadTexts: acSonetEtsCounterB1BIP.setDescription('Number of error conditions of type B1BIP at the physical interface.')
acSonetEtsCounterB2BIP = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 4, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetEtsCounterB2BIP.setStatus('current')
if mibBuilder.loadTexts: acSonetEtsCounterB2BIP.setDescription('Number of error conditions of type B2BIP at the physical interface.')
acSonetEtsCounterB3BIP = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 4, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetEtsCounterB3BIP.setStatus('current')
if mibBuilder.loadTexts: acSonetEtsCounterB3BIP.setDescription('Number of error conditions of type B3BIP at the physical interface.')
acSonetEtsCounterLineFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 4, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetEtsCounterLineFEBE.setStatus('current')
if mibBuilder.loadTexts: acSonetEtsCounterLineFEBE.setDescription('Number of error conditions of type LineFEBE at the physical interface.')
acSonetEtsCounterPathFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 4, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetEtsCounterPathFEBE.setStatus('current')
if mibBuilder.loadTexts: acSonetEtsCounterPathFEBE.setDescription('Number of error conditions of type PathFEBE at the physical interface.')
acSonetEtsCounterHEC = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 1, 4, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetEtsCounterHEC.setStatus('current')
if mibBuilder.loadTexts: acSonetEtsCounterHEC.setDescription('Number of error conditions of type HEC at the physical interface.')
acE3StatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3StatusNumber.setStatus('current')
if mibBuilder.loadTexts: acE3StatusNumber.setDescription('The number of physical E3 interfaces.')
acE3StatusTable = MibTable((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 1, 2), )
if mibBuilder.loadTexts: acE3StatusTable.setStatus('current')
if mibBuilder.loadTexts: acE3StatusTable.setDescription('A list of physical E3 interface status informations. The number of entries is given by the value of acE3StatusNumber.')
acE3StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 1, 2, 1), ).setIndexNames((0, "ATMEDIA-MIB", "acE3StatusIndex"))
if mibBuilder.loadTexts: acE3StatusEntry.setStatus('current')
if mibBuilder.loadTexts: acE3StatusEntry.setDescription('An entry containing status information applicable to a particular E3 physical interface.')
acE3StatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3StatusIndex.setStatus('current')
if mibBuilder.loadTexts: acE3StatusIndex.setDescription("A unique value, greater than zero, for each physical interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acE3StatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3StatusState.setStatus('current')
if mibBuilder.loadTexts: acE3StatusState.setDescription('Status of the physical E3 interface.')
acE3StatusLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3StatusLOS.setStatus('current')
if mibBuilder.loadTexts: acE3StatusLOS.setDescription('Alarm condition of type LOS at the physical E3 interface.')
acE3StatusOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3StatusOOF.setStatus('current')
if mibBuilder.loadTexts: acE3StatusOOF.setDescription('Alarm condition of type OOF at the physical E3 interface.')
acE3StatusLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3StatusLOC.setStatus('current')
if mibBuilder.loadTexts: acE3StatusLOC.setDescription('Alarm condition of type LOC at the physical E3 interface.')
acE3StatusAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3StatusAIS.setStatus('current')
if mibBuilder.loadTexts: acE3StatusAIS.setDescription('Alarm condition of type AIS at the physical E3 interface.')
acE3StatusMAFERF = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3StatusMAFERF.setStatus('current')
if mibBuilder.loadTexts: acE3StatusMAFERF.setDescription('Alarm condition of type MAFERF at the physical E3 interface.')
acE3StatusCustom = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3StatusCustom.setStatus('current')
if mibBuilder.loadTexts: acE3StatusCustom.setDescription('Numerical status information of the physical E3 interface. The AcE3StatusCustom is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The various bit positions are: 0x0001 STATUS_LOS 0x0004 STATUS_E3_AIS 0x0020 STATUS_E3_OOF 0x0040 STATUS_E3_LOF 0x0080 STATUS_E3_LOF23 0x0100 STATUS_LOC 0x1000 STATUS_MA_FERF')
acE3StatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3StatusDescr.setStatus('current')
if mibBuilder.loadTexts: acE3StatusDescr.setDescription('Textual description of the status of the physical E3 interface.')
acE3AlarmsNumber = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3AlarmsNumber.setStatus('current')
if mibBuilder.loadTexts: acE3AlarmsNumber.setDescription('The number of physical E3 interfaces.')
acE3AlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 2, 2), )
if mibBuilder.loadTexts: acE3AlarmsTable.setStatus('current')
if mibBuilder.loadTexts: acE3AlarmsTable.setDescription('A list of E3 interface alarm informations. The number of entries is given by the value of acE3AlarmsNumber.')
acE3AlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 2, 2, 1), ).setIndexNames((0, "ATMEDIA-MIB", "acE3AlarmsIndex"))
if mibBuilder.loadTexts: acE3AlarmsEntry.setStatus('current')
if mibBuilder.loadTexts: acE3AlarmsEntry.setDescription('An entry containing alarm informations applicable to a particular physical E3 interface.')
acE3AlarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3AlarmsIndex.setStatus('current')
if mibBuilder.loadTexts: acE3AlarmsIndex.setDescription("A unique value, greater than zero, for each physical interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acE3AlarmsLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3AlarmsLOS.setStatus('current')
if mibBuilder.loadTexts: acE3AlarmsLOS.setDescription('Number of alarm conditions of type LOS at the physical interface.')
acE3AlarmsAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3AlarmsAIS.setStatus('current')
if mibBuilder.loadTexts: acE3AlarmsAIS.setDescription('Number of alarm conditions of type AIS at the physical interface.')
acE3AlarmsMAFERF = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3AlarmsMAFERF.setStatus('current')
if mibBuilder.loadTexts: acE3AlarmsMAFERF.setDescription('Number of alarm conditions of type MAFERF at the physical interface.')
acE3ErrCounterNumber = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3ErrCounterNumber.setStatus('current')
if mibBuilder.loadTexts: acE3ErrCounterNumber.setDescription('The number of physical E3 interfaces.')
acE3ErrCounterTable = MibTable((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 3, 2), )
if mibBuilder.loadTexts: acE3ErrCounterTable.setStatus('current')
if mibBuilder.loadTexts: acE3ErrCounterTable.setDescription('A list of E3 interface alarm informations. The number of entries is given by the value of acE3ErrCounterNumber.')
acE3ErrCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 3, 2, 1), ).setIndexNames((0, "ATMEDIA-MIB", "acE3ErrCounterIndex"))
if mibBuilder.loadTexts: acE3ErrCounterEntry.setStatus('current')
if mibBuilder.loadTexts: acE3ErrCounterEntry.setDescription('An entry containing alarm informations applicable to a particular physical E3 interface.')
acE3ErrCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3ErrCounterIndex.setStatus('current')
if mibBuilder.loadTexts: acE3ErrCounterIndex.setDescription("A unique value, greater than zero, for each physical interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acE3ErrCounterLCV = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 3, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3ErrCounterLCV.setStatus('current')
if mibBuilder.loadTexts: acE3ErrCounterLCV.setDescription('Number of error conditions of type LCV at the physical interface.')
acE3ErrCounterOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3ErrCounterOOF.setStatus('current')
if mibBuilder.loadTexts: acE3ErrCounterOOF.setDescription('Number of error conditions of type OOF at the physical interface.')
acE3ErrCounterLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3ErrCounterLOC.setStatus('current')
if mibBuilder.loadTexts: acE3ErrCounterLOC.setDescription('Number of error conditions of type LOC at the physical interface.')
acE3ErrCounterBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 3, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3ErrCounterBIP.setStatus('current')
if mibBuilder.loadTexts: acE3ErrCounterBIP.setDescription('Number of error conditions of type B1BIP at the physical interface.')
acE3ErrCounterMAFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 3, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3ErrCounterMAFEBE.setStatus('current')
if mibBuilder.loadTexts: acE3ErrCounterMAFEBE.setDescription('Number of error conditions of type MAFEBE at the physical interface.')
acE3ErrCounterHEC = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 3, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3ErrCounterHEC.setStatus('current')
if mibBuilder.loadTexts: acE3ErrCounterHEC.setDescription('Number of error conditions of type HEC at the physical interface.')
acE3EtsCounterNumber = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3EtsCounterNumber.setStatus('current')
if mibBuilder.loadTexts: acE3EtsCounterNumber.setDescription('The number of physical E3 interfaces.')
acE3EtsCounterTable = MibTable((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 4, 2), )
if mibBuilder.loadTexts: acE3EtsCounterTable.setStatus('current')
if mibBuilder.loadTexts: acE3EtsCounterTable.setDescription('A list of E3 interface alarm informations. The number of entries is given by the value of acE3EtsCounterNumber.')
acE3EtsCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 4, 2, 1), ).setIndexNames((0, "ATMEDIA-MIB", "acE3EtsCounterIndex"))
if mibBuilder.loadTexts: acE3EtsCounterEntry.setStatus('current')
if mibBuilder.loadTexts: acE3EtsCounterEntry.setDescription('An entry containing alarm informations applicable to a particular physical E3 interface.')
acE3EtsCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3EtsCounterIndex.setStatus('current')
if mibBuilder.loadTexts: acE3EtsCounterIndex.setDescription("A unique value, greater than zero, for each physical interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acE3EtsCounterLCV = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 4, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3EtsCounterLCV.setStatus('current')
if mibBuilder.loadTexts: acE3EtsCounterLCV.setDescription('Number of error conditions of type LCV at the physical interface.')
acE3EtsCounterOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 4, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3EtsCounterOOF.setStatus('current')
if mibBuilder.loadTexts: acE3EtsCounterOOF.setDescription('Number of error conditions of type OOF at the physical interface.')
acE3EtsCounterLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 4, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3EtsCounterLOC.setStatus('current')
if mibBuilder.loadTexts: acE3EtsCounterLOC.setDescription('Number of error conditions of type LOC at the physical interface.')
acE3EtsCounterBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 4, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3EtsCounterBIP.setStatus('current')
if mibBuilder.loadTexts: acE3EtsCounterBIP.setDescription('Number of error conditions of type B1BIP at the physical interface.')
acE3EtsCounterMAFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 4, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3EtsCounterMAFEBE.setStatus('current')
if mibBuilder.loadTexts: acE3EtsCounterMAFEBE.setDescription('Number of error conditions of type MAFEBE at the physical interface.')
acE3EtsCounterHEC = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 2, 4, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acE3EtsCounterHEC.setStatus('current')
if mibBuilder.loadTexts: acE3EtsCounterHEC.setDescription('Number of error conditions of type HEC at the physical interface.')
acGigabitStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitStatusNumber.setStatus('current')
if mibBuilder.loadTexts: acGigabitStatusNumber.setDescription('The number of physical Gigabit interfaces.')
acGigabitStatusTable = MibTable((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 1, 2), )
if mibBuilder.loadTexts: acGigabitStatusTable.setStatus('current')
if mibBuilder.loadTexts: acGigabitStatusTable.setDescription('A list of physical Gigabit interface status informations. The number of entries is given by the value of acsGigabitStatusNumber.')
acGigabitStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 1, 2, 1), ).setIndexNames((0, "ATMEDIA-MIB", "acGigabitStatusIndex"))
if mibBuilder.loadTexts: acGigabitStatusEntry.setStatus('current')
if mibBuilder.loadTexts: acGigabitStatusEntry.setDescription('An entry containing status information applicable to a particular Gigabit physical interface.')
acGigabitStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitStatusIndex.setStatus('current')
if mibBuilder.loadTexts: acGigabitStatusIndex.setDescription("A unique value, greater than zero, for each physical interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acGigabitStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitStatusState.setStatus('current')
if mibBuilder.loadTexts: acGigabitStatusState.setDescription('Status of the physical Gigabit interface.')
acGigabitStatusLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitStatusLOS.setStatus('current')
if mibBuilder.loadTexts: acGigabitStatusLOS.setDescription('Alarm condition of type LOS at the physical Gigabit interface.')
acGigabitStatusLossofSync = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitStatusLossofSync.setStatus('current')
if mibBuilder.loadTexts: acGigabitStatusLossofSync.setDescription('Alarm condition of type LossofSync at the physical Gigabit interface.')
acGigabitStatusLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitStatusLinkDown.setStatus('current')
if mibBuilder.loadTexts: acGigabitStatusLinkDown.setDescription('Alarm condition of type LinkDown at the physical Gigabit interface.')
acGigabitStatusCustom = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitStatusCustom.setStatus('current')
if mibBuilder.loadTexts: acGigabitStatusCustom.setDescription('Numerical status information of the physical Gigabit interface. The AcSonetStatusCustom is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The various bit positions are: 0x0001 STATUS_LOS 0x0002 STATUS_LossofSync 0x0004 STATUS_LinkDown')
acGigabitStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitStatusDescr.setStatus('current')
if mibBuilder.loadTexts: acGigabitStatusDescr.setDescription('Textual description of the status of the physical Gigabit interface.')
acGigabitAlarmsNumber = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitAlarmsNumber.setStatus('current')
if mibBuilder.loadTexts: acGigabitAlarmsNumber.setDescription('The number of physical Gigabit interfaces.')
acGigabitAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 2, 2), )
if mibBuilder.loadTexts: acGigabitAlarmsTable.setStatus('current')
if mibBuilder.loadTexts: acGigabitAlarmsTable.setDescription('A list of Gigabit interface alarm informations. The number of entries is given by the value of acGigabitAlarmsNumber.')
acGigabitAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 2, 2, 1), ).setIndexNames((0, "ATMEDIA-MIB", "acGigabitAlarmsIndex"))
if mibBuilder.loadTexts: acGigabitAlarmsEntry.setStatus('current')
if mibBuilder.loadTexts: acGigabitAlarmsEntry.setDescription('An entry containing alarm informations applicable to a particular physical Gigabit interface.')
acGigabitAlarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitAlarmsIndex.setStatus('current')
if mibBuilder.loadTexts: acGigabitAlarmsIndex.setDescription("A unique value, greater than zero, for each physical interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acGigabitAlarmsLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitAlarmsLOS.setStatus('current')
if mibBuilder.loadTexts: acGigabitAlarmsLOS.setDescription('Number of alarm conditions of type LOS at the physical interface.')
acGigabitAlarmsLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitAlarmsLinkDown.setStatus('current')
if mibBuilder.loadTexts: acGigabitAlarmsLinkDown.setDescription('Number of alarm conditions of type LinkDown at the physical interface.')
acGigabitErrCounterNumber = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitErrCounterNumber.setStatus('current')
if mibBuilder.loadTexts: acGigabitErrCounterNumber.setDescription('The number of physical Gigabit interfaces.')
acGigabitErrCounterTable = MibTable((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 3, 2), )
if mibBuilder.loadTexts: acGigabitErrCounterTable.setStatus('current')
if mibBuilder.loadTexts: acGigabitErrCounterTable.setDescription('A list of Gigabit interface alarm informations. The number of entries is given by the value of acGigabitErrCounterNumber.')
acGigabitErrCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 3, 2, 1), ).setIndexNames((0, "ATMEDIA-MIB", "acGigabitErrCounterIndex"))
if mibBuilder.loadTexts: acGigabitErrCounterEntry.setStatus('current')
if mibBuilder.loadTexts: acGigabitErrCounterEntry.setDescription('An entry containing alarm informations applicable to a particular physical Gigabit interface.')
acGigabitErrCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitErrCounterIndex.setStatus('current')
if mibBuilder.loadTexts: acGigabitErrCounterIndex.setDescription("A unique value, greater than zero, for each physical interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acGigabitErrCounterTotalFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 3, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitErrCounterTotalFrame.setStatus('current')
if mibBuilder.loadTexts: acGigabitErrCounterTotalFrame.setDescription('Number of total frames at the physical interface.')
acGigabitErrCounterErroredFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitErrCounterErroredFrame.setStatus('current')
if mibBuilder.loadTexts: acGigabitErrCounterErroredFrame.setDescription('Number of errored frames at the physical interface.')
acGigabitErrCounterFalseCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitErrCounterFalseCarrier.setStatus('current')
if mibBuilder.loadTexts: acGigabitErrCounterFalseCarrier.setDescription('Number of error conditions of type FalseCarrier at the physical interface.')
acGigabitErrCounterLossofSync = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 3, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitErrCounterLossofSync.setStatus('current')
if mibBuilder.loadTexts: acGigabitErrCounterLossofSync.setDescription('Number of error conditions of type LossofSync at the physical interface.')
acGigabitErrCounterLineError = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 3, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitErrCounterLineError.setStatus('current')
if mibBuilder.loadTexts: acGigabitErrCounterLineError.setDescription('Number of error conditions of type LineError at the physical interface.')
acGigabitEtsCounterNumber = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitEtsCounterNumber.setStatus('current')
if mibBuilder.loadTexts: acGigabitEtsCounterNumber.setDescription('The number of physical Gigabit interfaces.')
acGigabitEtsCounterTable = MibTable((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 4, 2), )
if mibBuilder.loadTexts: acGigabitEtsCounterTable.setStatus('current')
if mibBuilder.loadTexts: acGigabitEtsCounterTable.setDescription('A list of Gigabit interface alarm informations. The number of entries is given by the value of acGigabitEtsCounterNumber.')
acGigabitEtsCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 4, 2, 1), ).setIndexNames((0, "ATMEDIA-MIB", "acGigabitEtsCounterIndex"))
if mibBuilder.loadTexts: acGigabitEtsCounterEntry.setStatus('current')
if mibBuilder.loadTexts: acGigabitEtsCounterEntry.setDescription('An entry containing alarm informations applicable to a particular physical Gigabit interface.')
acGigabitEtsCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitEtsCounterIndex.setStatus('current')
if mibBuilder.loadTexts: acGigabitEtsCounterIndex.setDescription("A unique value, greater than zero, for each physical interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acGigabitEtsCounterTotalFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 4, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitEtsCounterTotalFrame.setStatus('current')
if mibBuilder.loadTexts: acGigabitEtsCounterTotalFrame.setDescription('not defined.')
acGigabitEtsCounterErroredFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 4, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitEtsCounterErroredFrame.setStatus('current')
if mibBuilder.loadTexts: acGigabitEtsCounterErroredFrame.setDescription('Number of errored frames at the physical interface.')
acGigabitEtsCounterFalseCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 4, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitEtsCounterFalseCarrier.setStatus('current')
if mibBuilder.loadTexts: acGigabitEtsCounterFalseCarrier.setDescription('Number of error conditions of type FalseCarrier at the physical interface.')
acGigabitEtsCounterLossofSync = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 4, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitEtsCounterLossofSync.setStatus('current')
if mibBuilder.loadTexts: acGigabitEtsCounterLossofSync.setDescription('Number of error conditions of type LossofSync at the physical interface.')
acGigabitEtsCounterLineError = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 4, 4, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGigabitEtsCounterLineError.setStatus('current')
if mibBuilder.loadTexts: acGigabitEtsCounterLineError.setDescription('Number of error conditions of type LineError at the physical interface.')
acFibrechannelStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelStatusNumber.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelStatusNumber.setDescription('The number of physical Fibrechannel interfaces.')
acFibrechannelStatusTable = MibTable((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 1, 2), )
if mibBuilder.loadTexts: acFibrechannelStatusTable.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelStatusTable.setDescription('A list of physical Fibrechannel interface status informations. The number of entries is given by the value of acsFibrechannelStatusNumber.')
acFibrechannelStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 1, 2, 1), ).setIndexNames((0, "ATMEDIA-MIB", "acFibrechannelStatusIndex"))
if mibBuilder.loadTexts: acFibrechannelStatusEntry.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelStatusEntry.setDescription('An entry containing status information applicable to a particular Fibrechannel physical interface.')
acFibrechannelStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelStatusIndex.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelStatusIndex.setDescription("A unique value, greater than zero, for each physical interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acFibrechannelStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelStatusState.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelStatusState.setDescription('Status of the physical Fibrechannel interface.')
acFibrechannelStatusLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelStatusLOS.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelStatusLOS.setDescription('Alarm condition of type LOS at the physical Fibrechannel interface.')
acFibrechannelStatusLossofSync = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelStatusLossofSync.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelStatusLossofSync.setDescription('Alarm condition of type LossofSync at the physical Fibrechannel interface.')
acFibrechannelStatusLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelStatusLinkDown.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelStatusLinkDown.setDescription('Alarm condition of type LinkDown at the physical Fibrechannel interface.')
acFibrechannelStatusCustom = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelStatusCustom.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelStatusCustom.setDescription('Numerical status information of the physical Fibrechannel interface. The AcSonetStatusCustom is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The various bit positions are: 0x0001 STATUS_LOS 0x0002 STATUS_LossofSync 0x0004 STATUS_LinkDown')
acFibrechannelStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelStatusDescr.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelStatusDescr.setDescription('Textual description of the status of the physical Fibrechannel interface.')
acFibrechannelAlarmsNumber = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelAlarmsNumber.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelAlarmsNumber.setDescription('The number of physical Fibrechannel interfaces.')
acFibrechannelAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 2, 2), )
if mibBuilder.loadTexts: acFibrechannelAlarmsTable.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelAlarmsTable.setDescription('A list of Fibrechannel interface alarm informations. The number of entries is given by the value of acFibrechannelAlarmsNumber.')
acFibrechannelAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 2, 2, 1), ).setIndexNames((0, "ATMEDIA-MIB", "acFibrechannelAlarmsIndex"))
if mibBuilder.loadTexts: acFibrechannelAlarmsEntry.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelAlarmsEntry.setDescription('An entry containing alarm informations applicable to a particular physical Fibrechannel interface.')
acFibrechannelAlarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelAlarmsIndex.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelAlarmsIndex.setDescription("A unique value, greater than zero, for each physical interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acFibrechannelAlarmsLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelAlarmsLOS.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelAlarmsLOS.setDescription('Number of alarm conditions of type LOS at the physical interface.')
acFibrechannelAlarmsLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelAlarmsLinkDown.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelAlarmsLinkDown.setDescription('Number of alarm conditions of type LinkDown at the physical interface.')
acFibrechannelErrCounterNumber = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelErrCounterNumber.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelErrCounterNumber.setDescription('The number of physical Fibrechannel interfaces.')
acFibrechannelErrCounterTable = MibTable((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 3, 2), )
if mibBuilder.loadTexts: acFibrechannelErrCounterTable.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelErrCounterTable.setDescription('A list of Fibrechannel interface alarm informations. The number of entries is given by the value of acFibrechannelErrCounterNumber.')
acFibrechannelErrCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 3, 2, 1), ).setIndexNames((0, "ATMEDIA-MIB", "acFibrechannelErrCounterIndex"))
if mibBuilder.loadTexts: acFibrechannelErrCounterEntry.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelErrCounterEntry.setDescription('An entry containing alarm informations applicable to a particular physical Fibrechannel interface.')
acFibrechannelErrCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelErrCounterIndex.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelErrCounterIndex.setDescription("A unique value, greater than zero, for each physical interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acFibrechannelErrCounterTotalFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 3, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelErrCounterTotalFrame.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelErrCounterTotalFrame.setDescription('Number of total frames at the physical interface.')
acFibrechannelErrCounterErroredFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelErrCounterErroredFrame.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelErrCounterErroredFrame.setDescription('Number of errored frames at the physical interface.')
acFibrechannelErrCounterDiscardFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelErrCounterDiscardFrame.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelErrCounterDiscardFrame.setDescription('Number of discarded frames at the physical interface.')
acFibrechannelErrCounterLossofSync = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 3, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelErrCounterLossofSync.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelErrCounterLossofSync.setDescription('Number of error conditions of type LossofSync at the physical interface.')
acFibrechannelErrCounterLineError = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 3, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelErrCounterLineError.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelErrCounterLineError.setDescription('Number of error conditions of type LineError at the physical interface.')
acFibrechannelErrCounterFCSError = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 3, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelErrCounterFCSError.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelErrCounterFCSError.setDescription('Number of error conditions of type FCSError at the physical interface.')
acFibrechannelErrCounterCheckError = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 3, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelErrCounterCheckError.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelErrCounterCheckError.setDescription('Number of error conditions of type CheckError at the physical interface.')
acFibrechannelEtsCounterNumber = MibScalar((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelEtsCounterNumber.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelEtsCounterNumber.setDescription('The number of physical Fibrechannel interfaces.')
acFibrechannelEtsCounterTable = MibTable((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 4, 2), )
if mibBuilder.loadTexts: acFibrechannelEtsCounterTable.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelEtsCounterTable.setDescription('A list of Fibrechannel interface alarm informations. The number of entries is given by the value of acFibrechannelEtsCounterNumber.')
acFibrechannelEtsCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 4, 2, 1), ).setIndexNames((0, "ATMEDIA-MIB", "acFibrechannelEtsCounterIndex"))
if mibBuilder.loadTexts: acFibrechannelEtsCounterEntry.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelEtsCounterEntry.setDescription('An entry containing alarm informations applicable to a particular physical Fibrechannel interface.')
acFibrechannelEtsCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelEtsCounterIndex.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelEtsCounterIndex.setDescription("A unique value, greater than zero, for each physical interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acFibrechannelEtsCounterTotalFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 4, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelEtsCounterTotalFrame.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelEtsCounterTotalFrame.setDescription('not defined.')
acFibrechannelEtsCounterErroredFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 4, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelEtsCounterErroredFrame.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelEtsCounterErroredFrame.setDescription('Number of errored frames at the physical interface.')
acFibrechannelEtsCounterDiscardFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 4, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelEtsCounterDiscardFrame.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelEtsCounterDiscardFrame.setDescription('Number of discarded frames at the physical interface.')
acFibrechannelEtsCounterLossofSync = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 4, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelEtsCounterLossofSync.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelEtsCounterLossofSync.setDescription('Number of error conditions of type LossofSync at the physical interface.')
acFibrechannelEtsCounterLineError = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 4, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelEtsCounterLineError.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelEtsCounterLineError.setDescription('Number of error conditions of type LineError at the physical interface.')
acFibrechannelEtsCounterFCSError = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 4, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelEtsCounterFCSError.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelEtsCounterFCSError.setDescription('Number of error conditions of type FCSError at the physical interface.')
acFibrechannelEtsCounterCheckError = MibTableColumn((1, 3, 6, 1, 4, 1, 13458, 1, 6, 5, 4, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFibrechannelEtsCounterCheckError.setStatus('current')
if mibBuilder.loadTexts: acFibrechannelEtsCounterCheckError.setDescription('Number of error conditions of type CheckError at the physical interface.')
mibBuilder.exportSymbols("ATMEDIA-MIB", acEncryptorStatusEntry=acEncryptorStatusEntry, acInterfaceStatusTable=acInterfaceStatusTable, acEncryptorStatusTable=acEncryptorStatusTable, acFibrechannelEtsCounterEntry=acFibrechannelEtsCounterEntry, acSonetStatusIndex=acSonetStatusIndex, acFibrechannelEtsCounterIndex=acFibrechannelEtsCounterIndex, acInterfaceStatusState=acInterfaceStatusState, acE3EtsCounterIndex=acE3EtsCounterIndex, acSonetErrCounterPathFEBE=acSonetErrCounterPathFEBE, acFibrechannelErrCounterErroredFrame=acFibrechannelErrCounterErroredFrame, acSonetEtsCounter=acSonetEtsCounter, acFibrechannelErrCounterNumber=acFibrechannelErrCounterNumber, acSonetAlarmsLineAIS=acSonetAlarmsLineAIS, acMaFanSpeed2=acMaFanSpeed2, acE3AlarmsIndex=acE3AlarmsIndex, acContact=acContact, acE3AlarmsLOS=acE3AlarmsLOS, acSonetEtsCounterLOC=acSonetEtsCounterLOC, acFibrechannelStatusLinkDown=acFibrechannelStatusLinkDown, acSonetStatusPathAIS=acSonetStatusPathAIS, acSonetStatusOOF=acSonetStatusOOF, acSonetEtsCounterEntry=acSonetEtsCounterEntry, acIfNumber=acIfNumber, acE3EtsCounterLOC=acE3EtsCounterLOC, acGigabitErrCounterEntry=acGigabitErrCounterEntry, acFibrechannelAlarmsTable=acFibrechannelAlarmsTable, acEncryptorStatusIndex=acEncryptorStatusIndex, acE3EtsCounterBIP=acE3EtsCounterBIP, acE3ErrCounterBIP=acE3ErrCounterBIP, acEcDescr=acEcDescr, acGigabitStatusLossofSync=acGigabitStatusLossofSync, acE3StatusDescr=acE3StatusDescr, acFibrechannelStatusDescr=acFibrechannelStatusDescr, acSonetStatusLineAIS=acSonetStatusLineAIS, acSonetEtsCounterPathFEBE=acSonetEtsCounterPathFEBE, acE3StatusIndex=acE3StatusIndex, acSonetEtsCounterTable=acSonetEtsCounterTable, acGigabitEtsCounterFalseCarrier=acGigabitEtsCounterFalseCarrier, acEcRevision=acEcRevision, atmcrypt=atmcrypt, acGigabitEtsCounterTotalFrame=acGigabitEtsCounterTotalFrame, acEcEntry=acEcEntry, acSonetErrCounterB1BIP=acSonetErrCounterB1BIP, acFibrechannelEtsCounterFCSError=acFibrechannelEtsCounterFCSError, acSonetEtsCounterB2BIP=acSonetEtsCounterB2BIP, acProductID=acProductID, acE3EtsCounter=acE3EtsCounter, acE3StatusMAFERF=acE3StatusMAFERF, acE3EtsCounterNumber=acE3EtsCounterNumber, acGigabitEtsCounterIndex=acGigabitEtsCounterIndex, acSonetErrCounterB2BIP=acSonetErrCounterB2BIP, acSonetAlarmsLOS=acSonetAlarmsLOS, acEncryptorStatusNumber=acEncryptorStatusNumber, acGigabitAlarmsIndex=acGigabitAlarmsIndex, acFibrechannelErrCounterEntry=acFibrechannelErrCounterEntry, acSonetErrCounterLOC=acSonetErrCounterLOC, acInterfaceStatusNumber=acInterfaceStatusNumber, acInterfaceStatusDescr=acInterfaceStatusDescr, acSonetStatusNumber=acSonetStatusNumber, acSonetErrCounterTable=acSonetErrCounterTable, acMachine=acMachine, acHardDescr=acHardDescr, acGigabitEtsCounterEntry=acGigabitEtsCounterEntry, acFibrechannelErrCounterTable=acFibrechannelErrCounterTable, acSonetErrCounterHEC=acSonetErrCounterHEC, acIfPhyType=acIfPhyType, acMaintenance=acMaintenance, acDescr=acDescr, acGigabitErrCounterNumber=acGigabitErrCounterNumber, acGigabitEtsCounterLineError=acGigabitEtsCounterLineError, acFibrechannelEtsCounterCheckError=acFibrechannelEtsCounterCheckError, acSonetStatusTable=acSonetStatusTable, acMaCpuTemperature2=acMaCpuTemperature2, acSonetAlarmsPathAIS=acSonetAlarmsPathAIS, acGigabitErrCounter=acGigabitErrCounter, acSonetAlarmsIndex=acSonetAlarmsIndex, acE3StatusNumber=acE3StatusNumber, acEncryptors=acEncryptors, acGigabitEtsCounterErroredFrame=acGigabitEtsCounterErroredFrame, acSonetStatusState=acSonetStatusState, acMaFanSpeed4=acMaFanSpeed4, acE3ErrCounterTable=acE3ErrCounterTable, acGigabitStatus=acGigabitStatus, acGigabitEtsCounterNumber=acGigabitEtsCounterNumber, acFibrechannel=acFibrechannel, acFibrechannelErrCounterTotalFrame=acFibrechannelErrCounterTotalFrame, acSonetEtsCounterIndex=acSonetEtsCounterIndex, acIfDescr=acIfDescr, acFibrechannelEtsCounter=acFibrechannelEtsCounter, acSonetEtsCounterB1BIP=acSonetEtsCounterB1BIP, acE3StatusAIS=acE3StatusAIS, acStatus=acStatus, acSonetEtsCounterOOF=acSonetEtsCounterOOF, acE1Alarms=acE1Alarms, acGigabitErrCounterLossofSync=acGigabitErrCounterLossofSync, acSonetStatusCustom=acSonetStatusCustom, acE3StatusLOS=acE3StatusLOS, acInterfaceStatusTxBytes=acInterfaceStatusTxBytes, acEncryptorStatusDescr=acEncryptorStatusDescr, acHardVersion=acHardVersion, acFibrechannelEtsCounterDiscardFrame=acFibrechannelEtsCounterDiscardFrame, acInterfaceStatusIndex=acInterfaceStatusIndex, acE1=acE1, acIfSpeed=acIfSpeed, acE3StatusEntry=acE3StatusEntry, acE3EtsCounterEntry=acE3EtsCounterEntry, acFibrechannelStatusCustom=acFibrechannelStatusCustom, acE1Status=acE1Status, acFibrechannelEtsCounterErroredFrame=acFibrechannelEtsCounterErroredFrame, acSonetErrCounterOOF=acSonetErrCounterOOF, acMaLastBoot=acMaLastBoot, atmedia=atmedia, acGigabitStatusLOS=acGigabitStatusLOS, acInterfaceStatusTxRate=acInterfaceStatusTxRate, acGigabitErrCounterTable=acGigabitErrCounterTable, acSonetStatusLineRDI=acSonetStatusLineRDI, acSonetEtsCounterLineFEBE=acSonetEtsCounterLineFEBE, acSonetAlarmsNumber=acSonetAlarmsNumber, acSoftware=acSoftware, acInterfaceStatusRxRate=acInterfaceStatusRxRate, acE3StatusCustom=acE3StatusCustom, acInterfaceStatusTxCells=acInterfaceStatusTxCells, acInterfaceStatusRxCells=acInterfaceStatusRxCells, acSonetAlarms=acSonetAlarms, acE1EtsCounter=acE1EtsCounter, acSonetErrCounterNumber=acSonetErrCounterNumber, acFibrechannelStatus=acFibrechannelStatus, acSonetStatusDescr=acSonetStatusDescr, acSonetAlarmsLineRDI=acSonetAlarmsLineRDI, acFibrechannelErrCounterLineError=acFibrechannelErrCounterLineError, acSonetEtsCounterNumber=acSonetEtsCounterNumber, acGigabitStatusIndex=acGigabitStatusIndex, acFibrechannelEtsCounterNumber=acFibrechannelEtsCounterNumber, acGigabitErrCounterErroredFrame=acGigabitErrCounterErroredFrame, acIfIndex=acIfIndex, acE3ErrCounter=acE3ErrCounter, acSonetErrCounterEntry=acSonetErrCounterEntry, acMaPowerState=acMaPowerState, acFibrechannelStatusTable=acFibrechannelStatusTable, acGigabitAlarmsNumber=acGigabitAlarmsNumber, acE3ErrCounterHEC=acE3ErrCounterHEC, acIfEntry=acIfEntry, acHostname=acHostname, acGigabitAlarmsLinkDown=acGigabitAlarmsLinkDown, acMaSystime=acMaSystime, acE3ErrCounterMAFEBE=acE3ErrCounterMAFEBE, acTransmission=acTransmission, acGigabitErrCounterIndex=acGigabitErrCounterIndex, acEncryptorStatus=acEncryptorStatus, acHardware=acHardware, acGigabit=acGigabit, acEcIndex=acEcIndex, acSonetStatusLOS=acSonetStatusLOS, acLocation=acLocation, acGigabitStatusEntry=acGigabitStatusEntry, acFibrechannelStatusLOS=acFibrechannelStatusLOS, acE3ErrCounterIndex=acE3ErrCounterIndex, acInterfaceStatusRxBytes=acInterfaceStatusRxBytes, acMaTemperature=acMaTemperature, acSonetAlarmsPathYellow=acSonetAlarmsPathYellow, acSonetEtsCounterHEC=acSonetEtsCounterHEC, acGigabitAlarmsLOS=acGigabitAlarmsLOS, acSonetStatus=acSonetStatus, acGigabitStatusDescr=acGigabitStatusDescr, acGigabitEtsCounterLossofSync=acGigabitEtsCounterLossofSync, acIfTable=acIfTable, acGigabitAlarmsEntry=acGigabitAlarmsEntry, acFibrechannelErrCounterDiscardFrame=acFibrechannelErrCounterDiscardFrame, acFibrechannelErrCounterFCSError=acFibrechannelErrCounterFCSError, acGigabitErrCounterFalseCarrier=acGigabitErrCounterFalseCarrier, acFibrechannelStatusNumber=acFibrechannelStatusNumber, acE3EtsCounterOOF=acE3EtsCounterOOF, acInterfaceStatusLastChange=acInterfaceStatusLastChange, acSonetEtsCounterB3BIP=acSonetEtsCounterB3BIP, acE3ErrCounterOOF=acE3ErrCounterOOF, acGigabitStatusCustom=acGigabitStatusCustom, acMaUptime=acMaUptime, acFibrechannelErrCounterCheckError=acFibrechannelErrCounterCheckError, acMaPowerLastChange=acMaPowerLastChange, acFibrechannelErrCounter=acFibrechannelErrCounter, acE3ErrCounterLCV=acE3ErrCounterLCV, acE3AlarmsAIS=acE3AlarmsAIS, acSonetStatusEntry=acSonetStatusEntry, acE3EtsCounterHEC=acE3EtsCounterHEC, acFibrechannelAlarmsNumber=acFibrechannelAlarmsNumber, acE3=acE3, acGigabitErrCounterTotalFrame=acGigabitErrCounterTotalFrame, acE3AlarmsMAFERF=acE3AlarmsMAFERF, acGigabitAlarmsTable=acGigabitAlarmsTable, acE3AlarmsNumber=acE3AlarmsNumber, acFibrechannelStatusIndex=acFibrechannelStatusIndex, acE3EtsCounterTable=acE3EtsCounterTable, acSonetAlarmsTable=acSonetAlarmsTable, acSonetErrCounterIndex=acSonetErrCounterIndex, acE3StatusState=acE3StatusState, acE3AlarmsEntry=acE3AlarmsEntry, acFibrechannelEtsCounterTable=acFibrechannelEtsCounterTable, acFibrechannelEtsCounterTotalFrame=acFibrechannelEtsCounterTotalFrame, acFibrechannelEtsCounterLineError=acFibrechannelEtsCounterLineError, acInterfaceStatusEntry=acInterfaceStatusEntry, acSonetErrCounterLineFEBE=acSonetErrCounterLineFEBE, acE1ErrCounter=acE1ErrCounter, acSonetErrCounterB3BIP=acSonetErrCounterB3BIP, acFibrechannelStatusLossofSync=acFibrechannelStatusLossofSync, acGigabitAlarms=acGigabitAlarms, acFibrechannelStatusState=acFibrechannelStatusState, acFibrechannelAlarmsEntry=acFibrechannelAlarmsEntry, acFibrechannelAlarmsIndex=acFibrechannelAlarmsIndex, acSoftDescr=acSoftDescr, acMaCpuTemperature1=acMaCpuTemperature1, acE3ErrCounterNumber=acE3ErrCounterNumber, acGigabitErrCounterLineError=acGigabitErrCounterLineError, acFibrechannelAlarmsLinkDown=acFibrechannelAlarmsLinkDown, acSonetStatusLOC=acSonetStatusLOC, acEcNumber=acEcNumber, acE3StatusLOC=acE3StatusLOC, acGigabitEtsCounter=acGigabitEtsCounter, acEncryptorStatusState=acEncryptorStatusState, acFibrechannelStatusEntry=acFibrechannelStatusEntry, acSonetAlarmsEntry=acSonetAlarmsEntry, acFibrechannelErrCounterLossofSync=acFibrechannelErrCounterLossofSync, acE3StatusOOF=acE3StatusOOF, acFibrechannelEtsCounterLossofSync=acFibrechannelEtsCounterLossofSync, acSonet=acSonet, acE3StatusTable=acE3StatusTable, acInterfaceStatus=acInterfaceStatus, acIfRevision=acIfRevision, acGigabitStatusState=acGigabitStatusState, acFibrechannelAlarms=acFibrechannelAlarms, DisplayString=DisplayString, acMaFanSpeed1=acMaFanSpeed1, acE3ErrCounterLOC=acE3ErrCounterLOC, acSonetStatusPathYellow=acSonetStatusPathYellow, acInterfaces=acInterfaces, acE3Alarms=acE3Alarms, acE3Status=acE3Status, acEcTable=acEcTable, acEncryptorStatusLastChange=acEncryptorStatusLastChange, acE3ErrCounterEntry=acE3ErrCounterEntry, acSoftVersion=acSoftVersion, acGigabitStatusNumber=acGigabitStatusNumber, acSonetErrCounter=acSonetErrCounter, acE3AlarmsTable=acE3AlarmsTable, acGigabitStatusLinkDown=acGigabitStatusLinkDown, acFibrechannelErrCounterIndex=acFibrechannelErrCounterIndex, acSerialNumber=acSerialNumber, acFibrechannelAlarmsLOS=acFibrechannelAlarmsLOS, acMaFanSpeed3=acMaFanSpeed3, acE3EtsCounterLCV=acE3EtsCounterLCV, acGigabitEtsCounterTable=acGigabitEtsCounterTable, acGigabitStatusTable=acGigabitStatusTable, acE3EtsCounterMAFEBE=acE3EtsCounterMAFEBE)
