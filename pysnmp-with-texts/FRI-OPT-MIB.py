#
# PySNMP MIB module FRI-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FRI-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:16:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, Integer32, Unsigned32, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, ObjectIdentity, TimeTicks, NotificationType, Counter64, Gauge32, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Integer32", "Unsigned32", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "ObjectIdentity", "TimeTicks", "NotificationType", "Counter64", "Gauge32", "ModuleIdentity", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500PSTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class DisplayString(OctetString):
    pass

cdx6500PPCTFRIPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31), )
if mibBuilder.loadTexts: cdx6500PPCTFRIPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTFRIPortTable.setDescription('This table contains Frame Relay DTE Port configuration parameters.')
cdx6500PPCTFRIPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1), ).setIndexNames((0, "FRI-OPT-MIB", "friPCfgPortNumber"))
if mibBuilder.loadTexts: cdx6500PPCTFRIPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTFRIPortEntry.setDescription('Entries in the FRI Port Configuration Table.')
friPCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPCfgPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgPortNumber.setDescription('Port number of this port.')
friPCfgPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(18))).clone(namedValues=NamedValues(("fri", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPCfgPortType.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgPortType.setDescription('Port type of the Port.')
friPCfgConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 21, 100))).clone(namedValues=NamedValues(("simp", 1), ("dtr", 2), ("simpb", 21), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgConnectionType.setDescription('The Specified control signal handshake and clocking required for a connection to be made to this port : simp - simple, no control signals required. dtr - dedicated, require the data terminal ready signal (DTR). simpb - simple, no control signals required for data transmission and reception. By default output leads will be low. nc - Skipped during configuration.')
friPCfgClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 100))).clone(namedValues=NamedValues(("int", 1), ("ext", 2), ("extint", 3), ("extlp", 4), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgClockSource.setDescription('int - Internal clock source ext - External clock source. extint - Internal receive and external transmit clock source (DCE only). extlp - external receive and loopback transmit clock source (DTE only). EXTLP must be configured in conjunction with EXTINT. nc - Skipped during configuration.')
friPCfgClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgClockSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgClockSpeed.setDescription('This is the speed of the port in bits per second, when using internal clocking. The highest available speed is dependent on the card type, and on the interface type.')
friPCfgHighestStnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPCfgHighestStnNumber.setStatus('deprecated')
if mibBuilder.loadTexts: friPCfgHighestStnNumber.setDescription('This is the highest station number that can be configured on the FRI port. It is used to limit the configuration of stations.')
friPCfgFrameSeqCounting = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("normal", 1), ("extended", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPCfgFrameSeqCounting.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgFrameSeqCounting.setDescription('Port uses normal or extended frame sequence numbering: normal - normal sequencing (modulo 8) extended - extended sequencing (modulo 128). nc - Skipped during configuration. All stations on this port will be set to this value.')
friPCfgPktSeqCounting = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("normal", 1), ("extended", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgPktSeqCounting.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgPktSeqCounting.setDescription('Port uses normal or extended packet level sequence numbers normal - normal sequencing (modulo 8) extended - extended sequencing (modulo 128) nc - Skipped during configuration. This parameter must be set to the same value at both this FRI port and the remote FRI port. All stations on this port will be set to this value.')
friPCfgCntrlProtocolSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 100))).clone(namedValues=NamedValues(("annexD", 1), ("none", 2), ("lmi", 3), ("annexA", 4), ("auto", 5), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgCntrlProtocolSupport.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgCntrlProtocolSupport.setDescription('Whether ANSI T1.617 Annex D, CCITT Q.933 Annex A or LMI Support is enabled. annexD - Annex D is enabled. none - None is enabled. lmi - LMI is enabled. annexA - Annex A is enabled. auto - Auto-learn the Network control protocol type nc - Skipped during configuration.')
friPCfgHighPriorityStn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgHighPriorityStn.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgHighPriorityStn.setDescription("This parameter specifies a station who's PVC status has priority over all other stations when FRI same port back up is enabled. When the network reports this DLCI inactive, an alternate connection over a backup link is attempted.")
friPCfgMaxVoiceBWBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgMaxVoiceBWBitsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgMaxVoiceBWBitsPerSec.setDescription('This parameter limits the bandwidth, in bits per sec (including overhead), for voice traffic passing through this frame relay port. A zero value disables any voice passing through this port.')
friPCfgSegSizeVoicePresent = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(33, 65, 129, 257, 513, 1025, 100))).clone(namedValues=NamedValues(("segSize32", 33), ("segSize64", 65), ("segSize128", 129), ("segSize256", 257), ("segSize512", 513), ("segSize1024", 1025), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgSegSizeVoicePresent.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgSegSizeVoicePresent.setDescription('Data packets to be segmented into this maximum frame size when voice is active on this port. segSize32 - 32 byte segments segSize64 - 64 byte segments segSize128 - 128 byte segments segSize256 - 256 byte segments segSize512 - 512 byte segments segSize1024 - 1024 byte segments nc - Skipped during configuration.')
friPCfgSegSizeVoiceNotPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(33, 65, 129, 257, 513, 1025, 2049, 4097, 32000, 100))).clone(namedValues=NamedValues(("segSize32", 33), ("segSize64", 65), ("segSize128", 129), ("segSize256", 257), ("segSize512", 513), ("segSize1024", 1025), ("segSize2048", 2049), ("segSize4096", 4097), ("disable", 32000), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgSegSizeVoiceNotPresent.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgSegSizeVoiceNotPresent.setDescription('Data packets to be segmented into this maximum frame size when voice is not active on this port. segSize32 - 32 byte segments segSize64 - 64 byte segments segSize128 - 128 byte segments segSize256 - 256 byte segments segSize512 - 512 byte segments segSize1024 - 1024 byte segments segSize2048 - 2048 byte segments segSize4096 - 4096 byte segments disable - segment size is 32768 bytes nc - Skipped during configuration.')
friPCfgT391Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgT391Timer.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgT391Timer.setDescription('This parameter is the Link Integrity Verification Timer polling period. The FRI port sends status enquiry messages to network every T391/nT1 seconds.')
friPCfgT392Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgT392Timer.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgT392Timer.setDescription('This parameter is the polling Cycle Verification Timer period. The FRI port expects status enquiry messages every T392/nT2 seconds. This parameter must be set to a value greater than N391/nT1, and applies only in bi-directional mode.')
friPCfgN391PollCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgN391PollCycle.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgN391PollCycle.setDescription('Full Status polling cycle. FRI port sends Full status enquiry messages to network every nN1 polls.')
friPCfgN392ErrsDuringMonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgN392ErrsDuringMonitoredEvents.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgN392ErrsDuringMonitoredEvents.setDescription('Error inactivity threshold. Number of errors during NN3 events that cause the station to be declared inactive. Should be less than or equal to nN3.')
friPCfgN393MonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgN393MonitoredEvents.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgN393MonitoredEvents.setDescription('Monitored events count for measuring nN3. nN2 errors during nN3 events will cause the station to be declared inactive. Should be greater than nN3.')
friPCfgNT1PollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPCfgNT1PollTimer.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgNT1PollTimer.setDescription('This parameter is the Link Integrity Verification Timer polling period. The FRI port sends status enquiry messages to network every T391/nT1 seconds.')
friPCfgNT2VerificationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPCfgNT2VerificationTimer.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgNT2VerificationTimer.setDescription('This parameter is the polling Cycle Verification Timer period. The FRI port expects status enquiry messages every T392/nT2 seconds. This parameter must be set to a value greater than N391/nT1, and applies only in bi-directional mode.')
friPCfgNN1StatusPollingCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPCfgNN1StatusPollingCycle.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgNN1StatusPollingCycle.setDescription('Full Status polling cycle. FRI port sends Full status enquiry messages to network every nN1 polls.')
friPCfgNN2ErrsDuringMonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPCfgNN2ErrsDuringMonitoredEvents.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgNN2ErrsDuringMonitoredEvents.setDescription('Error inactivity threshold. Number of errors during NN3 events that cause the station to be declared inactive. Should be less than or equal to nN3.')
friPCfgNN3MonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPCfgNN3MonitoredEvents.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgNN3MonitoredEvents.setDescription('Monitored events count for measuring nN3. nN2 errors during nN3 events will cause the station to be declared inactive. Should be greater than nN3.')
friPCfgInvertTXClock = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgInvertTXClock.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgInvertTXClock.setDescription("This parameter specifies whether the phase of the transmit clock should be inverted. Note: This parameter is primarily for X.21 electrical interfaces. no - Don't invert. yes - Invert.")
friPCfgControlProtocolOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgControlProtocolOptions.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgControlProtocolOptions.setDescription('These options control the PVC management protocol none - No option selected async - The port will send/receive asynchronous A-bit if it is performing Network side protocol functionality nbit - The port will send and accept N-bit messages dbit - The port will send and accept D-bit messages This forces ASYNC to be specified (dbit+async) dte-only - This forces a DTE Interface Type to remain as DTE, suppressing changes to BI-DIR using Annex A or D')
friPCfgDiscardControlOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("debit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgDiscardControlOptions.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgDiscardControlOptions.setDescription('This parameter controls the discard frame options none - No option selected debit - DE marked frames are discarded before non-DE frames')
friPCfgStartSvcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgStartSvcDlci.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgStartSvcDlci.setDescription('The configured number is the lowest value DLCI the FRI port will allow for use of FR SVCs. A value of 0 means SVC procedures are not operating on this port and the signalling channel will not be active.')
friPCfgSubscriberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgSubscriberNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgSubscriberNumber.setDescription('All stations on this port use this value for their calling address information element. The valid format of this entry is: xx...xx000101 or xx...xx000103 Where: xx...xx00 represents the address of the station in IA5/ASCII coded hex terminated with a NUL character suffix. For example, an address of 123 would be represented by the string 31323300. 0101 is the suffix used to specify E.164 Number Plan 0103 is the suffix used to specify X.121 Number Plan To send a call without the Subscriber Number IE, set the address string to NUL only.')
friPCfgMaxFmif = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(262, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgMaxFmif.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgMaxFmif.setDescription('This is the value used for link layer core parameters information element negotiation of maximum frame mode information field (FRIF) size in bytes. The value applies to both inbound and outbound frames. The value is specified in outgoing SETUP messages and is the maximum accepted value on incoming SETUP messages.')
friPCfgT200 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgT200.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgT200.setDescription('This is the value in tenths of seconds (1/10 s) of the maximum time the DTE will wait for an acknowledgment of a transmitted Information frame. The DTE will continue retransmissions at an interval of T200 until the tries count expires or proper acknowledgment is received from the attached equipment.')
friPCfgN200 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgN200.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgN200.setDescription('This is the maximum number of times the DTE will retransmit in order to recover from a T200 timeout condition. If this count expires, the DTE will declare the LAPF link to be down and initiate link establishment procedures.')
friPCfgWindowK = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgWindowK.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgWindowK.setDescription('This is the maximum sending window size which is the maximum number (k) of sequentially numbered I frames that may be outstanding (unacknowledged) at any given time. The recommended values are: Line speed (kbps) Window, k ----------------- -------------- less than 16 3 greater than 16 7')
friPCfgT203 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgT203.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgT203.setDescription('The idle timer (T203) represents the maximum time in seconds allowed without frames being exchanged. If the link remains idle for this period of time, the DTE will send a supervisory frame with the poll bit set. A value of zero disables this timer.')
friPCfgT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgT303.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgT303.setDescription('The Setup Timer (T303) represents the maximum time in seconds allowed without a response to a SETUP message being received. Upon expiry, the SETUP message is retransmitted and the timer is restarted. The second expiry of the timer will cause the call to be cleared.')
friPCfgT305 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgT305.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgT305.setDescription('The Disconnect Timer (T305) represents the maximum time in seconds allowed without a response to a DISCONNECT message being received. Upon expiry, a RELEASE message is sent.')
friPCfgT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgT308.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgT308.setDescription('The Release Timer (T308) represents the maximum time in seconds allowed without a response to a RELEASE message being received. Upon expiry, the RELEASE message is retransmitted and the timer is restarted. The second expiry of the timer will cause the call to be cleared.')
friPCfgT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgT310.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgT310.setDescription('The Call Proceeding Timer (T310) value is in seconds. This timer is started when a CALL PROCEEDING response to a SETUP message is received. The timer is stopped when a CONNECT or DISCONNECT or RELEASE message is received. If the timer expires, the call will be cleared.')
friPCfgControlProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgControlProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgControlProtocol.setDescription('This option controls whether the PVC management protocol acts like a DTE or a DCE DTE - This ports takes on the the DTE or User Side role DCE - This ports takes on the the DCE or Network Side role')
friPCfguniState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfguniState.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfguniState.setDescription('Enable FRF.12 UNI Segmentation. Peer must be enabled too. enable - Enable UNI Segmentation disable - Disable UNI Segmentation')
friPCfguniSSVP = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(65, 129, 257, 513, 1025))).clone(namedValues=NamedValues(("segSize64", 65), ("segSize128", 129), ("segSize256", 257), ("segSize512", 513), ("segSize1024", 1025)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPCfguniSSVP.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfguniSSVP.setDescription('UNI segment size when voice is present. Affects transmit path only. segSize64 - 64 byte segments segSize128 - 128 byte segments segSize256 - 256 byte segments segSize512 - 512 byte segments segSize1024 - 1024 byte segments')
friPCfguniSSVNP = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(65, 129, 257, 513, 1025, 2049, 4097, 32000))).clone(namedValues=NamedValues(("segSize64", 65), ("segSize128", 129), ("segSize256", 257), ("segSize512", 513), ("segSize1024", 1025), ("segSize2048", 2049), ("segSize4096", 4097), ("disable", 32000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfguniSSVNP.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfguniSSVNP.setDescription("UNI segment size when voice is not present. Affects transmit path only. segSize64 - 64 byte segments segSize128 - 128 byte segments segSize256 - 256 byte segments segSize512 - 512 byte segments segSize1024 - 1024 byte segments segSize2048 - 2048 byte segments segSize4096 - 4096 byte segments disable - this selection doesn't affect the packet size. UNI segmentation header will be inserted only.")
friPCfguniSegDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfguniSegDelay.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfguniSegDelay.setDescription('Discards a packet if any segment delays more than 10 seconds. Affects receive path only. enabled - discard the packet disabled - do not discard the packet')
friPCfguniCheckPckSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfguniCheckPckSize.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfguniCheckPckSize.setDescription('Check if the packet size is larger than the node maximum packet size. enabled - discard packet than is larger than the maximum size. disabled - accept packet than is larger than the maximum size.')
friPCfgElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgElectricalInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgElectricalInterfaceType.setDescription('Specify the Electrical Interface Type: V.24 - V.24 Electrical Interface Type V.35 - V.35 Electrical Interface Type V.36 - V.36 Electrical Interface Type X.21 - X.21 Electrical Interface Type NONE - Electrically disabled')
friPCfgV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgV24ElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgV24ElectricalInterfaceOption.setDescription('Specify the Pin 22 option: RI - V.24 uses Pin 22 for Ring Indicator output signal TM - V.24 uses Pin 22 for Test Mode input signal')
friPCfgHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 31, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friPCfgHighSpeedElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: friPCfgHighSpeedElectricalInterfaceOption.setDescription('Specify the cable type: NONE - V.35/V.36/X.21 DCE with straight through cable XOVER - V.35/V.36/X.21 DCE with crossover adapter cable')
cdx6500SPCTFRIStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9), )
if mibBuilder.loadTexts: cdx6500SPCTFRIStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCTFRIStationTable.setDescription('This table contains Frame Relay DTE Station configuration parameters.')
cdx6500SPCTFRIStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1), ).setIndexNames((0, "FRI-OPT-MIB", "friSCfgPortNumber"), (0, "FRI-OPT-MIB", "friSCfgStnNumber"))
if mibBuilder.loadTexts: cdx6500SPCTFRIStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCTFRIStationEntry.setDescription('Entries in the FRI Station Configuration Table.')
friSCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSCfgPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgPortNumber.setDescription('The FRI port number corresponding to this station.')
friSCfgStnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSCfgStnNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgStnNumber.setDescription('The number of the configured FRI Station.')
friSCfgStnType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("annexG", 1), ("bypass", 2), ("voiceRelay", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgStnType.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgStnType.setDescription("Identifies the type of station configured. annexG - This station uses X.25 signaling for layer 3. bypass - This station type bypasses layer 3. There is no signaling for SVC's on this station. voiceRelay - Not used in the current version.")
friSCfgDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgDLCI.setDescription("The Data Link Connection Identifier (DLCI) is the unique identifier for the station on the FRI Port. Its valid range is 0, 16 - 1007. A zero value in this field places the FRI station in DLCI auto-learn mode. In auto learn mode, the station is eligible for automatic assignment of an available network DLCI. A configured value of 16-1007 must match a DLCI on the FR networking node. NOTE: When a station record is configured for the first time, the DLCI prompt displays an auto-incrementing DLCI value. The DLCI's start from 16 for station 1, and increment by one for each station configured. If the station record is not saved to memory, a default DLCI value of zero is used.")
friSCfgCommInfoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgCommInfoRate.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgCommInfoRate.setDescription('This parameter (CIR) specifies the rate (in bits-per-second) that the Frame Relay network agrees to transfer information under congested conditions for the FRI Station. This value is used to throttle data on the FRI station for congestion control purposes. The CIR cannot be greater than the link speed.')
friSCfgCommBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 768000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgCommBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgCommBurstSize.setDescription('This parameter (BC) specifies the maximum amount of data (in bits) that the Frame Relay network agrees to transfer over a time interval T = Committed Burst Size / Committed Information Rate.This must be greater than 1/20th of the Committed Information Rate.This is used for congestion control purposes.')
friSCfgTransDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgTransDelay.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgTransDelay.setDescription('This parameter is the expected one-way delay through the network. This is specified in milliseconds.')
friSCfgCongControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 100))).clone(namedValues=NamedValues(("normal", 1), ("disable", 2), ("congested", 3), ("limit", 4), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgCongControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgCongControlMode.setDescription('This parameter controls the method of congestion control: normal - congestion control is normal disable - never enter Congested State (CTRL) congested - never enter a Non-Congested State (UCTRL) limit - congestion control is normal but limits the data rate to no lower than CIR. nc - Skipped during configuration')
friSCfgLinkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgLinkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgLinkAddress.setDescription('The logical link address must be set to complementary values in this FRI Station and its corresponding remote FRI station: dte - station to have logical DTE address (A) dce - station to have logical DCE address (B) nc - Skipped during configuration.')
friSCfgPVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgPVCChannels.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgPVCChannels.setDescription('Number of logical channels used for Permanent Virtual Circuits. The total number of PVC and SVC channels on a station (logical link) should be kept as small as possible and consistent with needs. PVC connections must be configured in the PVC Table.')
friSCfgStartingPVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgStartingPVC.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgStartingPVC.setDescription('This is the starting logical channel number for the Permanent Virtual Circuits on this FRI station. Not used if the number of PVCs = 0.')
friSCfgSVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgSVCChannels.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgSVCChannels.setDescription('Number of logical channels used in Switched Virtual Circuits. The total number of PVC and SVC channels on a station (logical link) should be kept as small as possible and consistent with needs.')
friSCfgStartingSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgStartingSVC.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgStartingSVC.setDescription('This is the starting logical channel number for the switched Virtual Circuits on this station (logical link). Not used if the number of SVCs = 0.')
friSCfgVoiceSVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgVoiceSVCChannels.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgVoiceSVCChannels.setDescription('Number of logical voice channels used in Switched Virtual Circuits.The total number of voice and data channels on a station (logical link) should be kept as small as possible and consistent with needs.')
friSCfgInitialFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 100))).clone(namedValues=NamedValues(("sabm", 1), ("disc", 2), ("none", 3), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgInitialFrame.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgInitialFrame.setDescription('Specify the initial frame required by other end for (logical) link startup: none - do nothing (other end initiates link-up) sabm - send SABM disc - send DISC, then SABM nc - Skipped during configuration')
friSCfgT1RetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgT1RetryTimer.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgT1RetryTimer.setDescription('T1 link retry timer value in tenths of a second (e.g. 30 = 3.0 seconds).')
friSCfgT4PollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgT4PollTimer.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgT4PollTimer.setDescription('This sets the time an idle link is probed for assurance of connection to the remote FRI station. 0 - disable the timer X - X is in tenths of a second (e.g. 40 = 4.0 seconds) and must be set greater than T1.')
friSCfgN2TransmissionTries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgN2TransmissionTries.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgN2TransmissionTries.setDescription('The maximum number of attempts allowed to complete a transmission.')
friSCfgKFrameWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgKFrameWindow.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgKFrameWindow.setDescription('Frame level window size must be set to the same value at both this FRI station and the remote FRI station.')
friSCfgWPacketWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgWPacketWindow.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgWPacketWindow.setDescription('Packet level window size must be set to the same value at both this FRI station and the remote FRI station.')
friSCfgPPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 9, 10, 11, 100))).clone(namedValues=NamedValues(("psize32", 6), ("psize64", 7), ("psize128", 8), ("psize256", 9), ("psize512", 10), ("psize1024", 11), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgPPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgPPacketSize.setDescription('This is the maximum X.25 packet size used on the station (logical link).For proper operation, this must be set to the same value at both this FRI station and the remote FRI station.')
friSCfgDataQUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgDataQUpperThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgDataQUpperThreshold.setDescription('This is the maximum number of data packets a channel on this station (logical link) will queue for transmission before invoking flow control to the attached channel')
friSCfgDataQLowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgDataQLowerThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgDataQLowerThreshold.setDescription('This is the number of data packets a channel on this FRI station will have queued for transmission when it releases flow control to the attached channel')
friSCfgRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgRestartTimer.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgRestartTimer.setDescription('Restart-Request timeout timer in seconds. If timer expires on this FRI station, the Restart request is sent again.')
friSCfgResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgResetTimer.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgResetTimer.setDescription('Reset-Request timeout timer in seconds. If timer expires on this FRI station, the Reset request is sent again.')
friSCfgCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgCallTimer.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgCallTimer.setDescription('Call-Request timeout timer in seconds. If timer expires on this FRI station, the call is cleared.')
friSCfgClearTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgClearTimer.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgClearTimer.setDescription('Clear-Request timeout timer in seconds. If timer expires on this FRI station, the Clear request is sent again.')
friSCfgX25Options = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgX25Options.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgX25Options.setDescription('Select X.25 options on this station (logical link) as follows: NONE - no option specified CUG - check closed user group; otherwise, CUG passes transparently CAUSE - pass cause, diagnostic, code in outbound packets HOLD - hold calls over link restart INL - inter-node link. Link goes to another vanguard device INL may be a poor choice for high speed links. INLB is set with INL to improve performance of high speed links. INLB - set with INL options to improve performance if inter-node link is a high speed link. DELAY - Enable Delay and Path Trace on this link Any combination of above specified by summing (e.g. CUG+ CAUSE+....). ')
friSCfgRestrictedConnDest = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgRestrictedConnDest.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgRestrictedConnDest.setDescription('All calls entering this station will be routed to the destination specified in this parameter,irrespective of route selection table entries. For example, to route all calls to X.25 port 3, use X25-3. To route calls to SDLC port 2, station 4, use SDLC-2S4. Blank in this field disables this function.')
friSCfgCUGMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgCUGMembership.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgCUGMembership.setDescription('The station may be a member of up to 8 different Closed User Groups (CUGs).Each CUG membership must be a two digit number (except --) and separated by a comma. ( e.g. 12,34,56,09,02, 03). -- - No CUG Membership 00-99 - CUG Membership')
friSCfgBillingRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgBillingRecords.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgBillingRecords.setDescription('This controls whether billing (accounting) records will be created for calls on this FRI station. off - Billing records will not be created. on - Billing records will be created. nc - Skipped during configuration.')
friSCfgFrameSegmenter = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgFrameSegmenter.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgFrameSegmenter.setDescription('Determine if this station will support the Frame Segmenter Header.The Frame Segmenter should be enabled if the frame relay port is configured to pass voice traffic. disabled - Frame Segmenter disabled. enabled - Frame Segmenter enabled. nc - Skipped during configuration.')
friSCfgVoiceCongCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgVoiceCongCtrlMode.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgVoiceCongCtrlMode.setDescription('This parameter controls the method of voice congestion control: enabled - Station is forced into congestion when voice calls are detected. disabled - Station operates normally Use this parameter in voice applications, when the frame relay network can have more than 140ms of data buffered. One typical application is asymmetrical speeds. When this parameter is enabled, and voice is detected, delta T is forced to 50 ms and the BC is forced to 1/20 CIR.')
friSCfgPeakUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgPeakUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgPeakUtilization.setDescription('The monitoring interval size specifies the time period to use when monitoring peak data link/CIR (Committed Information Rate) utilization. 0 - Disables this monitoring feature. 1 to 240 - The number of 64 second increments to use for the monitoring interval time period. For example: a value of 30 specifies a time duration equal to 30 * 64 seconds = 1920 seconds or 32 minutes.')
friSCfgMaxInboundQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgMaxInboundQueue.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgMaxInboundQueue.setDescription('This specifies the maximum number of frames from the network which may be queued in a BYPASS station. A smaller value may ve choosen for applications which experience objectable delays, if due to excessive growth of the BYPASS inbound queue.')
friSCfgAnnexGRateReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgAnnexGRateReduction.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgAnnexGRateReduction.setDescription('This parameter determines whether Annex G stations will invoke implicit congestion control when a link error is detected, reducing their transmitted information rate to 1/4 CIR. The rate will be gradually increased in the normal way as non-BECN frames are received.')
friSCfgCctType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgCctType.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgCctType.setDescription('Select the station circuit type defined for the Frame Relay line. pvc - station will operate on its assigned DLCI as a PVC. svc - station will operate on a selected DLCI as a SVC.')
friSCfgCallControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("autd", 2), ("recv", 3), ("cnorm", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgCallControl.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgCallControl.setDescription('This parameter is used to control the calling behavior of the SVC station. auto - the station will automatically initiate a FR SVC call on power up autd - the station will initiate a FR SVC call on demand of data to transmit recv - the station can be used to receive inbound FR SVC calls from attached network equipment cnorm - Controlled Normal. This allows Annex G stations to set up and disconnect Frame Relay SVC calls through Network Services')
friSCfgRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgRetryInterval.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgRetryInterval.setDescription('This is the time interval between call attempts, in seconds, that a station configured to initiate an SVC call will use. If a call attempt fails, either because there was no response to the SETUP message or the response was a RELEASE, the station will wait this amount of time before sending the next SETUP message.')
friSCfgCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgCallAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgCallAttempts.setDescription('This is the number of contiguous call attempts that a station configured to initiate an SVC call will make to establish the call. If this count expires, the station will not make any further call attempts. A station (or port or node) boot is required to re-initiate call attempts. A value of 0 means the station makes call attempts indefinitely.')
friSCfgIdleInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgIdleInterval.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgIdleInterval.setDescription('This is the idle time, in seconds, allowed for FRI station to remain idle. If the station using the SVC passes no data for this time period, the SVC will be cleared. If the SVC is cleared and the stations attempts to send data an SVC will be established for the station.')
friSCfgIeNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 42), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgIeNegotiation.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgIeNegotiation.setDescription('This allows the listing of parameters to be used in a SETUP/CONNECT message. dlci - If the station initiates a call, it will select the lowest value of DLCI available and specify it to be used for the SVC. llcp - If the station initiates a call it specifies a full set of Link Layer Core Parameters. If it receives a call LLCP is used to set CIR and BC. tpie - If set, the station will send a Traffic Priority IE. The value of the TP IE is determined by the application that causes the call to be made. This parameter is only effective on stations configured for CNORM Call Control. Any combination of above specified by summing (DLCI+LLCP).')
friSCfgSubaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 43), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgSubaddress.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgSubaddress.setDescription('This specifies the station subaddress coded and an IE. it is coded as an IA5 string with type of subaddress NSAP and IA5 AFI prefix added. Incoming calls with a called subaddress of NSAP type and IA5 AFI prefix that match this configured string will connect to this station. If this parameter is blank, the corresponding IE is not sent on outgoing calls. Incoming calls without the corresponding IE can connect to this station. The valid format of this entry is: xx...xx000000 or xx...xx000000 Where: xx...xx00 represents the station number in IA5/ASCII coded hex terminated with a NUL character suffix. For example, a sub-address of 12 would be represented by the string 313200. To set the subaddress blank, set the address string to NUL only.')
friSCfgCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 44), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgCalledNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgCalledNumber.setDescription('This is the address of the destination, in the appropriate numbering plan, to which a call will be placed by this station. Called Party Number is a manditory IE and should be specified if calls are originated by this station. The valid format of this entry is: xx...xx000101 or xx...xx000103 Where: xx...xx00 represents the address of the destination in IA5/ASCII coded hex terminated with a NUL character suffix. For example, an address of 123 would be represented by the string 31323300. 0101 is the suffix used to specify E.164 Number Plan 0103 is the suffix used to specify X.121 Number Plan')
friSCfgCalledSubaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgCalledSubaddress.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgCalledSubaddress.setDescription('For outgoing calls, this specifies the calling subaddress IE coded as an IA5 string with type of subaddress NSAP and IA5 AFI prefix added. Incoming calls with a called subaddress of NSAP type and IA5 AFI prefix that match this configured string will connect to this station. If this parameter is blank, the corresponding IE is not sent on outgoing calls. Incoming calls without the corresponding IE can connect to this station. The valid format of this entry is: xx...xx000000 or xx...xx000000 Where: xx...xx00 represents the station number in IA5/ASCII coded hex terminated with a NUL character suffix. For example, a sub-address of 12 would be represented by the string 313200. To set the subaddress blank, set the address string to NUL only.')
friSCfgMinCir = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 155000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgMinCir.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgMinCir.setDescription('This parameter specifies the minimum rate (in bits-per-second) that the Frame Relay network agrees to transfer information under congested conditions for the FRI Station. This value is used to throttle data on the FRI station for congestion control purposes. The MinCIR cannot be greater than the link speed.')
friSCfgBurstExcess = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgBurstExcess.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgBurstExcess.setDescription('This parameter is negotiated during the call establishment phase of Frame Relay SVC calls. It has no effect on data transfer after the call has been established.')
friSCfgE2EEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgE2EEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgE2EEnabled.setDescription('Enable End-to-End Segmentation. Peer must be enabled too. enabled - Enable End-to-End Segmentation disabled - Disable End-to-End Segmentation')
friSCfgE2EType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("motorola", 1), ("frf12", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgE2EType.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgE2EType.setDescription('Type of End-to-End Segmentation. Peer must be configured in the same way. FRF12 - FRF.12 End-to-End Segmentation Motorola - Motorola End-to-End Segmentation')
friSCfgE2ESSVP = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(65, 129, 257, 513, 1025))).clone(namedValues=NamedValues(("segSize64", 65), ("segSize128", 129), ("segSize256", 257), ("segSize512", 513), ("segSize1024", 1025)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSCfgE2ESSVP.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgE2ESSVP.setDescription('Segment size when voice is present. Affects transmit path only. segSize64 - 64 byte segments segSize128 - 128 byte segments segSize256 - 256 byte segments segSize512 - 512 byte segments segSize1024 - 1024 byte segments')
friSCfgE2ESSVNP = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(65, 129, 257, 513, 1025, 2049, 4097, 32000))).clone(namedValues=NamedValues(("segSize64", 65), ("segSize128", 129), ("segSize256", 257), ("segSize512", 513), ("segSize1024", 1025), ("segSize2048", 2049), ("segSize4096", 4097), ("disable", 32000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgE2ESSVNP.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgE2ESSVNP.setDescription("Segment size when voice is not present. Affects transmit path only. segSize64 - 64 byte segments segSize128 - 128 byte segments segSize256 - 256 byte segments segSize512 - 512 byte segments segSize1024 - 1024 byte segments segSize2048 - 2048 byte segments segSize4096 - 4096 byte segments disable - this selection doesn't affect the packet size. End-to-End segmentation header will be inserted only.")
friSCfgE2ESegDelayEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgE2ESegDelayEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgE2ESegDelayEnabled.setDescription('Discards a packet if any segment delays more than 10 seconds. Affects receive path only. enabled - discard the packet disabled - do not discard the packet')
friSCfgE2ECheckPckSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgE2ECheckPckSize.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgE2ECheckPckSize.setDescription('Check if the packet size is larger than the node maximum packet size. enabled - discard packet than is larger than the maximum size. disabled - accept packet than is larger than the maximum size.')
friSCfgvoice_header = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 9, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setLabel("friSCfgvoice-header").setMaxAccess("readwrite")
if mibBuilder.loadTexts: friSCfgvoice_header.setStatus('mandatory')
if mibBuilder.loadTexts: friSCfgvoice_header.setDescription('Voice Header. enabled - Enable Voice Header Insertion disabled - Disable Voice Header Insertion')
cdx6500PPSTFRIPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32))
cdx6500PPSTFRIPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 1), )
if mibBuilder.loadTexts: cdx6500PPSTFRIPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTFRIPortTable.setDescription('This table contains FRI Port Statistics parameters.')
cdx6500PPSTFRIPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 1, 1), ).setIndexNames((0, "FRI-OPT-MIB", "friPStatsPortNumber"))
if mibBuilder.loadTexts: cdx6500PPSTFRIPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTFRIPortEntry.setDescription('Entries in the FRI Port Statistics Table.')
friPStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsPortNumber.setDescription('The port number of the FRI port.')
friPStatsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(17))).clone(namedValues=NamedValues(("fri", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsPortType.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsPortType.setDescription('Port type of this port.')
friPStatsPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 100))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("busyOut", 3), ("up", 4), ("down", 5), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsPortStatus.setDescription('Specifies the current port status. enabled - Port is operational. disabled - Port has been disabled. busyOut - Port has been busied out. up - Port is up and operational. down - Port is down. na - Value not Available.')
friPStatsConfiguredStns = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsConfiguredStns.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsConfiguredStns.setDescription('A list of all the configured stations.')
friPStatsPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsPortSpeed.setDescription('Message transmission speed in bits per second. ')
friPStatsOpCntrlProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsOpCntrlProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsOpCntrlProtocol.setDescription('Control Protocol type learned from network.')
friPStatsSPBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsSPBackup.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsSPBackup.setDescription('This indicates whether the same port backup is configured for this port.')
friPStatsPriorityStn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsPriorityStn.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsPriorityStn.setDescription('This specifies the high priority station.')
friPStatsLastStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsLastStatsReset.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsLastStatsReset.setDescription('This indicates the time stamp of the last statistics reset.')
cdx6500PPSTFRIDataSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 2), )
if mibBuilder.loadTexts: cdx6500PPSTFRIDataSummaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTFRIDataSummaryTable.setDescription('This table contains FRI Port Data Summary Statistics parameters.')
cdx6500PPSTFRIDataSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 2, 1), ).setIndexNames((0, "FRI-OPT-MIB", "friDataSummPortNumber"))
if mibBuilder.loadTexts: cdx6500PPSTFRIDataSummaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTFRIDataSummaryEntry.setDescription('Entries in the FRI Port Data Summary Statistics Table.')
friDataSummPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friDataSummPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friDataSummPortNumber.setDescription('The port number of the FRI port.')
friPStatsCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsCharInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsCharInTotal.setDescription('Number of characters received since last boot or statistics reset.')
friPStatsCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsCharOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsCharOutTotal.setDescription('Number of characters transmitted since last boot or statistics reset.')
friPStatsCharInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsCharInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsCharInPerSec.setDescription('Average number of characters received per second.')
friPStatsCharOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsCharOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsCharOutPerSec.setDescription('Average number of characters transmitted per second.')
friPStatsFramesInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsFramesInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsFramesInTotal.setDescription('Number of frames received since last boot or statistics reset.')
friPStatsFramesOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsFramesOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsFramesOutTotal.setDescription('Number of frames transmitted since last boot or statistics reset.')
friPStatsFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsFramesInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsFramesInPerSec.setDescription('Average number of frames received per second.')
friPStatsFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsFramesOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsFramesOutPerSec.setDescription('Average number of frames transmitted per second.')
friPStatsAvFrameSizeIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsAvFrameSizeIn.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsAvFrameSizeIn.setDescription('Average frame size of received frames.')
friPStatsAvFrameSizeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsAvFrameSizeOut.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsAvFrameSizeOut.setDescription('Average size of transmitted frames.')
friPStatsUtilIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsUtilIn.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsUtilIn.setDescription('Port Utilization of incoming data.')
friPStatsUtilOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsUtilOut.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsUtilOut.setDescription('Port Utilization of outgoing data.')
cdx6500PPSTFRISummaryTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3), )
if mibBuilder.loadTexts: cdx6500PPSTFRISummaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTFRISummaryTable.setDescription('This table contains FRI Summary Statistics parameters.')
cdx6500PPSTFRISummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1), ).setIndexNames((0, "FRI-OPT-MIB", "friSummPortNumber"))
if mibBuilder.loadTexts: cdx6500PPSTFRISummaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTFRISummaryEntry.setDescription('Entries in the FRI Summary Statistics Table.')
friSummPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSummPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friSummPortNumber.setDescription('The port number of the FRI port.')
friPStatsCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsCRCErrors.setDescription('Number of errors detected by Cyclic Redundancy Check since last node boot or reset of statistics.')
friPStatsOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsOverrunErrors.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsOverrunErrors.setDescription('Number of OverrunErrors detected since last node boot or reset of statistics.')
friPStatsFrameLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsFrameLengthErrors.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsFrameLengthErrors.setDescription('Number of Frame Length Errors detected since last node boot or statistics reset.')
friPStatsUnderrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsUnderrunErrors.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsUnderrunErrors.setDescription('Number of Underrun Errors detected since last node boot or statistics reset.')
friPStatsUnknownDLCICount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsUnknownDLCICount.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsUnknownDLCICount.setDescription('This specifies the number of DLCIs not recognized.')
friPStatsLastUnknownDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsLastUnknownDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsLastUnknownDLCI.setDescription('This specifies the last unknown dlci received.')
friPStatsSplittingRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsSplittingRatio.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsSplittingRatio.setDescription("The Frame Segmenter's splitting ratio calculated as a percentage of Number of frames segmented/Number of frames.")
friPStatsTotalSegmentsLost = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsTotalSegmentsLost.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsTotalSegmentsLost.setDescription('Total Segments lost by Frame Segmenter Receiver.')
friPStatsMaxContiguousSegmentsLost = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsMaxContiguousSegmentsLost.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsMaxContiguousSegmentsLost.setDescription('Maximum consecutive segments lost by Farme Segmenter Receiver.')
friPStatsVoiceBWOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsVoiceBWOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsVoiceBWOnPort.setDescription('Current amount of voice bandwidth allocated.')
friPStatsFrameSegmenterSyncLost = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsFrameSegmenterSyncLost.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsFrameSegmenterSyncLost.setDescription('Total number of times synchronization has been lost.')
friPStatsStatusEnqSentFull = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsStatusEnqSentFull.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsStatusEnqSentFull.setDescription('Number of status enquiries SENT FULL.')
friPStatsFullStatusRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsFullStatusRecd.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsFullStatusRecd.setDescription('Number of full status received.')
friPStatsStatusEnqSentLIV = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsStatusEnqSentLIV.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsStatusEnqSentLIV.setDescription('Number of status enq sent LIV.')
friPStatsLIVStatusRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsLIVStatusRecd.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsLIVStatusRecd.setDescription('Number of status update received.')
friPStatsStatusEnqRecdFull = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsStatusEnqRecdFull.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsStatusEnqRecdFull.setDescription('Number of Full status enq RCV bi-directional mode.')
friPStatsStatusEnqRecdLIV = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsStatusEnqRecdLIV.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsStatusEnqRecdLIV.setDescription('Number of LIV status enq RCV bi-directional mode.')
friPStatsAsyncUpdateRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsAsyncUpdateRecd.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsAsyncUpdateRecd.setDescription('Number of async update received.')
friPStatsSeqNumMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsSeqNumMismatch.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsSeqNumMismatch.setDescription('Number of Sequence Number Mismatches occurred.')
friPStatsTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsTimeouts.setDescription('Number of timeouts occurred.')
cdx6500PPSTFRIISDNCallStatusTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 4), )
if mibBuilder.loadTexts: cdx6500PPSTFRIISDNCallStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTFRIISDNCallStatusTable.setDescription('This table contains FRI ISDN Statistics parameters.')
cdx6500PPSTFRIISDNCallStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 4, 1), ).setIndexNames((0, "FRI-OPT-MIB", "friISDNCallStatusPortNumber"))
if mibBuilder.loadTexts: cdx6500PPSTFRIISDNCallStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTFRIISDNCallStatusEntry.setDescription('Entries in the FRI ISDN Statistics Table.')
friISDNCallStatusPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friISDNCallStatusPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friISDNCallStatusPortNumber.setDescription('The port number of the FRI Port.')
friPStatsNumRxCallsSinceLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsNumRxCallsSinceLastReset.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsNumRxCallsSinceLastReset.setDescription('The number of inbound calls that were attempted since the last statistics reset.')
friPStatsNumRxCallsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsNumRxCallsRejected.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsNumRxCallsRejected.setDescription('The number of inbound calls that were rejected since the last statistics reset.')
friPStatsRxLastCallFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 100))).clone(namedValues=NamedValues(("noFailureReported", 193), ("noAvailableVirtualPort", 194), ("securityViolation", 195), ("noResourcesAvailable", 196), ("callRejected", 197), ("invalidPhoneNumber", 198), ("outgoingCallRequestTimeout", 199), ("callCollision", 200), ("virtualPortNotAvailable", 201), ("invalidConfiguration", 202), ("failureNotSupported", 203), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsRxLastCallFailureCause.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsRxLastCallFailureCause.setDescription('The reason the last inbound call was rejected, since the last statistics reset. The posssible values are: noFailureReported - No call failure noAvailableVirtualPort - No virtual port available securityViolation - Password security failed noResourcesAvailable - No resources available callRejected - Call failed by Xircom card invalidPhoneNumber - Phone number is incorrect outgoingCallRequestTimeout - Outgoing call request timed out callCollision - Call collision virtualPortNotAvailable - This port is not available invalidConfiguration - Configuration is incorrect failureNotSupported - Failure is not supported na - Value Not Available.')
friPStatsRxLastCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsRxLastCalledNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsRxLastCalledNumber.setDescription('The phone number of the virtual port of the last ISDN call made into this port.')
friPStatsRxLastCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsRxLastCallingNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsRxLastCallingNumber.setDescription('The phone number of last party to make an ISDN call into this port.')
friPStatsRxMinCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsRxMinCallDuration.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsRxMinCallDuration.setDescription('The minimum call duration of all inbound ISDN calls made into this port, since the last statistics reset.')
friPStatsRxMaxCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsRxMaxCallDuration.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsRxMaxCallDuration.setDescription('The maximum call duration of all inbound ISDN calls made into this port, since the last statistics reset.')
friPStatsRxAvgCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsRxAvgCallDuration.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsRxAvgCallDuration.setDescription('The average call duration of all inbound ISDN calls made into this port, since the last statistics reset.')
friPStatsNumTxCallsSinceLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsNumTxCallsSinceLastReset.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsNumTxCallsSinceLastReset.setDescription('The number of outbound calls that were attempted since the last statistics reset.')
friPStatsNumTxCallsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsNumTxCallsRejected.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsNumTxCallsRejected.setDescription('The number of outbound calls that were rejected since the last statistics reset.')
friPStatsTxLastCallFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 100))).clone(namedValues=NamedValues(("noFailureReported", 193), ("noAvailableVirtualPort", 194), ("securityViolation", 195), ("noResourcesAvailable", 196), ("callRejected", 197), ("invalidPhoneNumber", 198), ("outgoingCallRequestTimeout", 199), ("callCollision", 200), ("virtualPortNotAvailable", 201), ("invalidConfiguration", 202), ("failureNotSupported", 203), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsTxLastCallFailureCause.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsTxLastCallFailureCause.setDescription('The reason the last outbound call was rejected, since the last statistics reset. The posssible values are: noFailureReported - No call failure noAvailableVirtualPort - No virtual port available securityViolation - Password security failed noResourcesAvailable - No resources available callRejected - Call failed by Xircom card invalidPhoneNumber - Phone number is incorrect outgoingCallRequestTimeout - Outgoing call request timed out callCollision - Call collision virtualPortNotAvailable - This port is not available invalidConfiguration - Configuration is incorrect failureNotSupported - Failure is not supported na - Value Not Available.')
friPStatsTxLastCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsTxLastCalledNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsTxLastCalledNumber.setDescription('The phone number of the last ISDN call made by a virtual port from this port.')
friPStatsTxLastCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsTxLastCallingNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsTxLastCallingNumber.setDescription('The phone number of the virtual port that made the last ISDN call from this port.')
friPStatsTxMinCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 4, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsTxMinCallDuration.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsTxMinCallDuration.setDescription('The minimum call duration of all outbound ISDN calls made from this port, since the last statistics reset.')
friPStatsTxMaxCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 4, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsTxMaxCallDuration.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsTxMaxCallDuration.setDescription('The maximum call duration of all outbound ISDN calls made from this port, since the last statistics reset.')
friPStatsTxAvgCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 4, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsTxAvgCallDuration.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsTxAvgCallDuration.setDescription('The average call duration of all outbound ISDN calls made from this port, since the last statistics reset.')
friPStatsSignalingState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 32, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 100))).clone(namedValues=NamedValues(("idle", 1), ("ringing", 2), ("connected", 3), ("congested", 4), ("disabled", 5), ("dChannelDown", 6), ("disabledDChannelDown", 7), ("disconnecting", 8), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friPStatsSignalingState.setStatus('mandatory')
if mibBuilder.loadTexts: friPStatsSignalingState.setDescription('ISDN call signaling state. The possible values are: idle - No ISDN call present. ringing - Pending outgoing ISDN call request. connected - ISDN call is connected. congested - Congested mode. disabled - Virtual Port is disabled. dChannelDown - D-channel is down. disabledDChannelDown - Disabled and D-channel is down. disconnecting - Pending ISDN call disconnection. na - Value not available.')
cdx6500SPSTFRISStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10))
friSGenStatsTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1), )
if mibBuilder.loadTexts: friSGenStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: friSGenStatsTable.setDescription('This table contains FRI Station Statistics parameters.')
cdx6500friSGenStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1), ).setIndexNames((0, "FRI-OPT-MIB", "friSGenStatsPortNumber"), (0, "FRI-OPT-MIB", "friSGenStatsStnNumber"))
if mibBuilder.loadTexts: cdx6500friSGenStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500friSGenStatsEntry.setDescription('Entries in the FRI Station Statistics Table.')
friSGenStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSGenStatsPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friSGenStatsPortNumber.setDescription('The FRI port number corresponding to this station.')
friSGenStatsStnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSGenStatsStnNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friSGenStatsStnNumber.setDescription('The number of the FRI Station.')
friSStatsStnType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("annexG", 1), ("bypass", 2), ("voice", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsStnType.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsStnType.setDescription('annex G - Annex G station type. bypass - bypass station type. voice - voice station type.')
friSStatsStnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsStnStatus.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsStnStatus.setDescription('Status of the station.')
friSStatsDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsDLCI.setDescription('Data Link Connection Identifier is the unique identifier for the station on the FRI port and must match the DLCI configured on the Frame Relay networking node. The DLCI is 0 in Auto-Learning mode.')
friSStatsStnState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsStnState.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsStnState.setDescription('Specifies the state of the station : unused - station is unconfigured/disabled uncontrolled - station is not controlled. controlled - station is controlled, congestion detected.')
friSStatsConfiguredCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsConfiguredCIR.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsConfiguredCIR.setDescription('Committed Information Rate in bits per second : Value of this parameter is 0 for Bypass stations (not available).')
friSStatsAllowedInfoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsAllowedInfoRate.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsAllowedInfoRate.setDescription('Allowed information rate is the link speed if uncongested, 0 if unused and the current desired information rate if congested. Value of this parameter is also 0 for Bypass stations (not available).')
friSStatsImpCongDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsImpCongDetect.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsImpCongDetect.setDescription('Number of times implicit congestion procedures have been invoked.Value of this parameter is 0 for Bypass stations (not available).')
friSStatsExpCongDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsExpCongDetect.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsExpCongDetect.setDescription('Number of times explicit congestion procedures have been invoked.')
friSStatsLMIFlowCntrl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsLMIFlowCntrl.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsLMIFlowCntrl.setDescription('This indicates the flow status, whether OFF or ON. na - Value not available.')
friSStatsMaxSVCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsMaxSVCCount.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsMaxSVCCount.setDescription('Maximum number of SVCs available in the network. Value of this parameter is 0 for Bypass stations (not available)')
friSStatsCurrSVCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsCurrSVCCount.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsCurrSVCCount.setDescription('Number of SVCs currently in use. Value of this parameter is 0 for Bypass stations (not available)')
friSStatsMaxPVCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsMaxPVCCount.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsMaxPVCCount.setDescription('Maximum number of async pvc channels. Value of this parameter is 0 for Bypass stations (not available)')
friSStatsCurrPVCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsCurrPVCCount.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsCurrPVCCount.setDescription('Current number of async pvc channels. Value of this parameter is 0 for Bypass stations (not available)')
friSStatsLastStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsLastStatsReset.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsLastStatsReset.setDescription('This indicates the time stamp of the last statistics reset.')
friSStatsFrameSegState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsFrameSegState.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsFrameSegState.setDescription('State of the Frame segmenter receiver.')
friSStatsFrameSegSyncLost = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsFrameSegSyncLost.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsFrameSegSyncLost.setDescription('Total number of segments lost by Frame Segmenter Receiver.')
friSStatsPVCState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsPVCState.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsPVCState.setDescription('Current state of the PVC. Value of this parameter is not available for stations other than Bypass Stations.')
friSStatsVoiceCongDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsVoiceCongDetect.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsVoiceCongDetect.setDescription('Number of times voice congestion procedures have been invoked. Value of this parameter is 0 (Not Available) for Bypass stations.')
friSStatsMaxVSVCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsMaxVSVCCount.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsMaxVSVCCount.setDescription('Maximum number of Voice SVCs available in the network. Value of this parameter is 0 for Bypass stations (not available)')
friSStatsCurrVSVCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsCurrVSVCCount.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsCurrVSVCCount.setDescription('Number of Voice SVCs currently in use. Value of this parameter is 0 for Bypass stations (not available)')
friSDataSummaryStatsTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2), )
if mibBuilder.loadTexts: friSDataSummaryStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: friSDataSummaryStatsTable.setDescription('This table contains FRI Station Data Summary Statistics parameters.')
cdx6500friSDataSummaryStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1), ).setIndexNames((0, "FRI-OPT-MIB", "friSDataSummStatsPortNumber"), (0, "FRI-OPT-MIB", "friSDataSummStatsStnNumber"))
if mibBuilder.loadTexts: cdx6500friSDataSummaryStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500friSDataSummaryStatsEntry.setDescription('Entries in the FRI Station Data Summary Statistics Table.')
friSDataSummStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSDataSummStatsPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friSDataSummStatsPortNumber.setDescription('The FRI port number corresponding to this station.')
friSDataSummStatsStnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSDataSummStatsStnNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friSDataSummStatsStnNumber.setDescription('The number of the FRI station.')
friSStatsCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsCharInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsCharInTotal.setDescription('Number of characters received since last node boot or statistics reset.')
friSStatsCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsCharOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsCharOutTotal.setDescription('Number of characters transmitted since last node boot or statistics reset.')
friSStatsCharInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsCharInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsCharInPerSec.setDescription('Average number of characters received per second.')
friSStatsCharOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsCharOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsCharOutPerSec.setDescription('Average number of characters transmitted per second.')
friSStatsPktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsPktInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsPktInTotal.setDescription('Number of packets received since last node boot or statistics reset. Value of this parameter is 0 for Bypass stations (not available)')
friSStatsPktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsPktOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsPktOutTotal.setDescription('Number of packets transmitted since last node boot or statistics reset. Value of this parameter is 0 for Bypass stations (not available)')
friSStatsPktInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsPktInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsPktInPerSec.setDescription('Average number of packets received per second. Value of this parameter is 0 for Bypass stations (not available)')
friSStatsPktOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsPktOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsPktOutPerSec.setDescription('Average number of packets transmitted per second. Value of this parameter is 0 for Bypass stations (not available)')
friSStatsFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsFrameInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsFrameInTotal.setDescription('Number of frames transmitted since last node boot or statistics reset.')
friSStatsFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsFrameOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsFrameOutTotal.setDescription('Number of frames transmitted since last node boot or statistics reset.')
friSStatsFrameInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsFrameInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsFrameInPerSec.setDescription('Average number of frames received per second.')
friSStatsFrameOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsFrameOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsFrameOutPerSec.setDescription('Average number of frames transmitted per second.')
friSStatsUtilIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsUtilIn.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsUtilIn.setDescription('Indicates the quantity of user bytes received on the link expressed as a percentage of the maximum number of bytes that could have been received.')
friSStatsUtilOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsUtilOut.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsUtilOut.setDescription('Indicates the quantity of user bytes sent down the link expressed as a percentage of the maximum number of bytes that could have been sent.')
friSStatsNumPktsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsNumPktsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsNumPktsQueued.setDescription('Current number of packets buffered since last node boot or statistics reset. Value of this parameter is 0 for Bypass stations (not available)')
friSStatsPktsDiscardIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsPktsDiscardIn.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsPktsDiscardIn.setDescription('Number of incoming packets discarded. Value of this parameter is only available for Bypass stations, 0 is returned otherwise.')
friSStatsPktsDiscardOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsPktsDiscardOut.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsPktsDiscardOut.setDescription('Number of outgoing packets discarded. Value of this parameter is only available for Bypass stations, 0 is returned otherwise.')
friSStatsPktsQueuedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsPktsQueuedIn.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsPktsQueuedIn.setDescription('Current number of Incoming packets buffered since last node boot or statistics reset of a Bypass station. Value of this parameter is only available for Bypass stations, 0 is returned otherwise.')
friSStatsPktsQueuedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsPktsQueuedOut.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsPktsQueuedOut.setDescription('Current number of Outgoing packets buffered since last node boot or statistics reset of a Bypass station. Value of this parameter is only available for Bypass stations, 0 is returned otherwise.')
friSVoiceSummaryStatsTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 3), )
if mibBuilder.loadTexts: friSVoiceSummaryStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: friSVoiceSummaryStatsTable.setDescription('This table contains FRI Station Voice Summary Statistics parameters.')
cdx6500friSVoiceSummaryStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 3, 1), ).setIndexNames((0, "FRI-OPT-MIB", "friSVoiceSummStatsPortNumber"), (0, "FRI-OPT-MIB", "friSVoiceSummStatsStnNumber"))
if mibBuilder.loadTexts: cdx6500friSVoiceSummaryStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500friSVoiceSummaryStatsEntry.setDescription('Entries in the FRI Station Voice Summary Statistics Table. NOTE : Value of all objects in this table will be 0 for Bypass stations (not available).')
friSVoiceSummStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSVoiceSummStatsPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friSVoiceSummStatsPortNumber.setDescription('The FRI port number corresponding to this station.')
friSVoiceSummStatsStnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSVoiceSummStatsStnNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friSVoiceSummStatsStnNumber.setDescription('The number of the FRI station.')
friSStatsVoiceCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsVoiceCharInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsVoiceCharInTotal.setDescription('Total number of voice characters received.')
friSStatsVoiceCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsVoiceCharOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsVoiceCharOutTotal.setDescription('Total number of voice characters transmitted.')
friSStatsVoiceCharInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsVoiceCharInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsVoiceCharInPerSec.setDescription('Number of voice characters received per second.')
friSStatsVoiceCharOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsVoiceCharOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsVoiceCharOutPerSec.setDescription('Number of voice characters transmitted per second.')
friSStatsVoicePktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsVoicePktInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsVoicePktInTotal.setDescription('Total number of voice packets received.')
friSStatsVoicePktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsVoicePktOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsVoicePktOutTotal.setDescription('Total number of voice packets transmitted.')
friSStatsVoicePktInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsVoicePktInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsVoicePktInPerSec.setDescription('Number of voice packets received per second.')
friSStatsVoicePktOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsVoicePktOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsVoicePktOutPerSec.setDescription('Number of voice packets transmitted per second.')
friSFrameSummaryStatsTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4), )
if mibBuilder.loadTexts: friSFrameSummaryStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: friSFrameSummaryStatsTable.setDescription('This table contains FRI Station Frame Summary Statistics parameters.')
cdx6500friSFrameSummaryStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4, 1), ).setIndexNames((0, "FRI-OPT-MIB", "friSFrameSummStatsPortNumber"), (0, "FRI-OPT-MIB", "friSFrameSummStatsStnNumber"))
if mibBuilder.loadTexts: cdx6500friSFrameSummaryStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500friSFrameSummaryStatsEntry.setDescription('Entries in the FRI Station Frame Summary Statistics Table. NOTE : Value of all objects in this table will be 0 for Bypass stations (not available)')
friSFrameSummStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSFrameSummStatsPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friSFrameSummStatsPortNumber.setDescription('The FRI port number corresponding to this station.')
friSFrameSummStatsStnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSFrameSummStatsStnNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friSFrameSummStatsStnNumber.setDescription('The number of the FRI station.')
friSStatsInfoFramesInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsInfoFramesInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsInfoFramesInTotal.setDescription('Information Frames received since last node boot or statistics reset.')
friSStatsInfoFramesOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsInfoFramesOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsInfoFramesOutTotal.setDescription('Information Frames transmitted since last node boot or statistics reset.')
friSStatsRRFramesInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsRRFramesInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsRRFramesInTotal.setDescription('Number of RR Frames received since last node boot or statistics reset.')
friSStatsRRFramesOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsRRFramesOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsRRFramesOutTotal.setDescription('Number of RR Frames transmitted since last node boot or statistics reset.')
friSStatsRNRFramesInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsRNRFramesInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsRNRFramesInTotal.setDescription('Number of RNR frames received since last node boot or statistics reset.')
friSStatsRNRFramesOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsRNRFramesOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsRNRFramesOutTotal.setDescription('Number of RNR frames transmitted since last node boot or statistics reset.')
friSStatsREJFramesInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsREJFramesInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsREJFramesInTotal.setDescription('Number of REJ frames received since last node boot or statistics reset.')
friSStatsREJFramesOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsREJFramesOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsREJFramesOutTotal.setDescription('Number of REJ frames transmitted since last node boot or statistics reset.')
friSStatsSABMFramesInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsSABMFramesInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsSABMFramesInTotal.setDescription('Number of SABM frames received since last node boot or statistics reset.')
friSStatsSABMFramesOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsSABMFramesOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsSABMFramesOutTotal.setDescription('Number of SABM frames transmitted since last node boot or statistics reset.')
friSStatsDISCFramesInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsDISCFramesInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsDISCFramesInTotal.setDescription('Number of DISC frames received since last node boot or statistics reset.')
friSStatsDISCFramesOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsDISCFramesOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsDISCFramesOutTotal.setDescription('Number of DISC frames transmitted since last node boot or statistics reset.')
friSStatsDMFramesInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsDMFramesInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsDMFramesInTotal.setDescription('Number of DM frames received since last node boot or statistics reset.')
friSStatsDMFramesOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsDMFramesOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsDMFramesOutTotal.setDescription('Number of DM frames transmitted since last node boot or statistics reset.')
friSStatsUAFramesInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsUAFramesInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsUAFramesInTotal.setDescription('Number of UA frames received since last node boot or statistics reset.')
friSStatsUAFramesOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsUAFramesOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsUAFramesOutTotal.setDescription('Number of UA frames transmitted since last node boot or statistics reset.')
friSStatsFRMRFramesInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsFRMRFramesInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsFRMRFramesInTotal.setDescription('Number of FRMR frames received since last node boot or statistics reset.')
friSStatsFRMRFramesOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsFRMRFramesOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsFRMRFramesOutTotal.setDescription('Number of FRMR frames transmitted since last node boot or statistics reset.')
friSPacketSummaryStatsTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5), )
if mibBuilder.loadTexts: friSPacketSummaryStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: friSPacketSummaryStatsTable.setDescription('This table contains FRI Station Packet Summary Statistics parameters.')
cdx6500friSPacketSummaryStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1), ).setIndexNames((0, "FRI-OPT-MIB", "friSPktSummStatsPortNumber"), (0, "FRI-OPT-MIB", "friSPktSummStatsStnNumber"))
if mibBuilder.loadTexts: cdx6500friSPacketSummaryStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500friSPacketSummaryStatsEntry.setDescription('Entries in the FRI Station Packet Summary Statistics Table. NOTE : Value of all objects in this table will be 0 for Bypass stations (not available)')
friSPktSummStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSPktSummStatsPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friSPktSummStatsPortNumber.setDescription('The FRI port number corresponding to this station.')
friSPktSummStatsStnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSPktSummStatsStnNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friSPktSummStatsStnNumber.setDescription('The number of the FRI station.')
friSStatsDataPktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsDataPktInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsDataPktInTotal.setDescription('Number of Data packets received since last node boot or statistics reset.')
friSStatsDataPktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsDataPktOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsDataPktOutTotal.setDescription('Number of Data packets transmitted since last node boot or statistics reset.')
friSStatsRRPktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsRRPktInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsRRPktInTotal.setDescription('Number of RR packets received since last node boot or statistics reset.')
friSStatsRRPktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsRRPktOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsRRPktOutTotal.setDescription('Number of RR packets transmitted since last node boot or statistics reset.')
friSStatsRNRPktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsRNRPktInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsRNRPktInTotal.setDescription('Number of RNR packets received since last node boot or statistics reset.')
friSStatsRNRPktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsRNRPktOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsRNRPktOutTotal.setDescription('Number of RNR packets transmitted since last node boot or statistics reset.')
friSStatsREJPktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsREJPktInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsREJPktInTotal.setDescription('Number of REJ packets received since last node boot or statistics reset.')
friSStatsREJPktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsREJPktOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsREJPktOutTotal.setDescription('Number of REJ packets transmitted since last node boot or statistics reset.')
friSStatsCallReqPktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsCallReqPktInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsCallReqPktInTotal.setDescription('Number of call request packets received since last node boot or statistics reset.')
friSStatsCallReqPktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsCallReqPktOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsCallReqPktOutTotal.setDescription('Number of call request packets transmitted since last node boot or statistics reset.')
friSStatsCallAccPktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsCallAccPktInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsCallAccPktInTotal.setDescription('Number of call accept packets received since last node boot or statistics reset.')
friSStatsCallAccPktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsCallAccPktOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsCallAccPktOutTotal.setDescription('Number of call accept packets transmitted since last node boot or statistics reset.')
friSStatsClrReqPktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsClrReqPktInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsClrReqPktInTotal.setDescription('Number of clear request packets received since last node boot or statistics reset.')
friSStatsClrReqPktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsClrReqPktOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsClrReqPktOutTotal.setDescription('Number of clear request packets transmitted since last node boot or statistics reset.')
friSStatsClrConfPktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsClrConfPktInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsClrConfPktInTotal.setDescription('Number of clear confirm packets received since last node boot or statistics reset.')
friSStatsClrConfPktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsClrConfPktOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsClrConfPktOutTotal.setDescription('Number of clear confirm packets transmitted since last node boot or statistics reset.')
friSStatsIntrReqPktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsIntrReqPktInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsIntrReqPktInTotal.setDescription('Number of interrupt request packets received since last node boot or statistics reset.')
friSStatsIntrReqPktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsIntrReqPktOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsIntrReqPktOutTotal.setDescription('Number of interrupt request packets transmitted since last node boot or statistics reset.')
friSStatsIntrConfPktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsIntrConfPktInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsIntrConfPktInTotal.setDescription('Number of interrupt confirm packets received since last node boot or statistics reset.')
friSStatsIntrConfPktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsIntrConfPktOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsIntrConfPktOutTotal.setDescription('Number of interrupt confirm packets transmitted since last node boot or statistics reset.')
friSStatsResetReqPktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsResetReqPktInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsResetReqPktInTotal.setDescription('Number of reset request packets received since last node boot or statistics reset.')
friSStatsResetReqPktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsResetReqPktOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsResetReqPktOutTotal.setDescription('Number of reset request packets transmitted since last node boot or statistics reset.')
friSStatsResetConfPktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsResetConfPktInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsResetConfPktInTotal.setDescription('Number of reset confirm packets received since last node boot or statistics reset.')
friSStatsResetConfPktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsResetConfPktOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsResetConfPktOutTotal.setDescription('Number of reset confirm packets transmitted since last node boot or statistics reset.')
friSStatsRestartReqPktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsRestartReqPktInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsRestartReqPktInTotal.setDescription('Number of restart request packets received since last node boot or statistics reset.')
friSStatsRestartReqPktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsRestartReqPktOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsRestartReqPktOutTotal.setDescription('Number of restart request packets transmitted since last node boot or statistics reset.')
friSStatsRestartConfPktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsRestartConfPktInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsRestartConfPktInTotal.setDescription('Number of restart confirm packets received since last node boot or statistics reset.')
friSStatsRestartConfPktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsRestartConfPktOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsRestartConfPktOutTotal.setDescription('Number of restart confirm packets transmitted since last node boot or statistics reset.')
friSFRISummaryStatsTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 6), )
if mibBuilder.loadTexts: friSFRISummaryStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: friSFRISummaryStatsTable.setDescription('This table contains FRI Station FRI Summary Statistics parameters.')
cdx6500friSFRISummaryStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 6, 1), ).setIndexNames((0, "FRI-OPT-MIB", "friSFRISummStatsPortNumber"), (0, "FRI-OPT-MIB", "friSFRISummStatsStnNumber"))
if mibBuilder.loadTexts: cdx6500friSFRISummaryStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500friSFRISummaryStatsEntry.setDescription('Entries in the FRI Station FRI Summary Statistics Table. NOTE : Value of all objects in this table are valid only for Bypass stations; 0 will be returned otherwise.')
friSFRISummStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSFRISummStatsPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friSFRISummStatsPortNumber.setDescription('The FRI port number corresponding to this station.')
friSFRISummStatsStnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSFRISummStatsStnNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friSFRISummStatsStnNumber.setDescription('The number of the FRI station.')
friSStatsFECNInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsFECNInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsFECNInTotal.setDescription('Number of Forward Explicit Congestion Notification (FECN) packets received since last node boot or statistics reset.')
friSStatsFECNOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsFECNOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsFECNOutTotal.setDescription('Number of Forward Explicit Congestion Notification (FECN) packets transmitted since last node boot or statistics reset.')
friSStatsBECNInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsBECNInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsBECNInTotal.setDescription('Number of Backward Explicit Congestion Notification (BECN) packets received since last node boot or statistics reset.')
friSStatsBECNOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsBECNOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsBECNOutTotal.setDescription('Number of Backward Explicit Congestion Notification (BECN) packets transmitted since last node boot or statistics reset.')
friSStatsDEInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsDEInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsDEInTotal.setDescription('Number of Discard Eligibility (DE) packets received since last node boot or statistics reset.')
friSStatsDEOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 10, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friSStatsDEOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: friSStatsDEOutTotal.setDescription('Number of Discard Eligibility (DE) packets transmitted since last node boot or statistics reset.')
cdx6500ContFRITable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 14))
cdx6500FRIPContTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 14, 1), )
if mibBuilder.loadTexts: cdx6500FRIPContTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500FRIPContTable.setDescription('Control parameters for FRI ports.')
cdx6500FRIPContEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 14, 1, 1), ).setIndexNames((0, "FRI-OPT-MIB", "friPContPortNumber"))
if mibBuilder.loadTexts: cdx6500FRIPContEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500FRIPContEntry.setDescription('Each control applies to a single FRI port.')
friPContPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: friPContPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friPContPortNumber.setDescription('Port number of the FRI port.')
friPContPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("boot", 1), ("enable", 2), ("disable", 3), ("resetstats", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: friPContPortControl.setStatus('mandatory')
if mibBuilder.loadTexts: friPContPortControl.setDescription('Control operations for the specified FRI port. boot - Boots the FRI port enable - Enables the FRI port disable - Disables the FRI port resetstats - Resets the FRI port statistics.')
cdx6500FRISContTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 14, 2), )
if mibBuilder.loadTexts: cdx6500FRISContTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500FRISContTable.setDescription('Control parameters for FRI stations.')
cdx6500FRISContEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 14, 2, 1), ).setIndexNames((0, "FRI-OPT-MIB", "friSContPortNumber"), (0, "FRI-OPT-MIB", "friSContStnNumber"))
if mibBuilder.loadTexts: cdx6500FRISContEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500FRISContEntry.setDescription('Each control applies to a single FRI station.')
friSContPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: friSContPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friSContPortNumber.setDescription('The FRI port number corresponding to this station.')
friSContStnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)))
if mibBuilder.loadTexts: friSContStnNumber.setStatus('mandatory')
if mibBuilder.loadTexts: friSContStnNumber.setDescription('FRI station number.')
friSContStnControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("boot", 1), ("enable", 2), ("disable", 3), ("resetstats", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: friSContStnControl.setStatus('mandatory')
if mibBuilder.loadTexts: friSContStnControl.setDescription('Control operations for the specified FRI station. boot - Boots the FRI station enable - Enables the FRI station disable - Disables the FRI station resetstats - Resets the FRI station statistics.')
mibBuilder.exportSymbols("FRI-OPT-MIB", friSStatsDEInTotal=friSStatsDEInTotal, friSStatsClrConfPktOutTotal=friSStatsClrConfPktOutTotal, friSStatsMaxVSVCCount=friSStatsMaxVSVCCount, cdxProductSpecific=cdxProductSpecific, friSStatsUAFramesOutTotal=friSStatsUAFramesOutTotal, friSStatsResetConfPktInTotal=friSStatsResetConfPktInTotal, friPStatsFrameLengthErrors=friPStatsFrameLengthErrors, friPCfgControlProtocolOptions=friPCfgControlProtocolOptions, friSVoiceSummStatsPortNumber=friSVoiceSummStatsPortNumber, friSStatsCallReqPktOutTotal=friSStatsCallReqPktOutTotal, friSCfgPeakUtilization=friSCfgPeakUtilization, friSCfgCctType=friSCfgCctType, cdx6500PPSTFRIPortTable=cdx6500PPSTFRIPortTable, friPCfgT308=friPCfgT308, friPCfgT303=friPCfgT303, friSStatsVoiceCharInPerSec=friSStatsVoiceCharInPerSec, friPCfgNN1StatusPollingCycle=friPCfgNN1StatusPollingCycle, friSFRISummStatsPortNumber=friSFRISummStatsPortNumber, friPStatsRxLastCallingNumber=friPStatsRxLastCallingNumber, friSStatsCallAccPktOutTotal=friSStatsCallAccPktOutTotal, cdx6500SPSTFRISStatsTable=cdx6500SPSTFRISStatsTable, friSStatsImpCongDetect=friSStatsImpCongDetect, friSStatsRestartConfPktOutTotal=friSStatsRestartConfPktOutTotal, friSCfgE2ECheckPckSize=friSCfgE2ECheckPckSize, friSCfgResetTimer=friSCfgResetTimer, friPStatsConfiguredStns=friPStatsConfiguredStns, friPStatsSeqNumMismatch=friPStatsSeqNumMismatch, friSStatsExpCongDetect=friSStatsExpCongDetect, friPCfgCntrlProtocolSupport=friPCfgCntrlProtocolSupport, friPStatsAvFrameSizeIn=friPStatsAvFrameSizeIn, friSStatsVoicePktInTotal=friSStatsVoicePktInTotal, cdx6500FRIPContTable=cdx6500FRIPContTable, friSCfgT4PollTimer=friSCfgT4PollTimer, friSCfgE2EEnabled=friSCfgE2EEnabled, friSStatsRestartReqPktInTotal=friSStatsRestartReqPktInTotal, friSCfgCallAttempts=friSCfgCallAttempts, cdx6500friSPacketSummaryStatsEntry=cdx6500friSPacketSummaryStatsEntry, cdx6500PPCTFRIPortTable=cdx6500PPCTFRIPortTable, friSStatsInfoFramesOutTotal=friSStatsInfoFramesOutTotal, friPStatsOpCntrlProtocol=friPStatsOpCntrlProtocol, friPStatsTxLastCallingNumber=friPStatsTxLastCallingNumber, friSStatsBECNOutTotal=friSStatsBECNOutTotal, DisplayString=DisplayString, friSCfgIdleInterval=friSCfgIdleInterval, friPStatsNumRxCallsRejected=friPStatsNumRxCallsRejected, friSStatsFRMRFramesInTotal=friSStatsFRMRFramesInTotal, friSStatsResetReqPktOutTotal=friSStatsResetReqPktOutTotal, friSStatsRestartReqPktOutTotal=friSStatsRestartReqPktOutTotal, friSCfgMinCir=friSCfgMinCir, friPStatsUnknownDLCICount=friPStatsUnknownDLCICount, cdx6500friSFRISummaryStatsEntry=cdx6500friSFRISummaryStatsEntry, friSCfgDLCI=friSCfgDLCI, friPStatsUtilOut=friPStatsUtilOut, friSStatsREJPktOutTotal=friSStatsREJPktOutTotal, friPStatsRxMaxCallDuration=friPStatsRxMaxCallDuration, cdx6500friSVoiceSummaryStatsEntry=cdx6500friSVoiceSummaryStatsEntry, friSStatsVoiceCharOutPerSec=friSStatsVoiceCharOutPerSec, friSStatsNumPktsQueued=friSStatsNumPktsQueued, friSCfgE2ESSVNP=friSCfgE2ESSVNP, codex=codex, friSFrameSummStatsPortNumber=friSFrameSummStatsPortNumber, friSStatsIntrConfPktInTotal=friSStatsIntrConfPktInTotal, friSStatsFECNInTotal=friSStatsFECNInTotal, friPStatsCharOutPerSec=friPStatsCharOutPerSec, friPStatsAsyncUpdateRecd=friPStatsAsyncUpdateRecd, friSStatsVoiceCharOutTotal=friSStatsVoiceCharOutTotal, friSStatsCurrVSVCCount=friSStatsCurrVSVCCount, cdx6500PPSTFRISummaryEntry=cdx6500PPSTFRISummaryEntry, cdx6500PPSTFRIISDNCallStatusTable=cdx6500PPSTFRIISDNCallStatusTable, friSStatsFrameOutPerSec=friSStatsFrameOutPerSec, friSStatsLMIFlowCntrl=friSStatsLMIFlowCntrl, friPCfgConnectionType=friPCfgConnectionType, cdx6500FRISContEntry=cdx6500FRISContEntry, friPStatsTxMinCallDuration=friPStatsTxMinCallDuration, friPCfgPortNumber=friPCfgPortNumber, friPCfgT200=friPCfgT200, friSStatsPktsQueuedOut=friSStatsPktsQueuedOut, friSCfgClearTimer=friSCfgClearTimer, friSCfgFrameSegmenter=friSCfgFrameSegmenter, friSGenStatsPortNumber=friSGenStatsPortNumber, cdx6500PSTStationProtocolGroup=cdx6500PSTStationProtocolGroup, friPStatsPortSpeed=friPStatsPortSpeed, friSStatsRRFramesOutTotal=friSStatsRRFramesOutTotal, friSCfgE2EType=friSCfgE2EType, friSGenStatsStnNumber=friSGenStatsStnNumber, friSFRISummStatsStnNumber=friSFRISummStatsStnNumber, friPCfgControlProtocol=friPCfgControlProtocol, friPCfguniState=friPCfguniState, friPStatsLastStatsReset=friPStatsLastStatsReset, friSStatsStnState=friSStatsStnState, cdx6500Statistics=cdx6500Statistics, friSStatsRRPktInTotal=friSStatsRRPktInTotal, friSCfgE2ESegDelayEnabled=friSCfgE2ESegDelayEnabled, friSCfgStnNumber=friSCfgStnNumber, friSStatsREJFramesInTotal=friSStatsREJFramesInTotal, friSCfgStnType=friSCfgStnType, friSStatsClrConfPktInTotal=friSStatsClrConfPktInTotal, friSStatsIntrReqPktOutTotal=friSStatsIntrReqPktOutTotal, friPCfgN392ErrsDuringMonitoredEvents=friPCfgN392ErrsDuringMonitoredEvents, friPCfgClockSource=friPCfgClockSource, friSCfgTransDelay=friSCfgTransDelay, friPCfgInvertTXClock=friPCfgInvertTXClock, friSStatsResetReqPktInTotal=friSStatsResetReqPktInTotal, friSCfgSVCChannels=friSCfgSVCChannels, friSCfgPVCChannels=friSCfgPVCChannels, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, friSStatsMaxPVCCount=friSStatsMaxPVCCount, friSStatsSABMFramesInTotal=friSStatsSABMFramesInTotal, friPStatsStatusEnqSentFull=friPStatsStatusEnqSentFull, friSStatsFrameOutTotal=friSStatsFrameOutTotal, friPCfguniSSVNP=friPCfguniSSVNP, friPCfgSegSizeVoicePresent=friPCfgSegSizeVoicePresent, friSStatsDISCFramesInTotal=friSStatsDISCFramesInTotal, friSStatsCallAccPktInTotal=friSStatsCallAccPktInTotal, friPCfgHighSpeedElectricalInterfaceOption=friPCfgHighSpeedElectricalInterfaceOption, friPStatsCharInTotal=friPStatsCharInTotal, friSStatsRNRPktInTotal=friSStatsRNRPktInTotal, friPCfgSegSizeVoiceNotPresent=friPCfgSegSizeVoiceNotPresent, cdx6500friSFrameSummaryStatsEntry=cdx6500friSFrameSummaryStatsEntry, friPStatsTimeouts=friPStatsTimeouts, friPStatsStatusEnqRecdLIV=friPStatsStatusEnqRecdLIV, friSFrameSummStatsStnNumber=friSFrameSummStatsStnNumber, friSPacketSummaryStatsTable=friSPacketSummaryStatsTable, friSCfgvoice_header=friSCfgvoice_header, friPStatsUtilIn=friPStatsUtilIn, friSCfgX25Options=friSCfgX25Options, friSStatsMaxSVCCount=friSStatsMaxSVCCount, friSStatsDMFramesInTotal=friSStatsDMFramesInTotal, friSStatsRRPktOutTotal=friSStatsRRPktOutTotal, friPStatsFramesOutPerSec=friPStatsFramesOutPerSec, friPCfgHighestStnNumber=friPCfgHighestStnNumber, friPStatsRxLastCalledNumber=friPStatsRxLastCalledNumber, cdx6500FRIPContEntry=cdx6500FRIPContEntry, friSDataSummStatsPortNumber=friSDataSummStatsPortNumber, friPCfgStartSvcDlci=friPCfgStartSvcDlci, friPCfguniCheckPckSize=friPCfguniCheckPckSize, friSStatsInfoFramesInTotal=friSStatsInfoFramesInTotal, friPCfgHighPriorityStn=friPCfgHighPriorityStn, friSStatsDMFramesOutTotal=friSStatsDMFramesOutTotal, friSCfgMaxInboundQueue=friSCfgMaxInboundQueue, cdx6500PPCTFRIPortEntry=cdx6500PPCTFRIPortEntry, friSStatsRRFramesInTotal=friSStatsRRFramesInTotal, friPCfgNN2ErrsDuringMonitoredEvents=friPCfgNN2ErrsDuringMonitoredEvents, cdx6500SPCTFRIStationTable=cdx6500SPCTFRIStationTable, friPStatsTxLastCalledNumber=friPStatsTxLastCalledNumber, friSStatsPktsDiscardIn=friSStatsPktsDiscardIn, friPStatsPortNumber=friPStatsPortNumber, friPStatsNumTxCallsSinceLastReset=friPStatsNumTxCallsSinceLastReset, friDataSummPortNumber=friDataSummPortNumber, friPCfgT305=friPCfgT305, friPCfgT310=friPCfgT310, friSCfgT1RetryTimer=friSCfgT1RetryTimer, friSContPortNumber=friSContPortNumber, cdx6500friSGenStatsEntry=cdx6500friSGenStatsEntry, friISDNCallStatusPortNumber=friISDNCallStatusPortNumber, cdx6500PPSTFRIPortEntry=cdx6500PPSTFRIPortEntry, friPStatsCharInPerSec=friPStatsCharInPerSec, friSCfgRestartTimer=friSCfgRestartTimer, friSStatsSABMFramesOutTotal=friSStatsSABMFramesOutTotal, friSCfgCallControl=friSCfgCallControl, friSStatsPktsQueuedIn=friSStatsPktsQueuedIn, cdx6500PPSTFRIDataSummaryTable=cdx6500PPSTFRIDataSummaryTable, friSStatsCharOutPerSec=friSStatsCharOutPerSec, friSStatsPktInPerSec=friSStatsPktInPerSec, friSCfgBillingRecords=friSCfgBillingRecords, friSContStnNumber=friSContStnNumber, friSVoiceSummStatsStnNumber=friSVoiceSummStatsStnNumber, friPStatsLastUnknownDLCI=friPStatsLastUnknownDLCI, friPCfgN393MonitoredEvents=friPCfgN393MonitoredEvents, friSStatsDataPktOutTotal=friSStatsDataPktOutTotal, friPCfguniSSVP=friPCfguniSSVP, cdx6500=cdx6500, friPStatsNumRxCallsSinceLastReset=friPStatsNumRxCallsSinceLastReset, friSStatsDLCI=friSStatsDLCI, friPStatsCharOutTotal=friPStatsCharOutTotal, friSStatsCallReqPktInTotal=friSStatsCallReqPktInTotal, friSCfgCUGMembership=friSCfgCUGMembership, friSCfgBurstExcess=friSCfgBurstExcess, friSStatsVoiceCongDetect=friSStatsVoiceCongDetect, friPStatsAvFrameSizeOut=friPStatsAvFrameSizeOut, friSStatsAllowedInfoRate=friSStatsAllowedInfoRate, friSStatsCharOutTotal=friSStatsCharOutTotal, friSVoiceSummaryStatsTable=friSVoiceSummaryStatsTable, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, friPCfgN391PollCycle=friPCfgN391PollCycle, friPCfgT391Timer=friPCfgT391Timer, friSStatsCharInTotal=friSStatsCharInTotal, friSPktSummStatsStnNumber=friSPktSummStatsStnNumber, cdx6500ContFRITable=cdx6500ContFRITable, friPCfgNT1PollTimer=friPCfgNT1PollTimer, friSStatsPVCState=friSStatsPVCState, friSDataSummaryStatsTable=friSDataSummaryStatsTable, friSStatsVoicePktInPerSec=friSStatsVoicePktInPerSec, friPStatsFramesInPerSec=friPStatsFramesInPerSec, friSCfgCommInfoRate=friSCfgCommInfoRate, friSCfgLinkAddress=friSCfgLinkAddress, friSStatsFrameInPerSec=friSStatsFrameInPerSec, friPCfgElectricalInterfaceType=friPCfgElectricalInterfaceType, friPStatsFramesOutTotal=friPStatsFramesOutTotal, friSCfgStartingPVC=friSCfgStartingPVC, friSFRISummaryStatsTable=friSFRISummaryStatsTable, friPStatsStatusEnqSentLIV=friPStatsStatusEnqSentLIV, cdx6500PPSTFRIPStatsTable=cdx6500PPSTFRIPStatsTable, friPStatsUnderrunErrors=friPStatsUnderrunErrors, friPCfguniSegDelay=friPCfguniSegDelay, friPStatsCRCErrors=friPStatsCRCErrors, friSCfgInitialFrame=friSCfgInitialFrame, friSStatsStnStatus=friSStatsStnStatus, friPCfgT392Timer=friPCfgT392Timer, friSStatsStnType=friSStatsStnType, friPStatsPriorityStn=friPStatsPriorityStn, friSCfgRestrictedConnDest=friSCfgRestrictedConnDest, friPStatsSplittingRatio=friPStatsSplittingRatio, friSCfgPPacketSize=friSCfgPPacketSize, friPStatsTxMaxCallDuration=friPStatsTxMaxCallDuration, friPStatsTotalSegmentsLost=friPStatsTotalSegmentsLost, friSCfgCommBurstSize=friSCfgCommBurstSize, friPCfgV24ElectricalInterfaceOption=friPCfgV24ElectricalInterfaceOption, friSStatsREJFramesOutTotal=friSStatsREJFramesOutTotal, friSStatsCharInPerSec=friSStatsCharInPerSec, friSStatsFRMRFramesOutTotal=friSStatsFRMRFramesOutTotal, friSStatsDataPktInTotal=friSStatsDataPktInTotal, friSCfgDataQLowerThreshold=friSCfgDataQLowerThreshold, friSCfgCallTimer=friSCfgCallTimer, cdx6500PPSTFRISummaryTable=cdx6500PPSTFRISummaryTable, cdx6500FRISContTable=cdx6500FRISContTable, cdx6500Controls=cdx6500Controls, friSStatsVoicePktOutPerSec=friSStatsVoicePktOutPerSec, friSStatsDEOutTotal=friSStatsDEOutTotal, friSStatsResetConfPktOutTotal=friSStatsResetConfPktOutTotal, friPCfgDiscardControlOptions=friPCfgDiscardControlOptions, friPStatsFrameSegmenterSyncLost=friPStatsFrameSegmenterSyncLost, friSStatsConfiguredCIR=friSStatsConfiguredCIR, friSStatsFrameSegState=friSStatsFrameSegState, friSCfgIeNegotiation=friSCfgIeNegotiation, cdx6500PPSTFRIISDNCallStatusEntry=cdx6500PPSTFRIISDNCallStatusEntry, friPContPortControl=friPContPortControl, friSStatsPktInTotal=friSStatsPktInTotal, friPCfgSubscriberNumber=friPCfgSubscriberNumber, friSCfgCalledSubaddress=friSCfgCalledSubaddress, friPStatsOverrunErrors=friPStatsOverrunErrors, friSStatsFrameSegSyncLost=friSStatsFrameSegSyncLost, friSStatsRestartConfPktInTotal=friSStatsRestartConfPktInTotal, friSStatsDISCFramesOutTotal=friSStatsDISCFramesOutTotal, friSStatsClrReqPktInTotal=friSStatsClrReqPktInTotal, cdx6500Configuration=cdx6500Configuration, friPStatsRxAvgCallDuration=friPStatsRxAvgCallDuration, friSStatsUtilIn=friSStatsUtilIn, friSStatsBECNInTotal=friSStatsBECNInTotal, friPStatsPortStatus=friPStatsPortStatus, friPStatsRxLastCallFailureCause=friPStatsRxLastCallFailureCause, friSCfgVoiceSVCChannels=friSCfgVoiceSVCChannels, friSCfgStartingSVC=friSCfgStartingSVC, friSStatsCurrPVCCount=friSStatsCurrPVCCount)
mibBuilder.exportSymbols("FRI-OPT-MIB", friPCfgPortType=friPCfgPortType, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, friSStatsPktOutTotal=friSStatsPktOutTotal, friPCfgMaxVoiceBWBitsPerSec=friPCfgMaxVoiceBWBitsPerSec, friPCfgWindowK=friPCfgWindowK, friSGenStatsTable=friSGenStatsTable, friSCfgRetryInterval=friSCfgRetryInterval, friSFrameSummaryStatsTable=friSFrameSummaryStatsTable, friSCfgVoiceCongCtrlMode=friSCfgVoiceCongCtrlMode, friSStatsVoicePktOutTotal=friSStatsVoicePktOutTotal, friPStatsSPBackup=friPStatsSPBackup, friSStatsFrameInTotal=friSStatsFrameInTotal, friPCfgClockSpeed=friPCfgClockSpeed, friSStatsCurrSVCCount=friSStatsCurrSVCCount, friPStatsFullStatusRecd=friPStatsFullStatusRecd, friPCfgNT2VerificationTimer=friPCfgNT2VerificationTimer, friPStatsNumTxCallsRejected=friPStatsNumTxCallsRejected, friSCfgSubaddress=friSCfgSubaddress, friPStatsStatusEnqRecdFull=friPStatsStatusEnqRecdFull, friSStatsIntrReqPktInTotal=friSStatsIntrReqPktInTotal, friSStatsFECNOutTotal=friSStatsFECNOutTotal, friPCfgMaxFmif=friPCfgMaxFmif, cdx6500friSDataSummaryStatsEntry=cdx6500friSDataSummaryStatsEntry, friSummPortNumber=friSummPortNumber, friSDataSummStatsStnNumber=friSDataSummStatsStnNumber, friSCfgWPacketWindow=friSCfgWPacketWindow, friPStatsLIVStatusRecd=friPStatsLIVStatusRecd, friSCfgE2ESSVP=friSCfgE2ESSVP, friPStatsTxAvgCallDuration=friPStatsTxAvgCallDuration, friPStatsPortType=friPStatsPortType, friSCfgCongControlMode=friSCfgCongControlMode, friSStatsLastStatsReset=friSStatsLastStatsReset, friSStatsPktOutPerSec=friSStatsPktOutPerSec, friSCfgKFrameWindow=friSCfgKFrameWindow, friSPktSummStatsPortNumber=friSPktSummStatsPortNumber, cdx6500SPCTFRIStationEntry=cdx6500SPCTFRIStationEntry, friSStatsRNRFramesOutTotal=friSStatsRNRFramesOutTotal, friSStatsUAFramesInTotal=friSStatsUAFramesInTotal, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, friPStatsVoiceBWOnPort=friPStatsVoiceBWOnPort, friPStatsRxMinCallDuration=friPStatsRxMinCallDuration, friPStatsFramesInTotal=friPStatsFramesInTotal, friPStatsTxLastCallFailureCause=friPStatsTxLastCallFailureCause, friSContStnControl=friSContStnControl, friSStatsIntrConfPktOutTotal=friSStatsIntrConfPktOutTotal, friSStatsClrReqPktOutTotal=friSStatsClrReqPktOutTotal, friSStatsPktsDiscardOut=friSStatsPktsDiscardOut, friSStatsVoiceCharInTotal=friSStatsVoiceCharInTotal, friSStatsRNRPktOutTotal=friSStatsRNRPktOutTotal, cdx6500PCTStationProtocolGroup=cdx6500PCTStationProtocolGroup, friPCfgFrameSeqCounting=friPCfgFrameSeqCounting, friSCfgPortNumber=friSCfgPortNumber, friPCfgT203=friPCfgT203, friPStatsMaxContiguousSegmentsLost=friPStatsMaxContiguousSegmentsLost, friSStatsREJPktInTotal=friSStatsREJPktInTotal, friPStatsSignalingState=friPStatsSignalingState, friSCfgDataQUpperThreshold=friSCfgDataQUpperThreshold, cdx6500PPSTFRIDataSummaryEntry=cdx6500PPSTFRIDataSummaryEntry, friSStatsUtilOut=friSStatsUtilOut, friPContPortNumber=friPContPortNumber, friPCfgN200=friPCfgN200, friSStatsRNRFramesInTotal=friSStatsRNRFramesInTotal, friSCfgAnnexGRateReduction=friSCfgAnnexGRateReduction, friSCfgCalledNumber=friSCfgCalledNumber, friPCfgPktSeqCounting=friPCfgPktSeqCounting, friSCfgN2TransmissionTries=friSCfgN2TransmissionTries, friPCfgNN3MonitoredEvents=friPCfgNN3MonitoredEvents)
