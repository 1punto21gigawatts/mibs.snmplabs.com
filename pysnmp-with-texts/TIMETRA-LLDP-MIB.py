#
# PySNMP MIB module TIMETRA-LLDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-LLDP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:18:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
LldpPortId, LldpChassisIdSubtype, lldpLocManAddrSubtype, LldpManAddrIfSubtype, LldpPortIdSubtype, LldpChassisId, lldpLocManAddr, LldpManAddress, LldpSystemCapabilitiesMap = mibBuilder.importSymbols("LLDP-MIB", "LldpPortId", "LldpChassisIdSubtype", "lldpLocManAddrSubtype", "LldpManAddrIfSubtype", "LldpPortIdSubtype", "LldpChassisId", "lldpLocManAddr", "LldpManAddress", "LldpSystemCapabilitiesMap")
TimeFilter, ZeroBasedCounter32 = mibBuilder.importSymbols("RMON2-MIB", "TimeFilter", "ZeroBasedCounter32")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, iso, Integer32, Counter64, IpAddress, TimeTicks, Gauge32, Unsigned32, Counter32, ObjectIdentity, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "iso", "Integer32", "Counter64", "IpAddress", "TimeTicks", "Gauge32", "Unsigned32", "Counter32", "ObjectIdentity", "Bits", "ModuleIdentity")
TextualConvention, TruthValue, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "MacAddress")
timetraSRMIBModules, tmnxSRNotifyPrefix, tmnxSRConfs, tmnxSRObjs = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "timetraSRMIBModules", "tmnxSRNotifyPrefix", "tmnxSRConfs", "tmnxSRObjs")
TmnxEnabledDisabled, = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TmnxEnabledDisabled")
tmnxLldpMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 59))
tmnxLldpMIBModule.setRevisions(('1909-02-28 00:00', '1902-02-02 02:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tmnxLldpMIBModule.setRevisionsDescriptions(('Rev 7.0 28 Feb 2009 00:00 7.0 release of the TIMETRA-LLDP-MIB.', 'Rev 0.1 26 May 2008 00:00 Initial version of the TIMETRA-LLDP-MIB.',))
if mibBuilder.loadTexts: tmnxLldpMIBModule.setLastUpdated('0902280000Z')
if mibBuilder.loadTexts: tmnxLldpMIBModule.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: tmnxLldpMIBModule.setContactInfo('Alcatel-Lucent SROS Support Web: http://support.alcatel-lucent.com')
if mibBuilder.loadTexts: tmnxLldpMIBModule.setDescription("This document is the SNMP MIB module to manage and provision LLDP on the Alcatel-Lucent SROS device. Copyright 2008-2011 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel-Lucent's proprietary intellectual property. Alcatel-Lucent retains all title and ownership in the Specification, including any revisions. Alcatel-Lucent grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel-Lucent products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel-Lucent makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tmnxLldpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 59))
tmnxLldpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59))
tmnxLldpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 59))
tmnxLldpConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 1))
tmnxLldpStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 2))
tmnxLldpLocalSystemData = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 3))
tmnxLldpRemoteSystemsData = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4))
class TmnxLldpDestAddressTableIndex(TextualConvention, Integer32):
    description = 'An index value, used as the index to the table of destination MAC addresses used both as the destination addresses on transmitted LLDPDUs and on received LLDPDUs. This index value is also used as a secondary index value in tables indexed by fields of type ifIndex, in order to associate a destination address with each row of the table.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4096)

class TmnxLldpManAddressIndex(TextualConvention, Integer32):
    description = 'An Index value, used as the index to the table of local port management addresses, tmnxLldpConfigManAddrPortsTable. The index represents a specific local management address application on the system which may, or may not exist.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("system", 1))

tmnxLldpTxCreditMax = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxLldpTxCreditMax.setReference('IEEE Std 802.1AB-200X 10.2.5.16')
if mibBuilder.loadTexts: tmnxLldpTxCreditMax.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpTxCreditMax.setDescription('The maximum number of consecutive LLDPDUs that can be transmitted at any time. The default value for tmnxLldpTxCreditMax object is 5. The value of this object must be restored from non-volatile storage after a re-initialization of the management system.')
tmnxLldpMessageFastTx = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxLldpMessageFastTx.setReference('IEEE Std 802.1AB-200X 10.2.5.3')
if mibBuilder.loadTexts: tmnxLldpMessageFastTx.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpMessageFastTx.setDescription('The interval at which LLDP frames are transmitted on behalf of this LLDP agent during fast transmission period (e.g. when a new neighbor is detected). The default value for tmnxLldpMessageFastTx object is 1 second. The value of this object must be restored from non-volatile storage after a re-initialization of the management system.')
tmnxLldpMessageFastTxInit = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxLldpMessageFastTxInit.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpMessageFastTxInit.setDescription('The tmnxLldpMessageFastTxInit specifies the number of PDUs to transmit during a fast transmission period.')
tmnxLldpAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 1, 4), TmnxEnabledDisabled()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxLldpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpAdminStatus.setDescription("The tmnxLldpAdminStatus specifies whether or not LLDP is operationally 'enabled(1)' on the system, or 'disabled(2).' This is a system-wide configuration and overrides the individual port admin status.")
tmnxLldpPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 1, 5), )
if mibBuilder.loadTexts: tmnxLldpPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpPortConfigTable.setDescription('The table that controls LLDP frame transmission on individual ports and using particular destination MAC addresses.')
tmnxLldpPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TIMETRA-LLDP-MIB", "tmnxLldpPortCfgDestAddressIndex"))
if mibBuilder.loadTexts: tmnxLldpPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpPortConfigEntry.setDescription('LLDP configuration information for a particular port and destination MAC address. This configuration parameter controls the transmission and the reception of LLDP frames on those interface/address combinations whose rows are created in this table. Rows in this table can only be created for MAC addresses that can validly be used in association with the type of interface concerned, as defined by table 8-2. The contents of this table is persistent across re-initializations or re-boots.')
tmnxLldpPortCfgDestAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 1, 5, 1, 1), TmnxLldpDestAddressTableIndex())
if mibBuilder.loadTexts: tmnxLldpPortCfgDestAddressIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpPortCfgDestAddressIndex.setDescription('The index value used to identify the destination MAC address associated with this entry. Its value identifies the row in the tmnxLldpPortConfigTable where the MAC address can be found.')
tmnxLldpPortCfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txOnly", 1), ("rxOnly", 2), ("txAndRx", 3), ("disabled", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxLldpPortCfgAdminStatus.setReference('IEEE 802.1AB-2005 10.5.1')
if mibBuilder.loadTexts: tmnxLldpPortCfgAdminStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpPortCfgAdminStatus.setDescription("The administratively desired status of the local LLDP agent. If the associated tmnxLldpPortCfgAdminStatus object has a value of 'txOnly(1)', then LLDP agent will transmit LLDP frames on this port and it will not store any information about the remote systems connected. If the associated tmnxLldpPortCfgAdminStatus object has a value of 'rxOnly(2)', then the LLDP agent will receive, but it will not transmit LLDP frames on this port. If the associated tmnxLldpPortCfgAdminStatus object has a value of 'txAndRx(3)', then the LLDP agent will transmit and receive LLDP frames on this port. If the associated tmnxLldpPortCfgAdminStatus object has a value of 'disabled(4)', then LLDP agent will not transmit or receive LLDP frames on this port. If there is remote systems information which is received on this port and stored in other tables, before the port's tmnxLldpPortCfgAdminStatus becomes disabled, then the information will naturally age out.")
tmnxLldpPortCfgNotifyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 1, 5, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxLldpPortCfgNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpPortCfgNotifyEnable.setDescription('The tmnxLldpPortCfgNotifyEnable controls, on a per port basis, whether or not notifications from the agent are enabled. The value true(1) means that notifications are enabled; the value false(2) means that they are not.')
tmnxLldpPortCfgTLVsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 1, 5, 1, 4), Bits().clone(namedValues=NamedValues(("portDesc", 0), ("sysName", 1), ("sysDesc", 2), ("sysCap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxLldpPortCfgTLVsTxEnable.setReference('IEEE 802.1AB-2005 10.2.1.1')
if mibBuilder.loadTexts: tmnxLldpPortCfgTLVsTxEnable.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpPortCfgTLVsTxEnable.setDescription("The tmnxLldpPortCfgTLVsTxEnable, defined as a bitmap, includes the basic set of LLDP TLVs whose transmission is allowed on the local LLDP agent by the network management. Each bit in the bitmap corresponds to a TLV type associated with a specific optional TLV. It should be noted that the organizationally-specific TLVs are excluded from the tmnxLldpPortCfgTLVsTxEnable bitmap. LLDP Organization Specific Information Extension MIBs should have similar configuration object to control transmission of their organizationally defined TLVs. The bit 'portDesc(0)' indicates that LLDP agent should transmit 'Port Description TLV'. The bit 'sysName(1)' indicates that LLDP agent should transmit 'System Name TLV'. The bit 'sysDesc(2)' indicates that LLDP agent should transmit 'System Description TLV'. The bit 'sysCap(3)' indicates that LLDP agent should transmit 'System Capabilities TLV'. There is no bit reserved for the management address TLV type since transmission of management address TLVs are controlled by another object. The default value for tmnxLldpPortCfgTLVsTxEnable object is empty set, which means no enumerated values are set. The value of this object must be restored from non-volatile storage after a re-initialization of the management system.")
tmnxLldpConfigManAddrPortsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 1, 6), )
if mibBuilder.loadTexts: tmnxLldpConfigManAddrPortsTable.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpConfigManAddrPortsTable.setDescription('The table that controls selection of LLDP management address TLV instances to be transmitted on individual ports.')
tmnxLldpConfigManAddrPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TIMETRA-LLDP-MIB", "tmnxLldpPortCfgDestAddressIndex"), (0, "TIMETRA-LLDP-MIB", "tmnxLldpPortCfgAddressIndex"))
if mibBuilder.loadTexts: tmnxLldpConfigManAddrPortsEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpConfigManAddrPortsEntry.setDescription('LLDP configuration information that specifies the set of ports on which the local system management address instance will be transmitted. This configuration object joins the tmnxLldpPortConfigTable and the lldpLocManAddrTable. An entry exists for each Port/Management address in the system. Rows are auto-created by the system when ports are provisioned.')
tmnxLldpPortCfgAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 1, 6, 1, 1), TmnxLldpManAddressIndex())
if mibBuilder.loadTexts: tmnxLldpPortCfgAddressIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpPortCfgAddressIndex.setDescription('The tmnxLldpPortCfgAddressIndex represents the system man address associated with a particular row in the tmnxLldpConfigManAddrPortsTable.')
tmnxLldpPortCfgManAddrTxEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 1, 6, 1, 2), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxLldpPortCfgManAddrTxEnabled.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpPortCfgManAddrTxEnabled.setDescription('The tmnxLldpPortCfgManAddrTxEnabled specifies whether the port and MAC address will transmit the managment address information.')
tmnxLldpPortCfgManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 1, 6, 1, 3), AddressFamilyNumbers()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpPortCfgManAddrSubtype.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpPortCfgManAddrSubtype.setDescription("The tmnxLldpPortCfgManAddrSubtype indicates the management address representation in the tmnxLldpPortCfgManAddress object. The value of 'other (0)' indicates that no management address is in use.")
tmnxLldpPortCfgManAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 1, 6, 1, 4), LldpManAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpPortCfgManAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpPortCfgManAddress.setDescription('The tmnxLldpPortCfgManAddress indicates the management address used by the tmnxLldpPortCfgAddressIndex.')
tmnxLldpDestAddressTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 1, 7), )
if mibBuilder.loadTexts: tmnxLldpDestAddressTable.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpDestAddressTable.setDescription('The table that contains the set of MAC addresses used by LLDP for transmission and reception of LLDPDUs.')
tmnxLldpDestAddressTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 1, 7, 1), ).setIndexNames((0, "TIMETRA-LLDP-MIB", "tmnxLldpAddressTableIndex"))
if mibBuilder.loadTexts: tmnxLldpDestAddressTableEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpDestAddressTableEntry.setDescription('Destination MAC address information for LLDP. This configuration parameter identifies a MAC address corresponding to a TmnxLldpDestAddressTableIndex value. Rows in this table are created as necessary, to support MAC addresses needed by other tables in the MIB that are indexed by MAC address. A given row in this table cannot be deleted if the MAC address table index value is in use in any other table in the MIB. The contents of this table is persistent across re-initializations or re-boots.')
tmnxLldpAddressTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 1, 7, 1, 1), TmnxLldpDestAddressTableIndex())
if mibBuilder.loadTexts: tmnxLldpAddressTableIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpAddressTableIndex.setDescription('The index value used to identify the destination MAC address associated with this entry. The value of this object is used as an index to the tmnxLldpDestAddressTable.')
tmnxLldpDestMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 1, 7, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpDestMacAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpDestMacAddress.setDescription('The MAC address associated with this entry. The octet string identifies an individual or a group MAC address that is in use by LLDP as a destination MAC address. The MAC address is encoded in the octet string in canonical format (see IEEE Std 802).')
tmnxLldpStatsTxPortTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 2, 1), )
if mibBuilder.loadTexts: tmnxLldpStatsTxPortTable.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpStatsTxPortTable.setDescription("A table containing LLDP transmission statistics for individual port/destination address combinations. Entries are not required to exist in this table while the tmnxLldpPortConfigEntry object is equal to 'disabled(4)'.")
tmnxLldpStatsTxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TIMETRA-LLDP-MIB", "tmnxLldpStatsTxDestMACAddress"))
if mibBuilder.loadTexts: tmnxLldpStatsTxPortEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpStatsTxPortEntry.setDescription('LLDP frame transmission statistics for a particular port and destination MAC address. The port must be contained in the same chassis as the LLDP agent. All counter values in a particular entry shall be maintained on a continuing basis and shall not be deleted upon expiration of rx Info TTL timing counters in the LLDP remote systems MIB of the receipt of a shutdown frame from a remote LLDP agent. All statistical counters associated with a particular port on the local LLDP agent become frozen whenever the admin status is disabled for the same port. Rows in this table can only be created for MAC addresses that can validly be used in association with the type of interface concerned, as defined by table 8-2. The contents of this table is persistent across re-initializations or re-boots.')
tmnxLldpStatsTxDestMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 2, 1, 1, 1), TmnxLldpDestAddressTableIndex())
if mibBuilder.loadTexts: tmnxLldpStatsTxDestMACAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpStatsTxDestMACAddress.setDescription('The index value used to identify the destination MAC address associated with this entry. Its value identifies the row in the tmnxLldpPortConfigTable where the MAC address can be found. The value of this object is used as an index to the tmnxLldpStatsTxPortTable.')
tmnxLldpStatsTxPortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpStatsTxPortFrames.setReference('IEEE Std 802.1AB-200X 10.5.2')
if mibBuilder.loadTexts: tmnxLldpStatsTxPortFrames.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpStatsTxPortFrames.setDescription('The number of LLDP frames transmitted by this LLDP agent on the indicated port.')
tmnxLldpStatsTxLLDPDULengthErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpStatsTxLLDPDULengthErrs.setReference('IEEE Std 802.1AB-200X 10.2.7.2')
if mibBuilder.loadTexts: tmnxLldpStatsTxLLDPDULengthErrs.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpStatsTxLLDPDULengthErrs.setDescription('The number of LLDPD Length Errors recorded for the Port.')
tmnxLldpStatsRxPortTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 2, 2), )
if mibBuilder.loadTexts: tmnxLldpStatsRxPortTable.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpStatsRxPortTable.setDescription("A table containing LLDP reception statistics for individual ports and destination MAC addresses. Entries are not required to exist in this table while the tmnxLldpPortCfgAdminStatus object is equal to 'disabled(4)'.")
tmnxLldpStatsRxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TIMETRA-LLDP-MIB", "tmnxLldpStatsRxDestMACAddress"))
if mibBuilder.loadTexts: tmnxLldpStatsRxPortEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpStatsRxPortEntry.setDescription('LLDP frame reception statistics for a particular port. The port must be contained in the same chassis as the LLDP agent. All counter values in a particular entry shall be maintained on a continuing basis and shall not be deleted upon expiration of rx Info TTL timing counters in the LLDP remote systems MIB of the receipt of a shutdown frame from a remote LLDP agent. All statistical counters associated with a particular port on the local LLDP agent become frozen whenever the admin status is disabled for the same port. Rows in this table can only be created for MAC addresses that can validly be used in association with the type of interface concerned, as defined by table 8-2. The contents of this table is persistent across re-initializations or re-boots.')
tmnxLldpStatsRxDestMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 2, 2, 1, 1), TmnxLldpDestAddressTableIndex())
if mibBuilder.loadTexts: tmnxLldpStatsRxDestMACAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpStatsRxDestMACAddress.setDescription('The index value used to identify the destination MAC address associated with this entry. Its value identifies the row in the tmnxLldpStatsRxPortTable where the MAC address can be found.')
tmnxLldpStatsRxPortFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpStatsRxPortFrameDiscard.setReference('IEEE Std 802.1AB-200X 10.5.2')
if mibBuilder.loadTexts: tmnxLldpStatsRxPortFrameDiscard.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpStatsRxPortFrameDiscard.setDescription('The number of LLDP frames received by this LLDP agent on the indicated port, and then discarded for any reason. This counter can provide an indication that LLDP header formating problems may exist with the local LLDP agent in the sending system or that LLDPDU validation problems may exist with the local LLDP agent in the receiving system.')
tmnxLldpStatsRxPortFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpStatsRxPortFrameErrs.setReference('IEEE Std 802.1AB-200X 10.5.2')
if mibBuilder.loadTexts: tmnxLldpStatsRxPortFrameErrs.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpStatsRxPortFrameErrs.setDescription('The number of invalid LLDP frames received by this LLDP agent on the indicated port, while this LLDP agent is enabled.')
tmnxLldpStatsRxPortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpStatsRxPortFrames.setReference('IEEE Std 802.1AB-200X 10.5.2')
if mibBuilder.loadTexts: tmnxLldpStatsRxPortFrames.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpStatsRxPortFrames.setDescription('The number of valid LLDP frames received by this LLDP agent on the indicated port, while this LLDP agent is enabled.')
tmnxLldpStatsRxPortTLVDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpStatsRxPortTLVDiscard.setReference('IEEE Std 802.1AB-200X 10.5.2')
if mibBuilder.loadTexts: tmnxLldpStatsRxPortTLVDiscard.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpStatsRxPortTLVDiscard.setDescription('The number of LLDP TLVs discarded for any reason by this LLDP agent on the indicated port.')
tmnxLldpStatsRxPortTLVUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpStatsRxPortTLVUnknown.setReference('IEEE Std 802.1AB-200X 10.5.2')
if mibBuilder.loadTexts: tmnxLldpStatsRxPortTLVUnknown.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpStatsRxPortTLVUnknown.setDescription('The number of LLDP TLVs received on the given port that are not recognized by this LLDP agent on the indicated port. An unrecognized TLV is referred to as the TLV whose type value is in the range of reserved TLV types (000 1001 - 111 1110) in Table 9.1 of IEEE Std 802.1AB-2004. An unrecognized TLV may be a basic management TLV from a later LLDP version.')
tmnxLldpStatsRxPortAgeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 2, 2, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpStatsRxPortAgeouts.setReference('IEEE Std 802.1AB-200X 10.5.2')
if mibBuilder.loadTexts: tmnxLldpStatsRxPortAgeouts.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpStatsRxPortAgeouts.setDescription("The counter that represents the number of age-outs that occurred on a given port. An age-out is the number of times the complete set of information advertised by a particular MSAP has been deleted from tables contained in tmnxLldpRemoteSystemsData and lldpExtensions objects because the information timeliness interval has expired. This counter is similar to lldpStatsRemTablesAgeouts, except that the counter is on a per port basis. This enables NMS to poll tables associated with the tmnxLldpRemoteSystemsData objects and all LLDP extension objects associated with remote systems on the indicated port only. This counter should be set to zero during agent initialization and its value should not be saved in non-volatile storage. When a port's admin status changes from 'disabled' to 'rxOnly', 'txOnly' or 'txAndRx', the counter associated with the same port should reset to 0. The agent should also flush all remote system information associated with the same port. This counter should be incremented only once when the complete set of information is invalidated (aged out) from all related tables on a particular port. Partial ageing is not allowed, and thus, should not change the value of this counter.")
tmnxLldpLocPortTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 3, 1), )
if mibBuilder.loadTexts: tmnxLldpLocPortTable.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpLocPortTable.setDescription('This table contains one or more rows, per port and destination MAC address, of information associated with the local system known to this agent.')
tmnxLldpLocPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TIMETRA-LLDP-MIB", "tmnxLldpLocPortDestMACAddress"))
if mibBuilder.loadTexts: tmnxLldpLocPortEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpLocPortEntry.setDescription('Information about a particular port component. Entries may be created and deleted in this table by the agent. Rows in this table can only be created for MAC addresses that can validly be used in association with the type of interface concerned, as defined by table 8-2. The contents of this table is persistent across re-initializations or re-boots.')
tmnxLldpLocPortDestMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 3, 1, 1, 1), TmnxLldpDestAddressTableIndex())
if mibBuilder.loadTexts: tmnxLldpLocPortDestMACAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpLocPortDestMACAddress.setDescription('The index value used to identify the destination MAC address associated with this entry. Its value identifies the row in the tmnxLldpLocPortTable where the MAC address can be found.')
tmnxLldpLocPortIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 3, 1, 1, 2), LldpPortIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpLocPortIdSubtype.setReference('IEEE Std 802.1AB-200X 9.5.3.2')
if mibBuilder.loadTexts: tmnxLldpLocPortIdSubtype.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpLocPortIdSubtype.setDescription("The type of port identifier encoding used in the associated 'lldpLocPortId' object.")
tmnxLldpLocPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 3, 1, 1, 3), LldpPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpLocPortId.setReference('IEEE Std 802.1AB-200X 9.5.3.3')
if mibBuilder.loadTexts: tmnxLldpLocPortId.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpLocPortId.setDescription('The string value used to identify the port component associated with a given port in the local system.')
tmnxLldpLocPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpLocPortDesc.setReference('IEEE Std 802.1AB-200X 9.5.5.2')
if mibBuilder.loadTexts: tmnxLldpLocPortDesc.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpLocPortDesc.setDescription("The string value used to identify the IEEE 802 LAN station's port description associated with the local system. If the local agent supports IETF RFC 2863, tmnxLldpLocPortDesc object should have the same value of ifDescr object.")
tmnxLldpRemTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4, 1), )
if mibBuilder.loadTexts: tmnxLldpRemTable.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemTable.setDescription('This table contains one or more rows per physical network connection known to this agent. The agent may wish to ensure that only one tmnxLldpRemEntry is present for each local port and destination MAC address, or it may choose to maintain multiple tmnxLldpRemEntry rows for the same local port and destination MAC address. The following procedure may be used to retrieve remote systems information updates from an LLDP agent: 1. NMS polls all tables associated with remote systems and keeps a local copy of the information retrieved. NMS polls periodically the values of the following objects: a. lldpStatsRemTablesInserts b. lldpStatsRemTablesDeletes c. lldpStatsRemTablesDrops d. lldpStatsRemTablesAgeouts e. tmnxLldpStatsRxPortAgeouts for all ports. 2. LLDP agent updates remote systems MIB objects, and sends out notifications to a list of notification destinations. 3. NMS receives the notifications and compares the new values of objects listed in step 1. Periodically, NMS should poll the object lldpStatsRemTablesLastChangeTime to find out if anything has changed since the last poll. if something has changed, NMS will poll the objects listed in step 1 to figure out what kind of changes occurred in the tables. if value of lldpStatsRemTablesInserts has changed, then NMS will walk all tables by employing TimeFilter with the last-polled time value. This request will return new objects or objects whose values are updated since the last poll. if value of lldpStatsRemTablesAgeouts has changed, then NMS will walk the tmnxLldpStatsRxPortAgeouts and compare the new values with previously recorded ones. For ports whose tmnxLldpStatsRxPortAgeouts value is greater than the recorded value, NMS will have to retrieve objects associated with those ports from table(s) without employing a TimeFilter (which is performed by specifying 0 for the TimeFilter.) lldpStatsRemTablesDeletes and lldpStatsRemTablesDrops objects are provided for informational purposes.')
tmnxLldpRemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4, 1, 1), ).setIndexNames((0, "TIMETRA-LLDP-MIB", "tmnxLldpRemTimeMark"), (0, "IF-MIB", "ifIndex"), (0, "TIMETRA-LLDP-MIB", "tmnxLldpRemLocalDestMACAddress"), (0, "TIMETRA-LLDP-MIB", "tmnxLldpRemIndex"))
if mibBuilder.loadTexts: tmnxLldpRemEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemEntry.setDescription('Information about a particular physical network connection. Entries may be created and deleted in this table by the agent, if a physical topology discovery process is active. Rows in this table can only be created for MAC addresses that can validly be used in association with the type of interface concerned, as defined by table 8-2. The contents of this table is persistent across re-initializations or re-boots.')
tmnxLldpRemTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4, 1, 1, 1), TimeFilter())
if mibBuilder.loadTexts: tmnxLldpRemTimeMark.setReference('IETF RFC 4502 section 6')
if mibBuilder.loadTexts: tmnxLldpRemTimeMark.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemTimeMark.setDescription('A TimeFilter for this entry. See the TimeFilter textual convention in IETF RFC 4502 and http://www.ietf.org/IESG/Implementations/RFC2021-Implementation.txt to see how TimeFilter works.')
tmnxLldpRemLocalDestMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4, 1, 1, 2), TmnxLldpDestAddressTableIndex())
if mibBuilder.loadTexts: tmnxLldpRemLocalDestMACAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemLocalDestMACAddress.setDescription('The index value used to identify the destination MAC address associated with this entry. Its value identifies the row in the tmnxLldpRemTable where the MAC address can be found.')
tmnxLldpRemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: tmnxLldpRemIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemIndex.setDescription('This object represents an arbitrary local integer value used by this agent to identify a particular connection instance, unique only for the indicated remote system. An agent is encouraged to assign monotonically increasing index values to new entries, starting with one, after each reboot. It is considered unlikely that the tmnxLldpRemIndex will wrap between reboots.')
tmnxLldpRemChassisIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4, 1, 1, 4), LldpChassisIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpRemChassisIdSubtype.setReference('IEEE Std 802.1AB-200X 9.5.2.2')
if mibBuilder.loadTexts: tmnxLldpRemChassisIdSubtype.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemChassisIdSubtype.setDescription('The type of encoding used to identify the chassis associated with the remote system.')
tmnxLldpRemChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4, 1, 1, 5), LldpChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpRemChassisId.setReference('IEEE Std 802.1AB-200X 9.5.2.3')
if mibBuilder.loadTexts: tmnxLldpRemChassisId.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemChassisId.setDescription('The string value used to identify the chassis component associated with the remote system.')
tmnxLldpRemPortIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4, 1, 1, 6), LldpPortIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpRemPortIdSubtype.setReference('IEEE Std 802.1AB-200X 9.5.3.2')
if mibBuilder.loadTexts: tmnxLldpRemPortIdSubtype.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemPortIdSubtype.setDescription("The type of port identifier encoding used in the associated 'lldpRemPortId' object.")
tmnxLldpRemPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4, 1, 1, 7), LldpPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpRemPortId.setReference('IEEE Std 802.1AB-200X 9.5.3.3')
if mibBuilder.loadTexts: tmnxLldpRemPortId.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemPortId.setDescription('The string value used to identify the port component associated with the remote system.')
tmnxLldpRemPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpRemPortDesc.setReference('IEEE Std 802.1AB-200X 9.5.5.2')
if mibBuilder.loadTexts: tmnxLldpRemPortDesc.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemPortDesc.setDescription('The string value used to identify the description of the given port associated with the remote system.')
tmnxLldpRemSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpRemSysName.setReference('IEEE Std 802.1AB-200X 9.5.6.2')
if mibBuilder.loadTexts: tmnxLldpRemSysName.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemSysName.setDescription('The string value used to identify the system name of the remote system.')
tmnxLldpRemSysDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpRemSysDesc.setReference('IEEE Std 802.1AB-200X 9.5.7.2')
if mibBuilder.loadTexts: tmnxLldpRemSysDesc.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemSysDesc.setDescription('The string value used to identify the system description of the remote system.')
tmnxLldpRemSysCapSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4, 1, 1, 11), LldpSystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpRemSysCapSupported.setReference('IEEE Std 802.1AB-200X 9.5.8.1')
if mibBuilder.loadTexts: tmnxLldpRemSysCapSupported.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemSysCapSupported.setDescription('The bitmap value used to identify which system capabilities are supported on the remote system.')
tmnxLldpRemSysCapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4, 1, 1, 12), LldpSystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpRemSysCapEnabled.setReference('IEEE Std 802.1AB-200X 9.5.8.2')
if mibBuilder.loadTexts: tmnxLldpRemSysCapEnabled.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemSysCapEnabled.setDescription('The bitmap value used to identify which system capabilities are enabled on the remote system.')
tmnxLldpRemManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4, 2), )
if mibBuilder.loadTexts: tmnxLldpRemManAddrTable.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemManAddrTable.setDescription('This table contains one or more rows per management address information on the remote system learned on a particular port contained in the local chassis known to this agent.')
tmnxLldpRemManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4, 2, 1), ).setIndexNames((0, "TIMETRA-LLDP-MIB", "tmnxLldpRemTimeMark"), (0, "IF-MIB", "ifIndex"), (0, "TIMETRA-LLDP-MIB", "tmnxLldpRemLocalDestMACAddress"), (0, "TIMETRA-LLDP-MIB", "tmnxLldpRemIndex"), (0, "TIMETRA-LLDP-MIB", "tmnxLldpRemManAddrSubtype"), (0, "TIMETRA-LLDP-MIB", "tmnxLldpRemManAddr"))
if mibBuilder.loadTexts: tmnxLldpRemManAddrEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemManAddrEntry.setDescription("Management address information about a particular chassis component. There may be multiple management addresses configured on the remote system identified by a particular tmnxLldpRemIndex whose information is received on ifIndex and tmnxLldpRemLocalDestMACAddress of the local system. Each management address should have distinct 'management address type' (tmnxLldpRemManAddrSubtype) and 'management address' (tmnxLldpRemManAddr.) Entries may be created and deleted in this table by the agent.")
tmnxLldpRemManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4, 2, 1, 1), AddressFamilyNumbers())
if mibBuilder.loadTexts: tmnxLldpRemManAddrSubtype.setReference('IEEE 802.1AB-2005 9.5.9.3')
if mibBuilder.loadTexts: tmnxLldpRemManAddrSubtype.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemManAddrSubtype.setDescription("The type of management address identifier encoding used in the associated 'lldpRemManagmentAddr' object.")
tmnxLldpRemManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4, 2, 1, 2), LldpManAddress())
if mibBuilder.loadTexts: tmnxLldpRemManAddr.setReference('IEEE 802.1AB-2005 9.5.9.4')
if mibBuilder.loadTexts: tmnxLldpRemManAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemManAddr.setDescription('The string value used to identify the management address component associated with the remote system. The purpose of this address is to contact the management entity.')
tmnxLldpRemManAddrIfSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4, 2, 1, 3), LldpManAddrIfSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpRemManAddrIfSubtype.setReference('IEEE 802.1AB-2005 9.5.9.5')
if mibBuilder.loadTexts: tmnxLldpRemManAddrIfSubtype.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemManAddrIfSubtype.setDescription('The enumeration value that identifies the interface numbering method used for defining the interface number, associated with the remote system.')
tmnxLldpRemManAddrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpRemManAddrIfId.setReference('IEEE 802.1AB-2005 9.5.9.6')
if mibBuilder.loadTexts: tmnxLldpRemManAddrIfId.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemManAddrIfId.setDescription('The integer value used to identify the interface number regarding the management address component associated with the remote system.')
tmnxLldpRemManAddrOID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 59, 4, 2, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLldpRemManAddrOID.setReference('IEEE 802.1AB-2005 9.5.9.8')
if mibBuilder.loadTexts: tmnxLldpRemManAddrOID.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemManAddrOID.setDescription('The OID value used to identify the type of hardware component or protocol entity associated with the management address advertised by the remote system agent.')
tmnxLldpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 59, 1))
tmnxLldpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 59, 2))
tmnxLldpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 59, 1, 1)).setObjects(("TIMETRA-LLDP-MIB", "tmnxLldpConfigGroup"), ("TIMETRA-LLDP-MIB", "tmnxLldpStatsRxGroup"), ("TIMETRA-LLDP-MIB", "tmnxLldpStatsTxGroup"), ("TIMETRA-LLDP-MIB", "tmnxLldpLocSysGroup"), ("TIMETRA-LLDP-MIB", "tmnxLldpRemSysGroup"), ("TIMETRA-LLDP-MIB", "tmnxLldpRemManAddrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLldpCompliance = tmnxLldpCompliance.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpCompliance.setDescription('The compliance statement for SNMP entities which implement the LLDP MIB.')
tmnxLldpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 59, 2, 1)).setObjects(("TIMETRA-LLDP-MIB", "tmnxLldpTxCreditMax"), ("TIMETRA-LLDP-MIB", "tmnxLldpMessageFastTx"), ("TIMETRA-LLDP-MIB", "tmnxLldpMessageFastTxInit"), ("TIMETRA-LLDP-MIB", "tmnxLldpAdminStatus"), ("TIMETRA-LLDP-MIB", "tmnxLldpPortCfgAdminStatus"), ("TIMETRA-LLDP-MIB", "tmnxLldpPortCfgNotifyEnable"), ("TIMETRA-LLDP-MIB", "tmnxLldpPortCfgTLVsTxEnable"), ("TIMETRA-LLDP-MIB", "tmnxLldpPortCfgManAddrTxEnabled"), ("TIMETRA-LLDP-MIB", "tmnxLldpPortCfgManAddrSubtype"), ("TIMETRA-LLDP-MIB", "tmnxLldpPortCfgManAddress"), ("TIMETRA-LLDP-MIB", "tmnxLldpDestMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLldpConfigGroup = tmnxLldpConfigGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpConfigGroup.setDescription('The collection of objects which are used to configure the LLDP implementation behavior. This group is mandatory for agents which implement the LLDP.')
tmnxLldpStatsRxGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 59, 2, 2)).setObjects(("TIMETRA-LLDP-MIB", "tmnxLldpStatsRxPortFrameDiscard"), ("TIMETRA-LLDP-MIB", "tmnxLldpStatsRxPortFrameErrs"), ("TIMETRA-LLDP-MIB", "tmnxLldpStatsRxPortFrames"), ("TIMETRA-LLDP-MIB", "tmnxLldpStatsRxPortTLVDiscard"), ("TIMETRA-LLDP-MIB", "tmnxLldpStatsRxPortTLVUnknown"), ("TIMETRA-LLDP-MIB", "tmnxLldpStatsRxPortAgeouts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLldpStatsRxGroup = tmnxLldpStatsRxGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpStatsRxGroup.setDescription('The collection of objects which are used to represent LLDP reception statistics. This group is mandatory for agents which implement the LLDP and have the capability of receiving LLDP frames.')
tmnxLldpStatsTxGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 59, 2, 3)).setObjects(("TIMETRA-LLDP-MIB", "tmnxLldpStatsTxPortFrames"), ("TIMETRA-LLDP-MIB", "tmnxLldpStatsTxLLDPDULengthErrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLldpStatsTxGroup = tmnxLldpStatsTxGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpStatsTxGroup.setDescription('The collection of objects which are used to represent LLDP transmission statistics. This group is mandatory for agents which implement the LLDP and have the capability of transmitting LLDP frames.')
tmnxLldpLocSysGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 59, 2, 4)).setObjects(("TIMETRA-LLDP-MIB", "tmnxLldpLocPortIdSubtype"), ("TIMETRA-LLDP-MIB", "tmnxLldpLocPortId"), ("TIMETRA-LLDP-MIB", "tmnxLldpLocPortDesc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLldpLocSysGroup = tmnxLldpLocSysGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpLocSysGroup.setDescription('The collection of objects which are used to represent LLDP Local System Information. This group is mandatory for agents which implement the LLDP and have the capability of transmitting LLDP frames.')
tmnxLldpRemSysGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 59, 2, 5)).setObjects(("TIMETRA-LLDP-MIB", "tmnxLldpRemChassisIdSubtype"), ("TIMETRA-LLDP-MIB", "tmnxLldpRemChassisId"), ("TIMETRA-LLDP-MIB", "tmnxLldpRemPortIdSubtype"), ("TIMETRA-LLDP-MIB", "tmnxLldpRemPortId"), ("TIMETRA-LLDP-MIB", "tmnxLldpRemPortDesc"), ("TIMETRA-LLDP-MIB", "tmnxLldpRemSysName"), ("TIMETRA-LLDP-MIB", "tmnxLldpRemSysDesc"), ("TIMETRA-LLDP-MIB", "tmnxLldpRemSysCapSupported"), ("TIMETRA-LLDP-MIB", "tmnxLldpRemSysCapEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLldpRemSysGroup = tmnxLldpRemSysGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemSysGroup.setDescription("The collection of objects which are used to represent LLDP Remote Systems Information. The objects represent the information associated with the basic TLV set. Please note that even the agent doesn't implement some of the optional TLVs, it shall recognize all the optional TLV information that the remote system may advertise. This group is mandatory for agents which implement the LLDP and have the capability of receiving LLDP frames.")
tmnxLldpRemManAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 59, 2, 6)).setObjects(("TIMETRA-LLDP-MIB", "tmnxLldpRemManAddrIfSubtype"), ("TIMETRA-LLDP-MIB", "tmnxLldpRemManAddrIfId"), ("TIMETRA-LLDP-MIB", "tmnxLldpRemManAddrOID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxLldpRemManAddrGroup = tmnxLldpRemManAddrGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxLldpRemManAddrGroup.setDescription('The collection of objects which are used to represent LLDP Remote management address information. This group is mandatory for agents which implement the LLDP and have the capability of receiving LLDP frames.')
mibBuilder.exportSymbols("TIMETRA-LLDP-MIB", tmnxLldpRemManAddrEntry=tmnxLldpRemManAddrEntry, tmnxLldpRemTimeMark=tmnxLldpRemTimeMark, tmnxLldpCompliance=tmnxLldpCompliance, tmnxLldpTxCreditMax=tmnxLldpTxCreditMax, tmnxLldpMIBModule=tmnxLldpMIBModule, tmnxLldpRemSysDesc=tmnxLldpRemSysDesc, tmnxLldpMessageFastTxInit=tmnxLldpMessageFastTxInit, tmnxLldpLocSysGroup=tmnxLldpLocSysGroup, tmnxLldpLocalSystemData=tmnxLldpLocalSystemData, tmnxLldpRemLocalDestMACAddress=tmnxLldpRemLocalDestMACAddress, tmnxLldpStatsRxGroup=tmnxLldpStatsRxGroup, tmnxLldpRemIndex=tmnxLldpRemIndex, tmnxLldpConfigGroup=tmnxLldpConfigGroup, tmnxLldpRemSysCapEnabled=tmnxLldpRemSysCapEnabled, tmnxLldpRemManAddrIfSubtype=tmnxLldpRemManAddrIfSubtype, tmnxLldpStatsRxPortEntry=tmnxLldpStatsRxPortEntry, tmnxLldpRemPortIdSubtype=tmnxLldpRemPortIdSubtype, tmnxLldpRemTable=tmnxLldpRemTable, tmnxLldpRemChassisId=tmnxLldpRemChassisId, tmnxLldpPortConfigEntry=tmnxLldpPortConfigEntry, tmnxLldpAddressTableIndex=tmnxLldpAddressTableIndex, tmnxLldpAdminStatus=tmnxLldpAdminStatus, tmnxLldpStatsTxLLDPDULengthErrs=tmnxLldpStatsTxLLDPDULengthErrs, tmnxLldpLocPortDesc=tmnxLldpLocPortDesc, tmnxLldpDestAddressTable=tmnxLldpDestAddressTable, tmnxLldpStatsTxPortTable=tmnxLldpStatsTxPortTable, tmnxLldpRemManAddrOID=tmnxLldpRemManAddrOID, tmnxLldpCompliances=tmnxLldpCompliances, tmnxLldpStatsTxPortFrames=tmnxLldpStatsTxPortFrames, tmnxLldpRemSysGroup=tmnxLldpRemSysGroup, tmnxLldpRemSysName=tmnxLldpRemSysName, tmnxLldpLocPortEntry=tmnxLldpLocPortEntry, tmnxLldpConfigManAddrPortsTable=tmnxLldpConfigManAddrPortsTable, tmnxLldpLocPortIdSubtype=tmnxLldpLocPortIdSubtype, tmnxLldpStatsRxPortAgeouts=tmnxLldpStatsRxPortAgeouts, tmnxLldpStatsRxDestMACAddress=tmnxLldpStatsRxDestMACAddress, tmnxLldpPortCfgManAddrSubtype=tmnxLldpPortCfgManAddrSubtype, tmnxLldpRemSysCapSupported=tmnxLldpRemSysCapSupported, tmnxLldpRemoteSystemsData=tmnxLldpRemoteSystemsData, tmnxLldpLocPortDestMACAddress=tmnxLldpLocPortDestMACAddress, tmnxLldpPortCfgAddressIndex=tmnxLldpPortCfgAddressIndex, tmnxLldpLocPortTable=tmnxLldpLocPortTable, TmnxLldpDestAddressTableIndex=TmnxLldpDestAddressTableIndex, tmnxLldpObjects=tmnxLldpObjects, tmnxLldpMessageFastTx=tmnxLldpMessageFastTx, tmnxLldpRemManAddrIfId=tmnxLldpRemManAddrIfId, tmnxLldpStatsTxDestMACAddress=tmnxLldpStatsTxDestMACAddress, tmnxLldpPortCfgNotifyEnable=tmnxLldpPortCfgNotifyEnable, tmnxLldpConformance=tmnxLldpConformance, tmnxLldpPortCfgAdminStatus=tmnxLldpPortCfgAdminStatus, tmnxLldpRemPortId=tmnxLldpRemPortId, tmnxLldpRemManAddrGroup=tmnxLldpRemManAddrGroup, tmnxLldpLocPortId=tmnxLldpLocPortId, tmnxLldpPortConfigTable=tmnxLldpPortConfigTable, tmnxLldpConfigManAddrPortsEntry=tmnxLldpConfigManAddrPortsEntry, tmnxLldpRemChassisIdSubtype=tmnxLldpRemChassisIdSubtype, tmnxLldpStatsRxPortFrames=tmnxLldpStatsRxPortFrames, tmnxLldpGroups=tmnxLldpGroups, tmnxLldpStatistics=tmnxLldpStatistics, tmnxLldpStatsRxPortFrameErrs=tmnxLldpStatsRxPortFrameErrs, tmnxLldpNotifications=tmnxLldpNotifications, tmnxLldpPortCfgTLVsTxEnable=tmnxLldpPortCfgTLVsTxEnable, tmnxLldpStatsRxPortTLVDiscard=tmnxLldpStatsRxPortTLVDiscard, tmnxLldpRemManAddrTable=tmnxLldpRemManAddrTable, tmnxLldpRemManAddrSubtype=tmnxLldpRemManAddrSubtype, tmnxLldpDestAddressTableEntry=tmnxLldpDestAddressTableEntry, tmnxLldpPortCfgDestAddressIndex=tmnxLldpPortCfgDestAddressIndex, tmnxLldpPortCfgManAddress=tmnxLldpPortCfgManAddress, tmnxLldpRemManAddr=tmnxLldpRemManAddr, tmnxLldpConfiguration=tmnxLldpConfiguration, tmnxLldpStatsRxPortTable=tmnxLldpStatsRxPortTable, tmnxLldpRemPortDesc=tmnxLldpRemPortDesc, tmnxLldpStatsTxPortEntry=tmnxLldpStatsTxPortEntry, tmnxLldpStatsRxPortTLVUnknown=tmnxLldpStatsRxPortTLVUnknown, tmnxLldpStatsTxGroup=tmnxLldpStatsTxGroup, tmnxLldpStatsRxPortFrameDiscard=tmnxLldpStatsRxPortFrameDiscard, TmnxLldpManAddressIndex=TmnxLldpManAddressIndex, tmnxLldpRemEntry=tmnxLldpRemEntry, tmnxLldpPortCfgManAddrTxEnabled=tmnxLldpPortCfgManAddrTxEnabled, PYSNMP_MODULE_ID=tmnxLldpMIBModule, tmnxLldpDestMacAddress=tmnxLldpDestMacAddress)
