#
# PySNMP MIB module STN-POLICY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STN-POLICY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:11:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Gauge32, TimeTicks, Integer32, Counter64, ObjectIdentity, iso, IpAddress, MibIdentifier, Counter32, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Gauge32", "TimeTicks", "Integer32", "Counter64", "ObjectIdentity", "iso", "IpAddress", "MibIdentifier", "Counter32", "NotificationType", "Bits")
TextualConvention, TruthValue, RowStatus, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "DisplayString", "TimeStamp")
stnSystems, = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-SMI", "stnSystems")
stnRouterIndex, = mibBuilder.importSymbols("STN-ROUTER-MIB", "stnRouterIndex")
stnPm = ModuleIdentity((1, 3, 6, 1, 4, 1, 3551, 2, 11))
stnPm.setRevisions(('1900-05-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: stnPm.setRevisionsDescriptions(('This MIB module describes managed objects of Spring Tide Networks policy module .',))
if mibBuilder.loadTexts: stnPm.setLastUpdated('0012060000Z')
if mibBuilder.loadTexts: stnPm.setOrganization('Spring Tide Networks, Inc.')
if mibBuilder.loadTexts: stnPm.setContactInfo(' Spring Tide Networks, Inc. Customer Service Postal: 3 Clock Tower Place Maynard, MA 01754 Tel: 1 888-786-4357 Email: stncs@springtidenet.com ')
if mibBuilder.loadTexts: stnPm.setDescription('Added stnPmClassTable')
stnPmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1))
stnPmMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 2))
stnPmService = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 1))
stnPmPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2))
stnPmPreference = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 3))
stnPmIPsec = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 4))
stnPmEncaps = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 5))
stnPmManualSa = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 6))
stnPmMarker = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 7))
stnPmProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8))
stnPmQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 9))
stnPmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 10))
stnPmFirewall = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11))
stnPmFirewallAction = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 12))
stnPmServiceList = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 13))
stnPmSLService = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 14))
stnPmClass = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15))
stnPMProxyTunnel = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16))
stnPmFirewallTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 10, 1))
stnPmQosTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 10, 2))
stnPmFirewallTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 10, 1, 1))
stnPmFirewallNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 10, 1, 2))
stnPmFirewallNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 10, 1, 2, 0))
stnPmQosTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 10, 2, 1))
stnPmQosNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 10, 2, 2))
stnPmQosNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 10, 2, 2, 0))
class StnPmPolicyMatchType(TextualConvention, Integer32):
    description = 'Types of match criteria for policy'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("any", 1), ("single", 2), ("range", 3), ("dynamic", 4), ("subnet", 5))

class StnPmSelectorType(TextualConvention, Integer32):
    description = 'Selector type to use for connection'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("policy", 1), ("packet", 2))

class StnPmAuthAlg(TextualConvention, Integer32):
    description = 'Types of authentication algorithms'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("hmac-md5", 2), ("hmac-sha", 3))

class StnPmEncrAlg(TextualConvention, Integer32):
    description = 'Types of encryption algorithms'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("des", 2), ("des3", 3))

class StnPmDirection(TextualConvention, Integer32):
    description = 'Types of directions'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inbound", 1), ("outbound", 2))

class StnPmBitRate(TextualConvention, Integer32):
    description = 'A data rate in bits/second.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

stnPmServiceTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 1, 1), )
if mibBuilder.loadTexts: stnPmServiceTable.setStatus('current')
if mibBuilder.loadTexts: stnPmServiceTable.setDescription('A list of PM service entries.')
stnPmServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 1, 1, 1), ).setIndexNames((0, "STN-POLICY-MIB", "stnPmServiceIndex"))
if mibBuilder.loadTexts: stnPmServiceEntry.setStatus('current')
if mibBuilder.loadTexts: stnPmServiceEntry.setDescription('Entry contains information about a particular policy manager service.')
stnPmServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmServiceIndex.setStatus('current')
if mibBuilder.loadTexts: stnPmServiceIndex.setDescription('Index into service table')
stnPmServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmServiceName.setStatus('current')
if mibBuilder.loadTexts: stnPmServiceName.setDescription('Name of service')
stnPmServiceIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmServiceIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: stnPmServiceIdleTimeout.setDescription('Idle timeout for service')
stnPmServiceNumPolicies = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmServiceNumPolicies.setStatus('current')
if mibBuilder.loadTexts: stnPmServiceNumPolicies.setDescription('Number of policies in this service')
stnPmServiceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 1, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmServiceEnabled.setStatus('current')
if mibBuilder.loadTexts: stnPmServiceEnabled.setDescription('Flag to indicate if service is enabled')
stnPmServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vpn", 1), ("firewall", 2), ("ip-fileter", 3), ("forwarding", 4), ("qos", 5), ("mpls", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmServiceType.setStatus('current')
if mibBuilder.loadTexts: stnPmServiceType.setDescription('Type of service')
stnPmServiceFirewallID = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmServiceFirewallID.setStatus('current')
if mibBuilder.loadTexts: stnPmServiceFirewallID.setDescription("Instance of service's firewall record")
stnPmPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1), )
if mibBuilder.loadTexts: stnPmPolicyTable.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyTable.setDescription('A list of policy entries.')
stnPmPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1), ).setIndexNames((0, "STN-POLICY-MIB", "stnPmPolicyServiceIndex"), (0, "STN-POLICY-MIB", "stnPmPolicyIndex"))
if mibBuilder.loadTexts: stnPmPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyEntry.setDescription('Entry contains information about a particular policy.')
stnPmPolicyServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyServiceIndex.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyServiceIndex.setDescription('Service index of policy')
stnPmPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyIndex.setDescription('Policy index of policy')
stnPmPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyName.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyName.setDescription('Policy name')
stnPmPolicySrcAddrMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 4), StnPmPolicyMatchType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicySrcAddrMatchType.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicySrcAddrMatchType.setDescription('Type of match for source address')
stnPmPolicySrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicySrcAddr.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicySrcAddr.setDescription('Source address to match')
stnPmPolicySrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicySrcMask.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicySrcMask.setDescription('Source IP netmask to match')
stnPmPolicySrcEndAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicySrcEndAddr.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicySrcEndAddr.setDescription('End of source address range to match')
stnPmPolicyDestAddrMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 8), StnPmPolicyMatchType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyDestAddrMatchType.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyDestAddrMatchType.setDescription('Type of match for source address')
stnPmPolicyDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyDestAddr.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyDestAddr.setDescription('Source address to match')
stnPmPolicyDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyDestMask.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyDestMask.setDescription('Source IP netmask to match')
stnPmPolicyDestEndAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyDestEndAddr.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyDestEndAddr.setDescription('End of source address range to match')
stnPmPolicySrcPortMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 12), StnPmPolicyMatchType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicySrcPortMatchType.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicySrcPortMatchType.setDescription('Type of match for source port')
stnPmPolicySrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicySrcPort.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicySrcPort.setDescription('Source port to match')
stnPmPolicySrcEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicySrcEndPort.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicySrcEndPort.setDescription('End of source port range to match')
stnPmPolicyDestPortMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 15), StnPmPolicyMatchType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyDestPortMatchType.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyDestPortMatchType.setDescription('Type of match for destination port')
stnPmPolicyDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyDestPort.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyDestPort.setDescription('Destination port to match')
stnPmPolicyDestEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyDestEndPort.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyDestEndPort.setDescription('End of destination port range to match')
stnPmPolicyProtocolMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 18), StnPmPolicyMatchType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyProtocolMatchType.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyProtocolMatchType.setDescription('Type of match for protocol')
stnPmPolicyProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 17, 50, 51, 108))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 6), ("udp", 17), ("esp", 50), ("ah", 51), ("ipcomp", 108)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyProtocol.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyProtocol.setDescription('Protocol to match')
stnPmPolicyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2), ("secure", 3), ("encaps", 4), ("reject", 5), ("fec", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyAction.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyAction.setDescription('Type of action to take upon policy match')
stnPmPolicyActionID = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyActionID.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyActionID.setDescription('Configuration ID of action record')
stnPmPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 22), StnPmDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyDirection.setDescription('Direction of policy')
stnPmPolicyCreateMirror = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyCreateMirror.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyCreateMirror.setDescription('Mirror policy flag')
stnPmPolicySrcAddrSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 24), StnPmSelectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicySrcAddrSelector.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicySrcAddrSelector.setDescription('Source selector to choose for policy matching')
stnPmPolicyDestAddrSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 25), StnPmSelectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyDestAddrSelector.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyDestAddrSelector.setDescription('Destination selector to choose for policy matching')
stnPmPolicyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyEnabled.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyEnabled.setDescription('Flag to indicate if policy is enabled')
stnPmPolicyMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyMatches.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyMatches.setDescription('Number of times policy search matched this policy')
stnPmPolicyMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyMisses.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyMisses.setDescription('Number of times policy search did not match this policy')
stnPmPolicyMarkedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyMarkedOctets.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyMarkedOctets.setDescription('Number of octets that have been marked for this policy.')
stnPmPolicyMarkedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyMarkedPkts.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyMarkedPkts.setDescription('Number of packets that have been marked for this policy.')
stnPmPolicyIcmpTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyIcmpTypes.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyIcmpTypes.setDescription('ICMP Types matching the policy entry expressed as bit-map.')
stnPmPolicyTosByteMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 32), StnPmPolicyMatchType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyTosByteMatchType.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyTosByteMatchType.setDescription('Type of match for TOS Byte')
stnPmPolicyTosByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyTosByteValue.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyTosByteValue.setDescription('Value containing bits to set in TOS Byte')
stnPmPolicyTosByteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyTosByteMask.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyTosByteMask.setDescription('Mask indicating bits to match in TOS byte')
stnPmPolicyMarkerID = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyMarkerID.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyMarkerID.setDescription('Configuration ID of marker to apply')
stnPmPolicyTxclassID = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 2, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPolicyTxclassID.setStatus('current')
if mibBuilder.loadTexts: stnPmPolicyTxclassID.setDescription('Configuration ID of transmit class to assign packet to')
stnPmPreferenceTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 3, 1), )
if mibBuilder.loadTexts: stnPmPreferenceTable.setStatus('current')
if mibBuilder.loadTexts: stnPmPreferenceTable.setDescription('Entry contains information about a particular preference entry.')
stnPmPreferenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 3, 1, 1), ).setIndexNames((0, "STN-POLICY-MIB", "stnPmPreferenceIndex"))
if mibBuilder.loadTexts: stnPmPreferenceEntry.setStatus('current')
if mibBuilder.loadTexts: stnPmPreferenceEntry.setDescription('Entry contains information about a particular preference.')
stnPmPreferenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPreferenceIndex.setStatus('current')
if mibBuilder.loadTexts: stnPmPreferenceIndex.setDescription('Preference index')
stnPmPreferenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPreferenceNum.setStatus('current')
if mibBuilder.loadTexts: stnPmPreferenceNum.setDescription('Preference number')
stnPmPreferenceAhAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 3, 1, 1, 3), StnPmAuthAlg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPreferenceAhAlg.setStatus('current')
if mibBuilder.loadTexts: stnPmPreferenceAhAlg.setDescription('AH authentication algorithm')
stnPmPreferenceEspAuthAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 3, 1, 1, 4), StnPmAuthAlg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPreferenceEspAuthAlg.setStatus('current')
if mibBuilder.loadTexts: stnPmPreferenceEspAuthAlg.setDescription('ESP authentication algorithm')
stnPmPreferenceEspEncrAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 3, 1, 1, 5), StnPmEncrAlg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPreferenceEspEncrAlg.setStatus('current')
if mibBuilder.loadTexts: stnPmPreferenceEspEncrAlg.setDescription('ESP encryption algorithm')
stnPmPreferenceLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPreferenceLifeTime.setStatus('current')
if mibBuilder.loadTexts: stnPmPreferenceLifeTime.setDescription('Life time in minutes')
stnPmPreferenceLifeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPreferenceLifeBytes.setStatus('current')
if mibBuilder.loadTexts: stnPmPreferenceLifeBytes.setDescription('Life value in kilobytes')
stnPmPreferenceIPsecID = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPreferenceIPsecID.setStatus('current')
if mibBuilder.loadTexts: stnPmPreferenceIPsecID.setDescription('ID of corresponding IPSEC record')
stnPmPreferencePFSGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5))).clone(namedValues=NamedValues(("group1", 1), ("group2", 2), ("group5", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPreferencePFSGroup.setStatus('current')
if mibBuilder.loadTexts: stnPmPreferencePFSGroup.setDescription('ESP encryption algorithm')
stnPmPreferenceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 3, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmPreferenceDescription.setStatus('current')
if mibBuilder.loadTexts: stnPmPreferenceDescription.setDescription('Description of preference')
stnPmIPsecTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 4, 1), )
if mibBuilder.loadTexts: stnPmIPsecTable.setStatus('current')
if mibBuilder.loadTexts: stnPmIPsecTable.setDescription('Entry contains information about a particular IPsec entry.')
stnPmIPsecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 4, 1, 1), ).setIndexNames((0, "STN-POLICY-MIB", "stnPmIPsecIndex"))
if mibBuilder.loadTexts: stnPmIPsecEntry.setStatus('current')
if mibBuilder.loadTexts: stnPmIPsecEntry.setDescription('Entry contains information about a particular IPsec entry.')
stnPmIPsecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmIPsecIndex.setStatus('current')
if mibBuilder.loadTexts: stnPmIPsecIndex.setDescription('IPsec index')
stnPmIPsecPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 4, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmIPsecPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: stnPmIPsecPeerIpAddr.setDescription('IP address of peer for tunnel endpoint')
stnPmIPsecLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmIPsecLocalIpAddr.setStatus('current')
if mibBuilder.loadTexts: stnPmIPsecLocalIpAddr.setDescription('Local IP address for tunnel endpoint')
stnPmIPsecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("transport", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmIPsecMode.setStatus('current')
if mibBuilder.loadTexts: stnPmIPsecMode.setDescription('Type of IPsec connection to create')
stnPmIPsecKeyNegType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ike", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmIPsecKeyNegType.setStatus('current')
if mibBuilder.loadTexts: stnPmIPsecKeyNegType.setDescription('Key negotiation method for IPsec Sa')
stnPmIPsecName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmIPsecName.setStatus('current')
if mibBuilder.loadTexts: stnPmIPsecName.setDescription('Description of IPsec entry')
stnPmIPsecNumManualSAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmIPsecNumManualSAs.setStatus('current')
if mibBuilder.loadTexts: stnPmIPsecNumManualSAs.setDescription('Number of manual SAs assigned to this IPsec record')
stnPmIPsecNumPreferences = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmIPsecNumPreferences.setStatus('current')
if mibBuilder.loadTexts: stnPmIPsecNumPreferences.setDescription('Number of preferences assigned to this IPsec record')
stnPmIPsecReplayDetectionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 4, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmIPsecReplayDetectionEnabled.setStatus('current')
if mibBuilder.loadTexts: stnPmIPsecReplayDetectionEnabled.setDescription('Enable Replay detection.')
stnPmEncapsTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 5, 1), )
if mibBuilder.loadTexts: stnPmEncapsTable.setStatus('current')
if mibBuilder.loadTexts: stnPmEncapsTable.setDescription('Entry contains information about a particular Encaps entry.')
stnPmEncapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 5, 1, 1), ).setIndexNames((0, "STN-POLICY-MIB", "stnPmEncapsIndex"))
if mibBuilder.loadTexts: stnPmEncapsEntry.setStatus('current')
if mibBuilder.loadTexts: stnPmEncapsEntry.setDescription('Entry contains information about a particular Encaps entry.')
stnPmEncapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmEncapsIndex.setStatus('current')
if mibBuilder.loadTexts: stnPmEncapsIndex.setDescription('Encaps index')
stnPmEncapsPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 5, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmEncapsPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: stnPmEncapsPeerIpAddr.setDescription('IP address of peer for tunnel endpoint')
stnPmEncapsLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 5, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmEncapsLocalIpAddr.setStatus('current')
if mibBuilder.loadTexts: stnPmEncapsLocalIpAddr.setDescription('Local IP address for tunnel endpoint')
stnPmEncapsType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip-ip", 1), ("ip-gre", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmEncapsType.setStatus('current')
if mibBuilder.loadTexts: stnPmEncapsType.setDescription('Type of Encaps connection to create')
stnPmEncapsGREKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmEncapsGREKey.setStatus('current')
if mibBuilder.loadTexts: stnPmEncapsGREKey.setDescription('GRE key')
stnPmEncapsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 5, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmEncapsName.setStatus('current')
if mibBuilder.loadTexts: stnPmEncapsName.setDescription('Description of Encaps entry')
stnPmManualSaTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 6, 1), )
if mibBuilder.loadTexts: stnPmManualSaTable.setStatus('current')
if mibBuilder.loadTexts: stnPmManualSaTable.setDescription('Entry contains information about a particular ManualSa entry.')
stnPmManualSaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 6, 1, 1), ).setIndexNames((0, "STN-POLICY-MIB", "stnPmManualSaIndex"))
if mibBuilder.loadTexts: stnPmManualSaEntry.setStatus('current')
if mibBuilder.loadTexts: stnPmManualSaEntry.setDescription('Entry contains information about a particular ManualSa entry.')
stnPmManualSaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmManualSaIndex.setStatus('current')
if mibBuilder.loadTexts: stnPmManualSaIndex.setDescription('ManualSa index')
stnPmManualSaPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 6, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmManualSaPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: stnPmManualSaPeerIpAddr.setDescription('IP address of peer for tunnel endpoint')
stnPmManualSaDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 6, 1, 1, 3), StnPmDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmManualSaDirection.setStatus('current')
if mibBuilder.loadTexts: stnPmManualSaDirection.setDescription('Direction of manual SA')
stnPmManualSaSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmManualSaSPI.setStatus('current')
if mibBuilder.loadTexts: stnPmManualSaSPI.setDescription('SPI of manual SA')
stnPmManualSaAhAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 6, 1, 1, 5), StnPmAuthAlg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmManualSaAhAlg.setStatus('current')
if mibBuilder.loadTexts: stnPmManualSaAhAlg.setDescription('AH authentication algorithm')
stnPmManualSaAhKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 6, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmManualSaAhKey.setStatus('current')
if mibBuilder.loadTexts: stnPmManualSaAhKey.setDescription('Authentication key for AH protocol')
stnPmManualSaEspAuthAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 6, 1, 1, 7), StnPmAuthAlg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmManualSaEspAuthAlg.setStatus('current')
if mibBuilder.loadTexts: stnPmManualSaEspAuthAlg.setDescription('ESP authentication algorithm')
stnPmManualSaEspAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 6, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmManualSaEspAuthKey.setStatus('current')
if mibBuilder.loadTexts: stnPmManualSaEspAuthKey.setDescription('Authentication key for ESP protocol')
stnPmManualSaEspEncrAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 6, 1, 1, 9), StnPmEncrAlg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmManualSaEspEncrAlg.setStatus('current')
if mibBuilder.loadTexts: stnPmManualSaEspEncrAlg.setDescription('ESP encryption algorithm')
stnPmManualSaEspEncrKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 6, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmManualSaEspEncrKey.setStatus('current')
if mibBuilder.loadTexts: stnPmManualSaEspEncrKey.setDescription('Encryption key for ESP protocol')
stnPmManualSaIPsecID = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 6, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmManualSaIPsecID.setStatus('current')
if mibBuilder.loadTexts: stnPmManualSaIPsecID.setDescription('Index or corresponding IPsec record')
stnPmManualSaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 6, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmManualSaDescription.setStatus('current')
if mibBuilder.loadTexts: stnPmManualSaDescription.setDescription('Description of manual SA entry')
stnPmQosLatestFlowCB = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmQosLatestFlowCB.setStatus('current')
if mibBuilder.loadTexts: stnPmQosLatestFlowCB.setDescription('Value of the FlowCB Created')
stnPmQosLastDroppedPacket = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmQosLastDroppedPacket.setStatus('current')
if mibBuilder.loadTexts: stnPmQosLastDroppedPacket.setDescription('Value of a dropped packet')
stnPmQosFlowCBCreated = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 10, 2, 2, 0, 1)).setObjects(("STN-ROUTER-MIB", "stnRouterIndex"), ("STN-POLICY-MIB", "stnPmQosLatestFlowCB"))
if mibBuilder.loadTexts: stnPmQosFlowCBCreated.setStatus('current')
if mibBuilder.loadTexts: stnPmQosFlowCBCreated.setDescription("This trap is generated by Policy manager's QoS subsystem. This SNMP trap is generated in response to QoS creating and installing a flow.")
stnPmQosFlowCBRemoved = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 10, 2, 2, 0, 2)).setObjects(("STN-ROUTER-MIB", "stnRouterIndex"), ("STN-POLICY-MIB", "stnPmQosLatestFlowCB"))
if mibBuilder.loadTexts: stnPmQosFlowCBRemoved.setStatus('current')
if mibBuilder.loadTexts: stnPmQosFlowCBRemoved.setDescription("This trap is generated by Policy manager's QoS subsystem. This SNMP trap is generated in response to QoS removing a flow.")
stnPmQosShapingPacketDiscard = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 10, 2, 2, 0, 3)).setObjects(("STN-ROUTER-MIB", "stnRouterIndex"), ("STN-POLICY-MIB", "stnPmQosLastDroppedPacket"))
if mibBuilder.loadTexts: stnPmQosShapingPacketDiscard.setStatus('current')
if mibBuilder.loadTexts: stnPmQosShapingPacketDiscard.setDescription("This trap is generated by Policy manager's QoS subsystem. This SNMP trap is generated in response to QoS dropping a packet due to rate shaping.")
stnPmQosThresholdPacketDiscard = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 10, 2, 2, 0, 4)).setObjects(("STN-ROUTER-MIB", "stnRouterIndex"), ("STN-POLICY-MIB", "stnPmQosLastDroppedPacket"))
if mibBuilder.loadTexts: stnPmQosThresholdPacketDiscard.setStatus('current')
if mibBuilder.loadTexts: stnPmQosThresholdPacketDiscard.setDescription("This trap is generated by Policy manager's QoS subsystem. This SNMP trap is generated in response to QoS dropping a packet due to exceeding a threshold.")
stnPmMarkerTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 7, 1), )
if mibBuilder.loadTexts: stnPmMarkerTable.setStatus('current')
if mibBuilder.loadTexts: stnPmMarkerTable.setDescription('Entry contains information about a particular Marker entry.')
stnPmMarkerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 7, 1, 1), ).setIndexNames((0, "STN-POLICY-MIB", "stnPmMarkerIndex"))
if mibBuilder.loadTexts: stnPmMarkerEntry.setStatus('current')
if mibBuilder.loadTexts: stnPmMarkerEntry.setDescription('Entry contains information about a particular Marker entry.')
stnPmMarkerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmMarkerIndex.setStatus('current')
if mibBuilder.loadTexts: stnPmMarkerIndex.setDescription('Marker index')
stnPmMarkerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmMarkerName.setStatus('current')
if mibBuilder.loadTexts: stnPmMarkerName.setDescription('Description of Marker entry')
stnPmMarkerByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmMarkerByteValue.setStatus('current')
if mibBuilder.loadTexts: stnPmMarkerByteValue.setDescription('Value that the masked TOS byte must match')
stnPmMarkerByteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmMarkerByteMask.setStatus('current')
if mibBuilder.loadTexts: stnPmMarkerByteMask.setDescription('Mask applied to TOS byte for match')
stnPmMarkerMarkedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 7, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmMarkerMarkedOctets.setStatus('current')
if mibBuilder.loadTexts: stnPmMarkerMarkedOctets.setDescription('Number of octets marked by this Marker.')
stnPmMarkerMarkedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 7, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmMarkerMarkedPkts.setStatus('current')
if mibBuilder.loadTexts: stnPmMarkerMarkedPkts.setDescription('Number of packets marked by this Marker.')
stnPmProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8, 1), )
if mibBuilder.loadTexts: stnPmProfileTable.setStatus('current')
if mibBuilder.loadTexts: stnPmProfileTable.setDescription('Entry contains information about a particular Profile entry.')
stnPmProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8, 1, 1), ).setIndexNames((0, "STN-POLICY-MIB", "stnPmProfileIndex"))
if mibBuilder.loadTexts: stnPmProfileEntry.setStatus('current')
if mibBuilder.loadTexts: stnPmProfileEntry.setDescription('Entry contains information about a particular Profile entry.')
stnPmProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmProfileIndex.setStatus('current')
if mibBuilder.loadTexts: stnPmProfileIndex.setDescription('Profile index')
stnPmProfileEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmProfileEnabled.setStatus('current')
if mibBuilder.loadTexts: stnPmProfileEnabled.setDescription('Flag to indicate if profile is enabled')
stnPmProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmProfileName.setStatus('current')
if mibBuilder.loadTexts: stnPmProfileName.setDescription('Description of Profile entry')
stnPmProfileCommittedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmProfileCommittedRate.setStatus('current')
if mibBuilder.loadTexts: stnPmProfileCommittedRate.setDescription('Rate in kbits per second the user or network is committed to transmit.')
stnPmProfileCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmProfileCommittedBurst.setStatus('current')
if mibBuilder.loadTexts: stnPmProfileCommittedBurst.setDescription('Maximum number of kbytes in a single transmission burst')
stnPmProfileExcessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmProfileExcessRate.setStatus('current')
if mibBuilder.loadTexts: stnPmProfileExcessRate.setDescription('Maximum acceptable rate in kbits per second the user or network is committed to transmit')
stnPmProfileExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmProfileExcessBurst.setStatus('current')
if mibBuilder.loadTexts: stnPmProfileExcessBurst.setDescription('Maximum number of bytes in a single maximum transmission burst')
stnPmProfileConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2), ("markandforward", 3), ("shape", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmProfileConformAction.setStatus('current')
if mibBuilder.loadTexts: stnPmProfileConformAction.setDescription('Type of action to take for conformant frames')
stnPmProfileConformActionID = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmProfileConformActionID.setStatus('current')
if mibBuilder.loadTexts: stnPmProfileConformActionID.setDescription('Configuration ID of conform action record')
stnPmProfileCautionAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2), ("markandforward", 3), ("shape", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmProfileCautionAction.setStatus('current')
if mibBuilder.loadTexts: stnPmProfileCautionAction.setDescription('Type of action to take for caution frames')
stnPmProfileConformOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmProfileConformOctets.setStatus('current')
if mibBuilder.loadTexts: stnPmProfileConformOctets.setDescription('Number of octets in conformant frames that have arrived.')
stnPmProfileConformPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmProfileConformPkts.setStatus('current')
if mibBuilder.loadTexts: stnPmProfileConformPkts.setDescription('Number of conformant frames that have arrived.')
stnPmProfileCautionActionID = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmProfileCautionActionID.setStatus('current')
if mibBuilder.loadTexts: stnPmProfileCautionActionID.setDescription('Configuration ID of caution action record')
stnPmProfileExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2), ("markandforward", 3), ("shape", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmProfileExceedAction.setStatus('current')
if mibBuilder.loadTexts: stnPmProfileExceedAction.setDescription('Type of action to take for exceeding frames')
stnPmProfileCautionOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmProfileCautionOctets.setStatus('current')
if mibBuilder.loadTexts: stnPmProfileCautionOctets.setDescription('Number of octets in caution frames that have arrived.')
stnPmProfileCautionPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmProfileCautionPkts.setStatus('current')
if mibBuilder.loadTexts: stnPmProfileCautionPkts.setDescription('Number of caution frames that have arrived.')
stnPmProfileExceedActionID = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmProfileExceedActionID.setStatus('current')
if mibBuilder.loadTexts: stnPmProfileExceedActionID.setDescription('Configuration ID of exceeding action record')
stnPmProfileExceedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmProfileExceedOctets.setStatus('current')
if mibBuilder.loadTexts: stnPmProfileExceedOctets.setDescription('Number of octets in exceeding frames that have arrived.')
stnPmProfileExceedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 8, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmProfileExceedPkts.setStatus('current')
if mibBuilder.loadTexts: stnPmProfileExceedPkts.setDescription('Number of exceeding frames that have arrived.')
stnPmQueueTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 9, 1), )
if mibBuilder.loadTexts: stnPmQueueTable.setStatus('current')
if mibBuilder.loadTexts: stnPmQueueTable.setDescription('Entry contains information about a particular Queue entry.')
stnPmQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 9, 1, 1), ).setIndexNames((0, "STN-POLICY-MIB", "stnPmQueueIndex"))
if mibBuilder.loadTexts: stnPmQueueEntry.setStatus('current')
if mibBuilder.loadTexts: stnPmQueueEntry.setDescription('Entry contains information about a particular Queue entry.')
stnPmQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmQueueIndex.setStatus('current')
if mibBuilder.loadTexts: stnPmQueueIndex.setDescription('Queue index')
stnPmQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmQueueName.setStatus('current')
if mibBuilder.loadTexts: stnPmQueueName.setDescription('Description of Queue entry')
stnPmQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmQueueThreshold.setStatus('current')
if mibBuilder.loadTexts: stnPmQueueThreshold.setDescription('Queue Drop Threshold')
stnPmQueueDropType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("tailDrop", 2), ("headDrop", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmQueueDropType.setStatus('current')
if mibBuilder.loadTexts: stnPmQueueDropType.setDescription('Type of algorithm used to drop packets when threshold is reached')
stnPmQueueDropHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 9, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmQueueDropHCOctets.setStatus('current')
if mibBuilder.loadTexts: stnPmQueueDropHCOctets.setDescription('Number of octets that have been dropped this queue.')
stnPmQueueDropHCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 9, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmQueueDropHCPkts.setStatus('current')
if mibBuilder.loadTexts: stnPmQueueDropHCPkts.setDescription('Number of packets that have been dropped this queue.')
stnPmQueueQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 9, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmQueueQueueLen.setStatus('current')
if mibBuilder.loadTexts: stnPmQueueQueueLen.setDescription('Number of packets currently in the queue.')
stnPmQueueMaxQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 9, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmQueueMaxQueueLen.setStatus('current')
if mibBuilder.loadTexts: stnPmQueueMaxQueueLen.setDescription('Maximum number of packets in queue since last statistics reset.')
stnPmFirewallEventLogMsg = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 10, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallEventLogMsg.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallEventLogMsg.setDescription('Describes SNMP Trap generated by STN Firewall')
stnPmFirewallLog = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 10, 1, 2, 0, 1)).setObjects(("STN-ROUTER-MIB", "stnRouterIndex"), ("STN-POLICY-MIB", "stnPmServiceIndex"), ("STN-POLICY-MIB", "stnPmPolicyIndex"), ("STN-POLICY-MIB", "stnPmFirewallEventLogMsg"))
if mibBuilder.loadTexts: stnPmFirewallLog.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallLog.setDescription("This trap is generated by Policy manager's Firewall subsystem. This SNMP trap is generated in response to firewall event logging.")
stnPmFirewallTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1), )
if mibBuilder.loadTexts: stnPmFirewallTable.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallTable.setDescription('Entry contains information about a particular Firewall entry.')
stnPmFirewallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1), ).setIndexNames((0, "STN-POLICY-MIB", "stnPmFirewallIndex"))
if mibBuilder.loadTexts: stnPmFirewallEntry.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallEntry.setDescription('Entry contains information about a particular Firewall entry.')
stnPmFirewallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallIndex.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallIndex.setDescription('Firewall index')
stnPmFirewallName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallName.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallName.setDescription('Description of firewall entry')
stnPmFirewallAcceptOtherIPOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallAcceptOtherIPOptions.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallAcceptOtherIPOptions.setDescription('Accept packets with other IP options (non source routing).')
stnPmFirewallAcceptSourceRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallAcceptSourceRouting.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallAcceptSourceRouting.setDescription('Accept packets with source routing options')
stnPmFirewallTcpAckLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallTcpAckLifeTime.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallTcpAckLifeTime.setDescription('TCP ACK lifetime')
stnPmFirewallTcpSynLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallTcpSynLifeTime.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallTcpSynLifeTime.setDescription('TCP SYN lifetime')
stnPmFirewallTcpFinLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallTcpFinLifeTime.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallTcpFinLifeTime.setDescription('TCP FIN lifetime')
stnPmFirewallTcpRstLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallTcpRstLifeTime.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallTcpRstLifeTime.setDescription('TCP RST lifetime')
stnPmFirewallTcpInactivityLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallTcpInactivityLifeTime.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallTcpInactivityLifeTime.setDescription('TCP inactivity lifetime')
stnPmFirewallUdpInactivityLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallUdpInactivityLifeTime.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallUdpInactivityLifeTime.setDescription('UDP inactivity lifetime')
stnPmFirewallSynAttackDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallSynAttackDetection.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallSynAttackDetection.setDescription('Enable SYN attack detection')
stnPmFirewallLandAttackDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallLandAttackDetection.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallLandAttackDetection.setDescription('Enable Land attack detection')
stnPmFirewallPingFloodingDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallPingFloodingDetection.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallPingFloodingDetection.setDescription('Enable ping flooding attack detection')
stnPmFirewallPingOfDeathDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallPingOfDeathDetection.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallPingOfDeathDetection.setDescription('Enable ping of death attack detection')
stnPmFirewallPortScanDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallPortScanDetection.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallPortScanDetection.setDescription('Enable port scan attack detection')
stnPmFirewallPingScanDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallPingScanDetection.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallPingScanDetection.setDescription('Enable ping scan/sweep attack detection')
stnPmFirewallTcpSynBacklogQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallTcpSynBacklogQueueSize.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallTcpSynBacklogQueueSize.setDescription('Size of the SYN backlog queue')
stnPmFirewallPingsPerMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallPingsPerMinute.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallPingsPerMinute.setDescription('Maximum number of pings allowed per minute')
stnPmFirewallMaxPingSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallMaxPingSize.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallMaxPingSize.setDescription('Maximum allowable size for ping')
stnPmFirewallEnableDynamicPortApps = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallEnableDynamicPortApps.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallEnableDynamicPortApps.setDescription('Enabled Dynamic port applications expressed as bit-map.')
stnPmFirewallMaxDynHashTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallMaxDynHashTableSize.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallMaxDynHashTableSize.setDescription('Max dynamic hash table size - must be a power of 2.')
stnPmFirewallMinLogPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 11, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallMinLogPeriod.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallMinLogPeriod.setDescription('Minimim period between event logs')
stnPmFirewallActionTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 12, 1), )
if mibBuilder.loadTexts: stnPmFirewallActionTable.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallActionTable.setDescription('Entry contains information about a particular Firewall Action entry.')
stnPmFirewallActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 12, 1, 1), ).setIndexNames((0, "STN-POLICY-MIB", "stnPmFirewallActionIndex"))
if mibBuilder.loadTexts: stnPmFirewallActionEntry.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallActionEntry.setDescription('Entry contains information about a particular Firewall Action entry.')
stnPmFirewallActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallActionIndex.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallActionIndex.setDescription('Firewall Action index')
stnPmFirewallActionName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 12, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallActionName.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallActionName.setDescription('Description of firewall entry')
stnPmFirewallActionTrackingType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("short", 2), ("long", 3), ("trap", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallActionTrackingType.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallActionTrackingType.setDescription('TCP ACK lifetime')
stnPmFirewallActionStateful = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 12, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallActionStateful.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallActionStateful.setDescription('Perform stateful processing')
stnPmFirewallActionInactivityLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 12, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallActionInactivityLifeTime.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallActionInactivityLifeTime.setDescription('Inactivity lifetime')
stnPmFirewallActionRejectAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("icmpUnreachPort", 2), ("tcpReset", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmFirewallActionRejectAction.setStatus('current')
if mibBuilder.loadTexts: stnPmFirewallActionRejectAction.setDescription('Firewall policy reject action.')
stnPmServiceListTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 13, 1), )
if mibBuilder.loadTexts: stnPmServiceListTable.setStatus('current')
if mibBuilder.loadTexts: stnPmServiceListTable.setDescription('Entry contains information about a particular Firewall Action entry.')
stnPmServiceListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 13, 1, 1), ).setIndexNames((0, "STN-POLICY-MIB", "stnPmServiceListIndex"))
if mibBuilder.loadTexts: stnPmServiceListEntry.setStatus('current')
if mibBuilder.loadTexts: stnPmServiceListEntry.setDescription('Entry contains information about a particular Firewall Action entry.')
stnPmServiceListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmServiceListIndex.setStatus('current')
if mibBuilder.loadTexts: stnPmServiceListIndex.setDescription('Service List Action index')
stnPmServiceListName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 13, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmServiceListName.setStatus('current')
if mibBuilder.loadTexts: stnPmServiceListName.setDescription('Description of service list entry')
stnPmServiceListConnIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 13, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmServiceListConnIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: stnPmServiceListConnIdleTimeout.setDescription('Idle timeout')
stnPmServiceListNumServices = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 13, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmServiceListNumServices.setStatus('current')
if mibBuilder.loadTexts: stnPmServiceListNumServices.setDescription('Number of services in this serviceList')
stnPmServiceListEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 13, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmServiceListEnabled.setStatus('current')
if mibBuilder.loadTexts: stnPmServiceListEnabled.setDescription('Flag to indicate if service is enabled')
stnPmSLServiceTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 14, 1), )
if mibBuilder.loadTexts: stnPmSLServiceTable.setStatus('current')
if mibBuilder.loadTexts: stnPmSLServiceTable.setDescription('A list of PM service entries.')
stnPmSLServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 14, 1, 1), ).setIndexNames((0, "STN-POLICY-MIB", "stnPmSLIndex"), (0, "STN-POLICY-MIB", "stnPmSLServiceIndex"))
if mibBuilder.loadTexts: stnPmSLServiceEntry.setStatus('current')
if mibBuilder.loadTexts: stnPmSLServiceEntry.setDescription('Entry contains information about a particular policy manager service.')
stnPmSLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmSLIndex.setStatus('current')
if mibBuilder.loadTexts: stnPmSLIndex.setDescription('Index into service-list table')
stnPmSLServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 14, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmSLServiceIndex.setStatus('current')
if mibBuilder.loadTexts: stnPmSLServiceIndex.setDescription('Index into service table')
stnPmSLServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 14, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmSLServiceName.setStatus('current')
if mibBuilder.loadTexts: stnPmSLServiceName.setDescription('Name of service')
stnPmSLServiceIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 14, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmSLServiceIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: stnPmSLServiceIdleTimeout.setDescription('Idle timeout for service')
stnPmSLServiceNumPolicies = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 14, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmSLServiceNumPolicies.setStatus('current')
if mibBuilder.loadTexts: stnPmSLServiceNumPolicies.setDescription('Number of policies in this service')
stnPmSLServiceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 14, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmSLServiceEnabled.setStatus('current')
if mibBuilder.loadTexts: stnPmSLServiceEnabled.setDescription('Flag to indicate if service is enabled')
stnPmSLServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 14, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vpn", 1), ("firewall", 2), ("ip-fileter", 3), ("forwarding", 4), ("qos", 5), ("mpls", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmSLServiceType.setStatus('current')
if mibBuilder.loadTexts: stnPmSLServiceType.setDescription('Type of service')
stnPmSLServiceFirewallID = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 14, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmSLServiceFirewallID.setStatus('current')
if mibBuilder.loadTexts: stnPmSLServiceFirewallID.setDescription("Instance of service's firewall record")
stnPmClassTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1), )
if mibBuilder.loadTexts: stnPmClassTable.setStatus('current')
if mibBuilder.loadTexts: stnPmClassTable.setDescription("This table is a 'flattened' version of a hierarchical class trees that specify the bandwidth allocation for the CBQ interfaces of the system. Each tree is rooted at an interface. A class may either be a leaf, meaning it has no children, or it may be an interior class which has children. As packets are forwarded out an interface, they are compared to the 'flow definition' of each class down the tree until a matching leaf is found or until all classes are traversed. Once a matching class is found, the packet is transmitted or not based on the constraints configured for the class, most importantly the allocated bandwidth as identified by stnPmClassRate. If no matching class is found, the packet is dropped.")
stnPmClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1), ).setIndexNames((0, "STN-POLICY-MIB", "stnPmIfIndex"), (0, "STN-POLICY-MIB", "stnPmTxclassInstance"))
if mibBuilder.loadTexts: stnPmClassEntry.setStatus('current')
if mibBuilder.loadTexts: stnPmClassEntry.setDescription("Information about a single traffic class. Traffic classes are identified by their associated interface's ifIndex and their name. (Which means class names must be unique for a particular interface.) Finally, the following objects cannot be modified once the row is active: stnPmClassParent, and stnPmClassQueueElasticityFactor.")
stnPmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnPmIfIndex.setDescription('A sequence number that identifies a particular interface the class has been installed on.')
stnPmTxclassInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmTxclassInstance.setStatus('current')
if mibBuilder.loadTexts: stnPmTxclassInstance.setDescription('The instance of the configuration record for the tranmsit class that the interface is using.')
stnPmClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassName.setStatus('current')
if mibBuilder.loadTexts: stnPmClassName.setDescription("A user-defined name for the traffic class. This is the unique identifier for the class within the scope of the interface. For example, the class that defines the IP address range for a particular customer might be 'Customer Fred Co.'")
stnPmClassParent = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)).clone('interface')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassParent.setStatus('current')
if mibBuilder.loadTexts: stnPmClassParent.setDescription('Name of class parent')
stnPmClassRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 5), StnPmBitRate()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassRate.setStatus('current')
if mibBuilder.loadTexts: stnPmClassRate.setDescription("A fraction of the bandwidth of the root interface to be allocated to this traffic class. Note that specifying 0 bits/second effectively filters all traffic that matches this class' flow specification. Also note that the sum of bit rates for all classes defined under the same class must be less than or equal to stnPmClassRate of the parent.")
stnPmClassPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassPriority.setStatus('current')
if mibBuilder.loadTexts: stnPmClassPriority.setDescription('The priority for this class. The smaller the value, the higher the priority. Delay-sensitive flows (such as video or audio) should be given higher priority values.')
stnPmClassMaxIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 7), Integer32()).setUnits('tens of nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassMaxIdle.setStatus('current')
if mibBuilder.loadTexts: stnPmClassMaxIdle.setDescription("An upper bound for the average idle time (see the DESCRIPTION of stnPmClassStatsIdle). Thus, stnPmClassMaxIdle limits the 'credit' given to a class that has recently been under its allocation.")
stnPmClassMinIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 8), Integer32()).setUnits('tens of nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassMinIdle.setStatus('current')
if mibBuilder.loadTexts: stnPmClassMinIdle.setDescription("The negative lower bound of the average idle. Thus, a negative minidle lets the router 'remember' that a class has recently used more than its allocated bandwidth.")
stnPmClassMaxQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200)).clone(100)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassMaxQueueLen.setStatus('current')
if mibBuilder.loadTexts: stnPmClassMaxQueueLen.setDescription('A factor used to influence whether this traffic class gets a proportionally larger or smaller queue size than other classes. Other factors in the queue size include the percent bandwidth allocated to this class and the priority.')
stnPmClassOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("downConflict", 3), ("autoClassActive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassOperStatus.setStatus('current')
if mibBuilder.loadTexts: stnPmClassOperStatus.setDescription("The actual operational status of the traffic class. The value 'up(1)' means this traffic class is in use, the value 'down(2)' indicates the traffic class is not in use either due to an internal problem or because it (or an ancestor) is administratively disabled, and the value 'downConflict(3)' indicates the class definition conflicts with those of its siblings. The value autoClassActive(4) means that the class is a dynamically created AutoClass, which may not be modified in any way until it is saved to Non-Volatile configuration memory. After an AutoClass is saved to NVRAM, it's operational status will transistion to up (1).")
stnPmClassBwUse = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("atLimit", 1), ("underLimit", 2), ("overLimit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassBwUse.setStatus('current')
if mibBuilder.loadTexts: stnPmClassBwUse.setDescription("An indication of whether this traffic class has used its allocated bandwidth, has not used its allocated bandwidth or has used more than its allocated bandwidth and is therefore 'atLimit(1)', 'underLimit(2)', or 'overLimit(3)' respectively.")
stnPmClassUnsatisfied = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassUnsatisfied.setStatus('current')
if mibBuilder.loadTexts: stnPmClassUnsatisfied.setDescription("An indication of whether this traffic class is 'unsatisfied'. The value of this object is 'true(1)' if it is underLimit and has a persistent backlog, meaning it has packets waiting in its queue. The value is 'false(1)' otherwise. Note that a class can be considered satisfied if it is underLimit and it just hasn't had anything to transmit. The presence of an unsatisfied class indicates that some other class is overLimit and 'hogging' bandwidth. Persistently unsatisfied classes indicate that tuning some of the parameters (such as stnPmClassMaxIdle or stnPmClassBounded) may be necessary.")
stnPmClassQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 13), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassQueueSize.setStatus('current')
if mibBuilder.loadTexts: stnPmClassQueueSize.setDescription('The size of the queue associated with this traffic class. This is the maximum number of packets that can be in the queue, not the number that are currently queued (see stnPmClassStatsQueuedPkts).')
stnPmClassMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 14), StnPmBitRate()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassMaxRate.setStatus('current')
if mibBuilder.loadTexts: stnPmClassMaxRate.setDescription("The maximum bandwidth the class may achieve, including bandwidth allocated to this class, and any bandwidth that may be borrowed. A value of zero (0) indicates that this feature is not being used. The stnPmClassMaxRate must be set to a value higher than the stnPmClassRate, but may also exceed the parent class's stnPmClassRate.")
stnPmClassDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassDescription.setStatus('current')
if mibBuilder.loadTexts: stnPmClassDescription.setDescription('Textual name associated with this class.')
stnPmClassStatsHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassStatsHighWater.setStatus('current')
if mibBuilder.loadTexts: stnPmClassStatsHighWater.setDescription('The historical maximum number of packets that were queued for this class since the system was last reinitialized.')
stnPmClassStatsIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 17), Integer32()).setUnits('tens of nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassStatsIdle.setStatus('current')
if mibBuilder.loadTexts: stnPmClassStatsIdle.setDescription('The difference between the desired time and the measured actual time between the most recent packet transmissions for the last two packets sent from this class. When the connection is sending perfectly at its allocated rate, then stnPmClassIdle is zero. When the connection is sending more than its allocated bandwidth, then stnPmClassIdle is negative.')
stnPmClassStatsQueuedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassStatsQueuedPkts.setStatus('current')
if mibBuilder.loadTexts: stnPmClassStatsQueuedPkts.setDescription("The current number of packets in the class' queue.")
stnPmClassStatsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassStatsOctets.setStatus('current')
if mibBuilder.loadTexts: stnPmClassStatsOctets.setDescription("The number of bytes transmitted for this traffic class. Note that a class with a configured stnPmClassRate of 0 bits/second will never transmit any octets and therefore this object's value will be 0. These filtered octets will be counted as part of stnPmClassStatsDroppedOctets.")
stnPmClassStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassStatsPkts.setStatus('current')
if mibBuilder.loadTexts: stnPmClassStatsPkts.setDescription("The number of packets transmitted for this traffic class. Note that a class with a configured stnPmClassRate of 0 bits/second will never transmit any packets and therefore this object's value will be 0. These filtered packets will be counted as part of stnPmClassStatsDroppedPkts.")
stnPmClassStatsOverLimits = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassStatsOverLimits.setStatus('current')
if mibBuilder.loadTexts: stnPmClassStatsOverLimits.setDescription('A count of the number of times the class used more than its allocated bandwidth.')
stnPmClassStatsBorrowAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassStatsBorrowAttempts.setStatus('current')
if mibBuilder.loadTexts: stnPmClassStatsBorrowAttempts.setDescription("A count of the number of times the class attempted to 'borrow' bandwidth from another class.")
stnPmClassStatsDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassStatsDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: stnPmClassStatsDroppedOctets.setDescription('A count of the number of octets dropped for this class because of lack of buffer space in the queue or because the class exceeded its allocated bandwidth.')
stnPmClassStatsDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassStatsDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: stnPmClassStatsDroppedPkts.setDescription('A count of the number of packets dropped for this class because of lack of buffer space in the queue or because the class exceeded its allocated bandwidth.')
stnPmClassStatsThrottles = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassStatsThrottles.setStatus('current')
if mibBuilder.loadTexts: stnPmClassStatsThrottles.setDescription('A count of the number of times the class was throttled (not allowed to transmit packets) by the link-sharing algorithm.')
stnPmClassStatsUnsatisfieds = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassStatsUnsatisfieds.setStatus('current')
if mibBuilder.loadTexts: stnPmClassStatsUnsatisfieds.setDescription('A count of the number of times the class was unsatisfied, as indicated by the stnPmClassUnsatisfied object.')
stnPmClassStatsAggrOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassStatsAggrOctets.setStatus('current')
if mibBuilder.loadTexts: stnPmClassStatsAggrOctets.setDescription('The aggregate number of bytes transmitted by the children of this traffic class.')
stnPmClassStatsAggrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 15, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPmClassStatsAggrPkts.setStatus('current')
if mibBuilder.loadTexts: stnPmClassStatsAggrPkts.setDescription('The aggregate number of packets transmitted by the children of this traffic class.')
mibBuilder.exportSymbols("STN-POLICY-MIB", stnPmManualSaEspAuthKey=stnPmManualSaEspAuthKey, stnPmFirewallPingFloodingDetection=stnPmFirewallPingFloodingDetection, stnPmSLServiceTable=stnPmSLServiceTable, stnPmPreferenceLifeTime=stnPmPreferenceLifeTime, stnPmProfileExceedOctets=stnPmProfileExceedOctets, stnPmMibConformance=stnPmMibConformance, stnPmServiceName=stnPmServiceName, stnPmFirewallMaxDynHashTableSize=stnPmFirewallMaxDynHashTableSize, stnPmPolicyDirection=stnPmPolicyDirection, stnPmQueueEntry=stnPmQueueEntry, stnPmPolicyTosByteValue=stnPmPolicyTosByteValue, stnPmMarkerByteValue=stnPmMarkerByteValue, stnPmServiceEntry=stnPmServiceEntry, stnPmClass=stnPmClass, stnPmPolicyDestMask=stnPmPolicyDestMask, stnPmFirewallActionName=stnPmFirewallActionName, stnPmClassStatsAggrOctets=stnPmClassStatsAggrOctets, stnPmEncapsEntry=stnPmEncapsEntry, stnPmPolicyMarkedOctets=stnPmPolicyMarkedOctets, stnPmManualSaEspEncrAlg=stnPmManualSaEspEncrAlg, stnPmFirewallSynAttackDetection=stnPmFirewallSynAttackDetection, stnPmQosLastDroppedPacket=stnPmQosLastDroppedPacket, stnPmManualSaTable=stnPmManualSaTable, stnPmServiceListTable=stnPmServiceListTable, stnPmServiceType=stnPmServiceType, stnPmFirewallActionInactivityLifeTime=stnPmFirewallActionInactivityLifeTime, stnPmClassRate=stnPmClassRate, stnPmProfileIndex=stnPmProfileIndex, stnPmPolicyMatches=stnPmPolicyMatches, stnPmMarkerName=stnPmMarkerName, stnPmFirewallActionIndex=stnPmFirewallActionIndex, stnPmServiceFirewallID=stnPmServiceFirewallID, stnPmPolicyName=stnPmPolicyName, stnPmPolicyProtocol=stnPmPolicyProtocol, stnPmPolicyMisses=stnPmPolicyMisses, stnPmManualSaIPsecID=stnPmManualSaIPsecID, stnPmQosLatestFlowCB=stnPmQosLatestFlowCB, stnPmClassMaxQueueLen=stnPmClassMaxQueueLen, stnPmServiceTable=stnPmServiceTable, PYSNMP_MODULE_ID=stnPm, stnPmPolicySrcAddrSelector=stnPmPolicySrcAddrSelector, stnPmPreferenceEspEncrAlg=stnPmPreferenceEspEncrAlg, stnPmQueueDropHCOctets=stnPmQueueDropHCOctets, stnPmClassStatsThrottles=stnPmClassStatsThrottles, stnPmSLServiceIdleTimeout=stnPmSLServiceIdleTimeout, stnPmManualSaIndex=stnPmManualSaIndex, stnPmQosFlowCBCreated=stnPmQosFlowCBCreated, stnPmFirewallPingScanDetection=stnPmFirewallPingScanDetection, stnPmManualSaEntry=stnPmManualSaEntry, stnPmEncapsGREKey=stnPmEncapsGREKey, stnPmPreferenceEntry=stnPmPreferenceEntry, stnPmProfileCommittedRate=stnPmProfileCommittedRate, stnPmServiceListName=stnPmServiceListName, stnPmPolicySrcEndAddr=stnPmPolicySrcEndAddr, stnPmPolicyMarkerID=stnPmPolicyMarkerID, stnPmManualSaAhAlg=stnPmManualSaAhAlg, stnPmManualSaAhKey=stnPmManualSaAhKey, stnPmProfileExceedAction=stnPmProfileExceedAction, stnPmProfileExceedActionID=stnPmProfileExceedActionID, stnPmQueueMaxQueueLen=stnPmQueueMaxQueueLen, stnPmClassStatsPkts=stnPmClassStatsPkts, stnPmClassStatsDroppedPkts=stnPmClassStatsDroppedPkts, stnPmFirewallTable=stnPmFirewallTable, stnPmFirewallEntry=stnPmFirewallEntry, stnPmFirewallActionTrackingType=stnPmFirewallActionTrackingType, stnPmClassMinIdle=stnPmClassMinIdle, stnPmPolicyDestAddrMatchType=stnPmPolicyDestAddrMatchType, stnPMProxyTunnel=stnPMProxyTunnel, stnPmFirewallName=stnPmFirewallName, stnPmPolicyActionID=stnPmPolicyActionID, StnPmAuthAlg=StnPmAuthAlg, stnPmServiceIndex=stnPmServiceIndex, stnPmMarkerEntry=stnPmMarkerEntry, stnPmSLServiceEntry=stnPmSLServiceEntry, stnPmPolicySrcPortMatchType=stnPmPolicySrcPortMatchType, stnPmPolicySrcEndPort=stnPmPolicySrcEndPort, stnPmIPsecEntry=stnPmIPsecEntry, stnPmManualSaSPI=stnPmManualSaSPI, stnPmQueueDropType=stnPmQueueDropType, stnPmPolicySrcMask=stnPmPolicySrcMask, stnPmPreferenceLifeBytes=stnPmPreferenceLifeBytes, stnPmPolicyTosByteMatchType=stnPmPolicyTosByteMatchType, stnPmPolicy=stnPmPolicy, stnPmEncapsLocalIpAddr=stnPmEncapsLocalIpAddr, stnPmProfileEnabled=stnPmProfileEnabled, stnPmPolicyDestPortMatchType=stnPmPolicyDestPortMatchType, stnPmFirewallActionStateful=stnPmFirewallActionStateful, stnPmFirewallAction=stnPmFirewallAction, stnPmPolicyTable=stnPmPolicyTable, stnPmPreferenceDescription=stnPmPreferenceDescription, stnPmProfileCommittedBurst=stnPmProfileCommittedBurst, stnPmQueueDropHCPkts=stnPmQueueDropHCPkts, stnPmFirewallMaxPingSize=stnPmFirewallMaxPingSize, stnPmProfileCautionActionID=stnPmProfileCautionActionID, stnPmMarker=stnPmMarker, stnPmManualSaEspAuthAlg=stnPmManualSaEspAuthAlg, stnPmIPsecName=stnPmIPsecName, stnPmClassUnsatisfied=stnPmClassUnsatisfied, stnPmPreferenceIndex=stnPmPreferenceIndex, stnPmServiceNumPolicies=stnPmServiceNumPolicies, stnPmIPsecPeerIpAddr=stnPmIPsecPeerIpAddr, stnPmFirewallEventLogMsg=stnPmFirewallEventLogMsg, stnPmClassStatsBorrowAttempts=stnPmClassStatsBorrowAttempts, stnPmFirewallAcceptSourceRouting=stnPmFirewallAcceptSourceRouting, stnPmPolicyDestAddrSelector=stnPmPolicyDestAddrSelector, stnPmIfIndex=stnPmIfIndex, stnPmFirewallTcpInactivityLifeTime=stnPmFirewallTcpInactivityLifeTime, stnPmManualSaEspEncrKey=stnPmManualSaEspEncrKey, stnPmFirewallMinLogPeriod=stnPmFirewallMinLogPeriod, stnPmQueueThreshold=stnPmQueueThreshold, stnPmFirewallActionTable=stnPmFirewallActionTable, stnPmSLService=stnPmSLService, stnPmClassParent=stnPmClassParent, stnPmQosShapingPacketDiscard=stnPmQosShapingPacketDiscard, stnPmProfileName=stnPmProfileName, stnPmProfileConformPkts=stnPmProfileConformPkts, stnPmFirewallEnableDynamicPortApps=stnPmFirewallEnableDynamicPortApps, stnPmPolicyDestEndPort=stnPmPolicyDestEndPort, stnPmPreferencePFSGroup=stnPmPreferencePFSGroup, stnPmServiceListEntry=stnPmServiceListEntry, stnPmPolicyProtocolMatchType=stnPmPolicyProtocolMatchType, stnPmMarkerByteMask=stnPmMarkerByteMask, stnPmPolicySrcPort=stnPmPolicySrcPort, stnPmSLIndex=stnPmSLIndex, stnPmFirewallNotification=stnPmFirewallNotification, stnPmServiceEnabled=stnPmServiceEnabled, stnPmService=stnPmService, stnPmEncapsPeerIpAddr=stnPmEncapsPeerIpAddr, stnPmQueueIndex=stnPmQueueIndex, stnPmFirewallPortScanDetection=stnPmFirewallPortScanDetection, stnPmFirewallTcpSynBacklogQueueSize=stnPmFirewallTcpSynBacklogQueueSize, stnPmPreferenceAhAlg=stnPmPreferenceAhAlg, stnPmEncapsTable=stnPmEncapsTable, stnPmFirewallLog=stnPmFirewallLog, stnPmFirewallAcceptOtherIPOptions=stnPmFirewallAcceptOtherIPOptions, stnPmClassMaxRate=stnPmClassMaxRate, stnPmClassEntry=stnPmClassEntry, stnPmServiceListEnabled=stnPmServiceListEnabled, stnPmManualSa=stnPmManualSa, stnPmPreferenceNum=stnPmPreferenceNum, stnPmPreferenceIPsecID=stnPmPreferenceIPsecID, stnPmFirewallActionRejectAction=stnPmFirewallActionRejectAction, stnPm=stnPm, stnPmIPsec=stnPmIPsec, stnPmEncaps=stnPmEncaps, stnPmFirewallTrapVars=stnPmFirewallTrapVars, stnPmIPsecMode=stnPmIPsecMode, stnPmQueueQueueLen=stnPmQueueQueueLen, stnPmClassStatsIdle=stnPmClassStatsIdle, StnPmEncrAlg=StnPmEncrAlg, stnPmIPsecIndex=stnPmIPsecIndex, stnPmTxclassInstance=stnPmTxclassInstance, stnPmQosTrapVars=stnPmQosTrapVars, stnPmServiceList=stnPmServiceList, stnPmClassPriority=stnPmClassPriority, stnPmSLServiceName=stnPmSLServiceName, stnPmQueueTable=stnPmQueueTable, stnPmSLServiceFirewallID=stnPmSLServiceFirewallID, stnPmPolicyAction=stnPmPolicyAction, StnPmSelectorType=StnPmSelectorType, stnPmPolicySrcAddr=stnPmPolicySrcAddr, stnPmEncapsType=stnPmEncapsType, stnPmFirewallTcpFinLifeTime=stnPmFirewallTcpFinLifeTime, stnPmServiceIdleTimeout=stnPmServiceIdleTimeout, StnPmBitRate=StnPmBitRate, stnPmClassStatsHighWater=stnPmClassStatsHighWater, stnPmPolicyDestAddr=stnPmPolicyDestAddr, stnPmPolicyServiceIndex=stnPmPolicyServiceIndex, stnPmPolicyIndex=stnPmPolicyIndex, stnPmPolicyIcmpTypes=stnPmPolicyIcmpTypes, stnPmFirewallPingOfDeathDetection=stnPmFirewallPingOfDeathDetection, stnPmClassBwUse=stnPmClassBwUse, stnPmEncapsName=stnPmEncapsName, stnPmMarkerMarkedPkts=stnPmMarkerMarkedPkts, stnPmPolicyTxclassID=stnPmPolicyTxclassID, stnPmServiceListConnIdleTimeout=stnPmServiceListConnIdleTimeout, StnPmDirection=StnPmDirection, stnPmPolicyEntry=stnPmPolicyEntry, stnPmPreferenceEspAuthAlg=stnPmPreferenceEspAuthAlg, stnPmQueueName=stnPmQueueName, stnPmFirewallActionEntry=stnPmFirewallActionEntry, stnPmIPsecNumPreferences=stnPmIPsecNumPreferences, stnPmClassStatsAggrPkts=stnPmClassStatsAggrPkts, stnPmFirewallTrap=stnPmFirewallTrap, stnPmPolicyEnabled=stnPmPolicyEnabled, stnPmTraps=stnPmTraps, stnPmProfileEntry=stnPmProfileEntry, stnPmFirewallIndex=stnPmFirewallIndex, stnPmClassDescription=stnPmClassDescription, stnPmFirewallTcpAckLifeTime=stnPmFirewallTcpAckLifeTime, stnPmClassQueueSize=stnPmClassQueueSize, stnPmPolicyTosByteMask=stnPmPolicyTosByteMask, stnPmPolicyDestEndAddr=stnPmPolicyDestEndAddr, stnPmIPsecTable=stnPmIPsecTable, stnPmFirewallUdpInactivityLifeTime=stnPmFirewallUdpInactivityLifeTime, stnPmProfileCautionAction=stnPmProfileCautionAction, stnPmClassName=stnPmClassName, stnPmQueue=stnPmQueue, stnPmQosFlowCBRemoved=stnPmQosFlowCBRemoved, stnPmManualSaDescription=stnPmManualSaDescription, stnPmProfileConformAction=stnPmProfileConformAction, stnPmServiceListIndex=stnPmServiceListIndex, stnPmFirewall=stnPmFirewall, stnPmProfileExcessRate=stnPmProfileExcessRate, stnPmMarkerMarkedOctets=stnPmMarkerMarkedOctets, stnPmProfileExcessBurst=stnPmProfileExcessBurst, stnPmQosTrap=stnPmQosTrap, stnPmFirewallTcpSynLifeTime=stnPmFirewallTcpSynLifeTime, stnPmFirewallPingsPerMinute=stnPmFirewallPingsPerMinute, stnPmPreferenceTable=stnPmPreferenceTable, stnPmManualSaPeerIpAddr=stnPmManualSaPeerIpAddr, stnPmIPsecReplayDetectionEnabled=stnPmIPsecReplayDetectionEnabled, stnPmFirewallTcpRstLifeTime=stnPmFirewallTcpRstLifeTime, stnPmIPsecKeyNegType=stnPmIPsecKeyNegType, stnPmClassStatsOverLimits=stnPmClassStatsOverLimits, stnPmPreference=stnPmPreference, stnPmIPsecNumManualSAs=stnPmIPsecNumManualSAs, stnPmPolicyMarkedPkts=stnPmPolicyMarkedPkts, stnPmFirewallNotificationPrefix=stnPmFirewallNotificationPrefix, stnPmIPsecLocalIpAddr=stnPmIPsecLocalIpAddr, stnPmPolicyDestPort=stnPmPolicyDestPort, stnPmFirewallLandAttackDetection=stnPmFirewallLandAttackDetection, stnPmSLServiceEnabled=stnPmSLServiceEnabled, stnPmMarkerIndex=stnPmMarkerIndex, stnPmPolicySrcAddrMatchType=stnPmPolicySrcAddrMatchType, stnPmMarkerTable=stnPmMarkerTable, stnPmObjects=stnPmObjects, stnPmEncapsIndex=stnPmEncapsIndex, stnPmProfileCautionPkts=stnPmProfileCautionPkts, stnPmProfileConformActionID=stnPmProfileConformActionID, stnPmQosNotificationPrefix=stnPmQosNotificationPrefix, stnPmServiceListNumServices=stnPmServiceListNumServices, stnPmQosThresholdPacketDiscard=stnPmQosThresholdPacketDiscard, stnPmClassStatsQueuedPkts=stnPmClassStatsQueuedPkts, stnPmProfileExceedPkts=stnPmProfileExceedPkts, stnPmProfile=stnPmProfile, stnPmQosNotification=stnPmQosNotification, stnPmSLServiceType=stnPmSLServiceType, stnPmClassStatsDroppedOctets=stnPmClassStatsDroppedOctets, StnPmPolicyMatchType=StnPmPolicyMatchType, stnPmProfileTable=stnPmProfileTable, stnPmClassMaxIdle=stnPmClassMaxIdle, stnPmProfileCautionOctets=stnPmProfileCautionOctets, stnPmClassTable=stnPmClassTable, stnPmClassStatsOctets=stnPmClassStatsOctets, stnPmClassStatsUnsatisfieds=stnPmClassStatsUnsatisfieds, stnPmSLServiceIndex=stnPmSLServiceIndex, stnPmClassOperStatus=stnPmClassOperStatus, stnPmPolicyCreateMirror=stnPmPolicyCreateMirror, stnPmProfileConformOctets=stnPmProfileConformOctets, stnPmManualSaDirection=stnPmManualSaDirection, stnPmSLServiceNumPolicies=stnPmSLServiceNumPolicies)
