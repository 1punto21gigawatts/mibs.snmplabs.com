#
# PySNMP MIB module DV2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DV2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:54:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, iso, Counter32, IpAddress, enterprises, NotificationType, TimeTicks, Gauge32, Unsigned32, Integer32, ObjectIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "iso", "Counter32", "IpAddress", "enterprises", "NotificationType", "TimeTicks", "Gauge32", "Unsigned32", "Integer32", "ObjectIdentity", "NotificationType")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
netcomm = MibIdentifier((1, 3, 6, 1, 4, 1, 251))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1))
dv2 = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1))
dv2System = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 1))
dv2Slot0 = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 2))
dv2Trace = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 3))
dv2SlipLine = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 4))
dv2StaticRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 5))
dv2Clocks = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 6))
dv2VcDoc = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 8))
dv2FrRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 9))
dv2VcStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 10))
dv2PLPP = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 11))
dv2LocalFibre = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 12))
dv2DS = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 13))
dv2Billing = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 14))
dv2QeDoc = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 15))
dv2SDH = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 16))
dv2Pvc = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 17))
dv2Svc = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 18))
dv2CE = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 19))
dv2VE = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 20))
dv2SystemClocks = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 21))
mjlimSlipLine = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 22))
mjlimSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 23))
vidInCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 24))
vidOutCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 25))
vidInSta = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 26))
vidOutSta = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 27))
audInCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 28))
audOutCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 29))
audInSta = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 30))
audOutSta = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 31))
dataCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 32))
dataSta = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 33))
mjlimControl = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 34))
dv2PDH = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 35))
dv2Oam = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 36))
dv2Lmi = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 37))
dv2AlarmHandler = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 38))
dv2Cac = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 39))
dv2MS2FRAC = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 40))
dv2aal5 = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 41))
vhsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 42))
vhcontrol = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 43))
vhmgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 44))
class VirtualCircuitIdentifier(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class VirtualPathIdentifier(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4095)

class E164(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 10)

class E164SUB(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 22)

class Q93bCauseDiag(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class Hex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class DateTimeString(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class DateAndTime(DateTimeString):
    pass

sysMemEnd = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 1), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemEnd.setStatus('mandatory')
if mibBuilder.loadTexts: sysMemEnd.setDescription('The current end of run-time allocated memory.')
sysInitialMemB = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInitialMemB.setStatus('mandatory')
if mibBuilder.loadTexts: sysInitialMemB.setDescription('initial number of memory items.')
sysCurrentMemB = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCurrentMemB.setStatus('mandatory')
if mibBuilder.loadTexts: sysCurrentMemB.setDescription('Current number of memory items.')
sysInitialSema = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInitialSema.setStatus('mandatory')
if mibBuilder.loadTexts: sysInitialSema.setDescription('Initial number of semaphores.')
sysCurrentSema = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCurrentSema.setStatus('mandatory')
if mibBuilder.loadTexts: sysCurrentSema.setDescription('Current number of semaphores.')
sysInitialQItems = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInitialQItems.setStatus('mandatory')
if mibBuilder.loadTexts: sysInitialQItems.setDescription('Initial number of queue items.')
sysCurrentQItems = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCurrentQItems.setStatus('mandatory')
if mibBuilder.loadTexts: sysCurrentQItems.setDescription('Current number of queue items.')
sysInitialQs = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInitialQs.setStatus('mandatory')
if mibBuilder.loadTexts: sysInitialQs.setDescription('Initial number of queues.')
sysCurrentQs = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCurrentQs.setStatus('mandatory')
if mibBuilder.loadTexts: sysCurrentQs.setDescription('Current number of queues.')
sysInitialPorts = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInitialPorts.setStatus('mandatory')
if mibBuilder.loadTexts: sysInitialPorts.setDescription('Initial number of ports.')
sysCurrentPorts = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCurrentPorts.setStatus('mandatory')
if mibBuilder.loadTexts: sysCurrentPorts.setDescription('Current number of ports.')
sysDefaultCellMode = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDefaultCellMode.setStatus('mandatory')
if mibBuilder.loadTexts: sysDefaultCellMode.setDescription('This flag indicates whether the cell interface is operating in default mode. If yes(2) then this indicates that the daughter card processor is not running its correct code.')
sysLinkTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15), )
if mibBuilder.loadTexts: sysLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: sysLinkTable.setDescription('This table contains information about each link on this slot controller.')
sysLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1), ).setIndexNames((0, "DV2-MIB", "sysLkLinkNo"))
if mibBuilder.loadTexts: sysLinkEntry.setStatus('mandatory')
sysLkLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLkLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: sysLkLinkNo.setDescription('The link number on the slot')
sysLkKillLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLkKillLink.setStatus('mandatory')
if mibBuilder.loadTexts: sysLkKillLink.setDescription('Set to restart(2) to kill this link')
sysLkState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("stop", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLkState.setStatus('mandatory')
if mibBuilder.loadTexts: sysLkState.setDescription('Status of the link')
sysLkTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLkTxCells.setStatus('mandatory')
if mibBuilder.loadTexts: sysLkTxCells.setDescription('Number of cells sent from link')
sysLkRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLkRxCells.setStatus('mandatory')
if mibBuilder.loadTexts: sysLkRxCells.setDescription('Number of cells received to link')
sysLkTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLkTxRate.setStatus('mandatory')
if mibBuilder.loadTexts: sysLkTxRate.setDescription('Cells per second sent from link')
sysLkRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLkRxRate.setStatus('mandatory')
if mibBuilder.loadTexts: sysLkRxRate.setDescription('Cells per second received to link')
sysLkTxMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLkTxMaxRate.setStatus('mandatory')
if mibBuilder.loadTexts: sysLkTxMaxRate.setDescription('Maximum cells per second transmitted from link')
sysLkRxMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLkRxMaxRate.setStatus('mandatory')
if mibBuilder.loadTexts: sysLkRxMaxRate.setDescription('Maximum cells per second received to link')
sysLkResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLkResetStats.setStatus('mandatory')
if mibBuilder.loadTexts: sysLkResetStats.setDescription('Set to yes(2) to reset the link statistics')
sysLkClockSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("low-quality", 2), ("high-quality", 3), ("loop-timed", 4), ("local", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLkClockSrc.setStatus('mandatory')
if mibBuilder.loadTexts: sysLkClockSrc.setDescription('This specifies where the link obtains its clock')
sysLkResetResrc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLkResetResrc.setStatus('mandatory')
if mibBuilder.loadTexts: sysLkResetResrc.setDescription('Set to yes(2) to reset the link resources')
sysLKEgCLPThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLKEgCLPThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sysLKEgCLPThreshold.setDescription('Transmit CLP1 threshold')
sysLKIgCLPThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLKIgCLPThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sysLKIgCLPThreshold.setDescription('Receive CLP1 threshold')
sysLKEgEFCIThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLKEgEFCIThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sysLKEgEFCIThreshold.setDescription('Transmit EFCI threshold')
sysLKIgEFCIThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLKIgEFCIThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sysLKIgEFCIThreshold.setDescription('Receive EFCI threshold')
sysLKEgLogBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLKEgLogBuffer.setStatus('mandatory')
if mibBuilder.loadTexts: sysLKEgLogBuffer.setDescription('Transmit logic buffer size')
sysLKIgLogBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLKIgLogBuffer.setStatus('mandatory')
if mibBuilder.loadTexts: sysLKIgLogBuffer.setDescription('Receive logic buffer size')
sysLKEgFIFODepth = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLKEgFIFODepth.setStatus('mandatory')
if mibBuilder.loadTexts: sysLKEgFIFODepth.setDescription('Transmit FIFO Depth')
sysLKIgFIFODepth = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLKIgFIFODepth.setStatus('mandatory')
if mibBuilder.loadTexts: sysLKIgFIFODepth.setDescription('Receive FIFO Depth')
sysLKEgMemBlockId = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 16, 63))).clone(namedValues=NamedValues(("mem-4k", 4), ("mem-16k", 16), ("mem-64k", 63)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLKEgMemBlockId.setStatus('mandatory')
if mibBuilder.loadTexts: sysLKEgMemBlockId.setDescription('Transmit Memory Block ID')
sysLKIgMemBlockId = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 16, 63))).clone(namedValues=NamedValues(("mem-4k", 4), ("mem-16k", 16), ("mem-64k", 63)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLKIgMemBlockId.setStatus('mandatory')
if mibBuilder.loadTexts: sysLKIgMemBlockId.setDescription('Receive Memory Block ID')
sysDbTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 16), )
if mibBuilder.loadTexts: sysDbTable.setStatus('mandatory')
if mibBuilder.loadTexts: sysDbTable.setDescription('This table contains information about the internal buffer pool on the slot controller.')
sysDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 16, 1), ).setIndexNames((0, "DV2-MIB", "sysDbIndex"))
if mibBuilder.loadTexts: sysDbEntry.setStatus('mandatory')
sysDbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDbIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sysDbIndex.setDescription('Buffer class number')
sysDbSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 128, 368, 1600, 48, 1, 2))).clone(namedValues=NamedValues(("buff16", 16), ("buff128", 128), ("buff368", 368), ("buff1600", 1600), ("cells", 48), ("signal-quota", 1), ("ip-quota", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDbSize.setStatus('mandatory')
if mibBuilder.loadTexts: sysDbSize.setDescription('Five classes of buffers are used:- 16, 128, 368 and 1600 bytes plus 48 bytes for cells.')
sysDbInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDbInitial.setStatus('mandatory')
if mibBuilder.loadTexts: sysDbInitial.setDescription('This is the initial number of buffers available.')
sysDbCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDbCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: sysDbCurrent.setDescription('This is the current number of buffers available.')
sysAuthenticateTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17), )
if mibBuilder.loadTexts: sysAuthenticateTable.setStatus('mandatory')
if mibBuilder.loadTexts: sysAuthenticateTable.setDescription('Table containing all the authentication tuples for this agent.')
sysAuthenticateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17, 1), ).setIndexNames((0, "DV2-MIB", "sysAuIndex"))
if mibBuilder.loadTexts: sysAuthenticateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sysAuthenticateEntry.setDescription('An authentication tuple. A PDU from the ipaddress specified that contains the community, will have access to this MIB.')
sysAuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sysAuIndex.setDescription('Index, identifying each entry in the authentication table.')
sysAuIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuIpaddress.setStatus('mandatory')
if mibBuilder.loadTexts: sysAuIpaddress.setDescription('The network address of the manager that has authentication access to this agent.')
sysAuCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: sysAuCommunity.setDescription('The SNMP community for which the ipaddress is authenticated.')
sysAuAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuAccess.setStatus('mandatory')
if mibBuilder.loadTexts: sysAuAccess.setDescription('Access permission for this ipaddress/community tuple. Write access is required for performing SNMP sets.')
sysAuSendTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("send-all", 1), ("send-none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuSendTraps.setStatus('mandatory')
if mibBuilder.loadTexts: sysAuSendTraps.setDescription('Set to send-none(2) to prevent traps being sent to this host.')
sysAuValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuValidity.setStatus('mandatory')
if mibBuilder.loadTexts: sysAuValidity.setDescription('Set to invalid(2) to delete this row.')
sysLastTrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLastTrapMessage.setStatus('mandatory')
if mibBuilder.loadTexts: sysLastTrapMessage.setDescription('This is used to contain the last trap string sent.')
sysConfigChanged = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigChanged.setStatus('mandatory')
if mibBuilder.loadTexts: sysConfigChanged.setDescription('This indicates that a new <config.cfg> file is available. This should not be set by the user.')
sysConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-action", 1), ("read", 2), ("write", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigFile.setStatus('mandatory')
if mibBuilder.loadTexts: sysConfigFile.setDescription('Set to read(2) to re-read the <config.cfg> file. Set to write(3) to write the existing configuration to <config.cfg>.')
sysCompileTime = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCompileTime.setStatus('mandatory')
if mibBuilder.loadTexts: sysCompileTime.setDescription('Date and time of link in the form dd Mon yyyy hh:mm:ss. For example:- 15 Aug 1994 10:12:21')
slotNumber = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: slotNumber.setDescription('Slot Number')
sysLastResetTimeM2 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLastResetTimeM2.setStatus('mandatory')
if mibBuilder.loadTexts: sysLastResetTimeM2.setDescription('Date and time board was last reset.')
sysCurrentTimeM2 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 24), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCurrentTimeM2.setStatus('mandatory')
if mibBuilder.loadTexts: sysCurrentTimeM2.setDescription('Current date and time in the form dd Mon yyyy hh:mm:ss. For example:- 15 Aug 1994 10:12:21')
limTypeStatus = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("compatible", 2), ("not-compatible", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limTypeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: limTypeStatus.setDescription('Describes whether the lim and the DOC card are compatible.')
slot0IntIp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0IntIp.setStatus('mandatory')
if mibBuilder.loadTexts: slot0IntIp.setDescription('IP address of SLOT 0 for ATM interface.')
slot0XpInUse = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2))).clone(namedValues=NamedValues(("unknown", 3), ("main-in-service", 1), ("standby-in-service", 2))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0XpInUse.setStatus('mandatory')
if mibBuilder.loadTexts: slot0XpInUse.setDescription('The current Switch Fabric in Service')
slot0XpToUse = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2, 4))).clone(namedValues=NamedValues(("auto", 3), ("main", 1), ("standby", 2), ("not-applicable", 4))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0XpToUse.setStatus('mandatory')
if mibBuilder.loadTexts: slot0XpToUse.setDescription('This indicates the switch fabric card you want the switch to use.')
slot0StandbyXp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0StandbyXp.setStatus('mandatory')
if mibBuilder.loadTexts: slot0StandbyXp.setDescription('Set to yes(1) to enable standby switch fabric.')
slot0PsuTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5), )
if mibBuilder.loadTexts: slot0PsuTable.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PsuTable.setDescription('')
slot0PsuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1), ).setIndexNames((0, "DV2-MIB", "slot0PsuIndex"))
if mibBuilder.loadTexts: slot0PsuEntry.setStatus('mandatory')
slot0PsuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PsuIndex.setDescription('Power-supply number.')
slot0PsuFault = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2))).clone(namedValues=NamedValues(("absent", 3), ("ok", 1), ("fault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuFault.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PsuFault.setDescription('If fault(2) then this indicates a fault condition in the power-supply.')
slot0PsuTestFault = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuTestFault.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PsuTestFault.setDescription('If set to yes(1) the control button on the PSU module has been set to test fault mode.')
slot0PsuVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PsuVoltage.setDescription('This is a the voltage generated by the power-supply in millivolts.')
slot0PsuTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuTemp.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PsuTemp.setDescription('This is the temperature of the power-supply module in degrees celsius.')
slot0PsuFanASpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuFanASpeed.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PsuFanASpeed.setDescription('This is the rotation speed of FAN A in RPM.')
slot0PsuFanBSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuFanBSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PsuFanBSpeed.setDescription('This is the rotation speed of FAN B in RPM.')
slot0PsuFanCSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuFanCSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PsuFanCSpeed.setDescription('This is the rotation speed of FAN C in RPM.')
slot0PsuReset = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0PsuReset.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PsuReset.setDescription('If set to yes(2) then the power-supply module is returned to its initial state.')
slot0PsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1-ATM-SWITCH", 1), ("v2-ATM-SWITCH", 2), ("v3-ATM-SWITCH", 3), ("v4-ATM-SWITCH", 4), ("v5-ATM-SWITCH", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuType.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PsuType.setDescription('Shows the type of PSU fitted into switch.')
slot0PsuFanFail = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuFanFail.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PsuFanFail.setDescription('Set to yes(2) if the fan fails.')
slot0PsuTooHot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuTooHot.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PsuTooHot.setDescription('Set to yes(2) if the PSU is too hot')
slot0PsuFrontTooHot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuFrontTooHot.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PsuFrontTooHot.setDescription('Set to yes(2) if the Front is too hot')
slot0PhyTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6), )
if mibBuilder.loadTexts: slot0PhyTable.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhyTable.setDescription('This table summarises the hardware installed in the switch.')
slot0PhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1), ).setIndexNames((0, "DV2-MIB", "slot0PhySlotNo"))
if mibBuilder.loadTexts: slot0PhyEntry.setStatus('mandatory')
slot0PhySlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhySlotNo.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhySlotNo.setDescription('This is the slot number in the switch.')
slot0PhyName = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0PhyName.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhyName.setDescription('This is a mnemonic name for the slot.')
slot0PhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150))).clone(namedValues=NamedValues(("unknown", 1), ("dxdoc", 128), ("qedoc", 129), ("vcdoc", 130), ("cp", 133), ("cl", 134), ("cs", 135), ("hp", 136), ("hl", 137), ("hs", 138), ("ce", 139), ("ve", 140), ("chfrc", 141), ("eth", 142), ("frac", 143), ("trdoc", 144), ("sce", 145), ("dv2ap", 146), ("dv2as", 147), ("vsm", 148), ("ipas", 149), ("ipap", 150)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyType.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhyType.setDescription('This enumerated type defines the type of card fitted in the slot.')
slot0PhyDlim = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))).clone(namedValues=NamedValues(("unknown", 1), ("dx21", 2), ("dx27", 3), ("d2G703", 4), ("d8G703", 5), ("d34G703", 6), ("dAUI", 7), ("dlfLIM", 8), ("dds1", 9), ("dds3", 10), ("dhssi", 11), ("dsolim", 12), ("ds3-2c", 13), ("e3-2c", 14), ("e1-dual", 15), ("e1-quad", 16), ("ds1-dual", 17), ("ds1-quad", 18), ("jpeg", 19), ("j2-dual", 20), ("j2-quad", 21), ("vh320", 22), ("si-dual", 23), ("si-quad", 24), ("delim", 25), ("mpg2v", 26), ("qtlim", 27)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0PhyDlim.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhyDlim.setDescription('This is the type of DLIM fitted to the slot.')
slot0PhySwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhySwVer.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhySwVer.setDescription('Version of the software running on this slot controller.')
slot0PhyState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("absent", 1), ("bootmode", 2), ("active", 3), ("shutdown", 4), ("shadow", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyState.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhyState.setDescription('The state of the slot, -(1) indicates no card fitted.')
slot0PhyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0PhyReset.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhyReset.setDescription('Setting to yes(2) will reset the slot - use with care')
slot0PhyReqState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("shutdown", 2), ("main", 3), ("shadow", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0PhyReqState.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhyReqState.setDescription('Setting to shutdown(2) will stop the slot running. The slot should only be set to main(3) or shadow(4) if the slot is operating in hardware redundant mode with an adjacent slot.')
slot0PhyStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyStateChange.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhyStateChange.setDescription('Indicates link has changed state.')
slot0PhyLinkedSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0PhyLinkedSlot.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhyLinkedSlot.setDescription('This is used in hardware redundancy mode. If set to 0 then there is no associated slot. Otherwise the value is the slot number that will be used if this slot fails.')
slot0PhyLink0State = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 1, 2, 3, 5))).clone(namedValues=NamedValues(("stop", 4), ("up", 1), ("down", 2), ("off", 3), ("reset", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyLink0State.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhyLink0State.setDescription('This contains link 0 status.')
slot0PhyLink1State = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 1, 2, 3, 5))).clone(namedValues=NamedValues(("stop", 4), ("up", 1), ("down", 2), ("off", 3), ("reset", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyLink1State.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhyLink1State.setDescription('This contains link 1 status.')
slot0PhyLink2State = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 1, 2, 3, 5))).clone(namedValues=NamedValues(("stop", 4), ("up", 1), ("down", 2), ("off", 3), ("reset", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyLink2State.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhyLink2State.setDescription('This contains link 2 status.')
slot0PhyLink3State = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 1, 2, 3, 5))).clone(namedValues=NamedValues(("stop", 4), ("up", 1), ("down", 2), ("off", 3), ("reset", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyLink3State.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhyLink3State.setDescription('This contains link 3 status.')
slot0PhySlotSerNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhySlotSerNo.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhySlotSerNo.setDescription('Serial number of the slot controller.')
slot0PhySlotHwVerNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhySlotHwVerNo.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhySlotHwVerNo.setDescription('Hardware version number and revision of the slot controller.')
slot0PhyDocSerNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyDocSerNo.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhyDocSerNo.setDescription('Serial number of the DOC.')
slot0PhyDocHwVerNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyDocHwVerNo.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhyDocHwVerNo.setDescription('Hardware version number and revision of the DOC.')
slot0PhyMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 20), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0PhyMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhyMacAddress.setDescription('MAC address of the slot.')
slot0PhyChangeTimeM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyChangeTimeM2.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhyChangeTimeM2.setDescription('Last date and time link changed state.')
slot0PhyLstChngLnkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("link-0", 1), ("link-1", 2), ("link-2", 3), ("link-3", 4), ("none", 5))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyLstChngLnkNum.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhyLstChngLnkNum.setDescription('Holds the link number of the last link status to change.')
slot0PhyLstChngPrevLnkStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("off", 3), ("stop", 4), ("reset", 5), ("none", 6))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyLstChngPrevLnkStat.setStatus('mandatory')
if mibBuilder.loadTexts: slot0PhyLstChngPrevLnkStat.setDescription('Holds the previous link state of the last link number whose status changed.')
slot0MaxUpSlots = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0MaxUpSlots.setStatus('mandatory')
if mibBuilder.loadTexts: slot0MaxUpSlots.setDescription('The maximum number of slots that have been up.')
slot0CurrentUpSlots = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0CurrentUpSlots.setStatus('mandatory')
if mibBuilder.loadTexts: slot0CurrentUpSlots.setDescription('The number of slots currently up.')
slot0IsStandbySlot0 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 4, 1, 2, 6))).clone(namedValues=NamedValues(("unknown", 5), ("not-applicable", 4), ("no", 1), ("yes", 2), ("not-ready", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0IsStandbySlot0.setStatus('mandatory')
if mibBuilder.loadTexts: slot0IsStandbySlot0.setDescription('Set to yes(2) if there is a redundant slot 0 available.')
slot0TftpToStandby = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0TftpToStandby.setStatus('mandatory')
if mibBuilder.loadTexts: slot0TftpToStandby.setDescription('Set to no(2) to stop files being transferred to the out of service slot0 automatically when they are changed.')
slot0MibBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("snmp-Authentication", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0MibBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: slot0MibBroadcast.setDescription('Broadcasts particular tables to all other slots.')
slot0Address = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 14), E164()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0Address.setStatus('mandatory')
if mibBuilder.loadTexts: slot0Address.setDescription('The E.164 address of the switch.')
slot0InUse = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 1, 2, 3, 4, 6, 7))).clone(namedValues=NamedValues(("unknown", 5), ("main-in-service", 1), ("standby-in-service", 2), ("main-out-of-service", 3), ("standby-out-of-service", 4), ("main-disabled", 6), ("standby-disabled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0InUse.setStatus('mandatory')
if mibBuilder.loadTexts: slot0InUse.setDescription('The Slot 0 card Redundancy Status.')
slot0ToUse = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2, 4, 5))).clone(namedValues=NamedValues(("auto", 3), ("main", 1), ("standby", 2), ("not-applicable", 4), ("disable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0ToUse.setStatus('mandatory')
if mibBuilder.loadTexts: slot0ToUse.setDescription('This indicates the Slot 0 card you want the switch to use.')
slot0redmode = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 4), ("non-redundant", 1), ("basic-redundancy", 2), ("enhanced-redundancy", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0redmode.setStatus('mandatory')
if mibBuilder.loadTexts: slot0redmode.setDescription('The Slot 0 card Redundancy mode.')
slot0IntIPMask = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0IntIPMask.setStatus('mandatory')
if mibBuilder.loadTexts: slot0IntIPMask.setDescription('IP Mask for Internal Subnet. To reconfigure, Save new configuration and perform then warm Start.')
slot0SwitchId = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0SwitchId.setStatus('mandatory')
if mibBuilder.loadTexts: slot0SwitchId.setDescription('Switch ID for this Apex node')
ntms0doc = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntms0doc.setStatus('mandatory')
if mibBuilder.loadTexts: ntms0doc.setDescription('Signifies that the S0DOC is capable of communicating with an NTM')
slot0LecsPrefix = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 21), E164()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0LecsPrefix.setStatus('mandatory')
if mibBuilder.loadTexts: slot0LecsPrefix.setDescription('The NSAP network prefix for LECS.')
slot0LecsESI = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 22), E164()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0LecsESI.setStatus('mandatory')
if mibBuilder.loadTexts: slot0LecsESI.setDescription('The NSAP ESI for LECS.')
clksTxTimingRef = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("system-timing-reference", 1), ("local-link0", 2), ("local-link1", 3), ("local-oscillator", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clksTxTimingRef.setStatus('mandatory')
if mibBuilder.loadTexts: clksTxTimingRef.setDescription('Transmit Timing Reference')
clksSysRefSlotNum = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clksSysRefSlotNum.setStatus('mandatory')
if mibBuilder.loadTexts: clksSysRefSlotNum.setDescription('System Timing Reference Slot Number')
clksSysRefLinkNum = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("link0", 1), ("link1", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clksSysRefLinkNum.setStatus('mandatory')
if mibBuilder.loadTexts: clksSysRefLinkNum.setDescription('System Timing Reference Link Number')
clksSysRefError = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("slot0", 1), ("slot1", 2), ("slot2", 3), ("slot3", 4), ("slot4", 5), ("slot5", 6), ("slot6", 7), ("slot7", 8), ("slot8", 9), ("slot9", 10), ("slot10", 11), ("slot11", 12), ("slot12", 13), ("slot13", 14), ("slot14", 15), ("slot15", 16), ("none", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clksSysRefError.setStatus('mandatory')
if mibBuilder.loadTexts: clksSysRefError.setDescription('System Timing Error')
autoRevert = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoRevert.setStatus('mandatory')
if mibBuilder.loadTexts: autoRevert.setDescription('Automatic Revert after Timing Source Recovery')
revertTimer = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: revertTimer.setStatus('mandatory')
if mibBuilder.loadTexts: revertTimer.setDescription('Revert Timer in Seconds')
forceRevert = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceRevert.setStatus('mandatory')
if mibBuilder.loadTexts: forceRevert.setDescription('Force Immediate Revert')
forceSecondary = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceSecondary.setStatus('mandatory')
if mibBuilder.loadTexts: forceSecondary.setDescription('Force Secondary Source Timing')
alarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clear", 1), ("minor", 2), ("major", 3))).clone('clear')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: alarmStatus.setDescription('Timing Alarm Status')
inService = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("pri-line", 2), ("pri-internal", 3), ("pri-stratum3", 4), ("pri-external", 5), ("sec-line", 6), ("sec-internal", 7), ("sec-stratum3", 8), ("sec-external", 9), ("pri-plcp", 10), ("sec-plcp", 11))).clone('pri-internal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: inService.setStatus('mandatory')
if mibBuilder.loadTexts: inService.setDescription('Card in Service')
primaryClockTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7), )
if mibBuilder.loadTexts: primaryClockTable.setStatus('mandatory')
primaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1), ).setIndexNames((0, "DV2-MIB", "pIndex"))
if mibBuilder.loadTexts: primaryEntry.setStatus('mandatory')
pIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pIndex.setDescription('Entry Index')
pValidSource = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pValidSource.setStatus('mandatory')
if mibBuilder.loadTexts: pValidSource.setDescription('Valid Timing Source')
pOnOffLine = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnOffLine.setStatus('mandatory')
if mibBuilder.loadTexts: pOnOffLine.setDescription('On / Off line Toggle')
pSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pSlotNumber.setDescription('Primary Source Slot Number')
pSysRefSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("link0", 1), ("link1", 2), ("link2", 3), ("link3", 4), ("local-oscillator", 5))).clone('local-oscillator')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSysRefSelect.setStatus('mandatory')
if mibBuilder.loadTexts: pSysRefSelect.setDescription('System Reference Select')
pActiveTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("line", 1), ("internal", 2), ("plcp", 3))).clone('internal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pActiveTimingSource.setStatus('mandatory')
if mibBuilder.loadTexts: pActiveTimingSource.setDescription('Active Timing Reference')
pInputLineOk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pInputLineOk.setStatus('mandatory')
if mibBuilder.loadTexts: pInputLineOk.setDescription('Input Line OK')
pSysRefTimingOk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSysRefTimingOk.setStatus('mandatory')
if mibBuilder.loadTexts: pSysRefTimingOk.setDescription('System Reference Timing OK')
secondaryClockTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8), )
if mibBuilder.loadTexts: secondaryClockTable.setStatus('mandatory')
secondaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1), ).setIndexNames((0, "DV2-MIB", "sIndex"))
if mibBuilder.loadTexts: secondaryEntry.setStatus('mandatory')
sIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sIndex.setDescription('Entry Index')
sValidSource = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sValidSource.setStatus('mandatory')
if mibBuilder.loadTexts: sValidSource.setDescription('Valid Timing Source')
sOnOffLine = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sOnOffLine.setStatus('mandatory')
if mibBuilder.loadTexts: sOnOffLine.setDescription('On / Off line Toggle')
sSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sSlotNumber.setDescription('Secondary Source Slot Number')
sSysRefSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("link0", 1), ("link1", 2), ("link2", 3), ("link3", 4), ("local-oscillator", 5))).clone('local-oscillator')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sSysRefSelect.setStatus('mandatory')
if mibBuilder.loadTexts: sSysRefSelect.setDescription('System Reference Select')
sActiveTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("line", 1), ("internal", 2), ("plcp", 3))).clone('internal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sActiveTimingSource.setStatus('mandatory')
if mibBuilder.loadTexts: sActiveTimingSource.setDescription('Active Timing Reference')
sInputLineOk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sInputLineOk.setStatus('mandatory')
if mibBuilder.loadTexts: sInputLineOk.setDescription('Input Line OK')
sSysRefTimingOk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSysRefTimingOk.setStatus('mandatory')
if mibBuilder.loadTexts: sSysRefTimingOk.setDescription('System Reference Timing OK')
str3Configured = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: str3Configured.setStatus('mandatory')
if mibBuilder.loadTexts: str3Configured.setDescription('CAT Card present')
pCATcontrolTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10), )
if mibBuilder.loadTexts: pCATcontrolTable.setStatus('mandatory')
pCATcontrolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1), ).setIndexNames((0, "DV2-MIB", "pccIndex"))
if mibBuilder.loadTexts: pCATcontrolEntry.setStatus('mandatory')
pccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pccIndex.setDescription('Entry Index')
pccatlimtype = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("t1", 2), ("e1", 3))).clone('t1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pccatlimtype.setStatus('mandatory')
if mibBuilder.loadTexts: pccatlimtype.setDescription('Type of CAT LIM')
pccatsendcode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pccatsendcode.setStatus('mandatory')
if mibBuilder.loadTexts: pccatsendcode.setDescription('Send code to NTM LIM')
pccatactivate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pccatactivate.setStatus('mandatory')
if mibBuilder.loadTexts: pccatactivate.setDescription('Activate NTM Code')
pccatsendconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pccatsendconfig.setStatus('mandatory')
if mibBuilder.loadTexts: pccatsendconfig.setDescription('Send Configuration to NTM LIM')
pccatbytestransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccatbytestransferred.setStatus('mandatory')
if mibBuilder.loadTexts: pccatbytestransferred.setDescription('Code bytes transferred to NTM LIM')
pccatfilexferstat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("start", 2), ("continue", 3), ("end", 4), ("ack", 5), ("aborted", 6), ("error", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccatfilexferstat.setStatus('mandatory')
if mibBuilder.loadTexts: pccatfilexferstat.setDescription('File transfer status as reported by Slot 0')
pcatforcesecext = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcatforcesecext.setStatus('mandatory')
if mibBuilder.loadTexts: pcatforcesecext.setDescription('Force the secondary external')
pcatforcesecstr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcatforcesecstr3.setStatus('mandatory')
if mibBuilder.loadTexts: pcatforcesecstr3.setDescription('Force the secondary stratum 3')
pcatcommand = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("revert", 2))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcatcommand.setStatus('mandatory')
if mibBuilder.loadTexts: pcatcommand.setDescription('Internal Use')
pcatplaceholder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcatplaceholder1.setStatus('mandatory')
if mibBuilder.loadTexts: pcatplaceholder1.setDescription('Placeholder for future MIB changes')
pcatplaceholder2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcatplaceholder2.setStatus('mandatory')
if mibBuilder.loadTexts: pcatplaceholder2.setDescription('Placeholder for future MIB changes')
pcconoffline = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offline", 1), ("online", 2))).clone('offline')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcconoffline.setStatus('mandatory')
if mibBuilder.loadTexts: pcconoffline.setDescription('Put NTM LIM on or offline')
sCATcontrolTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11), )
if mibBuilder.loadTexts: sCATcontrolTable.setStatus('mandatory')
sCATcontrolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1), ).setIndexNames((0, "DV2-MIB", "sccIndex"))
if mibBuilder.loadTexts: sCATcontrolEntry.setStatus('mandatory')
sccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sccIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sccIndex.setDescription('Entry Index')
sccatlimtype = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("t1", 2), ("e1", 3))).clone('t1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sccatlimtype.setStatus('mandatory')
if mibBuilder.loadTexts: sccatlimtype.setDescription('Type of NTM LIM')
sccatsendcode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sccatsendcode.setStatus('mandatory')
if mibBuilder.loadTexts: sccatsendcode.setDescription('Download code to NTM LIM')
sccatactivate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sccatactivate.setStatus('mandatory')
if mibBuilder.loadTexts: sccatactivate.setDescription('Activate NTM Code')
sccatsendconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sccatsendconfig.setStatus('mandatory')
if mibBuilder.loadTexts: sccatsendconfig.setDescription('Download Configuration to NTM LIM')
sccatbytestransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sccatbytestransferred.setStatus('mandatory')
if mibBuilder.loadTexts: sccatbytestransferred.setDescription('Code bytes transferred to NTM LIM')
sccatfilexferstat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("start", 2), ("continue", 3), ("end", 4), ("ack", 5), ("aborted", 6), ("error", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sccatfilexferstat.setStatus('mandatory')
if mibBuilder.loadTexts: sccatfilexferstat.setDescription('File transfer status as reported by Slot 0')
scatcommand = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("revert", 2))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scatcommand.setStatus('mandatory')
if mibBuilder.loadTexts: scatcommand.setDescription('Internal Use')
scatplaceholder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scatplaceholder1.setStatus('mandatory')
if mibBuilder.loadTexts: scatplaceholder1.setDescription('Placeholder for future MIB changes')
scatplaceholder2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scatplaceholder2.setStatus('mandatory')
if mibBuilder.loadTexts: scatplaceholder2.setDescription('Placeholder for future MIB changes')
scconoffline = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offline", 1), ("online", 2))).clone('offline')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scconoffline.setStatus('mandatory')
if mibBuilder.loadTexts: scconoffline.setDescription('Put NTM LIM on or offline')
pCATstatusTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12), )
if mibBuilder.loadTexts: pCATstatusTable.setStatus('mandatory')
pCATstatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1), ).setIndexNames((0, "DV2-MIB", "pscIndex"))
if mibBuilder.loadTexts: pCATstatusEntry.setStatus('mandatory')
pscIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pscIndex.setDescription('Entry Index')
pscatlimtype = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("t1", 2), ("e1", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscatlimtype.setStatus('mandatory')
if mibBuilder.loadTexts: pscatlimtype.setDescription('Type of NTM LIM detected')
psCATFFrevision = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCATFFrevision.setStatus('mandatory')
if mibBuilder.loadTexts: psCATFFrevision.setDescription('NTM LIM Code Revision')
psCATBootrevision = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCATBootrevision.setStatus('mandatory')
if mibBuilder.loadTexts: psCATBootrevision.setDescription('NTM LIM Boot Revision')
pscatfilestatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("na", 1), ("not-present", 2), ("present", 3))).clone('na')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscatfilestatus.setStatus('mandatory')
if mibBuilder.loadTexts: pscatfilestatus.setDescription('Flash file status')
psCATfilerevision = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCATfilerevision.setStatus('mandatory')
if mibBuilder.loadTexts: psCATfilerevision.setDescription('NTM LIM file Revision')
psCATHWrevision = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCATHWrevision.setStatus('mandatory')
if mibBuilder.loadTexts: psCATHWrevision.setDescription('NTM LIM Hardware Revision')
pscatmode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2, 4, 5, 6, 7))).clone(namedValues=NamedValues(("no-card", 3), ("boot", 1), ("full-feature-offline", 2), ("unknown", 4), ("full-feature-in-dnld", 5), ("boot-in-dnld", 6), ("full-feature-online", 7))).clone('no-card')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscatmode.setStatus('mandatory')
if mibBuilder.loadTexts: pscatmode.setDescription('Operating Mode of NTM LIM')
pscaterrorcode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("bad-config", 3), ("no-code", 4), ("no-config", 5), ("download-ok", 6), ("download-fail", 7))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscaterrorcode.setStatus('mandatory')
if mibBuilder.loadTexts: pscaterrorcode.setDescription('NTM LIM Error Code')
pscatplaceholder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscatplaceholder1.setStatus('mandatory')
if mibBuilder.loadTexts: pscatplaceholder1.setDescription('Placeholder for future MIB changes')
pscatplaceholder2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscatplaceholder2.setStatus('mandatory')
if mibBuilder.loadTexts: pscatplaceholder2.setDescription('Placeholder for future MIB changes')
sCATstatusTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13), )
if mibBuilder.loadTexts: sCATstatusTable.setStatus('mandatory')
sCATstatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1), ).setIndexNames((0, "DV2-MIB", "sscIndex"))
if mibBuilder.loadTexts: sCATstatusEntry.setStatus('mandatory')
sscIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sscIndex.setDescription('Entry Index')
sscatlimtype = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("t1", 2), ("e1", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscatlimtype.setStatus('mandatory')
if mibBuilder.loadTexts: sscatlimtype.setDescription('Type of NTM LIM')
ssCATFFrevision = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCATFFrevision.setStatus('mandatory')
if mibBuilder.loadTexts: ssCATFFrevision.setDescription('NTM LIM Code Revision')
ssCATBootrevision = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCATBootrevision.setStatus('mandatory')
if mibBuilder.loadTexts: ssCATBootrevision.setDescription('NTM LIM Boot Revision')
sscatfilestatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("na", 1), ("not-present", 2), ("present", 3))).clone('na')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscatfilestatus.setStatus('mandatory')
if mibBuilder.loadTexts: sscatfilestatus.setDescription('Flash file status')
ssCATfilerevision = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCATfilerevision.setStatus('mandatory')
if mibBuilder.loadTexts: ssCATfilerevision.setDescription('NTM LIM file Revision')
ssCATHWrevision = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCATHWrevision.setStatus('mandatory')
if mibBuilder.loadTexts: ssCATHWrevision.setDescription('NTM LIM Hardware Revision')
sscatmode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2, 4, 5, 6, 7))).clone(namedValues=NamedValues(("no-card", 3), ("boot", 1), ("full-feature-offline", 2), ("unknown", 4), ("full-feature-in-dnld", 5), ("boot-in-dnld", 6), ("full-feature-online", 7))).clone('no-card')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscatmode.setStatus('mandatory')
if mibBuilder.loadTexts: sscatmode.setDescription('Operating mode of NTM LIM')
sscaterrorcode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("no-cat", 2), ("bad-config", 3), ("no-code", 4), ("no-config", 5), ("download-ok", 6), ("download-fail", 7))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscaterrorcode.setStatus('mandatory')
if mibBuilder.loadTexts: sscaterrorcode.setDescription('NTM LIM Error Code')
sscatplaceholder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscatplaceholder1.setStatus('mandatory')
if mibBuilder.loadTexts: sscatplaceholder1.setDescription('Placeholder for future MIB changes')
sscatplaceholder2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscatplaceholder2.setStatus('mandatory')
if mibBuilder.loadTexts: sscatplaceholder2.setDescription('Placeholder for future MIB changes')
pCATStratum3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 14), )
if mibBuilder.loadTexts: pCATStratum3ConfigTable.setStatus('mandatory')
pCATStratum3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 14, 1), ).setIndexNames((0, "DV2-MIB", "ps3cIndex"))
if mibBuilder.loadTexts: pCATStratum3ConfigEntry.setStatus('mandatory')
ps3cIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps3cIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ps3cIndex.setDescription('Entry Index')
pcatstr3listener = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("external", 1), ("line", 2))).clone('external')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcatstr3listener.setStatus('mandatory')
if mibBuilder.loadTexts: pcatstr3listener.setDescription('Configures Stratum 3 Reference')
pcatstr3oscillator = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("external-or-line", 1), ("internal", 2))).clone('external-or-line')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcatstr3oscillator.setStatus('mandatory')
if mibBuilder.loadTexts: pcatstr3oscillator.setDescription('Configures Stratum 3 Mode')
pcatstr3forcesecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcatstr3forcesecondary.setStatus('mandatory')
if mibBuilder.loadTexts: pcatstr3forcesecondary.setDescription('Disables Stratum 3 Driver on Primary NTM LIM only')
pcatstr3reconfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcatstr3reconfigure.setStatus('mandatory')
if mibBuilder.loadTexts: pcatstr3reconfigure.setDescription('Re-configure Primary Stratum 3')
sCATStratum3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 15), )
if mibBuilder.loadTexts: sCATStratum3ConfigTable.setStatus('mandatory')
sCATStratum3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 15, 1), ).setIndexNames((0, "DV2-MIB", "ss3cIndex"))
if mibBuilder.loadTexts: sCATStratum3ConfigEntry.setStatus('mandatory')
ss3cIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss3cIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ss3cIndex.setDescription('Entry Index')
scatstr3listener = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("external", 1), ("line", 2))).clone('external')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scatstr3listener.setStatus('mandatory')
if mibBuilder.loadTexts: scatstr3listener.setDescription('Configures Stratum 3 Reference')
scatstr3oscillator = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("external-or-line", 1), ("internal", 2))).clone('external-or-line')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scatstr3oscillator.setStatus('mandatory')
if mibBuilder.loadTexts: scatstr3oscillator.setDescription('Configures Stratum 3 Mode')
scatstr3reconfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scatstr3reconfigure.setStatus('mandatory')
if mibBuilder.loadTexts: scatstr3reconfigure.setDescription('Re-configure Secondary Stratum 3')
pCATStratum3StatusTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 16), )
if mibBuilder.loadTexts: pCATStratum3StatusTable.setStatus('mandatory')
pCATStratum3StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 16, 1), ).setIndexNames((0, "DV2-MIB", "ps3sIndex"))
if mibBuilder.loadTexts: pCATStratum3StatusEntry.setStatus('mandatory')
ps3sIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps3sIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ps3sIndex.setDescription('Entry Index')
pcatstr3listenerstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("listening-to-Primary", 1), ("listening-to-Secondary", 2), ("no-input", 3))).clone('no-input')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcatstr3listenerstatus.setStatus('mandatory')
if mibBuilder.loadTexts: pcatstr3listenerstatus.setDescription('What the Stratum 3 is referencing to')
pcatstr3driverstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled-online", 1), ("disabled-offline", 2), ("fault", 3))).clone('fault')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcatstr3driverstatus.setStatus('mandatory')
if mibBuilder.loadTexts: pcatstr3driverstatus.setDescription('What the Stratum 3 output is driving')
pcatstr3oscstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("acquisition-wide-band", 2), ("locked-in-range", 3), ("acquisition-narrow-band", 4), ("holdover", 5), ("internal", 6))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcatstr3oscstatus.setStatus('mandatory')
if mibBuilder.loadTexts: pcatstr3oscstatus.setDescription('Stratum 3 oscillator status')
sCATStratum3StatusTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 17), )
if mibBuilder.loadTexts: sCATStratum3StatusTable.setStatus('mandatory')
sCATStratum3StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 17, 1), ).setIndexNames((0, "DV2-MIB", "ss3sIndex"))
if mibBuilder.loadTexts: sCATStratum3StatusEntry.setStatus('mandatory')
ss3sIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss3sIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ss3sIndex.setDescription('Entry Index')
scatstr3listenerstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("listening-to-Primary", 1), ("listening-to-secondary", 2), ("no-input", 3))).clone('no-input')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scatstr3listenerstatus.setStatus('mandatory')
if mibBuilder.loadTexts: scatstr3listenerstatus.setDescription('What the Stratum 3 Listener is referencing')
scatstr3driverstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled-online", 1), ("disabled-offline", 2), ("fault", 3))).clone('fault')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scatstr3driverstatus.setStatus('mandatory')
if mibBuilder.loadTexts: scatstr3driverstatus.setDescription('What the Stratum 3 output is driving')
scatstr3oscstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("acquisition-wide-band", 2), ("locked-in-range", 3), ("acquisition-narrow-band", 4), ("holdover", 5), ("internal", 6))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scatstr3oscstatus.setStatus('mandatory')
if mibBuilder.loadTexts: scatstr3oscstatus.setDescription('Stratum 3 oscillator status')
pCATBitsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18), )
if mibBuilder.loadTexts: pCATBitsConfigTable.setStatus('mandatory')
pCATBitsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1), ).setIndexNames((0, "DV2-MIB", "pbcIndex"))
if mibBuilder.loadTexts: pCATBitsConfigEntry.setStatus('mandatory')
pbcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pbcIndex.setDescription('Entry Index')
pbcds1V2TxLineLn = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("feet-0-110", 1), ("feet-110-220", 2), ("feet-220-330", 3), ("feet-330-440", 4), ("feet-440-550", 5), ("feet-550-660", 6), ("more-than-655-ft", 7), ("na", 8))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcds1V2TxLineLn.setStatus('mandatory')
if mibBuilder.loadTexts: pbcds1V2TxLineLn.setDescription('Select transmit line length')
pbcplaceholder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcplaceholder1.setStatus('mandatory')
if mibBuilder.loadTexts: pbcplaceholder1.setDescription('Future Use')
pbcV2FRMRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("sf", 2), ("esf", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcV2FRMRMode.setStatus('mandatory')
if mibBuilder.loadTexts: pbcV2FRMRMode.setDescription('DS1 Framing options.')
pbcds1V2Coding = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 1))).clone(namedValues=NamedValues(("na", 3), ("ami", 2), ("b8zs-t1", 1))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcds1V2Coding.setStatus('mandatory')
if mibBuilder.loadTexts: pbcds1V2Coding.setDescription('T1 Line Code')
pbcV2Lb = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("line-loopback", 2), ("local-loopback", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcV2Lb.setStatus('mandatory')
if mibBuilder.loadTexts: pbcV2Lb.setDescription('Loopback Selection DS1 ')
pbcclrperf = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcclrperf.setStatus('mandatory')
if mibBuilder.loadTexts: pbcclrperf.setDescription('Clear the Performance Counters')
pbcreconfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcreconfigure.setStatus('mandatory')
if mibBuilder.loadTexts: pbcreconfigure.setDescription('Re-configure Primary External')
sCATBitsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19), )
if mibBuilder.loadTexts: sCATBitsConfigTable.setStatus('mandatory')
sCATBitsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1), ).setIndexNames((0, "DV2-MIB", "sbcIndex"))
if mibBuilder.loadTexts: sCATBitsConfigEntry.setStatus('mandatory')
sbcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sbcIndex.setDescription('Entry Index')
sbcds1V2TxLineLn = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("feet-0-110", 1), ("feet-110-220", 2), ("feet-220-330", 3), ("feet-330-440", 4), ("feet-440-550", 5), ("feet-550-660", 6), ("more-than-655-ft", 7), ("na", 8))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbcds1V2TxLineLn.setStatus('mandatory')
if mibBuilder.loadTexts: sbcds1V2TxLineLn.setDescription('Select transmit line length')
sbcplaceholder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbcplaceholder1.setStatus('mandatory')
if mibBuilder.loadTexts: sbcplaceholder1.setDescription('Future Use')
sbcV2FRMRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("sf", 2), ("esf", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbcV2FRMRMode.setStatus('mandatory')
if mibBuilder.loadTexts: sbcV2FRMRMode.setDescription('DS1 Framing options.')
sbcds1V2Coding = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 1))).clone(namedValues=NamedValues(("na", 3), ("ami", 2), ("b8zs", 1))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbcds1V2Coding.setStatus('mandatory')
if mibBuilder.loadTexts: sbcds1V2Coding.setDescription('T1 Line Coding')
sbcV2Lb = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("line-loopback", 2), ("local-loopback", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbcV2Lb.setStatus('mandatory')
if mibBuilder.loadTexts: sbcV2Lb.setDescription('Loopback Selection')
sbcclrperf = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbcclrperf.setStatus('mandatory')
if mibBuilder.loadTexts: sbcclrperf.setDescription('Clear the Performance Counters')
sbcreconfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbcreconfigure.setStatus('mandatory')
if mibBuilder.loadTexts: sbcreconfigure.setDescription('Re-configure Secondary External')
pCATBitsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20), )
if mibBuilder.loadTexts: pCATBitsStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: pCATBitsStatusTable.setDescription('Ds1/E1 Bits Status Table')
pCATBitsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1), ).setIndexNames((0, "DV2-MIB", "pbsIndex"))
if mibBuilder.loadTexts: pCATBitsStatusEntry.setStatus('mandatory')
pbsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pbsIndex.setDescription('Entry Index')
pbslineok = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbslineok.setStatus('mandatory')
if mibBuilder.loadTexts: pbslineok.setDescription('Is the line OK')
pbsV2RxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbsV2RxAIS.setStatus('mandatory')
if mibBuilder.loadTexts: pbsV2RxAIS.setDescription('Receive DS1 AIS(Blue)Alarm status.')
pbsV2RxLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbsV2RxLOS.setStatus('mandatory')
if mibBuilder.loadTexts: pbsV2RxLOS.setDescription('Receive DS1 LOS status.')
pbsV2RxOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbsV2RxOOF.setStatus('mandatory')
if mibBuilder.loadTexts: pbsV2RxOOF.setDescription('Receive DS1 OOF status.')
pbsV2RxBER = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbsV2RxBER.setStatus('mandatory')
if mibBuilder.loadTexts: pbsV2RxBER.setDescription('Receive DS1 BER status.')
pbsV2RxOOFCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbsV2RxOOFCnt.setStatus('mandatory')
if mibBuilder.loadTexts: pbsV2RxOOFCnt.setDescription('Receive DS1 OOF count.')
pbsV2RxBERCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbsV2RxBERCnt.setStatus('mandatory')
if mibBuilder.loadTexts: pbsV2RxBERCnt.setDescription('Receive DS1 BEE count.')
pbsV2RxLOSCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbsV2RxLOSCnt.setStatus('mandatory')
if mibBuilder.loadTexts: pbsV2RxLOSCnt.setDescription('Receive DS1 LOS count.')
pbsV2LCVCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbsV2LCVCnt.setStatus('mandatory')
if mibBuilder.loadTexts: pbsV2LCVCnt.setDescription('Receive DS1 LCV count.')
sCATBitsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21), )
if mibBuilder.loadTexts: sCATBitsStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: sCATBitsStatusTable.setDescription('Ds1/E1 Bits Status Table')
sCATBitsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1), ).setIndexNames((0, "DV2-MIB", "sbsIndex"))
if mibBuilder.loadTexts: sCATBitsStatusEntry.setStatus('mandatory')
sbsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sbsIndex.setDescription('Entry Index')
sbslineok = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbslineok.setStatus('mandatory')
if mibBuilder.loadTexts: sbslineok.setDescription('Is the line OK')
sbsV2RxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbsV2RxAIS.setStatus('mandatory')
if mibBuilder.loadTexts: sbsV2RxAIS.setDescription('Receive DS1 AIS(Blue)Alarm status.')
sbsV2RxLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbsV2RxLOS.setStatus('mandatory')
if mibBuilder.loadTexts: sbsV2RxLOS.setDescription('Receive DS1 LOS status.')
sbsV2RxOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbsV2RxOOF.setStatus('mandatory')
if mibBuilder.loadTexts: sbsV2RxOOF.setDescription('Receive DS1 OOF status.')
sbsV2RxBER = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbsV2RxBER.setStatus('mandatory')
if mibBuilder.loadTexts: sbsV2RxBER.setDescription('Receive DS1 BER status.')
sbsV2RxOOFCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbsV2RxOOFCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sbsV2RxOOFCnt.setDescription('Receive DS1 OOF Counts.')
sbsV2RxBERCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbsV2RxBERCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sbsV2RxBERCnt.setDescription('Receive DS1 BEE Counts.')
sbsV2RxLOSCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbsV2RxLOSCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sbsV2RxLOSCnt.setDescription('Receive DS1/E1 LOS Counts.')
sbsV2LCVCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbsV2LCVCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sbsV2LCVCnt.setDescription('Receive DS1 AIS Counts.')
pCATDerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22), )
if mibBuilder.loadTexts: pCATDerConfigTable.setStatus('mandatory')
pCATDerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1), ).setIndexNames((0, "DV2-MIB", "pdcIndex"))
if mibBuilder.loadTexts: pCATDerConfigEntry.setStatus('mandatory')
pdcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pdcIndex.setDescription('Entry Index')
pdcds1V2TxLineLn = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("feet-0-110", 1), ("feet-110-220", 2), ("feet-220-330", 3), ("feet-330-440", 4), ("feet-440-550", 5), ("feet-550-660", 6), ("more-than-655-ft", 7), ("na", 8))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdcds1V2TxLineLn.setStatus('mandatory')
if mibBuilder.loadTexts: pdcds1V2TxLineLn.setDescription('Select transmit line length')
pdcplaceholder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdcplaceholder1.setStatus('mandatory')
if mibBuilder.loadTexts: pdcplaceholder1.setDescription('Future Use')
pdcV2FRMRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("sf", 2), ("esf", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdcV2FRMRMode.setStatus('mandatory')
if mibBuilder.loadTexts: pdcV2FRMRMode.setDescription('DS1 Framing options.')
pdcds1V2Coding = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 1))).clone(namedValues=NamedValues(("na", 3), ("ami", 2), ("b8zs", 1))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdcds1V2Coding.setStatus('mandatory')
if mibBuilder.loadTexts: pdcds1V2Coding.setDescription('Line Code')
pdcV2Lb = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("line-lpbk", 2), ("local-loopback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdcV2Lb.setStatus('mandatory')
if mibBuilder.loadTexts: pdcV2Lb.setDescription('Loopback Selection ')
pdcclrperf = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdcclrperf.setStatus('mandatory')
if mibBuilder.loadTexts: pdcclrperf.setDescription('Clear the performance counters')
pdcreconfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdcreconfigure.setStatus('mandatory')
if mibBuilder.loadTexts: pdcreconfigure.setDescription('Re-configure Primary Line')
sCATDerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23), )
if mibBuilder.loadTexts: sCATDerConfigTable.setStatus('mandatory')
sCATDerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1), ).setIndexNames((0, "DV2-MIB", "sdcIndex"))
if mibBuilder.loadTexts: sCATDerConfigEntry.setStatus('mandatory')
sdcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sdcIndex.setDescription('Entry Index')
sdcds1V2TxLineLn = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("feet-0-110", 1), ("feet-110-220", 2), ("feet-220-330", 3), ("feet-330-440", 4), ("feet-440-550", 5), ("feet-550-660", 6), ("more-than-655-ft", 7), ("na", 8))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdcds1V2TxLineLn.setStatus('mandatory')
if mibBuilder.loadTexts: sdcds1V2TxLineLn.setDescription('Select transmit line length')
sdcplaceholder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdcplaceholder1.setStatus('mandatory')
if mibBuilder.loadTexts: sdcplaceholder1.setDescription('Future Use')
sdcV2FRMRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("sf", 2), ("esf", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdcV2FRMRMode.setStatus('mandatory')
if mibBuilder.loadTexts: sdcV2FRMRMode.setDescription('DS1 Framing options.')
sdcds1V2Coding = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 1))).clone(namedValues=NamedValues(("na", 3), ("ami", 2), ("b8zs", 1))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdcds1V2Coding.setStatus('mandatory')
if mibBuilder.loadTexts: sdcds1V2Coding.setDescription('Line Coding')
sdcV2Lb = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("line-lpbk", 2), ("local-loopback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdcV2Lb.setStatus('mandatory')
if mibBuilder.loadTexts: sdcV2Lb.setDescription('Loopback Selection DS1')
sdcclrperf = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdcclrperf.setStatus('mandatory')
if mibBuilder.loadTexts: sdcclrperf.setDescription('Clear the Performance Counters')
sdcreconfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdcreconfigure.setStatus('mandatory')
if mibBuilder.loadTexts: sdcreconfigure.setDescription('Re-configure Secondary Line')
pCATDerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24), )
if mibBuilder.loadTexts: pCATDerStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: pCATDerStatusTable.setDescription('Ds1/E1 Derived Status Table')
pCATDerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1), ).setIndexNames((0, "DV2-MIB", "pdsIndex"))
if mibBuilder.loadTexts: pCATDerStatusEntry.setStatus('mandatory')
pdsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pdsIndex.setDescription('Entry Index')
pdslineok = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdslineok.setStatus('mandatory')
if mibBuilder.loadTexts: pdslineok.setDescription('Is the line OK')
pdsV2TxReference = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-input", 1), ("primary-valid", 2), ("secondary-valid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdsV2TxReference.setStatus('mandatory')
if mibBuilder.loadTexts: pdsV2TxReference.setDescription('Transmit Reference Status')
pdsV2RxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdsV2RxAIS.setStatus('mandatory')
if mibBuilder.loadTexts: pdsV2RxAIS.setDescription('Receive DS1 AIS(Blue)Alarm status.')
pdsV2RxLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdsV2RxLOS.setStatus('mandatory')
if mibBuilder.loadTexts: pdsV2RxLOS.setDescription('Receive DS1 LOS status.')
pdsV2RxOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdsV2RxOOF.setStatus('mandatory')
if mibBuilder.loadTexts: pdsV2RxOOF.setDescription('Receive DS1 OOF status.')
pdsV2RxBER = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdsV2RxBER.setStatus('mandatory')
if mibBuilder.loadTexts: pdsV2RxBER.setDescription('Receive DS1 BER status.')
pdsV2RxOOFCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdsV2RxOOFCnt.setStatus('mandatory')
if mibBuilder.loadTexts: pdsV2RxOOFCnt.setDescription('Receive DS1 OOF count.')
pdsV2RxBERCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdsV2RxBERCnt.setStatus('mandatory')
if mibBuilder.loadTexts: pdsV2RxBERCnt.setDescription('Receive DS1 BEE count.')
pdsV2RxLOSCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdsV2RxLOSCnt.setStatus('mandatory')
if mibBuilder.loadTexts: pdsV2RxLOSCnt.setDescription('Receive DS1 LOS count.')
pdsV2LCVCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdsV2LCVCnt.setStatus('mandatory')
if mibBuilder.loadTexts: pdsV2LCVCnt.setDescription('Receive DS1 AIS count.')
sCATDerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25), )
if mibBuilder.loadTexts: sCATDerStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: sCATDerStatusTable.setDescription('Ds1/E1 Derived Status Table')
sCATDerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1), ).setIndexNames((0, "DV2-MIB", "sdsIndex"))
if mibBuilder.loadTexts: sCATDerStatusEntry.setStatus('mandatory')
sdsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sdsIndex.setDescription('Entry Index')
sdslineok = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslineok.setStatus('mandatory')
if mibBuilder.loadTexts: sdslineok.setDescription('Is the line OK')
sdsV2TxReference = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-input", 1), ("primary-valid", 2), ("secondary-valid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsV2TxReference.setStatus('mandatory')
if mibBuilder.loadTexts: sdsV2TxReference.setDescription('Transmit Reference Status')
sdsV2RxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsV2RxAIS.setStatus('mandatory')
if mibBuilder.loadTexts: sdsV2RxAIS.setDescription('Receive DS1 AIS(Blue)Alarm status.')
sdsV2RxLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsV2RxLOS.setStatus('mandatory')
if mibBuilder.loadTexts: sdsV2RxLOS.setDescription('Receive DS1 LOS status.')
sdsV2RxOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsV2RxOOF.setStatus('mandatory')
if mibBuilder.loadTexts: sdsV2RxOOF.setDescription('Receive DS1 OOF status.')
sdsV2RxBER = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsV2RxBER.setStatus('mandatory')
if mibBuilder.loadTexts: sdsV2RxBER.setDescription('Receive DS1 BER status.')
sdsV2RxOOFCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsV2RxOOFCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sdsV2RxOOFCnt.setDescription('Receive DS1 OOF count.')
sdsV2RxBERCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsV2RxBERCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sdsV2RxBERCnt.setDescription('Receive DS1 BEE count.')
sdsV2RxLOSCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsV2RxLOSCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sdsV2RxLOSCnt.setDescription('Receive DS1 LOS count.')
sdsV2LCVCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsV2LCVCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sdsV2LCVCnt.setDescription('Receive DS1 AIS count.')
sysClkAlarmErr = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 1), ("sEClinePRI-ok", 2), ("pRIlineSEC-ok", 3), ("pRIlineSECoffline", 4), ("pRIoscSECoffline", 5), ("sEClinePRIoffline", 6), ("sECoscPRIoffline", 7), ("pRIlineSECline", 8), ("pRIosc", 9), ("sECosc", 10), ("pRIoscSECosc", 11), ("pRIoscSECline", 12), ("pRIlineSECosc", 13), ("no-valid-error", 14))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClkAlarmErr.setStatus('mandatory')
if mibBuilder.loadTexts: sysClkAlarmErr.setDescription('Defines the error type for the current clock alarm')
traceIp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceIp.setStatus('mandatory')
if mibBuilder.loadTexts: traceIp.setDescription('Toggle for IP trace flag.')
traceUdp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceUdp.setStatus('mandatory')
if mibBuilder.loadTexts: traceUdp.setDescription('Toggle for UDP trace flag.')
traceTcp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceTcp.setStatus('mandatory')
if mibBuilder.loadTexts: traceTcp.setDescription('Toggle for TCP trace flag.')
traceSnmp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceSnmp.setStatus('mandatory')
if mibBuilder.loadTexts: traceSnmp.setDescription('Toggle for SNMP trace flag.')
traceCat = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceCat.setStatus('mandatory')
if mibBuilder.loadTexts: traceCat.setDescription('Toggle for CAT trace flag.')
slipIp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipIp.setStatus('mandatory')
if mibBuilder.loadTexts: slipIp.setDescription('IP address of SLIP line.')
slipMask = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipMask.setStatus('mandatory')
if mibBuilder.loadTexts: slipMask.setDescription('Mask for SLIP line.')
slipRemoteIp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipRemoteIp.setStatus('mandatory')
if mibBuilder.loadTexts: slipRemoteIp.setDescription('IP address of remote end of SLIP line.')
slipSpeed = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("baud2400", 1), ("baud4800", 2), ("baud9600", 3), ("baud19200", 4), ("baud38400", 5), ("baud57600", 6), ("baud115200", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: slipSpeed.setDescription('Baud rate of SLIP serial line.')
vcDocTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1), )
if mibBuilder.loadTexts: vcDocTable.setStatus('mandatory')
if mibBuilder.loadTexts: vcDocTable.setDescription('')
vcDocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1), ).setIndexNames((0, "DV2-MIB", "vcDocLinkNo"))
if mibBuilder.loadTexts: vcDocEntry.setStatus('mandatory')
vcDocLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDocLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: vcDocLinkNo.setDescription('This is the target link number for the PVC.')
vcDocEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcDocEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vcDocEnable.setDescription('Setting to yes(1) enables the VCDOC channel.')
vcDocVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 3), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDocVpi.setStatus('mandatory')
if mibBuilder.loadTexts: vcDocVpi.setDescription('VPI of the VC being used for cell transfers.')
vcDocVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 4), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDocVci.setStatus('mandatory')
if mibBuilder.loadTexts: vcDocVci.setDescription('VCI of the VC being used for cell transfers.')
vcDocLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(64, 128, 192, 224, 240, 248, 252))).clone(namedValues=NamedValues(("s32kbps", 64), ("s64kbps", 128), ("s128kbps", 192), ("s256kbps", 224), ("s512kbps", 240), ("s1024kbps", 248), ("s2048kbps", 252)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcDocLinkSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: vcDocLinkSpeed.setDescription('This sets the speed at which the link is to run.')
vcDocCLines = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("process", 1), ("ignore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcDocCLines.setStatus('mandatory')
if mibBuilder.loadTexts: vcDocCLines.setDescription('This sets how control lines should be processed. If Ignore(2) is set then the port is always online.')
vcDocFifoSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcDocFifoSize.setStatus('mandatory')
if mibBuilder.loadTexts: vcDocFifoSize.setDescription('This is the size of the software emulated FIFO.')
vcDocLowWater = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcDocLowWater.setStatus('mandatory')
if mibBuilder.loadTexts: vcDocLowWater.setDescription('This is the point at which the transmit clock is switched to low frequency. This must be between 0 and FIFO Size/2')
vcDocHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcDocHighWater.setStatus('mandatory')
if mibBuilder.loadTexts: vcDocHighWater.setDescription('This is the point at which the transmit clock is switched to high frequency. This must be between FIFO size and FIFO Size/2')
vcDocTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("local-loop", 2), ("cable-loop", 3), ("remote-loop", 4), ("pattern-send", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcDocTestMode.setStatus('mandatory')
if mibBuilder.loadTexts: vcDocTestMode.setDescription('This is the type of self-test to perform with the VC DOC.')
vcDocTestVal = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 11), Hex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcDocTestVal.setStatus('mandatory')
if mibBuilder.loadTexts: vcDocTestVal.setDescription('This is the test value to use when doing the pattern-send test.')
vcDocPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDocPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vcDocPriority.setDescription('This indicates that cells will be sent with the priority bit set.')
vcDocSuba = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDocSuba.setStatus('mandatory')
if mibBuilder.loadTexts: vcDocSuba.setDescription('This is the target link number for the VC.')
vcDocSaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDocSaddr.setStatus('mandatory')
if mibBuilder.loadTexts: vcDocSaddr.setDescription('This is the target slot number for the VC.')
vcDocClockFix = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcDocClockFix.setStatus('mandatory')
if mibBuilder.loadTexts: vcDocClockFix.setDescription('If yes(2) then the clock will not be varied to maintain the size of the send FIFO.')
vcStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2), )
if mibBuilder.loadTexts: vcStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: vcStatTable.setDescription('This is a two row table that contains status information about the VCDOC.')
vcStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1), ).setIndexNames((0, "DV2-MIB", "vcStatPortNo"))
if mibBuilder.loadTexts: vcStatEntry.setStatus('mandatory')
vcStatPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatPortNo.setStatus('mandatory')
if mibBuilder.loadTexts: vcStatPortNo.setDescription('This is the originating port number for the PVC')
vcStatRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatRxState.setStatus('mandatory')
if mibBuilder.loadTexts: vcStatRxState.setDescription('This indicates whether control lines are high at the other end of the link.')
vcStatTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatTxState.setStatus('mandatory')
if mibBuilder.loadTexts: vcStatTxState.setDescription('This indicates whether the local control lines are high.')
vcStatFifoCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatFifoCount.setStatus('mandatory')
if mibBuilder.loadTexts: vcStatFifoCount.setDescription('This indicates the number of cells waiting in the FIFO.')
vcStatOFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatOFlow.setStatus('mandatory')
if mibBuilder.loadTexts: vcStatOFlow.setDescription('Number of Overflows.')
vcStatUFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatUFlow.setStatus('mandatory')
if mibBuilder.loadTexts: vcStatUFlow.setDescription('Number of Underflows.')
vcStatReSync = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatReSync.setStatus('mandatory')
if mibBuilder.loadTexts: vcStatReSync.setDescription('This is the number of times a sequence number resync has been required.')
vcStatInvented = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatInvented.setStatus('mandatory')
if mibBuilder.loadTexts: vcStatInvented.setDescription('Number of invented cells.')
vcStatRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatRxCells.setStatus('mandatory')
if mibBuilder.loadTexts: vcStatRxCells.setDescription('Received cells count.')
vcStatTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatTxCells.setStatus('mandatory')
if mibBuilder.loadTexts: vcStatTxCells.setDescription('Transmitted cells count.')
vcStatRxSeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatRxSeqNo.setStatus('mandatory')
if mibBuilder.loadTexts: vcStatRxSeqNo.setDescription('Receive current sequence number.')
vcStatTxSeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatTxSeqNo.setStatus('mandatory')
if mibBuilder.loadTexts: vcStatTxSeqNo.setDescription('Transmit current sequence number.')
vcStatLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatLastError.setStatus('mandatory')
if mibBuilder.loadTexts: vcStatLastError.setDescription('Last error type.')
vcStatLastCompare = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatLastCompare.setStatus('mandatory')
if mibBuilder.loadTexts: vcStatLastCompare.setDescription('Last compare value.')
vcStatTestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatTestErrors.setStatus('mandatory')
if mibBuilder.loadTexts: vcStatTestErrors.setDescription('Number of test errors detected.')
fRelayStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1), )
if mibBuilder.loadTexts: fRelayStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: fRelayStatTable.setDescription('This contains the overall status information for the frame relay links.')
fRelayStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1), ).setIndexNames((0, "DV2-MIB", "fRelStatLinkNo"))
if mibBuilder.loadTexts: fRelayStatEntry.setStatus('mandatory')
fRelStatLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: fRelStatLinkNo.setDescription('Local send sequence.')
fRelStatLocSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatLocSeq.setStatus('mandatory')
if mibBuilder.loadTexts: fRelStatLocSeq.setDescription('Local send sequence.')
fRelStatLocAck = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatLocAck.setStatus('mandatory')
if mibBuilder.loadTexts: fRelStatLocAck.setDescription('Local ack sequence.')
fRelStatLocState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatLocState.setStatus('mandatory')
if mibBuilder.loadTexts: fRelStatLocState.setDescription('Local state of link.')
fRelStatLocStartT = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatLocStartT.setStatus('mandatory')
if mibBuilder.loadTexts: fRelStatLocStartT.setDescription('Local start time for poll.')
fRelStatLocErrThr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatLocErrThr.setStatus('mandatory')
if mibBuilder.loadTexts: fRelStatLocErrThr.setDescription('Local error threshold Counter.')
fRelStatLocMec = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatLocMec.setStatus('mandatory')
if mibBuilder.loadTexts: fRelStatLocMec.setDescription('Local monitored events Counter.')
fRelStatLocPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatLocPoll.setStatus('mandatory')
if mibBuilder.loadTexts: fRelStatLocPoll.setDescription('Local poll Counter for DTE.')
fRelStatRemSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatRemSeq.setStatus('mandatory')
if mibBuilder.loadTexts: fRelStatRemSeq.setDescription('Remote send sequence.')
fRelStatRemAck = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatRemAck.setStatus('mandatory')
if mibBuilder.loadTexts: fRelStatRemAck.setDescription('Remote ack sequence.')
fRelStatRemState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatRemState.setStatus('mandatory')
if mibBuilder.loadTexts: fRelStatRemState.setDescription('Remote state of link.')
fRelStatRemStartT = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatRemStartT.setStatus('mandatory')
if mibBuilder.loadTexts: fRelStatRemStartT.setDescription('Remote start time for poll.')
fRelStatRemErrThr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatRemErrThr.setStatus('mandatory')
if mibBuilder.loadTexts: fRelStatRemErrThr.setDescription('Remote error threshold Counter.')
fRelStatRemMec = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatRemMec.setStatus('mandatory')
if mibBuilder.loadTexts: fRelStatRemMec.setDescription('Remote monitored events Counter.')
fRelStatRemPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatRemPoll.setStatus('mandatory')
if mibBuilder.loadTexts: fRelStatRemPoll.setDescription('Remote poll Counter for DTE.')
fRelayConfTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2), )
if mibBuilder.loadTexts: fRelayConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: fRelayConfTable.setDescription('This table contains the overall configuration for the frame relay links.')
fRelayConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1), ).setIndexNames((0, "DV2-MIB", "fRelConfLinkNo"))
if mibBuilder.loadTexts: fRelayConfEntry.setStatus('mandatory')
fRelConfLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelConfLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: fRelConfLinkNo.setDescription('Number of the link to configure.')
fRelConfLinkEnab = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fRelConfLinkEnab.setStatus('mandatory')
if mibBuilder.loadTexts: fRelConfLinkEnab.setDescription('Set to yes(1) to enable the link.')
fRelConfLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ansi", 1), ("lmi", 2), ("transport", 3), ("dxi", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fRelConfLinkMode.setStatus('mandatory')
if mibBuilder.loadTexts: fRelConfLinkMode.setDescription('frame mode.')
fRelConfLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(48, 77, 100, 117, 177, 191, 217, 223, 240, 244, 246, 251, 253, 254, 255))).clone(namedValues=NamedValues(("s48kbps", 48), ("s56kbps", 77), ("s64kbps", 100), ("s72kbps", 117), ("s128kbps", 177), ("s153k6bps", 191), ("s256kbps", 217), ("s307k2bps", 223), ("s614k4bps", 240), ("s819k2bps", 244), ("s1Mbps", 246), ("s2Mbps", 251), ("s3Mbps", 253), ("s5Mbps", 254), ("s10Mbps", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fRelConfLinkSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: fRelConfLinkSpeed.setDescription('Local speed of link.')
fRelConfLinkCline = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fRelConfLinkCline.setStatus('mandatory')
if mibBuilder.loadTexts: fRelConfLinkCline.setDescription('Set to no(2) to disable control line processing.')
fRelConfLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user", 1), ("network", 2), ("nni", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fRelConfLinkType.setStatus('mandatory')
if mibBuilder.loadTexts: fRelConfLinkType.setDescription('Type of link.')
fRelConfN391 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fRelConfN391.setStatus('mandatory')
if mibBuilder.loadTexts: fRelConfN391.setDescription('Poll count.')
fRelConfN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fRelConfN392.setStatus('mandatory')
if mibBuilder.loadTexts: fRelConfN392.setDescription('Threshold.')
fRelConfN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fRelConfN393.setStatus('mandatory')
if mibBuilder.loadTexts: fRelConfN393.setDescription('Monitored events.')
fRelConfT391 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fRelConfT391.setStatus('mandatory')
if mibBuilder.loadTexts: fRelConfT391.setDescription('Poll period.')
fRelConfT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fRelConfT392.setStatus('mandatory')
if mibBuilder.loadTexts: fRelConfT392.setDescription('Poll timeout.')
fraPStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3), )
if mibBuilder.loadTexts: fraPStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatTable.setDescription('This shows the status of the frame relay PVCs for link 0.')
fraPStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1), ).setIndexNames((0, "DV2-MIB", "fraPStatDlci"))
if mibBuilder.loadTexts: fraPStatEntry.setStatus('mandatory')
fraPStatDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatDlci.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatDlci.setDescription('This is the DLCI for the PVC.')
fraPStatRxBCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRxBCnt.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatRxBCnt.setDescription('The number of bytes received.')
fraPStatTxBCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatTxBCnt.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatTxBCnt.setDescription('The number of bytes transmitted.')
fraPStatRxFCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRxFCnt.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatRxFCnt.setDescription('The number of frames received.')
fraPStatTxFCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatTxFCnt.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatTxFCnt.setDescription('The number of frames transmitted.')
fraPStatRxBRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRxBRate.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatRxBRate.setDescription('The rate of bytes being received.')
fraPStatTxBRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatTxBRate.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatTxBRate.setDescription('The rate of bytes being transmitted.')
fraPStatRxFRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRxFRate.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatRxFRate.setDescription('The rate of frames being received.')
fraPStatTxFRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatTxFRate.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatTxFRate.setDescription('The rate of frames being transmitted.')
fraPStatDERxF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatDERxF.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatDERxF.setDescription('The count of discarded eligible received frames.')
fraPStatDisRxF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatDisRxF.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatDisRxF.setDescription('The count of discarded received frames.')
fraPStatPvcStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 12), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatPvcStat.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatPvcStat.setDescription('The state of the PVC.')
fraPStatLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 13), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatLinkState.setDescription('The state of the link.')
fraPStatLocSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatLocSeq.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatLocSeq.setDescription('The local send sequence.')
fraPStatLocAck = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatLocAck.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatLocAck.setDescription('The local acknowledge number.')
fraPStatLocStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatLocStat.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatLocStat.setDescription('The local state of the link.')
fraPStatLocStartT = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatLocStartT.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatLocStartT.setDescription('The local start time for poll.')
fraPStatLocErrThr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatLocErrThr.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatLocErrThr.setDescription('The local error threshold Counter.')
fraPStatLocMec = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatLocMec.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatLocMec.setDescription('The local monitored event Counter.')
fraPStatLocPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatLocPoll.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatLocPoll.setDescription('The local poll Counter for DTE.')
fraPStatRemSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRemSeq.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatRemSeq.setDescription('The remote send sequence.')
fraPStatRemAck = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRemAck.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatRemAck.setDescription('The remote acknowledge number.')
fraPStatRemStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRemStat.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatRemStat.setDescription('The remote state of the link.')
fraPStatRemStartT = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRemStartT.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatRemStartT.setDescription('The remote start time for poll.')
fraPStatRemErrThr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRemErrThr.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatRemErrThr.setDescription('The remote error threshold Counter.')
fraPStatRemMec = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRemMec.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatRemMec.setDescription('The remote monitored event Counter.')
fraPStatRemPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRemPoll.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatRemPoll.setDescription('The remote poll Counter for DTE.')
fraPStatLastChangeM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatLastChangeM2.setStatus('mandatory')
if mibBuilder.loadTexts: fraPStatLastChangeM2.setDescription('The date and time of last state change.')
fraPConfigTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4), )
if mibBuilder.loadTexts: fraPConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: fraPConfigTable.setDescription('')
fraPConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1), ).setIndexNames((0, "DV2-MIB", "fraPConfigDlci"))
if mibBuilder.loadTexts: fraPConfigEntry.setStatus('mandatory')
fraPConfigDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 511))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fraPConfigDlci.setStatus('mandatory')
if mibBuilder.loadTexts: fraPConfigDlci.setDescription('This is the DLCI for the PVC.')
fraPConfigCir = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fraPConfigCir.setStatus('mandatory')
if mibBuilder.loadTexts: fraPConfigCir.setDescription('The committed information rate.')
fraPConfigCommitB = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fraPConfigCommitB.setStatus('mandatory')
if mibBuilder.loadTexts: fraPConfigCommitB.setDescription('The committed burst rate.')
fraPConfigExcessB = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fraPConfigExcessB.setStatus('mandatory')
if mibBuilder.loadTexts: fraPConfigExcessB.setDescription('The excess burst size.')
fraVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 5), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraVpi.setStatus('mandatory')
if mibBuilder.loadTexts: fraVpi.setDescription('The VPI for this call.')
fraVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 6), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraVci.setStatus('mandatory')
if mibBuilder.loadTexts: fraVci.setDescription('The VCI for the call.')
fraPConfigPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPConfigPriority.setStatus('mandatory')
if mibBuilder.loadTexts: fraPConfigPriority.setDescription('')
fraPConfigSuba = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPConfigSuba.setStatus('mandatory')
if mibBuilder.loadTexts: fraPConfigSuba.setDescription('')
fraPConfigSaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPConfigSaddr.setStatus('mandatory')
if mibBuilder.loadTexts: fraPConfigSaddr.setDescription('')
fraPConfigValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fraPConfigValidity.setStatus('mandatory')
if mibBuilder.loadTexts: fraPConfigValidity.setDescription('Provides a way of deleting a row in the table when set to invalid.')
fraPConfigDxivpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fraPConfigDxivpi.setStatus('mandatory')
if mibBuilder.loadTexts: fraPConfigDxivpi.setDescription('This is the VPI for the PVC')
fraPConfigDxivci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fraPConfigDxivci.setStatus('mandatory')
if mibBuilder.loadTexts: fraPConfigDxivci.setDescription('This is the VCI for the PVC')
fraPConfigDximode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fraPConfigDximode.setStatus('mandatory')
if mibBuilder.loadTexts: fraPConfigDximode.setDescription('This flag indicates whether the mode is DXI - in that case the value of DLCI is ignored')
frbPStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5), )
if mibBuilder.loadTexts: frbPStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatTable.setDescription('This table shows statistics about the Frame Relay PVCs for link 1.')
frbPStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1), ).setIndexNames((0, "DV2-MIB", "frbPStatDlci"))
if mibBuilder.loadTexts: frbPStatEntry.setStatus('mandatory')
frbPStatDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatDlci.setDescription('This is the DLCI for the PVC.')
frbPStatRxBCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRxBCnt.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatRxBCnt.setDescription('The number of bytes received.')
frbPStatTxBCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatTxBCnt.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatTxBCnt.setDescription('The number of bytes transmitted.')
frbPStatRxFCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRxFCnt.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatRxFCnt.setDescription('The number of frames received.')
frbPStatTxFCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatTxFCnt.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatTxFCnt.setDescription('The number of frames transmitted.')
frbPStatRxBRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRxBRate.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatRxBRate.setDescription('The rate of bytes being received.')
frbPStatTxBRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatTxBRate.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatTxBRate.setDescription('The rate of bytes being transmitted.')
frbPStatRxFRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRxFRate.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatRxFRate.setDescription('The rate of frames being received.')
frbPStatTxFRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatTxFRate.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatTxFRate.setDescription('The rate of frames being transmitted.')
frbPStatDERxF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatDERxF.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatDERxF.setDescription('The count of discarded eligible received frames.')
frbPStatDisRxF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatDisRxF.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatDisRxF.setDescription('The count of discarded received frames.')
frbPStatPvcStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 12), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatPvcStat.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatPvcStat.setDescription('The state of the PVC.')
frbPStatLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 13), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatLinkState.setDescription('The state of the link.')
frbPStatLocSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatLocSeq.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatLocSeq.setDescription('The local send sequence.')
frbPStatLocAck = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatLocAck.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatLocAck.setDescription('The local acknowledge number.')
frbPStatLocStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatLocStat.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatLocStat.setDescription('The local state of the link.')
frbPStatLocStartT = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatLocStartT.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatLocStartT.setDescription('The local start time for poll.')
frbPStatLocErrThr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatLocErrThr.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatLocErrThr.setDescription('The local error threshold Counter.')
frbPStatLocMec = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatLocMec.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatLocMec.setDescription('The local monitored event Counter.')
frbPStatLocPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatLocPoll.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatLocPoll.setDescription('The local poll Counter for DTE.')
frbPStatRemSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRemSeq.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatRemSeq.setDescription('The remote send sequence.')
frbPStatRemAck = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRemAck.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatRemAck.setDescription('The remote acknowledge number.')
frbPStatRemStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRemStat.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatRemStat.setDescription('The remote state of the link.')
frbPStatRemStartT = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRemStartT.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatRemStartT.setDescription('The remote start time for poll.')
frbPStatRemErrThr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRemErrThr.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatRemErrThr.setDescription('The remote error threshold Counter.')
frbPStatRemMec = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRemMec.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatRemMec.setDescription('The remote monitored event Counter.')
frbPStatRemPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRemPoll.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatRemPoll.setDescription('The remote poll Counter for DTE.')
frbPStatLastChangeM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatLastChangeM2.setStatus('mandatory')
if mibBuilder.loadTexts: frbPStatLastChangeM2.setDescription('The date and time of last state change.')
frbPConfigTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6), )
if mibBuilder.loadTexts: frbPConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: frbPConfigTable.setDescription('')
frbPConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1), ).setIndexNames((0, "DV2-MIB", "frbPConfigDlci"))
if mibBuilder.loadTexts: frbPConfigEntry.setStatus('mandatory')
frbPConfigDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 511))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frbPConfigDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frbPConfigDlci.setDescription('This is the DLCI for the PVC.')
frbPConfigCir = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frbPConfigCir.setStatus('mandatory')
if mibBuilder.loadTexts: frbPConfigCir.setDescription('The committed information rate.')
frbPConfigCommitB = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frbPConfigCommitB.setStatus('mandatory')
if mibBuilder.loadTexts: frbPConfigCommitB.setDescription('The committed burst rate.')
frbPConfigExcessB = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frbPConfigExcessB.setStatus('mandatory')
if mibBuilder.loadTexts: frbPConfigExcessB.setDescription('The excess burst size.')
frbVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 5), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbVpi.setStatus('mandatory')
if mibBuilder.loadTexts: frbVpi.setDescription('The VPI for this call.')
frbVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 6), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbVci.setStatus('mandatory')
if mibBuilder.loadTexts: frbVci.setDescription('The VCI for the call.')
frbPConfigPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPConfigPriority.setStatus('mandatory')
if mibBuilder.loadTexts: frbPConfigPriority.setDescription('')
frbPConfigSuba = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPConfigSuba.setStatus('mandatory')
if mibBuilder.loadTexts: frbPConfigSuba.setDescription('')
frbPConfigSaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPConfigSaddr.setStatus('mandatory')
if mibBuilder.loadTexts: frbPConfigSaddr.setDescription('')
frbPConfigValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frbPConfigValidity.setStatus('mandatory')
if mibBuilder.loadTexts: frbPConfigValidity.setDescription('Provides a way of deleting a row in the table when set to invalid.')
frbPConfigDxivpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frbPConfigDxivpi.setStatus('mandatory')
if mibBuilder.loadTexts: frbPConfigDxivpi.setDescription('This is the VPI for the PVC')
frbPConfigDxivci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frbPConfigDxivci.setStatus('mandatory')
if mibBuilder.loadTexts: frbPConfigDxivci.setDescription('This is the VCI for the PVC')
frbPConfigDximode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frbPConfigDximode.setStatus('mandatory')
if mibBuilder.loadTexts: frbPConfigDximode.setDescription('This flag indicates whether the mode is DXI - in that case the value of DLCI is ignored')
vcaTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3), )
if mibBuilder.loadTexts: vcaTable.setStatus('mandatory')
if mibBuilder.loadTexts: vcaTable.setDescription('This table shows detailed status for native ATM slot controller card link A VCs.')
vcaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1), ).setIndexNames((0, "DV2-MIB", "vcaVpi"), (0, "DV2-MIB", "vcaVci"))
if mibBuilder.loadTexts: vcaEntry.setStatus('mandatory')
vcaVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaVpi.setStatus('mandatory')
if mibBuilder.loadTexts: vcaVpi.setDescription('Virtual path identifier for the VC.')
vcaVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaVci.setStatus('mandatory')
if mibBuilder.loadTexts: vcaVci.setDescription('Virtual channel identifier for the VC.')
vcaTxGCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaTxGCells.setStatus('mandatory')
if mibBuilder.loadTexts: vcaTxGCells.setDescription('Number of transmitted good cells CLP0.')
vcaTxGCellsClp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaTxGCellsClp1.setStatus('mandatory')
if mibBuilder.loadTexts: vcaTxGCellsClp1.setDescription('Number of transmitted good cells CLP1.')
vcaRxGCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaRxGCells.setStatus('mandatory')
if mibBuilder.loadTexts: vcaRxGCells.setDescription('Number of received good cells.')
vcaExcessCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaExcessCells.setStatus('mandatory')
if mibBuilder.loadTexts: vcaExcessCells.setDescription('Number of cells discarded because of bucket overflow.')
vcaPeakExceeds = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaPeakExceeds.setStatus('mandatory')
if mibBuilder.loadTexts: vcaPeakExceeds.setDescription('Number of cells discarded because of peak cell rate violation.')
vcaCellHead = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 8), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaCellHead.setStatus('mandatory')
if mibBuilder.loadTexts: vcaCellHead.setDescription("This value is bitwise OR'd with the cell header.")
vcaCellMask = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 9), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaCellMask.setStatus('mandatory')
if mibBuilder.loadTexts: vcaCellMask.setDescription("This value is bitwise AND'd with the cell header.")
vcaCellSwitchHead = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 10), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaCellSwitchHead.setStatus('mandatory')
if mibBuilder.loadTexts: vcaCellSwitchHead.setDescription('This comprises a tag which is added to the cell before putting into the cell switch and a control byte.')
vcaStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: vcaStartTime.setDescription('This is the bucket start time.')
vcaBucketControl = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 12), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucketControl.setStatus('mandatory')
if mibBuilder.loadTexts: vcaBucketControl.setDescription('This is the bucket control register value.')
vcaBucket0CV = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket0CV.setStatus('mandatory')
if mibBuilder.loadTexts: vcaBucket0CV.setDescription('The current value of bucket 0.')
vcaBucket0Max = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket0Max.setStatus('mandatory')
if mibBuilder.loadTexts: vcaBucket0Max.setDescription('The maximum value of bucket 0.')
vcaBucket0Inc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket0Inc.setStatus('mandatory')
if mibBuilder.loadTexts: vcaBucket0Inc.setDescription('The bucket 0 increment value.')
vcaBucket1CV = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket1CV.setStatus('mandatory')
if mibBuilder.loadTexts: vcaBucket1CV.setDescription('The current value of bucket 1.')
vcaBucket1Max = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket1Max.setStatus('mandatory')
if mibBuilder.loadTexts: vcaBucket1Max.setDescription('The maximum value of bucket 1.')
vcaBucket1Inc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket1Inc.setStatus('mandatory')
if mibBuilder.loadTexts: vcaBucket1Inc.setDescription('The bucket 1 increment value.')
vcaBucket2CV = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket2CV.setStatus('mandatory')
if mibBuilder.loadTexts: vcaBucket2CV.setDescription('The current value of bucket 2.')
vcaBucket2Max = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket2Max.setStatus('mandatory')
if mibBuilder.loadTexts: vcaBucket2Max.setDescription('The maximum value of bucket 2.')
vcaBucket2Inc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket2Inc.setStatus('mandatory')
if mibBuilder.loadTexts: vcaBucket2Inc.setDescription('The bucket 2 increment value.')
vcaBucket3CV = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket3CV.setStatus('mandatory')
if mibBuilder.loadTexts: vcaBucket3CV.setDescription('The current value of bucket 3.')
vcaBucket3Max = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket3Max.setStatus('mandatory')
if mibBuilder.loadTexts: vcaBucket3Max.setDescription('The maximum value of bucket 3.')
vcaBucket3Inc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket3Inc.setStatus('mandatory')
if mibBuilder.loadTexts: vcaBucket3Inc.setDescription('The bucket 3 increment value.')
vcaType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 6, 10, 14, 26, 30, 1, 5, 9, 13, 25, 29, 34, 38, 42, 46, 58, 62, 33, 37, 41, 45, 57, 61))).clone(namedValues=NamedValues(("mgmt-vc", 3), ("sr-pp-pvc", 2), ("sr-pp-pvp", 6), ("sr-mp-bi-pvc", 10), ("sr-mp-bi-pvp", 14), ("sr-mp-uni-pvc", 26), ("sr-mp-uni-pvp", 30), ("sr-pp-svc", 1), ("sr-pp-svp", 5), ("sr-mp-bi-svc", 9), ("sr-mp-bi-svp", 13), ("sr-mp-uni-svc", 25), ("sr-mp-uni-svp", 29), ("ds-pp-pvc", 34), ("ds-pp-pvp", 38), ("ds-mp-bi-pvc", 42), ("ds-mp-bi-pvp", 46), ("ds-mp-uni-pvc", 58), ("ds-mp-uni-pvp", 62), ("ds-pp-svc", 33), ("ds-pp-svp", 37), ("ds-mp-bi-svc", 41), ("ds-mp-bi-svp", 45), ("ds-mp-uni-svc", 57), ("ds-mp-uni-svp", 61)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaType.setStatus('mandatory')
if mibBuilder.loadTexts: vcaType.setDescription('Virtual channel type for the VC.')
vcaDstSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaDstSlot.setStatus('mandatory')
if mibBuilder.loadTexts: vcaDstSlot.setDescription('slot # this VC is going to')
vcaDstLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaDstLink.setStatus('mandatory')
if mibBuilder.loadTexts: vcaDstLink.setDescription('link # this VC is going to')
vcaDstVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaDstVpi.setStatus('mandatory')
if mibBuilder.loadTexts: vcaDstVpi.setDescription('VPI this VC is destined for.')
vcaDstVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaDstVci.setStatus('mandatory')
if mibBuilder.loadTexts: vcaDstVci.setDescription('VCI for this VC is destined for.')
vcaInternalVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaInternalVpi.setStatus('mandatory')
if mibBuilder.loadTexts: vcaInternalVpi.setDescription('Internal VPI')
vcaInternalVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaInternalVci.setStatus('mandatory')
if mibBuilder.loadTexts: vcaInternalVci.setDescription('Internal VCI')
vcbTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4), )
if mibBuilder.loadTexts: vcbTable.setStatus('mandatory')
if mibBuilder.loadTexts: vcbTable.setDescription('This table shows detailed status for native ATM slot controller card link B VCs.')
vcbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1), ).setIndexNames((0, "DV2-MIB", "vcbVpi"), (0, "DV2-MIB", "vcbVci"))
if mibBuilder.loadTexts: vcbEntry.setStatus('mandatory')
vcbVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbVpi.setStatus('mandatory')
if mibBuilder.loadTexts: vcbVpi.setDescription('Virtual path identifier for the VC.')
vcbVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbVci.setStatus('mandatory')
if mibBuilder.loadTexts: vcbVci.setDescription('Virtual channel identifier for the VC.')
vcbTxGCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbTxGCells.setStatus('mandatory')
if mibBuilder.loadTexts: vcbTxGCells.setDescription('Number of transmitted good cells CLP0.')
vcbTxGCellsClp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbTxGCellsClp1.setStatus('mandatory')
if mibBuilder.loadTexts: vcbTxGCellsClp1.setDescription('Number of transmitted good cells CLP1.')
vcbRxGCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbRxGCells.setStatus('mandatory')
if mibBuilder.loadTexts: vcbRxGCells.setDescription('Number of received good cells.')
vcbExcessCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbExcessCells.setStatus('mandatory')
if mibBuilder.loadTexts: vcbExcessCells.setDescription('Number of cells discarded because of bucket overflow.')
vcbPeakExceeds = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbPeakExceeds.setStatus('mandatory')
if mibBuilder.loadTexts: vcbPeakExceeds.setDescription('Number of cells discarded because of peak cell rate violation.')
vcbCellHead = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 8), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbCellHead.setStatus('mandatory')
if mibBuilder.loadTexts: vcbCellHead.setDescription("This value is bitwise OR'd with the cell header.")
vcbCellMask = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 9), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbCellMask.setStatus('mandatory')
if mibBuilder.loadTexts: vcbCellMask.setDescription("This value is bitwise AND'd with the cell header.")
vcbCellSwitchHead = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 10), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbCellSwitchHead.setStatus('mandatory')
if mibBuilder.loadTexts: vcbCellSwitchHead.setDescription('This comprises a tag which is added to the cell before putting into the cell switch and a control byte.')
vcbStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: vcbStartTime.setDescription('This is the bucket start time.')
vcbBucketControl = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 12), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucketControl.setStatus('mandatory')
if mibBuilder.loadTexts: vcbBucketControl.setDescription('This is the bucket control register value.')
vcbBucket0CV = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket0CV.setStatus('mandatory')
if mibBuilder.loadTexts: vcbBucket0CV.setDescription('The current value of bucket 0.')
vcbBucket0Max = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket0Max.setStatus('mandatory')
if mibBuilder.loadTexts: vcbBucket0Max.setDescription('The maximum value of bucket 0.')
vcbBucket0Inc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket0Inc.setStatus('mandatory')
if mibBuilder.loadTexts: vcbBucket0Inc.setDescription('The bucket 0 increment value.')
vcbBucket1CV = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket1CV.setStatus('mandatory')
if mibBuilder.loadTexts: vcbBucket1CV.setDescription('The current value of bucket 1.')
vcbBucket1Max = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket1Max.setStatus('mandatory')
if mibBuilder.loadTexts: vcbBucket1Max.setDescription('The maximum value of bucket 1.')
vcbBucket1Inc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket1Inc.setStatus('mandatory')
if mibBuilder.loadTexts: vcbBucket1Inc.setDescription('The bucket 1 increment value.')
vcbBucket2CV = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket2CV.setStatus('mandatory')
if mibBuilder.loadTexts: vcbBucket2CV.setDescription('The current value of bucket 2.')
vcbBucket2Max = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket2Max.setStatus('mandatory')
if mibBuilder.loadTexts: vcbBucket2Max.setDescription('The maximum value of bucket 2.')
vcbBucket2Inc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket2Inc.setStatus('mandatory')
if mibBuilder.loadTexts: vcbBucket2Inc.setDescription('The bucket 2 increment value.')
vcbBucket3CV = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket3CV.setStatus('mandatory')
if mibBuilder.loadTexts: vcbBucket3CV.setDescription('The current value of bucket 3.')
vcbBucket3Max = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket3Max.setStatus('mandatory')
if mibBuilder.loadTexts: vcbBucket3Max.setDescription('The maximum value of bucket 3.')
vcbBucket3Inc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket3Inc.setStatus('mandatory')
if mibBuilder.loadTexts: vcbBucket3Inc.setDescription('The bucket 3 increment value.')
vcbType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 6, 10, 14, 26, 30, 1, 5, 9, 13, 25, 29, 34, 38, 42, 46, 58, 62, 33, 37, 41, 45, 57, 61))).clone(namedValues=NamedValues(("mgmt-vc", 3), ("sr-pp-pvc", 2), ("sr-pp-pvp", 6), ("sr-mp-bi-pvc", 10), ("sr-mp-bi-pvp", 14), ("sr-mp-uni-pvc", 26), ("sr-mp-uni-pvp", 30), ("sr-pp-svc", 1), ("sr-pp-svp", 5), ("sr-mp-bi-svc", 9), ("sr-mp-bi-svp", 13), ("sr-mp-uni-svc", 25), ("sr-mp-uni-svp", 29), ("ds-pp-pvc", 34), ("ds-pp-pvp", 38), ("ds-mp-bi-pvc", 42), ("ds-mp-bi-pvp", 46), ("ds-mp-uni-pvc", 58), ("ds-mp-uni-pvp", 62), ("ds-pp-svc", 33), ("ds-pp-svp", 37), ("ds-mp-bi-svc", 41), ("ds-mp-bi-svp", 45), ("ds-mp-uni-svc", 57), ("ds-mp-uni-svp", 61)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbType.setStatus('mandatory')
if mibBuilder.loadTexts: vcbType.setDescription('Virtual channel type for the VC.')
vcbDstSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbDstSlot.setStatus('mandatory')
if mibBuilder.loadTexts: vcbDstSlot.setDescription('slot # this VC is going to')
vcbDstLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbDstLink.setStatus('mandatory')
if mibBuilder.loadTexts: vcbDstLink.setDescription('link # this VC is going to')
vcbDstVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbDstVpi.setStatus('mandatory')
if mibBuilder.loadTexts: vcbDstVpi.setDescription('VPI this VC is destined for.')
vcbDstVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbDstVci.setStatus('mandatory')
if mibBuilder.loadTexts: vcbDstVci.setDescription('VCI for this VC is destined for.')
vcbInternalVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbInternalVpi.setStatus('mandatory')
if mibBuilder.loadTexts: vcbInternalVpi.setDescription('Internal VPI')
vcbInternalVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbInternalVci.setStatus('mandatory')
if mibBuilder.loadTexts: vcbInternalVci.setDescription('Internal VCI')
xpStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5), )
if mibBuilder.loadTexts: xpStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: xpStatTable.setDescription('This table shows status of the switch fabric interface.')
xpStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1), ).setIndexNames((0, "DV2-MIB", "xpIFace"))
if mibBuilder.loadTexts: xpStatEntry.setStatus('mandatory')
xpIFace = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpIFace.setStatus('mandatory')
if mibBuilder.loadTexts: xpIFace.setDescription('Switch fabric interface number.')
xpRXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpRXCells.setStatus('mandatory')
if mibBuilder.loadTexts: xpRXCells.setDescription('Switch fabric received cell count.')
xpTXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpTXCells.setStatus('mandatory')
if mibBuilder.loadTexts: xpTXCells.setDescription('Switch fabric transmit cell count.')
xpBadVpiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpBadVpiVci.setStatus('mandatory')
if mibBuilder.loadTexts: xpBadVpiVci.setDescription('Number of cells with bad VCI/VPI received.')
xpRxOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpRxOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: xpRxOverflow.setDescription('Number of receiver overflows.')
xpTxHighPrOver = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpTxHighPrOver.setStatus('mandatory')
if mibBuilder.loadTexts: xpTxHighPrOver.setDescription('Number of transmitted cells with high priority overflow.')
xpTxLowPrOver = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpTxLowPrOver.setStatus('mandatory')
if mibBuilder.loadTexts: xpTxLowPrOver.setDescription('Number of transmitted cells with low priority overflow.')
xpInputOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpInputOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: xpInputOverflow.setDescription('Number of M68302 fabric input overflow cells.')
xpDocErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpDocErrors.setStatus('mandatory')
if mibBuilder.loadTexts: xpDocErrors.setDescription('Number of DOC errors.')
xpLowPriorityFifo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpLowPriorityFifo.setStatus('mandatory')
if mibBuilder.loadTexts: xpLowPriorityFifo.setDescription('Read transmit low priority FIFO count.')
xpEgDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpEgDiscCells.setStatus('mandatory')
if mibBuilder.loadTexts: xpEgDiscCells.setDescription('Read transmit discard cell count.')
xpIgDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpIgDiscCells.setStatus('mandatory')
if mibBuilder.loadTexts: xpIgDiscCells.setDescription('Read receive discard cell count.')
pdhPLCPTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1), )
if mibBuilder.loadTexts: pdhPLCPTable.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPTable.setDescription('This table is used for PLCP configuration and status')
pdhPLCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1), ).setIndexNames((0, "DV2-MIB", "pdhPLCPLinkNo"))
if mibBuilder.loadTexts: pdhPLCPEntry.setStatus('mandatory')
pdhPLCPLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPLinkNo.setDescription('Link Number')
pdhPLCPLinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPLinkEnable.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPLinkEnable.setDescription('Enable/Disable Link')
pdhPLCPLinkStatusAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("ignored", 2), ("processed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPLinkStatusAffect.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPLinkStatusAffect.setDescription('Link Status affect on receiving/transmitting')
pdhPLCPLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPLinkState.setDescription('Current Link State')
pdhPLCPPhyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ds3", 2), ("e3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPPhyMode.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPPhyMode.setDescription('The physical framing for link')
pdhPLCPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("hec-based-delineation", 1), ("ds1-PLCP", 2), ("ds3-PLCP", 3), ("e1-PLCP", 4), ("e3-g751-PLCP", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPMode.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPMode.setDescription('The PLCP mode for link.')
pdhPLCPScrambler = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPScrambler.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPScrambler.setDescription('Enable/Disable scrambling')
pdhPLCP0x55 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCP0x55.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCP0x55.setDescription('Enable/Disable XORing HCS with 0x55')
pdhPLCPSmdsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPSmdsMode.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPSmdsMode.setDescription('Enable/Disable SMDS mode')
pdhPLCPIdleCell = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unassigned", 1), ("idle", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPIdleCell.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPIdleCell.setDescription('Idle Cell Header Contents')
pdhPLCPLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("diagnostic-lpbk", 2), ("line-lpbk", 3), ("payload-lpbk", 4), ("cell-lpbk", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPLoopback.setDescription('PLCP Loopback')
pdhPLCPClear = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPClear.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPClear.setDescription('Clear PLCP counts')
pdhPLCPReconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPReconfig.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPReconfig.setDescription('Reconfigure link')
pdhPLCPLpbkTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPLpbkTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPLpbkTimeout.setDescription('This parameter is used to set the loopback timeout in minutes.')
pdhPLCPChipType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("plpp", 1), ("suni-pdh", 2), ("unknown", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPChipType.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPChipType.setDescription('PDH Chip Type')
pdhPLCPTXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPTXclock.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPTXclock.setDescription('The state of TX clock for this link.')
pdhPLCPRXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPRXclock.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPRXclock.setDescription('The state of RX clock for this link.')
pdhPLCPTXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPTXCells.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPTXCells.setDescription('The transmit cells count for this link.')
pdhPLCPRXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPRXCells.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPRXCells.setDescription('The receive cells count for this link.')
pdhPLCPHCSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPHCSErrs.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPHCSErrs.setDescription('The header checksum error count for this link.')
pdhPLCPLOCDDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPLOCDDefect.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPLOCDDefect.setDescription('Loss of cell delineation Defect')
pdhPLCPYellowDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPYellowDefect.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPYellowDefect.setDescription('PLCP Yellow Defect')
pdhPLCPLOFDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPLOFDefect.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPLOFDefect.setDescription('PLCP Loss Of Frame Defect')
pdhPLCPLOCDAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPLOCDAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPLOCDAlarm.setDescription('Loss of cell delineation Alarm')
pdhPLCPYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPYellowAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPYellowAlarm.setDescription('PLCP Yellow Alarm')
pdhPLCPLOFAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPLOFAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPLOFAlarm.setDescription('PLCP Loss Of Frame Alarm')
pdhPLCPFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPFrameErrs.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPFrameErrs.setDescription('Number of PLCP frame errors')
pdhPLCPBIP8Errs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPBIP8Errs.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPBIP8Errs.setDescription('Number of PLCP BIP-8 errors')
pdhPLCPFEBEErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPFEBEErrs.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPFEBEErrs.setDescription('Number of PLCP FEBE errors')
pdhPLCPES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPES.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPES.setDescription('PLCP Errored Seconds')
pdhPLCPSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPSES.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPSES.setDescription('PLCP Severely Errored Seconds')
pdhPLCPUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPUAS.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPUAS.setDescription('PLCP Unavailable Seconds')
pdhPLCPFEES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPFEES.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPFEES.setDescription('PLCP Far End Errored Seconds')
pdhPLCPFESES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPFESES.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPFESES.setDescription('PLCP Far End Severely Errored Seconds')
pdhPLCPFEUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPFEUAS.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPLCPFEUAS.setDescription('PLCP Far End Unavailable Seconds')
pdhDS3Table = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2), )
if mibBuilder.loadTexts: pdhDS3Table.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3Table.setDescription('This table is used for DS3 config/status supplied by the PLPP chip')
pdhDS3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1), ).setIndexNames((0, "DV2-MIB", "pdhDS3LinkNo"))
if mibBuilder.loadTexts: pdhDS3Entry.setStatus('mandatory')
pdhDS3TableValid = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3TableValid.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3TableValid.setDescription('Indicates if table is valid for configured LIM')
pdhDS3LinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3LinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3LinkNo.setDescription('Link Number')
pdhDS3Framer = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("c-bit", 1), ("m23", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhDS3Framer.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3Framer.setDescription('DS3 framer mode')
pdhDS3TxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhDS3TxAIS.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3TxAIS.setDescription('Transmit AIS')
pdhDS3Clear = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhDS3Clear.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3Clear.setDescription('Clear Button for Counters')
pdhDS3Reconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhDS3Reconfig.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3Reconfig.setDescription('Reconfigure link')
pdhDS3RxFrmFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("c-bit", 1), ("clear-channel", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3RxFrmFmt.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3RxFrmFmt.setDescription('Receive framing format')
pdhDS3RxIDL = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3RxIDL.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3RxIDL.setDescription('Receive IDLE status')
pdhDS3FEACTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 6, 5, 4, 3, 2, 1))).clone(namedValues=NamedValues(("none", 7), ("line-loopback-active", 6), ("line-loopback-deactive", 5), ("ds3-idl", 4), ("ds3-ais", 3), ("ds3-oof", 2), ("ds3-los", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3FEACTxmt.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3FEACTxmt.setDescription('Code that has been transmitted as a FEAC.')
pdhDS3Lcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3Lcvs.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3Lcvs.setDescription('DS3 Line Code Violation count')
pdhDS3FrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3FrameErrs.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3FrameErrs.setDescription('DS3 frame error count')
pdhDS3ParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3ParityErrs.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3ParityErrs.setDescription('DS3 parity error count')
pdhDS3CbitPrtyErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3CbitPrtyErrs.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3CbitPrtyErrs.setDescription('DS3 C-bit parity error count')
pdhDS3FEBEErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3FEBEErrs.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3FEBEErrs.setDescription('DS3 FEBE error count')
pdhDS3LOSDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3LOSDefect.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3LOSDefect.setDescription('DS3 Loss of Signal Defect')
pdhDS3OOFDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3OOFDefect.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3OOFDefect.setDescription('DS3 Out of Frame Defect')
pdhDS3AISDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3AISDefect.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3AISDefect.setDescription('Receive DS3 AIS Defect')
pdhDS3YellowDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3YellowDefect.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3YellowDefect.setDescription('DS3 Yellow Defect')
pdhDS3ExBERDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3ExBERDefect.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3ExBERDefect.setDescription('Excessive Bit Error Rate Defect')
pdhDS3LOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3LOSAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3LOSAlarm.setDescription('DS3 Loss of Signal Alarm')
pdhDS3LOFAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3LOFAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3LOFAlarm.setDescription('DS3 Loss of Frame Defect')
pdhDS3AISAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3AISAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3AISAlarm.setDescription('Receive DS3 AIS Defect')
pdhDS3YellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3YellowAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3YellowAlarm.setDescription('DS3 Yellow Alarm')
pdhDS3ExBERAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3ExBERAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3ExBERAlarm.setDescription('Excessive Bit Error Rate Alarm')
pdhDS3LES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3LES.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3LES.setDescription('Line Errored Seconds')
pdhDS3LSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3LSES.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3LSES.setDescription('Line Severely Errored Seconds')
pdhDS3ES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3ES.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3ES.setDescription('Errored Seconds')
pdhDS3ES2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3ES2.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3ES2.setDescription('Secondary Errored Seconds (C-bit mode only)')
pdhDS3SES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3SES.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3SES.setDescription('Severely Errored Seconds')
pdhDS3SES2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3SES2.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3SES2.setDescription('Secondary Severely Errored Seconds (C-bit mode only)')
pdhDS3AISS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3AISS.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3AISS.setDescription('AIS Seconds')
pdhDS3UAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3UAS.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3UAS.setDescription('Unavailable Seconds')
pdhDS3FarEndES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3FarEndES.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3FarEndES.setDescription('Far End Errored Seconds')
pdhDS3FarEndSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3FarEndSES.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3FarEndSES.setDescription('Far End Severely Errored Seconds')
pdhDS3FarEndUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3FarEndUAS.setStatus('mandatory')
if mibBuilder.loadTexts: pdhDS3FarEndUAS.setDescription('Far End Unavailable Seconds')
pdhE3Table = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3), )
if mibBuilder.loadTexts: pdhE3Table.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3Table.setDescription('This table is used for E3 config/status supplied by the PLPP chip')
pdhE3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1), ).setIndexNames((0, "DV2-MIB", "pdhE3LinkNo"))
if mibBuilder.loadTexts: pdhE3Entry.setStatus('mandatory')
pdhE3TableValid = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3TableValid.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3TableValid.setDescription('Indicates if table is valid for configured LIM')
pdhE3LinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3LinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3LinkNo.setDescription('Link Number')
pdhE3Framer = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("g832", 2), ("g751", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhE3Framer.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3Framer.setDescription('E3 framer mode')
pdhE3Clear = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhE3Clear.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3Clear.setDescription('Clear Button for Counters')
pdhE3Reconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhE3Reconfig.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3Reconfig.setDescription('Reconfigure link')
pdhE3TxmtTimMk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhE3TxmtTimMk.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3TxmtTimMk.setDescription('Set to yes(1) if traceable to primary ref clk.')
pdhE3PloadTypeLab = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("atm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhE3PloadTypeLab.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3PloadTypeLab.setDescription('Payload type label.')
pdhE3TxTrlTrcIdLen = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16))).clone(namedValues=NamedValues(("length-16", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhE3TxTrlTrcIdLen.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3TxTrlTrcIdLen.setDescription('Trail trace length for transmit and expected receive.')
pdhE3TxTrcIdUH = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 9), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhE3TxTrcIdUH.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3TxTrcIdUH.setDescription('Transmit trail trace ID upper half.')
pdhE3TxTrcIdLH = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 10), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhE3TxTrcIdLH.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3TxTrcIdLH.setDescription('Transmit trail trace ID lower half.')
pdhE3RxExTrcIdUH = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 11), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhE3RxExTrcIdUH.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3RxExTrcIdUH.setDescription('Receive expected trail trace ID upper half.')
pdhE3RxExTrcIdLH = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 12), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhE3RxExTrcIdLH.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3RxExTrcIdLH.setDescription('Receive expected trail trace ID lower half.')
pdhE3FrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3FrameErrs.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3FrameErrs.setDescription('E3 frame error count')
pdhE3Lcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3Lcvs.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3Lcvs.setDescription('E3 Line Code Violation count')
pdhE3ParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3ParityErrs.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3ParityErrs.setDescription('E3-G832 parity error count')
pdhE3FEBEErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3FEBEErrs.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3FEBEErrs.setDescription('E3-G832 FEBE error count')
pdhE3LOSDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3LOSDefect.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3LOSDefect.setDescription('LOS Defect')
pdhE3OOFDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3OOFDefect.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3OOFDefect.setDescription('LOF Defect')
pdhE3AISDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3AISDefect.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3AISDefect.setDescription('AIS Defect')
pdhE3FERFDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3FERFDefect.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3FERFDefect.setDescription('FERF Defect')
pdhE3ExBERDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3ExBERDefect.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3ExBERDefect.setDescription('Excessive Bit Error Rate Defect')
pdhE3LOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3LOSAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3LOSAlarm.setDescription('LOS Alarm')
pdhE3LOFAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3LOFAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3LOFAlarm.setDescription('LOF Alarm')
pdhE3AISAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3AISAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3AISAlarm.setDescription('AIS Alarm')
pdhE3FERFAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3FERFAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3FERFAlarm.setDescription('FERF Alarm')
pdhE3ExBERAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3ExBERAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3ExBERAlarm.setDescription('Excessive Bit Error Rate Alarm')
pdhE3LES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3LES.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3LES.setDescription('Line Errored Seconds')
pdhE3LSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3LSES.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3LSES.setDescription('Line Severely Errored Seconds')
pdhE3ES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3ES.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3ES.setDescription('Errored Seconds')
pdhE3SES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3SES.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3SES.setDescription('Severely Errored Seconds')
pdhE3AISS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3AISS.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3AISS.setDescription('AIS Seconds')
pdhE3UAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3UAS.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3UAS.setDescription('Unavailable Seconds')
pdhE3RxTrlTrc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 76), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3RxTrlTrc.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3RxTrlTrc.setDescription('Last received trail trace message.')
pdhE3RxTrIdMis = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3RxTrIdMis.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3RxTrIdMis.setDescription('Receive trace id mismatch indication.')
pdhE3RxTrIdUnst = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3RxTrIdUnst.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3RxTrIdUnst.setDescription('Receive trace id unstable indication.')
pdhE3RxPloadTypeLabMis = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3RxPloadTypeLabMis.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3RxPloadTypeLabMis.setDescription('Receive payload type label mismatch indication.')
pdhE3RxPloadTypeLabUnst = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3RxPloadTypeLabUnst.setStatus('mandatory')
if mibBuilder.loadTexts: pdhE3RxPloadTypeLabUnst.setDescription('Receive payload type label unstable indication.')
plppCTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1), )
if mibBuilder.loadTexts: plppCTable.setStatus('mandatory')
if mibBuilder.loadTexts: plppCTable.setDescription('This table is used to control PLPP configuration.')
plppCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1), ).setIndexNames((0, "DV2-MIB", "plppCLinkNo"))
if mibBuilder.loadTexts: plppCEntry.setStatus('mandatory')
plppCLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppCLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: plppCLinkNo.setDescription('The link number for this configuration.')
plppCLinkEnab = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCLinkEnab.setStatus('mandatory')
if mibBuilder.loadTexts: plppCLinkEnab.setDescription('Set to yes(1) to enable the link.')
plppCCPLCPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("e1", 2), ("g751-e3", 3), ("ds1", 4), ("ds3", 5), ("g832-e3", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCCPLCPMode.setStatus('mandatory')
if mibBuilder.loadTexts: plppCCPLCPMode.setDescription('The PLCP mode for link.')
plppCDS3Framer = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCDS3Framer.setStatus('mandatory')
if mibBuilder.loadTexts: plppCDS3Framer.setDescription('Set to yes(1) to enable the DS3 framer mode for this link.')
plppCScrambler = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCScrambler.setStatus('mandatory')
if mibBuilder.loadTexts: plppCScrambler.setDescription('Set to no(2) to disable the scrambler mode for this link.')
plppC0x55 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppC0x55.setStatus('mandatory')
if mibBuilder.loadTexts: plppC0x55.setDescription('If set to no(2) then HCS is not XORed with 0x55')
plppCCLine = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("processed", 1), ("ignored", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCCLine.setStatus('mandatory')
if mibBuilder.loadTexts: plppCCLine.setDescription('Control line processing for this link.')
plppCLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: plppCLoopback.setDescription('Set to yes(1) to enable loopback mode for this link.')
plppCSmdsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCSmdsMode.setStatus('mandatory')
if mibBuilder.loadTexts: plppCSmdsMode.setDescription('Set to yes(1) to enable SMDS mode.')
plppCPloadTypeLab = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCPloadTypeLab.setStatus('mandatory')
if mibBuilder.loadTexts: plppCPloadTypeLab.setDescription('Pay type label.')
plppCTxTrlTrcIdLen = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 64))).clone(namedValues=NamedValues(("l16", 16), ("l64", 64)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCTxTrlTrcIdLen.setStatus('mandatory')
if mibBuilder.loadTexts: plppCTxTrlTrcIdLen.setDescription('Trail trace length for transmit and expected receive.')
plppCTxTrcId = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 15), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCTxTrcId.setStatus('mandatory')
if mibBuilder.loadTexts: plppCTxTrcId.setDescription('Transmit trail trace identifier.')
plppCRxExTrcId = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 16), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCRxExTrcId.setStatus('mandatory')
if mibBuilder.loadTexts: plppCRxExTrcId.setDescription('Receive expected trail trace identifier.')
plppSTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2), )
if mibBuilder.loadTexts: plppSTable.setStatus('mandatory')
if mibBuilder.loadTexts: plppSTable.setDescription('The status table for plpp.')
plppSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1), ).setIndexNames((0, "DV2-MIB", "plppSLinkNo"))
if mibBuilder.loadTexts: plppSEntry.setStatus('mandatory')
plppSLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: plppSLinkNo.setDescription('The link number for this status.')
plppSCLines = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSCLines.setStatus('mandatory')
if mibBuilder.loadTexts: plppSCLines.setDescription('The state of control lines for this link.')
plppSTXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSTXclock.setStatus('mandatory')
if mibBuilder.loadTexts: plppSTXclock.setDescription('The state of TX clock for this link.')
plppSRXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSRXclock.setStatus('mandatory')
if mibBuilder.loadTexts: plppSRXclock.setDescription('The state of RX clock for this link.')
plppSTXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSTXCells.setStatus('mandatory')
if mibBuilder.loadTexts: plppSTXCells.setDescription('The transmit cells count for this link.')
plppSRXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSRXCells.setStatus('mandatory')
if mibBuilder.loadTexts: plppSRXCells.setDescription('The receive cells count for this link.')
plppSHCSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSHCSErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppSHCSErrs.setDescription('The header checksum error count for this link.')
plppSFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSFrameErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppSFrameErrs.setDescription('The frame error count for this link.')
plppSBIP8Errs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSBIP8Errs.setStatus('mandatory')
if mibBuilder.loadTexts: plppSBIP8Errs.setDescription('The BIP-8 error count for this link.')
plppSFEBEErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSFEBEErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppSFEBEErrs.setDescription('The FEBE error count for this link.')
plppSSPLRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSSPLRStatus.setStatus('mandatory')
if mibBuilder.loadTexts: plppSSPLRStatus.setDescription('The SPLR Status Register Contents.')
plppSDs3Lcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSDs3Lcvs.setStatus('mandatory')
if mibBuilder.loadTexts: plppSDs3Lcvs.setDescription('The DS3 LCV count for this link.')
plppSDs3FrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSDs3FrameErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppSDs3FrameErrs.setDescription('The DS3 frame error count for this link.')
plppSDs3ParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSDs3ParityErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppSDs3ParityErrs.setDescription('The DS3 parity error count for this link.')
plppSDs3CbitPrtyErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSDs3CbitPrtyErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppSDs3CbitPrtyErrs.setDescription('The DS3 control bit parity error count for this link.')
plppSDs3FEBEErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSDs3FEBEErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppSDs3FEBEErrs.setDescription('The DS3 FEBE error count for this link.')
plppSDs3RxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSDs3RxAIS.setStatus('mandatory')
if mibBuilder.loadTexts: plppSDs3RxAIS.setDescription('Receive DS3 AIS status.')
plppSDs3RxRedAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSDs3RxRedAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: plppSDs3RxRedAlarm.setDescription('Receive DS3 Red Alarm status.')
plppSDs3RxYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSDs3RxYellowAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: plppSDs3RxYellowAlarm.setDescription('Receive DS3 Yellow Alarm status.')
plppSPLCPRxYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSPLCPRxYellowAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: plppSPLCPRxYellowAlarm.setDescription('Receive PLCP Yellow Alarm status.')
plppsRxTrIdMis = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppsRxTrIdMis.setStatus('mandatory')
if mibBuilder.loadTexts: plppsRxTrIdMis.setDescription('Receive trace id mismatch indication.')
plppsRxTrIdUnst = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppsRxTrIdUnst.setStatus('mandatory')
if mibBuilder.loadTexts: plppsRxTrIdUnst.setDescription('Receive trace id unstable indication.')
plppsRxPloadTypeLabMis = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppsRxPloadTypeLabMis.setStatus('mandatory')
if mibBuilder.loadTexts: plppsRxPloadTypeLabMis.setDescription('Receive payload type label mismatch indication.')
plppsRxPloadTypeLabUnst = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppsRxPloadTypeLabUnst.setStatus('mandatory')
if mibBuilder.loadTexts: plppsRxPloadTypeLabUnst.setDescription('Receive payload type label unstable indication.')
plppsRxTrlTrc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 28), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppsRxTrlTrc.setStatus('mandatory')
if mibBuilder.loadTexts: plppsRxTrlTrc.setDescription('Last received trail trace message.')
plppV2CTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3), )
if mibBuilder.loadTexts: plppV2CTable.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2CTable.setDescription('This table is used to control DS3-2C PLPP configuration.')
plppV2CEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1), ).setIndexNames((0, "DV2-MIB", "plppV2CLinkNo"))
if mibBuilder.loadTexts: plppV2CEntry.setStatus('mandatory')
plppV2CLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2CLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2CLinkNo.setDescription('The link number for this configuration.')
plppV2CLinkEnab = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppV2CLinkEnab.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2CLinkEnab.setDescription('Set to yes(1) to enable the link.')
plppV2CCPLCPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppV2CCPLCPMode.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2CCPLCPMode.setDescription('Set to yes(1) to enable the PLCP layer mode for this link.')
plppV2CDS3Framer = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppV2CDS3Framer.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2CDS3Framer.setDescription('Set to yes(1) to enable the DS3 framer mode for this link.')
plppV2CScrambler = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppV2CScrambler.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2CScrambler.setDescription('Set to no(2) to disable the scrambler mode for this link.')
plppV2C0x55 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppV2C0x55.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2C0x55.setDescription('If set to no(2) then HCS is not XORed with 0x55')
plppV2CLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppV2CLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2CLoopback.setDescription('Set to yes(1) to enable loopback mode for this link.')
plppV2CSmdsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppV2CSmdsMode.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2CSmdsMode.setDescription('Set to yes(1) to enable SMDS mode.')
plppV2CFrmFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("c-bit", 1), ("clear-channel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppV2CFrmFmt.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2CFrmFmt.setDescription('Set to yes(1) to enable C-bit parity framing format.')
plppV2CTxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppV2CTxAIS.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2CTxAIS.setDescription('Set to yes(1) to enable framer to Txmt AIS.')
plppV2STable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4), )
if mibBuilder.loadTexts: plppV2STable.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2STable.setDescription('The status table for DS3-2C plpp.')
plppV2SEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1), ).setIndexNames((0, "DV2-MIB", "plppV2SLinkNo"))
if mibBuilder.loadTexts: plppV2SEntry.setStatus('mandatory')
plppV2SLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SLinkNo.setDescription('The link number for this status.')
plppV2STXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2STXclock.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2STXclock.setDescription('The state of TX clock for this link.')
plppV2SRXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SRXclock.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SRXclock.setDescription('The state of RX clock for this link.')
plppV2STXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2STXCells.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2STXCells.setDescription('The transmit cells count for this link.')
plppV2SRXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SRXCells.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SRXCells.setDescription('The receive cells count for this link.')
plppV2SHCSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SHCSErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SHCSErrs.setDescription('The header checksum error count for this link.')
plppV2SFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SFrameErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SFrameErrs.setDescription('The frame error count for this link.')
plppV2SBIP8Errs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SBIP8Errs.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SBIP8Errs.setDescription('The BIP-8 error count for this link.')
plppV2SFEBEErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SFEBEErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SFEBEErrs.setDescription('The FEBE error count for this link.')
plppV2SSPLRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SSPLRStatus.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SSPLRStatus.setDescription('yes(1) indicates a PLCP LOF.')
plppV2SDs3FrmFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("c-bit", 1), ("clear-channel", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3FrmFmt.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SDs3FrmFmt.setDescription('Operate in DS3 C-bit Parity or drop-back to Clear Channel.')
plppV2SDs3Lcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3Lcvs.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SDs3Lcvs.setDescription('The DS3 LCV count for this link.')
plppV2SDs3FrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3FrameErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SDs3FrameErrs.setDescription('The DS3 frame error count for this link.')
plppV2SDs3ParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3ParityErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SDs3ParityErrs.setDescription('The DS3 parity error count for this link.')
plppV2SDs3CbitPrtyErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3CbitPrtyErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SDs3CbitPrtyErrs.setDescription('The DS3 control bit parity error count for this link.')
plppV2SDs3FEBEErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3FEBEErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SDs3FEBEErrs.setDescription('The DS3 FEBE error count for this link.')
plppV2SDs3RxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3RxAIS.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SDs3RxAIS.setDescription('Receive DS3 AIS status.')
plppV2SDs3RxRedAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3RxRedAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SDs3RxRedAlarm.setDescription('Receive DS3 Red Alarm status.')
plppV2SDs3RxYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3RxYellowAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SDs3RxYellowAlarm.setDescription('Receive DS3 Yellow Alarm status.')
plppV2SPLCPRxYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SPLCPRxYellowAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SPLCPRxYellowAlarm.setDescription('Receive PLCP Yellow Alarm status.')
plppV2SDs3FEACTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 6, 5, 4, 3, 2, 1))).clone(namedValues=NamedValues(("none", 7), ("line-loopback-active", 6), ("line-loopback-deactive", 5), ("ds3-idl", 4), ("ds3-ais", 3), ("ds3-oof", 2), ("ds3-los", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3FEACTxmt.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SDs3FEACTxmt.setDescription('Code that has been transmitted as a FEAC.')
plppV2SRxIDL = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SRxIDL.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SRxIDL.setDescription('yes(1) indicates an IDLE has been received.')
plppV2SLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SLOC.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SLOC.setDescription('Receive Loss of cell delineation.')
plppV2SDs3LPBK = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3LPBK.setStatus('mandatory')
if mibBuilder.loadTexts: plppV2SDs3LPBK.setDescription('if yes(1), the DS3 Framer is in loopback.')
plppE1CTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5), )
if mibBuilder.loadTexts: plppE1CTable.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1CTable.setDescription('This table to control the E1-2C PLPP configuration.')
plppE1CEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5, 1), ).setIndexNames((0, "DV2-MIB", "plppE1CLinkNo"))
if mibBuilder.loadTexts: plppE1CEntry.setStatus('mandatory')
plppE1CLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1CLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1CLinkNo.setDescription('The link number for this configuration.')
plppE1CLinkEnab = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE1CLinkEnab.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1CLinkEnab.setDescription('Set to yes(1) to enable the link.')
plppE1CScrambler = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE1CScrambler.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1CScrambler.setDescription('Set to no(2) to disable the scrambler mode for this link.')
plppE1C0x55 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE1C0x55.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1C0x55.setDescription('If set to no(2) then HCS is not XORed with 0x55')
plppE1CSmdsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE1CSmdsMode.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1CSmdsMode.setDescription('Set to yes(1) to enable SMDS mode.')
plppE1CLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE1CLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1CLpbk.setDescription('Set to yes(1) to enable DOC Framer loopback.')
plppE1STable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6), )
if mibBuilder.loadTexts: plppE1STable.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1STable.setDescription('The status table for E1-2C plpp.')
plppE1SEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1), ).setIndexNames((0, "DV2-MIB", "plppE1SLinkNo"))
if mibBuilder.loadTexts: plppE1SEntry.setStatus('mandatory')
plppE1SLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1SLinkNo.setDescription('The link number for this status.')
plppE1STXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1STXclock.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1STXclock.setDescription('The state of TX clock for this link.')
plppE1SRXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SRXclock.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1SRXclock.setDescription('The state of RX clock for this link.')
plppE1STXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1STXCells.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1STXCells.setDescription('The transmit cells count for this link.')
plppE1SRXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SRXCells.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1SRXCells.setDescription('The receive cells count for this link.')
plppE1SHCSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SHCSErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1SHCSErrs.setDescription('The HCS error count for this link.')
plppE1SCRCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SCRCErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1SCRCErrs.setDescription('The CRC-4 error count for this link.')
plppE1SFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SFrameErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1SFrameErrs.setDescription('The frame error count for this link.')
plppE1SFEBEErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SFEBEErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1SFEBEErrs.setDescription('The FEBE error count for this link.')
plppE1SLcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SLcvs.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1SLcvs.setDescription('The E1 LCV count for this link.')
plppE1SRxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SRxAIS.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1SRxAIS.setDescription('Receive E1 AIS status.')
plppE1SRxOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SRxOOF.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1SRxOOF.setDescription('Receive E1 OOF status.')
plppE1SRxLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SRxLOS.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1SRxLOS.setDescription('Receive E1 LOS status.')
plppE1SRxLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SRxLOF.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1SRxLOF.setDescription('Receive E1 LOF status.')
plppE1SFerf = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SFerf.setStatus('mandatory')
if mibBuilder.loadTexts: plppE1SFerf.setDescription('Receiving a Far-End Receive Failure if yes.')
plppE3CTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7), )
if mibBuilder.loadTexts: plppE3CTable.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3CTable.setDescription('This table is used to control the E3-2C PLPP configuration.')
plppE3CEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1), ).setIndexNames((0, "DV2-MIB", "plppE3CLinkNo"))
if mibBuilder.loadTexts: plppE3CEntry.setStatus('mandatory')
plppE3CLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3CLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3CLinkNo.setDescription('The link number for this configuration.')
plppE3CLinkEnab = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CLinkEnab.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3CLinkEnab.setDescription('Set to yes(1) to enable the link.')
plppE3CFramer = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 1))).clone(namedValues=NamedValues(("g832", 3), ("g751", 2), ("none", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CFramer.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3CFramer.setDescription('The E3 framer mode for the link.')
plppE3CPLCPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("none", 1), ("g751", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CPLCPMode.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3CPLCPMode.setDescription('The PLCP mode for the link.')
plppE3CScrambler = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CScrambler.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3CScrambler.setDescription('Set to no(2) to disable the scrambler mode for this link.')
plppE3C0x55 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3C0x55.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3C0x55.setDescription('If set to no(2) then HCS is not XORed with 0x55')
plppE3CLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3CLoopback.setDescription('Set to yes(1) to enable loopback mode for this link.')
plppE3CSmdsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CSmdsMode.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3CSmdsMode.setDescription('Set to yes(1) to enable SMDS mode.')
plppE3CTxmtTimMk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CTxmtTimMk.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3CTxmtTimMk.setDescription('Set to yes(1) if traceable to primary ref clk.')
plppE3CPloadTypeLab = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("atm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CPloadTypeLab.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3CPloadTypeLab.setDescription('Payload type label.')
plppE3CTxTrlTrcIdLen = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16))).clone(namedValues=NamedValues(("length-16", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CTxTrlTrcIdLen.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3CTxTrlTrcIdLen.setDescription('Trail trace length for transmit and expected receive.')
plppE3CTxTrcIdUH = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 12), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CTxTrcIdUH.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3CTxTrcIdUH.setDescription('Transmit trail trace ID upper half.')
plppE3CTxTrcIdLH = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 13), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CTxTrcIdLH.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3CTxTrcIdLH.setDescription('Transmit trail trace ID lower half.')
plppE3CRxExTrcIdUH = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 14), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CRxExTrcIdUH.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3CRxExTrcIdUH.setDescription('Receive expected trail trace ID upper half.')
plppE3CRxExTrcIdLH = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 15), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CRxExTrcIdLH.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3CRxExTrcIdLH.setDescription('Receive expected trail trace ID lower half.')
plppE3STable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8), )
if mibBuilder.loadTexts: plppE3STable.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3STable.setDescription('The E3-2C status table for plpp.')
plppE3SEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1), ).setIndexNames((0, "DV2-MIB", "plppE3SLinkNo"))
if mibBuilder.loadTexts: plppE3SEntry.setStatus('mandatory')
plppE3SLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SLinkNo.setDescription('The link number for this status.')
plppE3STXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("down", 2), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3STXclock.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3STXclock.setDescription('The state of TX clock for this link.')
plppE3SRXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("down", 2), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRXclock.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SRXclock.setDescription('The state of RX clock for this link.')
plppE3STXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3STXCells.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3STXCells.setDescription('The transmit cells count for this link.')
plppE3SRXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRXCells.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SRXCells.setDescription('The receive cells count for this link.')
plppE3SHCSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SHCSErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SHCSErrs.setDescription('The header checksum error count for this link.')
plppE3SE3FrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SE3FrameErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SE3FrameErrs.setDescription('The E3 frame error count for this link.')
plppE3SPLCPFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SPLCPFrameErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SPLCPFrameErrs.setDescription('The PLCP frame error count for this link.')
plppE3SBIP8Errs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SBIP8Errs.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SBIP8Errs.setDescription('The BIP-8 error count for this link.')
plppE3SFEBEErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SFEBEErrs.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SFEBEErrs.setDescription('The FEBE error count for this link.')
plppE3SLcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SLcvs.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SLcvs.setDescription('The E3 LCV count for this link.')
plppE3SLcd = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SLcd.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SLcd.setDescription('Receive Loss of cell delineation.')
plppE3SRxTrlTrc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 13), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRxTrlTrc.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SRxTrlTrc.setDescription('Last received trail trace message.')
plppE3SRxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRxAIS.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SRxAIS.setDescription('Receive E3 AIS status.')
plppE3SRxOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRxOOF.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SRxOOF.setDescription('Receive E3 OOF status.')
plppE3SRxLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRxLOS.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SRxLOS.setDescription('Receive E3 LOS status.')
plppE3SRxLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRxLOF.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SRxLOF.setDescription('Receive E3 LOF status.')
plppE3SRxFERF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRxFERF.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SRxFERF.setDescription('Receive E3 FERF status.')
plppE3SPLCPRxLof = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SPLCPRxLof.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SPLCPRxLof.setDescription('The PLCP Rx LOF for this link.')
plppE3SPLCPRxYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SPLCPRxYellowAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SPLCPRxYellowAlarm.setDescription('Receive PLCP Yellow Alarm status.')
plppE3SRxTrIdMis = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRxTrIdMis.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SRxTrIdMis.setDescription('Receive trace id mismatch indication.')
plppE3SRxTrIdUnst = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRxTrIdUnst.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SRxTrIdUnst.setDescription('Receive trace id unstable indication.')
plppE3SRxPloadTypeLabMis = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRxPloadTypeLabMis.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SRxPloadTypeLabMis.setDescription('Receive payload type label mismatch indication.')
plppE3SRxPloadTypeLabUnst = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRxPloadTypeLabUnst.setStatus('mandatory')
if mibBuilder.loadTexts: plppE3SRxPloadTypeLabUnst.setDescription('Receive payload type label unstable indication.')
lFibreConfTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 1), )
if mibBuilder.loadTexts: lFibreConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: lFibreConfTable.setDescription('This table contains configuration information for the LFDOC.')
lFibreConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 1, 1), ).setIndexNames((0, "DV2-MIB", "lFibreConfLinkNo"))
if mibBuilder.loadTexts: lFibreConfEntry.setStatus('mandatory')
lFibreConfLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFibreConfLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: lFibreConfLinkNo.setDescription('The link number for this configuration.')
lFibreConfLinkEnab = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lFibreConfLinkEnab.setStatus('mandatory')
if mibBuilder.loadTexts: lFibreConfLinkEnab.setDescription('Set to yes(1) to enable the link.')
lFibreConfCLine = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("processed", 1), ("ignored", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lFibreConfCLine.setStatus('mandatory')
if mibBuilder.loadTexts: lFibreConfCLine.setDescription('Set to ignored(2) to stop control line processing for this link.')
lFibreConfLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lFibreConfLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: lFibreConfLoopback.setDescription('Set to yes(1) to enable loopback mode for this link.')
lFibreStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 2), )
if mibBuilder.loadTexts: lFibreStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: lFibreStatTable.setDescription('This table contains status information for the LFDOC')
lFibreStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 2, 1), ).setIndexNames((0, "DV2-MIB", "lFibreStatLinkNo"))
if mibBuilder.loadTexts: lFibreStatEntry.setStatus('mandatory')
lFibreStatLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFibreStatLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: lFibreStatLinkNo.setDescription('The link number for this status.')
lFibreStatCLines = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFibreStatCLines.setStatus('mandatory')
if mibBuilder.loadTexts: lFibreStatCLines.setDescription('The state of control lines for this link.')
lFibreStatHCSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFibreStatHCSErrs.setStatus('mandatory')
if mibBuilder.loadTexts: lFibreStatHCSErrs.setDescription('The header checksum error count for this link.')
ds1Table = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1), )
if mibBuilder.loadTexts: ds1Table.setStatus('mandatory')
if mibBuilder.loadTexts: ds1Table.setDescription('ds1 Status Table')
ds1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1), ).setIndexNames((0, "DV2-MIB", "ds1LinkNo"))
if mibBuilder.loadTexts: ds1Entry.setStatus('mandatory')
ds1LinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1LinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: ds1LinkNo.setDescription('Link number - this is the instance.')
ds1LineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("feet-0-110", 1), ("feet-110-220", 2), ("feet-220-330", 3), ("feet-330-440", 4), ("feet-440-550", 5), ("feet-550-660", 6), ("more-than-655-feet", 7), ("square", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1LineLength.setStatus('mandatory')
if mibBuilder.loadTexts: ds1LineLength.setDescription('Length of the line connected to the physical interface.')
ds1Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("sf", 2), ("t1dm", 3), ("slc96", 4), ("esf4k", 5), ("esf2k-3", 6), ("esf2k-1", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1Framing.setStatus('mandatory')
if mibBuilder.loadTexts: ds1Framing.setDescription('T1 Framing type.')
ds1Coding = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1Coding.setStatus('mandatory')
if mibBuilder.loadTexts: ds1Coding.setDescription('The line code of incoming DS1 signal. ami(2) selects AMI line code.')
ds1Tr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1Tr.setStatus('mandatory')
if mibBuilder.loadTexts: ds1Tr.setDescription('Set to yes(1) to enable transmit loop-back.')
ds1Rt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1Rt.setStatus('mandatory')
if mibBuilder.loadTexts: ds1Rt.setDescription('Set to yes(1) to enable receive loop-back.')
ds1LOSDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1LOSDefect.setStatus('mandatory')
if mibBuilder.loadTexts: ds1LOSDefect.setDescription('Loss of Signal Defect')
ds1AISDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1AISDefect.setStatus('mandatory')
if mibBuilder.loadTexts: ds1AISDefect.setDescription('AIS Defect')
ds1OOFDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1OOFDefect.setStatus('mandatory')
if mibBuilder.loadTexts: ds1OOFDefect.setDescription('OOF Defect')
ds1YellowDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1YellowDefect.setStatus('mandatory')
if mibBuilder.loadTexts: ds1YellowDefect.setDescription('Yellow Defect')
ds1LOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1LOSAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ds1LOSAlarm.setDescription('Loss Of Signal alarm')
ds1AISAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1AISAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ds1AISAlarm.setDescription('AIS alarm')
ds1LOFAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1LOFAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ds1LOFAlarm.setDescription('Loss Of Frame alarm')
ds1YellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1YellowAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ds1YellowAlarm.setDescription('Yellow alarm')
ds1PdvCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1PdvCount.setStatus('mandatory')
if mibBuilder.loadTexts: ds1PdvCount.setDescription('Number of pulse density violations detected.')
ds1Z16Count = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1Z16Count.setStatus('mandatory')
if mibBuilder.loadTexts: ds1Z16Count.setDescription('Number of 16 consecutive zeroes detected.')
ds1LcvCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1LcvCount.setStatus('mandatory')
if mibBuilder.loadTexts: ds1LcvCount.setDescription('Number of line code violations detected.')
ds1BeeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1BeeCount.setStatus('mandatory')
if mibBuilder.loadTexts: ds1BeeCount.setDescription('Number of block error events detected.')
ds1FerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1FerCount.setStatus('mandatory')
if mibBuilder.loadTexts: ds1FerCount.setDescription('Number of framing bit error events detected.')
ds1OofCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1OofCount.setStatus('mandatory')
if mibBuilder.loadTexts: ds1OofCount.setDescription('Number of out of frame events detected.')
ds1ClrStats = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1ClrStats.setStatus('mandatory')
if mibBuilder.loadTexts: ds1ClrStats.setDescription('Clear counters')
ds1Reconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1Reconfig.setStatus('mandatory')
if mibBuilder.loadTexts: ds1Reconfig.setDescription('Reconfigure Link')
ds1LineES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1LineES.setStatus('mandatory')
if mibBuilder.loadTexts: ds1LineES.setDescription('Line Errored Seconds')
ds1LineSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1LineSES.setStatus('mandatory')
if mibBuilder.loadTexts: ds1LineSES.setDescription('Line Severely Errored Seconds')
ds1ES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1ES.setStatus('mandatory')
if mibBuilder.loadTexts: ds1ES.setDescription('Errored Seconds')
ds1SES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1SES.setStatus('mandatory')
if mibBuilder.loadTexts: ds1SES.setDescription('Severely Errored Seconds')
ds1AISS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1AISS.setStatus('mandatory')
if mibBuilder.loadTexts: ds1AISS.setDescription('AIS Seconds')
ds1UAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1UAS.setStatus('mandatory')
if mibBuilder.loadTexts: ds1UAS.setDescription('Unavailable Seconds')
ds1TxClkSel = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(12, 13))).clone(namedValues=NamedValues(("local-oscillator", 12), ("local-link", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1TxClkSel.setStatus('mandatory')
if mibBuilder.loadTexts: ds1TxClkSel.setDescription('Transmit clock select.')
ds1ExBERDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1ExBERDefect.setStatus('mandatory')
if mibBuilder.loadTexts: ds1ExBERDefect.setDescription('Excessive Bit Error Rate Defect')
ds1ExBERAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1ExBERAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ds1ExBERAlarm.setDescription('Excessive Bit Error Rate Alarm')
ds3Table = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2), )
if mibBuilder.loadTexts: ds3Table.setStatus('mandatory')
if mibBuilder.loadTexts: ds3Table.setDescription('ds3 Status Table')
ds3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1), ).setIndexNames((0, "DV2-MIB", "ds3LinkNo"))
if mibBuilder.loadTexts: ds3Entry.setStatus('mandatory')
ds3LinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3LinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: ds3LinkNo.setDescription('Link number - this is the instance.')
ds3Lb = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3Lb.setStatus('mandatory')
if mibBuilder.loadTexts: ds3Lb.setDescription('Loop-back mode active.')
ds3Err = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3Err.setStatus('mandatory')
if mibBuilder.loadTexts: ds3Err.setDescription('AIS or BPV detected.')
ds3RXLos = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3RXLos.setStatus('mandatory')
if mibBuilder.loadTexts: ds3RXLos.setDescription('Receive loss of signal.')
ds3TXLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3TXLoc.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TXLoc.setDescription('Transmit loss of clock.')
ds3RXErr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3RXErr.setStatus('mandatory')
if mibBuilder.loadTexts: ds3RXErr.setDescription('Receive error detected.')
ds3RXAis = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3RXAis.setStatus('mandatory')
if mibBuilder.loadTexts: ds3RXAis.setDescription('Set to yes(1) to generate a receive AIS alarm.')
ds3TXAis = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3TXAis.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TXAis.setDescription('Set to yes(1) to transmit an AIS alarm.')
ds3TXLev = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3TXLev.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TXLev.setDescription('Transmit level.')
ds3Tr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3Tr.setStatus('mandatory')
if mibBuilder.loadTexts: ds3Tr.setDescription('Transmit loop-back.')
ds3Rt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3Rt.setStatus('mandatory')
if mibBuilder.loadTexts: ds3Rt.setDescription('Set to yes(1) to enable receive loop-back.')
ds3Equal = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3Equal.setStatus('mandatory')
if mibBuilder.loadTexts: ds3Equal.setDescription('Equalisation type.')
ds3LOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3LOSAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ds3LOSAlarm.setDescription('Loss Of Signal Integrated Alarm')
ds3Reconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3Reconfig.setStatus('mandatory')
if mibBuilder.loadTexts: ds3Reconfig.setDescription('Reconfigure Link')
e1Table = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5), )
if mibBuilder.loadTexts: e1Table.setStatus('mandatory')
if mibBuilder.loadTexts: e1Table.setDescription('E1-2C Config/Status Table')
e1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1), ).setIndexNames((0, "DV2-MIB", "e1LinkNo"))
if mibBuilder.loadTexts: e1Entry.setStatus('mandatory')
e1LinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: e1LinkNo.setDescription('Link number - this is the instance.')
e1LimType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dual", 1), ("quad", 2), ("dual-sig", 3), ("quad-sig", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LimType.setStatus('mandatory')
if mibBuilder.loadTexts: e1LimType.setDescription('LIM I.D. type')
e1Lb = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("line", 2), ("payload", 3), ("digital", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1Lb.setStatus('mandatory')
if mibBuilder.loadTexts: e1Lb.setDescription('Loopback Selection')
e1FRMRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("crc-mfrm", 1), ("basic", 2), ("unframed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1FRMRMode.setStatus('mandatory')
if mibBuilder.loadTexts: e1FRMRMode.setDescription('e1 Framing options.')
e1TxClkSel = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("system", 11), ("loc-oscil", 12), ("loc-link0", 13), ("loc-link1", 14), ("loc-link2", 15), ("loc-link3", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1TxClkSel.setStatus('mandatory')
if mibBuilder.loadTexts: e1TxClkSel.setDescription('Transmit clock select.')
e1TS16PayLd = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1TS16PayLd.setStatus('mandatory')
if mibBuilder.loadTexts: e1TS16PayLd.setDescription('Employ TimeSlot 16 for customer data.')
e1TxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1TxAIS.setStatus('mandatory')
if mibBuilder.loadTexts: e1TxAIS.setDescription('Transmit the AIS State.')
e1GappedClk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1GappedClk.setStatus('mandatory')
if mibBuilder.loadTexts: e1GappedClk.setDescription('Select 1,(yes) for Circuit-emulation.')
e1IntrfType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("balanc-120", 1), ("unbalan-75", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1IntrfType.setStatus('mandatory')
if mibBuilder.loadTexts: e1IntrfType.setDescription('E1 Framing options.')
e1ClrStats = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1ClrStats.setStatus('mandatory')
if mibBuilder.loadTexts: e1ClrStats.setDescription('Clear Counters')
e1Reconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1Reconfig.setStatus('mandatory')
if mibBuilder.loadTexts: e1Reconfig.setDescription('Reconfigure Link')
se1SA4 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("off", 2), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: se1SA4.setStatus('mandatory')
if mibBuilder.loadTexts: se1SA4.setDescription("Nat'l bit Sa4")
se1SA5 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("off", 2), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: se1SA5.setStatus('mandatory')
if mibBuilder.loadTexts: se1SA5.setDescription("Nat'l bit Sa5")
se1SA6 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("off", 2), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: se1SA6.setStatus('mandatory')
if mibBuilder.loadTexts: se1SA6.setDescription("Nat'l bit Sa6")
se1SA7 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("off", 2), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: se1SA7.setStatus('mandatory')
if mibBuilder.loadTexts: se1SA7.setDescription("Nat'l bit Sa7")
se1SA8 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("off", 2), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: se1SA8.setStatus('mandatory')
if mibBuilder.loadTexts: se1SA8.setDescription("Nat'l bit Sa8")
se1SI0 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("off", 2), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: se1SI0.setStatus('mandatory')
if mibBuilder.loadTexts: se1SI0.setDescription("Int'l bit Si0")
se1SI1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("off", 2), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: se1SI1.setStatus('mandatory')
if mibBuilder.loadTexts: se1SI1.setDescription("Nat'l bit Si1")
e1LOSDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LOSDefect.setStatus('mandatory')
if mibBuilder.loadTexts: e1LOSDefect.setDescription('Loss Of Signal Defect')
e1OOFDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1OOFDefect.setStatus('mandatory')
if mibBuilder.loadTexts: e1OOFDefect.setDescription('Receive Out Of Frame')
e1AISDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1AISDefect.setStatus('mandatory')
if mibBuilder.loadTexts: e1AISDefect.setDescription('Receive AIS Defect')
e1FerfDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1FerfDefect.setStatus('mandatory')
if mibBuilder.loadTexts: e1FerfDefect.setDescription('Receive Yellow Defect')
e1ExBERDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1ExBERDefect.setStatus('mandatory')
if mibBuilder.loadTexts: e1ExBERDefect.setDescription('Excessive Bit Error Rate Defect')
e1LOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LOSAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: e1LOSAlarm.setDescription('Loss Of Signal Integrated Alarm')
e1LOFAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LOFAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: e1LOFAlarm.setDescription('Loss Of Frame Integrated Alarm')
e1AISAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1AISAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: e1AISAlarm.setDescription('AIS Integrated Alarm')
e1FerfAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1FerfAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: e1FerfAlarm.setDescription('Yellow Integrated Alarm')
e1ExBERAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1ExBERAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: e1ExBERAlarm.setDescription('Excessive Bit Error Rate Alarm')
e1SCRCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1SCRCErrs.setStatus('mandatory')
if mibBuilder.loadTexts: e1SCRCErrs.setDescription('The CRC-4 error count for this link.')
e1SFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1SFrameErrs.setStatus('mandatory')
if mibBuilder.loadTexts: e1SFrameErrs.setDescription('The frame error count for this link.')
e1SFEBEErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1SFEBEErrs.setStatus('mandatory')
if mibBuilder.loadTexts: e1SFEBEErrs.setDescription('The FEBE error count for this link.')
e1SLcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1SLcvs.setStatus('mandatory')
if mibBuilder.loadTexts: e1SLcvs.setDescription('The E1 LCV count for this link.')
e1LineES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LineES.setStatus('mandatory')
if mibBuilder.loadTexts: e1LineES.setDescription('Line Errored Seconds')
e1LineSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LineSES.setStatus('mandatory')
if mibBuilder.loadTexts: e1LineSES.setDescription('Line Severely Errored Seconds')
e1ES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1ES.setStatus('mandatory')
if mibBuilder.loadTexts: e1ES.setDescription('Errored Seconds')
e1SES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1SES.setStatus('mandatory')
if mibBuilder.loadTexts: e1SES.setDescription('Severely Errored Seconds')
e1AISS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1AISS.setStatus('mandatory')
if mibBuilder.loadTexts: e1AISS.setDescription('AIS Seconds')
e1UAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1UAS.setStatus('mandatory')
if mibBuilder.loadTexts: e1UAS.setDescription('Unavailable Seconds')
soTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7), )
if mibBuilder.loadTexts: soTable.setStatus('mandatory')
if mibBuilder.loadTexts: soTable.setDescription('SOLIM/DELIM Status Table')
soEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1), ).setIndexNames((0, "DV2-MIB", "soLinkNo"))
if mibBuilder.loadTexts: soEntry.setStatus('mandatory')
soLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: soLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: soLinkNo.setDescription('Link number - this is the instance.')
soLimType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("solim-v0", 1), ("solim-v1", 2), ("solim-v2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: soLimType.setStatus('mandatory')
if mibBuilder.loadTexts: soLimType.setDescription('Solim version')
soTimingRef = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12, 13, 14))).clone(namedValues=NamedValues(("system", 11), ("local-oscillator", 12), ("local-link0", 13), ("local-link1", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: soTimingRef.setStatus('mandatory')
if mibBuilder.loadTexts: soTimingRef.setDescription('Local timing reference')
soTxEn0 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: soTxEn0.setStatus('mandatory')
if mibBuilder.loadTexts: soTxEn0.setDescription('Link 0 Tx Enable (v2 and above)')
soTxEn1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: soTxEn1.setStatus('mandatory')
if mibBuilder.loadTexts: soTxEn1.setDescription('Link 1 Tx Enable (v2 and above)')
soLimDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pre-system-timing", 1), ("dual-intermediate-reach", 2), ("single-intermediate-reach", 3), ("dual-short-reach", 4), ("single-short-reach", 5), ("dual-long-reach", 6), ("single-long-reach", 7), ("dual-hybrid-intermediate", 8), ("dual-hybrid-long", 9), ("dual-electrical", 10))).clone('dual-intermediate-reach')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: soLimDesc.setStatus('mandatory')
if mibBuilder.loadTexts: soLimDesc.setDescription('LIM Description')
soReconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: soReconfig.setStatus('mandatory')
if mibBuilder.loadTexts: soReconfig.setDescription('Reconfigure Link')
ds1V2Table = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9), )
if mibBuilder.loadTexts: ds1V2Table.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2Table.setDescription('ds1 V2 Status Table')
ds1V2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1), ).setIndexNames((0, "DV2-MIB", "ds1V2LinkNo"))
if mibBuilder.loadTexts: ds1V2Entry.setStatus('mandatory')
ds1V2LinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2LinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2LinkNo.setDescription('Link number - this is the instance.')
ds1V2LimType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ds1-dual", 1), ("ds1-quad", 2), ("ds1-dual-signaling", 3), ("ds1-quad-signaling", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2LimType.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2LimType.setDescription('LIM I.D. type')
ds1V2TxLineLn = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("feet-0-110", 1), ("feet-110-220", 2), ("feet-220-330", 3), ("feet-330-440", 4), ("feet-440-550", 5), ("feet-550-660", 6), ("more-than-655-feet", 7), ("square", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1V2TxLineLn.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2TxLineLn.setDescription('Select txmt line length.')
ds1V2FRMRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("sf", 2), ("t1dm", 3), ("slc96", 4), ("esf4k", 5), ("esf2K-3", 6), ("esf2k-1", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1V2FRMRMode.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2FRMRMode.setDescription('ds1V2 Framing options.')
ds1V2Coding = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("b8zs", 2), ("ami", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1V2Coding.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2Coding.setDescription('If Line Coding is yes(1), AMI is selected')
ds1V2Lb = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("line-lpbk", 2), ("payload-lpbk", 3), ("digital-lpbk", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1V2Lb.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2Lb.setDescription('Loopback Selection')
ds1V2TxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1V2TxAIS.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2TxAIS.setDescription('Transmit the AIS State.')
ds1V2GappedClk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1V2GappedClk.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2GappedClk.setDescription('Select 1,(yes) for Circuit-emulation.')
ds1V2TxClkSel = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("system", 11), ("local-oscillator", 12), ("local-link0", 13), ("local-link1", 14), ("local-link2", 15), ("local-link3", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1V2TxClkSel.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2TxClkSel.setDescription('Transmit clock select.')
ds1V2ClrStats = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1V2ClrStats.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2ClrStats.setDescription('Clear Counters')
ds1V2Reconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1V2Reconfig.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2Reconfig.setDescription('Reconfigure Link')
ds1V2LOSDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2LOSDefect.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2LOSDefect.setDescription('Loss Of Signal Defect')
ds1V2OOFDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2OOFDefect.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2OOFDefect.setDescription('Receive Out Of Frame')
ds1V2AISDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2AISDefect.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2AISDefect.setDescription('Receive AIS Defect')
ds1V2FerfDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2FerfDefect.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2FerfDefect.setDescription('Receive FERF(Yellow) Defect')
ds1V2BERDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2BERDefect.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2BERDefect.setDescription('Excessive Bit Error Rate Defect')
ds1V2LOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2LOSAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2LOSAlarm.setDescription('Loss Of Signal Integrated Alarm')
ds1V2LOFAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2LOFAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2LOFAlarm.setDescription('Loss Of Frame Integrated Alarm')
ds1V2AISAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2AISAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2AISAlarm.setDescription('AIS Integrated Alarm')
ds1V2FerfAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2FerfAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2FerfAlarm.setDescription('Yellow Integrated Alarm')
ds1V2BERAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2BERAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2BERAlarm.setDescription('Excessive Bit Error Rate Alarm')
ds1V2FerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2FerCount.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2FerCount.setDescription('The framing bit error count for this link.')
ds1V2BeeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2BeeCount.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2BeeCount.setDescription('The bit error count for this link.')
ds1V2OCfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2OCfCount.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2OCfCount.setDescription('The Out-of-frame or Change of Frame alignment error count for this link.')
ds1V2LcvCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2LcvCount.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2LcvCount.setDescription('The DS1 Line code violations count for this link.')
ds1V2LineES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2LineES.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2LineES.setDescription('Line Errored Seconds')
ds1V2LineSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2LineSES.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2LineSES.setDescription('Line Severely Errored Seconds')
ds1V2ES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2ES.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2ES.setDescription('Errored Seconds')
ds1V2SES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2SES.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2SES.setDescription('Severely Errored Seconds')
ds1V2AISS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2AISS.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2AISS.setDescription('AIS Seconds')
ds1V2UAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2UAS.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2UAS.setDescription('Unavailable Seconds')
ds1V2ExBER = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2ExBER.setStatus('mandatory')
if mibBuilder.loadTexts: ds1V2ExBER.setDescription('Excessive Bit Error Rate')
dlimLpbkTimeout = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlimLpbkTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: dlimLpbkTimeout.setDescription('This parameter is used to set the dlim loopback timeout in minutes.')
ds3V2Table = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11), )
if mibBuilder.loadTexts: ds3V2Table.setStatus('mandatory')
if mibBuilder.loadTexts: ds3V2Table.setDescription('ds3-2C Config/Status Table')
ds3V2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1), ).setIndexNames((0, "DV2-MIB", "ds3V2LinkNo"))
if mibBuilder.loadTexts: ds3V2Entry.setStatus('mandatory')
ds3V2LinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3V2LinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: ds3V2LinkNo.setDescription('Link number - this is the instance.')
ds3V2Lb = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 3))).clone(namedValues=NamedValues(("none", 2), ("line-lpbk", 1), ("local-lpbk", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3V2Lb.setStatus('mandatory')
if mibBuilder.loadTexts: ds3V2Lb.setDescription('Loopback Active')
ds3V2LimType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ds3-2c", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3V2LimType.setStatus('mandatory')
if mibBuilder.loadTexts: ds3V2LimType.setDescription('LIM I.D. type')
ds3V2LimOK = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3V2LimOK.setStatus('mandatory')
if mibBuilder.loadTexts: ds3V2LimOK.setDescription('LIM OK.')
ds3V2TxLBO = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3V2TxLBO.setStatus('mandatory')
if mibBuilder.loadTexts: ds3V2TxLBO.setDescription('Transmit line build-out,(1)for short cables.')
ds3V2TxClkSel = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12, 17, 18))).clone(namedValues=NamedValues(("system", 11), ("local-oscillator", 12), ("link0-plcp", 17), ("link1-plcp", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3V2TxClkSel.setStatus('mandatory')
if mibBuilder.loadTexts: ds3V2TxClkSel.setDescription('Transmit clock select.')
ds3V2LOSDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3V2LOSDefect.setStatus('mandatory')
if mibBuilder.loadTexts: ds3V2LOSDefect.setDescription('Loss Of Signal Defect')
ds3V2LOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3V2LOSAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ds3V2LOSAlarm.setDescription('Loss Of Signal Alarm')
ds3V2Reconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3V2Reconfig.setStatus('mandatory')
if mibBuilder.loadTexts: ds3V2Reconfig.setDescription('Reconfigure Link')
e3Table = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12), )
if mibBuilder.loadTexts: e3Table.setStatus('mandatory')
if mibBuilder.loadTexts: e3Table.setDescription('E3-2C Config/Status Table')
e3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1), ).setIndexNames((0, "DV2-MIB", "e3LinkNo"))
if mibBuilder.loadTexts: e3Entry.setStatus('mandatory')
e3LinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3LinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: e3LinkNo.setDescription('Link number - this is the instance.')
e3LimType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("e3-2c", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3LimType.setStatus('mandatory')
if mibBuilder.loadTexts: e3LimType.setDescription('LIM I.D. type')
e3LimOK = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3LimOK.setStatus('mandatory')
if mibBuilder.loadTexts: e3LimOK.setDescription('LIM OK.')
e3EQSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("set-0-to-3p5-dB", 2), ("set-2p6-to-8-dB", 3), ("set-6-to-9p9-dB", 4), ("set-8p6-to-13p2-dB", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3EQSelect.setStatus('mandatory')
if mibBuilder.loadTexts: e3EQSelect.setDescription('Rx Line Equalization select.')
e3Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2))).clone(namedValues=NamedValues(("none", 3), ("line-lpbk", 1), ("local-lpbk", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3Loopback.setStatus('mandatory')
if mibBuilder.loadTexts: e3Loopback.setDescription('Loopback LIU.')
e3TxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3TxAIS.setStatus('mandatory')
if mibBuilder.loadTexts: e3TxAIS.setDescription('Transmit AIS.')
e3TxClkSel = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12, 13, 14))).clone(namedValues=NamedValues(("system", 11), ("local-oscillator", 12), ("local-link0", 13), ("local-link1", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3TxClkSel.setStatus('mandatory')
if mibBuilder.loadTexts: e3TxClkSel.setDescription('Transmit clock select.')
e3LOSDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3LOSDefect.setStatus('mandatory')
if mibBuilder.loadTexts: e3LOSDefect.setDescription('Loss Of Signal Defect')
e3LOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3LOSAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: e3LOSAlarm.setDescription('Loss Of Signal Alarm')
e3Reconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3Reconfig.setStatus('mandatory')
if mibBuilder.loadTexts: e3Reconfig.setDescription('Reconfigure Link')
hssiTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13), )
if mibBuilder.loadTexts: hssiTable.setStatus('mandatory')
if mibBuilder.loadTexts: hssiTable.setDescription('hssi Status Table')
hssiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1), ).setIndexNames((0, "DV2-MIB", "hssiLinkNo"))
if mibBuilder.loadTexts: hssiEntry.setStatus('mandatory')
hssiLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hssiLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: hssiLinkNo.setDescription('Link number - this is the instance.')
hssiLocalLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("line", 2), ("internal", 3), ("bilateral", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hssiLocalLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: hssiLocalLoopback.setDescription('Local Loopback.')
hssiRemoteLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("line", 2), ("digital", 3), ("remote-line", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hssiRemoteLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: hssiRemoteLoopback.setDescription('Remote Loopback.')
hssiReconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hssiReconfig.setStatus('mandatory')
if mibBuilder.loadTexts: hssiReconfig.setDescription('Reconfigure Link')
hssiType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hssiType.setStatus('mandatory')
if mibBuilder.loadTexts: hssiType.setDescription('Type of link.')
hssiLimType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("hssi-v1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hssiLimType.setStatus('mandatory')
if mibBuilder.loadTexts: hssiLimType.setDescription('LIM Version')
hssiClockSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("from-dce", 2), ("local-45Mbps", 3), ("local-34Mbps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hssiClockSrc.setStatus('mandatory')
if mibBuilder.loadTexts: hssiClockSrc.setDescription('Source of clock. Note that for a DCE, from-DCE(4) should not be selected.')
hssiCtrTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hssiCtrTestMode.setStatus('mandatory')
if mibBuilder.loadTexts: hssiCtrTestMode.setDescription('Test Mode.')
hssiLinkReady = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hssiLinkReady.setStatus('mandatory')
if mibBuilder.loadTexts: hssiLinkReady.setDescription('Set to yes(1) if link is ready.')
hssiRemoteReady = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hssiRemoteReady.setStatus('mandatory')
if mibBuilder.loadTexts: hssiRemoteReady.setDescription('Set to yes(1) if remote link is ready.')
hssiLOSDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hssiLOSDefect.setStatus('mandatory')
if mibBuilder.loadTexts: hssiLOSDefect.setDescription('Loss Of Signal Defect')
hssiLOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hssiLOSAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: hssiLOSAlarm.setDescription('Loss Of Signal Alarm')
j2Table = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14), )
if mibBuilder.loadTexts: j2Table.setStatus('mandatory')
if mibBuilder.loadTexts: j2Table.setDescription('J2 Config/Status Table')
j2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1), ).setIndexNames((0, "DV2-MIB", "j2LinkNo"))
if mibBuilder.loadTexts: j2Entry.setStatus('mandatory')
j2LinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2LinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: j2LinkNo.setDescription('Link number - this is the instance.')
j2FirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2FirmwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: j2FirmwareRev.setDescription('Firmware Revision')
j2TxEq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low-dB", 1), ("high-dB", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: j2TxEq.setStatus('mandatory')
if mibBuilder.loadTexts: j2TxEq.setDescription('Select equalizer setting')
j2Lb = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("liu-line", 2), ("j2-Framer-Payload", 3), ("j2-Framer-Digital", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: j2Lb.setStatus('mandatory')
if mibBuilder.loadTexts: j2Lb.setDescription('Loopback Selection')
j2TxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: j2TxAIS.setStatus('mandatory')
if mibBuilder.loadTexts: j2TxAIS.setDescription('Transmit the AIS State.')
j2TxClkSel = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12, 13, 14))).clone(namedValues=NamedValues(("system-bus", 11), ("int-oscillator", 12), ("link-0", 13), ("link-1", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: j2TxClkSel.setStatus('mandatory')
if mibBuilder.loadTexts: j2TxClkSel.setDescription('Transmit clock select.')
j2ClrStats = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: j2ClrStats.setStatus('mandatory')
if mibBuilder.loadTexts: j2ClrStats.setDescription('Clear Counters')
j2Reconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: j2Reconfig.setStatus('mandatory')
if mibBuilder.loadTexts: j2Reconfig.setDescription('Reconfigure Link')
j2TS97TS98 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 12), Hex().clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: j2TS97TS98.setStatus('mandatory')
if mibBuilder.loadTexts: j2TS97TS98.setDescription('Set the value (in hex) of the bytes to be transmitted in time slots 97 and 98 of the J2 frame.')
j2QualClock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("low-Primary", 1), ("low-Secondary", 2), ("high-Primary", 3), ("high-Secondary", 4), ("local-Oscillator", 5))).clone('low-Primary')).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2QualClock.setStatus('mandatory')
if mibBuilder.loadTexts: j2QualClock.setDescription('Quality of Clock Selection')
j2LOSDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2LOSDefect.setStatus('mandatory')
if mibBuilder.loadTexts: j2LOSDefect.setDescription('Loss Of Signal Defect')
j2OOFDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2OOFDefect.setStatus('mandatory')
if mibBuilder.loadTexts: j2OOFDefect.setDescription('Receive Out Of Frame')
j2AISDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2AISDefect.setStatus('mandatory')
if mibBuilder.loadTexts: j2AISDefect.setDescription('Receive AIS Defect')
j2RAlmDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2RAlmDefect.setStatus('mandatory')
if mibBuilder.loadTexts: j2RAlmDefect.setDescription('Remote Alarm Defect')
j2LOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2LOSAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: j2LOSAlarm.setDescription('Loss Of Signal Integrated Alarm')
j2LOFAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2LOFAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: j2LOFAlarm.setDescription('Loss Of Frame Integrated Alarm')
j2AISAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2AISAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: j2AISAlarm.setDescription('AIS Integrated Alarm')
j2RAlmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2RAlmAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: j2RAlmAlarm.setDescription('Remote Alarm Condition')
j2FerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2FerCount.setStatus('mandatory')
if mibBuilder.loadTexts: j2FerCount.setDescription('The framing bit error count for this link.')
j2RAlmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2RAlmCount.setStatus('mandatory')
if mibBuilder.loadTexts: j2RAlmCount.setDescription('The Remote Alarm error count for this link.')
j2LcvCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2LcvCount.setStatus('mandatory')
if mibBuilder.loadTexts: j2LcvCount.setDescription('The J2 Line code violations count for this link.')
j2CrcCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2CrcCount.setStatus('mandatory')
if mibBuilder.loadTexts: j2CrcCount.setDescription('Number of J2 muliframes received with CRC errors')
j2LineES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2LineES.setStatus('mandatory')
if mibBuilder.loadTexts: j2LineES.setDescription('Line Errored Seconds')
j2LineSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2LineSES.setStatus('mandatory')
if mibBuilder.loadTexts: j2LineSES.setDescription('Line Severely Errored Seconds')
j2ES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2ES.setStatus('mandatory')
if mibBuilder.loadTexts: j2ES.setDescription('Errored Seconds')
j2SES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2SES.setStatus('mandatory')
if mibBuilder.loadTexts: j2SES.setDescription('Severely Errored Seconds')
j2AISS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2AISS.setStatus('mandatory')
if mibBuilder.loadTexts: j2AISS.setDescription('AIS Seconds')
j2UAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2UAS.setStatus('mandatory')
if mibBuilder.loadTexts: j2UAS.setDescription('Unavailable Seconds')
scfTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15), )
if mibBuilder.loadTexts: scfTable.setStatus('mandatory')
if mibBuilder.loadTexts: scfTable.setDescription('SCF Config/Status Table')
scfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1), ).setIndexNames((0, "DV2-MIB", "scfLinkNo"))
if mibBuilder.loadTexts: scfEntry.setStatus('mandatory')
scfLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: scfLinkNo.setDescription('Link number - this is the instance.')
scfLimType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("si-dual", 1), ("si-quad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLimType.setStatus('mandatory')
if mibBuilder.loadTexts: scfLimType.setDescription('LIM I.D. type')
scfFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfFirmwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: scfFirmwareRev.setDescription('Firmware Revision')
scfQualClock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("low-Primary", 1), ("low-Secondary", 2), ("high-Primary", 3), ("high-Secondary", 4), ("local-Oscillator", 5))).clone('low-Primary')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfQualClock.setStatus('mandatory')
if mibBuilder.loadTexts: scfQualClock.setDescription('Quality of Clock Selection')
scfContr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ce-hpg-hc2", 1), ("ms-ms2", 2))).clone('ce-hpg-hc2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scfContr.setStatus('mandatory')
if mibBuilder.loadTexts: scfContr.setDescription('Controller Selection')
scfDCEDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2))).clone('dce')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scfDCEDTE.setStatus('mandatory')
if mibBuilder.loadTexts: scfDCEDTE.setDescription('DCE or DTE Selection')
scfLb = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("line", 2), ("link", 3), ("digital", 4))).clone('line')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scfLb.setStatus('mandatory')
if mibBuilder.loadTexts: scfLb.setDescription('Loopback Selection')
scfLineTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scfLineTiming.setStatus('mandatory')
if mibBuilder.loadTexts: scfLineTiming.setDescription('Receive Line Timing Selection')
scfDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42))).clone(namedValues=NamedValues(("rate-2x4", 1), ("rate-4x8", 2), ("rate-7x2", 3), ("rate-9x6", 4), ("rate-14x4", 5), ("rate-16x0", 6), ("rate-16x6", 7), ("rate-19x2", 8), ("rate-28x8", 9), ("rate-32x0", 10), ("rate-38x4", 11), ("rate-48x0", 12), ("rate-50x0", 13), ("rate-56x0", 14), ("rate-57x6", 15), ("rate-64x0", 16), ("rate-76x8", 17), ("rate-96x0", 18), ("rate-112x0", 19), ("rate-115x2", 20), ("rate-128x0", 21), ("rate-144x0", 22), ("rate-153x6", 23), ("rate-192x0", 24), ("rate-224x0", 25), ("rate-230x0", 26), ("rate-256x0", 27), ("rate-288x0", 28), ("rate-307x2", 29), ("rate-320x0", 30), ("rate-384x0", 31), ("rate-448x0", 32), ("rate-512x0", 33), ("rate-768x0", 34), ("rate-1024x0", 35), ("rate-1536x0", 36), ("rate-1920x0", 37), ("rate-2048x0", 38), ("rate-3072x0", 39), ("rate-4096x0", 40), ("rate-6144x0", 41), ("rate-8192x0", 42))).clone('rate-2x4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scfDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: scfDataRate.setDescription('Data Rate Selection in K Bit/Sec')
scfClkSel = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("system", 1), ("localOscillator", 2))).clone('system')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scfClkSel.setStatus('mandatory')
if mibBuilder.loadTexts: scfClkSel.setDescription('Clock select')
scfInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("x21", 1), ("rs449", 2), ("eia530-A", 3), ("v35", 4))).clone('x21')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scfInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: scfInterfaceType.setDescription('Interface type selection')
scfReconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scfReconfig.setStatus('mandatory')
if mibBuilder.loadTexts: scfReconfig.setDescription('Reconfigure Link')
scfLOSDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLOSDefect.setStatus('mandatory')
if mibBuilder.loadTexts: scfLOSDefect.setDescription('Loss Of Signal Defect')
scfLOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLOSAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: scfLOSAlarm.setDescription('Loss Of Signal Integrated Alarm')
billAvailable = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: billAvailable.setDescription('Number of billing records available.')
billingTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3), )
if mibBuilder.loadTexts: billingTable.setStatus('mandatory')
if mibBuilder.loadTexts: billingTable.setDescription('This table is used to contain billing records.')
billingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1), ).setIndexNames((0, "DV2-MIB", "billSeq"))
if mibBuilder.loadTexts: billingEntry.setStatus('mandatory')
billSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: billSeq.setStatus('mandatory')
if mibBuilder.loadTexts: billSeq.setDescription('billing record sequence number.')
billSvpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 2), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billSvpi.setStatus('mandatory')
if mibBuilder.loadTexts: billSvpi.setDescription('Source Virtual Path Identifier for VC.')
billSvci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 3), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billSvci.setStatus('mandatory')
if mibBuilder.loadTexts: billSvci.setDescription('Source Virtual Circuit Identifier for VC.')
billDvpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 4), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billDvpi.setStatus('mandatory')
if mibBuilder.loadTexts: billDvpi.setDescription('Destination Virtual Path Identifier for VC.')
billDvci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 5), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billDvci.setStatus('mandatory')
if mibBuilder.loadTexts: billDvci.setDescription('Destination Virtual Circuit Identifier for VC.')
billSslot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billSslot.setStatus('mandatory')
if mibBuilder.loadTexts: billSslot.setDescription('Source slot for VC.')
billSlink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billSlink.setStatus('mandatory')
if mibBuilder.loadTexts: billSlink.setDescription('Source link for VC.')
billDslot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billDslot.setStatus('mandatory')
if mibBuilder.loadTexts: billDslot.setDescription('Destination slot for VC.')
billDlink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billDlink.setStatus('mandatory')
if mibBuilder.loadTexts: billDlink.setDescription('Destination link for VC.')
billCalled = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 10), E164()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCalled.setStatus('mandatory')
if mibBuilder.loadTexts: billCalled.setDescription('Called or Destination E.164 address.')
billCalledSub = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 11), E164SUB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCalledSub.setStatus('mandatory')
if mibBuilder.loadTexts: billCalledSub.setDescription('Called or Destination E.164 sub-address.')
billCalling = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 12), E164()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCalling.setStatus('mandatory')
if mibBuilder.loadTexts: billCalling.setDescription('Calling or Originating E.164 address.')
billCallingSub = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 13), E164SUB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCallingSub.setStatus('mandatory')
if mibBuilder.loadTexts: billCallingSub.setDescription('Calling or Originating E.164 sub-address.')
billCellInC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCellInC.setStatus('mandatory')
if mibBuilder.loadTexts: billCellInC.setDescription('Cell in overflows count.')
billCellIn = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCellIn.setStatus('mandatory')
if mibBuilder.loadTexts: billCellIn.setDescription('Cell in count.')
billFrameIn = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billFrameIn.setStatus('mandatory')
if mibBuilder.loadTexts: billFrameIn.setDescription('Frame in count.')
billByteInC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billByteInC.setStatus('mandatory')
if mibBuilder.loadTexts: billByteInC.setDescription('Byte in overflows count.')
billByteIn = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billByteIn.setStatus('mandatory')
if mibBuilder.loadTexts: billByteIn.setDescription('Byte in count.')
billCellOutC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCellOutC.setStatus('mandatory')
if mibBuilder.loadTexts: billCellOutC.setDescription('Cell out overflows count.')
billCellOut = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCellOut.setStatus('mandatory')
if mibBuilder.loadTexts: billCellOut.setDescription('Cell out count.')
billFrameOut = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billFrameOut.setStatus('mandatory')
if mibBuilder.loadTexts: billFrameOut.setDescription('Frame out count.')
billByteOutC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billByteOutC.setStatus('mandatory')
if mibBuilder.loadTexts: billByteOutC.setDescription('Byte out overflows count.')
billByteOut = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billByteOut.setStatus('mandatory')
if mibBuilder.loadTexts: billByteOut.setDescription('Byte out count.')
billCause = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCause.setStatus('mandatory')
if mibBuilder.loadTexts: billCause.setDescription('Clear cause code.')
billValid = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("block-invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billValid.setStatus('mandatory')
if mibBuilder.loadTexts: billValid.setDescription('Deletes billing record Entry by setting to invalid(2).')
billCLP1OutC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCLP1OutC.setStatus('mandatory')
if mibBuilder.loadTexts: billCLP1OutC.setDescription('CLP1 out overflows count.')
billCLP1Out = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCLP1Out.setStatus('mandatory')
if mibBuilder.loadTexts: billCLP1Out.setDescription('CLP1 out count.')
billTag = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billTag.setStatus('mandatory')
if mibBuilder.loadTexts: billTag.setDescription('This identifies the billable SVC.')
billStartM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billStartM2.setStatus('mandatory')
if mibBuilder.loadTexts: billStartM2.setDescription('Call start date-time.')
billEndM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 33), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billEndM2.setStatus('mandatory')
if mibBuilder.loadTexts: billEndM2.setDescription('Call end date-time.')
billFwdPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billFwdPCR.setStatus('mandatory')
if mibBuilder.loadTexts: billFwdPCR.setDescription('SVC Forward Peak Cell Rate.')
billBwdPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billBwdPCR.setStatus('mandatory')
if mibBuilder.loadTexts: billBwdPCR.setDescription('SVC Backward Peak Cell Rate.')
billFwdSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billFwdSCR.setStatus('mandatory')
if mibBuilder.loadTexts: billFwdSCR.setDescription('SVC Forward Sustained Cell Rate.')
billBwdSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billBwdSCR.setStatus('mandatory')
if mibBuilder.loadTexts: billBwdSCR.setDescription('SVC Backward Sustained Cell Rate.')
billFwdMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billFwdMBS.setStatus('mandatory')
if mibBuilder.loadTexts: billFwdMBS.setDescription('SVC Forward Maximum Burst Size.')
billBwdMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billBwdMBS.setStatus('mandatory')
if mibBuilder.loadTexts: billBwdMBS.setDescription('SVC Backward Maximum Burst Size.')
billFwdQOS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("qos1", 1), ("qos2", 2), ("qos3", 3), ("qos4", 4), ("abr", 6), ("cbr", 7), ("vbrRt", 8), ("vbrNrt", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: billFwdQOS.setStatus('mandatory')
if mibBuilder.loadTexts: billFwdQOS.setDescription('Forward Quality of Service.')
billBwdQOS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("qos1", 1), ("qos2", 2), ("qos3", 3), ("qos4", 4), ("abr", 6), ("cbr", 7), ("vbrRt", 8), ("vbrNrt", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: billBwdQOS.setStatus('mandatory')
if mibBuilder.loadTexts: billBwdQOS.setDescription('Backward Quality of Service.')
billingControl = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("stop-billing-process", 1), ("start-SPVC-billing-process", 2), ("start-PVC-billing-process", 3), ("start-SPVC-and-PVC-billing", 4), ("delete-all-billing-records", 5), ("start-SVC-billing-process", 6), ("start-SVC-and-PVC-billing", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billingControl.setStatus('mandatory')
if mibBuilder.loadTexts: billingControl.setDescription('This object is set to start SPVC/PVC process.')
billLost = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billLost.setStatus('mandatory')
if mibBuilder.loadTexts: billLost.setDescription('Lost of billing record count.')
billLinks = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("link0", 1), ("link1", 2), ("all", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billLinks.setStatus('mandatory')
if mibBuilder.loadTexts: billLinks.setDescription('This value is bitwise billing link control.')
billTrapControl = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billTrapControl.setStatus('mandatory')
if mibBuilder.loadTexts: billTrapControl.setDescription('This object is set to enable or disable billing traps')
billDirControl = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uni-direction", 1), ("bi-direction", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billDirControl.setStatus('mandatory')
if mibBuilder.loadTexts: billDirControl.setDescription('This object is selected for uni-direction billing or bi-direction billing.')
billingInterval = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("period15min", 1), ("period30min", 2), ("period60min", 3), ("period120min", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: billingInterval.setDescription('This parameter is used to set the billing period in 15/30/60/120 minute intervals')
qeDocMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocMacAddress.setDescription('MAC address of Ethernet ports.')
qeDocTunRetryPeriod = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunRetryPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunRetryPeriod.setDescription('Number of seconds between retries of tunnel establishment.')
qeDocTunIdlePeriod = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunIdlePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunIdlePeriod.setDescription('Number of seconds to wait without activity before clearing tunnel call.')
qeDocBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4), )
if mibBuilder.loadTexts: qeDocBridgeTable.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocBridgeTable.setDescription('This table is used to statistics and control for the bridges.')
qeDocBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4, 1), ).setIndexNames((0, "DV2-MIB", "qeDocBridgeLinkNo"))
if mibBuilder.loadTexts: qeDocBridgeEntry.setStatus('mandatory')
qeDocBridgeLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocBridgeLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocBridgeLinkNo.setDescription('Link number.')
qeDocBridgeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocBridgeEnable.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocBridgeEnable.setDescription('Set to yes(1) to enable MAC bridging.')
qeDocBridgeLink0Eligible = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocBridgeLink0Eligible.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocBridgeLink0Eligible.setDescription('Link 0 eligible for frames')
qeDocBridgeLink1Eligible = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocBridgeLink1Eligible.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocBridgeLink1Eligible.setDescription('Link 1 eligible for frames')
qeDocBridgeLink2Eligible = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocBridgeLink2Eligible.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocBridgeLink2Eligible.setDescription('Link 2 eligible for frames')
qeDocBridgeLink3Eligible = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocBridgeLink3Eligible.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocBridgeLink3Eligible.setDescription('Link 3 eligible for frames')
qeDocTunTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6), )
if mibBuilder.loadTexts: qeDocTunTable.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunTable.setDescription('This table is used to establish and control tunnels set-up using SVCs.')
qeDocTunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1), ).setIndexNames((0, "DV2-MIB", "qeDocTunIndex"))
if mibBuilder.loadTexts: qeDocTunEntry.setStatus('mandatory')
qeDocTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunIndex.setDescription('The tunnel index number.')
qeDocTunName = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunName.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunName.setDescription('Mnemonic name for tunnel.')
qeDocTunType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unused", 1), ("ip", 2), ("mac-bridge", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunType.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunType.setDescription('Specifies the type of tunnel.')
qeDocTunState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("use-pvc", 2), ("use-svc", 3), ("failed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunState.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunState.setDescription('Set to Use pvc(2) if using with a PVC. Set to Use svc(3) if using with a SVC. Set to idle(1) to prevent tunnel being established.')
qeDocTunCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("allocated", 2), ("waccept", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocTunCallState.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunCallState.setDescription('State of tunnel call.')
qeDocTunInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocTunInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunInFrames.setDescription('Received frames count.')
qeDocTunOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocTunOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunOutFrames.setDescription('Transmitted frames count.')
qeDocTunVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 8), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocTunVPI.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunVPI.setDescription('VPI being used for the tunnel.')
qeDocTunVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 9), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocTunVCI.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunVCI.setDescription('VCI being used for the tunnel.')
qeDocTunPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocTunPriority.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunPriority.setDescription('Cell priority bit value.')
qeDocTunSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocTunSlot.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunSlot.setDescription('Target slot for tunnel.')
qeDocTunLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocTunLink.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunLink.setDescription('Target link for tunnel.')
qeDocTunRemNet = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunRemNet.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunRemNet.setDescription('Remote network address for tunnel.')
qeDocTunRemMask = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunRemMask.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunRemMask.setDescription('Mask for remote network.')
qeDocTunLocNet = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunLocNet.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunLocNet.setDescription('Local network address for tunnel.')
qeDocTunLocMask = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunLocMask.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunLocMask.setDescription('Mask for local network.')
qeDocTunRemStartSkt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunRemStartSkt.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunRemStartSkt.setDescription('Specifies start of socket range from remote that is allowed/barred from access to tunnel.')
qeDocTunRemEndSkt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunRemEndSkt.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunRemEndSkt.setDescription('Specifies end of socket range from remote that is allowed/barred from access to tunnel.')
qeDocTunLocStartSkt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunLocStartSkt.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunLocStartSkt.setDescription('Specifies start of socket range from local that is allowed/barred from access to tunnel.')
qeDocTunLocEndSkt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunLocEndSkt.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunLocEndSkt.setDescription('Specifies end of socket range from local that is allowed/barred from access to tunnel.')
qeDocTunSktType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 3, 2, 1))).clone(namedValues=NamedValues(("tcpInc-udpInc", 4), ("tcpInc-udpExc", 3), ("tcpExc-udpInc", 2), ("tcpExc-udpExc", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunSktType.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunSktType.setDescription('Specifies the protocol type and whether to include or exclude frames with socket number in the specified range.')
qeDocTunDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 22), E164()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunDestAddress.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunDestAddress.setDescription('Destination address for tunnel. This is only required for SVC tunnels.')
qeDocTunDestSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 23), E164SUB()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunDestSubAddress.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunDestSubAddress.setDescription('Destination sub-address for tunnel. This is only required for SVC tunnels.')
qeDocTunLink0Eligible = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunLink0Eligible.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunLink0Eligible.setDescription('Link 0 eligible for frames')
qeDocTunLink1Eligible = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunLink1Eligible.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunLink1Eligible.setDescription('Link 1 eligible for frames')
qeDocTunLink2Eligible = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunLink2Eligible.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunLink2Eligible.setDescription('Link 2 eligible for frames')
qeDocTunLink3Eligible = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunLink3Eligible.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunLink3Eligible.setDescription('Link 3 eligible for frames')
qeDocTunValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunValidity.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunValidity.setDescription('Setting to invalid(2) removes the row from the table.')
qeDocTunRfc1483Encap = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunRfc1483Encap.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunRfc1483Encap.setDescription('Setting to yes(1) enable RFC 1483 LLC encapsulation.')
qeDocTunClp = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocTunClp.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocTunClp.setDescription('Cell loss priority bit value.')
qeDocIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocIpAddress.setDescription('The IP address of the QEDOC for management use.')
qeDocIpMask = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocIpMask.setDescription('The mask for management use.')
qeDocIpBCast = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocIpBCast.setStatus('mandatory')
if mibBuilder.loadTexts: qeDocIpBCast.setDescription('The management broadcast address.')
sdhCTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1), )
if mibBuilder.loadTexts: sdhCTable.setStatus('mandatory')
if mibBuilder.loadTexts: sdhCTable.setDescription('This table is used to control sdh/Sonet configuration.')
sdhCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1), ).setIndexNames((0, "DV2-MIB", "sdhCLinkNo"))
if mibBuilder.loadTexts: sdhCEntry.setStatus('mandatory')
sdhCLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhCLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: sdhCLinkNo.setDescription('The link number for this configuration.')
sdhCLinkEnab = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhCLinkEnab.setStatus('mandatory')
if mibBuilder.loadTexts: sdhCLinkEnab.setDescription('Set to yes(1) to enable the link.')
sdhCLoopTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhCLoopTimer.setStatus('mandatory')
if mibBuilder.loadTexts: sdhCLoopTimer.setDescription('Set to yes(1) to enable loop timing for this link.')
sdhCLoopDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhCLoopDiag.setStatus('mandatory')
if mibBuilder.loadTexts: sdhCLoopDiag.setDescription('Set to yes(1) to enable diagnostic loopback.')
sdhCLoopLine = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhCLoopLine.setStatus('mandatory')
if mibBuilder.loadTexts: sdhCLoopLine.setDescription('Set to yes(1) to enable line loopback.')
sdhCScrambler = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhCScrambler.setStatus('mandatory')
if mibBuilder.loadTexts: sdhCScrambler.setDescription('Set to no(2) to disable scramble mode for this link.')
sdhC0x55 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhC0x55.setStatus('mandatory')
if mibBuilder.loadTexts: sdhC0x55.setDescription('If set to no(2) then HCS is XORed with 0x55')
sdhSonetSdh = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhSonetSdh.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSonetSdh.setDescription('If set to sdh(2) then sdh header is used')
sdhClearCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhClearCounts.setStatus('mandatory')
if mibBuilder.loadTexts: sdhClearCounts.setDescription('Clear Error Counts and Performance Parameters')
sdhReconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhReconfig.setStatus('mandatory')
if mibBuilder.loadTexts: sdhReconfig.setDescription('Perform Reconfiguration for Link')
sdhCLpbkTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhCLpbkTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: sdhCLpbkTimeout.setDescription('This parameter is used to set the loopback timeout in minutes.')
sdhStmSts = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oc-3", 1), ("oc-1", 2))).clone('oc-3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhStmSts.setStatus('mandatory')
if mibBuilder.loadTexts: sdhStmSts.setDescription('Set to 155.52(1) for STS-3c/STM-1 format')
sdhAPSOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhAPSOnOff.setStatus('mandatory')
if mibBuilder.loadTexts: sdhAPSOnOff.setDescription('If set to on(2) then sdh APS is used')
sdhCIdleCell = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unassigned", 1), ("idle", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhCIdleCell.setStatus('mandatory')
if mibBuilder.loadTexts: sdhCIdleCell.setDescription('Idle Cell Header Contents')
sdhSTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3), )
if mibBuilder.loadTexts: sdhSTable.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSTable.setDescription('The status table for sdh/SONET.')
sdhSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1), ).setIndexNames((0, "DV2-MIB", "sdhSLinkNo"))
if mibBuilder.loadTexts: sdhSEntry.setStatus('mandatory')
sdhSLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSLinkNo.setDescription('The link number for this status.')
sdhSTXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSTXclock.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSTXclock.setDescription('The state of TX clock for this link.')
sdhSRXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSRXclock.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSRXclock.setDescription('The state of RX clock for this link.')
sdhSSectLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSSectLOS.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSSectLOS.setDescription('The loss of signal indicator.')
sdhSSectOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSSectOOF.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSSectOOF.setDescription('The out of frame indicator.')
sdhSSectLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSSectLOF.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSSectLOF.setDescription('The loss of frame indicator.')
sdhSLineAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineAIS.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSLineAIS.setDescription('Set to yes(1) if Line AIS detected.')
sdhSLineFERF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineFERF.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSLineFERF.setDescription('Set to yes(1) if Line FERF detected.')
sdhSPathAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathAIS.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSPathAIS.setDescription('Set to yes(1) if Alarm Indication Signal detected.')
sdhSPathYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathYellow.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSPathYellow.setDescription('Set to yes(1) if yellow alarm active.')
sdhSPathFERF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathFERF.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSPathFERF.setDescription('Set to yes(1) if Far End Receive Failure detected.')
sdhSPathLOP = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathLOP.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSPathLOP.setDescription('Set to yes(1) if Loss Of Pointer detected.')
sdhSPathLabelMM = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathLabelMM.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSPathLabelMM.setDescription('Set to yes(1) if a Path Label Mismatch is detected')
sdhSExBERDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSExBERDefect.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSExBERDefect.setDescription('Excessive Bit Error Rate Defect')
sdhSPathLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atm", 1), ("non-atm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathLabel.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSPathLabel.setDescription('The Path Label.')
sdhSCellDelState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hunt-or-presync", 1), ("sync", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSCellDelState.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSCellDelState.setDescription('The Cell Delineation State')
sdhSAlarmLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSAlarmLOS.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSAlarmLOS.setDescription('Set to yes(1) if a LOS failure is declared')
sdhSAlarmLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSAlarmLOF.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSAlarmLOF.setDescription('Set to yes(1) if a LOF failure is declared')
sdhSAlarmLineAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSAlarmLineAIS.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSAlarmLineAIS.setDescription('Set to yes(1) if a Line AIS failure is declared')
sdhSAlarmLineRFI = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSAlarmLineRFI.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSAlarmLineRFI.setDescription('Set to yes(1) if a Line Remote Failure Indication (Yellow Alarm) failure is declared')
sdhSAlarmPathAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSAlarmPathAIS.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSAlarmPathAIS.setDescription('Set to yes(1) if a Path AIS failure is declared')
sdhSAlarmPathRFI = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSAlarmPathRFI.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSAlarmPathRFI.setDescription('Set to yes(1) if a Path Remote Failure Indication (Yellow Alarm) failure is declared')
sdhSAlarmLOP = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSAlarmLOP.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSAlarmLOP.setDescription('Set to yes(1) if a LOP failure is declared')
sdhSAlarmPLM = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSAlarmPLM.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSAlarmPLM.setDescription('Set to yes(1) if a Payload Mismatch failure is declared')
sdhSExBERAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSExBERAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSExBERAlarm.setDescription('Excessive Bit Error Rate Alarm')
sdhSCorrHCS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSCorrHCS.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSCorrHCS.setDescription('The correctable HCS errors count.')
sdhSUnCorrHCS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSUnCorrHCS.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSUnCorrHCS.setDescription('The uncorrectable HCS errors count.')
sdhS2Table = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4), )
if mibBuilder.loadTexts: sdhS2Table.setStatus('mandatory')
if mibBuilder.loadTexts: sdhS2Table.setDescription('The second status table for sdh/SONET.')
sdhS2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1), ).setIndexNames((0, "DV2-MIB", "sdhS2LinkNo"))
if mibBuilder.loadTexts: sdhS2Entry.setStatus('mandatory')
sdhS2LinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhS2LinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: sdhS2LinkNo.setDescription('The link number for this status.')
sdhSSectBIP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSSectBIP8.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSSectBIP8.setDescription('Section BIP-8 error count.')
sdhSSectES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSSectES.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSSectES.setDescription('Section Errored Seconds')
sdhSSectSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSSectSES.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSSectSES.setDescription('Section Severely Errored Seconds')
sdhSLineBIP24 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineBIP24.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSLineBIP24.setDescription('Line BIP-24 error count.')
sdhSLineES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineES.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSLineES.setDescription('Line Errored Seconds')
sdhSLineSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineSES.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSLineSES.setDescription('Line Severely Errored Seconds')
sdhSLineUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineUAS.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSLineUAS.setDescription('Line Unavailable Seconds')
sdhSLineFC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineFC.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSLineFC.setDescription('Line Failure Count')
sdhSPathBIP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathBIP8.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSPathBIP8.setDescription('The path BIP-8 count.')
sdhSPathES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathES.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSPathES.setDescription('Path Errored Seconds')
sdhSPathSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathSES.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSPathSES.setDescription('Path Severely Errored Seconds')
sdhSPathUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathUAS.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSPathUAS.setDescription('Path Unavailable Seconds')
sdhSPathFC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathFC.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSPathFC.setDescription('Path Failure Count')
sdhSLineFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineFEBE.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSLineFEBE.setDescription('Far end block errors.')
sdhSLineFarEndES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineFarEndES.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSLineFarEndES.setDescription('Far End Line Errored Seconds')
sdhSLineFarEndSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineFarEndSES.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSLineFarEndSES.setDescription('Far End Line Severely Errored Seconds')
sdhSLineFarEndUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineFarEndUAS.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSLineFarEndUAS.setDescription('Far End Line Unavailable Seconds')
sdhSLineFarEndFC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineFarEndFC.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSLineFarEndFC.setDescription('Far End Line Failure Count')
sdhSPathFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathFEBE.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSPathFEBE.setDescription('The Path Far End Block Error count.')
sdhSPathFarEndES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathFarEndES.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSPathFarEndES.setDescription('Far End Path Errored Second')
sdhSPathFarEndSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathFarEndSES.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSPathFarEndSES.setDescription('Far End Path Severely Errored Seconds')
sdhSPathFarEndUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathFarEndUAS.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSPathFarEndUAS.setDescription('Far End Path Unavailable Seconds')
sdhSPathFarEndFC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathFarEndFC.setStatus('mandatory')
if mibBuilder.loadTexts: sdhSPathFarEndFC.setDescription('Far End Path Failure Count')
pvcResourceTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1), )
if mibBuilder.loadTexts: pvcResourceTable.setStatus('mandatory')
if mibBuilder.loadTexts: pvcResourceTable.setDescription('This table contains information about the resource available for pvcs on each link.')
pvcResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1), ).setIndexNames((0, "DV2-MIB", "pvcSlot"), (0, "DV2-MIB", "pvcLink"))
if mibBuilder.loadTexts: pvcResourceEntry.setStatus('mandatory')
pvcSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcSlot.setStatus('mandatory')
if mibBuilder.loadTexts: pvcSlot.setDescription('The slot number.')
pvcLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcLink.setStatus('mandatory')
if mibBuilder.loadTexts: pvcLink.setDescription('The link number being used for the call.')
pvcVciStart = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 3), VirtualCircuitIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcVciStart.setStatus('mandatory')
if mibBuilder.loadTexts: pvcVciStart.setDescription('Identifies the start of the range of PVC VCI values supported on this link.')
pvcVciEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 4), VirtualCircuitIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcVciEnd.setStatus('mandatory')
if mibBuilder.loadTexts: pvcVciEnd.setDescription('Identifies the end of the range of PVC VCI values supported on this link.')
pvcVpiStart = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 5), VirtualPathIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcVpiStart.setStatus('mandatory')
if mibBuilder.loadTexts: pvcVpiStart.setDescription('Identifies the start of the range of PVC VPI values supported on this link.')
pvcVpiEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 6), VirtualPathIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcVpiEnd.setStatus('mandatory')
if mibBuilder.loadTexts: pvcVpiEnd.setDescription('Identifies the end of the range of PVC VPI values supported on this link.')
pvcVpStart = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 7), VirtualPathIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcVpStart.setStatus('mandatory')
if mibBuilder.loadTexts: pvcVpStart.setDescription('Identifies the start of the range of VPs supported on this link.')
pvcVpEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 8), VirtualPathIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcVpEnd.setStatus('mandatory')
if mibBuilder.loadTexts: pvcVpEnd.setDescription('Identifies the end of the range of VPs supported on this link.')
pvcBackwardCellRateTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBackwardCellRateTotal.setStatus('mandatory')
if mibBuilder.loadTexts: pvcBackwardCellRateTotal.setDescription('The backward total cell rate configured for PVCs on this link. Note that this object is in cells per second (CPS).')
pvcLinkQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uni", 1), ("nni", 2), ("b-ici", 3), ("non-atm-link", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcLinkQoS.setStatus('mandatory')
if mibBuilder.loadTexts: pvcLinkQoS.setDescription('This specifies the type of ATM link.')
pvcMolnVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcMolnVpi.setStatus('mandatory')
if mibBuilder.loadTexts: pvcMolnVpi.setDescription('This is the VPI for the management overlay network.')
pvcMolnVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcMolnVci.setStatus('mandatory')
if mibBuilder.loadTexts: pvcMolnVci.setDescription('This is the VCI for the management overlay network.')
pvcLowPriOverbookFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcLowPriOverbookFactor.setStatus('mandatory')
if mibBuilder.loadTexts: pvcLowPriOverbookFactor.setDescription('This is the percentage of low priority traffic overbook factor.')
pvcTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2), )
if mibBuilder.loadTexts: pvcTable.setStatus('mandatory')
if mibBuilder.loadTexts: pvcTable.setDescription('This table contains information on each PVC.')
pvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1), ).setIndexNames((0, "DV2-MIB", "pvcDSlot"), (0, "DV2-MIB", "pvcDLink"), (0, "DV2-MIB", "pvcDvci"), (0, "DV2-MIB", "pvcDvpi"), (0, "DV2-MIB", "pvcSSlot"), (0, "DV2-MIB", "pvcSLink"), (0, "DV2-MIB", "pvcSvci"), (0, "DV2-MIB", "pvcSvpi"))
if mibBuilder.loadTexts: pvcEntry.setStatus('mandatory')
pvcDSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcDSlot.setStatus('mandatory')
if mibBuilder.loadTexts: pvcDSlot.setDescription('The destination slot for the PVC.')
pvcDLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcDLink.setStatus('mandatory')
if mibBuilder.loadTexts: pvcDLink.setDescription('The destination link for the PVC.')
pvcDvci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 3), VirtualCircuitIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcDvci.setStatus('mandatory')
if mibBuilder.loadTexts: pvcDvci.setDescription('The destination virtual circuit identifier for the PVC.')
pvcDvpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 4), VirtualPathIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcDvpi.setStatus('mandatory')
if mibBuilder.loadTexts: pvcDvpi.setDescription('The destination virtual path identifier for the PVC.')
pvcSSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSSlot.setStatus('mandatory')
if mibBuilder.loadTexts: pvcSSlot.setDescription('The source slot for the PVC.')
pvcSLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSLink.setStatus('mandatory')
if mibBuilder.loadTexts: pvcSLink.setDescription('The source link for the PVC.')
pvcSvci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 7), VirtualCircuitIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSvci.setStatus('mandatory')
if mibBuilder.loadTexts: pvcSvci.setDescription('The source virtual circuit identifier for the PVC.')
pvcSvpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 8), VirtualPathIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSvpi.setStatus('mandatory')
if mibBuilder.loadTexts: pvcSvpi.setDescription('The source virtual path identifier for the PVC.')
pvcForwardPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcForwardPeakCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: pvcForwardPeakCellRate.setDescription('Forward Peak Cell Rate (CPS)')
pvcForwardPeakSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcForwardPeakSize.setStatus('mandatory')
if mibBuilder.loadTexts: pvcForwardPeakSize.setDescription('Forward Peak Bucket Size (Cells)')
pvcForwardPeakMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("clp0-disc", 2), ("clp1-disc", 3), ("clp01-disc", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcForwardPeakMode.setStatus('mandatory')
if mibBuilder.loadTexts: pvcForwardPeakMode.setDescription('Forward Peak Mode')
pvcBackwardPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBackwardPeakCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: pvcBackwardPeakCellRate.setDescription('Backward Peak Cell Rate (CPS)')
pvcBackwardPeakSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBackwardPeakSize.setStatus('mandatory')
if mibBuilder.loadTexts: pvcBackwardPeakSize.setDescription('Backward Peak Bucket Size (Cells)')
pvcBackwardPeakMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("clp0-disc", 2), ("clp1-disc", 3), ("clp01-disc", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBackwardPeakMode.setStatus('mandatory')
if mibBuilder.loadTexts: pvcBackwardPeakMode.setDescription('Backward Peak Mode')
pvcForwardSustainedCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcForwardSustainedCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: pvcForwardSustainedCellRate.setDescription('Forward Sustained Cell Rate (CPS)')
pvcForwardSustainedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcForwardSustainedSize.setStatus('mandatory')
if mibBuilder.loadTexts: pvcForwardSustainedSize.setDescription('Forward Sustained Bucket Size (Cells)')
pvcForwardSustainedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 8))).clone(namedValues=NamedValues(("off", 1), ("clp0-disc", 2), ("clp1-disc", 3), ("clp01-disc", 4), ("clp0-tag", 6), ("clp01-tag", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcForwardSustainedMode.setStatus('mandatory')
if mibBuilder.loadTexts: pvcForwardSustainedMode.setDescription('Forward Sustained Mode')
pvcBackwardSustainedCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBackwardSustainedCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: pvcBackwardSustainedCellRate.setDescription('Backward Sustained Cell Rate (CPS)')
pvcBackwardSustainedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBackwardSustainedSize.setStatus('mandatory')
if mibBuilder.loadTexts: pvcBackwardSustainedSize.setDescription('Backward Sustained Bucket Size (Cells)')
pvcBackwardSustainedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 8))).clone(namedValues=NamedValues(("off", 1), ("clp0-disc", 2), ("clp1-disc", 3), ("clp01-disc", 4), ("clp0-tag", 6), ("clp01-tag", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBackwardSustainedMode.setStatus('mandatory')
if mibBuilder.loadTexts: pvcBackwardSustainedMode.setDescription('Backward Sustained Mode')
pvcAuxForwardPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxForwardPeakCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: pvcAuxForwardPeakCellRate.setDescription('Auxiliary Forward Peak Cell Rate (CPS)')
pvcAuxForwardPeakSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxForwardPeakSize.setStatus('mandatory')
if mibBuilder.loadTexts: pvcAuxForwardPeakSize.setDescription('Auxiliary Forward Peak Bucket Size (Cells)')
pvcAuxForwardPeakMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("clp0-disc", 2), ("clp1-disc", 3), ("clp01-disc", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxForwardPeakMode.setStatus('mandatory')
if mibBuilder.loadTexts: pvcAuxForwardPeakMode.setDescription('Auxiliary Forward Peak Mode')
pvcAuxBackwardPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxBackwardPeakCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: pvcAuxBackwardPeakCellRate.setDescription('Auxiliary Backward Peak Cell Rate (CPS)')
pvcAuxBackwardPeakSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxBackwardPeakSize.setStatus('mandatory')
if mibBuilder.loadTexts: pvcAuxBackwardPeakSize.setDescription('Auxiliary Backward Peak Bucket Size (Cells)')
pvcAuxBackwardPeakMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("clp0-disc", 2), ("clp1-disc", 3), ("clp01-disc", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxBackwardPeakMode.setStatus('mandatory')
if mibBuilder.loadTexts: pvcAuxBackwardPeakMode.setDescription('Auxiliary Backward Peak Mode')
pvcAuxForwardSustainedCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxForwardSustainedCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: pvcAuxForwardSustainedCellRate.setDescription('Auxiliary Forward Sustained Cell Rate (CPS)')
pvcAuxForwardSustainedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxForwardSustainedSize.setStatus('mandatory')
if mibBuilder.loadTexts: pvcAuxForwardSustainedSize.setDescription('Auxiliary Forward Sustained Bucket Size (Cells)')
pvcAuxForwardSustainedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 8))).clone(namedValues=NamedValues(("off", 1), ("clp0-disc", 2), ("clp1-disc", 3), ("clp01-disc", 4), ("clp0-tag", 6), ("clp01-tag", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxForwardSustainedMode.setStatus('mandatory')
if mibBuilder.loadTexts: pvcAuxForwardSustainedMode.setDescription('Auxiliary Forward Sustained Mode')
pvcAuxBackwardSustainedCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxBackwardSustainedCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: pvcAuxBackwardSustainedCellRate.setDescription('Auxiliary Backward Sustained Cell Rate (CPS)')
pvcAuxBackwardSustainedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxBackwardSustainedSize.setStatus('mandatory')
if mibBuilder.loadTexts: pvcAuxBackwardSustainedSize.setDescription('Auxiliary Backward Sustained Bucket Size')
pvcAuxBackwardSustainedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 8))).clone(namedValues=NamedValues(("off", 1), ("clp0-disc", 2), ("clp1-disc", 3), ("clp01-disc", 4), ("clp0-tag", 6), ("clp01-tag", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxBackwardSustainedMode.setStatus('mandatory')
if mibBuilder.loadTexts: pvcAuxBackwardSustainedMode.setDescription('Auxiliary Backward Sustained Mode')
pvcQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cbr", 1), ("vbr-high", 2), ("vbr-med", 3), ("vbr-low", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcQoSClass.setStatus('mandatory')
if mibBuilder.loadTexts: pvcQoSClass.setDescription("CBR(1) is a constant bit rate service, vbr-high(2) is variable bit rate with high priority, vbr-med(3) has low priority, vbr-low(4) is a `best effort' service - low priority and the cells may be discard.")
pvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("start-PVC", 3), ("notified", 4), ("running", 5), ("waiting", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pvcStatus.setDescription('If this object is set to invalid(2), the PVC entry is removed. Set to start-PVC(3) to activate the PVC. When the state changes to running(5) then the PVC is successfully running. (6) pvc restarted')
pvcMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: pvcMulticast.setDescription('If this object is set to no, multicast is not allowed; otherwise, multicast is allowed.')
pvcInternalVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcInternalVpi.setStatus('mandatory')
if mibBuilder.loadTexts: pvcInternalVpi.setDescription('This object indicates the internal VPI value that the source side of multicast tree ranslates its orignal VPI to.')
pvcInternalVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcInternalVci.setStatus('mandatory')
if mibBuilder.loadTexts: pvcInternalVci.setDescription('This object indicates the internal VCI value that the source side of multicast tree ranslates its orignal VCI to.')
pvcNumLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcNumLeaves.setStatus('mandatory')
if mibBuilder.loadTexts: pvcNumLeaves.setDescription('This object indicates the number of leaves this multicast tree currently contains.')
pvcDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bidirect", 1), ("unidirect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcDirection.setStatus('mandatory')
if mibBuilder.loadTexts: pvcDirection.setDescription('This object determines if a multicast PVC is to be unidirectional or bidirectional')
svcMaxPtPtConnections = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 750)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcMaxPtPtConnections.setStatus('mandatory')
if mibBuilder.loadTexts: svcMaxPtPtConnections.setDescription('The maximum number of point-to-point connections.')
svcMaxPtMptConnections = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcMaxPtMptConnections.setStatus('mandatory')
if mibBuilder.loadTexts: svcMaxPtMptConnections.setDescription('The maximum number of point-to-multipoint connections.')
svcMaxPtMptParties = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcMaxPtMptParties.setStatus('mandatory')
if mibBuilder.loadTexts: svcMaxPtMptParties.setDescription('The maximum number of parties in a point-to-multipoint connection.')
svcResourceTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6), )
if mibBuilder.loadTexts: svcResourceTable.setStatus('mandatory')
if mibBuilder.loadTexts: svcResourceTable.setDescription('This table contains information about the resource available for svcs on each link.')
svcResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1), ).setIndexNames((0, "DV2-MIB", "svcSAP"))
if mibBuilder.loadTexts: svcResourceEntry.setStatus('mandatory')
svcSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSAP.setStatus('mandatory')
if mibBuilder.loadTexts: svcSAP.setDescription('Identifies the SAP.')
svcHiLo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("low", 2), ("high", 1))).clone('low')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcHiLo.setStatus('mandatory')
if mibBuilder.loadTexts: svcHiLo.setDescription('Select VPI/VCI values from low to high or high to low')
svcVciStart = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcVciStart.setStatus('mandatory')
if mibBuilder.loadTexts: svcVciStart.setDescription('Identifies the start of the range of SVC VCI values supported on this link.')
svcVciEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcVciEnd.setStatus('mandatory')
if mibBuilder.loadTexts: svcVciEnd.setDescription('Identifies the end of the range of SVC VCI values supported on this link.')
svcVpiStart = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVpiStart.setStatus('mandatory')
if mibBuilder.loadTexts: svcVpiStart.setDescription('Identifies the start of the range of SVC VPI values supported on this link.')
svcVpiEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVpiEnd.setStatus('mandatory')
if mibBuilder.loadTexts: svcVpiEnd.setDescription('Identifies the end of the range of SVC VPI values supported on this link.')
svcVpStart = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVpStart.setStatus('mandatory')
if mibBuilder.loadTexts: svcVpStart.setDescription('Identifies the start of the range of SVPs supported on this link.')
svcVpEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVpEnd.setStatus('mandatory')
if mibBuilder.loadTexts: svcVpEnd.setDescription('Identifies the end of the range of SVPs supported on this link.')
svcBackwardCellRateTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcBackwardCellRateTotal.setStatus('mandatory')
if mibBuilder.loadTexts: svcBackwardCellRateTotal.setDescription('The backward total cell rate configured for SVCs on this link. Note that this object is in cells per second (CPS).')
svcBackwardCellRateAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcBackwardCellRateAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: svcBackwardCellRateAvailable.setDescription('The backward cell rate available for SVCs on this link. Note that this object is in cells per second (CPS).')
svcSigVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcSigVci.setStatus('mandatory')
if mibBuilder.loadTexts: svcSigVci.setDescription('The VCI used for signalling.')
svcSigVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcSigVpi.setStatus('mandatory')
if mibBuilder.loadTexts: svcSigVpi.setDescription('The VPI used for signalling.')
svcSAPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("reconfigure", 2), ("reset", 3), ("on", 4), ("idle", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcSAPStatus.setStatus('mandatory')
if mibBuilder.loadTexts: svcSAPStatus.setDescription('Select on(4) to activate the SAP, off(1) to deactivate, reconfigure(2) to hot reconfigure the vci/vpi ranges and reset(3) to clear all calls on the SAP.')
svcCDVTSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 16), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcCDVTSize.setStatus('mandatory')
if mibBuilder.loadTexts: svcCDVTSize.setDescription('Cell Delay Variation Tolerance size.')
svcIntType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("user", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcIntType.setStatus('mandatory')
if mibBuilder.loadTexts: svcIntType.setDescription('Interface type - NETWORK or USER.')
svcPolicing = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcPolicing.setStatus('mandatory')
if mibBuilder.loadTexts: svcPolicing.setDescription('Policing - ON or OFF')
svcLowPriOverbookFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcLowPriOverbookFactor.setStatus('mandatory')
if mibBuilder.loadTexts: svcLowPriOverbookFactor.setDescription('This is the percentage of low priority traffic overbook factor.')
svcMaxSapConn = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 750)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcMaxSapConn.setStatus('mandatory')
if mibBuilder.loadTexts: svcMaxSapConn.setDescription('Maximum SVCs this SAP')
svcCurSapConn = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcCurSapConn.setStatus('mandatory')
if mibBuilder.loadTexts: svcCurSapConn.setDescription('Current SVC count this SAP')
svcLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: svcLinkNo.setDescription('This is the physical link number associated with this SAP')
svcVpiMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVpiMapping.setStatus('mandatory')
if mibBuilder.loadTexts: svcVpiMapping.setDescription('VPI and VPCI mapping status')
svcQosRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQosRoute.setStatus('mandatory')
if mibBuilder.loadTexts: svcQosRoute.setDescription('QoS based route')
svcSwtch = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uni30", 1), ("uni31", 2), ("iisp30", 3), ("iisp31", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcSwtch.setStatus('mandatory')
if mibBuilder.loadTexts: svcSwtch.setDescription('UNI Interface Type')
svcRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcRestart.setStatus('mandatory')
if mibBuilder.loadTexts: svcRestart.setDescription('Send Restart when link is up')
svcE164Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 27), E164()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcE164Addr.setStatus('mandatory')
if mibBuilder.loadTexts: svcE164Addr.setDescription('The E.164 address for this SAP')
svcAutoSapOff = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAutoSapOff.setStatus('mandatory')
if mibBuilder.loadTexts: svcAutoSapOff.setDescription('This option allows a Sap Status to be automatically turned OFF after T309 expiry. Select Yes(1) if a sap (which was ON before) is to be turned OFF after T309 expiry, else select No(2). By default, No(2) is selected.')
svcTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7), )
if mibBuilder.loadTexts: svcTable.setStatus('mandatory')
if mibBuilder.loadTexts: svcTable.setDescription('This table contains information on each on SVC.')
svcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1), ).setIndexNames((0, "DV2-MIB", "svcId"))
if mibBuilder.loadTexts: svcEntry.setStatus('mandatory')
svcId = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcId.setStatus('mandatory')
if mibBuilder.loadTexts: svcId.setDescription('The svc ID number')
svcDSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDSlot.setStatus('mandatory')
if mibBuilder.loadTexts: svcDSlot.setDescription('The destination slot of the SVC.')
svcDLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDLink.setStatus('mandatory')
if mibBuilder.loadTexts: svcDLink.setDescription('The destination link of the SVC.')
svcDvci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 4), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDvci.setStatus('mandatory')
if mibBuilder.loadTexts: svcDvci.setDescription('The destination virtual circuit identifier for the SVC.')
svcDvpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 5), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDvpi.setStatus('mandatory')
if mibBuilder.loadTexts: svcDvpi.setDescription('The destination virtual path identifier for the SVC.')
svcDE164 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 6), E164()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDE164.setStatus('mandatory')
if mibBuilder.loadTexts: svcDE164.setDescription('The destination E.164 address for the SVC.')
svcDE164Sub = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 7), E164SUB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDE164Sub.setStatus('mandatory')
if mibBuilder.loadTexts: svcDE164Sub.setDescription('The destination sub-address for the SVC.')
svcSSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSSlot.setStatus('mandatory')
if mibBuilder.loadTexts: svcSSlot.setDescription('The source slot of the SVC.')
svcSLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSLink.setStatus('mandatory')
if mibBuilder.loadTexts: svcSLink.setDescription('The source link of the SVC.')
svcSvci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 10), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSvci.setStatus('mandatory')
if mibBuilder.loadTexts: svcSvci.setDescription('The source virtual circuit identifier for a SVC.')
svcSvpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 11), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSvpi.setStatus('mandatory')
if mibBuilder.loadTexts: svcSvpi.setDescription('The source virtual path identifier for a SVC.')
svcSE164 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 12), E164()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSE164.setStatus('mandatory')
if mibBuilder.loadTexts: svcSE164.setDescription('The source E.164 address for the SVC.')
svcSE164Sub = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 13), E164SUB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSE164Sub.setStatus('mandatory')
if mibBuilder.loadTexts: svcSE164Sub.setDescription('The source sub-address for the SVC.')
svcForwardPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcForwardPeakCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: svcForwardPeakCellRate.setDescription('The forward user cell rate for a SVC. The forward user cell rate is a measurement of bandwidth available to the initiating user to transfer information to the responding user.')
svcForwardPeakMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8))).clone(namedValues=NamedValues(("off", 1), ("clp0-discard", 2), ("clp01-discard", 4), ("clp0-tag", 6), ("clp01-tag", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcForwardPeakMode.setStatus('mandatory')
if mibBuilder.loadTexts: svcForwardPeakMode.setDescription('SVC/SVP Forward Peak Mode')
svcBackwardPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcBackwardPeakCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: svcBackwardPeakCellRate.setDescription('The backward user cell rate for a SVC. The backward user cell rate is a measurement of bandwidth available to the responding user to transfer information to the initiating user.')
svcBackwardPeakMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8))).clone(namedValues=NamedValues(("off", 1), ("clp0-discard", 2), ("clp01-discard", 4), ("clp0-tag", 6), ("clp01-tag", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcBackwardPeakMode.setStatus('mandatory')
if mibBuilder.loadTexts: svcBackwardPeakMode.setDescription('SVC/SVP Backward Peak Mode')
svcForwardSustainableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcForwardSustainableCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: svcForwardSustainableCellRate.setDescription('The sustainable forward cell rate for the SVC.')
svcForwardMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcForwardMaxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: svcForwardMaxBurstSize.setDescription('The forward maximum burst size for the SVC.')
svcForwardSustainableMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8))).clone(namedValues=NamedValues(("off", 1), ("clp0-discard", 2), ("clp01-discard", 4), ("clp0-tag", 6), ("clp01-tag", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcForwardSustainableMode.setStatus('mandatory')
if mibBuilder.loadTexts: svcForwardSustainableMode.setDescription('SVC/SVP Forward Sustained Mode')
svcBackwardSustainableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcBackwardSustainableCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: svcBackwardSustainableCellRate.setDescription('The sustainable backward cell rate for the SVC.')
svcBackwardMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcBackwardMaxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: svcBackwardMaxBurstSize.setDescription('The backward maximum burst size for the SVC.')
svcBackwardSustainableMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8))).clone(namedValues=NamedValues(("off", 1), ("clp0-discard", 2), ("clp01-discard", 4), ("clp0-tag", 6), ("clp01-tag", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcBackwardSustainableMode.setStatus('mandatory')
if mibBuilder.loadTexts: svcBackwardSustainableMode.setDescription('SVC/SVP Backward Sustained Mode')
svcQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("qos1", 1), ("qos2", 2), ("qos3", 3), ("qos4", 4), ("ubrBe", 5), ("abr", 6), ("cbr", 7), ("vbrRt", 8), ("vbrNrt", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQoSClass.setStatus('mandatory')
if mibBuilder.loadTexts: svcQoSClass.setDescription("CBR(1) is a constant bit rate service, vbr-high(2) is variable bit rate with high priority, vbr-med(3) has low priority, vbr-low(4) is a `best effort' service - low priority and the cells may be discarded.")
svcBillTag = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcBillTag.setStatus('mandatory')
if mibBuilder.loadTexts: svcBillTag.setDescription('This identifies the billable SVC.')
svcDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDuration.setStatus('mandatory')
if mibBuilder.loadTexts: svcDuration.setDescription('Duration of the SVC in milliseconds.')
svcType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("point-to-point", 1), ("point-to-multipoint", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcType.setStatus('mandatory')
if mibBuilder.loadTexts: svcType.setDescription('The type of SVC.')
svcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("idle", 1), ("invalid", 2), ("reset", 3), ("active", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcStatus.setStatus('mandatory')
if mibBuilder.loadTexts: svcStatus.setDescription('If this object is set to invalid (2), the SVC is cleared and the entry is removed. If set to active(4) then the SVC is active.')
svcNumLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNumLeaves.setStatus('mandatory')
if mibBuilder.loadTexts: svcNumLeaves.setDescription('Number of multicast leaves')
svcInternalVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcInternalVpi.setStatus('mandatory')
if mibBuilder.loadTexts: svcInternalVpi.setDescription('internal VPI used for multicast operation')
svcInternalVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcInternalVci.setStatus('mandatory')
if mibBuilder.loadTexts: svcInternalVci.setDescription('internal VCI used for multicast operation')
sPvcTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8), )
if mibBuilder.loadTexts: sPvcTable.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcTable.setDescription('This table contains information on Semi-Permanent Virtual Circuits (SPVCs).')
sPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1), ).setIndexNames((0, "DV2-MIB", "sPvcId"))
if mibBuilder.loadTexts: sPvcEntry.setStatus('mandatory')
sPvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 750))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcId.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcId.setDescription('Slot-unique SPVC identifier.')
sPvcCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 2), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPvcCallId.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcCallId.setDescription('Call identifier.')
sPvcLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcLink.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcLink.setDescription('The physical link for the SPVC.')
sPvcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 4), E164()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcAddress.setDescription('The E.164 address for the SPVC.')
sPvcForwardPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcForwardPeakCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcForwardPeakCellRate.setDescription('The forward user cell rate for an SPVC. The forward user cell rate is a measurement of bandwidth available to the initiating user to transfer information to the responding user.')
sPvcForwardPeakMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("off", 1), ("clp01-discard", 4))).clone('clp01-discard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcForwardPeakMode.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcForwardPeakMode.setDescription('SPVC/SPVP Forward Peak Mode')
sPvcBackwardPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcBackwardPeakCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcBackwardPeakCellRate.setDescription('The backward user cell rate for an SPVC. The backward user cell rate is a measurement of bandwidth available to the responding user to transfer information to the initiating user.')
sPvcBackwardPeakMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("off", 1), ("clp01-discard", 4))).clone('clp01-discard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcBackwardPeakMode.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcBackwardPeakMode.setDescription('SPVC/SPVP Backward Peak Mode')
sPvcForwardSustainableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcForwardSustainableCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcForwardSustainableCellRate.setDescription('The sustainable forward cell rate for the SPVC.')
sPvcForwardMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcForwardMaxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcForwardMaxBurstSize.setDescription('The forward maximum burst size for the SPVC.')
sPvcForwardSustainableMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))).clone(namedValues=NamedValues(("off", 1), ("clp0-discard", 2), ("clp01-discard", 4), ("clp0-tag", 6))).clone('clp0-discard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcForwardSustainableMode.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcForwardSustainableMode.setDescription('SPVC/SPVP Forward Sustained Mode')
sPvcBackwardSustainableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcBackwardSustainableCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcBackwardSustainableCellRate.setDescription('The sustainable backward cell rate for the SPVC.')
sPvcBackwardMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcBackwardMaxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcBackwardMaxBurstSize.setDescription('The backward maximum burst size for the SPVC.')
sPvcBackwardSustainableMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))).clone(namedValues=NamedValues(("off", 1), ("clp0-discard", 2), ("clp01-discard", 4), ("clp0-tag", 6))).clone('clp0-discard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcBackwardSustainableMode.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcBackwardSustainableMode.setDescription('SPVC/SPVP Backward Sustained Mode')
sPvcQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cbr", 1), ("vbr-high", 2), ("vbr-med", 3), ("vbr-low", 4), ("best-effort", 5))).clone('cbr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcQoSClass.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcQoSClass.setDescription('CBR(1) is a constant bit rate service, vbr-high(2) is variable bit rate with high priority, vbr-med(3) has low priority, vbr-low(4) has low priority and the cells may be discarded, best-effort is the same as vbr-low except no bandwidth is reserved.')
sPvcSourceVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 16), VirtualCircuitIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcSourceVci.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcSourceVci.setDescription('The source virtual circuit identifier for the SPVC.')
sPvcSourceVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 17), VirtualPathIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcSourceVpi.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcSourceVpi.setDescription('The source virtual path identifier for the SPVC.')
sPvcTargetVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 18), VirtualCircuitIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcTargetVci.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcTargetVci.setDescription('The target virtual circuit identifier for the SPVC.')
sPvcTargetVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 19), VirtualPathIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcTargetVpi.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcTargetVpi.setDescription('The target virtual path identifier for the SPVC.')
sPvcRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcRetry.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcRetry.setDescription('Retry timeout. Zero represents an infinite timeout.')
sPvcConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPvcConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcConnectTime.setDescription('Connect time in ms.')
sPvcNumberRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcNumberRetries.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcNumberRetries.setDescription('Number of retries to attempt. Zero represents no limit.')
sPvcFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPvcFailures.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcFailures.setDescription('A count of the SPVC setup failures.')
sPvcAlertFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("no-trap", 1), ("fail", 2), ("fail-or-clear", 3), ("fail-all-attempts", 4), ("call-success", 5), ("trap-all", 6), ("trap-state-change", 7))).clone('no-trap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcAlertFailures.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcAlertFailures.setDescription('Describes the circumstances under which to issue an Alert message to the NMS.')
sPvcCauseDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 25), Q93bCauseDiag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPvcCauseDiag.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcCauseDiag.setDescription('Cause and diagnostic codes.')
sPvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passive", 1), ("active", 2))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPvcType.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcType.setDescription('If the SPVC entry is passive, it will not try to initiate a call. An active will attempt to build an SPVC at intervals set by the retry field.')
sPvcCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("call-setup", 2), ("reset", 3), ("invalid", 4))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcCallState.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcCallState.setDescription('Sets the state of the SPVC. Set the value to invalid(3) to tear down the SPVC.')
sPvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("sPVC-wait", 2), ("l4-wait", 3), ("active", 4))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPvcStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcStatus.setDescription('Describes the state of the SPVC.')
sPvcCauseDiagCode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPvcCauseDiagCode.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcCauseDiagCode.setDescription('Cause and diagnostic codes as defined in UNI-3.0 Annex E .')
sPvcMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pt-pt", 1), ("pt-mpt-root", 2), ("pt-mpt-leaf", 3), ("bidirect-root", 4))).clone('pt-pt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: sPvcMulticast.setDescription('pt-pt - point-to-point SPVC; pt-mpt - point-to-multipoint SPVC; bidirect-root: pt-mpt birection root.')
svcQ93bStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9), )
if mibBuilder.loadTexts: svcQ93bStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatTable.setDescription('This table contains statistical protocol information for each link.')
svcQ93bStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1), ).setIndexNames((0, "DV2-MIB", "svcQ93bStatSAP"))
if mibBuilder.loadTexts: svcQ93bStatEntry.setStatus('mandatory')
svcQ93bStatSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatSAP.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatSAP.setDescription('This is the layer 3 Service Access Point for the link.')
svcQ93bStatActive = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatActive.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatActive.setDescription('Number of calls currently active on this SAP.')
svcQ93bStatAccumalative = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatAccumalative.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatAccumalative.setDescription('Total number of calls established on this SAP.')
svcQ93bStatCallProcTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatCallProcTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatCallProcTx.setDescription('Call Proceeding pdus transmitted on this SAP.')
svcQ93bStatConnTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatConnTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatConnTx.setDescription('Connect pdus transmitted on this SAP.')
svcQ93bStatConnAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatConnAckTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatConnAckTx.setDescription('Connect Acknowledge pdus transmitted on this SAP.')
svcQ93bStatSetupTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatSetupTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatSetupTx.setDescription('Setup pdus transmitted on this SAP.')
svcQ93bStatRelTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatRelTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatRelTx.setDescription('Release pdus transmitted on this SAP.')
svcQ93bStatRelCmpltTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatRelCmpltTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatRelCmpltTx.setDescription('Release Complete pdus transmitted on this SAP.')
svcQ93bStatRstTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatRstTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatRstTx.setDescription('Restart pdus transmitted on this SAP.')
svcQ93bStatRstAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatRstAckTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatRstAckTx.setDescription('Restart Acknowledge pdus transmitted on this SAP.')
svcQ93bStatStatTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatStatTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatStatTx.setDescription('Status pdus transmitted on this SAP.')
svcQ93bStatStatEnqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatStatEnqTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatStatEnqTx.setDescription('Status Enquiry pdus transmitted on this SAP.')
svcQ93bStatAddPtyTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatAddPtyTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatAddPtyTx.setDescription('Add Party pdus transmitted on this SAP.')
svcQ93bStatAddPtyAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatAddPtyAckTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatAddPtyAckTx.setDescription('Add Party Acknowledge pdus transmitted on this SAP.')
svcQ93bStatAddPtyRejTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatAddPtyRejTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatAddPtyRejTx.setDescription('Add Party Reject pdus transmitted on this SAP.')
svcQ93bStatDropPtyTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatDropPtyTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatDropPtyTx.setDescription('Drop Party pdus transmitted on this SAP.')
svcQ93bStatDropPtyAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatDropPtyAckTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatDropPtyAckTx.setDescription('Drop Party Acknowledge pdus transmitted on this SAP.')
svcQ93bStatLstCauseTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatLstCauseTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatLstCauseTx.setDescription('Last cause code transmitted.')
svcQ93bStatLstDiagTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatLstDiagTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatLstDiagTx.setDescription('Last diagnostic code transmitted.')
svcQ93bStatCallProcRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatCallProcRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatCallProcRx.setDescription('Call Proceeding pdus received on this SAP.')
svcQ93bStatConnRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatConnRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatConnRx.setDescription('Connect pdus received on this SAP.')
svcQ93bStatConnAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatConnAckRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatConnAckRx.setDescription('Connect Acknowledge pdus received on this SAP.')
svcQ93bStatSetupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatSetupRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatSetupRx.setDescription('Setup pdus received on this SAP.')
svcQ93bStatRelRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatRelRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatRelRx.setDescription('Release pdus received on this SAP.')
svcQ93bStatRelCmpltRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatRelCmpltRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatRelCmpltRx.setDescription('Release Complete pdus received on this SAP.')
svcQ93bStatRstRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatRstRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatRstRx.setDescription('Restart pdus received on this SAP.')
svcQ93bStatRstAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatRstAckRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatRstAckRx.setDescription('Restart Acknowledge pdus received on this SAP.')
svcQ93bStatStatRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatStatRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatStatRx.setDescription('Status pdus received on this SAP.')
svcQ93bStatStatEnqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatStatEnqRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatStatEnqRx.setDescription('Status Enquiry pdus received on this SAP.')
svcQ93bStatAddPtyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatAddPtyRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatAddPtyRx.setDescription('Add Party pdus received on this SAP.')
svcQ93bStatAddPtyAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatAddPtyAckRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatAddPtyAckRx.setDescription('Add Party Acknowledge pdus received on this SAP.')
svcQ93bStatAddPtyRejRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatAddPtyRejRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatAddPtyRejRx.setDescription('Add Party Reject pdus received on this SAP.')
svcQ93bStatDropPtyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatDropPtyRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatDropPtyRx.setDescription('Drop Party pdus received on this SAP.')
svcQ93bStatDropPtyAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatDropPtyAckRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatDropPtyAckRx.setDescription('Drop Party Acknowledge pdus received on this SAP.')
svcQ93bStatLstCauseRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatLstCauseRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatLstCauseRx.setDescription('Last cause code received.')
svcQ93bStatLstDiagRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatLstDiagRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatLstDiagRx.setDescription('Last diagnostic code received.')
svcQ93bStatClr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQ93bStatClr.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatClr.setDescription('Clear Q.93B statistics for this SAP.')
svcQ93bStatDiagTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 39), Q93bCauseDiag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatDiagTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatDiagTx.setDescription('Tx SAP diagnostic codes')
svcQ93bStatDiagRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 40), Q93bCauseDiag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatDiagRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bStatDiagRx.setDescription('Rx SAP diagnostic codes')
svcQsaalStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10), )
if mibBuilder.loadTexts: svcQsaalStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatTable.setDescription('This table contains protocol information for the Q.SAAL layer for each link.')
svcQsaalStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1), ).setIndexNames((0, "DV2-MIB", "svcQsaalStatSAP"))
if mibBuilder.loadTexts: svcQsaalStatEntry.setStatus('mandatory')
svcQsaalStatSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatSAP.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatSAP.setDescription('This is the layer 3 Service Access Point for the link.')
svcQsaalStatOutSduDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatOutSduDisc.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatOutSduDisc.setDescription('Outgoing SDUs discarded.')
svcQsaalStatInPduErr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatInPduErr.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatInPduErr.setDescription('Number of incoming PDUs with a reception error.')
svcQsaalStatInPduDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatInPduDisc.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatInPduDisc.setDescription('Number of incoming PDUs discarded.')
svcQsaalStatOutPduErr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatOutPduErr.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatOutPduErr.setDescription('Number of outgoing PDUs with a transmission error.')
svcQsaalStatOutPduDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatOutPduDisc.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatOutPduDisc.setDescription('Number of outgoing PDUs discarded.')
svcQsaalStatBgnTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatBgnTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatBgnTx.setDescription('BGN pdus transmitted on this SAP.')
svcQsaalStatBgakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatBgakTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatBgakTx.setDescription('BGAK pdus transmitted on this SAP.')
svcQsaalStatBgrejTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatBgrejTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatBgrejTx.setDescription('BGREJ pdus transmitted on this SAP.')
svcQsaalStatEndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatEndTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatEndTx.setDescription('END pdus transmitted on this SAP.')
svcQsaalStatRsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatRsTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatRsTx.setDescription('RS pdus transmitted on this SAP.')
svcQsaalStatRsakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatRsakTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatRsakTx.setDescription('RSAK pdus transmitted on this SAP.')
svcQsaalStatSdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatSdTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatSdTx.setDescription('SD pdus transmitted on this SAP.')
svcQsaalStatSdpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatSdpTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatSdpTx.setDescription('SDP pdus transmitted on this SAP.')
svcQsaalStatPollTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatPollTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatPollTx.setDescription('POLL pdus transmitted on this SAP.')
svcQsaalStatStatTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatStatTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatStatTx.setDescription('STAT pdus transmitted on this SAP.')
svcQsaalStatUstatTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatUstatTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatUstatTx.setDescription('USTAT pdus transmitted on this SAP.')
svcQsaalStatUdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatUdTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatUdTx.setDescription('UD pdus transmitted on this SAP.')
svcQsaalStatMdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatMdTx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatMdTx.setDescription('MD pdus transmitted on this SAP.')
svcQsaalStatBgnRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatBgnRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatBgnRx.setDescription('BGN pdus received on this SAP.')
svcQsaalStatBgakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatBgakRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatBgakRx.setDescription('BGAK pdus received on this SAP.')
svcQsaalStatBgrejRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatBgrejRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatBgrejRx.setDescription('BGREJ pdus received on this SAP.')
svcQsaalStatEndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatEndRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatEndRx.setDescription('END pdus received on this SAP.')
svcQsaalStatRsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatRsRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatRsRx.setDescription('RS pdus received on this SAP.')
svcQsaalStatRsakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatRsakRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatRsakRx.setDescription('RSAK pdus received on this SAP.')
svcQsaalStatSdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatSdRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatSdRx.setDescription('SD pdus received on this SAP.')
svcQsaalStatSdpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatSdpRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatSdpRx.setDescription('SDP pdus received on this SAP.')
svcQsaalStatPollRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatPollRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatPollRx.setDescription('POLL pdus received on this SAP.')
svcQsaalStatStatRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatStatRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatStatRx.setDescription('STAT pdus received on this SAP.')
svcQsaalStatUstatRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatUstatRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatUstatRx.setDescription('USTAT pdus received on this SAP.')
svcQsaalStatUdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatUdRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatUdRx.setDescription('UD pdus received on this SAP.')
svcQsaalStatMdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatMdRx.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatMdRx.setDescription('MD pdus received on this SAP.')
svcQsaalStatClr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQsaalStatClr.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalStatClr.setDescription('Clear statistics for this SAP.')
svcQsaalTmrPoll = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 11), Integer32().clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQsaalTmrPoll.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalTmrPoll.setDescription('SSCOP Timer_POLL (8=800ms).')
svcQsaalTmrKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 12), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQsaalTmrKeepAlive.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalTmrKeepAlive.setDescription('SSCOP Timer_KEEPALIVE (20=2seconds).')
svcQsaalTmrNoResponse = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 13), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQsaalTmrNoResponse.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalTmrNoResponse.setDescription('SSCOP Timer_NORESPONSE (100=10seconds).')
svcQsaalTmrCC = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 14), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQsaalTmrCC.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalTmrCC.setDescription('SSCOP Timer_CC (20=2seconds).')
svcQsaalMaxPD = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 15), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQsaalMaxPD.setStatus('mandatory')
if mibBuilder.loadTexts: svcQsaalMaxPD.setDescription('SSCOP Maximum PD.')
svcQ93bTmrT303 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 16), Integer32().clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQ93bTmrT303.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bTmrT303.setDescription('Q.93B T303 (40=4seconds).')
svcQ93bTmrT310 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 17), Integer32().clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQ93bTmrT310.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bTmrT310.setDescription('Q.93B T310 (200=20seconds).')
svcQ93bTmrT308 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 18), Integer32().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQ93bTmrT308.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bTmrT308.setDescription('Q.93B T308 (300=30seconds).')
svcQ93bTmrT309 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 19), Integer32().clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQ93bTmrT309.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bTmrT309.setDescription('Q.93B T309 (150=15seconds).')
maxOutstanding = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxOutstanding.setStatus('mandatory')
if mibBuilder.loadTexts: maxOutstanding.setDescription('Max Outgoing Outstanding Calls.')
svcLoadRoute = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("none", 2), ("rte-table", 3), ("dtl-bin", 4))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcLoadRoute.setStatus('mandatory')
if mibBuilder.loadTexts: svcLoadRoute.setDescription('Poke point for loading routing tables')
svcHalfConTimer = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcHalfConTimer.setStatus('mandatory')
if mibBuilder.loadTexts: svcHalfConTimer.setDescription('SVC half connect recovery poll timer')
svcHalfConCnt = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcHalfConCnt.setStatus('mandatory')
if mibBuilder.loadTexts: svcHalfConCnt.setDescription('SVC half connect counter')
svcQ93bTmrT398 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 24), Integer32().clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQ93bTmrT398.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bTmrT398.setDescription('Q.93B T398 (40= 4 seconds).')
svcQ93bTmrT399 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 25), Integer32().clone(140)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQ93bTmrT399.setStatus('mandatory')
if mibBuilder.loadTexts: svcQ93bTmrT399.setDescription('Q.93B T399 (140= 14 seconds).')
svcRetryPeriod = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 180)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcRetryPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: svcRetryPeriod.setDescription('Retry Period')
svcCellRateTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 27), )
if mibBuilder.loadTexts: svcCellRateTable.setStatus('mandatory')
if mibBuilder.loadTexts: svcCellRateTable.setDescription('This table contains information about the limitations on Cell Rates on link')
svcCellRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 27, 1), ).setIndexNames((0, "DV2-MIB", "svcCRLinkNo"))
if mibBuilder.loadTexts: svcCellRateEntry.setStatus('mandatory')
svcCRLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcCRLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: svcCRLinkNo.setDescription('This is the physical link number associated with this SAP')
svcPCRCLP01Max = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 27, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777216))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcPCRCLP01Max.setStatus('mandatory')
if mibBuilder.loadTexts: svcPCRCLP01Max.setDescription('PCRCLP01 Max(0 disables checking)')
svcSCRMax = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 27, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777216))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcSCRMax.setStatus('mandatory')
if mibBuilder.loadTexts: svcSCRMax.setDescription('SCR Max(0 disables checking)')
svcMBSMax = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 27, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777216))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcMBSMax.setStatus('mandatory')
if mibBuilder.loadTexts: svcMBSMax.setDescription('MBS Max(0 disables checking)')
svcTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28), )
if mibBuilder.loadTexts: svcTrafficTable.setStatus('mandatory')
if mibBuilder.loadTexts: svcTrafficTable.setDescription('This table contains information about the limitations on Cell Rates on link')
svcTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28, 1), ).setIndexNames((0, "DV2-MIB", "svcTLinkNo"))
if mibBuilder.loadTexts: svcTrafficEntry.setStatus('mandatory')
svcTLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: svcTLinkNo.setDescription('Lnk Number')
svcCBRallowed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcCBRallowed.setStatus('mandatory')
if mibBuilder.loadTexts: svcCBRallowed.setDescription('Allows or disallows CBR traffic')
svcVBRHallowed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVBRHallowed.setStatus('mandatory')
if mibBuilder.loadTexts: svcVBRHallowed.setDescription('Allows or disallows VBR High traffic')
svcVBRMallowed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVBRMallowed.setStatus('mandatory')
if mibBuilder.loadTexts: svcVBRMallowed.setDescription('Allows or disallows VBR Med traffic')
svcVBRLUBRallowed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVBRLUBRallowed.setStatus('mandatory')
if mibBuilder.loadTexts: svcVBRLUBRallowed.setDescription('Allows or disallows VBR Low/UBR traffic')
svcVBRLUBRsubtractpercent = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVBRLUBRsubtractpercent.setStatus('mandatory')
if mibBuilder.loadTexts: svcVBRLUBRsubtractpercent.setDescription('Specifies a percentage of BW to be subtracted for VBR Low/UBR traffic')
ceTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1), )
if mibBuilder.loadTexts: ceTable.setStatus('mandatory')
if mibBuilder.loadTexts: ceTable.setDescription('Configuration Table for dv2CE Links')
ceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1), ).setIndexNames((0, "DV2-MIB", "ceLinkNo"))
if mibBuilder.loadTexts: ceEntry.setStatus('mandatory')
ceLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: ceLinkNo.setDescription('Link Number for Table Entry')
ceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("restart", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceEnable.setStatus('mandatory')
if mibBuilder.loadTexts: ceEnable.setDescription('Setting to yes(1) enables the Link')
ceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("adaptive", 2), ("srts", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceMode.setStatus('mandatory')
if mibBuilder.loadTexts: ceMode.setDescription('Service Clock Recovery Mode')
cePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("high", 1), ("low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cePriority.setStatus('mandatory')
if mibBuilder.loadTexts: cePriority.setDescription('Set to high for normal CBR operation')
cePvcValid = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cePvcValid.setStatus('mandatory')
if mibBuilder.loadTexts: cePvcValid.setDescription('Indicates if valid PVC exists for Link')
ceDstSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDstSlot.setStatus('mandatory')
if mibBuilder.loadTexts: ceDstSlot.setDescription('Destination Slot for PVC')
ceDstLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 7))).clone(namedValues=NamedValues(("link0", 1), ("link1", 2), ("link2", 3), ("link3", 4), ("multicast", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDstLink.setStatus('mandatory')
if mibBuilder.loadTexts: ceDstLink.setDescription('Destination Link for PVC')
ceDstVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 8), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDstVpi.setStatus('mandatory')
if mibBuilder.loadTexts: ceDstVpi.setDescription('Destination VPI for PVC')
ceDstVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 9), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDstVci.setStatus('mandatory')
if mibBuilder.loadTexts: ceDstVci.setDescription('Destination VCI for PVC')
ceCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceCDV.setStatus('mandatory')
if mibBuilder.loadTexts: ceCDV.setDescription('Cell Delay Variation Tolerance')
ceCDVMax = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 62)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceCDVMax.setStatus('mandatory')
if mibBuilder.loadTexts: ceCDVMax.setDescription('Cell Delay Variation Tolerance')
ceMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: ceMulticast.setDescription('Is link part of multicast tree')
ceXhInt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("inactive", 1), ("point-to-point", 2), ("uni-root", 3), ("bi-root", 4), ("uni-rt-and-leaf", 5), ("uni-leaf", 6), ("bi-leaf", 7), ("unknown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceXhInt.setStatus('mandatory')
if mibBuilder.loadTexts: ceXhInt.setDescription('XH Interface for Link')
ceStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2), )
if mibBuilder.loadTexts: ceStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: ceStatTable.setDescription('status information about the dv2CE.')
ceStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1), ).setIndexNames((0, "DV2-MIB", "ceStatPortNo"))
if mibBuilder.loadTexts: ceStatEntry.setStatus('mandatory')
ceStatPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceStatPortNo.setStatus('mandatory')
if mibBuilder.loadTexts: ceStatPortNo.setDescription('Link Number for Table Entry')
ceStatReset = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceStatReset.setStatus('mandatory')
if mibBuilder.loadTexts: ceStatReset.setDescription('Clear Statistics for Link')
ceStatTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("start", 2), ("fifostart", 3), ("wideband", 4), ("fifokick", 5), ("narrowband", 6), ("operating", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceStatTxState.setStatus('mandatory')
if mibBuilder.loadTexts: ceStatTxState.setDescription('Indicates if data is being received and segmented')
ceStatRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("ais", 2), ("operating", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceStatRxState.setStatus('mandatory')
if mibBuilder.loadTexts: ceStatRxState.setDescription('Indicates if data being reassembled and transmitted')
ceTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceTxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ceTxCnt.setDescription('Count of Cells transmitted from switch fabric')
ceRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ceRxCnt.setDescription('Count of Cells received into switch fabric')
ceOflCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceOflCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ceOflCnt.setDescription('Count of 1S intervals during which RX FIFO overflowed')
ceUflCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceUflCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ceUflCnt.setDescription('Count of 1S intervals during which RX FIFO underflowed')
ceDisCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDisCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ceDisCnt.setDescription('Count of 1S intervals during which cells were discarded')
ceInvCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceInvCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ceInvCnt.setDescription('Count of 1S intervals during which cells were invented')
ceResCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceResCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ceResCnt.setDescription('Count of 1S intervals during which AAL1 resync occurred')
ceFifoLvlCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceFifoLvlCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ceFifoLvlCnt.setDescription('Number of Cells currently in FIFO')
cePriVal = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cePriVal.setStatus('mandatory')
if mibBuilder.loadTexts: cePriVal.setDescription('Primary Clock Valid')
ceSecVal = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSecVal.setStatus('mandatory')
if mibBuilder.loadTexts: ceSecVal.setDescription('Secondary Clock Valid')
ceClkSel = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceClkSel.setStatus('mandatory')
if mibBuilder.loadTexts: ceClkSel.setDescription('Clock Select')
ceClkInp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceClkInp.setStatus('mandatory')
if mibBuilder.loadTexts: ceClkInp.setDescription('Is there clock input')
ceStr3 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceStr3.setStatus('mandatory')
if mibBuilder.loadTexts: ceStr3.setDescription('Is there STR3')
veTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1), )
if mibBuilder.loadTexts: veTable.setStatus('mandatory')
if mibBuilder.loadTexts: veTable.setDescription('Configuration Table for dv2VE Links')
veEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1), ).setIndexNames((0, "DV2-MIB", "veLinkNo"))
if mibBuilder.loadTexts: veEntry.setStatus('mandatory')
veLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: veLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: veLinkNo.setDescription('Link Number for Table Entry')
veEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("restart", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: veEnable.setStatus('mandatory')
if mibBuilder.loadTexts: veEnable.setDescription('Setting to yes(1) enables the Link')
veMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4))).clone(namedValues=NamedValues(("video", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: veMode.setStatus('mandatory')
if mibBuilder.loadTexts: veMode.setDescription('Service Clock Recovery Mode')
vePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("high", 1), ("low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vePriority.setStatus('mandatory')
if mibBuilder.loadTexts: vePriority.setDescription('Set to high for normal CBR operation')
vePvcValid = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vePvcValid.setStatus('mandatory')
if mibBuilder.loadTexts: vePvcValid.setDescription('Indicates if valid PVC exists for Link')
veDstSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: veDstSlot.setStatus('mandatory')
if mibBuilder.loadTexts: veDstSlot.setDescription('Destination Slot for PVC')
veDstLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 7))).clone(namedValues=NamedValues(("link0", 1), ("link1", 2), ("link2", 3), ("link3", 4), ("multicast", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: veDstLink.setStatus('mandatory')
if mibBuilder.loadTexts: veDstLink.setDescription('Destination Link for PVC')
veDstVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 8), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: veDstVpi.setStatus('mandatory')
if mibBuilder.loadTexts: veDstVpi.setDescription('Destination VPI for PVC')
veDstVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 9), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: veDstVci.setStatus('mandatory')
if mibBuilder.loadTexts: veDstVci.setDescription('Destination VCI for PVC')
veCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(31)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: veCDV.setStatus('mandatory')
if mibBuilder.loadTexts: veCDV.setDescription('Cell Delay Variation Tolerance')
veCDVMax = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 62)).clone(62)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: veCDVMax.setStatus('mandatory')
if mibBuilder.loadTexts: veCDVMax.setDescription('Cell Delay Variation Tolerance')
veMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: veMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: veMulticast.setDescription('Is link part of multicast tree')
veXhInt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("inactive", 1), ("point-to-point", 2), ("uni-root", 3), ("bi-root", 4), ("uni-rt-and-leaf", 5), ("uni-leaf", 6), ("bi-leaf", 7), ("unknown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: veXhInt.setStatus('mandatory')
if mibBuilder.loadTexts: veXhInt.setDescription('XH Interface for Link')
veStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2), )
if mibBuilder.loadTexts: veStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: veStatTable.setDescription('status information about the dv2VE.')
veStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1), ).setIndexNames((0, "DV2-MIB", "veStatPortNo"))
if mibBuilder.loadTexts: veStatEntry.setStatus('mandatory')
veStatPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: veStatPortNo.setStatus('mandatory')
if mibBuilder.loadTexts: veStatPortNo.setDescription('Link Number for Table Entry')
veStatReset = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: veStatReset.setStatus('mandatory')
if mibBuilder.loadTexts: veStatReset.setDescription('Clear Statistics for Link')
veStatTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("start", 2), ("fifostart", 3), ("wideband", 4), ("fifokick", 5), ("narrowband", 6), ("operating", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: veStatTxState.setStatus('mandatory')
if mibBuilder.loadTexts: veStatTxState.setDescription('Indicates if data is being received and segmented')
veStatRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("ais", 2), ("operating", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: veStatRxState.setStatus('mandatory')
if mibBuilder.loadTexts: veStatRxState.setDescription('Indicates if data being reassembled and transmitted')
veTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: veTxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: veTxCnt.setDescription('Count of Cells transmitted from switch fabric')
veRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: veRxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: veRxCnt.setDescription('Count of Cells received into switch fabric')
veOflCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: veOflCnt.setStatus('mandatory')
if mibBuilder.loadTexts: veOflCnt.setDescription('Count of 1S intervals during which RX FIFO overflowed or underflowed')
veUflCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: veUflCnt.setStatus('mandatory')
if mibBuilder.loadTexts: veUflCnt.setDescription('Count of 1S intervals during which RX FIFO underflowed')
veDisCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: veDisCnt.setStatus('mandatory')
if mibBuilder.loadTexts: veDisCnt.setDescription('Count of 1S intervals during which cells were discarded')
veInvCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: veInvCnt.setStatus('mandatory')
if mibBuilder.loadTexts: veInvCnt.setDescription('Count of 1S intervals during which cells were invented')
veResCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: veResCnt.setStatus('mandatory')
if mibBuilder.loadTexts: veResCnt.setDescription('Count of 1S intervals during which AAL1 resync occurred')
veFifoLvlCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: veFifoLvlCnt.setStatus('mandatory')
if mibBuilder.loadTexts: veFifoLvlCnt.setDescription('Number of Cells currently in FIFO')
jpegSlipIp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 22, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jpegSlipIp.setStatus('mandatory')
if mibBuilder.loadTexts: jpegSlipIp.setDescription('IP address of SLIP line.')
jpegSlipMask = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 22, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jpegSlipMask.setStatus('mandatory')
if mibBuilder.loadTexts: jpegSlipMask.setDescription('Mask for SLIP line.')
jpegSlipRemoteIp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 22, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jpegSlipRemoteIp.setStatus('mandatory')
if mibBuilder.loadTexts: jpegSlipRemoteIp.setDescription('IP address of remote end of SLIP line.')
jpegSlipSpeed = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 22, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("baud2400", 1), ("baud4800", 2), ("baud9600", 3), ("baud19200", 4), ("baud38400", 5))).clone('baud38400')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jpegSlipSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: jpegSlipSpeed.setDescription('Baud rate of SLIP serial line.')
limSysState = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("init", 1), ("idle", 2), ("start", 3), ("working", 4), ("terminate", 5), ("fault", 6))).clone('init')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limSysState.setStatus('mandatory')
if mibBuilder.loadTexts: limSysState.setDescription('M-JPEG LIM System State')
limSysFault = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 23, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limSysFault.setStatus('mandatory')
if mibBuilder.loadTexts: limSysFault.setDescription('M-JPEG LIM Hardware Fault - front panel lamp')
limSysCompErr = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 23, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limSysCompErr.setStatus('mandatory')
if mibBuilder.loadTexts: limSysCompErr.setDescription('M-JPEG LIM Compression Error - front panel lamp')
limSysDecompErr = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 23, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limSysDecompErr.setStatus('mandatory')
if mibBuilder.loadTexts: limSysDecompErr.setDescription('M-JPEG LIM Decompression Error - front panel lamp')
limSysVideoIn = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 23, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limSysVideoIn.setStatus('mandatory')
if mibBuilder.loadTexts: limSysVideoIn.setDescription('M-JPEG LIM Video Input Present - front panel lamp')
limSysVideoOut = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 23, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limSysVideoOut.setStatus('mandatory')
if mibBuilder.loadTexts: limSysVideoOut.setDescription('M-JPEG LIM Video Output Active - front panel lamp')
limSysStartMode = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 23, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("force-init", 2))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limSysStartMode.setStatus('mandatory')
if mibBuilder.loadTexts: limSysStartMode.setDescription('M-JPEG LIM Default Startup mode')
sendFileSel = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("vjlim-cod", 2), ("vjlca-cod", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sendFileSel.setStatus('mandatory')
if mibBuilder.loadTexts: sendFileSel.setDescription('File to send')
jpegCurrentFile = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("vjlim-cod", 2), ("vjlca-cod", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jpegCurrentFile.setStatus('mandatory')
if mibBuilder.loadTexts: jpegCurrentFile.setDescription('File being sent')
sendFileStat = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("start", 2), ("continue", 3), ("end", 4), ("ack", 5), ("aborted", 6), ("error", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sendFileStat.setStatus('mandatory')
if mibBuilder.loadTexts: sendFileStat.setDescription('Status of file send')
sendFileBytes = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sendFileBytes.setStatus('mandatory')
if mibBuilder.loadTexts: sendFileBytes.setDescription('Bytes sent')
jpegReset = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jpegReset.setStatus('mandatory')
if mibBuilder.loadTexts: jpegReset.setDescription('Hard/Soft Reset')
jpegSaveCfg = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jpegSaveCfg.setStatus('mandatory')
if mibBuilder.loadTexts: jpegSaveCfg.setDescription('Save Configuration')
jpegLoadCfg = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jpegLoadCfg.setStatus('mandatory')
if mibBuilder.loadTexts: jpegLoadCfg.setDescription('Load Configuration')
jpegSWRev = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jpegSWRev.setStatus('mandatory')
if mibBuilder.loadTexts: jpegSWRev.setDescription('JPEG Code Revision')
vidInJpeg = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2))).clone('start')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInJpeg.setStatus('mandatory')
if mibBuilder.loadTexts: vidInJpeg.setDescription('M-JPEG LIM Video Input JPEG mode')
vidInRate = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("mbps25", 1), ("mbps20", 2), ("mbps15", 3), ("mbps10", 4), ("mbps5", 5))).clone('mbps20')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInRate.setStatus('mandatory')
if mibBuilder.loadTexts: vidInRate.setDescription('M-JPEG LIM Video Input Channel Bit Rate')
vidInProvMode = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInProvMode.setStatus('mandatory')
if mibBuilder.loadTexts: vidInProvMode.setDescription('M-JPEG LIM Video Input Provisioning Mode')
vidInFrameRate = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("full", 1))).clone('full')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: vidInFrameRate.setDescription('M-JPEG LIM Video Input Frame Rate')
vidInWindowSize = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full-screen", 1), ("constrained", 2))).clone('full-screen')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: vidInWindowSize.setDescription('M-JPEG LIM Video Input Window size')
vidInQuanFactor = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 100)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInQuanFactor.setStatus('mandatory')
if mibBuilder.loadTexts: vidInQuanFactor.setDescription('M-JPEG LIM Video Input Quantization factor')
vidInTransMode = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbr", 1), ("capped-vbr", 2))).clone('cbr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInTransMode.setStatus('mandatory')
if mibBuilder.loadTexts: vidInTransMode.setDescription('M-JPEG LIM Video Input Transmit Mode')
vidInStand = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ntsc", 1), ("pal", 2))).clone('ntsc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInStand.setStatus('mandatory')
if mibBuilder.loadTexts: vidInStand.setDescription('M-JPEG LIM Video Input Standard')
vidInVcrMode = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInVcrMode.setStatus('mandatory')
if mibBuilder.loadTexts: vidInVcrMode.setDescription('M-JPEG LIM Video Input VCR mode')
vidInAnLpbk = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInAnLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: vidInAnLpbk.setDescription('M-JPEG LIM Video Input Analog Loopback')
vidInTest = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInTest.setStatus('mandatory')
if mibBuilder.loadTexts: vidInTest.setDescription('M-JPEG LIM Video Input Test Pattern')
vidInState = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("init", 1), ("idle", 2), ("start", 3), ("working", 4), ("terminate", 5), ("fault", 6))).clone('init')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInState.setStatus('mandatory')
if mibBuilder.loadTexts: vidInState.setDescription('M-JPEG LIM Video Input State')
vidInPres = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInPres.setStatus('mandatory')
if mibBuilder.loadTexts: vidInPres.setDescription('M-JPEG LIM Video Input Present Indicator')
vidInCurQFactor = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInCurQFactor.setStatus('mandatory')
if mibBuilder.loadTexts: vidInCurQFactor.setDescription('M-JPEG LIM Video Input Current Quality Factor')
vidInCurFrameRate = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInCurFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: vidInCurFrameRate.setDescription('M-JPEG LIM Video Input Current Frame Rate')
vidInAvgBitRate = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInAvgBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: vidInAvgBitRate.setDescription('M-JPEG LIM Video Input Average Bitrate (Mpbs)')
vidInPeakBitRate = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInPeakBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: vidInPeakBitRate.setDescription('M-JPEG LIM Video Input Peak Bitrate (Mbps)')
vidInSubSample = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInSubSample.setStatus('mandatory')
if mibBuilder.loadTexts: vidInSubSample.setDescription('M-JPEG LIM Video Input Field Subsample Status')
vidInCompCnt = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInCompCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vidInCompCnt.setDescription('M-JPEG LIM Video Input Compressed Packet Count')
vidInSkipCnt = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInSkipCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vidInSkipCnt.setDescription('M-JPEG LIM Video Input Skipped Packet Count')
vidInBuffOvf = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInBuffOvf.setStatus('mandatory')
if mibBuilder.loadTexts: vidInBuffOvf.setDescription('M-JPEG LIM Video Input Buffer Controller Overflow Count')
vidInImageErr = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInImageErr.setStatus('mandatory')
if mibBuilder.loadTexts: vidInImageErr.setDescription('M-JPEG LIM Video Input JPEG Chip FIFO Overflow')
vidInFldSynErr = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInFldSynErr.setStatus('mandatory')
if mibBuilder.loadTexts: vidInFldSynErr.setDescription('M-JPEG LIM Video Input Field Synchronization Errors')
vidInCompErr = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInCompErr.setStatus('mandatory')
if mibBuilder.loadTexts: vidInCompErr.setDescription('M-JPEG LIM Video Input Compression Errors')
vidInBufLevel = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInBufLevel.setStatus('mandatory')
if mibBuilder.loadTexts: vidInBufLevel.setDescription('M-JPEG LIM Video Input Buffer Fill Level (%)')
vidInFailReason = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("ccube", 2), ("timeout", 3), ("channel", 4), ("xilinx", 5), ("badparms", 6), ("algorithm", 7))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInFailReason.setStatus('mandatory')
if mibBuilder.loadTexts: vidInFailReason.setDescription('M-JPEG LIM Video Input Fail Reason')
vidOutJpeg = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2))).clone('start')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidOutJpeg.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutJpeg.setDescription('M-JPEG LIM Video Output JPEG Mode')
vidOutStand = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 25, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ntsc", 1), ("pal", 2), ("auto-sel", 3))).clone('ntsc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidOutStand.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutStand.setDescription('M-JPEG LIM Video Output Standard')
vidOutSource = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 25, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("genlock", 1), ("through", 2), ("free", 3))).clone('through')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidOutSource.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutSource.setDescription('M-JPEG LIM Video Output Timing Source')
vidOutUnLpb = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 25, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidOutUnLpb.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutUnLpb.setDescription('M-JPEG LIM Video Output Uncompressed Loopback')
vidOutIdleSrc = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 25, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("black", 1), ("color", 2))).clone('black')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidOutIdleSrc.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutIdleSrc.setDescription('M-JPEG LIM Video Output Idle Source')
vidOutChnlLpbk = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 25, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidOutChnlLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutChnlLpbk.setDescription('M-JPEG LIM Video Output Channel Loopback')
vidOutState = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("init", 1), ("idle", 2), ("start", 3), ("working", 4), ("terminate", 5), ("fault", 6))).clone('init')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutState.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutState.setDescription('M-JPEG LIM Video Output state')
vidOutRate = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutRate.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutRate.setDescription('M-JPEG LIM Video Output Bitrate (Mbps)')
vidOutFrameRate = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutFrameRate.setDescription('M-JPEG LIM Video Output Frame Rate')
vidOutWindowWidth = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutWindowWidth.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutWindowWidth.setDescription('M-JPEG LIM Video Output Window Width')
vidOutWindowHeight = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutWindowHeight.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutWindowHeight.setDescription('M-JPEG LIM Video Output Window Height')
vidOutChnlLock = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutChnlLock.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutChnlLock.setDescription('M-JPEG LIM Video Output Channel Lock Indicator')
vidOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutPackets.setDescription('M-JPEG LIM Video Output Packets Received Count')
vidOutPlayed = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutPlayed.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutPlayed.setDescription('M-JPEG LIM Video Output Packets Played Count')
vidOutSkipped = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutSkipped.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutSkipped.setDescription('M-JPEG LIM Video Output Skipped Packet Count')
vidOutChnlErr = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutChnlErr.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutChnlErr.setDescription('M-JPEG LIM Video Output Channel Error Count')
vidOutBuffOvf = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutBuffOvf.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutBuffOvf.setDescription('M-JPEG LIM Video Output Buffer Controller Overflow Count')
vidOutImageErr = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutImageErr.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutImageErr.setDescription('M-JPEG LIM Video Output JPEG Chip Error Count')
vidOutSeqnoErr = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutSeqnoErr.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutSeqnoErr.setDescription('M-JPEG LIM Video Output Packet Sequence Number Error Count')
vidOutCurrQFactor = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutCurrQFactor.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutCurrQFactor.setDescription('M-JPEG LIM Video Output Current JPEG Quantization Factor')
vidOutStdStat = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ntsc", 1), ("pal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutStdStat.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutStdStat.setDescription('M-JPEG LIM Video Output Standard Status')
vidOutBuffLevel = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutBuffLevel.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutBuffLevel.setDescription('M-JPEG LIM Video Output Buffer Fill Level (%)')
vidOutPktsInBuff = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutPktsInBuff.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutPktsInBuff.setDescription('M-JPEG LIM Video Output Packets in Buffer')
vidOutFailReason = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("ccube", 2), ("timeout", 3), ("channel", 4), ("xilinx", 5), ("badparms", 6), ("algorithm", 7))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutFailReason.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutFailReason.setDescription('M-JPEG LIM Video Output Fail Reason')
vidOutSrcSts = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("genlock", 1), ("through", 2), ("free", 3))).clone('genlock')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutSrcSts.setStatus('mandatory')
if mibBuilder.loadTexts: vidOutSrcSts.setDescription('M-JPEG LIM Video Output Timing Source Status')
audInLoopBack = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 28, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audInLoopBack.setStatus('mandatory')
if mibBuilder.loadTexts: audInLoopBack.setDescription('M-JPEG LIM Audio Input LoopBack Mode')
audOutMute = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 29, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audOutMute.setStatus('mandatory')
if mibBuilder.loadTexts: audOutMute.setDescription('M-JPEG LIM Audio Output Mute Control')
audOutDigLpbk = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 29, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audOutDigLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: audOutDigLpbk.setDescription('M-JPEG LIM Audio Digital Loopback')
audOutLock = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 31, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: audOutLock.setStatus('mandatory')
if mibBuilder.loadTexts: audOutLock.setDescription('M-JPEG LIM Audio Output Channel Lock Indicator')
audOutMuteStat = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 31, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audOutMuteStat.setStatus('mandatory')
if mibBuilder.loadTexts: audOutMuteStat.setDescription('M-JPEG LIM Audio Output Mute Status')
dataIp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 32, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataIp.setStatus('mandatory')
if mibBuilder.loadTexts: dataIp.setDescription('IP address of Data Channel.')
dataMask = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 32, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataMask.setStatus('mandatory')
if mibBuilder.loadTexts: dataMask.setDescription(' Network Mask for Data Channel.')
dataRemoteIp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 32, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataRemoteIp.setStatus('mandatory')
if mibBuilder.loadTexts: dataRemoteIp.setDescription('IP address of remote end of Data Channel.')
limHostRev = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limHostRev.setStatus('mandatory')
if mibBuilder.loadTexts: limHostRev.setDescription('Host S/W Revision')
limBootRev = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limBootRev.setStatus('mandatory')
if mibBuilder.loadTexts: limBootRev.setDescription('Boot S/W Revision')
limHwRev = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limHwRev.setStatus('mandatory')
if mibBuilder.loadTexts: limHwRev.setDescription('Hardware Architecture')
limAction = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("reset", 2), ("test", 3), ("mtce", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limAction.setStatus('mandatory')
if mibBuilder.loadTexts: limAction.setDescription('LIM action')
limState = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("init", 1), ("testing", 2), ("idle", 3), ("start", 4), ("working", 5), ("terminate", 6), ("fault", 7), ("mtce", 8), ("loading", 9), ("await-framing", 10))).clone('init')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limState.setStatus('mandatory')
if mibBuilder.loadTexts: limState.setDescription('LIM state')
limFault = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limFault.setStatus('mandatory')
if mibBuilder.loadTexts: limFault.setDescription('LIM Fault LED')
limFaultReason = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("bad-rev", 2), ("hw-fault", 3), ("memory", 4), ("fileio", 5), ("codec-section", 6), ("sw-error", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limFaultReason.setStatus('mandatory')
if mibBuilder.loadTexts: limFaultReason.setDescription('LIM Fault Reason')
limCodec0 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limCodec0.setStatus('mandatory')
if mibBuilder.loadTexts: limCodec0.setDescription('H.320 Codec 0 Active LED')
limCodec1 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('on')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limCodec1.setStatus('mandatory')
if mibBuilder.loadTexts: limCodec1.setDescription('H.320 Codec 1 Active LED')
limSCmgmt = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limSCmgmt.setStatus('mandatory')
if mibBuilder.loadTexts: limSCmgmt.setDescription('Slot Controller Mgmt Link Status')
limSCmgmtData = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("start", 2), ("continue", 3), ("end", 4), ("ack", 5), ("aborted", 6), ("error", 7))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limSCmgmtData.setStatus('mandatory')
if mibBuilder.loadTexts: limSCmgmtData.setDescription('Slot Controller Mgmt Information Data State')
limSCfileXferReq = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("vh320-cod", 2), ("vhdev-cod", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limSCfileXferReq.setStatus('mandatory')
if mibBuilder.loadTexts: limSCfileXferReq.setDescription('Slot Controller Mgmt File Transfer Request')
limSCfileXferStat = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("start", 2), ("continue", 3), ("end", 4), ("ack", 5), ("aborted", 6), ("error", 7))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limSCfileXferStat.setStatus('mandatory')
if mibBuilder.loadTexts: limSCfileXferStat.setDescription('Slot Controller Mgmt File Transfer State')
limSCbytes = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: limSCbytes.setStatus('mandatory')
if mibBuilder.loadTexts: limSCbytes.setDescription('Slot Controller Mgmt File Transfer Byte Count')
ctrlTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1), )
if mibBuilder.loadTexts: ctrlTable.setStatus('mandatory')
ctrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1), ).setIndexNames((0, "DV2-MIB", "ctrlIndex"))
if mibBuilder.loadTexts: ctrlEntry.setStatus('mandatory')
ctrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlIndex.setDescription('Codec Index')
ctrlCodecType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("h320", 1))).clone('h320')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlCodecType.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlCodecType.setDescription('Codec Type')
ctrlCodecAction = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("reset", 2), ("test", 3), ("mtce", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlCodecAction.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlCodecAction.setDescription('Codec Action')
ctrlCodecReq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connect", 1), ("disconnect", 2))).clone('connect')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlCodecReq.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlCodecReq.setDescription('Codec Request')
ctrlCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("h0", 1))).clone('h0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlCallType.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlCallType.setDescription('Codec Call Type')
ctrlCodecSta = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("init", 1), ("testing", 2), ("idle", 3), ("start", 4), ("working", 5), ("terminate", 6), ("fault", 7), ("mtce", 8), ("loading", 9), ("await-framing", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlCodecSta.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlCodecSta.setDescription('Codec Status')
ctrlChnlLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("to-other", 2), ("to-self", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlChnlLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlChnlLpbk.setDescription('Codec Channel Loopback')
ctrlFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlFraming.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlFraming.setDescription('Codec H.221 Framing Detected')
ctrlChnlStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("idle", 2), ("up", 3), ("loopback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlChnlStat.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlChnlStat.setDescription('Codec Channel Link Status')
ctrlFaultReason = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("host", 2), ("video", 3), ("audio", 4), ("data", 5), ("fileio", 6), ("mem", 7), ("h221", 8), ("h242", 9), ("tdm", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlFaultReason.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlFaultReason.setDescription('Codec Fault Reason')
vidTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2), )
if mibBuilder.loadTexts: vidTable.setStatus('mandatory')
vidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1), ).setIndexNames((0, "DV2-MIB", "vidIndex"))
if mibBuilder.loadTexts: vidEntry.setStatus('mandatory')
vidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vidIndex.setDescription('VH320 Codec Index')
vidStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ntsc", 1), ("pal", 2))).clone('ntsc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidStandard.setStatus('mandatory')
if mibBuilder.loadTexts: vidStandard.setDescription('VH320 Analog Video I/O Standard')
vidTxVidReq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("freeze", 2), ("mute", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidTxVidReq.setStatus('mandatory')
if mibBuilder.loadTexts: vidTxVidReq.setDescription('VH320 Transmit Video Request')
vidRxVidReq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("freeze", 2), ("mute", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidRxVidReq.setStatus('mandatory')
if mibBuilder.loadTexts: vidRxVidReq.setDescription('VH320 Display Video Request')
vidViewPip = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidViewPip.setStatus('mandatory')
if mibBuilder.loadTexts: vidViewPip.setDescription('VH320 View Self Picture in Picture')
vidCompQual = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("best-picture", 1), ("best-motion", 2))).clone('best-picture')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidCompQual.setStatus('mandatory')
if mibBuilder.loadTexts: vidCompQual.setDescription('VH320 Compression Quality')
vidDigLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidDigLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: vidDigLpbk.setDescription('VH320 Digital Loopback')
vidEncFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidEncFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: vidEncFrameCount.setDescription('VH320 Video Encoded Frame Count')
vidDecFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidDecFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: vidDecFrameCount.setDescription('VH320 Video Decoded Frame Count')
vidState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("init", 1), ("diag", 2), ("idle", 3), ("start", 4), ("working", 5), ("terminate", 6), ("fault", 7))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidState.setStatus('mandatory')
if mibBuilder.loadTexts: vidState.setDescription('VH320 Video State')
vidInPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInPresent.setStatus('mandatory')
if mibBuilder.loadTexts: vidInPresent.setDescription('VH320 Video Input Present')
vidEncBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidEncBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: vidEncBitRate.setDescription('VH320 Encoded Bitrate (bps)')
audTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3), )
if mibBuilder.loadTexts: audTable.setStatus('mandatory')
audEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1), ).setIndexNames((0, "DV2-MIB", "audIndex"))
if mibBuilder.loadTexts: audEntry.setStatus('mandatory')
audIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audIndex.setStatus('mandatory')
if mibBuilder.loadTexts: audIndex.setDescription('VH320 Codec Index')
audState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("init", 1), ("testing", 2), ("idle", 3), ("start", 4), ("working", 5), ("terminate", 6), ("fault", 7), ("mtce", 8), ("loading", 9), ("await-framing", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audState.setStatus('mandatory')
if mibBuilder.loadTexts: audState.setDescription('VH320 Audio State')
audPrefMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("u-law", 1), ("a-law", 2), ("g722", 3), ("g728", 4))).clone('g722')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audPrefMode.setStatus('mandatory')
if mibBuilder.loadTexts: audPrefMode.setDescription('VH320 Audio Preferred Coding Mode')
audCommMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("u-law", 1), ("a-law", 2), ("g722", 3), ("g728", 4))).clone('g722')).setMaxAccess("readonly")
if mibBuilder.loadTexts: audCommMode.setStatus('mandatory')
if mibBuilder.loadTexts: audCommMode.setDescription('VH320 Audio Common Coding Mode')
audBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: audBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: audBitRate.setDescription('VH320 Audio Bit Rate (bps)')
audMuteInReq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audMuteInReq.setStatus('mandatory')
if mibBuilder.loadTexts: audMuteInReq.setDescription('VH320 Audio Mute Input Request')
audMuteOutReq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audMuteOutReq.setStatus('mandatory')
if mibBuilder.loadTexts: audMuteOutReq.setDescription('VH320 Audio Mute Output Request')
audMuteOutStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audMuteOutStat.setStatus('mandatory')
if mibBuilder.loadTexts: audMuteOutStat.setDescription('VH320 Audio Mute Output Status')
audLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("analog-in", 2), ("digital-in", 3), ("compress-in", 4), ("analog-out", 5), ("digital-out", 6), ("compress-out", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: audLpbk.setDescription('VH320 Audio Loopback Request')
audInVol = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audInVol.setStatus('mandatory')
if mibBuilder.loadTexts: audInVol.setDescription('VH320 Audio Input Volume')
audOutVol = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audOutVol.setStatus('mandatory')
if mibBuilder.loadTexts: audOutVol.setDescription('VH320 Audio Output Volume')
audInDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audInDelay.setStatus('mandatory')
if mibBuilder.loadTexts: audInDelay.setDescription('VH320 Audio Input Delay Request (ms)')
audOutDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audOutDelay.setStatus('mandatory')
if mibBuilder.loadTexts: audOutDelay.setDescription('VH320 Audio Output Delay Status (ms)')
audFaultReason = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("mem", 2), ("self-test", 3), ("download", 4), ("loopback", 5), ("dsp", 6))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: audFaultReason.setStatus('mandatory')
if mibBuilder.loadTexts: audFaultReason.setDescription('VH320 Audio Fault Reason')
dataTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4), )
if mibBuilder.loadTexts: dataTable.setStatus('mandatory')
dataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1), ).setIndexNames((0, "DV2-MIB", "dataIndex"))
if mibBuilder.loadTexts: dataEntry.setStatus('mandatory')
dataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dataIndex.setDescription('VH320 Codec Index')
dataChnlType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lsd", 1), ("hsd", 2), ("mlp", 3), ("hmlp", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataChnlType.setStatus('mandatory')
if mibBuilder.loadTexts: dataChnlType.setDescription('Data Channel Type')
dataPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("baud-2400", 1), ("baud-9600", 2), ("baud-19200", 3), ("baud-38400", 4))).clone('baud-38400')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dataPortSpeed.setDescription('Data Port Speed (bps)')
dataPortProt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("async", 1), ("hdlc", 2))).clone('async')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortProt.setStatus('mandatory')
if mibBuilder.loadTexts: dataPortProt.setDescription('Data Port Protocol')
dataHDLCcheck = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataHDLCcheck.setStatus('mandatory')
if mibBuilder.loadTexts: dataHDLCcheck.setDescription('HDLC Check CRC')
dataChnlStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataChnlStat.setStatus('mandatory')
if mibBuilder.loadTexts: dataChnlStat.setDescription('Data Channel Status')
dataBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataBytesRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: dataBytesRcvd.setDescription('Data Channel Bytes Received')
dataBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataBytesSent.setStatus('mandatory')
if mibBuilder.loadTexts: dataBytesSent.setDescription('Data Channel Bytes Sent')
dataResetStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataResetStat.setStatus('mandatory')
if mibBuilder.loadTexts: dataResetStat.setDescription('Data Channel Reset Statistics')
mgmtTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1), )
if mibBuilder.loadTexts: mgmtTable.setStatus('mandatory')
mgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1), ).setIndexNames((0, "DV2-MIB", "mgmtIndex"))
if mibBuilder.loadTexts: mgmtEntry.setStatus('mandatory')
mgmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mgmtIndex.setDescription('VH320 Management Port Index')
mgmtDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtDescr.setStatus('mandatory')
if mibBuilder.loadTexts: mgmtDescr.setDescription(' VH320 Management Port Descriptor')
mgmtPortProt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("async", 1), ("slip", 2))).clone('async')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortProt.setStatus('mandatory')
if mibBuilder.loadTexts: mgmtPortProt.setDescription('Management Port Protocol')
mgmtPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("serial-200", 1), ("baud-2400", 2), ("baud-9600", 3), ("baud-19200", 4), ("baud-38400", 5))).clone('baud-38400')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: mgmtPortSpeed.setDescription('Management Port Speed (bps)')
mgmtPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mgmtPortAddress.setDescription('Management Port Address')
mgmtAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtAddressMask.setStatus('mandatory')
if mibBuilder.loadTexts: mgmtAddressMask.setDescription('Management Port Address Mask')
mgmtRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mgmtRemoteAddress.setDescription('Management Remote Address')
mgmtPortStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtPortStat.setStatus('mandatory')
if mibBuilder.loadTexts: mgmtPortStat.setDescription('Management Port Status')
mgmtBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtBytesRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: mgmtBytesRcvd.setDescription('Management Bytes Received')
mgmtBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtBytesSent.setStatus('mandatory')
if mibBuilder.loadTexts: mgmtBytesSent.setDescription('Management Bytes Sent')
mgmtResetStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtResetStat.setStatus('mandatory')
if mibBuilder.loadTexts: mgmtResetStat.setDescription('Management Reset Statistics')
oamTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1), )
if mibBuilder.loadTexts: oamTable.setStatus('mandatory')
if mibBuilder.loadTexts: oamTable.setDescription('This table is used for per-port OAM configuration.')
oamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1), ).setIndexNames((0, "DV2-MIB", "oamLinkNo"))
if mibBuilder.loadTexts: oamEntry.setStatus('mandatory')
oamLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: oamLinkNo.setDescription('The link number for this configuration.')
oamSegEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamSegEndPoint.setStatus('mandatory')
if mibBuilder.loadTexts: oamSegEndPoint.setDescription('Set to yes(1) to configure the link as segment end point.')
oamVcEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcEndPoint.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcEndPoint.setDescription('Set to yes(1) to configure the link as connection end point.')
oamAisRdiGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamAisRdiGeneration.setStatus('mandatory')
if mibBuilder.loadTexts: oamAisRdiGeneration.setDescription('Set to yes(1) to generate AIS/RDI up on physical failure.')
oamLastRxType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 10))).clone(namedValues=NamedValues(("ais", 1), ("rdi", 2), ("loopback", 3), ("continuity-check", 4), ("performance-monitoring", 5), ("unsupported", 6), ("none", 10))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLastRxType.setStatus('mandatory')
if mibBuilder.loadTexts: oamLastRxType.setDescription('Type of the last received OAM cell.')
oamLastRxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 6), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLastRxVpi.setStatus('mandatory')
if mibBuilder.loadTexts: oamLastRxVpi.setDescription('VPI value of the last received OAM cell.')
oamLastRxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 7), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLastRxVci.setStatus('mandatory')
if mibBuilder.loadTexts: oamLastRxVci.setDescription('VCI value of the last received OAM cell.')
oamRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamRxCount.setStatus('mandatory')
if mibBuilder.loadTexts: oamRxCount.setDescription('Sum of received OAM cells.')
oamLastTxType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 10))).clone(namedValues=NamedValues(("ais", 1), ("rdi", 2), ("loopback", 3), ("continuity-check", 4), ("performance-monitoring", 5), ("unsupported", 6), ("none", 10))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLastTxType.setStatus('mandatory')
if mibBuilder.loadTexts: oamLastTxType.setDescription('Type of the last transmitted OAM cell.')
oamLastTxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 10), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLastTxVpi.setStatus('mandatory')
if mibBuilder.loadTexts: oamLastTxVpi.setDescription('VPI value of the last transmitted OAM cell.')
oamLastTxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 11), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLastTxVci.setStatus('mandatory')
if mibBuilder.loadTexts: oamLastTxVci.setDescription('VCI value of the last transmitted OAM cell.')
oamTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamTxCount.setStatus('mandatory')
if mibBuilder.loadTexts: oamTxCount.setDescription('Sum of transmitted OAM cells.')
oamClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamClearStats.setStatus('mandatory')
if mibBuilder.loadTexts: oamClearStats.setDescription('Set to yes(2) to clear OAM Tx and Rx Statistics.')
oamLoopbackTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2), )
if mibBuilder.loadTexts: oamLoopbackTable.setStatus('mandatory')
if mibBuilder.loadTexts: oamLoopbackTable.setDescription('This table is used to configure and control loopback test. Change Test Status to Start Test(1) to initiate loopback test.')
oamLoopbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1), ).setIndexNames((0, "DV2-MIB", "oamLoopbackLinkNo"))
if mibBuilder.loadTexts: oamLoopbackEntry.setStatus('mandatory')
oamLoopbackLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLoopbackLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: oamLoopbackLinkNo.setDescription('The link number for this configuration.')
oamLoopbackVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 2), VirtualPathIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamLoopbackVpi.setStatus('mandatory')
if mibBuilder.loadTexts: oamLoopbackVpi.setDescription('VPI value for the loopback cells to send.')
oamLoopbackVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 3), VirtualCircuitIdentifier().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamLoopbackVci.setStatus('mandatory')
if mibBuilder.loadTexts: oamLoopbackVci.setDescription('VCI value for the loopback cells to send.')
oamLoopbackSpan = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6))).clone(namedValues=NamedValues(("segment", 4), ("end-to-end", 5), ("location-id", 6))).clone('segment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamLoopbackSpan.setStatus('mandatory')
if mibBuilder.loadTexts: oamLoopbackSpan.setDescription('Flow span for the loopback cells to send.')
oamLoopbackMaxNumCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamLoopbackMaxNumCells.setStatus('mandatory')
if mibBuilder.loadTexts: oamLoopbackMaxNumCells.setDescription('Maximum number of loopback cells to send.')
oamLoopbackNumCellsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLoopbackNumCellsSent.setStatus('mandatory')
if mibBuilder.loadTexts: oamLoopbackNumCellsSent.setDescription('Number of loopback cells sent.')
oamLoopbackTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamLoopbackTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: oamLoopbackTimeOut.setDescription('Number of seconds to wait for loopback cells to return.')
oamLoopbackActive = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("start-test", 1), ("complete", 2), ("idle", 3), ("under-test", 4))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamLoopbackActive.setStatus('mandatory')
if mibBuilder.loadTexts: oamLoopbackActive.setDescription('Change to Start Test to run loopback test.')
oamLoopbackResult = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pass", 1), ("fail", 2), ("physical-loopback-detected", 3), ("unknown", 4), ("vpi-range-error", 5), ("vp-is-invalid", 6), ("vci-range-error", 7), ("vci-and-span-mismatch", 8), ("vpc-not-established", 9), ("vcc-not-established", 10))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLoopbackResult.setStatus('mandatory')
if mibBuilder.loadTexts: oamLoopbackResult.setDescription('Loopback test result.')
oamLoopbackLocId = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamLoopbackLocId.setStatus('mandatory')
if mibBuilder.loadTexts: oamLoopbackLocId.setDescription('Location Node ID for loopback point.')
oamDisable = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamDisable.setStatus('mandatory')
if mibBuilder.loadTexts: oamDisable.setDescription('yes(2) will disable the oam for entire slot.')
oamVcaTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4), )
if mibBuilder.loadTexts: oamVcaTable.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcaTable.setDescription('This table is used for per-port OAM configuration.')
oamVcaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1), ).setIndexNames((0, "DV2-MIB", "oamVcaVpi"), (0, "DV2-MIB", "oamVcaVci"))
if mibBuilder.loadTexts: oamVcaEntry.setStatus('mandatory')
oamVcaVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 1), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaVpi.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcaVpi.setDescription('The VPI for this configuration.')
oamVcaVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 2), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaVci.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcaVci.setDescription('The VCI for this configuration.')
oamVcaConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connection-point", 1), ("segment-endpoint", 2), ("end-to-end-endpoint", 3), ("pass-thru", 4))).clone('connection-point')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcaConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcaConnectionType.setDescription('Set End point configuration on hardware per VPC/VCC')
oamVcaVpcEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcaVpcEndPoint.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcaVpcEndPoint.setDescription('Set yes(1) to configure the VC to VPC end point.')
oamVcaAisRdiGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcaAisRdiGeneration.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcaAisRdiGeneration.setDescription('AIS/RDI disable or enable with or without traps.')
oamVcaAisRdiState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ais", 2), ("rdi", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaAisRdiState.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcaAisRdiState.setDescription('AIS/RDI state for this VP/VC.')
oamVcaDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("link-down", 2), ("loss-of-continuity", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaDefectType.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcaDefectType.setDescription('AIS/RDI defect type.')
oamVcaDefectNode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaDefectNode.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcaDefectNode.setDescription('AIS/RDI location.')
oamVcaDefectSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaDefectSlot.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcaDefectSlot.setDescription('AIS/RDI location.')
oamVcaDefectLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaDefectLink.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcaDefectLink.setDescription('AIS/RDI location.')
oamVcaTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcaTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcaTrapEnable.setDescription('Set enable to generate trap when AIS/RDI received.')
oamVcaCC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("act-source-seg-cell", 2), ("act-source-ee-cell", 3), ("act-sink-seg-cell", 4), ("act-sink-ee-cell", 5), ("act-bidir-seg-cell", 6), ("act-bidir-ee-cell", 7), ("act-source-seg-manual", 8), ("act-source-ee-manual", 9), ("act-sink-seg-manual", 10), ("act-sink-ee-manual", 11), ("act-bidir-seg-manual", 12), ("act-bidir-ee-manual", 13))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcaCC.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcaCC.setDescription('Activate segment or end to end Continuity Checks.')
oamVcaCCState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("not-supported", 1), ("ready", 2), ("wait-act-con", 3), ("wait-act-res", 4), ("wait-deact-con", 5), ("active-cell", 6), ("active-manual", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaCCState.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcaCCState.setDescription('Continuity Check state.')
oamVcaPM = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("act-source-seg-cell", 2), ("act-source-ee-cell", 3), ("act-sink-seg-cell", 4), ("act-sink-ee-cell", 5), ("act-source-seg-manual", 6), ("act-source-ee-manual", 7), ("act-sink-seg-manual", 8), ("act-sink-ee-manual", 9))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcaPM.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcaPM.setDescription('Activate segment or end to end Performance Monitoring.')
oamVcaPMBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("size128", 1), ("size256", 2), ("size512", 3), ("size1024", 4))).clone('size128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcaPMBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcaPMBlockSize.setDescription('Performance Monitoring block size.')
oamVcaPMState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("not-supported", 1), ("ready", 2), ("wait-act-con", 3), ("wait-act-res", 4), ("wait-deact-con", 5), ("active-cell", 6), ("active-manual", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaPMState.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcaPMState.setDescription('Continuity Check state.')
oamVcaBkwRptLosCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaBkwRptLosCells.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcaBkwRptLosCells.setDescription('Backward Reporting loss of cell.')
oamVcaBkwRptMisCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaBkwRptMisCells.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcaBkwRptMisCells.setDescription('Backward Reporting misinserted cell.')
oamVcaBkwRptBip16 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaBkwRptBip16.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcaBkwRptBip16.setDescription('Backward Reporting BIP-16 violations.')
oamVcaBkwRptSevErr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaBkwRptSevErr.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcaBkwRptSevErr.setDescription('Backward Reporting Severly Errored Cells.')
oamVcbTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5), )
if mibBuilder.loadTexts: oamVcbTable.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcbTable.setDescription('This table is used for per-port OAM configuration.')
oamVcbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1), ).setIndexNames((0, "DV2-MIB", "oamVcbVpi"), (0, "DV2-MIB", "oamVcbVci"))
if mibBuilder.loadTexts: oamVcbEntry.setStatus('mandatory')
oamVcbVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 1), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbVpi.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcbVpi.setDescription('The VPI for this configuration.')
oamVcbVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 2), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbVci.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcbVci.setDescription('The VCI for this configuration.')
oamVcbConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connection-point", 1), ("segment-endpoint", 2), ("end-to-end-endpoint", 3), ("pass-thru", 4))).clone('connection-point')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcbConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcbConnectionType.setDescription('Set End point configuration on hardware per VPC/VCC')
oamVcbVpcEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcbVpcEndPoint.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcbVpcEndPoint.setDescription('Set yes(1) to configure the VC to VPC end point.')
oamVcbAisRdiGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcbAisRdiGeneration.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcbAisRdiGeneration.setDescription('AIS/RDI disable or enable with or without traps.')
oamVcbAisRdiState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ais", 2), ("rdi", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbAisRdiState.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcbAisRdiState.setDescription('AIS/RDI state for this VP/VC.')
oamVcbDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("link-down", 2), ("loss-of-continuity", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbDefectType.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcbDefectType.setDescription('AIS/RDI defect type.')
oamVcbDefectNode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbDefectNode.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcbDefectNode.setDescription('AIS/RDI location.')
oamVcbDefectSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbDefectSlot.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcbDefectSlot.setDescription('AIS/RDI location.')
oamVcbDefectLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbDefectLink.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcbDefectLink.setDescription('AIS/RDI location.')
oamVcbTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcbTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcbTrapEnable.setDescription('Set enable to generate trap when AIS/RDI received.')
oamVcbCC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("act-source-seg-cell", 2), ("act-source-ee-cell", 3), ("act-sink-seg-cell", 4), ("act-sink-ee-cell", 5), ("act-bidir-seg-cell", 6), ("act-bidir-ee-cell", 7), ("act-source-seg-manual", 8), ("act-source-ee-manual", 9), ("act-sink-seg-manual", 10), ("act-sink-ee-manual", 11), ("act-bidir-seg-manual", 12), ("act-bidir-ee-manual", 13))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcbCC.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcbCC.setDescription('Activate segment or end to end Continuity Checks.')
oamVcbCCState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("not-supported", 1), ("ready", 2), ("wait-act-con", 3), ("wait-act-res", 4), ("wait-deact-con", 5), ("active-cell", 6), ("active-manual", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbCCState.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcbCCState.setDescription('Continuity Check state.')
oamVcbPM = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("act-source-seg-cell", 2), ("act-source-ee-cell", 3), ("act-sink-seg-cell", 4), ("act-sink-ee-cell", 5), ("act-source-seg-manual", 6), ("act-source-ee-manual", 7), ("act-sink-seg-manual", 8), ("act-sink-ee-manual", 9))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcbPM.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcbPM.setDescription('Activate segment or end to end Performance Monitoring.')
oamVcbPMBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("size128", 1), ("size256", 2), ("size512", 3), ("size1024", 4))).clone('size128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcbPMBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcbPMBlockSize.setDescription('Performance Monitoring block size.')
oamVcbPMState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("not-supported", 1), ("ready", 2), ("wait-act-con", 3), ("wait-act-res", 4), ("wait-deact-con", 5), ("active-cell", 6), ("active-manual", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbPMState.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcbPMState.setDescription('Continuity Check state.')
oamVcbBkwRptLosCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbBkwRptLosCells.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcbBkwRptLosCells.setDescription('Backward Reporting loss of cell.')
oamVcbBkwRptMisCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbBkwRptMisCells.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcbBkwRptMisCells.setDescription('Backward Reporting misinserted cell.')
oamVcbBkwRptBip16 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbBkwRptBip16.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcbBkwRptBip16.setDescription('Backward Reporting BIP-16 violations.')
oamVcbBkwRptSevErr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbBkwRptSevErr.setStatus('mandatory')
if mibBuilder.loadTexts: oamVcbBkwRptSevErr.setDescription('Backward Reporting Severly Errored Cells.')
lmiTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1), )
if mibBuilder.loadTexts: lmiTable.setStatus('mandatory')
if mibBuilder.loadTexts: lmiTable.setDescription('This table is used to control ILMI configuration.')
lmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1), ).setIndexNames((0, "DV2-MIB", "lmiLinkNo"))
if mibBuilder.loadTexts: lmiEntry.setStatus('mandatory')
lmiLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: lmiLinkNo.setDescription('The link number for this configuration.')
lmiVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 2), VirtualPathIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiVpi.setStatus('mandatory')
if mibBuilder.loadTexts: lmiVpi.setDescription('The VPI used for ILMI.')
lmiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 3), VirtualCircuitIdentifier().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiVci.setStatus('mandatory')
if mibBuilder.loadTexts: lmiVci.setDescription('The VCI used for ILMI.')
lmiType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network-side", 1), ("user-side", 2))).clone('network-side')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiType.setStatus('mandatory')
if mibBuilder.loadTexts: lmiType.setDescription('Set to network side (1) to configure the link as network side ILMI.')
lmiState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("initialized", 1), ("connecting", 2), ("registered", 3), ("registering", 4), ("deregistering", 5), ("polling", 6), ("disconnecting", 7))).clone('initialized')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiState.setStatus('mandatory')
if mibBuilder.loadTexts: lmiState.setDescription('The state of ILMI for this link.')
lmiFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nsap-e-164", 1), ("nsap-dcc", 2), ("nsap-icd", 3), ("non-nsap-e-164", 4))).clone('nsap-icd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiFormat.setStatus('mandatory')
if mibBuilder.loadTexts: lmiFormat.setDescription('ILMI address format.')
lmiPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 7), E164SUB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiPrefix.setStatus('mandatory')
if mibBuilder.loadTexts: lmiPrefix.setDescription('Default Network prefix to use.')
lmiOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("re-register", 3))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiOnOff.setStatus('mandatory')
if mibBuilder.loadTexts: lmiOnOff.setDescription('Turn on/off ILMI.')
lmiPollPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiPollPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: lmiPollPeriod.setDescription('Period in seconds to send polling request for link management.')
lmiNoRspDown = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiNoRspDown.setStatus('mandatory')
if mibBuilder.loadTexts: lmiNoRspDown.setDescription('Number of failed polls (no response) before declaration of link down.')
lmiLinkMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiLinkMgmt.setStatus('mandatory')
if mibBuilder.loadTexts: lmiLinkMgmt.setDescription('Turn on/off link management.')
lmiConnectivity = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiConnectivity.setStatus('mandatory')
if mibBuilder.loadTexts: lmiConnectivity.setDescription('ATM interface status.')
lmiPrefixMod = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 13), E164()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiPrefixMod.setStatus('mandatory')
if mibBuilder.loadTexts: lmiPrefixMod.setDescription('Modifiable Network prefix to use. MUST BE 26 DIGITS')
lmiEsi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 14), E164()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiEsi.setStatus('mandatory')
if mibBuilder.loadTexts: lmiEsi.setDescription('ESI field to use on User side. MUST BE 12 DIGITS')
lmiNetSideTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 2), )
if mibBuilder.loadTexts: lmiNetSideTable.setStatus('mandatory')
if mibBuilder.loadTexts: lmiNetSideTable.setDescription('This table is used to configure and control network side ILMI.')
lmiNetSideEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 2, 1), ).setIndexNames((0, "DV2-MIB", "lmiNetSideLinkNo"), (0, "DV2-MIB", "lmiNetSidePrefixId"))
if mibBuilder.loadTexts: lmiNetSideEntry.setStatus('mandatory')
lmiNetSideLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiNetSideLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: lmiNetSideLinkNo.setDescription('The link number for this configuration.')
lmiNetSidePrefixId = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiNetSidePrefixId.setStatus('mandatory')
if mibBuilder.loadTexts: lmiNetSidePrefixId.setDescription('Network prefix identification number.')
lmiNetSidePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 2, 1, 3), E164SUB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiNetSidePrefix.setStatus('mandatory')
if mibBuilder.loadTexts: lmiNetSidePrefix.setDescription('Network prefix to register or de-register.')
lmiNetSidePrefixStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("start-registration", 1), ("start-deregistration", 2), ("valid", 3), ("invalid", 4), ("registered", 5), ("deregistered", 6), ("time-out-failure", 7), ("unknown", 8), ("not-allowed", 9), ("rejected", 10))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiNetSidePrefixStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lmiNetSidePrefixStatus.setDescription('Set to register to send the prefix to the user side; set to de-register to remove the prefix from the user side.')
lmiUserSideTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 3), )
if mibBuilder.loadTexts: lmiUserSideTable.setStatus('mandatory')
if mibBuilder.loadTexts: lmiUserSideTable.setDescription('This table is used to configure and control user side ILMI.')
lmiUserSideEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 3, 1), ).setIndexNames((0, "DV2-MIB", "lmiUserSideLinkNo"), (0, "DV2-MIB", "lmiUserSideAddressId"))
if mibBuilder.loadTexts: lmiUserSideEntry.setStatus('mandatory')
lmiUserSideLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiUserSideLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: lmiUserSideLinkNo.setDescription('The link number for this configuration.')
lmiUserSideAddressId = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiUserSideAddressId.setStatus('mandatory')
if mibBuilder.loadTexts: lmiUserSideAddressId.setDescription('The link number for this configuration.')
lmiUserSideAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 3, 1, 3), E164SUB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiUserSideAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lmiUserSideAddress.setDescription('ATM address to register or de-register.')
lmiUserSideAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("start-registration", 1), ("start-deregistration", 2), ("valid", 3), ("invalid", 4), ("registered", 5), ("deregistered", 6), ("time-out-failure", 7), ("unknown", 8), ("not-allowed", 9), ("rejected", 10))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiUserSideAddressStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lmiUserSideAddressStatus.setDescription('Set to valid to register the address to the network side; set to invalid to de-register the address from the network side.')
alarmNodeCrit = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("crit", 2), ("crit-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNodeCrit.setStatus('mandatory')
if mibBuilder.loadTexts: alarmNodeCrit.setDescription('Node Critical Alarm Status')
alarmNodeMajor = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("maj", 2), ("maj-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNodeMajor.setStatus('mandatory')
if mibBuilder.loadTexts: alarmNodeMajor.setDescription('Node Major Alarm Status')
alarmNodeMinor = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("min", 2), ("min-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNodeMinor.setStatus('mandatory')
if mibBuilder.loadTexts: alarmNodeMinor.setDescription('Node Minor Alarm Status')
alarmStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4), )
if mibBuilder.loadTexts: alarmStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: alarmStatTable.setDescription('This table is used for Alarm Handler status')
alarmStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1), ).setIndexNames((0, "DV2-MIB", "alrStatSlotNo"))
if mibBuilder.loadTexts: alarmStatEntry.setStatus('mandatory')
alrStatSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrStatSlotNo.setStatus('mandatory')
if mibBuilder.loadTexts: alrStatSlotNo.setDescription('Slot Number')
slotCritStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("crit", 2), ("crit-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCritStatus.setStatus('mandatory')
if mibBuilder.loadTexts: slotCritStatus.setDescription('Slot Critical Alarm Status')
slotMajorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("maj", 2), ("maj-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotMajorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: slotMajorStatus.setDescription('Slot Major Alarm Status')
slotMinorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("min", 2), ("min-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotMinorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: slotMinorStatus.setDescription('Slot Minor Alarm Status')
link0CritStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("crit", 2), ("crit-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link0CritStatus.setStatus('mandatory')
if mibBuilder.loadTexts: link0CritStatus.setDescription('Link 0 Critical Alarm Status')
link0MajorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("maj", 2), ("maj-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link0MajorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: link0MajorStatus.setDescription('Link 0 Major Alarm Status')
link0MinorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("min", 2), ("min-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link0MinorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: link0MinorStatus.setDescription('Link 0 Minor Alarm Status')
link1CritStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("crit", 2), ("crit-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link1CritStatus.setStatus('mandatory')
if mibBuilder.loadTexts: link1CritStatus.setDescription('Link 1 Critical Alarm Status')
link1MajorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("maj", 2), ("maj-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link1MajorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: link1MajorStatus.setDescription('Link 1 Major Alarm Status')
link1MinorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("min", 2), ("min-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link1MinorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: link1MinorStatus.setDescription('Link 1 Minor Alarm Status')
link2CritStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("crit", 2), ("crit-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link2CritStatus.setStatus('mandatory')
if mibBuilder.loadTexts: link2CritStatus.setDescription('Link 2 Critical Alarm Status')
link2MajorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("maj", 2), ("maj-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link2MajorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: link2MajorStatus.setDescription('Link 2 Major Alarm Status')
link2MinorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("min", 2), ("min-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link2MinorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: link2MinorStatus.setDescription('Link 2 Minor Alarm Status')
link3CritStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("crit", 2), ("crit-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link3CritStatus.setStatus('mandatory')
if mibBuilder.loadTexts: link3CritStatus.setDescription('Link 3 Critical Alarm Status')
link3MajorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("maj", 2), ("maj-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link3MajorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: link3MajorStatus.setDescription('Link 3 Major Alarm Status')
link3MinorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("min", 2), ("min-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link3MinorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: link3MinorStatus.setDescription('Link 3 Minor Alarm Status')
alarmNodeACO = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmNodeACO.setStatus('mandatory')
if mibBuilder.loadTexts: alarmNodeACO.setDescription('Node ACO Status')
alarmACOTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6), )
if mibBuilder.loadTexts: alarmACOTable.setStatus('mandatory')
if mibBuilder.loadTexts: alarmACOTable.setDescription('This table is used for the Alarm Handler ACO')
alarmACOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6, 1), ).setIndexNames((0, "DV2-MIB", "alrACOslotNo"))
if mibBuilder.loadTexts: alarmACOEntry.setStatus('mandatory')
alrACOslotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrACOslotNo.setStatus('mandatory')
if mibBuilder.loadTexts: alrACOslotNo.setDescription('Slot Number')
alrACOslotACO = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alrACOslotACO.setStatus('mandatory')
if mibBuilder.loadTexts: alrACOslotACO.setDescription('Slot ACO Status')
alrACOlink0ACO = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alrACOlink0ACO.setStatus('mandatory')
if mibBuilder.loadTexts: alrACOlink0ACO.setDescription('Link 0 ACO Status')
alrACOlink1ACO = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alrACOlink1ACO.setStatus('mandatory')
if mibBuilder.loadTexts: alrACOlink1ACO.setDescription('Link 1 ACO Status')
alrACOlink2ACO = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alrACOlink2ACO.setStatus('mandatory')
if mibBuilder.loadTexts: alrACOlink2ACO.setDescription('Link 2 ACO Status')
alrACOlink3ACO = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alrACOlink3ACO.setStatus('mandatory')
if mibBuilder.loadTexts: alrACOlink3ACO.setDescription('Link 3 ACO Status')
userStatusTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7), )
if mibBuilder.loadTexts: userStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: userStatusTable.setDescription('This table is used for the User Status Inputs')
userStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1), ).setIndexNames((0, "DV2-MIB", "userInputNo"))
if mibBuilder.loadTexts: userStatusEntry.setStatus('mandatory')
userInputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userInputNo.setStatus('mandatory')
if mibBuilder.loadTexts: userInputNo.setDescription('User Status Input Number')
userInputEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-applicable", 3))).clone('not-applicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userInputEnable.setStatus('mandatory')
if mibBuilder.loadTexts: userInputEnable.setDescription('Enable User Status Input')
userInputTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userInputTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: userInputTrapEnable.setDescription('Enable User Defined Trap/Event')
userInputTrapDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userInputTrapDesc.setStatus('mandatory')
if mibBuilder.loadTexts: userInputTrapDesc.setDescription('Description string for trap/event')
userInputActiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active-closed", 1), ("active-open", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userInputActiveState.setStatus('mandatory')
if mibBuilder.loadTexts: userInputActiveState.setDescription('Alarm active state of user input relay switch')
userInputAlrClass = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("informational", 4))).clone('informational')).setMaxAccess("readonly")
if mibBuilder.loadTexts: userInputAlrClass.setStatus('mandatory')
if mibBuilder.loadTexts: userInputAlrClass.setDescription('Classification of Status/Alarm Input')
userInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userInputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: userInputStatus.setDescription('Current Status of Status/Alarm Input')
alarmScanFile = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmScanFile.setStatus('mandatory')
if mibBuilder.loadTexts: alarmScanFile.setDescription('Rescan the alr_class.txt file')
cacCurrentEbtId = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacCurrentEbtId.setStatus('mandatory')
if mibBuilder.loadTexts: cacCurrentEbtId.setDescription("Current EBT file ID code. <DETAIL_DESCRIPTION> cacCurrentEbtId holds the EBT file ID code of the EBT file currently in memory in a verified state. The CAC application is responsible for maintaining the state of this variable. If there is a verified EBT in memory cacCurrentEbtId will still hold the EBT file's ID code even if the CAC is disabled or the CAC version is scr-pcr. If there is no EBT in memory or the verification was unsuccessful then the value of cacCurrentEbtId is zero (0).")
cacEbtCommand = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("load-EBT", 2), ("dump-EBT", 3), ("delete-EBT", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacEbtCommand.setStatus('mandatory')
if mibBuilder.loadTexts: cacEbtCommand.setDescription('EBT file command. <DETAIL_DESCRIPTION> This field, normally with the value none, may be set by the manager to: * load-ebt to initiate the loading of a new EBT file into memory. * dump-ebt to initiate the dump of the EBT memory content into flash. * delete-ebt to cause an EBT file to be deleted in the flash. The value of cacEbtCommand will return to none when the EBT file command has been completed.')
cacCommandEbtId = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacCommandEbtId.setStatus('mandatory')
if mibBuilder.loadTexts: cacCommandEbtId.setDescription('Command EBT file ID code. <DETAIL_DESCRIPTION> cacCommandEbtId is written to by the manager to identify the EBT file in the flash that should be loaded or deleted. When the cacEbtCommand MIB item is set to either load-ebt or delete-ebt, the CAC software attempts to load or delete the EBT file named ebXXXXX.bin from flash, where XXXXX is the value cacCommandEbtId padded to five digits with leading zeros. The value zero (0) is not a valid EBT file ID code and is reserved to indicate that EBT file ID code has not been specified.')
cacEbtState = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("uninitialized", 1), ("initializing", 2), ("loading", 3), ("ready", 4), ("unusable", 5))).clone('uninitialized')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacEbtState.setStatus('mandatory')
if mibBuilder.loadTexts: cacEbtState.setDescription('State of the CAC. <DETAIL_DESCRIPTION> The state: * uninitialized is an initial MIB value which is never returned to without starting from a new MIB. * initializing indicates the initial part of the CAC boot. * loading indicates that an EBT file is being loaded. * ready indicates that a valid EBT is in memory. In this state the current EBT file ID code shows the ID code of the EBT in memory. * unusable is reached after an unsuccessful load and indicates that the data in the EBT memory block is unusable (in this state current EBT file ID code shows 0).')
cacErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("no-error", 1), ("nonexistent-file", 2), ("bad-file-length", 3), ("copy-corrupted", 4), ("nunused-cbtdwoebtid", 5), ("nunused-cinvalid", 6), ("nebtid-uninit-cstays", 7), ("ninvalid-cstays", 8), ("ninvalid-cebtid-uninit", 9), ("ninvalid-cinvalid", 10), ("ninvalid-cnoerror", 11), ("link-not-ready", 12), ("link-not-configuring", 13), ("ebt-not-loaded", 14), ("class-not-found", 15), ("dump-fs-error", 16), ("bad-ebt-command", 17), ("delete-fs-error", 18), ("ebt-id-invalid", 19))).clone('no-error')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: cacErrorCode.setDescription("Error code. <DETAIL_DESCRIPTION> Error codes are produced at certain stages in the CAC application. The interpretation of the error codes is: Terms: 'ebXXXXX.bin' : binary file in flash data structure: EBT_file_template based structure * no-error: no error encountered. * nonexistent-file: the 'ebXXXXX.bin' file not found in the flash, during APEX boot or MIB EBT load request. * bad-file-length: mismatch in file length specified within 'ebXXXXX.bin' and the pre-specified file length. Occurs while loading file into data structures. * copy-corrupted: copying of data from 'ebXXXXX.bin' into the data structure, EBT_file_template did not proceed smoothly and the data structure is now corrupted. * nunused-cbtdwoEBTid: command EBT id not used and current EBT id is 0. The CAC booted without valid EBT values in the data structure. Occurs during boot while loading file into data structures. * nunused-cinvalid: command EBT id not used. The file eb'current EBT id'.bin contains invalid data. Occurs just after the EBT file got loaded into the data structure, when the verification of values in the data structure takes place. * nEBTid-uninit-cstays: command EBT id is 0 and the data structures remain unchanged. Occurs when mib item cacTableload is switched to yes. * ninvalid-cstays: eb'command EBT id'.bin contains invalid data and the data structures remain unchanged. Occurs when mib item cacTableload is switched to yes. * ninvalid-cEBTid-uninit: eb'command EBT id'.bin contains invalid data and the current EBT id is zero. This means that data structure is corrupted. Occurs when mib item cacTableload is switched to yes. * ninvalid-cinvalid: both eb'command EBT id'.bin and eb'current EBT id'.bin contains invalid data. The data structure is corrupted. Occurs when mib item cacTableload is switched to yes. * ninvalid-cnoerror: eb'command EBT id'.bin contains invalid data and the eb'current EBT id'.bin is loaded successfully. Occurs when mib item cacTableload is switched to yes. * link-not-ready: it is a runtime error which states that link is not ready for configuration. * link-not-configuring: it is a runtime error which states that link is not in configuring mode and therefore the recalculation of EBT or scr-pcr sums is not possible. * EBT-not-loaded: it is a runtime error which states that the data structure does not contain valid data. This occurs when the EBT enable mib switch is turned to 'yes' or the cac version mib item is switched to EBT. * class-not-found: this runtime error indicates that during the processing of allocate, deallocate or change functions, a class corresponding to SCR, PCR or MBS was not found. The effective bandwidth used in this situation is the same as a CBR allocation using the attempted connection's PCR. * dump-fs-error: this error indicates that a file system error (e.g. the file system became full) during the EBT file dump function. The dump file was deleted after the file system error was detected.")
cacPerLinkTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6), )
if mibBuilder.loadTexts: cacPerLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: cacPerLinkTable.setDescription('This table containing per link data. <DETAIL_DESCRIPTION> Contains per link specific data')
cacPerLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1), ).setIndexNames((0, "DV2-MIB", "cacLinkNo"))
if mibBuilder.loadTexts: cacPerLinkEntry.setStatus('mandatory')
cacLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacLinkNo.setStatus('mandatory')
if mibBuilder.loadTexts: cacLinkNo.setDescription('Link number. <DETAIL_DESCRIPTION> cacLinkNo is the index (0..3) to the array of link data.')
cacLinkSumE10 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacLinkSumE10.setStatus('mandatory')
if mibBuilder.loadTexts: cacLinkSumE10.setDescription('Running sum of e10. <DETAIL_DESCRIPTION> cacSumE10 zero loss effective bandwidth for high priority queue. This value is maintained only when the CAC is enabled on the link (cacEnable) and when the EBT CAC version is being used (cacVersion==EBT) otherwise the values here are zero.')
cacLinkSumE1T = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacLinkSumE1T.setStatus('mandatory')
if mibBuilder.loadTexts: cacLinkSumE1T.setDescription('Running sum of e1T. <DETAIL_DESCRIPTION> cacSumE1T tangent effective bandwidth for high priority queue. This value is maintained only when the CAC is enabled on the link (cacEnable) and when the EBT CAC version is being used (cacVersion==EBT) otherwise the values here are zero.')
cacLinkObfPvc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 4), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacLinkObfPvc1.setStatus('mandatory')
if mibBuilder.loadTexts: cacLinkObfPvc1.setDescription('Utilization factor for high priority pvc. <DETAIL_DESCRIPTION> Utilization factor for PVCs and SPVCs for the high priority queue.')
cacLinkObfSvc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 5), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacLinkObfSvc1.setStatus('mandatory')
if mibBuilder.loadTexts: cacLinkObfSvc1.setDescription('Utilization factor for high priority svc. <DETAIL_DESCRIPTION> Utilization factor for SVCs for the high priority queue.')
cacLinkSumE20 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacLinkSumE20.setStatus('mandatory')
if mibBuilder.loadTexts: cacLinkSumE20.setDescription('Running sum of e20. <DETAIL_DESCRIPTION> cacSumE20 zero loss effective bandwidth for low priority queue. This value is maintained only when the CAC is enabled on the link (cacEnable) and when the EBT CAC version is being used (cacVersion==EBT) otherwise the values here are zero.')
cacLinkSumE2T = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacLinkSumE2T.setStatus('mandatory')
if mibBuilder.loadTexts: cacLinkSumE2T.setDescription('Running sum of e2T. <DETAIL_DESCRIPTION> cacSumE1T zero tangent effective bandwidth for low priority queue. This value is maintained only when the CAC is enabled on the link (cacEnable) and when the EBT CAC version is being used (cacVersion==EBT) otherwise the values here are zero.')
cacLinkObfPvc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 8), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacLinkObfPvc2.setStatus('mandatory')
if mibBuilder.loadTexts: cacLinkObfPvc2.setDescription('Utilization factor for low priority pvc. <DETAIL_DESCRIPTION> Utilization factor for PVCs and SPVCs for the low priority queue.')
cacLinkObfSvc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 9), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacLinkObfSvc2.setStatus('mandatory')
if mibBuilder.loadTexts: cacLinkObfSvc2.setDescription('Utilization factor for low priority svc. <DETAIL_DESCRIPTION> Utilization factor for SVCs for the low priority queue.')
cacLinkTotalBwScrPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacLinkTotalBwScrPcr.setStatus('mandatory')
if mibBuilder.loadTexts: cacLinkTotalBwScrPcr.setDescription('total bw allocation on the link by scr-pcr CAC. <DETAIL_DESCRIPTION> cacTotalBwScrPcr is the total bandwidth allocated to extant connections when the CAC is enabled and when the SCR-PCR CAC is being used. Its value is zero if CAC is disabled or the EBT CAC mode is used.')
cacCurrentLinkUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacCurrentLinkUsage.setStatus('mandatory')
if mibBuilder.loadTexts: cacCurrentLinkUsage.setDescription('Current link bandwidth allocation. <DETAIL_DESCRIPTION> It is the current indication of bandwidth allocation on a link based on the formula using effective bandwidths')
cacMaxLinkUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacMaxLinkUsage.setStatus('mandatory')
if mibBuilder.loadTexts: cacMaxLinkUsage.setDescription('Max link bw allocation since last reset or card boot. <DETAIL_DESCRIPTION> cacMaxLinkUsage shows the maximum value that cacCurrentLinkUsage has reached since cacMaxLinkUsage was last reset.')
cacLinkReset = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacLinkReset.setStatus('mandatory')
if mibBuilder.loadTexts: cacLinkReset.setDescription('Reload maximum link usage from current allocation. <DETAIL_DESCRIPTION> cacReset resets cacMaxLinkUsage, after the reset cacMaxLinkUsage shows the same value as cacCurrentLinkUsage.')
cacLinkVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ebt", 1), ("scr-pcr", 2))).clone('ebt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacLinkVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cacLinkVersion.setDescription('Use EB CAC or scr-pcr CAC? <DETAIL_DESCRIPTION> The per-link variable cacVersion may take on the values * SCR-PCR indicating that the old, pre Rel 4.2 CAC based on SCR and PCR values, is in operation or * EBT indicating that the new CAC based on effective bandwidths is used. cacVersion may be set by the manager. If cacVersion is set to EBT by the manager it will revert to SCR-PCR unless a valid EBT is currently available in memory (in which case cacEbtState==ready and cacCurrentEbtId holds a non-zero value). The cacVersion may also revert to SCR-PCR if, during boot or an EBT load, a valid EBT cannot be established in memory. A change of state in cacVersion will result in recalculatation of EB Sums.')
cacLinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacLinkEnable.setStatus('mandatory')
if mibBuilder.loadTexts: cacLinkEnable.setDescription('Enable cac? <DETAIL_DESCRIPTION> When cacEnable has the value * yes, then the three CAC service routines are operational as defined, * no, then all connections are accepted regardless of required bandwidths CAC may be enabled or disabled by the manager at any time that the cacLinkState is ready. Enabling CAC will cause recalculatation of EB sums for that link. Disabling CAC will cause the EB sums for the link (also for associated V-SAPs) to be set to zero.')
cacLinkSignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("single-channel", 1), ("multi-channel", 2))).clone('single-channel')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacLinkSignalMode.setStatus('mandatory')
if mibBuilder.loadTexts: cacLinkSignalMode.setDescription("Link signalling mode <DETAIL_DESCRIPTION> cacSignallingMode is a read-only variable indicating whether the link is currently in the signalling mode: * single-channel or * multi-channel The value of cacSignallingMode is updated any time a virtual SAP is either associated or disassociated with a physical SAP. Multi-channel mode indicates that at least one virtual SAP is associated with the link's physical SAP. In multi-channel mode the zero-loss effective bandwidths are not used for connection admission control.")
cacLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uninitialized", 1), ("configuring", 2), ("recalculating", 3), ("ready", 4))).clone('uninitialized')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: cacLinkState.setDescription('State of the Link <DETAIL_DESCRIPTION> The cacLinkState variable can take the values: * uninitialised is an initial MIB value which is never returned to without staring from a new MIB. * configuring indicates that the CAC on that link cannot be used at the current time. This indicates that CAC is booting, an EBT is being loaded. This is a transient state that will go to ready or recalculating. * recalculating indicates that the sums for both eb and scr-pcr are cleared and are recalculated for the existing connections. * ready indicates that CAC may be used on that link. The state machine is given in Figure3. Transitions out of the ready state can be caused by a boot, an EBT load or the call back functions on (per link) Enable and Version. Whether the transition from configuring back to ready is direct or via recalculating depends on whether or not there is a need to recalculate the effective bandwidth sums; this depends on several factors that can be derived from the detailed design in Section6.2.4.7. The value of the cacLinkState variable is valid and indicates the current link state of the CAC indepenently of the value of cacEnable, cacVersion and cacEbtState. When cacLinkState is configuring, certain CAC functions are disabled: * Requests to the allocate, deallocate and allocation_change service routines will be rejected without processing. * Requests to the allocation summary routine may produce inconsistent results. When cacLinkState is recalculating, certain CAC functions are disabled: * Requests to allocation_change and deallocate service routines will be rejected without processing. * Requests to the allocation summary routine may produce inconsistent results.')
cacPerSapTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7), )
if mibBuilder.loadTexts: cacPerSapTable.setStatus('mandatory')
if mibBuilder.loadTexts: cacPerSapTable.setDescription("This table containing per Sap data. <DETAIL_DESCRIPTION> The virtual SAP table in the MIB has 12 entries indexed by cacSapNo in the range (20..31). For each SAP there the table entries are detailed below. These entries are only used when at least one of the link's cacSignallingMode is multi-channel. The association of a virtual SAP to a link is given in the resource table MIB group.")
cacPerSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1), ).setIndexNames((0, "DV2-MIB", "cacSapNo"))
if mibBuilder.loadTexts: cacPerSapEntry.setStatus('mandatory')
cacSapNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacSapNo.setStatus('mandatory')
if mibBuilder.loadTexts: cacSapNo.setDescription('SAP number. <DETAIL_DESCRIPTION> cacSapNo is the index (0..11) to the array of sap data.')
cacSapSumE1T = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacSapSumE1T.setStatus('mandatory')
if mibBuilder.loadTexts: cacSapSumE1T.setDescription('Running sum of e1T. <DETAIL_DESCRIPTION> cacSumE1T tangent effective bandwidth for high priority queue These values are maintained only when the CAC is enabled on the link (cacEnable), when the SAP is assigned to a link and when the EBT CAC version is being used (cacVersion==EBT) otherwise the values here are zero.')
cacSapSumE2T = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacSapSumE2T.setStatus('mandatory')
if mibBuilder.loadTexts: cacSapSumE2T.setDescription('Running sum of e2T. <DETAIL_DESCRIPTION> cacSumE1T tangent effective bandwidth for low priority queue These values are maintained only when the CAC is enabled on the link (cacEnable), when the SAP is assigned to a link and when the EBT CAC version is being used (cacVersion==EBT) otherwise the values here are zero.')
cacSapTotalBwScrPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacSapTotalBwScrPcr.setStatus('mandatory')
if mibBuilder.loadTexts: cacSapTotalBwScrPcr.setDescription('total bw allocation on the link by scr-pcr CAC. <DETAIL_DESCRIPTION> cacTotalBwScrPcr is the total bandwidth allocated to extant connections when the CAC is enabled and when the SCR-PCR CAC is being used. Its value is zero if CAC is disabled or the EBT CAC mode is used.')
cacCurrentSapUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacCurrentSapUsage.setStatus('mandatory')
if mibBuilder.loadTexts: cacCurrentSapUsage.setDescription('Current SAP bandwidth allocation <DETAIL_DESCRIPTION> It is the current indication of bandwidth allocation on a sap based on the formula using effective bandwidths.')
cacMaxSapUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacMaxSapUsage.setStatus('mandatory')
if mibBuilder.loadTexts: cacMaxSapUsage.setDescription('Max SAP b/w allocation since last reset or card boot. <DETAIL_DESCRIPTION> cacMaxSapUsage shows the maximum value that cacCurrentSapUsage has reached since cacMaxSapUsage was last reset.')
cacSapReset = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacSapReset.setStatus('mandatory')
if mibBuilder.loadTexts: cacSapReset.setDescription('Reload maximum SAP usage from current allocation <DETAIL_DESCRIPTION> cacReset resets cacMaxSapUsage, after the reset cacMaxSapUsage shows the same value as cacCurrentSapUsage.')
dv2Message = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,1)).setObjects(("DV2-MIB", "sysLastTrapMessage"))
if mibBuilder.loadTexts: dv2Message.setDescription('This is used to send an arbitary text string to the NMS.')
slotChanged = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,2)).setObjects(("DV2-MIB", "slot0PhySlotNo"), ("DV2-MIB", "slot0PhyState"))
if mibBuilder.loadTexts: slotChanged.setDescription('This is sent when a slot changes state.')
linkChanged = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,3)).setObjects(("DV2-MIB", "slot0PhySlotNo"), ("DV2-MIB", "slot0PhyLink0State"), ("DV2-MIB", "slot0PhyLink1State"), ("DV2-MIB", "slot0PhyLink2State"), ("DV2-MIB", "slot0PhyLink3State"), ("DV2-MIB", "slot0PhyLstChngLnkNum"), ("DV2-MIB", "slot0PhyLstChngPrevLnkStat"))
if mibBuilder.loadTexts: linkChanged.setDescription('This is sent when a link changes state.')
psuChanged = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,4)).setObjects(("DV2-MIB", "slot0PsuIndex"), ("DV2-MIB", "slot0PsuFault"))
if mibBuilder.loadTexts: psuChanged.setDescription('This is sent when a power supply changes state.')
configChanged = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,5)).setObjects(("DV2-MIB", "sysConfigChanged"), ("DV2-MIB", "slotNumber"))
if mibBuilder.loadTexts: configChanged.setDescription('This is sent when <config.cfg> has changed.')
reset040 = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,22)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"))
if mibBuilder.loadTexts: reset040.setDescription('This is sent when a the master processor is reset by operator')
badPassword = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,23)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"))
if mibBuilder.loadTexts: badPassword.setDescription('This is sent when a user enters a bad password')
billingRecFail = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,26)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"))
if mibBuilder.loadTexts: billingRecFail.setDescription('Could not create billing record')
clockAlarm = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,27)).setObjects(("DV2-MIB", "alarmStatus"), ("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "sysClkAlarmErr"), ("DV2-MIB", "pSlotNumber"), ("DV2-MIB", "pSysRefSelect"), ("DV2-MIB", "sSlotNumber"), ("DV2-MIB", "sSysRefSelect"), ("DV2-MIB", "inService"))
if mibBuilder.loadTexts: clockAlarm.setDescription('Change in system clock alarm state: declare or clear minor/major alarms, describe error and location, includes primary/secondary clock locations and the active clock reference')
spvcInit = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,28)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "sPvcId"), ("DV2-MIB", "slotNumber"))
if mibBuilder.loadTexts: spvcInit.setDescription('Call successfully established')
spvcFail = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,29)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "sPvcId"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sPvcCauseDiagCode"))
if mibBuilder.loadTexts: spvcFail.setDescription('Call attempt failed')
spvcCallClr = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,30)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "sPvcId"), ("DV2-MIB", "slotNumber"))
if mibBuilder.loadTexts: spvcCallClr.setDescription('Call cleared after established')
spvcCallReset = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,31)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "sPvcId"), ("DV2-MIB", "slotNumber"))
if mibBuilder.loadTexts: spvcCallReset.setDescription('Call reset after established')
spvcRetryExceeded = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,33)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "sPvcId"), ("DV2-MIB", "slotNumber"))
if mibBuilder.loadTexts: spvcRetryExceeded.setDescription('Call attempts exceeded retry limit')
mainInServ = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,76)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slot0InUse"))
if mibBuilder.loadTexts: mainInServ.setDescription('This is sent when the Main Slot 0 Controller goes into service')
standbyInServ = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,77)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slot0InUse"))
if mibBuilder.loadTexts: standbyInServ.setDescription('This is sent when the Standby Slot 0 Controller goes into service')
bill25pstfull = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,78)).setObjects(("DV2-MIB", "billAvailable"))
if mibBuilder.loadTexts: bill25pstfull.setDescription('This is sent when billing table is 25% full.')
bill75pstfull = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,79)).setObjects(("DV2-MIB", "billAvailable"))
if mibBuilder.loadTexts: bill75pstfull.setDescription('This is sent when billing table is 75% full.')
restart040 = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,80)).setObjects(("DV2-MIB", "slotNumber"))
if mibBuilder.loadTexts: restart040.setDescription('This is sent when the master processor has been restarted by the 68302 processor.')
alcTxError = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,81)).setObjects(("DV2-MIB", "slotNumber"))
if mibBuilder.loadTexts: alcTxError.setDescription('This is sent after master processor has been reset due to ALC-87 Transmitter Error.')
lim_fault = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,91)).setLabel("lim-fault").setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "limTypeStatus"))
if mibBuilder.loadTexts: lim_fault.setDescription('Configured LIM type does not match the LIM in slot')
lim_oper = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,92)).setLabel("lim-oper").setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "limTypeStatus"))
if mibBuilder.loadTexts: lim_oper.setDescription('LIM operational')
psuAbsent = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,93)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slot0PsuIndex"))
if mibBuilder.loadTexts: psuAbsent.setDescription('PSU Absent detected')
psuPresent = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,94)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slot0PsuIndex"))
if mibBuilder.loadTexts: psuPresent.setDescription('PSU Presence detected')
switchFabricSwap = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,95)).setObjects(("DV2-MIB", "sysLastTrapMessage"))
if mibBuilder.loadTexts: switchFabricSwap.setDescription('Switch Fabric Redundant Swap')
internalReset = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,106)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"))
if mibBuilder.loadTexts: internalReset.setDescription('This is sent after the software has detected an internal error and restarted itself.')
aal1Fault = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,107)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"))
if mibBuilder.loadTexts: aal1Fault.setDescription('This is sent when an AAL1 fault has occurred.')
aal1Clear = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,108)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"))
if mibBuilder.loadTexts: aal1Clear.setDescription('This is sent when an AAL1 fault has been cleared.')
ds1LOS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,109)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds1LOSAlarm"))
if mibBuilder.loadTexts: ds1LOS.setDescription('Loss of Signal alarm')
ds1LOF = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,110)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds1LOFAlarm"))
if mibBuilder.loadTexts: ds1LOF.setDescription('Loss of Frame alarm')
ds1AIS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,111)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds1AISAlarm"))
if mibBuilder.loadTexts: ds1AIS.setDescription('AIS alarm')
ds1Yellow = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,112)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds1YellowAlarm"))
if mibBuilder.loadTexts: ds1Yellow.setDescription('Yellow alarm')
ds1ExBER = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,113)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds1ExBERAlarm"))
if mibBuilder.loadTexts: ds1ExBER.setDescription('Excessive Bit Error Rate Alarm')
ds1v2LOS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,114)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds1V2LOSAlarm"))
if mibBuilder.loadTexts: ds1v2LOS.setDescription('Loss of Signal alarm')
ds1v2LOF = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,115)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds1V2LOFAlarm"))
if mibBuilder.loadTexts: ds1v2LOF.setDescription('Loss of Frame alarm')
ds1v2AIS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,116)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds1V2AISAlarm"))
if mibBuilder.loadTexts: ds1v2AIS.setDescription('AIS alarm')
ds1v2Yellow = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,117)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds1V2FerfAlarm"))
if mibBuilder.loadTexts: ds1v2Yellow.setDescription('Yellow alarm')
ds1v2ExBER = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,118)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds1V2BERAlarm"))
if mibBuilder.loadTexts: ds1v2ExBER.setDescription('Excessive Bit Error Rate Alarm')
ds3LOS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,119)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds3LOSAlarm"))
if mibBuilder.loadTexts: ds3LOS.setDescription('Loss of Signal alarm')
ds3V2LOS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,120)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds3V2LOSAlarm"))
if mibBuilder.loadTexts: ds3V2LOS.setDescription('Loss of Signal alarm')
ds3LOF = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,121)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhDS3LOFAlarm"))
if mibBuilder.loadTexts: ds3LOF.setDescription('Loss of Frame alarm')
ds3AIS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,122)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhDS3AISAlarm"))
if mibBuilder.loadTexts: ds3AIS.setDescription('AIS alarm')
ds3Yellow = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,123)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhDS3YellowAlarm"))
if mibBuilder.loadTexts: ds3Yellow.setDescription('Yellow alarm')
ds3ExBER = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,124)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhDS3ExBERAlarm"))
if mibBuilder.loadTexts: ds3ExBER.setDescription('Excessive Bit Error Rate Alarm')
ds3FEFrmrDif = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,125)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhDS3RxFrmFmt"))
if mibBuilder.loadTexts: ds3FEFrmrDif.setDescription('Received frame format is different than configured frame format')
e1LOS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,126)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "e1LOSAlarm"))
if mibBuilder.loadTexts: e1LOS.setDescription('Loss of Signal alarm')
e1LOF = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,127)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "e1LOFAlarm"))
if mibBuilder.loadTexts: e1LOF.setDescription('Loss of Frame alarm')
e1AIS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,128)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "e1AISAlarm"))
if mibBuilder.loadTexts: e1AIS.setDescription('AIS alarm')
e1Yellow = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,129)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "e1FerfAlarm"))
if mibBuilder.loadTexts: e1Yellow.setDescription('Yellow alarm')
e1ExBER = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,130)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "e1ExBERAlarm"))
if mibBuilder.loadTexts: e1ExBER.setDescription('Excessive Bit Error Rate Alarm')
e3LOS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,131)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "e3LOSAlarm"))
if mibBuilder.loadTexts: e3LOS.setDescription('Loss of Signal alarm')
e3LOF = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,132)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhE3LOFAlarm"))
if mibBuilder.loadTexts: e3LOF.setDescription('Loss of Frame alarm')
e3AIS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,133)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhE3AISAlarm"))
if mibBuilder.loadTexts: e3AIS.setDescription('AIS alarm')
e3Yellow = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,134)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhE3FERFAlarm"))
if mibBuilder.loadTexts: e3Yellow.setDescription('Yellow alarm')
e3ExBER = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,135)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhE3ExBERAlarm"))
if mibBuilder.loadTexts: e3ExBER.setDescription('Excessive Bit Error Rate Alarm')
locd = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,136)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhPLCPLOCDAlarm"))
if mibBuilder.loadTexts: locd.setDescription('Loss Of Cell Delineation')
plcpYellow = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,137)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhPLCPYellowAlarm"))
if mibBuilder.loadTexts: plcpYellow.setDescription('PLCP yellow alarm')
plcpLOF = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,138)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhPLCPLOFAlarm"))
if mibBuilder.loadTexts: plcpLOF.setDescription('PLCP Loss of Frame alarm')
sdhLOS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,139)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "sdhSAlarmLOS"))
if mibBuilder.loadTexts: sdhLOS.setDescription('SONET/SDH Loss of Signal')
sdhLOF = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,140)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "sdhSAlarmLOF"))
if mibBuilder.loadTexts: sdhLOF.setDescription('SONET/SDH Loss of Frame')
sdhLineAIS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,141)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "sdhSAlarmLineAIS"))
if mibBuilder.loadTexts: sdhLineAIS.setDescription('SONET/SDH Line AIS failure')
sdhPathAIS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,142)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "sdhSAlarmPathAIS"))
if mibBuilder.loadTexts: sdhPathAIS.setDescription('SONET/SDH Path AIS failure')
sdhLOP = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,143)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "sdhSAlarmLOP"))
if mibBuilder.loadTexts: sdhLOP.setDescription('SONET/SDH Loss of Pointer')
sdhPLM = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,144)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "sdhSAlarmPLM"))
if mibBuilder.loadTexts: sdhPLM.setDescription('SONET/SDH Path Label Mismatch')
sdhLineYellow = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,145)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "sdhSAlarmLineRFI"))
if mibBuilder.loadTexts: sdhLineYellow.setDescription('SONET/SDH Line FERF failure')
sdhPathYellow = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,146)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "sdhSAlarmPathRFI"))
if mibBuilder.loadTexts: sdhPathYellow.setDescription('SONET/SDH Path Yellow failure')
sdhExBER = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,147)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "sdhSExBERAlarm"))
if mibBuilder.loadTexts: sdhExBER.setDescription('SONET/SDH Excessive Bit Error Rate')
clockActiveRef = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,148)).setObjects(("DV2-MIB", "inService"))
if mibBuilder.loadTexts: clockActiveRef.setDescription('Current Active Reference')
outOfResource = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,149)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"))
if mibBuilder.loadTexts: outOfResource.setDescription('Link cell rate is not sufficient for established connections')
hssiLOS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,150)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "hssiLOSAlarm"))
if mibBuilder.loadTexts: hssiLOS.setDescription('HSSI Loss of Signal')
hssiDTEReady = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,151)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"))
if mibBuilder.loadTexts: hssiDTEReady.setDescription('DTE is Ready')
hssiDCEReady = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,152)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"))
if mibBuilder.loadTexts: hssiDCEReady.setDescription('DCE is Ready')
hssiDTENotReady = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,153)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"))
if mibBuilder.loadTexts: hssiDTENotReady.setDescription('DTE is not Ready')
hssiDCENotReady = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,154)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"))
if mibBuilder.loadTexts: hssiDCENotReady.setDescription('DCE is not Ready')
userstatus1 = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,155)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "userInputStatus"))
if mibBuilder.loadTexts: userstatus1.setDescription('')
userstatus2 = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,156)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "userInputStatus"))
if mibBuilder.loadTexts: userstatus2.setDescription('')
pntmoper = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,157)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "pscatmode"))
if mibBuilder.loadTexts: pntmoper.setDescription('Sent when Primary NTM card operational status changes')
sntmoper = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,158)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "sscatmode"))
if mibBuilder.loadTexts: sntmoper.setDescription('Sent when Secondary NTM card operational status changes')
pntmoscstatus = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,159)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "pcatstr3oscstatus"))
if mibBuilder.loadTexts: pntmoscstatus.setDescription('Sent when Primary NTM card oscillator status changes')
sntmoscstatus = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,160)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "scatstr3oscstatus"))
if mibBuilder.loadTexts: sntmoscstatus.setDescription('Sent when secondary NTM card oscillator status changes')
pbitslineok = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,161)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "pbslineok"))
if mibBuilder.loadTexts: pbitslineok.setDescription('Sent when Primary NTM card BITS line status changes')
sbitslineok = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,162)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "sbslineok"))
if mibBuilder.loadTexts: sbitslineok.setDescription('Sent when secondary NTM card BITS line status changes')
svcHalfConnect = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,163)).setObjects(("DV2-MIB", "slotNumber"), ("DV2-MIB", "svcHalfConCnt"))
if mibBuilder.loadTexts: svcHalfConnect.setDescription('SVC half connect detected')
duplicateIpAddr = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,164)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "qeDocMacAddress"))
if mibBuilder.loadTexts: duplicateIpAddr.setDescription('Sent When a duplicate IP address is detected.')
svcQsaalReset = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,165)).setObjects(("DV2-MIB", "slotNumber"))
if mibBuilder.loadTexts: svcQsaalReset.setDescription('Sent when SAP is reset')
svcQsaalUpDown = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,166)).setObjects(("DV2-MIB", "slotNumber"))
if mibBuilder.loadTexts: svcQsaalUpDown.setDescription('Sent when SAP transitions between Up and Down')
svcT309Expiry = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,167)).setObjects(("DV2-MIB", "slotNumber"))
if mibBuilder.loadTexts: svcT309Expiry.setDescription('Sent when T309 timer expired and calls exist on a SAP')
j2LOS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,168)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "j2LOSAlarm"))
if mibBuilder.loadTexts: j2LOS.setDescription('Loss of Signal alarm')
j2LOF = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,169)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "j2LOFAlarm"))
if mibBuilder.loadTexts: j2LOF.setDescription('Loss of Frame alarm')
j2AIS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,170)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "j2AISAlarm"))
if mibBuilder.loadTexts: j2AIS.setDescription('AIS alarm')
j2RAI = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,171)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "j2RAlmAlarm"))
if mibBuilder.loadTexts: j2RAI.setDescription('RAI alarm')
scfLOS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,172)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "scfLOSAlarm"))
if mibBuilder.loadTexts: scfLOS.setDescription('Loss of Signal alarm')
routeLoadFail = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,173)).setObjects(("DV2-MIB", "slotNumber"))
if mibBuilder.loadTexts: routeLoadFail.setDescription('def.rtb file load failure')
dTLLoadFail = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,174)).setObjects(("DV2-MIB", "slotNumber"))
if mibBuilder.loadTexts: dTLLoadFail.setDescription('dtl.bin file load failure')
redunNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,175)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slot0IsStandbySlot0"))
if mibBuilder.loadTexts: redunNotAvail.setDescription('This is sent when the Redundant Slot 0 Controller is not available')
redunAvail = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,176)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slot0IsStandbySlot0"))
if mibBuilder.loadTexts: redunAvail.setDescription('This is sent when the Redundant Slot 0 Controller is available')
dQ7_error = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,177)).setLabel("dQ7-error").setObjects(("DV2-MIB", "slotNumber"))
if mibBuilder.loadTexts: dQ7_error.setDescription('This trap is sent when edos discovers a DQ7 error in flash')
oamVcaRcvAIS_RDI = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,178)).setLabel("oamVcaRcvAIS-RDI").setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "oamVcaVpi"), ("DV2-MIB", "oamVcaVci"), ("DV2-MIB", "oamVcaAisRdiState"))
if mibBuilder.loadTexts: oamVcaRcvAIS_RDI.setDescription('This trap is generated when an AIS or RDI is received on VCa port')
oamVcbRcvAIS_RDI = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,179)).setLabel("oamVcbRcvAIS-RDI").setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "oamVcbVpi"), ("DV2-MIB", "oamVcbVci"), ("DV2-MIB", "oamVcbAisRdiState"))
if mibBuilder.loadTexts: oamVcbRcvAIS_RDI.setDescription('This trap is generated when an AIS or RDI is received on VCb port')
mibBuilder.exportSymbols("DV2-MIB", vcaBucket2Max=vcaBucket2Max, e1Table=e1Table, audMuteOutStat=audMuteOutStat, cacPerLinkEntry=cacPerLinkEntry, pdhDS3LOSDefect=pdhDS3LOSDefect, plppE3CTable=plppE3CTable, pdhE3Reconfig=pdhE3Reconfig, ctrlCodecAction=ctrlCodecAction, cacSapSumE2T=cacSapSumE2T, ds1AIS=ds1AIS, fraPStatRxFCnt=fraPStatRxFCnt, plppsRxTrIdMis=plppsRxTrIdMis, ds1LOF=ds1LOF, e1SLcvs=e1SLcvs, pscatlimtype=pscatlimtype, sysAuthenticateTable=sysAuthenticateTable, pvcLinkQoS=pvcLinkQoS, sysLkClockSrc=sysLkClockSrc, fraPStatTxFCnt=fraPStatTxFCnt, sPvcTable=sPvcTable, ceXhInt=ceXhInt, vidInCfg=vidInCfg, limSCmgmtData=limSCmgmtData, qeDocTunEntry=qeDocTunEntry, svcQsaalStatRsakTx=svcQsaalStatRsakTx, lFibreConfCLine=lFibreConfCLine, sysConfigFile=sysConfigFile, vcStatTxCells=vcStatTxCells, oamVcaTable=oamVcaTable, fRelStatLocSeq=fRelStatLocSeq, pCATDerConfigEntry=pCATDerConfigEntry, svcQ93bStatClr=svcQ93bStatClr, sOnOffLine=sOnOffLine, ceLinkNo=ceLinkNo, sdsV2RxAIS=sdsV2RxAIS, fraPStatTxBCnt=fraPStatTxBCnt, slot0XpToUse=slot0XpToUse, vcbRxGCells=vcbRxGCells, slot0PsuFrontTooHot=slot0PsuFrontTooHot, slot0ToUse=slot0ToUse, alarmACOEntry=alarmACOEntry, ds1V2FerfAlarm=ds1V2FerfAlarm, qeDocTunIndex=qeDocTunIndex, plppV2SDs3FrmFmt=plppV2SDs3FrmFmt, limSysFault=limSysFault, pvcStatus=pvcStatus, sysLkTxRate=sysLkTxRate, billSvpi=billSvpi, xpBadVpiVci=xpBadVpiVci, audBitRate=audBitRate, ds3Reconfig=ds3Reconfig, e3Loopback=e3Loopback, billDslot=billDslot, billingControl=billingControl, qeDocTunSlot=qeDocTunSlot, plppE1SRxAIS=plppE1SRxAIS, pdhDS3AISDefect=pdhDS3AISDefect, plppE3SRxFERF=plppE3SRxFERF, pdhE3RxTrIdUnst=pdhE3RxTrIdUnst, vidOutSrcSts=vidOutSrcSts, oamVcEndPoint=oamVcEndPoint, plppV2SRXCells=plppV2SRXCells, fraPConfigTable=fraPConfigTable, frbPStatRemSeq=frbPStatRemSeq, pdhE3TxTrcIdLH=pdhE3TxTrcIdLH, pccIndex=pccIndex, sdhSTable=sdhSTable, jpegSaveCfg=jpegSaveCfg, dv2Clocks=dv2Clocks, pcatforcesecstr3=pcatforcesecstr3, plppE1SRxOOF=plppE1SRxOOF, svcSAP=svcSAP, pdhE3Entry=pdhE3Entry, scfLimType=scfLimType, sPvcType=sPvcType, pdsIndex=pdsIndex, vidIndex=vidIndex, svcQ93bStatRelCmpltRx=svcQ93bStatRelCmpltRx, limSysCompErr=limSysCompErr, audOutDigLpbk=audOutDigLpbk, ds1Entry=ds1Entry, sCATcontrolTable=sCATcontrolTable, sdhSAlarmLOP=sdhSAlarmLOP, vcaBucket1Max=vcaBucket1Max, pdcIndex=pdcIndex, ds3V2Entry=ds3V2Entry, pOnOffLine=pOnOffLine, traceTcp=traceTcp, plppE1SEntry=plppE1SEntry, cacLinkEnable=cacLinkEnable, fRelayStatTable=fRelayStatTable, svcQsaalStatUstatRx=svcQsaalStatUstatRx, billCallingSub=billCallingSub, svcQsaalStatInPduErr=svcQsaalStatInPduErr, slot0PhyLstChngPrevLnkStat=slot0PhyLstChngPrevLnkStat, link1MinorStatus=link1MinorStatus, billingEntry=billingEntry, pbsV2RxLOS=pbsV2RxLOS, xpStatTable=xpStatTable, audOutMuteStat=audOutMuteStat, svcType=svcType, j2AISDefect=j2AISDefect, fraPStatRxFRate=fraPStatRxFRate, fraPConfigEntry=fraPConfigEntry, ps3cIndex=ps3cIndex, plppE1SHCSErrs=plppE1SHCSErrs, vcbBucket0Max=vcbBucket0Max, dataTable=dataTable, vidInRate=vidInRate, svcQsaalStatEntry=svcQsaalStatEntry, audCommMode=audCommMode, slot0PhyDlim=slot0PhyDlim, vcDocVpi=vcDocVpi, svcQ93bStatTable=svcQ93bStatTable, lmiType=lmiType, sdhAPSOnOff=sdhAPSOnOff, vcStatLastCompare=vcStatLastCompare, dv2FrRelay=dv2FrRelay, sdhCLinkEnab=sdhCLinkEnab, ps3sIndex=ps3sIndex, svcCRLinkNo=svcCRLinkNo, svcHiLo=svcHiLo, j2AISS=j2AISS, pvcDvci=pvcDvci, sCATStratum3ConfigEntry=sCATStratum3ConfigEntry, ceOflCnt=ceOflCnt, sCATDerStatusEntry=sCATDerStatusEntry, dv2Slot0=dv2Slot0, fraPConfigSaddr=fraPConfigSaddr, se1SI1=se1SI1, oamVcbPM=oamVcbPM, audOutCfg=audOutCfg, VirtualCircuitIdentifier=VirtualCircuitIdentifier, svcDuration=svcDuration, pdhE3AISDefect=pdhE3AISDefect, svcDvci=svcDvci, ds1LOS=ds1LOS, pbsV2RxOOF=pbsV2RxOOF, locd=locd, plppE1SCRCErrs=plppE1SCRCErrs, pccatactivate=pccatactivate, sCATStratum3StatusEntry=sCATStratum3StatusEntry, plppV2SBIP8Errs=plppV2SBIP8Errs, svcAutoSapOff=svcAutoSapOff, slot0InUse=slot0InUse, oamVcaBkwRptMisCells=oamVcaBkwRptMisCells, vcbBucket2CV=vcbBucket2CV, pdcclrperf=pdcclrperf, sPvcConnectTime=sPvcConnectTime, sdhSEntry=sdhSEntry, secondaryClockTable=secondaryClockTable, plppE3SHCSErrs=plppE3SHCSErrs, vidOutSta=vidOutSta, oamLastTxType=oamLastTxType, sSysRefTimingOk=sSysRefTimingOk, sdhC0x55=sdhC0x55, sysCurrentQItems=sysCurrentQItems, e1FerfAlarm=e1FerfAlarm, limCodec1=limCodec1, lmiUserSideAddress=lmiUserSideAddress, sysConfigChanged=sysConfigChanged, sysAuAccess=sysAuAccess, ds1V2ClrStats=ds1V2ClrStats, billAvailable=billAvailable, vcbBucket3Max=vcbBucket3Max, frbPConfigEntry=frbPConfigEntry, plppE3CEntry=plppE3CEntry, svcDE164Sub=svcDE164Sub, limCodec0=limCodec0, pdhE3AISS=pdhE3AISS, qeDocTunDestAddress=qeDocTunDestAddress, sysLKIgLogBuffer=sysLKIgLogBuffer, fraPStatLocSeq=fraPStatLocSeq, plppSFEBEErrs=plppSFEBEErrs, oamVcbDefectLink=oamVcbDefectLink, plppSRXclock=plppSRXclock, svcQ93bStatAddPtyAckRx=svcQ93bStatAddPtyAckRx, dataPortSpeed=dataPortSpeed, fraPStatEntry=fraPStatEntry, svcId=svcId, pCATBitsStatusEntry=pCATBitsStatusEntry, sysLKIgEFCIThreshold=sysLKIgEFCIThreshold, psCATBootrevision=psCATBootrevision, dv2PLPP=dv2PLPP, ds1V2LOFAlarm=ds1V2LOFAlarm, plppE1CLinkNo=plppE1CLinkNo, slot0PhyLink0State=slot0PhyLink0State, pdhDS3SES=pdhDS3SES, e3ExBER=e3ExBER, pdhPLCPLOFAlarm=pdhPLCPLOFAlarm, vidInWindowSize=vidInWindowSize, pdhPLCPScrambler=pdhPLCPScrambler, sysCurrentQs=sysCurrentQs, scfContr=scfContr, veEnable=veEnable, scfDCEDTE=scfDCEDTE, link3CritStatus=link3CritStatus, pdcds1V2Coding=pdcds1V2Coding, vidOutRate=vidOutRate, psuAbsent=psuAbsent, pvcSvpi=pvcSvpi, pbcds1V2TxLineLn=pbcds1V2TxLineLn, lmiPrefix=lmiPrefix, sysLkResetStats=sysLkResetStats, plppE3CTxmtTimMk=plppE3CTxmtTimMk, svcQ93bStatDiagTx=svcQ93bStatDiagTx, ds1v2LOF=ds1v2LOF, ds3V2LinkNo=ds3V2LinkNo, lmiVpi=lmiVpi, sdhSSectES=sdhSSectES, e1LOSAlarm=e1LOSAlarm, fraPStatRemSeq=fraPStatRemSeq, mgmtPortSpeed=mgmtPortSpeed, plppV2SDs3RxYellowAlarm=plppV2SDs3RxYellowAlarm, e3Entry=e3Entry, plppCDS3Framer=plppCDS3Framer, ds1ClrStats=ds1ClrStats, veMode=veMode, audFaultReason=audFaultReason, qeDocTunInFrames=qeDocTunInFrames, sysMemEnd=sysMemEnd, slot0redmode=slot0redmode, pdhPLCPIdleCell=pdhPLCPIdleCell, scfEntry=scfEntry, plppSTable=plppSTable, sysAuthenticateEntry=sysAuthenticateEntry, sdhSLineES=sdhSLineES, oamVcbPMBlockSize=oamVcbPMBlockSize, plppV2SDs3FEBEErrs=plppV2SDs3FEBEErrs, plppE3SRxOOF=plppE3SRxOOF, plppE3SRxTrIdUnst=plppE3SRxTrIdUnst, sPvcCauseDiag=sPvcCauseDiag, frbPConfigDxivci=frbPConfigDxivci, userstatus1=userstatus1, qeDocTunRfc1483Encap=qeDocTunRfc1483Encap, slot0PhyTable=slot0PhyTable, oamVcbBkwRptSevErr=oamVcbBkwRptSevErr, e3Table=e3Table, svcQ93bTmrT308=svcQ93bTmrT308, pcatplaceholder1=pcatplaceholder1, plppV2CCPLCPMode=plppV2CCPLCPMode, pcatstr3listenerstatus=pcatstr3listenerstatus, sysLkRxRate=sysLkRxRate, j2LcvCount=j2LcvCount, pdhE3RxTrlTrc=pdhE3RxTrlTrc, plppE3CSmdsMode=plppE3CSmdsMode, pdsV2RxAIS=pdsV2RxAIS, se1SI0=se1SI0, sysLkState=sysLkState, sdhSCellDelState=sdhSCellDelState, sbsV2RxOOFCnt=sbsV2RxOOFCnt, vcbTable=vcbTable, sActiveTimingSource=sActiveTimingSource, vidOutWindowWidth=vidOutWindowWidth)
mibBuilder.exportSymbols("DV2-MIB", ds3LinkNo=ds3LinkNo, sysInitialQItems=sysInitialQItems, alarmACOTable=alarmACOTable, sysLinkTable=sysLinkTable, VirtualPathIdentifier=VirtualPathIdentifier, qeDocTunLink=qeDocTunLink, alarmNodeMajor=alarmNodeMajor, plppSHCSErrs=plppSHCSErrs, svcQ93bStatDropPtyAckRx=svcQ93bStatDropPtyAckRx, plppSCLines=plppSCLines, sPvcAlertFailures=sPvcAlertFailures, mgmtTable=mgmtTable, pCATStratum3ConfigEntry=pCATStratum3ConfigEntry, userStatusTable=userStatusTable, sdhSTXclock=sdhSTXclock, pdhE3RxPloadTypeLabUnst=pdhE3RxPloadTypeLabUnst, pvcDSlot=pvcDSlot, sbslineok=sbslineok, oamLoopbackEntry=oamLoopbackEntry, limSysVideoIn=limSysVideoIn, svcQsaalStatSdpTx=svcQsaalStatSdpTx, cacCurrentEbtId=cacCurrentEbtId, slot0PhyLink3State=slot0PhyLink3State, products=products, cacLinkObfSvc1=cacLinkObfSvc1, svcQ93bStatCallProcRx=svcQ93bStatCallProcRx, pcatstr3oscillator=pcatstr3oscillator, billSslot=billSslot, svcSLink=svcSLink, svcQsaalStatMdTx=svcQsaalStatMdTx, sbcds1V2Coding=sbcds1V2Coding, svcQ93bStatAddPtyRx=svcQ93bStatAddPtyRx, jpegLoadCfg=jpegLoadCfg, ctrlCallType=ctrlCallType, sdhPLM=sdhPLM, dv2MS2FRAC=dv2MS2FRAC, frbPStatLocAck=frbPStatLocAck, frbPConfigSaddr=frbPConfigSaddr, pdsV2RxOOF=pdsV2RxOOF, sbcclrperf=sbcclrperf, pdhPLCPFEBEErrs=pdhPLCPFEBEErrs, inService=inService, sysLastTrapMessage=sysLastTrapMessage, oamLoopbackLocId=oamLoopbackLocId, plppSDs3FrameErrs=plppSDs3FrameErrs, pbcV2Lb=pbcV2Lb, veXhInt=veXhInt, sdhS2Entry=sdhS2Entry, cacSapNo=cacSapNo, vidInCompCnt=vidInCompCnt, oamLoopbackVci=oamLoopbackVci, mgmtRemoteAddress=mgmtRemoteAddress, pvcBackwardPeakCellRate=pvcBackwardPeakCellRate, pdhDS3RxIDL=pdhDS3RxIDL, veStatRxState=veStatRxState, sdhSPathLabelMM=sdhSPathLabelMM, sdcV2Lb=sdcV2Lb, qeDocTunSktType=qeDocTunSktType, scfDataRate=scfDataRate, svcVpiEnd=svcVpiEnd, pdhDS3OOFDefect=pdhDS3OOFDefect, plppE1SRXclock=plppE1SRXclock, limSysStartMode=limSysStartMode, svcQ93bTmrT303=svcQ93bTmrT303, cacPerLinkTable=cacPerLinkTable, redunNotAvail=redunNotAvail, qeDocBridgeLink2Eligible=qeDocBridgeLink2Eligible, j2TxClkSel=j2TxClkSel, fRelConfN392=fRelConfN392, sbsV2RxBERCnt=sbsV2RxBERCnt, qeDocBridgeEnable=qeDocBridgeEnable, cacSapSumE1T=cacSapSumE1T, svcQsaalStatSdpRx=svcQsaalStatSdpRx, audInVol=audInVol, pdsV2RxLOSCnt=pdsV2RxLOSCnt, billFrameIn=billFrameIn, slot0PhyMacAddress=slot0PhyMacAddress, svcLinkNo=svcLinkNo, sPvcRetry=sPvcRetry, sendFileBytes=sendFileBytes, frbPConfigSuba=frbPConfigSuba, E164=E164, vcbBucket2Max=vcbBucket2Max, sdhSSectBIP8=sdhSSectBIP8, duplicateIpAddr=duplicateIpAddr, pdhDS3ExBERDefect=pdhDS3ExBERDefect, ds1V2Lb=ds1V2Lb, vcbBucket3CV=vcbBucket3CV, vidOutStand=vidOutStand, pCATStratum3ConfigTable=pCATStratum3ConfigTable, plppCScrambler=plppCScrambler, svcQsaalStatBgrejTx=svcQsaalStatBgrejTx, vidOutCfg=vidOutCfg, pdhPLCPLinkNo=pdhPLCPLinkNo, fraPStatRemErrThr=fraPStatRemErrThr, sntmoper=sntmoper, pdhPLCPFEUAS=pdhPLCPFEUAS, pscatfilestatus=pscatfilestatus, mainInServ=mainInServ, pdhDS3ES=pdhDS3ES, sValidSource=sValidSource, pdslineok=pdslineok, limFaultReason=limFaultReason, hssiDTENotReady=hssiDTENotReady, sCATBitsConfigTable=sCATBitsConfigTable, ntms0doc=ntms0doc, cePvcValid=cePvcValid, oamVcaBkwRptLosCells=oamVcaBkwRptLosCells, sbsV2RxLOS=sbsV2RxLOS, ds1Rt=ds1Rt, oamLoopbackResult=oamLoopbackResult, j2OOFDefect=j2OOFDefect, oamVcaCCState=oamVcaCCState, pdhDS3FEACTxmt=pdhDS3FEACTxmt, fraPStatLocAck=fraPStatLocAck, qeDocBridgeEntry=qeDocBridgeEntry, vidOutCurrQFactor=vidOutCurrQFactor, oamVcbCC=oamVcbCC, oamAisRdiGeneration=oamAisRdiGeneration, sysLKEgEFCIThreshold=sysLKEgEFCIThreshold, sdhSExBERAlarm=sdhSExBERAlarm, sdsV2RxLOS=sdsV2RxLOS, plppE3CTxTrlTrcIdLen=plppE3CTxTrlTrcIdLen, slot0PhyDocHwVerNo=slot0PhyDocHwVerNo, pdhE3FEBEErrs=pdhE3FEBEErrs, revertTimer=revertTimer, vcStatTable=vcStatTable, pCATStratum3StatusEntry=pCATStratum3StatusEntry, oamClearStats=oamClearStats, svcQ93bStatRelCmpltTx=svcQ93bStatRelCmpltTx, e1AISAlarm=e1AISAlarm, vidOutStdStat=vidOutStdStat, sdhSLineFarEndFC=sdhSLineFarEndFC, ds1Tr=ds1Tr, mgmtPortAddress=mgmtPortAddress, sysAuCommunity=sysAuCommunity, plppE3SRxAIS=plppE3SRxAIS, slot0PsuFanCSpeed=slot0PsuFanCSpeed, billByteIn=billByteIn, ds1V2Entry=ds1V2Entry, ds1V2AISAlarm=ds1V2AISAlarm, oamVcbDefectNode=oamVcbDefectNode, svcQ93bStatLstDiagRx=svcQ93bStatLstDiagRx, e1LineSES=e1LineSES, pdhPLCPFEES=pdhPLCPFEES, pdhE3ExBERAlarm=pdhE3ExBERAlarm, svcDvpi=svcDvpi, pbsV2RxOOFCnt=pbsV2RxOOFCnt, ds3V2Lb=ds3V2Lb, pdhE3OOFDefect=pdhE3OOFDefect, fraPStatPvcStat=fraPStatPvcStat, pdhE3Lcvs=pdhE3Lcvs, pdhDS3ParityErrs=pdhDS3ParityErrs, e1ExBERAlarm=e1ExBERAlarm, vidOutChnlLock=vidOutChnlLock, sdhSAlarmLineAIS=sdhSAlarmLineAIS, oamLoopbackActive=oamLoopbackActive, vcaBucket3Max=vcaBucket3Max, veResCnt=veResCnt, svcQ93bStatAccumalative=svcQ93bStatAccumalative, svcVBRHallowed=svcVBRHallowed, cacEbtCommand=cacEbtCommand, ds3ExBER=ds3ExBER, vidOutBuffLevel=vidOutBuffLevel, pdhPLCPChipType=pdhPLCPChipType, cacCommandEbtId=cacCommandEbtId, pCATBitsStatusTable=pCATBitsStatusTable, sysLKIgCLPThreshold=sysLKIgCLPThreshold, svcQ93bStatDropPtyTx=svcQ93bStatDropPtyTx, svcQ93bStatEntry=svcQ93bStatEntry, pbsV2RxBER=pbsV2RxBER, fraPStatRxBCnt=fraPStatRxBCnt, mgmtResetStat=mgmtResetStat, pcatstr3reconfigure=pcatstr3reconfigure, svcQsaalStatSdTx=svcQsaalStatSdTx, plppE1SRxLOS=plppE1SRxLOS, cacLinkObfSvc2=cacLinkObfSvc2, billByteOutC=billByteOutC, dv2QeDoc=dv2QeDoc, cacLinkSumE2T=cacLinkSumE2T, fRelayConfEntry=fRelayConfEntry, ds1V2Reconfig=ds1V2Reconfig, ds1PdvCount=ds1PdvCount, sscIndex=sscIndex, ss3cIndex=ss3cIndex, pdhDS3Entry=pdhDS3Entry, svcQsaalTmrCC=svcQsaalTmrCC, plppE1SFerf=plppE1SFerf, sdhSPathYellow=sdhSPathYellow, pvcVpiEnd=pvcVpiEnd, ds1V2FerCount=ds1V2FerCount, e1LOF=e1LOF, frbPStatTxBCnt=frbPStatTxBCnt, ds1V2TxLineLn=ds1V2TxLineLn, fRelConfLinkSpeed=fRelConfLinkSpeed, vcaTxGCellsClp1=vcaTxGCellsClp1, ds1V2BERDefect=ds1V2BERDefect, sdhSPathFC=sdhSPathFC, plppV2SFEBEErrs=plppV2SFEBEErrs, frbPStatRemErrThr=frbPStatRemErrThr, e3EQSelect=e3EQSelect, sccatfilexferstat=sccatfilexferstat, frbPStatTxFCnt=frbPStatTxFCnt, qeDocTunLocEndSkt=qeDocTunLocEndSkt, cacPerSapTable=cacPerSapTable, svcQ93bStatDiagRx=svcQ93bStatDiagRx, xpInputOverflow=xpInputOverflow, sysLkTxCells=sysLkTxCells, plppSDs3Lcvs=plppSDs3Lcvs, vidInImageErr=vidInImageErr, pvcAuxForwardPeakMode=pvcAuxForwardPeakMode, sdhSAlarmPathAIS=sdhSAlarmPathAIS, pvcAuxForwardSustainedSize=pvcAuxForwardSustainedSize, fRelStatLocState=fRelStatLocState, veDisCnt=veDisCnt, billCause=billCause, ds1OofCount=ds1OofCount, sdhSSectOOF=sdhSSectOOF, qeDocTunDestSubAddress=qeDocTunDestSubAddress, ds1V2ExBER=ds1V2ExBER, plppE1SRxLOF=plppE1SRxLOF, plppV2SRxIDL=plppV2SRxIDL, vcaBucket3Inc=vcaBucket3Inc, vcaStartTime=vcaStartTime, clksSysRefError=clksSysRefError, vidInAnLpbk=vidInAnLpbk, ds3LOF=ds3LOF, fRelConfLinkEnab=fRelConfLinkEnab, qeDocBridgeLink1Eligible=qeDocBridgeLink1Eligible, vcaPeakExceeds=vcaPeakExceeds, pdhPLCPReconfig=pdhPLCPReconfig, ds3TXLev=ds3TXLev, j2AIS=j2AIS, pdhE3FrameErrs=pdhE3FrameErrs, mgmtAddressMask=mgmtAddressMask, svcQsaalStatMdRx=svcQsaalStatMdRx, ds3RXErr=ds3RXErr, ssCATfilerevision=ssCATfilerevision, sSysRefSelect=sSysRefSelect, plppE1STXCells=plppE1STXCells, e1Lb=e1Lb, oamLoopbackSpan=oamLoopbackSpan, sPvcLink=sPvcLink, plppE3STable=plppE3STable, sdhCTable=sdhCTable, vcaDstSlot=vcaDstSlot, billCellOut=billCellOut, pdhDS3Reconfig=pdhDS3Reconfig, sbcds1V2TxLineLn=sbcds1V2TxLineLn, slot0PsuFanFail=slot0PsuFanFail, slot0PsuTestFault=slot0PsuTestFault, pdhDS3Table=pdhDS3Table, pvcAuxBackwardSustainedCellRate=pvcAuxBackwardSustainedCellRate, audOutLock=audOutLock)
mibBuilder.exportSymbols("DV2-MIB", sCATstatusEntry=sCATstatusEntry, vidInSta=vidInSta, slot0Address=slot0Address, e3LOF=e3LOF, billCLP1OutC=billCLP1OutC, oamVcaDefectNode=oamVcaDefectNode, sdhPathYellow=sdhPathYellow, e1SFEBEErrs=e1SFEBEErrs, sbcplaceholder1=sbcplaceholder1, aal1Clear=aal1Clear, fraPStatLocErrThr=fraPStatLocErrThr, plppE3SRxLOF=plppE3SRxLOF, vidEncBitRate=vidEncBitRate, pdsV2RxBER=pdsV2RxBER, sPvcNumberRetries=sPvcNumberRetries, xpStatEntry=xpStatEntry, ssCATBootrevision=ssCATBootrevision, sdhLineAIS=sdhLineAIS, oamLoopbackMaxNumCells=oamLoopbackMaxNumCells, svcQ93bStatSetupRx=svcQ93bStatSetupRx, sysInitialPorts=sysInitialPorts, pvcBackwardCellRateTotal=pvcBackwardCellRateTotal, hssiLOS=hssiLOS, vidInStand=vidInStand, sdhClearCounts=sdhClearCounts, scatplaceholder1=scatplaceholder1, pvcNumLeaves=pvcNumLeaves, slotNumber=slotNumber, svcSSlot=svcSSlot, vidStandard=vidStandard, pdhE3TxTrcIdUH=pdhE3TxTrcIdUH, vidOutState=vidOutState, pdhPLCPFESES=pdhPLCPFESES, vidInBufLevel=vidInBufLevel, frbPStatLocPoll=frbPStatLocPoll, sInputLineOk=sInputLineOk, plppSDs3FEBEErrs=plppSDs3FEBEErrs, ceStatTxState=ceStatTxState, sccatsendconfig=sccatsendconfig, fraVci=fraVci, sdhCLoopDiag=sdhCLoopDiag, pdhDS3AISAlarm=pdhDS3AISAlarm, oamVcaBkwRptBip16=oamVcaBkwRptBip16, qeDocTunLocMask=qeDocTunLocMask, ceEntry=ceEntry, svcForwardPeakMode=svcForwardPeakMode, pdsV2RxLOS=pdsV2RxLOS, plppV2SDs3LPBK=plppV2SDs3LPBK, svcVciEnd=svcVciEnd, sysDbIndex=sysDbIndex, hssiEntry=hssiEntry, svcSwtch=svcSwtch, fRelStatRemStartT=fRelStatRemStartT, traceIp=traceIp, pdhDS3YellowDefect=pdhDS3YellowDefect, plppE3SPLCPFrameErrs=plppE3SPLCPFrameErrs, ctrlEntry=ctrlEntry, E164SUB=E164SUB, dv2aal5=dv2aal5, vidOutChnlErr=vidOutChnlErr, slot0MaxUpSlots=slot0MaxUpSlots, plppE1C0x55=plppE1C0x55, vidOutSkipped=vidOutSkipped, ds1LcvCount=ds1LcvCount, sdhSPathLabel=sdhSPathLabel, traceSnmp=traceSnmp, hssiReconfig=hssiReconfig, dv2Pvc=dv2Pvc, plppV2CLinkNo=plppV2CLinkNo, e1LimType=e1LimType, sPvcCauseDiagCode=sPvcCauseDiagCode, e1SFrameErrs=e1SFrameErrs, lmiOnOff=lmiOnOff, pdcplaceholder1=pdcplaceholder1, ds1V2FerfDefect=ds1V2FerfDefect, userInputTrapDesc=userInputTrapDesc, ds3Entry=ds3Entry, j2LOSDefect=j2LOSDefect, pbsV2RxAIS=pbsV2RxAIS, ceClkInp=ceClkInp, sPvcForwardSustainableCellRate=sPvcForwardSustainableCellRate, sdhLOF=sdhLOF, fRelStatLocStartT=fRelStatLocStartT, pdsV2TxReference=pdsV2TxReference, mgmtIndex=mgmtIndex, ds1AISAlarm=ds1AISAlarm, primaryClockTable=primaryClockTable, e1ExBER=e1ExBER, sdhSonetSdh=sdhSonetSdh, sIndex=sIndex, frbPStatLinkState=frbPStatLinkState, sbcreconfigure=sbcreconfigure, e3LOS=e3LOS, ds1V2OOFDefect=ds1V2OOFDefect, slipMask=slipMask, ds1ExBERDefect=ds1ExBERDefect, ds3Tr=ds3Tr, hssiDCEReady=hssiDCEReady, audOutVol=audOutVol, sPvcFailures=sPvcFailures, frbVci=frbVci, svcDLink=svcDLink, pvcResourceTable=pvcResourceTable, ds1Reconfig=ds1Reconfig, se1SA7=se1SA7, veStatTable=veStatTable, qeDocTunState=qeDocTunState, pbslineok=pbslineok, pvcForwardPeakSize=pvcForwardPeakSize, pdhE3TableValid=pdhE3TableValid, slot0PhyLink1State=slot0PhyLink1State, sdsV2RxOOF=sdsV2RxOOF, oamVcaCC=oamVcaCC, veUflCnt=veUflCnt, vcStatEntry=vcStatEntry, veDstVpi=veDstVpi, svcForwardMaxBurstSize=svcForwardMaxBurstSize, pdhDS3ExBERAlarm=pdhDS3ExBERAlarm, vidInState=vidInState, sbsV2RxOOF=sbsV2RxOOF, oamLastTxVci=oamLastTxVci, slot0PhyChangeTimeM2=slot0PhyChangeTimeM2, sdhSCorrHCS=sdhSCorrHCS, maxOutstanding=maxOutstanding, sPvcStatus=sPvcStatus, fRelStatRemAck=fRelStatRemAck, ds1LineLength=ds1LineLength, fRelConfLinkCline=fRelConfLinkCline, svcBackwardMaxBurstSize=svcBackwardMaxBurstSize, plppE1SFrameErrs=plppE1SFrameErrs, e1AIS=e1AIS, pdhPLCPLpbkTimeout=pdhPLCPLpbkTimeout, ceInvCnt=ceInvCnt, svcMBSMax=svcMBSMax, sdhSLinkNo=sdhSLinkNo, vidOutPktsInBuff=vidOutPktsInBuff, sdhSSectLOS=sdhSSectLOS, svcQ93bStatStatEnqTx=svcQ93bStatStatEnqTx, svcQsaalStatBgnTx=svcQsaalStatBgnTx, svcSE164=svcSE164, lFibreConfLinkEnab=lFibreConfLinkEnab, slipSpeed=slipSpeed, pdhE3SES=pdhE3SES, lFibreStatHCSErrs=lFibreStatHCSErrs, vcStatPortNo=vcStatPortNo, billByteInC=billByteInC, vcDocTestMode=vcDocTestMode, lmiPollPeriod=lmiPollPeriod, svcQsaalTmrKeepAlive=svcQsaalTmrKeepAlive, sysLKIgFIFODepth=sysLKIgFIFODepth, link2MinorStatus=link2MinorStatus, pdhE3RxPloadTypeLabMis=pdhE3RxPloadTypeLabMis, vcStatReSync=vcStatReSync, dv2AlarmHandler=dv2AlarmHandler, soTxEn1=soTxEn1, j2AISAlarm=j2AISAlarm, veMulticast=veMulticast, oamVcaPMBlockSize=oamVcaPMBlockSize, slot0PhyState=slot0PhyState, slot0IntIPMask=slot0IntIPMask, hssiCtrTestMode=hssiCtrTestMode, svcQoSClass=svcQoSClass, plppV2SDs3RxAIS=plppV2SDs3RxAIS, spvcCallClr=spvcCallClr, sysLkRxMaxRate=sysLkRxMaxRate, internalReset=internalReset, ds1ExBER=ds1ExBER, fRelStatLocPoll=fRelStatLocPoll, spvcRetryExceeded=spvcRetryExceeded, fraPStatRemStartT=fraPStatRemStartT, pdhPLCPHCSErrs=pdhPLCPHCSErrs, soReconfig=soReconfig, slot0IsStandbySlot0=slot0IsStandbySlot0, dv2StaticRoute=dv2StaticRoute, pvcForwardSustainedCellRate=pvcForwardSustainedCellRate, ctrlIndex=ctrlIndex, ceDstLink=ceDstLink, oamVcaPM=oamVcaPM, svcQ93bStatRstAckRx=svcQ93bStatRstAckRx, e1LOS=e1LOS, fRelStatLinkNo=fRelStatLinkNo, vcDocClockFix=vcDocClockFix, vcaInternalVpi=vcaInternalVpi, e1AISDefect=e1AISDefect, vcStatLastError=vcStatLastError, pValidSource=pValidSource, sdhSAlarmLineRFI=sdhSAlarmLineRFI, pdsV2RxOOFCnt=pdsV2RxOOFCnt, oamVcbBkwRptLosCells=oamVcbBkwRptLosCells, hssiClockSrc=hssiClockSrc, sysLkLinkNo=sysLkLinkNo, soLinkNo=soLinkNo, DateTimeString=DateTimeString, sysLinkEntry=sysLinkEntry, scfLinkNo=scfLinkNo, qeDocTunLink0Eligible=qeDocTunLink0Eligible, lmiLinkNo=lmiLinkNo, svcQ93bStatRstAckTx=svcQ93bStatRstAckTx, sysLkRxCells=sysLkRxCells, sPvcEntry=sPvcEntry, slot0PsuTooHot=slot0PsuTooHot, fraPStatTxBRate=fraPStatTxBRate, lim_fault=lim_fault, ceDstVpi=ceDstVpi, plppV2SDs3FrameErrs=plppV2SDs3FrameErrs, secondaryEntry=secondaryEntry, vcStatTxState=vcStatTxState, qeDocTunValidity=qeDocTunValidity, sdcds1V2TxLineLn=sdcds1V2TxLineLn, pdsV2LCVCnt=pdsV2LCVCnt, qeDocTunVPI=qeDocTunVPI, pdhE3UAS=pdhE3UAS, oamVcbPMState=oamVcbPMState, plppE3SPLCPRxLof=plppE3SPLCPRxLof, scatstr3driverstatus=scatstr3driverstatus, audEntry=audEntry, pCATBitsConfigEntry=pCATBitsConfigEntry, e1LineES=e1LineES, lmiUserSideTable=lmiUserSideTable, plppCPloadTypeLab=plppCPloadTypeLab, ds1Coding=ds1Coding, vidInSkipCnt=vidInSkipCnt, veStatReset=veStatReset, vcDocSaddr=vcDocSaddr, j2TxEq=j2TxEq, sPvcForwardPeakMode=sPvcForwardPeakMode, sPvcCallId=sPvcCallId, pdhE3Table=pdhE3Table, cacMaxSapUsage=cacMaxSapUsage, veStatTxState=veStatTxState, alarmStatus=alarmStatus, vcDocLowWater=vcDocLowWater, plppV2CDS3Framer=plppV2CDS3Framer, pdhDS3LinkNo=pdhDS3LinkNo, plppSBIP8Errs=plppSBIP8Errs, pdcV2FRMRMode=pdcV2FRMRMode, sPvcSourceVci=sPvcSourceVci, svcForwardSustainableMode=svcForwardSustainableMode, sdhSSectSES=sdhSSectSES, slot0PhyType=slot0PhyType, ds1ES=ds1ES, oamLoopbackNumCellsSent=oamLoopbackNumCellsSent, plppV2SEntry=plppV2SEntry, ceStatPortNo=ceStatPortNo, fraPStatRemAck=fraPStatRemAck, e1SCRCErrs=e1SCRCErrs, ceCDVMax=ceCDVMax, vcbVpi=vcbVpi, e1OOFDefect=e1OOFDefect, sdhCLpbkTimeout=sdhCLpbkTimeout, ds3AIS=ds3AIS, sSlotNumber=sSlotNumber, slot0LecsPrefix=slot0LecsPrefix, alarmNodeACO=alarmNodeACO)
mibBuilder.exportSymbols("DV2-MIB", xpEgDiscCells=xpEgDiscCells, ds1OOFDefect=ds1OOFDefect, audOutSta=audOutSta, plppV2SDs3ParityErrs=plppV2SDs3ParityErrs, vidOutWindowHeight=vidOutWindowHeight, vcaVci=vcaVci, hssiType=hssiType, pcatplaceholder2=pcatplaceholder2, billByteOut=billByteOut, plppE3SRxPloadTypeLabMis=plppE3SRxPloadTypeLabMis, sPvcCallState=sPvcCallState, ds3V2LOS=ds3V2LOS, pdhE3Framer=pdhE3Framer, vcaBucketControl=vcaBucketControl, svcQsaalStatPollTx=svcQsaalStatPollTx, sCATDerConfigTable=sCATDerConfigTable, dv2System=dv2System, oamDisable=oamDisable, frbPConfigValidity=frbPConfigValidity, ds3RXLos=ds3RXLos, audIndex=audIndex, pActiveTimingSource=pActiveTimingSource, vcbDstVpi=vcbDstVpi, slot0PhySwVer=slot0PhySwVer, pdhDS3TxAIS=pdhDS3TxAIS, dlimLpbkTimeout=dlimLpbkTimeout, billCellOutC=billCellOutC, frbPStatRxFRate=frbPStatRxFRate, plppE3CTxTrcIdLH=plppE3CTxTrcIdLH, pdhPLCPLOFDefect=pdhPLCPLOFDefect, plppV2STable=plppV2STable, dv2Oam=dv2Oam, pdhPLCPES=pdhPLCPES, sdhSLineFEBE=sdhSLineFEBE, mgmtEntry=mgmtEntry, pscIndex=pscIndex, plppE3SLcvs=plppE3SLcvs, str3Configured=str3Configured, lmiEntry=lmiEntry, Q93bCauseDiag=Q93bCauseDiag, vcbStartTime=vcbStartTime, pdhE3FERFAlarm=pdhE3FERFAlarm, sbsV2RxLOSCnt=sbsV2RxLOSCnt, soLimDesc=soLimDesc, jpegReset=jpegReset, svcRestart=svcRestart, vidInBuffOvf=vidInBuffOvf, pdhDS3LOFAlarm=pdhDS3LOFAlarm, oamVcaEntry=oamVcaEntry, link0MinorStatus=link0MinorStatus, vcStatUFlow=vcStatUFlow, vidInFldSynErr=vidInFldSynErr, plppCLinkNo=plppCLinkNo, scatcommand=scatcommand, oamVcbBkwRptMisCells=oamVcbBkwRptMisCells, dv2SlipLine=dv2SlipLine, sysDbCurrent=sysDbCurrent, dataCfg=dataCfg, sdhSAlarmPathRFI=sdhSAlarmPathRFI, fraPConfigPriority=fraPConfigPriority, ds3TXAis=ds3TXAis, pbsV2RxBERCnt=pbsV2RxBERCnt, fraPConfigCir=fraPConfigCir, oamVcbVpi=oamVcbVpi, veFifoLvlCnt=veFifoLvlCnt, lmiVci=lmiVci, pdhDS3LES=pdhDS3LES, billTrapControl=billTrapControl, frbPStatRemMec=frbPStatRemMec, pbsV2LCVCnt=pbsV2LCVCnt, ds1V2UAS=ds1V2UAS, vcaDstVci=vcaDstVci, vePriority=vePriority, hssiLOSAlarm=hssiLOSAlarm, plppV2CScrambler=plppV2CScrambler, frbPConfigDximode=frbPConfigDximode, sPvcBackwardPeakCellRate=sPvcBackwardPeakCellRate, pCATcontrolTable=pCATcontrolTable, svcDE164=svcDE164, fraPConfigValidity=fraPConfigValidity, pcatstr3oscstatus=pcatstr3oscstatus, svcQ93bStatLstDiagTx=svcQ93bStatLstDiagTx, oamVcbVpcEndPoint=oamVcbVpcEndPoint, pccatlimtype=pccatlimtype, oamLoopbackTimeOut=oamLoopbackTimeOut, svcVBRLUBRallowed=svcVBRLUBRallowed, vcStatTestErrors=vcStatTestErrors, qeDocTunTable=qeDocTunTable, oamLoopbackLinkNo=oamLoopbackLinkNo, pntmoper=pntmoper, plppE1STXclock=plppE1STXclock, pdsV2RxBERCnt=pdsV2RxBERCnt, sPvcBackwardSustainableCellRate=sPvcBackwardSustainableCellRate, pdhDS3FrameErrs=pdhDS3FrameErrs, svcQsaalStatOutPduErr=svcQsaalStatOutPduErr, oamVcaPMState=oamVcaPMState, ceResCnt=ceResCnt, vcDocTestVal=vcDocTestVal, plppE1CEntry=plppE1CEntry, limSCbytes=limSCbytes, ds3Rt=ds3Rt, ds1V2LimType=ds1V2LimType, plppE1CSmdsMode=plppE1CSmdsMode, j2RAlmDefect=j2RAlmDefect, cacLinkSumE1T=cacLinkSumE1T, svcQ93bStatStatRx=svcQ93bStatStatRx, ds1V2LineES=ds1V2LineES, lmiUserSideEntry=lmiUserSideEntry, vidInCompErr=vidInCompErr, audOutMute=audOutMute, pdhE3RxExTrcIdLH=pdhE3RxExTrcIdLH, sCATstatusTable=sCATstatusTable, lFibreStatCLines=lFibreStatCLines, sysAuValidity=sysAuValidity, fraPStatLinkState=fraPStatLinkState, sdhCLinkNo=sdhCLinkNo, plppE3SRXclock=plppE3SRXclock, userstatus2=userstatus2, plppV2STXclock=plppV2STXclock, billStartM2=billStartM2, svcCDVTSize=svcCDVTSize, sdhSPathSES=sdhSPathSES, hssiLinkReady=hssiLinkReady, oamVcbAisRdiState=oamVcbAisRdiState, pdhE3TxTrlTrcIdLen=pdhE3TxTrlTrcIdLen, qeDocBridgeLink3Eligible=qeDocBridgeLink3Eligible, svcBackwardSustainableMode=svcBackwardSustainableMode, primaryEntry=primaryEntry, ctrlChnlStat=ctrlChnlStat, hssiLOSDefect=hssiLOSDefect, svcSigVpi=svcSigVpi, sscatmode=sscatmode, veDstSlot=veDstSlot, restart040=restart040, jpegSlipRemoteIp=jpegSlipRemoteIp, xpDocErrors=xpDocErrors, qeDocTunRemStartSkt=qeDocTunRemStartSkt, svcSvci=svcSvci, se1SA5=se1SA5, oamEntry=oamEntry, sPvcBackwardPeakMode=sPvcBackwardPeakMode, vidDigLpbk=vidDigLpbk, sdsV2RxLOSCnt=sdsV2RxLOSCnt, qeDocIpAddress=qeDocIpAddress, DateAndTime=DateAndTime, sysAuSendTraps=sysAuSendTraps, pdhPLCPSES=pdhPLCPSES, oamVcaTrapEnable=oamVcaTrapEnable, svcCellRateTable=svcCellRateTable, hssiDTEReady=hssiDTEReady, veDstVci=veDstVci, pscatplaceholder2=pscatplaceholder2, pdhPLCPBIP8Errs=pdhPLCPBIP8Errs, e1ES=e1ES, pSysRefTimingOk=pSysRefTimingOk, alarmStatEntry=alarmStatEntry, soEntry=soEntry, fRelStatRemMec=fRelStatRemMec, qeDocTunCallState=qeDocTunCallState, userInputStatus=userInputStatus, svcQsaalTmrPoll=svcQsaalTmrPoll, sdhLineYellow=sdhLineYellow, e3AIS=e3AIS, plppSSPLRStatus=plppSSPLRStatus, limSCfileXferStat=limSCfileXferStat, sPvcBackwardSustainableMode=sPvcBackwardSustainableMode, sdhSLineFarEndSES=sdhSLineFarEndSES, pvcForwardSustainedMode=pvcForwardSustainedMode, alrStatSlotNo=alrStatSlotNo, clockAlarm=clockAlarm, sccIndex=sccIndex, sdsV2TxReference=sdsV2TxReference, sPvcBackwardMaxBurstSize=sPvcBackwardMaxBurstSize, plppE3SFEBEErrs=plppE3SFEBEErrs, pdhPLCPPhyMode=pdhPLCPPhyMode, userInputEnable=userInputEnable, slot0PhyReqState=slot0PhyReqState, svcHalfConnect=svcHalfConnect, vcDocSuba=vcDocSuba, vidEncFrameCount=vidEncFrameCount, veTable=veTable, cacLinkNo=cacLinkNo, vidOutBuffOvf=vidOutBuffOvf, lmiNetSideLinkNo=lmiNetSideLinkNo, ceClkSel=ceClkSel, oamLastRxVci=oamLastRxVci, vcbTxGCellsClp1=vcbTxGCellsClp1, link3MajorStatus=link3MajorStatus, pdcreconfigure=pdcreconfigure, pbcds1V2Coding=pbcds1V2Coding, lmiNoRspDown=lmiNoRspDown, mgmtBytesSent=mgmtBytesSent, pCATDerStatusEntry=pCATDerStatusEntry, pdhE3ES=pdhE3ES, qeDocMacAddress=qeDocMacAddress, plppSPLCPRxYellowAlarm=plppSPLCPRxYellowAlarm, plppE3STXCells=plppE3STXCells, dv2Lmi=dv2Lmi, sysLastResetTimeM2=sysLastResetTimeM2, pIndex=pIndex, scfFirmwareRev=scfFirmwareRev, frbPConfigPriority=frbPConfigPriority, ctrlTable=ctrlTable, svcQsaalReset=svcQsaalReset, vcDocHighWater=vcDocHighWater, svcMaxSapConn=svcMaxSapConn, limSysDecompErr=limSysDecompErr, sdcV2FRMRMode=sdcV2FRMRMode, svcQ93bStatAddPtyRejTx=svcQ93bStatAddPtyRejTx, veCDVMax=veCDVMax, ss3sIndex=ss3sIndex, vcDocCLines=vcDocCLines, xpTxHighPrOver=xpTxHighPrOver, vidOutImageErr=vidOutImageErr, cacMaxLinkUsage=cacMaxLinkUsage, svcQsaalStatBgakTx=svcQsaalStatBgakTx, mgmtPortProt=mgmtPortProt, oamVcbTrapEnable=oamVcbTrapEnable, lFibreConfEntry=lFibreConfEntry, oamVcaVpcEndPoint=oamVcaVpcEndPoint, slot0PsuReset=slot0PsuReset, j2SES=j2SES, sysCurrentSema=sysCurrentSema, pCATstatusEntry=pCATstatusEntry, clockActiveRef=clockActiveRef, veStatPortNo=veStatPortNo, ssCATFFrevision=ssCATFFrevision, audLpbk=audLpbk, frbPStatLocSeq=frbPStatLocSeq, pdhE3LOSAlarm=pdhE3LOSAlarm, svcQsaalStatUstatTx=svcQsaalStatUstatTx, dv2Message=dv2Message, sPvcAddress=sPvcAddress, plppSTXclock=plppSTXclock, frbPStatLastChangeM2=frbPStatLastChangeM2, oamLastRxVpi=oamLastRxVpi, alarmNodeCrit=alarmNodeCrit, fRelStatRemSeq=fRelStatRemSeq, sPvcId=sPvcId, oamVcbRcvAIS_RDI=oamVcbRcvAIS_RDI, pdhDS3SES2=pdhDS3SES2, alrACOlink2ACO=alrACOlink2ACO, svcSAPStatus=svcSAPStatus, scconoffline=scconoffline, svcQ93bStatRelTx=svcQ93bStatRelTx, fraPConfigSuba=fraPConfigSuba, vhsystem=vhsystem, pcconoffline=pcconoffline, svcForwardSustainableCellRate=svcForwardSustainableCellRate, plppSRXCells=plppSRXCells, plppE3SRxPloadTypeLabUnst=plppE3SRxPloadTypeLabUnst, pdhPLCPMode=pdhPLCPMode, frbPStatLocMec=frbPStatLocMec, vePvcValid=vePvcValid)
mibBuilder.exportSymbols("DV2-MIB", e1GappedClk=e1GappedClk, pvcMulticast=pvcMulticast, svcQsaalStatStatRx=svcQsaalStatStatRx, se1SA6=se1SA6, svcResourceEntry=svcResourceEntry, clksSysRefLinkNum=clksSysRefLinkNum, ds1LineSES=ds1LineSES, plppE3CRxExTrcIdUH=plppE3CRxExTrcIdUH, lmiNetSideTable=lmiNetSideTable, qeDocTunName=qeDocTunName, soLimType=soLimType, vcaBucket0Max=vcaBucket0Max, sdhSAlarmLOF=sdhSAlarmLOF, billFwdMBS=billFwdMBS, fraPConfigDlci=fraPConfigDlci, svcBillTag=svcBillTag, fRelayStatEntry=fRelayStatEntry, slot0PhyDocSerNo=slot0PhyDocSerNo, billEndM2=billEndM2, ds1Z16Count=ds1Z16Count, link0MajorStatus=link0MajorStatus, mjlimSlipLine=mjlimSlipLine, ds1V2LOSDefect=ds1V2LOSDefect, scatstr3reconfigure=scatstr3reconfigure, ds3TXLoc=ds3TXLoc, scatstr3oscstatus=scatstr3oscstatus, ds1SES=ds1SES, audInLoopBack=audInLoopBack, fRelStatRemErrThr=fRelStatRemErrThr, pvcForwardSustainedSize=pvcForwardSustainedSize, svcQsaalStatSdRx=svcQsaalStatSdRx, dv2LocalFibre=dv2LocalFibre, redunAvail=redunAvail, plppE3CFramer=plppE3CFramer, sdhLOS=sdhLOS, plppsRxPloadTypeLabUnst=plppsRxPloadTypeLabUnst, sdsV2LCVCnt=sdsV2LCVCnt, linkChanged=linkChanged, scatstr3listener=scatstr3listener, sdhCLoopTimer=sdhCLoopTimer, svcPCRCLP01Max=svcPCRCLP01Max, e1IntrfType=e1IntrfType, svcQ93bStatActive=svcQ93bStatActive, ds1V2ES=ds1V2ES, dataPortProt=dataPortProt, qeDocTunRemEndSkt=qeDocTunRemEndSkt, sdhLOP=sdhLOP, scatplaceholder2=scatplaceholder2, vcaDstLink=vcaDstLink, vcbCellMask=vcbCellMask, jpegSlipSpeed=jpegSlipSpeed, cacLinkState=cacLinkState, plppV2SFrameErrs=plppV2SFrameErrs, vidInTransMode=vidInTransMode, oamVcbCCState=oamVcbCCState, sysDbTable=sysDbTable, frbPStatRxFCnt=frbPStatRxFCnt, svcQ93bStatRelRx=svcQ93bStatRelRx, vidInProvMode=vidInProvMode, vcaInternalVci=vcaInternalVci, j2FirmwareRev=j2FirmwareRev, billSvci=billSvci, dataRemoteIp=dataRemoteIp, oamVcaDefectType=oamVcaDefectType, slotCritStatus=slotCritStatus, plppE3SRXCells=plppE3SRXCells, svcVpiStart=svcVpiStart, plppV2C0x55=plppV2C0x55, pdhPLCPUAS=pdhPLCPUAS, jpegSWRev=jpegSWRev, billingInterval=billingInterval, vcDocLinkSpeed=vcDocLinkSpeed, svcQsaalStatBgnRx=svcQsaalStatBgnRx, sdhSLineSES=sdhSLineSES, sdhCIdleCell=sdhCIdleCell, billCLP1Out=billCLP1Out, e3Reconfig=e3Reconfig, psuChanged=psuChanged, svcQ93bStatStatTx=svcQ93bStatStatTx, e3TxAIS=e3TxAIS, ds1Table=ds1Table, oamLastTxVpi=oamLastTxVpi, pdhDS3FarEndES=pdhDS3FarEndES, lmiNetSideEntry=lmiNetSideEntry, billingRecFail=billingRecFail, fRelConfLinkType=fRelConfLinkType, sysLkKillLink=sysLkKillLink, pscatplaceholder1=pscatplaceholder1, svcQ93bStatDropPtyRx=svcQ93bStatDropPtyRx, j2RAlmAlarm=j2RAlmAlarm, svcQsaalStatOutSduDisc=svcQsaalStatOutSduDisc, jpegSlipIp=jpegSlipIp, ds1YellowAlarm=ds1YellowAlarm, pvcVciEnd=pvcVciEnd, cacLinkSumE20=cacLinkSumE20, frbPStatTxFRate=frbPStatTxFRate, pvcBackwardPeakMode=pvcBackwardPeakMode, vcaBucket2Inc=vcaBucket2Inc, ceStatReset=ceStatReset, slot0PsuFanASpeed=slot0PsuFanASpeed, ceStr3=ceStr3, vidOutSeqnoErr=vidOutSeqnoErr, svcQ93bStatConnTx=svcQ93bStatConnTx, pdhPLCPLinkEnable=pdhPLCPLinkEnable, pvcSvci=pvcSvci, pvcAuxForwardPeakCellRate=pvcAuxForwardPeakCellRate, sdslineok=sdslineok, vcaBucket3CV=vcaBucket3CV, sdhReconfig=sdhReconfig, ssCATHWrevision=ssCATHWrevision, plppE3SRxLOS=plppE3SRxLOS, plppSLinkNo=plppSLinkNo, pvcAuxForwardSustainedMode=pvcAuxForwardSustainedMode, psCATfilerevision=psCATfilerevision, svcQsaalMaxPD=svcQsaalMaxPD, e1LOSDefect=e1LOSDefect, mgmtBytesRcvd=mgmtBytesRcvd, e3Yellow=e3Yellow, vidOutUnLpb=vidOutUnLpb, xpIFace=xpIFace, frbPConfigDlci=frbPConfigDlci, ds1ExBERAlarm=ds1ExBERAlarm, plppSDs3RxAIS=plppSDs3RxAIS, billDvpi=billDvpi, svcQsaalStatUdTx=svcQsaalStatUdTx, vcbBucket1CV=vcbBucket1CV, sntmoscstatus=sntmoscstatus, sbitslineok=sbitslineok, xpLowPriorityFifo=xpLowPriorityFifo, vcaDstVpi=vcaDstVpi, vidOutPackets=vidOutPackets, plppCTable=plppCTable, ds1v2Yellow=ds1v2Yellow, audPrefMode=audPrefMode, sysLKIgMemBlockId=sysLKIgMemBlockId, vcaBucket0Inc=vcaBucket0Inc, pvcAuxBackwardSustainedMode=pvcAuxBackwardSustainedMode, pdhPLCPLinkState=pdhPLCPLinkState, fRelConfN393=fRelConfN393, lmiTable=lmiTable, alcTxError=alcTxError, slot0StandbyXp=slot0StandbyXp, alarmStatTable=alarmStatTable, dv2Billing=dv2Billing, vcStatRxSeqNo=vcStatRxSeqNo, sdhSUnCorrHCS=sdhSUnCorrHCS, cacPerSapEntry=cacPerSapEntry, vidOutIdleSrc=vidOutIdleSrc, plppV2SDs3Lcvs=plppV2SDs3Lcvs, limFault=limFault, soTable=soTable, ds1V2OCfCount=ds1V2OCfCount, pdhDS3AISS=pdhDS3AISS, veLinkNo=veLinkNo, j2LOFAlarm=j2LOFAlarm, vidInPres=vidInPres, j2LineES=j2LineES, soTxEn0=soTxEn0, plppE1STable=plppE1STable, svcNumLeaves=svcNumLeaves, oamVcbConnectionType=oamVcbConnectionType, sysClkAlarmErr=sysClkAlarmErr, e1ExBERDefect=e1ExBERDefect, scfInterfaceType=scfInterfaceType, billLinks=billLinks, slot0IntIp=slot0IntIp, vcaRxGCells=vcaRxGCells, qeDocTunOutFrames=qeDocTunOutFrames, plppE1SLcvs=plppE1SLcvs, qeDocTunLink2Eligible=qeDocTunLink2Eligible, vidViewPip=vidViewPip, xpTxLowPrOver=xpTxLowPrOver, vcDocTable=vcDocTable, clksSysRefSlotNum=clksSysRefSlotNum, pbsIndex=pbsIndex, ds1LOSAlarm=ds1LOSAlarm, bill75pstfull=bill75pstfull, pccatsendcode=pccatsendcode, veCDV=veCDV, veOflCnt=veOflCnt, vcbCellSwitchHead=vcbCellSwitchHead, pdhE3LOFAlarm=pdhE3LOFAlarm, ceDisCnt=ceDisCnt, oamVcbTable=oamVcbTable, sysLKEgCLPThreshold=sysLKEgCLPThreshold, svcQ93bStatLstCauseTx=svcQ93bStatLstCauseTx, scfLb=scfLb, sysCurrentMemB=sysCurrentMemB, psuPresent=psuPresent, ds1V2LOSAlarm=ds1V2LOSAlarm, limSysState=limSysState, fraPConfigDxivpi=fraPConfigDxivpi, pInputLineOk=pInputLineOk, link3MinorStatus=link3MinorStatus, bill25pstfull=bill25pstfull, scatstr3listenerstatus=scatstr3listenerstatus, sysAuIpaddress=sysAuIpaddress, pdhE3FERFDefect=pdhE3FERFDefect, ds1FerCount=ds1FerCount, veEntry=veEntry, oamRxCount=oamRxCount, sdhSSectLOF=sdhSSectLOF, svcQ93bStatSAP=svcQ93bStatSAP, ceUflCnt=ceUflCnt, scfLineTiming=scfLineTiming, oamVcbEntry=oamVcbEntry, xpRxOverflow=xpRxOverflow, ds3V2TxLBO=ds3V2TxLBO, fRelStatLocMec=fRelStatLocMec, slot0PsuVoltage=slot0PsuVoltage, alrACOslotNo=alrACOslotNo, vcaBucket2CV=vcaBucket2CV, slot0PhySlotSerNo=slot0PhySlotSerNo, pvcBackwardPeakSize=pvcBackwardPeakSize, dQ7_error=dQ7_error, pvcAuxBackwardSustainedSize=pvcAuxBackwardSustainedSize, pCATDerConfigTable=pCATDerConfigTable, lmiUserSideAddressStatus=lmiUserSideAddressStatus, ctrlCodecReq=ctrlCodecReq, vcbBucket3Inc=vcbBucket3Inc, fraPStatDisRxF=fraPStatDisRxF, oamVcaBkwRptSevErr=oamVcaBkwRptSevErr, ceRxCnt=ceRxCnt, oamVcbDefectType=oamVcbDefectType, slot0PhyEntry=slot0PhyEntry, pvcMolnVpi=pvcMolnVpi, veDstLink=veDstLink, pvcMolnVci=pvcMolnVci, sscatplaceholder2=sscatplaceholder2, lmiEsi=lmiEsi, alrACOlink3ACO=alrACOlink3ACO, fraPStatRemStat=fraPStatRemStat, spvcInit=spvcInit, svcIntType=svcIntType, svcRetryPeriod=svcRetryPeriod, slotMinorStatus=slotMinorStatus, e3TxClkSel=e3TxClkSel, sdhSLineBIP24=sdhSLineBIP24, qeDocTunLink3Eligible=qeDocTunLink3Eligible, aal1Fault=aal1Fault, svcQ93bStatAddPtyTx=svcQ93bStatAddPtyTx, svcQ93bStatCallProcTx=svcQ93bStatCallProcTx, sendFileSel=sendFileSel, dataResetStat=dataResetStat, dataBytesSent=dataBytesSent, e3LimOK=e3LimOK, pbsV2RxLOSCnt=pbsV2RxLOSCnt, dv2SDH=dv2SDH, vcbExcessCells=vcbExcessCells, scfTable=scfTable, limHwRev=limHwRev, vidOutSource=vidOutSource, pdhPLCPTXCells=pdhPLCPTXCells, sdhSPathFarEndFC=sdhSPathFarEndFC)
mibBuilder.exportSymbols("DV2-MIB", pbitslineok=pbitslineok, xpIgDiscCells=xpIgDiscCells, vcbBucket1Max=vcbBucket1Max, qeDocBridgeTable=qeDocBridgeTable, fRelConfN391=fRelConfN391, e1ClrStats=e1ClrStats, fRelStatLocAck=fRelStatLocAck, sPvcForwardPeakCellRate=sPvcForwardPeakCellRate, lmiUserSideAddressId=lmiUserSideAddressId, vidInPresent=vidInPresent, pvcSSlot=pvcSSlot, billLost=billLost, vcDocLinkNo=vcDocLinkNo, pdhPLCPRXCells=pdhPLCPRXCells, svcMaxPtPtConnections=svcMaxPtPtConnections, ds1v2LOS=ds1v2LOS, psCATFFrevision=psCATFFrevision, plppC0x55=plppC0x55, svcBackwardCellRateAvailable=svcBackwardCellRateAvailable, sscatlimtype=sscatlimtype, pdhDS3FarEndSES=pdhDS3FarEndSES, pvcEntry=pvcEntry, plppV2SPLCPRxYellowAlarm=plppV2SPLCPRxYellowAlarm, vcaCellHead=vcaCellHead, fraPStatLocPoll=fraPStatLocPoll, netcomm=netcomm, vidOutChnlLpbk=vidOutChnlLpbk, forceRevert=forceRevert, billCalled=billCalled, plppE3SLinkNo=plppE3SLinkNo, svcInternalVpi=svcInternalVpi, ds3V2LOSAlarm=ds3V2LOSAlarm, psCATHWrevision=psCATHWrevision, vidEntry=vidEntry, svcQsaalUpDown=svcQsaalUpDown, fraPStatTxFRate=fraPStatTxFRate, plppE3CTxTrcIdUH=plppE3CTxTrcIdUH, lim_oper=lim_oper, sysLKEgLogBuffer=sysLKEgLogBuffer, sysAuIndex=sysAuIndex, svcSE164Sub=svcSE164Sub, pbcplaceholder1=pbcplaceholder1, cePriVal=cePriVal, vcStatRxCells=vcStatRxCells, pvcDvpi=pvcDvpi, ds3LOSAlarm=ds3LOSAlarm, lFibreStatTable=lFibreStatTable, svcSvpi=svcSvpi, svcQsaalStatBgrejRx=svcQsaalStatBgrejRx, vcDocFifoSize=vcDocFifoSize, svcTLinkNo=svcTLinkNo, billSeq=billSeq, link2CritStatus=link2CritStatus, svcHalfConCnt=svcHalfConCnt, fraPStatLastChangeM2=fraPStatLastChangeM2, e3LOSDefect=e3LOSDefect, vcbDstLink=vcbDstLink, pdcds1V2TxLineLn=pdcds1V2TxLineLn, sdsIndex=sdsIndex, ctrlFaultReason=ctrlFaultReason, svcMaxPtMptParties=svcMaxPtMptParties, dv2CE=dv2CE, pvcAuxBackwardPeakCellRate=pvcAuxBackwardPeakCellRate, vidDecFrameCount=vidDecFrameCount, vidInAvgBitRate=vidInAvgBitRate, fRelConfLinkMode=fRelConfLinkMode, sdhStmSts=sdhStmSts, vcaCellSwitchHead=vcaCellSwitchHead, slot0PsuTemp=slot0PsuTemp, pcatstr3driverstatus=pcatstr3driverstatus, svcInternalVci=svcInternalVci, pdhE3LES=pdhE3LES, pscaterrorcode=pscaterrorcode, pdhE3RxTrIdMis=pdhE3RxTrIdMis, ds1V2TxAIS=ds1V2TxAIS, vcbBucket1Inc=vcbBucket1Inc, sdsV2RxOOFCnt=sdsV2RxOOFCnt, plppV2SLOC=plppV2SLOC, svcT309Expiry=svcT309Expiry, pvcAuxForwardPeakSize=pvcAuxForwardPeakSize, ctrlCodecType=ctrlCodecType, pdhPLCPYellowDefect=pdhPLCPYellowDefect, vcbType=vcbType, plppCTxTrlTrcIdLen=plppCTxTrlTrcIdLen, pdhE3Clear=pdhE3Clear, cacCurrentSapUsage=cacCurrentSapUsage, svcQsaalStatRsRx=svcQsaalStatRsRx, vidInQuanFactor=vidInQuanFactor, vidInFailReason=vidInFailReason, svcQ93bStatDropPtyAckTx=svcQ93bStatDropPtyAckTx, vcDocEntry=vcDocEntry, vcDocVci=vcDocVci, clksTxTimingRef=clksTxTimingRef, fraPStatLocStartT=fraPStatLocStartT, dataMask=dataMask, ds3V2LimOK=ds3V2LimOK, reset040=reset040, plppE3SPLCPRxYellowAlarm=plppE3SPLCPRxYellowAlarm, sccatsendcode=sccatsendcode, pvcQoSClass=pvcQoSClass, userInputTrapEnable=userInputTrapEnable, pdhDS3Framer=pdhDS3Framer, slot0PhySlotHwVerNo=slot0PhySlotHwVerNo, svcVpiMapping=svcVpiMapping, dv2VcStatus=dv2VcStatus, ceStatEntry=ceStatEntry, xpTXCells=xpTXCells, pvcTable=pvcTable, plppSDs3CbitPrtyErrs=plppSDs3CbitPrtyErrs, audInSta=audInSta, lFibreStatEntry=lFibreStatEntry, svcQ93bStatAddPtyRejRx=svcQ93bStatAddPtyRejRx, frbPStatEntry=frbPStatEntry, vhcontrol=vhcontrol, pdhDS3TableValid=pdhDS3TableValid, plppE3CPloadTypeLab=plppE3CPloadTypeLab, sdhSPathFarEndES=sdhSPathFarEndES, fRelStatRemPoll=fRelStatRemPoll, svcEntry=svcEntry, limBootRev=limBootRev, oamSegEndPoint=oamSegEndPoint, ceStatRxState=ceStatRxState, svcCBRallowed=svcCBRallowed, fraPStatLocMec=fraPStatLocMec, lFibreConfTable=lFibreConfTable, pdhPLCPLOCDDefect=pdhPLCPLOCDDefect, hssiRemoteLoopback=hssiRemoteLoopback, pdhDS3Lcvs=pdhDS3Lcvs, slot0PhyLstChngLnkNum=slot0PhyLstChngLnkNum, j2QualClock=j2QualClock, audState=audState, pdhPLCPTXclock=pdhPLCPTXclock, pdhPLCPYellowAlarm=pdhPLCPYellowAlarm, vcaEntry=vcaEntry, billCalling=billCalling, sCATBitsStatusEntry=sCATBitsStatusEntry, qeDocTunRemMask=qeDocTunRemMask, pvcResourceEntry=pvcResourceEntry, fraPStatTable=fraPStatTable, link2MajorStatus=link2MajorStatus, frbPStatRxBRate=frbPStatRxBRate, sbcIndex=sbcIndex, sCATStratum3StatusTable=sCATStratum3StatusTable, ceEnable=ceEnable, slipIp=slipIp, vidInCurFrameRate=vidInCurFrameRate, dv2VcDoc=dv2VcDoc, spvcFail=spvcFail, forceSecondary=forceSecondary, qeDocTunLink1Eligible=qeDocTunLink1Eligible, svcVBRLUBRsubtractpercent=svcVBRLUBRsubtractpercent, billBwdQOS=billBwdQOS, pdhDS3FarEndUAS=pdhDS3FarEndUAS, sbcV2FRMRMode=sbcV2FRMRMode, billFrameOut=billFrameOut, Hex=Hex, svcQ93bStatConnAckTx=svcQ93bStatConnAckTx, oamVcbVci=oamVcbVci, plppV2SSPLRStatus=plppV2SSPLRStatus, e1FerfDefect=e1FerfDefect, svcBackwardPeakMode=svcBackwardPeakMode, svcQsaalStatRsakRx=svcQsaalStatRsakRx, vcStatFifoCount=vcStatFifoCount, j2LineSES=j2LineSES, pvcInternalVci=pvcInternalVci, sysCompileTime=sysCompileTime, pdhE3LinkNo=pdhE3LinkNo, plppV2CFrmFmt=plppV2CFrmFmt, frbPConfigExcessB=frbPConfigExcessB, lmiLinkMgmt=lmiLinkMgmt, ds1V2LineSES=ds1V2LineSES, billValid=billValid, pdhDS3Clear=pdhDS3Clear, ds3Table=ds3Table, dataHDLCcheck=dataHDLCcheck, plppV2SRXclock=plppV2SRXclock, j2UAS=j2UAS, pvcSLink=pvcSLink, audMuteInReq=audMuteInReq, cacLinkVersion=cacLinkVersion, sdhSLineFERF=sdhSLineFERF, pvcVpiStart=pvcVpiStart, traceUdp=traceUdp, plppsRxPloadTypeLabMis=plppsRxPloadTypeLabMis, userInputNo=userInputNo, sCATDerStatusTable=sCATDerStatusTable, pcatcommand=pcatcommand, sdhSLineUAS=sdhSLineUAS, j2LOS=j2LOS, pdhPLCPLinkStatusAffect=pdhPLCPLinkStatusAffect, qeDocTunVCI=qeDocTunVCI, sdhSPathFarEndSES=sdhSPathFarEndSES, plppE3STXclock=plppE3STXclock, hssiTable=hssiTable, svcTable=svcTable, qeDocBridgeLinkNo=qeDocBridgeLinkNo, billFwdPCR=billFwdPCR, oamTxCount=oamTxCount, sCATcontrolEntry=sCATcontrolEntry, j2TxAIS=j2TxAIS, plppSDs3ParityErrs=plppSDs3ParityErrs, vcStatRxState=vcStatRxState, svcQ93bStatStatEnqRx=svcQ93bStatStatEnqRx, svcSigVci=svcSigVci, scfLOS=scfLOS, pdhE3LSES=pdhE3LSES, j2ES=j2ES, e1Reconfig=e1Reconfig, svcE164Addr=svcE164Addr, ceFifoLvlCnt=ceFifoLvlCnt, vidOutJpeg=vidOutJpeg, switchFabricSwap=switchFabricSwap, slot0CurrentUpSlots=slot0CurrentUpSlots, slot0XpInUse=slot0XpInUse, pcatforcesecext=pcatforcesecext, oamVcaAisRdiState=oamVcaAisRdiState, fraPStatRxBRate=fraPStatRxBRate, pdhDS3FEBEErrs=pdhDS3FEBEErrs, sysDbSize=sysDbSize, svcVpStart=svcVpStart, svcTrafficTable=svcTrafficTable, plppV2STXCells=plppV2STXCells, ctrlFraming=ctrlFraming, svcQsaalStatEndTx=svcQsaalStatEndTx, vcbBucketControl=vcbBucketControl, j2RAI=j2RAI, oamVcaVci=oamVcaVci, cacLinkTotalBwScrPcr=cacLinkTotalBwScrPcr, fRelStatRemState=fRelStatRemState, frbPStatTable=frbPStatTable, userInputAlrClass=userInputAlrClass, scfLOSDefect=scfLOSDefect, billFwdSCR=billFwdSCR, sPvcQoSClass=sPvcQoSClass, svcQ93bStatAddPtyAckTx=svcQ93bStatAddPtyAckTx, svcQ93bStatConnRx=svcQ93bStatConnRx, sdhSPathFERF=sdhSPathFERF, dataEntry=dataEntry, billingTable=billingTable, billSlink=billSlink, lFibreConfLoopback=lFibreConfLoopback, vcaVpi=vcaVpi, pbcclrperf=pbcclrperf, sdhCScrambler=sdhCScrambler, pdhPLCPFrameErrs=pdhPLCPFrameErrs, pdhE3AISAlarm=pdhE3AISAlarm, vidOutFailReason=vidOutFailReason, pdhE3LOSDefect=pdhE3LOSDefect, lmiNetSidePrefixStatus=lmiNetSidePrefixStatus, pvcVpStart=pvcVpStart, hssiLinkNo=hssiLinkNo, pdhDS3ES2=pdhDS3ES2, alrACOlink1ACO=alrACOlink1ACO, fraPStatDERxF=fraPStatDERxF)
mibBuilder.exportSymbols("DV2-MIB", plppE1SLinkNo=plppE1SLinkNo, sdhSLineFarEndES=sdhSLineFarEndES, slot0MibBroadcast=slot0MibBroadcast, sCATBitsStatusTable=sCATBitsStatusTable, svcCurSapConn=svcCurSapConn, vidInCurQFactor=vidInCurQFactor, sscaterrorcode=sscaterrorcode, sCATStratum3ConfigTable=sCATStratum3ConfigTable, pvcForwardPeakMode=pvcForwardPeakMode, lmiNetSidePrefixId=lmiNetSidePrefixId, pdhDS3LOSAlarm=pdhDS3LOSAlarm, oamVcaConnectionType=oamVcaConnectionType, xpRXCells=xpRXCells, plppE1CTable=plppE1CTable, sdsV2RxBERCnt=sdsV2RxBERCnt, limAction=limAction, vcbInternalVci=vcbInternalVci, sdcreconfigure=sdcreconfigure, plppV2SHCSErrs=plppV2SHCSErrs, svcVpEnd=svcVpEnd, e3LimType=e3LimType, ds1V2Coding=ds1V2Coding, qeDocTunType=qeDocTunType, pvcVpEnd=pvcVpEnd, fraPConfigExcessB=fraPConfigExcessB, pvcAuxBackwardPeakMode=pvcAuxBackwardPeakMode, svcForwardPeakCellRate=svcForwardPeakCellRate, plppE1CScrambler=plppE1CScrambler, oamVcbAisRdiGeneration=oamVcbAisRdiGeneration, qeDocTunIdlePeriod=qeDocTunIdlePeriod, sPvcTargetVpi=sPvcTargetVpi, plppE3SEntry=plppE3SEntry, dv2Cac=dv2Cac, pdhPLCPEntry=pdhPLCPEntry, pvcAuxBackwardPeakSize=pvcAuxBackwardPeakSize, lmiUserSideLinkNo=lmiUserSideLinkNo, j2LOF=j2LOF, slotMajorStatus=slotMajorStatus, vidInPeakBitRate=vidInPeakBitRate, ds3Equal=ds3Equal, svcQ93bTmrT310=svcQ93bTmrT310, sPvcSourceVpi=sPvcSourceVpi, j2Entry=j2Entry, cacLinkSumE10=cacLinkSumE10, sdcplaceholder1=sdcplaceholder1, sysInitialMemB=sysInitialMemB, pCATStratum3StatusTable=pCATStratum3StatusTable, oamVcaVpi=oamVcaVpi, ds3LOS=ds3LOS, vcaType=vcaType, sdhExBER=sdhExBER, plppCLoopback=plppCLoopback, hssiDCENotReady=hssiDCENotReady, ds1TxClkSel=ds1TxClkSel, veInvCnt=veInvCnt, cacLinkObfPvc1=cacLinkObfPvc1, hssiLimType=hssiLimType, ds1Framing=ds1Framing, alrACOlink0ACO=alrACOlink0ACO, alarmNodeMinor=alarmNodeMinor, vidTable=vidTable, limHostRev=limHostRev, plppE3CLoopback=plppE3CLoopback, pvcDLink=pvcDLink, sccatactivate=sccatactivate, ds1LOSDefect=ds1LOSDefect, pdcV2Lb=pdcV2Lb, j2FerCount=j2FerCount, plppSTXCells=plppSTXCells, vcDocEnable=vcDocEnable, billCalledSub=billCalledSub, fRelConfT392=fRelConfT392, mgmtPortStat=mgmtPortStat, plcpLOF=plcpLOF, sdhCLoopLine=sdhCLoopLine, svcSCRMax=svcSCRMax, plppE1CLpbk=plppE1CLpbk, scfClkSel=scfClkSel, pntmoscstatus=pntmoscstatus, vcaBucket1Inc=vcaBucket1Inc, qeDocBridgeLink0Eligible=qeDocBridgeLink0Eligible, ds1AISDefect=ds1AISDefect, slot0PhySlotNo=slot0PhySlotNo, plppE3SLcd=plppE3SLcd, billFwdQOS=billFwdQOS, ds1LinkNo=ds1LinkNo, badPassword=badPassword, sbsV2LCVCnt=sbsV2LCVCnt, pdhDS3CbitPrtyErrs=pdhDS3CbitPrtyErrs, ceDstSlot=ceDstSlot, svcQ93bStatLstCauseRx=svcQ93bStatLstCauseRx, limSCmgmt=limSCmgmt, pdhDS3UAS=pdhDS3UAS, plppV2SLinkNo=plppV2SLinkNo, sccatbytestransferred=sccatbytestransferred, limState=limState, fRelConfT391=fRelConfT391, ctrlCodecSta=ctrlCodecSta, vcbInternalVpi=vcbInternalVpi, vcaBucket0CV=vcaBucket0CV, ds1v2AIS=ds1v2AIS, cacCurrentLinkUsage=cacCurrentLinkUsage, autoRevert=autoRevert, pscatmode=pscatmode, dv2Trace=dv2Trace, vcaBucket1CV=vcaBucket1CV, cacEbtState=cacEbtState, svcQsaalStatInPduDisc=svcQsaalStatInPduDisc, pCATstatusTable=pCATstatusTable, ds1AISS=ds1AISS, svcMaxPtMptConnections=svcMaxPtMptConnections, pdhPLCPClear=pdhPLCPClear, dv2=dv2, frbPStatDERxF=frbPStatDERxF, link0CritStatus=link0CritStatus, vcaTable=vcaTable, plppV2SDs3FEACTxmt=plppV2SDs3FEACTxmt, ds1V2Table=ds1V2Table, frbPStatRemStat=frbPStatRemStat, ds3Lb=ds3Lb, audTable=audTable, frbPStatRemAck=frbPStatRemAck, svcQosRoute=svcQosRoute, svcLoadRoute=svcLoadRoute, pbcreconfigure=pbcreconfigure, ds1LineES=ds1LineES, sdhSExBERDefect=sdhSExBERDefect, slot0TftpToStandby=slot0TftpToStandby, plppE3CPLCPMode=plppE3CPLCPMode, svcTrafficEntry=svcTrafficEntry, plppSDs3RxYellowAlarm=plppSDs3RxYellowAlarm, j2LOSAlarm=j2LOSAlarm, sbsV2RxAIS=sbsV2RxAIS, veStatEntry=veStatEntry, j2TS97TS98=j2TS97TS98, billTag=billTag, e1Yellow=e1Yellow, svcBackwardPeakCellRate=svcBackwardPeakCellRate, lmiPrefixMod=lmiPrefixMod, ds1LOFAlarm=ds1LOFAlarm, slot0LecsESI=slot0LecsESI, frbPConfigDxivpi=frbPConfigDxivpi, svcQ93bStatSetupTx=svcQ93bStatSetupTx, svcQsaalStatSAP=svcQsaalStatSAP, oamLastRxType=oamLastRxType, lmiFormat=lmiFormat, e3LinkNo=e3LinkNo, slot0PsuFault=slot0PsuFault, ds3V2Reconfig=ds3V2Reconfig, svcPolicing=svcPolicing, sysDefaultCellMode=sysDefaultCellMode, ds1V2TxClkSel=ds1V2TxClkSel, svcDSlot=svcDSlot, fraPStatDlci=fraPStatDlci, ds3Yellow=ds3Yellow, veRxCnt=veRxCnt, plppsRxTrIdUnst=plppsRxTrIdUnst, plppCSmdsMode=plppCSmdsMode, qeDocTunLocNet=qeDocTunLocNet, sysCurrentTimeM2=sysCurrentTimeM2, oamLoopbackTable=oamLoopbackTable, link1CritStatus=link1CritStatus, svcQsaalStatBgakRx=svcQsaalStatBgakRx, plppE1CLinkEnab=plppE1CLinkEnab, ceMulticast=ceMulticast, ds1V2FRMRMode=ds1V2FRMRMode, ds1V2AISDefect=ds1V2AISDefect, ds1V2BERAlarm=ds1V2BERAlarm, fraPConfigDxivci=fraPConfigDxivci, dv2DS=dv2DS, vidState=vidState, frbPStatDlci=frbPStatDlci, outOfResource=outOfResource, plppSEntry=plppSEntry, sdsV2RxBER=sdsV2RxBER, oamVcaRcvAIS_RDI=oamVcaRcvAIS_RDI, billDlink=billDlink, oamVcaDefectLink=oamVcaDefectLink, ds1UAS=ds1UAS, sbsIndex=sbsIndex, e1TS16PayLd=e1TS16PayLd, svcQ93bTmrT398=svcQ93bTmrT398, oamTable=oamTable, pvcBackwardSustainedMode=pvcBackwardSustainedMode, svcQsaalStatPollRx=svcQsaalStatPollRx, vcbEntry=vcbEntry, oamVcaDefectSlot=oamVcaDefectSlot, svcQsaalStatUdRx=svcQsaalStatUdRx, vidInSubSample=vidInSubSample, j2Lb=j2Lb, sysLKEgMemBlockId=sysLKEgMemBlockId, frbPStatDisRxF=frbPStatDisRxF, plppV2CSmdsMode=plppV2CSmdsMode, plcpYellow=plcpYellow, plppE3SRxTrlTrc=plppE3SRxTrlTrc, plppV2CLoopback=plppV2CLoopback, cacErrorCode=cacErrorCode, e1LinkNo=e1LinkNo, slot0PhyLink2State=slot0PhyLink2State, pvcBackwardSustainedSize=pvcBackwardSustainedSize, ds1Yellow=ds1Yellow, slot0PhyStateChange=slot0PhyStateChange, svcQsaalStatOutPduDisc=svcQsaalStatOutPduDisc, dataIp=dataIp, frbPStatLocStat=frbPStatLocStat, pvcLink=pvcLink, ds1V2LcvCount=ds1V2LcvCount, e1SES=e1SES, svcQsaalStatEndRx=svcQsaalStatEndRx, sdhSLineFarEndUAS=sdhSLineFarEndUAS, ceTxCnt=ceTxCnt, pdhPLCP0x55=pdhPLCP0x55, plppE1SRXCells=plppE1SRXCells, lmiNetSidePrefix=lmiNetSidePrefix, pdhPLCPRXclock=pdhPLCPRXclock, sysLkTxMaxRate=sysLkTxMaxRate, routeLoadFail=routeLoadFail, frbPStatRemPoll=frbPStatRemPoll, ds3Err=ds3Err, slipRemoteIp=slipRemoteIp, lmiState=lmiState, sdhSPathFEBE=sdhSPathFEBE, qeDocIpMask=qeDocIpMask, dv2PDH=dv2PDH, pvcForwardPeakCellRate=pvcForwardPeakCellRate, sdhS2Table=sdhS2Table, alrACOslotACO=alrACOslotACO, ceSecVal=ceSecVal, pbcV2FRMRMode=pbcV2FRMRMode, pccatsendconfig=pccatsendconfig, dataIndex=dataIndex, vidRxVidReq=vidRxVidReq, slot0PsuTable=slot0PsuTable, billBwdMBS=billBwdMBS, qeDocTunRetryPeriod=qeDocTunRetryPeriod, pdhE3RxExTrcIdUH=pdhE3RxExTrcIdUH, ds1V2BeeCount=ds1V2BeeCount, vcaCellMask=vcaCellMask, vcaExcessCells=vcaExcessCells, sdhSPathAIS=sdhSPathAIS, lFibreStatLinkNo=lFibreStatLinkNo, svcVciStart=svcVciStart, slot0SwitchId=slot0SwitchId, j2Reconfig=j2Reconfig, vcbBucket0CV=vcbBucket0CV, ds1V2AISS=ds1V2AISS, scfReconfig=scfReconfig, pSlotNumber=pSlotNumber, sysLkResetResrc=sysLkResetResrc, sendFileStat=sendFileStat, lmiConnectivity=lmiConnectivity, soTimingRef=soTimingRef, plppsRxTrlTrc=plppsRxTrlTrc, link1MajorStatus=link1MajorStatus)
mibBuilder.exportSymbols("DV2-MIB", sscatfilestatus=sscatfilestatus, e1UAS=e1UAS, svcQ93bStatRstRx=svcQ93bStatRstRx, cacLinkReset=cacLinkReset, fraPStatRemPoll=fraPStatRemPoll, pdhE3ParityErrs=pdhE3ParityErrs, svcQsaalTmrNoResponse=svcQsaalTmrNoResponse, audMuteOutReq=audMuteOutReq, pvcVciStart=pvcVciStart, mjlimControl=mjlimControl, pdhDS3RxFrmFmt=pdhDS3RxFrmFmt, svcQ93bStatRstTx=svcQ93bStatRstTx, sPvcForwardSustainableMode=sPvcForwardSustainableMode, pCATDerStatusTable=pCATDerStatusTable, vcbDstSlot=vcbDstSlot, e1TxClkSel=e1TxClkSel, svcStatus=svcStatus, fRelayConfTable=fRelayConfTable, slot0PhyName=slot0PhyName, dataChnlStat=dataChnlStat, frbPStatLocErrThr=frbPStatLocErrThr, sdhSRXclock=sdhSRXclock, vcStatInvented=vcStatInvented, sPvcMulticast=sPvcMulticast, dataSta=dataSta, frbPStatTxBRate=frbPStatTxBRate, standbyInServ=standbyInServ, billCellInC=billCellInC, svcResourceTable=svcResourceTable, svcBackwardCellRateTotal=svcBackwardCellRateTotal, sdhSAlarmLOS=sdhSAlarmLOS, svcQ93bTmrT399=svcQ93bTmrT399, e1AISS=e1AISS, svcBackwardSustainableCellRate=svcBackwardSustainableCellRate, plppE3C0x55=plppE3C0x55, pdhPLCPLoopback=pdhPLCPLoopback, sysInitialQs=sysInitialQs, ceTable=ceTable, limSCfileXferReq=limSCfileXferReq, plppV2CTxAIS=plppV2CTxAIS, sbsV2RxBER=sbsV2RxBER, qeDocTunLocStartSkt=qeDocTunLocStartSkt, userStatusEntry=userStatusEntry, svcQsaalStatClr=svcQsaalStatClr, cacLinkSignalMode=cacLinkSignalMode, sysInitialSema=sysInitialSema, qeDocIpBCast=qeDocIpBCast, alarmScanFile=alarmScanFile, frbPConfigTable=frbPConfigTable, ds3RXAis=ds3RXAis, se1SA8=se1SA8, oamVcbBkwRptBip16=oamVcbBkwRptBip16, cacSapReset=cacSapReset, frbPStatPvcStat=frbPStatPvcStat, sysDbInitial=sysDbInitial, plppE3SBIP8Errs=plppE3SBIP8Errs, billBwdPCR=billBwdPCR, ceDstVci=ceDstVci, ds3V2LOSDefect=ds3V2LOSDefect, plppV2CTable=plppV2CTable, e3LOSAlarm=e3LOSAlarm, veTxCnt=veTxCnt, e1TxAIS=e1TxAIS, dv2VE=dv2VE, plppE1SFEBEErrs=plppE1SFEBEErrs, plppE3CLinkEnab=plppE3CLinkEnab, sdhS2LinkNo=sdhS2LinkNo, plppCEntry=plppCEntry, sdhSLineFC=sdhSLineFC, j2RAlmCount=j2RAlmCount, oamLinkNo=oamLinkNo, vidInFrameRate=vidInFrameRate, fraPStatRemMec=fraPStatRemMec, j2LinkNo=j2LinkNo, slotChanged=slotChanged, vcStatOFlow=vcStatOFlow, vcbPeakExceeds=vcbPeakExceeds, pcatstr3forcesecondary=pcatstr3forcesecondary, frbPConfigCir=frbPConfigCir, vcbCellHead=vcbCellHead, frbPStatRemStartT=frbPStatRemStartT, vcaTxGCells=vcaTxGCells, ds3FEFrmrDif=ds3FEFrmrDif, plppE3CScrambler=plppE3CScrambler, sdhPathAIS=sdhPathAIS, plppE3SE3FrameErrs=plppE3SE3FrameErrs, frbPStatRxBCnt=frbPStatRxBCnt, ctrlChnlLpbk=ctrlChnlLpbk, vcStatTxSeqNo=vcStatTxSeqNo, frbVpi=frbVpi, se1SA4=se1SA4, pcatstr3listener=pcatstr3listener, frbPStatLocStartT=frbPStatLocStartT, hssiLocalLoopback=hssiLocalLoopback, sbcV2Lb=sbcV2Lb, plppSFrameErrs=plppSFrameErrs, plppSDs3RxRedAlarm=plppSDs3RxRedAlarm, limTypeStatus=limTypeStatus, vcbTxGCells=vcbTxGCells, plppE3CRxExTrcIdLH=plppE3CRxExTrcIdLH, sPvcTargetVci=sPvcTargetVci, cePriority=cePriority, ceCDV=ceCDV, fraPConfigCommitB=fraPConfigCommitB, sCATBitsConfigEntry=sCATBitsConfigEntry, vidOutPlayed=vidOutPlayed, svcQsaalStatStatTx=svcQsaalStatStatTx, pdhPLCPLOCDAlarm=pdhPLCPLOCDAlarm, sdhSPathFarEndUAS=sdhSPathFarEndUAS, svcQ93bTmrT309=svcQ93bTmrT309, ds3V2TxClkSel=ds3V2TxClkSel, fraPStatLocStat=fraPStatLocStat, e1LOFAlarm=e1LOFAlarm, pvcAuxForwardSustainedCellRate=pvcAuxForwardSustainedCellRate, j2CrcCount=j2CrcCount, billBwdSCR=billBwdSCR, ds1v2ExBER=ds1v2ExBER, slot0PsuEntry=slot0PsuEntry, fRelConfLinkNo=fRelConfLinkNo, fraPConfigDximode=fraPConfigDximode, plppV2SDs3RxRedAlarm=plppV2SDs3RxRedAlarm, scfQualClock=scfQualClock, pCATcontrolEntry=pCATcontrolEntry, vcbDstVci=vcbDstVci, dataBytesRcvd=dataBytesRcvd, pCATBitsConfigTable=pCATBitsConfigTable, j2Table=j2Table, ds3V2LimType=ds3V2LimType, fRelStatLocErrThr=fRelStatLocErrThr, hssiRemoteReady=hssiRemoteReady, sdhSPathBIP8=sdhSPathBIP8, svcVBRMallowed=svcVBRMallowed, slot0PhyLinkedSlot=slot0PhyLinkedSlot, pdhE3PloadTypeLab=pdhE3PloadTypeLab, cacLinkObfPvc2=cacLinkObfPvc2, ds1YellowDefect=ds1YellowDefect, oamLoopbackVpi=oamLoopbackVpi, sCATDerConfigEntry=sCATDerConfigEntry, jpegSlipMask=jpegSlipMask, pSysRefSelect=pSysRefSelect, plppE3SRxTrIdMis=plppE3SRxTrIdMis, pvcSlot=pvcSlot, sysCurrentPorts=sysCurrentPorts, dataChnlType=dataChnlType, mjlimSystem=mjlimSystem, vidTxVidReq=vidTxVidReq, sccatlimtype=sccatlimtype, ceStatTable=ceStatTable, slot0PsuIndex=slot0PsuIndex, ds1BeeCount=ds1BeeCount, pvcInternalVpi=pvcInternalVpi, sdhSPathUAS=sdhSPathUAS, svcCellRateEntry=svcCellRateEntry, slot0PhyReset=slot0PhyReset, vcDocPriority=vcDocPriority, userInputActiveState=userInputActiveState, jpegCurrentFile=jpegCurrentFile, dv2SystemClocks=dv2SystemClocks, plppCCPLCPMode=plppCCPLCPMode, slot0PsuType=slot0PsuType, fraVpi=fraVpi, vidInTest=vidInTest, e1Entry=e1Entry, vidCompQual=vidCompQual, ds1V2GappedClk=ds1V2GappedClk, ds1V2SES=ds1V2SES, plppV2CEntry=plppV2CEntry, svcHalfConTimer=svcHalfConTimer, audInCfg=audInCfg, vcbBucket2Inc=vcbBucket2Inc, qeDocTunPriority=qeDocTunPriority, pccatfilexferstat=pccatfilexferstat, scatstr3oscillator=scatstr3oscillator, vidOutFrameRate=vidOutFrameRate, sysDbEntry=sysDbEntry, sdcds1V2Coding=sdcds1V2Coding, pdhE3TxmtTimMk=pdhE3TxmtTimMk, sdcIndex=sdcIndex, sysLKEgFIFODepth=sysLKEgFIFODepth, qeDocTunClp=qeDocTunClp, plppCRxExTrcId=plppCRxExTrcId, billDirControl=billDirControl, plppV2SDs3CbitPrtyErrs=plppV2SDs3CbitPrtyErrs, pvcDirection=pvcDirection, limSysVideoOut=limSysVideoOut, sdhSPathES=sdhSPathES, mgmtDescr=mgmtDescr, pdhPLCPTable=pdhPLCPTable, audOutDelay=audOutDelay, svcLowPriOverbookFactor=svcLowPriOverbookFactor, plppE3CLinkNo=plppE3CLinkNo, pdhDS3YellowAlarm=pdhDS3YellowAlarm, sdhSLineAIS=sdhSLineAIS, sPvcForwardMaxBurstSize=sPvcForwardMaxBurstSize, pccatbytestransferred=pccatbytestransferred, cacSapTotalBwScrPcr=cacSapTotalBwScrPcr, dv2Svc=dv2Svc, vcbBucket0Inc=vcbBucket0Inc, svcQ93bStatConnAckRx=svcQ93bStatConnAckRx, billCellIn=billCellIn, pdhE3ExBERDefect=pdhE3ExBERDefect, traceCat=traceCat, pvcBackwardSustainedCellRate=pvcBackwardSustainedCellRate, oamVcaAisRdiGeneration=oamVcaAisRdiGeneration, e1FRMRMode=e1FRMRMode, sdhCEntry=sdhCEntry, plppV2CLinkEnab=plppV2CLinkEnab, pdhPLCPSmdsMode=pdhPLCPSmdsMode, plppCCLine=plppCCLine, ds3V2Table=ds3V2Table, sdhSPathLOP=sdhSPathLOP, vidInVcrMode=vidInVcrMode, oamVcbDefectSlot=oamVcbDefectSlot, ceMode=ceMode, qeDocTunRemNet=qeDocTunRemNet, plppCLinkEnab=plppCLinkEnab, j2ClrStats=j2ClrStats, svcQsaalStatRsTx=svcQsaalStatRsTx, audInDelay=audInDelay, svcQsaalStatTable=svcQsaalStatTable, lFibreConfLinkNo=lFibreConfLinkNo, sscatplaceholder1=sscatplaceholder1, sdhSAlarmPLM=sdhSAlarmPLM, plppCTxTrcId=plppCTxTrcId, scfLOSAlarm=scfLOSAlarm, pvcLowPriOverbookFactor=pvcLowPriOverbookFactor, spvcCallReset=spvcCallReset, pdhDS3LSES=pdhDS3LSES, vidInJpeg=vidInJpeg, vcbVci=vcbVci, slot0PsuFanBSpeed=slot0PsuFanBSpeed, pbcIndex=pbcIndex, frbPConfigCommitB=frbPConfigCommitB, dTLLoadFail=dTLLoadFail, billDvci=billDvci, ds1V2LinkNo=ds1V2LinkNo, configChanged=configChanged, vhmgmt=vhmgmt, sdcclrperf=sdcclrperf)
