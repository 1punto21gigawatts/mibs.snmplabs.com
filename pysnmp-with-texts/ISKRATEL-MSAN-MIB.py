#
# PySNMP MIB module ISKRATEL-MSAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ISKRATEL-MSAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:57:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
InetAddressIPv6, InetAddressType, InetAddress, InetAddressIPv4 = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv6", "InetAddressType", "InetAddress", "InetAddressIPv4")
dot1qVlanIndex, VlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qVlanIndex", "VlanIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibIdentifier, ObjectIdentity, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, enterprises, NotificationType, Counter64, IpAddress, Counter32, Bits, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "enterprises", "NotificationType", "Counter64", "IpAddress", "Counter32", "Bits", "iso", "Integer32")
DisplayString, RowStatus, TextualConvention, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue", "MacAddress")
vdslLineConfProfileName, = mibBuilder.importSymbols("VDSL-LINE-MIB", "vdslLineConfProfileName")
xdsl2LineConfTemplateEntry, xdsl2LineAlarmConfTemplateEntry = mibBuilder.importSymbols("VDSL2-LINE-MIB", "xdsl2LineConfTemplateEntry", "xdsl2LineAlarmConfTemplateEntry")
msan = ModuleIdentity((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5))
if mibBuilder.loadTexts: msan.setLastUpdated('201006221233Z')
if mibBuilder.loadTexts: msan.setOrganization('Iskratel')
if mibBuilder.loadTexts: msan.setContactInfo('Contact-info.')
if mibBuilder.loadTexts: msan.setDescription('Description.')
class VlanList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight vlans, with the first octet specifying vlans 1 through 8, the second octet specifying vlans 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered vlan, and the least significant bit represents the highest numbered vlan. Thus, each vlan supported is represented by a single bit within the value of this object. If that bit has a value of '1' then the associated port is in that vlan; the port is not included if the vlans bit has a value of '0'."
    status = 'current'

class Xdsl2PsdMaskDs(TextualConvention, OctetString):
    description = 'This is a structure that represents up to 32 PSD mask breakpoints. Each breakpoint occupies 3 octets: The first two octets hold the index of the subcarrier associated with the breakpoint. The third octet holds the PSD reduction at the breakpoint from 0 (0 dBm/Hz) to 255 (-127.5 dBm/Hz) using units of 0.5 dBm/Hz. The subcarrier index is an unsigned number in the range 0 to NSCds-1.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 96)

class Xdsl2PsdMaskUs(TextualConvention, OctetString):
    description = 'This is a structure that represents up to 16 PSD mask breakpoints. Each breakpoint occupies 3 octets: The first two octets hold the index of the subcarrier associated with the breakpoint. The third octet holds the PSD reduction at the breakpoint from 0(0 dBm/Hz) to 255 (-127.5 dBm/Hz) using units of 0.5 dBm/Hz. The subcarrier index is an unsigned number in the range 0 to NSCus-1.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 48)

class PortMask(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0' When setting this value, the system will ignore configuration for ports not between the first and last valid ports. Configuration of any port numbers between this range that are not valid ports return a failure message, but will still apply configuration for valid ports."
    status = 'current'

class PercentByFives(TextualConvention, Unsigned32):
    description = 'An unsigned integer representing a value expressed as a percentage with five percent increments.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 5), ValueRangeConstraint(10, 10), ValueRangeConstraint(15, 15), ValueRangeConstraint(20, 20), ValueRangeConstraint(25, 25), ValueRangeConstraint(30, 30), ValueRangeConstraint(35, 35), ValueRangeConstraint(40, 40), ValueRangeConstraint(45, 45), ValueRangeConstraint(50, 50), ValueRangeConstraint(55, 55), ValueRangeConstraint(60, 60), ValueRangeConstraint(65, 65), ValueRangeConstraint(70, 70), ValueRangeConstraint(75, 75), ValueRangeConstraint(80, 80), ValueRangeConstraint(85, 85), ValueRangeConstraint(90, 90), ValueRangeConstraint(95, 95), ValueRangeConstraint(100, 100), )
iskratel = MibIdentifier((1, 3, 6, 1, 4, 1, 1332))
si2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1))
msanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1))
msanShelfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 1))
msanShelfId = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShelfId.setStatus('current')
if mibBuilder.loadTexts: msanShelfId.setDescription('MSAN shelf ID.')
msanShelfType = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShelfType.setStatus('current')
if mibBuilder.loadTexts: msanShelfType.setDescription('MSAN shelf type.')
msanShelfSize = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShelfSize.setStatus('current')
if mibBuilder.loadTexts: msanShelfSize.setDescription('Size of MSAN shelf (in number of slots).')
msanBoardInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 2))
msanBoardTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 2, 1), )
if mibBuilder.loadTexts: msanBoardTable.setStatus('deprecated')
if mibBuilder.loadTexts: msanBoardTable.setDescription('Description.')
msanBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 2, 1, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanBoardNr"))
if mibBuilder.loadTexts: msanBoardEntry.setStatus('deprecated')
if mibBuilder.loadTexts: msanBoardEntry.setDescription('Description.')
msanBoardNr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: msanBoardNr.setStatus('deprecated')
if mibBuilder.loadTexts: msanBoardNr.setDescription('Unique identification of a board.')
msanBoardParentNr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardParentNr.setStatus('deprecated')
if mibBuilder.loadTexts: msanBoardParentNr.setDescription('Unique identification of a parent board.')
msanBoardPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardPosition.setStatus('deprecated')
if mibBuilder.loadTexts: msanBoardPosition.setDescription('Position of the board on the parent board.')
msanBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardType.setStatus('deprecated')
if mibBuilder.loadTexts: msanBoardType.setDescription('Type of physical board (e.g. IDC, SGO, SFA, ...)')
msanBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardId.setStatus('deprecated')
if mibBuilder.loadTexts: msanBoardId.setDescription('Name (actual identification) of a board.')
msanBoardSerialNr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardSerialNr.setStatus('deprecated')
if mibBuilder.loadTexts: msanBoardSerialNr.setDescription('Serial number of a board.')
msanBoardDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 2, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanBoardDescription.setStatus('deprecated')
if mibBuilder.loadTexts: msanBoardDescription.setDescription('Description of the board.')
msanSwInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3))
msanSwSteerVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwSteerVersion.setStatus('current')
if mibBuilder.loadTexts: msanSwSteerVersion.setDescription('The unique steer code for this software. ')
msanSwBuildDirectory = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwBuildDirectory.setStatus('current')
if mibBuilder.loadTexts: msanSwBuildDirectory.setDescription('The directory where software was build on. ')
msanSwBuildTime = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwBuildTime.setStatus('current')
if mibBuilder.loadTexts: msanSwBuildTime.setDescription('The time when the software was built. (DateAndTime textual convention, from SNMPv2-TC)')
msanSwBranch = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwBranch.setStatus('current')
if mibBuilder.loadTexts: msanSwBranch.setDescription('The repository branch where the software was built from.')
msanSwBuildReference = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwBuildReference.setStatus('current')
if mibBuilder.loadTexts: msanSwBuildReference.setDescription('The repository reference number of the software build branch. ')
msanSwILVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwILVersion.setStatus('current')
if mibBuilder.loadTexts: msanSwILVersion.setDescription('The unique IL steer code for this software. ')
msanSwIpmiVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwIpmiVersion.setStatus('current')
if mibBuilder.loadTexts: msanSwIpmiVersion.setDescription("The major version.minor version/IPMI version supported(HEX) number of the IPMI currently running on the switch. For example, if the major version was 1 and the minor version was 2, the format would be '1.2/0'.")
msanSwBspVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwBspVersion.setStatus('current')
if mibBuilder.loadTexts: msanSwBspVersion.setDescription("The release.version/id number of the BSP software currently running on the switch. For example, if the release was 1 and the version was 2, the format would be '1.2/0'.")
msanSwCPLDVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwCPLDVersion.setStatus('current')
if mibBuilder.loadTexts: msanSwCPLDVersion.setDescription('CPLD (Complex Programmable Logic Device) SW version')
msanReservePackage = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanReservePackage.setStatus('current')
if mibBuilder.loadTexts: msanReservePackage.setDescription('Name of the reserve package on disk if it exists. ')
msanSwComponentTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 11), )
if mibBuilder.loadTexts: msanSwComponentTable.setStatus('current')
if mibBuilder.loadTexts: msanSwComponentTable.setDescription('Description.')
msanSwComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 11, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanSwComponentId"))
if mibBuilder.loadTexts: msanSwComponentEntry.setStatus('current')
if mibBuilder.loadTexts: msanSwComponentEntry.setDescription('Description.')
msanSwComponentId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: msanSwComponentId.setStatus('current')
if mibBuilder.loadTexts: msanSwComponentId.setDescription('Unique index of SW component.')
msanSwComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 11, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwComponentName.setStatus('current')
if mibBuilder.loadTexts: msanSwComponentName.setDescription('Name of software component (e.g. ES, EV, EF, EA).')
msanSwComponentSteerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 3, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwComponentSteerVersion.setStatus('current')
if mibBuilder.loadTexts: msanSwComponentSteerVersion.setDescription('The unique steer code for this software component.')
msanOtherInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 4))
msanSnmpSetErrorReason = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 1, 4, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSnmpSetErrorReason.setStatus('current')
if mibBuilder.loadTexts: msanSnmpSetErrorReason.setDescription('Last error description of SNMP set command.')
msanAdditionalConf = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3))
msanSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1))
msanDateTime = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDateTime.setStatus('current')
if mibBuilder.loadTexts: msanDateTime.setDescription('Board date and time in format: dd/MM/yyyy HH:mm:ss.')
msanShelfIdConf = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShelfIdConf.setStatus('current')
if mibBuilder.loadTexts: msanShelfIdConf.setDescription('MSAN Shelf ID.')
msanConfData = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saved", 1), ("notSaved", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanConfData.setStatus('current')
if mibBuilder.loadTexts: msanConfData.setDescription('Configured data saved or not saved to file on local file system.')
msanSwUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwUpgrade.setStatus('deprecated')
if mibBuilder.loadTexts: msanSwUpgrade.setDescription('msanSWUpgrade parameetr is used to start SW upgrade from external http or ftp server. User must set the next string value: <repository URL> <package name> <repository URL> = http|ftp://<IP>|<hostname>[:<port>]/[<path>/] Procedure uses anonymous type of identification. If a non standard port is used, this port must be also specified in the repository URL.')
msanCliScriptCreate = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCliScriptCreate.setStatus('current')
if mibBuilder.loadTexts: msanCliScriptCreate.setDescription("When set with a non-empty string, current configuration will be saved to script file with that name (name must end with .scr). If file already exists it's overwritten. On Get request this object will always return an empty string.")
msanCliScriptTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 6), )
if mibBuilder.loadTexts: msanCliScriptTable.setStatus('current')
if mibBuilder.loadTexts: msanCliScriptTable.setDescription('Description.')
msanCliScriptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 6, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanCliScriptName"))
if mibBuilder.loadTexts: msanCliScriptEntry.setStatus('current')
if mibBuilder.loadTexts: msanCliScriptEntry.setDescription('Description.')
msanCliScriptName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanCliScriptName.setStatus('current')
if mibBuilder.loadTexts: msanCliScriptName.setDescription('CLI script name')
msanCliScriptApply = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCliScriptApply.setStatus('current')
if mibBuilder.loadTexts: msanCliScriptApply.setDescription('When set to enable(1) selected selected CLI script is applied.')
msanCliScriptApplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInitiated", 1), ("inProcess", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanCliScriptApplyStatus.setStatus('current')
if mibBuilder.loadTexts: msanCliScriptApplyStatus.setDescription('Status of CLI script apply request')
msanCliScriptRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanCliScriptRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanCliScriptRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanCliPrompt = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCliPrompt.setStatus('current')
if mibBuilder.loadTexts: msanCliPrompt.setDescription('CLI prompt value.')
msanChassisId = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanChassisId.setStatus('current')
if mibBuilder.loadTexts: msanChassisId.setDescription('MSAN Chassis ID.')
msanSwBootPackageTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 9), )
if mibBuilder.loadTexts: msanSwBootPackageTable.setStatus('current')
if mibBuilder.loadTexts: msanSwBootPackageTable.setDescription('Description.')
msanSwBootPackageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 9, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanSwBootPackageName"))
if mibBuilder.loadTexts: msanSwBootPackageEntry.setStatus('current')
if mibBuilder.loadTexts: msanSwBootPackageEntry.setDescription('Description.')
msanSwBootPackageName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 9, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwBootPackageName.setStatus('current')
if mibBuilder.loadTexts: msanSwBootPackageName.setDescription('SW package name on local disk.')
msanSwBootPackageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("currentActive", 1), ("nextActive", 2), ("backup", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwBootPackageStatus.setStatus('current')
if mibBuilder.loadTexts: msanSwBootPackageStatus.setDescription('SW package status. You can set only nextActive(2) value. Other values are read-only.')
msanSystemSwUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10))
msanSystemSwUpgradeStart = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemSwUpgradeStart.setStatus('current')
if mibBuilder.loadTexts: msanSystemSwUpgradeStart.setDescription('Control of SW upgrade procedure. When set to enable(1) transfer of SW package from defined server is started.')
msanSystemSwUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inprogress", 1), ("successful", 2), ("failed", 3), ("notInitiated", 4))).clone('notInitiated')).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSystemSwUpgradeStatus.setStatus('current')
if mibBuilder.loadTexts: msanSystemSwUpgradeStatus.setDescription('The SW upgrade status info.')
msanSystemSwUpgradeServerIpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 3), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemSwUpgradeServerIpAddressType.setStatus('current')
if mibBuilder.loadTexts: msanSystemSwUpgradeServerIpAddressType.setDescription('Specifies the type of the upgrade server address: ipv4[1], ipv6[2].')
msanSystemSwUpgradeServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemSwUpgradeServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: msanSystemSwUpgradeServerIpAddress.setDescription('The remote SW upgrade server IP address.')
msanSystemSwUpgradeServerDnsName = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 5), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemSwUpgradeServerDnsName.setStatus('current')
if mibBuilder.loadTexts: msanSystemSwUpgradeServerDnsName.setDescription('The remote SW upgrade server dns name.')
msanSystemSwUpgradeProtocol = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tftp", 1), ("ftp", 2), ("sftp", 3))).clone('tftp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemSwUpgradeProtocol.setStatus('current')
if mibBuilder.loadTexts: msanSystemSwUpgradeProtocol.setDescription('The SW upgrade protocol.')
msanSystemSwUpgradeProtocolPortId = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemSwUpgradeProtocolPortId.setStatus('current')
if mibBuilder.loadTexts: msanSystemSwUpgradeProtocolPortId.setDescription('The SW upgrade protocol port number. If value is set to -1, standard protocol number is used.')
msanSystemSwUpgradeUserName = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 8), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemSwUpgradeUserName.setStatus('current')
if mibBuilder.loadTexts: msanSystemSwUpgradeUserName.setDescription('The username used in SW upgrade protocol. When sftp upgrade protocol is used, username must be set.')
msanSystemSwUpgradeUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 9), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemSwUpgradeUserPassword.setStatus('current')
if mibBuilder.loadTexts: msanSystemSwUpgradeUserPassword.setDescription('The user password used in SW upgrade protocol. When sftp upgrade protocol is used, username must be set.')
msanSystemSwUpgradePath = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 10), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemSwUpgradePath.setStatus('current')
if mibBuilder.loadTexts: msanSystemSwUpgradePath.setDescription('The path to the SW package location.')
msanSystemSwUpgradePackageName = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 10, 11), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemSwUpgradePackageName.setStatus('current')
if mibBuilder.loadTexts: msanSystemSwUpgradePackageName.setDescription('The SW package name')
msanSystemLogsUpload = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11))
msanSystemLogsUploadStart = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemLogsUploadStart.setStatus('current')
if mibBuilder.loadTexts: msanSystemLogsUploadStart.setDescription('Control of system logs upload procedure. When set to enable(1) transfer of file to defined server is started.')
msanSystemLogsUploadStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inprogress", 1), ("successful", 2), ("failed", 3), ("notInitiated", 4))).clone('notInitiated')).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSystemLogsUploadStatus.setStatus('current')
if mibBuilder.loadTexts: msanSystemLogsUploadStatus.setDescription('The system logs upload status info.')
msanSystemLogsUploadServerIpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 3), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemLogsUploadServerIpAddressType.setStatus('current')
if mibBuilder.loadTexts: msanSystemLogsUploadServerIpAddressType.setDescription('Specifies the type of the system logs upload server address: ipv4[1], ipv6[2].')
msanSystemLogsUploadServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemLogsUploadServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: msanSystemLogsUploadServerIpAddress.setDescription('The remote system logs upload server IP address.')
msanSystemLogsUploadServerDnsName = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 5), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemLogsUploadServerDnsName.setStatus('current')
if mibBuilder.loadTexts: msanSystemLogsUploadServerDnsName.setDescription('The remote system logs upload server dns name.')
msanSystemLogsUploadProtocol = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tftp", 1), ("ftp", 2), ("sftp", 3))).clone('tftp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemLogsUploadProtocol.setStatus('current')
if mibBuilder.loadTexts: msanSystemLogsUploadProtocol.setDescription('The system logs upload protocol.')
msanSystemLogsUploadProtocolPortId = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemLogsUploadProtocolPortId.setStatus('current')
if mibBuilder.loadTexts: msanSystemLogsUploadProtocolPortId.setDescription('The system logs upload protocol port number. If value is set to -1, standard protocol number is used.')
msanSystemLogsUploadUserName = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 8), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemLogsUploadUserName.setStatus('current')
if mibBuilder.loadTexts: msanSystemLogsUploadUserName.setDescription('The username used in system logs upload protocol. When sftp upgrade protocol is used, username must be set.')
msanSystemLogsUploadUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 9), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemLogsUploadUserPassword.setStatus('current')
if mibBuilder.loadTexts: msanSystemLogsUploadUserPassword.setDescription('The user password used in system logs upload protocol. When sftp upgrade protocol is used, username must be set.')
msanSystemLogsUploadPath = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 10), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemLogsUploadPath.setStatus('current')
if mibBuilder.loadTexts: msanSystemLogsUploadPath.setDescription('The path to the system logs file location.')
msanSystemLogsUploadFileName = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 1, 11, 11), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSystemLogsUploadFileName.setStatus('current')
if mibBuilder.loadTexts: msanSystemLogsUploadFileName.setDescription('The system logs file name')
msanProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3))
msanVDSLProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 1), )
if mibBuilder.loadTexts: msanVDSLProfileTable.setStatus('current')
if mibBuilder.loadTexts: msanVDSLProfileTable.setDescription('Description.')
msanVDSLProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 1, 1), ).setIndexNames((0, "VDSL-LINE-MIB", "vdslLineConfProfileName"))
if mibBuilder.loadTexts: msanVDSLProfileEntry.setStatus('current')
if mibBuilder.loadTexts: msanVDSLProfileEntry.setDescription('Description.')
msanVDSLProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("default", 2), ("local", 3), ("global", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVDSLProfileType.setStatus('current')
if mibBuilder.loadTexts: msanVDSLProfileType.setDescription('Profile type: - other ~ none of the following - defaut ~ default profile - local ~ local configured profile type - global ~ global configured profile type')
msanVDSL2LineProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vdsl2profile8c", 1), ("vdsl2profile8d", 2), ("vdsl2profile12a", 3), ("vdsl2profile12b", 4), ("vdsl2profile17a", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVDSL2LineProfile.setStatus('current')
if mibBuilder.loadTexts: msanVDSL2LineProfile.setDescription('VDSL2 profile')
msanServiceProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2))
msanServiceProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1), )
if mibBuilder.loadTexts: msanServiceProfileTable.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfileTable.setDescription('Service Profile table ')
msanServiceProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanServiceProfileName"))
if mibBuilder.loadTexts: msanServiceProfileEntry.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfileEntry.setDescription('Service Profile table entry.')
msanServiceProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: msanServiceProfileName.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfileName.setDescription('Name for service profile.')
msanServiceProfileProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileProtection.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfileProtection.setDescription("If protection flag is set to protected (1), other profile values cannot be edited. Protection flag is always protected (1) and it can't be changed if profile is assigned as dynamic: msanServiceProfileStatus = dynamic(2)")
msanServiceProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanServiceProfileStatus.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfileStatus.setDescription("Profile status. If status is dynamic, profile values can't be edited.")
msanServiceProfileServiceFlowProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileServiceFlowProfileName.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfileServiceFlowProfileName.setDescription('Index of used service flow profile (this profile must be set before), which indicates row in msanServiceFlowProfileTable. Empty string indicates that parameter has not been defined.')
msanServiceProfileMulticastProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileMulticastProfileName.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfileMulticastProfileName.setDescription('Index of used multicast profile (this profile must be set before), which indicates row in msanMulticastProfileTable. Empty string indicates that parameter has not been defined.')
msanServiceProfileVlanProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileVlanProfileName.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfileVlanProfileName.setDescription('Index of used vlan profile (this profile must be set before), which indicates row in msanVlanProfileTable. Empty string indicates that parameter has not been defined.')
msanServiceProfileL2cpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileL2cpProfileName.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfileL2cpProfileName.setDescription('Index of used L2CP profile (this profile must be set before), which indicates row in msanL2cpProfileTable. Empty string indicates that parameter has not been defined.')
msanServiceProfileSecurityProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileSecurityProfileName.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfileSecurityProfileName.setDescription('Index of used security profile (this profile must be set before), which indicates row in msanSecurityProfileTable. Empty string indicates that parameter has not been defined.')
msanServiceProfileAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileAtmVpi.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfileAtmVpi.setDescription('Virtual Path Identifier. A value of -1 indicates that parameter has not been defined.')
msanServiceProfileAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(32, 255), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileAtmVci.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfileAtmVci.setDescription('Virtual Channel Identifier. A value of -1 indicates that parameter has not been defined.')
msanServiceProfileDhcpRa = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("allowClients", 1), ("allowServers", 2), ("allowAll", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileDhcpRa.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfileDhcpRa.setDescription('Dynamic Host Configuration Protocol Relay Agent. DHCP RA and PPPoE IA can not be included simultaneously.')
msanServiceProfileDhcpRaTrustClients = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notTrust", 0), ("trust", 1))).clone('notTrust')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileDhcpRaTrustClients.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfileDhcpRaTrustClients.setDescription('DHCP RA Trust Clients. Effective only if DHCP-RA is in either allow-all or allow-client mode.')
msanServiceProfileDhcpRaOpt82UnicastExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notUsed", 0), ("used", 1))).clone('notUsed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileDhcpRaOpt82UnicastExtension.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfileDhcpRaOpt82UnicastExtension.setDescription('DHCP RA option82 unicast extension. Effective only if DHCP-RA is in either allow-all or allow-client mode.')
msanServiceProfileDhcpRaOpt82Insert = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notInsert", 0), ("insert", 1))).clone('notInsert')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileDhcpRaOpt82Insert.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfileDhcpRaOpt82Insert.setDescription('DHCP Relay Agent Insert Option 82. Effective only if DHCP-RA is in either allow-all or allow-client mode.')
msanServiceProfileDhcpRaRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileDhcpRaRemoteId.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfileDhcpRaRemoteId.setDescription('DHCP Relay Agent Remote Identification. Effective only if DHCP-RA is in either allow-all or allow-client mode.')
msanServiceProfileDhcpRaRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileDhcpRaRateLimit.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfileDhcpRaRateLimit.setDescription('Max rate for DHCP Relay Agent. ')
msanServiceProfilePppoeIA = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfilePppoeIA.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfilePppoeIA.setDescription('Point-to-Point Protocol over Ethernet Intermediate Agent. DHCP RA and PPPoE IA can not be included simultaneously.')
msanServiceProfilePppoeIARateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfilePppoeIARateLimit.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfilePppoeIARateLimit.setDescription('Max rate for PPPoE IA. ')
msanServiceProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceProfileDescription.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfileDescription.setDescription('Attribute specifies text which describes the associated object.')
msanServiceProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 1, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanServiceProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanServiceProfileRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. For row creation use createAndWait(5). Value active(1) will activate and value destroy(6) will remove this entry. Other values are currently not supported. Row can be activated only if msanServiceProfileServiceFlowProfileName is specified.')
msanServicePortProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 2), )
if mibBuilder.loadTexts: msanServicePortProfileTable.setStatus('current')
if mibBuilder.loadTexts: msanServicePortProfileTable.setDescription('A connection between service profiles and device ports')
msanServicePortProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanServiceProfileName"))
if mibBuilder.loadTexts: msanServicePortProfileEntry.setStatus('current')
if mibBuilder.loadTexts: msanServicePortProfileEntry.setDescription('Service Profile Port table entry.')
msanServicePortProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 2, 2, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanServicePortProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanServicePortProfileRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanServiceFlowProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3))
msanServiceFlowProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1), )
if mibBuilder.loadTexts: msanServiceFlowProfileTable.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileTable.setDescription('Service Flow Profile table ')
msanServiceFlowProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanServiceFlowProfileName"))
if mibBuilder.loadTexts: msanServiceFlowProfileEntry.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileEntry.setDescription('Service Flow Profile table entry.')
msanServiceFlowProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanServiceFlowProfileName.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileName.setDescription('Service Flow Profile Name.')
msanServiceFlowProfileProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileProtection.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileProtection.setDescription("If protection flag is set to protected (1), other profile values cannot be edited. Protection flag is always protected (1) and it can't be changed if profile is assigned as dynamic: msanServiceFlowProfileStatus = dynamic(2)")
msanServiceFlowProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanServiceFlowProfileStatus.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileStatus.setDescription("Profile status. If status is dynamic, profile values can't be edited.")
msanServiceFlowProfileMatchUsAny = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsAny.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsAny.setDescription('Match every upstream packet frame.')
msanServiceFlowProfileMatchUsMacDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 5), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsMacDestAddr.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsMacDestAddr.setDescription('Match upstream packet frame with specified destination MAC address. Empty string indicates that parameter has not been defined')
msanServiceFlowProfileMatchUsMacDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 6), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsMacDestMask.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsMacDestMask.setDescription('This mask value identifies the portion of msanServiceFlowProfileMatchUsMacDestAddr that is compared with upstream packet. Empty string indicates that parameter has not been defined')
msanServiceFlowProfileMatchUsMacSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 7), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsMacSrcAddr.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsMacSrcAddr.setDescription('Match upstream packet frame with specified source MAC address. Empty string indicates that parameter has not been defined')
msanServiceFlowProfileMatchUsMacSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 8), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsMacSrcMask.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsMacSrcMask.setDescription('This mask value identifies the portion of msanServiceFlowProfileMatchUsMacSrcAddr that is compared with upstream packet. Empty string indicates that parameter has not been defined')
msanServiceFlowProfileMatchUsCPcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 9), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsCPcp.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsCPcp.setDescription('Match upstream packet frame with specified Customer PCP (Priority Code Point) - PCP is also known as class of service (CoS) bits. A value of -1 indicates that parameter has not been defined.')
msanServiceFlowProfileMatchUsSPcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 10), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsSPcp.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsSPcp.setDescription('Match upstream packet frame with specified Service PCP (Priority Code Point). PCP is also known as class of service (CoS) bits. A value of -1 indicates that parameter has not been defined.')
msanServiceFlowProfileMatchUsVlanProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsVlanProfile.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsVlanProfile.setDescription('Match upstream packet frame with VLAN Id values from VLAN Service Profile (msanVlanProfileTable). ')
msanServiceFlowProfileMatchUsCVlanIdRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsCVlanIdRange.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsCVlanIdRange.setDescription('Match upstream packet frame with specified list (bitmask) of Customer VLAN Id. An empty string indicates that parameter has not been defined.')
msanServiceFlowProfileMatchUsSVlanIdRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsSVlanIdRange.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsSVlanIdRange.setDescription('Match upstream packet frame with specified list (bitmask) of Service VLAN Id. An empty string indicates that parameter has not been defined.')
msanServiceFlowProfileMatchUsEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsEthertype.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsEthertype.setDescription('Match upstream packet frame with specified EtherType value. A value of -1 indicates that parameter has not been defined.')
msanServiceFlowProfileMatchUsIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpProtocol.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpProtocol.setDescription('Match upstream packet frame with specified IP protocol value. A value of -1 indicates that parameter has not been defined. Some of standard protocol values: icmp - 1 igmp - 2 ip - 4 (ip in ip encapsulation) tcp - 6 udp - 17')
msanServiceFlowProfileMatchUsIpSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 16), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpSrcAddr.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpSrcAddr.setDescription('Match upstream packet frame with specified source IP address. Empty string indicates that parameter has not been defined.')
msanServiceFlowProfileMatchUsIpSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 17), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpSrcMask.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpSrcMask.setDescription('This mask value identifies the portion of msanServiceFlowProfileMatchUsIpSrcAddr that is compared with upstream packet. Empty string indicates that parameter has not been defined')
msanServiceFlowProfileMatchUsIpDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 18), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpDestAddr.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpDestAddr.setDescription('Match upstream packet frame with specified destination IP address. Empty string indicates that parameter has not been defined.')
msanServiceFlowProfileMatchUsIpDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 19), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpDestMask.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpDestMask.setDescription('This mask value identifies the portion of msanServiceFlowProfileMatchUsIpDestAddr that is compared with upstream packet. Empty string indicates that parameter has not been defined')
msanServiceFlowProfileMatchUsIpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpDscp.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpDscp.setDescription('Match upstream packet frame with specified CSC (Class Selector Code Point) = IP precedence (part of TOS field) value. A value of -1 indicates that parameter has not been defined.')
msanServiceFlowProfileMatchUsIpCsc = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpCsc.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpCsc.setDescription('Match upstream packet frame with specified IP precedence (part of TOS field) value. A value of -1 indicates that parameter has not been defined.')
msanServiceFlowProfileMatchUsIpDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notDefined", -1), ("noDrop", 0), ("lowDrop", 1), ("mediumDrop", 2), ("highDrop", 3))).clone('notDefined')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpDropPrecedence.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsIpDropPrecedence.setDescription('Match upstream packet frame with specified Drop precedence two bits value: noDrop(0) -> 00 lowDrop(1) -> 01 mediumDrop(2) -> 10 highDrop(3) -> 11 A value of -1 indicates that parameter has not been defined.')
msanServiceFlowProfileMatchUsTcpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsTcpSrcPort.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsTcpSrcPort.setDescription('Match upstream packet frame with specified source TCP port number. A value of -1 indicates that parameter has not been defined.')
msanServiceFlowProfileMatchUsTcpDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsTcpDestPort.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsTcpDestPort.setDescription('Match upstream packet frame with specified destination TCP port number. A value of -1 indicates that parameter has not been defined.')
msanServiceFlowProfileMatchUsUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsUdpSrcPort.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsUdpSrcPort.setDescription('Match upstream packet frame with specified source UDP port number. A value of -1 indicates that parameter has not been defined.')
msanServiceFlowProfileMatchUsUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsUdpDstPort.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchUsUdpDstPort.setDescription('Match upstream packet frame with specified destination UDP port number. A value of -1 indicates that parameter has not been defined.')
msanServiceFlowProfileMatchDsAny = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsAny.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsAny.setDescription('Match every downstream packet frame.')
msanServiceFlowProfileMatchDsMacDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 28), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsMacDestAddr.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsMacDestAddr.setDescription('Match downstream packet frame with specified destination MAC address. Empty string indicates that parameter has not been defined')
msanServiceFlowProfileMatchDsMacDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 29), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsMacDestMask.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsMacDestMask.setDescription('This mask value identifies the portion of msanServiceFlowProfileMatchDsMacDestAddr that is compared with downstream packet. Empty string indicates that parameter has not been defined')
msanServiceFlowProfileMatchDsMacSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 30), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsMacSrcAddr.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsMacSrcAddr.setDescription('Match downstream packet frame with specified source MAC address. Empty string indicates that parameter has not been defined')
msanServiceFlowProfileMatchDsMacSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 31), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsMacSrcMask.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsMacSrcMask.setDescription('This mask value identifies the portion of msanServiceFlowProfileMatchDsMacSrcAddr that is compared with downstream packet. Empty string indicates that parameter has not been defined')
msanServiceFlowProfileMatchDsCPcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 32), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsCPcp.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsCPcp.setDescription('Match downstream packet frame with specified Customer PCP (Priority Code Point) - PCP is also known as class of service (CoS) bits. A value of -1 indicates that parameter has not been defined.')
msanServiceFlowProfileMatchDsSPcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 33), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsSPcp.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsSPcp.setDescription('Match downstream packet frame with specified Service PCP (Priority Code Point). PCP is also known as class of service (CoS) bits. A value of -1 indicates that parameter has not been defined.')
msanServiceFlowProfileMatchDsVlanProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsVlanProfile.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsVlanProfile.setDescription('Match downstream packet frame with VLAN Id values from VLAN Service Profile (msanVlanProfileTable). ')
msanServiceFlowProfileMatchDsCVlanIdRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsCVlanIdRange.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsCVlanIdRange.setDescription('Match downstream packet frame with specified list (bitmask) of Customer VLAN Id. An emptya string indicates that parameter has not been defined.')
msanServiceFlowProfileMatchDsSVlanIdRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 36), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsSVlanIdRange.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsSVlanIdRange.setDescription('Match downstream packet frame with specified list (bitmask) of Service VLAN Id. An empty string indicates that parameter has not been defined.')
msanServiceFlowProfileMatchDsEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsEthertype.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsEthertype.setDescription('Match downstream packet frame with specified EtherType value. A value of -1 indicates that parameter has not been defined.')
msanServiceFlowProfileMatchDsIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpProtocol.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpProtocol.setDescription('Match downstream packet frame with specified IP protocol value. A value of -1 indicates that parameter has not been defined. Some of standard protocol values: icmp - 1 igmp - 2 ip - 4 (ip in ip encapsulation) tcp - 6 udp - 17')
msanServiceFlowProfileMatchDsIpSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 39), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpSrcAddr.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpSrcAddr.setDescription('Match downstream packet frame with specified source IP address. Empty string indicates that parameter has not been defined.')
msanServiceFlowProfileMatchDsIpSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 40), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpSrcMask.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpSrcMask.setDescription('This mask value identifies the portion of msanServiceFlowProfileMatchDsIpSrcAddr that is compared with downstream packet. Empty string indicates that parameter has not been defined')
msanServiceFlowProfileMatchDsIpDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 41), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpDestAddr.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpDestAddr.setDescription('Match downstream packet frame with specified destination IP address. Empty string indicates that parameter has not been defined.')
msanServiceFlowProfileMatchDsIpDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 42), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpDestMask.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpDestMask.setDescription('This mask value identifies the portion of msanServiceFlowProfileMatchDsIpDestAddr that is compared with downstream packet. Empty string indicates that parameter has not been defined')
msanServiceFlowProfileMatchDsIpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpDscp.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpDscp.setDescription('Match downstream packet frame with specified IP DSCP value. A value of -1 indicates that parameter has not been defined.')
msanServiceFlowProfileMatchDsIpCsc = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpCsc.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpCsc.setDescription('Match downstream packet frame with specified CSC (Class Selector Code Point) = IP precedence (part of TOS field) value. A value of -1 indicates that parameter has not been defined.')
msanServiceFlowProfileMatchDsIpDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notDefined", -1), ("noDrop", 0), ("lowDrop", 1), ("mediumDrop", 2), ("highDrop", 3))).clone('notDefined')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpDropPrecedence.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsIpDropPrecedence.setDescription('Match downstream packet frame with specified Drop precedence two bits value: noDrop(0) -> 00 lowDrop(1) -> 01 mediumDrop(2) -> 10 highDrop(3) -> 11 A value of -1 indicates that parameter has not been defined.')
msanServiceFlowProfileMatchDsTcpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsTcpSrcPort.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsTcpSrcPort.setDescription('Match downstream packet frame with specified source TCP port number. A value of -1 indicates that parameter has not been defined.')
msanServiceFlowProfileMatchDsTcpDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsTcpDestPort.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsTcpDestPort.setDescription('Match downstream packet frame with specified destination TCP port number. A value of -1 indicates that parameter has not been defined.')
msanServiceFlowProfileMatchDsUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsUdpSrcPort.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsUdpSrcPort.setDescription('Match downstream packet frame with specified source UDP port number. A value of -1 indicates that parameter has not been defined.')
msanServiceFlowProfileMatchDsUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsUdpDstPort.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileMatchDsUdpDstPort.setDescription('Match downstream packet frame with specified destination UDP port number. A value of -1 indicates that parameter has not been defined.')
msanServiceFlowProfileUsCdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileUsCdr.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileUsCdr.setDescription('Upstream committed data rate (E-CDR) in kbps (0 1000000).')
msanServiceFlowProfileUsCdrBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setUnits('kB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileUsCdrBurstSize.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileUsCdrBurstSize.setDescription("Upstream committed data rate burst size in kB (0 16384). When parameter is set to 0 (default), it's automatically updated to default burst size in according with current msanQoSProfileInCdr value.")
msanServiceFlowProfileUsPdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileUsPdr.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileUsPdr.setDescription('Upstream peak data rate (E-PDR) in kbps (0 1000000).')
msanServiceFlowProfileUsPdrBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setUnits('kB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileUsPdrBurstSize.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileUsPdrBurstSize.setDescription("Upstream peak data rate burst size in kB (0 16384). When parameter is set to 0 (default), it's automatically updated to default burst size in according with current msanQoSProfileInPdr value.")
msanServiceFlowProfileUsMarkPcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("copyFromCsc", 2), ("userValue", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileUsMarkPcp.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileUsMarkPcp.setDescription('Type of upstrem PCP marking. If set to userValue(3), parameter msanServiceFlowProfileUsMarkPcpValue is used. A value of none(1) indicates that parameter has not been defined')
msanServiceFlowProfileUsMarkPcpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileUsMarkPcpValue.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileUsMarkPcpValue.setDescription('Mark upstream packets with specified PCP (Priority Code Point) value (0-7) = CoS. A value of -1 indicates that parameter has not been defined')
msanServiceFlowProfileUsMarkDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("copyFromPcp", 2), ("userValue", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileUsMarkDscp.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileUsMarkDscp.setDescription('Type of upstrem DSCP marking. If set to userValue(3), parameter msanServiceFlowProfileUsMarkDscpValue is used. A value of none(1) indicates that parameter has not been defined')
msanServiceFlowProfileUsMarkDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileUsMarkDscpValue.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileUsMarkDscpValue.setDescription('Mark upstream packets with specified DSCP (Diffserv Code Point) value (0-63). A value of -1 indicates that parameter has not been defined')
msanServiceFlowProfileDsCdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDsCdr.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileDsCdr.setDescription('Downstream committed data rate (E-CDR) in kbps (0 1000000).')
msanServiceFlowProfileDsCdrBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setUnits('kB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDsCdrBurstSize.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileDsCdrBurstSize.setDescription("Downstream committed data rate burst size in kB (0 16384). When parameter is set to 0 (default), it's automatically updated to default burst size in according with current msanQoSProfileOutCdr value.")
msanServiceFlowProfileDsPdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDsPdr.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileDsPdr.setDescription('Downstream peak data rate (E-PDR) in kbps (0 1000000).')
msanServiceFlowProfileDsPdrBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setUnits('kB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDsPdrBurstSize.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileDsPdrBurstSize.setDescription("Downstream peak data rate burst size in kB (0 16384). When parameter is set to 0 (default), it's automatically updated to default burst size in according with current msanQoSProfileOutCdr value. ")
msanServiceFlowProfileDsMarkPcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("copyFromCsc", 2), ("userValue", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDsMarkPcp.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileDsMarkPcp.setDescription('Type of downstream PCP marking. If set to userValue(3), parameter msanServiceFlowProfileDsMarkPcpValue is used. A value of none(1) indicates that parameter has not been defined')
msanServiceFlowProfileDsMarkPcpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDsMarkPcpValue.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileDsMarkPcpValue.setDescription('Mark downstream packets with specified PCP (Priority Code Point) value (0-7) = CoS. A value of -1 indicates that parameter has not been defined')
msanServiceFlowProfileDsMarkDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("copyFromPcp", 2), ("userValue", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDsMarkDscp.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileDsMarkDscp.setDescription('Type of downstrem DSCP marking. If set to userValue(3), parameter msanServiceFlowProfileDsMarkDscpValue is used. A value of none(1) indicates that parameter has not been defined')
msanServiceFlowProfileDsMarkDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDsMarkDscpValue.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileDsMarkDscpValue.setDescription('Mark downstream packets with specified DSCP (Diffserv Code Point) value (0-63). A value of -1 indicates that parameter has not been defined')
msanServiceFlowProfileDsQueuingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDsQueuingPriority.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileDsQueuingPriority.setDescription('Queuing Priority of Service Flow Profile. ')
msanServiceFlowProfileDsSchedulingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("weighted", 1), ("strict", 2))).clone('weighted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDsSchedulingMode.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileDsSchedulingMode.setDescription('Scheduling Mode')
msanServiceFlowProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 68), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanServiceFlowProfileDescription.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileDescription.setDescription('Attribute specifies text which describes the associated object.')
msanServiceFlowProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 3, 1, 1, 69), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanServiceFlowProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanServiceFlowProfileRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanVlanProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4))
msanVlanProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1), )
if mibBuilder.loadTexts: msanVlanProfileTable.setStatus('current')
if mibBuilder.loadTexts: msanVlanProfileTable.setDescription('Vlan Profile table ')
msanVlanProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanVlanProfileName"))
if mibBuilder.loadTexts: msanVlanProfileEntry.setStatus('current')
if mibBuilder.loadTexts: msanVlanProfileEntry.setDescription('Vlan Profile table entry.')
msanVlanProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanVlanProfileName.setStatus('current')
if mibBuilder.loadTexts: msanVlanProfileName.setDescription('Name for the VLAN profile.')
msanVlanProfileProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVlanProfileProtection.setStatus('current')
if mibBuilder.loadTexts: msanVlanProfileProtection.setDescription("If protection flag is set to protected (1), other profile values cannot be edited. Protection flag is always protected (1) and it can't be changed if profile is assigned as dynamic: msanVlanProfileStatus = dynamic(2)")
msanVlanProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanVlanProfileStatus.setStatus('current')
if mibBuilder.loadTexts: msanVlanProfileStatus.setDescription("Profile status. If status is dynamic, profile values can't be edited.")
msanVlanProfileCVid = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVlanProfileCVid.setStatus('current')
if mibBuilder.loadTexts: msanVlanProfileCVid.setDescription('Customer VLANs Identification (bit mask).')
msanVlanProfileCVidNative = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVlanProfileCVidNative.setStatus('current')
if mibBuilder.loadTexts: msanVlanProfileCVidNative.setDescription('Nativ C-VLAN Id. A value of -1 indicates that parameter has not been defined.')
msanVlanProfileCVidRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVlanProfileCVidRemark.setStatus('current')
if mibBuilder.loadTexts: msanVlanProfileCVidRemark.setDescription('Remark C-VLAN Id. A value of -1 indicates that parameter has not been defined.')
msanVlanProfileSVid = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVlanProfileSVid.setStatus('current')
if mibBuilder.loadTexts: msanVlanProfileSVid.setDescription('S-VLAN Id. A value of -1 indicates that parameter has not been defined.')
msanVlanProfileSEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 8), Integer32().clone(34984)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVlanProfileSEtherType.setStatus('current')
if mibBuilder.loadTexts: msanVlanProfileSEtherType.setDescription('Ether Type value. ')
msanVlanProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVlanProfileDescription.setStatus('current')
if mibBuilder.loadTexts: msanVlanProfileDescription.setDescription('Attribute specifies text which describes the associated object.')
msanVlanProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanVlanProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanVlanProfileRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanVlanProfileNetworkPortCTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("use", 1), ("notUse", 2))).clone('use')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVlanProfileNetworkPortCTag.setStatus('current')
if mibBuilder.loadTexts: msanVlanProfileNetworkPortCTag.setDescription('Usage of C-VLAN tag on network port. If assigned as notUse(2) in upstream direction, C-VLAN tag is removed.')
msanVlanPortProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 2), )
if mibBuilder.loadTexts: msanVlanPortProfileTable.setStatus('current')
if mibBuilder.loadTexts: msanVlanPortProfileTable.setDescription('A connection between VLAN profiles and device ports')
msanVlanPortProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanVlanProfileName"))
if mibBuilder.loadTexts: msanVlanPortProfileEntry.setStatus('current')
if mibBuilder.loadTexts: msanVlanPortProfileEntry.setDescription('Service Profile Port table entry.')
msanVlanPortProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 4, 2, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanVlanPortProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanVlanPortProfileRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanMulticastProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5))
msanMulticastProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1), )
if mibBuilder.loadTexts: msanMulticastProfileTable.setStatus('current')
if mibBuilder.loadTexts: msanMulticastProfileTable.setDescription('Multicast Profile table ')
msanMulticastProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMulticastProfileName"))
if mibBuilder.loadTexts: msanMulticastProfileEntry.setStatus('current')
if mibBuilder.loadTexts: msanMulticastProfileEntry.setDescription('Multicast Profile table entry.')
msanMulticastProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanMulticastProfileName.setStatus('current')
if mibBuilder.loadTexts: msanMulticastProfileName.setDescription('Name for the Multicast profile.')
msanMulticastProfileProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastProfileProtection.setStatus('current')
if mibBuilder.loadTexts: msanMulticastProfileProtection.setDescription("If protection flag is set to protected (1), other profile values cannot be edited. Protection flag is always protected (1) and it can't be changed if profile is assigned as dynamic: msanMulticastProfileStatus = dynamic(2)")
msanMulticastProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanMulticastProfileStatus.setStatus('current')
if mibBuilder.loadTexts: msanMulticastProfileStatus.setDescription("Profile status. If status is dynamic, profile values can't be edited.")
msanMulticastProfileIgmpSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastProfileIgmpSnooping.setStatus('current')
if mibBuilder.loadTexts: msanMulticastProfileIgmpSnooping.setDescription('IGMP snnoping')
msanMulticastProfileIgmpSnoopingFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastProfileIgmpSnoopingFastLeave.setStatus('current')
if mibBuilder.loadTexts: msanMulticastProfileIgmpSnoopingFastLeave.setDescription('IGMP Snooping Fast Leave.')
msanMulticastProfileIgmpSnoopingSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastProfileIgmpSnoopingSuppression.setStatus('current')
if mibBuilder.loadTexts: msanMulticastProfileIgmpSnoopingSuppression.setDescription('IGMP Snooping Suppression.')
msanMulticastProfileIgmpProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastProfileIgmpProxy.setStatus('current')
if mibBuilder.loadTexts: msanMulticastProfileIgmpProxy.setDescription('IGMP proxy.')
msanMulticastProfileIgmpProxyIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastProfileIgmpProxyIpAddress.setStatus('current')
if mibBuilder.loadTexts: msanMulticastProfileIgmpProxyIpAddress.setDescription('IGMP proxy IP address.')
msanMulticastProfileIgmpFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("allowAll", 0), ("allowReports", 1), ("allowQueries", 2), ("dropAll", 3))).clone('allowReports')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastProfileIgmpFiltering.setStatus('current')
if mibBuilder.loadTexts: msanMulticastProfileIgmpFiltering.setDescription('IGMP filtering.')
msanMulticastProfileMulticastGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastProfileMulticastGroupLimit.setStatus('current')
if mibBuilder.loadTexts: msanMulticastProfileMulticastGroupLimit.setDescription('Multicast group limit. A value of 0 indicates not limit.')
msanMulticastProfileMvr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastProfileMvr.setStatus('current')
if mibBuilder.loadTexts: msanMulticastProfileMvr.setDescription('Multicast VLAN Registration.')
msanMulticastProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastProfileDescription.setStatus('current')
if mibBuilder.loadTexts: msanMulticastProfileDescription.setDescription('Attribute specifies text which describes the associated object.')
msanMulticastProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanMulticastProfileRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanMulticastProfileStaticGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 2), )
if mibBuilder.loadTexts: msanMulticastProfileStaticGroupTable.setStatus('current')
if mibBuilder.loadTexts: msanMulticastProfileStaticGroupTable.setDescription('Connection between multicast_profile and multicast_static_group table ')
msanMulticastProfileStaticGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMulticastProfileName"), (0, "ISKRATEL-MSAN-MIB", "msanMulticastProfileStaticGroupIpAddr"))
if mibBuilder.loadTexts: msanMulticastProfileStaticGroupEntry.setStatus('current')
if mibBuilder.loadTexts: msanMulticastProfileStaticGroupEntry.setDescription('Multicast Profile Group table entry.')
msanMulticastProfileStaticGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: msanMulticastProfileStaticGroupIpAddr.setStatus('current')
if mibBuilder.loadTexts: msanMulticastProfileStaticGroupIpAddr.setDescription('Description.')
msanMulticastProfileStaticGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 5, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastProfileStaticGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanMulticastProfileStaticGroupRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanSecurityProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6))
msanSecurityProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1), )
if mibBuilder.loadTexts: msanSecurityProfileTable.setStatus('current')
if mibBuilder.loadTexts: msanSecurityProfileTable.setDescription('Security Profile table ')
msanSecurityProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanSecurityProfileName"))
if mibBuilder.loadTexts: msanSecurityProfileEntry.setStatus('current')
if mibBuilder.loadTexts: msanSecurityProfileEntry.setDescription('Security Profile table entry.')
msanSecurityProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanSecurityProfileName.setStatus('current')
if mibBuilder.loadTexts: msanSecurityProfileName.setDescription('Name of the security profile.')
msanSecurityProfileProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfileProtection.setStatus('current')
if mibBuilder.loadTexts: msanSecurityProfileProtection.setDescription("If protection flag is set to protected (1), other profile values cannot be edited. Protection flag is always protected (1) and it can't be changed if profile is assigned as dynamic: msanSecurityProfileStatus = dynamic(2)")
msanSecurityProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSecurityProfileStatus.setStatus('current')
if mibBuilder.loadTexts: msanSecurityProfileStatus.setDescription("Profile status. If status is dynamic, profile values can't be edited.")
msanSecurityProfileProtectedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfileProtectedPort.setStatus('current')
if mibBuilder.loadTexts: msanSecurityProfileProtectedPort.setDescription('Security profile protected port')
msanSecurityProfileMacSg = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfileMacSg.setStatus('current')
if mibBuilder.loadTexts: msanSecurityProfileMacSg.setDescription('Mac source guard')
msanSecurityProfileMacLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfileMacLimit.setStatus('current')
if mibBuilder.loadTexts: msanSecurityProfileMacLimit.setDescription('MAC limit A value of 0 indicates that parameter has not been defined.')
msanSecurityProfilePortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfilePortSecurity.setStatus('current')
if mibBuilder.loadTexts: msanSecurityProfilePortSecurity.setDescription('Port security')
msanSecurityProfileIpSg = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfileIpSg.setStatus('current')
if mibBuilder.loadTexts: msanSecurityProfileIpSg.setDescription('IP source guard')
msanSecurityProfileIpSgBindingLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfileIpSgBindingLimit.setStatus('current')
if mibBuilder.loadTexts: msanSecurityProfileIpSgBindingLimit.setDescription('IP source guard binding limit. ')
msanSecurityProfileIpSgFilteringMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipSourceAddress", 1), ("ipAndMacSourceAddress", 2))).clone('ipAndMacSourceAddress')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfileIpSgFilteringMode.setStatus('current')
if mibBuilder.loadTexts: msanSecurityProfileIpSgFilteringMode.setDescription('IP source guard filtering mode')
msanSecurityProfileArpInspec = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfileArpInspec.setStatus('current')
if mibBuilder.loadTexts: msanSecurityProfileArpInspec.setDescription('Dynamic ARP inspection')
msanSecurityProfileMacForward = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfileMacForward.setStatus('current')
if mibBuilder.loadTexts: msanSecurityProfileMacForward.setDescription('MAC forwarding')
msanSecurityProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecurityProfileDescription.setStatus('current')
if mibBuilder.loadTexts: msanSecurityProfileDescription.setDescription('Attribute specifies text which describes the associated object.')
msanSecurityProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanSecurityProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanSecurityProfileRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanSecurityAclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 3), )
if mibBuilder.loadTexts: msanSecurityAclProfileTable.setStatus('current')
if mibBuilder.loadTexts: msanSecurityAclProfileTable.setDescription('A connection between security profiles and access lists')
msanSecurityAclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanSecurityProfileName"), (0, "ISKRATEL-MSAN-MIB", "msanSecurityAclProfileAclDirection"), (0, "ISKRATEL-MSAN-MIB", "msanSecurityAclProfileSequence"), (0, "ISKRATEL-MSAN-MIB", "msanSecurityAclProfileAclType"), (0, "ISKRATEL-MSAN-MIB", "msanSecurityAclProfileAclId"))
if mibBuilder.loadTexts: msanSecurityAclProfileEntry.setStatus('current')
if mibBuilder.loadTexts: msanSecurityAclProfileEntry.setDescription('Service Profile Port table entry.')
msanSecurityAclProfileAclDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: msanSecurityAclProfileAclDirection.setStatus('current')
if mibBuilder.loadTexts: msanSecurityAclProfileAclDirection.setDescription('The direction to which this ACL instance applies.')
msanSecurityAclProfileSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: msanSecurityAclProfileSequence.setStatus('current')
if mibBuilder.loadTexts: msanSecurityAclProfileSequence.setDescription('The relative evaluation sequence of this ACL for this interface and direction. When multiple ACLs are allowed for a given interface and direction, the sequence number determines the order in which the list of ACLs are evaluated, with lower sequence numbers given higher precedence. The sequence number value is arbitrary, but must be a unique non-zero value for a given interface and direction. Setting this object to an existing sequence number value for a given interface and direction causes the ACL corresponding to that value to be replaced with this ACL.')
msanSecurityAclProfileAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2))))
if mibBuilder.loadTexts: msanSecurityAclProfileAclType.setStatus('current')
if mibBuilder.loadTexts: msanSecurityAclProfileAclType.setDescription('The type of this ACL, which is used to interpret the aclIfId object value.')
msanSecurityAclProfileAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 3, 1, 4), Unsigned32())
if mibBuilder.loadTexts: msanSecurityAclProfileAclId.setStatus('current')
if mibBuilder.loadTexts: msanSecurityAclProfileAclId.setDescription('The ACL identifier value. For the IP ACLs, the actual ACL number is its identifier as follows: IP standard ranges from 1-99, IP extended ranges from 100-199, and IP advanced ranges 200-299.')
msanSecurityAclProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 6, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanSecurityAclProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanSecurityAclProfileRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanL2cpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7))
msanL2cpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 1), )
if mibBuilder.loadTexts: msanL2cpProfileTable.setStatus('current')
if mibBuilder.loadTexts: msanL2cpProfileTable.setDescription('L2CP (Layer 2 Control Protocol) Profile table ')
msanL2cpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 1, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanL2cpProfileName"))
if mibBuilder.loadTexts: msanL2cpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: msanL2cpProfileEntry.setDescription('L2cp Profile table entry.')
msanL2cpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanL2cpProfileName.setStatus('current')
if mibBuilder.loadTexts: msanL2cpProfileName.setDescription('Name of the L2CP profile.')
msanL2cpProfileProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanL2cpProfileProtection.setStatus('current')
if mibBuilder.loadTexts: msanL2cpProfileProtection.setDescription("If protection flag is set to protected (1), other profile values cannot be edited. Protection flag is always protected (1) and it can't be changed if profile is assigned as dynamic: msanL2cpProfileStatus = dynamic(2)")
msanL2cpProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanL2cpProfileStatus.setStatus('current')
if mibBuilder.loadTexts: msanL2cpProfileStatus.setDescription("Profile status. If status is dynamic, profile values can't be edited.")
msanL2cpProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanL2cpProfileDescription.setStatus('current')
if mibBuilder.loadTexts: msanL2cpProfileDescription.setDescription('Attribute specifies text which describes the associated object.')
msanL2cpProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanL2cpProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanL2cpProfileRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanL2cpProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 2), )
if mibBuilder.loadTexts: msanL2cpProtocolTable.setStatus('current')
if mibBuilder.loadTexts: msanL2cpProtocolTable.setDescription('Table with list of L2CP protocols')
msanL2cpProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanL2cpProtocolName"))
if mibBuilder.loadTexts: msanL2cpProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: msanL2cpProtocolEntry.setDescription('Description.')
msanL2cpProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanL2cpProtocolName.setStatus('current')
if mibBuilder.loadTexts: msanL2cpProtocolName.setDescription('L2CP protocol name')
msanL2cpProtocolMacDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 2, 1, 2), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanL2cpProtocolMacDestAddr.setStatus('current')
if mibBuilder.loadTexts: msanL2cpProtocolMacDestAddr.setDescription('MAC destination address of L2CP protocol. Empty string indicates that protocol is related to any MAC address.')
msanL2cpProtocolEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanL2cpProtocolEthertype.setStatus('current')
if mibBuilder.loadTexts: msanL2cpProtocolEthertype.setDescription('L2CP protocol Ethertype. A value of -1 indicates that parameter has not been defined.')
msanL2cpProtocolSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 2, 1, 4), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanL2cpProtocolSubtype.setStatus('current')
if mibBuilder.loadTexts: msanL2cpProtocolSubtype.setDescription('L2CP protocol subtype. A value of -1 indicates that parameter has not been defined.')
msanL2cpProtocolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanL2cpProtocolRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanL2cpProtocolRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. For row creation use createAndWait(5). Value active(1) will activate and value destroy(6) will remove this entry. Other values are currently not supported.')
msanL2cpProfileProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 3), )
if mibBuilder.loadTexts: msanL2cpProfileProtocolTable.setStatus('current')
if mibBuilder.loadTexts: msanL2cpProfileProtocolTable.setDescription('Table with connection between profiles and protocols')
msanL2cpProfileProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanL2cpProfileName"), (0, "ISKRATEL-MSAN-MIB", "msanL2cpProtocolName"))
if mibBuilder.loadTexts: msanL2cpProfileProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: msanL2cpProfileProtocolEntry.setDescription('Description.')
msanL2cpProfileProtocolRule = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discard", 1), ("peer", 2), ("tunnel", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanL2cpProfileProtocolRule.setStatus('current')
if mibBuilder.loadTexts: msanL2cpProfileProtocolRule.setDescription('L2CP protocol rule.')
msanL2cpProfileProtocolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanL2cpProfileProtocolRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanL2cpProfileProtocolRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. For row creation use createAndWait(5). Value active(1) will activate and value destroy(6) will remove this entry. Other values are currently not supported. Row can be activated only when msanL2cpProfileProtocolRule is set.')
msanL2cpProfileVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 4), )
if mibBuilder.loadTexts: msanL2cpProfileVlanTable.setStatus('current')
if mibBuilder.loadTexts: msanL2cpProfileVlanTable.setDescription('Table is used for connecting l2cp profile with vlan_id.')
msanL2cpProfileVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 4, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanL2cpProfileName"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanL2cpProfileVlanEntry.setStatus('current')
if mibBuilder.loadTexts: msanL2cpProfileVlanEntry.setDescription('Description.')
msanL2cpProfileVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 7, 4, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanL2cpProfileVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanL2cpProfileVlanRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanXdslProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 8))
msanXdsl2LineConfTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 8, 1), )
if mibBuilder.loadTexts: msanXdsl2LineConfTemplateTable.setStatus('current')
if mibBuilder.loadTexts: msanXdsl2LineConfTemplateTable.setDescription('Description.')
msanXdsl2LineConfTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 8, 1, 1), )
xdsl2LineConfTemplateEntry.registerAugmentions(("ISKRATEL-MSAN-MIB", "msanXdsl2LineConfTemplateEntry"))
msanXdsl2LineConfTemplateEntry.setIndexNames(*xdsl2LineConfTemplateEntry.getIndexNames())
if mibBuilder.loadTexts: msanXdsl2LineConfTemplateEntry.setStatus('current')
if mibBuilder.loadTexts: msanXdsl2LineConfTemplateEntry.setDescription('Description.')
msanXdsl2LineConfTempProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanXdsl2LineConfTempProtection.setStatus('current')
if mibBuilder.loadTexts: msanXdsl2LineConfTempProtection.setDescription("If protection flag is set to protected (1), other profile values cannot be edited. Protection flag is always protected (1) and it can't be changed if profile is assigned as dynamic: msanAclProfileStatus = dynamic(2)")
msanXdsl2LineConfTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanXdsl2LineConfTempStatus.setStatus('current')
if mibBuilder.loadTexts: msanXdsl2LineConfTempStatus.setDescription("Profile status. If status is dynamic, profile values can't be edited.")
msanXdsl2LineAlarmConfTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 8, 2), )
if mibBuilder.loadTexts: msanXdsl2LineAlarmConfTemplateTable.setStatus('current')
if mibBuilder.loadTexts: msanXdsl2LineAlarmConfTemplateTable.setDescription('Description.')
msanXdsl2LineAlarmConfTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 8, 2, 1), )
xdsl2LineAlarmConfTemplateEntry.registerAugmentions(("ISKRATEL-MSAN-MIB", "msanXdsl2LineAlarmConfTemplateEntry"))
msanXdsl2LineAlarmConfTemplateEntry.setIndexNames(*xdsl2LineAlarmConfTemplateEntry.getIndexNames())
if mibBuilder.loadTexts: msanXdsl2LineAlarmConfTemplateEntry.setStatus('current')
if mibBuilder.loadTexts: msanXdsl2LineAlarmConfTemplateEntry.setDescription('Description.')
msanXdsl2LineAlarmConfTempProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanXdsl2LineAlarmConfTempProtection.setStatus('current')
if mibBuilder.loadTexts: msanXdsl2LineAlarmConfTempProtection.setDescription("If protection flag is set to protected (1), other profile values cannot be edited. Protection flag is always protected (1) and it can't be changed if profile is assigned as dynamic: msanAclProfileStatus = dynamic(2)")
msanXdsl2LineAlarmConfTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanXdsl2LineAlarmConfTempStatus.setStatus('current')
if mibBuilder.loadTexts: msanXdsl2LineAlarmConfTempStatus.setDescription("Profile status. If status is dynamic, profile values can't be edited.")
msanProfileConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 3, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanProfileConfigStatus.setStatus('current')
if mibBuilder.loadTexts: msanProfileConfigStatus.setDescription('Profile configuration status.')
msanDhcpRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4))
msanDhcpRaGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 1))
msanDhcpRaStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaStatus.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaStatus.setDescription('DHCP Relay Agent status.')
msanDhcpRaMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("simplified", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaMode.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaMode.setDescription('Specifies if the DHCP Relay Agent mode is to be Simple or Full. Default value is Full.')
msanDhcpRaCircuitType = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaCircuitType.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaCircuitType.setDescription('Specifies DHCP RA Circuit type as trusted(1) or untrusted(2).')
msanDhcpRaOpt82 = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaOpt82.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaOpt82.setDescription('Specifies DHCP Relay Agent general option 82 insertion status . ')
msanDhcpRaOpt82ReplyMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("keep", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaOpt82ReplyMode.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaOpt82ReplyMode.setDescription('Specifies DHCP Relay Agent keep/remove option 82 in replies. ')
msanDhcpRaOpt82CircuitIdStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaOpt82CircuitIdStatus.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaOpt82CircuitIdStatus.setDescription('Specifies the disable/enable inserting Circuit ID suboption. Default value is Enable.')
msanDhcpRaOpt82RemoteIdStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaOpt82RemoteIdStatus.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaOpt82RemoteIdStatus.setDescription('Specifies the disable/enable inserting Remote ID suboption. Default value is Enable.')
msanDhcpRaOpt82UnicastExtStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaOpt82UnicastExtStatus.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaOpt82UnicastExtStatus.setDescription('The desired state of insertion of option 82 in unicast frames.')
msanDhcpRaFullModeSrvIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaFullModeSrvIpAddr.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaFullModeSrvIpAddr.setDescription('The IP address of default DHCP Server for VLANs where DHCP RA is enabled in full mode (parameter msanDhcpRaVlanMode).')
msanDhcpRaPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2), )
if mibBuilder.loadTexts: msanDhcpRaPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaPortConfigTable.setDescription('Table od DHCP RA parameters per port.')
msanDhcpRaPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanDhcpRaPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaPortConfigEntry.setDescription('Description.')
msanDhcpRaPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("enableCli", 2), ("enableSrv", 3), ("disable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaPortState.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaPortState.setDescription('State of DHCP Relay Agent on the port (enable, disable, enable-client, enable-server) ')
msanDhcpRaPortCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaPortCircuitId.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaPortCircuitId.setDescription('Option 82 Circuit Id for the port.')
msanDhcpRaPortRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaPortRemoteId.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaPortRemoteId.setDescription('Option 82 Remote Id for the port.')
msanDhcpRaPortMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaPortMeter.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaPortMeter.setDescription('Enable or disable DHCP metering on port.')
msanDhcpRaPortMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1, 5), Integer32()).setUnits('kb/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaPortMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaPortMaxDataRate.setDescription('Allowed throughput of incoming DHCP traffic on a port (kb/s)')
msanDhcpRaPortCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2), ("notConfigured", 3))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaPortCircuitType.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaPortCircuitType.setDescription('Specifies DHCP RA Circuit type per port as trusted(1) or untrusted(2).')
msanDhcpRaPortOpt82 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notConfigured", 3))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaPortOpt82.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaPortOpt82.setDescription('Specifies DHCP Relay Agent option 82 insertion status per port.')
msanDhcpRaPortOpt82ReplyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("keep", 1), ("remove", 2), ("notConfigured", 3))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaPortOpt82ReplyMode.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaPortOpt82ReplyMode.setDescription('Specifies DHCP Relay Agent keep/remove option 82 in replies per port.')
msanDhcpRaPortOpt82UnicastExtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notConfigured", 3))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaPortOpt82UnicastExtStatus.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaPortOpt82UnicastExtStatus.setDescription('The desired state of insertion of option 82 in unicast frames per port.')
msanDhcpRaPortCircuitIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iskratel", 1), ("standard", 2))).clone('iskratel')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaPortCircuitIdType.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaPortCircuitIdType.setDescription('Circuit Id syntax mode per port.')
msanDhcpRaFullModeVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 3), )
if mibBuilder.loadTexts: msanDhcpRaFullModeVlanTable.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaFullModeVlanTable.setDescription('Description.')
msanDhcpRaFullModeVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanDhcpRaFullModeVlanId"), (0, "ISKRATEL-MSAN-MIB", "msanDhcpRaFullModeVlanSrvIpAddr"))
if mibBuilder.loadTexts: msanDhcpRaFullModeVlanEntry.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaFullModeVlanEntry.setDescription('Description.')
msanDhcpRaFullModeVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: msanDhcpRaFullModeVlanId.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaFullModeVlanId.setDescription('The VLAN identifier (refers to dot1qVlanIndex) where DHCP Client resides.')
msanDhcpRaFullModeVlanSrvIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: msanDhcpRaFullModeVlanSrvIpAddr.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaFullModeVlanSrvIpAddr.setDescription('The IP address of DHCP Server for specified VLAN.')
msanDhcpRaFullModeVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDhcpRaFullModeVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaFullModeVlanRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanDhcpRaStatTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5), )
if mibBuilder.loadTexts: msanDhcpRaStatTable.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaStatTable.setDescription('Description.')
msanDhcpRaStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanDhcpRaStatEntry.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaStatEntry.setDescription('Description.')
msanDhcpRaStatDiscover = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatDiscover.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaStatDiscover.setDescription('Number of received DHCP DISCOVER packets.')
msanDhcpRaStatRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatRequest.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaStatRequest.setDescription('Number of received DHCP REQUEST packets.')
msanDhcpRaStatOffer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatOffer.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaStatOffer.setDescription('Number of received DHCP OFFER packets.')
msanDhcpRaStatACK = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatACK.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaStatACK.setDescription('Number of received DHCP ACKNOWLAGE (ACK) packets.')
msanDhcpRaStatNAK = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatNAK.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaStatNAK.setDescription('Number of received DHCP NOT ACKNOWLAGE (NAK) packets.')
msanDhcpRaStatDecline = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatDecline.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaStatDecline.setDescription('Number of received DHCP DECLINE packets.')
msanDhcpRaStatMaxPacketSizeExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatMaxPacketSizeExceeded.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaStatMaxPacketSizeExceeded.setDescription('Number of received DHCP packets with max. packet size exceeded. ')
msanDhcpRaStatFrameErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatFrameErr.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaStatFrameErr.setDescription('Number of received DHCP packets with errors in frames. ')
msanDhcpRaStatOpt82Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatOpt82Present.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaStatOpt82Present.setDescription('Number of received DHCP packets with Option 82 or giaddr present. ')
msanDhcpRaStatFrameUnsync = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatFrameUnsync.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaStatFrameUnsync.setDescription('Number of received packets with frames not synchronized with state machines.')
msanDhcpRaStatRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatRelease.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaStatRelease.setDescription('Number of received DHCP RELEASE packets.')
msanDhcpRaStatInform = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpRaStatInform.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaStatInform.setDescription('Number of received DHCP INFORM packets.')
msanDhcpRaVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 6), )
if mibBuilder.loadTexts: msanDhcpRaVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaVlanConfigTable.setDescription('Table od DHCP RA parameters per Vlan.')
msanDhcpRaVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 6, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanDhcpRaVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaVlanConfigEntry.setDescription('Description.')
msanDhcpRaVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("notConfigured", 2))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaVlanState.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaVlanState.setDescription('DHCP RA state for specified VLAN ID. Value notConfigured(2) means, that global setting is used(msanDhcpRaStatus).')
msanDhcpRaVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("simplified", 2), ("notConfigured", 3))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaVlanMode.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaVlanMode.setDescription('DHCP RA mode for specified VLAN ID. Value notConfigured(1) means, that global setting is used(msanDhcpRaMode).')
msanDhcpRaVlanOpt82 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notConfigured", 3))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaVlanOpt82.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaVlanOpt82.setDescription('Specifies DHCP Relay Agent option 82 insertion status per vlan.')
msanDhcpRaVlanOpt82ReplyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("keep", 1), ("remove", 2), ("notConfigured", 3))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaVlanOpt82ReplyMode.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaVlanOpt82ReplyMode.setDescription('Specifies DHCP Relay Agent keep/remove option 82 in replies per vlan.')
msanDhcpRaVlanOpt82UnicastExtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notConfigured", 3))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaVlanOpt82UnicastExtStatus.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaVlanOpt82UnicastExtStatus.setDescription('The desired state of insertion of option 82 in unicast frames per vlan.')
msanDhcpRaVlanCircuitIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("iskratel", 1), ("standard", 2), ("notConfigured", 3))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaVlanCircuitIdType.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaVlanCircuitIdType.setDescription('Circuit Id syntax mode per vlan.')
msanDhcpRaPortVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 7), )
if mibBuilder.loadTexts: msanDhcpRaPortVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaPortVlanConfigTable.setDescription('Description.')
msanDhcpRaPortVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanDhcpRaPortVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaPortVlanConfigEntry.setDescription('Description.')
msanDhcpRaPortVlanRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 7, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpRaPortVlanRemoteId.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaPortVlanRemoteId.setDescription('The VLAN identifier (refers to dot1qVlanIndex) where DHCP Client resides.')
msanDhcpRaPortVlanConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDhcpRaPortVlanConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanDhcpRaPortVlanConfigRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. For row creation use createAndWait(5) [createAndGo(4) is not supported].')
msanDhcpv6RaGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 100))
msanDhcpv6RaState = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 100, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaState.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaState.setDescription('DHCPv6 Relay Agent status.')
msanDhcpv6RaMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 100, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ldra", 1))).clone('ldra')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaMode.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaMode.setDescription('DHCPv6 Relay Agent mode. ldra = Lightweight DHCPRv6')
msanDhcpv6RaInterfaceIdStandard = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 100, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaInterfaceIdStandard.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaInterfaceIdStandard.setDescription('DHCPv6 RA Standard Interface Id type.')
msanDhcpv6Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101))
msanDhcpv6RaPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1), )
if mibBuilder.loadTexts: msanDhcpv6RaPortStatTable.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaPortStatTable.setDescription('Description.')
msanDhcpv6RaPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanDhcpv6RaPortStatEntry.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaPortStatEntry.setDescription('Description.')
msanDhcpv6PortRaStatSolicit = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatSolicit.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6PortRaStatSolicit.setDescription('Number of received DHCPv6 solicit packets.')
msanDhcpv6PortRaStatAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatAdvertise.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6PortRaStatAdvertise.setDescription('Number of received DHCPv6 advertise packets.')
msanDhcpv6PortRaStatRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatRequest.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6PortRaStatRequest.setDescription('Number of received DHCPv6 request packets.')
msanDhcpv6PortRaStatReply = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatReply.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6PortRaStatReply.setDescription('Number of received DHCPv6 reply packets.')
msanDhcpv6PortRaStatRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatRenew.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6PortRaStatRenew.setDescription('Number of received DHCPv6 renew packets.')
msanDhcpv6PortRaStatRebind = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatRebind.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6PortRaStatRebind.setDescription('Number of received DHCPv6 rebind packets.')
msanDhcpv6PortRaStatDecline = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatDecline.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6PortRaStatDecline.setDescription('Number of received DHCPv6 decline packets.')
msanDhcpv6PortRaStatReconfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatReconfigure.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6PortRaStatReconfigure.setDescription('Number of received DHCPv6 reconfigure packets.')
msanDhcpv6PortRaStatRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatRelease.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6PortRaStatRelease.setDescription('Number of received DHCPv6 release packets.')
msanDhcpv6PortRaStatInformRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatInformRequest.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6PortRaStatInformRequest.setDescription('Number of received DHCPv6 inform request packets.')
msanDhcpv6PortRaStatRelayForward = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatRelayForward.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6PortRaStatRelayForward.setDescription('Number of received DHCPv6 relay forward packets.')
msanDhcpv6PortRaStatRelayReply = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatRelayReply.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6PortRaStatRelayReply.setDescription('Number of received DHCPv6 relay reply packets.')
msanDhcpv6PortRaStatOversizeError = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatOversizeError.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6PortRaStatOversizeError.setDescription('Number of discarded packets because max packet size exceeded.')
msanDhcpv6PortRaStatFrameError = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatFrameError.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6PortRaStatFrameError.setDescription('Number of discarded packets because frame error.')
msanDhcpv6PortRaStatFrameUnsyncError = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatFrameUnsyncError.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6PortRaStatFrameUnsyncError.setDescription('Number of received packets with frames not synchronized with state machines.')
msanDhcpv6PortRaStatSysError = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 1, 1, 103), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6PortRaStatSysError.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6PortRaStatSysError.setDescription('Number of discarded packets because system error.')
msanDhcpv6RaStatSolicit = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatSolicit.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaStatSolicit.setDescription('Number of received DHCPv6 solicit packets.')
msanDhcpv6RaStatAdvertise = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatAdvertise.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaStatAdvertise.setDescription('Number of received DHCPv6 advertise packets.')
msanDhcpv6RaStatRequest = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatRequest.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaStatRequest.setDescription('Number of received DHCPv6 request packets.')
msanDhcpv6RaStatReply = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatReply.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaStatReply.setDescription('Number of received DHCPv6 reply packets.')
msanDhcpv6RaStatRenew = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatRenew.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaStatRenew.setDescription('Number of received DHCPv6 renew packets.')
msanDhcpv6RaStatRebind = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatRebind.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaStatRebind.setDescription('Number of received DHCPv6 rebind packets.')
msanDhcpv6RaStatDecline = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 106), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatDecline.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaStatDecline.setDescription('Number of received DHCPv6 decline packets.')
msanDhcpv6RaStatReconfigure = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatReconfigure.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaStatReconfigure.setDescription('Number of received DHCPv6 reconfigure packets.')
msanDhcpv6RaStatRelease = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatRelease.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaStatRelease.setDescription('Number of received DHCPv6 reconfigure packets.')
msanDhcpv6RaStatInformRequest = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatInformRequest.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaStatInformRequest.setDescription('Number of received DHCPv6 inform request packets.')
msanDhcpv6RaStatRelayForward = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatRelayForward.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaStatRelayForward.setDescription('Number of received DHCPv6 Relay Forward packets.')
msanDhcpv6RaStatRelayReply = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatRelayReply.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaStatRelayReply.setDescription('Number of received DHCPv6 Relay Reply packets.')
msanDhcpv6RaStatOversizeError = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 200), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatOversizeError.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaStatOversizeError.setDescription('Number of discarded packets because max packet size exceeded.')
msanDhcpv6RaStatFrameError = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 201), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatFrameError.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaStatFrameError.setDescription('Number of discareded packets because errors in frame.')
msanDhcpv6RaStatFrameUnsyncError = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 202), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatFrameUnsyncError.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaStatFrameUnsyncError.setDescription('Number of received packets with frames not synchronized with state machines.')
msanDhcpv6RaStatSysError = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 101, 203), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaStatSysError.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaStatSysError.setDescription('Number of discared packets because system error.')
msanDhcpv6RaPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 102), )
if mibBuilder.loadTexts: msanDhcpv6RaPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaPortConfigTable.setDescription('Table od DHCP RA parameters per port.')
msanDhcpv6RaPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 102, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanDhcpv6RaPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaPortConfigEntry.setDescription('Description.')
msanDhcpv6RaPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 102, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("enableCli", 2), ("enableSrv", 3), ("disable", 4))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaPortState.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaPortState.setDescription('State of DHCPv6 Relay Agent on the port (enable, disable, enable-client, enable-server) ')
msanDhcpv6RaPortTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 102, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaPortTrusted.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaPortTrusted.setDescription('Specifies DHCP RA Circuit type per port as trusted(1) or untrusted(2). Default value for user ports is untrusted(2) and for network ports trusted(1). ')
msanDhcpv6RaPortInterfaceIdStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 102, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaPortInterfaceIdStandard.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaPortInterfaceIdStandard.setDescription('DHCPv6 RA Circuit Id syntax mode per port.')
msanDhcpv6RaPortInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 102, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDhcpv6RaPortInterfaceId.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaPortInterfaceId.setDescription('DHCPv6 Option 82 Circuit Id for the port.')
msanDhcpv6RaPortRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 102, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaPortRemoteId.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaPortRemoteId.setDescription('DHCPv6 Remote Id value for the port. If empty string, remote id is not added to DHCPv6 package.')
msanDhcpv6RaPortRemoteIdEnterpriseNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 102, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999999)).clone(1332)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaPortRemoteIdEnterpriseNum.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaPortRemoteIdEnterpriseNum.setDescription('DHCPv6 Remote Id enterprise number for the port. ')
msanDhcpv6RaVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 103), )
if mibBuilder.loadTexts: msanDhcpv6RaVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaVlanConfigTable.setDescription('Table od DHCP RA parameters per Vlan.')
msanDhcpv6RaVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 103, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanDhcpv6RaVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaVlanConfigEntry.setDescription('Description.')
msanDhcpv6RaVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 103, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaVlanState.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaVlanState.setDescription('DHCP RA state for specified VLAN ID. ')
msanDhcpv6RaVlanInterfaceIdStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 103, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaVlanInterfaceIdStandard.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaVlanInterfaceIdStandard.setDescription('DHCPv6 RA Circuit Id syntax mode per port.')
msanDhcpv6RaPortVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 104), )
if mibBuilder.loadTexts: msanDhcpv6RaPortVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaPortVlanConfigTable.setDescription('Description.')
msanDhcpv6RaPortVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 104, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanDhcpv6RaPortVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaPortVlanConfigEntry.setDescription('Description.')
msanDhcpv6RaPortVlanRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 104, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaPortVlanRemoteId.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaPortVlanRemoteId.setDescription('DHCPv6 Remote Id value for specified vlan_id per port. ')
msanDhcpv6RaPortVlanRemoteIdEnterpriseNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 104, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999999)).clone(1332)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDhcpv6RaPortVlanRemoteIdEnterpriseNum.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaPortVlanRemoteIdEnterpriseNum.setDescription('DHCPv6 Remote Id enterprise number for specified vlan_id per port. ')
msanDhcpv6RaPortVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 4, 104, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDhcpv6RaPortVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanDhcpv6RaPortVlanRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. For row creation use createAndWait(5) [createAndGo(4) is not supported].')
msanSntp = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5))
msanSntpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1))
msanSntpTzOffset = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzOffset.setStatus('current')
if mibBuilder.loadTexts: msanSntpTzOffset.setDescription('Specifies the time zone offset time in format hh:mm. Allowed range is -12 to 13.')
msanSntpTzName = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzName.setStatus('current')
if mibBuilder.loadTexts: msanSntpTzName.setDescription('Time Zone name.')
msanSntpTzDstOffset = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzDstOffset.setStatus('current')
if mibBuilder.loadTexts: msanSntpTzDstOffset.setDescription('Specifies the daylight saving time offset time in format hh:mm. Allowed range is -12 to 13.')
msanSntpTzDstStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzDstStartMonth.setStatus('current')
if mibBuilder.loadTexts: msanSntpTzDstStartMonth.setDescription('Specifies the daylight saving time start month. ')
msanSntpTzDstStartWeek = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzDstStartWeek.setStatus('current')
if mibBuilder.loadTexts: msanSntpTzDstStartWeek.setDescription('Specifies the daylight saving time start week.')
msanSntpTzDstStartDayInWeek = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("sunday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzDstStartDayInWeek.setStatus('current')
if mibBuilder.loadTexts: msanSntpTzDstStartDayInWeek.setDescription('Specifies the daylight saving time start day in week.')
msanSntpTzDstStartTime = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzDstStartTime.setStatus('current')
if mibBuilder.loadTexts: msanSntpTzDstStartTime.setDescription('Specifies the daylight saving time start time. Allowed range is 00:00 to 23:59.')
msanSntpTzDstEndMonth = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzDstEndMonth.setStatus('current')
if mibBuilder.loadTexts: msanSntpTzDstEndMonth.setDescription('Specifies the daylight saving time end month.')
msanSntpTzDstEndWeek = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzDstEndWeek.setStatus('current')
if mibBuilder.loadTexts: msanSntpTzDstEndWeek.setDescription('Specifies the daylight saving time end week.')
msanSntpTzDstEndDayInWeek = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("sunday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzDstEndDayInWeek.setStatus('current')
if mibBuilder.loadTexts: msanSntpTzDstEndDayInWeek.setDescription('Specifies the daylight saving time end start day in week.')
msanSntpTzDstEndTime = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 5, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSntpTzDstEndTime.setStatus('current')
if mibBuilder.loadTexts: msanSntpTzDstEndTime.setDescription('Specifies the daylight saving time end time. Allowed range is 00:00 to 23:59')
msanSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 7))
msanSnmpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 7, 1))
msanSnmpTrapRecvUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSnmpTrapRecvUdpPort.setStatus('current')
if mibBuilder.loadTexts: msanSnmpTrapRecvUdpPort.setDescription('The UDP Port where SNMP traps are to be sent.')
msanIgmpSnooping = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8))
msanIgmpSnoopingGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 1))
msanIgmpSnoopingReportSuppression = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpSnoopingReportSuppression.setStatus('current')
if mibBuilder.loadTexts: msanIgmpSnoopingReportSuppression.setDescription('Report suppression mode for IGMP Snooping for the switch. ')
msanIgmpSnoopingAdminState = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disableAndDiscard", 0), ("disableAndBroadcast", 1), ("enable", 2), ("enableAndUnknownGroupFlood", 3), ("enableAndMrouterFlood", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpSnoopingAdminState.setStatus('current')
if mibBuilder.loadTexts: msanIgmpSnoopingAdminState.setDescription('IGMP snooping global state. Values enableAndUnknownGroupFlood(3) and enableAndMrouterFlood(4) are relevant only for MSAN Ethernet switch (ES) products, where enableAndUnknownGroupFlood(3) is supported only on IDC board.')
msanIgmpSnoopingLoggingVlanId = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpSnoopingLoggingVlanId.setStatus('current')
if mibBuilder.loadTexts: msanIgmpSnoopingLoggingVlanId.setDescription('VLAN Id on which IGMP snooping logging is performed. Value 0 means that logging is disabled. ')
msanIgmpSnoopingViolationAction = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("remove", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpSnoopingViolationAction.setStatus('current')
if mibBuilder.loadTexts: msanIgmpSnoopingViolationAction.setDescription('Removing one of the existing (the oldest) multicast group membership, or discarding a new group membership request. ')
msanIgmpSnoopingFastLeaveAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpSnoopingFastLeaveAdminMode.setStatus('current')
if mibBuilder.loadTexts: msanIgmpSnoopingFastLeaveAdminMode.setDescription('This enables or disables IGMP Snooping Fast-Leave on user ports.')
msanIgmpSnoopingGroupMembershipInterval = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpSnoopingGroupMembershipInterval.setStatus('current')
if mibBuilder.loadTexts: msanIgmpSnoopingGroupMembershipInterval.setDescription('The amount of time in seconds that a switch will wait for a report from a particular group on the selected interface before deleting the interface from the entry. This value must be greater than msanIgmpSnoopingMaxResponseTime ')
msanIgmpSnoopingMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3599)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpSnoopingMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: msanIgmpSnoopingMaxResponseTime.setDescription('The amount of time in seconds a switch will wait on a report after sending a query on the selected interface. This value must be less than msanIgmpSnoopingGroupMembershipInterval ')
msanIgmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igmpAll", 1), ("igmpVersion2", 2), ("igmpVersion3", 3))).clone('igmpAll')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpVersion.setStatus('current')
if mibBuilder.loadTexts: msanIgmpVersion.setDescription('Version of processed IGMP frames.')
msanIgmpClear = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpClear.setStatus('current')
if mibBuilder.loadTexts: msanIgmpClear.setDescription('Clear all IGMP snooping entries.')
msanIgmpSnoopingTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 2), )
if mibBuilder.loadTexts: msanIgmpSnoopingTable.setStatus('current')
if mibBuilder.loadTexts: msanIgmpSnoopingTable.setDescription('Description.')
msanIgmpSnoopingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanIgmpSnoopingEntry.setStatus('current')
if mibBuilder.loadTexts: msanIgmpSnoopingEntry.setDescription('Description.')
msanIgmpSnoopingIntfStandaloneQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 2, 1, 1), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpSnoopingIntfStandaloneQuerier.setStatus('current')
if mibBuilder.loadTexts: msanIgmpSnoopingIntfStandaloneQuerier.setDescription('Specify the period of time in seconds you want the IGMP Standalone Querier generate IGMP query packets. Value must be higher than msanIgmpSnoopingMaxResponseTime and lower than msanIgmpSnoopingGroupMembershipInterval or 0. The default is 0. A value of zero indicates that standalone querier is disabled. IGMP SA Querier can be activated only on one interface at the same time. ')
msanIgmpSnoopingIntfFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("allowAll", 0), ("allowReports", 1), ("allowQueries", 2), ("dropAll", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpSnoopingIntfFilter.setStatus('current')
if mibBuilder.loadTexts: msanIgmpSnoopingIntfFilter.setDescription('Filtering of IGMP join/leave reports or queries frames. ')
msanIgmpSnoopingGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIgmpSnoopingGroupLimit.setStatus('current')
if mibBuilder.loadTexts: msanIgmpSnoopingGroupLimit.setDescription('A maximum numbers of IGMP groups per interface. Value 0 means no limits.')
msanSwitchIGMPVlanCurrentMrouterTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 3), )
if mibBuilder.loadTexts: msanSwitchIGMPVlanCurrentMrouterTable.setStatus('current')
if mibBuilder.loadTexts: msanSwitchIGMPVlanCurrentMrouterTable.setDescription('Description.')
msanSwitchIGMPVlanCurrentMrouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanSwitchIGMPVlanCurrentMrouterEntry.setStatus('current')
if mibBuilder.loadTexts: msanSwitchIGMPVlanCurrentMrouterEntry.setDescription('Description.')
msanSwitchIGMPVlanCurrentMrouterEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwitchIGMPVlanCurrentMrouterEnableState.setStatus('current')
if mibBuilder.loadTexts: msanSwitchIGMPVlanCurrentMrouterEnableState.setDescription('Returns per-interface per-vlan pairs where IGMP Mrouter is enabled. ')
msanSwitchIGMPSnoopingStaticIntfMulticastRouterTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 4), )
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingStaticIntfMulticastRouterTable.setReference('agentSwitchIGMPSnoopingIntfTable - 1.3.6.1.4.1.6132.1.1.1.2.8.7.1')
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingStaticIntfMulticastRouterTable.setStatus('current')
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingStaticIntfMulticastRouterTable.setDescription('Description.')
msanSwitchIGMPSnoopingStaticIntfMulticastRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingStaticIntfMulticastRouterEntry.setStatus('current')
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingStaticIntfMulticastRouterEntry.setDescription('Description.')
msanSwitchIGMPSnoopingIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingIntfIndex.setStatus('current')
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingIntfIndex.setDescription('The port number to be selected. Each port maps to an interface.')
msanSwitchIGMPSnoopingIntfAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingIntfAdminMode.setStatus('deprecated')
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingIntfAdminMode.setDescription('This enables or disables IGMP Snooping on a selected interface.')
msanSwitchIGMPSnoopingIntfGroupMembershipInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingIntfGroupMembershipInterval.setStatus('deprecated')
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingIntfGroupMembershipInterval.setDescription('The amount of time in seconds that a switch will wait for a report from a particular group on the selected interface before deleting the interface from the entry. This value must be greater than agentSwitchIGMPSnoopingIntfMaxResponseTime.')
msanSwitchIGMPSnoopingIntfMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3599)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingIntfMaxResponseTime.setStatus('deprecated')
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingIntfMaxResponseTime.setDescription('The amount of time in seconds a switch will wait after sending a query on the selected interface because it did not receive a report for a particular group in that interface. This value must be less than agentSwitchIGMPSnoopingIntfGroupMembershipInterval.')
msanSwitchIGMPSnoopingIntfMRPExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingIntfMRPExpirationTime.setStatus('deprecated')
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingIntfMRPExpirationTime.setDescription('The amount of time in seconds that a switch will wait for a query to be received on the selected interface before the interface is removed from the list of interfaces with multicast routers attached.')
msanSwitchIGMPSnoopingIntfFastLeaveAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingIntfFastLeaveAdminMode.setStatus('deprecated')
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingIntfFastLeaveAdminMode.setDescription('This enables or disables IGMP Snooping Fast-Leave on specified interface.')
msanSwitchIGMPSnoopingStaticIntfMulticastRouterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingStaticIntfMulticastRouterMode.setStatus('current')
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingStaticIntfMulticastRouterMode.setDescription('Mode of static IGMP Mrouter on selected interface.')
msanSwitchIGMPSnoopingIntfVlanIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 4, 1, 8), VlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingIntfVlanIDs.setStatus('deprecated')
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingIntfVlanIDs.setDescription('This field lists all the VlanIDs which include the selected interface.')
msanSwitchIGMPVlanStaticMrouterTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 5), )
if mibBuilder.loadTexts: msanSwitchIGMPVlanStaticMrouterTable.setStatus('deprecated')
if mibBuilder.loadTexts: msanSwitchIGMPVlanStaticMrouterTable.setDescription('Description.')
msanSwitchIGMPVlanStaticMrouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanSwitchIGMPVlanStaticMrouterEntry.setStatus('deprecated')
if mibBuilder.loadTexts: msanSwitchIGMPVlanStaticMrouterEntry.setDescription('Description.')
msanSwitchIGMPVlanStaticMrouterEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanSwitchIGMPVlanStaticMrouterEnableState.setStatus('deprecated')
if mibBuilder.loadTexts: msanSwitchIGMPVlanStaticMrouterEnableState.setDescription('Object used to create a new row or modify or destroy an existing row in manner described in the definition of the RowStatus textual. Supported states are Active(1), CreateAndGo(4) and Destroy(6). Row is created with CreateAndGo(4). This enables IGMP Mrouter on a per-interface per-vlan basis and the row goes to Active(1). The row is removed with Destroy(6) and IGMP Mrouter on this interface/VLAN pair is disabled. Values NotInService(2), NotReady(3) and CreateAndWait(5) are not supported.')
msanSwitchIGMPSnoopingVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 6), )
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanTable.setReference('agentSwitchIGMPSnoopingVlanTable - 1.3.6.1.4.1.6132.1.1.1.2.8.8.1')
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanTable.setStatus('current')
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanTable.setDescription('A table of the IGMP Snooping Vlan configuration entries.')
msanSwitchIGMPSnoopingVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 6, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanEntry.setStatus('current')
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanEntry.setDescription('Represents entry for a IGMP Snooping Vlan.')
msanSwitchIGMPSnoopingVlanAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanAdminMode.setStatus('deprecated')
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanAdminMode.setDescription('This enables or disables IGMP Snooping on a selected Vlan interface.')
msanSwitchIGMPSnoopingVlanGroupMembershipInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanGroupMembershipInterval.setStatus('deprecated')
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanGroupMembershipInterval.setDescription('The amount of time in seconds that a switch will wait for a report from a particular group on the selected vlan before deleting the interface participating in the vlan from the entry. This value must be greater than agentSwitchIGMPSnoopingIntfMaxResponseTime.')
msanSwitchIGMPSnoopingVlanMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3599)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanMaxResponseTime.setStatus('deprecated')
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanMaxResponseTime.setDescription('The amount of time in seconds a switch will wait after sending a query on the selected vlan because it did not receive a report for a particular group in the interface participating in the vlan. This value must be less than agentSwitchIGMPSnoopingIntfGroupMembershipInterval.')
msanSwitchIGMPSnoopingVlanFastLeaveAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanFastLeaveAdminMode.setStatus('deprecated')
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanFastLeaveAdminMode.setDescription('This enables or disables IGMP Snooping on the selected vlan.')
msanSwitchIGMPSnoopingVlanMRPExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanMRPExpirationTime.setStatus('deprecated')
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanMRPExpirationTime.setDescription('The amount of time in seconds that a switch will wait for a query to be received on the selected interface participating in the vlan before the interface is removed from the list of interfaces with multicast routers attached. This parameter is configurable only for exisiting Vlans.')
msanSwitchIGMPSnoopingVlanAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disableAndDiscard", 0), ("disableAndBroadcast", 1), ("enable", 2), ("enableAndUnknownGroupFlood", 3))).clone('disableAndDiscard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanAdminState.setStatus('current')
if mibBuilder.loadTexts: msanSwitchIGMPSnoopingVlanAdminState.setDescription('IGMP Snooping state on a selected Vlan interface. This parameter is ignored if global msanIgmpSnoopingAdminState value is disableAndDiscard(0) or disableAndBroadcast(1).')
msanSwitchIGMPProxyVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 7), )
if mibBuilder.loadTexts: msanSwitchIGMPProxyVlanTable.setStatus('current')
if mibBuilder.loadTexts: msanSwitchIGMPProxyVlanTable.setDescription('A table of the IGMP Proxy Vlan configuration entries.')
msanSwitchIGMPProxyVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 7, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "ISKRATEL-MSAN-MIB", "msanSwitchIGMPProxyVlanIpAddr"))
if mibBuilder.loadTexts: msanSwitchIGMPProxyVlanEntry.setStatus('current')
if mibBuilder.loadTexts: msanSwitchIGMPProxyVlanEntry.setDescription(' ')
msanSwitchIGMPProxyVlanIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: msanSwitchIGMPProxyVlanIpAddr.setStatus('current')
if mibBuilder.loadTexts: msanSwitchIGMPProxyVlanIpAddr.setDescription('IGMP Proxy IP address. If set to 0.0.0.0, default IP address is used (IP address of MN interface -> msanNetworkIPAddress).')
msanSwitchIGMPProxyVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanSwitchIGMPProxyVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanSwitchIGMPProxyVlanRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanIgmpStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8))
msanIgmpStatGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1))
msanIgmpStatRxV1 = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpStatRxV1.setStatus('current')
if mibBuilder.loadTexts: msanIgmpStatRxV1.setDescription('Number of received IGMP v1 packets.')
msanIgmpStatRxV2Join = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpStatRxV2Join.setStatus('current')
if mibBuilder.loadTexts: msanIgmpStatRxV2Join.setDescription('Number of received IGMP v2 join packets.')
msanIgmpStatRxV2Leave = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpStatRxV2Leave.setStatus('current')
if mibBuilder.loadTexts: msanIgmpStatRxV2Leave.setDescription('Number of received IGMP v2 leave packets.')
msanIgmpStatRxV3Report = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpStatRxV3Report.setStatus('current')
if mibBuilder.loadTexts: msanIgmpStatRxV3Report.setDescription('Number of received IGMP v3 report packets.')
msanIgmpStatRxQuery = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpStatRxQuery.setStatus('current')
if mibBuilder.loadTexts: msanIgmpStatRxQuery.setDescription('Number of received IGMP query packets.')
msanIgmpStatRxError = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpStatRxError.setStatus('current')
if mibBuilder.loadTexts: msanIgmpStatRxError.setDescription('Number of received corrupted or unknown IGMP packets.')
msanIgmpStatRxBlockByIgmpFilter = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpStatRxBlockByIgmpFilter.setStatus('current')
if mibBuilder.loadTexts: msanIgmpStatRxBlockByIgmpFilter.setDescription('Number of received IGMP packets blocked by IGMP filter.')
msanIgmpStatRxBlockByMcastAcl = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpStatRxBlockByMcastAcl.setStatus('current')
if mibBuilder.loadTexts: msanIgmpStatRxBlockByMcastAcl.setDescription('Number of received IGMP packets blocked by Multicast ACL.')
msanIgmpStatRxBlockByMcastCac = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpStatRxBlockByMcastCac.setStatus('current')
if mibBuilder.loadTexts: msanIgmpStatRxBlockByMcastCac.setDescription('Number of received IGMP packets blocked by Multicast CAC.')
msanIgmpStatRxBlockByIgmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpStatRxBlockByIgmpVersion.setStatus('current')
if mibBuilder.loadTexts: msanIgmpStatRxBlockByIgmpVersion.setDescription('Number of received IGMP packets blocked by IGMP Version Control.')
msanIgmpPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2), )
if mibBuilder.loadTexts: msanIgmpPortStatTable.setStatus('current')
if mibBuilder.loadTexts: msanIgmpPortStatTable.setDescription('Description.')
msanIgmpPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanIgmpPortStatEntry.setStatus('current')
if mibBuilder.loadTexts: msanIgmpPortStatEntry.setDescription('Description.')
msanIgmpPortStatRxV1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatRxV1.setStatus('current')
if mibBuilder.loadTexts: msanIgmpPortStatRxV1.setDescription('Number of received IGMP v1 packets.')
msanIgmpPortStatTxV1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatTxV1.setStatus('current')
if mibBuilder.loadTexts: msanIgmpPortStatTxV1.setDescription('Number of transmitted IGMP v1 packets.')
msanIgmpPortStatRxV2Join = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatRxV2Join.setStatus('current')
if mibBuilder.loadTexts: msanIgmpPortStatRxV2Join.setDescription('Number of received IGMP v2 join packets.')
msanIgmpPortStatTxV2Join = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatTxV2Join.setStatus('current')
if mibBuilder.loadTexts: msanIgmpPortStatTxV2Join.setDescription('Number of transmitted IGMP v2 join packets.')
msanIgmpPortStatRxV2Leave = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatRxV2Leave.setStatus('current')
if mibBuilder.loadTexts: msanIgmpPortStatRxV2Leave.setDescription('Number of received IGMP v2 leave packets.')
msanIgmpPortStatTxV2Leave = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatTxV2Leave.setStatus('current')
if mibBuilder.loadTexts: msanIgmpPortStatTxV2Leave.setDescription('Number of transmitted IGMP v2 leave packets.')
msanIgmpPortStatRxV3Report = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatRxV3Report.setStatus('current')
if mibBuilder.loadTexts: msanIgmpPortStatRxV3Report.setDescription('Number of received IGMP v3 report packets.')
msanIgmpPortStatTxV3Report = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatTxV3Report.setStatus('current')
if mibBuilder.loadTexts: msanIgmpPortStatTxV3Report.setDescription('Number of transmitted IGMP v3 report packets.')
msanIgmpPortStatRxQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatRxQuery.setStatus('current')
if mibBuilder.loadTexts: msanIgmpPortStatRxQuery.setDescription('Number of received IGMP query packets.')
msanIgmpPortStatRxError = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatRxError.setStatus('current')
if mibBuilder.loadTexts: msanIgmpPortStatRxError.setDescription('Number of received corrupted or unknown IGMP packets.')
msanIgmpPortStatRxBlockByIgmpFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatRxBlockByIgmpFilter.setStatus('current')
if mibBuilder.loadTexts: msanIgmpPortStatRxBlockByIgmpFilter.setDescription('Number of received IGMP packets blocked by IGMP filter.')
msanIgmpPortStatRxBlockByMcastAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatRxBlockByMcastAcl.setStatus('current')
if mibBuilder.loadTexts: msanIgmpPortStatRxBlockByMcastAcl.setDescription('Number of received IGMP packets blocked by Multicast ACL.')
msanIgmpPortStatRxBlockByMcastCac = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatRxBlockByMcastCac.setStatus('current')
if mibBuilder.loadTexts: msanIgmpPortStatRxBlockByMcastCac.setDescription('Number of received IGMP packets blocked by Multicast CAC.')
msanIgmpPortStatTxQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatTxQuery.setStatus('current')
if mibBuilder.loadTexts: msanIgmpPortStatTxQuery.setDescription('Number of transmitted IGMP query packets.')
msanIgmpPortStatRxBlockByIgmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 8, 8, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIgmpPortStatRxBlockByIgmpVersion.setStatus('current')
if mibBuilder.loadTexts: msanIgmpPortStatRxBlockByIgmpVersion.setDescription('Number of received IGMP packets blocked by IGMP Version.')
msanPort = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 10))
msanPortGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 10, 1))
msanPortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 10, 2), )
if mibBuilder.loadTexts: msanPortTable.setStatus('current')
if mibBuilder.loadTexts: msanPortTable.setDescription('Description.')
msanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 10, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanPortEntry.setStatus('current')
if mibBuilder.loadTexts: msanPortEntry.setDescription('Description.')
msanPortMNFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortMNFlag.setStatus('current')
if mibBuilder.loadTexts: msanPortMNFlag.setDescription('This object determines whether to allow or not allow management access to a specific link. The factory default is enabled. ')
msanPortMasterSlave = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("master", 2), ("slave", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortMasterSlave.setStatus('current')
if mibBuilder.loadTexts: msanPortMasterSlave.setDescription('This object determines whether Gb port should be master or slave. Set to none when auto-negotiation and for non-Gb ports.')
msanPortNegCapAdvertisedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 10, 2, 1, 7), Bits().clone(namedValues=NamedValues(("bOther", 0), ("b10baseT", 1), ("b10baseTFD", 2), ("b100baseT4", 3), ("b100baseTX", 4), ("b100baseTXFD", 5), ("b100baseT2", 6), ("b100baseT2FD", 7), ("bFdxPause", 8), ("bFdxAPause", 9), ("bFdxSPause", 10), ("bFdxBPause", 11), ("b1000baseX", 12), ("b1000baseXFD", 13), ("b1000baseT", 14), ("b1000baseTFD", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortNegCapAdvertisedBits.setReference('[IEEE 802.3 Std], 30.6.1.1.6, aAutoNegAdvertisedTechnologyAbility; ifMauAutoNegCapAdvertisedBits (OID 1.3.6.1.2.1.26.5.1.1.11)')
if mibBuilder.loadTexts: msanPortNegCapAdvertisedBits.setStatus('current')
if mibBuilder.loadTexts: msanPortNegCapAdvertisedBits.setDescription('A value that uniquely identifies the set of capabilities advertised by the local auto-negotiation entity. Note that the local auto-negotiation entity may advertise some capabilities beyond the scope of this MIB. This is indicated by returning the bit value bOther in addition to any bit values for capabilities that are listed above. Only b1000baseXFD(13) and b1000baseTFD(15) are currently supported.')
msanPortSpeedDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 11, 15, 16, 18, 26, 30, 31))).clone(namedValues=NamedValues(("speed10MbpsHD", 10), ("speed10MbpsFD", 11), ("speed100MbpsHD", 15), ("speed100MbpsFD", 16), ("speed100MbpsFDFiber", 18), ("speed1000MbpsFDFiber", 26), ("speed1000MbpsFD", 30), ("speed10GbpsFDFiber", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortSpeedDuplex.setStatus('current')
if mibBuilder.loadTexts: msanPortSpeedDuplex.setDescription('Speed and duplex mode of the interface.')
msanPortStpP2PAutoState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 10, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortStpP2PAutoState.setStatus('current')
if mibBuilder.loadTexts: msanPortStpP2PAutoState.setDescription('The field extends ISKRATEL-MSAN-BASICCONF-MIB.agentStpCstPortOperPointToPoint by the <auto> value.')
msanPortUsageType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 10, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uplink", 1), ("downlink", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortUsageType.setStatus('current')
if mibBuilder.loadTexts: msanPortUsageType.setDescription('This object specifies the type of an interface whether it is an uplink or downlink. ')
msanPppoeIA = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11))
msanPppoeIAGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 1))
msanPppoeIAStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppoeIAStatus.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIAStatus.setDescription('Specifies if the PPPOE Intermadiate Agent Service is to be Enabled or Disabled.')
msanPppoeIAVsaReplyMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("keep", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppoeIAVsaReplyMode.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIAVsaReplyMode.setDescription('Specifies PPPOE Intermadiate Agent keep/remove option 82 in replies.')
msanPppoeIACircuitIdStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppoeIACircuitIdStatus.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIACircuitIdStatus.setDescription('Specifies the disable/enable inserting Circuit ID suboption.')
msanPppoeIARemoteIdStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppoeIARemoteIdStatus.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIARemoteIdStatus.setDescription('Specifies the disable/enable inserting Remote ID suboption.')
msanPppoeIAPortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 2), )
if mibBuilder.loadTexts: msanPppoeIAPortTable.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIAPortTable.setDescription('Description.')
msanPppoeIAPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanPppoeIAPortEntry.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIAPortEntry.setDescription('Description.')
msanPppoeIAPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enableClient", 3), ("enableServer", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppoeIAPortStatus.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIAPortStatus.setDescription('State of PPPoE Intermadiate Agent on the port')
msanPppoeIAPortRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppoeIAPortRemoteId.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIAPortRemoteId.setDescription('Remote Id for the port.')
msanPppoeIAPortCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2))).clone('untrusted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppoeIAPortCircuitType.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIAPortCircuitType.setDescription('PPPoE IA Circuit type per port.')
msanPppoeIaStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3))
msanPppoeIaStatPADI = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaStatPADI.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIaStatPADI.setDescription('Number of PADI packets.')
msanPppoeIaStatPADR = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaStatPADR.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIaStatPADR.setDescription('Number of PADR packets.')
msanPppoeIaStatPADO = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaStatPADO.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIaStatPADO.setDescription('Number of PADO packets.')
msanPppoeIaStatPADS = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaStatPADS.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIaStatPADS.setDescription('Number of PADS packets.')
msanPppoeIaStatPADT = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaStatPADT.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIaStatPADT.setDescription('Number of PADT packets.')
msanPppoeIaStatUnsutableFrames = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaStatUnsutableFrames.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIaStatUnsutableFrames.setDescription('Number of packets with unsutable frame.')
msanPppoeIaStatUnknownFrames = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaStatUnknownFrames.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIaStatUnknownFrames.setDescription('Number of packets with unknown frame.')
msanPppoeIaStatInvalidFrames = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaStatInvalidFrames.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIaStatInvalidFrames.setDescription('Number of packets with invalid frame.')
msanPppoeIaPortStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 9), )
if mibBuilder.loadTexts: msanPppoeIaPortStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIaPortStatisticsTable.setDescription('Description.')
msanPppoeIaPortStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanPppoeIaPortStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIaPortStatisticsEntry.setDescription('Description.')
msanPppoeIaPortStatPADI = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 9, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaPortStatPADI.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIaPortStatPADI.setDescription('Number of PADI packets on the port. ')
msanPppoeIaPortStatPADR = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaPortStatPADR.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIaPortStatPADR.setDescription('Number of PADR packets on the port. ')
msanPppoeIaPortStatPADO = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaPortStatPADO.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIaPortStatPADO.setDescription('Number of PADO packets on the port. ')
msanPppoeIaPortStatPADS = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaPortStatPADS.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIaPortStatPADS.setDescription('Number of PADS packets on the port. ')
msanPppoeIaPortStatPADT = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaPortStatPADT.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIaPortStatPADT.setDescription('Number of PADT packets on the port. ')
msanPppoeIaPortStatUnsutableFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaPortStatUnsutableFrames.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIaPortStatUnsutableFrames.setDescription('Number of packets with unsutable frame on the port. ')
msanPppoeIaPortStatUnknownFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaPortStatUnknownFrames.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIaPortStatUnknownFrames.setDescription('Number of packets with unknown frame on the port. ')
msanPppoeIaPortStatInvalidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 3, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanPppoeIaPortStatInvalidFrames.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIaPortStatInvalidFrames.setDescription('Number of packets with invalid frame on the port. ')
msanPppoeIaVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 4), )
if mibBuilder.loadTexts: msanPppoeIaVlanTable.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIaVlanTable.setDescription('Description.')
msanPppoeIaVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 4, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanPppoeIaVlanEntry.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIaVlanEntry.setDescription('Description.')
msanPppoeIaVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppoeIaVlanStatus.setStatus('current')
if mibBuilder.loadTexts: msanPppoeIaVlanStatus.setDescription('State of PPPoE Intermadiate Agent per VLAN.')
msanQoS = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12))
msanQosGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 1))
msanIpAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2), )
if mibBuilder.loadTexts: msanIpAclRuleTable.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleTable.setDescription('This table extends aclTable/aclRuleTable.')
msanIpAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanIpAclIndex"), (0, "ISKRATEL-MSAN-MIB", "msanIpAclRuleIndex"))
if mibBuilder.loadTexts: msanIpAclRuleEntry.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleEntry.setDescription('This table extends aclTable/aclRuleTable.')
msanIpAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 199)))
if mibBuilder.loadTexts: msanIpAclIndex.setStatus('current')
if mibBuilder.loadTexts: msanIpAclIndex.setDescription('This is aclIndex in aclTable')
msanIpAclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)))
if mibBuilder.loadTexts: msanIpAclRuleIndex.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleIndex.setDescription('The index of the IP ACL rule (aclRuleIndex in aclRuleTable).')
msanIpAclRuleAssignVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleAssignVlanId.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleAssignVlanId.setDescription('Assign VLAN Id.')
msanIpAclRuleAssignCoSPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleAssignCoSPriority.setStatus('deprecated')
if mibBuilder.loadTexts: msanIpAclRuleAssignCoSPriority.setDescription('Assign CoS priority')
msanIpAclRuleEgressIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleEgressIntf.setStatus('deprecated')
if mibBuilder.loadTexts: msanIpAclRuleEgressIntf.setDescription('Egress interface ID (ifIndex/ifTable).')
msanIpAclRuleAssignVlanId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleAssignVlanId2.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleAssignVlanId2.setDescription('Assign Secondary VLAN ID -> add (if not exists) or change.')
msanIpAclRuleRemoveVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleRemoveVlanId.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleRemoveVlanId.setDescription('Remove VLAN Id (outer).')
msanIpAclRuleIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("echoReply", 0), ("destinationUnreachable", 3), ("sourceQuench", 4), ("redirect", 5), ("echoRequest", 8), ("routerAdvertisement", 9), ("routerSolicitation", 10), ("timeExceeded", 11), ("parameterProblem", 12), ("timestampRequest", 13), ("timestampReply", 14), ("informationRequest", 15), ("informationReply", 16), ("addressMaskRequest", 17), ("addressMaskReply", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleIcmpType.setStatus('deprecated')
if mibBuilder.loadTexts: msanIpAclRuleIcmpType.setDescription('ICMP message type used in the MAC ACL Classification. This parameter is used if aclRuleProtocol is set to icmp(1).')
msanIpAclRuleDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleDestMacAddr.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleDestMacAddr.setDescription('The Destination MAC address used in the Advanced IP ACL Classification. Advanced IP ACL: msanIpAclIndex value in range 200 ... 299')
msanIpAclRuleDestMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleDestMacMask.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleDestMacMask.setDescription('The Destination MAC address mask used in the Advanced IP Classification. This mask value identifies the portion of the msanIpAclRuleDestMacAddr that is compared against a packet. A non-contiguous mask value is permitted. Advanced IP ACL: msanIpAclIndex value in range 200 ... 299')
msanIpAclRuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 11), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleSrcMacAddr.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleSrcMacAddr.setDescription('The Source MAC address used in the Advanced IP ACL Classification. Advanced IP ACL: msanIpAclIndex value in range 200 ... 299')
msanIpAclRuleSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 12), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleSrcMacMask.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleSrcMacMask.setDescription('The Source MAC address mask used in the Advanced IP Classification. This mask value identifies the portion of the msanIpAclRuleSrcMacAddr that is compared against a packet. A non-contiguous mask value is permitted. Advanced IP ACL: msanIpAclIndex value in range 200 ... 299')
msanIpAclRuleCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleCos.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleCos.setDescription('The Class of Service (COS) used in the Advanced IP Classification. This is the three-bit user priority field in the 802.1Q tag header of a tagged Ethernet frame. For frames containing a double VLAN tag, this field is located in the first/outer tag. Advanced IP ACL: msanIpAclIndex value in range 200 ... 299 ')
msanIpAclRuleCos2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleCos2.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleCos2.setDescription('The Secondary Class of Service (COS) used in the Advanced IP Classification. This is the three-bit user priority field in the second 802.1Q tag header of a tagged Ethernet frame. Advanced IP ACL: msanIpAclIndex value in range 200 ... 299 ')
msanIpAclRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleVlanId.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleVlanId.setDescription('The VLAN ID value used in the Advanced IP Classification. The VLAN ID field is defined as the 12-bit VLAN identifier in the 802.1Q tag header of a tagged Ethernet frame. This is contained in the first/outer tag of a double VLAN tagged frame. Advanced IP ACL: msanIpAclIndex value in range 200 ... 299 ')
msanIpAclRuleVlanId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleVlanId2.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleVlanId2.setDescription('The Secondary VLAN ID value used in the Advanced IP Classification. The VLAN ID field is defined as the 12-bit VLAN identifier in the second 802.1Q tag header of a tagged Ethernet frame. Advanced IP ACL: msanIpAclIndex value in range 200 ... 299 ')
msanIpAclRuleCVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleCVlanId.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleCVlanId.setDescription('The C-customer VLAN ID value used in the Advanced IP Classification. The VLAN ID field is defined as the 12-bit VLAN identifier in the second 802.1Q tag header of a tagged Ethernet frame. Advanced IP ACL: msanIpAclIndex value in range 200 ... 299')
msanIpAclRuleSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleSVlanId.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleSVlanId.setDescription('The S-service VLAN ID value used in the Advanced IP Classification. The VLAN ID field is defined as the 12-bit VLAN identifier in the 802.1Q tag header of a tagged Ethernet frame. This is contained in the first/outer tag of a double VLAN tagged frame. Advanced IP ACL: msanIpAclIndex value in range 200 ... 299')
msanIpAclRuleAssignCVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleAssignCVlanId.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleAssignCVlanId.setDescription('Assign C VLAN ID -> add (if not exists) or change. Used in the Advanced IP Classification. Advanced IP ACL: msanIpAclIndex value in range 200 ... 299')
msanIpAclRuleAssignSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleAssignSVlanId.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleAssignSVlanId.setDescription('Assign S VLAN ID -> add (if not exists) or change. Used in the Advanced IP Classification. Advanced IP ACL: msanIpAclIndex value in range 200 ... 299')
msanIpAclRuleRemoveSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleRemoveSVlanId.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleRemoveSVlanId.setDescription('Remove S-service VLAN ID. Used in the Advanced IP Classification. Advanced IP ACL: msanIpAclIndex value in range 200 ... 299')
msanIpAclRuleVlanIdRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleVlanIdRangeStart.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleVlanIdRangeStart.setDescription('The VLAN ID range start value used in the Advanced IP Classification. Setting this value greater than the current msanIpAclRuleVlanIdRangeEnd changes the VLAN ID range end to the same value as the range start. The VLAN ID field is defined as the 12-bit VLAN identifier in the 802.1Q tag header of a tagged Ethernet frame. This is contained in the first/outer tag of a double VLAN tagged frame. Advanced IP ACL: msanIpAclIndex value in range 200 ... 299')
msanIpAclRuleVlanIdRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleVlanIdRangeEnd.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleVlanIdRangeEnd.setDescription('The VLAN ID range end value used in the Advanced IP Classification. Setting this value less than the current msanIpAclRuleVlanIdRangeStart changes the VLAN ID range start to the same value as the range end. The VLAN ID field is defined as the 12-bit VLAN identifier in the 802.1Q tag header of a tagged Ethernet frame. This is contained in the first/outer tag of a double VLAN tagged frame. Advanced IP ACL: msanIpAclIndex value in range 200 ... 299')
msanIpAclRuleVlanId2RangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleVlanId2RangeStart.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleVlanId2RangeStart.setDescription('The Secondary VLAN ID range start value used in the Advanced IP Classification. Setting this value greater than the current msanIpAclRuleVlanId2RangeEnd changes the VLAN ID range end to the same value as the range start. The VLAN ID field is defined as the 12-bit VLAN identifier in the second 802.1Q tag header of a tagged Ethernet frame. Advanced IP ACL: msanIpAclIndex value in range 200 ... 299')
msanIpAclRuleVlanId2RangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleVlanId2RangeEnd.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleVlanId2RangeEnd.setDescription('The Secondary VLAN ID range end value used in the Advanced IP Classification. Setting this value less than the current msanIpAclRuleVlanId2RangeStart changes the VLAN ID range start to the same value as the range end. The VLAN ID field is defined as the 12-bit VLAN identifier in the second 802.1Q tag header of a tagged Ethernet frame. Advanced IP ACL: msanIpAclIndex value in range 200 ... 299')
msanIpAclRuleSVlanIdRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleSVlanIdRangeStart.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleSVlanIdRangeStart.setDescription('The S-service VLAN ID range start value used in the Advanced IP Classification. Setting this value greater than the current msanIpAclRuleSVlanIdRangeEnd changes the VLAN ID range end to the same value as the range start. Advanced IP ACL: msanIpAclIndex value in range 200 ... 299')
msanIpAclRuleSVlanIdRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleSVlanIdRangeEnd.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleSVlanIdRangeEnd.setDescription('The S-service VLAN ID range end value used in the Advanced IP Classification. Setting this value less than the current msanIpAclRuleSVlanIdRangeStart changes the VLAN ID range start to the same value as the range end. Advanced IP ACL: msanIpAclIndex value in range 200 ... 299')
msanIpAclRuleCVlanIdRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleCVlanIdRangeStart.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleCVlanIdRangeStart.setDescription('The C-customer VLAN ID range start value used in the Advanced IP Classification. Setting this value greater than the current msanIpAclRuleCVlanIdRangeEnd changes the VLAN ID range end to the same value as the range start. Advanced IP ACL: msanIpAclIndex value in range 200 ... 299')
msanIpAclRuleCVlanIdRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleCVlanIdRangeEnd.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleCVlanIdRangeEnd.setDescription('The C-customer VLAN ID range end value used in the Advanced IP Classification. Setting this value less than the current msanIpAclRuleCVlanIdRangeStart changes the VLAN ID range start to the same value as the range end. Advanced IP ACL: msanIpAclIndex value in range 200 ... 299')
msanIpAclRuleSrcIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 31), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleSrcIpv6Address.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleSrcIpv6Address.setDescription('The Source IPv6 Address used in the ACL Classification. ')
msanIpAclRuleSrcIpv6AddressMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleSrcIpv6AddressMaskLen.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleSrcIpv6AddressMaskLen.setDescription('The length of the prefix (in bits) associated with the IPv6 source address of this entry (msanIpAclRuleSrcIpv6Address). Value 0 indicates that parameter has not been defined.')
msanIpAclRuleDestIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 33), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleDestIpv6Address.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleDestIpv6Address.setDescription('The Destination IPv6 Address used in the ACL Classification. ')
msanIpAclRuleDestIpv6AddressMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclRuleDestIpv6AddressMaskLen.setStatus('current')
if mibBuilder.loadTexts: msanIpAclRuleDestIpv6AddressMaskLen.setDescription('The length of the prefix (in bits) associated with the IPv6 destination address of this entry (msanIpAclRuleDestIpv6Address). Value 0 indicates that parameter has not been defined.')
msanMacAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3), )
if mibBuilder.loadTexts: msanMacAclRuleTable.setStatus('current')
if mibBuilder.loadTexts: msanMacAclRuleTable.setDescription('This table extends aclMacTable/aclMacRuleTable.')
msanMacAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMacAclIndex"), (0, "ISKRATEL-MSAN-MIB", "msanMacAclRuleIndex"))
if mibBuilder.loadTexts: msanMacAclRuleEntry.setStatus('current')
if mibBuilder.loadTexts: msanMacAclRuleEntry.setDescription('This table extends aclMacTable/aclMacRuleTable.')
msanMacAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: msanMacAclIndex.setStatus('current')
if mibBuilder.loadTexts: msanMacAclIndex.setDescription('This is aclMacIndex in aclMacTable')
msanMacAclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: msanMacAclRuleIndex.setStatus('current')
if mibBuilder.loadTexts: msanMacAclRuleIndex.setDescription('The index of the MAC ACL rule (aclMACRuleIndex in aclMACRuleTable).')
msanMacAclRuleEgressIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleEgressIntf.setStatus('deprecated')
if mibBuilder.loadTexts: msanMacAclRuleEgressIntf.setDescription('Egress Interface ID (ifIndex/ifTable).')
msanMacAclRuleAssignVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleAssignVlanId.setStatus('current')
if mibBuilder.loadTexts: msanMacAclRuleAssignVlanId.setDescription('Assign VLAN Id.')
msanMacAclRuleAssignCoSPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleAssignCoSPriority.setStatus('deprecated')
if mibBuilder.loadTexts: msanMacAclRuleAssignCoSPriority.setDescription('Assign CoS priority')
msanMacAclRuleAssignVlanId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleAssignVlanId2.setStatus('current')
if mibBuilder.loadTexts: msanMacAclRuleAssignVlanId2.setDescription('Assign Secondary VLAN ID -> add (if not exists) or change.')
msanMacAclRuleRemoveVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleRemoveVlanId.setStatus('current')
if mibBuilder.loadTexts: msanMacAclRuleRemoveVlanId.setDescription('Remove outer VLAN Id (outer).')
msanMacAclRuleCVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleCVlanId.setStatus('current')
if mibBuilder.loadTexts: msanMacAclRuleCVlanId.setDescription('C-customer Vlan ID')
msanMacAclRuleSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleSVlanId.setStatus('current')
if mibBuilder.loadTexts: msanMacAclRuleSVlanId.setDescription('S-service Vlan ID')
msanMacAclRuleAssignCVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleAssignCVlanId.setStatus('current')
if mibBuilder.loadTexts: msanMacAclRuleAssignCVlanId.setDescription('Assign C-customer VLAN ID -> add (if not exists) or change.')
msanMacAclRuleAssignSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleAssignSVlanId.setStatus('current')
if mibBuilder.loadTexts: msanMacAclRuleAssignSVlanId.setDescription('Assign S-service VLAN ID -> add (if not exists) or change.')
msanMacAclRuleRemoveSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleRemoveSVlanId.setStatus('current')
if mibBuilder.loadTexts: msanMacAclRuleRemoveSVlanId.setDescription('Remove S-service VLAN ID.')
msanMacAclRuleSVlanIdRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleSVlanIdRangeStart.setStatus('current')
if mibBuilder.loadTexts: msanMacAclRuleSVlanIdRangeStart.setDescription('The S-service VLAN ID range start value. Setting this value greater than the current msanMacAclRuleSVlanIdRangeEnd changes the VLAN ID range end to the same value as the range start. ')
msanMacAclRuleSVlanIdRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleSVlanIdRangeEnd.setStatus('current')
if mibBuilder.loadTexts: msanMacAclRuleSVlanIdRangeEnd.setDescription('The S-service VLAN ID range end value. Setting this value less than the current msanMacAclRuleSVlanIdRangeStart changes the VLAN ID range start to the same value as the range end.')
msanMacAclRuleCVlanIdRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleCVlanIdRangeStart.setStatus('current')
if mibBuilder.loadTexts: msanMacAclRuleCVlanIdRangeStart.setDescription('The C-customer VLAN ID range start value. Setting this value greater than the current msanMacAclRuleCVlanIdRangeEnd changes the VLAN ID range end to the same value as the range start. ')
msanMacAclRuleCVlanIdRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclRuleCVlanIdRangeEnd.setStatus('current')
if mibBuilder.loadTexts: msanMacAclRuleCVlanIdRangeEnd.setDescription('The C-customer VLAN ID range end value. Setting this value less than the current msanMacAclRuleCVlanIdRangeStart changes the VLAN ID range start to the same value as the range end.')
msanCosQueueControlTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 4), )
if mibBuilder.loadTexts: msanCosQueueControlTable.setStatus('current')
if mibBuilder.loadTexts: msanCosQueueControlTable.setDescription('Description.')
msanCosQueueControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanCosQueueControlEntry.setStatus('current')
if mibBuilder.loadTexts: msanCosQueueControlEntry.setDescription('Description.')
msanCosQueueControlIntfBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 4, 1, 1), Integer32()).setUnits('kilobyte').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCosQueueControlIntfBurstSize.setStatus('current')
if mibBuilder.loadTexts: msanCosQueueControlIntfBurstSize.setDescription('Specifies the maximum number of uncommitted bytes that the switch will try to send into the network. It is the number of bytes that are sent at a rate, higher than committed and that the next device in the network must be able to buffer without notifying a congestion. Default value is 0. Valid values are 16, 20, 28, 40, 76, 140, 268 and 524 kilobytes. Configuring shaping rate without burst size will take the maximum possible value of burst, which is 524 KB. ')
msanCosQueueIntfShapingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCosQueueIntfShapingRate.setStatus('current')
if mibBuilder.loadTexts: msanCosQueueIntfShapingRate.setDescription('Specifies the maximum bandwidth allowed, typically used to shape the outbound transmission rate. This value is controlled independently of any per-queue maximum bandwidth configuration. It is effectively a second-level shaping mechanism. Default value is 0. Valid Range is 0 to 10000000 kbps. The value 0 means maximum is unlimited.')
msanCosQueueTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 5), )
if mibBuilder.loadTexts: msanCosQueueTable.setReference('agentCosQueueTable - 1.3.6.1.4.1.6132.1.1.3.3.2.4')
if mibBuilder.loadTexts: msanCosQueueTable.setStatus('current')
if mibBuilder.loadTexts: msanCosQueueTable.setDescription('Table of class-of-service queue configuration parameters for the specified interface. This is extension of the table agentCosQueueTable. ')
msanCosQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanCosQueueIndex"))
if mibBuilder.loadTexts: msanCosQueueEntry.setReference('agentCosQueueTable - 1.3.6.1.4.1.6132.1.1.3.3.2.4')
if mibBuilder.loadTexts: msanCosQueueEntry.setStatus('current')
if mibBuilder.loadTexts: msanCosQueueEntry.setDescription("Each entry describes a single class-of-service (COS) queue for a given Interface Index. The number of configurable COS queues for an interface vary based on device capabilities. All objects defined for this table entry contain a default value corresponding to a typical, non-preferential treatment of packets traversing the interface's COS queues.")
msanCosQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)))
if mibBuilder.loadTexts: msanCosQueueIndex.setStatus('current')
if mibBuilder.loadTexts: msanCosQueueIndex.setDescription('The COS queue index, numbered 0 to (n-1), where n is the total number of configurable interface queues for the device as indicated by agentCosQueueNumQueuesPerPort. In general, a higher numbered queue index is used to support higher priority traffic, although actual operation may be altered via configuration through this table.')
msanCosQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCosQueueWeight.setStatus('current')
if mibBuilder.loadTexts: msanCosQueueWeight.setDescription('Weight of the queue being used in egress scheduling algorithm.')
msanCosQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 156)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCosQueueLength.setStatus('current')
if mibBuilder.loadTexts: msanCosQueueLength.setDescription('Length of the queue in kB. ')
msanCosMapIntfTrustTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 6), )
if mibBuilder.loadTexts: msanCosMapIntfTrustTable.setStatus('current')
if mibBuilder.loadTexts: msanCosMapIntfTrustTable.setDescription('Description.')
msanCosMapIntfTrustEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanCosMapIntfTrustEntry.setStatus('current')
if mibBuilder.loadTexts: msanCosMapIntfTrustEntry.setDescription('Description.')
msanCosMapIntfTrustMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("untrusted", 1), ("trustDot1p", 2), ("trustIpPrecedence", 3), ("trustIpDscp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCosMapIntfTrustMode.setStatus('current')
if mibBuilder.loadTexts: msanCosMapIntfTrustMode.setDescription('This is copy of LVL7 parameter agentCosMapIntfTrustMode, except that index 0 is not supported. The class of service trust mode of an interface. When set to a trusted mode, the appropriate COS mapping table is used as follows: trustDot1p(2) : dot1dTrafficClassTable trustIpPrecedence(3): agentCosMapIpPrecTable trustIpDscp(4): agentCosMapIpDscpTable For an untrusted(1) interface, packets are handled in accordance with the dot1dPortDefaultUserPriority value of the ingress port. ')
msanQosProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7), )
if mibBuilder.loadTexts: msanQosProfileTable.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileTable.setDescription('Description.')
msanQosProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanQosProfileName"))
if mibBuilder.loadTexts: msanQosProfileEntry.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileEntry.setDescription('Description.')
msanQosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanQosProfileName.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileName.setDescription('QoS profile name.')
msanQosProfileMatchInAny = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInAny.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInAny.setDescription('Match every incoming packet frame.')
msanQosProfileMatchInMacDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 3), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInMacDestAddr.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInMacDestAddr.setDescription('Match incoming packet frame with specified destination MAC address. Empty string indicates that parameter has not been defined')
msanQosProfileMatchInMacDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 4), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInMacDestMask.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInMacDestMask.setDescription('This mask value identifies the portion of msanQosProfileMatchInMacDestAddr that is compared with input packet. Empty string indicates that parameter has not been defined')
msanQosProfileMatchInMacSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 5), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInMacSrcAddr.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInMacSrcAddr.setDescription('Match incoming packet frame with specified source MAC address. Empty string indicates that parameter has not been defined')
msanQosProfileMatchInMacSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 6), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInMacSrcMask.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInMacSrcMask.setDescription('This mask value identifies the portion of msanQosProfileMatchInMacSrcAddr that is compared with input packet. Empty string indicates that parameter has not been defined')
msanQosProfileMatchInCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInCos.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInCos.setDescription('Match incoming packet frame with specified CoS value (0-7). A value of -1 indicates that parameter has not been defined')
msanQosProfileMatchInCos2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInCos2.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInCos2.setDescription('Match incoming packet frame with specified secondary (C-TAG) CoS value (0-7). A value of -1 indicates that parameter has not been defined')
msanQosProfileMatchInVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInVlanId.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInVlanId.setDescription('Match incoming packet frame with specified VLAN ID value (1-4094). A value of -1 indicates that parameter has not been defined')
msanQosProfileMatchInVlanId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInVlanId2.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInVlanId2.setDescription('Match incoming packet frame with specified secondary (C-TAG) VLAN ID value (1-4094). A value of -1 indicates that parameter has not been defined')
msanQosProfileMatchInEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInEthertype.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInEthertype.setDescription('Match incoming packet frame with specified EtherType value. A value of -1 indicates that parameter has not been defined.')
msanQosProfileMatchInIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInIpProtocol.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInIpProtocol.setDescription('Match incoming packet frame with specified IP protocol value. A value of -1 indicates that parameter has not been defined. Some of standard protocol values: icmp - 1 igmp - 2 ip - 4 (ip in ip encapsulation) tcp - 6 udp - 17')
msanQosProfileMatchInIpSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 13), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInIpSrcAddr.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInIpSrcAddr.setDescription('Match incoming packet frame with specified source IP address. Empty string indicates that parameter has not been defined.')
msanQosProfileMatchInIpSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 14), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInIpSrcMask.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInIpSrcMask.setDescription('This mask value identifies the portion of msanQosProfileMatchInIpSrcAddr that is compared with input packet. Empty string indicates that parameter has not been defined')
msanQosProfileMatchInIpDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 15), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInIpDestAddr.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInIpDestAddr.setDescription('Match incoming packet frame with specified destination IP address. Empty string indicates that parameter has not been defined.')
msanQosProfileMatchInIpDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 16), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInIpDestMask.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInIpDestMask.setDescription('This mask value identifies the portion of msanQosProfileMatchInIpDestAddr that is compared with input packet. Empty string indicates that parameter has not been defined')
msanQosProfileMatchInIpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInIpDscp.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInIpDscp.setDescription('Match incoming packet frame with specified IP DSCP value. A value of -1 indicates that parameter has not been defined.')
msanQosProfileMatchInIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInIpPrecedence.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInIpPrecedence.setDescription('Match incoming packet frame with specified IP precedence (part of TOS field) value. A value of -1 indicates that parameter has not been defined.')
msanQosProfileMatchInIpTosBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInIpTosBits.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInIpTosBits.setDescription('Match incoming packet frame with specified IP TOS bits value. Empty string indicates that parameter has not been defined.')
msanQosProfileMatchInIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInIpTosMask.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInIpTosMask.setDescription('This mask value identifies the portion of msanQosProfileMatchInIpTosBits that is compared against a packet. Empty string indicates that parameter has not been defined.')
msanQosProfileMatchInL4SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInL4SrcPort.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInL4SrcPort.setDescription('Match incoming packet frame with specified source TCP/UDP port number. A value of -1 indicates that parameter has not been defined.')
msanQosProfileMatchInL4DestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInL4DestPort.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInL4DestPort.setDescription('Match incoming packet frame with specified destination TCP/UDP port number in downstream direction. A value of -1 indicates that parameter has not been defined.')
msanQosProfileMatchOutAny = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutAny.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutAny.setDescription('Match every outgoing packet frame in upstream direction.')
msanQosProfileMatchOutMacDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 24), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutMacDestAddr.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutMacDestAddr.setDescription('Match outgoing packet frame with specified destination MAC address. Empty string indicates that parameter has not been defined')
msanQosProfileMatchOutMacDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 25), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutMacDestMask.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutMacDestMask.setDescription('This mask value identifies the portion of msanQosProfileMatchOutMacDestAddr that is compared with output packet. Empty string indicates that parameter has not been defined')
msanQosProfileMatchOutMacSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 26), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutMacSrcAddr.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutMacSrcAddr.setDescription('Match outgoing packet frame with specified source MAC address. Empty string indicates that parameter has not been defined')
msanQosProfileMatchOutMacSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 27), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutMacSrcMask.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutMacSrcMask.setDescription('This mask value identifies the portion of msanQosProfileMatchOutMacSrcAddr that is compared with output packet. Empty string indicates that parameter has not been defined')
msanQosProfileMatchOutCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutCos.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutCos.setDescription('Match outgoing packet frame with specified CoS value (0-7). A value of -1 indicates that parameter has not been defined')
msanQosProfileMatchOutCos2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutCos2.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutCos2.setDescription('Match outgoing packet frame with specified secondary (C-TAG) CoS value (0-7). A value of -1 indicates that parameter has not been defined')
msanQosProfileMatchOutVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutVlanId.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutVlanId.setDescription('Match outgoing packet frame with specified VLAN ID value (1-4094). A value of -1 indicates that parameter has not been defined')
msanQosProfileMatchOutVlanId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutVlanId2.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutVlanId2.setDescription('Match outgoing packet frame with specified secondary (C-TAG) VLAN ID value (1-4094). A value of -1 indicates that parameter has not been defined')
msanQosProfileMatchOutEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutEthertype.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutEthertype.setDescription('Match outgoing packet frame with specified EtherType value. A value of -1 indicates that parameter has not been defined.')
msanQosProfileMatchOutIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutIpProtocol.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutIpProtocol.setDescription('Match outgoing packet frame with specified IP protocol value in upstream direction. A value of -1 indicates that parameter has not been defined. Some of standard protocol values: icmp - 1 igmp - 2 ip - 4 (ip in ip encapsulation) tcp - 6 udp - 17')
msanQosProfileMatchOutIpSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 34), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutIpSrcAddr.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutIpSrcAddr.setDescription('Match outgoing packet frame with specified source IP address. Empty string indicates that parameter has not been defined.')
msanQosProfileMatchOutIpSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 35), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutIpSrcMask.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutIpSrcMask.setDescription('This mask value identifies the portion of msanQosProfileMatchOutIpSrcAddr that is compared with output packet. Empty string indicates that parameter has not been defined')
msanQosProfileMatchOutIpDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 36), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutIpDestAddr.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutIpDestAddr.setDescription('Match outgoing packet frame with specified destination IP address. Empty string indicates that parameter has not been defined.')
msanQosProfileMatchOutIpDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 37), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutIpDestMask.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutIpDestMask.setDescription('This mask value identifies the portion of msanQosProfileMatchOutIpDestAddr that is compared with output packet. Empty string indicates that parameter has not been defined')
msanQosProfileMatchOutIpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutIpDscp.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutIpDscp.setDescription('Match outgoing packet frame with specified IP DSCP value. A value of -1 indicates that parameter has not been defined.')
msanQosProfileMatchOutIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutIpPrecedence.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutIpPrecedence.setDescription('Match outgoing packet frame with specified IP precedence (part of TOS field) value. A value of -1 indicates that parameter has not been defined.')
msanQosProfileMatchOutIpTosBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 40), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutIpTosBits.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutIpTosBits.setDescription('Match outgoing packet frame with specified IP TOS bits value. Empty string indicates that parameter has not been defined.')
msanQosProfileMatchOutIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 41), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutIpTosMask.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutIpTosMask.setDescription('This mask value identifies the portion of msanQosProfileMatchOutIpTosBits that is compared with output packet. Empty string indicates that parameter has not been defined')
msanQosProfileMatchOutL4SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutL4SrcPort.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutL4SrcPort.setDescription('Match outgoing packet frame with specified source TCP/UDP port number in upstream direction. A value of -1 indicates that parameter has not been defined.')
msanQosProfileMatchOutL4DestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutL4DestPort.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutL4DestPort.setDescription('Match outgoing packet frame with specified destination TCP/UDP port number. A value of -1 indicates that parameter has not been defined.')
msanQosProfileInCdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileInCdr.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileInCdr.setDescription('Incoming committed data rate (E-CDR) in kbps (0 1000000). A value of -1 indicates that parameter has not been defined.')
msanQosProfileInPdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileInPdr.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileInPdr.setDescription('Incoming peak data rate (E-PDR) in kbps (0 1000000). A value of -1 indicates that parameter has not been defined.')
msanQosProfileOutCdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileOutCdr.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileOutCdr.setDescription('Outgoing committed data rate (E-CDR) in kbps (0 1000000). A value of -1 indicates that parameter has not been defined.')
msanQosProfileOutPdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileOutPdr.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileOutPdr.setDescription('Outgoing peak data rate (E-PDR) in kbps (0 1000000). A value of -1 indicates that parameter has not been defined.')
msanQosProfileInTrustMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("untrusted", 1), ("trustCos", 2), ("trustDscp", 3), ("untrustMarkCos", 4), ("untrustMarkDscp", 5))).clone('untrusted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileInTrustMode.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileInTrustMode.setDescription('Trust mode for incoming packets which correspond to this profile. Default value is untrusted(1). Value untrustMarkCos(4) can be set if parameter msanQosProfileInMarkCos value is grater than -1. Value untrustMarkCos(5) can be set if parameter msanQosProfileInMarkDscp value is grater than -1.')
msanQosProfileInMarkCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileInMarkCos.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileInMarkCos.setDescription('Mark incoming packets with specified CoS value (0-7). A value of -1 indicates that parameter has not been defined')
msanQosProfileInMarkDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileInMarkDscp.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileInMarkDscp.setDescription('Mark incoming packets with specified IP DSCP value. A value of -1 indicates that parameter has not been defined.')
msanQosProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanQosProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. For row creation use createAndWait(5). Value active(1) will activate and value destroy(6) will remove this entry. Other values are currently not supported. ')
msanQosProfilePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("high", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfilePriority.setStatus('current')
if mibBuilder.loadTexts: msanQosProfilePriority.setDescription('Priority of QoS profile. On interface can be linked only one QoS profile with high(2) prority (msanQoSIntProfileTable)')
msanQosProfileInCdrBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 53), Integer32()).setUnits('kB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileInCdrBurstSize.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileInCdrBurstSize.setDescription("Incoming committed data rate burst size in kB (0 16384). When parameter is set to 0 (default), it's automatically updated to default burst size in according with current msanQoSProfileInCdr value. ")
msanQosProfileInPdrBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 54), Integer32()).setUnits('kB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileInPdrBurstSize.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileInPdrBurstSize.setDescription("Incoming peak data rate burst size in kB (0 16384). When parameter is set to 0 (default), it's automatically updated to default burst size in according with current msanQoSProfileInPdr value. ")
msanQosProfileOutCdrBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 55), Integer32()).setUnits('kB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileOutCdrBurstSize.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileOutCdrBurstSize.setDescription("Outgoing committed data rate burst size in kB (0 16384). When parameter is set to 0 (default), it's automatically updated to default burst size in according with current msanQoSProfileOutCdr value. ")
msanQosProfileOutPdrBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 56), Integer32().clone(64)).setUnits('kB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileOutPdrBurstSize.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileOutPdrBurstSize.setDescription("Outgoing peak data rate burst size in kB (0 16384). When parameter is set to 0 (default), it's automatically updated to default burst size in according with current msanQoSProfileOutCdr value. ")
msanQosProfileMatchInSrcIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 58), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInSrcIpv6Address.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInSrcIpv6Address.setDescription('Match incoming packet frame with specified source IPv6 address. Empty string indicates that parameter has not been defined.')
msanQosProfileMatchInSrcIpv6AddressMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInSrcIpv6AddressMaskLen.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInSrcIpv6AddressMaskLen.setDescription('The length of the prefix (in bits) associated with the incoming IPv6 source address of this entry (msanQosProfileMatchInSrcIpv6Address). Value 0 indicates that parameter has not been defined.')
msanQosProfileMatchInDestIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 60), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInDestIpv6Address.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInDestIpv6Address.setDescription('Match incoming packet frame with specified destination IPv6 address. Empty string indicates that parameter has not been defined.')
msanQosProfileMatchInDestIpv6AddressMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchInDestIpv6AddressMaskLen.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchInDestIpv6AddressMaskLen.setDescription('The length of the prefix (in bits) associated with the incoming IPv6 destination address of this entry (msanQosProfileMatchInDestIpv6Address). Value 0 indicates that parameter has not been defined.')
msanQosProfileMatchOutSrcIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 63), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutSrcIpv6Address.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutSrcIpv6Address.setDescription('Match outgoing packet frame with specified source IPv6 address. Empty string indicates that parameter has not been defined.')
msanQosProfileMatchOutSrcIpv6AddressMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutSrcIpv6AddressMaskLen.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutSrcIpv6AddressMaskLen.setDescription('The length of the prefix (in bits) associated with the outcoming IPv6 source address of this entry (msanQosProfileMatchOutSrcIpv6Address). Value 0 indicates that parameter has not been defined.')
msanQosProfileMatchOutDestIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 65), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutDestIpv6Address.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutDestIpv6Address.setDescription('Match outcoming packet frame with specified destination IPv6 address. Empty string indicates that parameter has not been defined.')
msanQosProfileMatchOutDestIpv6AddressMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 7, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosProfileMatchOutDestIpv6AddressMaskLen.setStatus('current')
if mibBuilder.loadTexts: msanQosProfileMatchOutDestIpv6AddressMaskLen.setDescription('The length of the prefix (in bits) associated with the outcoming IPv6 destination address of this entry (msanQosProfileMatchOutDestIpv6Address). Value 0 indicates that parameter has not been defined.')
msanQosIntfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 8), )
if mibBuilder.loadTexts: msanQosIntfProfileTable.setStatus('current')
if mibBuilder.loadTexts: msanQosIntfProfileTable.setDescription('This table connects selected QoS profiles (msanQoSProfileName) to specified interfaces (ifIndex).')
msanQosIntfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanQosProfileName"))
if mibBuilder.loadTexts: msanQosIntfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: msanQosIntfProfileEntry.setDescription('Description.')
msanQosIntfProfileAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosIntfProfileAtmVpi.setStatus('current')
if mibBuilder.loadTexts: msanQosIntfProfileAtmVpi.setDescription('ATM Virtual path identifier of the ADSL interface. Value -1 indicates that parameter has not been defined.')
msanQosIntfProfileAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanQosIntfProfileAtmVci.setStatus('current')
if mibBuilder.loadTexts: msanQosIntfProfileAtmVci.setDescription('ATM Virtual channel identifier of the ADSL interface. Value -1 indicates that parameter has not been defined.')
msanQosIntfProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanQosIntfProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanQosIntfProfileRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. For row creation use createAndWait(5). For row activation use active(1). For row deactivation use notInService(2). For row deletion use destroy(6). Other values are currently not supported. On interface can be linked only one QoS profile with high(2) prority (msanQosProfilePriority)')
msanQosStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 9))
msanQosPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 9, 1), )
if mibBuilder.loadTexts: msanQosPortStatTable.setStatus('current')
if mibBuilder.loadTexts: msanQosPortStatTable.setDescription('Description.')
msanQosPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanQosPortStatEntry.setStatus('current')
if mibBuilder.loadTexts: msanQosPortStatEntry.setDescription('Description.')
msanQosPortStatInDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 9, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanQosPortStatInDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: msanQosPortStatInDroppedFrames.setDescription('Number of dropped frames per port in incoming direction.')
msanQosPortStatOutDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 9, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanQosPortStatOutDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: msanQosPortStatOutDroppedFrames.setDescription('Number of dropped frames per port in outgoing direction.')
msanQosPortProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 9, 2), )
if mibBuilder.loadTexts: msanQosPortProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: msanQosPortProfileStatTable.setDescription('Description.')
msanQosPortProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 9, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanQosProfileName"))
if mibBuilder.loadTexts: msanQosPortProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: msanQosPortProfileStatEntry.setDescription('Description.')
msanQosPortProfileStatQueueCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanQosPortProfileStatQueueCurrent.setStatus('current')
if mibBuilder.loadTexts: msanQosPortProfileStatQueueCurrent.setDescription('Current queue occupation per profile per port (in number of packets) .')
msanQosPortProfileStatQueueAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanQosPortProfileStatQueueAverage.setStatus('current')
if mibBuilder.loadTexts: msanQosPortProfileStatQueueAverage.setDescription('Average queue occupation per profile per port (in number of packets) .')
msanQosPortProfileStatQueueMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanQosPortProfileStatQueueMax.setStatus('current')
if mibBuilder.loadTexts: msanQosPortProfileStatQueueMax.setDescription('Maximum queue occupation per profile per port (in number of packets) .')
msanIpAclTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 10), )
if mibBuilder.loadTexts: msanIpAclTable.setStatus('current')
if mibBuilder.loadTexts: msanIpAclTable.setDescription('Description.')
msanIpAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 10, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanIpAclId"))
if mibBuilder.loadTexts: msanIpAclEntry.setStatus('current')
if mibBuilder.loadTexts: msanIpAclEntry.setDescription('Description.')
msanIpAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 199)))
if mibBuilder.loadTexts: msanIpAclId.setStatus('current')
if mibBuilder.loadTexts: msanIpAclId.setDescription('This is aclIndex in aclTable (1.3.6.1.4.1.1332.1.1.5.2.3.2.1)')
msanIpAclProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIpAclProtection.setStatus('current')
if mibBuilder.loadTexts: msanIpAclProtection.setDescription("If protection flag is set to protected (1), other profile values cannot be edited. Protection flag is always protected (1) and it can't be changed if profile is assigned as dynamic: msanAclProfileStatus = dynamic(2)")
msanIpAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIpAclStatus.setStatus('current')
if mibBuilder.loadTexts: msanIpAclStatus.setDescription("Profile status. If status is dynamic, profile values can't be edited.")
msanMacAclTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 11), )
if mibBuilder.loadTexts: msanMacAclTable.setStatus('current')
if mibBuilder.loadTexts: msanMacAclTable.setDescription('Description.')
msanMacAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 11, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMacAclId"))
if mibBuilder.loadTexts: msanMacAclEntry.setStatus('current')
if mibBuilder.loadTexts: msanMacAclEntry.setDescription('Description.')
msanMacAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 199)))
if mibBuilder.loadTexts: msanMacAclId.setStatus('current')
if mibBuilder.loadTexts: msanMacAclId.setDescription('This is aclMacIndex in aclMacTable (1.3.6.1.4.1.1332.1.1.5.2.3.2.6)')
msanMacAclProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacAclProtection.setStatus('current')
if mibBuilder.loadTexts: msanMacAclProtection.setDescription("If protection flag is set to protected (1), other profile values cannot be edited. Protection flag is always protected (1) and it can't be changed if profile is assigned as dynamic: msanMacAclStatus = dynamic(2)")
msanMacAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 12, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanMacAclStatus.setStatus('current')
if mibBuilder.loadTexts: msanMacAclStatus.setDescription("Profile status. If status is dynamic, profile values can't be edited.")
msanForwardingDb = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 13))
msanForwardingDbGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 13, 3))
msanAddressLearningMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 13, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("macOnly", 1), ("noMacOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAddressLearningMode.setStatus('deprecated')
if mibBuilder.loadTexts: msanAddressLearningMode.setDescription('Specifies how source MAC addresses are associated with the interfaces on the switch. If mode is specified as nomaconly, source MAC addresses are learned as pairs of incoming VLAN ID and the source MAC address. If mode is specified as maconly, all source MAC addresses are learned in a specified VLAN, VLAN ID of the VLAN the packet was received from is not remembered. This mode is used for General Purpose Service Based Tagging.')
msanAddressLearningVlanId = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 13, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAddressLearningVlanId.setStatus('deprecated')
if mibBuilder.loadTexts: msanAddressLearningVlanId.setDescription('This is the VLAN ID which is used for learning source MAC addresses in maconly mode. All learned MAC addresses will be marked as received from this VLAN. VLAN with this VLAN ID is created on the switch and all physical intefaces are added to this VLAN. This VLAN ID cannot be used for configuring other VLANs on the switch.')
msanSwitchAddressAgingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 13, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSwitchAddressAgingTimeout.setStatus('current')
if mibBuilder.loadTexts: msanSwitchAddressAgingTimeout.setDescription("The FDB entry's address aging timeout (in seconds).")
msanDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14))
msanDiagnosticsGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 1))
msanDiagnosticsFanSpeedLevel = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsFanSpeedLevel.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsFanSpeedLevel.setDescription('MSAN shelf fan current speed level. Higher level defines higer speed. Level 0 means fan is stopped. Maximum level is defined by parameter msanDiagnosticsMaxFanSpeedLevel')
msanDiagnosticsMaxFanSpeedLevel = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsMaxFanSpeedLevel.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsMaxFanSpeedLevel.setDescription('MSAN shelf fan max speed level.')
msanDiagnosticsTestTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 2), )
if mibBuilder.loadTexts: msanDiagnosticsTestTable.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsTestTable.setDescription('Description.')
msanDiagnosticsTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanDiagnosticsTestCode"))
if mibBuilder.loadTexts: msanDiagnosticsTestEntry.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsTestEntry.setDescription('Description.')
msanDiagnosticsTestCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999999)))
if mibBuilder.loadTexts: msanDiagnosticsTestCode.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsTestCode.setDescription('Unique identification of a test program.')
msanDiagnosticsTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsTestName.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsTestName.setDescription('The name of a test program.')
msanDiagnosticsTestActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("testOn", 1), ("testOff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDiagnosticsTestActivity.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsTestActivity.setDescription('Specifies the Test activity parameter for the diagnostic. ')
msanDiagnosticsTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 999999900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDiagnosticsTestTime.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsTestTime.setDescription("Test time, whose interpretation depends on test running mode: - for cyclical tests, it means the period at which the test is carried out one after another (time unit is milisecond) - for all others, it means time of day in the form 'hhmmss' (e.g. '224950') at which the test begins. ")
msanDiagnosticsTestPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("veryHigh", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDiagnosticsTestPriority.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsTestPriority.setDescription('Test priority parameter for the diagnostic.')
msanDiagnosticsTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("testAtReload", 1), ("testPeriodically", 2), ("testDaily", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsTestType.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsTestType.setDescription(' Type of starting the test. DECIMAL VALUE DESCRIPTION 1 At start-up & Recovery 2 Periodical 3 Daily ')
msanDiagnosticsTestTimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsTestTimeMin.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsTestTimeMin.setDescription('Minimum possible value of parameter msanDiagnosticTestTime.')
msanDiagnosticsTestTimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsTestTimeMax.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsTestTimeMax.setDescription('Maximum possible value of parameter msanDiagnosticTestTime.')
msanDiagnosticsErrorTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3), )
if mibBuilder.loadTexts: msanDiagnosticsErrorTable.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorTable.setDescription('Description.')
msanDiagnosticsErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanDiagnosticsErrorCode"))
if mibBuilder.loadTexts: msanDiagnosticsErrorEntry.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorEntry.setDescription('Description.')
msanDiagnosticsErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999999)))
if mibBuilder.loadTexts: msanDiagnosticsErrorCode.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorCode.setDescription('Unique identification of an error reported during testing an object.')
msanDiagnosticsErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsErrorDescription.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorDescription.setDescription('Description of the error code.')
msanDiagnosticsErrorPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("warning", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDiagnosticsErrorPriority.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorPriority.setDescription('Error priority.')
msanDiagnosticsErrorObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsErrorObjectType.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorObjectType.setDescription('Object type - List of values can be found in alr_def.h')
msanDiagnosticsErrorMeasure = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsErrorMeasure.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorMeasure.setDescription('Measure (what is done when an error occurs, for instance reset the node, ...) - List of values can be found in alr_def.h')
msanDiagnosticsErrorMeasureActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notActive", 0), ("active", 1))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDiagnosticsErrorMeasureActive.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorMeasureActive.setDescription('Activity of measure. With setting this parameter to notActive(0), you can prevent excecution of measure.')
msanDiagnosticsErrorProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsErrorProbableCause.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorProbableCause.setDescription('Probable cause.')
msanDiagnosticsErrorObjectTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsErrorObjectTypeId.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorObjectTypeId.setDescription('Object type ID- List of values can be found in alr_def.h')
msanDiagnosticsErrorMeasureId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsErrorMeasureId.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorMeasureId.setDescription('Measure (what is done when an error occurs, for instance reset the node, ...) - List of values can be found in alr_def.h')
msanDiagnosticsTempTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 4), )
if mibBuilder.loadTexts: msanDiagnosticsTempTable.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsTempTable.setDescription('Description.')
msanDiagnosticsTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 4, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanDiagnosticsTempSensorID"))
if mibBuilder.loadTexts: msanDiagnosticsTempEntry.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsTempEntry.setDescription('Description.')
msanDiagnosticsTempSensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: msanDiagnosticsTempSensorID.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsTempSensorID.setDescription('Temperature sensor ID.')
msanDiagnosticsTempSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsTempSensorName.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsTempSensorName.setDescription('Temperature sensor name.')
msanDiagnosticsTempCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsTempCurrent.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsTempCurrent.setDescription('Current temperature of the specified sensor in [deg C].')
msanDiagnosticsTempCriticUnderheatThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsTempCriticUnderheatThreshold.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsTempCriticUnderheatThreshold.setDescription('Sensor critical underheat threshold temperature limit in [deg C].')
msanDiagnosticsTempUnderheatThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsTempUnderheatThreshold.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsTempUnderheatThreshold.setDescription('Sensor underheat temperature threshold limit in [deg C].')
msanDiagnosticsTempOverheatThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsTempOverheatThreshold.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsTempOverheatThreshold.setDescription('Sensor overheat threshold temperature limit in [deg C].')
msanDiagnosticsTempCriticOverheatThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDiagnosticsTempCriticOverheatThreshold.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsTempCriticOverheatThreshold.setDescription('Sensor critical overheat threshold temperature limit in [deg C].')
msanDiagnosticsErrorFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 5), )
if mibBuilder.loadTexts: msanDiagnosticsErrorFilterTable.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorFilterTable.setDescription('Description.')
msanDiagnosticsErrorFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 5, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanDiagnosticsErrorFilterErrMask"), (0, "ISKRATEL-MSAN-MIB", "msanDiagnosticsErrorFilterObjMask"))
if mibBuilder.loadTexts: msanDiagnosticsErrorFilterEntry.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorFilterEntry.setDescription('Description.')
msanDiagnosticsErrorFilterErrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: msanDiagnosticsErrorFilterErrMask.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorFilterErrMask.setDescription('Error code in ascii format. Regular expression describing one or more error codes.')
msanDiagnosticsErrorFilterObjMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 40)))
if mibBuilder.loadTexts: msanDiagnosticsErrorFilterObjMask.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorFilterObjMask.setDescription('Type of object, which alarming is filtered for. Regular expression describing one or more test objects. ')
msanDiagnosticsErrorFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDiagnosticsErrorFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorFilterRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanDiagnosticsErrorSeverityTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 6), )
if mibBuilder.loadTexts: msanDiagnosticsErrorSeverityTable.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorSeverityTable.setDescription('Description.')
msanDiagnosticsErrorSeverityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 6, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanDiagnosticsErrorSeverityErrCode"), (0, "ISKRATEL-MSAN-MIB", "msanDiagnosticsErrorSeverityObjMask"))
if mibBuilder.loadTexts: msanDiagnosticsErrorSeverityEntry.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorSeverityEntry.setDescription('Description.')
msanDiagnosticsErrorSeverityErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: msanDiagnosticsErrorSeverityErrCode.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorSeverityErrCode.setDescription('Unique identification of an error reported during testing an object. All error codes are stated in alr_def.h (KFMT)')
msanDiagnosticsErrorSeverityErrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("warning", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDiagnosticsErrorSeverityErrPriority.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorSeverityErrPriority.setDescription('Priority of error. ')
msanDiagnosticsErrorSeverityObjMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 40)))
if mibBuilder.loadTexts: msanDiagnosticsErrorSeverityObjMask.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorSeverityObjMask.setDescription('Type of object, which alarming is filtered for. Regular expression describing one or more test objects. ')
msanDiagnosticsErrorSeverityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 14, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDiagnosticsErrorSeverityRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanDiagnosticsErrorSeverityRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. For row creation use createAndWait(5) [createAndGo(4) is not supported]. ')
msanPpp = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 15))
msanPppGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 15, 1))
msanPppLocalIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 15, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppLocalIpAddress.setStatus('current')
if mibBuilder.loadTexts: msanPppLocalIpAddress.setDescription('Local IP address for PPP connection')
msanPppRemoteIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 15, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: msanPppRemoteIpAddress.setDescription('Remote IP address for PPP connection')
msanPppAuthProtocol = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("chap", 1), ("pap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppAuthProtocol.setStatus('current')
if mibBuilder.loadTexts: msanPppAuthProtocol.setDescription('PPP authentication protocol. For MPS connection use CHAP.')
msanPppEchoInterval = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 15, 1, 4), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppEchoInterval.setStatus('current')
if mibBuilder.loadTexts: msanPppEchoInterval.setDescription('LCP echo interval (in seconds) for session breakdown identification.')
msanPppVanJacobsonCompression = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppVanJacobsonCompression.setStatus('current')
if mibBuilder.loadTexts: msanPppVanJacobsonCompression.setDescription('Control of VanJacobson compression. For MPS connection it must be disabled.')
msanPppAdminState = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPppAdminState.setStatus('current')
if mibBuilder.loadTexts: msanPppAdminState.setDescription('Global PPP connection administrative state.')
msanAlarmPanel = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16))
msanAlarmPanelGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 1))
msanAlarmPanelAudioAlarmPriority = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAlarmPanelAudioAlarmPriority.setStatus('current')
if mibBuilder.loadTexts: msanAlarmPanelAudioAlarmPriority.setDescription('Alarm Panel Audio Alarm Priority.')
msanAlarmPanelSerialPortType = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noConnection", 1), ("mps", 2), ("alarmPanel", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAlarmPanelSerialPortType.setStatus('current')
if mibBuilder.loadTexts: msanAlarmPanelSerialPortType.setDescription('Type of equipment connected to serial port.')
msanAlarmPanelTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 2), )
if mibBuilder.loadTexts: msanAlarmPanelTable.setStatus('current')
if mibBuilder.loadTexts: msanAlarmPanelTable.setDescription('Description.')
msanAlarmPanelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanAlarmPanelIndex"))
if mibBuilder.loadTexts: msanAlarmPanelEntry.setStatus('current')
if mibBuilder.loadTexts: msanAlarmPanelEntry.setDescription('Description.')
msanAlarmPanelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: msanAlarmPanelIndex.setStatus('current')
if mibBuilder.loadTexts: msanAlarmPanelIndex.setDescription('Unique identification of an alarm panel.')
msanAlarmPanelConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAlarmPanelConnectionState.setStatus('current')
if mibBuilder.loadTexts: msanAlarmPanelConnectionState.setDescription('Alarm panel connection status')
msanAlarmPanelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unequipped", 0), ("equipped", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAlarmPanelAdminState.setStatus('current')
if mibBuilder.loadTexts: msanAlarmPanelAdminState.setDescription('Flag determining whether an alarm panel is equipped or not.')
msanAlarmPanelIndicatorTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 3), )
if mibBuilder.loadTexts: msanAlarmPanelIndicatorTable.setStatus('current')
if mibBuilder.loadTexts: msanAlarmPanelIndicatorTable.setDescription('Description.')
msanAlarmPanelIndicatorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanAlarmPanelIndex"), (0, "ISKRATEL-MSAN-MIB", "msanAlarmPanelIndicatorIndex"))
if mibBuilder.loadTexts: msanAlarmPanelIndicatorEntry.setStatus('current')
if mibBuilder.loadTexts: msanAlarmPanelIndicatorEntry.setDescription('Description.')
msanAlarmPanelIndicatorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: msanAlarmPanelIndicatorIndex.setStatus('current')
if mibBuilder.loadTexts: msanAlarmPanelIndicatorIndex.setDescription('Alarm panel indicator number. ')
msanAlarmPanelIndicatorErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAlarmPanelIndicatorErrCode.setStatus('current')
if mibBuilder.loadTexts: msanAlarmPanelIndicatorErrCode.setDescription('Alarm panel indicator error number.')
msanAlarmPanelInputTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 4), )
if mibBuilder.loadTexts: msanAlarmPanelInputTable.setStatus('current')
if mibBuilder.loadTexts: msanAlarmPanelInputTable.setDescription('Description.')
msanAlarmPanelInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 4, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanAlarmPanelIndex"), (0, "ISKRATEL-MSAN-MIB", "msanAlarmPanelInputIndex"))
if mibBuilder.loadTexts: msanAlarmPanelInputEntry.setStatus('current')
if mibBuilder.loadTexts: msanAlarmPanelInputEntry.setDescription('Description.')
msanAlarmPanelInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: msanAlarmPanelInputIndex.setStatus('current')
if mibBuilder.loadTexts: msanAlarmPanelInputIndex.setDescription('Alarm panel input sensor number.')
msanAlarmPanelInputErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAlarmPanelInputErrCode.setStatus('current')
if mibBuilder.loadTexts: msanAlarmPanelInputErrCode.setDescription('Alarm panel input sensor error code.')
msanAlarmPanelInputActiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 16, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAlarmPanelInputActiveLevel.setStatus('current')
if mibBuilder.loadTexts: msanAlarmPanelInputActiveLevel.setDescription('Alarm panel input sensor active level.')
msanMvr = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17))
msanMvrGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 1))
msanMvrPortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 2), )
if mibBuilder.loadTexts: msanMvrPortTable.setStatus('current')
if mibBuilder.loadTexts: msanMvrPortTable.setDescription('Description.')
msanMvrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanMvrPortEntry.setStatus('current')
if mibBuilder.loadTexts: msanMvrPortEntry.setDescription('Description.')
msanMvrPortAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMvrPortAdminMode.setStatus('current')
if mibBuilder.loadTexts: msanMvrPortAdminMode.setDescription('Administrative mode for Multicast VLAN Registration (a.k.a. Service Based Tagging) for the selected interface')
msanMvrMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 3), )
if mibBuilder.loadTexts: msanMvrMulticastGroupTable.setStatus('current')
if mibBuilder.loadTexts: msanMvrMulticastGroupTable.setDescription('Description.')
msanMvrMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMvrMulticastGroupMVlanId"), (0, "ISKRATEL-MSAN-MIB", "msanMvrMulticastGroupStartIp"))
if mibBuilder.loadTexts: msanMvrMulticastGroupEntry.setStatus('current')
if mibBuilder.loadTexts: msanMvrMulticastGroupEntry.setDescription('Description.')
msanMvrMulticastGroupMVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: msanMvrMulticastGroupMVlanId.setStatus('current')
if mibBuilder.loadTexts: msanMvrMulticastGroupMVlanId.setDescription('VLAN ID (refers to dot1qVlanIndex) where MVR functionality is used.')
msanMvrMulticastGroupStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: msanMvrMulticastGroupStartIp.setStatus('current')
if mibBuilder.loadTexts: msanMvrMulticastGroupStartIp.setDescription('Start IP Address of the multicast group range.')
msanMvrMulticastGroupEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMvrMulticastGroupEndIp.setStatus('current')
if mibBuilder.loadTexts: msanMvrMulticastGroupEndIp.setDescription('End IP Address of the multicast group range.')
msanMvrMulticastGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMvrMulticastGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanMvrMulticastGroupRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. For row creation use createAndWait(5) [createAndGo(4) is not supported].')
msanMvrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 4), )
if mibBuilder.loadTexts: msanMvrConfigTable.setStatus('current')
if mibBuilder.loadTexts: msanMvrConfigTable.setDescription('Description.')
msanMvrConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanMvrConfigCVlanId"), (0, "ISKRATEL-MSAN-MIB", "msanMvrConfigMVlanId"))
if mibBuilder.loadTexts: msanMvrConfigEntry.setStatus('current')
if mibBuilder.loadTexts: msanMvrConfigEntry.setDescription('Description.')
msanMvrConfigCVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: msanMvrConfigCVlanId.setStatus('current')
if mibBuilder.loadTexts: msanMvrConfigCVlanId.setDescription('Customer VLAN ID for the selected interface from which IGMP Join/Leave messages will be remarked.')
msanMvrConfigMVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4092)))
if mibBuilder.loadTexts: msanMvrConfigMVlanId.setStatus('current')
if mibBuilder.loadTexts: msanMvrConfigMVlanId.setDescription('Service provider multicast VLAN ID for the selected interface to which IGMP Join/Leave messages will be remarked.')
msanMvrConfigCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMvrConfigCos.setStatus('current')
if mibBuilder.loadTexts: msanMvrConfigCos.setDescription("Output CoS priority on the selected interface. IGMP messages received from this interface will have this priority when they are transmitted into service provider multicast VLAN. Value '-1' defines that original CoS value is not changed.")
msanMvrConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMvrConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanMvrConfigRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanMvrDvlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 5), )
if mibBuilder.loadTexts: msanMvrDvlanTable.setStatus('current')
if mibBuilder.loadTexts: msanMvrDvlanTable.setDescription('Description.')
msanMvrDvlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanMvrDvlanEntry.setStatus('current')
if mibBuilder.loadTexts: msanMvrDvlanEntry.setDescription('Description.')
msanMvrDvlanRmOuterTagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMvrDvlanRmOuterTagStatus.setStatus('current')
if mibBuilder.loadTexts: msanMvrDvlanRmOuterTagStatus.setDescription('The desired state of removing outer tags on IGMP packets funcionality.')
msanMvrDvlanEthertypeRewriteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 17, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMvrDvlanEthertypeRewriteStatus.setStatus('current')
if mibBuilder.loadTexts: msanMvrDvlanEthertypeRewriteStatus.setDescription('The desired state of rewriting ether type from outer vlan tag to inner vlan tag.')
msanRemoteAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 18))
msanRemoteAccessGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 18, 1))
msanRemoteAccessFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 18, 2), )
if mibBuilder.loadTexts: msanRemoteAccessFilterTable.setStatus('deprecated')
if mibBuilder.loadTexts: msanRemoteAccessFilterTable.setDescription('Description.')
msanRemoteAccessFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 18, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanRemoteAccessFilterRuleIndex"))
if mibBuilder.loadTexts: msanRemoteAccessFilterEntry.setStatus('deprecated')
if mibBuilder.loadTexts: msanRemoteAccessFilterEntry.setDescription('Description.')
msanRemoteAccessFilterRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)))
if mibBuilder.loadTexts: msanRemoteAccessFilterRuleIndex.setStatus('deprecated')
if mibBuilder.loadTexts: msanRemoteAccessFilterRuleIndex.setDescription("Rule's index. Index should be continued, without gaps. ")
msanRemoteAccessFilterIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 18, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanRemoteAccessFilterIp.setStatus('deprecated')
if mibBuilder.loadTexts: msanRemoteAccessFilterIp.setDescription('IP Address of the rule.')
msanRemoteAccessFilterNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 18, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanRemoteAccessFilterNetmask.setStatus('deprecated')
if mibBuilder.loadTexts: msanRemoteAccessFilterNetmask.setDescription('Netmask of the rule.')
msanRemoteAccessFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 18, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanRemoteAccessFilterAction.setStatus('deprecated')
if mibBuilder.loadTexts: msanRemoteAccessFilterAction.setDescription('Action to be taken with a packet: accept or deny it.')
msanRemoteAccessFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 18, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanRemoteAccessFilterRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: msanRemoteAccessFilterRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. For row creation use createAndWait(5) [createAndGo(4) is not supported].')
msanDslSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19))
msanDslSpecificGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 1))
msanDslSpecificSystemState = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 12))).clone(namedValues=NamedValues(("operational", 4), ("notReady", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSpecificSystemState.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificSystemState.setDescription('VDSL system operational state. For normal blade operation this value should be operational (4). If value differ from 4, VDSL driver is not operational.')
msanDslSpecificSystemFirmware = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSpecificSystemFirmware.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificSystemFirmware.setDescription('VDSL firmware version.')
msanDslSpecificTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3), )
if mibBuilder.loadTexts: msanDslSpecificTable.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificTable.setDescription('Description.')
msanDslSpecificEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanDslSpecificEntry.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificEntry.setDescription('Description.')
msanDslSpecificDsPsdMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificDsPsdMask.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificDsPsdMask.setDescription('Unique name of the downstream PSD mask as defined by msanDslPsdMaskDsName.')
msanDslSpecificUsPsdMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 2), OctetString().clone('ANSI_FTTCab_M11')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUsPsdMask.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificUsPsdMask.setDescription('Unique name of the upstream PSD mask as defined by msanDslPsdMaskUsName.')
msanDslSpecificLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("quiet", 0), ("idle", 1), ("activateInitTrain", 2), ("activeFullPower", 3), ("activeLowPower", 4), ("unitFail", 5), ("atpPtmLoopback", 6), ("dspDigitalLoopback", 7), ("lineDriverDigitalLoopback", 8), ("hybridLoopback", 9), ("testMode", 10), ("loopDiagnosticsDeltInit", 11), ("loopDiagnosticsDelt", 12), ("seltInits", 13), ("selt", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSpecificLineState.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificLineState.setDescription('VDSL system operational state. For normal blade operation this value should be active(3). If value is differ from 3, VDSL driver is not operational.')
msanDslSpecificMaxDelayDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMaxDelayDs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificMaxDelayDs.setDescription('Maximum interleave delay for the downstream interleaved channel. -1 means that value from profile will be used (xdsl2ChConfProfMaxDelayDs). This object is created based on xdsl2ChConfProfMaxDelayDs (VDSL2-LINE MIB)')
msanDslSpecificMaxDelayUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMaxDelayUs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificMaxDelayUs.setDescription('Maximum interleave delay for the upstream interleaved channel. -1 means that value from profile will be used (xdsl2ChConfProfMaxDelayUs). This object is created based on xdsl2ChConfProfMaxDelayUs (VDSL2-LINE MIB)')
msanDslSpecificMinProtectionDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 160))).setUnits('symbols').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMinProtectionDs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificMinProtectionDs.setDescription('Downstream impulse noise protection. -1 means that value from profile will be used (xdsl2ChConfProfMinProtectionDs) This object is created based on xdsl2ChConfProfMinProtectionDs(VDSL2-LINE MIB)')
msanDslSpecificMinProtectionUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMinProtectionUs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificMinProtectionUs.setDescription('Upstream impulse noise protection. -1 means that value from profile will be used (xdsl2ChConfProfMinProtectionUs) This object is created based on xdsl2ChConfProfMinProtectionUs(VDSL2-LINE MIB)')
msanDslSpecificMaxSnrmDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMaxSnrmDs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificMaxSnrmDs.setDescription('Downstream maximum Signal/Noise Margin. This object is created based on xdsl2LConfProfMaxSnrmDs (VDSL2-LINE MIB)')
msanDslSpecificMinSnrmDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMinSnrmDs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificMinSnrmDs.setDescription('Downstream minimum Signal/Noise Margin. This object is created based on xdsl2LConfProfMinSnrmDs (VDSL2-LINE MIB)')
msanDslSpecificMaxSnrmUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMaxSnrmUs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificMaxSnrmUs.setDescription('Upstream maximum Signal/Noise Margin. This object is created based on xdsl2LConfProfMaxSnrmUs (VDSL2-LINE MIB)')
msanDslSpecificMinSnrmUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMinSnrmUs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificMinSnrmUs.setDescription('Upstream minimum Signal/Noise Margin. This object is created based on xdsl2LConfProfMinSnrmUs (VDSL2-LINE MIB)')
msanDslSpecificRaUsNrmDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificRaUsNrmDs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificRaUsNrmDs.setDescription('The Downstream Up-Shift Noise Margin (for dynamic rate adaptive mode). This object is created based on xdsl2LConfProfRaUsNrmDs (VDSL2-LINE MIB)')
msanDslSpecificRaUsNrmUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificRaUsNrmUs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificRaUsNrmUs.setDescription('The Upstream Up-Shift Noise Margin (for dynamic rate adaptive mode). This object is created based on xdsl2LConfProfRaUsNrmUs (VDSL2-LINE MIB)')
msanDslSpecificRaUsTimeDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificRaUsTimeDs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificRaUsTimeDs.setDescription('The Downstream Up-Shift Time Interval (for rate dynamic adaptive mode). This object is created based on xdsl2LConfProfRaUsTimeDs (VDSL2-LINE MIB)')
msanDslSpecificRaUsTimeUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificRaUsTimeUs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificRaUsTimeUs.setDescription('The Upstream Up-Shift Time Interval (for rate dynamic adaptive mode). This object is created based on xdsl2LConfProfRaUsTimeUs (VDSL2-LINE MIB)')
msanDslSpecificRaDsNrmDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificRaDsNrmDs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificRaDsNrmDs.setDescription('The Downstream Down-Shift Noise Margin (for dynamic rate adaptive mode). This object is created based on xdsl2LConfProfRaDsNrmDs (VDSL2-LINE MIB)')
msanDslSpecificRaDsNrmUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificRaDsNrmUs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificRaDsNrmUs.setDescription('The Upstream Down-Shift Noise Margin (for dynamic rate adaptive mode). This object is created based on xdsl2LConfProfRaDsNrmUs (VDSL2-LINE MIB)')
msanDslSpecificRaDsTimeDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificRaDsTimeDs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificRaDsTimeDs.setDescription('The Downstream Down-Shift Time Interval (for rate dynamic adaptive mode). This object is created based on xdsl2LConfProfRaDsTimeDs (VDSL2-LINE MIB)')
msanDslSpecificRaDsTimeUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificRaDsTimeUs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificRaDsTimeUs.setDescription('The Upstream Down-Shift Time Interval (for rate dynamic adaptive mode). This object is created based on xdsl2LConfProfRaDsTimeUs (VDSL2-LINE MIB)')
msanDslSpecificL0Time = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificL0Time.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificL0Time.setDescription('The minimum time between an exit from the L2 state and the next entry into the L2 state. This object is created based on xdsl2LConfProfL0Time (VDSL2-LINE MIB)')
msanDslSpecificL2Time = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificL2Time.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificL2Time.setDescription('The minimum time between an entry into the L2 state and the first power trim in the L2 state and between two consecutive power trims in the L2 State. This object is created based on xdsl2LConfProfL2Time (VDSL2-LINE MIB)')
msanDslSpecificL2Atpr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificL2Atpr.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificL2Atpr.setDescription('The maximum aggregate transmit power reduction that can be performed at transition of L0 to L2 state or through a single power trim in the L2 state. This object is created based on xdsl2LConfProfL2Atpr (VDSL2-LINE MIB)')
msanDslSpecificL2Atprt = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificL2Atprt.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificL2Atprt.setDescription('The total maximum aggregate transmit power reduction that can be performed in an L2 state. This object is created based on xdsl2LConfProfL2Atprt (VDSL2-LINE MIB)')
msanDslSpecificScMaskDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificScMaskDs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificScMaskDs.setDescription("Downstream Sub-carriers mask. A bitmap of 4096 bits that allows masking up to 4096 downstream sub-carriers. If bit is set to '1', the respective downstream sub-carrier is masked (not used), and if set to '0', the respective sub-carrier is unmasked. This object is created based on xdsl2LConfProfScMaskDs (VDSL2-LINE MIB) ")
msanDslSpecificScMaskUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificScMaskUs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificScMaskUs.setDescription("Upstream Sub-carriers mask. A bitmap of 4096 bits that allows masking up to 4096 downstream sub-carriers. If bit is set to '1', the respective downstream sub-carrier is masked (not used), and if set to '0', the respective sub-carrier is unmasked. This object is created based on xdsl2LConfProfScMaskUs (VDSL2-LINE MIB)")
msanDslSpecificRfiBands = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificRfiBands.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificRfiBands.setDescription('For VDLS, this configuration parameter defines the bands where the PSD shall be reduced. Each band shall be represented by a start and stop subcarrier indices with a subcarrier spacing of 4.3125 kHz. Up to 16 bands may be specified. This parameter defines the RFI bands for both upstream and downstream directions. Each RFI band is represented by 4 octets: 16 bit start sub-carrier index followed by a 16 bit stop sub-carrier index. This object is created based on xdsl2LConfProfRfiBands (VDSL2-LINE MIB) ')
msanDslSpecificMaxNomPsdDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, -300))).setUnits('0.1 dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMaxNomPsdDs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificMaxNomPsdDs.setDescription('The maximum nominal transmit PSD in the downstream direction during initialization and Showtime. (0.1 dBm/Hz - physical values are -60 to -30 dBm/Hz). This object is created based on xdsl2LConfProfMaxNomPsdDs (VDSL2-LINE MIB)')
msanDslSpecificMaxNomPsdUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, -300))).setUnits('0.1 dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMaxNomPsdUs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificMaxNomPsdUs.setDescription('The maximum nominal transmit PSD in the upstream direction during initialization and Showtime. (0.1 dBm/Hz - physical values are -60 to -30 dBm/Hz). This object is created based on xdsl2LConfProfMaxNomPsdUs (VDSL2-LINE MIB)')
msanDslSpecificMaxNomAtpDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMaxNomAtpDs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificMaxNomAtpDs.setDescription('The maximum nominal aggregate transmit power in the downstream direction during initialization and Showtime. (0.1 dBm - physical values are 0 to 25.5 dBm). This object is created based on xdsl2LConfProfMaxNomAtpDs (VDSL2-LINE MIB)')
msanDslSpecificMaxNomAtpUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMaxNomAtpUs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificMaxNomAtpUs.setDescription('The maximum nominal aggregate transmit power in the upstream direction during initialization and Showtime. (0.1 dBm - physical values are 0 to 25.5 dBm). This object is created based on xdsl2LConfProfMaxNomAtpUs (VDSL2-LINE MIB)')
msanDslSpecificMaxAggRxPwrUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-255, 255))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificMaxAggRxPwrUs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificMaxAggRxPwrUs.setDescription('The maximum upstream aggregate receive power over the relevant set of sub-carriers.. (0.1 dBm - physical values are -25.5 to 25.5 dBm). This object is created based on xdsl2LConfProfMaxAggRxPwrUs (VDSL2-LINE MIB)')
msanDslSpecificClassMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("b998_M1x_A", 1), ("b998_M1x_B", 2), ("b998_M1x_NUS0", 3), ("b998_M2x_A", 4), ("b998_M2x_M", 5), ("b998_M2x_B", 6), ("b998_M2x_NUS0", 7), ("b998E17_M2x_NUS0", 8), ("b998E17_M2x_NUS0_M", 9), ("b998ADE17_M2x_NUS0_M", 10), ("b998ADE17_M2x_A", 11), ("b998ADE17_M2x_B", 12), ("b997_M1c_A_7", 13), ("b997_M1x_M_8", 14), ("b997_M1x_M", 15), ("b997_M2x_M_8", 16), ("b997_M2x_A", 17), ("b997_M2x_M", 18), ("bHPE17_M1_NUS0", 19), ("bHPE30_M1_NUS0", 20), ("b997E17_M2x_A", 21))).clone('b998E17_M2x_NUS0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificClassMask.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificClassMask.setDescription('Predefined PSD mask. This object is created based on xdsl2LConfProfClassMask (VDSL2-LINE MIB)')
msanDslSpecificDpboEsEL = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setUnits('0.5 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificDpboEsEL.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificDpboEsEL.setDescription('Assumed electrical length of cables (E-side cables) connecting exchange based DSL services to a remote flexibility point (cabinet). The electrical length is defined as the loss (in dB) of an equivalent length of hypothetical cable at a reference frequency. 0 dB (coded as 0) to 255.5 dB (coded as 511) in steps of 0.5 dB. This object is created based on xdsl2LConfProfDpboEsEL (VDSL2-LINE MIB) ')
msanDslSpecificUpboKLF = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("override", 2), ("disableUpbo", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUpboKLF.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificUpboKLF.setDescription('Defines the upstream power backoff force mode. The three possible mode values are: auto(1), override(2), disableUpbo(3). This object is created based on xdsl2LConfProfUpboKLF (VDSL2-LINE MIB)')
msanDslSpecificUpboKL = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1280))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUpboKL.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificUpboKL.setDescription('This configuration parameter defines the electrical length expressed in dB at 1MHz, configured by the CO-MIB. The value ranges from 0 (coded as 0) to 128 dB (coded as 1280) in steps of 0.1 dB. This object is created based on xdsl2LConfProfUpboKL (VDSL2-LINE MIB)')
msanDslSpecificSelt = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("force", 2))).clone('inhibit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificSelt.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificSelt.setDescription("Defines whether the line should be forced into the SELT (Single-Ended Loop Testing) diagnostics mode by the near-end xTU of this line. Upon completion of the loop diagnostic mode procedures, the Access Node shall set this object to 'inhibit'. The results of the SELT procedure are stored in the table msanDslSeltStatusTable. The status of the loop diagnostic procedure is indicated by msanDslSpecificSeltStatus. ")
msanDslSpecificSeltStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("unsupported", 4), ("cannotRun", 5), ("aborted", 6), ("failed", 7), ("illegalMode", 8), ("adminUp", 9), ("tableFull", 10), ("noResources", 11), ("undefinedError", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSpecificSeltStatus.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificSeltStatus.setDescription('SELT (Single-Ended Loop Testing) status of dsl line. ')
msanDslSpecificPhyRDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificPhyRDs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificPhyRDs.setDescription('Physical Layer Retransmission configuration in the downstream direction. ')
msanDslSpecificPhyRUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificPhyRUs.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificPhyRUs.setDescription('Physical Layer Retransmission configuration in the upstream direction. ')
msanDslSpecificUpboUs1a = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 8095)).clone(4000)).setUnits('0.01 dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUpboUs1a.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificUpboUs1a.setDescription("ITU-T G.997.1, paragraph #7.3.1.2.14 (UPBOPSD-pb) Parameter defines the 'a' reference parameter of the UPBO reference PSD used to compute the upstream power back-off for the upstream band. A UPBO PSD defined for each band shall consist of two parameters [a, b]. Parameter 'a' (xdsl2LConfProfUpboPsdA) ranges from 40 dBm/Hz (coded as 4000) to 80.95 dBm/Hz (coded as 8095) in steps of 0.01 dBm/Hz; and parameter 'b' (xdsl2LConfProfUpboPsdB) ranges from 0 dBm/Hz (coded as 0) to 40.95 dBm/Hz (coded as 4095) in steps of 0.01 dBm/Hz. The UPBO reference PSD at the frequency 'f' expressed in MHz shall be equal to '-a-b(SQRT(f))'. Setting xdsl2LConfProfUpboPsdA to 4000 and xdsl2LConfProfUpboPsdB to 0 is a special configuration to disable UPBO in the respective upstream band.")
msanDslSpecificUpboUs1b = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setUnits('0.01 dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUpboUs1b.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificUpboUs1b.setDescription("ITU-T G.997.1, paragraph #7.3.1.2.14 (UPBOPSD-pb) Parameter defines the 'b' reference parameter of the UPBO reference PSD used to compute the upstream power back-off for the upstream band. Parameter 'b' (xdsl2LConfProfUpboPsdB) ranges from 0 dBm/Hz (coded as 0) to 40.95 dBm/Hz (coded as 4095) in steps of 0.01 dBm/Hz. ")
msanDslSpecificUpboUs2a = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 8095)).clone(4000)).setUnits('0.01 dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUpboUs2a.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificUpboUs2a.setDescription("ITU-T G.997.1, paragraph #7.3.1.2.14 (UPBOPSD-pb) Parameter defines the 'a' reference parameter of the UPBO reference PSD used to compute the upstream power back-off for the upstream band. A UPBO PSD defined for each band shall consist of two parameters [a, b]. Parameter 'a' (xdsl2LConfProfUpboPsdA) ranges from 40 dBm/Hz (coded as 4000) to 80.95 dBm/Hz (coded as 8095) in steps of 0.01 dBm/Hz; and parameter 'b' (xdsl2LConfProfUpboPsdB) ranges from 0 dBm/Hz (coded as 0) to 40.95 dBm/Hz (coded as 4095) in steps of 0.01 dBm/Hz. The UPBO reference PSD at the frequency 'f' expressed in MHz shall be equal to '-a-b(SQRT(f))'. Setting xdsl2LConfProfUpboPsdA to 4000 and xdsl2LConfProfUpboPsdB to 0 is a special configuration to disable UPBO in the respective upstream band.")
msanDslSpecificUpboUs2b = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setUnits('0.01 dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUpboUs2b.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificUpboUs2b.setDescription("ITU-T G.997.1, paragraph #7.3.1.2.14 (UPBOPSD-pb) Parameter defines the 'b' reference parameter of the UPBO reference PSD used to compute the upstream power back-off for the upstream band. Parameter 'b' (xdsl2LConfProfUpboPsdB) ranges from 0 dBm/Hz (coded as 0) to 40.95 dBm/Hz (coded as 4095) in steps of 0.01 dBm/Hz. ")
msanDslSpecificUpboUs3a = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 8095)).clone(4000)).setUnits('0.01 dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUpboUs3a.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificUpboUs3a.setDescription("ITU-T G.997.1, paragraph #7.3.1.2.14 (UPBOPSD-pb) Parameter defines the 'a' reference parameter of the UPBO reference PSD used to compute the upstream power back-off for the upstream band. A UPBO PSD defined for each band shall consist of two parameters [a, b]. Parameter 'a' (xdsl2LConfProfUpboPsdA) ranges from 40 dBm/Hz (coded as 4000) to 80.95 dBm/Hz (coded as 8095) in steps of 0.01 dBm/Hz; and parameter 'b' (xdsl2LConfProfUpboPsdB) ranges from 0 dBm/Hz (coded as 0) to 40.95 dBm/Hz (coded as 4095) in steps of 0.01 dBm/Hz. The UPBO reference PSD at the frequency 'f' expressed in MHz shall be equal to '-a-b(SQRT(f))'. Setting xdsl2LConfProfUpboPsdA to 4000 and xdsl2LConfProfUpboPsdB to 0 is a special configuration to disable UPBO in the respective upstream band.")
msanDslSpecificUpboUs3b = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setUnits('0.01 dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUpboUs3b.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificUpboUs3b.setDescription("ITU-T G.997.1, paragraph #7.3.1.2.14 (UPBOPSD-pb) Parameter defines the 'b' reference parameter of the UPBO reference PSD used to compute the upstream power back-off for the upstream band. Parameter 'b' (xdsl2LConfProfUpboPsdB) ranges from 0 dBm/Hz (coded as 0) to 40.95 dBm/Hz (coded as 4095) in steps of 0.01 dBm/Hz. ")
msanDslSpecificUpboUs4a = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 8095)).clone(4000)).setUnits('0.01 dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUpboUs4a.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificUpboUs4a.setDescription("ITU-T G.997.1, paragraph #7.3.1.2.14 (UPBOPSD-pb) Parameter defines the 'a' reference parameter of the UPBO reference PSD used to compute the upstream power back-off for the upstream band. A UPBO PSD defined for each band shall consist of two parameters [a, b]. Parameter 'a' (xdsl2LConfProfUpboPsdA) ranges from 40 dBm/Hz (coded as 4000) to 80.95 dBm/Hz (coded as 8095) in steps of 0.01 dBm/Hz; and parameter 'b' (xdsl2LConfProfUpboPsdB) ranges from 0 dBm/Hz (coded as 0) to 40.95 dBm/Hz (coded as 4095) in steps of 0.01 dBm/Hz. The UPBO reference PSD at the frequency 'f' expressed in MHz shall be equal to '-a-b(SQRT(f))'. Setting xdsl2LConfProfUpboPsdA to 4000 and xdsl2LConfProfUpboPsdB to 0 is a special configuration to disable UPBO in the respective upstream band.")
msanDslSpecificUpboUs4b = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setUnits('0.01 dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificUpboUs4b.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificUpboUs4b.setDescription("ITU-T G.997.1, paragraph #7.3.1.2.14 (UPBOPSD-pb) Parameter defines the 'b' reference parameter of the UPBO reference PSD used to compute the upstream power back-off for the upstream band. Parameter 'b' (xdsl2LConfProfUpboPsdB) ranges from 0 dBm/Hz (coded as 0) to 40.95 dBm/Hz (coded as 4095) in steps of 0.01 dBm/Hz. ")
msanDslSpecificDpboEPsdMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 51), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslSpecificDpboEPsdMask.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificDpboEPsdMask.setDescription('DPbo EPsd mask name. It should be of the downstream PSD mask as defined by msanDslPsdMaskDsName.')
msanDslSpecificDpboEsCmA = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 52), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 640))).setUnits('2^-8').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDslSpecificDpboEsCmA.setReference('ITU-T G.997.1, paragraph #7.3.1.2.13 (DPBOESCMA)')
if mibBuilder.loadTexts: msanDslSpecificDpboEsCmA.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificDpboEsCmA.setDescription('ITU-T G.997.1, paragraph #7.3.1.2.13 (DPBOESCMA) The E-side Cable Model parameter A (DPBOESCMA) of the cable model (DPBOESCM) for cables connecting exchange-based DSL services to a remote flexibility point (cabinet), that hosts the xTU-C that is subject to spectrally shaped downstream power back- off (DPBO) depending on this value. Possible values shall be coded as unsigned integers representing a scalar value from -1 (coded as 0) to 1.5 (coded as 640) in steps of 2-8 All values in the range are valid. ')
msanDslSpecificDpboEsCmB = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 53), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 640))).setUnits('2^-8').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDslSpecificDpboEsCmB.setReference('ITU-T G.997.1, paragraph #7.3.1.2.13 (DPBOESCMB)')
if mibBuilder.loadTexts: msanDslSpecificDpboEsCmB.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificDpboEsCmB.setDescription('ITU-T G.997.1, paragraph #7.3.1.2.13 (DPBOESCMB) The E-side Cable Model parameter B (DPBOESCMB) of the cable model (DPBOESCM) for cables connecting exchange-based DSL services to a remote flexibility point (cabinet), that hosts the xTU-C that is subject to spectrally shaped downstream power back- off (DPBO) depending on this value. Possible values shall be coded as unsigned integers representing a scalar value from -1 (coded as 0) to 1.5 (coded as 640) in steps of 2-8 All values in the range are valid. ')
msanDslSpecificDpboEsCmC = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 54), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 640))).setUnits('2^-8').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDslSpecificDpboEsCmC.setReference('ITU-T G.997.1, paragraph #7.3.1.2.13 (DPBOESCMC)')
if mibBuilder.loadTexts: msanDslSpecificDpboEsCmC.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificDpboEsCmC.setDescription('ITU-T G.997.1, paragraph #7.3.1.2.13 (DPBOESCMC) The E-side Cable Model parameter C (DPBOESCMC) of the cable model (DPBOESCM) for cables connecting exchange-based DSL services to a remote flexibility point (cabinet), that hosts the xTU-C that is subject to spectrally shaped downstream power back- off (DPBO) depending on this value. Possible values shall be coded as unsigned integers representing a scalar value from -1 (coded as 0) to 1.5 (coded as 640) in steps of 2-8 All values in the range are valid. ')
msanDslSpecificDpboMus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 55), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('0.5 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDslSpecificDpboMus.setReference('ITU-T G.997.1, paragraph #7.3.1.2.13 (DPBOMUS)')
if mibBuilder.loadTexts: msanDslSpecificDpboMus.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificDpboMus.setDescription('ITU-T G.997.1, paragraph #7.3.1.2.13 (DPBOMUS) Assumed Minimum Usable receive PSD mask (in dBm/Hz) for exchange-based services. It shall be coded as an unsigned integer representing a PSD mask level from 0 dBm/Hz (coded as 0) to -127.5 dBm/Hz (coded as 255) in steps of 0.5 dBm/Hz. All values in the range are valid. ')
msanDslSpecificDpboFMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 56), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048)).clone(32)).setUnits('4.3125 kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDslSpecificDpboFMin.setReference('ITU-T G.997.1, paragraph #7.3.1.2.13 (DPBOFMIN)')
if mibBuilder.loadTexts: msanDslSpecificDpboFMin.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificDpboFMin.setDescription('ITU-T G.997.1, paragraph #7.3.1.2.13 (DPBOFMIN) Minimum frequency from which the DPBO shall be applied. It ranges from 0 kHz (coded as 0) to 8832 kHz (coded as 2048) in steps of 4.3125 kHz. ')
msanDslSpecificDpboFMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 3, 1, 57), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(32, 6956)).clone(512)).setUnits('4.3125 kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDslSpecificDpboFMax.setReference('ITU-T G.997.1, paragraph #7.3.1.2.13 (DPBOFMAX)')
if mibBuilder.loadTexts: msanDslSpecificDpboFMax.setStatus('current')
if mibBuilder.loadTexts: msanDslSpecificDpboFMax.setDescription('ITU-T G.997.1, paragraph #7.3.1.2.13 (DPBOFMAX) Maximum frequency at which DPBO may be applied. It ranges from 138 kHz (coded as 32) to 29997.75 kHz (coded as 6956) in steps of 4.3125 kHz. ')
msanDslPsdMaskDsTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 4), )
if mibBuilder.loadTexts: msanDslPsdMaskDsTable.setStatus('current')
if mibBuilder.loadTexts: msanDslPsdMaskDsTable.setDescription('Management of Downstream PSD Mask (G997.1 #7.3.1.2.9 )')
msanDslPsdMaskDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 4, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanDslPsdMaskDsName"))
if mibBuilder.loadTexts: msanDslPsdMaskDsEntry.setStatus('current')
if mibBuilder.loadTexts: msanDslPsdMaskDsEntry.setDescription('Description.')
msanDslPsdMaskDsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanDslPsdMaskDsName.setStatus('current')
if mibBuilder.loadTexts: msanDslPsdMaskDsName.setDescription('Downstream custom PSD mask name.')
msanDslPsdMaskDsType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("configured", 2))).clone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslPsdMaskDsType.setStatus('current')
if mibBuilder.loadTexts: msanDslPsdMaskDsType.setDescription('Downstream custom PSD mask type. Possible values: default(1) - Default mask prepared by vendor, user is not allowed to delete or change it configured(2) - Mask created by user ')
msanDslPsdMaskDsShape = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 4, 1, 3), Xdsl2PsdMaskDs().clone(hexValue="0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslPsdMaskDsShape.setStatus('current')
if mibBuilder.loadTexts: msanDslPsdMaskDsShape.setDescription("The downstream PSD mask applicable at the U-C2 reference point. This parameter is used only for G.992.5 and it may impose PSD restrictions (breakpoints) in addition to the Limit PSD mask defined in G.992.5. This is a string of 32 pairs of values in the following structure: Octets 0-1 - Index of the first subcarrier used in the context of a first breakpoint. Octet 2 - The PSD reduction for the subcarrier indicated in octets 0 and 1. Octets 3-5 - Same, for a second breakpoint. Octets 6-8 - Same, for a third breakpoint. This architecture continues until octets 94-95, which are associated with a 32nd breakpoint. Each subcarrier index is an unsigned number in the range 0 and NSCds-1. Each PSD reduction value is in the range 0 (0 dBm/Hz) to 255 (-127.5 dBm/Hz) with steps of 0.5 dBm/Hz. Valid values are in the range 0 to 190 (0 to -95 dBm/Hz). When the number of breakpoints is less than 32, all remaining octets are set to the value '0'. Note that the content of this object should be correlated with the subcarrier mask and with the RFI setup. ")
msanDslPsdMaskDsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDslPsdMaskDsRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanDslPsdMaskDsRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanDslPsdMaskUsTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 5), )
if mibBuilder.loadTexts: msanDslPsdMaskUsTable.setStatus('current')
if mibBuilder.loadTexts: msanDslPsdMaskUsTable.setDescription('Management of Upstream PSD Mask (G997.1 #7.3.1.2.9 )')
msanDslPsdMaskUsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 5, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanDslPsdMaskUsName"))
if mibBuilder.loadTexts: msanDslPsdMaskUsEntry.setStatus('current')
if mibBuilder.loadTexts: msanDslPsdMaskUsEntry.setDescription('Description.')
msanDslPsdMaskUsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanDslPsdMaskUsName.setStatus('current')
if mibBuilder.loadTexts: msanDslPsdMaskUsName.setDescription('Upstream custom PSD mask name.')
msanDslPsdMaskUsType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("configured", 2))).clone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslPsdMaskUsType.setStatus('current')
if mibBuilder.loadTexts: msanDslPsdMaskUsType.setDescription('Downstream custom PSD mask type. Possible values: default(1) - Default mask prepared by vendor, user is not allowed to delete or change it configured(2) - Mask created by user')
msanDslPsdMaskUsShape = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 5, 1, 3), Xdsl2PsdMaskUs().clone(hexValue="0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDslPsdMaskUsShape.setStatus('current')
if mibBuilder.loadTexts: msanDslPsdMaskUsShape.setDescription("The upstream PSD mask applicable at the U-R2 reference point. This parameter is used only for G.992.5, and it may impose PSD restrictions (breakpoints) in addition to the Limit PSD mask defined in G.992.5. This is a string of 16 pairs of values in the following structure: Octets 0-1 - Index of the first subcarrier used in the context of a first breakpoint. Octet 2 - The PSD reduction for the subcarrier indicated in octets 0 and 1. Octets 3-5 - Same, for a second breakpoint. Octets 6-8 - Same, for a third breakpoint. This architecture continues until octets 9-47, which are associated with a 16th breakpoint. Each subcarrier index is an unsigned number in the range 0 and NSCus-1. Each PSD reduction value is in the range 0 (0 dBm/Hz) to 255 (-127.5 dBm/Hz) with steps of 0.5 dBm/Hz. Valid values are in the range 0 to 190 (0 to -95 dBm/Hz). When the number of breakpoints is less than 16, all remaining octets are set to the value '0'. Note that the content of this object should be correlated with the subcarrier mask and with the RFI setup. ")
msanDslPsdMaskUsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDslPsdMaskUsRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanDslPsdMaskUsRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanDslSeltStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6), )
if mibBuilder.loadTexts: msanDslSeltStatusTable.setStatus('current')
if mibBuilder.loadTexts: msanDslSeltStatusTable.setDescription('Description.')
msanDslSeltStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanDslSeltStatusEntry.setStatus('current')
if mibBuilder.loadTexts: msanDslSeltStatusEntry.setDescription('Description.')
msanDslSeltStatusNoiseType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusNoiseType.setStatus('current')
if mibBuilder.loadTexts: msanDslSeltStatusNoiseType.setDescription('Noise type.')
msanDslSeltStatusNoiseMrgDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusNoiseMrgDs.setStatus('current')
if mibBuilder.loadTexts: msanDslSeltStatusNoiseMrgDs.setDescription('Noise margin in DS direction. [0.1 dB]')
msanDslSeltStatusNoiseMrgUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusNoiseMrgUs.setStatus('current')
if mibBuilder.loadTexts: msanDslSeltStatusNoiseMrgUs.setDescription('Noise margin in US direction. [0.1 dB]')
msanDslSeltStatusNumTonesDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusNumTonesDs.setStatus('current')
if mibBuilder.loadTexts: msanDslSeltStatusNumTonesDs.setDescription('Number of tones used for SELT in DS direction. ')
msanDslSeltStatusNumTonesUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusNumTonesUs.setStatus('current')
if mibBuilder.loadTexts: msanDslSeltStatusNumTonesUs.setDescription('Number of tones used for SELT in US direction. ')
msanDslSeltStatusMaxRateDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 6), Integer32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusMaxRateDs.setStatus('current')
if mibBuilder.loadTexts: msanDslSeltStatusMaxRateDs.setDescription('Maximum Downstream capacity [kbps]')
msanDslSeltStatusMaxRateUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 7), Integer32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusMaxRateUs.setStatus('current')
if mibBuilder.loadTexts: msanDslSeltStatusMaxRateUs.setDescription('Maximum Upstream capacity [kbps]')
msanDslSeltStatusCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusCableType.setStatus('current')
if mibBuilder.loadTexts: msanDslSeltStatusCableType.setDescription('DSL line loop type.')
msanDslSeltStatusCableLenght = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 9), Integer32()).setUnits('m').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusCableLenght.setStatus('current')
if mibBuilder.loadTexts: msanDslSeltStatusCableLenght.setDescription('DSL line loop lenght. [m]')
msanDslSeltStatusFitError = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 10), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusFitError.setStatus('current')
if mibBuilder.loadTexts: msanDslSeltStatusFitError.setDescription('DSL Line lenght fit error. [%]')
msanDslSeltStatusLoopTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 19, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("open", 2), ("short", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanDslSeltStatusLoopTermination.setStatus('current')
if mibBuilder.loadTexts: msanDslSeltStatusLoopTermination.setDescription('Type of DSL line termination. ')
msanPortMirroring = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20))
msanPortMirroringGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 1))
msanPortMirroringTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 2), )
if mibBuilder.loadTexts: msanPortMirroringTable.setStatus('current')
if mibBuilder.loadTexts: msanPortMirroringTable.setDescription('Description.')
msanPortMirroringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanPortMirroringSessionId"))
if mibBuilder.loadTexts: msanPortMirroringEntry.setStatus('current')
if mibBuilder.loadTexts: msanPortMirroringEntry.setDescription('Description.')
msanPortMirroringSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: msanPortMirroringSessionId.setStatus('current')
if mibBuilder.loadTexts: msanPortMirroringSessionId.setDescription('The Session number of this mirroring entry.')
msanPortMirroringAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortMirroringAdminState.setStatus('current')
if mibBuilder.loadTexts: msanPortMirroringAdminState.setDescription('The status of this port mirroring session. ')
msanPortMirroringDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortMirroringDestPort.setStatus('current')
if mibBuilder.loadTexts: msanPortMirroringDestPort.setDescription('The port which traffic from the mirrored ports will be sent to. Port value is ifIndex from ifTable. Value 0 means, port is not defined.')
msanPortMirroringMemberTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 3), )
if mibBuilder.loadTexts: msanPortMirroringMemberTable.setStatus('current')
if mibBuilder.loadTexts: msanPortMirroringMemberTable.setDescription('Description.')
msanPortMirroringMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanPortMirroringSessionId"), (0, "ISKRATEL-MSAN-MIB", "msanPortMirroringMemberSrcPort"))
if mibBuilder.loadTexts: msanPortMirroringMemberEntry.setStatus('current')
if mibBuilder.loadTexts: msanPortMirroringMemberEntry.setDescription('Description.')
msanPortMirroringMemberSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: msanPortMirroringMemberSrcPort.setStatus('current')
if mibBuilder.loadTexts: msanPortMirroringMemberSrcPort.setDescription('The port from which traffic will be sent to the destination port. ')
msanPortMirroringMemberDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tx", 1), ("rx", 2), ("txAndRx", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanPortMirroringMemberDirection.setStatus('current')
if mibBuilder.loadTexts: msanPortMirroringMemberDirection.setDescription('The direction of the data to be mirrored on this source port. ')
msanPortMirroringMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 20, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanPortMirroringMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanPortMirroringMemberRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. For row creation use createAndWait(5) [createAndGo(4) is not supported].')
msanResetWithDelay = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 21))
msanResetWithDelayGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 21, 1))
msanResetDelay = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanResetDelay.setStatus('current')
if mibBuilder.loadTexts: msanResetDelay.setDescription('Delay in seconds before reset will be performed. If set to 0, reset countdown is stopped and reset is cancelled. This parameter returns number of seconds before reset. If it returns 0, reset with delay was not initiated. ')
msanMacTable = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22))
msanMacTableGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22, 1))
msanMacTableLength = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanMacTableLength.setStatus('current')
if mibBuilder.loadTexts: msanMacTableLength.setDescription('Maximum number of MAC addresses (total length of MAC table). ')
msanMacTableUsed = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanMacTableUsed.setStatus('current')
if mibBuilder.loadTexts: msanMacTableUsed.setDescription('Number of entries in MAC table.')
msanMacTableCAMTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22, 2), )
if mibBuilder.loadTexts: msanMacTableCAMTable.setStatus('current')
if mibBuilder.loadTexts: msanMacTableCAMTable.setDescription('Description.')
msanMacTableCAMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMacTableCAMIndex"))
if mibBuilder.loadTexts: msanMacTableCAMEntry.setStatus('current')
if mibBuilder.loadTexts: msanMacTableCAMEntry.setDescription('Description.')
msanMacTableCAMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: msanMacTableCAMIndex.setStatus('current')
if mibBuilder.loadTexts: msanMacTableCAMIndex.setDescription('Id of the CAM entry.')
msanMacTableMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanMacTableMacAddress.setStatus('current')
if mibBuilder.loadTexts: msanMacTableMacAddress.setDescription('MAC address of the CAM entry. ')
msanMacTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanMacTablePort.setStatus('current')
if mibBuilder.loadTexts: msanMacTablePort.setDescription('The port on which MAC address was learned or defined. ')
msanMacTableVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanMacTableVLAN.setStatus('current')
if mibBuilder.loadTexts: msanMacTableVLAN.setDescription('VLAN id of the learned or defined MAC address. ')
msanMacTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 22, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("learned", 1), ("managment", 2), ("static", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanMacTableType.setStatus('current')
if mibBuilder.loadTexts: msanMacTableType.setDescription('Type of the MAC address. ')
msanAcs = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 23))
msanAcsGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 23, 1))
msanAcsServerUrl = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 23, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAcsServerUrl.setStatus('current')
if mibBuilder.loadTexts: msanAcsServerUrl.setDescription('This is URL of the ACS server in form: http://<IP_or_hostname>/acs. If hostname is used, msanDnsIpAddress and msanAcsDomainName must also be set. ')
msanPrimaryDnsIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 23, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPrimaryDnsIpAddress.setStatus('current')
if mibBuilder.loadTexts: msanPrimaryDnsIpAddress.setDescription('This specifies the primary DNS server IP . ')
msanSecondaryDnsIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 23, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSecondaryDnsIpAddress.setStatus('current')
if mibBuilder.loadTexts: msanSecondaryDnsIpAddress.setDescription('This specifies the secondary DNS server IP . ')
msanAcsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 23, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAcsDomainName.setStatus('current')
if mibBuilder.loadTexts: msanAcsDomainName.setDescription('Domain name. ')
msanAcsClientStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAcsClientStatus.setStatus('current')
if mibBuilder.loadTexts: msanAcsClientStatus.setDescription('ACS client administrative status.')
msanAcsBackupConf = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAcsBackupConf.setStatus('current')
if mibBuilder.loadTexts: msanAcsBackupConf.setDescription('Back up configuration (as CLI script) to ACS server.')
msanStp = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24))
msanStpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 1))
msanStpBpduFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 2), )
if mibBuilder.loadTexts: msanStpBpduFilterTable.setStatus('current')
if mibBuilder.loadTexts: msanStpBpduFilterTable.setDescription('Description.')
msanStpBpduFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanStpBpduFilterEntry.setStatus('current')
if mibBuilder.loadTexts: msanStpBpduFilterEntry.setDescription('Description.')
msanStpBpduFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanStpBpduFilter.setStatus('current')
if mibBuilder.loadTexts: msanStpBpduFilter.setDescription('Defines how BPDU packets are handled in case stp_port_state is disabled. 0 disable - If stp_port_state is disabled on interface, forward all BPDUs unchanged to all other interfaces that also have stp_port_state disabled. 1 enable - If stp_port_state is disabled on interface, drop all BPDUs received on the interface. ')
msanStpSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 3))
msanStpCstBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 3, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanStpCstBridgePriority.setStatus('current')
if mibBuilder.loadTexts: msanStpCstBridgePriority.setDescription('The CSTP bridge priority in instance 0. The priority is in the increments of 4096. The recommended default value is 32768.')
msanStpMstTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 4), )
if mibBuilder.loadTexts: msanStpMstTable.setReference('agentStpMstTable - 1.3.6.1.4.1.6132.1.1.1.2.15.10')
if mibBuilder.loadTexts: msanStpMstTable.setStatus('current')
if mibBuilder.loadTexts: msanStpMstTable.setDescription('Description.')
msanStpMstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 4, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanStpMstId"))
if mibBuilder.loadTexts: msanStpMstEntry.setStatus('current')
if mibBuilder.loadTexts: msanStpMstEntry.setDescription('Description.')
msanStpMstId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: msanStpMstId.setStatus('current')
if mibBuilder.loadTexts: msanStpMstId.setDescription('The MSTP instance ID. Instance 0 is not shown. ')
msanStpMstBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanStpMstBridgePriority.setStatus('current')
if mibBuilder.loadTexts: msanStpMstBridgePriority.setDescription('The MSTP bridge priority in a specific instance. The priority is in the increments of 4096. The recommended default value is 32768.')
msanStpMstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanStpMstRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanStpMstRowStatus.setDescription('The MSTP instance status. Instance 0 is not shown. Supported values: active(1) - valid instance. createAndGo(4) - used to create a new instance. destroy(6) - removes an instance.')
msanStpMstVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 5), )
if mibBuilder.loadTexts: msanStpMstVlanTable.setReference('agentStpMstTable - 1.3.6.1.4.1.6132.1.1.1.2.15.10')
if mibBuilder.loadTexts: msanStpMstVlanTable.setStatus('current')
if mibBuilder.loadTexts: msanStpMstVlanTable.setDescription('Description.')
msanStpMstVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 5, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "ISKRATEL-MSAN-MIB", "msanStpMstId"))
if mibBuilder.loadTexts: msanStpMstVlanEntry.setStatus('current')
if mibBuilder.loadTexts: msanStpMstVlanEntry.setDescription('Description.')
msanStpMstVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanStpMstVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanStpMstVlanRowStatus.setDescription('The association status of an MSTP instance and a VLAN. Instance 0 is not shown. Supported values: active(1) - valid association between an MSTP instance and a VLAN. createAndGo(4) - used to create a new association between an MSTP instance and a VLAN. destroy(6) - removes the association between an MSTP instance and a VLAN.')
msanStpMstPortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 6), )
if mibBuilder.loadTexts: msanStpMstPortTable.setReference('agentStpMstPortTable - 1.3.6.1.4.1.6132.1.1.1.2.15.11')
if mibBuilder.loadTexts: msanStpMstPortTable.setStatus('current')
if mibBuilder.loadTexts: msanStpMstPortTable.setDescription('MST port table.')
msanStpMstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanStpMstId"))
if mibBuilder.loadTexts: msanStpMstPortEntry.setStatus('current')
if mibBuilder.loadTexts: msanStpMstPortEntry.setDescription('MST port entry.')
msanStpMstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanStpMstPortPathCost.setStatus('current')
if mibBuilder.loadTexts: msanStpMstPortPathCost.setDescription('The MSTP port path cost in a specific instance. The default value will correspond to the recommendation specified in IEEE 802.1s Table 13-2 which varies depending upon link speed. Instance 0 is not shown.')
msanStpMstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanStpMstPortPriority.setStatus('current')
if mibBuilder.loadTexts: msanStpMstPortPriority.setDescription('The MSTP port priority in a specific instance. The priority is in the increments of 16. The default value is 128. Instance 0 is not shown.')
msanStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 7), )
if mibBuilder.loadTexts: msanStpPortTable.setStatus('current')
if mibBuilder.loadTexts: msanStpPortTable.setDescription('Description.')
msanStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanStpPortEntry.setStatus('current')
if mibBuilder.loadTexts: msanStpPortEntry.setDescription('Description.')
msanStpPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanStpPortHelloTime.setStatus('current')
if mibBuilder.loadTexts: msanStpPortHelloTime.setDescription('Hello time for the STP port. The default value is 0 (Not configured).')
msanStpCstPortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 8), )
if mibBuilder.loadTexts: msanStpCstPortTable.setStatus('current')
if mibBuilder.loadTexts: msanStpCstPortTable.setDescription('Description.')
msanStpCstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanStpCstPortEntry.setStatus('current')
if mibBuilder.loadTexts: msanStpCstPortEntry.setDescription('Description.')
msanStpCstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanStpCstPortPathCost.setStatus('current')
if mibBuilder.loadTexts: msanStpCstPortPathCost.setDescription('The MSTP port path cost in CIST. The default value will correspond to the recommendation specified in IEEE 802.1s Table 13-2 which varies depending upon link speed. ')
msanStpCstExtPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 24, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanStpCstExtPortPathCost.setStatus('current')
if mibBuilder.loadTexts: msanStpCstExtPortPathCost.setDescription('The MSTP external port path cost in CIST. The default value varies depending upon the link speed.')
msanAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 25))
msanAuthenticationGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 25, 1))
msanAuthenticationListCreate = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 25, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAuthenticationListCreate.setStatus('deprecated')
if mibBuilder.loadTexts: msanAuthenticationListCreate.setDescription('Authentication List Create If set to a non empty string, creates a new Authentication List for configuration.')
msanAuthenticationListTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 25, 3), )
if mibBuilder.loadTexts: msanAuthenticationListTable.setStatus('current')
if mibBuilder.loadTexts: msanAuthenticationListTable.setDescription('Description.')
msanAuthenticationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 25, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanAuthenticationListName"))
if mibBuilder.loadTexts: msanAuthenticationListEntry.setStatus('current')
if mibBuilder.loadTexts: msanAuthenticationListEntry.setDescription('Description.')
msanAuthenticationListName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 25, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: msanAuthenticationListName.setStatus('current')
if mibBuilder.loadTexts: msanAuthenticationListName.setDescription('Authenticaiton List Name Unique name used to identify the Authentication List from other tables.')
msanAuthenticationListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 25, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("radius", 2), ("reject", 3), ("tacacs", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanAuthenticationListMethod1.setStatus('current')
if mibBuilder.loadTexts: msanAuthenticationListMethod1.setDescription('Authenticion List Method 1 Configures the first authentication method to use when this list is specified.')
msanAuthenticationListMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 25, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("local", 2), ("radius", 3), ("reject", 4), ("tacacs", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanAuthenticationListMethod2.setStatus('current')
if mibBuilder.loadTexts: msanAuthenticationListMethod2.setDescription('Authenticion List Method 2 Configures the second authentication method to use when this list is specified.')
msanAuthenticationListMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 25, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("local", 2), ("radius", 3), ("reject", 4), ("tacacs", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanAuthenticationListMethod3.setStatus('current')
if mibBuilder.loadTexts: msanAuthenticationListMethod3.setDescription('Authenticion List Method 3 Configures the third authentication method to use when this list is specified.')
msanAuthenticationListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 25, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanAuthenticationListStatus.setStatus('current')
if mibBuilder.loadTexts: msanAuthenticationListStatus.setDescription('The status of the Authentication List. Supported values: active(1) - indicates a valid Authenticaiton List createAndGo (4) destroy(6) - removes the Authentication List.')
msanPortSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26))
msanPortSecurityGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 1))
msanPortSecurityStatMacTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 2), )
if mibBuilder.loadTexts: msanPortSecurityStatMacTable.setStatus('current')
if mibBuilder.loadTexts: msanPortSecurityStatMacTable.setDescription('Description.')
msanPortSecurityStatMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanPortSecurityStatMacIf"), (0, "ISKRATEL-MSAN-MIB", "msanPortSecurityStatMacVlanId"), (0, "ISKRATEL-MSAN-MIB", "msanPortSecurityStatMacMacAddress"))
if mibBuilder.loadTexts: msanPortSecurityStatMacEntry.setStatus('current')
if mibBuilder.loadTexts: msanPortSecurityStatMacEntry.setDescription('Description.')
msanPortSecurityStatMacIf = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: msanPortSecurityStatMacIf.setStatus('current')
if mibBuilder.loadTexts: msanPortSecurityStatMacIf.setDescription('Unique numerical identification of the interface.')
msanPortSecurityStatMacVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: msanPortSecurityStatMacVlanId.setStatus('current')
if mibBuilder.loadTexts: msanPortSecurityStatMacVlanId.setDescription('VLAN identification.')
msanPortSecurityStatMacMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 2, 1, 3), MacAddress())
if mibBuilder.loadTexts: msanPortSecurityStatMacMacAddress.setStatus('current')
if mibBuilder.loadTexts: msanPortSecurityStatMacMacAddress.setDescription('Statically locked MAC addresses for port.')
msanPortSecurityStatMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanPortSecurityStatMacRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanPortSecurityStatMacRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanPortSecurityPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 3), )
if mibBuilder.loadTexts: msanPortSecurityPortVlanTable.setStatus('current')
if mibBuilder.loadTexts: msanPortSecurityPortVlanTable.setDescription('Description.')
msanPortSecurityPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanPortSecurityPortVlanEntry.setStatus('current')
if mibBuilder.loadTexts: msanPortSecurityPortVlanEntry.setDescription('Description.')
msanPortSecurityPortVlanDynamicLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortSecurityPortVlanDynamicLimit.setStatus('current')
if mibBuilder.loadTexts: msanPortSecurityPortVlanDynamicLimit.setDescription('The limit of dynamically learned MAC addresses per vlan on selected port. ')
msanPortSecurityPortVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 26, 3, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortSecurityPortVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanPortSecurityPortVlanRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. For row creation use createAndWait(5). For row activation use active(1). For row deletion use destroy(6). Other values are currently not supported.')
msanLag = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27))
msanLagGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 1))
msanLagDetailedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 2), )
if mibBuilder.loadTexts: msanLagDetailedConfigTable.setReference('agentLagDetailedConfigTable')
if mibBuilder.loadTexts: msanLagDetailedConfigTable.setStatus('current')
if mibBuilder.loadTexts: msanLagDetailedConfigTable.setDescription("A detailed table of the switch's LAG config entries. ")
msanLagDetailedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanLagDetailedLagIndex"), (0, "ISKRATEL-MSAN-MIB", "msanLagDetailedIfIndex"))
if mibBuilder.loadTexts: msanLagDetailedConfigEntry.setStatus('current')
if mibBuilder.loadTexts: msanLagDetailedConfigEntry.setDescription("Switch's LAG config entry")
msanLagDetailedLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: msanLagDetailedLagIndex.setStatus('current')
if mibBuilder.loadTexts: msanLagDetailedLagIndex.setDescription('LAG index')
msanLagDetailedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: msanLagDetailedIfIndex.setStatus('current')
if mibBuilder.loadTexts: msanLagDetailedIfIndex.setDescription('LAG port index')
msanLagDetailedPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanLagDetailedPortSpeed.setStatus('current')
if mibBuilder.loadTexts: msanLagDetailedPortSpeed.setDescription('LAG port speed. See agentPortType for a description and list of valid values.')
msanLagDetailedPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanLagDetailedPortStatus.setStatus('current')
if mibBuilder.loadTexts: msanLagDetailedPortStatus.setDescription('LAG port status. active(1) - Actively participating in the LAG. inactive(2) - Not participating in the LAG.')
msanLagDetailedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanLagDetailedRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanLagDetailedRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanLagTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 3), )
if mibBuilder.loadTexts: msanLagTable.setStatus('current')
if mibBuilder.loadTexts: msanLagTable.setDescription('Config table of additional LAG parameters.')
msanLagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanLagIndex"))
if mibBuilder.loadTexts: msanLagEntry.setStatus('current')
if mibBuilder.loadTexts: msanLagEntry.setDescription('Description.')
msanLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: msanLagIndex.setStatus('current')
if mibBuilder.loadTexts: msanLagIndex.setDescription('LAG index. Value corresponds to ifIndex for LAG interfaces in ifTable.')
msanLagMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanLagMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: msanLagMaxFrameSize.setDescription('This object identifies the currently configured maximum frame size value for this LAG interface. ')
msanLagDVlanTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 27, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanLagDVlanTagMode.setStatus('current')
if mibBuilder.loadTexts: msanLagDVlanTagMode.setDescription('Controls the Double Vlan Tag mode on this LAG interface.')
msanRadiusServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28))
msanRadiusServerGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28, 1))
msanRadiusServerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28, 2), )
if mibBuilder.loadTexts: msanRadiusServerConfigTable.setStatus('current')
if mibBuilder.loadTexts: msanRadiusServerConfigTable.setDescription('Table with information about Radius Authentication Server IP Addresses, port numbers and shared secret')
msanRadiusServerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanRadiusServerAddress"))
if mibBuilder.loadTexts: msanRadiusServerConfigEntry.setStatus('current')
if mibBuilder.loadTexts: msanRadiusServerConfigEntry.setDescription('Entry consisting of configuration data for a Radius Authentication Server.')
msanRadiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: msanRadiusServerAddress.setStatus('current')
if mibBuilder.loadTexts: msanRadiusServerAddress.setDescription('IP Address of the configured RADIUS server. This object cannot be changed after creation.')
msanRadiusServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanRadiusServerPort.setStatus('current')
if mibBuilder.loadTexts: msanRadiusServerPort.setDescription('Port number for the RADIUS server.')
msanRadiusServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanRadiusServerSecret.setStatus('current')
if mibBuilder.loadTexts: msanRadiusServerSecret.setDescription('Configured shared sercret for the RADIUS server.')
msanRadiusServerPrimaryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanRadiusServerPrimaryMode.setStatus('current')
if mibBuilder.loadTexts: msanRadiusServerPrimaryMode.setDescription('Configure the RADIUS server to be the primary server. If there is any other server that is configured to be primary, that server is set to be a seconday server and this entry is set Primary.')
msanRadiusServerCurrentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanRadiusServerCurrentMode.setStatus('current')
if mibBuilder.loadTexts: msanRadiusServerCurrentMode.setDescription('Indicate if the RADIUS server is the current server in user for authentication.')
msanRadiusServerMsgAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanRadiusServerMsgAuth.setStatus('current')
if mibBuilder.loadTexts: msanRadiusServerMsgAuth.setDescription('Enable or disable the message authenticator attribute for this RADIUS server.')
msanRadiusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 28, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanRadiusServerStatus.setStatus('current')
if mibBuilder.loadTexts: msanRadiusServerStatus.setDescription('Creates or destroys a RADIUS Authentication server entry. active(1) - This entry is active. createAndGo(4) - Creates a new entry. destroy(6) - Deletes an entry.')
msanNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29))
msanNetworkGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 1))
msanNetworkIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanNetworkIPAddress.setStatus('current')
if mibBuilder.loadTexts: msanNetworkIPAddress.setDescription("The switch's network ip address")
msanNetworkSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanNetworkSubnetMask.setStatus('current')
if mibBuilder.loadTexts: msanNetworkSubnetMask.setDescription("The switch's network subnet mask")
msanNetworkDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanNetworkDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: msanNetworkDefaultGateway.setDescription("The switch's network default gateway")
msanNetworkDhcpSrvIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanNetworkDhcpSrvIpAddr.setStatus('current')
if mibBuilder.loadTexts: msanNetworkDhcpSrvIpAddr.setDescription('IP address of DHCP server used by DHCP client.')
msanNetworkDhcpSrvVendorSpecific = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanNetworkDhcpSrvVendorSpecific.setStatus('current')
if mibBuilder.loadTexts: msanNetworkDhcpSrvVendorSpecific.setDescription('DHCP client uses only vendor specific DHCP servers (when client sends opt. 60 to server, it should return expected vendor specific value in opt. 43)')
msanNetworkDhcpClientLeaseObtained = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanNetworkDhcpClientLeaseObtained.setStatus('current')
if mibBuilder.loadTexts: msanNetworkDhcpClientLeaseObtained.setDescription('The date and time when DHCP lease was obtained. ')
msanNetworkDhcpClientLeaseExpires = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanNetworkDhcpClientLeaseExpires.setStatus('current')
if mibBuilder.loadTexts: msanNetworkDhcpClientLeaseExpires.setDescription('The date and time for which the DHCP lease is valid.')
msanNetworkDhcpClientLocalOpt82 = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanNetworkDhcpClientLocalOpt82.setStatus('current')
if mibBuilder.loadTexts: msanNetworkDhcpClientLocalOpt82.setDescription('DHCP client adds relay agent information option into its own outgoing frames.')
msanNetworkDhcpClientVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 2), )
if mibBuilder.loadTexts: msanNetworkDhcpClientVlanTable.setStatus('current')
if mibBuilder.loadTexts: msanNetworkDhcpClientVlanTable.setDescription('DHCP client configuration per vlan id.')
msanNetworkDhcpClientVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 2, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanNetworkDhcpClientVlanEntry.setStatus('current')
if mibBuilder.loadTexts: msanNetworkDhcpClientVlanEntry.setDescription('Description.')
msanNetworkDhcpClientVlanLocalOpt82 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 29, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanNetworkDhcpClientVlanLocalOpt82.setStatus('current')
if mibBuilder.loadTexts: msanNetworkDhcpClientVlanLocalOpt82.setDescription('DHCP client on specified vlan adds relay agent information option into its own outgoing frames.')
msanStormControl = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 30))
msanStormControlGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 30, 1))
msanPortStormControlTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 30, 2), )
if mibBuilder.loadTexts: msanPortStormControlTable.setStatus('current')
if mibBuilder.loadTexts: msanPortStormControlTable.setDescription('Description.')
msanPortStormControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 30, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanPortStormControlEntry.setStatus('current')
if mibBuilder.loadTexts: msanPortStormControlEntry.setDescription('Description.')
msanPortBroadcastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 30, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortBroadcastControlMode.setStatus('current')
if mibBuilder.loadTexts: msanPortBroadcastControlMode.setDescription('he switch config broadcast allows you to enable or disable broadcast storm recovery mode. When you specify Enable for Broadcast Storm Recovery and the broadcast traffic on any Ethernet port exceeds the configured threshold, the switch blocks (discards) the broadcast traffic. ')
msanPortBroadcastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 30, 2, 1, 2), Integer32()).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortBroadcastControlThreshold.setStatus('current')
if mibBuilder.loadTexts: msanPortBroadcastControlThreshold.setDescription('Specify the data rate at which broadcast storm control activates (packets per second)')
msanPortMulticastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 30, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortMulticastControlMode.setStatus('current')
if mibBuilder.loadTexts: msanPortMulticastControlMode.setDescription('The switch config multicast allows you to enable or disable multicast storm recovery mode. When you specify Enable for multicast Storm Recovery and the multicast traffic on any Ethernet port exceeds the configured threshold, the switch blocks (discards) the multicast traffic')
msanPortMulticastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 30, 2, 1, 4), Integer32()).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortMulticastControlThreshold.setStatus('current')
if mibBuilder.loadTexts: msanPortMulticastControlThreshold.setDescription('Specify the data rate at which multicast storm control activates (packets per second)')
msanPortUnicastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 30, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortUnicastControlMode.setStatus('current')
if mibBuilder.loadTexts: msanPortUnicastControlMode.setDescription('The switch config unicast allows you to enable or disable unicast storm recovery mode. When you specify Enable for unicast Storm Recovery and the unknown unicast traffic on any Ethernet port exceeds the configured threshold, the switch blocks (discards) the unknown unicast traffic. ')
msanPortUnicastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 30, 2, 1, 6), Integer32()).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortUnicastControlThreshold.setStatus('current')
if mibBuilder.loadTexts: msanPortUnicastControlThreshold.setDescription('Specify the data rate at which unicast storm control activates (packets per second)')
msanUserConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 31))
msanUserConfigGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 31, 1))
msanUserConfigCheckPassword = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 31, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanUserConfigCheckPassword.setStatus('current')
if mibBuilder.loadTexts: msanUserConfigCheckPassword.setDescription("Parameter is used to check user's password. String must be written in next format: user_name password First blank space is used as delimeter between user_name and password. If password is not valid or user is not configured, inconsistentValue(12)error code will be returned. ")
msanUserConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 31, 2), )
if mibBuilder.loadTexts: msanUserConfigTable.setStatus('current')
if mibBuilder.loadTexts: msanUserConfigTable.setDescription('Description.')
msanUserConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 31, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanUserIndex"))
if mibBuilder.loadTexts: msanUserConfigEntry.setStatus('current')
if mibBuilder.loadTexts: msanUserConfigEntry.setDescription('Description.')
msanUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 31, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: msanUserIndex.setStatus('current')
if mibBuilder.loadTexts: msanUserIndex.setDescription('User Config Index')
msanUserAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 31, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read", 1), ("write", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanUserAccessMode.setStatus('current')
if mibBuilder.loadTexts: msanUserAccessMode.setDescription('User Access Mode')
msanSfp = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32))
msanSfpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 1))
msanSfpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2), )
if mibBuilder.loadTexts: msanSfpInfoTable.setStatus('current')
if mibBuilder.loadTexts: msanSfpInfoTable.setDescription('Description.')
msanSfpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanSfpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: msanSfpInfoEntry.setDescription('Description.')
msanSfpInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("adminOff", 1), ("operational", 2), ("operWithAl", 3), ("loss", 4), ("notAvaliable", 5), ("presNoDiag", 6), ("notPresent", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoState.setStatus('current')
if mibBuilder.loadTexts: msanSfpInfoState.setDescription('Module state value on port. Ports which support SFP module are from 1 to 10 and from 15 to 28. State value adminOff means that specific port is administrative disabled and we can not read data from module on that port. Operational state means that SFP module is present and it works perfect. State operWithAl(operational with alarm) means that SFP module is present, but it works with internal alarms. Loss(Loss of signal) state means that SFP module is present but it have loss of signal. PresNoDiag(Present, no diagnostic) state means that SFP module is present but diagnostic is not supported. NotAvaliable state means that admin. mode of specific port has disabled value and SFP state is not avaliable. NotPresent state means that SFP module is not present. ')
msanSfpInfoInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sfp", 1), ("not", 2), ("no", 3), ("ad", 4), ("xfp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoInterfaceType.setStatus('current')
if mibBuilder.loadTexts: msanSfpInfoInterfaceType.setDescription('Transceiver(module) type. Module type can be SFP, NOT(mudule type is not SFP), NO(no module on port), AD(admin. disabled port) and XFP.')
msanSfpInfoNominalBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoNominalBitrate.setStatus('current')
if mibBuilder.loadTexts: msanSfpInfoNominalBitrate.setDescription('Module(SFP) nominal bitrate value measure in Mbit/s. If parameter is not available, value -1 is used.')
msanSfpInfoNominalRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoNominalRange.setStatus('current')
if mibBuilder.loadTexts: msanSfpInfoNominalRange.setDescription('Module(SFP) nominal range value. Nominal range value can support five different link lengths. Link length value and nominal range units are defined depends on value of nominal range. We can get link length value which can support 9/125 um fiber and nominal range measure in km units. We can get link length value which can support 9/125 um fiber and nominal range measure in 100m units. We can get link length value which can support 50/125 um fiber and nominal range measure in 10m units. We can get link length value which can support 62,5/125 um fiber and nominal range measure in 10m units. We can get link length value which can support cooper and nominal range measure in m units. ')
msanSfpInfoVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoVendor.setStatus('current')
if mibBuilder.loadTexts: msanSfpInfoVendor.setDescription('Module(SFP) vendor name.')
msanSfpInfoIeeeVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoIeeeVendorId.setStatus('current')
if mibBuilder.loadTexts: msanSfpInfoIeeeVendorId.setDescription('Module(SFP) vendor IEEE company ID. If parameter is not available, value -1 is used.')
msanSfpInfoPartNr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoPartNr.setStatus('current')
if mibBuilder.loadTexts: msanSfpInfoPartNr.setDescription('Module(SFP) part number.')
msanSfpInfoRevisionNr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoRevisionNr.setStatus('current')
if mibBuilder.loadTexts: msanSfpInfoRevisionNr.setDescription('Module(SFP) revision number.')
msanSfpInfoSerialNr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoSerialNr.setStatus('current')
if mibBuilder.loadTexts: msanSfpInfoSerialNr.setDescription('Module(SFP) serial number.')
msanSfpInfoManufacturingDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoManufacturingDate.setStatus('current')
if mibBuilder.loadTexts: msanSfpInfoManufacturingDate.setDescription('Module(SFP) manufacturing date.')
msanSfpInfoWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpInfoWavelength.setStatus('current')
if mibBuilder.loadTexts: msanSfpInfoWavelength.setDescription('Module(SFP) laser wavelength measure in nanometers. If parameter is not available, value -1 is used.')
msanSfpDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3), )
if mibBuilder.loadTexts: msanSfpDiagnosticsTable.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsTable.setDescription('Description.')
msanSfpDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanSfpDiagnosticsEntry.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsEntry.setDescription('Description.')
msanSfpDiagnosticsSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loss", 1), ("ok", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsSignal.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsSignal.setDescription('Module(SFP) signal value. If diagnostic for SFP module is supported than value can be OK(signal is ok) or loss(loss of signal), in the other case the value is set on notSupported becouse diagnostic is not supported(-1).')
msanSfpDiagnosticsTempCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTempCurrent.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsTempCurrent.setDescription('Current SFP module temperature value in [deg C]. If diagnostic is not supported for SFP module then current temperature is set on not supported value(-129). ')
msanSfpDiagnosticsTempMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTempMin.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsTempMin.setDescription('SFP module minimum temperature threshold limit in [deg C]. If diagnostic is not supported for SFP module then minimum temperature threshold limit is set on not supported value(-129). ')
msanSfpDiagnosticsTempMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTempMax.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsTempMax.setDescription('SFP module maximum temperature threshold limit in [deg C]. If diagnostic is not supported for SFP module then maximum temperature threshold limit is set on not supported value(-129). ')
msanSfpDiagnosticsVoltageCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 6), Integer32()).setUnits('0.01 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsVoltageCurrent.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsVoltageCurrent.setDescription('Current SFP module supply voltage value in [V]. If diagnostic is not supported for SFP module then current supply voltage is set on not supported value(-1). ')
msanSfpDiagnosticsVoltageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 7), Integer32()).setUnits('0.01 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsVoltageMin.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsVoltageMin.setDescription('SFP module minimum supply voltage threshold limit in [V]. If diagnostic is not supported for SFP module then minimum supply voltage threshold limit is set on not supported value(-1). ')
msanSfpDiagnosticsVoltageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 8), Integer32()).setUnits('0.01 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsVoltageMax.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsVoltageMax.setDescription('SFP module maximum supply voltage threshold limit in [V]. If diagnostic is not supported for SFP module then maximum supply voltage threshold limit is set on not supported value(-1). ')
msanSfpDiagnosticsTxBiasCrrCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 9), Integer32()).setUnits('0.01 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTxBiasCrrCurrent.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsTxBiasCrrCurrent.setDescription('Current SFP module Tx Bias Current value in [mA]. If diagnostic is not supported for SFP module then current Tx Bias Current is set on not supported value(-1). ')
msanSfpDiagnosticsTxBiasCrrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 10), Integer32()).setUnits('0.01 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTxBiasCrrMin.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsTxBiasCrrMin.setDescription('SFP module minimum Tx Bias Current threshold limit in [mA]. If diagnostic is not supported for SFP module then minimum Tx Bias Current threshold limit is set on not supported value(-1). ')
msanSfpDiagnosticsTxBiasCrrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 11), Integer32()).setUnits('0.01 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTxBiasCrrMax.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsTxBiasCrrMax.setDescription('SFP module maximum Tx Bias Current threshold limit in [mA]. If diagnostic is not supported for SFP module then maximum Tx Bias Current threshold limit is set on not supported value(-1). ')
msanSfpDiagnosticsTxPowerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 12), Integer32()).setUnits('0.01 mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTxPowerCurrent.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsTxPowerCurrent.setDescription('Current SFP module transmitted optical output power value in [mW]. If diagnostic is not supported for SFP module then current transmitted optical output power is set on not supported value(-1). ')
msanSfpDiagnosticsTxPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 13), Integer32()).setUnits('0.01 mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTxPowerMin.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsTxPowerMin.setDescription('SFP module minimum transmitted optical output power threshold limit in [mW]. If diagnostic is not supported for SFP module then minimum transmitted optical output power is set on not supported value(-1). ')
msanSfpDiagnosticsTxPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 14), Integer32()).setUnits('0.01 mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTxPowerMax.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsTxPowerMax.setDescription('SFP module maximum transmitted optical output power threshold limit in [mW]. If diagnostic is not supported for SFP module then maximum transmitted optical output power is set on not supported value(-1).')
msanSfpDiagnosticsRxPowerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 15), Integer32()).setUnits('0.0001 mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsRxPowerCurrent.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsRxPowerCurrent.setDescription('Current SFP module received optical input power value in [mW]. If diagnostic is not supported for SFP module then current received optical input power is set on not supported value(-1). ')
msanSfpDiagnosticsRxPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 16), Integer32()).setUnits('0.0001 mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsRxPowerMin.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsRxPowerMin.setDescription('SFP module minimum received optical input power threshold limit in [mW]. If diagnostic is not supported for SFP module then minimum received optical input power is set on not supported value(-1). ')
msanSfpDiagnosticsRxPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 17), Integer32()).setUnits('0.0001 mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsRxPowerMax.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsRxPowerMax.setDescription('SFP module maximum received optical input power threshold limit in [mW]. If diagnostic is not supported for SFP module then maximum received optical input power is set on not supported value(-1). ')
msanSfpDiagnosticsTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sfpDiagNoAlarm", 1), ("sfpDiagAlarm", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTempStatus.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsTempStatus.setDescription('Temperature alarm status. ')
msanSfpDiagnosticsVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sfpDiagNoAlarm", 1), ("sfpDiagAlarm", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsVoltageStatus.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsVoltageStatus.setDescription('Voltage alarm status.')
msanSfpDiagnosticsTxBiasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sfpDiagNoAlarm", 1), ("sfpDiagAlarm", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTxBiasStatus.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsTxBiasStatus.setDescription('TX bias alarm status.')
msanSfpDiagnosticsTxPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sfpDiagNoAlarm", 1), ("sfpDiagAlarm", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsTxPowerStatus.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsTxPowerStatus.setDescription('TX power alarm status.')
msanSfpDiagnosticsRxPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 32, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sfpDiagNoAlarm", 1), ("sfpDiagAlarm", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSfpDiagnosticsRxPowerStatus.setStatus('current')
if mibBuilder.loadTexts: msanSfpDiagnosticsRxPowerStatus.setDescription('RX power alarm status.')
msanMacSg = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 34))
msanMacSgGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 34, 1))
msanMacSgStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 34, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacSgStatus.setStatus('current')
if mibBuilder.loadTexts: msanMacSgStatus.setDescription('Administrative state of MAC Source Guard on the system.')
msanMacSgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 34, 2), )
if mibBuilder.loadTexts: msanMacSgPortTable.setStatus('current')
if mibBuilder.loadTexts: msanMacSgPortTable.setDescription('Description.')
msanMacSgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 34, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanMacSgPortEntry.setStatus('current')
if mibBuilder.loadTexts: msanMacSgPortEntry.setDescription('Description.')
msanMacSgPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 34, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMacSgPortStatus.setStatus('current')
if mibBuilder.loadTexts: msanMacSgPortStatus.setDescription('Administrative state of MAC Source Guard on interface.')
msanMacSgPortViolationsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 34, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanMacSgPortViolationsCounter.setStatus('current')
if mibBuilder.loadTexts: msanMacSgPortViolationsCounter.setDescription('MAC Source Guard Violations counter')
msanErrorDisable = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35))
msanErrorDisableGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35, 1))
msanErrorDisableInterval = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35, 1, 1), Integer32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanErrorDisableInterval.setStatus('current')
if mibBuilder.loadTexts: msanErrorDisableInterval.setDescription('The interval in minutes that will pass since error-disabled interface will be enabled. This parameter has effect only if ErrorDisable Recovery is enabled. ')
msanErrorDisableMacSgDetectionStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanErrorDisableMacSgDetectionStatus.setStatus('current')
if mibBuilder.loadTexts: msanErrorDisableMacSgDetectionStatus.setDescription('Administrative state of ErrorDisable Detection for MAC Source Guard cause. If enabled, interface will be error-disabled when MAC Source Guard violation is detected. ')
msanErrorDisableMacSgRecoveryStatus = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanErrorDisableMacSgRecoveryStatus.setStatus('current')
if mibBuilder.loadTexts: msanErrorDisableMacSgRecoveryStatus.setDescription('Administrative state of ErrorDisable Recovery for MAC Source Guard cause. If enabled, interface will be automatically recovered when error-disabled due to MAC Source Guard violation.')
msanErrorDisablePortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35, 2), )
if mibBuilder.loadTexts: msanErrorDisablePortTable.setStatus('current')
if mibBuilder.loadTexts: msanErrorDisablePortTable.setDescription('Description.')
msanErrorDisablePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanErrorDisablePortEntry.setStatus('current')
if mibBuilder.loadTexts: msanErrorDisablePortEntry.setDescription('Description.')
msanErrorDisablePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular", 1), ("errorDisable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanErrorDisablePortStatus.setStatus('current')
if mibBuilder.loadTexts: msanErrorDisablePortStatus.setDescription('This parameter shows which interfaces are in errorDisable(2) recovery administrative state.')
msanErrorDisablePortCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanErrorDisablePortCause.setStatus('current')
if mibBuilder.loadTexts: msanErrorDisablePortCause.setDescription('Cause for errorDisable(2) status on interface.')
msanErrorDisablePortTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35, 2, 1, 3), Integer32()).setUnits('sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanErrorDisablePortTimeLeft.setStatus('current')
if mibBuilder.loadTexts: msanErrorDisablePortTimeLeft.setDescription('Time in seconds which defines how much time left for interface to stay in errorDisable(2) state.')
msanErrorDisablePortCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 35, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanErrorDisablePortCounter.setStatus('current')
if mibBuilder.loadTexts: msanErrorDisablePortCounter.setDescription('The number of times the specified interface has been in errorDisable(2) state.')
msanAdsl = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36))
msanAdslGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 1))
msanAdslAtucPhysExtnTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2), )
if mibBuilder.loadTexts: msanAdslAtucPhysExtnTable.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnTable.setDescription('This table provides one row for each ATUC. This table is an extention to adslAtucPhysTable defined in rfc-2662.')
msanAdslAtucPhysExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanAdslAtucPhysExtnEntry.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnEntry.setDescription('An entry (conceptual row) in the msanAdslAtucPhysExtnTable. The Table is indexed by ifIndex.')
msanAdslAtucPhysExtnOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 16, 24, 128, 131, 132, 26, 27, 8, 133, 46, 139, 140))).clone(namedValues=NamedValues(("idle", 0), ("data", 1), ("handshake", 16), ("training", 24), ("llTest", 128), ("dlTest", 131), ("txTest", 132), ("framerSync", 26), ("fastRetrainInProg", 27), ("bootupLoad", 8), ("atmLpTest", 133), ("discovery", 46), ("deltTraining", 139), ("delt", 140)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnOpState.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnOpState.setDescription('This object indicates the operational state of the ATU. Values include idle, handshake, training, etc.')
msanAdslAtucPhysExtnActualStd = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 9, 48, 64, 26, 27, 28, 29, 30, 80))).clone(namedValues=NamedValues(("t1413", 0), ("gLite", 1), ("gDmt", 2), ("alctl14", 3), ("multimode", 4), ("adi", 5), ("alctl", 6), ("t1413auto", 9), ("adslPlus", 48), ("gspanPlus", 64), ("adsl2", 26), ("adsl2Plus", 27), ("readsl2", 28), ("adsl2Auto", 29), ("adsl2PlusAuto", 30), ("gspanPlusPlus", 80)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnActualStd.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnActualStd.setDescription('This object provides actual ATU-C configuration based on outcome of negotiation with ATU-R. In this case, the parameter provides actual standard used for the connection.')
msanAdslAtucPhysExtnBertError = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnBertError.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnBertError.setDescription('This object indicates the No. of bit errors detected during BERT.')
msanAdslAtucPhysExtnTxAtmCellCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnTxAtmCellCounter.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnTxAtmCellCounter.setDescription('This object Provides transmit ATM cell counter.')
msanAdslAtucPhysExtnRxAtmCellCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnRxAtmCellCounter.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnRxAtmCellCounter.setDescription('This object Provides receive ATM cell counter.')
msanAdslAtucPhysExtnStartProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnStartProgress.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnStartProgress.setDescription('This object provides current detailed start up information to be used for debugging.')
msanAdslAtucPhysExtnIdleBertError = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnIdleBertError.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnIdleBertError.setDescription('Number of bit errors.')
msanAdslAtucPhysExtnIdleBertCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnIdleBertCells.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnIdleBertCells.setDescription('Number of idle cells.')
msanAdslAtucPhysExtnBertSync = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 128))).clone(namedValues=NamedValues(("bertOutOfSync", 0), ("bertInSync", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnBertSync.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnBertSync.setDescription('Indicates if the Signal is in Sync or not.')
msanAdslAtucPhysExtnParametricTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("fail", 1), ("dspIfFail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnParametricTestResult.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnParametricTestResult.setDescription('Indicates the Result of the Parametric Test conducted on the Xcvr.')
msanAdslAtucPhysExtnSeltInfoValid = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32768, 33024, 33280))).clone(namedValues=NamedValues(("true", 1), ("notConnected", 32768), ("lostConnection", 33024), ("noResponseSeltEngine", 33280)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltInfoValid.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltInfoValid.setDescription('Indicates the information validity for the SELT operation conducted on the Xcvr.')
msanAdslAtucPhysExtnSeltLoopLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltLoopLen.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltLoopLen.setDescription('Indicates the LOOP Length in Feet once when the SELT information is valid on the Xcvr.')
msanAdslAtucPhysExtnSeltLoopEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("open", 0), ("short", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltLoopEnd.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltLoopEnd.setDescription('Indicates whether the loop is short or open once when the SELT information is valid on the Xcvr.')
msanAdslAtucPhysExtnSeltLoopGauge = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("greater26awg", -1), ("equal26awg", 0), ("equal24awg", 1), ("less26awg", 2), ("unknownAwg", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltLoopGauge.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltLoopGauge.setDescription('Indicates the LOOP wire_gauge information once when the SELT information is valid on the Xcvr.')
msanAdslAtucPhysExtnSeltUpShannonCap = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltUpShannonCap.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltUpShannonCap.setDescription('Indicates the LOOP Upstream Shannon Capacity (in bps) once when the SELT information is valid on the Xcvr.')
msanAdslAtucPhysExtnSeltDownShannonCap = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltDownShannonCap.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltDownShannonCap.setDescription('Indicates the LOOP Downstream Shannon Capacity (in bps) once when the SELT information is valid on the Xcvr.')
msanAdslAtucPhysExtnSeltInbandNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltInbandNoise.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltInbandNoise.setDescription('512 values that indicate inband noise length in dBM/Hz, covering both bands from 0 to 1.1 MHz.')
msanAdslAtucPhysExtnSeltTerminationResp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltTerminationResp.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltTerminationResp.setDescription('180 discrete values that indicate termination response magnitude from 0 to 18Kft.')
msanAdslAtucPhysExtnSeltUpMgnAtRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltUpMgnAtRate.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltUpMgnAtRate.setDescription('300 values that indicate SNR margin in dB/10 at a particular rate are provided, at 100K increments, up to 15 Mbps.')
msanAdslAtucPhysExtnSeltDownMgnAtRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltDownMgnAtRate.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSeltDownMgnAtRate.setDescription('300 values that indicate SNR margin in dB/10 at a particular rate are provided, at 100K increments, up to 15 Mbps.')
msanAdslAtucPhysExtnDataBoostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32768, 0))).clone(namedValues=NamedValues(("enabled", 32768), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDataBoostStatus.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDataBoostStatus.setDescription('This object indicates whether DataBoost is utilized for the connection.')
msanAdslAtucPhysExtnTestArray = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnTestArray.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnTestArray.setDescription('This object indicates the Parametric Test Array. Every Four octets refer to one element in this array of octets.')
msanAdslAtucPhysExtnChanPerfCD = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnChanPerfCD.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnChanPerfCD.setDescription('The near-end delineated total cell count performance parameter is a count of the total number of cells passed through the cell delineation and HEC function process operating on the ATM Data Path while in the SYNC state. (Not available for ADSL).')
msanAdslAtucPhysExtnChanPerfBE = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnChanPerfBE.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnChanPerfBE.setDescription('The near-end idle bit error count performance parameter is a count of the number of bit errors in the idle cell payload received in the ATM Data Path at the near-end. (Not available for ADSL).')
msanAdslAtucPhysExtnDeltHLINSCus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltHLINSCus.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltHLINSCus.setDescription('DELT-related parameter that provides the scale factor to be applied to the upstream Hlin(f) values.(Not available for ADSL and ADSL2plus).')
msanAdslAtucPhysExtnDeltHLINpsus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltHLINpsus.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltHLINpsus.setDescription('DELT-related parameter that provides an array of complex upstream Hlin(f) values in linear scale. (Not available for ADSL and ADSL2plus). Every two octets refer to one element in this array of octets.')
msanAdslAtucPhysExtnDeltHLOGMTus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltHLOGMTus.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltHLOGMTus.setDescription('DELT-related parameter that provides the number of symbols used to measure the upstream Hlog(f).(Not available for ADSL and ADSL2plus).')
msanAdslAtucPhysExtnDeltHLOGpsus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltHLOGpsus.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltHLOGpsus.setDescription('DELT-related parameter that provides an array of real upstream Hlog(f) values in dB. (Not available for ADSL and ADSL2plus). Every two octets refer to one element in this array of octets.')
msanAdslAtucPhysExtnDeltQLNMTus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltQLNMTus.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltQLNMTus.setDescription('DELT-related parameter that provides the number of symbols used to measure the upstream QLN(f) values. (Not available for ADSL and ADSL2plus).')
msanAdslAtucPhysExtnDeltQLNpsus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltQLNpsus.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltQLNpsus.setDescription('DELT-related parameter that provides an array of real upstream QLN(f) values in dB. (Not available for ADSL and ADSL2plus). Every two octets refer to one element in this array of octets.')
msanAdslAtucPhysExtnDeltLastTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("dmtatucg9941", 0), ("dmtatucquiet1", 1), ("dmtatuccomb1", 2), ("dmtatucquiet2", 3), ("dmtatuccomb2", 4), ("dmtatucicomb1", 5), ("dmtatuclineprob", 6), ("dmtatucquiet3", 7), ("dmtatuccomb3", 8), ("dmtatucicomb2", 9), ("dmtatucmsgfmt", 10), ("dmtatucmsgpcb", 11), ("dmtatucquiet4", 12), ("dmtatucreverb1", 13), ("dmtatuctref1", 14), ("dmtatucreverb2", 15), ("dmtatucect", 16), ("dmtatucreverb3", 17), ("dmtatuctref2", 18), ("dmtatucreverb4", 19), ("dmtatucsegue1", 20), ("dmtatucmsg1", 21), ("dmtatucreverb5", 22), ("dmtatucsegue2", 23), ("dmtatucmedley", 24), ("dmtatucexchmarker", 25), ("dmtatucmsg2", 26), ("dmtatucreverb6", 27), ("dmtatucsegue3", 28), ("dmtatucparams", 29), ("dmtatucreverb7", 30), ("dmtatucsegue4", 31), ("dmtatucshowtime", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltLastTxState.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltLastTxState.setDescription('DELT-related parameter that provides last successful transmitted initialization state by the ATU-C. (Not available for ADSL and ADSL2plus).')
msanAdslAtucPhysExtnPMState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("l0", 0), ("l2", 2), ("l3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnPMState.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnPMState.setDescription('Line Power Management State. (Not available for ADSL).')
msanAdslAtucPhysExtnChanPerfCU = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnChanPerfCU.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnChanPerfCU.setDescription(' The near-end user total cell count performance parameter is a count of the total number of cells in the ATM Data Path delivered at the V-C (for ATU-C) or T-R (for ATU-R) interface. (Not available for ADSL).')
msanAdslAtucPhysExtnExtendedPsdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnExtendedPsdStatus.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnExtendedPsdStatus.setDescription('Conexant parameter that indicates whether an extended upstream PSD is used - for G.Span Plus mode of operation only. Only supported for G.Span Plus, therefore this parameter is not valid for ADSL2/ADSL2plus modes of operation.')
msanAdslAtucPhysExtnChipVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnChipVersion.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnChipVersion.setDescription('Conexant parameter that indicates the DSP version number.')
msanAdslAtucPhysExtnPilotTone = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnPilotTone.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnPilotTone.setDescription('Conexant parameter that indicates the Pilot Tone Index.')
msanAdslAtucMSGds = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucMSGds.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucMSGds.setDescription('Indicates the Overhead Channel. This feature is not supported by DSLPHY as yet.')
msanAdslAtucPhysExtnPsdMaskMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 32768, 32771, 32772, 49152, 275, 291, 259))).clone(namedValues=NamedValues(("coMsk2", 0), ("flatMsk", 3), ("cabMsk2", 4), ("coMsk2Rfi", 32768), ("flatMskRfi", 32771), ("cabMsk2Rfi", 32772), ("coMsk2Rfi0", 49152), ("adsl2NonovlpM1", 275), ("adsl2NonovlpM2", 291), ("adsl2NonovlpFlat", 259)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnPsdMaskMode.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnPsdMaskMode.setDescription('Conexant parameter that indicates the actual Psd Mask currently being used.')
msanAdslAtucPhysExtnDeltSNRMTus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltSNRMTus.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltSNRMTus.setDescription('DELT-related parameter that provides the number of symbols used to measure the upstream SNR(f) values. (Not available for ADSL and ADSL2plus)')
msanAdslAtucPhysExtnDeltCurrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 17, 34, 68, 136, 0))).clone(namedValues=NamedValues(("success", 255), ("failedInsufficientCapacity", 17), ("failedCrcError", 34), ("failedTimeOut", 68), ("failedUnexpectedContent", 136), ("failedUnknown", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltCurrStatus.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnDeltCurrStatus.setDescription('This Conexant parameter indicates the current status of Atuc Line in DELT mode.')
msanAdslAtucSATN = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucSATN.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucSATN.setDescription('DELT-related parameter that provides the upstream signal attenuation (length = 4 bytes). (Not available for ADSL and ADSL2plus). For further details, Refer to Section 7.5.1.9 Revised Recommendation G.997.1.')
msanAdslAtucPhysExtnSystemVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 42), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSystemVendorId.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSystemVendorId.setDescription('Indicates the Vendor ID as inserted by the ATU-C in the Overhead Messages(ADSL2). Typically identifies the ATU-C system integrator which usually refers to the vendor of the smallest field-replaceable unit. ATU-C System Vendor ID may not be the same as ATU-C Vendor ID. It is not available for ADSL. This is string of 8 octets containing 2 octet country code , 4 octet vendor id and 2 octet vendor revision number.')
msanAdslAtucPhysExtnSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSelfTestResult.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnSelfTestResult.setDescription('Defines the ATU-C selftest result. The most significant octet is: 00 hex if the self-test passed or 01 hex if the self-test failed. Interpretation of the other octets is vendor discretionary and can be interpreted in combination with G.994.1 and system Vendor IDs. For further details, refer to Section 7.4.9 Revised Recommendation G.997.1.')
msanAdslAtucPhysExtnG9941VendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 44), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnG9941VendorId.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnG9941VendorId.setDescription('Indicates the Vendor ID as inserted by the ATU-C in the G.994.1 CL message. Typically identifies the vendor of the ATU-C G.994.1 functionality. This is string of 8 octets containing 2 octet country code , 4 octet vendor id and 2 octet vendor revision number. For further details, refer to Section 7.4.1 Revised Recommendation G.997.1.')
msanAdslAtucPhysExtnTsspsUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnTsspsUs.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnTsspsUs.setDescription('This parameter provides the Upstream Transmit Spectrum Shaping parameter expressed as the set of break points exchanged during G994.1. Each breakpoint consists in a subcarrier index and the associated shaping parameter. Value of this parameter is in range 0 - 127, in multiples of -0.5 dB. 127 is a special value indicating the subcarrier is not transmitted. It is available only for ADSL2/ADSL2plus.For further details, Refer to Section 7.5.1.21.5 Revised Recommendation G.997.1.')
msanAdslAtucPhysExtnActPsdUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnActPsdUs.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnActPsdUs.setDescription("This parameter defines the average upstream transmit power spectrum density over the used subcarriers delivered by the ATU-C at the U-C reference point, at the instant of measurement. It's value ranges from -90 to 0, in 0.1 dB/Hz steps. It is available only for ADSL2/ADSL2plus. For further details, Refer to Section 7.5.1.14 Revised Recommendation G.997.1.")
msanAdslAtucPhysExtnGainspsUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 47), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnGainspsUs.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnGainspsUs.setDescription('This parameter defines the upstream gains allocation table per subcarrier. It is an array of integer values in the 0 to 4093 range for subcarriers 0 to NSCus-1. The gain value is represented as a multiple of 1/512 on linear scale. It is supported for ADSL2/ADSl2plus only.')
msanAdslAtucPhysExtnStartBin = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnStartBin.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnStartBin.setDescription('This Gspan++ parameter indicates the start bin of the bit loading up array.')
msanAdslAtucPhysExtnStartupErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 65536, 2, 131072, 4, 262144))).clone(namedValues=NamedValues(("startupErrorCodeOk", 0), ("startupErrorCodeMaxnomPsdDs", 1), ("startupErrorCodeMaxnomPsdUs", 65536), ("startupErrorCodePsdMaskDs", 2), ("startupErrorCodePsdMaskUs", 131072), ("startupErrorCodeMaxnomAtpDs", 4), ("startupErrorCodeMaxnomAtpUs", 262144)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnStartupErrorCode.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnStartupErrorCode.setDescription('Conexant parameter which indicates the startup error code.')
msanAdslAtucPhysExtnBitSwapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnBitSwapCount.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnBitSwapCount.setDescription('This Conexant parameter indicates the bit swap count. It can read only in data mode')
msanAdslAtucPhysExtnModPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("flatRateCheck", 0), ("snrMeasure", 1), ("modRateCheck", 2), ("modShowtime", 3), ("flatShowtime", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAtucPhysExtnModPhase.setStatus('current')
if mibBuilder.loadTexts: msanAdslAtucPhysExtnModPhase.setDescription('Conexant parameter to monitor the status of MoD')
msanAdslLineExtnTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3), )
if mibBuilder.loadTexts: msanAdslLineExtnTable.setStatus('current')
if mibBuilder.loadTexts: msanAdslLineExtnTable.setDescription('This table includes common attributes describing both ends of the line. It is required for all ADSL physical interfaces. This Table is an extension to adslLineTable defined in rfc-2662.')
msanAdslLineExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanAdslLineExtnEntry.setStatus('current')
if mibBuilder.loadTexts: msanAdslLineExtnEntry.setDescription('An entry (conceptual row) in the msanAdslLineExtnTable. The Table is indexed by ifIndex.')
msanAdslLineExtnAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 5, 6, 7, 10, 26, 27, 30, 32, 8193, 8194, 8195, 8196, 8198, 8197, 4134, 101, 102, 2))).clone(namedValues=NamedValues(("startup", 0), ("spectrumReverb", 5), ("analogLb", 6), ("digitalLb", 7), ("atmLp", 10), ("spectrumMedley", 26), ("spectrumPilot", 27), ("spectrumCMtpr", 30), ("spectrumRMtpr", 32), ("hybridLossTest", 8193), ("rcvLinearityTest", 8194), ("rcvFilterTest", 8195), ("rcvPowerPerBinTest", 8196), ("idleNoisePerBinTest", 8198), ("totalIdleNoiseTest", 8197), ("selt", 4134), ("shutdown", 101), ("wakeup", 102), ("abortReq", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAdslLineExtnAction.setStatus('current')
if mibBuilder.loadTexts: msanAdslLineExtnAction.setDescription('this object indicates parameter that allows actions on a per line basis. These actions include abort, startup, and tests.')
msanAdslLineExtnUtopiaL2RxAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnUtopiaL2RxAddr.setStatus('current')
if mibBuilder.loadTexts: msanAdslLineExtnUtopiaL2RxAddr.setDescription('This object indicates UTOPIA Level 2 Rx address for a line.')
msanAdslLineExtnUtopiaL2TxAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnUtopiaL2TxAddr.setStatus('current')
if mibBuilder.loadTexts: msanAdslLineExtnUtopiaL2TxAddr.setDescription('This object indicates UTOPIA Level 2 Tx address for a line.')
msanAdslLineExtnTransAtucCap = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 4), Bits().clone(namedValues=NamedValues(("ansit1413", 0), ("etsi", 1), ("q9921PotsNonOverlapped", 2), ("q9921PotsOverlapped", 3), ("q9921IsdnNonOverlapped", 4), ("q9921isdnOverlapped", 5), ("q9921tcmIsdnNonOverlapped", 6), ("q9921tcmIsdnOverlapped", 7), ("q9922potsNonOverlapeed", 8), ("q9922potsOverlapped", 9), ("q9922tcmIsdnNonOverlapped", 10), ("q9922tcmIsdnOverlapped", 11), ("q9921tcmIsdnSymmetric", 12), ("adslPlusPotsNonOverlapped", 13), ("q9921GspanPlusPotsNonOverlapped", 31), ("q9921GspanPlusPotsOverlapped", 30), ("vdslNonOverlapped", 25), ("vdslOverlapped", 24), ("q9923Adsl2PotsOverlapped", 29), ("q9923Adsl2PotsNonOverlapped", 28), ("q9925Adsl2PlusPotsOverlapped", 27), ("q9925Adsl2PlusPotsNonOverlapped", 26), ("q9923Readsl2PotsOverlapped", 22), ("q9923Readsl2PotsNonOverlapped", 23), ("adslPlusPotsOverlapped", 18), ("q9921GspanPlusPlusPotsNonOverlapped", 20), ("q9921GspanPlusPlusPotsOverlapped", 21), ("q9923IsdnNonOverlapped", 34), ("q9923IsdnOverlapped", 35), ("q9925IsdnNonOverlapped", 42), ("q9925IsdnOverlapped", 43), ("q9923AnnexMPotsExtUsNonOverlapped", 56), ("q9923AnnexMPotsExtUsOverlapped", 57), ("q9925AnnexMPotsExtUsNonOverlapped", 60), ("q9925AnnexMPotsExtUsOverlapped", 61)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnTransAtucCap.setStatus('current')
if mibBuilder.loadTexts: msanAdslLineExtnTransAtucCap.setDescription('The transmission modes that the ATU-C is capable of supporting. The modes available are limited by the design of the equipment. REFERENCE Section 7.3.2 ITU G.997.1.')
msanAdslLineExtnTransAtucActual = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 5), Bits().clone(namedValues=NamedValues(("ansit1413", 0), ("etsi", 1), ("q9921PotsNonOverlapped", 2), ("q9921PotsOverlapped", 3), ("q9921IsdnNonOverlapped", 4), ("q9921isdnOverlapped", 5), ("q9921tcmIsdnNonOverlapped", 6), ("q9921tcmIsdnOverlapped", 7), ("q9922potsNonOverlapeed", 8), ("q9922potsOverlapped", 9), ("q9922tcmIsdnNonOverlapped", 10), ("q9922tcmIsdnOverlapped", 11), ("q9921tcmIsdnSymmetric", 12), ("adslPlusPotsNonOverlapped", 13), ("q9921GspanPlusPotsNonOverlapped", 31), ("q9921GspanPlusPotsOverlapped", 30), ("vdslNonOverlapped", 25), ("vdslOverlapped", 24), ("q9923Adsl2PotsOverlapped", 29), ("q9923Adsl2PotsNonOverlapped", 28), ("q9925Adsl2PlusPotsOverlapped", 27), ("q9925Adsl2PlusPotsNonOverlapped", 26), ("q9923Readsl2PotsOverlapped", 22), ("q9923Readsl2PotsNonOverlapped", 23), ("adslPlusPotsOverlapped", 18), ("q9921GspanPlusPlusPotsNonOverlapped", 20), ("q9921GspanPlusPlusPotsOverlapped", 21), ("q9923IsdnNonOverlapped", 34), ("q9923IsdnOverlapped", 35), ("q9925IsdnNonOverlapped", 42), ("q9925IsdnOverlapped", 43), ("q9923AnnexMPotsExtUsNonOverlapped", 56), ("q9923AnnexMPotsExtUsOverlapped", 57), ("q9925AnnexMPotsExtUsNonOverlapped", 60), ("q9925AnnexMPotsExtUsOverlapped", 61)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnTransAtucActual.setStatus('current')
if mibBuilder.loadTexts: msanAdslLineExtnTransAtucActual.setDescription('The transmission mode of the ATU-C. This object returns if there is no mode currently known. The initialization with the ATU-R will determine the mode used. REFERENCE Section 7.3.2 ITU G.997.1.')
msanAdslLineExtnClockType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4))).clone(namedValues=NamedValues(("oscillator", 0), ("crystal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnClockType.setStatus('current')
if mibBuilder.loadTexts: msanAdslLineExtnClockType.setDescription('This object indicates parameter to set use of either crystal or oscillator.')
msanAdslLineExtnLineDmtTrellis = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trellisOn", 1), ("trellisOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnLineDmtTrellis.setStatus('current')
if mibBuilder.loadTexts: msanAdslLineExtnLineDmtTrellis.setDescription('Parameter that indicates whether trellis coding has been enabled or disabled. Trellis coding should always be enabled for its clear performance advantage.')
msanAdslLineExtnTransAturCap = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 8), Bits().clone(namedValues=NamedValues(("ansit1413", 0), ("etsi", 1), ("q9921PotsNonOverlapped", 2), ("q9921PotsOverlapped", 3), ("q9921IsdnNonOverlapped", 4), ("q9921isdnOverlapped", 5), ("q9921tcmIsdnNonOverlapped", 6), ("q9921tcmIsdnOverlapped", 7), ("q9922potsNonOverlapeed", 8), ("q9922potsOverlapped", 9), ("q9922tcmIsdnNonOverlapped", 10), ("q9922tcmIsdnOverlapped", 11), ("q9921tcmIsdnSymmetric", 12), ("adslPlusPotsNonOverlapped", 13), ("q9921GspanPlusPotsNonOverlapped", 31), ("q9921GspanPlusPotsOverlapped", 30), ("vdslNonOverlapped", 25), ("vdslOverlapped", 24), ("q9923Adsl2PotsOverlapped", 29), ("q9923Adsl2PotsNonOverlapped", 28), ("q9925Adsl2PlusPotsOverlapped", 27), ("q9925Adsl2PlusPotsNonOverlapped", 26), ("q9923Readsl2PotsOverlapped", 22), ("q9923Readsl2PotsNonOverlapped", 23), ("adslPlusPotsOverlapped", 18), ("q9921GspanPlusPlusPotsNonOverlapped", 20), ("q9921GspanPlusPlusPotsOverlapped", 21), ("q9923IsdnNonOverlapped", 34), ("q9923IsdnOverlapped", 35), ("q9925IsdnNonOverlapped", 42), ("q9925IsdnOverlapped", 43), ("q9923AnnexMPotsExtUsNonOverlapped", 56), ("q9923AnnexMPotsExtUsOverlapped", 57), ("q9925AnnexMPotsExtUsNonOverlapped", 60), ("q9925AnnexMPotsExtUsOverlapped", 61)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnTransAturCap.setStatus('current')
if mibBuilder.loadTexts: msanAdslLineExtnTransAturCap.setDescription('The transmission modes that the ATU-R is capable of supporting. The modes available are limited by the design of the equipment.')
msanAdslLineExtnPMConfPMSF = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4))).clone(namedValues=NamedValues(("l3ToL0StateForce", 0), ("l0ToL2StateForce", 2), ("l3StateForce", 3), ("l2ToL0StateForce", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAdslLineExtnPMConfPMSF.setStatus('current')
if mibBuilder.loadTexts: msanAdslLineExtnPMConfPMSF.setDescription('PM-related parameter used by the ATU-C to force a change in the line state.(Not available for ADSL/ADSL2Plus).')
msanAdslLineExtnDeltConfLDSF = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inhibit", 0), ("force", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAdslLineExtnDeltConfLDSF.setStatus('current')
if mibBuilder.loadTexts: msanAdslLineExtnDeltConfLDSF.setDescription('DELT-related parameter used by the ATU-C to force the line into loop diagnostics mode.(Not available for ADSL and ADSL2plus).')
msanAdslLineExtnTransAtucConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 11), Bits().clone(namedValues=NamedValues(("ansit1413", 0), ("etsi", 1), ("q9921PotsNonOverlapped", 2), ("q9921PotsOverlapped", 3), ("q9921IsdnNonOverlapped", 4), ("q9921isdnOverlapped", 5), ("q9921tcmIsdnNonOverlapped", 6), ("q9921tcmIsdnOverlapped", 7), ("q9922potsNonOverlapeed", 8), ("q9922potsOverlapped", 9), ("q9922tcmIsdnNonOverlapped", 10), ("q9922tcmIsdnOverlapped", 11), ("q9921tcmIsdnSymmetric", 12), ("adslPlusPotsNonOverlapped", 13), ("q9921GspanPlusPotsNonOverlapped", 31), ("q9921GspanPlusPotsOverlapped", 30), ("q9923Adsl2PotsOverlapped", 29), ("q9923Adsl2PotsNonOverlapped", 28), ("q9925Adsl2PlusPotsOverlapped", 27), ("q9925Adsl2PlusPotsNonOverlapped", 26), ("q9923Readsl2PotsOverlapped", 22), ("q9923Readsl2PotsNonOverlapped", 23), ("adslPlusPotsOverlapped", 18), ("q9921GspanPlusPlusPotsNonOverlapped", 20), ("q9921GspanPlusPlusPotsOverlapped", 21), ("q9923IsdnNonOverlapped", 34), ("q9923IsdnOverlapped", 35), ("q9925IsdnNonOverlapped", 42), ("q9925IsdnOverlapped", 43), ("q9923AnnexMPotsExtUsNonOverlapped", 56), ("q9923AnnexMPotsExtUsOverlapped", 57), ("q9925AnnexMPotsExtUsNonOverlapped", 60), ("q9925AnnexMPotsExtUsOverlapped", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAdslLineExtnTransAtucConfig.setStatus('current')
if mibBuilder.loadTexts: msanAdslLineExtnTransAtucConfig.setDescription('The transmission modes that the ATU-C is capable of supporting. The modes available are limited by the design of the equipment. REFERENCE Section 7.3.2 ITU G.997.1.')
msanAdslLineExtnAtucCurrOutputPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnAtucCurrOutputPwr.setStatus('current')
if mibBuilder.loadTexts: msanAdslLineExtnAtucCurrOutputPwr.setDescription('This parameter indicates the measure of total output power transmitted by this ATU. The value of this parameter is dynamic and will also show the change in Tx power due to Power Management. For example, the value will decrease in L2 low power mode. This value can be negative')
msanAdslLineExtnAtucBinSNRMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnAtucBinSNRMargin.setStatus('current')
if mibBuilder.loadTexts: msanAdslLineExtnAtucBinSNRMargin.setDescription('This Conexant parameter is an array of upstream SNR Margin values in dB. Each array entry represents the SNR Margin value for particular sub carrier.')
msanAdslLineExtnUtopiaL2RxAddrSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnUtopiaL2RxAddrSecond.setStatus('current')
if mibBuilder.loadTexts: msanAdslLineExtnUtopiaL2RxAddrSecond.setDescription('Conexant parameter to set UTOPIA Level 2 Rx address for the secondary bearer channel in case of Dual Latency.')
msanAdslLineExtnUtopiaL2TxAddrSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnUtopiaL2TxAddrSecond.setStatus('current')
if mibBuilder.loadTexts: msanAdslLineExtnUtopiaL2TxAddrSecond.setDescription('Conexant parameter to set UTOPIA Level 2 Tx address for the secondary bearer channel in case of Dual Latency.')
msanAdslLineExtnDsBinSnrUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAdslLineExtnDsBinSnrUpdate.setStatus('current')
if mibBuilder.loadTexts: msanAdslLineExtnDsBinSnrUpdate.setDescription('Conexant parameter to enable or disable collection of downstream SNR bin status')
msanAdslLineExtnServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("multimode", 1), ("reserved", 2), ("t1413", 3), ("gDmt", 4), ("adsl2plus", 6), ("adsl2", 7), ("adsl2plusAutoAnnexM", 8), ("adsl2AutoAnnexM", 9), ("reAdsl2", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslLineExtnServiceType.setStatus('current')
if mibBuilder.loadTexts: msanAdslLineExtnServiceType.setDescription('The service type configured in ADSL configuration profile which applies for this line. Supported values: 1: multimode 2: reserved 3: T1_413 4: G.DMT 6: ADSL2+ 7: ADSL2 8: ADSL2+ AUTO[+Annex M] 9: ADSL2 AUTO[+Annex M] 10: READSL2')
msanAdslAturPhysExtnTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4), )
if mibBuilder.loadTexts: msanAdslAturPhysExtnTable.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturPhysExtnTable.setDescription('This table is an extention to adslAtucPhysTable defined in rfc-2662. This table provides one row for each ATUR. Each row contains the Physical Layer Parameters table for that ATUR.')
msanAdslAturPhysExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanAdslAturPhysExtnEntry.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturPhysExtnEntry.setDescription('An entry (conceptual row) in the msanAdslAturPhysExtnTable. The Table is indexed by ifIndex.')
msanAdslAturPhysExtnConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnConfig.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturPhysExtnConfig.setDescription('This object provides the upstream and downstream ATU-R configuration data, as defined in T1.413 i2, Sections 6.4, 6.6, 7.4, 7.6 and Table 27.')
msanAdslAturPhysExtnChanPerfCD = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnChanPerfCD.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturPhysExtnChanPerfCD.setDescription('The far-end delineated total cell count performance parameter is a count of the total number of cells passed through the cell delineation and HEC function process operating on the ATM Data Path while in the SYNC state.(Not available for ADSL).')
msanAdslAturPhysExtnChanPerfCU = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnChanPerfCU.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturPhysExtnChanPerfCU.setDescription('The far-end user total cell count performance parameter is a count of the total number of cells in the ATM Data Path delivered at the V-C (for ATU-C) or T-R (for ATUR) interface. (Not available for ADSL).')
msanAdslAturPhysExtnChanPerfBE = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnChanPerfBE.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturPhysExtnChanPerfBE.setDescription('The far-end idle bit error count performance parameter is a count of the number of bit errors in the idle cell payload received in the ATM Data Path at the far-end. (Not available for ADSL).')
msanAdslAturPhysExtnDeltHLINSCds = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnDeltHLINSCds.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturPhysExtnDeltHLINSCds.setDescription('DELT-related parameter that provides the scale factor to be applied to the downstream Hlin(f) values.(Not available for ADSL and ADSL2plus).')
msanAdslAturPhysExtnDeltHLINpsds = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnDeltHLINpsds.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturPhysExtnDeltHLINpsds.setDescription('DELT-related parameter that provides an array of complex downstream Hlin(f) values in linear scale. (Not available for ADSL and ADSL2plus). Every two octets refer to one element in this array of octets.')
msanAdslAturPhysExtnDeltHLOGMTds = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnDeltHLOGMTds.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturPhysExtnDeltHLOGMTds.setDescription('DELT-related parameter that provides the number of symbols used to measure the downstream Hlog(f). (Not available for ADSL and ADSL2plus).')
msanAdslAturPhysExtnDeltHLOGpsus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnDeltHLOGpsus.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturPhysExtnDeltHLOGpsus.setDescription('DELT-related parameter that provides an array of real downstream Hlog(f) values in dB. (Not available for ADSL and ADSL2plus).')
msanAdslAturPhysExtnDeltQLNMTds = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnDeltQLNMTds.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturPhysExtnDeltQLNMTds.setDescription('DELT-related parameter that provides the number of symbols used to measure the downstream QLN(f) values. (Not available for ADSL and ADSL2plus).')
msanAdslAturPhysExtnDeltQLNpsds = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnDeltQLNpsds.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturPhysExtnDeltQLNpsds.setDescription('DELT-related parameter that provides an array of real downstream QLN(f) values in dB. (Not available for ADSL and ADSL2plus). Every two octets refer to one element in this array of octets.')
msanAdslAturPhysExtnDeltLastTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("dmtaturg9941", 0), ("dmtaturquiet1", 1), ("dmtaturcomb1", 2), ("dmtaturquiet2", 3), ("dmtaturcomb2", 4), ("dmtaturicomb1", 5), ("dmtaturlineprob", 6), ("dmtaturquiet3", 7), ("dmtaturcomb3", 8), ("dmtaturicomb2", 9), ("dmtaturmsgfmt", 10), ("dmtaturmsgpcb", 11), ("dmtaturreverb1", 12), ("dmtaturquiet4", 13), ("dmtaturreverb2", 14), ("dmtaturquiet5", 15), ("dmtaturreverb3", 16), ("dmtaturect", 17), ("dmtaturreverb4", 18), ("dmtatursegue1", 19), ("dmtaturreverb5", 20), ("dmtatursegue2", 21), ("dmtaturmsg1", 22), ("dmtaturmedley", 23), ("dmtaturexchmarker", 24), ("dmtaturmsg2", 25), ("dmtaturreverb6", 26), ("dmtatursegue3", 27), ("dmtaturparams", 28), ("dmtaturreverb7", 29), ("dmtatursegue4", 30), ("dmtaturshowtime", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnDeltLastTxState.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturPhysExtnDeltLastTxState.setDescription('DELT-related parameter that provides last successful transmitted initialization state by the ATU-R. (Not available for ADSL and ADSL2plus).')
msanAdslAturMSGus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturMSGus.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturMSGus.setDescription('Indicates the Overhead Channel. This feature is not supported by DSLPHY as yet.')
msanAdslAturDeltSNRMTds = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturDeltSNRMTds.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturDeltSNRMTds.setDescription('DELT-related parameter that provides the number of symbols used to measure the downstream SNR(f) values. (Not available for ADSL and ADSL2plus)')
msanAdslAturSATN = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturSATN.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturSATN.setDescription('DELT-related parameter that provides the downtream signal attenuation (length = 4 bytes). (Not available for ADSL and ADSL2plus). For further details, Refer to Section 7.5.1.9 Revised Recommendation G.997.1.')
msanAdslAturPhysExtnSystemVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnSystemVendorId.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturPhysExtnSystemVendorId.setDescription('Indicates the Vendor ID as inserted by the ATU-R in the Embedded Operations Channel(ADSL). Typically identiies the ATU-R system integrator which usually refers to the vendor of the smallest field-replaceable unit. ATU-R System Vendor ID may not be the same as ATU-R G.994.1 Vendor ID. For ADSL2, provides the Vendor ID as inserted by the ATU-R in the Overhead Messages. It is not available for ADSL. This is string of 8 octets containing 2 octet country code , 4 octet vendor id and 2 octet vendor revision number.')
msanAdslAturPhysExtnGainspsDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnGainspsDs.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturPhysExtnGainspsDs.setDescription('This parameter defines the downstream gains allocation table per bin. For further details, Refer to Section 7.5.1.21.3 Revised Recommendation G.997.1. It is supported for ADSL2/ADSl2plus only.')
msanAdslAturPhysExtnSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnSelfTestResult.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturPhysExtnSelfTestResult.setDescription('Defines the ATU-R selftest result. The most significant octet is: 00 hex if the self-test passed or 01 hex if the self-test failed. Interpretation of the other octets is vendor discretionary and can be interpreted in combination with G.994.1 and system Vendor IDs. For further details, refer to Section 7.4.10 Revised Recommendation G.997.1.')
msanAdslAturPhysExtnG9941VendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnG9941VendorId.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturPhysExtnG9941VendorId.setDescription('Indicates the Vendor ID as inserted by the ATU-R in the G.994.1 CLR message.The G.994.1 Vendor ID typically identifies the vendor of the ATU-R G.994.1 functionality. This is string of 8 octets containing 2 octet country code , 4 octet vendor id and 2 octet vendor revision number. For further details, refer to Section 7.4.2 Revised Recommendation G.997.1.')
msanAdslAturPhysExtnTsspsDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnTsspsDs.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturPhysExtnTsspsDs.setDescription('This parameter provides the Downstream Transmit Spectrum Shaping parameter expressed as the set of break points exchanged during G994.1. Value of this parameter is in range 0 - 127, in multiples of -0.5 dB. 127 is a special value indicating the subcarrier is not transmitted. It is available only for ADSL2/ADSL2plus. For further details, Refer to Section 7.5.1.21.5 Revised Recommendation G.997.1')
msanAdslAturPhysExtnActPsdDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnActPsdDs.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturPhysExtnActPsdDs.setDescription("This parameter defines the average downstream transmit power spectrum density over the used subcarriers delivered by the ATU-C at the U-C reference point, at the instant of measurement. It's value ranges from -90 to 0, in 0.1 dB/Hz steps. It is available only for ADSL2/ADSL2plus.For further details, Refer to Section 7.5.1.14 Revised Recommendation G.997.1.")
msanAdslAturPhysExtnBitSwapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnBitSwapCount.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturPhysExtnBitSwapCount.setDescription('This Conexant parameter indicates the bit swap count. It can read only in data mode')
msanAdslAturPhysExtnPsdMaskMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 36, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 32768, 32771, 32772, 49152, 275, 291, 259))).clone(namedValues=NamedValues(("coMsk2", 0), ("flatMsk", 3), ("cabMsk2", 4), ("coMsk2Rfi", 32768), ("flatMskRfi", 32771), ("cabMsk2Rfi", 32772), ("coMsk2Rfi0", 49152), ("adsl2NonovlpM1", 275), ("adsl2NonovlpM2", 291), ("adsl2NonovlpFlat", 259)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanAdslAturPhysExtnPsdMaskMode.setStatus('current')
if mibBuilder.loadTexts: msanAdslAturPhysExtnPsdMaskMode.setDescription('This conexant parameter that indicates the actual PSD Mask currently being used by ATU-R')
msanEaps = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37))
msanEapsGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 1))
msanEapsAdminState = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEapsAdminState.setStatus('current')
if mibBuilder.loadTexts: msanEapsAdminState.setDescription('Global EAPS administrative state.')
msanEapsDomainTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2), )
if mibBuilder.loadTexts: msanEapsDomainTable.setStatus('current')
if mibBuilder.loadTexts: msanEapsDomainTable.setDescription('EAPS domain configuration.')
msanEapsDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanEapsDomainName"))
if mibBuilder.loadTexts: msanEapsDomainEntry.setStatus('current')
if mibBuilder.loadTexts: msanEapsDomainEntry.setDescription('Description.')
msanEapsDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 12)))
if mibBuilder.loadTexts: msanEapsDomainName.setStatus('current')
if mibBuilder.loadTexts: msanEapsDomainName.setDescription('Description of the EAPS domain. Each msanEapsDomainName value in this table must be unique.')
msanEapsDomainDeviceRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("transit", 2))).clone('transit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEapsDomainDeviceRole.setStatus('current')
if mibBuilder.loadTexts: msanEapsDomainDeviceRole.setDescription('Role of the node in the EAPS domain (Master or Transit)')
msanEapsDomainHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEapsDomainHelloTime.setStatus('current')
if mibBuilder.loadTexts: msanEapsDomainHelloTime.setDescription('EAPS domain hello frame send interval. This value must be lower than msanEapsDomainFailTimeout')
msanEapsDomainFailTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 300)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEapsDomainFailTimeout.setStatus('current')
if mibBuilder.loadTexts: msanEapsDomainFailTimeout.setDescription('EAPS fail timeout. This value must be higher than msanEapsDomainHelloTime')
msanEapsDomainAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEapsDomainAdminState.setStatus('current')
if mibBuilder.loadTexts: msanEapsDomainAdminState.setDescription('EAPS domain administrative state. State can be changed from disable to enable only when all parameters in this table are defined.')
msanEapsDomainPrimaryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEapsDomainPrimaryIfIndex.setStatus('current')
if mibBuilder.loadTexts: msanEapsDomainPrimaryIfIndex.setDescription('EAPS primary interface. The value must be different from msanEapsSecondaryIfIndex. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex. ifType of selected interface can be ethernetCsmacd(6) or ieee8023adLag (161). This parameter can be undefined when EAPS domain is created and msanEapsDomainAdminState is disable. ')
msanEapsDomainSecondaryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEapsDomainSecondaryIfIndex.setStatus('current')
if mibBuilder.loadTexts: msanEapsDomainSecondaryIfIndex.setDescription('EAPS secondary interface. The value must be different from msanEapsPrimaryIfIndex. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex. ifType of selected interface can be ethernetCsmacd(6) or ieee8023adLag (161). This parameter can be undefined when EAPS domain is created and msanEapsDomainAdminState is disable. ')
msanEapsDomainCntrlVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEapsDomainCntrlVlanId.setStatus('current')
if mibBuilder.loadTexts: msanEapsDomainCntrlVlanId.setDescription('EAPS control VLAN ID. Selected VLAN ID must exists in dot1qVlanStaticTable. This parameter can be undefined when EAPS domain is created and msanEapsDomainAdminState is disable. ')
msanEapsDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanEapsDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanEapsDomainRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. For row creation use createAndWait(5) [createAndGo(4) is not supported]. If msanEapsDomainAdminState is disable, created row can be actived by row status object also when next parameters are not defined: - msanEapsDomainPrimaryifIndex - msanEapsDomainSecondaryifIndex - msanEapsDomainCntrlVlanId ')
msanEapsDomainProtVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 3), )
if mibBuilder.loadTexts: msanEapsDomainProtVlanTable.setStatus('current')
if mibBuilder.loadTexts: msanEapsDomainProtVlanTable.setDescription('List of protected VLANs for EAPS domain.')
msanEapsDomainProtVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanEapsDomainName"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanEapsDomainProtVlanEntry.setStatus('current')
if mibBuilder.loadTexts: msanEapsDomainProtVlanEntry.setDescription('Description.')
msanEapsDomainProtVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 37, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanEapsDomainProtVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanEapsDomainProtVlanRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanCpe = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38))
msanCpeGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 1))
msanCpeReset = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 1, 1), Unsigned32()).setUnits('ifIndex').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeReset.setStatus('current')
if mibBuilder.loadTexts: msanCpeReset.setDescription('Reset CPE equipment connected to selected interface index (ifIndex).')
msanCpeSendConfig = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 1, 2), Unsigned32()).setUnits('ifIndex').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeSendConfig.setStatus('current')
if mibBuilder.loadTexts: msanCpeSendConfig.setDescription('Apply configuration to CPE equipment connected to selected interface index (ifIndex).')
msanCpeApiMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanCpeApiMajorVersion.setStatus('current')
if mibBuilder.loadTexts: msanCpeApiMajorVersion.setDescription('CPE API major version information.')
msanCpeApiMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanCpeApiMinorVersion.setStatus('current')
if mibBuilder.loadTexts: msanCpeApiMinorVersion.setDescription('CPE API minor version information.')
msanCpeTypeTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 2), )
if mibBuilder.loadTexts: msanCpeTypeTable.setStatus('current')
if mibBuilder.loadTexts: msanCpeTypeTable.setDescription('List of possible CPE types.')
msanCpeTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanCpeTypeName"))
if mibBuilder.loadTexts: msanCpeTypeEntry.setStatus('current')
if mibBuilder.loadTexts: msanCpeTypeEntry.setDescription('Description.')
msanCpeTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: msanCpeTypeName.setStatus('current')
if mibBuilder.loadTexts: msanCpeTypeName.setDescription('Usage name of CPE model.')
msanCpeTypePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeTypePortNum.setStatus('current')
if mibBuilder.loadTexts: msanCpeTypePortNum.setDescription('Number of CPE user ports.')
msanCpeIntfTypeTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 3), )
if mibBuilder.loadTexts: msanCpeIntfTypeTable.setStatus('current')
if mibBuilder.loadTexts: msanCpeIntfTypeTable.setDescription('Tabel defines which CPE model can be connected to selected interface.')
msanCpeIntfTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanCpeTypeName"))
if mibBuilder.loadTexts: msanCpeIntfTypeEntry.setStatus('current')
if mibBuilder.loadTexts: msanCpeIntfTypeEntry.setDescription('Description.')
msanCpeIntfTypeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanCpeIntfTypeRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanCpeIntfTypeRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported. ')
msanCpeIntfTypeHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanCpeIntfTypeHwVersion.setStatus('current')
if mibBuilder.loadTexts: msanCpeIntfTypeHwVersion.setDescription('Connected CPE hardware version.')
msanCpeIntfTypeSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanCpeIntfTypeSwVersion.setStatus('current')
if mibBuilder.loadTexts: msanCpeIntfTypeSwVersion.setDescription('Connected CPE software version.')
msanCpeIntfPortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4), )
if mibBuilder.loadTexts: msanCpeIntfPortTable.setStatus('current')
if mibBuilder.loadTexts: msanCpeIntfPortTable.setDescription('Table of CPE ports parameters')
msanCpeIntfPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanCpeIntfPortId"))
if mibBuilder.loadTexts: msanCpeIntfPortEntry.setStatus('current')
if mibBuilder.loadTexts: msanCpeIntfPortEntry.setDescription('Description.')
msanCpeIntfPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: msanCpeIntfPortId.setStatus('current')
if mibBuilder.loadTexts: msanCpeIntfPortId.setDescription('CPE port ID (1 .. n).')
msanCpeIntfPortPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("fullPowerDown", 1), ("sleep", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeIntfPortPowerMode.setStatus('current')
if mibBuilder.loadTexts: msanCpeIntfPortPowerMode.setDescription('Power mode of the CPE port. When port is in Sleep(2) mode, automatic wake-up is also activated. ')
msanCpeIntfPortLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("autonegotiation", 0), ("speed100MbpsFD", 1), ("speed100MbpsHD", 2), ("speed10MbpsFD", 3), ("speed10MbpsHD", 4))).clone('autonegotiation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeIntfPortLinkMode.setStatus('current')
if mibBuilder.loadTexts: msanCpeIntfPortLinkMode.setDescription('Speed and duplex mode of the CPE port.')
msanCpeIntfPortPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeIntfPortPvid.setStatus('current')
if mibBuilder.loadTexts: msanCpeIntfPortPvid.setDescription('Default Vlan ID (pVID) for selected CPE port.')
msanCpeIntfPortCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeIntfPortCos.setStatus('current')
if mibBuilder.loadTexts: msanCpeIntfPortCos.setDescription('Default CoS bit settings for the CPE port.')
msanCpeIntfPortOverrideVid = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeIntfPortOverrideVid.setStatus('current')
if mibBuilder.loadTexts: msanCpeIntfPortOverrideVid.setDescription('When enable(1)VLAN ID of received tagged frame on selected CPE port is overwritten with default VLAN ID (msanCpeIntfPortPvid).')
msanCpeIntfPortOverrideCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeIntfPortOverrideCos.setStatus('current')
if mibBuilder.loadTexts: msanCpeIntfPortOverrideCos.setDescription('When enable(1)CoS value of received tagged frame on selected CPE port is overwritten with default CoS bit settings (msanCpeIntfPortCos).')
msanCpeIntfPortProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeIntfPortProtection.setStatus('current')
if mibBuilder.loadTexts: msanCpeIntfPortProtection.setDescription("If protection flag is set to protected (1), other profile values cannot be edited. Protection flag is always protected (1) and it can't be changed if profile is assigned as dynamic: msanAclProfileStatus = dynamic(2)")
msanCpeIntfPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanCpeIntfPortStatus.setStatus('current')
if mibBuilder.loadTexts: msanCpeIntfPortStatus.setDescription("Profile status. If status is dynamic, profile values can't be edited.")
msanCpeTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 5), )
if mibBuilder.loadTexts: msanCpeTrafficTable.setStatus('current')
if mibBuilder.loadTexts: msanCpeTrafficTable.setDescription('Description.')
msanCpeTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 5, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanCpeTrafficId"))
if mibBuilder.loadTexts: msanCpeTrafficEntry.setStatus('current')
if mibBuilder.loadTexts: msanCpeTrafficEntry.setDescription('Description.')
msanCpeTrafficId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: msanCpeTrafficId.setStatus('current')
if mibBuilder.loadTexts: msanCpeTrafficId.setDescription('Number identifying traffic configuration (1 .. n).')
msanCpeTrafficName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeTrafficName.setStatus('current')
if mibBuilder.loadTexts: msanCpeTrafficName.setDescription('Name identifying traffic configuration. Must be unique value.')
msanCpeTrafficSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('kbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeTrafficSpeed.setStatus('current')
if mibBuilder.loadTexts: msanCpeTrafficSpeed.setDescription('Maximum bitrate of services using this traffic configuration. Domain value is 0-100000kbit/s, where: - for speeds below 1Mbit/s step is 64kbit/s - for speeds above 1Mbit/s step is 1000kbit/s')
msanCpeTrafficFlowCntrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeTrafficFlowCntrlMode.setStatus('current')
if mibBuilder.loadTexts: msanCpeTrafficFlowCntrlMode.setDescription('Flow control mode. When enable(1) and speed is to be exceeded, device will send PAUSE flow control packet. If disable(2) packet will be just dropped.')
msanCpeTrafficRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanCpeTrafficRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanCpeTrafficRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. For row creation use createAndWait(5) [createAndGo(4) is not supported]. Setting this object to active(1) will activate this entry, if msanCpeTrafficName is defined. Setting this object to destroy(6) will remove this entry. ')
msanCpeTrafficProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeTrafficProtection.setStatus('current')
if mibBuilder.loadTexts: msanCpeTrafficProtection.setDescription("If protection flag is set to protected (1), other profile values cannot be edited. Protection flag is always protected (1) and it can't be changed if profile is assigned as dynamic: msanAclProfileStatus = dynamic(2)")
msanCpeTrafficStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanCpeTrafficStatus.setStatus('current')
if mibBuilder.loadTexts: msanCpeTrafficStatus.setDescription("Profile status. If status is dynamic, profile values can't be edited.")
msanCpeServiceTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6), )
if mibBuilder.loadTexts: msanCpeServiceTable.setStatus('current')
if mibBuilder.loadTexts: msanCpeServiceTable.setDescription('Description.')
msanCpeServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanCpeServiceId"))
if mibBuilder.loadTexts: msanCpeServiceEntry.setStatus('current')
if mibBuilder.loadTexts: msanCpeServiceEntry.setDescription('Description.')
msanCpeServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: msanCpeServiceId.setStatus('current')
if mibBuilder.loadTexts: msanCpeServiceId.setDescription('Number identifying service configuration (0 .. n).')
msanCpeServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeServiceName.setStatus('current')
if mibBuilder.loadTexts: msanCpeServiceName.setDescription('Name identifying service. Must be unique value.')
msanCpeServiceCVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeServiceCVlanId.setStatus('current')
if mibBuilder.loadTexts: msanCpeServiceCVlanId.setDescription('Customer VLAN ID, used for all frames belong to this service.')
msanCpeServiceCCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeServiceCCos.setStatus('current')
if mibBuilder.loadTexts: msanCpeServiceCCos.setDescription('CoS bit settings for all frames belonging to this service.')
msanCpeServiceTrafficId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeServiceTrafficId.setStatus('current')
if mibBuilder.loadTexts: msanCpeServiceTrafficId.setDescription('Reference to parameter msanCpeTrafficId (1 .. n), which identifies traffic configuration . Value 0 is used when traffic configuration is not defined.')
msanCpeServiceUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2)).clone(hexValue="0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeServiceUntaggedPorts.setStatus('current')
if mibBuilder.loadTexts: msanCpeServiceUntaggedPorts.setDescription('The set of ports (bitmask) which should transmit egress packets as untagged. When untagged frame is received on this ports set, appropriate default VLAN ID (msanCpeIntfPortPvid) and default CoS bits (msanCpeIntfPortCos) are set.')
msanCpeServiceTaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2)).clone(hexValue="0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeServiceTaggedPorts.setStatus('current')
if mibBuilder.loadTexts: msanCpeServiceTaggedPorts.setDescription('The set of ports (bitmask) where frames can be received only if they have appropriate Customer VLAN ID (msanCpeServiceCVlanId). Otherwise they are dropped. When transmitting frames to this set of ports, VLAN tags are not removed. ')
msanCpeServiceCMltcstMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disableIGMPprocessing", 0), ("igmpV2SnoopNormalLeave", 1), ("igmpV2SnoopFastLeave", 2))).clone('disableIGMPprocessing')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeServiceCMltcstMode.setStatus('current')
if mibBuilder.loadTexts: msanCpeServiceCMltcstMode.setDescription('Mode of multicast operation for this service.')
msanCpeServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanCpeServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanCpeServiceRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. For row creation use createAndWait(5) [createAndGo(4) is not supported]. Setting this object to active(1) will activate this entry, if msanCpeServiceName and msanCpeServiceTrafficId are defined. Setting this object to destroy(6) will remove this entry. ')
msanCpeServiceTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeServiceTypeName.setStatus('current')
if mibBuilder.loadTexts: msanCpeServiceTypeName.setDescription('Usage name of CPE model. Must be one of predefined msanCpeTypeName values.')
msanCpeServiceProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unprotected", 0), ("protected", 1))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanCpeServiceProtection.setStatus('current')
if mibBuilder.loadTexts: msanCpeServiceProtection.setDescription("If protection flag is set to protected (1), other profile values cannot be edited. Protection flag is always protected (1) and it can't be changed if profile is assigned as dynamic: msanAclProfileStatus = dynamic(2)")
msanCpeServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanCpeServiceStatus.setStatus('current')
if mibBuilder.loadTexts: msanCpeServiceStatus.setDescription("Profile status. If status is dynamic, profile values can't be edited.")
msanCpeIntfServiceTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 7), )
if mibBuilder.loadTexts: msanCpeIntfServiceTable.setStatus('current')
if mibBuilder.loadTexts: msanCpeIntfServiceTable.setDescription('This table links CPE ports on selected interface with appropriate service.')
msanCpeIntfServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanCpeServiceId"))
if mibBuilder.loadTexts: msanCpeIntfServiceEntry.setStatus('current')
if mibBuilder.loadTexts: msanCpeIntfServiceEntry.setDescription('Description.')
msanCpeIntfServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 38, 7, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanCpeIntfServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanCpeIntfServiceRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanBoard = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39))
msanBoardGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 1))
msanBoardReset = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanBoardReset.setStatus('current')
if mibBuilder.loadTexts: msanBoardReset.setDescription('Reset board in specified shelf slot ID (>0).')
msanBoardConfTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2), )
if mibBuilder.loadTexts: msanBoardConfTable.setStatus('current')
if mibBuilder.loadTexts: msanBoardConfTable.setDescription('Description.')
msanBoardConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanBoardConfNr"))
if mibBuilder.loadTexts: msanBoardConfEntry.setStatus('current')
if mibBuilder.loadTexts: msanBoardConfEntry.setDescription('Description.')
msanBoardConfNr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: msanBoardConfNr.setStatus('current')
if mibBuilder.loadTexts: msanBoardConfNr.setDescription('Unique identification of a board.')
msanBoardConfParentNr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanBoardConfParentNr.setStatus('current')
if mibBuilder.loadTexts: msanBoardConfParentNr.setDescription('Unique identification of a parent board.')
msanBoardConfPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanBoardConfPosition.setStatus('current')
if mibBuilder.loadTexts: msanBoardConfPosition.setDescription('Position of the board on the parent board. ')
msanBoardConfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardConfType.setStatus('current')
if mibBuilder.loadTexts: msanBoardConfType.setDescription('Type of physical board (e.g. IDC, SGO, SFA, ...). This value is automatically set according to msanBoardConfRequiredId.')
msanBoardConfRequiredId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanBoardConfRequiredId.setStatus('current')
if mibBuilder.loadTexts: msanBoardConfRequiredId.setDescription('Required identification of a board, which is one of available msanBoardListId values (e.g. UTA6041BA).')
msanBoardConfActualId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardConfActualId.setStatus('current')
if mibBuilder.loadTexts: msanBoardConfActualId.setDescription('Actual identification of a board (e.g. UTA6041BA050 - last three numbers define board version).')
msanBoardConfSerialNr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardConfSerialNr.setStatus('current')
if mibBuilder.loadTexts: msanBoardConfSerialNr.setDescription('Serial number of a board.')
msanBoardConfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanBoardConfDescription.setStatus('current')
if mibBuilder.loadTexts: msanBoardConfDescription.setDescription('Description of the board.')
msanBoardConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("boardPresentRunning", 1), ("boardPresentNotAccessible", 2), ("boardNotPresent", 3), ("boardPresentInitProcess", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardConfStatus.setStatus('current')
if mibBuilder.loadTexts: msanBoardConfStatus.setDescription('Physical status of configured board.')
msanBoardConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanBoardConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanBoardConfRowStatus.setDescription("The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. For row creation use createAndWait(5). For row activation use active(1). For row deactivation use notInService(2). For row deletion use destroy(6) (board with management interface can not be deleted). Other values are currently not supported. For row activation next terms must be accomplished: - all requested values (they don't have default definition) must be set - msanBoardConfId is one of available msanBoardListId values ")
msanBoardConfSwSteerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardConfSwSteerVersion.setStatus('current')
if mibBuilder.loadTexts: msanBoardConfSwSteerVersion.setDescription('The unique steer code of installed software. ')
msanBoardConfSwBuildDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardConfSwBuildDirectory.setStatus('current')
if mibBuilder.loadTexts: msanBoardConfSwBuildDirectory.setDescription('The directory where installed software was build on. ')
msanBoardConfSwBuildTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardConfSwBuildTime.setStatus('current')
if mibBuilder.loadTexts: msanBoardConfSwBuildTime.setDescription('The time when the installed software was built. (DateAndTime textual convention, from SNMPv2-TC) ')
msanBoardConfSwBranch = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardConfSwBranch.setStatus('current')
if mibBuilder.loadTexts: msanBoardConfSwBranch.setDescription('The repository branch where the installed software was built from.')
msanBoardConfSwBuildReference = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 2, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardConfSwBuildReference.setStatus('current')
if mibBuilder.loadTexts: msanBoardConfSwBuildReference.setDescription('The repository reference number of the installed software build branch. ')
msanBoardListTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 3), )
if mibBuilder.loadTexts: msanBoardListTable.setStatus('current')
if mibBuilder.loadTexts: msanBoardListTable.setDescription('Description.')
msanBoardListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanBoardListId"))
if mibBuilder.loadTexts: msanBoardListEntry.setStatus('current')
if mibBuilder.loadTexts: msanBoardListEntry.setDescription('Description.')
msanBoardListId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardListId.setStatus('current')
if mibBuilder.loadTexts: msanBoardListId.setDescription('Identification of supported board (e.g. UTA6041BA).')
msanBoardListType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 39, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanBoardListType.setStatus('current')
if mibBuilder.loadTexts: msanBoardListType.setDescription('Type of physical board (e.g. IDC, SGO, SFA, ...).')
msanFtpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 40))
msanFtpServerGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 40, 1))
msanFtpServerAdminState = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 40, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFtpServerAdminState.setStatus('current')
if mibBuilder.loadTexts: msanFtpServerAdminState.setDescription('FTP server administrative state.')
msanAppRateLimit = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41))
msanAppRateLimitGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 1))
msanAppRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2), )
if mibBuilder.loadTexts: msanAppRateLimitTable.setStatus('current')
if mibBuilder.loadTexts: msanAppRateLimitTable.setDescription('Description.')
msanAppRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanAppRateLimitEntry.setStatus('current')
if mibBuilder.loadTexts: msanAppRateLimitEntry.setDescription('Description.')
msanAppRateLimitDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('pps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAppRateLimitDhcp.setStatus('current')
if mibBuilder.loadTexts: msanAppRateLimitDhcp.setDescription('Maximum number of received DHCP packets in one second (pps) per interface. Value 0 defines there is no limit.')
msanAppRateLimitDhcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAppRateLimitDhcpState.setStatus('current')
if mibBuilder.loadTexts: msanAppRateLimitDhcpState.setDescription('Administrative state of DHCP traffic rate limiting.')
msanAppRateLimitPppoe = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('pps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAppRateLimitPppoe.setStatus('current')
if mibBuilder.loadTexts: msanAppRateLimitPppoe.setDescription('Maximum number of received PPPoE packets in one second (pps) per interface. Value 0 defines there is no limit.')
msanAppRateLimitPppoeState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAppRateLimitPppoeState.setStatus('current')
if mibBuilder.loadTexts: msanAppRateLimitPppoeState.setDescription('Administrative state of PPPoE traffic rate limiting.')
msanAppRateLimitIgmp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('pps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAppRateLimitIgmp.setStatus('current')
if mibBuilder.loadTexts: msanAppRateLimitIgmp.setDescription('Maximum number of received DHCP packets in one second (pps) per interface. Value 0 defines there is no limit.')
msanAppRateLimitIgmpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAppRateLimitIgmpState.setStatus('current')
if mibBuilder.loadTexts: msanAppRateLimitIgmpState.setDescription('Administrative state of IGMP traffic rate limiting.')
msanAppRateLimitStp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('pps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAppRateLimitStp.setStatus('current')
if mibBuilder.loadTexts: msanAppRateLimitStp.setDescription('Maximum number of received STP packets in one second (pps) per interface. Value 0 defines there is no limit.')
msanAppRateLimitStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAppRateLimitStpState.setStatus('current')
if mibBuilder.loadTexts: msanAppRateLimitStpState.setDescription('Administrative state of STP traffic rate limiting.')
msanAppRateLimitMn = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('pps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAppRateLimitMn.setStatus('current')
if mibBuilder.loadTexts: msanAppRateLimitMn.setDescription('Maximum number of received MN packets (management traffic) in one second (pps) per interface. Value 0 defines there is no limit.')
msanAppRateLimitMnState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 41, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanAppRateLimitMnState.setStatus('current')
if mibBuilder.loadTexts: msanAppRateLimitMnState.setDescription('Administrative state of MN traffic rate limiting.')
msanMlinec = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 50))
msanMlinecGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 50, 1))
msanMlinecAdminState = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 50, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMlinecAdminState.setStatus('current')
if mibBuilder.loadTexts: msanMlinecAdminState.setDescription('MLINEC (Multi-Link Network Connectivity) administrative state.')
msanMulticast = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100))
msanMulticastGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 1))
msanMulticastIntfStaticGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 2), )
if mibBuilder.loadTexts: msanMulticastIntfStaticGroupTable.setStatus('deprecated')
if mibBuilder.loadTexts: msanMulticastIntfStaticGroupTable.setDescription('The table attaches static multicast groups to the interfaces.')
msanMulticastIntfStaticGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanMulticastIntfStaticGroupIPAddr"))
if mibBuilder.loadTexts: msanMulticastIntfStaticGroupEntry.setStatus('deprecated')
if mibBuilder.loadTexts: msanMulticastIntfStaticGroupEntry.setDescription('Description.')
msanMulticastIntfStaticGroupIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: msanMulticastIntfStaticGroupIPAddr.setStatus('deprecated')
if mibBuilder.loadTexts: msanMulticastIntfStaticGroupIPAddr.setDescription('IP multicast address of valid multicast group.')
msanMulticastIntfStaticGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastIntfStaticGroupRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: msanMulticastIntfStaticGroupRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 3), )
if mibBuilder.loadTexts: msanMulticastGroupTable.setStatus('current')
if mibBuilder.loadTexts: msanMulticastGroupTable.setDescription('Description.')
msanMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 3, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "ISKRATEL-MSAN-MIB", "msanMulticastGroupIpAddr"))
if mibBuilder.loadTexts: msanMulticastGroupEntry.setStatus('current')
if mibBuilder.loadTexts: msanMulticastGroupEntry.setDescription('Description.')
msanMulticastGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: msanMulticastGroupIpAddr.setStatus('current')
if mibBuilder.loadTexts: msanMulticastGroupIpAddr.setDescription('IP multicast address of valid multicast group.')
msanMulticastGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastGroupName.setStatus('current')
if mibBuilder.loadTexts: msanMulticastGroupName.setDescription('Name of multicast group. ')
msanMulticastGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanMulticastGroupRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. For row creation use createAndWait(5) [createAndGo(4) is not supported].')
msanMulticastAclListTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 4), )
if mibBuilder.loadTexts: msanMulticastAclListTable.setStatus('deprecated')
if mibBuilder.loadTexts: msanMulticastAclListTable.setDescription('The table below assigns the symbolic names to the specific multicast ACLs.')
msanMulticastAclListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 4, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMulticastAclListId"))
if mibBuilder.loadTexts: msanMulticastAclListEntry.setStatus('deprecated')
if mibBuilder.loadTexts: msanMulticastAclListEntry.setDescription('Description.')
msanMulticastAclListId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: msanMulticastAclListId.setStatus('deprecated')
if mibBuilder.loadTexts: msanMulticastAclListId.setDescription('Multicast List id. Integer from 0 to 255. ')
msanMulticastAclListName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 4, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastAclListName.setStatus('deprecated')
if mibBuilder.loadTexts: msanMulticastAclListName.setDescription('ACL list symbolic name. Should be unique.')
msanMulticastAclListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastAclListRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: msanMulticastAclListRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. For row creation use createAndWait(5). For row activation use active(1). For row deletion use destroy(6). Other values are currently not supported.')
msanMulticastAclListGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 5), )
if mibBuilder.loadTexts: msanMulticastAclListGroupTable.setStatus('deprecated')
if mibBuilder.loadTexts: msanMulticastAclListGroupTable.setDescription('The table below links the multicast groups to the ACL.')
msanMulticastAclListGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 5, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMulticastAclListId"), (0, "ISKRATEL-MSAN-MIB", "msanMulticastAclGroupIpAddr"))
if mibBuilder.loadTexts: msanMulticastAclListGroupEntry.setStatus('deprecated')
if mibBuilder.loadTexts: msanMulticastAclListGroupEntry.setDescription('Description.')
msanMulticastAclGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: msanMulticastAclGroupIpAddr.setStatus('deprecated')
if mibBuilder.loadTexts: msanMulticastAclGroupIpAddr.setDescription('IP multicast address of valid ACL multicast group.')
msanMulticastAclListGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastAclListGroupRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: msanMulticastAclListGroupRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanMulticastAclIntfListTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 6), )
if mibBuilder.loadTexts: msanMulticastAclIntfListTable.setStatus('deprecated')
if mibBuilder.loadTexts: msanMulticastAclIntfListTable.setDescription('The table below assigns the multicast ACL to the interfaces')
msanMulticastAclIntfListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanMulticastAclListId"))
if mibBuilder.loadTexts: msanMulticastAclIntfListEntry.setStatus('deprecated')
if mibBuilder.loadTexts: msanMulticastAclIntfListEntry.setDescription('Description.')
msanMulticastAclIntfListMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastAclIntfListMode.setStatus('deprecated')
if mibBuilder.loadTexts: msanMulticastAclIntfListMode.setDescription('Defines the mode in which interface for specified ACL list works. ')
msanMulticastAclIntfListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastAclIntfListRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: msanMulticastAclIntfListRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. For row creation use createAndWait(5). For row activation use active(1). For row deletion use destroy(6). Other values are currently not supported.')
msanMulticastAclListVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 7), )
if mibBuilder.loadTexts: msanMulticastAclListVlanGroupTable.setStatus('deprecated')
if mibBuilder.loadTexts: msanMulticastAclListVlanGroupTable.setDescription('The table below links the multicast groups to the ACL.')
msanMulticastAclListVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 7, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMulticastAclListId"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "ISKRATEL-MSAN-MIB", "msanMulticastAclListVlanGroupIpAddr"))
if mibBuilder.loadTexts: msanMulticastAclListVlanGroupEntry.setStatus('deprecated')
if mibBuilder.loadTexts: msanMulticastAclListVlanGroupEntry.setDescription('Description.')
msanMulticastAclListVlanGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: msanMulticastAclListVlanGroupIpAddr.setStatus('deprecated')
if mibBuilder.loadTexts: msanMulticastAclListVlanGroupIpAddr.setDescription('IP multicast address of valid ACL multicast group.')
msanMulticastAclListVlanGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastAclListVlanGroupRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: msanMulticastAclListVlanGroupRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanMulticastIntfVlanStaticGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 8), )
if mibBuilder.loadTexts: msanMulticastIntfVlanStaticGroupTable.setStatus('current')
if mibBuilder.loadTexts: msanMulticastIntfVlanStaticGroupTable.setDescription('Description.')
msanMulticastIntfVlanStaticGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "ISKRATEL-MSAN-MIB", "msanMulticastIntfVlanStaticGroupIpAddr"))
if mibBuilder.loadTexts: msanMulticastIntfVlanStaticGroupEntry.setStatus('current')
if mibBuilder.loadTexts: msanMulticastIntfVlanStaticGroupEntry.setDescription('Description.')
msanMulticastIntfVlanStaticGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 8, 1, 1), IpAddress())
if mibBuilder.loadTexts: msanMulticastIntfVlanStaticGroupIpAddr.setStatus('current')
if mibBuilder.loadTexts: msanMulticastIntfVlanStaticGroupIpAddr.setDescription('IP multicast address of valid multicast group.')
msanMulticastIntfVlanStaticGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastIntfVlanStaticGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanMulticastIntfVlanStaticGroupRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanMulticastAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 9), )
if mibBuilder.loadTexts: msanMulticastAccessListTable.setStatus('current')
if mibBuilder.loadTexts: msanMulticastAccessListTable.setDescription('The table below assigns the symbolic names to the specific multicast ACLs.')
msanMulticastAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 9, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMulticastAccessListName"))
if mibBuilder.loadTexts: msanMulticastAccessListEntry.setStatus('current')
if mibBuilder.loadTexts: msanMulticastAccessListEntry.setDescription('Description.')
msanMulticastAccessListName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 9, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: msanMulticastAccessListName.setStatus('current')
if mibBuilder.loadTexts: msanMulticastAccessListName.setDescription('ACL list symbolic name. Should be unique.')
msanMulticastAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastAccessListRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanMulticastAccessListRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. For row creation use createAndGo(4). For row activation use active(1). For row deletion use destroy(6). Other values are currently not supported.')
msanMulticastAccessListGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 10), )
if mibBuilder.loadTexts: msanMulticastAccessListGroupTable.setStatus('current')
if mibBuilder.loadTexts: msanMulticastAccessListGroupTable.setDescription('The table below links the multicast addresses to the ACL list')
msanMulticastAccessListGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 10, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanMulticastAccessListName"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "ISKRATEL-MSAN-MIB", "msanMulticastAccessListGroupIpAddr"))
if mibBuilder.loadTexts: msanMulticastAccessListGroupEntry.setStatus('current')
if mibBuilder.loadTexts: msanMulticastAccessListGroupEntry.setDescription('Description.')
msanMulticastAccessListGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 10, 1, 1), IpAddress())
if mibBuilder.loadTexts: msanMulticastAccessListGroupIpAddr.setStatus('current')
if mibBuilder.loadTexts: msanMulticastAccessListGroupIpAddr.setDescription('IP multicast address of valid ACL multicast group.')
msanMulticastAccessListGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastAccessListGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanMulticastAccessListGroupRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanMulticastAccessListIntfTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 11), )
if mibBuilder.loadTexts: msanMulticastAccessListIntfTable.setStatus('current')
if mibBuilder.loadTexts: msanMulticastAccessListIntfTable.setDescription('The table below assigns the multicast ACL list to the interfaces')
msanMulticastAccessListIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanMulticastAccessListName"))
if mibBuilder.loadTexts: msanMulticastAccessListIntfEntry.setStatus('current')
if mibBuilder.loadTexts: msanMulticastAccessListIntfEntry.setDescription('Description.')
msanMulticastAccessListIntfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanMulticastAccessListIntfMode.setStatus('current')
if mibBuilder.loadTexts: msanMulticastAccessListIntfMode.setDescription('Defines the mode in which interface for specified ACL list works. ')
msanMulticastAccessListIntfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 11, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanMulticastAccessListIntfRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanMulticastAccessListIntfRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. For row creation use createAndWait(5). For row activation use active(1). For row deletion use destroy(6). Other values are currently not supported.')
msanSwitchMFDBTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 12), )
if mibBuilder.loadTexts: msanSwitchMFDBTable.setStatus('current')
if mibBuilder.loadTexts: msanSwitchMFDBTable.setDescription('The Multicast Forwarding Database table')
msanSwitchMFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 12, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanSwitchMFDBProtocolType"), (0, "ISKRATEL-MSAN-MIB", "msanSwitchMFDBVlanId"), (0, "ISKRATEL-MSAN-MIB", "msanSwitchMFDBMacAddress"))
if mibBuilder.loadTexts: msanSwitchMFDBEntry.setStatus('current')
if mibBuilder.loadTexts: msanSwitchMFDBEntry.setDescription('Contains Forwarding and Filtering information per Component User, Vlan Index, and MAC Address.')
msanSwitchMFDBProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("gmrp", 2), ("igmp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwitchMFDBProtocolType.setStatus('current')
if mibBuilder.loadTexts: msanSwitchMFDBProtocolType.setDescription('The component that is responsible for this entry in the Multicast Forwarding Database.')
msanSwitchMFDBVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 12, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwitchMFDBVlanId.setStatus('current')
if mibBuilder.loadTexts: msanSwitchMFDBVlanId.setDescription('Vlan Index for which this entry is associated with.')
msanSwitchMFDBMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 12, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwitchMFDBMacAddress.setStatus('current')
if mibBuilder.loadTexts: msanSwitchMFDBMacAddress.setDescription('A multicast MAC address for which the switch has forwarding and or filtering information.')
msanSwitchMFDBType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwitchMFDBType.setStatus('current')
if mibBuilder.loadTexts: msanSwitchMFDBType.setDescription('This displays the type of the entry. static(1) - Entries configured by the end user dynamic(2) - Entries added as a result of a learning process or protocol')
msanSwitchMFDBDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 12, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwitchMFDBDescription.setStatus('current')
if mibBuilder.loadTexts: msanSwitchMFDBDescription.setDescription('Text description of this multicast table entry.')
msanSwitchMFDBForwardingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 12, 1, 6), PortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwitchMFDBForwardingPortMask.setStatus('current')
if mibBuilder.loadTexts: msanSwitchMFDBForwardingPortMask.setDescription('BitMask indicating which ports this entry indicates should be forwarded. To obtain port numbers from interface numbers, use the objects agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable table.')
msanSwitchMFDBFilteringPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 100, 12, 1, 7), PortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSwitchMFDBFilteringPortMask.setStatus('current')
if mibBuilder.loadTexts: msanSwitchMFDBFilteringPortMask.setDescription('BitMask indicating which ports this entry indicates should be filtered. To obtain port numbers from interface numbers, use the objects agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable table.')
msanFiltering = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101))
msanFilteringGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 2))
msanFilteringFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 3), )
if mibBuilder.loadTexts: msanFilteringFilterTable.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringFilterTable.setDescription('Defines a list of filters.')
msanFilteringFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanFilteringFilterId"))
if mibBuilder.loadTexts: msanFilteringFilterEntry.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringFilterEntry.setDescription('Description.')
msanFilteringFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 64), ValueRangeConstraint(301, 500), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringFilterId.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringFilterId.setDescription('Filter identity.')
msanFilteringFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringFilterName.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringFilterName.setDescription('Name of filter to be shown.')
msanFilteringFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanFilteringFilterType.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringFilterType.setDescription('Type of filter (static or dynamic).')
msanFilteringFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 3, 1, 4), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanFilteringFilterRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringFilterRowStatus.setDescription('SNMP row status. Supported values: active(1) - valid entry; createAndGo(4) - used to create a new entry; destroy(6) - removes the entry.')
msanFilteringAssignFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 4), )
if mibBuilder.loadTexts: msanFilteringAssignFilterTable.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringAssignFilterTable.setDescription('This table defines a list of filters assigned to interface.')
msanFilteringAssignFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanFilteringFilterId"))
if mibBuilder.loadTexts: msanFilteringAssignFilterEntry.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringAssignFilterEntry.setDescription('Description.')
msanFilteringAssignFilterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringAssignFilterVid.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringAssignFilterVid.setDescription('ID of VLAN to be filtered.')
msanFilteringAssignFilterCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringAssignFilterCos.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringAssignFilterCos.setDescription('CoS value to be filtered.')
msanFilteringAssignFilterDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringAssignFilterDscp.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringAssignFilterDscp.setDescription('DSCP field.')
msanFilteringAssignFilterPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringAssignFilterPrec.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringAssignFilterPrec.setDescription('Precedence in DSCP tag.')
msanFilteringAssignFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 4, 1, 5), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanFilteringAssignFilterRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringAssignFilterRowStatus.setDescription('SNMP row status. Supported values: active(1) - valid entry; createAndGo(4) - used to create a new entry; destroy(6) - removes the entry.')
msanFilteringRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5), )
if mibBuilder.loadTexts: msanFilteringRuleTable.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleTable.setDescription('This table defines a list of filtering rules associated to filters.')
msanFilteringRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanFilteringRuleId"), (0, "ISKRATEL-MSAN-MIB", "msanFilteringFilterId"))
if mibBuilder.loadTexts: msanFilteringRuleEntry.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleEntry.setDescription('Description.')
msanFilteringRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanFilteringRuleId.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleId.setDescription('Filtering rule identity.')
msanFilteringRuleResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleResponse.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleResponse.setDescription('Filter response.')
msanFilteringRuleFromMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleFromMac.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleFromMac.setDescription('Source Ethernet address.')
msanFilteringRuleFromMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleFromMacMask.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleFromMacMask.setDescription('Source Ethernet address mask.')
msanFilteringRuleFromIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleFromIp.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleFromIp.setDescription('Source IP address.')
msanFilteringRuleFromMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleFromMask.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleFromMask.setDescription('Source IP address mask.')
msanFilteringRuleFromPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleFromPortLow.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleFromPortLow.setDescription('The lowest number of a source TCP or UDP port.')
msanFilteringRuleFromPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleFromPortHigh.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleFromPortHigh.setDescription('The highest number of a source TCP or UDP port..')
msanFilteringRuleToMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleToMac.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleToMac.setDescription('Destination Ethernet address.')
msanFilteringRuleToMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleToMacMask.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleToMacMask.setDescription('Destination Ethernet address mask.')
msanFilteringRuleToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleToIp.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleToIp.setDescription('Destination IP address.')
msanFilteringRuleToMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleToMask.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleToMask.setDescription('Destination IP address mask.')
msanFilteringRuleToPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleToPortLow.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleToPortLow.setDescription('The lowest number of a destination TCP or UDP port.')
msanFilteringRuleToPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleToPortHigh.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleToPortHigh.setDescription('The highest number of a destination TCP or UDP port.')
msanFilteringRuleEtherProto = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleEtherProto.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleEtherProto.setDescription('Ethernet protocol to be filtered.')
msanFilteringRuleIpProto = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleIpProto.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleIpProto.setDescription('IP protocol to be filtered.')
msanFilteringRuleIcmType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleIcmType.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleIcmType.setDescription('ICMP type. ICMP sends an error message to the transmitter of IP packets and provides information at IP packet processing.')
msanFilteringRulePrec = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRulePrec.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRulePrec.setDescription('Precedence in DSCP tag.')
msanFilteringRuleTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleTos.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleTos.setDescription('TOS to be filtered.')
msanFilteringRuleVid = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleVid.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleVid.setDescription('ID of VLAN to be filtered.')
msanFilteringRuleCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleCos.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleCos.setDescription('CoS value to be filtered.')
msanFilteringRuleTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("untagged", 1), ("tagged", 2), ("qinq-tagged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringRuleTag.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleTag.setDescription('802.1Q tag.')
msanFilteringRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 5, 1, 23), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanFilteringRuleRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringRuleRowStatus.setDescription('SNMP row status. Supported values: active(1) - valid entry; createAndGo(4) - used to create a new entry; destroy(6) - removes the entry.')
msanFilteringAttachedFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 6), )
if mibBuilder.loadTexts: msanFilteringAttachedFilterTable.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringAttachedFilterTable.setDescription('This table defines information about filters attached to interface.')
msanFilteringAttachedFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanFilteringFilterId"))
if mibBuilder.loadTexts: msanFilteringAttachedFilterEntry.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringAttachedFilterEntry.setDescription('Description.')
msanFilteringAttachedFilterDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanFilteringAttachedFilterDirect.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringAttachedFilterDirect.setDescription('Point of attaching a filter.')
msanFilteringAttachedFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 101, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanFilteringAttachedFilterRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: msanFilteringAttachedFilterRowStatus.setDescription('SNMP row status. Supported values: active(1) - valid entry; createAndGo(4) - used to create a new entry; destroy(6) - removes the entry.')
msanBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 102))
msanBridgeGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 102, 1))
msanBridgeMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 102, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridge", 1), ("ccx", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanBridgeMode.setStatus('deprecated')
if mibBuilder.loadTexts: msanBridgeMode.setDescription('A bridge operating mode. bridge(1) ccx(2) ')
msanBridgeMacTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 102, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanBridgeMacTableSize.setStatus('deprecated')
if mibBuilder.loadTexts: msanBridgeMacTableSize.setDescription('The maximum MAC table size')
msanBridgeRedAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 102, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanBridgeRedAdminMode.setStatus('deprecated')
if mibBuilder.loadTexts: msanBridgeRedAdminMode.setDescription('Enable or disable Random Early Discard functionality.')
msanBridgeCCXTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 102, 2), )
if mibBuilder.loadTexts: msanBridgeCCXTable.setStatus('deprecated')
if mibBuilder.loadTexts: msanBridgeCCXTable.setDescription('The table contents the information about all CCX pairs.')
msanBridgeCCXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 102, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanBridgeCCXInterface1"), (0, "ISKRATEL-MSAN-MIB", "msanBridgeCCXInterface2"))
if mibBuilder.loadTexts: msanBridgeCCXEntry.setStatus('deprecated')
if mibBuilder.loadTexts: msanBridgeCCXEntry.setDescription('Description.')
msanBridgeCCXInterface1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 102, 2, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanBridgeCCXInterface1.setStatus('deprecated')
if mibBuilder.loadTexts: msanBridgeCCXInterface1.setDescription('The first interface to make cross-connection exchange')
msanBridgeCCXInterface2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 102, 2, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanBridgeCCXInterface2.setStatus('deprecated')
if mibBuilder.loadTexts: msanBridgeCCXInterface2.setDescription('The second interface to make cross-connection exchange')
msanBridgeCCXRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 102, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanBridgeCCXRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: msanBridgeCCXRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanIPSG = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103))
msanIPSGGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 1))
msanIPSGAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGAdminMode.setStatus('current')
if mibBuilder.loadTexts: msanIPSGAdminMode.setDescription('Enable/disable IPv4 source guard for all interfaces')
msanIPSGStoreAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGStoreAdminMode.setStatus('current')
if mibBuilder.loadTexts: msanIPSGStoreAdminMode.setDescription('Enable/disable storing of the IP-MAC binds to the interoperation table.')
msanIPSGIpv6AdminMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGIpv6AdminMode.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIpv6AdminMode.setDescription('Enable/disable IPv6 source guard for all interfaces')
msanIPSGClearDynamicBinds = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disable", 1), ("clear-all", 2), ("clear-dhcpv4", 3), ("clear-dhcpv6", 4), ("clear-nd", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGClearDynamicBinds.setStatus('current')
if mibBuilder.loadTexts: msanIPSGClearDynamicBinds.setDescription('Clear IPSG snooping tables for all ports.')
msanIPSGIntfTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 2), )
if mibBuilder.loadTexts: msanIPSGIntfTable.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIntfTable.setDescription('Description.')
msanIPSGIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanIPSGIntfEntry.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIntfEntry.setDescription('Description.')
msanIPSGIntfAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGIntfAdminMode.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIntfAdminMode.setDescription('Enable/disable IP Source Guard for the selected interface.')
msanIPSGIntfBindsLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGIntfBindsLimit.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIntfBindsLimit.setDescription('IPSG binding limit for DHCPv4 snooping table per interface. Value 0 defines there is no limit.')
msanIPSGIntfFilteringMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iponly", 1), ("ipmac", 2))).clone('iponly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGIntfFilteringMode.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIntfFilteringMode.setDescription('Sets the traffic filtering type. Traffic can be filtered either by IP or by both IP and MAC address.')
msanIPSGIntfIpv6AdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGIntfIpv6AdminMode.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIntfIpv6AdminMode.setDescription('Enable/disable IPv6 Source Guard for the selected interface.')
msanIPSGIntfBindsLimitDhcpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGIntfBindsLimitDhcpv6.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIntfBindsLimitDhcpv6.setDescription('IPSG binding limit for DHCPv6 (IPv6 DHCP)snooping table per interface. Value 0 defines there is no limit.')
msanIPSGIntfBindsLimitND = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGIntfBindsLimitND.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIntfBindsLimitND.setDescription('IPSG binding limit for ND (IPv6 Neighbor Discovery) snooping table per interface Value 0 defines there is no limit.')
msanIPSGIntfClearDynamicBinds = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disable", 1), ("clear-all", 2), ("clear-dhcpv4", 3), ("clear-dhcpv6", 4), ("clear-nd", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGIntfClearDynamicBinds.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIntfClearDynamicBinds.setDescription('Clear IPSG snooping tables per interface')
msanIPSGBindingsTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 3), )
if mibBuilder.loadTexts: msanIPSGBindingsTable.setStatus('deprecated')
if mibBuilder.loadTexts: msanIPSGBindingsTable.setDescription('DThe table for storing IP source binding')
msanIPSGBindingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanIPSGBindVlan"), (0, "ISKRATEL-MSAN-MIB", "msanIPSGBindMac"))
if mibBuilder.loadTexts: msanIPSGBindingsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: msanIPSGBindingsEntry.setDescription('Description.')
msanIPSGBindIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIPSGBindIp.setStatus('deprecated')
if mibBuilder.loadTexts: msanIPSGBindIp.setDescription('Allowed IP address')
msanIPSGBindVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 3, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGBindVlan.setStatus('deprecated')
if mibBuilder.loadTexts: msanIPSGBindVlan.setDescription('Allowed VLAN number')
msanIPSGBindMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGBindMac.setStatus('deprecated')
if mibBuilder.loadTexts: msanIPSGBindMac.setDescription('Allowed MAC address')
msanIPSGBindLeaseRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGBindLeaseRemainingTime.setStatus('deprecated')
if mibBuilder.loadTexts: msanIPSGBindLeaseRemainingTime.setDescription('The period for which the DHCP lease is valid. It is displayed in days, hours, minutes, and seconds. For static IPSG bindings this value is set to 0 (infinitive).')
msanIPSGBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGBindType.setStatus('deprecated')
if mibBuilder.loadTexts: msanIPSGBindType.setDescription('Type of IPSG binding.')
msanIPSGBindMatchedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGBindMatchedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: msanIPSGBindMatchedFrames.setDescription('Number of matched frames for selected IPSG binding.')
msanIPSGBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanIPSGBindRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: msanIPSGBindRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. For row creation use createAndWait(5). For row activation use active(1). For row deletion use destroy(6). Other values are currently not supported. For row activation next terms must be accomplished: - msanIPSGBindIp must be defined ')
msanIPSGIpv4PortStaticBindTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 4), )
if mibBuilder.loadTexts: msanIPSGIpv4PortStaticBindTable.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIpv4PortStaticBindTable.setDescription('Description.')
msanIPSGIpv4PortStaticBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanIPSGIpv4PortStaticBindMacAddress"), (0, "ISKRATEL-MSAN-MIB", "msanIPSGIpv4PortStaticBindVlanId"), (0, "ISKRATEL-MSAN-MIB", "msanIPSGIpv4PortStaticBindIpAddress"))
if mibBuilder.loadTexts: msanIPSGIpv4PortStaticBindEntry.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIpv4PortStaticBindEntry.setDescription('Description.')
msanIPSGIpv4PortStaticBindMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: msanIPSGIpv4PortStaticBindMacAddress.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIpv4PortStaticBindMacAddress.setDescription('Allowed MAC address')
msanIPSGIpv4PortStaticBindVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 4, 1, 2), VlanIndex())
if mibBuilder.loadTexts: msanIPSGIpv4PortStaticBindVlanId.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIpv4PortStaticBindVlanId.setDescription('Allowed VLAN number')
msanIPSGIpv4PortStaticBindIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 4, 1, 3), InetAddressIPv4())
if mibBuilder.loadTexts: msanIPSGIpv4PortStaticBindIpAddress.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIpv4PortStaticBindIpAddress.setDescription('Allowed IPv4 address')
msanIPSGIpv4PortStaticBindMatchedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGIpv4PortStaticBindMatchedFrames.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIpv4PortStaticBindMatchedFrames.setDescription('Number of matched frames for selected IPSG binding.')
msanIPSGIpv4PortStaticBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanIPSGIpv4PortStaticBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIpv4PortStaticBindRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. For row creation use createAndGo(4). For row activation use active(1). For row deletion use destroy(6). Other values are currently not supported.')
msanIPSGIpv6PortStaticBindTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 5), )
if mibBuilder.loadTexts: msanIPSGIpv6PortStaticBindTable.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIpv6PortStaticBindTable.setDescription('Description.')
msanIPSGIpv6PortStaticBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanIPSGIpv6PortStaticBindMacAddress"), (0, "ISKRATEL-MSAN-MIB", "msanIPSGIpv6PortStaticBindVlanId"), (0, "ISKRATEL-MSAN-MIB", "msanIPSGIpv6PortStaticBindIpAddress"))
if mibBuilder.loadTexts: msanIPSGIpv6PortStaticBindEntry.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIpv6PortStaticBindEntry.setDescription('Description.')
msanIPSGIpv6PortStaticBindMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 5, 1, 1), MacAddress())
if mibBuilder.loadTexts: msanIPSGIpv6PortStaticBindMacAddress.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIpv6PortStaticBindMacAddress.setDescription('Allowed MAC address')
msanIPSGIpv6PortStaticBindVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 5, 1, 2), VlanIndex())
if mibBuilder.loadTexts: msanIPSGIpv6PortStaticBindVlanId.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIpv6PortStaticBindVlanId.setDescription('Allowed VLAN number')
msanIPSGIpv6PortStaticBindIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 5, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: msanIPSGIpv6PortStaticBindIpAddress.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIpv6PortStaticBindIpAddress.setDescription('Allowed IPv6 address')
msanIPSGIpv6PortStaticBindMatchedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGIpv6PortStaticBindMatchedFrames.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIpv6PortStaticBindMatchedFrames.setDescription('Number of matched frames for selected IPSG binding.')
msanIPSGIpv6PortStaticBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanIPSGIpv6PortStaticBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanIPSGIpv6PortStaticBindRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. For row creation use createAndGo(4). For row activation use active(1). For row deletion use destroy(6). Other values are currently not supported.')
msanIPSGPortBindCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6), )
if mibBuilder.loadTexts: msanIPSGPortBindCurrentTable.setStatus('current')
if mibBuilder.loadTexts: msanIPSGPortBindCurrentTable.setDescription('DThe table for storing IP source binding')
msanIPSGPortBindCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanIPSGPortBindCurrentId"))
if mibBuilder.loadTexts: msanIPSGPortBindCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: msanIPSGPortBindCurrentEntry.setDescription('Description.')
msanIPSGPortBindCurrentId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: msanIPSGPortBindCurrentId.setStatus('current')
if mibBuilder.loadTexts: msanIPSGPortBindCurrentId.setDescription('Table index.')
msanIPSGPortBindCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGPortBindCurrentIfIndex.setStatus('current')
if mibBuilder.loadTexts: msanIPSGPortBindCurrentIfIndex.setDescription('Port index (ifIndex value).')
msanIPSGPortBindCurrentMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGPortBindCurrentMacAddress.setStatus('current')
if mibBuilder.loadTexts: msanIPSGPortBindCurrentMacAddress.setDescription('Allowed MAC address')
msanIPSGPortBindCurrentVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6, 1, 4), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGPortBindCurrentVlanId.setStatus('current')
if mibBuilder.loadTexts: msanIPSGPortBindCurrentVlanId.setDescription('Allowed VLAN number')
msanIPSGPortBindCurrentIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGPortBindCurrentIpAddressType.setStatus('current')
if mibBuilder.loadTexts: msanIPSGPortBindCurrentIpAddressType.setDescription('Specifies the type of ip address: ipv4[1], ipv6[2].')
msanIPSGPortBindCurrentIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGPortBindCurrentIpAddress.setStatus('current')
if mibBuilder.loadTexts: msanIPSGPortBindCurrentIpAddress.setDescription('Allowed IP address')
msanIPSGPortBindCurrentLeaseRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGPortBindCurrentLeaseRemainingTime.setStatus('current')
if mibBuilder.loadTexts: msanIPSGPortBindCurrentLeaseRemainingTime.setDescription('The period for which the DHCP lease is valid. It is displayed in days, hours, minutes, and seconds. For static IPSG bindings this value is set to 0 (infinitive).')
msanIPSGPortBindCurrentType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("dynamic-dhcpv4", 2), ("dynamic-dhcpv6", 3), ("dynamic-nd", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGPortBindCurrentType.setStatus('current')
if mibBuilder.loadTexts: msanIPSGPortBindCurrentType.setDescription('Type of IPSG binding.')
msanIPSGPortBindCurrentMatchedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 103, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIPSGPortBindCurrentMatchedFrames.setStatus('current')
if mibBuilder.loadTexts: msanIPSGPortBindCurrentMatchedFrames.setDescription('Number of matched frames for selected IPSG binding.')
msanVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105))
msanVlanGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 1))
msanDVlanTagMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDVlanTagMode.setStatus('deprecated')
if mibBuilder.loadTexts: msanDVlanTagMode.setDescription('Controls the Double Vlan Tag mode on the system.')
msanVlanRemarkAdminState = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanVlanRemarkAdminState.setStatus('deprecated')
if mibBuilder.loadTexts: msanVlanRemarkAdminState.setDescription('Global VLAN Remarking administrative state.')
msanInternalVlanId = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanInternalVlanId.setStatus('current')
if mibBuilder.loadTexts: msanInternalVlanId.setDescription('Internal Vlan ID.')
msanPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 2), )
if mibBuilder.loadTexts: msanPortVlanTable.setStatus('deprecated')
if mibBuilder.loadTexts: msanPortVlanTable.setDescription('Vlan config parameters per port.')
msanPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanPortVlanEntry.setStatus('deprecated')
if mibBuilder.loadTexts: msanPortVlanEntry.setDescription('Description.')
msanPortVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("access", 0), ("trunk", 1), ("dot1qtunnel", 2), ("vlanStacking", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortVlanMode.setStatus('deprecated')
if mibBuilder.loadTexts: msanPortVlanMode.setDescription('Interface vlan mode.')
msanPortVlanStackPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("mapPriorityFromOuterTag", 0), ("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5), ("priority6", 6), ("priority7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortVlanStackPriority.setStatus('deprecated')
if mibBuilder.loadTexts: msanPortVlanStackPriority.setDescription('Priority of inner tag when interface is in vlanStacking mode (msanPortVlanMode=vlanStacking).')
msanPortVlanStackVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortVlanStackVlanId.setStatus('deprecated')
if mibBuilder.loadTexts: msanPortVlanStackVlanId.setDescription('Vlan ID of inner tag when interface is in vlanStacking mode (msanPortVlanMode=vlanStacking). ')
msanPortDVlanMapTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 3), )
if mibBuilder.loadTexts: msanPortDVlanMapTable.setStatus('deprecated')
if mibBuilder.loadTexts: msanPortDVlanMapTable.setDescription('Ingress mapping of inner VID to outer VID different from default (PVID) mapping. ')
msanPortDVlanMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanPortDVlanMapInTagVlanId"))
if mibBuilder.loadTexts: msanPortDVlanMapEntry.setStatus('deprecated')
if mibBuilder.loadTexts: msanPortDVlanMapEntry.setDescription('Description.')
msanPortDVlanMapInTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: msanPortDVlanMapInTagVlanId.setStatus('deprecated')
if mibBuilder.loadTexts: msanPortDVlanMapInTagVlanId.setDescription('Inner tag VLAN ID. DVlan functionality is used when interface is in dot1qtunnel mode.')
msanPortDVlanMapOutTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanPortDVlanMapOutTagVlanId.setStatus('deprecated')
if mibBuilder.loadTexts: msanPortDVlanMapOutTagVlanId.setDescription('Outer tag VLAN ID added for inner tag VLAN ID (msanPortDVlanMapInTagVlanId). DVlan functionality is used when interface is in dot1qtunnel mode. Value of -1 indicates that outer tag is not added for selected inner tag VLAN ID.')
msanPortDVlanMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanPortDVlanMapRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: msanPortDVlanMapRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. For row creation use createAndWait(5) [createAndGo(4) is not supported]. Setting this object to active(1) will activate this entry. Setting this object to destroy(6) will remove this entry. ')
msanPortVlanRemarkTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 4), )
if mibBuilder.loadTexts: msanPortVlanRemarkTable.setStatus('current')
if mibBuilder.loadTexts: msanPortVlanRemarkTable.setDescription('Vlan remarking table for ingress traffic (per port). Note: All defined Vlan remarking rules for ingress traffic also add , automatically, reverse Vlan remarking rule for egress traffic on same port.')
msanPortVlanRemarkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanPortVlanRemarkSrcVlanId"))
if mibBuilder.loadTexts: msanPortVlanRemarkEntry.setStatus('current')
if mibBuilder.loadTexts: msanPortVlanRemarkEntry.setDescription('Description.')
msanPortVlanRemarkSrcVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortVlanRemarkSrcVlanId.setStatus('current')
if mibBuilder.loadTexts: msanPortVlanRemarkSrcVlanId.setDescription('Ingress traffic Source VLAN ID which will be changed to Destination VLAN ID (msanPortVlanRemarkDstVlanId) by VLAN remarking rule.')
msanPortVlanRemarkDstVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortVlanRemarkDstVlanId.setStatus('current')
if mibBuilder.loadTexts: msanPortVlanRemarkDstVlanId.setDescription('Destination VLAN ID to which will be changed Source VLAN ID of ingress traffic (msanPortVlanRemarkSrcVlanId) by VLAN remarking rule.')
msanPortVlanRemarkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanPortVlanRemarkRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanPortVlanRemarkRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. For row creation use createAndWait(5). For row activation use active(1). For row deletion use destroy(6). Other values are currently not supported. For row activation next terms must be accomplished: - msanPortVlanRemarkDstVlanId must be defined (default value not defined) Note: All defined Vlan remarking rules for ingress traffic also add , automatically, reverse Vlan remarking rule for egress traffic on same port. ')
msanPortDVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 5), )
if mibBuilder.loadTexts: msanPortDVlanTable.setStatus('current')
if mibBuilder.loadTexts: msanPortDVlanTable.setDescription('Description.')
msanPortDVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanPortDVlanEntry.setStatus('current')
if mibBuilder.loadTexts: msanPortDVlanEntry.setDescription('Description.')
msanPortDVlanTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortDVlanTagMode.setStatus('current')
if mibBuilder.loadTexts: msanPortDVlanTagMode.setDescription('Administrative state of 802.1Q tunneling (DVLAN) mode.')
msanPortDVlanStackVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortDVlanStackVlanId.setStatus('current')
if mibBuilder.loadTexts: msanPortDVlanStackVlanId.setDescription('Vlan ID of inner tag when interface is in vlanStacking mode. Interface is in vlanStacking mode when msanPortDVlanTagMode=enable and msanPortDVlanStackVlanId>=0. msanPortDVlanStackVlanId value of -1 indicates that vlanStacking mode is not activated.')
msanPortDVlanStackPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("priority0", 0), ("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5), ("priority6", 6), ("priority7", 7))).clone('priority0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortDVlanStackPriority.setStatus('current')
if mibBuilder.loadTexts: msanPortDVlanStackPriority.setDescription('Priority of inner tag when interface is in vlanStacking mode. Interface is in vlanStacking mode when msanPortDVlanTagMode=enable and msanPortDVlanStackVlanId>=0.')
msanPortDVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 6), )
if mibBuilder.loadTexts: msanPortDVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: msanPortDVlanConfigTable.setDescription('Ingress mapping of inner VID to outer VID different from default (PVID) mapping. ')
msanPortDVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanDVlanConfigInTagVlanId"), (0, "ISKRATEL-MSAN-MIB", "msanDVlanConfigInTagPriority"))
if mibBuilder.loadTexts: msanPortDVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: msanPortDVlanConfigEntry.setDescription('Description.')
msanDVlanConfigInTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: msanDVlanConfigInTagVlanId.setStatus('current')
if mibBuilder.loadTexts: msanDVlanConfigInTagVlanId.setDescription('Inner tag VLAN ID. DVlan functionality is used when interface is in dot1qtunnel mode.')
msanDVlanConfigInTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("priority0", 0), ("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5), ("priority6", 6), ("priority7", 7), ("unspecified", 8))))
if mibBuilder.loadTexts: msanDVlanConfigInTagPriority.setStatus('current')
if mibBuilder.loadTexts: msanDVlanConfigInTagPriority.setDescription('Priority of inner tag. Value unspecified(8) defines that rule line applies to all packets with appropriate msanDVlanConfigInTagVlanId, except if packet match to other more specific rule.')
msanDVlanConfigOutTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 6, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDVlanConfigOutTagVlanId.setStatus('current')
if mibBuilder.loadTexts: msanDVlanConfigOutTagVlanId.setDescription('Outer tag VLAN ID added for inner tag VLAN ID (msanPortDVlanConfigInTagVlanId). DVlan functionality is used when interface is in dot1qtunnel mode. Value of -1 indicates that outer tag is not added for selected inner tag VLAN ID.')
msanDVlanConfigOutTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("priority0", 0), ("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5), ("priority6", 6), ("priority7", 7), ("unspecified", 8))).clone('priority0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanDVlanConfigOutTagPriority.setStatus('current')
if mibBuilder.loadTexts: msanDVlanConfigOutTagPriority.setDescription('Priority of outer tag. Value unspecified(8) defines that msanDVlanMapInTagPriority is copied to outer tag.')
msanDVlanConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanDVlanConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanDVlanConfigRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. For row creation use createAndWait(5) [createAndGo(4) is not supported]. Setting this object to active(1) will activate this entry. Setting this object to destroy(6) will remove this entry. ')
msanPortVlanRemarkAdminTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 7), )
if mibBuilder.loadTexts: msanPortVlanRemarkAdminTable.setStatus('current')
if mibBuilder.loadTexts: msanPortVlanRemarkAdminTable.setDescription('Description.')
msanPortVlanRemarkAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanPortVlanRemarkAdminEntry.setStatus('current')
if mibBuilder.loadTexts: msanPortVlanRemarkAdminEntry.setDescription('Description.')
msanPortVlanRemarkAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 105, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortVlanRemarkAdminMode.setStatus('current')
if mibBuilder.loadTexts: msanPortVlanRemarkAdminMode.setDescription('Administrative mode for VLAN Remarking')
msanAtm = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 106))
msanAtmGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 106, 1))
msanPortAtmPvcTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 106, 2), )
if mibBuilder.loadTexts: msanPortAtmPvcTable.setStatus('current')
if mibBuilder.loadTexts: msanPortAtmPvcTable.setDescription('Description.')
msanPortAtmPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 106, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanPortAtmPvcVpi"), (0, "ISKRATEL-MSAN-MIB", "msanPortAtmPvcVci"))
if mibBuilder.loadTexts: msanPortAtmPvcEntry.setStatus('current')
if mibBuilder.loadTexts: msanPortAtmPvcEntry.setDescription('Description.')
msanPortAtmPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 106, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: msanPortAtmPvcVpi.setStatus('current')
if mibBuilder.loadTexts: msanPortAtmPvcVpi.setDescription('ATM-PVC(Permanent Virtual Circuits) VPI(Virtual Path Identifier) value.')
msanPortAtmPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 106, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 255)))
if mibBuilder.loadTexts: msanPortAtmPvcVci.setStatus('current')
if mibBuilder.loadTexts: msanPortAtmPvcVci.setDescription('ATM-PVC(Permanent Virtual Circuits) VCI(Virtual Channel Identifier) value.')
msanPortAtmPvcPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 106, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanPortAtmPvcPvid.setStatus('current')
if mibBuilder.loadTexts: msanPortAtmPvcPvid.setDescription('The PVID, the VLAN ID assigned to untagged frames or Priority-Tagged frames received on this ATM-PVC(Permanent Virtual Circuits). Value 0 defines that PVID is not set.')
msanPortAtmPvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 106, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanPortAtmPvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanPortAtmPvcRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. For row creation use createAndWait(5) [createAndGo(4) is not supported]. Setting this object to active(1) will activate this entry. Setting this object to destroy(6) will remove this entry.')
msanEnergyMeter = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107))
msanEnergyMeterGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1))
msanEnergyMeterIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEnergyMeterIpAddress.setStatus('current')
if mibBuilder.loadTexts: msanEnergyMeterIpAddress.setDescription("Energy meter's Ip address.")
msanEnergyMeterTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEnergyMeterTcpPort.setStatus('current')
if mibBuilder.loadTexts: msanEnergyMeterTcpPort.setDescription("Energy meter's Tcp port.")
msanEnergyMeterAddress = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEnergyMeterAddress.setStatus('current')
if mibBuilder.loadTexts: msanEnergyMeterAddress.setDescription("Energy meter's address.")
msanEnergyMeterPassword = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanEnergyMeterPassword.setStatus('current')
if mibBuilder.loadTexts: msanEnergyMeterPassword.setDescription("Energy meter's password.")
msanEnergyMeterSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanEnergyMeterSerialNo.setStatus('current')
if mibBuilder.loadTexts: msanEnergyMeterSerialNo.setDescription("Energy meter's serial number.")
msanEnergyMeterDateTime = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanEnergyMeterDateTime.setStatus('current')
if mibBuilder.loadTexts: msanEnergyMeterDateTime.setDescription("Energy meter's date and time in format: year-month-day, hour:minutes:seconds")
msanEnergyMeterCurrTariff = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanEnergyMeterCurrTariff.setStatus('current')
if mibBuilder.loadTexts: msanEnergyMeterCurrTariff.setDescription("Energy meter's current active tariff.")
msanEnergyMeterCurrPower = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 8), Unsigned32()).setUnits('0.01 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanEnergyMeterCurrPower.setStatus('current')
if mibBuilder.loadTexts: msanEnergyMeterCurrPower.setDescription("Energy meter's current measured power.")
msanEnergyMeterCoreVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanEnergyMeterCoreVersion.setStatus('current')
if mibBuilder.loadTexts: msanEnergyMeterCoreVersion.setDescription("Energy meter's current version number.")
msanEnergyMeterFwType = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanEnergyMeterFwType.setStatus('current')
if mibBuilder.loadTexts: msanEnergyMeterFwType.setDescription("Energy meter's current firmware type.")
msanEnergyMeterFwVersion = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanEnergyMeterFwVersion.setStatus('current')
if mibBuilder.loadTexts: msanEnergyMeterFwVersion.setDescription("Energy meter's current firmware version.")
msanEnergyMeterFwCreationDate = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanEnergyMeterFwCreationDate.setStatus('current')
if mibBuilder.loadTexts: msanEnergyMeterFwCreationDate.setDescription("Energy meter's current firmware creation date in format: year-month-day")
msanEnergyMeterEnergyTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 2), )
if mibBuilder.loadTexts: msanEnergyMeterEnergyTable.setStatus('current')
if mibBuilder.loadTexts: msanEnergyMeterEnergyTable.setDescription('Energy values.')
msanEnergyMeterEnergyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanEnergyMeterTariff"), (0, "ISKRATEL-MSAN-MIB", "msanEnergyMeterDepth"))
if mibBuilder.loadTexts: msanEnergyMeterEnergyEntry.setStatus('current')
if mibBuilder.loadTexts: msanEnergyMeterEnergyEntry.setDescription('Description.')
msanEnergyMeterTariff = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: msanEnergyMeterTariff.setStatus('current')
if mibBuilder.loadTexts: msanEnergyMeterTariff.setDescription('This is msanEnergyMeterTariff index in msanEnergyMeterEnergyTable Defines tariff. 0 tariff No1, 1 tariff No2, , 7 - tariff No8')
msanEnergyMeterDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 13)))
if mibBuilder.loadTexts: msanEnergyMeterDepth.setStatus('current')
if mibBuilder.loadTexts: msanEnergyMeterDepth.setDescription('This is msanEnergyMeterDepth index in msanEnergyMeterEnergyTable. Defines time span. 0 current value, 1 value at the end of previous month, 2 value at the end of 2. month ago, , 13 value at the end of the 13. month ago')
msanEnergyMeterEnergyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 2, 1, 3), Unsigned32()).setUnits('0.01 kWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanEnergyMeterEnergyValue.setStatus('current')
if mibBuilder.loadTexts: msanEnergyMeterEnergyValue.setDescription('Energy value.')
msanEnergyMeterEnergySumTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 3), )
if mibBuilder.loadTexts: msanEnergyMeterEnergySumTable.setStatus('current')
if mibBuilder.loadTexts: msanEnergyMeterEnergySumTable.setDescription('Energy sum values of all tariffs.')
msanEnergyMeterEnergySumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanEnergyMeterDepth"))
if mibBuilder.loadTexts: msanEnergyMeterEnergySumEntry.setStatus('current')
if mibBuilder.loadTexts: msanEnergyMeterEnergySumEntry.setDescription('Description.')
msanEnergyMeterEnergySumValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 107, 3, 1, 1), Unsigned32()).setUnits('0.01 kWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: msanEnergyMeterEnergySumValue.setStatus('current')
if mibBuilder.loadTexts: msanEnergyMeterEnergySumValue.setDescription('Energy sum value of all tariffs')
msanArpInspection = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108))
msanArpInspectionGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108, 1))
msanArpInspectionAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanArpInspectionAdminMode.setStatus('current')
if mibBuilder.loadTexts: msanArpInspectionAdminMode.setDescription('Enable/disable global dynamic arp inspection ')
msanArpInspectionPortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108, 2), )
if mibBuilder.loadTexts: msanArpInspectionPortTable.setStatus('current')
if mibBuilder.loadTexts: msanArpInspectionPortTable.setDescription('Arp Inspection.')
msanArpInspectionPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanArpInspectionPortEntry.setStatus('current')
if mibBuilder.loadTexts: msanArpInspectionPortEntry.setDescription('Description.')
msanArpInspectionPortAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanArpInspectionPortAdminMode.setStatus('current')
if mibBuilder.loadTexts: msanArpInspectionPortAdminMode.setDescription('Enable/disable dynamic arp inspection for the selected interface.')
msanArpInspectionPortStatDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanArpInspectionPortStatDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: msanArpInspectionPortStatDroppedFrames.setDescription('Number of discarded ARP packets on interface.')
msanArpInspectionVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108, 3), )
if mibBuilder.loadTexts: msanArpInspectionVlanTable.setStatus('current')
if mibBuilder.loadTexts: msanArpInspectionVlanTable.setDescription('Arp Inspection.')
msanArpInspectionVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108, 3, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: msanArpInspectionVlanEntry.setStatus('current')
if mibBuilder.loadTexts: msanArpInspectionVlanEntry.setDescription('Description.')
msanArpInspectionVlanAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanArpInspectionVlanAdminMode.setStatus('current')
if mibBuilder.loadTexts: msanArpInspectionVlanAdminMode.setDescription('Enable/disable dynamic arp inspection per vlan.')
msanArpInspectionVlanStatDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 108, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanArpInspectionVlanStatDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: msanArpInspectionVlanStatDroppedFrames.setDescription('Number of discarded ARP packets per vlan.')
msanIsa = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109))
msanIsaGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 1))
msanIsaTalAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalAdminMode.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalAdminMode.setDescription('ISA TAL functionality global admin mode.')
msanIsaDasServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(3799)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaDasServerPort.setStatus('current')
if mibBuilder.loadTexts: msanIsaDasServerPort.setDescription('ISA Radius DAS (Dynamic Authorization Server) port number.')
msanIsaDasServerSecret = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaDasServerSecret.setStatus('current')
if mibBuilder.loadTexts: msanIsaDasServerSecret.setDescription('ISA Radius DAS (Dynamic Authorization Server) shared secret.')
msanIsaRadiusServerRetries = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaRadiusServerRetries.setStatus('current')
if mibBuilder.loadTexts: msanIsaRadiusServerRetries.setDescription('Maximum number of retransmissions of a ISA Radius request packet.')
msanIsaRadiusServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(3)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaRadiusServerTimeout.setStatus('current')
if mibBuilder.loadTexts: msanIsaRadiusServerTimeout.setDescription('Time out duration (in seconds) before packets are retransmitted to ISA Radius server')
msanIsaStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2))
msanIsaPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1), )
if mibBuilder.loadTexts: msanIsaPortStatTable.setStatus('current')
if mibBuilder.loadTexts: msanIsaPortStatTable.setDescription('Description.')
msanIsaPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanIsaPortStatEntry.setStatus('current')
if mibBuilder.loadTexts: msanIsaPortStatEntry.setDescription('Description.')
msanIsaPortStatTalMatchedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaPortStatTalMatchedFrames.setStatus('current')
if mibBuilder.loadTexts: msanIsaPortStatTalMatchedFrames.setDescription('Number of TAL matched frames.')
msanIsaPortStatTalDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaPortStatTalDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: msanIsaPortStatTalDroppedFrames.setDescription('Number of TAL dropped frames.')
msanIsaPortStatAuthenReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaPortStatAuthenReqSent.setStatus('current')
if mibBuilder.loadTexts: msanIsaPortStatAuthenReqSent.setDescription('Number of sent Authentication requests.')
msanIsaPortStatAuthenReqConfirmed = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaPortStatAuthenReqConfirmed.setStatus('current')
if mibBuilder.loadTexts: msanIsaPortStatAuthenReqConfirmed.setDescription('Number of confirmed Authentication requests.')
msanIsaPortStatAuthenReqRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaPortStatAuthenReqRejected.setStatus('current')
if mibBuilder.loadTexts: msanIsaPortStatAuthenReqRejected.setDescription('Number of rejected Authentication requests.')
msanIsaPortStatAuthenTimeoutExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaPortStatAuthenTimeoutExpired.setStatus('current')
if mibBuilder.loadTexts: msanIsaPortStatAuthenTimeoutExpired.setDescription('Number of expired Authentication timeouts.')
msanIsaPortStatAuthorReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaPortStatAuthorReqSent.setStatus('current')
if mibBuilder.loadTexts: msanIsaPortStatAuthorReqSent.setDescription('Number of sent Authorization requests.')
msanIsaPortStatAuthorReqConfirmed = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaPortStatAuthorReqConfirmed.setStatus('current')
if mibBuilder.loadTexts: msanIsaPortStatAuthorReqConfirmed.setDescription('Number of confirmed Authorization requests.')
msanIsaPortStatAuthorReqRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaPortStatAuthorReqRejected.setStatus('current')
if mibBuilder.loadTexts: msanIsaPortStatAuthorReqRejected.setDescription('Number of rejected Authorization requests.')
msanIsaPortStatAuthorTimeoutExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaPortStatAuthorTimeoutExpired.setStatus('current')
if mibBuilder.loadTexts: msanIsaPortStatAuthorTimeoutExpired.setDescription('Number of expired Authorization timeouts.')
msanIsaStatLoginReq = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaStatLoginReq.setStatus('current')
if mibBuilder.loadTexts: msanIsaStatLoginReq.setDescription('Cumulative number of Login requests.')
msanIsaStatLoginUnsuccessfulReq = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanIsaStatLoginUnsuccessfulReq.setStatus('current')
if mibBuilder.loadTexts: msanIsaStatLoginUnsuccessfulReq.setDescription('Number of unsuccessful login requests.')
msanIsaRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 3), )
if mibBuilder.loadTexts: msanIsaRadiusServerTable.setStatus('current')
if mibBuilder.loadTexts: msanIsaRadiusServerTable.setDescription('Description.')
msanIsaRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 3, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanIsaRadiusServerIpAddress"), (0, "ISKRATEL-MSAN-MIB", "msanIsaRadiusServerType"))
if mibBuilder.loadTexts: msanIsaRadiusServerEntry.setStatus('current')
if mibBuilder.loadTexts: msanIsaRadiusServerEntry.setDescription('Description.')
msanIsaRadiusServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: msanIsaRadiusServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: msanIsaRadiusServerIpAddress.setDescription('ISA Radius server IP address. ')
msanIsaRadiusServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authentication", 1), ("accounting", 2))))
if mibBuilder.loadTexts: msanIsaRadiusServerType.setStatus('current')
if mibBuilder.loadTexts: msanIsaRadiusServerType.setDescription('ISA Radius server type.')
msanIsaRadiusServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaRadiusServerPort.setStatus('current')
if mibBuilder.loadTexts: msanIsaRadiusServerPort.setDescription(' ISA Radius server port number. If msanIsaRadiusServerType = authentication(1) then default port value is 1812. If msanIsaRadiusServerType = accounting(2) then default port value is 1813.')
msanIsaRadiusServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaRadiusServerSecret.setStatus('current')
if mibBuilder.loadTexts: msanIsaRadiusServerSecret.setDescription('ISA Radius server shared secret.')
msanIsaRadiusServerPrimaryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaRadiusServerPrimaryMode.setStatus('current')
if mibBuilder.loadTexts: msanIsaRadiusServerPrimaryMode.setDescription('ISA Radius server primary mode. Only one server can be defined as primary(1).')
msanIsaRadiusServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanIsaRadiusServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanIsaRadiusServerRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. For row creation use createAndWait(5). For row activation use active(1). For row deletion use destroy(6). Other values are currently not supported. For row activation parameter msanIsaRadiusServerType must be defined.')
msanIsaPortTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 5), )
if mibBuilder.loadTexts: msanIsaPortTable.setStatus('current')
if mibBuilder.loadTexts: msanIsaPortTable.setDescription('Description.')
msanIsaPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanIsaPortEntry.setStatus('current')
if mibBuilder.loadTexts: msanIsaPortEntry.setDescription('Description.')
msanIsaPortTalAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaPortTalAdminMode.setStatus('current')
if mibBuilder.loadTexts: msanIsaPortTalAdminMode.setDescription('ISA TAL functionality admin mode.')
msanIsaPortAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaPortAuthentication.setStatus('current')
if mibBuilder.loadTexts: msanIsaPortAuthentication.setDescription('ISA Authentication administrative state.')
msanIsaPortAuthorization = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaPortAuthorization.setStatus('current')
if mibBuilder.loadTexts: msanIsaPortAuthorization.setDescription('ISA Authorization administrative state.')
msanIsaPortAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaPortAccounting.setStatus('current')
if mibBuilder.loadTexts: msanIsaPortAccounting.setDescription('ISA Accounting administrative state.')
msanIsaPortLoginMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 5, 1, 5), Bits().clone(namedValues=NamedValues(("circuitId", 0), ("remoteId", 1), ("vendorId", 2), ("clientId", 3), ("sourceMAC", 4), ("sourceIP", 5), ("userPattern", 6))).clone(namedValues=NamedValues(("circuitId", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaPortLoginMask.setStatus('current')
if mibBuilder.loadTexts: msanIsaPortLoginMask.setDescription('ISA login mask.')
msanIsaPortLoginUserPatternMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaPortLoginUserPatternMask.setStatus('current')
if mibBuilder.loadTexts: msanIsaPortLoginUserPatternMask.setDescription('This mask value identifies the portion of input packet that is send to Radius server, if userPattern bit is set in msanIsaPortLoginMask. Empty string indicates that parameter has not been defined.')
msanIsaPortTalAutomaticReq = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaPortTalAutomaticReq.setStatus('current')
if mibBuilder.loadTexts: msanIsaPortTalAutomaticReq.setDescription('TAL automatic request state.')
msanIsaTalPortMatchTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6), )
if mibBuilder.loadTexts: msanIsaTalPortMatchTable.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPortMatchTable.setDescription('Description.')
msanIsaTalPortMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msanIsaTalPortMatchEntry.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPortMatchEntry.setDescription('Description.')
msanIsaTalPortMatchEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchEthertype.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPortMatchEthertype.setDescription('Match incoming packet frame with specified EtherType value. A value of -1 indicates that parameter has not been defined. ')
msanIsaTalPortMatchMacSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 2), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchMacSrcAddr.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPortMatchMacSrcAddr.setDescription('Match incoming packet frame with specified Source MAC address. Empty string indicates that parameter has not been defined.')
msanIsaTalPortMatchMacSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 3), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchMacSrcMask.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPortMatchMacSrcMask.setDescription('This mask value identifies the portion of msanIsaTalPortMatchMacSrcAddr that is compared with input packet. Empty string indicates that parameter has not been defined ')
msanIsaTalPortMatchVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchVlanId.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPortMatchVlanId.setDescription('Match incoming packet frame with specified VLAN ID value (1-4094). A value of -1 indicates that parameter has not been defined ')
msanIsaTalPortMatchIpSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 5), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchIpSrcAddr.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPortMatchIpSrcAddr.setDescription('Match incoming packet frame with specified source IP address. Empty string indicates that parameter has not been defined. ')
msanIsaTalPortMatchIpSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 6), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchIpSrcMask.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPortMatchIpSrcMask.setDescription('This mask value identifies the portion of msanIsaTalPortMatchIpSrcAddr that is compared with input packet. Empty string indicates that parameter has not been defined ')
msanIsaTalPortMatchDhcpType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("discover", 1), ("request", 2))).clone('undefined')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchDhcpType.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPortMatchDhcpType.setDescription('Match incoming packet frame with specified DHCP type value. ')
msanIsaTalPortMatchDhcpOpt60VendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchDhcpOpt60VendorId.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPortMatchDhcpOpt60VendorId.setDescription('Match incoming packet frame with specified DHCP option 60 vendorId value. Empty string indicates that parameter has not been defined.')
msanIsaTalPortMatchDhcpOpt61ClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchDhcpOpt61ClientId.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPortMatchDhcpOpt61ClientId.setDescription('Match incoming packet frame with specified DHCP option 61 clientId value. Empty string indicates that parameter has not been defined.')
msanIsaTalPortMatchDhcpOpt61ClientIdMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 10), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchDhcpOpt61ClientIdMacAddr.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPortMatchDhcpOpt61ClientIdMacAddr.setDescription('Match incoming packet frame with specified DHCP option 61 MAC address. Empty string indicates that parameter has not been defined.')
msanIsaTalPortMatchDhcpOpt82RemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchDhcpOpt82RemoteId.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPortMatchDhcpOpt82RemoteId.setDescription('Match incoming packet frame with specified DHCP option 82 remoteId value. Empty string indicates that parameter has not been defined.')
msanIsaTalPortMatchUserBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchUserBits.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPortMatchUserBits.setDescription('Match incoming packet frame with specified user defined bits. Empty string indicates that parameter has not been defined.')
msanIsaTalPortMatchUserMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 6, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPortMatchUserMask.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPortMatchUserMask.setDescription('This mask value identifies the portion of msanIsaTalPortMatchUserBits that is compared with input packet. Empty string indicates that parameter has not been defined.')
msanIsaTalPatternMatchTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7), )
if mibBuilder.loadTexts: msanIsaTalPatternMatchTable.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPatternMatchTable.setDescription('This table is used to store the pattern match name, pattern rules and the corresponding login mask for the pattern match.')
msanIsaTalPatternMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanIsaTalPatternMatchName"))
if mibBuilder.loadTexts: msanIsaTalPatternMatchEntry.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPatternMatchEntry.setDescription('Each entry in this table contains the a unique pattern match along with the loginmask to identify the user login packets.')
msanIsaTalPatternMatchName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: msanIsaTalPatternMatchName.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPatternMatchName.setDescription('Pattern match name.')
msanIsaTalPatternMatchEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchEthertype.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPatternMatchEthertype.setDescription('Match incoming packet frame with specified EtherType value. A value of -1 indicates that parameter has not been defined. ')
msanIsaTalPatternMatchMacSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 3), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchMacSrcAddr.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPatternMatchMacSrcAddr.setDescription('Match incoming packet frame with specified Source MAC address. Empty string indicates that parameter has not been defined.')
msanIsaTalPatternMatchMacSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 4), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchMacSrcMask.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPatternMatchMacSrcMask.setDescription('This mask value identifies the portion of msanIsaTalPatternMatchMacSrcAddr that is compared with input packet. Empty string indicates that parameter has not been defined')
msanIsaTalPatternMatchVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchVlanId.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPatternMatchVlanId.setDescription('Match incoming packet frame with specified VLAN ID value (1-4094). A value of -1 indicates that parameter has not been defined')
msanIsaTalPatternMatchIpSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 6), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchIpSrcAddr.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPatternMatchIpSrcAddr.setDescription('Match incoming packet frame with specified source IP address. Empty string indicates that parameter has not been defined. ')
msanIsaTalPatternMatchIpSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 7), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchIpSrcMask.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPatternMatchIpSrcMask.setDescription('This mask value identifies the portion of msanIsaTalPatternMatchIpSrcAddr that is compared with input packet. Empty string indicates that parameter has not been defined')
msanIsaTalPatternMatchDhcpType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("discover", 1), ("request", 2))).clone('undefined')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchDhcpType.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPatternMatchDhcpType.setDescription('Match incoming packet frame with specified DHCP type value. ')
msanIsaTalPatternMatchDhcpOpt60VendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchDhcpOpt60VendorId.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPatternMatchDhcpOpt60VendorId.setDescription('Match incoming packet frame with specified DHCP option 60 vendorId value. Empty string indicates that parameter has not been defined.')
msanIsaTalPatternMatchDhcpOpt61ClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchDhcpOpt61ClientId.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPatternMatchDhcpOpt61ClientId.setDescription('Match incoming packet frame with specified DHCP option 61 clientId value. Empty string indicates that parameter has not been defined.')
msanIsaTalPatternMatchDhcpOpt61ClientIdMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 11), MacAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchDhcpOpt61ClientIdMacAddr.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPatternMatchDhcpOpt61ClientIdMacAddr.setDescription('Match incoming packet frame with specified DHCP option 61 MAC address. Empty string indicates that parameter has not been defined.')
msanIsaTalPatternMatchDhcpOpt82RemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchDhcpOpt82RemoteId.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPatternMatchDhcpOpt82RemoteId.setDescription('Match incoming packet frame with specified DHCP option 82 remoteId value. Empty string indicates that parameter has not been defined.')
msanIsaTalPatternMatchUserBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchUserBits.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPatternMatchUserBits.setDescription('Match incoming packet frame with specified user defined bits. Empty string indicates that parameter has not been defined.')
msanIsaTalPatternMatchUserMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchUserMask.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPatternMatchUserMask.setDescription('This mask value identifies the portion of msanIsaTalPatternMatchUserBits that is compared with input packet. Empty string indicates that parameter has not been defined.')
msanIsaTalPatternMatchLoginMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 15), Bits().clone(namedValues=NamedValues(("circuitId", 0), ("remoteId", 1), ("vendorId", 2), ("clientId", 3), ("sourceMAC", 4), ("sourceIP", 5), ("userPattern", 6))).clone(namedValues=NamedValues(("circuitId", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchLoginMask.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPatternMatchLoginMask.setDescription('Login mask for the current pattern match. This is used to generate the UserId.')
msanIsaTalPatternMatchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 7, 1, 16), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanIsaTalPatternMatchRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPatternMatchRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. A new row is created using createAndWait(5) [createAndGo(4) is not supported] The value active(1) activates the entry. Setting this object to destroy6) will remove this entry.')
msanIsaTalPortPatternMatchTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 8), )
if mibBuilder.loadTexts: msanIsaTalPortPatternMatchTable.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPortPatternMatchTable.setDescription('A connection between Pattern Matches and device ports. An entry is created in this table whenever a pattern match need to be attached to a downlink port.')
msanIsaTalPortPatternMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ISKRATEL-MSAN-MIB", "msanIsaTalPatternMatchName"))
if mibBuilder.loadTexts: msanIsaTalPortPatternMatchEntry.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPortPatternMatchEntry.setDescription('Each entry in this table contains the a unique pattern match on a port along with the loginmask to identify the user login packets.')
msanIsaTalPortPatternMatchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 109, 8, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanIsaTalPortPatternMatchRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanIsaTalPortPatternMatchRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) creates a row in this table. Setting this object to destroy(6) will remove this entry. Read values: active(1). Other values are currently not supported.')
msanSync = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110))
msanSyncGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 1))
msanSyncTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2), )
if mibBuilder.loadTexts: msanSyncTable.setStatus('current')
if mibBuilder.loadTexts: msanSyncTable.setDescription('Description.')
msanSyncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1), ).setIndexNames((0, "ISKRATEL-MSAN-MIB", "msanSyncBoardPosition"), (0, "ISKRATEL-MSAN-MIB", "msanSyncSourcePriority"))
if mibBuilder.loadTexts: msanSyncEntry.setStatus('current')
if mibBuilder.loadTexts: msanSyncEntry.setDescription('Description.')
msanSyncBoardPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: msanSyncBoardPosition.setStatus('current')
if mibBuilder.loadTexts: msanSyncBoardPosition.setDescription('Central ethernet board position.')
msanSyncSourcePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: msanSyncSourcePriority.setStatus('current')
if mibBuilder.loadTexts: msanSyncSourcePriority.setDescription('Synchronization source priority: 1-first priority, 2-second priority.....')
msanSyncSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 8, 14, 15, 16, 40))).clone(namedValues=NamedValues(("ext-2mhz", 4), ("ext-10mhz", 5), ("ext-1hz", 6), ("mlvds-bp", 8), ("pps-bp", 14), ("ptp-eth", 15), ("sync-eth", 16), ("free-run", 40)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSyncSourceType.setStatus('current')
if mibBuilder.loadTexts: msanSyncSourceType.setDescription('Synchronization source type: ext-2mhz(4) - synchronization on extended source 2MHz, ext-10mhz(5) - synchronization on extended source 10MHz, ext-1hz(6) - synchronization on extended source 1Hz, mlvds-bp(8) - synchronization on MLVDS, pps-bp(14) - synchronization on PPS, ptp-eth(15)- synchronization on PtP Ethernet, sync-eth(16) - synchronization on Synchronous Ethernet, free-run(40) - free-run synchronization')
msanSyncSourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input-1", 1), ("input-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSyncSourceId.setStatus('current')
if mibBuilder.loadTexts: msanSyncSourceId.setDescription('Synchronization source identity. msanSyncSourceId can be used when msanSyncSourceType has one of values: - ext-2mhz(4), - ext-10mhz(5), - ext-1hz(6), - mlvds-bp(8), - pps-bp(14), - free-run(40) msanSyncSourceId can be set only to input-1(1), when msanSyncSourceType is pps-bp(14) or free-run(40). ')
msanSyncSourceEthPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1, 5), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSyncSourceEthPortId.setStatus('current')
if mibBuilder.loadTexts: msanSyncSourceEthPortId.setDescription('Synchronization source ethernet Port Id (value of ifIndex). msanSyncSourceEthPortId can be used, when msanSyncSourceType has ptp-eth(15) or sync-eth(16) value.')
msanSyncDestinationType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 10))).clone(namedValues=NamedValues(("local", 0), ("global", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSyncDestinationType.setStatus('current')
if mibBuilder.loadTexts: msanSyncDestinationType.setDescription('Synchronization destination type: local(0) - synchronization signal is used only on local board global(0) - synchronization signal is sent to MLVDS bus')
msanSyncDestinationMlvdsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mlvds-1", 1), ("mlvds-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSyncDestinationMlvdsId.setStatus('current')
if mibBuilder.loadTexts: msanSyncDestinationMlvdsId.setDescription('Destination MLVDS bus Identity. This parameter is used when msanSyncDestinationType has global(1) value.')
msanSyncSourceSuitability = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("suitable", 1), ("unsuitable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSyncSourceSuitability.setStatus('current')
if mibBuilder.loadTexts: msanSyncSourceSuitability.setDescription('Source Suitability.')
msanSyncSourceActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanSyncSourceActivity.setStatus('current')
if mibBuilder.loadTexts: msanSyncSourceActivity.setDescription('Source Activity .')
msanSyncRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 110, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msanSyncRowStatus.setStatus('current')
if mibBuilder.loadTexts: msanSyncRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. For row creation use createAndWait(5). For row activation use active(1). For row deletion use destroy(6). Other values are currently not supported. For row activation next terms must be defined - msanSyncSourceType - msanSyncSourceMlvdsId or msanSyncSourcePortId - msanSyncDestionationType - msanSyncDestionaMlvdsId if msanSyncDestionType=global(10) ')
mibBuilder.exportSymbols("ISKRATEL-MSAN-MIB", msanDhcpv6RaStatReply=msanDhcpv6RaStatReply, msanVDSL2LineProfile=msanVDSL2LineProfile, msanIPSGIpv6PortStaticBindMatchedFrames=msanIPSGIpv6PortStaticBindMatchedFrames, msanXdsl2LineAlarmConfTempProtection=msanXdsl2LineAlarmConfTempProtection, msanSecurityProfileIpSg=msanSecurityProfileIpSg, msanDhcpRaStatInform=msanDhcpRaStatInform, msanServiceProfileDhcpRaRemoteId=msanServiceProfileDhcpRaRemoteId, msanDslSpecificUpboUs1b=msanDslSpecificUpboUs1b, msanMulticastAccessListEntry=msanMulticastAccessListEntry, msanQosIntfProfileAtmVpi=msanQosIntfProfileAtmVpi, msanServiceFlowProfileMatchUsMacSrcAddr=msanServiceFlowProfileMatchUsMacSrcAddr, msanUserConfigTable=msanUserConfigTable, msanRadiusServer=msanRadiusServer, msanMacAclRuleEgressIntf=msanMacAclRuleEgressIntf, msanAdslAtucPhysExtnModPhase=msanAdslAtucPhysExtnModPhase, msanFilteringRuleToPortHigh=msanFilteringRuleToPortHigh, msanAdslAtucPhysExtnDeltQLNpsus=msanAdslAtucPhysExtnDeltQLNpsus, msanEapsDomainRowStatus=msanEapsDomainRowStatus, msanDhcpRaStatRequest=msanDhcpRaStatRequest, msanServiceFlowProfileDsCdrBurstSize=msanServiceFlowProfileDsCdrBurstSize, msanDslSpecificMaxNomAtpUs=msanDslSpecificMaxNomAtpUs, msanFilteringRuleToPortLow=msanFilteringRuleToPortLow, msanVlanProfileName=msanVlanProfileName, msanCpeIntfTypeRowStatus=msanCpeIntfTypeRowStatus, msanIPSGBindIp=msanIPSGBindIp, msanSecurityAclProfileEntry=msanSecurityAclProfileEntry, msanAdslAtucPhysExtnChanPerfCU=msanAdslAtucPhysExtnChanPerfCU, msanAdslAtucPhysExtnSeltInfoValid=msanAdslAtucPhysExtnSeltInfoValid, msanDhcpRaMode=msanDhcpRaMode, msanIpAclRuleVlanId2RangeEnd=msanIpAclRuleVlanId2RangeEnd, msanLagDetailedPortStatus=msanLagDetailedPortStatus, msanIsaTalPortMatchEntry=msanIsaTalPortMatchEntry, msanAdslAturPhysExtnDeltQLNpsds=msanAdslAturPhysExtnDeltQLNpsds, msanDhcpRaStatNAK=msanDhcpRaStatNAK, msanServiceProfileVlanProfileName=msanServiceProfileVlanProfileName, msanAdslAtucPhysExtnSystemVendorId=msanAdslAtucPhysExtnSystemVendorId, msanIPSGClearDynamicBinds=msanIPSGClearDynamicBinds, msanDiagnosticsErrorMeasure=msanDiagnosticsErrorMeasure, msanArpInspection=msanArpInspection, msanMvrGlobal=msanMvrGlobal, msanIsaTalPortMatchDhcpOpt60VendorId=msanIsaTalPortMatchDhcpOpt60VendorId, msanPortSecurityStatMacEntry=msanPortSecurityStatMacEntry, msanArpInspectionPortAdminMode=msanArpInspectionPortAdminMode, msanIsaRadiusServerIpAddress=msanIsaRadiusServerIpAddress, msanAdslAturDeltSNRMTds=msanAdslAturDeltSNRMTds, msanMulticastAclListTable=msanMulticastAclListTable, msanDslSpecificMinSnrmDs=msanDslSpecificMinSnrmDs, msanIpAclRuleVlanId=msanIpAclRuleVlanId, msanMvrMulticastGroupTable=msanMvrMulticastGroupTable, msanIgmpPortStatTxV2Leave=msanIgmpPortStatTxV2Leave, msanSwitchIGMPVlanStaticMrouterEntry=msanSwitchIGMPVlanStaticMrouterEntry, msanAdslAtucPhysExtnG9941VendorId=msanAdslAtucPhysExtnG9941VendorId, msanPortStpP2PAutoState=msanPortStpP2PAutoState, msanAlarmPanelGlobal=msanAlarmPanelGlobal, msanServiceProfileName=msanServiceProfileName, si2000=si2000, msanSwILVersion=msanSwILVersion, msanPortDVlanMapOutTagVlanId=msanPortDVlanMapOutTagVlanId, msanSyncSourcePriority=msanSyncSourcePriority, msanDslSpecificPhyRDs=msanDslSpecificPhyRDs, msanSfpInfoRevisionNr=msanSfpInfoRevisionNr, msanIPSGIntfEntry=msanIPSGIntfEntry, msanVlanProfileEntry=msanVlanProfileEntry, msanIsaTalPatternMatchTable=msanIsaTalPatternMatchTable, msanIsaRadiusServerRetries=msanIsaRadiusServerRetries, msanDiagnosticsErrorSeverityObjMask=msanDiagnosticsErrorSeverityObjMask, msanSwitchIGMPSnoopingVlanEntry=msanSwitchIGMPSnoopingVlanEntry, msanServiceFlowProfileMatchDsIpDestAddr=msanServiceFlowProfileMatchDsIpDestAddr, msanEnergyMeterTariff=msanEnergyMeterTariff, msanXdslProfile=msanXdslProfile, msanRadiusServerPort=msanRadiusServerPort, msanCpeServiceTaggedPorts=msanCpeServiceTaggedPorts, msanPppoeIaPortStatPADR=msanPppoeIaPortStatPADR, msanSwIpmiVersion=msanSwIpmiVersion, msanDslSeltStatusCableType=msanDslSeltStatusCableType, msanIgmpSnoopingGroupMembershipInterval=msanIgmpSnoopingGroupMembershipInterval, msanSyncSourceEthPortId=msanSyncSourceEthPortId, msanXdsl2LineAlarmConfTemplateTable=msanXdsl2LineAlarmConfTemplateTable, msanStpPortEntry=msanStpPortEntry, msanIgmpPortStatTxQuery=msanIgmpPortStatTxQuery, msanSfpDiagnosticsTempStatus=msanSfpDiagnosticsTempStatus, msanServiceFlowProfileUsMarkPcpValue=msanServiceFlowProfileUsMarkPcpValue, msanAdslAtucPhysExtnTxAtmCellCounter=msanAdslAtucPhysExtnTxAtmCellCounter, msanDhcpv6RaMode=msanDhcpv6RaMode, msanDslSeltStatusFitError=msanDslSeltStatusFitError, msanStpPortHelloTime=msanStpPortHelloTime, msanNetworkDhcpClientLocalOpt82=msanNetworkDhcpClientLocalOpt82, msanIsaRadiusServerEntry=msanIsaRadiusServerEntry, msanCpeIntfPortPowerMode=msanCpeIntfPortPowerMode, msanAcsClientStatus=msanAcsClientStatus, msanPortMirroringEntry=msanPortMirroringEntry, msanServiceFlowProfileMatchUsTcpDestPort=msanServiceFlowProfileMatchUsTcpDestPort, msanQosProfileMatchInIpPrecedence=msanQosProfileMatchInIpPrecedence, msanCliPrompt=msanCliPrompt, msanQosProfileMatchOutEthertype=msanQosProfileMatchOutEthertype, msanSwitchIGMPSnoopingVlanMaxResponseTime=msanSwitchIGMPSnoopingVlanMaxResponseTime, msanServiceFlowProfileDsMarkDscp=msanServiceFlowProfileDsMarkDscp, msanMlinecGlobal=msanMlinecGlobal, msanDhcpv6RaPortVlanRemoteIdEnterpriseNum=msanDhcpv6RaPortVlanRemoteIdEnterpriseNum, msanIgmpSnoopingMaxResponseTime=msanIgmpSnoopingMaxResponseTime, msanMacSgStatus=msanMacSgStatus, msanServiceFlowProfileMatchUsCPcp=msanServiceFlowProfileMatchUsCPcp, msanEapsDomainAdminState=msanEapsDomainAdminState, msanDhcpRaPortVlanRemoteId=msanDhcpRaPortVlanRemoteId, msanFilteringRuleRowStatus=msanFilteringRuleRowStatus, msanLagDetailedConfigTable=msanLagDetailedConfigTable, msanIsaRadiusServerPrimaryMode=msanIsaRadiusServerPrimaryMode, msanDVlanTagMode=msanDVlanTagMode, msanSfpInfoManufacturingDate=msanSfpInfoManufacturingDate, msanServiceFlowProfileMatchUsSPcp=msanServiceFlowProfileMatchUsSPcp, msanDhcpRaStatEntry=msanDhcpRaStatEntry, msanIsaStatistics=msanIsaStatistics, msanAdslLineExtnPMConfPMSF=msanAdslLineExtnPMConfPMSF, msanCpeIntfPortStatus=msanCpeIntfPortStatus, msanDhcpRaStatOpt82Present=msanDhcpRaStatOpt82Present, msanBridgeCCXInterface2=msanBridgeCCXInterface2, msanMulticastProfileIgmpProxy=msanMulticastProfileIgmpProxy, msanMvrDvlanTable=msanMvrDvlanTable, msanMulticastAclListGroupEntry=msanMulticastAclListGroupEntry, msanDhcpv6Statistics=msanDhcpv6Statistics, msanQosProfileInCdrBurstSize=msanQosProfileInCdrBurstSize, msanPortMirroring=msanPortMirroring, msanServiceFlowProfileDsQueuingPriority=msanServiceFlowProfileDsQueuingPriority, msanServiceFlowProfileMatchDsMacDestAddr=msanServiceFlowProfileMatchDsMacDestAddr, msanDslSpecificRaDsNrmDs=msanDslSpecificRaDsNrmDs, msanEapsDomainDeviceRole=msanEapsDomainDeviceRole, msanPppoeIaVlanStatus=msanPppoeIaVlanStatus, msanAppRateLimitIgmp=msanAppRateLimitIgmp, msanMlinecAdminState=msanMlinecAdminState, msanIPSGIpv4PortStaticBindMatchedFrames=msanIPSGIpv4PortStaticBindMatchedFrames, msanAdslAturPhysExtnTsspsDs=msanAdslAturPhysExtnTsspsDs, msanCliScriptRowStatus=msanCliScriptRowStatus, msanAdslLineExtnDsBinSnrUpdate=msanAdslLineExtnDsBinSnrUpdate, msanFilteringRuleTable=msanFilteringRuleTable, msanIpAclRuleVlanId2=msanIpAclRuleVlanId2, msanSfpDiagnosticsVoltageMin=msanSfpDiagnosticsVoltageMin, msanQosIntfProfileTable=msanQosIntfProfileTable, msanQosProfileMatchInIpTosMask=msanQosProfileMatchInIpTosMask, msanEnergyMeterDateTime=msanEnergyMeterDateTime, msanOtherInfo=msanOtherInfo, msanServiceProfileRowStatus=msanServiceProfileRowStatus, msanSfpDiagnosticsTxBiasStatus=msanSfpDiagnosticsTxBiasStatus, msanMacAclRuleAssignSVlanId=msanMacAclRuleAssignSVlanId, msanAdslAturPhysExtnChanPerfCD=msanAdslAturPhysExtnChanPerfCD, msanRadiusServerPrimaryMode=msanRadiusServerPrimaryMode, msanBoardConfPosition=msanBoardConfPosition, msanServiceFlowProfileMatchUsMacDestAddr=msanServiceFlowProfileMatchUsMacDestAddr, msanSwitchIGMPSnoopingVlanMRPExpirationTime=msanSwitchIGMPSnoopingVlanMRPExpirationTime, msanIgmpPortStatRxBlockByMcastCac=msanIgmpPortStatRxBlockByMcastCac, msanSfpInfoSerialNr=msanSfpInfoSerialNr, msanDhcpv6PortRaStatReconfigure=msanDhcpv6PortRaStatReconfigure, msanFilteringAttachedFilterTable=msanFilteringAttachedFilterTable, msanServiceFlowProfileUsCdrBurstSize=msanServiceFlowProfileUsCdrBurstSize, msanIPSGIpv4PortStaticBindMacAddress=msanIPSGIpv4PortStaticBindMacAddress, msanServiceFlowProfileStatus=msanServiceFlowProfileStatus, msanSystemSwUpgradePackageName=msanSystemSwUpgradePackageName, msanIgmpSnoopingAdminState=msanIgmpSnoopingAdminState, msanQosProfileMatchOutDestIpv6Address=msanQosProfileMatchOutDestIpv6Address, msanPortStormControlTable=msanPortStormControlTable, msanPortMulticastControlMode=msanPortMulticastControlMode, msan=msan, msanCliScriptApplyStatus=msanCliScriptApplyStatus, msanSystemLogsUpload=msanSystemLogsUpload, msanBoardListType=msanBoardListType, msanQosIntfProfileAtmVci=msanQosIntfProfileAtmVci, msanPppoeIaStatistics=msanPppoeIaStatistics, msanSwComponentId=msanSwComponentId, msanMvrMulticastGroupRowStatus=msanMvrMulticastGroupRowStatus, msanAdslLineExtnAtucBinSNRMargin=msanAdslLineExtnAtucBinSNRMargin, msanDiagnosticsTempOverheatThreshold=msanDiagnosticsTempOverheatThreshold, msanIPSGIpv4PortStaticBindEntry=msanIPSGIpv4PortStaticBindEntry, msanPortDVlanMapEntry=msanPortDVlanMapEntry, msanMvr=msanMvr, msanQosProfileOutCdrBurstSize=msanQosProfileOutCdrBurstSize, msanL2cpProfileStatus=msanL2cpProfileStatus, msanNetworkDhcpClientLeaseObtained=msanNetworkDhcpClientLeaseObtained, msanFilteringAttachedFilterRowStatus=msanFilteringAttachedFilterRowStatus, msanQosProfileInCdr=msanQosProfileInCdr, msanSyncEntry=msanSyncEntry, msanDslSeltStatusNoiseType=msanDslSeltStatusNoiseType, msanFilteringFilterId=msanFilteringFilterId, msanFtpServerAdminState=msanFtpServerAdminState, msanPortSecurityPortVlanEntry=msanPortSecurityPortVlanEntry, msanDiagnosticsGlobal=msanDiagnosticsGlobal, msanEnergyMeterEnergySumEntry=msanEnergyMeterEnergySumEntry, msanPortMNFlag=msanPortMNFlag, msanIpAclStatus=msanIpAclStatus, msanMulticastAclListVlanGroupTable=msanMulticastAclListVlanGroupTable, msanQosProfileMatchOutIpTosBits=msanQosProfileMatchOutIpTosBits, msanErrorDisablePortTable=msanErrorDisablePortTable, msanAtmGlobal=msanAtmGlobal, msanDhcpv6PortRaStatSysError=msanDhcpv6PortRaStatSysError, msanStpMstRowStatus=msanStpMstRowStatus, msanCpeTrafficId=msanCpeTrafficId, msanServiceFlowProfileMatchUsIpDestAddr=msanServiceFlowProfileMatchUsIpDestAddr, msanFilteringAssignFilterRowStatus=msanFilteringAssignFilterRowStatus, msanDhcpRaPortMaxDataRate=msanDhcpRaPortMaxDataRate, msanIsaTalPortMatchUserMask=msanIsaTalPortMatchUserMask, msanDslSpecificScMaskDs=msanDslSpecificScMaskDs, msanMulticastAclIntfListRowStatus=msanMulticastAclIntfListRowStatus, msanEapsDomainProtVlanEntry=msanEapsDomainProtVlanEntry, msanCpeTrafficTable=msanCpeTrafficTable, msanDiagnosticsTempCriticOverheatThreshold=msanDiagnosticsTempCriticOverheatThreshold, msanDhcpv6RaPortVlanRemoteId=msanDhcpv6RaPortVlanRemoteId, msanMacTableMacAddress=msanMacTableMacAddress, msanQosProfileMatchInCos2=msanQosProfileMatchInCos2, msanPortDVlanConfigTable=msanPortDVlanConfigTable, msanDhcpRaStatOffer=msanDhcpRaStatOffer, msanSwitchIGMPSnoopingVlanGroupMembershipInterval=msanSwitchIGMPSnoopingVlanGroupMembershipInterval, msanIsaTalPortMatchDhcpOpt82RemoteId=msanIsaTalPortMatchDhcpOpt82RemoteId, msanAlarmPanelAdminState=msanAlarmPanelAdminState, msanServiceFlowProfileMatchUsEthertype=msanServiceFlowProfileMatchUsEthertype, msanMacTableType=msanMacTableType, msanAdslGlobal=msanAdslGlobal, msanSecurityAclProfileSequence=msanSecurityAclProfileSequence, msanSntpTzDstStartTime=msanSntpTzDstStartTime, msanChassisId=msanChassisId, msanEnergyMeterDepth=msanEnergyMeterDepth, msanAddressLearningMode=msanAddressLearningMode, msanBridgeMacTableSize=msanBridgeMacTableSize, msanAuthenticationListMethod2=msanAuthenticationListMethod2, msanIsaTalPortMatchTable=msanIsaTalPortMatchTable, msanAdslLineExtnLineDmtTrellis=msanAdslLineExtnLineDmtTrellis, msanSnmp=msanSnmp, msanMulticastProfileIgmpSnoopingSuppression=msanMulticastProfileIgmpSnoopingSuppression, msanQosProfileInMarkCos=msanQosProfileInMarkCos, msanDslSeltStatusLoopTermination=msanDslSeltStatusLoopTermination, msanDVlanConfigRowStatus=msanDVlanConfigRowStatus, msanQosProfileMatchOutCos=msanQosProfileMatchOutCos, msanIsaTalPatternMatchDhcpOpt61ClientId=msanIsaTalPatternMatchDhcpOpt61ClientId, msanSwitchMFDBEntry=msanSwitchMFDBEntry, msanArpInspectionVlanStatDroppedFrames=msanArpInspectionVlanStatDroppedFrames, msanIsaPortEntry=msanIsaPortEntry, msanQosProfileMatchInMacDestAddr=msanQosProfileMatchInMacDestAddr, msanPortMulticastControlThreshold=msanPortMulticastControlThreshold, msanCpeServiceCMltcstMode=msanCpeServiceCMltcstMode, msanDVlanConfigInTagVlanId=msanDVlanConfigInTagVlanId, msanSfpInfoPartNr=msanSfpInfoPartNr, msanIsaTalPatternMatchDhcpOpt61ClientIdMacAddr=msanIsaTalPatternMatchDhcpOpt61ClientIdMacAddr, msanForwardingDb=msanForwardingDb, msanMacTableLength=msanMacTableLength, msanNetworkSubnetMask=msanNetworkSubnetMask, msanAdslAtucPhysExtnSelfTestResult=msanAdslAtucPhysExtnSelfTestResult, msanCpeServiceRowStatus=msanCpeServiceRowStatus, VlanList=VlanList, msanAdslAtucPhysExtnGainspsUs=msanAdslAtucPhysExtnGainspsUs, msanIsaTalPatternMatchEntry=msanIsaTalPatternMatchEntry, msanDiagnosticsTestCode=msanDiagnosticsTestCode, msanIPSGStoreAdminMode=msanIPSGStoreAdminMode, msanIPSGPortBindCurrentIpAddress=msanIPSGPortBindCurrentIpAddress, msanIsaTalPatternMatchRowStatus=msanIsaTalPatternMatchRowStatus, msanAlarmPanelInputErrCode=msanAlarmPanelInputErrCode, msanMacAclRuleCVlanIdRangeEnd=msanMacAclRuleCVlanIdRangeEnd, msanSystemLogsUploadStart=msanSystemLogsUploadStart)
mibBuilder.exportSymbols("ISKRATEL-MSAN-MIB", msanSecurityProfileTable=msanSecurityProfileTable, msanDVlanConfigInTagPriority=msanDVlanConfigInTagPriority, msanDslSpecificTable=msanDslSpecificTable, msanAdslAtucPhysExtnSeltUpMgnAtRate=msanAdslAtucPhysExtnSeltUpMgnAtRate, msanIsaTalPortMatchIpSrcMask=msanIsaTalPortMatchIpSrcMask, msanPortAtmPvcRowStatus=msanPortAtmPvcRowStatus, msanDslPsdMaskDsShape=msanDslPsdMaskDsShape, msanMulticastProfileProtection=msanMulticastProfileProtection, msanMulticastAclListGroupRowStatus=msanMulticastAclListGroupRowStatus, msanAppRateLimitDhcpState=msanAppRateLimitDhcpState, msanMulticastProfileRowStatus=msanMulticastProfileRowStatus, msanCpeIntfTypeTable=msanCpeIntfTypeTable, msanSecurityProfilePortSecurity=msanSecurityProfilePortSecurity, msanBoardConfRequiredId=msanBoardConfRequiredId, msanQosProfileMatchOutL4DestPort=msanQosProfileMatchOutL4DestPort, msanDslSpecificDpboEsEL=msanDslSpecificDpboEsEL, msanDiagnosticsErrorSeverityTable=msanDiagnosticsErrorSeverityTable, msanAdslAtucPhysExtnBertSync=msanAdslAtucPhysExtnBertSync, msanAdslAtucSATN=msanAdslAtucSATN, msanEnergyMeterCurrTariff=msanEnergyMeterCurrTariff, msanQosProfileMatchInIpSrcAddr=msanQosProfileMatchInIpSrcAddr, msanPortMirroringAdminState=msanPortMirroringAdminState, msanSfpDiagnosticsVoltageStatus=msanSfpDiagnosticsVoltageStatus, msanDhcpRaPortVlanConfigEntry=msanDhcpRaPortVlanConfigEntry, msanDVlanConfigOutTagVlanId=msanDVlanConfigOutTagVlanId, msanSyncGlobal=msanSyncGlobal, msanDslSpecificRaDsNrmUs=msanDslSpecificRaDsNrmUs, msanPortGlobal=msanPortGlobal, msanL2cpProfileVlanEntry=msanL2cpProfileVlanEntry, msanStpMstPortEntry=msanStpMstPortEntry, msanShelfSize=msanShelfSize, msanCpeIntfPortId=msanCpeIntfPortId, msanFilteringRuleToIp=msanFilteringRuleToIp, msanIsaPortStatEntry=msanIsaPortStatEntry, msanIpAclRuleCos=msanIpAclRuleCos, msanIpAclRuleVlanId2RangeStart=msanIpAclRuleVlanId2RangeStart, msanCpeTrafficName=msanCpeTrafficName, msanStpMstPortPathCost=msanStpMstPortPathCost, msanMvrMulticastGroupMVlanId=msanMvrMulticastGroupMVlanId, msanMvrConfigMVlanId=msanMvrConfigMVlanId, msanPortAtmPvcTable=msanPortAtmPvcTable, msanCosMapIntfTrustTable=msanCosMapIntfTrustTable, msanBoardId=msanBoardId, msanSystemLogsUploadServerIpAddress=msanSystemLogsUploadServerIpAddress, msanAdslAtucPhysExtnTestArray=msanAdslAtucPhysExtnTestArray, msanAcsDomainName=msanAcsDomainName, msanBridgeCCXTable=msanBridgeCCXTable, msanDhcpRaStatTable=msanDhcpRaStatTable, msanArpInspectionAdminMode=msanArpInspectionAdminMode, msanMacAclRuleRemoveSVlanId=msanMacAclRuleRemoveSVlanId, msanVlanProfileProtection=msanVlanProfileProtection, msanDhcpRaFullModeVlanEntry=msanDhcpRaFullModeVlanEntry, msanMacSgPortViolationsCounter=msanMacSgPortViolationsCounter, msanSystemSwUpgradeUserPassword=msanSystemSwUpgradeUserPassword, msanIPSGIpv4PortStaticBindRowStatus=msanIPSGIpv4PortStaticBindRowStatus, msanIgmpPortStatRxBlockByIgmpFilter=msanIgmpPortStatRxBlockByIgmpFilter, msanFilteringRuleResponse=msanFilteringRuleResponse, msanInternalVlanId=msanInternalVlanId, msanIPSGIpv4PortStaticBindTable=msanIPSGIpv4PortStaticBindTable, msanPppoeIaVlanTable=msanPppoeIaVlanTable, msanDhcpRaFullModeSrvIpAddr=msanDhcpRaFullModeSrvIpAddr, msanDhcpRaVlanConfigEntry=msanDhcpRaVlanConfigEntry, msanSntpGlobal=msanSntpGlobal, msanNetworkDhcpClientVlanLocalOpt82=msanNetworkDhcpClientVlanLocalOpt82, msanQosProfileMatchInCos=msanQosProfileMatchInCos, msanAdslAtucPhysExtnDeltSNRMTus=msanAdslAtucPhysExtnDeltSNRMTus, msanIsaPortStatAuthenReqSent=msanIsaPortStatAuthenReqSent, msanDiagnosticsErrorFilterRowStatus=msanDiagnosticsErrorFilterRowStatus, msanServiceProfileMulticastProfileName=msanServiceProfileMulticastProfileName, msanMulticastAclGroupIpAddr=msanMulticastAclGroupIpAddr, msanServiceFlowProfileMatchUsUdpDstPort=msanServiceFlowProfileMatchUsUdpDstPort, msanDslSpecificUpboUs2b=msanDslSpecificUpboUs2b, msanQosPortStatEntry=msanQosPortStatEntry, msanDhcpv6RaStatRebind=msanDhcpv6RaStatRebind, msanAdslLineExtnUtopiaL2TxAddr=msanAdslLineExtnUtopiaL2TxAddr, msanAdslAturPhysExtnDeltLastTxState=msanAdslAturPhysExtnDeltLastTxState, msanStp=msanStp, msanPppoeIaPortStatPADO=msanPppoeIaPortStatPADO, msanEnergyMeterFwVersion=msanEnergyMeterFwVersion, msanIgmpSnoopingIntfStandaloneQuerier=msanIgmpSnoopingIntfStandaloneQuerier, msanSfpDiagnosticsRxPowerMax=msanSfpDiagnosticsRxPowerMax, msanSync=msanSync, msanDslSpecificSystemState=msanDslSpecificSystemState, msanMulticast=msanMulticast, msanSwBootPackageStatus=msanSwBootPackageStatus, msanSyncSourceType=msanSyncSourceType, msanIsaRadiusServerPort=msanIsaRadiusServerPort, msanConfData=msanConfData, msanSystemLogsUploadUserPassword=msanSystemLogsUploadUserPassword, msanIgmpPortStatRxV1=msanIgmpPortStatRxV1, msanAdslAtucPhysExtnPMState=msanAdslAtucPhysExtnPMState, msanFilteringFilterName=msanFilteringFilterName, msanShelfInfo=msanShelfInfo, msanAuthentication=msanAuthentication, msanFilteringRulePrec=msanFilteringRulePrec, msanQosProfileMatchOutMacSrcAddr=msanQosProfileMatchOutMacSrcAddr, msanIPSGIntfFilteringMode=msanIPSGIntfFilteringMode, msanErrorDisablePortStatus=msanErrorDisablePortStatus, msanMulticastGroupName=msanMulticastGroupName, msanDslPsdMaskDsEntry=msanDslPsdMaskDsEntry, msanRadiusServerCurrentMode=msanRadiusServerCurrentMode, msanBoardListId=msanBoardListId, msanMacTable=msanMacTable, msanVlanProfileRowStatus=msanVlanProfileRowStatus, msanDslSpecificMinSnrmUs=msanDslSpecificMinSnrmUs, msanServiceFlowProfileMatchUsCVlanIdRange=msanServiceFlowProfileMatchUsCVlanIdRange, msanDhcpv6PortRaStatRelease=msanDhcpv6PortRaStatRelease, msanDslPsdMaskUsName=msanDslPsdMaskUsName, msanServiceFlowProfileMatchDsSVlanIdRange=msanServiceFlowProfileMatchDsSVlanIdRange, msanQosPortProfileStatTable=msanQosPortProfileStatTable, msanMacTableUsed=msanMacTableUsed, msanCosQueueControlEntry=msanCosQueueControlEntry, msanQosProfileMatchInDestIpv6Address=msanQosProfileMatchInDestIpv6Address, msanAlarmPanelInputEntry=msanAlarmPanelInputEntry, msanDhcpv6RaStatSolicit=msanDhcpv6RaStatSolicit, msanSfpDiagnosticsTxBiasCrrMax=msanSfpDiagnosticsTxBiasCrrMax, msanUserConfig=msanUserConfig, msanMulticastGroupIpAddr=msanMulticastGroupIpAddr, msanCpeGlobal=msanCpeGlobal, msanIPSGPortBindCurrentLeaseRemainingTime=msanIPSGPortBindCurrentLeaseRemainingTime, msanAlarmPanelIndex=msanAlarmPanelIndex, msanFilteringRuleFromMacMask=msanFilteringRuleFromMacMask, msanPppoeIaStatPADO=msanPppoeIaStatPADO, msanSystemLogsUploadFileName=msanSystemLogsUploadFileName, msanSfpDiagnosticsVoltageMax=msanSfpDiagnosticsVoltageMax, msanDhcpv6RaStatRequest=msanDhcpv6RaStatRequest, msanServiceFlowProfileUsMarkDscpValue=msanServiceFlowProfileUsMarkDscpValue, msanSystemLogsUploadUserName=msanSystemLogsUploadUserName, msanIPSGBindingsEntry=msanIPSGBindingsEntry, msanStpCstExtPortPathCost=msanStpCstExtPortPathCost, msanDhcpv6RaPortVlanConfigTable=msanDhcpv6RaPortVlanConfigTable, msanAlarmPanelIndicatorTable=msanAlarmPanelIndicatorTable, msanErrorDisablePortCause=msanErrorDisablePortCause, msanServiceProfileDhcpRaTrustClients=msanServiceProfileDhcpRaTrustClients, msanIsaPortLoginMask=msanIsaPortLoginMask, msanMulticastGroupRowStatus=msanMulticastGroupRowStatus, msanFilteringAssignFilterCos=msanFilteringAssignFilterCos, msanPortUnicastControlThreshold=msanPortUnicastControlThreshold, msanDhcpRaStatMaxPacketSizeExceeded=msanDhcpRaStatMaxPacketSizeExceeded, msanAdslAtucPhysExtnPsdMaskMode=msanAdslAtucPhysExtnPsdMaskMode, msanLagTable=msanLagTable, msanIsaPortStatTalMatchedFrames=msanIsaPortStatTalMatchedFrames, msanDiagnosticsErrorSeverityRowStatus=msanDiagnosticsErrorSeverityRowStatus, msanServiceFlowProfileDsMarkDscpValue=msanServiceFlowProfileDsMarkDscpValue, msanRemoteAccess=msanRemoteAccess, msanMvrConfigRowStatus=msanMvrConfigRowStatus, msanSnmpTrapRecvUdpPort=msanSnmpTrapRecvUdpPort, msanDslPsdMaskDsType=msanDslPsdMaskDsType, msanMacSgGlobal=msanMacSgGlobal, msanQosProfileMatchOutSrcIpv6Address=msanQosProfileMatchOutSrcIpv6Address, msanRemoteAccessFilterNetmask=msanRemoteAccessFilterNetmask, msanDslSeltStatusTable=msanDslSeltStatusTable, msanEapsDomainProtVlanTable=msanEapsDomainProtVlanTable, msanSntpTzDstStartMonth=msanSntpTzDstStartMonth, msanSntpTzDstEndTime=msanSntpTzDstEndTime, msanDslSpecificL0Time=msanDslSpecificL0Time, msanPppAdminState=msanPppAdminState, msanQosPortStatOutDroppedFrames=msanQosPortStatOutDroppedFrames, msanErrorDisablePortTimeLeft=msanErrorDisablePortTimeLeft, msanSecurityProfileArpInspec=msanSecurityProfileArpInspec, msanDhcpRaPortOpt82=msanDhcpRaPortOpt82, msanIPSGIntfBindsLimitDhcpv6=msanIPSGIntfBindsLimitDhcpv6, msanXdsl2LineAlarmConfTemplateEntry=msanXdsl2LineAlarmConfTemplateEntry, msanMulticastProfileIgmpSnoopingFastLeave=msanMulticastProfileIgmpSnoopingFastLeave, msanPppoeIAVsaReplyMode=msanPppoeIAVsaReplyMode, msanCliScriptEntry=msanCliScriptEntry, msanDiagnosticsErrorObjectTypeId=msanDiagnosticsErrorObjectTypeId, msanMacAclStatus=msanMacAclStatus, msanCpeServiceProtection=msanCpeServiceProtection, msanPortDVlanMapTable=msanPortDVlanMapTable, msanServiceFlowProfileMatchDsCPcp=msanServiceFlowProfileMatchDsCPcp, msanStormControl=msanStormControl, msanVlanProfileStatus=msanVlanProfileStatus, msanPppRemoteIpAddress=msanPppRemoteIpAddress, msanAuthenticationListTable=msanAuthenticationListTable, msanPortDVlanConfigEntry=msanPortDVlanConfigEntry, msanIsaTalPortMatchMacSrcMask=msanIsaTalPortMatchMacSrcMask, msanDiagnosticsErrorMeasureActive=msanDiagnosticsErrorMeasureActive, msanVlanRemarkAdminState=msanVlanRemarkAdminState, msanSwitchIGMPVlanCurrentMrouterTable=msanSwitchIGMPVlanCurrentMrouterTable, msanMacAclEntry=msanMacAclEntry, msanIsaPortStatAuthorReqConfirmed=msanIsaPortStatAuthorReqConfirmed, msanPppoeIaPortStatPADT=msanPppoeIaPortStatPADT, msanSfpDiagnosticsTxPowerCurrent=msanSfpDiagnosticsTxPowerCurrent, msanDhcpRaPortState=msanDhcpRaPortState, msanStpMstPortPriority=msanStpMstPortPriority, msanEapsDomainHelloTime=msanEapsDomainHelloTime, msanSystemSwUpgradeStatus=msanSystemSwUpgradeStatus, msanSwitchIGMPSnoopingIntfFastLeaveAdminMode=msanSwitchIGMPSnoopingIntfFastLeaveAdminMode, msanEapsGlobal=msanEapsGlobal, msanUserConfigCheckPassword=msanUserConfigCheckPassword, msanDslSeltStatusNoiseMrgUs=msanDslSeltStatusNoiseMrgUs, msanAdslAturPhysExtnDeltHLINSCds=msanAdslAturPhysExtnDeltHLINSCds, msanVlanProfile=msanVlanProfile, msanForwardingDbGlobal=msanForwardingDbGlobal, msanErrorDisablePortEntry=msanErrorDisablePortEntry, msanDslSeltStatusMaxRateUs=msanDslSeltStatusMaxRateUs, msanPortSecurityPortVlanDynamicLimit=msanPortSecurityPortVlanDynamicLimit, msanAdslAtucMSGds=msanAdslAtucMSGds, msanXdsl2LineConfTempProtection=msanXdsl2LineConfTempProtection, msanIpAclRuleRemoveSVlanId=msanIpAclRuleRemoveSVlanId, msanNetworkDefaultGateway=msanNetworkDefaultGateway, msanEapsDomainName=msanEapsDomainName, msanArpInspectionPortStatDroppedFrames=msanArpInspectionPortStatDroppedFrames, msanQosProfileInPdrBurstSize=msanQosProfileInPdrBurstSize, msanPortMirroringMemberDirection=msanPortMirroringMemberDirection, msanServiceProfileEntry=msanServiceProfileEntry, msanXdsl2LineConfTemplateTable=msanXdsl2LineConfTemplateTable, msanQosStatistics=msanQosStatistics, msanBoardEntry=msanBoardEntry, msanServiceProfileDhcpRa=msanServiceProfileDhcpRa, msanIpAclRuleDestIpv6Address=msanIpAclRuleDestIpv6Address, msanIgmpPortStatRxV2Join=msanIgmpPortStatRxV2Join, msanVlanProfileSEtherType=msanVlanProfileSEtherType, msanAppRateLimitStp=msanAppRateLimitStp, msanPortVlanTable=msanPortVlanTable, msanPppoeIAPortRemoteId=msanPppoeIAPortRemoteId, msanMacAclRuleEntry=msanMacAclRuleEntry, msanDiagnosticsErrorCode=msanDiagnosticsErrorCode, msanDiagnosticsTestTimeMin=msanDiagnosticsTestTimeMin, msanDiagnosticsErrorProbableCause=msanDiagnosticsErrorProbableCause, msanPppoeIaPortStatUnsutableFrames=msanPppoeIaPortStatUnsutableFrames, msanAppRateLimitStpState=msanAppRateLimitStpState, msanAuthenticationListName=msanAuthenticationListName, msanStpGlobal=msanStpGlobal, msanSfpDiagnosticsRxPowerStatus=msanSfpDiagnosticsRxPowerStatus, msanDslSpecificDsPsdMask=msanDslSpecificDsPsdMask, msanIPSGPortBindCurrentId=msanIPSGPortBindCurrentId, msanIpAclId=msanIpAclId, msanDiagnosticsErrorTable=msanDiagnosticsErrorTable, msanDhcpRaVlanCircuitIdType=msanDhcpRaVlanCircuitIdType, msanIPSGIpv6PortStaticBindMacAddress=msanIPSGIpv6PortStaticBindMacAddress, msanEapsDomainEntry=msanEapsDomainEntry, msanIpAclRuleIcmpType=msanIpAclRuleIcmpType, msanAdslLineExtnTable=msanAdslLineExtnTable, msanAcsGlobal=msanAcsGlobal, msanMulticastGroupTable=msanMulticastGroupTable, msanQosProfileMatchInL4DestPort=msanQosProfileMatchInL4DestPort, msanMvrConfigTable=msanMvrConfigTable, msanBoardInfo=msanBoardInfo, msanAdslLineExtnAtucCurrOutputPwr=msanAdslLineExtnAtucCurrOutputPwr, msanRemoteAccessFilterRuleIndex=msanRemoteAccessFilterRuleIndex, msanAdslAtucPhysExtnOpState=msanAdslAtucPhysExtnOpState, msanPortSecurityStatMacVlanId=msanPortSecurityStatMacVlanId, msanIgmpPortStatEntry=msanIgmpPortStatEntry, msanQoS=msanQoS, msanDhcpv6RaStatReconfigure=msanDhcpv6RaStatReconfigure, msanMulticastAclListVlanGroupIpAddr=msanMulticastAclListVlanGroupIpAddr, msanIpAclRuleDestMacAddr=msanIpAclRuleDestMacAddr, msanSntpTzDstEndWeek=msanSntpTzDstEndWeek, msanDiagnosticsTestEntry=msanDiagnosticsTestEntry, msanDhcpRaStatDecline=msanDhcpRaStatDecline, msanIsaTalPatternMatchVlanId=msanIsaTalPatternMatchVlanId, msanIgmpStatRxBlockByMcastAcl=msanIgmpStatRxBlockByMcastAcl)
mibBuilder.exportSymbols("ISKRATEL-MSAN-MIB", msanSnmpSetErrorReason=msanSnmpSetErrorReason, msanDhcpRaStatRelease=msanDhcpRaStatRelease, msanAdslAtucPhysExtnDeltHLOGpsus=msanAdslAtucPhysExtnDeltHLOGpsus, msanBridgeGlobal=msanBridgeGlobal, msanIsaRadiusServerSecret=msanIsaRadiusServerSecret, msanSystemLogsUploadProtocolPortId=msanSystemLogsUploadProtocolPortId, msanQosProfileMatchInAny=msanQosProfileMatchInAny, msanStpBpduFilterTable=msanStpBpduFilterTable, msanDhcpRaVlanOpt82ReplyMode=msanDhcpRaVlanOpt82ReplyMode, msanSyncBoardPosition=msanSyncBoardPosition, msanSntpTzDstEndDayInWeek=msanSntpTzDstEndDayInWeek, msanMvrPortAdminMode=msanMvrPortAdminMode, msanIsaPortStatTable=msanIsaPortStatTable, msanL2cpProfileProtocolEntry=msanL2cpProfileProtocolEntry, msanServiceProfileAtmVpi=msanServiceProfileAtmVpi, msanDiagnosticsTempCriticUnderheatThreshold=msanDiagnosticsTempCriticUnderheatThreshold, msanRemoteAccessFilterEntry=msanRemoteAccessFilterEntry, msanMacTableVLAN=msanMacTableVLAN, msanSecurityProfileProtectedPort=msanSecurityProfileProtectedPort, msanQosProfileMatchInSrcIpv6Address=msanQosProfileMatchInSrcIpv6Address, msanIsaTalPatternMatchMacSrcMask=msanIsaTalPatternMatchMacSrcMask, msanMulticastIntfStaticGroupTable=msanMulticastIntfStaticGroupTable, msanIgmpPortStatTxV1=msanIgmpPortStatTxV1, Xdsl2PsdMaskUs=Xdsl2PsdMaskUs, msanCpeIntfServiceRowStatus=msanCpeIntfServiceRowStatus, msanPppoeIAPortStatus=msanPppoeIAPortStatus, msanSyncRowStatus=msanSyncRowStatus, msanDslSpecificMaxSnrmDs=msanDslSpecificMaxSnrmDs, msanPortVlanRemarkAdminTable=msanPortVlanRemarkAdminTable, msanVlanProfileDescription=msanVlanProfileDescription, msanDslSpecificUpboUs2a=msanDslSpecificUpboUs2a, msanAdslAturPhysExtnG9941VendorId=msanAdslAturPhysExtnG9941VendorId, msanSfpDiagnosticsTxPowerMax=msanSfpDiagnosticsTxPowerMax, msanQosProfileMatchOutSrcIpv6AddressMaskLen=msanQosProfileMatchOutSrcIpv6AddressMaskLen, msanAdditionalConf=msanAdditionalConf, msanDhcpRaPortOpt82ReplyMode=msanDhcpRaPortOpt82ReplyMode, msanIpAclRuleSVlanId=msanIpAclRuleSVlanId, msanIsaPortStatTalDroppedFrames=msanIsaPortStatTalDroppedFrames, msanQosProfileMatchOutDestIpv6AddressMaskLen=msanQosProfileMatchOutDestIpv6AddressMaskLen, msanMacAclRuleTable=msanMacAclRuleTable, msanIpAclRuleAssignCoSPriority=msanIpAclRuleAssignCoSPriority, msanDslSpecificDpboEsCmC=msanDslSpecificDpboEsCmC, msanReservePackage=msanReservePackage, msanFilteringRuleIpProto=msanFilteringRuleIpProto, msanBoardConfSwBuildDirectory=msanBoardConfSwBuildDirectory, msanUserIndex=msanUserIndex, msanDhcpRaPortRemoteId=msanDhcpRaPortRemoteId, msanShelfIdConf=msanShelfIdConf, msanAdslAtucPhysExtnSeltUpShannonCap=msanAdslAtucPhysExtnSeltUpShannonCap, msanIPSGPortBindCurrentType=msanIPSGPortBindCurrentType, msanIPSGIntfBindsLimitND=msanIPSGIntfBindsLimitND, msanDiagnosticsTempSensorID=msanDiagnosticsTempSensorID, msanAppRateLimitTable=msanAppRateLimitTable, msanIpAclRuleEgressIntf=msanIpAclRuleEgressIntf, msanAdslAturPhysExtnChanPerfCU=msanAdslAturPhysExtnChanPerfCU, msanShelfId=msanShelfId, msanRemoteAccessFilterIp=msanRemoteAccessFilterIp, msanAdslAturPhysExtnEntry=msanAdslAturPhysExtnEntry, msanBoardConfSerialNr=msanBoardConfSerialNr, PercentByFives=PercentByFives, msanNetworkDhcpClientLeaseExpires=msanNetworkDhcpClientLeaseExpires, msanMulticastProfileStatus=msanMulticastProfileStatus, msanUserConfigGlobal=msanUserConfigGlobal, PYSNMP_MODULE_ID=msan, msanAdslAtucPhysExtnTsspsUs=msanAdslAtucPhysExtnTsspsUs, msanDhcpv6PortRaStatFrameError=msanDhcpv6PortRaStatFrameError, msanIsaRadiusServerRowStatus=msanIsaRadiusServerRowStatus, Xdsl2PsdMaskDs=Xdsl2PsdMaskDs, msanDslPsdMaskUsRowStatus=msanDslPsdMaskUsRowStatus, msanMulticastIntfVlanStaticGroupRowStatus=msanMulticastIntfVlanStaticGroupRowStatus, msanAdslAtucPhysExtnBertError=msanAdslAtucPhysExtnBertError, msanServiceFlowProfileMatchDsMacSrcAddr=msanServiceFlowProfileMatchDsMacSrcAddr, msanDhcpRaOpt82UnicastExtStatus=msanDhcpRaOpt82UnicastExtStatus, msanFilteringRuleFromPortHigh=msanFilteringRuleFromPortHigh, msanBoardConfActualId=msanBoardConfActualId, msanEnergyMeterIpAddress=msanEnergyMeterIpAddress, msanPppoeIAPortTable=msanPppoeIAPortTable, msanSecurityProfileStatus=msanSecurityProfileStatus, msanDhcpRaPortCircuitType=msanDhcpRaPortCircuitType, msanIgmpSnoopingIntfFilter=msanIgmpSnoopingIntfFilter, msanDhcpRaVlanState=msanDhcpRaVlanState, msanDiagnosticsTestTable=msanDiagnosticsTestTable, msanPppVanJacobsonCompression=msanPppVanJacobsonCompression, msanStpMstEntry=msanStpMstEntry, msanSyncDestinationType=msanSyncDestinationType, msanMulticastAclIntfListMode=msanMulticastAclIntfListMode, msanDhcpv6RaPortState=msanDhcpv6RaPortState, msanIgmpSnooping=msanIgmpSnooping, msanStormControlGlobal=msanStormControlGlobal, msanDhcpv6PortRaStatInformRequest=msanDhcpv6PortRaStatInformRequest, msanMvrConfigCVlanId=msanMvrConfigCVlanId, msanIgmpSnoopingFastLeaveAdminMode=msanIgmpSnoopingFastLeaveAdminMode, msanStpPortTable=msanStpPortTable, msanMulticastProfileDescription=msanMulticastProfileDescription, msanSwitchIGMPVlanStaticMrouterTable=msanSwitchIGMPVlanStaticMrouterTable, msanPppoeIaPortStatInvalidFrames=msanPppoeIaPortStatInvalidFrames, msanAdslAturPhysExtnDeltHLOGMTds=msanAdslAturPhysExtnDeltHLOGMTds, msanBoardConfSwBranch=msanBoardConfSwBranch, msanCosQueueIntfShapingRate=msanCosQueueIntfShapingRate, msanDslSpecificGlobal=msanDslSpecificGlobal, msanPppGlobal=msanPppGlobal, msanSfpDiagnosticsTxBiasCrrMin=msanSfpDiagnosticsTxBiasCrrMin, msanServiceFlowProfileMatchDsTcpDestPort=msanServiceFlowProfileMatchDsTcpDestPort, msanAdslAturPhysExtnBitSwapCount=msanAdslAturPhysExtnBitSwapCount, msanServiceFlowProfileMatchUsSVlanIdRange=msanServiceFlowProfileMatchUsSVlanIdRange, msanIgmpStatRxV1=msanIgmpStatRxV1, msanDslSpecificL2Time=msanDslSpecificL2Time, msanStpBpduFilterEntry=msanStpBpduFilterEntry, msanMvrPortTable=msanMvrPortTable, msanBoardConfEntry=msanBoardConfEntry, msanCliScriptName=msanCliScriptName, msanMacTableCAMEntry=msanMacTableCAMEntry, msanEnergyMeterGlobal=msanEnergyMeterGlobal, msanIPSGPortBindCurrentIpAddressType=msanIPSGPortBindCurrentIpAddressType, msanQosProfileMatchOutAny=msanQosProfileMatchOutAny, msanLag=msanLag, msanCpeServiceEntry=msanCpeServiceEntry, msanAdslAturPhysExtnPsdMaskMode=msanAdslAturPhysExtnPsdMaskMode, msanIsaTalPatternMatchDhcpOpt60VendorId=msanIsaTalPatternMatchDhcpOpt60VendorId, msanRadiusServerConfigEntry=msanRadiusServerConfigEntry, msanEaps=msanEaps, msanCpeIntfPortPvid=msanCpeIntfPortPvid, msanFilteringAssignFilterTable=msanFilteringAssignFilterTable, msanIgmpStatRxBlockByIgmpFilter=msanIgmpStatRxBlockByIgmpFilter, msanIsaRadiusServerTable=msanIsaRadiusServerTable, msanQosProfileMatchOutIpTosMask=msanQosProfileMatchOutIpTosMask, msanDiagnosticsErrorFilterErrMask=msanDiagnosticsErrorFilterErrMask, msanServiceFlowProfileRowStatus=msanServiceFlowProfileRowStatus, msanSwitchMFDBType=msanSwitchMFDBType, msanEnergyMeterEnergyTable=msanEnergyMeterEnergyTable, msanMulticastProfileIgmpFiltering=msanMulticastProfileIgmpFiltering, msanAlarmPanelConnectionState=msanAlarmPanelConnectionState, msanSfpDiagnosticsSignal=msanSfpDiagnosticsSignal, msanFilteringRuleToMacMask=msanFilteringRuleToMacMask, msanIgmpStatistics=msanIgmpStatistics, msanDiagnosticsErrorSeverityEntry=msanDiagnosticsErrorSeverityEntry, msanEnergyMeterEnergySumValue=msanEnergyMeterEnergySumValue, msanIPSGIpv4PortStaticBindVlanId=msanIPSGIpv4PortStaticBindVlanId, msanL2cpProfileProtocolTable=msanL2cpProfileProtocolTable, msanSecondaryDnsIpAddress=msanSecondaryDnsIpAddress, msanSntpTzName=msanSntpTzName, msanDslPsdMaskUsEntry=msanDslPsdMaskUsEntry, msanSwBootPackageTable=msanSwBootPackageTable, msanLagDetailedIfIndex=msanLagDetailedIfIndex, msanVlanProfileCVidNative=msanVlanProfileCVidNative, msanCpeServiceTable=msanCpeServiceTable, msanIgmpPortStatRxError=msanIgmpPortStatRxError, msanL2cpProfileTable=msanL2cpProfileTable, msanBoardDescription=msanBoardDescription, msanFilteringRuleEtherProto=msanFilteringRuleEtherProto, msanPortBroadcastControlMode=msanPortBroadcastControlMode, msanIsaTalAdminMode=msanIsaTalAdminMode, msanPppoeIA=msanPppoeIA, msanServiceFlowProfileMatchDsUdpDstPort=msanServiceFlowProfileMatchDsUdpDstPort, msanPortDVlanMapRowStatus=msanPortDVlanMapRowStatus, msanPppoeIaStatPADR=msanPppoeIaStatPADR, msanPppoeIaStatInvalidFrames=msanPppoeIaStatInvalidFrames, msanFilteringAttachedFilterDirect=msanFilteringAttachedFilterDirect, msanCpeApiMajorVersion=msanCpeApiMajorVersion, msanAuthenticationListStatus=msanAuthenticationListStatus, msanPortSecurityStatMacMacAddress=msanPortSecurityStatMacMacAddress, msanDslPsdMaskUsTable=msanDslPsdMaskUsTable, msanPortDVlanEntry=msanPortDVlanEntry, msanSwitchIGMPSnoopingStaticIntfMulticastRouterTable=msanSwitchIGMPSnoopingStaticIntfMulticastRouterTable, msanMacAclRuleAssignCVlanId=msanMacAclRuleAssignCVlanId, msanPortMirroringMemberSrcPort=msanPortMirroringMemberSrcPort, msanAdslAtucPhysExtnDataBoostStatus=msanAdslAtucPhysExtnDataBoostStatus, msanIPSGIpv6PortStaticBindVlanId=msanIPSGIpv6PortStaticBindVlanId, msanCliScriptApply=msanCliScriptApply, msanSecurityProfileIpSgBindingLimit=msanSecurityProfileIpSgBindingLimit, msanFilteringRuleToMac=msanFilteringRuleToMac, msanMulticastAclIntfListEntry=msanMulticastAclIntfListEntry, msanSwitchIGMPSnoopingVlanAdminMode=msanSwitchIGMPSnoopingVlanAdminMode, msanIsaTalPatternMatchIpSrcMask=msanIsaTalPatternMatchIpSrcMask, msanSwitchIGMPSnoopingIntfGroupMembershipInterval=msanSwitchIGMPSnoopingIntfGroupMembershipInterval, msanAlarmPanel=msanAlarmPanel, msanIgmpSnoopingEntry=msanIgmpSnoopingEntry, msanSecurityProfile=msanSecurityProfile, msanCpeServiceTypeName=msanCpeServiceTypeName, msanVlanPortProfileTable=msanVlanPortProfileTable, msanSfpInfoNominalBitrate=msanSfpInfoNominalBitrate, msanAdslAtucPhysExtnActualStd=msanAdslAtucPhysExtnActualStd, msanAdslAtucPhysExtnBitSwapCount=msanAdslAtucPhysExtnBitSwapCount, msanEnergyMeterCoreVersion=msanEnergyMeterCoreVersion, msanVDSLProfileType=msanVDSLProfileType, msanDslSpecificSystemFirmware=msanDslSpecificSystemFirmware, msanDslSpecificPhyRUs=msanDslSpecificPhyRUs, msanMulticastAccessListTable=msanMulticastAccessListTable, msanPppoeIaStatPADT=msanPppoeIaStatPADT, msanIpAclRuleSrcIpv6Address=msanIpAclRuleSrcIpv6Address, msanQosProfileMatchInMacSrcAddr=msanQosProfileMatchInMacSrcAddr, msanMulticastIntfVlanStaticGroupTable=msanMulticastIntfVlanStaticGroupTable, msanSntpTzDstOffset=msanSntpTzDstOffset, msanDiagnosticsTempSensorName=msanDiagnosticsTempSensorName, msanDhcpv6RaStatRelayReply=msanDhcpv6RaStatRelayReply, msanSwitchIGMPSnoopingIntfAdminMode=msanSwitchIGMPSnoopingIntfAdminMode, msanDhcpv6PortRaStatRenew=msanDhcpv6PortRaStatRenew, msanDhcpRaStatACK=msanDhcpRaStatACK, msanSwitchMFDBDescription=msanSwitchMFDBDescription, msanDhcpv6RaInterfaceIdStandard=msanDhcpv6RaInterfaceIdStandard, msanAdslAtucPhysExtnSeltTerminationResp=msanAdslAtucPhysExtnSeltTerminationResp, msanDhcpv6PortRaStatRequest=msanDhcpv6PortRaStatRequest, msanPortNegCapAdvertisedBits=msanPortNegCapAdvertisedBits, msanResetWithDelayGlobal=msanResetWithDelayGlobal, msanSwitchIGMPVlanCurrentMrouterEnableState=msanSwitchIGMPVlanCurrentMrouterEnableState, msanQosProfileMatchInVlanId=msanQosProfileMatchInVlanId, msanDslSpecificRaUsNrmDs=msanDslSpecificRaUsNrmDs, msanPortSecurityPortVlanTable=msanPortSecurityPortVlanTable, msanSystemSwUpgradeProtocolPortId=msanSystemSwUpgradeProtocolPortId, msanIsaPortLoginUserPatternMask=msanIsaPortLoginUserPatternMask, msanDhcpRaOpt82RemoteIdStatus=msanDhcpRaOpt82RemoteIdStatus, msanErrorDisable=msanErrorDisable, msanCosQueueEntry=msanCosQueueEntry, msanSfpDiagnosticsTxPowerStatus=msanSfpDiagnosticsTxPowerStatus, msanRemoteAccessFilterRowStatus=msanRemoteAccessFilterRowStatus, msanAuthenticationListMethod1=msanAuthenticationListMethod1, msanAdslAtucPhysExtnDeltHLINSCus=msanAdslAtucPhysExtnDeltHLINSCus, msanVlanProfileSVid=msanVlanProfileSVid, msanStpMstVlanTable=msanStpMstVlanTable, msanIgmpPortStatRxBlockByMcastAcl=msanIgmpPortStatRxBlockByMcastAcl, msanDhcpv6RaPortConfigEntry=msanDhcpv6RaPortConfigEntry, msanSwSteerVersion=msanSwSteerVersion, msanQosProfileMatchOutIpSrcMask=msanQosProfileMatchOutIpSrcMask, msanDslSpecificSeltStatus=msanDslSpecificSeltStatus, msanDhcpRaPortMeter=msanDhcpRaPortMeter, msanCpeTypeTable=msanCpeTypeTable, msanIPSGIpv6PortStaticBindRowStatus=msanIPSGIpv6PortStaticBindRowStatus, msanServiceFlowProfileDsPdrBurstSize=msanServiceFlowProfileDsPdrBurstSize, msanBoardConfDescription=msanBoardConfDescription, msanMulticastIntfStaticGroupEntry=msanMulticastIntfStaticGroupEntry, msanQosProfileMatchOutVlanId2=msanQosProfileMatchOutVlanId2, msanAuthenticationGlobal=msanAuthenticationGlobal, msanSwitchMFDBForwardingPortMask=msanSwitchMFDBForwardingPortMask, msanAdslAtucPhysExtnSeltDownMgnAtRate=msanAdslAtucPhysExtnSeltDownMgnAtRate, msanBoardConfSwBuildReference=msanBoardConfSwBuildReference, msanBoardConfStatus=msanBoardConfStatus, msanMulticastAccessListRowStatus=msanMulticastAccessListRowStatus, msanDiagnosticsErrorSeverityErrPriority=msanDiagnosticsErrorSeverityErrPriority, msanServiceFlowProfileMatchUsIpDropPrecedence=msanServiceFlowProfileMatchUsIpDropPrecedence, msanCpeServiceCVlanId=msanCpeServiceCVlanId, msanIpAclRuleCVlanIdRangeEnd=msanIpAclRuleCVlanIdRangeEnd, msanBridgeCCXRowStatus=msanBridgeCCXRowStatus, msanSecurityProfileMacSg=msanSecurityProfileMacSg, msanAdslAtucPhysExtnSeltLoopGauge=msanAdslAtucPhysExtnSeltLoopGauge, msanQosProfileInPdr=msanQosProfileInPdr, msanPortMirroringTable=msanPortMirroringTable, msanServiceFlowProfileMatchUsVlanProfile=msanServiceFlowProfileMatchUsVlanProfile, msanServiceFlowProfileDsMarkPcp=msanServiceFlowProfileDsMarkPcp, msanEnergyMeterEnergyValue=msanEnergyMeterEnergyValue, msanVlanGlobal=msanVlanGlobal, msanMulticastAclListVlanGroupRowStatus=msanMulticastAclListVlanGroupRowStatus, msanDhcpv6RaStatAdvertise=msanDhcpv6RaStatAdvertise, msanServiceFlowProfile=msanServiceFlowProfile, msanAppRateLimitPppoe=msanAppRateLimitPppoe)
mibBuilder.exportSymbols("ISKRATEL-MSAN-MIB", PortMask=PortMask, msanBoardConfNr=msanBoardConfNr, msanIPSGIntfBindsLimit=msanIPSGIntfBindsLimit, msanMacAclTable=msanMacAclTable, msanSwitchIGMPProxyVlanIpAddr=msanSwitchIGMPProxyVlanIpAddr, msanDhcpRaCircuitType=msanDhcpRaCircuitType, msanNetwork=msanNetwork, msanIsaTalPatternMatchUserBits=msanIsaTalPatternMatchUserBits, msanEnergyMeterAddress=msanEnergyMeterAddress, msanFilteringRuleToMask=msanFilteringRuleToMask, msanBoardConfTable=msanBoardConfTable, msanDhcpRaPortCircuitIdType=msanDhcpRaPortCircuitIdType, msanMulticastAccessListIntfRowStatus=msanMulticastAccessListIntfRowStatus, msanQosProfileMatchOutIpDscp=msanQosProfileMatchOutIpDscp, msanFilteringFilterRowStatus=msanFilteringFilterRowStatus, msanServiceProfile=msanServiceProfile, msanServiceFlowProfileDsCdr=msanServiceFlowProfileDsCdr, msanSwBranch=msanSwBranch, msanQosProfileMatchInVlanId2=msanQosProfileMatchInVlanId2, msanVDSLProfileEntry=msanVDSLProfileEntry, msanRadiusServerAddress=msanRadiusServerAddress, msanDhcpRaVlanOpt82=msanDhcpRaVlanOpt82, msanDhcpv6RaPortInterfaceId=msanDhcpv6RaPortInterfaceId, msanIPSGAdminMode=msanIPSGAdminMode, msanIsaTalPatternMatchIpSrcAddr=msanIsaTalPatternMatchIpSrcAddr, msanStpMstBridgePriority=msanStpMstBridgePriority, msanArpInspectionVlanTable=msanArpInspectionVlanTable, msanIsaTalPortPatternMatchRowStatus=msanIsaTalPortPatternMatchRowStatus, msanAdslAtucPhysExtnParametricTestResult=msanAdslAtucPhysExtnParametricTestResult, msanIgmpStatRxBlockByMcastCac=msanIgmpStatRxBlockByMcastCac, msanCpeIntfPortCos=msanCpeIntfPortCos, msanMulticastAclListGroupTable=msanMulticastAclListGroupTable, msanStpMstTable=msanStpMstTable, msanL2cpProfileVlanTable=msanL2cpProfileVlanTable, msanIgmpStatGlobal=msanIgmpStatGlobal, msanAppRateLimitEntry=msanAppRateLimitEntry, msanDhcpv6RaState=msanDhcpv6RaState, msanMacSgPortEntry=msanMacSgPortEntry, msanQosProfileMatchOutMacDestMask=msanQosProfileMatchOutMacDestMask, msanL2cpProfile=msanL2cpProfile, msanDhcpv6PortRaStatSolicit=msanDhcpv6PortRaStatSolicit, msanIPSGPortBindCurrentIfIndex=msanIPSGPortBindCurrentIfIndex, msanIpAclRuleDestIpv6AddressMaskLen=msanIpAclRuleDestIpv6AddressMaskLen, msanQosProfileMatchInIpDscp=msanQosProfileMatchInIpDscp, msanIpAclTable=msanIpAclTable, msanDiagnosticsTestTimeMax=msanDiagnosticsTestTimeMax, msanServiceProfilePppoeIARateLimit=msanServiceProfilePppoeIARateLimit, msanIpAclRuleVlanIdRangeEnd=msanIpAclRuleVlanIdRangeEnd, msanVlanPortProfileRowStatus=msanVlanPortProfileRowStatus, msanCpeIntfTypeHwVersion=msanCpeIntfTypeHwVersion, msanIsaTalPortMatchDhcpType=msanIsaTalPortMatchDhcpType, msanSecurityAclProfileTable=msanSecurityAclProfileTable, msanCpeIntfPortEntry=msanCpeIntfPortEntry, msanDslSpecificUpboKL=msanDslSpecificUpboKL, msanPort=msanPort, msanSecurityProfileDescription=msanSecurityProfileDescription, msanSystemLogsUploadServerIpAddressType=msanSystemLogsUploadServerIpAddressType, msanStpCstPortPathCost=msanStpCstPortPathCost, msanDslSpecificMaxNomAtpDs=msanDslSpecificMaxNomAtpDs, msanServiceProfileAtmVci=msanServiceProfileAtmVci, msanCpeTypeName=msanCpeTypeName, msanIgmpPortStatRxBlockByIgmpVersion=msanIgmpPortStatRxBlockByIgmpVersion, msanDateTime=msanDateTime, msanDslSeltStatusNumTonesUs=msanDslSeltStatusNumTonesUs, msanFilteringRuleId=msanFilteringRuleId, msanQosProfileMatchInMacSrcMask=msanQosProfileMatchInMacSrcMask, msanDhcpRaOpt82=msanDhcpRaOpt82, msanDslSpecificUpboUs3b=msanDslSpecificUpboUs3b, msanAdslLineExtnUtopiaL2TxAddrSecond=msanAdslLineExtnUtopiaL2TxAddrSecond, msanQosProfileInTrustMode=msanQosProfileInTrustMode, msanSwBuildDirectory=msanSwBuildDirectory, msanIgmpPortStatRxQuery=msanIgmpPortStatRxQuery, msanCosQueueIndex=msanCosQueueIndex, msanCosQueueControlIntfBurstSize=msanCosQueueControlIntfBurstSize, msanPppoeIaStatPADS=msanPppoeIaStatPADS, msanMvrDvlanEntry=msanMvrDvlanEntry, msanSntpTzDstStartWeek=msanSntpTzDstStartWeek, msanL2cpProtocolEntry=msanL2cpProtocolEntry, msanL2cpProfileProtocolRule=msanL2cpProfileProtocolRule, msanPppoeIaStatUnknownFrames=msanPppoeIaStatUnknownFrames, msanDhcpv6RaPortStatEntry=msanDhcpv6RaPortStatEntry, msanPppoeIaPortStatPADI=msanPppoeIaPortStatPADI, msanIpAclRuleCVlanIdRangeStart=msanIpAclRuleCVlanIdRangeStart, msanSfpDiagnosticsTempMin=msanSfpDiagnosticsTempMin, msanVlanProfileCVid=msanVlanProfileCVid, msanSwCPLDVersion=msanSwCPLDVersion, msanDhcpv6PortRaStatRebind=msanDhcpv6PortRaStatRebind, msanFilteringGlobal=msanFilteringGlobal, msanIPSG=msanIPSG, msanSyncSourceSuitability=msanSyncSourceSuitability, msanAdslAtucPhysExtnDeltLastTxState=msanAdslAtucPhysExtnDeltLastTxState, msanFilteringRuleTag=msanFilteringRuleTag, msanQosProfileOutCdr=msanQosProfileOutCdr, msanAppRateLimitIgmpState=msanAppRateLimitIgmpState, msanServicePortProfileTable=msanServicePortProfileTable, msanCliScriptTable=msanCliScriptTable, msanDhcpRaFullModeVlanTable=msanDhcpRaFullModeVlanTable, msanAdslAtucPhysExtnIdleBertCells=msanAdslAtucPhysExtnIdleBertCells, msanMvrMulticastGroupStartIp=msanMvrMulticastGroupStartIp, msanFilteringFilterType=msanFilteringFilterType, msanMulticastAccessListName=msanMulticastAccessListName, msanIpAclEntry=msanIpAclEntry, msanAdslAtucPhysExtnIdleBertError=msanAdslAtucPhysExtnIdleBertError, msanServiceFlowProfileMatchDsCVlanIdRange=msanServiceFlowProfileMatchDsCVlanIdRange, msanDhcpRaOpt82CircuitIdStatus=msanDhcpRaOpt82CircuitIdStatus, msanIgmpStatRxV2Join=msanIgmpStatRxV2Join, msanAlarmPanelSerialPortType=msanAlarmPanelSerialPortType, msanDslPsdMaskDsRowStatus=msanDslPsdMaskDsRowStatus, msanMacAclRuleSVlanId=msanMacAclRuleSVlanId, msanBoardNr=msanBoardNr, msanIPSGPortBindCurrentVlanId=msanIPSGPortBindCurrentVlanId, msanPortStormControlEntry=msanPortStormControlEntry, msanServiceProfileServiceFlowProfileName=msanServiceProfileServiceFlowProfileName, msanServiceProfilePppoeIA=msanServiceProfilePppoeIA, msanDhcpv6RaPortRemoteId=msanDhcpv6RaPortRemoteId, msanDhcpv6PortRaStatAdvertise=msanDhcpv6PortRaStatAdvertise, msanIpAclRuleEntry=msanIpAclRuleEntry, msanVlan=msanVlan, msanIgmpSnoopingReportSuppression=msanIgmpSnoopingReportSuppression, msanVlanPortProfileEntry=msanVlanPortProfileEntry, msanPortVlanStackPriority=msanPortVlanStackPriority, msanEapsDomainSecondaryIfIndex=msanEapsDomainSecondaryIfIndex, msanAppRateLimitDhcp=msanAppRateLimitDhcp, msanSecurityProfileIpSgFilteringMode=msanSecurityProfileIpSgFilteringMode, msanSwitchIGMPSnoopingVlanTable=msanSwitchIGMPSnoopingVlanTable, msanL2cpProfileEntry=msanL2cpProfileEntry, msanL2cpProfileDescription=msanL2cpProfileDescription, msanAdslLineExtnTransAtucConfig=msanAdslLineExtnTransAtucConfig, msanDslPsdMaskUsType=msanDslPsdMaskUsType, msanPppoeIAStatus=msanPppoeIAStatus, msanCpeApiMinorVersion=msanCpeApiMinorVersion, msanPortSecurityStatMacIf=msanPortSecurityStatMacIf, msanServiceFlowProfileMatchDsIpCsc=msanServiceFlowProfileMatchDsIpCsc, msanDiagnosticsErrorDescription=msanDiagnosticsErrorDescription, msanSfpDiagnosticsTable=msanSfpDiagnosticsTable, msanDiagnosticsTestTime=msanDiagnosticsTestTime, msanCpeTypeEntry=msanCpeTypeEntry, msanIsaPortAccounting=msanIsaPortAccounting, msanPortVlanRemarkDstVlanId=msanPortVlanRemarkDstVlanId, msanIPSGIntfClearDynamicBinds=msanIPSGIntfClearDynamicBinds, msanDslSpecificUpboKLF=msanDslSpecificUpboKLF, msanAdslAtucPhysExtnDeltHLINpsus=msanAdslAtucPhysExtnDeltHLINpsus, msanEapsDomainCntrlVlanId=msanEapsDomainCntrlVlanId, msanServiceFlowProfileMatchDsSPcp=msanServiceFlowProfileMatchDsSPcp, msanPortEntry=msanPortEntry, msanAdslAturMSGus=msanAdslAturMSGus, msanIpAclRuleSVlanIdRangeEnd=msanIpAclRuleSVlanIdRangeEnd, msanSecurityProfileName=msanSecurityProfileName, msanDhcpv6RaPortVlanConfigEntry=msanDhcpv6RaPortVlanConfigEntry, msanAddressLearningVlanId=msanAddressLearningVlanId, msanMacAclRuleSVlanIdRangeEnd=msanMacAclRuleSVlanIdRangeEnd, msanCpeTrafficEntry=msanCpeTrafficEntry, msanFilteringFilterTable=msanFilteringFilterTable, msanFilteringAssignFilterPrec=msanFilteringAssignFilterPrec, msanServiceFlowProfileDsSchedulingMode=msanServiceFlowProfileDsSchedulingMode, msanSwitchIGMPProxyVlanRowStatus=msanSwitchIGMPProxyVlanRowStatus, msanServiceFlowProfileUsPdr=msanServiceFlowProfileUsPdr, msanDiagnosticsErrorObjectType=msanDiagnosticsErrorObjectType, msanServiceFlowProfileMatchDsIpProtocol=msanServiceFlowProfileMatchDsIpProtocol, msanServiceFlowProfileMatchDsIpSrcMask=msanServiceFlowProfileMatchDsIpSrcMask, msanQosProfileMatchOutMacDestAddr=msanQosProfileMatchOutMacDestAddr, msanMulticastIntfVlanStaticGroupEntry=msanMulticastIntfVlanStaticGroupEntry, msanDiagnosticsErrorFilterTable=msanDiagnosticsErrorFilterTable, msanAdslAturPhysExtnDeltQLNMTds=msanAdslAturPhysExtnDeltQLNMTds, msanRemoteAccessFilterTable=msanRemoteAccessFilterTable, msanSystemLogsUploadPath=msanSystemLogsUploadPath, msanIgmpStatRxBlockByIgmpVersion=msanIgmpStatRxBlockByIgmpVersion, msanServiceProfileL2cpProfileName=msanServiceProfileL2cpProfileName, msanBridgeCCXEntry=msanBridgeCCXEntry, msanQosProfileMatchOutIpProtocol=msanQosProfileMatchOutIpProtocol, msanRadiusServerSecret=msanRadiusServerSecret, msanIPSGIpv6PortStaticBindIpAddress=msanIPSGIpv6PortStaticBindIpAddress, msanSwitchIGMPSnoopingVlanAdminState=msanSwitchIGMPSnoopingVlanAdminState, msanCpe=msanCpe, msanSwBootPackageEntry=msanSwBootPackageEntry, msanMacAclIndex=msanMacAclIndex, msanAdslAturPhysExtnActPsdDs=msanAdslAturPhysExtnActPsdDs, msanSwComponentSteerVersion=msanSwComponentSteerVersion, msanIsaGlobal=msanIsaGlobal, msanCpeTrafficSpeed=msanCpeTrafficSpeed, msanSfpDiagnosticsRxPowerMin=msanSfpDiagnosticsRxPowerMin, msanCpeIntfServiceTable=msanCpeIntfServiceTable, msanAdslAtucPhysExtnStartProgress=msanAdslAtucPhysExtnStartProgress, msanFilteringRuleFromIp=msanFilteringRuleFromIp, msanNetworkDhcpClientVlanTable=msanNetworkDhcpClientVlanTable, msanAdslAtucPhysExtnSeltInbandNoise=msanAdslAtucPhysExtnSeltInbandNoise, msanSyncTable=msanSyncTable, msanIPSGIpv4PortStaticBindIpAddress=msanIPSGIpv4PortStaticBindIpAddress, msanIpAclRuleVlanIdRangeStart=msanIpAclRuleVlanIdRangeStart, msanIgmpStatRxV3Report=msanIgmpStatRxV3Report, msanPortMirroringGlobal=msanPortMirroringGlobal, msanIPSGBindVlan=msanIPSGBindVlan, msanPortBroadcastControlThreshold=msanPortBroadcastControlThreshold, msanIPSGBindingsTable=msanIPSGBindingsTable, msanStpCstPortEntry=msanStpCstPortEntry, msanAdslLineExtnTransAturCap=msanAdslLineExtnTransAturCap, msanStpMstId=msanStpMstId, msanServiceProfileDhcpRaRateLimit=msanServiceProfileDhcpRaRateLimit, msanDiagnosticsTestActivity=msanDiagnosticsTestActivity, msanBoardParentNr=msanBoardParentNr, msanLagEntry=msanLagEntry, msanLagMaxFrameSize=msanLagMaxFrameSize, msanServiceFlowProfileMatchUsMacDestMask=msanServiceFlowProfileMatchUsMacDestMask, msanDslSpecificMaxDelayUs=msanDslSpecificMaxDelayUs, msanSfpInfoEntry=msanSfpInfoEntry, msanSyncDestinationMlvdsId=msanSyncDestinationMlvdsId, msanFilteringRuleIcmType=msanFilteringRuleIcmType, msanDslSpecificL2Atprt=msanDslSpecificL2Atprt, msanSwitchMFDBTable=msanSwitchMFDBTable, msanDiagnosticsErrorSeverityErrCode=msanDiagnosticsErrorSeverityErrCode, msanSwBuildReference=msanSwBuildReference, msanSfpInfoInterfaceType=msanSfpInfoInterfaceType, msanSwInfo=msanSwInfo, msanMulticastGlobal=msanMulticastGlobal, msanFtpServerGlobal=msanFtpServerGlobal, msanDiagnosticsTestName=msanDiagnosticsTestName, msanAdslLineExtnTransAtucCap=msanAdslLineExtnTransAtucCap, msanDhcpv6RaPortVlanRowStatus=msanDhcpv6RaPortVlanRowStatus, msanServiceFlowProfileMatchDsVlanProfile=msanServiceFlowProfileMatchDsVlanProfile, msanQosPortProfileStatEntry=msanQosPortProfileStatEntry, msanEapsDomainProtVlanRowStatus=msanEapsDomainProtVlanRowStatus, msanMvrDvlanEthertypeRewriteStatus=msanMvrDvlanEthertypeRewriteStatus, msanQosPortStatInDroppedFrames=msanQosPortStatInDroppedFrames, msanMulticastAccessListIntfTable=msanMulticastAccessListIntfTable, msanAdslAtucPhysExtnDeltCurrStatus=msanAdslAtucPhysExtnDeltCurrStatus, msanStpCstPortTable=msanStpCstPortTable, msanCpeServiceCCos=msanCpeServiceCCos, msanDslSpecificRfiBands=msanDslSpecificRfiBands, msanMulticastProfileTable=msanMulticastProfileTable, msanSwitchIGMPProxyVlanTable=msanSwitchIGMPProxyVlanTable, msanServiceFlowProfileTable=msanServiceFlowProfileTable, msanDslSpecificDpboEPsdMask=msanDslSpecificDpboEPsdMask, msanQosProfileMatchOutMacSrcMask=msanQosProfileMatchOutMacSrcMask, msanAuthenticationListCreate=msanAuthenticationListCreate, msanPppoeIaVlanEntry=msanPppoeIaVlanEntry, msanServicePortProfileEntry=msanServicePortProfileEntry, msanDslPsdMaskDsName=msanDslPsdMaskDsName, msanDslSpecificRaUsTimeUs=msanDslSpecificRaUsTimeUs, msanDiagnosticsTempUnderheatThreshold=msanDiagnosticsTempUnderheatThreshold, msanQosProfileMatchInIpDestMask=msanQosProfileMatchInIpDestMask, msanDslSeltStatusNoiseMrgDs=msanDslSeltStatusNoiseMrgDs, msanIgmpVersion=msanIgmpVersion, msanQosProfileMatchInL4SrcPort=msanQosProfileMatchInL4SrcPort, msanServiceFlowProfileMatchDsTcpSrcPort=msanServiceFlowProfileMatchDsTcpSrcPort, msanSecurityProfileRowStatus=msanSecurityProfileRowStatus, msanIPSGBindLeaseRemainingTime=msanIPSGBindLeaseRemainingTime, msanDiagnosticsTempTable=msanDiagnosticsTempTable, msanBoardListTable=msanBoardListTable, msanPortAtmPvcVpi=msanPortAtmPvcVpi, msanBoardConfRowStatus=msanBoardConfRowStatus, msanCosQueueLength=msanCosQueueLength, msanDhcpv6RaPortConfigTable=msanDhcpv6RaPortConfigTable, msanMacAclRuleAssignCoSPriority=msanMacAclRuleAssignCoSPriority, msanArpInspectionVlanEntry=msanArpInspectionVlanEntry)
mibBuilder.exportSymbols("ISKRATEL-MSAN-MIB", msanMulticastAclListId=msanMulticastAclListId, msanQosPortProfileStatQueueMax=msanQosPortProfileStatQueueMax, msanMulticastAclListEntry=msanMulticastAclListEntry, msanPortSecurityStatMacTable=msanPortSecurityStatMacTable, msanIsaPortStatAuthenTimeoutExpired=msanIsaPortStatAuthenTimeoutExpired, msanIsaTalPatternMatchDhcpOpt82RemoteId=msanIsaTalPatternMatchDhcpOpt82RemoteId, msanSwComponentTable=msanSwComponentTable, msanIgmpSnoopingGroupLimit=msanIgmpSnoopingGroupLimit, msanSecurityProfileMacLimit=msanSecurityProfileMacLimit, msanSnmpGlobal=msanSnmpGlobal, msanMacTableCAMTable=msanMacTableCAMTable, msanSfpDiagnosticsTempCurrent=msanSfpDiagnosticsTempCurrent, msanPppAuthProtocol=msanPppAuthProtocol, msanAdslAtucPhysExtnDeltHLOGMTus=msanAdslAtucPhysExtnDeltHLOGMTus, msanSwitchIGMPSnoopingIntfIndex=msanSwitchIGMPSnoopingIntfIndex, msanMacAclRuleAssignVlanId=msanMacAclRuleAssignVlanId, msanCosQueueWeight=msanCosQueueWeight, msanPortDVlanTable=msanPortDVlanTable, msanIpAclRuleSrcMacMask=msanIpAclRuleSrcMacMask, msanSystemLogsUploadStatus=msanSystemLogsUploadStatus, msanMulticastProfileIgmpProxyIpAddress=msanMulticastProfileIgmpProxyIpAddress, msanDhcpv6PortRaStatRelayReply=msanDhcpv6PortRaStatRelayReply, msanMvrMulticastGroupEndIp=msanMvrMulticastGroupEndIp, msanPortVlanRemarkAdminEntry=msanPortVlanRemarkAdminEntry, msanFtpServer=msanFtpServer, msanL2cpProtocolTable=msanL2cpProtocolTable, msanStpBpduFilter=msanStpBpduFilter, msanDiagnosticsErrorMeasureId=msanDiagnosticsErrorMeasureId, msanPortSpeedDuplex=msanPortSpeedDuplex, msanPppoeIaPortStatPADS=msanPppoeIaPortStatPADS, msanAppRateLimit=msanAppRateLimit, msanFilteringRuleVid=msanFilteringRuleVid, msanQosIntfProfileRowStatus=msanQosIntfProfileRowStatus, msanMvrPortEntry=msanMvrPortEntry, msanIgmpStatRxQuery=msanIgmpStatRxQuery, msanPortDVlanMapInTagVlanId=msanPortDVlanMapInTagVlanId, msanQosProfileRowStatus=msanQosProfileRowStatus, msanEapsDomainFailTimeout=msanEapsDomainFailTimeout, msanDhcpv6RaVlanInterfaceIdStandard=msanDhcpv6RaVlanInterfaceIdStandard, msanServiceFlowProfileMatchDsIpDestMask=msanServiceFlowProfileMatchDsIpDestMask, msanIgmpPortStatTxV2Join=msanIgmpPortStatTxV2Join, msanIgmpStatRxV2Leave=msanIgmpStatRxV2Leave, msanBoardConfParentNr=msanBoardConfParentNr, msanCpeTrafficRowStatus=msanCpeTrafficRowStatus, msanServiceFlowProfileProtection=msanServiceFlowProfileProtection, msanSfpDiagnosticsTempMax=msanSfpDiagnosticsTempMax, msanSfpInfoTable=msanSfpInfoTable, msanIsaTalPortMatchEthertype=msanIsaTalPortMatchEthertype, msanEnergyMeterSerialNo=msanEnergyMeterSerialNo, msanIsaDasServerSecret=msanIsaDasServerSecret, msanSystemSwUpgradeServerDnsName=msanSystemSwUpgradeServerDnsName, msanPortAtmPvcEntry=msanPortAtmPvcEntry, msanDslSpecificSelt=msanDslSpecificSelt, msanIPSGPortBindCurrentTable=msanIPSGPortBindCurrentTable, msanIPSGIpv6PortStaticBindTable=msanIPSGIpv6PortStaticBindTable, msanQosProfileInMarkDscp=msanQosProfileInMarkDscp, msanAdslAtucPhysExtnEntry=msanAdslAtucPhysExtnEntry, msanMulticastAccessListIntfEntry=msanMulticastAccessListIntfEntry, msanDhcpv6RaStatInformRequest=msanDhcpv6RaStatInformRequest, msanRemoteAccessGlobal=msanRemoteAccessGlobal, msanAppRateLimitMn=msanAppRateLimitMn, msanPortVlanRemarkTable=msanPortVlanRemarkTable, msanIsaRadiusServerType=msanIsaRadiusServerType, msanAlarmPanelInputTable=msanAlarmPanelInputTable, msanIsaTalPortMatchVlanId=msanIsaTalPortMatchVlanId, msanDhcpRaPortVlanConfigTable=msanDhcpRaPortVlanConfigTable, msanEnergyMeterFwType=msanEnergyMeterFwType, msanCpeServiceTrafficId=msanCpeServiceTrafficId, msanDhcpRaOpt82ReplyMode=msanDhcpRaOpt82ReplyMode, msanIsaStatLoginUnsuccessfulReq=msanIsaStatLoginUnsuccessfulReq, msanAdslLineExtnClockType=msanAdslLineExtnClockType, msanDslSeltStatusMaxRateDs=msanDslSeltStatusMaxRateDs, msanPortVlanMode=msanPortVlanMode, msanDhcpRaStatFrameErr=msanDhcpRaStatFrameErr, msanServiceFlowProfileEntry=msanServiceFlowProfileEntry, msanQosProfileMatchOutL4SrcPort=msanQosProfileMatchOutL4SrcPort, msanIPSGPortBindCurrentEntry=msanIPSGPortBindCurrentEntry, msanBoardConfType=msanBoardConfType, msanIsaPortTable=msanIsaPortTable, msanSfpInfoVendor=msanSfpInfoVendor, msanAdslAturPhysExtnSelfTestResult=msanAdslAturPhysExtnSelfTestResult, msanIsaTalPortMatchIpSrcAddr=msanIsaTalPortMatchIpSrcAddr, msanSwBspVersion=msanSwBspVersion, msanDiagnosticsTempCurrent=msanDiagnosticsTempCurrent, msanIgmpSnoopingGlobal=msanIgmpSnoopingGlobal, msanVlanProfileTable=msanVlanProfileTable, msanQosProfileMatchOutVlanId=msanQosProfileMatchOutVlanId, msanIgmpSnoopingLoggingVlanId=msanIgmpSnoopingLoggingVlanId, msanBoard=msanBoard, msanDhcpv6RaPortRemoteIdEnterpriseNum=msanDhcpv6RaPortRemoteIdEnterpriseNum, msanQosProfileMatchInDestIpv6AddressMaskLen=msanQosProfileMatchInDestIpv6AddressMaskLen, msanQosProfileMatchOutIpDestMask=msanQosProfileMatchOutIpDestMask, msanAdslAturPhysExtnChanPerfBE=msanAdslAturPhysExtnChanPerfBE, msanDhcpRaPortConfigTable=msanDhcpRaPortConfigTable, msanDiagnosticsErrorPriority=msanDiagnosticsErrorPriority, msanDiagnostics=msanDiagnostics, msanSwitchIGMPSnoopingIntfVlanIDs=msanSwitchIGMPSnoopingIntfVlanIDs, msanCpeSendConfig=msanCpeSendConfig, msanQosProfileMatchOutIpPrecedence=msanQosProfileMatchOutIpPrecedence, msanIPSGPortBindCurrentMacAddress=msanIPSGPortBindCurrentMacAddress, msanMulticastAccessListGroupIpAddr=msanMulticastAccessListGroupIpAddr, msanQosProfileMatchInSrcIpv6AddressMaskLen=msanQosProfileMatchInSrcIpv6AddressMaskLen, msanServiceFlowProfileMatchDsIpSrcAddr=msanServiceFlowProfileMatchDsIpSrcAddr, msanQosProfileName=msanQosProfileName, msanPortDVlanStackVlanId=msanPortDVlanStackVlanId, msanAdslLineExtnTransAtucActual=msanAdslLineExtnTransAtucActual, msanBridgeMode=msanBridgeMode, msanPrimaryDnsIpAddress=msanPrimaryDnsIpAddress, msanPppoeIaStatUnsutableFrames=msanPppoeIaStatUnsutableFrames, msanAcsBackupConf=msanAcsBackupConf, msanIPSGIntfIpv6AdminMode=msanIPSGIntfIpv6AdminMode, msanFilteringRuleFromMac=msanFilteringRuleFromMac, msanDhcpv6RaStatRelayForward=msanDhcpv6RaStatRelayForward, msanDiagnosticsTestType=msanDiagnosticsTestType, msanCpeIntfServiceEntry=msanCpeIntfServiceEntry, msanPppoeIAPortCircuitType=msanPppoeIAPortCircuitType, msanServiceProfileStatus=msanServiceProfileStatus, msanSwitchMFDBFilteringPortMask=msanSwitchMFDBFilteringPortMask, msanSystemLogsUploadProtocol=msanSystemLogsUploadProtocol, msanCpeTrafficFlowCntrlMode=msanCpeTrafficFlowCntrlMode, msanBridgeCCXInterface1=msanBridgeCCXInterface1, msanAdslAturSATN=msanAdslAturSATN, msanIpAclRuleSrcMacAddr=msanIpAclRuleSrcMacAddr, msanAdslAtucPhysExtnChipVersion=msanAdslAtucPhysExtnChipVersion, msanPortAtmPvcPvid=msanPortAtmPvcPvid, msanDhcpv6PortRaStatRelayForward=msanDhcpv6PortRaStatRelayForward, msanDhcpv6RaVlanState=msanDhcpv6RaVlanState, msanIsaPortStatAuthenReqConfirmed=msanIsaPortStatAuthenReqConfirmed, msanDslSpecificDpboEsCmB=msanDslSpecificDpboEsCmB, msanCpeTrafficStatus=msanCpeTrafficStatus, msanAdslAtucPhysExtnStartupErrorCode=msanAdslAtucPhysExtnStartupErrorCode, msanProfileConfigStatus=msanProfileConfigStatus, msanDslSpecificScMaskUs=msanDslSpecificScMaskUs, msanAcs=msanAcs, msanServiceFlowProfileMatchUsUdpSrcPort=msanServiceFlowProfileMatchUsUdpSrcPort, msanQosProfileMatchInMacDestMask=msanQosProfileMatchInMacDestMask, msanPortVlanRemarkRowStatus=msanPortVlanRemarkRowStatus, msanErrorDisableInterval=msanErrorDisableInterval, msanDhcpRaVlanOpt82UnicastExtStatus=msanDhcpRaVlanOpt82UnicastExtStatus, msanAuthenticationListEntry=msanAuthenticationListEntry, msanServiceFlowProfileMatchDsMacSrcMask=msanServiceFlowProfileMatchDsMacSrcMask, msanSfpInfoState=msanSfpInfoState, msanAdslAturPhysExtnDeltHLINpsds=msanAdslAturPhysExtnDeltHLINpsds, msanDhcpv6RaPortTrusted=msanDhcpv6RaPortTrusted, msanDslSpecificRaDsTimeDs=msanDslSpecificRaDsTimeDs, msanCosQueueTable=msanCosQueueTable, msanIPSGIntfAdminMode=msanIPSGIntfAdminMode, msanFilteringRuleFromPortLow=msanFilteringRuleFromPortLow, msanDiagnosticsTempEntry=msanDiagnosticsTempEntry, msanPortSecurity=msanPortSecurity, msanIsaPortTalAdminMode=msanIsaPortTalAdminMode, msanServiceFlowProfileMatchUsIpDestMask=msanServiceFlowProfileMatchUsIpDestMask, msanSwitchIGMPSnoopingVlanFastLeaveAdminMode=msanSwitchIGMPSnoopingVlanFastLeaveAdminMode, msanSwUpgrade=msanSwUpgrade, msanEnergyMeterFwCreationDate=msanEnergyMeterFwCreationDate, msanMulticastAccessListGroupTable=msanMulticastAccessListGroupTable, msanRadiusServerGlobal=msanRadiusServerGlobal, msanIsaTalPortPatternMatchTable=msanIsaTalPortPatternMatchTable, msanMulticastProfileMvr=msanMulticastProfileMvr, msanSwitchIGMPSnoopingStaticIntfMulticastRouterEntry=msanSwitchIGMPSnoopingStaticIntfMulticastRouterEntry, msanAlarmPanelTable=msanAlarmPanelTable, iskratel=iskratel, msanArpInspectionGlobal=msanArpInspectionGlobal, msanMulticastGroupEntry=msanMulticastGroupEntry, msanLagDetailedLagIndex=msanLagDetailedLagIndex, msanAdslAturPhysExtnGainspsDs=msanAdslAturPhysExtnGainspsDs, msanSystemSwUpgradeStart=msanSystemSwUpgradeStart, msanServiceFlowProfileMatchDsMacDestMask=msanServiceFlowProfileMatchDsMacDestMask, msanDslSpecificRaUsTimeDs=msanDslSpecificRaUsTimeDs, msanServiceFlowProfileMatchUsTcpSrcPort=msanServiceFlowProfileMatchUsTcpSrcPort, msanDhcpRaPortConfigEntry=msanDhcpRaPortConfigEntry, msanResetWithDelay=msanResetWithDelay, msanDhcpRaStatFrameUnsync=msanDhcpRaStatFrameUnsync, msanIsaPortStatAuthorReqRejected=msanIsaPortStatAuthorReqRejected, msanPppoeIAGlobal=msanPppoeIAGlobal, msanLagIndex=msanLagIndex, msanAdslAtucPhysExtnChanPerfBE=msanAdslAtucPhysExtnChanPerfBE, msanRemoteAccessFilterAction=msanRemoteAccessFilterAction, msanDhcpv6RaStatFrameUnsyncError=msanDhcpv6RaStatFrameUnsyncError, msanMulticastProfileMulticastGroupLimit=msanMulticastProfileMulticastGroupLimit, msanErrorDisableGlobal=msanErrorDisableGlobal, msanSfpInfoNominalRange=msanSfpInfoNominalRange, msanBoardPosition=msanBoardPosition, msanMacAclRuleCVlanIdRangeStart=msanMacAclRuleCVlanIdRangeStart, msanIsaPortAuthorization=msanIsaPortAuthorization, msanIpAclRuleCos2=msanIpAclRuleCos2, msanL2cpProfileProtocolRowStatus=msanL2cpProfileProtocolRowStatus, msanSwitchMFDBProtocolType=msanSwitchMFDBProtocolType, msanSecurityProfileProtection=msanSecurityProfileProtection, msanEnergyMeterPassword=msanEnergyMeterPassword, msanDhcpv6PortRaStatOversizeError=msanDhcpv6PortRaStatOversizeError, msanL2cpProtocolMacDestAddr=msanL2cpProtocolMacDestAddr, msanErrorDisableMacSgDetectionStatus=msanErrorDisableMacSgDetectionStatus, msanIgmpStatRxError=msanIgmpStatRxError, msanAdslLineExtnUtopiaL2RxAddr=msanAdslLineExtnUtopiaL2RxAddr, msanL2cpProtocolEthertype=msanL2cpProtocolEthertype, msanDslSpecificMaxNomPsdDs=msanDslSpecificMaxNomPsdDs, msanQosProfileMatchOutIpDestAddr=msanQosProfileMatchOutIpDestAddr, msanErrorDisablePortCounter=msanErrorDisablePortCounter, msanEapsDomainTable=msanEapsDomainTable, msanAdslAtucPhysExtnRxAtmCellCounter=msanAdslAtucPhysExtnRxAtmCellCounter, msanIpAclRuleSrcIpv6AddressMaskLen=msanIpAclRuleSrcIpv6AddressMaskLen, msanIPSGBindType=msanIPSGBindType, msanVlanProfileCVidRemark=msanVlanProfileCVidRemark, msanMulticastProfileStaticGroupTable=msanMulticastProfileStaticGroupTable, msanServiceFlowProfileDsMarkPcpValue=msanServiceFlowProfileDsMarkPcpValue, msanSecurityAclProfileRowStatus=msanSecurityAclProfileRowStatus, msanAdslAtucPhysExtnSeltLoopEnd=msanAdslAtucPhysExtnSeltLoopEnd, msanSwitchAddressAgingTimeout=msanSwitchAddressAgingTimeout, msanPortVlanEntry=msanPortVlanEntry, msanDslSpecificRaDsTimeUs=msanDslSpecificRaDsTimeUs, msanSfpDiagnosticsEntry=msanSfpDiagnosticsEntry, msanPortSecurityStatMacRowStatus=msanPortSecurityStatMacRowStatus, msanPortDVlanStackPriority=msanPortDVlanStackPriority, msanSfpDiagnosticsTxPowerMin=msanSfpDiagnosticsTxPowerMin, msanPortMirroringSessionId=msanPortMirroringSessionId, msanLagGlobal=msanLagGlobal, msanDhcpRaPortVlanConfigRowStatus=msanDhcpRaPortVlanConfigRowStatus, msanMulticastAclListVlanGroupEntry=msanMulticastAclListVlanGroupEntry, msanAlarmPanelIndicatorIndex=msanAlarmPanelIndicatorIndex, msanMulticastAccessListGroupEntry=msanMulticastAccessListGroupEntry, msanSwBootPackageName=msanSwBootPackageName, msanNetworkDhcpClientVlanEntry=msanNetworkDhcpClientVlanEntry, msanBoardType=msanBoardType, msanL2cpProfileProtection=msanL2cpProfileProtection, msanIgmpSnoopingTable=msanIgmpSnoopingTable, msanSystemSwUpgradeServerIpAddressType=msanSystemSwUpgradeServerIpAddressType, msanRadiusServerMsgAuth=msanRadiusServerMsgAuth, msanDhcpRaPortOpt82UnicastExtStatus=msanDhcpRaPortOpt82UnicastExtStatus, msanPortAtmPvcVci=msanPortAtmPvcVci, msanFilteringRuleCos=msanFilteringRuleCos, msanPortMirroringMemberRowStatus=msanPortMirroringMemberRowStatus, msanServiceFlowProfileMatchUsIpCsc=msanServiceFlowProfileMatchUsIpCsc, msanPpp=msanPpp, msanAdslAtucPhysExtnExtendedPsdStatus=msanAdslAtucPhysExtnExtendedPsdStatus, msanDslSpecificUsPsdMask=msanDslSpecificUsPsdMask, msanDhcpv6RaStatSysError=msanDhcpv6RaStatSysError, msanAdslAtucPhysExtnPilotTone=msanAdslAtucPhysExtnPilotTone, msanDhcpv6RaGlobal=msanDhcpv6RaGlobal, msanAuthenticationListMethod3=msanAuthenticationListMethod3, msanAlarmPanelEntry=msanAlarmPanelEntry, msanIgmpSnoopingViolationAction=msanIgmpSnoopingViolationAction, msanDhcpv6RaPortStatTable=msanDhcpv6RaPortStatTable, msanServiceProfileDescription=msanServiceProfileDescription, msanCpeIntfPortProtection=msanCpeIntfPortProtection, msanDVlanConfigOutTagPriority=msanDVlanConfigOutTagPriority, msanDhcpv6RaStatFrameError=msanDhcpv6RaStatFrameError, msanPppoeIARemoteIdStatus=msanPppoeIARemoteIdStatus, msanFilteringFilterEntry=msanFilteringFilterEntry, msanAdslAtucPhysExtnTable=msanAdslAtucPhysExtnTable, msanSfpInfoWavelength=msanSfpInfoWavelength, msanBoardConfSwBuildTime=msanBoardConfSwBuildTime, msanDhcpv6RaVlanConfigTable=msanDhcpv6RaVlanConfigTable, msanEnergyMeterEnergyEntry=msanEnergyMeterEnergyEntry)
mibBuilder.exportSymbols("ISKRATEL-MSAN-MIB", msanServiceFlowProfileMatchDsUdpSrcPort=msanServiceFlowProfileMatchDsUdpSrcPort, msanCpeServiceId=msanCpeServiceId, msanL2cpProtocolSubtype=msanL2cpProtocolSubtype, msanUserConfigEntry=msanUserConfigEntry, msanCpeIntfPortOverrideVid=msanCpeIntfPortOverrideVid, msanIPSGGlobal=msanIPSGGlobal, msanSwitchIGMPProxyVlanEntry=msanSwitchIGMPProxyVlanEntry, msanQosIntfProfileEntry=msanQosIntfProfileEntry, msanPppEchoInterval=msanPppEchoInterval, msanDslSpecific=msanDslSpecific, msanServiceFlowProfileMatchUsAny=msanServiceFlowProfileMatchUsAny, msanIsaTalPortMatchDhcpOpt61ClientId=msanIsaTalPortMatchDhcpOpt61ClientId, msanMacSg=msanMacSg, msanCpeIntfTypeEntry=msanCpeIntfTypeEntry, msanIsaDasServerPort=msanIsaDasServerPort, msanPortVlanRemarkAdminMode=msanPortVlanRemarkAdminMode, msanDslSpecificDpboFMin=msanDslSpecificDpboFMin, msanIpAclProtection=msanIpAclProtection, msanFilteringAttachedFilterEntry=msanFilteringAttachedFilterEntry, msanSwitchIGMPSnoopingStaticIntfMulticastRouterMode=msanSwitchIGMPSnoopingStaticIntfMulticastRouterMode, msanServiceFlowProfileDsPdr=msanServiceFlowProfileDsPdr, msanMacSgPortStatus=msanMacSgPortStatus, msanServiceProfileProtection=msanServiceProfileProtection, msanMvrConfigEntry=msanMvrConfigEntry, msanSwitchIGMPVlanStaticMrouterEnableState=msanSwitchIGMPVlanStaticMrouterEnableState, msanDslSpecificLineState=msanDslSpecificLineState, msanMvrMulticastGroupEntry=msanMvrMulticastGroupEntry, msanPortUsageType=msanPortUsageType, msanMacSgPortTable=msanMacSgPortTable, msanPppLocalIpAddress=msanPppLocalIpAddress, msanDslSpecificUpboUs1a=msanDslSpecificUpboUs1a, msanPortVlanStackVlanId=msanPortVlanStackVlanId, msanLagDetailedConfigEntry=msanLagDetailedConfigEntry, msanDhcpv6RaStatRenew=msanDhcpv6RaStatRenew, msanXdsl2LineConfTemplateEntry=msanXdsl2LineConfTemplateEntry, msanMulticastProfileStaticGroupEntry=msanMulticastProfileStaticGroupEntry, msanIsaTalPortPatternMatchEntry=msanIsaTalPortPatternMatchEntry, msanVDSLProfileTable=msanVDSLProfileTable, msanServiceFlowProfileMatchUsIpSrcMask=msanServiceFlowProfileMatchUsIpSrcMask, msanMulticastProfileIgmpSnooping=msanMulticastProfileIgmpSnooping, msanSystemSwUpgrade=msanSystemSwUpgrade, msanIPSGBindMac=msanIPSGBindMac, msanStpSwitchConfigGroup=msanStpSwitchConfigGroup, msanMulticastAclListName=msanMulticastAclListName, msanServiceProfileDhcpRaOpt82UnicastExtension=msanServiceProfileDhcpRaOpt82UnicastExtension, msanServiceFlowProfileMatchUsIpSrcAddr=msanServiceFlowProfileMatchUsIpSrcAddr, msanSecurityProfileEntry=msanSecurityProfileEntry, msanSwBuildTime=msanSwBuildTime, msanIgmpClear=msanIgmpClear, msanDslSpecificUpboUs4a=msanDslSpecificUpboUs4a, msanDslSeltStatusEntry=msanDslSeltStatusEntry, msanSwitchMFDBMacAddress=msanSwitchMFDBMacAddress, msanQosGlobal=msanQosGlobal, msanEnergyMeterTcpPort=msanEnergyMeterTcpPort, msanSntpTzOffset=msanSntpTzOffset, msanFilteringRuleFromMask=msanFilteringRuleFromMask, msanSwComponentEntry=msanSwComponentEntry, msanServicePortProfileRowStatus=msanServicePortProfileRowStatus, msanQosPortProfileStatQueueCurrent=msanQosPortProfileStatQueueCurrent, msanAdslLineExtnServiceType=msanAdslLineExtnServiceType, msanMulticastProfileStaticGroupIpAddr=msanMulticastProfileStaticGroupIpAddr, msanMacAclRuleCVlanId=msanMacAclRuleCVlanId, msanDslSpecificMaxDelayDs=msanDslSpecificMaxDelayDs, msanPortVlanRemarkEntry=msanPortVlanRemarkEntry, msanEnergyMeter=msanEnergyMeter, msanPppoeIACircuitIdStatus=msanPppoeIACircuitIdStatus, msanMacAclRuleRemoveVlanId=msanMacAclRuleRemoveVlanId, msanServiceProfileTable=msanServiceProfileTable, msanRadiusServerConfigTable=msanRadiusServerConfigTable, msanLagDetailedRowStatus=msanLagDetailedRowStatus, msanAdslAtucPhysExtnChanPerfCD=msanAdslAtucPhysExtnChanPerfCD, msanMvrDvlanRmOuterTagStatus=msanMvrDvlanRmOuterTagStatus, msanAdslAtucPhysExtnSeltDownShannonCap=msanAdslAtucPhysExtnSeltDownShannonCap, msanIgmpPortStatTable=msanIgmpPortStatTable, msanDhcpv6RaVlanConfigEntry=msanDhcpv6RaVlanConfigEntry, msanCpeTypePortNum=msanCpeTypePortNum, msanDslSpecificMinProtectionUs=msanDslSpecificMinProtectionUs, msanSwitchMFDBVlanId=msanSwitchMFDBVlanId, msanSyncSourceActivity=msanSyncSourceActivity, msanIsaPortTalAutomaticReq=msanIsaPortTalAutomaticReq, msanEapsDomainPrimaryIfIndex=msanEapsDomainPrimaryIfIndex, msanIPSGIpv6PortStaticBindEntry=msanIPSGIpv6PortStaticBindEntry, msanIsaRadiusServerTimeout=msanIsaRadiusServerTimeout, msanMulticastAclListRowStatus=msanMulticastAclListRowStatus, msanSyncSourceId=msanSyncSourceId, msanPortVlanRemarkSrcVlanId=msanPortVlanRemarkSrcVlanId, msanDhcpv6PortRaStatReply=msanDhcpv6PortRaStatReply, msanBoardTable=msanBoardTable, msanSecurityAclProfileAclType=msanSecurityAclProfileAclType, msanIsaTalPatternMatchDhcpType=msanIsaTalPatternMatchDhcpType, msanRadiusServerStatus=msanRadiusServerStatus, msanServiceFlowProfileName=msanServiceFlowProfileName, msanMulticastProfileStaticGroupRowStatus=msanMulticastProfileStaticGroupRowStatus, msanBoardListEntry=msanBoardListEntry, msanStpMstPortTable=msanStpMstPortTable, msanSecurityAclProfileAclDirection=msanSecurityAclProfileAclDirection, msanXdsl2LineConfTempStatus=msanXdsl2LineConfTempStatus, msanAdslLineExtnDeltConfLDSF=msanAdslLineExtnDeltConfLDSF, msanPortMirroringMemberTable=msanPortMirroringMemberTable, msanPortUnicastControlMode=msanPortUnicastControlMode, msanStpCstBridgePriority=msanStpCstBridgePriority, msanDslSpecificDpboFMax=msanDslSpecificDpboFMax, msanLagDVlanTagMode=msanLagDVlanTagMode, msanL2cpProfileRowStatus=msanL2cpProfileRowStatus, msanSntp=msanSntp, msanDiagnosticsErrorFilterEntry=msanDiagnosticsErrorFilterEntry, msanDhcpRaFullModeVlanRowStatus=msanDhcpRaFullModeVlanRowStatus, msanSystemLogsUploadServerDnsName=msanSystemLogsUploadServerDnsName, msanBoardGlobal=msanBoardGlobal, msanIPSGBindMatchedFrames=msanIPSGBindMatchedFrames, msanSwitchIGMPSnoopingIntfMRPExpirationTime=msanSwitchIGMPSnoopingIntfMRPExpirationTime, msanCosMapIntfTrustMode=msanCosMapIntfTrustMode, msanFilteringAssignFilterEntry=msanFilteringAssignFilterEntry, msanShelfType=msanShelfType, msanAlarmPanelAudioAlarmPriority=msanAlarmPanelAudioAlarmPriority, msanCliScriptCreate=msanCliScriptCreate, msanIsaTalPatternMatchUserMask=msanIsaTalPatternMatchUserMask, msanIpAclRuleSVlanIdRangeStart=msanIpAclRuleSVlanIdRangeStart, msanQosProfileMatchInIpDestAddr=msanQosProfileMatchInIpDestAddr, msanDhcpv6RaStatDecline=msanDhcpv6RaStatDecline, msanMacTableCAMIndex=msanMacTableCAMIndex, msanQosProfileOutPdrBurstSize=msanQosProfileOutPdrBurstSize, msanMacAclRuleSVlanIdRangeStart=msanMacAclRuleSVlanIdRangeStart, msanMulticastIntfStaticGroupRowStatus=msanMulticastIntfStaticGroupRowStatus, msanSystemSwUpgradeServerIpAddress=msanSystemSwUpgradeServerIpAddress, msanIsaPortAuthentication=msanIsaPortAuthentication, msanSwitchIGMPSnoopingIntfMaxResponseTime=msanSwitchIGMPSnoopingIntfMaxResponseTime, msanIsaTalPortMatchMacSrcAddr=msanIsaTalPortMatchMacSrcAddr, msanMulticastAclIntfListTable=msanMulticastAclIntfListTable, msanDslSpecificClassMask=msanDslSpecificClassMask, msanArpInspectionPortTable=msanArpInspectionPortTable, msanDhcpv6PortRaStatDecline=msanDhcpv6PortRaStatDecline, msanIpAclRuleAssignCVlanId=msanIpAclRuleAssignCVlanId, msanDslSpecificDpboMus=msanDslSpecificDpboMus, msanNetworkDhcpSrvVendorSpecific=msanNetworkDhcpSrvVendorSpecific, msanBridgeRedAdminMode=msanBridgeRedAdminMode, msanStpMstVlanRowStatus=msanStpMstVlanRowStatus, msanIpAclRuleDestMacMask=msanIpAclRuleDestMacMask, msanFiltering=msanFiltering, msanCpeServiceUntaggedPorts=msanCpeServiceUntaggedPorts, msanQosProfileMatchOutCos2=msanQosProfileMatchOutCos2, msanMacAclId=msanMacAclId, msanQosProfileMatchInIpTosBits=msanQosProfileMatchInIpTosBits, msanAdslLineExtnUtopiaL2RxAddrSecond=msanAdslLineExtnUtopiaL2RxAddrSecond, msanServiceFlowProfileMatchUsIpDscp=msanServiceFlowProfileMatchUsIpDscp, msanQosProfileMatchInIpProtocol=msanQosProfileMatchInIpProtocol, msanCpeIntfTypeSwVersion=msanCpeIntfTypeSwVersion, msanL2cpProfileName=msanL2cpProfileName, msanPortDVlanTagMode=msanPortDVlanTagMode, msanServiceFlowProfileUsMarkPcp=msanServiceFlowProfileUsMarkPcp, msanQosProfileEntry=msanQosProfileEntry, msanQosPortStatTable=msanQosPortStatTable, msanFilteringAssignFilterDscp=msanFilteringAssignFilterDscp, msanPortMirroringDestPort=msanPortMirroringDestPort, msanEnergyMeterEnergySumTable=msanEnergyMeterEnergySumTable, msanPppoeIaPortStatisticsEntry=msanPppoeIaPortStatisticsEntry, msanMvrConfigCos=msanMvrConfigCos, msanL2cpProfileVlanRowStatus=msanL2cpProfileVlanRowStatus, msanMacAclProtection=msanMacAclProtection, msanCpeServiceName=msanCpeServiceName, msanMulticastIntfVlanStaticGroupIpAddr=msanMulticastIntfVlanStaticGroupIpAddr, msanDhcpv6RaStatOversizeError=msanDhcpv6RaStatOversizeError, msanIsaTalPortMatchUserBits=msanIsaTalPortMatchUserBits, msanDslSpecificMaxAggRxPwrUs=msanDslSpecificMaxAggRxPwrUs, msanAlarmPanelInputIndex=msanAlarmPanelInputIndex, msanAdslAturPhysExtnTable=msanAdslAturPhysExtnTable, msanServiceFlowProfileUsCdr=msanServiceFlowProfileUsCdr, msanAdslAturPhysExtnSystemVendorId=msanAdslAturPhysExtnSystemVendorId, msanLagDetailedPortSpeed=msanLagDetailedPortSpeed, msanServiceFlowProfileUsMarkDscp=msanServiceFlowProfileUsMarkDscp, msanSfpDiagnosticsTxBiasCrrCurrent=msanSfpDiagnosticsTxBiasCrrCurrent, msanAppRateLimitPppoeState=msanAppRateLimitPppoeState, msanBoardSerialNr=msanBoardSerialNr, msanDhcpv6RaStatRelease=msanDhcpv6RaStatRelease, msanSecurityProfileMacForward=msanSecurityProfileMacForward, msanPppoeIaPortStatUnknownFrames=msanPppoeIaPortStatUnknownFrames, msanMulticastProfile=msanMulticastProfile, msanDslSpecificUpboUs3a=msanDslSpecificUpboUs3a, msanPortMirroringMemberEntry=msanPortMirroringMemberEntry, msanCpeReset=msanCpeReset, msanDhcpRaPortCircuitId=msanDhcpRaPortCircuitId, msanServiceFlowProfileMatchDsIpDropPrecedence=msanServiceFlowProfileMatchDsIpDropPrecedence, msanDslSpecificL2Atpr=msanDslSpecificL2Atpr, msanDhcpRaFullModeVlanSrvIpAddr=msanDhcpRaFullModeVlanSrvIpAddr, msanAlarmPanelIndicatorErrCode=msanAlarmPanelIndicatorErrCode, msanAcsServerUrl=msanAcsServerUrl, msanUserAccessMode=msanUserAccessMode, msanAdslAtucPhysExtnStartBin=msanAdslAtucPhysExtnStartBin, msanL2cpProtocolName=msanL2cpProtocolName, msanServiceFlowProfileMatchDsEthertype=msanServiceFlowProfileMatchDsEthertype, msanMulticastProfileEntry=msanMulticastProfileEntry, msanArpInspectionPortEntry=msanArpInspectionPortEntry, products=products, msanDhcpRaStatus=msanDhcpRaStatus, msanDhcpv6PortRaStatFrameUnsyncError=msanDhcpv6PortRaStatFrameUnsyncError, msanPortSecurityGlobal=msanPortSecurityGlobal, msanSystemSwUpgradeProtocol=msanSystemSwUpgradeProtocol, msanIpAclRuleIndex=msanIpAclRuleIndex, msanDslSpecificMinProtectionDs=msanDslSpecificMinProtectionDs, msanAdslAtucPhysExtnSeltLoopLen=msanAdslAtucPhysExtnSeltLoopLen, msanIpAclRuleAssignVlanId=msanIpAclRuleAssignVlanId, msanSystemSwUpgradeUserName=msanSystemSwUpgradeUserName, msanFilteringRuleTos=msanFilteringRuleTos, msanBridge=msanBridge, msanDslSpecificDpboEsCmA=msanDslSpecificDpboEsCmA, msanEnergyMeterCurrPower=msanEnergyMeterCurrPower, msanDhcpRaStatDiscover=msanDhcpRaStatDiscover, msanSecurityAclProfileAclId=msanSecurityAclProfileAclId, msanQosProfileMatchInIpSrcMask=msanQosProfileMatchInIpSrcMask, msanQosProfileMatchInEthertype=msanQosProfileMatchInEthertype, msanDhcpRaGlobal=msanDhcpRaGlobal, msanQosProfileOutPdr=msanQosProfileOutPdr, msanProfiles=msanProfiles, msanSfpDiagnosticsVoltageCurrent=msanSfpDiagnosticsVoltageCurrent, msanAdslAturPhysExtnDeltHLOGpsus=msanAdslAturPhysExtnDeltHLOGpsus, msanBoardReset=msanBoardReset, msanQosProfileTable=msanQosProfileTable, msanDhcpRaVlanMode=msanDhcpRaVlanMode, msanPppoeIaPortStatisticsTable=msanPppoeIaPortStatisticsTable, msanDslSeltStatusNumTonesDs=msanDslSeltStatusNumTonesDs, msanMulticastAccessListIntfMode=msanMulticastAccessListIntfMode, msanSwComponentName=msanSwComponentName, msanPortTable=msanPortTable, msanMacTablePort=msanMacTablePort, msanNetworkIPAddress=msanNetworkIPAddress, msanIpAclIndex=msanIpAclIndex, msanDslPsdMaskDsTable=msanDslPsdMaskDsTable, msanAtm=msanAtm, msanDslSpecificUpboUs4b=msanDslSpecificUpboUs4b, msanSwitchIGMPVlanCurrentMrouterEntry=msanSwitchIGMPVlanCurrentMrouterEntry, msanServiceFlowProfileDescription=msanServiceFlowProfileDescription, msanAlarmPanelInputActiveLevel=msanAlarmPanelInputActiveLevel, msanIsaPortStatAuthorTimeoutExpired=msanIsaPortStatAuthorTimeoutExpired, msanDhcpv6RaPortInterfaceIdStandard=msanDhcpv6RaPortInterfaceIdStandard, msanIgmpPortStatTxV3Report=msanIgmpPortStatTxV3Report, msanMlinec=msanMlinec, msanIPSGIntfTable=msanIPSGIntfTable, msanIpAclRuleRemoveVlanId=msanIpAclRuleRemoveVlanId, msanIsa=msanIsa, msanCpeIntfPortOverrideCos=msanCpeIntfPortOverrideCos, msanDhcpRelay=msanDhcpRelay, msanMacTableGlobal=msanMacTableGlobal, msanNetworkDhcpSrvIpAddr=msanNetworkDhcpSrvIpAddr, msanSfpGlobal=msanSfpGlobal, msanDiagnosticsMaxFanSpeedLevel=msanDiagnosticsMaxFanSpeedLevel, msanAppRateLimitGlobal=msanAppRateLimitGlobal, msanIpAclRuleCVlanId=msanIpAclRuleCVlanId, msanDslSeltStatusCableLenght=msanDslSeltStatusCableLenght, msanIpAclRuleAssignSVlanId=msanIpAclRuleAssignSVlanId, msanIPSGIpv6AdminMode=msanIPSGIpv6AdminMode, msanServiceFlowProfileMatchUsIpProtocol=msanServiceFlowProfileMatchUsIpProtocol, msanDiagnosticsErrorEntry=msanDiagnosticsErrorEntry, msanMulticastAccessListGroupRowStatus=msanMulticastAccessListGroupRowStatus, msanQosProfilePriority=msanQosProfilePriority)
mibBuilder.exportSymbols("ISKRATEL-MSAN-MIB", msanFilteringAssignFilterVid=msanFilteringAssignFilterVid, msanDiagnosticsErrorFilterObjMask=msanDiagnosticsErrorFilterObjMask, msanMacAclRuleAssignVlanId2=msanMacAclRuleAssignVlanId2, msanAdslLineExtnEntry=msanAdslLineExtnEntry, msanServiceProfileDhcpRaOpt82Insert=msanServiceProfileDhcpRaOpt82Insert, msanDiagnosticsFanSpeedLevel=msanDiagnosticsFanSpeedLevel, msanIpAclRuleAssignVlanId2=msanIpAclRuleAssignVlanId2, msanAppRateLimitMnState=msanAppRateLimitMnState, msanNetworkGlobal=msanNetworkGlobal, msanInfo=msanInfo, msanStpMstVlanEntry=msanStpMstVlanEntry, msanDhcpRaFullModeVlanId=msanDhcpRaFullModeVlanId, msanArpInspectionVlanAdminMode=msanArpInspectionVlanAdminMode, msanSystemSwUpgradePath=msanSystemSwUpgradePath, msanIsaTalPortMatchDhcpOpt61ClientIdMacAddr=msanIsaTalPortMatchDhcpOpt61ClientIdMacAddr, msanMacAclRuleIndex=msanMacAclRuleIndex, msanIsaPortStatAuthenReqRejected=msanIsaPortStatAuthenReqRejected, msanDhcpRaVlanConfigTable=msanDhcpRaVlanConfigTable, msanCosMapIntfTrustEntry=msanCosMapIntfTrustEntry, msanFilteringRuleEntry=msanFilteringRuleEntry, msanCpeIntfPortLinkMode=msanCpeIntfPortLinkMode, msanPppoeIaStatPADI=msanPppoeIaStatPADI, msanSfpInfoIeeeVendorId=msanSfpInfoIeeeVendorId, msanIsaTalPatternMatchMacSrcAddr=msanIsaTalPatternMatchMacSrcAddr, msanErrorDisableMacSgRecoveryStatus=msanErrorDisableMacSgRecoveryStatus, msanEapsAdminState=msanEapsAdminState, msanDslSpecificMaxSnrmUs=msanDslSpecificMaxSnrmUs, msanQosProfileMatchOutIpSrcAddr=msanQosProfileMatchOutIpSrcAddr, msanIgmpPortStatRxV3Report=msanIgmpPortStatRxV3Report, msanServiceFlowProfileMatchUsMacSrcMask=msanServiceFlowProfileMatchUsMacSrcMask, msanSntpTzDstStartDayInWeek=msanSntpTzDstStartDayInWeek, msanIsaPortStatAuthorReqSent=msanIsaPortStatAuthorReqSent, msanIsaTalPatternMatchLoginMask=msanIsaTalPatternMatchLoginMask, msanMulticastProfileName=msanMulticastProfileName, msanAlarmPanelIndicatorEntry=msanAlarmPanelIndicatorEntry, msanDslSpecificEntry=msanDslSpecificEntry, msanAdsl=msanAdsl, msanResetDelay=msanResetDelay, msanSntpTzDstEndMonth=msanSntpTzDstEndMonth, msanSfpDiagnosticsRxPowerCurrent=msanSfpDiagnosticsRxPowerCurrent, msanPortMasterSlave=msanPortMasterSlave, msanXdsl2LineAlarmConfTempStatus=msanXdsl2LineAlarmConfTempStatus, msanIPSGBindRowStatus=msanIPSGBindRowStatus, msanSystem=msanSystem, msanMulticastIntfStaticGroupIPAddr=msanMulticastIntfStaticGroupIPAddr, msanIsaTalPatternMatchEthertype=msanIsaTalPatternMatchEthertype, msanAdslAtucPhysExtnActPsdUs=msanAdslAtucPhysExtnActPsdUs, msanServiceFlowProfileMatchDsAny=msanServiceFlowProfileMatchDsAny, msanCosQueueControlTable=msanCosQueueControlTable, msanAdslAtucPhysExtnDeltQLNMTus=msanAdslAtucPhysExtnDeltQLNMTus, msanPortSecurityPortVlanRowStatus=msanPortSecurityPortVlanRowStatus, msanDiagnosticsTestPriority=msanDiagnosticsTestPriority, msanIsaStatLoginReq=msanIsaStatLoginReq, msanL2cpProtocolRowStatus=msanL2cpProtocolRowStatus, msanIPSGPortBindCurrentMatchedFrames=msanIPSGPortBindCurrentMatchedFrames, msanCpeIntfPortTable=msanCpeIntfPortTable, msanServiceFlowProfileMatchDsIpDscp=msanServiceFlowProfileMatchDsIpDscp, msanDslSpecificRaUsNrmUs=msanDslSpecificRaUsNrmUs, msanCpeTrafficProtection=msanCpeTrafficProtection, msanServiceProfileSecurityProfileName=msanServiceProfileSecurityProfileName, msanPppoeIAPortEntry=msanPppoeIAPortEntry, msanDslSpecificMaxNomPsdUs=msanDslSpecificMaxNomPsdUs, msanCpeServiceStatus=msanCpeServiceStatus, msanSfp=msanSfp, msanIgmpPortStatRxV2Leave=msanIgmpPortStatRxV2Leave, msanDslPsdMaskUsShape=msanDslPsdMaskUsShape, msanVlanProfileNetworkPortCTag=msanVlanProfileNetworkPortCTag, msanAdslLineExtnAction=msanAdslLineExtnAction, msanBoardConfSwSteerVersion=msanBoardConfSwSteerVersion, msanQosPortProfileStatQueueAverage=msanQosPortProfileStatQueueAverage, msanAdslAturPhysExtnConfig=msanAdslAturPhysExtnConfig, msanServiceFlowProfileUsPdrBurstSize=msanServiceFlowProfileUsPdrBurstSize, msanIsaTalPatternMatchName=msanIsaTalPatternMatchName, msanIpAclRuleTable=msanIpAclRuleTable)
