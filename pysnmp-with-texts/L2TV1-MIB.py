#
# PySNMP MIB module L2TV1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/L2TV1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:05:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Unsigned32, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, Integer32, Counter32, NotificationType, enterprises, iso, IpAddress, TimeTicks, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "Integer32", "Counter32", "NotificationType", "enterprises", "iso", "IpAddress", "TimeTicks", "MibIdentifier", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ibmIROCroutingl2t = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7))
l2tScalar = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 1))
l2tStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2))
l2tUdp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 3))
l2tAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 4))
l2tHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5))
l2tHosts = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 6))
l2tTests = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 7))
l2tTrapCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 8))
l2tScalarConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 1, 1))
l2tAdminState = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: l2tAdminState.setDescription('This object defines the administrative state of the L2T protocol stack.')
l2tAuthenticateIncomingTunnelSetupRequests = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tAuthenticateIncomingTunnelSetupRequests.setStatus('mandatory')
if mibBuilder.loadTexts: l2tAuthenticateIncomingTunnelSetupRequests.setDescription('Defines whether the L2T protocol stack will REQUIRE the CHAP-like authentication mechanism to be present in all tunnel setup requests.')
l2tTunnelDataFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelDataFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelDataFlowControl.setDescription('This object determines whether or not L2T is to use flow control on the tunneled data packets.')
l2tControlRecvPacketWindow = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 1, 1, 4), Integer32().clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tControlRecvPacketWindow.setStatus('mandatory')
if mibBuilder.loadTexts: l2tControlRecvPacketWindow.setDescription('This object defines the Control Channel receive window size which is transmitted to the L2T peers.')
l2tDataRecvPacketWindow = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 1, 1, 5), Integer32().clone(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tDataRecvPacketWindow.setStatus('mandatory')
if mibBuilder.loadTexts: l2tDataRecvPacketWindow.setDescription('This object defines the Data Channel receive window size which is transmitted to the L2T peers.')
l2tHelloTimer = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 1, 1, 6), Integer32().clone(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHelloTimer.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHelloTimer.setDescription('This object defines the length of the inactivity timer in seconds which causes the L2T stack to transmit a keep-alive packet (known as a Hello packet).')
l2tControlRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tControlRetransmissions.setStatus('mandatory')
if mibBuilder.loadTexts: l2tControlRetransmissions.setDescription('This object defines the number of retransmissions which the L2T stack will attempt before assuming that the peer is no longer reachable. The default value for this object is zero (0) which results in the L2T stack not doing retransmissions.')
l2tSecurityExtensions = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSecurityExtensions.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSecurityExtensions.setDescription('This object defines whether the L2T protocol stack will require the L2T Security for all incoming tunnel setup requests.')
l2tHistoryWindowSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tHistoryWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistoryWindowSize.setDescription('The window size of the L2T Tunnel History Table (l2tHistTunnelTable) and the L2T Session History Table (l2tHistSessTable). When retrieved by an SNMP GET or GET-NEXT request, this number specifies the maximum number of entries which will be maintained in each of these tables. When modified by an SNMP SET request, the device will set the value of this object as close as possible to the requested value based on implementation and available resources.')
l2tAuthFailWindowSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tAuthFailWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: l2tAuthFailWindowSize.setDescription('The window size of the L2T Tunnel Authentication Failure Table (l2tAuthFailTunnelTable) and the L2T User Authentication Failure Table (l2tAuthFailUserTable). When retrieved by an SNMP GET or GET-NEXT request, this number specifies the maximum number of entries which will be maintained in each of these tables. When modified by an SNMP SET request, the device will set the value of this object as close as possible to the requested value based on implementation and available resources.')
l2tScalarStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 1, 2))
l2tMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tMibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: l2tMibVersion.setDescription('The level of the IBM L2T MIB.')
l2tProtocolVersion = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 1, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tProtocolVersion.setStatus('mandatory')
if mibBuilder.loadTexts: l2tProtocolVersion.setDescription('This object describes the protocol version and revision of the L2T protocol stack. The first octet contains the protocol version. The second octet contains the protocol revision.')
l2tNumActiveTunnels = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tNumActiveTunnels.setStatus('mandatory')
if mibBuilder.loadTexts: l2tNumActiveTunnels.setDescription('This object returns the number of L2T tunnels that are mandatory active.')
l2tStatsNumActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tStatsNumActiveSessions.setStatus('mandatory')
if mibBuilder.loadTexts: l2tStatsNumActiveSessions.setDescription('This object returns the number of L2T sessions that are mandatory active.')
l2tTunnelStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1), )
if mibBuilder.loadTexts: l2tTunnelStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelStatsTable.setDescription('The L2T tunnel status and statistics table.')
l2tTunnelStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1), ).setIndexNames((0, "L2TV1-MIB", "l2tTunnelLocalTunnelControlId"))
if mibBuilder.loadTexts: l2tTunnelStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelStatsEntry.setDescription('An L2T tunnel interface stats entry.')
l2tTunnelLocalTunnelControlId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelLocalTunnelControlId.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelLocalTunnelControlId.setDescription('This object contains the local tunnel Identifier.')
l2tTunnelPeerTunnelControlId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelPeerTunnelControlId.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelPeerTunnelControlId.setDescription('This object contains the remote tunnel Identifier. ')
l2tTunnelControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("l2ttunnelidle", 1), ("l2ttunnelwaitctrlreply", 2), ("l2ttunnelwaitctrlconn", 3), ("l2ttunnelestablished", 4), ("l2ttunnelhold", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelControlState.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelControlState.setDescription('This field contains the mandatory state of the control tunnel.')
l2tTunnelLocalInitConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelLocalInitConnection.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelLocalInitConnection.setDescription('This object indicates whether the tunnel was generated locally or not. When this object returns a value of true(1) the tunnel was locally generated.')
l2tTunnelLocalRecvPktWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelLocalRecvPktWindow.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelLocalRecvPktWindow.setDescription('This object contains the local receive window size.')
l2tTunnelRemoteRecvPktWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelRemoteRecvPktWindow.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelRemoteRecvPktWindow.setDescription('This object contains the remote receive window size.')
l2tTunnelCtlTunnelFlwCtlTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelCtlTunnelFlwCtlTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelCtlTunnelFlwCtlTimeouts.setDescription('This object contains the number of timeouts due to flow control.')
l2tTunnelRemoteHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelRemoteHostName.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelRemoteHostName.setDescription('This object contains the host name of the L2T peer.')
l2tTunnelNextSendSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelNextSendSeq.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelNextSendSeq.setDescription('This object contains the next send sequence number for the control channel.')
l2tTunnelNextRecvSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelNextRecvSeq.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelNextRecvSeq.setDescription('This object contains the next receive sequence number for the control channel.')
l2tTunnelRemoteVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelRemoteVendorName.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelRemoteVendorName.setDescription("This object identifies the vendor name of the peer's L2T implementation.")
l2tTunnelRemoteFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelRemoteFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelRemoteFirmwareRevision.setDescription("This object contains the L2T peer's firmware revision number.")
l2tTunnelRemoteProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelRemoteProtocolVersion.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelRemoteProtocolVersion.setDescription('This object describes the protocol version and revision of the L2T protocol stack. The first octet contains the protocol version. The second octet contains the protocol revision.')
l2tTunnelActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelActiveSessions.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelActiveSessions.setDescription('This object contains the total number of sessions in use for this tunnel.')
l2tTunnelPrevSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelPrevSessions.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelPrevSessions.setDescription('The total number of previously actively sessions which used this tunnel.')
l2tTunnelUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelUpTime.setDescription('The length of time the tunnel has been active in hundredths of seconds.')
l2tTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("l2tpTunnel", 1), ("l2fTunnel", 2), ("pptpTunnel", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelType.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelType.setDescription('The type of Layer-2 Tunnel. Possible values are: 1 = Layer-2 Tunnel Protocol Tunnel, 2 = Layer-2 Forwarding Tunnel, 3 = Point-to-Point Tunnel Protocol Tunnel.')
l2tTunnelInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelInOctets.setDescription('The number of octets received by this tunnel.')
l2tTunnelInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelInPkts.setDescription('The number of packets received by this tunnel.')
l2tTunnelInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelInDiscards.setDescription('The number of packets which were discarded during receive processing.')
l2tTunnelOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelOutOctets.setDescription('The number of octets sent by this tunnel.')
l2tTunnelOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelOutPkts.setDescription('The number of packets sent by this tunnel.')
l2tTunnelOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelOutDiscards.setDescription('The number of packets which were discarded during send processing.')
l2tTunnelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tTunnelStatus.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelStatus.setDescription('The status of the MIB table row. This object can be used to bring the tunnel down by setting value of this object to destroy(2). This object cannot be used to create a MIB table row.')
l2tSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2), )
if mibBuilder.loadTexts: l2tSessionStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionStatsTable.setDescription('The L2T session status and statistics table. ')
l2tSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1), ).setIndexNames((0, "L2TV1-MIB", "l2tSessionLocalControlTunnelId"), (0, "L2TV1-MIB", "l2tSessionLocalCallId"))
if mibBuilder.loadTexts: l2tSessionStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionStatsEntry.setDescription('An L2T session interface stats entry. ')
l2tSessionLocalControlTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionLocalControlTunnelId.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionLocalControlTunnelId.setDescription('This object contains the control Channel Tunnel identifier for this session.')
l2tSessionLocalCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionLocalCallId.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionLocalCallId.setDescription('This object contains the local call identifier for the session.')
l2tSessionRemoteCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionRemoteCallId.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionRemoteCallId.setDescription('This object contains the remote call identifier for the session.')
l2tSessionPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionPeerName.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionPeerName.setDescription('This object identifies the peer session name on this interface. This is typically the login name of the remote user.')
l2tSessionLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("callwaittunnel", 1), ("callidle", 2), ("callwaitreply", 3), ("callwaitconnect", 4), ("callwaitcsanswer", 5), ("callestablished", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionLineState.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionLineState.setDescription('This object contains the current state of the session. ')
l2tSessionCallDeviceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionCallDeviceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionCallDeviceNumber.setDescription('The internal interface number used for the session.')
l2tSessionCallSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionCallSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionCallSerialNumber.setDescription('This object contains the serial number that applies to the session.')
l2tSessionConnectBps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionConnectBps.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionConnectBps.setDescription('This object returns the baud rate which this session was established at.')
l2tSessionCallBearerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("digital", 1), ("analog", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionCallBearerType.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionCallBearerType.setDescription('This object returns the bearer type that applies to this session.')
l2tSessionFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("synchronous", 1), ("asynchronous", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionFramingType.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionFramingType.setDescription('This object returns the framing type used for this session.')
l2tSessionLocalRecvPacketWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionLocalRecvPacketWindow.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionLocalRecvPacketWindow.setDescription('This object returns the local receive window size for this session.')
l2tSessionRemoteRecvPacketWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionRemoteRecvPacketWindow.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionRemoteRecvPacketWindow.setDescription('This object returns the remote receive window size for this session.')
l2tSessionDataRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionDataRecvOctets.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionDataRecvOctets.setDescription('The number of octets received on the data tunnel for this session. This value is accumulated BEFORE determining whether or not the packet should be uncompressed.')
l2tSessionDataRecvDecompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionDataRecvDecompOctets.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionDataRecvDecompOctets.setDescription('The number of uncompressed octets received on the data tunnel for this session. This value is accumulated AFTER the packet is uncompressed. If compression is not in use, this value will match the value of l2tSessionDataRecvOctets.')
l2tSessionDataRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionDataRecvPackets.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionDataRecvPackets.setDescription('The number packets received on the data tunnel for this session.')
l2tSessionDataRecvDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionDataRecvDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionDataRecvDiscards.setDescription('The number packets which were discarded during the data tunnels receive processing for this session.')
l2tSessionDataSendOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionDataSendOctets.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionDataSendOctets.setDescription('The number of octets sent on the data tunnel for this session. This value is accumulated AFTER the packet was compressed. If compression is not in use, this value will match the value of l2tSessionDataRecvUncompOctets.')
l2tSessionDataSendUncompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionDataSendUncompOctets.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionDataSendUncompOctets.setDescription('The number of uncompressed octets sent on the data tunnel for this session. This value is is accumulated BEFORE determining whether or not the packet should be compressed.')
l2tSessionDataSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionDataSendPackets.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionDataSendPackets.setDescription('The number packets sent on the data tunnel for this session.')
l2tSessionDataSendDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionDataSendDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionDataSendDiscards.setDescription('The number packets which were discarded during the data tunnels send processing for this session.')
l2tSessionDataFlowControlTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionDataFlowControlTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionDataFlowControlTimeouts.setDescription('This object returns the total number of flow control time-outs seen on the data Tunnel for this session.')
l2tSessionNextSendSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionNextSendSeq.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionNextSendSeq.setDescription('This object contains the next send sequence number for for this session.')
l2tSessionNextRecvSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionNextRecvSeq.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionNextRecvSeq.setDescription('This object contains the next receive sequence number for this session.')
l2tSessionRemotePPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionRemotePPD.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionRemotePPD.setDescription('This object contains the Packet Processing Delay for the session.')
l2tSessionAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("text", 1), ("pppchap", 2), ("ppppap", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionAuthMethod.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionAuthMethod.setDescription('This object contains the proxy authentication method employed by the LAC for the session.')
l2tSessionEncryptDecrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionEncryptDecrypt.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionEncryptDecrypt.setDescription('This object reflects whether or not the encryption and and decryption is being performed for the session.')
l2tSessionUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 27), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tSessionUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionUpTime.setDescription('The length of time the session has been active in hundredths of seconds. ')
l2tSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tSessionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: l2tSessionStatus.setDescription('The status of the MIB table row. This object can be used to bring the session down by setting value of this object to destroy(2). This object cannot be used to create a MIB table row.')
l2tUdpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 3, 1), )
if mibBuilder.loadTexts: l2tUdpConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: l2tUdpConfigTable.setDescription('The L2T session configuration table.')
l2tUdpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 3, 1, 1), ).setIndexNames((0, "L2TV1-MIB", "l2tTunnelLocalTunnelControlId"))
if mibBuilder.loadTexts: l2tUdpConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: l2tUdpConfigEntry.setDescription('An L2T session interface configuration entry.')
l2tUdpPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tUdpPeerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: l2tUdpPeerAddress.setDescription('This object is used to configure the remote tunnel endpoints IP address. ')
l2tUdpPeerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 3, 1, 1, 2), Integer32().clone(1701)).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tUdpPeerPort.setStatus('mandatory')
if mibBuilder.loadTexts: l2tUdpPeerPort.setDescription('This object is used to configure the remote tunnel endpoints UDP port. ')
l2tUdpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 3, 2), )
if mibBuilder.loadTexts: l2tUdpStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: l2tUdpStatsTable.setDescription('The L2T session configuration table.')
l2tUdpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 3, 2, 1), ).setIndexNames((0, "L2TV1-MIB", "l2tTunnelLocalTunnelControlId"))
if mibBuilder.loadTexts: l2tUdpStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: l2tUdpStatsEntry.setDescription('An L2T session interface configuration entry.')
l2tUdpPeerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 3, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tUdpPeerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: l2tUdpPeerIpAddress.setDescription('The peer IP Address of the tunnel.')
l2tUdpLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tUdpLocalIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: l2tUdpLocalIpAddress.setDescription('The local IP Address of the tunnel.')
l2tUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tUdpSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: l2tUdpSrcPort.setDescription('The peer port of tunnel.')
l2tUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tUdpDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: l2tUdpDstPort.setDescription('The local port of tunnel.')
l2tAuthStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 4, 1))
l2tAuthTunnelSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tAuthTunnelSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: l2tAuthTunnelSuccesses.setDescription('The number of successful tunnel authentications performed.')
l2tAuthTunnelFailures = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tAuthTunnelFailures.setStatus('mandatory')
if mibBuilder.loadTexts: l2tAuthTunnelFailures.setDescription('The number of tunnel authentications which failed.')
l2tAuthUserSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tAuthUserSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: l2tAuthUserSuccesses.setDescription('The number of successful user authentications performed.')
l2tAuthUserFailures = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tAuthUserFailures.setStatus('mandatory')
if mibBuilder.loadTexts: l2tAuthUserFailures.setDescription('The number of user authentications which failed.')
l2tAuthFailures = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 4, 2))
l2tAuthFailTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 4, 2, 1), )
if mibBuilder.loadTexts: l2tAuthFailTunnelTable.setStatus('mandatory')
if mibBuilder.loadTexts: l2tAuthFailTunnelTable.setDescription('The L2T tunnel authentication failure table.')
l2tAuthFailTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 4, 2, 1, 1), ).setIndexNames((0, "L2TV1-MIB", "l2tAuthFailTunnelIndex"))
if mibBuilder.loadTexts: l2tAuthFailTunnelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: l2tAuthFailTunnelEntry.setDescription('An L2T tunnel authentication failure entry. ')
l2tAuthFailTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tAuthFailTunnelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: l2tAuthFailTunnelIndex.setDescription('The index of the tunnel authentication failure table. The value of the index is a number which begins at one and is incremented with each tunnel authentication failure. It will wrap at 65535.')
l2tAuthFailTunnelHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tAuthFailTunnelHostName.setStatus('mandatory')
if mibBuilder.loadTexts: l2tAuthFailTunnelHostName.setDescription('The host name used on the failed tunnel authentication attempt.')
l2tAuthFailTunnelIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 4, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tAuthFailTunnelIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: l2tAuthFailTunnelIpAddress.setDescription('The IP address associated with the failed tunnel authentication attempt.')
l2tAuthFailTunnelTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 4, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tAuthFailTunnelTime.setStatus('mandatory')
if mibBuilder.loadTexts: l2tAuthFailTunnelTime.setDescription('The time of the failure in hundredths of seconds.')
l2tAuthFailUserTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 4, 2, 2), )
if mibBuilder.loadTexts: l2tAuthFailUserTable.setStatus('mandatory')
if mibBuilder.loadTexts: l2tAuthFailUserTable.setDescription('The L2T user authentication failure table.')
l2tAuthFailUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 4, 2, 2, 1), ).setIndexNames((0, "L2TV1-MIB", "l2tAuthFailUserIndex"))
if mibBuilder.loadTexts: l2tAuthFailUserEntry.setStatus('mandatory')
if mibBuilder.loadTexts: l2tAuthFailUserEntry.setDescription('An L2T user authentication failure entry. ')
l2tAuthFailUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tAuthFailUserIndex.setStatus('mandatory')
if mibBuilder.loadTexts: l2tAuthFailUserIndex.setDescription('The index of the user authentication failure table. The value of the index is a number which begins at one and is incremented with each user authentication failure. It will wrap at 65535.')
l2tAuthFailUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 4, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tAuthFailUserId.setStatus('mandatory')
if mibBuilder.loadTexts: l2tAuthFailUserId.setDescription('The user name used on the failed authentication attempt.')
l2tAuthFailUserTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 4, 2, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tAuthFailUserTime.setStatus('mandatory')
if mibBuilder.loadTexts: l2tAuthFailUserTime.setDescription('The time of the failure in hundredths of seconds.')
l2tHistTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 1), )
if mibBuilder.loadTexts: l2tHistTunnelTable.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistTunnelTable.setDescription('The L2T tunnel history table.')
l2tHistTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 1, 1), ).setIndexNames((0, "L2TV1-MIB", "l2tHistTunnelIndex"))
if mibBuilder.loadTexts: l2tHistTunnelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistTunnelEntry.setDescription('An L2T tunnel history entry. ')
l2tHistTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistTunnelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistTunnelIndex.setDescription('The index of the tunnel history table. The value of the index is a number which begins at one and is incremented with each tunnel that ends. The value of this object will wrap at 65535.')
l2tHistTunnelTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistTunnelTunnelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistTunnelTunnelIndex.setDescription('The value which was used as the tunnel stats table index.')
l2tHistTunnelRemoteHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistTunnelRemoteHostName.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistTunnelRemoteHostName.setDescription('The remote host name which was used for this previous tunnel.')
l2tHistTunnelRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistTunnelRemoteIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistTunnelRemoteIpAddress.setDescription('The remote IP address which was used for this previous tunnel.')
l2tHistTunnelRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistTunnelRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistTunnelRemotePort.setDescription('The remote UDP port which was used for this previous tunnel.')
l2tHistTunnelLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistTunnelLocalIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistTunnelLocalIpAddress.setDescription('The local IP address which was used for this previous tunnel.')
l2tHistTunnelLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistTunnelLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistTunnelLocalPort.setDescription('The local UDP port which was used for this previous tunnel.')
l2tHistTunnelUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistTunnelUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistTunnelUpTime.setDescription('The length of time the tunnel was active in hundredths of seconds. ')
l2tHistTunnelTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistTunnelTotalSessions.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistTunnelTotalSessions.setDescription('The total number of sessions which used this tunnel.')
l2tHistTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("l2tpTunnel", 1), ("l2fTunnel", 2), ("pptpTunnel", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistTunnelType.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistTunnelType.setDescription('The type of Layer-2 Tunnel. Possible values are 1 = Layer-2 Tunnel Protocol Tunnel, 2 = Layer-2 Forwarding Tunnel, 3 = Point-to-Point Tunnel Protocol Tunnel.')
l2tHistTunnelInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistTunnelInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistTunnelInOctets.setDescription('The number of octets received by this tunnel.')
l2tHistTunnelInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistTunnelInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistTunnelInPkts.setDescription('The number of packets received by this tunnel.')
l2tHistTunnelInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistTunnelInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistTunnelInDiscards.setDescription('The number of packets which were discarded during receive processing.')
l2tHistTunnelOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistTunnelOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistTunnelOutOctets.setDescription('The number of octets sent by this tunnel.')
l2tHistTunnelOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistTunnelOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistTunnelOutPkts.setDescription('The number of packets sent by this tunnel.')
l2tHistTunnelOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistTunnelOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistTunnelOutDiscards.setDescription('The number of packets which were discarded during send processing.')
l2tHistSessTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 2), )
if mibBuilder.loadTexts: l2tHistSessTable.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistSessTable.setDescription('The L2T session history table.')
l2tHistSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 2, 1), ).setIndexNames((0, "L2TV1-MIB", "l2tHistSessIndex"))
if mibBuilder.loadTexts: l2tHistSessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistSessEntry.setDescription('An L2T session history entry. ')
l2tHistSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistSessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistSessIndex.setDescription('The index of the session history table. The value of the index is a number which begins at one and is incremented with each tunnel that ends. The value of this object will wrap at 65535.')
l2tHistSessTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistSessTunnelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistSessTunnelIndex.setDescription('The value which was used as the tunnel stats table index.')
l2tHistSessLocalCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistSessLocalCallId.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistSessLocalCallId.setDescription('The value which was used as the session stats table index.')
l2tHistSessRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistSessRemoteIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistSessRemoteIpAddress.setDescription('The remote IP address which was used for this session.')
l2tHistSessLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistSessLocalIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistSessLocalIpAddress.setDescription('The local IP address which was used for this session.')
l2tHistSessUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistSessUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistSessUpTime.setDescription('The length of time the session was been active in hundredths of seconds. ')
l2tHistSessDataRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistSessDataRecvOctets.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistSessDataRecvOctets.setDescription('The number of octets received on the data tunnel for this session. This value was accumulated BEFORE determining whether or not the packet should be uncompressed.')
l2tHistSessDataRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistSessDataRecvPackets.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistSessDataRecvPackets.setDescription('The number packets received on the data tunnel for this session.')
l2tHistSessDataRecvDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistSessDataRecvDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistSessDataRecvDiscards.setDescription('The number packets which were discarded during the data tunnels receive processing for this session.')
l2tHistSessDataSendOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistSessDataSendOctets.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistSessDataSendOctets.setDescription('The number of octets sent on the data tunnel for this session. This value is accumulated AFTER the packet was compressed.')
l2tHistSessDataSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistSessDataSendPackets.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistSessDataSendPackets.setDescription('The number packets sent on the data tunnel for this session.')
l2tHistSessDataSendDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistSessDataSendDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistSessDataSendDiscards.setDescription('The number packets which were discarded during the data tunnels send processing for this session.')
l2tHistSessAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("text", 1), ("pppchap", 2), ("ppppap", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistSessAuthMethod.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistSessAuthMethod.setDescription('This object contains the proxy authentication method which was employed by the LAC for the session.')
l2tHistSessEncryptDecrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHistSessEncryptDecrypt.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHistSessEncryptDecrypt.setDescription('This object reflects whether or not the encryption and and decryption is being performed for the session.')
l2tHostTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 6, 1), )
if mibBuilder.loadTexts: l2tHostTable.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHostTable.setDescription('The L2T host table.')
l2tHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 6, 1, 1), ).setIndexNames((0, "L2TV1-MIB", "l2tHostIndex"))
if mibBuilder.loadTexts: l2tHostEntry.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHostEntry.setDescription('An L2T host entry.')
l2tHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHostIndex.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHostIndex.setDescription('The index of the host table.')
l2tHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHostName.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHostName.setDescription('The host name which may used for a Layer-2 tunnel.')
l2tHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 6, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHostIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHostIpAddress.setDescription('The IP Address associated with the host name.')
l2tHostTunnelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tHostTunnelStatus.setStatus('mandatory')
if mibBuilder.loadTexts: l2tHostTunnelStatus.setDescription('The current tunnel status of the host.')
l2tTunnelConnectTestTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 7, 1), )
if mibBuilder.loadTexts: l2tTunnelConnectTestTable.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelConnectTestTable.setDescription('The L2T tunnel connectivity test table.')
l2tTunnelConnectTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 7, 1, 1), ).setIndexNames((0, "L2TV1-MIB", "l2tTunnelConnectTestIndex"))
if mibBuilder.loadTexts: l2tTunnelConnectTestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelConnectTestEntry.setDescription('An L2T tunnel connectivity test entry.')
l2tTunnelConnectTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelConnectTestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelConnectTestIndex.setDescription('The index of the tunnel connectivity test table. The value of the index is a number which was used during row creation.')
l2tTunnelConnectTestHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 7, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tTunnelConnectTestHostName.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelConnectTestHostName.setDescription('The host name used to establish a Layer-2 tunnel. This object is used to trigger a connectivity test to a specific host. A new test is triggered by SETTING this object using a non-existent index and SETTING l2tTunnelConnectTestStatus to createAndGo. For example to trigger a new connectivity test when the table currently contains row 1 through 4, one would send a SET as follows: SNMP SET l2tTunnelConnectHostName.5 = Host-To-Test l2tTunnelConnectTestStatus.5 = createAndGo See l2tHostName for the possible host names which may be specified. Existing entries may NOT be modified.')
l2tTunnelConnectTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inProgress", 1), ("successful", 2), ("tunnelAlreadyUp", 3), ("hostNotResponding", 4), ("localAuthFailure", 5), ("remoteAuthFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelConnectTestResult.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelConnectTestResult.setDescription('The result of the tunnel connectivity test. 1 = test is in progress 2 = test ended successfully 3 = tunnel is already active 4 = host did not respond 5 = local authentication failure 6 = remote authentication failure.')
l2tTunnelConnectTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("l2tpTunnel", 1), ("l2fTunnel", 2), ("pptpTunnel", 3), ("none", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelConnectTestType.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelConnectTestType.setDescription('The type of Layer-2 Tunnel. Possible values are: 1 = Layer-2 Tunnel Protocol Tunnel 2 = Layer-2 Forwarding Tunnel 3 = Point-to-Point Tunnel Protocol Tunnel 99 = no tunnel created.')
l2tTunnelConnectTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tTunnelConnectTestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelConnectTestStatus.setDescription('The status of the test entry. Possible values are: 1 = active entry 4 = createAndGo This object is used to trigger a connectivity test to a specific host. A new test is triggered by SETTING this object to createAndGo using a non-existent index and SETTING l2tTunnelConnectTestHostName to a specific host name. For example to trigger a new connectivity test when the table currently contains row 1 through 4, one would send a SET as follows: SNMP SET l2tTunnelConnectHostName.5 = Host-To-Test l2tTunnelConnectTestStatus.5 = createAndGo See l2tHostName for the possible host names which may be specified. Existing entries may NOT be modified.')
l2tTunnelRspTimeTestTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 7, 2), )
if mibBuilder.loadTexts: l2tTunnelRspTimeTestTable.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelRspTimeTestTable.setDescription('The L2T tunnel response time test table.')
l2tTunnelRspTimeTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 7, 2, 1), ).setIndexNames((0, "L2TV1-MIB", "l2tTunnelRspTimeTestIndex"))
if mibBuilder.loadTexts: l2tTunnelRspTimeTestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelRspTimeTestEntry.setDescription('An L2T tunnel response time test entry.')
l2tTunnelRspTimeTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelRspTimeTestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelRspTimeTestIndex.setDescription('The index of the tunnel connectivity test table. The value of the index is a number which was used during row creation.')
l2tTunnelRspTimeTestHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 7, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tTunnelRspTimeTestHostName.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelRspTimeTestHostName.setDescription('The host name used to test the round-trip response time of an existing Layer-2 Tunnel. This object is used to trigger a response time test of an existing Layer-2 to a specific host. A new test is triggered by SETTING this object using a non-existent index and SETTING l2tTunnelRspTimeTestStatus to createAndGo. For example to trigger a new connectivity test when the table currently contains row 1 through 4, one would send a SET as follows: SNMP SET l2tTunnelRspTimeHostName.5 = Host-To-Test l2tTunnelRspTimeTestStatus.5 = createAndGo See l2tHistTunnelRemoteHostName for the possible host names which may be specified. Existing entries may NOT be modified.')
l2tTunnelRspTimeTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inProgress", 1), ("successful", 2), ("hostNotResponding", 3), ("tunnelDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelRspTimeTestResult.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelRspTimeTestResult.setDescription('The result of the tunnel connectivity test. 1 = test is in progress 2 = test ended successfully 3 = host did not respond 4 = a tunnel to this host is NOT available.')
l2tTunnelRspTimeTestRtripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2tTunnelRspTimeTestRtripTime.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelRspTimeTestRtripTime.setDescription('The round time in milliseconds of response time test.')
l2tTunnelRspTimeTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tTunnelRspTimeTestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTunnelRspTimeTestStatus.setDescription('The status of the test entry. Possible values are: 1 = active entry 4 = createAndGo This object is used to trigger a response time test of an existing Layer-2 to a specific host. A new test is triggered by SETTING this object using a non-existent index to createAndGo and SETTING l2tTunnelRspTimeHostName to a specific host. For example to trigger a new response time test when the table currently contains row 1 through 4, one would send a SET as follows: SNMP SET l2tTunnelRspTimeHostName.5 = Host-To-Test l2tTunnelRspTimeTestStatus.5 = createAndGo See l2tHistTunnelRemoteHostName for the possible host names which may be specified. Existing entries may NOT be modified.')
l2tTrapCntlTunnelStart = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tTrapCntlTunnelStart.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTrapCntlTunnelStart.setDescription('This object defines the administrative state of sending the L2T Tunnel Start TRAP ')
l2tTrapCntlTunnelStop = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tTrapCntlTunnelStop.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTrapCntlTunnelStop.setDescription('This object defines the administrative state of sending the L2T Tunnel Stop TRAP ')
l2tTrapCntlAuthFailTunnel = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tTrapCntlAuthFailTunnel.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTrapCntlAuthFailTunnel.setDescription('This object defines the administrative state of sending the L2T Tunnel Authentication Failure TRAP ')
l2tTrapCntlAuthFailUser = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tTrapCntlAuthFailUser.setStatus('mandatory')
if mibBuilder.loadTexts: l2tTrapCntlAuthFailUser.setDescription('This object defines the administrative state of sending the L2T User Authentication Failure TRAP ')
l2tTunnelStart = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7) + (0,1)).setObjects(("L2TV1-MIB", "l2tTunnelLocalTunnelControlId"), ("L2TV1-MIB", "l2tTunnelType"))
if mibBuilder.loadTexts: l2tTunnelStart.setDescription('This TRAP is generated when a Layer-2 Tunnel is created.')
l2tTunnelStop = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7) + (0,2)).setObjects(("L2TV1-MIB", "l2tTunnelLocalTunnelControlId"), ("L2TV1-MIB", "l2tTunnelType"), ("L2TV1-MIB", "l2tTunnelUpTime"))
if mibBuilder.loadTexts: l2tTunnelStop.setDescription('This TRAP is generated when a Layer-2 Tunnel ends.')
l2tAuthFailTunnel = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7) + (0,3)).setObjects(("L2TV1-MIB", "l2tAuthFailTunnelHostName"), ("L2TV1-MIB", "l2tAuthFailTunnelIpAddress"))
if mibBuilder.loadTexts: l2tAuthFailTunnel.setDescription('This TRAP is generated when a Layer-2 Tunnel is NOT created due to an authentication failure.')
l2tAuthFailUser = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7) + (0,4)).setObjects(("L2TV1-MIB", "l2tAuthFailUserId"))
if mibBuilder.loadTexts: l2tAuthFailUser.setDescription('This TRAP is generated when a Session for a Layer-2 Tunnel is NOT created due to an authentication failure.')
mibBuilder.exportSymbols("L2TV1-MIB", l2tScalarStat=l2tScalarStat, l2tUdpDstPort=l2tUdpDstPort, l2tStats=l2tStats, l2tTunnelConnectTestTable=l2tTunnelConnectTestTable, l2tTrapCntl=l2tTrapCntl, l2tTunnelOutPkts=l2tTunnelOutPkts, l2tAuthFailTunnelTime=l2tAuthFailTunnelTime, l2tTunnelNextRecvSeq=l2tTunnelNextRecvSeq, l2tHistTunnelTunnelIndex=l2tHistTunnelTunnelIndex, l2tHistTunnelUpTime=l2tHistTunnelUpTime, l2tSessionCallDeviceNumber=l2tSessionCallDeviceNumber, l2tSessionDataSendPackets=l2tSessionDataSendPackets, l2tHistTunnelOutPkts=l2tHistTunnelOutPkts, l2tHistSessEncryptDecrypt=l2tHistSessEncryptDecrypt, l2tTunnelRemoteProtocolVersion=l2tTunnelRemoteProtocolVersion, l2tHostIndex=l2tHostIndex, l2tSessionStatsTable=l2tSessionStatsTable, l2tProtocolVersion=l2tProtocolVersion, l2tTunnelInOctets=l2tTunnelInOctets, l2tHistSessLocalCallId=l2tHistSessLocalCallId, l2tUdpConfigTable=l2tUdpConfigTable, l2tHistTunnelInPkts=l2tHistTunnelInPkts, l2tTunnelDataFlowControl=l2tTunnelDataFlowControl, l2tAuthFailUser=l2tAuthFailUser, l2tDataRecvPacketWindow=l2tDataRecvPacketWindow, l2tTunnelOutDiscards=l2tTunnelOutDiscards, l2tScalar=l2tScalar, l2tTrapCntlAuthFailTunnel=l2tTrapCntlAuthFailTunnel, l2tAuthentication=l2tAuthentication, l2tAuthFailUserTable=l2tAuthFailUserTable, l2tSessionNextRecvSeq=l2tSessionNextRecvSeq, l2tTunnelRspTimeTestEntry=l2tTunnelRspTimeTestEntry, l2tSessionStatus=l2tSessionStatus, l2tTunnelPeerTunnelControlId=l2tTunnelPeerTunnelControlId, l2tAuthFailTunnelEntry=l2tAuthFailTunnelEntry, l2tUdp=l2tUdp, l2tTunnelConnectTestStatus=l2tTunnelConnectTestStatus, l2tHistSessDataSendDiscards=l2tHistSessDataSendDiscards, l2tTests=l2tTests, l2tHistSessTunnelIndex=l2tHistSessTunnelIndex, l2tSecurityExtensions=l2tSecurityExtensions, l2tTunnelConnectTestHostName=l2tTunnelConnectTestHostName, l2tTunnelStop=l2tTunnelStop, l2tAuthFailUserIndex=l2tAuthFailUserIndex, ibmIROCroutingl2t=ibmIROCroutingl2t, l2tAuthUserSuccesses=l2tAuthUserSuccesses, l2tHistSessRemoteIpAddress=l2tHistSessRemoteIpAddress, l2tSessionLocalRecvPacketWindow=l2tSessionLocalRecvPacketWindow, l2tControlRecvPacketWindow=l2tControlRecvPacketWindow, l2tAdminState=l2tAdminState, l2tHistTunnelInOctets=l2tHistTunnelInOctets, l2tHistSessDataRecvPackets=l2tHistSessDataRecvPackets, l2tSessionRemotePPD=l2tSessionRemotePPD, l2tSessionDataRecvDiscards=l2tSessionDataRecvDiscards, l2tHistSessUpTime=l2tHistSessUpTime, l2tHistSessDataRecvDiscards=l2tHistSessDataRecvDiscards, l2tHistSessEntry=l2tHistSessEntry, l2tAuthenticateIncomingTunnelSetupRequests=l2tAuthenticateIncomingTunnelSetupRequests, l2tTunnelConnectTestIndex=l2tTunnelConnectTestIndex, l2tSessionDataSendDiscards=l2tSessionDataSendDiscards, l2tHistTunnelInDiscards=l2tHistTunnelInDiscards, l2tHistTunnelLocalPort=l2tHistTunnelLocalPort, l2tUdpSrcPort=l2tUdpSrcPort, l2tTunnelCtlTunnelFlwCtlTimeouts=l2tTunnelCtlTunnelFlwCtlTimeouts, l2tSessionEncryptDecrypt=l2tSessionEncryptDecrypt, l2tMibVersion=l2tMibVersion, l2tTunnelUpTime=l2tTunnelUpTime, l2tHistTunnelLocalIpAddress=l2tHistTunnelLocalIpAddress, l2tTunnelRspTimeTestStatus=l2tTunnelRspTimeTestStatus, l2tTunnelRspTimeTestHostName=l2tTunnelRspTimeTestHostName, l2tUdpPeerAddress=l2tUdpPeerAddress, l2tTunnelRspTimeTestRtripTime=l2tTunnelRspTimeTestRtripTime, l2tSessionLocalControlTunnelId=l2tSessionLocalControlTunnelId, l2tSessionAuthMethod=l2tSessionAuthMethod, l2tHistTunnelRemotePort=l2tHistTunnelRemotePort, l2tTunnelLocalRecvPktWindow=l2tTunnelLocalRecvPktWindow, l2tTunnelRemoteHostName=l2tTunnelRemoteHostName, l2tHistory=l2tHistory, l2tTunnelNextSendSeq=l2tTunnelNextSendSeq, l2tUdpPeerIpAddress=l2tUdpPeerIpAddress, l2tSessionFramingType=l2tSessionFramingType, l2tHistTunnelIndex=l2tHistTunnelIndex, l2tSessionUpTime=l2tSessionUpTime, l2tTunnelRemoteRecvPktWindow=l2tTunnelRemoteRecvPktWindow, l2tAuthFailTunnelHostName=l2tAuthFailTunnelHostName, l2tHistTunnelTable=l2tHistTunnelTable, l2tScalarConfig=l2tScalarConfig, l2tHistSessDataSendPackets=l2tHistSessDataSendPackets, l2tHistSessLocalIpAddress=l2tHistSessLocalIpAddress, l2tUdpStatsTable=l2tUdpStatsTable, l2tAuthFailTunnelIpAddress=l2tAuthFailTunnelIpAddress, l2tTunnelConnectTestType=l2tTunnelConnectTestType, l2tTunnelControlState=l2tTunnelControlState, l2tSessionDataRecvPackets=l2tSessionDataRecvPackets, l2tAuthTunnelFailures=l2tAuthTunnelFailures, l2tHosts=l2tHosts, l2tHistoryWindowSize=l2tHistoryWindowSize, l2tTunnelType=l2tTunnelType, l2tTunnelStatus=l2tTunnelStatus, l2tSessionDataRecvDecompOctets=l2tSessionDataRecvDecompOctets, l2tTunnelRspTimeTestTable=l2tTunnelRspTimeTestTable, l2tSessionRemoteCallId=l2tSessionRemoteCallId, l2tUdpPeerPort=l2tUdpPeerPort, l2tTunnelStatsEntry=l2tTunnelStatsEntry, l2tAuthUserFailures=l2tAuthUserFailures, l2tAuthFailures=l2tAuthFailures, l2tHistSessAuthMethod=l2tHistSessAuthMethod, l2tUdpStatsEntry=l2tUdpStatsEntry, l2tAuthFailUserId=l2tAuthFailUserId, l2tHistTunnelType=l2tHistTunnelType, l2tSessionDataFlowControlTimeouts=l2tSessionDataFlowControlTimeouts, l2tHistTunnelOutDiscards=l2tHistTunnelOutDiscards, l2tHostIpAddress=l2tHostIpAddress, l2tAuthFailTunnelIndex=l2tAuthFailTunnelIndex, l2tControlRetransmissions=l2tControlRetransmissions, l2tNumActiveTunnels=l2tNumActiveTunnels, l2tAuthFailTunnelTable=l2tAuthFailTunnelTable, l2tHostName=l2tHostName, l2tUdpLocalIpAddress=l2tUdpLocalIpAddress, l2tSessionConnectBps=l2tSessionConnectBps, l2tHistTunnelOutOctets=l2tHistTunnelOutOctets, l2tSessionDataSendUncompOctets=l2tSessionDataSendUncompOctets, l2tSessionDataSendOctets=l2tSessionDataSendOctets, l2tHelloTimer=l2tHelloTimer, l2tStatsNumActiveSessions=l2tStatsNumActiveSessions, l2tTunnelPrevSessions=l2tTunnelPrevSessions, l2tHistSessIndex=l2tHistSessIndex, l2tHistTunnelRemoteIpAddress=l2tHistTunnelRemoteIpAddress, l2tSessionDataRecvOctets=l2tSessionDataRecvOctets, l2tHistSessTable=l2tHistSessTable, l2tTrapCntlAuthFailUser=l2tTrapCntlAuthFailUser, l2tAuthFailWindowSize=l2tAuthFailWindowSize, l2tTunnelRemoteVendorName=l2tTunnelRemoteVendorName, l2tSessionLocalCallId=l2tSessionLocalCallId, l2tTunnelLocalTunnelControlId=l2tTunnelLocalTunnelControlId, l2tHostTable=l2tHostTable, l2tTunnelStatsTable=l2tTunnelStatsTable, l2tAuthStats=l2tAuthStats, l2tTunnelActiveSessions=l2tTunnelActiveSessions, l2tHistTunnelRemoteHostName=l2tHistTunnelRemoteHostName, l2tAuthTunnelSuccesses=l2tAuthTunnelSuccesses, l2tHistSessDataRecvOctets=l2tHistSessDataRecvOctets, l2tSessionCallBearerType=l2tSessionCallBearerType, l2tTunnelLocalInitConnection=l2tTunnelLocalInitConnection, l2tHistTunnelEntry=l2tHistTunnelEntry, l2tAuthFailUserEntry=l2tAuthFailUserEntry, l2tTunnelConnectTestEntry=l2tTunnelConnectTestEntry, l2tSessionLineState=l2tSessionLineState, l2tTunnelConnectTestResult=l2tTunnelConnectTestResult, l2tTunnelRspTimeTestResult=l2tTunnelRspTimeTestResult, l2tSessionPeerName=l2tSessionPeerName, l2tSessionCallSerialNumber=l2tSessionCallSerialNumber, l2tSessionNextSendSeq=l2tSessionNextSendSeq, l2tTunnelRspTimeTestIndex=l2tTunnelRspTimeTestIndex, l2tSessionRemoteRecvPacketWindow=l2tSessionRemoteRecvPacketWindow, l2tHostEntry=l2tHostEntry, l2tTrapCntlTunnelStart=l2tTrapCntlTunnelStart, l2tHistSessDataSendOctets=l2tHistSessDataSendOctets, l2tTrapCntlTunnelStop=l2tTrapCntlTunnelStop, l2tSessionStatsEntry=l2tSessionStatsEntry, l2tHistTunnelTotalSessions=l2tHistTunnelTotalSessions, l2tTunnelStart=l2tTunnelStart, l2tTunnelRemoteFirmwareRevision=l2tTunnelRemoteFirmwareRevision, l2tTunnelOutOctets=l2tTunnelOutOctets, l2tHostTunnelStatus=l2tHostTunnelStatus, l2tAuthFailTunnel=l2tAuthFailTunnel, l2tTunnelInDiscards=l2tTunnelInDiscards, l2tAuthFailUserTime=l2tAuthFailUserTime, l2tTunnelInPkts=l2tTunnelInPkts, l2tUdpConfigEntry=l2tUdpConfigEntry)
