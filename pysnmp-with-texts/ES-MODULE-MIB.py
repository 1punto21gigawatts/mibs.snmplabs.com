#
# PySNMP MIB module ES-MODULE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ES-MODULE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:06:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, ModuleIdentity, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, enterprises, Counter64, IpAddress, TimeTicks, Bits, Unsigned32, Integer32, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "enterprises", "Counter64", "IpAddress", "TimeTicks", "Bits", "Unsigned32", "Integer32", "Gauge32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
grandjunction = MibIdentifier((1, 3, 6, 1, 4, 1, 437))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1))
fastLink = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1))
seriesG2xx = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2))
esModuleBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1))
esModuleSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2))
esModuleBasicInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 1))
esModuleCapacity = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleCapacity.setDescription('The esModuleCapacity is the number of expansion slots that are available in the unit. ')
esModuleInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2))
esModuleTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1), )
if mibBuilder.loadTexts: esModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleTable.setDescription('Table of descriptive and status information about the modules.')
esModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1), ).setIndexNames((0, "ES-MODULE-MIB", "esModuleIndex"))
if mibBuilder.loadTexts: esModuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleEntry.setDescription('An entry in the table, containing information about one of the modules.')
esModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleIndex.setDescription('This object identifies the module for which this entry contains information. This value is never greater than esModuleCapacity.')
esModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("enabled", 1), ("disabled-mgmt", 2), ("suspended-linkbeat", 3), ("suspended-jabber", 4), ("suspended-violation", 5), ("disabled-violation", 7), ("suspended-not-present", 9), ("suspended-not-recognized", 10), ("reset", 11), ("suspended-ringdown", 12), ("suspended-stp", 13), ("disabled-self-test", 14), ("enabled-degraded", 15), ("suspended-atm-lane-down", 16), ("suspended-no-vlan", 17), ("disabled-no-vlan", 18), ("suspended-atm-network-down", 19), ("suspended-disl", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleStatus.setDescription('Current operational status of the module. This value is the same as swPortStatus for the corresponding switched port. Possible values are: enabled : normal operation (transmit and receive) disabled-mgmt : disabled by explicit management action suspended-linkbeat : suspended due to absence of linkbeat suspended-jabber : suspended because port is jabbering suspended-violation : suspended due to a secured address violation disabled-violation : disabled due to a secured address violation suspended-not-present: there is no module inserted in the expansion slot. suspended-not-recognized: there is an unrecognized module inserted in the expansion slot. reset : the module is currently in the reset state suspended-ringdown : suspended due to a ring-down condition suspended-stp : Spanning Tree Protocol non forwarding state disabled-self-test : disabled because port fails self-test suspended-atm-lane-down: Non-trunk ATM module using LANE suspended because there is no active LANE client. suspended-no-vlan : the module is not assigned to a VLAN or the assigned VLAN does not exist. disabled-no-vlan : vlan of the module is suspended or does not exist. suspended-atm-network-down: ATM module suspended due to ATM network down, or ATM physical layer down. suspended-disl : suspended while module is negotiating trunking mode using the Dynamic Inter Switch Link protocol. The default value is enabled(1), unless POST has detected a failure on the module switch port, in which case, it is disabled-mgmt(2). Any esModuleStatus of type disabled-xxxx (except disabled-self-test) is saved across a system reset so a module may also come up with such a status.')
esModuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esModuleAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleAdminStatus.setDescription('By explicit management action, change the port status to either enabled : normal status (transmit and receive) disabled-mgmt: port is no longer in use. This value is the same as swPortAdminStatus for the corresponding switched port.')
esModuleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleDescr.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleDescr.setDescription("A text string which includes the full name and version identification of the module's hardware type.")
esModuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleID.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleID.setDescription("A text representation of the Cisco specified identifier for the installed module, or 'notPresent'.")
esModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleVersion.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleVersion.setDescription('The Cisco specified unique identification for the module version, ranging from 1 to 254.')
esModuleObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 7), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleObjectID.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleObjectID.setDescription("The vendor's authoritative identification of the module. This value may be allocated within the SMI enterprises subtree (1.3.6.1.4.1) and provides a straight-forward and unambiguous means for determining what kind of group is being managed. For example, this object could take the value 1.3.6.1.4.1.4242.1.2.14 if vendor 'Flintstones, Inc.' was assigned the subtree 1.3.6.1.4.1.4242, and had assigned the identifier 1.3.6.1.4.1.4242.1.2.14 to its 'Wilma Flintstone 4-Port Fast Ethernet Plug-in Module.'")
esModulePortCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModulePortCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: esModulePortCapacity.setDescription('The number of external port attachments provided by the module.')
esModuleReset = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noReset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esModuleReset.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleReset.setDescription("Setting this object to reset causes the module to be forced into a reset state. The reset state is a module specific condition in which the module's packet operations will cease while the module resets to a known state.")
esModuleLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleLastStatusChange.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleLastStatusChange.setDescription("Contains the value of sysUpTime at the time that the value of the esModuleStatus object for this module last changed. A value of zero indicates that the group's operational status has not changed since the agent last restarted.")
esModuleCollisionPeriods = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleCollisionPeriods.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleCollisionPeriods.setDescription('Contains the count of times the firmware has toggled the front panel module collision LED from the off state to the on state. Successive reads of the counter may network management software an indication of the rate of collision activity, though an actual count of collisions is not available.')
esModuleLinkDisplayMap = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleLinkDisplayMap.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleLinkDisplayMap.setDescription("A bit array where the presence of a particular bit indicates a lit link LED for a module port. Each octet within the value of this object specifies a set of eight link LEDs, with the first octet specifying link LEDs for ports 1 through 8, the second octet specifying link LEDs 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered LED, and the least significant bit represents the highest numbered LED. Thus, each LED is represented by a single bit within the value of this object. If that bit has a value of '1' then that LED is currently lit; the LED is not lit if its bit has a value of '0'.")
esModuleDisabledDisplayMap = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleDisabledDisplayMap.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleDisabledDisplayMap.setDescription("A bit array where the presence of a particular bit indicates a lit disabled LED for a module port. Each octet within the value of this object specifies a set of eight disabled LEDs, with the first octet specifying disabled LEDs for ports 1 through 8, the second octet specifying disabled LEDs 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered LED, and the least significant bit represents the highest numbered LED. Thus, each LED is represented by a single bit within the value of this object. If that bit has a value of '1' then that LED is currently lit; the LED is not lit if its bit has a value of '0'.")
esModuleBroadcastStormBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notBlocked", 1), ("blocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleBroadcastStormBlocked.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleBroadcastStormBlocked.setDescription('The current broadcast forwarding status of this module. If this module is blocked by broadcast storm control, the switch drops all broadcasts received from the module. If the module is a multi-port repeater, broadcast received from a repeater port is forwarded to all the other repeater ports in the same module. The broadcast is not forwarded other switched ports.')
esModuleFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleFirmwareVersion.setDescription("This object returns the version number of the firmware stored in FLASH memory on the module. The string has the format 'v1.00' for the FDDI module. For the ATM module, the string is longer.")
esModuleBOOTCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleBOOTCodeVersion.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleBOOTCodeVersion.setDescription("This object returns the version number of the BOOT code stored in permanent FLASH memory on the module. The string has the format 'v1.00' for the FDDI module. For the ATM module, the string is longer.")
esModuleFlashStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleFlashStatus.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleFlashStatus.setDescription("A string of up to 80 characters indicating the status of the firmware stored in the module's FLASH memory. The string includes the firmware revision, the data and time of the last upgrade, the source of the upgrade, as well as the validity of the firmware. The string is in net ASCII and conforms to one of the following formats: For the FDDI module: For factory installed firmware: ' v1.00 factory installed: valid' For out-of-band upgrades: ' v1.00 written 07-22-1994 08:19:15 from serial terminal: valid' For in-band upgrades: ' v1.00 written 07-22-1994 12:19:15 from 192.009.200.200: invalid' For the ATM module, the formats are similar, but the part of the string containing the version number is longer.")
esModuleResetToFactoryDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esModuleResetToFactoryDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleResetToFactoryDefaults.setDescription("Setting this object to reset(2) will cause the settings on the module to revert to factory defaults. The module will then be reset by the system. The module's packet operations will cease while the module resets to a known state. A read of this object will always return the value noReset(1). Setting this object to noReset(1) has no effect.")
esModuleSwPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleSwPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleSwPortIndex.setDescription('This is the value of swPortIndex object in the STANDALONE-ETHERNET-SWITCH-MIB corresponding to the module.')
esModulePortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3))
esModulePortTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1), )
if mibBuilder.loadTexts: esModulePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: esModulePortTable.setDescription('Table of descriptive and status information about the individual ports in a module.')
esModulePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1, 1), ).setIndexNames((0, "ES-MODULE-MIB", "esModuleSlotIndex"), (0, "ES-MODULE-MIB", "esModulePortIndex"))
if mibBuilder.loadTexts: esModulePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: esModulePortEntry.setDescription('An entry in the table, containing information about one of the repeater ports.')
esModuleSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: esModuleSlotIndex.setDescription('This is the value of esModuleIndex object of the module which this port belongs to. This value is never greater than esModuleCapacity.')
esModulePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModulePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: esModulePortIndex.setDescription('This object identifies the port for which this entry contains information. This value is never greater than esModulePortCapacity.')
esModulePortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esModulePortDescr.setStatus('mandatory')
if mibBuilder.loadTexts: esModulePortDescr.setDescription('A descriptive string of up to 60 characters used by the network administrator to name the port.')
esModulePortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esModulePortAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: esModulePortAdminStatus.setDescription('By explicit management action, change the port status to either enabled : normal status (transmit and receive) disabled : the port neither transmits nor receives. Once disabled, a port must be explicitly enabled to restore operation.')
esModulePortAutoPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notAutoPartitioned", 1), ("autoPartitioned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModulePortAutoPartitionState.setStatus('mandatory')
if mibBuilder.loadTexts: esModulePortAutoPartitionState.setDescription("Indicates whether the port is currently partitioned by the repeater's auto-partition protection.")
esModulePortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("suspended-not-present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModulePortOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: esModulePortOperStatus.setDescription("Indicates the port's operational status. enabled : port is enabled and working notOperational : the port neither transmits nor receives suspended-not-present: the module group is not installed.")
esModulePortLinkbeatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkbeat", 1), ("noLinkbeat", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModulePortLinkbeatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: esModulePortLinkbeatStatus.setDescription("The port's current linkbeat status.")
esModulePortConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("rj45", 2), ("bnc", 3), ("aui", 4), ("fiber-sc", 5), ("fiber-st", 6), ("empty", 7), ("fddi-mic", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModulePortConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: esModulePortConnectorType.setDescription('The connector type for the port. It is one of other : none of the following (unknown) rj45 : common unshielded twisted pair connector bnc : thin-coax (BNC) aui : thick-coax (AUI) fiber-sc : fiber fast ethernet connector fiber-st : fiber fast ethernet connector empty : the port is not installed fddi-mic : FDDI fiber optic connector.')
esModulePortReceivePeriods = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModulePortReceivePeriods.setStatus('mandatory')
if mibBuilder.loadTexts: esModulePortReceivePeriods.setDescription('Contains the count of times the front panel port receive activity LED has been toggled from the off state to the on state. Successive reads of this counter give network management software an indication of receive activity for each individual port, though an actual count of receives per port is not available.')
fmFDDIBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1))
fmFDDICfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1))
fmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1), )
if mibBuilder.loadTexts: fmCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: fmCfgTable.setDescription('Table of configuration and status information about FDDI modules.')
fmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1), ).setIndexNames((0, "ES-MODULE-MIB", "fmCfgIndex"))
if mibBuilder.loadTexts: fmCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fmCfgEntry.setDescription('An entry in the table, containing information about one a FDDI module.')
fmCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fmCfgIndex.setDescription('This object identifies the module for which this entry contains information. This value is never greater than esModuleCapacity.')
fmCfgFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmCfgFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: fmCfgFirmwareVersion.setDescription("This object returns the version number of the firmware stored in FLASH memory on the FDDI module. The string has the format 'v1.00'.")
fmCfgBOOTCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmCfgBOOTCodeVersion.setStatus('mandatory')
if mibBuilder.loadTexts: fmCfgBOOTCodeVersion.setDescription("This object returns the version number of the BOOT code stored in permanent FLASH memory on the FDDI module. The string has the format 'v1.00'.")
fmCfgPOSTResult = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("noFailure", 1), ("prom", 2), ("cpu", 3), ("flash", 4), ("dram", 5), ("arbiter", 6), ("shared-ram", 7), ("ethernet", 8), ("fddi-mac", 9), ("fddi-phy-a", 10), ("fddi-phy-b", 11), ("packet-ram", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmCfgPOSTResult.setStatus('mandatory')
if mibBuilder.loadTexts: fmCfgPOSTResult.setDescription("This object indicates the result of the FDDI module's Power On Self Test (POST). If the module passed POST, this item will return noFailure(1).")
fmCfgPOSTTest = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("noFailure", 1), ("invalid-marker", 2), ("checksum", 3), ("ram-quick-scan", 4), ("ram-byte-test", 5), ("checkerboard", 6), ("arbiter-id", 7), ("read-only-register", 8), ("read-write-register", 9), ("ethernet-interrupt", 10), ("loopback", 11), ("invalid-version", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmCfgPOSTTest.setStatus('mandatory')
if mibBuilder.loadTexts: fmCfgPOSTTest.setDescription('This object indicates the specific test that caused the POST to fail. If the module passed POST, this item will return noFailure(1).')
fmCfgPOSTLoopbackResult = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noFailure", 1), ("cannot-transmit", 2), ("receive-timeout", 3), ("data-mismatch", 4), ("length-mismatch", 5), ("receiver-error", 6), ("buffer-error", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmCfgPOSTLoopbackResult.setStatus('mandatory')
if mibBuilder.loadTexts: fmCfgPOSTLoopbackResult.setDescription('In the event that the FDDI module fails the loopback test during POST, this object will indicate which portion of the test caused the failure. If the value of fmCfgPOSTTest is anything other than loopback(11), this object will have the value noFailure(1).')
fmCfgFlashStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmCfgFlashStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fmCfgFlashStatus.setDescription("A string of up to 80 characters indicating the status of the firmware stored in the FDDI module's FLASH memory. The string includes the firmware revision, the data and time of the last upgrade, the source of the upgrade, as well as the validity of the firmware. The string is in net ASCII and conforms to one of the following formats: For factory installed firmware: ' v1.00 factory installed: valid' For out-of-band upgrades: ' v1.00 written 07-22-1994 08:19:15 from serial terminal: valid' For in-band upgrades: ' v1.00 written 07-22-1994 12:19:15 from 192.009.200.200: invalid'")
fmCfgResetToFactoryDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmCfgResetToFactoryDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: fmCfgResetToFactoryDefaults.setDescription("Setting this object to reset(2) will cause the settings on the FDDI module to revert to factory defaults. The module will then be reset by the system. The module's packet operations will cease while the module resets to a known state.A read of this object will always return the value noReset(1). Setting this object to noReset(1) has no effect.")
fmCfgResetModule = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmCfgResetModule.setStatus('mandatory')
if mibBuilder.loadTexts: fmCfgResetModule.setDescription("Setting this object to reset(2) causes the module to be forced into a reset state. During the reset state, the module's packet operations will cease while the module resets to a known state.")
fmCfgNovellFDDISNAPTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("automatic", 1), ("ethernet-8023", 2), ("ethernet-SNAP", 3), ("ethernet-II", 4), ("drop", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmCfgNovellFDDISNAPTranslation.setStatus('mandatory')
if mibBuilder.loadTexts: fmCfgNovellFDDISNAPTranslation.setDescription('This object specifies the Ethernet frame type that the FDDI module will translate Novell SNAP FDDI frames into. automatic(1): the FDDI module will automatically learn which frame type to use ethernet-8023(2): the FDDI module will convert Novell SNAP FDDI frames to Ethernet 802.3 ethernet-SNAP(3): the FDDI module will convert Novell SNAP FDDI frames to Ethernet SNAP ethernet-II(4): the FDDI module will convert Novell SNAP FDDI frames to Ethernet II drop(5): the FDDI module will not forward Novell SNAP FDDI frames to Ethernet.')
fmCfgUnmatchedSNAPDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("all", 1), ("ethernet-8023", 2), ("ethernet-SNAP", 3), ("ethernet-II", 4), ("drop", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmCfgUnmatchedSNAPDestination.setStatus('mandatory')
if mibBuilder.loadTexts: fmCfgUnmatchedSNAPDestination.setDescription('This object specifies what the FDDI module is to do with Novell SNAP FDDI frames whose destination frame type cannot be determined. The value of this object is only valid when fmCfgNovellFDDISNAPTranslation is set to automatic(1). all(1): the unmatched Novell SNAP FDDI frames will be converted into all three possible frame types. ethernet-8023(2): the unmatched Novell SNAP FDDI frames will be converted into Ethernet 802.3 ethernet-SNAP(3): the unmatched Novell SNAP FDDI frames will be converted into Ethernet SNAP ethernet-II(4): the unmatched Novell SNAP FDDI frames will be converted into Ethernet II drop: the FDDI module will not forward unmatched Novell SNAP FDDI frames to Ethernet.')
fmCfgAuthorizationChecking = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmCfgAuthorizationChecking.setStatus('mandatory')
if mibBuilder.loadTexts: fmCfgAuthorizationChecking.setDescription('This object controls enabling and disabling of authorization string checking by the SMT entity. When enabled, the FDDI module will use the current authorization string to verify SMT requests from remote stations. This item is disabled by default.')
fmCfgAuthorizationString = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmCfgAuthorizationString.setStatus('mandatory')
if mibBuilder.loadTexts: fmCfgAuthorizationString.setDescription('This item specifies the string to be used in the authentication of SMT requests. The length is from 0 to 32 bytes and must be a multiple of 4 bytes. This item is only used when authorization string checking is enabled.')
fmFDDIXlateToEthInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2))
fmXlateToEthTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1), )
if mibBuilder.loadTexts: fmXlateToEthTable.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToEthTable.setDescription('Table of statistics that count the number of frames successfully forwarded from the FDDI module to the switch forwarding engine.')
fmXlateToEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1), ).setIndexNames((0, "ES-MODULE-MIB", "fmXlateToEthIndex"))
if mibBuilder.loadTexts: fmXlateToEthEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToEthEntry.setDescription('An entry in the table, containing information about a FDDI module.')
fmXlateToEthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEthIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToEthIndex.setDescription('This object identifies the module for which this entry contains information. This value is never greater than esModuleCapacity.')
fmXlateToEthNovellSnapToRaw8023Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEthNovellSnapToRaw8023Frames.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToEthNovellSnapToRaw8023Frames.setDescription('This object is a count of the number of Novell SNAP FDDI frames that have been converted to Raw 802.3 Ethernet frames.')
fmXlateToEthNovellSnapToEthIIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEthNovellSnapToEthIIFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToEthNovellSnapToEthIIFrames.setDescription('This object is a count of the number of Novell SNAP FDDI frames that have been converted to Ethernet II frames.')
fmXlateToEthNovellSnapToSnapFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEthNovellSnapToSnapFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToEthNovellSnapToSnapFrames.setDescription('This object is a count of the number of Novell SNAP FDDI frames that have been converted to Novell SNAP Ethernet frames.')
fmXlateToEthAppleTalkSnapToSnapFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEthAppleTalkSnapToSnapFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToEthAppleTalkSnapToSnapFrames.setDescription('This object is a count of the number of AppleTalk SNAP FDDI frames that have been converted to Novell SNAP Ethernet frames.')
fmXlateToEthIpSnapForFragmentationFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEthIpSnapForFragmentationFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToEthIpSnapForFragmentationFrames.setDescription('This object is a count of the number of IP FDDI frames that were fragmented.')
fmXlateToEthIpSnapFragmentedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEthIpSnapFragmentedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToEthIpSnapFragmentedFrames.setDescription('This object is a count of the number of Ethernet frames that were forwarded to the switch forwarding engine as a result of IP fragmentation.')
fmXlateToEthBridgeTunnelToEthIIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEthBridgeTunnelToEthIIFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToEthBridgeTunnelToEthIIFrames.setDescription('This object is a count of the number of Bridge Tunnel FDDI frames that have been converted to Ethernet II frames.')
fmXlateToEthOtherSnapToEthIIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEthOtherSnapToEthIIFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToEthOtherSnapToEthIIFrames.setDescription('This object is a count of the number of SNAP FDDI frames that do not fall into one of the previous SNAP FDDI categories that have been converted to Ethernet II frames.')
fmXlateToEthOtherSnapToSnapFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEthOtherSnapToSnapFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToEthOtherSnapToSnapFrames.setDescription('This object is a count of the number of SNAP FDDI frames that do not fall into one of the previous SNAP FDDI categories that have been converted to Ethernet SNAP frames.')
fmXlateToEth8022To8022Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEth8022To8022Frames.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToEth8022To8022Frames.setDescription('This object is a count of the number of 802.2 FDDI frames that have been converted to Ethernet 802.2 frames.')
fmFDDIXlateToFDDIInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3))
fmXlateToFDDITable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3, 1), )
if mibBuilder.loadTexts: fmXlateToFDDITable.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToFDDITable.setDescription('Table of statistics that count the number of frames successfully forwarded from the switch forwarding engine to the FDDI ring.')
fmXlateToFDDIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3, 1, 1), ).setIndexNames((0, "ES-MODULE-MIB", "fmXlateToFDDIIndex"))
if mibBuilder.loadTexts: fmXlateToFDDIEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToFDDIEntry.setDescription('An entry in the table, containing information about a FDDI module.')
fmXlateToFDDIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToFDDIIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToFDDIIndex.setDescription('This object identifies the module for which this entry contains information. This value is never greater than esModuleCapacity.')
fmXlateToFDDINovellRaw8023ToSnapFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToFDDINovellRaw8023ToSnapFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToFDDINovellRaw8023ToSnapFrames.setDescription('This object is a count of the number of Novell Raw 802.3 Ethernet frames that have been converted to SNAP FDDI frames.')
fmXlateToFDDINovellEthIIToSnapFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToFDDINovellEthIIToSnapFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToFDDINovellEthIIToSnapFrames.setDescription('This object is a count of the number of Ethernet II frames that have been converted to SNAP FDDI frames.')
fmXlateToFDDINovellSnapToSnapFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToFDDINovellSnapToSnapFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToFDDINovellSnapToSnapFrames.setDescription('This object is a count of the number of Novell SNAP Ethernet frames that have been converted to SNAP FDDI frames.')
fmXlateToFDDIEthIIToBridgeTunnelFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToFDDIEthIIToBridgeTunnelFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToFDDIEthIIToBridgeTunnelFrames.setDescription('This object is a count of the number of Ethernet II frames that have been converted to Bridge Tunnel FDDI frames.')
fmXlateToFDDIEthIIToSnapFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToFDDIEthIIToSnapFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToFDDIEthIIToSnapFrames.setDescription('This object is a count of the number of Ethernet II frames that have been converted to SNAP FDDI frames.')
fmXlateToFDDIOtherSnapToSnapFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToFDDIOtherSnapToSnapFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToFDDIOtherSnapToSnapFrames.setDescription('This object is a count of the number of SNAP frames that do not fall into one of the above listed SNAP type categories that have been translated to Ethernet II.')
fmXlateToFDDI8022To8022Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToFDDI8022To8022Frames.setStatus('mandatory')
if mibBuilder.loadTexts: fmXlateToFDDI8022To8022Frames.setDescription('This object is a count of the number of FDDI 802.2 frames that have been converted to Ethernet 802.2 frames.')
fmFDDIFilterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4))
fmFilterTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1), )
if mibBuilder.loadTexts: fmFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: fmFilterTable.setDescription('Table of statistics that count the number of frames that were not forwarded by the FDDI module.')
fmFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1), ).setIndexNames((0, "ES-MODULE-MIB", "fmFilterIndex"))
if mibBuilder.loadTexts: fmFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fmFilterEntry.setDescription('An entry in the table, containing information about a FDDI module.')
fmFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fmFilterIndex.setDescription('This object identifies the module for which this entry contains information. This value is never greater than esModuleCapacity.')
fmFilterFcsInvalidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterFcsInvalidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmFilterFcsInvalidFrames.setDescription('This object is a count of the number of FDDI frames that were not forwarded because the frame contained an invalid FCS.')
fmFilterDataLengthFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterDataLengthFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmFilterDataLengthFrames.setDescription('This object is a count of the number of FDDI frames that were not forwarded because the frame contained an invalid data length.')
fmFilterErrorIndFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterErrorIndFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmFilterErrorIndFrames.setDescription("This object is a count of the number of FDDI frames that were not forwarded because the frame's error indication flag was set.")
fmFilterFddiFifoOverrunFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterFddiFifoOverrunFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmFilterFddiFifoOverrunFrames.setDescription('This object is a count of the number of FDDI frames that were not forwarded because the FDDI FIFO experienced an overflow.')
fmFilterFddiInternalErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterFddiInternalErrorFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmFilterFddiInternalErrorFrames.setDescription('This object is a count of the number of FDDI frames that were not forwarded because the module experienced an internal error.')
fmFilterNoBufferSpaceFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterNoBufferSpaceFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmFilterNoBufferSpaceFrames.setDescription('This object is a count of the number of FDDI frames that were not forwarded because the module did not have sufficient buffer space.')
fmFilterNoEndDelimitFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterNoEndDelimitFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmFilterNoEndDelimitFrames.setDescription('This object is a count of the number of FDDI frames that were not forwarded because the frame did not have a valid end delimiter.')
fmFilterNoLlcHeaderFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterNoLlcHeaderFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmFilterNoLlcHeaderFrames.setDescription('This object is a count of the number of FDDI frames that were not forwarded because the frame did not have a valid LLC header.')
fmFilterSourceRouteFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterSourceRouteFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmFilterSourceRouteFrames.setDescription('The FDDI module does not forward source routing frames. This object is a count of the number of such frames that were filtered.')
fmFilterNoSnapHeaderFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterNoSnapHeaderFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmFilterNoSnapHeaderFrames.setDescription('This object is a count of the number of FDDI frames that were not forwarded because the frame did not have a valid SNAP header.')
fmFilterTooLargeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterTooLargeFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmFilterTooLargeFrames.setDescription('This object is a count of the number of FDDI frames that were not forwarded because the frame was too large.')
fmFilterNovellSnapFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterNovellSnapFilteredFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmFilterNovellSnapFilteredFrames.setDescription('This object is a count of the number of Novell SNAP FDDI frames that were filtered by the module.')
fmFilterCantFragmentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterCantFragmentFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmFilterCantFragmentFrames.setDescription('This object is a count of the number of FDDI IP frames that were not forwarded because the module was unable to fragment the frame.')
fmFilterBadIpHeaderFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterBadIpHeaderFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmFilterBadIpHeaderFrames.setDescription('This object is a count of the number of FDDI frames that were not forwarded because the frame contained an invalid IP header.')
fmFilterRingDownDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterRingDownDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: fmFilterRingDownDiscards.setDescription('This object is a count of the number of FDDI frames that were not forwarded because the FDDI ring was not operational.')
fmFilterNovellOtherFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterNovellOtherFilteredFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmFilterNovellOtherFilteredFrames.setDescription('This object is the sum of the Novell Ethernet frames that were not forwarded because they contained an invalid size field and the number of Novell Ethernet frames that were not forwarded because the FDDI module was configured to filter Novell SNAP FDDI frames.')
fmAtmBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2))
fmAtmCfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 1))
fmAtmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 1, 1), )
if mibBuilder.loadTexts: fmAtmCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: fmAtmCfgTable.setDescription('Table of configuration and status information about ATM modules.')
fmAtmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 1, 1, 1), ).setIndexNames((0, "ES-MODULE-MIB", "fmAtmCfgIndex"))
if mibBuilder.loadTexts: fmAtmCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fmAtmCfgEntry.setDescription('An entry in the table, containing information about one ATM module.')
fmAtmCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fmAtmCfgIndex.setDescription('This object identifies the module for which this entry contains information. This value is never greater than esModuleCapacity.')
fmAtmCfgPOSTResult = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("no-failure", 3), ("fpga", 4), ("shared-memory", 5), ("host-interface", 6), ("ethernet-controller", 7), ("sar-controller", 8), ("sar-memory", 9), ("framer", 10), ("traffic-co-processor", 11), ("traffic-co-processor-memory", 12), ("flash", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmCfgPOSTResult.setStatus('mandatory')
if mibBuilder.loadTexts: fmAtmCfgPOSTResult.setDescription("This object indicates the result of the ATM module's Power On Self Test (POST), that is, which module component, if any, failed POST. If the module passed POST, this item will return no-failure(2).")
fmAtmCfgPOSTTest = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("no-failure", 3), ("refresh", 4), ("quick-scan-word", 5), ("quick-scan-byte", 6), ("byte-pattern", 7), ("checkerboard", 8), ("no-response", 9), ("data-mismatch", 10), ("interrupt", 11), ("control-memory", 12), ("checksum", 13), ("read-only-configuration-register", 14), ("read-write-configuration-register", 15), ("read-only-register", 16), ("read-write-register", 17), ("local-loopback", 18), ("host-loopback", 19), ("module-to-host-interrupt", 20), ("host-to-module-interrupt", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmCfgPOSTTest.setStatus('mandatory')
if mibBuilder.loadTexts: fmAtmCfgPOSTTest.setDescription('This object indicates the specific test that caused the POST to fail. If the ATM module passed POST, this item will return no-failure(2).')
fmAtmCfgPOSTLoopbackResult = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("no-failure", 3), ("cannot-transmit", 4), ("receive-timeout", 5), ("data-mismatch", 6), ("length-mismatch", 7), ("receiver-error", 8), ("buffer-error", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmCfgPOSTLoopbackResult.setStatus('mandatory')
if mibBuilder.loadTexts: fmAtmCfgPOSTLoopbackResult.setDescription('In the event that the ATM module fails a loopback test during POST, this object will indicate which portion of the test caused the failure. If the value of fmAtmCfgPOSTTest is anything other than local-loopback(17) or host-loopback(18) this object will have the value no-failure(2).')
fmAtmCfgFramingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sts-3c", 1), ("stm-1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmCfgFramingMode.setStatus('mandatory')
if mibBuilder.loadTexts: fmAtmCfgFramingMode.setDescription('The mode of operation for the SONET PLIM. The default value is sts-3c(1).')
fmAtmStatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2))
fmAtmRxStatTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2, 1), )
if mibBuilder.loadTexts: fmAtmRxStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: fmAtmRxStatTable.setDescription('Table of receive statistics on ATM modules.')
fmAtmRxStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2, 1, 1), ).setIndexNames((0, "ES-MODULE-MIB", "fmAtmRxStatIndex"))
if mibBuilder.loadTexts: fmAtmRxStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fmAtmRxStatEntry.setDescription('An entry in the table, containing receive statistics about one ATM module.')
fmAtmRxStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmRxStatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fmAtmRxStatIndex.setDescription('This object identifies the module for which this entry contains information. This value is never greater than esModuleCapacity.')
fmAtmRxControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmRxControlFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmAtmRxControlFrames.setDescription('A count of number of AAL5 control frames received by the module.')
fmAtmRxLocalLecFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmRxLocalLecFrames.setStatus('mandatory')
if mibBuilder.loadTexts: fmAtmRxLocalLecFrames.setDescription("A count of AAL5 frames received with LEC ids matching the module's LEC id. These frames are discarded.")
fmAtmRxNoBufferDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmRxNoBufferDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: fmAtmRxNoBufferDiscards.setDescription("A count of AAL5 frames received that were discarded due to a lack of frame buffer resources in the module's forwarding engine.")
fmAtmRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmRxCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: fmAtmRxCRCErrors.setDescription('A count of AAL5 frames received that were discarded due to CRC errors.')
fmAtmRxFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmRxFrameTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: fmAtmRxFrameTooLongs.setDescription('A count of AAL5 frames received that exceed the maximum permitted frame size as defined by ifMtu object the port.')
fmAtmRxOtherDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmRxOtherDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: fmAtmRxOtherDiscards.setDescription("A count of AAL5 frames received that were discarded due to reasons other than a lack of frame buffer resources in the module's forwarding engine, errors, frames exceeding maximum frame size, or frames with LEC id matching the module's LEC id.")
fmAtmRxHecCellErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmRxHecCellErrors.setStatus('mandatory')
if mibBuilder.loadTexts: fmAtmRxHecCellErrors.setDescription('A count of ATM cells received with errors in HEC header.')
mibBuilder.exportSymbols("ES-MODULE-MIB", fastLink=fastLink, fmXlateToEthIndex=fmXlateToEthIndex, fmXlateToFDDIEntry=fmXlateToFDDIEntry, fmAtmCfgFramingMode=fmAtmCfgFramingMode, fmXlateToEthEntry=fmXlateToEthEntry, fmCfgIndex=fmCfgIndex, esModuleInfo=esModuleInfo, fmFilterNoLlcHeaderFrames=fmFilterNoLlcHeaderFrames, fmCfgAuthorizationString=fmCfgAuthorizationString, fmAtmRxFrameTooLongs=fmAtmRxFrameTooLongs, fmXlateToEthTable=fmXlateToEthTable, fmCfgEntry=fmCfgEntry, fmFilterNoBufferSpaceFrames=fmFilterNoBufferSpaceFrames, esModuleLastStatusChange=esModuleLastStatusChange, esModuleLinkDisplayMap=esModuleLinkDisplayMap, esModuleEntry=esModuleEntry, fmFilterNoSnapHeaderFrames=fmFilterNoSnapHeaderFrames, esModuleObjectID=esModuleObjectID, esModulePortLinkbeatStatus=esModulePortLinkbeatStatus, esModuleStatus=esModuleStatus, fmXlateToEthNovellSnapToEthIIFrames=fmXlateToEthNovellSnapToEthIIFrames, fmCfgTable=fmCfgTable, products=products, esModuleDisabledDisplayMap=esModuleDisabledDisplayMap, esModuleSwPortIndex=esModuleSwPortIndex, fmFilterRingDownDiscards=fmFilterRingDownDiscards, fmFilterSourceRouteFrames=fmFilterSourceRouteFrames, esModuleFirmwareVersion=esModuleFirmwareVersion, fmCfgPOSTResult=fmCfgPOSTResult, fmXlateToEthOtherSnapToSnapFrames=fmXlateToEthOtherSnapToSnapFrames, esModulePortReceivePeriods=esModulePortReceivePeriods, fmXlateToEthAppleTalkSnapToSnapFrames=fmXlateToEthAppleTalkSnapToSnapFrames, fmAtmCfgIndex=fmAtmCfgIndex, esModuleAdminStatus=esModuleAdminStatus, fmXlateToEthIpSnapFragmentedFrames=fmXlateToEthIpSnapFragmentedFrames, esModuleTable=esModuleTable, esModuleDescr=esModuleDescr, fmCfgFlashStatus=fmCfgFlashStatus, grandjunction=grandjunction, fmCfgBOOTCodeVersion=fmCfgBOOTCodeVersion, fmXlateToFDDINovellEthIIToSnapFrames=fmXlateToFDDINovellEthIIToSnapFrames, fmXlateToEthBridgeTunnelToEthIIFrames=fmXlateToEthBridgeTunnelToEthIIFrames, esModuleReset=esModuleReset, fmAtmRxStatEntry=fmAtmRxStatEntry, esModuleCollisionPeriods=esModuleCollisionPeriods, esModulePortDescr=esModulePortDescr, seriesG2xx=seriesG2xx, fmXlateToEthNovellSnapToSnapFrames=fmXlateToEthNovellSnapToSnapFrames, fmFilterBadIpHeaderFrames=fmFilterBadIpHeaderFrames, esModuleIndex=esModuleIndex, fmCfgResetToFactoryDefaults=fmCfgResetToFactoryDefaults, fmAtmRxNoBufferDiscards=fmAtmRxNoBufferDiscards, fmFilterFddiInternalErrorFrames=fmFilterFddiInternalErrorFrames, fmFilterNovellSnapFilteredFrames=fmFilterNovellSnapFilteredFrames, fmXlateToEthIpSnapForFragmentationFrames=fmXlateToEthIpSnapForFragmentationFrames, fmFilterNovellOtherFilteredFrames=fmFilterNovellOtherFilteredFrames, fmFDDIXlateToEthInfo=fmFDDIXlateToEthInfo, esModulePortInfo=esModulePortInfo, esModuleID=esModuleID, fmXlateToEthNovellSnapToRaw8023Frames=fmXlateToEthNovellSnapToRaw8023Frames, fmCfgFirmwareVersion=fmCfgFirmwareVersion, fmFDDIFilterInfo=fmFDDIFilterInfo, esModuleSpecific=esModuleSpecific, esModulePortAutoPartitionState=esModulePortAutoPartitionState, fmCfgPOSTLoopbackResult=fmCfgPOSTLoopbackResult, fmFilterFcsInvalidFrames=fmFilterFcsInvalidFrames, fmFilterErrorIndFrames=fmFilterErrorIndFrames, fmAtmRxLocalLecFrames=fmAtmRxLocalLecFrames, fmXlateToFDDIEthIIToSnapFrames=fmXlateToFDDIEthIIToSnapFrames, esModuleCapacity=esModuleCapacity, fmFilterDataLengthFrames=fmFilterDataLengthFrames, fmAtmStatsInfo=fmAtmStatsInfo, fmAtmCfgTable=fmAtmCfgTable, fmFilterTooLargeFrames=fmFilterTooLargeFrames, fmCfgPOSTTest=fmCfgPOSTTest, fmAtmBasic=fmAtmBasic, fmCfgResetModule=fmCfgResetModule, fmAtmRxOtherDiscards=fmAtmRxOtherDiscards, esModulePortIndex=esModulePortIndex, fmAtmRxStatTable=fmAtmRxStatTable, fmAtmRxCRCErrors=fmAtmRxCRCErrors, fmXlateToFDDITable=fmXlateToFDDITable, fmFilterFddiFifoOverrunFrames=fmFilterFddiFifoOverrunFrames, fmAtmRxStatIndex=fmAtmRxStatIndex, esModulePortCapacity=esModulePortCapacity, fmAtmCfgPOSTLoopbackResult=fmAtmCfgPOSTLoopbackResult, fmXlateToFDDIIndex=fmXlateToFDDIIndex, fmFilterNoEndDelimitFrames=fmFilterNoEndDelimitFrames, esModuleSlotIndex=esModuleSlotIndex, esModulePortConnectorType=esModulePortConnectorType, fmFDDIBasic=fmFDDIBasic, esModulePortOperStatus=esModulePortOperStatus, esModuleFlashStatus=esModuleFlashStatus, fmXlateToFDDIEthIIToBridgeTunnelFrames=fmXlateToFDDIEthIIToBridgeTunnelFrames, fmXlateToFDDINovellSnapToSnapFrames=fmXlateToFDDINovellSnapToSnapFrames, esModulePortEntry=esModulePortEntry, fmFDDICfgInfo=fmFDDICfgInfo, esModuleBasic=esModuleBasic, fmXlateToFDDINovellRaw8023ToSnapFrames=fmXlateToFDDINovellRaw8023ToSnapFrames, esModulePortTable=esModulePortTable, esModuleBasicInfo=esModuleBasicInfo, fmXlateToFDDI8022To8022Frames=fmXlateToFDDI8022To8022Frames, fmFilterIndex=fmFilterIndex, fmXlateToFDDIOtherSnapToSnapFrames=fmXlateToFDDIOtherSnapToSnapFrames, esModulePortAdminStatus=esModulePortAdminStatus, fmAtmCfgEntry=fmAtmCfgEntry, fmAtmCfgPOSTTest=fmAtmCfgPOSTTest, fmCfgUnmatchedSNAPDestination=fmCfgUnmatchedSNAPDestination, fmAtmRxControlFrames=fmAtmRxControlFrames, esModuleBroadcastStormBlocked=esModuleBroadcastStormBlocked, fmCfgAuthorizationChecking=fmCfgAuthorizationChecking, fmXlateToEth8022To8022Frames=fmXlateToEth8022To8022Frames, fmFilterTable=fmFilterTable, esModuleVersion=esModuleVersion, fmFDDIXlateToFDDIInfo=fmFDDIXlateToFDDIInfo, fmFilterCantFragmentFrames=fmFilterCantFragmentFrames, fmFilterEntry=fmFilterEntry, fmXlateToEthOtherSnapToEthIIFrames=fmXlateToEthOtherSnapToEthIIFrames, esModuleBOOTCodeVersion=esModuleBOOTCodeVersion, fmCfgNovellFDDISNAPTranslation=fmCfgNovellFDDISNAPTranslation, fmAtmRxHecCellErrors=fmAtmRxHecCellErrors, fmAtmCfgInfo=fmAtmCfgInfo, fmAtmCfgPOSTResult=fmAtmCfgPOSTResult, esModuleResetToFactoryDefaults=esModuleResetToFactoryDefaults)
