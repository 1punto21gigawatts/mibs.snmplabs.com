#
# PySNMP MIB module SONET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:12:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
IpAddress, Integer32, ObjectIdentity, ModuleIdentity, Counter32, Counter64, TimeTicks, iso, transmission, Gauge32, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "ObjectIdentity", "ModuleIdentity", "Counter32", "Counter64", "TimeTicks", "iso", "transmission", "Gauge32", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sonetMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 39))
if mibBuilder.loadTexts: sonetMIB.setLastUpdated('9401030000Z')
if mibBuilder.loadTexts: sonetMIB.setOrganization('IETF AToM MIB Working Group')
if mibBuilder.loadTexts: sonetMIB.setContactInfo(' Tracy Brown Postal: Bell Communications Research 331 Newman Springs Road P.O. Box 7020 Red Bank, NJ 07701-7020 US Tel: +1 908 758 2107 Fax: +1 908 758 4177 E-mail: tacox@mail.bellcore.com Kaj Tesink Postal: Bell Communications Research 331 Newman Springs Road P.O. Box 7020 Red Bank, NJ 07701-7020 US Tel: +1 908 758 5254 Fax: +1 908 758 4196 E-mail: kaj@cc.bellcore.com')
if mibBuilder.loadTexts: sonetMIB.setDescription('The MIB module to describe SONET/SDH interfaces objects.')
sonetObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 39, 1))
sonetObjectsPath = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 39, 2))
sonetObjectsVT = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 39, 3))
sonetMedium = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 39, 1, 1))
sonetSection = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 39, 1, 2))
sonetLine = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 39, 1, 3))
sonetFarEndLine = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 39, 1, 4))
sonetPath = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 39, 2, 1))
sonetFarEndPath = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 39, 2, 2))
sonetVT = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 39, 3, 1))
sonetFarEndVT = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 39, 3, 2))
sonetMediumTable = MibTable((1, 3, 6, 1, 2, 1, 10, 39, 1, 1, 1), )
if mibBuilder.loadTexts: sonetMediumTable.setStatus('current')
if mibBuilder.loadTexts: sonetMediumTable.setDescription('The SONET/SDH Medium table.')
sonetMediumEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 39, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sonetMediumEntry.setStatus('current')
if mibBuilder.loadTexts: sonetMediumEntry.setDescription('An entry in the SONET/SDH Medium table.')
sonetMediumType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetMediumType.setStatus('current')
if mibBuilder.loadTexts: sonetMediumType.setDescription('This variable identifies whether a SONET or a SDH signal is used across this interface.')
sonetMediumTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetMediumTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: sonetMediumTimeElapsed.setDescription('The number of seconds, including partial seconds, that have elapsed since the beginning of the current error-measurement period.')
sonetMediumValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetMediumValidIntervals.setStatus('current')
if mibBuilder.loadTexts: sonetMediumValidIntervals.setDescription('The number of previous intervals for which valid data has been stored. A SONET device must support at least n intervals. The minimum value of n is 4. The default of n is 32. The maximum value of n is 96. The value of this object will be n unless the device was brought online within the last (nx15) minutes, in which case the value will be the number of complete 15 minute intervals the device has been online.')
sonetMediumLineCoding = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sonetMediumOther", 1), ("sonetMediumB3ZS", 2), ("sonetMediumCMI", 3), ("sonetMediumNRZ", 4), ("sonetMediumRZ", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetMediumLineCoding.setStatus('current')
if mibBuilder.loadTexts: sonetMediumLineCoding.setDescription('This variable describes the line coding for this interface. The B3ZS and CMI are used for electrical SONET/SDH signals (STS-1 and STS-3). The Non-Return to Zero (NRZ) and the Return to Zero are used for optical SONET/SDH signals.')
sonetMediumLineType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sonetOther", 1), ("sonetShortSingleMode", 2), ("sonetLongSingleMode", 3), ("sonetMultiMode", 4), ("sonetCoax", 5), ("sonetUTP", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetMediumLineType.setStatus('current')
if mibBuilder.loadTexts: sonetMediumLineType.setDescription('This variable describes the line type for this interface. The line types are Short and Long Range Single Mode fiber or Multi-Mode fiber interfaces, and coax and UTP for electrical interfaces. The value sonetOther should be used when the Line Type is not one of the listed values.')
sonetMediumCircuitIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetMediumCircuitIdentifier.setStatus('current')
if mibBuilder.loadTexts: sonetMediumCircuitIdentifier.setDescription("This variable contains the transmission vendor's circuit identifier, for the purpose of facilitating troubleshooting.")
sonetSectionCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 39, 1, 2, 1), )
if mibBuilder.loadTexts: sonetSectionCurrentTable.setStatus('current')
if mibBuilder.loadTexts: sonetSectionCurrentTable.setDescription('The SONET/SDH Section Current table.')
sonetSectionCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 39, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sonetSectionCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: sonetSectionCurrentEntry.setDescription('An entry in the SONET/SDH Section Current table.')
sonetSectionCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: sonetSectionCurrentStatus.setDescription('This variable indicates the status of the interface. The sonetSectionCurrentStatus is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The sonetSectionNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 sonetSectionNoDefect 2 sonetSectionLOS 4 sonetSectionLOF')
sonetSectionCurrentESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionCurrentESs.setStatus('current')
if mibBuilder.loadTexts: sonetSectionCurrentESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Section in the current 15 minute interval.')
sonetSectionCurrentSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: sonetSectionCurrentSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Section in the current 15 minute interval.')
sonetSectionCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionCurrentSEFSs.setStatus('current')
if mibBuilder.loadTexts: sonetSectionCurrentSEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds encountered by a SONET/SDH Section in the current 15 minute interval.')
sonetSectionCurrentCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionCurrentCVs.setStatus('current')
if mibBuilder.loadTexts: sonetSectionCurrentCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Section in the current 15 minute interval.')
sonetSectionIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 39, 1, 2, 2), )
if mibBuilder.loadTexts: sonetSectionIntervalTable.setStatus('current')
if mibBuilder.loadTexts: sonetSectionIntervalTable.setDescription('The SONET/SDH Section Interval table.')
sonetSectionIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 39, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SONET-MIB", "sonetSectionIntervalNumber"))
if mibBuilder.loadTexts: sonetSectionIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: sonetSectionIntervalEntry.setDescription('An entry in the SONET/SDH Section Interval table.')
sonetSectionIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: sonetSectionIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: sonetSectionIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
sonetSectionIntervalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 2, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionIntervalESs.setStatus('current')
if mibBuilder.loadTexts: sonetSectionIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Section in a particular 15-minute interval in the past 24 hours.')
sonetSectionIntervalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: sonetSectionIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Section in a particular 15-minute interval in the past 24 hours.')
sonetSectionIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionIntervalSEFSs.setStatus('current')
if mibBuilder.loadTexts: sonetSectionIntervalSEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds encountered by a SONET/SDH Section in a particular 15-minute interval in the past 24 hours.')
sonetSectionIntervalCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: sonetSectionIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Section in a particular 15-minute interval in the past 24 hours.')
sonetLineCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 39, 1, 3, 1), )
if mibBuilder.loadTexts: sonetLineCurrentTable.setStatus('current')
if mibBuilder.loadTexts: sonetLineCurrentTable.setDescription('The SONET/SDH Line Current table.')
sonetLineCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 39, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sonetLineCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: sonetLineCurrentEntry.setDescription('An entry in the SONET/SDH Line Current table.')
sonetLineCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: sonetLineCurrentStatus.setDescription('This variable indicates the status of the interface. The sonetLineCurrentStatus is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The sonetLineNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 sonetLineNoDefect 2 sonetLineAIS 4 sonetLineRDI')
sonetLineCurrentESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 3, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCurrentESs.setStatus('current')
if mibBuilder.loadTexts: sonetLineCurrentESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Line in the current 15 minute interval.')
sonetLineCurrentSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 3, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: sonetLineCurrentSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Line in the current 15 minute interval.')
sonetLineCurrentCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 3, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCurrentCVs.setStatus('current')
if mibBuilder.loadTexts: sonetLineCurrentCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Line in the current 15 minute interval.')
sonetLineCurrentUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 3, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: sonetLineCurrentUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a SONET/SDH Line in the current 15 minute interval.')
sonetLineIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 39, 1, 3, 2), )
if mibBuilder.loadTexts: sonetLineIntervalTable.setStatus('current')
if mibBuilder.loadTexts: sonetLineIntervalTable.setDescription('The SONET/SDH Line Interval table.')
sonetLineIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 39, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SONET-MIB", "sonetLineIntervalNumber"))
if mibBuilder.loadTexts: sonetLineIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: sonetLineIntervalEntry.setDescription('An entry in the SONET/SDH Line Interval table.')
sonetLineIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: sonetLineIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: sonetLineIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
sonetLineIntervalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 3, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineIntervalESs.setStatus('current')
if mibBuilder.loadTexts: sonetLineIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Line in a particular 15-minute interval in the past 24 hours.')
sonetLineIntervalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 3, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: sonetLineIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Line in a particular 15-minute interval in the past 24 hours.')
sonetLineIntervalCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 3, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: sonetLineIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Line in a particular 15-minute interval in the past 24 hours.')
sonetLineIntervalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 3, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: sonetLineIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a SONET/SDH Line in a particular 15-minute interval in the past 24 hours.')
sonetFarEndLineCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 39, 1, 4, 1), )
if mibBuilder.loadTexts: sonetFarEndLineCurrentTable.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineCurrentTable.setDescription('The SONET/SDH Far End Line Current table.')
sonetFarEndLineCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 39, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sonetFarEndLineCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineCurrentEntry.setDescription('An entry in the SONET/SDH Far End Line Current table.')
sonetFarEndLineCurrentESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 4, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineCurrentESs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineCurrentESs.setDescription('The counter associated with the number of Far Far End Errored Seconds encountered by a SONET/SDH interface in the current 15 minute interval.')
sonetFarEndLineCurrentSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 4, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineCurrentSESs.setDescription('The counter associated with the number of Far End Severely Errored Seconds encountered by a SONET/SDH Medium/Section/Line interface in the current 15 minute interval.')
sonetFarEndLineCurrentCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 4, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineCurrentCVs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineCurrentCVs.setDescription('The counter associated with the number of Far End Coding Violations reported via the far end block error count encountered by a SONET/SDH Medium/Section/Line interface in the current 15 minute interval.')
sonetFarEndLineCurrentUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 4, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineCurrentUASs.setDescription('The counter associated with the number of Far End Unavailable Seconds encountered by a SONET/SDH Medium/Section/Line interface in the current 15 minute interval.')
sonetFarEndLineIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 39, 1, 4, 2), )
if mibBuilder.loadTexts: sonetFarEndLineIntervalTable.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineIntervalTable.setDescription('The SONET/SDH Far End Line Interval table.')
sonetFarEndLineIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 39, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SONET-MIB", "sonetFarEndLineIntervalNumber"))
if mibBuilder.loadTexts: sonetFarEndLineIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineIntervalEntry.setDescription('An entry in the SONET/SDH Far End Line Interval table.')
sonetFarEndLineIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: sonetFarEndLineIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
sonetFarEndLineIntervalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 4, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineIntervalESs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineIntervalESs.setDescription('The counter associated with the number of Far End Errored Seconds encountered by a SONET/SDH Line interface in a particular 15-minute interval in the past 24 hours.')
sonetFarEndLineIntervalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 4, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineIntervalSESs.setDescription('The counter associated with the number of Far End Severely Errored Seconds encountered by a SONET/SDH Line interface in a particular 15-minute interval in the past 24 hours.')
sonetFarEndLineIntervalCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 4, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineIntervalCVs.setDescription('The counter associated with the number of Far End Coding Violations reported via the far end block error count encountered by a SONET/SDH Line interface in a particular 15-minute interval in the past 24 hours.')
sonetFarEndLineIntervalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 1, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineIntervalUASs.setDescription('The counter associated with the number of Far End Unavailable Seconds encountered by a SONET/SDH Line interface in a particular 15-minute interval in the past 24 hours.')
sonetPathCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 39, 2, 1, 1), )
if mibBuilder.loadTexts: sonetPathCurrentTable.setStatus('current')
if mibBuilder.loadTexts: sonetPathCurrentTable.setDescription('The SONET/SDH Path Current table.')
sonetPathCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 39, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sonetPathCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: sonetPathCurrentEntry.setDescription('An entry in the SONET/SDH Path Current table.')
sonetPathCurrentWidth = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sts1", 1), ("sts3cSTM1", 2), ("sts12cSTM4", 3), ("sts24c", 4), ("sts48cSTM16", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrentWidth.setStatus('current')
if mibBuilder.loadTexts: sonetPathCurrentWidth.setDescription('A value that indicates the type of the SONET/SDH Path. For SONET, the assigned types are the STS-Nc SPEs, where N = 1, 3, 12, 24, and 48. STS-1 is equal to 51.84 Mbps. For SDH, the assigned types are the STM-Nc VCs, where N = 1, 4, and 16.')
sonetPathCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: sonetPathCurrentStatus.setDescription('This variable indicates the status of the interface. The sonetPathCurrentStatus is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The sonetPathNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 sonetPathNoDefect 2 sonetPathSTSLOP 4 sonetPathSTSAIS 8 sonetPathSTSRDI 16 sonetPathUnequipped 32 sonetPathSignalLabelMismatch')
sonetPathCurrentESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 2, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCurrentESs.setStatus('current')
if mibBuilder.loadTexts: sonetPathCurrentESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Path in the current 15 minute interval.')
sonetPathCurrentSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 2, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: sonetPathCurrentSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Path in the current 15 minute interval.')
sonetPathCurrentCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 2, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCurrentCVs.setStatus('current')
if mibBuilder.loadTexts: sonetPathCurrentCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Path in the current 15 minute interval.')
sonetPathCurrentUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 2, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: sonetPathCurrentUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a Path in the current 15 minute, interval.')
sonetPathIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 39, 2, 1, 2), )
if mibBuilder.loadTexts: sonetPathIntervalTable.setStatus('current')
if mibBuilder.loadTexts: sonetPathIntervalTable.setDescription('The SONET/SDH Path Interval table.')
sonetPathIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 39, 2, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SONET-MIB", "sonetPathIntervalNumber"))
if mibBuilder.loadTexts: sonetPathIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: sonetPathIntervalEntry.setDescription('An entry in the SONET/SDH Path Interval table.')
sonetPathIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: sonetPathIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: sonetPathIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
sonetPathIntervalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 2, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathIntervalESs.setStatus('current')
if mibBuilder.loadTexts: sonetPathIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Path in a particular 15-minute interval in the past 24 hours.')
sonetPathIntervalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 2, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: sonetPathIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Path in a particular 15-minute interval in the past 24 hours.')
sonetPathIntervalCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 2, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: sonetPathIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Path in a particular 15-minute interval in the past 24 hours.')
sonetPathIntervalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 2, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: sonetPathIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a Path in a particular 15-minute interval in the past 24 hours.')
sonetFarEndPathCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 39, 2, 2, 1), )
if mibBuilder.loadTexts: sonetFarEndPathCurrentTable.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathCurrentTable.setDescription('The SONET/SDH Far End Path Current table.')
sonetFarEndPathCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 39, 2, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sonetFarEndPathCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathCurrentEntry.setDescription('An entry in the SONET/SDH Far End Path Current table.')
sonetFarEndPathCurrentESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 2, 2, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathCurrentESs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathCurrentESs.setDescription('The counter associated with the number of Far Far End Errored Seconds encountered by a SONET/SDH interface in the current 15 minute interval.')
sonetFarEndPathCurrentSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 2, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathCurrentSESs.setDescription('The counter associated with the number of Far End Severely Errored Seconds encountered by a SONET/SDH Path interface in the current 15 minute interval.')
sonetFarEndPathCurrentCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 2, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathCurrentCVs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathCurrentCVs.setDescription('The counter associated with the number of Far End Coding Violations reported via the far end block error count encountered by a SONET/SDH Path interface in the current 15 minute interval.')
sonetFarEndPathCurrentUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 2, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathCurrentUASs.setDescription('The counter associated with the number of Far End Unavailable Seconds encountered by a SONET/SDH Path interface in the current 15 minute interval.')
sonetFarEndPathIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 39, 2, 2, 2), )
if mibBuilder.loadTexts: sonetFarEndPathIntervalTable.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathIntervalTable.setDescription('The SONET/SDH Far End Path Interval table.')
sonetFarEndPathIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 39, 2, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SONET-MIB", "sonetFarEndPathIntervalNumber"))
if mibBuilder.loadTexts: sonetFarEndPathIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathIntervalEntry.setDescription('An entry in the SONET/SDH Far End Path Interval table.')
sonetFarEndPathIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: sonetFarEndPathIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
sonetFarEndPathIntervalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 2, 2, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathIntervalESs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathIntervalESs.setDescription('The counter associated with the number of Far End Errored Seconds encountered by a SONET/SDH Path interface in a particular 15-minute interval in the past 24 hours.')
sonetFarEndPathIntervalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 2, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathIntervalSESs.setDescription('The counter associated with the number of Far End Severely Errored Seconds encountered by a SONET/SDH Path interface in a particular 15-minute interval in the past 24 hours.')
sonetFarEndPathIntervalCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 2, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathIntervalCVs.setDescription('The counter associated with the number of Far End Coding Violations reported via the far end block error count encountered by a SONET/SDH Path interface in a particular 15-minute interval in the past 24 hours.')
sonetFarEndPathIntervalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 2, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathIntervalUASs.setDescription('The counter associated with the number of Far End Unavailable Seconds encountered by a SONET/SDH Path interface in a particular 15-minute interval in the past 24 hours.')
sonetVTCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 39, 3, 1, 1), )
if mibBuilder.loadTexts: sonetVTCurrentTable.setStatus('current')
if mibBuilder.loadTexts: sonetVTCurrentTable.setDescription('The SONET/SDH VT Current table.')
sonetVTCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 39, 3, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sonetVTCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: sonetVTCurrentEntry.setDescription('An entry in the SONET/SDH VT Current table.')
sonetVTCurrentWidth = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vtWidth15VC11", 1), ("vtWidth2VC12", 2), ("vtWidth3", 3), ("vtWidth6VC2", 4), ("vtWidth6c", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetVTCurrentWidth.setStatus('current')
if mibBuilder.loadTexts: sonetVTCurrentWidth.setDescription('A value that indicates the type of the SONET VT and SDH VC. Assigned widths are VT1.5/VC11, VT2/VC12, VT3, VT6/VC2, and VT6c.')
sonetVTCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetVTCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: sonetVTCurrentStatus.setDescription('This variable indicates the status of the interface. The sonetVTCurrentStatus is a bit map represented as a sum, therefore, it can represent multiple defects and failures simultaneously. The sonetVTNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 sonetVTNoDefect 2 sonetVTLOP 4 sonetVTPathAIS 8 sonetVTPathRDI 16 sonetVTPathRFI 32 sonetVTUnequipped 64 sonetVTSignalLabelMismatch')
sonetVTCurrentESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 3, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetVTCurrentESs.setStatus('current')
if mibBuilder.loadTexts: sonetVTCurrentESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH VT in the current 15 minute interval.')
sonetVTCurrentSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 3, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetVTCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: sonetVTCurrentSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH VT in the current 15 minute interval.')
sonetVTCurrentCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 3, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetVTCurrentCVs.setStatus('current')
if mibBuilder.loadTexts: sonetVTCurrentCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH VT in the current 15 minute interval.')
sonetVTCurrentUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 3, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetVTCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: sonetVTCurrentUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a VT in the current 15 minute, interval.')
sonetVTIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 39, 3, 1, 2), )
if mibBuilder.loadTexts: sonetVTIntervalTable.setStatus('current')
if mibBuilder.loadTexts: sonetVTIntervalTable.setDescription('The SONET/SDH VT Interval table.')
sonetVTIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 39, 3, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SONET-MIB", "sonetVTIntervalNumber"))
if mibBuilder.loadTexts: sonetVTIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: sonetVTIntervalEntry.setDescription('An entry in the SONET/SDH VT Interval table.')
sonetVTIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: sonetVTIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: sonetVTIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
sonetVTIntervalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 3, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetVTIntervalESs.setStatus('current')
if mibBuilder.loadTexts: sonetVTIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH VT in a particular 15-minute interval in the past 24 hours.')
sonetVTIntervalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 3, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetVTIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: sonetVTIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH VT in a particular 15-minute interval in the past 24 hours.')
sonetVTIntervalCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 3, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetVTIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: sonetVTIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH VT in a particular 15-minute interval in the past 24 hours.')
sonetVTIntervalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 3, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetVTIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: sonetVTIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a VT in a particular 15-minute interval in the past 24 hours.')
sonetFarEndVTCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 39, 3, 2, 1), )
if mibBuilder.loadTexts: sonetFarEndVTCurrentTable.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTCurrentTable.setDescription('The SONET/SDH Far End VT Current table.')
sonetFarEndVTCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 39, 3, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sonetFarEndVTCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTCurrentEntry.setDescription('An entry in the SONET/SDH Far End VT Current table.')
sonetFarEndVTCurrentESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 3, 2, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndVTCurrentESs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTCurrentESs.setDescription('The counter associated with the number of Far Far End Errored Seconds encountered by a SONET/SDH interface in the current 15 minute interval.')
sonetFarEndVTCurrentSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 3, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndVTCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTCurrentSESs.setDescription('The counter associated with the number of Far End Severely Errored Seconds encountered by a SONET/SDH VT interface in the current 15 minute interval.')
sonetFarEndVTCurrentCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 3, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndVTCurrentCVs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTCurrentCVs.setDescription('The counter associated with the number of Far End Coding Violations reported via the far end block error count encountered by a SONET/SDH VT interface in the current 15 minute interval.')
sonetFarEndVTCurrentUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 3, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndVTCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTCurrentUASs.setDescription('The counter associated with the number of Far End Unavailable Seconds encountered by a SONET/SDH VT interface in the current 15 minute interval.')
sonetFarEndVTIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 39, 3, 2, 2), )
if mibBuilder.loadTexts: sonetFarEndVTIntervalTable.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTIntervalTable.setDescription('The SONET/SDH Far End VT Interval table.')
sonetFarEndVTIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 39, 3, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SONET-MIB", "sonetFarEndVTIntervalNumber"))
if mibBuilder.loadTexts: sonetFarEndVTIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTIntervalEntry.setDescription('An entry in the SONET/SDH Far End VT Interval table.')
sonetFarEndVTIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: sonetFarEndVTIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
sonetFarEndVTIntervalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 3, 2, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndVTIntervalESs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTIntervalESs.setDescription('The counter associated with the number of Far End Errored Seconds encountered by a SONET/SDH VT interface in a particular 15-minute interval in the past 24 hours.')
sonetFarEndVTIntervalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 3, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndVTIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTIntervalSESs.setDescription('The counter associated with the number of Far End Severely Errored Seconds encountered by a SONET/SDH VT interface in a particular 15-minute interval in the past 24 hours.')
sonetFarEndVTIntervalCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 3, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndVTIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTIntervalCVs.setDescription('The counter associated with the number of Far End Coding Violations reported via the far end block error count encountered by a SONET/SDH VT interface in a particular 15-minute interval in the past 24 hours.')
sonetFarEndVTIntervalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 39, 3, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndVTIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTIntervalUASs.setDescription('The counter associated with the number of Far End Unavailable Seconds encountered by a SONET/SDH VT interface in a particular 15-minute interval in the past 24 hours.')
sonetConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 39, 4))
sonetGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 39, 4, 1))
sonetCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 39, 4, 2))
sonetCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 39, 4, 2, 1)).setObjects(("SONET-MIB", "sonetMediumStuff"), ("SONET-MIB", "sonetSectionStuff"), ("SONET-MIB", "sonetLineStuff"), ("SONET-MIB", "sonetFarEndLineStuff"), ("SONET-MIB", "sonetPathStuff"), ("SONET-MIB", "sonetFarEndPathStuff"), ("SONET-MIB", "sonetVTStuff"), ("SONET-MIB", "sonetFarEndVTStuff"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sonetCompliance = sonetCompliance.setStatus('current')
if mibBuilder.loadTexts: sonetCompliance.setDescription('The compliance statement for SONET/SDH interfaces.')
sonetMediumStuff = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 39, 4, 1, 1)).setObjects(("SONET-MIB", "sonetMediumType"), ("SONET-MIB", "sonetMediumTimeElapsed"), ("SONET-MIB", "sonetMediumValidIntervals"), ("SONET-MIB", "sonetMediumLineCoding"), ("SONET-MIB", "sonetMediumLineType"), ("SONET-MIB", "sonetMediumCircuitIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sonetMediumStuff = sonetMediumStuff.setStatus('current')
if mibBuilder.loadTexts: sonetMediumStuff.setDescription('A collection of objects providing configuration information applicable to all SONET/SDH interfaces.')
sonetSectionStuff = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 39, 4, 1, 2)).setObjects(("SONET-MIB", "sonetSectionCurrentStatus"), ("SONET-MIB", "sonetSectionCurrentESs"), ("SONET-MIB", "sonetSectionCurrentSESs"), ("SONET-MIB", "sonetSectionCurrentSEFSs"), ("SONET-MIB", "sonetSectionCurrentCVs"), ("SONET-MIB", "sonetSectionIntervalESs"), ("SONET-MIB", "sonetSectionIntervalSESs"), ("SONET-MIB", "sonetSectionIntervalSEFSs"), ("SONET-MIB", "sonetSectionIntervalCVs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sonetSectionStuff = sonetSectionStuff.setStatus('current')
if mibBuilder.loadTexts: sonetSectionStuff.setDescription('A collection of objects providing information specific to SONET/SDH Section interfaces.')
sonetLineStuff = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 39, 4, 1, 3)).setObjects(("SONET-MIB", "sonetLineCurrentStatus"), ("SONET-MIB", "sonetLineCurrentESs"), ("SONET-MIB", "sonetLineCurrentSESs"), ("SONET-MIB", "sonetLineCurrentCVs"), ("SONET-MIB", "sonetLineCurrentUASs"), ("SONET-MIB", "sonetLineIntervalESs"), ("SONET-MIB", "sonetLineIntervalSESs"), ("SONET-MIB", "sonetLineIntervalCVs"), ("SONET-MIB", "sonetLineIntervalUASs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sonetLineStuff = sonetLineStuff.setStatus('current')
if mibBuilder.loadTexts: sonetLineStuff.setDescription('A collection of objects providing information specific to SONET/SDH Line interfaces.')
sonetFarEndLineStuff = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 39, 4, 1, 4)).setObjects(("SONET-MIB", "sonetFarEndLineCurrentESs"), ("SONET-MIB", "sonetFarEndLineCurrentSESs"), ("SONET-MIB", "sonetFarEndLineCurrentCVs"), ("SONET-MIB", "sonetFarEndLineCurrentUASs"), ("SONET-MIB", "sonetFarEndLineIntervalESs"), ("SONET-MIB", "sonetFarEndLineIntervalSESs"), ("SONET-MIB", "sonetFarEndLineIntervalCVs"), ("SONET-MIB", "sonetFarEndLineIntervalUASs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sonetFarEndLineStuff = sonetFarEndLineStuff.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndLineStuff.setDescription('A collection of objects providing information specific to SONET/SDH Line interfaces, and maintaining Line Far End information.')
sonetPathStuff = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 39, 4, 1, 5)).setObjects(("SONET-MIB", "sonetPathCurrentWidth"), ("SONET-MIB", "sonetPathCurrentStatus"), ("SONET-MIB", "sonetPathCurrentESs"), ("SONET-MIB", "sonetPathCurrentSESs"), ("SONET-MIB", "sonetPathCurrentCVs"), ("SONET-MIB", "sonetPathCurrentUASs"), ("SONET-MIB", "sonetPathIntervalESs"), ("SONET-MIB", "sonetPathIntervalSESs"), ("SONET-MIB", "sonetPathIntervalCVs"), ("SONET-MIB", "sonetPathIntervalUASs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sonetPathStuff = sonetPathStuff.setStatus('current')
if mibBuilder.loadTexts: sonetPathStuff.setDescription('A collection of objects providing information specific to SONET/SDH Path interfaces.')
sonetFarEndPathStuff = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 39, 4, 1, 6)).setObjects(("SONET-MIB", "sonetFarEndPathCurrentESs"), ("SONET-MIB", "sonetFarEndPathCurrentSESs"), ("SONET-MIB", "sonetFarEndPathCurrentCVs"), ("SONET-MIB", "sonetFarEndPathCurrentUASs"), ("SONET-MIB", "sonetFarEndPathIntervalESs"), ("SONET-MIB", "sonetFarEndPathIntervalSESs"), ("SONET-MIB", "sonetFarEndPathIntervalCVs"), ("SONET-MIB", "sonetFarEndPathIntervalUASs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sonetFarEndPathStuff = sonetFarEndPathStuff.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndPathStuff.setDescription('A collection of objects providing information specific to SONET/SDH Path interfaces, and maintaining Path Far End information.')
sonetVTStuff = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 39, 4, 1, 7)).setObjects(("SONET-MIB", "sonetVTCurrentWidth"), ("SONET-MIB", "sonetVTCurrentStatus"), ("SONET-MIB", "sonetVTCurrentESs"), ("SONET-MIB", "sonetVTCurrentSESs"), ("SONET-MIB", "sonetVTCurrentCVs"), ("SONET-MIB", "sonetVTCurrentUASs"), ("SONET-MIB", "sonetVTIntervalESs"), ("SONET-MIB", "sonetVTIntervalSESs"), ("SONET-MIB", "sonetVTIntervalCVs"), ("SONET-MIB", "sonetVTIntervalUASs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sonetVTStuff = sonetVTStuff.setStatus('current')
if mibBuilder.loadTexts: sonetVTStuff.setDescription('A collection of objects providing information specific to SONET/SDH VT interfaces.')
sonetFarEndVTStuff = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 39, 4, 1, 8)).setObjects(("SONET-MIB", "sonetFarEndVTCurrentESs"), ("SONET-MIB", "sonetFarEndVTCurrentSESs"), ("SONET-MIB", "sonetFarEndVTCurrentCVs"), ("SONET-MIB", "sonetFarEndVTCurrentUASs"), ("SONET-MIB", "sonetFarEndVTIntervalESs"), ("SONET-MIB", "sonetFarEndVTIntervalSESs"), ("SONET-MIB", "sonetFarEndVTIntervalCVs"), ("SONET-MIB", "sonetFarEndVTIntervalUASs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sonetFarEndVTStuff = sonetFarEndVTStuff.setStatus('current')
if mibBuilder.loadTexts: sonetFarEndVTStuff.setDescription('A collection of objects providing information specific to SONET/SDH VT interfaces, and maintaining VT Far End information.')
mibBuilder.exportSymbols("SONET-MIB", sonetMediumEntry=sonetMediumEntry, sonetFarEndVTIntervalSESs=sonetFarEndVTIntervalSESs, sonetFarEndVTCurrentSESs=sonetFarEndVTCurrentSESs, sonetFarEndLineIntervalESs=sonetFarEndLineIntervalESs, sonetFarEndVTCurrentCVs=sonetFarEndVTCurrentCVs, sonetPath=sonetPath, sonetCompliance=sonetCompliance, sonetFarEndVTCurrentESs=sonetFarEndVTCurrentESs, sonetSectionStuff=sonetSectionStuff, sonetVTStuff=sonetVTStuff, sonetMedium=sonetMedium, sonetFarEndLineCurrentSESs=sonetFarEndLineCurrentSESs, sonetMediumTimeElapsed=sonetMediumTimeElapsed, sonetFarEndLineStuff=sonetFarEndLineStuff, sonetPathIntervalUASs=sonetPathIntervalUASs, sonetGroups=sonetGroups, sonetSectionCurrentStatus=sonetSectionCurrentStatus, sonetFarEndPathIntervalTable=sonetFarEndPathIntervalTable, sonetMediumTable=sonetMediumTable, sonetPathStuff=sonetPathStuff, sonetSectionIntervalEntry=sonetSectionIntervalEntry, sonetVTIntervalESs=sonetVTIntervalESs, sonetPathCurrentCVs=sonetPathCurrentCVs, sonetVTCurrentSESs=sonetVTCurrentSESs, sonetVTIntervalTable=sonetVTIntervalTable, sonetLineIntervalEntry=sonetLineIntervalEntry, sonetLineCurrentStatus=sonetLineCurrentStatus, sonetVTIntervalNumber=sonetVTIntervalNumber, sonetFarEndLineIntervalNumber=sonetFarEndLineIntervalNumber, sonetVTCurrentStatus=sonetVTCurrentStatus, sonetFarEndPathCurrentUASs=sonetFarEndPathCurrentUASs, sonetFarEndVTIntervalCVs=sonetFarEndVTIntervalCVs, sonetSectionIntervalSEFSs=sonetSectionIntervalSEFSs, sonetLineIntervalNumber=sonetLineIntervalNumber, sonetFarEndLineCurrentTable=sonetFarEndLineCurrentTable, sonetSectionIntervalCVs=sonetSectionIntervalCVs, sonetFarEndLineCurrentUASs=sonetFarEndLineCurrentUASs, sonetFarEndPathIntervalEntry=sonetFarEndPathIntervalEntry, sonetSectionIntervalTable=sonetSectionIntervalTable, sonetFarEndPathCurrentTable=sonetFarEndPathCurrentTable, sonetFarEndLineCurrentEntry=sonetFarEndLineCurrentEntry, sonetPathCurrentTable=sonetPathCurrentTable, sonetFarEndPathIntervalUASs=sonetFarEndPathIntervalUASs, sonetFarEndVTIntervalEntry=sonetFarEndVTIntervalEntry, sonetFarEndLineIntervalUASs=sonetFarEndLineIntervalUASs, sonetVTIntervalEntry=sonetVTIntervalEntry, sonetLineCurrentTable=sonetLineCurrentTable, sonetMediumLineType=sonetMediumLineType, sonetFarEndPath=sonetFarEndPath, sonetPathIntervalEntry=sonetPathIntervalEntry, sonetFarEndLineIntervalTable=sonetFarEndLineIntervalTable, sonetConformance=sonetConformance, sonetPathIntervalNumber=sonetPathIntervalNumber, sonetLineStuff=sonetLineStuff, sonetFarEndPathIntervalCVs=sonetFarEndPathIntervalCVs, sonetFarEndPathCurrentEntry=sonetFarEndPathCurrentEntry, sonetFarEndVT=sonetFarEndVT, sonetVTCurrentUASs=sonetVTCurrentUASs, sonetFarEndVTStuff=sonetFarEndVTStuff, sonetLineCurrentUASs=sonetLineCurrentUASs, sonetFarEndLine=sonetFarEndLine, sonetSection=sonetSection, sonetPathCurrentStatus=sonetPathCurrentStatus, sonetFarEndLineCurrentESs=sonetFarEndLineCurrentESs, sonetPathIntervalESs=sonetPathIntervalESs, sonetMediumLineCoding=sonetMediumLineCoding, sonetFarEndPathIntervalESs=sonetFarEndPathIntervalESs, sonetFarEndPathCurrentCVs=sonetFarEndPathCurrentCVs, sonetFarEndVTIntervalESs=sonetFarEndVTIntervalESs, sonetObjectsPath=sonetObjectsPath, sonetPathIntervalTable=sonetPathIntervalTable, sonetVTCurrentCVs=sonetVTCurrentCVs, sonetMediumType=sonetMediumType, sonetSectionIntervalSESs=sonetSectionIntervalSESs, sonetLineIntervalCVs=sonetLineIntervalCVs, sonetFarEndVTCurrentTable=sonetFarEndVTCurrentTable, sonetPathCurrentUASs=sonetPathCurrentUASs, sonetVTCurrentTable=sonetVTCurrentTable, sonetLineCurrentESs=sonetLineCurrentESs, sonetLineIntervalUASs=sonetLineIntervalUASs, sonetPathCurrentESs=sonetPathCurrentESs, sonetCompliances=sonetCompliances, sonetFarEndPathCurrentSESs=sonetFarEndPathCurrentSESs, sonetSectionCurrentSESs=sonetSectionCurrentSESs, sonetPathIntervalCVs=sonetPathIntervalCVs, sonetSectionCurrentEntry=sonetSectionCurrentEntry, sonetSectionIntervalESs=sonetSectionIntervalESs, sonetMediumCircuitIdentifier=sonetMediumCircuitIdentifier, sonetVT=sonetVT, sonetVTCurrentEntry=sonetVTCurrentEntry, sonetFarEndPathStuff=sonetFarEndPathStuff, sonetLineIntervalESs=sonetLineIntervalESs, sonetVTCurrentESs=sonetVTCurrentESs, sonetSectionCurrentCVs=sonetSectionCurrentCVs, sonetMIB=sonetMIB, sonetPathCurrentWidth=sonetPathCurrentWidth, sonetFarEndVTCurrentUASs=sonetFarEndVTCurrentUASs, sonetFarEndLineIntervalEntry=sonetFarEndLineIntervalEntry, sonetFarEndVTCurrentEntry=sonetFarEndVTCurrentEntry, sonetPathCurrentEntry=sonetPathCurrentEntry, sonetSectionCurrentSEFSs=sonetSectionCurrentSEFSs, sonetFarEndVTIntervalTable=sonetFarEndVTIntervalTable, sonetFarEndLineIntervalCVs=sonetFarEndLineIntervalCVs, sonetVTIntervalUASs=sonetVTIntervalUASs, sonetFarEndPathIntervalNumber=sonetFarEndPathIntervalNumber, sonetMediumValidIntervals=sonetMediumValidIntervals, sonetLine=sonetLine, sonetObjectsVT=sonetObjectsVT, sonetSectionCurrentESs=sonetSectionCurrentESs, sonetLineCurrentCVs=sonetLineCurrentCVs, sonetFarEndLineCurrentCVs=sonetFarEndLineCurrentCVs, sonetLineIntervalTable=sonetLineIntervalTable, sonetPathIntervalSESs=sonetPathIntervalSESs, sonetVTIntervalSESs=sonetVTIntervalSESs, sonetLineCurrentSESs=sonetLineCurrentSESs, sonetObjects=sonetObjects, sonetVTCurrentWidth=sonetVTCurrentWidth, sonetFarEndPathCurrentESs=sonetFarEndPathCurrentESs, sonetMediumStuff=sonetMediumStuff, sonetLineIntervalSESs=sonetLineIntervalSESs, sonetSectionIntervalNumber=sonetSectionIntervalNumber, sonetFarEndVTIntervalNumber=sonetFarEndVTIntervalNumber, sonetFarEndVTIntervalUASs=sonetFarEndVTIntervalUASs, sonetFarEndLineIntervalSESs=sonetFarEndLineIntervalSESs, sonetPathCurrentSESs=sonetPathCurrentSESs, PYSNMP_MODULE_ID=sonetMIB, sonetSectionCurrentTable=sonetSectionCurrentTable, sonetVTIntervalCVs=sonetVTIntervalCVs, sonetFarEndPathIntervalSESs=sonetFarEndPathIntervalSESs, sonetLineCurrentEntry=sonetLineCurrentEntry)
