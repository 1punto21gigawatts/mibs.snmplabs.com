#
# PySNMP MIB module CISCO-MGX82XX-ENVMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MGX82XX-ENVMON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:07:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
basisAsm, = mibBuilder.importSymbols("BASIS-MIB", "basisAsm")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
iso, Gauge32, Counter64, MibIdentifier, ObjectIdentity, TimeTicks, IpAddress, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "Counter64", "MibIdentifier", "ObjectIdentity", "TimeTicks", "IpAddress", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "Counter32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoMgx82xxEnvmonMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 70))
ciscoMgx82xxEnvmonMIB.setRevisions(('2003-04-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoMgx82xxEnvmonMIB.setRevisionsDescriptions(('Initial version of the MIB. The content of this MIB was originally available in CISCO-WAN-AXIPOP-MIB defined using SMIv1. The applicable objects from CISCO-WAN-AXIPOP-MIB are defined using SMIv2 in this MIB. Also the descriptions of some of the objects have been modified.',))
if mibBuilder.loadTexts: ciscoMgx82xxEnvmonMIB.setLastUpdated('200304170000Z')
if mibBuilder.loadTexts: ciscoMgx82xxEnvmonMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoMgx82xxEnvmonMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoMgx82xxEnvmonMIB.setDescription('The MIB module to describe the status of the Environmental Monitoring devices in MGX82xx products.')
asmAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1), )
if mibBuilder.loadTexts: asmAlarmTable.setStatus('current')
if mibBuilder.loadTexts: asmAlarmTable.setDescription('The ASM Alarm table. The table size is given by the value of ASMNumOfValidEntries.')
asmAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-ENVMON-MIB", "asmAlarmNum"))
if mibBuilder.loadTexts: asmAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: asmAlarmEntry.setDescription('An entry in the Basis ASM Alarm Table.')
asmAlarmNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmAlarmNum.setStatus('current')
if mibBuilder.loadTexts: asmAlarmNum.setDescription('This object is the identifier of a ASM alarm entry. The Alarm is further identified by the objects ASMAlarmType & ASMAlarmUnitNum.')
asmAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("alarmOther", 1), ("alarmTemperature", 2), ("alarmPSU", 3), ("alarmDCLevel", 4), ("alarmFanUnit", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmAlarmType.setStatus('current')
if mibBuilder.loadTexts: asmAlarmType.setDescription('The value for this object indicates the type of device for which alarm is applicable. The possible values are : alarmOther (1) : Other than specified below alarmTemperature(2) : Temperature sensor alarmPSU (3) : Power Supply Unit alarmDCLevel (4) : DC Level Sensor alarmFanUnit (5) : FAN speed sensor.')
asmAlarmUnitNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmAlarmUnitNum.setStatus('current')
if mibBuilder.loadTexts: asmAlarmUnitNum.setDescription('This object identifies one unit among a number of identical units represented in this table having the same asmAlarmType.')
asmAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: asmAlarmThreshold.setDescription('This object specifies the threshold beyond which the alarmable unit is said to be in an abnormal state.')
asmAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarmMinor", 1), ("alarmMajor", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: asmAlarmSeverity.setDescription('This variable specifies the severity of the alarm to be declared when the asmAlarmThreshold specified is exceeded.')
asmUnitMeasurable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmUnitMeasurable.setStatus('current')
if mibBuilder.loadTexts: asmUnitMeasurable.setDescription('This object indicates if the alarm unit is measurable by the switch/system.')
asmUnitMeasuredValue = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmUnitMeasuredValue.setStatus('current')
if mibBuilder.loadTexts: asmUnitMeasuredValue.setDescription("This object gives the measured value of the entity addressed by asmAlarmNum. The value in this object is valid only if asmUnitMeasurable is set to 'yes'. This object contains value zero for asmUnitMeasurable value of 'no'.")
asmPhysicalAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmPhysicalAlarmState.setStatus('current')
if mibBuilder.loadTexts: asmPhysicalAlarmState.setDescription('This object indicates the status of the ASM alarm represented in this entry. It is a bitmap where a set bit indicates an abnormal condition. A reset bit signifies normal operation.')
asmClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("asmAlarmNoAction", 1), ("asmAlarmClear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asmClrButton.setStatus('current')
if mibBuilder.loadTexts: asmClrButton.setDescription('This object when set to asmAlarmClear(2),causes the alarm to be cleared.')
asmNumOfValidEntries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmNumOfValidEntries.setStatus('current')
if mibBuilder.loadTexts: asmNumOfValidEntries.setDescription('The number of valid asmAlarmTable entries (regardless of how many are actually configured) in the table.')
asmShelfAlarmState = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarmOff", 1), ("alarmOn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmShelfAlarmState.setStatus('current')
if mibBuilder.loadTexts: asmShelfAlarmState.setDescription('This object indicates whether any Shelf/Node Alarm has been declared in the system.')
cmEnvmonMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 70, 2))
cmEnvmonMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 70, 2, 1))
cmEnvmonMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 70, 2, 2))
cmEnvmonCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 70, 2, 2, 1)).setObjects(("CISCO-MGX82XX-ENVMON-MIB", "cmEnvmonInfoGroup"), ("CISCO-MGX82XX-ENVMON-MIB", "cmEnvmonGeneralGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEnvmonCompliance = cmEnvmonCompliance.setStatus('current')
if mibBuilder.loadTexts: cmEnvmonCompliance.setDescription('The compliance statement for objects related to MGX82xx Environmental monitoring MIB.')
cmEnvmonInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 70, 2, 1, 1)).setObjects(("CISCO-MGX82XX-ENVMON-MIB", "asmAlarmNum"), ("CISCO-MGX82XX-ENVMON-MIB", "asmAlarmType"), ("CISCO-MGX82XX-ENVMON-MIB", "asmAlarmUnitNum"), ("CISCO-MGX82XX-ENVMON-MIB", "asmAlarmThreshold"), ("CISCO-MGX82XX-ENVMON-MIB", "asmAlarmSeverity"), ("CISCO-MGX82XX-ENVMON-MIB", "asmUnitMeasurable"), ("CISCO-MGX82XX-ENVMON-MIB", "asmUnitMeasuredValue"), ("CISCO-MGX82XX-ENVMON-MIB", "asmPhysicalAlarmState"), ("CISCO-MGX82XX-ENVMON-MIB", "asmClrButton"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEnvmonInfoGroup = cmEnvmonInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cmEnvmonInfoGroup.setDescription('The collection of objects which are used for providing information on environmental monitoring devices.')
cmEnvmonGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 70, 2, 1, 2)).setObjects(("CISCO-MGX82XX-ENVMON-MIB", "asmNumOfValidEntries"), ("CISCO-MGX82XX-ENVMON-MIB", "asmShelfAlarmState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEnvmonGeneralGroup = cmEnvmonGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: cmEnvmonGeneralGroup.setDescription('The collection of objects which are used for providing information on shelf level objects related to environmental monitoring devices.')
mibBuilder.exportSymbols("CISCO-MGX82XX-ENVMON-MIB", asmNumOfValidEntries=asmNumOfValidEntries, asmAlarmEntry=asmAlarmEntry, cmEnvmonInfoGroup=cmEnvmonInfoGroup, asmAlarmType=asmAlarmType, asmUnitMeasurable=asmUnitMeasurable, asmAlarmUnitNum=asmAlarmUnitNum, asmAlarmTable=asmAlarmTable, asmShelfAlarmState=asmShelfAlarmState, asmPhysicalAlarmState=asmPhysicalAlarmState, asmUnitMeasuredValue=asmUnitMeasuredValue, asmAlarmNum=asmAlarmNum, asmAlarmSeverity=asmAlarmSeverity, PYSNMP_MODULE_ID=ciscoMgx82xxEnvmonMIB, cmEnvmonMIBConformance=cmEnvmonMIBConformance, asmAlarmThreshold=asmAlarmThreshold, asmClrButton=asmClrButton, cmEnvmonGeneralGroup=cmEnvmonGeneralGroup, cmEnvmonMIBGroups=cmEnvmonMIBGroups, cmEnvmonCompliance=cmEnvmonCompliance, cmEnvmonMIBCompliances=cmEnvmonMIBCompliances, ciscoMgx82xxEnvmonMIB=ciscoMgx82xxEnvmonMIB)
