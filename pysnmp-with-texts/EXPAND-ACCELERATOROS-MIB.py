#
# PySNMP MIB module EXPAND-ACCELERATOROS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EXPAND-ACCELERATOROS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:07:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
acceleratorOs, = mibBuilder.importSymbols("EXPAND-NETWORKS-SMI", "acceleratorOs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, iso, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, NotificationType, Unsigned32, ModuleIdentity, Gauge32, Integer32, Counter32, Bits, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "NotificationType", "Unsigned32", "ModuleIdentity", "Gauge32", "Integer32", "Counter32", "Bits", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
accProductId = MibScalar((1, 3, 6, 1, 4, 1, 3405, 3, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accProductId.setStatus('mandatory')
if mibBuilder.loadTexts: accProductId.setDescription('This object identifier defines the object identifiers that are assigned to the various Expand-Networks products, and hence is assign to the outgoing traps.')
accSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3405, 3, 2))
accSysUpTime = MibScalar((1, 3, 6, 1, 4, 1, 3405, 3, 2, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accSysUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: accSysUpTime.setDescription('The time (in hundredths of a second) since the network management portion of the system was last re-initialized. The value is the same as in sysUpTime leaf in MIB 2.')
accSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 3405, 3, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: accSoftwareVersion.setDescription('Product software version.')
accSysHostName = MibScalar((1, 3, 6, 1, 4, 1, 3405, 3, 2, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accSysHostName.setStatus('mandatory')
if mibBuilder.loadTexts: accSysHostName.setDescription('An administratively-assigned name for this managed node, the value is the same as in sysName leaf in MIB 2.')
accSysLocation = MibScalar((1, 3, 6, 1, 4, 1, 3405, 3, 2, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accSysLocation.setStatus('mandatory')
if mibBuilder.loadTexts: accSysLocation.setDescription('The physical location of this node, the value is the same as in sysLocation leaf in MIB 2.')
accSysContact = MibScalar((1, 3, 6, 1, 4, 1, 3405, 3, 2, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accSysContact.setStatus('mandatory')
if mibBuilder.loadTexts: accSysContact.setDescription('The textual identification of the contact person for this managed node, together with information on how to contact this person. The value is the same as in sysContact leaf in MIB 2. ')
accSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3405, 3, 2, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: accSerialNumber.setDescription('ACCELERATOR serial number.')
accPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3405, 3, 3))
accHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 3405, 3, 3, 1))
accCpu = MibIdentifier((1, 3, 6, 1, 4, 1, 3405, 3, 3, 1, 1))
accCpuTotalEntries = MibScalar((1, 3, 6, 1, 4, 1, 3405, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accCpuTotalEntries.setStatus('mandatory')
if mibBuilder.loadTexts: accCpuTotalEntries.setDescription('The number of Central Processing Units present on this system.')
accCpuTable = MibTable((1, 3, 6, 1, 4, 1, 3405, 3, 3, 1, 1, 2), )
if mibBuilder.loadTexts: accCpuTable.setStatus('mandatory')
if mibBuilder.loadTexts: accCpuTable.setDescription('A list of cpu entries. The number of entries is given by the value of cpuTotalEntries.')
accCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3405, 3, 3, 1, 1, 2, 1), ).setIndexNames((0, "EXPAND-ACCELERATOROS-MIB", "accCpuIndex"))
if mibBuilder.loadTexts: accCpuEntry.setStatus('mandatory')
if mibBuilder.loadTexts: accCpuEntry.setDescription('A cpu entry containing objects for a particular cpu.')
accCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 3, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accCpuIndex.setStatus('mandatory')
if mibBuilder.loadTexts: accCpuIndex.setDescription('A unique value for each cpu.')
accCpuDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 3, 1, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accCpuDesc.setStatus('mandatory')
if mibBuilder.loadTexts: accCpuDesc.setDescription('A textual string containing information about the cpu.')
accCpuUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 3, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accCpuUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: accCpuUtilization.setDescription('Utilization per cpu in percentage. ')
accSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 3405, 3, 3, 2))
accBuffer = MibIdentifier((1, 3, 6, 1, 4, 1, 3405, 3, 3, 2, 1))
accSystemWide = MibScalar((1, 3, 6, 1, 4, 1, 3405, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accSystemWide.setStatus('mandatory')
if mibBuilder.loadTexts: accSystemWide.setDescription('Buffer utilization system-wide in percentage. ')
accInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 3405, 3, 4))
accInterfaceTotalEntries = MibScalar((1, 3, 6, 1, 4, 1, 3405, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceTotalEntries.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceTotalEntries.setDescription('The number of network interfaces and sub-interfaces present on this system.')
accInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2), )
if mibBuilder.loadTexts: accInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceTable.setDescription('A list of interface entries. The number of entries is given by the value of interfaceTotalEntries.')
accInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1), ).setIndexNames((0, "EXPAND-ACCELERATOROS-MIB", "accInterfaceIndex"))
if mibBuilder.loadTexts: accInterfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceEntry.setDescription('An interface entry containing objects at the subnetwork layer and below for a particular interface or sub-interface.')
accInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceIndex.setDescription('A unique value for each interface or sub interface. ')
accInterfaceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceDescription.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceDescription.setDescription('A textual string containing information about the interface. This string should include the name of the manufacturer, the product name and the version of the hardware interface.')
accInterfaceEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("ppp", 2), ("hdlc-cisco", 3), ("frame-relay-ietf", 4), ("frame-relay-cisco", 5), ("lapb-8", 6), ("lapb-128", 7), ("ethernet", 8), ("expand-special", 9), ("raw-hdlc", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceEncapsulation.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceEncapsulation.setDescription('The type of interface, distinguished according to the network layer. ')
accInterfaceFrameRelayDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceFrameRelayDlci.setStatus('mandatory')
accInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("rs-232", 2), ("rs-422", 3), ("rs-449", 4), ("rs-530", 5), ("v-35", 6), ("x-21", 7), ("e1", 8), ("t1", 9), ("cable", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceType.setDescription('The type of interface, distinguished according to the physical connection.')
accInterfaceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceOperStatus.setDescription('The current operational state of the interface. The testing(3) state indicates that no operational packets can be passed.')
accInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceAdminStatus.setDescription('The desired state of the interface. The testing(3) state indicates that no operational packets can be passed.')
accInterfaceMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceMtu.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceMtu.setDescription('The size of the largest datagram which can be sent/received on the interface, specified in octets. For interfaces that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the interface.')
accInterfaceSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceSpeed.setDescription("An estimate of the interface's current bandwidth in bits per second. For interfaces which do not vary in bandwidth or for those where no accurate estimation can be made, this object should contain the nominal bandwidth.")
accInterfaceOutQlength = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceOutQlength.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceOutQlength.setDescription('The length of the output packet queue (in packets).')
accInterfaceBufferUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceBufferUtil.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceBufferUtil.setDescription('Buffer utilization per sub/interface in percentage.')
accInterfaceAccelerationAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceAccelerationAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceAccelerationAdminStatus.setDescription('The desired state of Acceleration for this interface.')
accInterfaceQueuingStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fifo", 1), ("wfq", 2), ("priority", 3), ("custom", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceQueuingStrategy.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceQueuingStrategy.setDescription('Interface queuing strategy.')
accInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceIpAddress.setDescription('IP address assigned to this interface.')
accInterfaceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceIpMask.setDescription('Subnet mask for the interface IP address.')
accInterfaceChunkSizeMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceChunkSizeMethod.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceChunkSizeMethod.setDescription('Method used to determine DRC chunk size.')
accInterfaceChunkSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceChunkSize.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceChunkSize.setDescription('DRC chunk size setting for this interface.')
accInterfaceDrcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("semi", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceDrcMode.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceDrcMode.setDescription('Drop Recovery operation mode.')
accInterfaceKeepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceKeepAliveInterval.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceKeepAliveInterval.setDescription('Frequency (in seconds) of keepalive packets sent.')
accInterfaceKeepAliveIterations = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceKeepAliveIterations.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceKeepAliveIterations.setDescription('Number of subsequent keepalives that the system may loose before dropping connection.')
accInterfaceProbe = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceProbe.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceProbe.setDescription('Frequency (in seconds) of probe packets sent.')
accInterfaceInboundStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-connected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceInboundStatus.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceInboundStatus.setDescription('Inbound direction actual synchronization status.')
accInterfaceInboundCore = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceInboundCore.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceInboundCore.setDescription('Number of Cores used to Accelerate inbound traffic.')
accInterfaceOutboundStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-connected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceOutboundStatus.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceOutboundStatus.setDescription('Outbound direction actual synchronization status.')
accInterfaceOutboundCore = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceOutboundCore.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceOutboundCore.setDescription('Number of Cores used to Accelerate outbound traffic.')
accInterfaceTransmitDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("duplex", 1), ("simplex-receive", 2), ("simplex-transmit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceTransmitDirection.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceTransmitDirection.setDescription('Interface transmit direction.')
accInterfacePerformancePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformancePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfacePerformancePeriod.setDescription('Sampling period of the Acceleration percentage counters.')
accInterfacePerformanceInAccelerationUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceInAccelerationUp.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfacePerformanceInAccelerationUp.setDescription('Inbound traffic Acceleration percentage since system power-up.')
accInterfacePerformanceInAccelerationClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceInAccelerationClear.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfacePerformanceInAccelerationClear.setDescription('Inbound traffic Acceleration percentage since counters were last cleared.')
accInterfacePerformanceInAccelerationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceInAccelerationPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfacePerformanceInAccelerationPeriod.setDescription('Inbound traffic Acceleration percentage during last sampling period.')
accInterfacePerformanceOutAccelerationUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceOutAccelerationUp.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfacePerformanceOutAccelerationUp.setDescription('Outbound traffic Acceleration percentage since system power-up.')
accInterfacePerformanceOutAccelerationClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceOutAccelerationClear.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfacePerformanceOutAccelerationClear.setDescription('Outbound traffic Acceleration percentage since counters were last cleared.')
accInterfacePerformanceOutAccelerationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceOutAccelerationPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfacePerformanceOutAccelerationPeriod.setDescription('Outbound traffic Acceleration percentage during last sampling period.')
accInterfacePerformanceDrcResetsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceDrcResetsUp.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfacePerformanceDrcResetsUp.setDescription('Number of times the DRC module had to reset since system power-up.')
accInterfacePerformanceDrcResetsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceDrcResetsClear.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfacePerformanceDrcResetsClear.setDescription('Number of times the DRC module had to reset since counters were last cleared.')
accInterfacePerformanceDrcResetsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceDrcResetsPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfacePerformanceDrcResetsPeriod.setDescription('Number of times the DRC module had to reset during last sampling period. ')
accInterfacePerformanceLostPacketsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceLostPacketsUp.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfacePerformanceLostPacketsUp.setDescription('Number of packets lost on the Accelerated link since system power-up.')
accInterfacePerformanceLostPacketsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceLostPacketsClear.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfacePerformanceLostPacketsClear.setDescription('Number of packets lost on the Accelerated link since counters were last cleared.')
accInterfacePerformanceLostPacketsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceLostPacketsPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfacePerformanceLostPacketsPeriod.setDescription('Number of packets lost on the Accelerated link during last sampling period. ')
accInterfacePerformanceRetransmitPacketsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceRetransmitPacketsUp.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfacePerformanceRetransmitPacketsUp.setDescription('Number of packets retransmitted by the DRC mechanism on the Accelerated link, since system power-up. ')
accInterfacePerformanceRetransmitPacketsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceRetransmitPacketsClear.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfacePerformanceRetransmitPacketsClear.setDescription('Number of packets retransmitted by the DRC mechanism on the Accelerated link, since counters were last cleared.')
accInterfacePerformanceRetransmitPacketsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceRetransmitPacketsPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfacePerformanceRetransmitPacketsPeriod.setDescription('Number of packets retransmitted by the DRC mechanism on the Accelerated link, during last sampling period.')
accInterfacePerformanceRecoveredPacketsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfacePerformanceRecoveredPacketsUp.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfacePerformanceRecoveredPacketsUp.setDescription('Number of packets recovered by the DRC mechanism on the Accelerated link, since system power-up. ')
accInterfacePerformanceRecoveredPacketsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 45), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accInterfacePerformanceRecoveredPacketsClear.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfacePerformanceRecoveredPacketsClear.setDescription('Number of packets recovered by the DRC mechanism on the Accelerated link, since counters were last cleared.')
accInterfacePerformanceRecoveredPacketsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 46), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accInterfacePerformanceRecoveredPacketsPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfacePerformanceRecoveredPacketsPeriod.setDescription('Number of packets recovered by the DRC mechanism on the Accelerated link, during last sampling period.')
accInterfaceThroughputPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputPeriod.setDescription('Sampling period of the interface throughput counters.')
accInterfaceThroughputCrcErrUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputCrcErrUp.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputCrcErrUp.setDescription('Number of inbound packets with CRC errors, since system power-up.')
accInterfaceThroughputCrcErrClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputCrcErrClear.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputCrcErrClear.setDescription('Number of inbound packets with CRC errors, since counters were last cleared.')
accInterfaceThroughputCrcErrPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputCrcErrPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputCrcErrPeriod.setDescription('Number of inbound packets with CRC errors, during last sampling period.')
accInterfaceThroughputDropByteUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputDropByteUp.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputDropByteUp.setDescription('Total number of data bytes in outbound packets that were discarded on the interface due to congestion, since system power-up.')
accInterfaceThroughputDropByteClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputDropByteClear.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputDropByteClear.setDescription('Total number of data bytes in outbound packets that were discarded on the interface due to congestion, since counters were last cleared.')
accInterfaceThroughputDropBytePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputDropBytePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputDropBytePeriod.setDescription('Total number of data bytes in outbound packets that were discarded on the interface due to congestion, during last sampling period.')
accInterfaceThroughputDropPacketsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputDropPacketsUp.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputDropPacketsUp.setDescription('Number of outbound packets discarded on the interface due to congestion, since system power-up.')
accInterfaceThroughputDropPacketsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputDropPacketsClear.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputDropPacketsClear.setDescription('Number of outbound packets discarded on the interface due to congestion, since counters were last cleared.')
accInterfaceThroughputDropPacketsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputDropPacketsPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputDropPacketsPeriod.setDescription('Number of outbound packets discarded on the interface due to congestion, during last sampling period.')
accInterfaceThroughputInBytesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputInBytesUp.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputInBytesUp.setDescription('Total number of bytes in packets received on the interface since system power-up.')
accInterfaceThroughputInBytesClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputInBytesClear.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputInBytesClear.setDescription('Total number of bytes in packets received on the interface since counters were last cleared.')
accInterfaceThroughputInBytesPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputInBytesPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputInBytesPeriod.setDescription('Throughput in kilobit per second over the last sampling period.')
accInterfaceThroughputInPacketsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputInPacketsUp.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputInPacketsUp.setDescription('Total number of packets received on the interface since system power-up.')
accInterfaceThroughputInPacketsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputInPacketsClear.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputInPacketsClear.setDescription('Total number of packets received on the interface since counters were last cleared.')
accInterfaceThroughputInPacketsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputInPacketsPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputInPacketsPeriod.setDescription('Throughput in packets per second over the last sampling period.')
accInterfaceThroughputOutBytesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputOutBytesUp.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputOutBytesUp.setDescription('Total number of bytes in packets transmitted by the interface since system power-up.')
accInterfaceThroughputOutBytesClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputOutBytesClear.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputOutBytesClear.setDescription('Total number of bytes in packets transmitted by the interface since counters were last cleared.')
accInterfaceThroughputOutBytesPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputOutBytesPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputOutBytesPeriod.setDescription('Throughput in kilobit per second over the last sampling period.')
accInterfaceThroughputOutPacketsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputOutPacketsUp.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputOutPacketsUp.setDescription('Total number of packets transmitted by the interface since system power-up.')
accInterfaceThroughputOutPacketsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputOutPacketsClear.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputOutPacketsClear.setDescription('Total number of packets transmitted by the interface since counters were last cleared.')
accInterfaceThroughputOutPacketsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputOutPacketsPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputOutPacketsPeriod.setDescription('Throughput in packets per second over the last sampling period.')
accInterfaceThroughputRawInBytesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputRawInBytesUp.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputRawInBytesUp.setDescription('Total number of raw bytes in packets received on the interface since system power-up.')
accInterfaceThroughputRawInBytesClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputRawInBytesClear.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputRawInBytesClear.setDescription('Total number of raw bytes in packets received on the interface since counters were last cleared.')
accInterfaceThroughputRawInBytesPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputRawInBytesPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputRawInBytesPeriod.setDescription('Throughput in kilobit per second over the last sampling period.')
accInterfaceThroughputRawOutBytesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputRawOutBytesUp.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputRawOutBytesUp.setDescription('Total number of raw bytes in packets transmitted by the interface since system power-up.')
accInterfaceThroughputRawOutBytesClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputRawOutBytesClear.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputRawOutBytesClear.setDescription('Total number of raw bytes in packets transmitted by the interface since counters were last cleared.')
accInterfaceThroughputRawOutBytesPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3405, 3, 4, 2, 1, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accInterfaceThroughputRawOutBytesPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: accInterfaceThroughputRawOutBytesPeriod.setDescription('Throughput in kilobit per second over the last sampling period.')
mibBuilder.exportSymbols("EXPAND-ACCELERATOROS-MIB", accInterfacePerformanceInAccelerationPeriod=accInterfacePerformanceInAccelerationPeriod, accInterfacePerformanceLostPacketsPeriod=accInterfacePerformanceLostPacketsPeriod, accSysContact=accSysContact, accSoftwareVersion=accSoftwareVersion, accInterfaceThroughputCrcErrUp=accInterfaceThroughputCrcErrUp, accInterfacePerformanceOutAccelerationPeriod=accInterfacePerformanceOutAccelerationPeriod, accCpuEntry=accCpuEntry, accInterfaceType=accInterfaceType, accSysUpTime=accSysUpTime, accBuffer=accBuffer, accInterfaceSpeed=accInterfaceSpeed, accInterfaceOutboundCore=accInterfaceOutboundCore, accInterfaceThroughputDropPacketsClear=accInterfaceThroughputDropPacketsClear, accInterfacePerformanceInAccelerationUp=accInterfacePerformanceInAccelerationUp, accInterfaceMtu=accInterfaceMtu, accInterfaceThroughputOutBytesUp=accInterfaceThroughputOutBytesUp, accPerformance=accPerformance, accInterfaceKeepAliveInterval=accInterfaceKeepAliveInterval, accSysLocation=accSysLocation, accInterfaceKeepAliveIterations=accInterfaceKeepAliveIterations, accCpuTable=accCpuTable, accSerialNumber=accSerialNumber, accInterfaceDescription=accInterfaceDescription, accInterfaceThroughputPeriod=accInterfaceThroughputPeriod, accInterfaceIpAddress=accInterfaceIpAddress, accInterfaceThroughputCrcErrClear=accInterfaceThroughputCrcErrClear, accInterfaceTable=accInterfaceTable, accInterfaceTotalEntries=accInterfaceTotalEntries, accInterfaceQueuingStrategy=accInterfaceQueuingStrategy, accInterfaceThroughputInPacketsUp=accInterfaceThroughputInPacketsUp, accInterfaceChunkSize=accInterfaceChunkSize, accInterfaceThroughputRawInBytesUp=accInterfaceThroughputRawInBytesUp, accCpuUtilization=accCpuUtilization, accCpuDesc=accCpuDesc, accHardware=accHardware, accInterfaceThroughputRawOutBytesPeriod=accInterfaceThroughputRawOutBytesPeriod, accInterfaceThroughputInPacketsClear=accInterfaceThroughputInPacketsClear, accInterfaceThroughputRawOutBytesUp=accInterfaceThroughputRawOutBytesUp, accInterfaceThroughputCrcErrPeriod=accInterfaceThroughputCrcErrPeriod, accInterfaceThroughputOutPacketsClear=accInterfaceThroughputOutPacketsClear, accInterfacePerformanceDrcResetsClear=accInterfacePerformanceDrcResetsClear, accInterfaceBufferUtil=accInterfaceBufferUtil, accInterfacePerformanceRecoveredPacketsClear=accInterfacePerformanceRecoveredPacketsClear, accInterfacePerformanceOutAccelerationClear=accInterfacePerformanceOutAccelerationClear, accSystem=accSystem, accInterfacePerformanceInAccelerationClear=accInterfacePerformanceInAccelerationClear, accInterfaceThroughputInBytesUp=accInterfaceThroughputInBytesUp, accInterfacePerformanceRetransmitPacketsPeriod=accInterfacePerformanceRetransmitPacketsPeriod, accInterfaceThroughputInBytesPeriod=accInterfaceThroughputInBytesPeriod, accInterfaceTransmitDirection=accInterfaceTransmitDirection, accInterfaceAccelerationAdminStatus=accInterfaceAccelerationAdminStatus, accInterfaceOperStatus=accInterfaceOperStatus, accInterfaceDrcMode=accInterfaceDrcMode, accSystemWide=accSystemWide, accInterfaceFrameRelayDlci=accInterfaceFrameRelayDlci, accInterfacePerformanceRetransmitPacketsClear=accInterfacePerformanceRetransmitPacketsClear, accInterfaceOutboundStatus=accInterfaceOutboundStatus, accInterfacePerformanceOutAccelerationUp=accInterfacePerformanceOutAccelerationUp, accInterfaceEncapsulation=accInterfaceEncapsulation, accInterfaceAdminStatus=accInterfaceAdminStatus, accInterfaceIndex=accInterfaceIndex, accInterfacePerformanceRecoveredPacketsPeriod=accInterfacePerformanceRecoveredPacketsPeriod, accInterfaceThroughputInBytesClear=accInterfaceThroughputInBytesClear, accInterfacePerformanceRetransmitPacketsUp=accInterfacePerformanceRetransmitPacketsUp, accInterfaceThroughputOutBytesPeriod=accInterfaceThroughputOutBytesPeriod, accInterfaceThroughputDropBytePeriod=accInterfaceThroughputDropBytePeriod, accInterfaceThroughputDropByteClear=accInterfaceThroughputDropByteClear, accSysHostName=accSysHostName, accInterfacePerformancePeriod=accInterfacePerformancePeriod, accInterfaceThroughputDropByteUp=accInterfaceThroughputDropByteUp, accInterfaceIpMask=accInterfaceIpMask, accSoftware=accSoftware, accInterfaceProbe=accInterfaceProbe, accInterfaces=accInterfaces, accInterfaceChunkSizeMethod=accInterfaceChunkSizeMethod, accInterfacePerformanceLostPacketsUp=accInterfacePerformanceLostPacketsUp, accProductId=accProductId, accInterfaceOutQlength=accInterfaceOutQlength, accInterfaceThroughputDropPacketsUp=accInterfaceThroughputDropPacketsUp, accInterfaceThroughputOutPacketsPeriod=accInterfaceThroughputOutPacketsPeriod, accInterfacePerformanceDrcResetsPeriod=accInterfacePerformanceDrcResetsPeriod, accInterfaceThroughputRawInBytesPeriod=accInterfaceThroughputRawInBytesPeriod, accInterfaceThroughputRawOutBytesClear=accInterfaceThroughputRawOutBytesClear, accInterfacePerformanceRecoveredPacketsUp=accInterfacePerformanceRecoveredPacketsUp, accInterfacePerformanceLostPacketsClear=accInterfacePerformanceLostPacketsClear, accInterfaceInboundCore=accInterfaceInboundCore, accCpuTotalEntries=accCpuTotalEntries, accCpuIndex=accCpuIndex, accInterfaceThroughputDropPacketsPeriod=accInterfaceThroughputDropPacketsPeriod, accInterfaceEntry=accInterfaceEntry, accInterfaceThroughputOutBytesClear=accInterfaceThroughputOutBytesClear, accInterfaceThroughputInPacketsPeriod=accInterfaceThroughputInPacketsPeriod, accInterfaceInboundStatus=accInterfaceInboundStatus, accInterfaceThroughputOutPacketsUp=accInterfaceThroughputOutPacketsUp, accCpu=accCpu, accInterfaceThroughputRawInBytesClear=accInterfaceThroughputRawInBytesClear, accInterfacePerformanceDrcResetsUp=accInterfacePerformanceDrcResetsUp)
