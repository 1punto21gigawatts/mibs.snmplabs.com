#
# PySNMP MIB module STRATUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STRATUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:11:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, NotificationType, Counter64, IpAddress, iso, MibIdentifier, enterprises, ModuleIdentity, Gauge32, NotificationType, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "NotificationType", "Counter64", "IpAddress", "iso", "MibIdentifier", "enterprises", "ModuleIdentity", "Gauge32", "NotificationType", "TimeTicks", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
stratus = MibIdentifier((1, 3, 6, 1, 4, 1, 458))
experimental = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 101))
agentInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 102))
systemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 103))
productIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 104))
ftServerOid = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 105))
stcpOid = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 106))
sraAgentMibFamily = MibScalar((1, 3, 6, 1, 4, 1, 458, 102, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stcp", 1), ("ftServer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sraAgentMibFamily.setStatus('mandatory')
if mibBuilder.loadTexts: sraAgentMibFamily.setDescription('This variable indicates which OIDs are supported by the agent. When support for variables and/or traps are removed from an agent, a new family must be created.')
sraAgentMibRevision = MibScalar((1, 3, 6, 1, 4, 1, 458, 102, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("rev01", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sraAgentMibRevision.setStatus('mandatory')
if mibBuilder.loadTexts: sraAgentMibRevision.setDescription('This variable indicates whether variables and/or traps have been added to the MIB. When a MIB family is created this is initially one. When OIDs are added to those an agent supports, this integer is incremented. Each time a MIB is published, the corresponding Revision will be defined in the MIB.')
sraSiSystemType = MibScalar((1, 3, 6, 1, 4, 1, 458, 103, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sraSiSystemType.setStatus('mandatory')
if mibBuilder.loadTexts: sraSiSystemType.setDescription("The authoritative identification of the hardware and software in the entity. This value provides an easy and unambiguous means for determining `what kind of box' is being managed. This value is an OID that indicates the product family, operating system and CPU architecture. Values are enumerated in the Product Identification (OID 104) table.")
sraSiManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 458, 103, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sraSiManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: sraSiManufacturer.setDescription('This value is a string to indicate the manufacturer of the system. If unknown, the agent may return a null string.')
sraSiModel = MibScalar((1, 3, 6, 1, 4, 1, 458, 103, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sraSiModel.setStatus('mandatory')
if mibBuilder.loadTexts: sraSiModel.setDescription('This value is a string to indicate the model of the system. If unsupported the agent may return a null string.')
sraSiOverallSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 458, 103, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unsupported", 1), ("noFaults", 2), ("systemFault", 3), ("systemDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sraSiOverallSystemStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sraSiOverallSystemStatus.setDescription('This integer indicates the overall status of the system.')
sraSiSystemName = MibScalar((1, 3, 6, 1, 4, 1, 458, 103, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sraSiSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: sraSiSystemName.setDescription('This value is a string representing the network name of the system. This is expected to be unique on a LAN but possibly not globally unique. If unsupported by the agent, a null string may be returned. When the OS is Windows, this is the *computer name* portion of the network id, or the Lan Manager name of the computer (e.g. PCAT). In contrast, the MIB-II sysName is typically the fully-qualified domain name (e.g. pcat.mno.stratus.com). On VOS, this is the system and module name (e.g. %sys#m1). On UNIX this is the hostname.')
sraSiSystemSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 458, 103, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sraSiSystemSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sraSiSystemSerialNumber.setDescription('This value is a string containing the serial number of the system. If unsupported by the agent, a null string may be returned.')
sraSiSiteID = MibScalar((1, 3, 6, 1, 4, 1, 458, 103, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sraSiSiteID.setStatus('mandatory')
if mibBuilder.loadTexts: sraSiSiteID.setDescription('This string value contains the SiteID. SiteID is part of the RSN/ASN service model.')
sraSiCpuFamily = MibScalar((1, 3, 6, 1, 4, 1, 458, 103, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unsupported", 1), ("m68k", 2), ("i860", 3), ("hppa", 4), ("ia32", 5), ("ia64", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sraSiCpuFamily.setStatus('mandatory')
if mibBuilder.loadTexts: sraSiCpuFamily.setDescription('This value is an integer that indicates the CPU architecture.')
sraSiOsType = MibScalar((1, 3, 6, 1, 4, 1, 458, 103, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unsupported", 1), ("ftx", 2), ("hpux", 3), ("linux", 4), ("vos", 5), ("windows", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sraSiOsType.setStatus('mandatory')
if mibBuilder.loadTexts: sraSiOsType.setDescription('This value is an integer that indicates Operating System type.')
osFTX = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 104, 1))
sraProductIdFtxJetta = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 104, 1, 1))
sraProductIdFtxPolo = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 104, 1, 2))
osHPUX = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 104, 2))
sraProductIdHpuxPolo = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 104, 2, 1))
osLinux = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 104, 3))
sraProductIdLnxFtsIa32 = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 104, 3, 1))
osVOS = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 104, 4))
sraProductIdVos68k = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 104, 4, 1))
sraProductIdVosI860 = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 104, 4, 2))
sraProductIdVosJetta = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 104, 4, 3))
sraProductIdVosIa32 = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 104, 4, 4))
osWindowsFt = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 104, 5))
sraProductIdWinFtsIa32 = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 104, 5, 1))
sraProductIdWinFtsIa64 = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 104, 5, 2))
osRadio = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 104, 6))
sraProductIdWinRadIa32 = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 104, 6, 1))
ftsmVar = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 105, 1))
ftsmTrapId = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 105, 2))
ftsmTrapData = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 105, 3))
ftsmVarHostModelName = MibScalar((1, 3, 6, 1, 4, 1, 458, 105, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftsmVarHostModelName.setStatus('mandatory')
if mibBuilder.loadTexts: ftsmVarHostModelName.setDescription('This string contains the model name from the SRA_Customer class in WMI. (This differs from the information reported in the sraSiModel variable.)')
ftsmTrapDataDevicePathId = MibScalar((1, 3, 6, 1, 4, 1, 458, 105, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftsmTrapDataDevicePathId.setStatus('mandatory')
if mibBuilder.loadTexts: ftsmTrapDataDevicePathId.setDescription('This string identifies the specific device that caused the event that resulted in the trap. This string is in standard #/# notation.')
ftsmTrapDataDeviceClassname = MibScalar((1, 3, 6, 1, 4, 1, 458, 105, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftsmTrapDataDeviceClassname.setStatus('mandatory')
if mibBuilder.loadTexts: ftsmTrapDataDeviceClassname.setDescription('This string identifies the type of device that caused the event that resulted in the trap. (CIM class name)')
ftsmTrapDataNewState = MibScalar((1, 3, 6, 1, 4, 1, 458, 105, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(65536, 65560, 131073, 131076, 131078, 131079, 131080, 131081, 131082, 131083, 131084, 131085, 131086, 131087, 131088, 262149, 524308, 524309, 1572886, 1572887, 2097154, 2097155))).clone(namedValues=NamedValues(("sraFtsm-state-empty", 65536), ("sraFtsm-state-not-present", 65560), ("sraFtsm-state-removed", 131073), ("sraFtsm-state-dumping", 131076), ("sraFtsm-state-diagnostics-passed", 131078), ("sraFtsm-state-initializing", 131079), ("sraFtsm-state-syncing", 131080), ("sraFtsm-state-firmware-update", 131081), ("sraFtsm-state-offline", 131082), ("sraFtsm-state-device-ready", 131083), ("sraFtsm-state-stopped", 131084), ("sraFtsm-state-stop-pending", 131085), ("sraFtsm-state-remove-pending", 131086), ("sraFtsm-state-surprise-removal", 131087), ("sraFtsm-state-firmware-update-complete", 131088), ("sraFtsm-state-diagnostics", 262149), ("sraFtsm-state-online", 524308), ("sraFtsm-state-simplex", 524309), ("sraFtsm-state-duplex", 1572886), ("sraFtsm-state-triplex", 1572887), ("sraFtsm-state-shot", 2097154), ("sraFtsm-state-broken", 2097155)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftsmTrapDataNewState.setStatus('mandatory')
if mibBuilder.loadTexts: ftsmTrapDataNewState.setDescription('This integer identifies the new operational state of the device after the event that caused the trap.')
ftsmTrapDataNewReason = MibScalar((1, 3, 6, 1, 4, 1, 458, 105, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("sraFtsm-reason-none", 0), ("sraFtsm-reason-below-mtbf", 1), ("sraFtsm-reason-diagnostics-failed", 2), ("sraFtsm-reason-hardware-incompatible", 3), ("sraFtsm-reason-holding-dump", 4), ("sraFtsm-reason-bringup-failed", 5), ("sraFtsm-reason-parent-broken", 6), ("sraFtsm-reason-media-disconnect", 7), ("sraFtsm-reason-firmware-burn-fail", 8), ("sraFtsm-reason-firmware-file-not-found", 9), ("sraFtsm-reason-firmware-file-error", 10), ("sraFtsm-reason-firmware-prom-error", 11), ("sraFtsm-reason-autoburn-disabled", 12), ("sraFtsm-reason-idprom-read-error", 13), ("sraFtsm-reason-primary", 14), ("sraFtsm-reason-secondary", 15), ("sraFtsm-reason-parent-empty", 16), ("sraFtsm-reason-deferred-bringup", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftsmTrapDataNewReason.setStatus('mandatory')
if mibBuilder.loadTexts: ftsmTrapDataNewReason.setDescription('This integer identifies the new operational reason of the device after the event that caused the trap. This provides additional detail of the operational state of hardware elements of the ftServer.')
ftsmTrapDataNewThreshold = MibScalar((1, 3, 6, 1, 4, 1, 458, 105, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sraFtsm-sensor-status-unavailable", 0), ("sraFtsm-sensor-status-normal", 1), ("sraFtsm-sensor-status-below-warning", 2), ("sraFtsm-sensor-status-below-critical", 3), ("sraFtsm-sensor-status-above-warning", 4), ("sraFtsm-sensor-status-above-critical", 5), ("sraFtsm-sensor-status-below-fatal", 6), ("sraFtsm-sensor-status-above-fatal", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftsmTrapDataNewThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ftsmTrapDataNewThreshold.setDescription('This integer identifies the new status of a sensor, compared to thresholds, after the threshold event that caused the trap.')
ftsmTrapDataEventId = MibScalar((1, 3, 6, 1, 4, 1, 458, 105, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftsmTrapDataEventId.setStatus('mandatory')
if mibBuilder.loadTexts: ftsmTrapDataEventId.setDescription('This integer contains the Win32 EventID associated with the event that caused this trap.')
ftsmTrapDataAlarmId = MibScalar((1, 3, 6, 1, 4, 1, 458, 105, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftsmTrapDataAlarmId.setStatus('mandatory')
if mibBuilder.loadTexts: ftsmTrapDataAlarmId.setDescription('This integer contains the ftSM AlarmID associated with the event that caused this trap.')
ftsmTrapDataEventDescription = MibScalar((1, 3, 6, 1, 4, 1, 458, 105, 3, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftsmTrapDataEventDescription.setStatus('mandatory')
if mibBuilder.loadTexts: ftsmTrapDataEventDescription.setDescription('This is the formatted string that describes the event. This string is composed by using the EventId to select a message template string and applying formatting directives in that string to other parameters. This is further explained in the Microsoft Windows Platform SDK documentation on Event Logging.')
ftsmTrapDataEventParameterStrings = MibIdentifier((1, 3, 6, 1, 4, 1, 458, 105, 3, 9))
ftsmTrapDataEventP1 = MibScalar((1, 3, 6, 1, 4, 1, 458, 105, 3, 9, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftsmTrapDataEventP1.setStatus('mandatory')
if mibBuilder.loadTexts: ftsmTrapDataEventP1.setDescription('This language-independent substitution string replaces any occurance of %1 in the message template string.')
ftsmTrapDataEventP2 = MibScalar((1, 3, 6, 1, 4, 1, 458, 105, 3, 9, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftsmTrapDataEventP2.setStatus('mandatory')
if mibBuilder.loadTexts: ftsmTrapDataEventP2.setDescription('This language-independent substitution string replaces any occurance of %2 in the message template string.')
ftsmTrapDataEventP3 = MibScalar((1, 3, 6, 1, 4, 1, 458, 105, 3, 9, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftsmTrapDataEventP3.setStatus('mandatory')
if mibBuilder.loadTexts: ftsmTrapDataEventP3.setDescription('This language-independent substitution string replaces any occurance of %3 in the message template string.')
ftsmTrapDataEventP4 = MibScalar((1, 3, 6, 1, 4, 1, 458, 105, 3, 9, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftsmTrapDataEventP4.setStatus('mandatory')
if mibBuilder.loadTexts: ftsmTrapDataEventP4.setDescription('This language-independent substitution string replaces any occurance of %4 in the message template string.')
ftsmTrapDataEventP5 = MibScalar((1, 3, 6, 1, 4, 1, 458, 105, 3, 9, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftsmTrapDataEventP5.setStatus('mandatory')
if mibBuilder.loadTexts: ftsmTrapDataEventP5.setDescription('This language-independent substitution string replaces any occurance of %5 in the message template string.')
ftsmTrapDataEventP6 = MibScalar((1, 3, 6, 1, 4, 1, 458, 105, 3, 9, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftsmTrapDataEventP6.setStatus('mandatory')
if mibBuilder.loadTexts: ftsmTrapDataEventP6.setDescription('This language-independent substitution string replaces any occurance of %6 in the message template string.')
ftsmTrapDataEventP7 = MibScalar((1, 3, 6, 1, 4, 1, 458, 105, 3, 9, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftsmTrapDataEventP7.setStatus('mandatory')
if mibBuilder.loadTexts: ftsmTrapDataEventP7.setDescription('This language-independent substitution string replaces any occurance of %7 in the message template string.')
ftsmTrapDataEventP8 = MibScalar((1, 3, 6, 1, 4, 1, 458, 105, 3, 9, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftsmTrapDataEventP8.setStatus('mandatory')
if mibBuilder.loadTexts: ftsmTrapDataEventP8.setDescription('This language-independent substitution string replaces any occurance of %8 in the message template string.')
ftsmTrapDataEventP9 = MibScalar((1, 3, 6, 1, 4, 1, 458, 105, 3, 9, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftsmTrapDataEventP9.setStatus('mandatory')
if mibBuilder.loadTexts: ftsmTrapDataEventP9.setDescription('This language-independent substitution string replaces any occurance of %9 in the message template string.')
ftsmTrapEnterBrokenState = NotificationType((1, 3, 6, 1, 4, 1, 458, 105, 2) + (0,101)).setObjects(("STRATUS-MIB", "ftsmTrapDataDevicePathId"), ("STRATUS-MIB", "ftsmTrapDataDeviceClassname"), ("STRATUS-MIB", "ftsmTrapDataNewState"), ("STRATUS-MIB", "ftsmTrapDataNewReason"))
if mibBuilder.loadTexts: ftsmTrapEnterBrokenState.setDescription('A ftsmTrapEnterBrokenState trap indicates that the device entered the broken SNMP state.')
ftsmTrapLeaveBrokenState = NotificationType((1, 3, 6, 1, 4, 1, 458, 105, 2) + (0,102)).setObjects(("STRATUS-MIB", "ftsmTrapDataDevicePathId"), ("STRATUS-MIB", "ftsmTrapDataDeviceClassname"), ("STRATUS-MIB", "ftsmTrapDataNewState"), ("STRATUS-MIB", "ftsmTrapDataNewReason"))
if mibBuilder.loadTexts: ftsmTrapLeaveBrokenState.setDescription('A ftsmTrapLeaveBrokenState trap indicates that the device left the broken SNMP state.')
ftsmTrapEnterOnlineState = NotificationType((1, 3, 6, 1, 4, 1, 458, 105, 2) + (0,103)).setObjects(("STRATUS-MIB", "ftsmTrapDataDevicePathId"), ("STRATUS-MIB", "ftsmTrapDataDeviceClassname"), ("STRATUS-MIB", "ftsmTrapDataNewState"), ("STRATUS-MIB", "ftsmTrapDataNewReason"))
if mibBuilder.loadTexts: ftsmTrapEnterOnlineState.setDescription('A ftsmTrapEnterOnlineState trap indicates that the device entered the online SNMP state.')
ftsmTrapLeaveOnlineState = NotificationType((1, 3, 6, 1, 4, 1, 458, 105, 2) + (0,104)).setObjects(("STRATUS-MIB", "ftsmTrapDataDevicePathId"), ("STRATUS-MIB", "ftsmTrapDataDeviceClassname"), ("STRATUS-MIB", "ftsmTrapDataNewState"), ("STRATUS-MIB", "ftsmTrapDataNewReason"))
if mibBuilder.loadTexts: ftsmTrapLeaveOnlineState.setDescription('A ftsmTrapLeaveOnlineState trap indicates that the device left the online SNMP state.')
ftsmTrapEnterOutOfServiceState = NotificationType((1, 3, 6, 1, 4, 1, 458, 105, 2) + (0,105)).setObjects(("STRATUS-MIB", "ftsmTrapDataDevicePathId"), ("STRATUS-MIB", "ftsmTrapDataDeviceClassname"), ("STRATUS-MIB", "ftsmTrapDataNewState"), ("STRATUS-MIB", "ftsmTrapDataNewReason"))
if mibBuilder.loadTexts: ftsmTrapEnterOutOfServiceState.setDescription('A ftsmTrapEnterOutOfServiceState trap indicates that the device entered the out-of-service SNMP state.')
ftsmTrapLeaveOutOfServiceState = NotificationType((1, 3, 6, 1, 4, 1, 458, 105, 2) + (0,106)).setObjects(("STRATUS-MIB", "ftsmTrapDataDevicePathId"), ("STRATUS-MIB", "ftsmTrapDataDeviceClassname"), ("STRATUS-MIB", "ftsmTrapDataNewState"), ("STRATUS-MIB", "ftsmTrapDataNewReason"))
if mibBuilder.loadTexts: ftsmTrapLeaveOutOfServiceState.setDescription('A ftsmTrapLeaveOutOfServiceState trap indicates that the device left the out-of-service SNMP state.')
ftsmTrapImprove2Normal = NotificationType((1, 3, 6, 1, 4, 1, 458, 105, 2) + (0,201)).setObjects(("STRATUS-MIB", "ftsmTrapDataDevicePathId"), ("STRATUS-MIB", "ftsmTrapDataDeviceClassname"), ("STRATUS-MIB", "ftsmTrapDataNewState"), ("STRATUS-MIB", "ftsmTrapDataNewReason"), ("STRATUS-MIB", "ftsmTrapDataNewThreshold"))
if mibBuilder.loadTexts: ftsmTrapImprove2Normal.setDescription('A ftsmTrapImprove2Normal trap indicates that the status improved to the normal range.')
ftsmTrapImprove2Warning = NotificationType((1, 3, 6, 1, 4, 1, 458, 105, 2) + (0,202)).setObjects(("STRATUS-MIB", "ftsmTrapDataDevicePathId"), ("STRATUS-MIB", "ftsmTrapDataDeviceClassname"), ("STRATUS-MIB", "ftsmTrapDataNewState"), ("STRATUS-MIB", "ftsmTrapDataNewReason"), ("STRATUS-MIB", "ftsmTrapDataNewThreshold"))
if mibBuilder.loadTexts: ftsmTrapImprove2Warning.setDescription('A ftsmTrapImprove2Warning trap indicates that the status improved to the warning range.')
ftsmTrapImprove2Critical = NotificationType((1, 3, 6, 1, 4, 1, 458, 105, 2) + (0,203)).setObjects(("STRATUS-MIB", "ftsmTrapDataDevicePathId"), ("STRATUS-MIB", "ftsmTrapDataDeviceClassname"), ("STRATUS-MIB", "ftsmTrapDataNewState"), ("STRATUS-MIB", "ftsmTrapDataNewReason"), ("STRATUS-MIB", "ftsmTrapDataNewThreshold"))
if mibBuilder.loadTexts: ftsmTrapImprove2Critical.setDescription('A ftsmTrapImprove2Critical trap indicates that the status improved to the critical range.')
ftsmTrapUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 458, 105, 2) + (0,204)).setObjects(("STRATUS-MIB", "ftsmTrapDataDevicePathId"), ("STRATUS-MIB", "ftsmTrapDataDeviceClassname"), ("STRATUS-MIB", "ftsmTrapDataNewState"), ("STRATUS-MIB", "ftsmTrapDataNewReason"), ("STRATUS-MIB", "ftsmTrapDataNewThreshold"))
if mibBuilder.loadTexts: ftsmTrapUnavailable.setDescription('A ftsmTrapUnavailable trap indicates that the threshold or status information became unavailable.')
ftsmTrapWorse2Fatal = NotificationType((1, 3, 6, 1, 4, 1, 458, 105, 2) + (0,205)).setObjects(("STRATUS-MIB", "ftsmTrapDataDevicePathId"), ("STRATUS-MIB", "ftsmTrapDataDeviceClassname"), ("STRATUS-MIB", "ftsmTrapDataNewState"), ("STRATUS-MIB", "ftsmTrapDataNewReason"), ("STRATUS-MIB", "ftsmTrapDataNewThreshold"))
if mibBuilder.loadTexts: ftsmTrapWorse2Fatal.setDescription('A ftsmTrapWorse2Fatal trap indicates that the status worsened to the fatal range.')
ftsmTrapWorse2Critical = NotificationType((1, 3, 6, 1, 4, 1, 458, 105, 2) + (0,206)).setObjects(("STRATUS-MIB", "ftsmTrapDataDevicePathId"), ("STRATUS-MIB", "ftsmTrapDataDeviceClassname"), ("STRATUS-MIB", "ftsmTrapDataNewState"), ("STRATUS-MIB", "ftsmTrapDataNewReason"), ("STRATUS-MIB", "ftsmTrapDataNewThreshold"))
if mibBuilder.loadTexts: ftsmTrapWorse2Critical.setDescription('A ftsmTrapWorse2Critical trap indicates that the status worsened to the critical range.')
ftsmTrapWorse2Warning = NotificationType((1, 3, 6, 1, 4, 1, 458, 105, 2) + (0,207)).setObjects(("STRATUS-MIB", "ftsmTrapDataDevicePathId"), ("STRATUS-MIB", "ftsmTrapDataDeviceClassname"), ("STRATUS-MIB", "ftsmTrapDataNewState"), ("STRATUS-MIB", "ftsmTrapDataNewReason"), ("STRATUS-MIB", "ftsmTrapDataNewThreshold"))
if mibBuilder.loadTexts: ftsmTrapWorse2Warning.setDescription('A ftsmTrapWorse2Warning trap indicates that the status worsened to the warning range.')
ftsmTrapMgmtServiceFailure = NotificationType((1, 3, 6, 1, 4, 1, 458, 105, 2) + (0,301)).setObjects(("STRATUS-MIB", "ftsmTrapDataEventId"), ("STRATUS-MIB", "ftsmTrapDataAlarmId"), ("STRATUS-MIB", "ftsmTrapDataEventDescription"))
if mibBuilder.loadTexts: ftsmTrapMgmtServiceFailure.setDescription('A ftsmTrapMgmtServiceFailure trap indicates that one or more Stratus ftServer management services have failed.')
ftsmTrapUnsentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 458, 105, 2) + (0,302)).setObjects(("STRATUS-MIB", "ftsmTrapDataEventId"), ("STRATUS-MIB", "ftsmTrapDataAlarmId"), ("STRATUS-MIB", "ftsmTrapDataEventDescription"))
if mibBuilder.loadTexts: ftsmTrapUnsentAlarm.setDescription('A ftsmTrapUnsentAlarm trap indicates that the Alarm Service failed to send an alarm message due to possible connection or ASN hub failures. The alarm message file has been renamed with .drop extension and saved in the alarm file directory.')
mibBuilder.exportSymbols("STRATUS-MIB", ftsmTrapUnavailable=ftsmTrapUnavailable, sraSiSystemName=sraSiSystemName, sraProductIdVosIa32=sraProductIdVosIa32, sraSiModel=sraSiModel, ftsmTrapDataEventDescription=ftsmTrapDataEventDescription, ftsmTrapDataNewReason=ftsmTrapDataNewReason, sraProductIdVos68k=sraProductIdVos68k, sraProductIdFtxPolo=sraProductIdFtxPolo, ftsmTrapDataEventId=ftsmTrapDataEventId, ftServerOid=ftServerOid, ftsmTrapDataEventP2=ftsmTrapDataEventP2, ftsmTrapEnterOnlineState=ftsmTrapEnterOnlineState, sraSiOverallSystemStatus=sraSiOverallSystemStatus, sraSiCpuFamily=sraSiCpuFamily, ftsmTrapId=ftsmTrapId, productIdent=productIdent, sraProductIdFtxJetta=sraProductIdFtxJetta, ftsmTrapDataEventP7=ftsmTrapDataEventP7, osWindowsFt=osWindowsFt, ftsmTrapData=ftsmTrapData, stratus=stratus, ftsmTrapDataEventP8=ftsmTrapDataEventP8, ftsmTrapImprove2Warning=ftsmTrapImprove2Warning, ftsmTrapLeaveBrokenState=ftsmTrapLeaveBrokenState, ftsmTrapLeaveOnlineState=ftsmTrapLeaveOnlineState, ftsmTrapEnterBrokenState=ftsmTrapEnterBrokenState, ftsmTrapWorse2Fatal=ftsmTrapWorse2Fatal, ftsmTrapDataEventP9=ftsmTrapDataEventP9, sraProductIdLnxFtsIa32=sraProductIdLnxFtsIa32, ftsmTrapImprove2Normal=ftsmTrapImprove2Normal, osFTX=osFTX, ftsmTrapDataEventP3=ftsmTrapDataEventP3, sraSiSystemSerialNumber=sraSiSystemSerialNumber, ftsmTrapDataDeviceClassname=ftsmTrapDataDeviceClassname, ftsmTrapUnsentAlarm=ftsmTrapUnsentAlarm, sraSiSiteID=sraSiSiteID, ftsmTrapWorse2Critical=ftsmTrapWorse2Critical, ftsmTrapDataDevicePathId=ftsmTrapDataDevicePathId, ftsmTrapMgmtServiceFailure=ftsmTrapMgmtServiceFailure, systemInfo=systemInfo, sraAgentMibRevision=sraAgentMibRevision, ftsmTrapDataEventP6=ftsmTrapDataEventP6, ftsmTrapDataNewState=ftsmTrapDataNewState, ftsmTrapLeaveOutOfServiceState=ftsmTrapLeaveOutOfServiceState, osHPUX=osHPUX, ftsmTrapDataAlarmId=ftsmTrapDataAlarmId, sraSiManufacturer=sraSiManufacturer, ftsmVar=ftsmVar, ftsmTrapDataEventP5=ftsmTrapDataEventP5, osLinux=osLinux, agentInfo=agentInfo, sraProductIdWinFtsIa64=sraProductIdWinFtsIa64, experimental=experimental, sraProductIdHpuxPolo=sraProductIdHpuxPolo, sraProductIdVosI860=sraProductIdVosI860, ftsmTrapWorse2Warning=ftsmTrapWorse2Warning, ftsmTrapDataNewThreshold=ftsmTrapDataNewThreshold, ftsmTrapDataEventParameterStrings=ftsmTrapDataEventParameterStrings, ftsmTrapImprove2Critical=ftsmTrapImprove2Critical, ftsmTrapDataEventP1=ftsmTrapDataEventP1, sraProductIdWinRadIa32=sraProductIdWinRadIa32, ftsmTrapEnterOutOfServiceState=ftsmTrapEnterOutOfServiceState, sraProductIdWinFtsIa32=sraProductIdWinFtsIa32, stcpOid=stcpOid, sraSiSystemType=sraSiSystemType, ftsmVarHostModelName=ftsmVarHostModelName, sraProductIdVosJetta=sraProductIdVosJetta, sraAgentMibFamily=sraAgentMibFamily, ftsmTrapDataEventP4=ftsmTrapDataEventP4, osVOS=osVOS, sraSiOsType=sraSiOsType, osRadio=osRadio)
