#
# PySNMP MIB module CISCO-LWAPP-MESH-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-MESH-STATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:05:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
cLApName, cLApSysMacAddress = mibBuilder.importSymbols("CISCO-LWAPP-AP-MIB", "cLApName", "cLApSysMacAddress")
clMeshNeighborMacAddress, clMeshNodeBackhaul = mibBuilder.importSymbols("CISCO-LWAPP-MESH-MIB", "clMeshNeighborMacAddress", "clMeshNodeBackhaul")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, iso, Bits, IpAddress, ObjectIdentity, Integer32, Gauge32, Unsigned32, ModuleIdentity, Counter64, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "iso", "Bits", "IpAddress", "ObjectIdentity", "Integer32", "Gauge32", "Unsigned32", "ModuleIdentity", "Counter64", "TimeTicks", "MibIdentifier")
TruthValue, TimeInterval, TimeStamp, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TimeInterval", "TimeStamp", "TextualConvention", "DisplayString")
ciscoLwappMeshStatsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 617))
ciscoLwappMeshStatsMIB.setRevisions(('2010-09-01 00:00', '2007-03-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappMeshStatsMIB.setRevisionsDescriptions(('Added following new objects to clMeshNodeStatsTable: clMeshNodeSecBackhaulCount, clMeshNodeAssociationCount. Added the following new tables: clMeshNeighStatsTable, clMeshAccessClassTable, clMeshDataRateStatsTable Added following objects to ciscoLwappMeshStatsMIBConfigObjects clMeshNodeSecBackhaulChangeNotifEnabled, clMeshNodeExcessiveAssociationNotifEnabled, clMeshNodeExcessiveAssociationThreshold. Added following new notification object. clMeshInitiatingApName Added following new notifications. ciscoLwappMeshExcessiveAssociation, ciscoLwappMeshSecBackhaulChange. Added following new Groups. ciscoLwappMeshNeighStatsGroup, ciscoLwappMeshStatsNotifObjsGroup, ciscoLwappMeshAccessClassGroup, ciscoLwappMeshDataRateStatsGroup, ciscoLwappMeshNodeStatsGroupSup1 is a supplement to ciscoLwappMeshNodeStatsGroup, ciscoLwappMeshStatsConfigObjsGroupSup1 is a supplement to ciscoLwappMeshStatsConfigObjsGroup. Added ciscoLwappMeshStatsNotifsGroupSup1, which supplements ciscoLwappMeshStatsNotifsGroup. Added ciscoLwappMeshStatsMIBComplianceR01, which deprecates ciscoLwappMeshStatsMIBCompliance.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLwappMeshStatsMIB.setLastUpdated('201009010000Z')
if mibBuilder.loadTexts: ciscoLwappMeshStatsMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappMeshStatsMIB.setContactInfo('Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappMeshStatsMIB.setDescription("This MIB is intended to be implemented on all those devices operating as Central Controllers (CC) that terminate the Light Weight Access Point Protocol (LWAPP) tunnel from Light-weight Access Points. This MIB represents statistics collected for mesh node in Wireless Mesh Network. The deployment of the controller (referred to as CC in the diagram), mesh nodes (RAP and MAP) LWAPP APs, client(MS) and NMS appear as followshe LWAPP tunnel exists between the controller and the APs. The MNs communicate with the APs through the protocol defined by the 802.11 standard. LWAPP APs, upon bootup, discover and join one of the controllers and the controller pushes the configuration, that includes the WLAN parameters to the LWAPP APs. The APs encapsulate all the 802.11 frames from wireless clients inside LWAPP frames and forward the LWAPP frames to the controller. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends them to the controller to which it is logically connected. Central Controller ( CC ) The central entity that terminates the LWAPP protocol tunnel from the LWAPP APs. Throughout this MIB, this entity is also referred to as 'controller'. Mobile Station ( MS ) A roaming 802.11 wireless device in a wireless network associated with an access point. Mobile Station and client are used interchangeably. Network Management System ( NMS ) The station from which the administrator manages the wired and wireless networks. Mesh Node A mesh node is defined as a physical or logical entity in the mesh network participating in forming the mesh backhaul. RAP and MAP are two types of mesh nodes supported in mesh network. Root AP (RAP) The AP forming the bridge between a wired and a mesh network with an Ethernet interface to the wired network and a 802.11 radio interface to the mesh network Mesh AP (MAP). The AP extending wireless coverage similar to a repeater in a mesh network and consists of a 802.11 uplink and a 802.11 downlink. On a single-radio backhaul, both uplink and downlink exist on the same radio and are logical links only. On a multi-radio backhaul, they may exist on different radios. Mesh Network Network starting with the wireless backhaul downlink of the RAP and all the entities below except any attached network to the Ethernet link of MAPs. A mesh network below a single RAP is also referred to as a 'Mesh Sector'.A mesh network consists of mesh nodes. A single mesh network is always augmented to a single wired network. Mesh Link A logical 802.11 link between two mesh nodes. A single link is point-to-point. All point-to-multipoint links are considered as multiple mesh links. Often referred to as mesh backhaul link. Mesh Backhaul A Mesh backhaul consists of mesh nodes and mesh links terminating at a RAP. This necessarily creates a one- to-one relationship between a 'mesh network', 'mesh sector' and a 'mesh backhaul' where these terms can be used interchangeably. SNR Signal to Noise ratio on the 802.11 radio. Bridged network The bridged network is defined as the network(s) attached to the Ethernet port of any MAP. There can be multiple such networks attached to a single mesh network. Mesh Node Roaming A mesh node may change its parent mesh node naturally when the RF/network condition changes. Child Mesh node will re-associate and re-authenticate to new parent mesh node. Mesh Security supports two types of mesh node roaming. Intra-controller - LWAPP session is not lost. Inter-controller - LWAPP session is lost. REFERENCE [1] Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications. [2] Draft-obara-capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol")
ciscoLwappMeshStatsMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 617, 0))
ciscoLwappMeshStatsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 617, 1))
ciscoLwappMeshStatsMIBConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 617, 2))
ciscoLwappMeshStatsMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 617, 3))
ciscoLwappMeshNodeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1))
ciscoLwappMeshNeighStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 2))
ciscoLwappMeshStatsMIBNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 3))
ciscoLwappMeshAccessClass = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 4))
ciscoLwappMeshDataRateStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 5))
clMeshNodeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 1), )
if mibBuilder.loadTexts: clMeshNodeStatsTable.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeStatsTable.setDescription('This table represents statistics information about a mesh node such as the number of that were transmitted to or received from the mesh node, number association attempts, packets transmitted on secondary backhaul etc. An entry in this table gets added when a mesh node associates to the controller and entry gets removed when mesh node disassociates from the controller.')
clMeshNodeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"))
if mibBuilder.loadTexts: clMeshNodeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeStatsEntry.setDescription('An (conceptual) entry in this table represents statistics for a mesh node.')
clMeshNodeMalformedNeighPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 1, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeMalformedNeighPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeMalformedNeighPkts.setDescription('This object represents total number of packets received from neighbor mesh nodes which could not be decoded.')
clMeshNodePoorNeighSnrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 1, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodePoorNeighSnrPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshNodePoorNeighSnrPkts.setDescription('This object represents total number of packets received from neighbor mesh nodes which were below SNR threshold value.')
clMeshNodeExcludedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeExcludedPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeExcludedPkts.setDescription('This object represents total number of packets received from excluded neighbor mesh nodes.')
clMeshNodeRxNeighReq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 1, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeRxNeighReq.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeRxNeighReq.setDescription('This object represents total number of request received from neighbor mesh node APs. Requests can be either broadcast or unicast from neighbor mesh nodes.')
clMeshNodeRxNeighRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 1, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeRxNeighRsp.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeRxNeighRsp.setDescription('This object represents total number of response received from neighbor mesh node APs.')
clMeshNodeTxNeighReq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeTxNeighReq.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeTxNeighReq.setDescription('This object represents total number of request sent to neighbor mesh node APs. Requests can be broadcast or unicast to neighbor mesh node.')
clMeshNodeTxNeighRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeTxNeighRsp.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeTxNeighRsp.setDescription('This object represents total number of response sent to neighbor mesh node APs.')
clMeshNodeParentChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 1, 1, 8), Counter32()).setUnits('parent-switches').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeParentChanges.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeParentChanges.setDescription('This object represents total number of times this mesh node has changed its parent.')
clMeshNodeSecBackhaulCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 1, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeSecBackhaulCount.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeSecBackhaulCount.setDescription("This object specifies the number of packets sent on the secondary backhaul after the change, and is also sent as a part of the 'ciscoLwappMeshSecBackhaulChange' notification.")
clMeshNodeAssociationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeAssociationCount.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeAssociationCount.setDescription('This object specifies the number of association attempts of children nodes at a parent node and is also sent as a part of the ciscoLwappMeshExcessiveAssociation notification')
clMeshNodePktQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 2), )
if mibBuilder.loadTexts: clMeshNodePktQueueStatsTable.setStatus('current')
if mibBuilder.loadTexts: clMeshNodePktQueueStatsTable.setDescription('This table represents information about different packet queues of a mesh node. Queues are maintained in a mesh node based on quality of service and packets wait for its turn in queue before it is sent to network. An (conceptual) entry in this table is created when a mesh node associates with controller and start sending packets to neighbor mesh node or controller Entries are removed when the mesh node disassociates from controller.')
clMeshNodePktQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodePktQueueIndex"))
if mibBuilder.loadTexts: clMeshNodePktQueueStatsEntry.setStatus('current')
if mibBuilder.loadTexts: clMeshNodePktQueueStatsEntry.setDescription('Each entry in this table represents average queue size and peak packets queue reached.')
clMeshNodePktQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("silver", 1), ("gold", 2), ("platinum", 3), ("bronze", 4), ("management", 5))))
if mibBuilder.loadTexts: clMeshNodePktQueueIndex.setStatus('current')
if mibBuilder.loadTexts: clMeshNodePktQueueIndex.setDescription('This object represents different types of queues in a mesh node. silver - queue for Best Effort packets. gold - queue for Video Application. platinum - queue for Voice Application. bronze - queue for Background. management - queue for management frames.')
clMeshNodePktQueueAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 2, 1, 2), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodePktQueueAvg.setStatus('current')
if mibBuilder.loadTexts: clMeshNodePktQueueAvg.setDescription("This object represents average number of packets waiting in the queue during interval defined by object 'clMeshNodeStatsTimeInterval'.")
clMeshNodePktQueuePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 2, 1, 3), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodePktQueuePeak.setStatus('current')
if mibBuilder.loadTexts: clMeshNodePktQueuePeak.setDescription("This object represents peak number of packets waiting in the queue during interval defined by object 'clMeshNodeStatsTimeInterval'.")
clMeshNodePktQueuePktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 2, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodePktQueuePktsDropped.setStatus('current')
if mibBuilder.loadTexts: clMeshNodePktQueuePktsDropped.setDescription('This object represents total number of packets dropped due to queue overflow.')
clMeshNodePktQueueTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 2, 1, 5), TimeStamp()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodePktQueueTimeStamp.setStatus('current')
if mibBuilder.loadTexts: clMeshNodePktQueueTimeStamp.setDescription('This object represents when the queue statistics was last collected. This value is represented as a instance of sysUp time.')
clMeshNodePktQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 2, 1, 6), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodePktQueueSize.setStatus('current')
if mibBuilder.loadTexts: clMeshNodePktQueueSize.setDescription('This object represents max number of packets a queue can hold.')
clMeshNodeSecStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3), )
if mibBuilder.loadTexts: clMeshNodeSecStatsTable.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeSecStatsTable.setDescription('This table represents information about packets transmitted to or received from a mesh node during association or authentication of a child mesh node to parent mesh node. An (conceptual) entry in this table is created when a mesh node associates or authenticates with a parent mesh node. Entries are removed when the mesh node disassociates from controller.')
clMeshNodeSecStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"))
if mibBuilder.loadTexts: clMeshNodeSecStatsEntry.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeSecStatsEntry.setDescription('Each (conceptual) entry in this table represents count of security packets a mesh node exchange with its parent mesh node.')
clMeshNodeSecTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeSecTxPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeSecTxPkts.setDescription('This object indicates total number of packets transmitted by this mesh node during security negotiations.')
clMeshNodeSecRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeSecRxPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeSecRxPkts.setDescription('This object indicates total number of packets received by this mesh node during security negotiations.')
clMeshNodeAssocReqFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeAssocReqFailures.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeAssocReqFailures.setDescription('This object indicates total number of association request sent by this node as a child mesh node to a parent mesh node, that resulted in a failure.')
clMeshNodeAssocReqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeAssocReqTimeouts.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeAssocReqTimeouts.setDescription('This object indicates total number of association request sent by this node, as a child mesh node to a parent mesh node, that timed out.')
clMeshNodeAssocReqSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeAssocReqSuccess.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeAssocReqSuccess.setDescription('This object indicates total number of association request sent by this node, as a child mesh node to a parent mesh node, that completed.')
clMeshNodeAuthReqFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeAuthReqFailures.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeAuthReqFailures.setDescription('This object indicates total number of authenticaton request sent by this node, as a child mesh node to a parent mesh node, that failed.')
clMeshNodeAuthReqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeAuthReqTimeouts.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeAuthReqTimeouts.setDescription('This object indicates total number of authentication request sent by this node, as a child mesh node to a parent mesh node, that timed out.')
clMeshNodeAuthReqSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeAuthReqSuccess.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeAuthReqSuccess.setDescription('This object indicates total number of authentication request sent by this node, as a child mesh node to a parent mesh node, that completed.')
clMeshNodeReassocReqFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeReassocReqFailures.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeReassocReqFailures.setDescription('This object indicates total number of re-association request sent by this node, as a child mesh node to a parent mesh node, that failed.')
clMeshNodeReassocReqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeReassocReqTimeouts.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeReassocReqTimeouts.setDescription('This object indicates total number of re-association request sent by this node, as a child mesh node to a parent mesh node, that timed out.')
clMeshNodeReassocReqSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeReassocReqSuccess.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeReassocReqSuccess.setDescription('This object indicates total number of re-association request sent by this node, as a child mesh node to a parent mesh node, that completed.')
clMeshNodeReauthReqFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3, 1, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeReauthReqFailures.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeReauthReqFailures.setDescription('This object indicates total number of re-authentication request sent by this node, as a child mesh node to a parent mesh node, that failed.')
clMeshNodeReauthReqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3, 1, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeReauthReqTimeouts.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeReauthReqTimeouts.setDescription('This object indicates total number of re-authentication request sent by this node, as a child mesh node to a parent mesh node, that timed out.')
clMeshNodeReauthReqSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3, 1, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeReauthReqSuccess.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeReauthReqSuccess.setDescription('This object indicates total number of re-authentication request sent by this node, as a child mesh node to a parent mesh node, that completed.')
clMeshNodeUnknownAssocReq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3, 1, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeUnknownAssocReq.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeUnknownAssocReq.setDescription('This object indicates total number of unknown association request received by this node, as a parent mesh node from a child mesh node. This may happen when child is a unknown neighbor.')
clMeshNodeInvalidAssocReq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3, 1, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeInvalidAssocReq.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeInvalidAssocReq.setDescription('This object indicates total number of invalid association request that were received by this node, as a parent mesh node from a child mesh node. This may happen when child is a valid neighbor but is in a wrong state to be associated.')
clMeshNodeUnknownReauthReq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3, 1, 17), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeUnknownReauthReq.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeUnknownReauthReq.setDescription('This object indicates total number of unknown re-authentication request received by this node, as a parent mesh node from a child mesh node. This may happen when child is a unknown neighbor.')
clMeshNodeInvalidReauthReq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3, 1, 18), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeInvalidReauthReq.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeInvalidReauthReq.setDescription('This object indicates total number of invalid re-authentication request received by this node, as a parent mesh node from a child mesh node. This may happen when child is a valid neighbor but is in a wrong state to be re-authenticated.')
clMeshNodeUnknownReassocReq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3, 1, 19), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeUnknownReassocReq.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeUnknownReassocReq.setDescription('This object indicates total number of unknown re-association request received by this node, as a parent mesh node from a child mesh node. This may happen when child is a unknown neighbor.')
clMeshNodeInvalidReassocReq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 1, 3, 1, 20), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeInvalidReassocReq.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeInvalidReassocReq.setDescription('This object indicates total number of invalid re-association request received by this node, as a parent mesh node from a child mesh node. This may happen when child is a valid neighbor but is in a wrong state to be re-associated.')
clMeshNeighStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 2, 1), )
if mibBuilder.loadTexts: clMeshNeighStatsTable.setStatus('current')
if mibBuilder.loadTexts: clMeshNeighStatsTable.setDescription('This table represents information about packets transmitted to neighbor mesh node in wireless mesh network.')
clMeshNeighStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-MESH-MIB", "clMeshNeighborMacAddress"))
if mibBuilder.loadTexts: clMeshNeighStatsEntry.setStatus('current')
if mibBuilder.loadTexts: clMeshNeighStatsEntry.setDescription('An (conceptual) entry in this table is created when a mesh node transmit packets to another neighbor mesh node. Neighbor mesh node can be parent, child or neighbor. Entries are removed when the mesh node does not see another mesh node as neighbor.')
clMeshNeighAsParentTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 2, 1, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNeighAsParentTxPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshNeighAsParentTxPkts.setDescription('This object provides number of packets transmitted as a parent to a neighbor mesh node.')
clMeshNeighAsParentRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 2, 1, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNeighAsParentRxPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshNeighAsParentRxPkts.setDescription('This object indicates total number of packets received as a parent to a neighbor mesh node.')
clMeshNeighTotalTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 2, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNeighTotalTxPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshNeighTotalTxPkts.setDescription('This object indicates total number of packets transmitted to a neighbor mesh node. Total Tx packets is the sum of success Tx and retry Tx packets.')
clMeshNeighSuccessTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 2, 1, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNeighSuccessTxPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshNeighSuccessTxPkts.setDescription('This object indicates total number of packets successfully transmitted to a neighbor mesh node.')
clMeshNeighRetriesTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 2, 1, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNeighRetriesTxPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshNeighRetriesTxPkts.setDescription('This object indicates total number of retries were made at MAC layer to send the packet to a neighbor mesh node.')
clMeshNeighPoorSnrRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 2, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNeighPoorSnrRxPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshNeighPoorSnrRxPkts.setDescription('This object indicates total number of packets received from a neighbor mesh node whose SNR value were lower than threshold value. The threshold value is fixed at 8.')
clMeshAccessClassTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 4, 1), )
if mibBuilder.loadTexts: clMeshAccessClassTable.setStatus('current')
if mibBuilder.loadTexts: clMeshAccessClassTable.setDescription('This table represents mesh backhaul access class statistics for a mesh node. An entry in this table gets added when a mesh node associates to the controller and entry gets removed when mesh node disassociates from the controller.')
clMeshAccessClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-MESH-MIB", "clMeshNeighborMacAddress"))
if mibBuilder.loadTexts: clMeshAccessClassEntry.setStatus('current')
if mibBuilder.loadTexts: clMeshAccessClassEntry.setDescription('An (conceptual) entry in this table represents mesh backhaul access class statistics for a mesh node.')
clMeshAccessClassTotalTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 4, 1, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshAccessClassTotalTxPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshAccessClassTotalTxPkts.setDescription('This object represents total number of packets transmitted.')
clMeshAccessClassSuccTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 4, 1, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshAccessClassSuccTxPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshAccessClassSuccTxPkts.setDescription('This object represents total number of packets successfully transmitted.')
clMeshAccessClassRetryPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 4, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshAccessClassRetryPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshAccessClassRetryPkts.setDescription('This object represents total number of retried packets.')
clMeshAccessClassRTSAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 4, 1, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshAccessClassRTSAttempts.setStatus('current')
if mibBuilder.loadTexts: clMeshAccessClassRTSAttempts.setDescription('This object represents total number of RTS attempts.')
clMeshAccessClassRTSSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 4, 1, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshAccessClassRTSSuccess.setStatus('current')
if mibBuilder.loadTexts: clMeshAccessClassRTSSuccess.setDescription('This object represents total number of successful RTS packets.')
clMeshDataRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 5, 1), )
if mibBuilder.loadTexts: clMeshDataRateStatsTable.setStatus('current')
if mibBuilder.loadTexts: clMeshDataRateStatsTable.setDescription('This table represents statistics information of a mesh node for each of the supported data rates. An entry in this table gets added when a mesh node associates to the controller and entry gets removed when mesh node disassociates from the controller.')
clMeshDataRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-MESH-MIB", "clMeshNeighborMacAddress"), (0, "CISCO-LWAPP-MESH-STATS-MIB", "cLMeshDataRateIndex"))
if mibBuilder.loadTexts: clMeshDataRateStatsEntry.setStatus('current')
if mibBuilder.loadTexts: clMeshDataRateStatsEntry.setDescription('An (conceptual) entry in this table represents mesh backhaul data Rate statistics for a mesh node.')
cLMeshDataRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 5, 1, 1, 1), Unsigned32()).setUnits('Mbps')
if mibBuilder.loadTexts: cLMeshDataRateIndex.setStatus('current')
if mibBuilder.loadTexts: cLMeshDataRateIndex.setDescription('This object represents supported data rates of the access point.')
clMeshDataRateSuccTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 5, 1, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshDataRateSuccTxPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshDataRateSuccTxPkts.setDescription('This object represents total number of successfully transmitted packets .')
clMeshDataRateTxAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshDataRateTxAttempts.setStatus('current')
if mibBuilder.loadTexts: clMeshDataRateTxAttempts.setDescription('This object represents total number of transmitted attempts.')
clMeshNodeQueueOverflowNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 617, 2, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshNodeQueueOverflowNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeQueueOverflowNotifEnabled.setDescription("The object to control the generation of 'ciscoLwappMeshQueueOverflow' notification. A value of 'true' indicates that the agent generates 'ciscoLwappMeshQueueOverflow' notification. A value of 'false' indicates that the agent doesn't generate ciscoLwappMeshQueueOverflow notification.")
clMeshNodeStatsTimeInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 617, 2, 2), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(18000, 90000)).clone(18000)).setUnits('hundredths-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshNodeStatsTimeInterval.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeStatsTimeInterval.setDescription('The object represents the time interval after which statistics are populated for each mesh node.')
clMeshNodeSecBackhaulChangeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 617, 2, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshNodeSecBackhaulChangeNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeSecBackhaulChangeNotifEnabled.setDescription("This object controls the generation of 'ciscoLwappMeshSecBackhaulChange' notification. A value of 'true' indicates this notification will be generated. A value of 'false' indicates this notification will not be generated.")
clMeshNodeExcessiveAssociationNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 617, 2, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshNodeExcessiveAssociationNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeExcessiveAssociationNotifEnabled.setDescription("This object controls the generation of 'ciscoLwappMeshExcessiveAssociation' notification. A value of 'true' indicates notification will be generated. A value of 'false' indicates notification will not be generated.")
clMeshNodeExcessiveAssociationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 617, 2, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshNodeExcessiveAssociationThreshold.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeExcessiveAssociationThreshold.setDescription("This object represents cumulative association at parent by different child mesh nodes. Notification 'ciscoLwappMeshExcessiveAssociation' is raised when this number is crossed in one hour.")
clMeshInitiatingApName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 617, 1, 3, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clMeshInitiatingApName.setStatus('current')
if mibBuilder.loadTexts: clMeshInitiatingApName.setDescription('This object specifies the name of the AP that initiated the backhaul Change.')
ciscoLwappMeshQueueOverflow = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 617, 0, 1)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodePktQueuePeak"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodePktQueuePktsDropped"))
if mibBuilder.loadTexts: ciscoLwappMeshQueueOverflow.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshQueueOverflow.setDescription("This notification is sent by the agent when a queue overflows and as a result packets get dropped. After each time interval, defined by object 'clMeshNodeStatsTimeInterval', mesh node sends its queue statistics to the controller which also includes cumulative number of packets dropped, defined by object 'clMeshNodePktQueuePktsDropped'. If the packets dropped is higher than the previous time notification generated then this notification is raised..")
ciscoLwappMeshExcessiveAssociation = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 617, 0, 2)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeAssociationCount"))
if mibBuilder.loadTexts: ciscoLwappMeshExcessiveAssociation.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshExcessiveAssociation.setDescription("This notification is sent by the agent when cumulative association counter at parent mesh node exceeds value configured in 'clMeshNodeExcessiveAssociationThreshold'. cLApName is the name of the parent mesh node.")
ciscoLwappMeshSecBackhaulChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 617, 0, 3)).setObjects(("CISCO-LWAPP-MESH-STATS-MIB", "clMeshInitiatingApName"), ("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeBackhaul"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeSecBackhaulCount"))
if mibBuilder.loadTexts: ciscoLwappMeshSecBackhaulChange.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshSecBackhaulChange.setDescription('This notification is sent by the agent when the MAP identified by clApName intiates the backhaul change from primary to secondary. cLApName identifies the AP that receives the change. The MAC address of the initiating AP is sent as a part of the index of clMeshNodeBackhaul. clMeshNodeBackhaul identifies the secondary backhaul channel used. The MAC address of the receiving AP is sent as a part of the index of cLApName.')
ciscoLwappMeshStatsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 617, 3, 1))
ciscoLwappMeshStatsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 617, 3, 2))
ciscoLwappMeshStatsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 617, 3, 1, 1)).setObjects(("CISCO-LWAPP-MESH-STATS-MIB", "ciscoLwappMeshNodeStatsGroup"), ("CISCO-LWAPP-MESH-STATS-MIB", "ciscoLwappMeshNodePktQueueStatsGroup"), ("CISCO-LWAPP-MESH-STATS-MIB", "ciscoLwappMeshNodeSecStatsGroup"), ("CISCO-LWAPP-MESH-STATS-MIB", "ciscoLwappMeshStatsConfigObjsGroup"), ("CISCO-LWAPP-MESH-STATS-MIB", "ciscoLwappMeshStatsNotifsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshStatsMIBCompliance = ciscoLwappMeshStatsMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappMeshStatsMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappMeshStatsMIB module.')
ciscoLwappMeshStatsMIBComplianceR01 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 617, 3, 1, 2)).setObjects(("CISCO-LWAPP-MESH-STATS-MIB", "ciscoLwappMeshNodeStatsGroup"), ("CISCO-LWAPP-MESH-STATS-MIB", "ciscoLwappMeshNodePktQueueStatsGroup"), ("CISCO-LWAPP-MESH-STATS-MIB", "ciscoLwappMeshNodeSecStatsGroup"), ("CISCO-LWAPP-MESH-STATS-MIB", "ciscoLwappMeshStatsConfigObjsGroup"), ("CISCO-LWAPP-MESH-STATS-MIB", "ciscoLwappMeshStatsNotifsGroup"), ("CISCO-LWAPP-MESH-STATS-MIB", "ciscoLwappMeshNeighStatsGroup"), ("CISCO-LWAPP-MESH-STATS-MIB", "ciscoLwappMeshStatsNotifObjsGroup"), ("CISCO-LWAPP-MESH-STATS-MIB", "ciscoLwappMeshAccessClassGroup"), ("CISCO-LWAPP-MESH-STATS-MIB", "ciscoLwappMeshDataRateStatsGroup"), ("CISCO-LWAPP-MESH-STATS-MIB", "ciscoLwappMeshNodeStatsGroupSup1"), ("CISCO-LWAPP-MESH-STATS-MIB", "ciscoLwappMeshStatsConfigObjsGroupSup1"), ("CISCO-LWAPP-MESH-STATS-MIB", "ciscoLwappMeshStatsNotifsGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshStatsMIBComplianceR01 = ciscoLwappMeshStatsMIBComplianceR01.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshStatsMIBComplianceR01.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappMeshStatsMIB module.')
ciscoLwappMeshNodeStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 617, 3, 2, 1)).setObjects(("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeMalformedNeighPkts"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodePoorNeighSnrPkts"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeExcludedPkts"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeRxNeighReq"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeRxNeighRsp"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeTxNeighReq"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeTxNeighRsp"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeParentChanges"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshNodeStatsGroup = ciscoLwappMeshNodeStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshNodeStatsGroup.setDescription('This collection of objects represents statistics information about a mesh node such as the number of that were transmitted to or received from the mesh node, number association attempts, packets transmitted on secondary backhaul etc.')
ciscoLwappMeshNodePktQueueStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 617, 3, 2, 2)).setObjects(("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodePktQueueAvg"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodePktQueuePeak"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodePktQueuePktsDropped"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodePktQueueTimeStamp"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodePktQueueSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshNodePktQueueStatsGroup = ciscoLwappMeshNodePktQueueStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshNodePktQueueStatsGroup.setDescription('This collection of objects represent packets is different types of queues to be transmitted to neighbor meshnode or to controller.')
ciscoLwappMeshNodeSecStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 617, 3, 2, 3)).setObjects(("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeSecTxPkts"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeSecRxPkts"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeAssocReqFailures"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeAssocReqTimeouts"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeAssocReqSuccess"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeAuthReqFailures"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeAuthReqTimeouts"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeAuthReqSuccess"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeReassocReqFailures"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeReassocReqTimeouts"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeReassocReqSuccess"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeReauthReqFailures"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeReauthReqTimeouts"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeReauthReqSuccess"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeUnknownAssocReq"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeInvalidAssocReq"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeUnknownReauthReq"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeInvalidReauthReq"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeUnknownReassocReq"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeInvalidReassocReq"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshNodeSecStatsGroup = ciscoLwappMeshNodeSecStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshNodeSecStatsGroup.setDescription('This collection of objects represent packets that were transmitted or received by a child mesh node or a parent mesh node during security negotiations.')
ciscoLwappMeshStatsConfigObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 617, 3, 2, 4)).setObjects(("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeQueueOverflowNotifEnabled"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeStatsTimeInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshStatsConfigObjsGroup = ciscoLwappMeshStatsConfigObjsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshStatsConfigObjsGroup.setDescription('This collection of objects represent configuration objects for statistics of mesh network.')
ciscoLwappMeshStatsNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 617, 3, 2, 5)).setObjects(("CISCO-LWAPP-MESH-STATS-MIB", "ciscoLwappMeshQueueOverflow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshStatsNotifsGroup = ciscoLwappMeshStatsNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshStatsNotifsGroup.setDescription('This collection of objects represent the mesh network statistics related notifications sent by the agent to a network management station.')
ciscoLwappMeshNeighStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 617, 3, 2, 6)).setObjects(("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNeighAsParentTxPkts"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNeighAsParentRxPkts"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNeighTotalTxPkts"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNeighSuccessTxPkts"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNeighRetriesTxPkts"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNeighPoorSnrRxPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshNeighStatsGroup = ciscoLwappMeshNeighStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshNeighStatsGroup.setDescription('This collection of objects represent packets transmitted or received by a mesh node to or from a neighbor mesh node.')
ciscoLwappMeshStatsNotifObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 617, 3, 2, 7)).setObjects(("CISCO-LWAPP-MESH-STATS-MIB", "clMeshInitiatingApName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshStatsNotifObjsGroup = ciscoLwappMeshStatsNotifObjsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshStatsNotifObjsGroup.setDescription('This collection of objects represent the information carried by the mesh network statistics related notifications sent by the agent to a network management station.')
ciscoLwappMeshAccessClassGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 617, 3, 2, 8)).setObjects(("CISCO-LWAPP-MESH-STATS-MIB", "clMeshAccessClassTotalTxPkts"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshAccessClassSuccTxPkts"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshAccessClassRetryPkts"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshAccessClassRTSAttempts"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshAccessClassRTSSuccess"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshAccessClassGroup = ciscoLwappMeshAccessClassGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshAccessClassGroup.setDescription('Thia collection of objects represents statistics information about a meshnode such as the number of that were successful transmitted, number of dropped packets, retried packets.')
ciscoLwappMeshDataRateStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 617, 3, 2, 9)).setObjects(("CISCO-LWAPP-MESH-STATS-MIB", "clMeshDataRateSuccTxPkts"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshDataRateTxAttempts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshDataRateStatsGroup = ciscoLwappMeshDataRateStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshDataRateStatsGroup.setDescription('Thia collection of objects represents statistics information about a mesh node the number of that were successful transmitted packets, of each data rate.')
ciscoLwappMeshNodeStatsGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 617, 3, 2, 10)).setObjects(("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeSecBackhaulCount"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeAssociationCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshNodeStatsGroupSup1 = ciscoLwappMeshNodeStatsGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshNodeStatsGroupSup1.setDescription('This collection of objects represent statistics information of a mesh node such as the number of packets that were transmitted to or received from the mesh node, number association attempts, packets transmitted on secondary backhaul.')
ciscoLwappMeshStatsConfigObjsGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 617, 3, 2, 11)).setObjects(("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeSecBackhaulChangeNotifEnabled"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeExcessiveAssociationNotifEnabled"), ("CISCO-LWAPP-MESH-STATS-MIB", "clMeshNodeExcessiveAssociationThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshStatsConfigObjsGroupSup1 = ciscoLwappMeshStatsConfigObjsGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshStatsConfigObjsGroupSup1.setDescription('This collection of objects represent configuration objects for statistics of mesh network.')
ciscoLwappMeshStatsNotifsGroupSup1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 617, 3, 2, 12)).setObjects(("CISCO-LWAPP-MESH-STATS-MIB", "ciscoLwappMeshExcessiveAssociation"), ("CISCO-LWAPP-MESH-STATS-MIB", "ciscoLwappMeshSecBackhaulChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshStatsNotifsGroupSup1 = ciscoLwappMeshStatsNotifsGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshStatsNotifsGroupSup1.setDescription('This collection of objects represent the mesh network statistics related notifications sent by the agent to a network management station.')
mibBuilder.exportSymbols("CISCO-LWAPP-MESH-STATS-MIB", clMeshNeighStatsEntry=clMeshNeighStatsEntry, clMeshNodePktQueuePktsDropped=clMeshNodePktQueuePktsDropped, clMeshNodeRxNeighRsp=clMeshNodeRxNeighRsp, clMeshNeighAsParentRxPkts=clMeshNeighAsParentRxPkts, ciscoLwappMeshStatsMIBGroups=ciscoLwappMeshStatsMIBGroups, ciscoLwappMeshNodePktQueueStatsGroup=ciscoLwappMeshNodePktQueueStatsGroup, clMeshNodeUnknownAssocReq=clMeshNodeUnknownAssocReq, clMeshNodeMalformedNeighPkts=clMeshNodeMalformedNeighPkts, clMeshDataRateTxAttempts=clMeshDataRateTxAttempts, ciscoLwappMeshSecBackhaulChange=ciscoLwappMeshSecBackhaulChange, clMeshNodeQueueOverflowNotifEnabled=clMeshNodeQueueOverflowNotifEnabled, ciscoLwappMeshNodeSecStatsGroup=ciscoLwappMeshNodeSecStatsGroup, clMeshNodeInvalidReassocReq=clMeshNodeInvalidReassocReq, clMeshNodeUnknownReauthReq=clMeshNodeUnknownReauthReq, ciscoLwappMeshStatsMIBCompliance=ciscoLwappMeshStatsMIBCompliance, ciscoLwappMeshStatsMIBConfigObjects=ciscoLwappMeshStatsMIBConfigObjects, clMeshNodeAssocReqTimeouts=clMeshNodeAssocReqTimeouts, clMeshNodeExcessiveAssociationThreshold=clMeshNodeExcessiveAssociationThreshold, ciscoLwappMeshStatsConfigObjsGroup=ciscoLwappMeshStatsConfigObjsGroup, ciscoLwappMeshNodeStatsGroup=ciscoLwappMeshNodeStatsGroup, clMeshNodeStatsTable=clMeshNodeStatsTable, clMeshNodeReassocReqFailures=clMeshNodeReassocReqFailures, clMeshNeighTotalTxPkts=clMeshNeighTotalTxPkts, clMeshNodeUnknownReassocReq=clMeshNodeUnknownReassocReq, clMeshNodePktQueueStatsEntry=clMeshNodePktQueueStatsEntry, clMeshAccessClassEntry=clMeshAccessClassEntry, cLMeshDataRateIndex=cLMeshDataRateIndex, clMeshNodeSecBackhaulCount=clMeshNodeSecBackhaulCount, clMeshNodeAssociationCount=clMeshNodeAssociationCount, clMeshNodeTxNeighRsp=clMeshNodeTxNeighRsp, clMeshDataRateStatsEntry=clMeshDataRateStatsEntry, clMeshAccessClassRTSSuccess=clMeshAccessClassRTSSuccess, clMeshNeighSuccessTxPkts=clMeshNeighSuccessTxPkts, clMeshNeighStatsTable=clMeshNeighStatsTable, clMeshNodePktQueueStatsTable=clMeshNodePktQueueStatsTable, clMeshNodeStatsTimeInterval=clMeshNodeStatsTimeInterval, clMeshInitiatingApName=clMeshInitiatingApName, ciscoLwappMeshDataRateStatsGroup=ciscoLwappMeshDataRateStatsGroup, clMeshNodeSecStatsTable=clMeshNodeSecStatsTable, clMeshNodeReassocReqTimeouts=clMeshNodeReassocReqTimeouts, clMeshNodePktQueueTimeStamp=clMeshNodePktQueueTimeStamp, clMeshNodePktQueueSize=clMeshNodePktQueueSize, ciscoLwappMeshStatsNotifObjsGroup=ciscoLwappMeshStatsNotifObjsGroup, clMeshNeighAsParentTxPkts=clMeshNeighAsParentTxPkts, clMeshNeighRetriesTxPkts=clMeshNeighRetriesTxPkts, clMeshNodePktQueueAvg=clMeshNodePktQueueAvg, clMeshNeighPoorSnrRxPkts=clMeshNeighPoorSnrRxPkts, ciscoLwappMeshStatsMIBObjects=ciscoLwappMeshStatsMIBObjects, ciscoLwappMeshNodeStats=ciscoLwappMeshNodeStats, clMeshNodeStatsEntry=clMeshNodeStatsEntry, clMeshNodeSecStatsEntry=clMeshNodeSecStatsEntry, ciscoLwappMeshNeighStats=ciscoLwappMeshNeighStats, ciscoLwappMeshDataRateStats=ciscoLwappMeshDataRateStats, clMeshAccessClassTable=clMeshAccessClassTable, clMeshNodeSecBackhaulChangeNotifEnabled=clMeshNodeSecBackhaulChangeNotifEnabled, PYSNMP_MODULE_ID=ciscoLwappMeshStatsMIB, clMeshNodePktQueueIndex=clMeshNodePktQueueIndex, clMeshNodeReauthReqFailures=clMeshNodeReauthReqFailures, clMeshNodeAuthReqTimeouts=clMeshNodeAuthReqTimeouts, ciscoLwappMeshStatsMIBComplianceR01=ciscoLwappMeshStatsMIBComplianceR01, ciscoLwappMeshQueueOverflow=ciscoLwappMeshQueueOverflow, ciscoLwappMeshStatsMIBConform=ciscoLwappMeshStatsMIBConform, clMeshNodePktQueuePeak=clMeshNodePktQueuePeak, clMeshAccessClassSuccTxPkts=clMeshAccessClassSuccTxPkts, clMeshNodeReassocReqSuccess=clMeshNodeReassocReqSuccess, clMeshNodeSecTxPkts=clMeshNodeSecTxPkts, ciscoLwappMeshStatsMIBNotifs=ciscoLwappMeshStatsMIBNotifs, clMeshNodeRxNeighReq=clMeshNodeRxNeighReq, clMeshAccessClassRetryPkts=clMeshAccessClassRetryPkts, ciscoLwappMeshStatsNotifsGroupSup1=ciscoLwappMeshStatsNotifsGroupSup1, clMeshNodeAuthReqSuccess=clMeshNodeAuthReqSuccess, clMeshNodeInvalidReauthReq=clMeshNodeInvalidReauthReq, ciscoLwappMeshStatsMIB=ciscoLwappMeshStatsMIB, ciscoLwappMeshStatsMIBNotifObjects=ciscoLwappMeshStatsMIBNotifObjects, ciscoLwappMeshExcessiveAssociation=ciscoLwappMeshExcessiveAssociation, ciscoLwappMeshNodeStatsGroupSup1=ciscoLwappMeshNodeStatsGroupSup1, ciscoLwappMeshAccessClass=ciscoLwappMeshAccessClass, clMeshNodePoorNeighSnrPkts=clMeshNodePoorNeighSnrPkts, clMeshAccessClassTotalTxPkts=clMeshAccessClassTotalTxPkts, ciscoLwappMeshStatsNotifsGroup=ciscoLwappMeshStatsNotifsGroup, clMeshNodeAuthReqFailures=clMeshNodeAuthReqFailures, ciscoLwappMeshStatsConfigObjsGroupSup1=ciscoLwappMeshStatsConfigObjsGroupSup1, clMeshNodeParentChanges=clMeshNodeParentChanges, clMeshNodeInvalidAssocReq=clMeshNodeInvalidAssocReq, clMeshAccessClassRTSAttempts=clMeshAccessClassRTSAttempts, clMeshNodeTxNeighReq=clMeshNodeTxNeighReq, clMeshNodeReauthReqTimeouts=clMeshNodeReauthReqTimeouts, clMeshNodeExcludedPkts=clMeshNodeExcludedPkts, clMeshDataRateSuccTxPkts=clMeshDataRateSuccTxPkts, clMeshNodeExcessiveAssociationNotifEnabled=clMeshNodeExcessiveAssociationNotifEnabled, clMeshNodeSecRxPkts=clMeshNodeSecRxPkts, clMeshDataRateStatsTable=clMeshDataRateStatsTable, clMeshNodeReauthReqSuccess=clMeshNodeReauthReqSuccess, clMeshNodeAssocReqSuccess=clMeshNodeAssocReqSuccess, clMeshNodeAssocReqFailures=clMeshNodeAssocReqFailures, ciscoLwappMeshAccessClassGroup=ciscoLwappMeshAccessClassGroup, ciscoLwappMeshNeighStatsGroup=ciscoLwappMeshNeighStatsGroup, ciscoLwappMeshStatsMIBCompliances=ciscoLwappMeshStatsMIBCompliances)
