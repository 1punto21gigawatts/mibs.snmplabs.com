#
# PySNMP MIB module NetWare-Server-Alarm-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NetWare-Server-Alarm-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:26:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
InternationalDisplayString, = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "InternationalDisplayString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Gauge32, TimeTicks, iso, ObjectIdentity, Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64, Counter32, IpAddress, Bits, enterprises, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "TimeTicks", "iso", "ObjectIdentity", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64", "Counter32", "IpAddress", "Bits", "enterprises", "NotificationType", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
novell = MibIdentifier((1, 3, 6, 1, 4, 1, 23))
mibDoc = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2))
nwalarm_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 10)).setLabel("nwalarm-mib")
trapinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 10, 1))
class NetNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

memoryAddress = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: memoryAddress.setStatus('mandatory')
if mibBuilder.loadTexts: memoryAddress.setDescription('An invalid memory address that an NLM tried to write to or read from.')
auditEventNumber = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 2), Integer32())
if mibBuilder.loadTexts: auditEventNumber.setStatus('mandatory')
if mibBuilder.loadTexts: auditEventNumber.setDescription('An audit error code returned on an attempt to read an invalid volume.')
blockNumber = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 3), Integer32())
if mibBuilder.loadTexts: blockNumber.setStatus('mandatory')
if mibBuilder.loadTexts: blockNumber.setDescription('The block number of a partition that needed to be redirected.')
numberOfBlocks = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 4), Integer32())
if mibBuilder.loadTexts: numberOfBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: numberOfBlocks.setDescription('The number of redirection blocks available.')
packetSize = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 5), Integer32())
if mibBuilder.loadTexts: packetSize.setStatus('mandatory')
if mibBuilder.loadTexts: packetSize.setDescription('The maximum packet size the LAN driver can handle.')
boardNumber = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 6), Integer32())
if mibBuilder.loadTexts: boardNumber.setStatus('mandatory')
if mibBuilder.loadTexts: boardNumber.setDescription('The number of the LAN board to which the protocol stack is bound.')
codeOffset = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 7), Integer32())
if mibBuilder.loadTexts: codeOffset.setStatus('mandatory')
if mibBuilder.loadTexts: codeOffset.setDescription('A code address, within an NLM, that is causing a problem.')
connectionNumber = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 8), Integer32())
if mibBuilder.loadTexts: connectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: connectionNumber.setDescription('This could be either an NLM connection or a user connection.')
dataStreamNumber = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 9), Integer32())
if mibBuilder.loadTexts: dataStreamNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dataStreamNumber.setDescription('')
diskSpace = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 10), Integer32())
if mibBuilder.loadTexts: diskSpace.setStatus('mandatory')
if mibBuilder.loadTexts: diskSpace.setDescription('An amount of volume disk space, measured in kilobytes.')
domainName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 11), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: domainName.setStatus('mandatory')
if mibBuilder.loadTexts: domainName.setDescription('')
resourceDescription = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 12), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: resourceDescription.setStatus('mandatory')
if mibBuilder.loadTexts: resourceDescription.setDescription('')
deviceName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 13), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: deviceName.setStatus('mandatory')
if mibBuilder.loadTexts: deviceName.setDescription('')
dosType = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 14), Integer32())
if mibBuilder.loadTexts: dosType.setStatus('mandatory')
if mibBuilder.loadTexts: dosType.setDescription('')
errorNumber = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 15), Integer32())
if mibBuilder.loadTexts: errorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: errorNumber.setDescription('An unknown error returned during decompression.')
exceptionName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 16), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: exceptionName.setStatus('mandatory')
if mibBuilder.loadTexts: exceptionName.setDescription('')
eipAddress = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 17), Integer32())
if mibBuilder.loadTexts: eipAddress.setStatus('mandatory')
if mibBuilder.loadTexts: eipAddress.setDescription('An instruction pointer value causing an exception.')
fileName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 18), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: fileName.setStatus('mandatory')
if mibBuilder.loadTexts: fileName.setDescription('')
pathName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 19), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 124)))
if mibBuilder.loadTexts: pathName.setStatus('mandatory')
if mibBuilder.loadTexts: pathName.setDescription('')
fileOffset = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 20), Integer32())
if mibBuilder.loadTexts: fileOffset.setStatus('mandatory')
if mibBuilder.loadTexts: fileOffset.setDescription('An offset, in a file, that is causing a problem.')
ncpFunctionNumber = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 21), Integer32())
if mibBuilder.loadTexts: ncpFunctionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ncpFunctionNumber.setDescription('Function number, in the workstation shell, that is causing a problem.')
fileSize = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 22), Integer32())
if mibBuilder.loadTexts: fileSize.setStatus('mandatory')
if mibBuilder.loadTexts: fileSize.setDescription('')
fileValue = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 23), Integer32())
if mibBuilder.loadTexts: fileValue.setStatus('mandatory')
if mibBuilder.loadTexts: fileValue.setDescription('Contents of a file at a particular offset within the file.')
fileLength = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 24), Integer32())
if mibBuilder.loadTexts: fileLength.setStatus('mandatory')
if mibBuilder.loadTexts: fileLength.setDescription('Length of temporary file created during file compression.')
interruptNumber = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 25), Integer32())
if mibBuilder.loadTexts: interruptNumber.setStatus('mandatory')
if mibBuilder.loadTexts: interruptNumber.setDescription('Interrupt number for which there is no interrupt service routine registered with the OS.')
nlmName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 26), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)))
if mibBuilder.loadTexts: nlmName.setStatus('mandatory')
if mibBuilder.loadTexts: nlmName.setDescription('')
mediaLabel = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 27), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: mediaLabel.setStatus('mandatory')
if mibBuilder.loadTexts: mediaLabel.setDescription('')
message = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 28), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512)))
if mibBuilder.loadTexts: message.setStatus('mandatory')
if mibBuilder.loadTexts: message.setDescription('This is a generic message containing all parameters substituted in the control string.')
numberOfFailedMemoryAllocAttempts = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 29), Integer32())
if mibBuilder.loadTexts: numberOfFailedMemoryAllocAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: numberOfFailedMemoryAllocAttempts.setDescription('Number of failed memory requests.')
numberOfResources = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 30), Integer32())
if mibBuilder.loadTexts: numberOfResources.setStatus('mandatory')
if mibBuilder.loadTexts: numberOfResources.setDescription('Number of resources not released by an NLM while unloading.')
networkAddress = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 31), NetNumber())
if mibBuilder.loadTexts: networkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: networkAddress.setDescription('An IPX network address.')
numberOfFailedFileLockRequests = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 32), Integer32())
if mibBuilder.loadTexts: numberOfFailedFileLockRequests.setStatus('mandatory')
if mibBuilder.loadTexts: numberOfFailedFileLockRequests.setDescription('Number of open file lock requests that failed.')
processName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 33), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: processName.setStatus('mandatory')
if mibBuilder.loadTexts: processName.setDescription('Name of an executing process.')
partitionNumber = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 34), Integer32())
if mibBuilder.loadTexts: partitionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: partitionNumber.setDescription('A partition number.')
protocolName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 35), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: protocolName.setStatus('mandatory')
if mibBuilder.loadTexts: protocolName.setDescription('Name of a protocol stack that is loaded and running.')
numberOfPackets = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 36), Integer32())
if mibBuilder.loadTexts: numberOfPackets.setStatus('mandatory')
if mibBuilder.loadTexts: numberOfPackets.setDescription('Number of incomplete packets received by IPX.')
resourceName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 37), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: resourceName.setStatus('mandatory')
if mibBuilder.loadTexts: resourceName.setDescription('')
numberOfFailedRecordLockRequests = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 38), Integer32())
if mibBuilder.loadTexts: numberOfFailedRecordLockRequests.setStatus('mandatory')
if mibBuilder.loadTexts: numberOfFailedRecordLockRequests.setDescription('Number of record lock requests that failed.')
serverName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 39), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48)))
if mibBuilder.loadTexts: serverName.setStatus('mandatory')
if mibBuilder.loadTexts: serverName.setDescription('')
stationNumber = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 40), Integer32())
if mibBuilder.loadTexts: stationNumber.setStatus('mandatory')
if mibBuilder.loadTexts: stationNumber.setDescription('A station number.')
networkAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 41), NetNumber())
if mibBuilder.loadTexts: networkAddress1.setStatus('mandatory')
if mibBuilder.loadTexts: networkAddress1.setDescription('An IPX network address.')
ncpSubFunctionNumber = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 42), Integer32())
if mibBuilder.loadTexts: ncpSubFunctionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ncpSubFunctionNumber.setDescription('Function number, in the workstation shell, that is causing a problem.')
nlmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("recoverable", 3), ("critical", 4), ("fatal", 5), ("operationAborted", 6))))
if mibBuilder.loadTexts: nlmSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: nlmSeverity.setDescription('The severity of a generic alert.')
trapTime = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 44), Integer32())
if mibBuilder.loadTexts: trapTime.setStatus('mandatory')
if mibBuilder.loadTexts: trapTime.setDescription('The number of seconds since midnight of January 1,1970 GMT.')
taskNumber = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 45), Integer32())
if mibBuilder.loadTexts: taskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: taskNumber.setDescription('A station task number.')
numberOfTransactions = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 46), Integer32())
if mibBuilder.loadTexts: numberOfTransactions.setStatus('mandatory')
if mibBuilder.loadTexts: numberOfTransactions.setDescription('Number of transactions delayed by TTS due to the maximum number of transactions being exceeded.')
serverTime = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 47), Integer32())
if mibBuilder.loadTexts: serverTime.setStatus('mandatory')
if mibBuilder.loadTexts: serverTime.setDescription('The system time set at the server or workstation console.')
pathFileName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 48), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 124)))
if mibBuilder.loadTexts: pathFileName.setStatus('mandatory')
if mibBuilder.loadTexts: pathFileName.setDescription('')
userName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 49), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48)))
if mibBuilder.loadTexts: userName.setStatus('mandatory')
if mibBuilder.loadTexts: userName.setDescription('')
volumeName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 50), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: volumeName.setStatus('mandatory')
if mibBuilder.loadTexts: volumeName.setDescription('')
volumeNumber = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 51), Integer32())
if mibBuilder.loadTexts: volumeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: volumeNumber.setDescription('A volume number.')
lanDriverName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 52), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256)))
if mibBuilder.loadTexts: lanDriverName.setStatus('mandatory')
if mibBuilder.loadTexts: lanDriverName.setDescription('LAN driver name.')
routerName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 53), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48)))
if mibBuilder.loadTexts: routerName.setStatus('mandatory')
if mibBuilder.loadTexts: routerName.setDescription('')
macAddress = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 54), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: macAddress.setStatus('mandatory')
if mibBuilder.loadTexts: macAddress.setDescription('Six byte MAC address.')
macAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: macAddress1.setStatus('mandatory')
if mibBuilder.loadTexts: macAddress1.setDescription('Six byte MAC address.')
numberOfConnections = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 56), Integer32())
if mibBuilder.loadTexts: numberOfConnections.setStatus('mandatory')
if mibBuilder.loadTexts: numberOfConnections.setDescription('')
socketNumber = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 57), Integer32())
if mibBuilder.loadTexts: socketNumber.setStatus('mandatory')
if mibBuilder.loadTexts: socketNumber.setDescription('')
accountName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 58), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48)))
if mibBuilder.loadTexts: accountName.setStatus('mandatory')
if mibBuilder.loadTexts: accountName.setDescription('')
fileMiscInfo = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 59), Integer32())
if mibBuilder.loadTexts: fileMiscInfo.setStatus('mandatory')
if mibBuilder.loadTexts: fileMiscInfo.setDescription('')
callBackNumber = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 60), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: callBackNumber.setStatus('mandatory')
if mibBuilder.loadTexts: callBackNumber.setDescription('Telephone number to call back.')
baudRate = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 61), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11))
if mibBuilder.loadTexts: baudRate.setStatus('mandatory')
if mibBuilder.loadTexts: baudRate.setDescription('')
objectName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 62), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256)))
if mibBuilder.loadTexts: objectName.setStatus('mandatory')
if mibBuilder.loadTexts: objectName.setDescription('')
userName1 = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 63), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48)))
if mibBuilder.loadTexts: userName1.setStatus('mandatory')
if mibBuilder.loadTexts: userName1.setDescription('')
dosType1 = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 64), Integer32())
if mibBuilder.loadTexts: dosType1.setStatus('mandatory')
if mibBuilder.loadTexts: dosType1.setDescription('')
blockNumber1 = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 65), Integer32())
if mibBuilder.loadTexts: blockNumber1.setStatus('mandatory')
if mibBuilder.loadTexts: blockNumber1.setDescription('The block number of a partition that needed to be redirected.')
internalNetworkAddress = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 66), NetNumber())
if mibBuilder.loadTexts: internalNetworkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: internalNetworkAddress.setDescription('Four byte internal network number.')
internalNetworkAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 67), NetNumber())
if mibBuilder.loadTexts: internalNetworkAddress1.setStatus('mandatory')
if mibBuilder.loadTexts: internalNetworkAddress1.setDescription('Four byte internal network number.')
macAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 68), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: macAddress2.setStatus('mandatory')
if mibBuilder.loadTexts: macAddress2.setDescription('Six byte MAC address.')
serverName1 = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 69), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48)))
if mibBuilder.loadTexts: serverName1.setStatus('mandatory')
if mibBuilder.loadTexts: serverName1.setDescription('')
socketNumber1 = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 70), Integer32())
if mibBuilder.loadTexts: socketNumber1.setStatus('mandatory')
if mibBuilder.loadTexts: socketNumber1.setDescription('')
fileMiscInfo1 = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 71), Integer32())
if mibBuilder.loadTexts: fileMiscInfo1.setStatus('mandatory')
if mibBuilder.loadTexts: fileMiscInfo1.setDescription('')
fileSize1 = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 72), Integer32())
if mibBuilder.loadTexts: fileSize1.setStatus('mandatory')
if mibBuilder.loadTexts: fileSize1.setDescription('')
fileSize2 = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 73), Integer32())
if mibBuilder.loadTexts: fileSize2.setStatus('mandatory')
if mibBuilder.loadTexts: fileSize2.setDescription('')
packetSize1 = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 74), Integer32())
if mibBuilder.loadTexts: packetSize1.setStatus('mandatory')
if mibBuilder.loadTexts: packetSize1.setDescription('')
diskName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 75), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: diskName.setStatus('mandatory')
if mibBuilder.loadTexts: diskName.setDescription('Disk Name')
reason = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 76), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 35)))
if mibBuilder.loadTexts: reason.setStatus('mandatory')
if mibBuilder.loadTexts: reason.setDescription('Reason why the disk was deactivated')
maximumPercent = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 77), Integer32())
if mibBuilder.loadTexts: maximumPercent.setStatus('mandatory')
if mibBuilder.loadTexts: maximumPercent.setDescription('Maximum percentage of volume space used')
iRamLength = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 78), Integer32())
if mibBuilder.loadTexts: iRamLength.setStatus('mandatory')
if mibBuilder.loadTexts: iRamLength.setDescription('RAM length')
iTimerTicks = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 79), Integer32())
if mibBuilder.loadTexts: iTimerTicks.setStatus('mandatory')
if mibBuilder.loadTexts: iTimerTicks.setDescription('Timer ticks')
pollingLoops = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 80), Integer32())
if mibBuilder.loadTexts: pollingLoops.setStatus('mandatory')
if mibBuilder.loadTexts: pollingLoops.setDescription('server polling loops')
iHopsCount = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 81), Integer32())
if mibBuilder.loadTexts: iHopsCount.setStatus('mandatory')
if mibBuilder.loadTexts: iHopsCount.setDescription('hop count')
synchronizationRadius = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 82), Integer32())
if mibBuilder.loadTexts: synchronizationRadius.setStatus('mandatory')
if mibBuilder.loadTexts: synchronizationRadius.setDescription('server polling loops')
cmmndLnPrmtr = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 83), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256)))
if mibBuilder.loadTexts: cmmndLnPrmtr.setStatus('mandatory')
if mibBuilder.loadTexts: cmmndLnPrmtr.setDescription('')
volumePercentage = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 84), Integer32())
if mibBuilder.loadTexts: volumePercentage.setStatus('mandatory')
if mibBuilder.loadTexts: volumePercentage.setDescription('server polling loops')
szReason = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 85), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 35)))
if mibBuilder.loadTexts: szReason.setStatus('mandatory')
if mibBuilder.loadTexts: szReason.setDescription('Reason why SFT server failed')
iRamStart = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 10, 1, 86), Integer32())
if mibBuilder.loadTexts: iRamStart.setStatus('mandatory')
if mibBuilder.loadTexts: iRamStart.setDescription('RAM start address')
outOfShortTermMemoryRequestFailed = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,1)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "numberOfFailedMemoryAllocAttempts"))
if mibBuilder.loadTexts: outOfShortTermMemoryRequestFailed.setDescription('The system failed on one or more short-term memory requests.')
errWritingToTheExtendedDirSpace = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,2)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: errWritingToTheExtendedDirSpace.setDescription('Error occurred while writing to hard disk. Data may be corrupted.')
errWritingToFile = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,3)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "dataStreamNumber"))
if mibBuilder.loadTexts: errWritingToFile.setDescription('An error occurred while writing to file (filename not accessible) data stream by server.')
errWritingToFileUsr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,4)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "dataStreamNumber"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "stationNumber"))
if mibBuilder.loadTexts: errWritingToFileUsr.setDescription('An error occurred while writing to file (filename not accessible) data stream by user.')
errWritingToFileDataStream = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,5)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "fileName"), ("NetWare-Server-Alarm-MIB", "dataStreamNumber"), ("NetWare-Server-Alarm-MIB", "volumeName"), ("NetWare-Server-Alarm-MIB", "pathName"))
if mibBuilder.loadTexts: errWritingToFileDataStream.setDescription('Error occurred while writing to file data stream by server.')
errWritingToFileDataStreamUsr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,6)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "fileName"), ("NetWare-Server-Alarm-MIB", "dataStreamNumber"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "stationNumber"), ("NetWare-Server-Alarm-MIB", "volumeName"), ("NetWare-Server-Alarm-MIB", "pathName"))
if mibBuilder.loadTexts: errWritingToFileDataStreamUsr.setDescription('An error occurred while writing to file data stream by user.')
fileReaderrSrvrNofileName = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,7)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "fileOffset"), ("NetWare-Server-Alarm-MIB", "dataStreamNumber"))
if mibBuilder.loadTexts: fileReaderrSrvrNofileName.setDescription('File read Error. Error getting file name. Request from server.')
fileReaderrUsrNofileName = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,8)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "fileOffset"), ("NetWare-Server-Alarm-MIB", "dataStreamNumber"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "stationNumber"))
if mibBuilder.loadTexts: fileReaderrUsrNofileName.setDescription('File read Error. Error getting file name. Request from user.')
fileReaderrDSSrvr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,9)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "fileName"), ("NetWare-Server-Alarm-MIB", "fileOffset"), ("NetWare-Server-Alarm-MIB", "dataStreamNumber"), ("NetWare-Server-Alarm-MIB", "volumeName"), ("NetWare-Server-Alarm-MIB", "pathName"))
if mibBuilder.loadTexts: fileReaderrDSSrvr.setDescription('Error reading file data stream. Request from server.')
fileReaderrDSUsr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,10)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "fileName"), ("NetWare-Server-Alarm-MIB", "fileOffset"), ("NetWare-Server-Alarm-MIB", "dataStreamNumber"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "stationNumber"), ("NetWare-Server-Alarm-MIB", "volumeName"), ("NetWare-Server-Alarm-MIB", "pathName"))
if mibBuilder.loadTexts: fileReaderrDSUsr.setDescription('Error reading file data stream. Request from user.')
fileWritePreReaderrSrvr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,11)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "fileOffset"), ("NetWare-Server-Alarm-MIB", "dataStreamNumber"))
if mibBuilder.loadTexts: fileWritePreReaderrSrvr.setDescription('File write (pre-read) error in a data stream. Error getting file name. Read was requested by the server.')
fileWritePreReaderrUsr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,12)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "fileOffset"), ("NetWare-Server-Alarm-MIB", "dataStreamNumber"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "stationNumber"))
if mibBuilder.loadTexts: fileWritePreReaderrUsr.setDescription('File write (pre-read) error in a data stream. Error getting file name. Read was requested by the user.')
fileWritePreReaderrDSSrvr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,13)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "fileName"), ("NetWare-Server-Alarm-MIB", "fileOffset"), ("NetWare-Server-Alarm-MIB", "dataStreamNumber"), ("NetWare-Server-Alarm-MIB", "volumeName"), ("NetWare-Server-Alarm-MIB", "pathName"))
if mibBuilder.loadTexts: fileWritePreReaderrDSSrvr.setDescription('File write (pre-read) error in a data stream. Read was requested by user.')
fileWritePreReaderrDSUsr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,14)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "fileName"), ("NetWare-Server-Alarm-MIB", "fileOffset"), ("NetWare-Server-Alarm-MIB", "dataStreamNumber"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "stationNumber"), ("NetWare-Server-Alarm-MIB", "volumeName"), ("NetWare-Server-Alarm-MIB", "pathName"))
if mibBuilder.loadTexts: fileWritePreReaderrDSUsr.setDescription('File write (pre-read) error in a data stream. Read requested by the user.')
cacheMemAllocExceededMinLeftLimit = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,15)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: cacheMemAllocExceededMinLeftLimit.setDescription('Cache memory allocator exceeded minimum cache buffer limit.')
cacheMemAllocOutOfMem = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,16)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: cacheMemAllocOutOfMem.setDescription('Cache memory allocator out of available memory.')
numberOfCacheBuffersGettingLow = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,17)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: numberOfCacheBuffersGettingLow.setDescription('The OS tried to allocate a cache buffer and the remaining number of buffers was less than the system limit.')
volOfDiskSpace = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,18)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: volOfDiskSpace.setDescription('The indicated volume is out of disk space.')
volOfDiskSpaceNoPurge = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,19)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"), ("NetWare-Server-Alarm-MIB", "diskSpace"))
if mibBuilder.loadTexts: volOfDiskSpaceNoPurge.setDescription('The indicated volume is out of disk space. Space cannot be reclaimed by purging files.')
volAlmostOutOfDiskSpace = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,20)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: volAlmostOutOfDiskSpace.setDescription('The available space on the volume has reached the SET parameter Volume Low MINOR Threshold value.')
errWritingFatTables = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,21)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: errWritingFatTables.setDescription('An error has occurred while writing the FAT tables for a particular volume.')
errWritingDirectoryBlk = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,22)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: errWritingDirectoryBlk.setDescription('An error has occurred while writing a directory block on a particular volume.')
dirCopyReadErr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,23)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: dirCopyReadErr.setDescription('An error has occurred while reading one copy of a directory on a particular volume.')
errReadingBothCopiesofDir = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,24)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: errReadingBothCopiesofDir.setDescription('An error has occurred while reading both copies of directory from a particular volume.')
allocateDirEntryWriteError = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,25)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: allocateDirEntryWriteError.setDescription('A disk error occurred while writing a newly allocated block on a volume. HotFix could not correct it.')
errExpandingDirDuetoWriteErr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,26)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: errExpandingDirDuetoWriteErr.setDescription('A disk error occurred on a volume while expanding an existing directory. HotFix could not correct it.')
dirReachedItsLimit = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,27)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: dirReachedItsLimit.setDescription('A disk error occurred on a volume while expanding an existing directory because the directory size reached its limit.')
errExpandingNoDiskSpace = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,28)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: errExpandingNoDiskSpace.setDescription('A disk error occurred on a volume while expanding an existing directory because no more disk space was available.')
errExpandingNoMemSpace = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,29)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: errExpandingNoMemSpace.setDescription('A disk error occurred on a volume while expanding an existing directory because no more server memory was available to expand directory tables.')
dirSizeGettingTooLrgeForMem = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,30)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: dirSizeGettingTooLrgeForMem.setDescription('The volume directory table is getting too large for server memory.')
lanReceiveBuffLimitReached = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,31)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: lanReceiveBuffLimitReached.setDescription('No OS LAN buffers available for receiving packets.')
connTerminatedByWatchDog = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,32)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "stationNumber"))
if mibBuilder.loadTexts: connTerminatedByWatchDog.setDescription('Watchdog cleared the user connection')
copyrightViolation = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,33)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "networkAddress"), ("NetWare-Server-Alarm-MIB", "macAddress"))
if mibBuilder.loadTexts: copyrightViolation.setDescription("Two NetWare servers on the network have identical serial numbers. This is a violation of NetWare's copyright and is illegal.")
writeFault = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,34)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "processName"), ("NetWare-Server-Alarm-MIB", "nlmName"), ("NetWare-Server-Alarm-MIB", "codeOffset"), ("NetWare-Server-Alarm-MIB", "memoryAddress"))
if mibBuilder.loadTexts: writeFault.setDescription('An NLM tried to write to a memory location where it did not have write rights.')
readFault = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,35)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "processName"), ("NetWare-Server-Alarm-MIB", "nlmName"), ("NetWare-Server-Alarm-MIB", "codeOffset"), ("NetWare-Server-Alarm-MIB", "memoryAddress"))
if mibBuilder.loadTexts: readFault.setDescription('An NLM tried to read a memory location where it did not have read rights.')
ipxReceivedIncomPacket = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,36)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "networkAddress"), ("NetWare-Server-Alarm-MIB", "macAddress"), ("NetWare-Server-Alarm-MIB", "numberOfPackets"))
if mibBuilder.loadTexts: ipxReceivedIncomPacket.setDescription('IPX is receiving incomplete packets from a node.')
unableToCreateVOLERR = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,37)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: unableToCreateVOLERR.setDescription('The system error log file (VOL$LOG.ERR) could not be created.')
unableToWriteVOLERR = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,38)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: unableToWriteVOLERR.setDescription('The system error log file (VOL$LOG.ERR) could not be written to.')
volOprDespiteDeviceDriveDeact = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,39)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: volOprDespiteDeviceDriveDeact.setDescription('The volume is still accessible although it is no longer fully mirrored.')
loginDisabledByUser = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,40)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "stationNumber"))
if mibBuilder.loadTexts: loginDisabledByUser.setDescription('A specified user issued a disable login command.')
loginEnabledByUser = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,41)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "stationNumber"))
if mibBuilder.loadTexts: loginEnabledByUser.setDescription('A specified user issued an enable login command.')
clrStnByConsole = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,42)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "stationNumber"))
if mibBuilder.loadTexts: clrStnByConsole.setDescription('A specified connection was cleared at the server console.')
clrStnByUsr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,43)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "connectionNumber"), ("NetWare-Server-Alarm-MIB", "userName1"), ("NetWare-Server-Alarm-MIB", "stationNumber"))
if mibBuilder.loadTexts: clrStnByUsr.setDescription('A specified connection was cleared from a workstation.')
fileServerDowned = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,44)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "stationNumber"))
if mibBuilder.loadTexts: fileServerDowned.setDescription('The file server was downed from a workstation console.')
errOpeningRIPSocket = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,45)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: errOpeningRIPSocket.setDescription('The server encountered an error while opening a RIP socket.')
rtrConfigErr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,46)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "macAddress"), ("NetWare-Server-Alarm-MIB", "networkAddress"), ("NetWare-Server-Alarm-MIB", "networkAddress1"))
if mibBuilder.loadTexts: rtrConfigErr.setDescription('A router claims that a particular network address should actually be another address.')
lanDriverLoopBack = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,47)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "networkAddress"))
if mibBuilder.loadTexts: lanDriverLoopBack.setDescription('A particular LAN driver received its own packet.')
dupInternetAddr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,48)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: dupInternetAddr.setDescription('Two routers are claiming the same internet address.')
lanBdUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,49)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "networkAddress"))
if mibBuilder.loadTexts: lanBdUnreachable.setDescription('An IPX local network was removed because the LAN board was unreachable.')
ipxUnbndRequest = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,50)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "networkAddress"))
if mibBuilder.loadTexts: ipxUnbndRequest.setDescription('An IPX local network was removed because of an UNBIND request.')
errOpeningSAPSocket = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,51)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: errOpeningSAPSocket.setDescription('The server encountered an error while opening a SAP socket.')
rtrClaimingSameInterAddr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,52)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "routerName"))
if mibBuilder.loadTexts: rtrClaimingSameInterAddr.setDescription('Two routers are claiming the same internet address.')
spuriousInt = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,53)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "interruptNumber"))
if mibBuilder.loadTexts: spuriousInt.setDescription('No interrupt service routine was registered with this driver.')
checksumInvalid = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,54)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "networkAddress"), ("NetWare-Server-Alarm-MIB", "macAddress"))
if mibBuilder.loadTexts: checksumInvalid.setDescription('An IPX NCP packet with invalid checksum was received. Possible network corruption.')
prmyPicLostInterrupt = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,55)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: prmyPicLostInterrupt.setDescription('The hardware set an interrupt but when the CPU responded to it the interrupt was no longer available. The hardware interrupt controller that lost the interrupt was the primary interrupt controller.')
scndryPicLostInterrupt = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,56)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: scndryPicLostInterrupt.setDescription('The hardware set an interrupt but when the CPU responded to it the interrupt was no longer available. The hardware interrupt controller that lost the interrupt was the secondary interrupt controller.')
exception = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,57)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "domainName"), ("NetWare-Server-Alarm-MIB", "processName"), ("NetWare-Server-Alarm-MIB", "nlmName"), ("NetWare-Server-Alarm-MIB", "codeOffset"))
if mibBuilder.loadTexts: exception.setDescription('An exception occurred due to an NLM writing to an invalid memory address.')
invalidScreenID = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,58)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "nlmName"), ("NetWare-Server-Alarm-MIB", "codeOffset"))
if mibBuilder.loadTexts: invalidScreenID.setDescription('An NLM passed an invalid screen ID to the kernel.')
prssDidNotRelqhCntlFqtly = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,59)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "processName"), ("NetWare-Server-Alarm-MIB", "nlmName"), ("NetWare-Server-Alarm-MIB", "codeOffset"))
if mibBuilder.loadTexts: prssDidNotRelqhCntlFqtly.setDescription('An NLM did not relinquish control within the system execution limit of .4 seconds.')
fileSrvrUsrDeleted = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,60)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"))
if mibBuilder.loadTexts: fileSrvrUsrDeleted.setDescription('A user account was deleted while the user was logged in.')
usrAcctDeletedByAUsr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,61)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "accountName"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "stationNumber"), ("NetWare-Server-Alarm-MIB", "numberOfConnections"))
if mibBuilder.loadTexts: usrAcctDeletedByAUsr.setDescription('User account deleted by another user while the deleted user was logged in.')
invalidResourceTag = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,62)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: invalidResourceTag.setDescription('An invalid resource tag was passed to the OS.')
diskDeactivatedUnknownReason = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,63)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: diskDeactivatedUnknownReason.setDescription('A disk has been deactivated.')
diskDeactivatedDriverUnload = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,64)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: diskDeactivatedDriverUnload.setDescription('The system deactivated the specified disk because the associated driver was unloaded by a console operator command.')
diskDeactivatedDeviceFailure = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,65)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: diskDeactivatedDeviceFailure.setDescription('A disk has been deactivated by the disk driver due to device failure.')
diskDeactivatedUsrRequest = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,66)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: diskDeactivatedUsrRequest.setDescription('The system deactivated the specified disk because the associated driver was unloaded by a user-initiated UNLOAD command.')
diskDeactivatedMediaDismount = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,67)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: diskDeactivatedMediaDismount.setDescription('The OS detected that a different medium was loaded in a drive and deactivated the disk.')
diskDeactivatedEOM = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,68)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: diskDeactivatedEOM.setDescription('The system deactivated the specified disk because the end of the medium was reached.')
diskDeactivatedServerDown = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,69)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: diskDeactivatedServerDown.setDescription('The system deactivated the specified disk because the associated driver was unloaded by a user-initiated DOWN server command.')
diskDeactivatedServerFailure = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,70)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: diskDeactivatedServerFailure.setDescription('The specified disk has been deactivated because the OS detected a failure in the file system.')
moduleDidNotReleaseOneResource = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,71)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "nlmName"), ("NetWare-Server-Alarm-MIB", "resourceName"), ("NetWare-Server-Alarm-MIB", "resourceDescription"))
if mibBuilder.loadTexts: moduleDidNotReleaseOneResource.setDescription('An NLM did not release a resource.')
mirroredPartNotAllSync = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,72)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "partitionNumber"))
if mibBuilder.loadTexts: mirroredPartNotAllSync.setDescription('The system has not mirrored all system partitions that are designated as mirrored partitions.')
allMirroredPartAreSync = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,73)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: allMirroredPartAreSync.setDescription('The system has mirrored all system partitions that are designated as mirrored partitions.')
partitionsSync = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,74)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "partitionNumber"))
if mibBuilder.loadTexts: partitionsSync.setDescription('This mirrored partition is synchronized.')
partitionsUnSync = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,75)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "partitionNumber"))
if mibBuilder.loadTexts: partitionsUnSync.setDescription('This logical partition is not synchronized.')
remirroringPart = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,76)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "partitionNumber"))
if mibBuilder.loadTexts: remirroringPart.setDescription('The system is remirroring this partition.')
abortRemirrorPart = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,77)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "partitionNumber"))
if mibBuilder.loadTexts: abortRemirrorPart.setDescription('System tried to remirror a partition to another partition and failed.')
mirrorInconsistencies = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,78)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "partitionNumber"))
if mibBuilder.loadTexts: mirrorInconsistencies.setDescription('This logical partition has certain inconsistencies.')
systemFileLockThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,79)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "numberOfFailedFileLockRequests"))
if mibBuilder.loadTexts: systemFileLockThresholdReached.setDescription('System File lock threshold reached. New locks will fail.')
stationFileLockThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,80)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "stationNumber"), ("NetWare-Server-Alarm-MIB", "numberOfFailedFileLockRequests"))
if mibBuilder.loadTexts: stationFileLockThresholdReached.setDescription('Station file lock threshold reached.')
systemRecordLockThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,81)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "numberOfFailedRecordLockRequests"))
if mibBuilder.loadTexts: systemRecordLockThresholdReached.setDescription('System record lock threshold reached.')
stationRecordLockThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,82)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "stationNumber"), ("NetWare-Server-Alarm-MIB", "numberOfFailedRecordLockRequests"))
if mibBuilder.loadTexts: stationRecordLockThresholdReached.setDescription('Station record lock threshold reached.')
errorOpeningNetAcctData = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,83)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: errorOpeningNetAcctData.setDescription('Cannot open file NET$ACCT.DAT to add audit record.')
ncpSearchLimitExecBySrvr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,84)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "connectionNumber"), ("NetWare-Server-Alarm-MIB", "userName"))
if mibBuilder.loadTexts: ncpSearchLimitExecBySrvr.setDescription('A server requested an NCP directory search, and the limit for outstanding search was already reached.')
ncpSearchLimitExecByStation = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,85)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: ncpSearchLimitExecByStation.setDescription('A user requested an NCP directory search, and the limit for outstanding search was already reached.')
insertMediaAck = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,86)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: insertMediaAck.setDescription('The insertion of a medium into a drive is acknowledged.')
insertMediaAborted = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,87)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: insertMediaAborted.setDescription('A previously requested insert media request is negated.')
remMediaAck = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,88)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: remMediaAck.setDescription('The removal of a medium from a device is acknowledged.')
remMediaAborted = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,89)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: remMediaAborted.setDescription('Previously issued remove media request aborted.')
insertDSMediaInto = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,90)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "mediaLabel"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: insertDSMediaInto.setDescription('The media manager requires the double-sided medium to be inserted into the device.')
removeMediaFrom = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,91)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: removeMediaFrom.setDescription('Media needs to be removed from device.')
redirectBlk = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,92)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "blockNumber"), ("NetWare-Server-Alarm-MIB", "blockNumber1"), ("NetWare-Server-Alarm-MIB", "partitionNumber"))
if mibBuilder.loadTexts: redirectBlk.setDescription('HotFix was able to redirect a block.')
couldNotRedirectBlk = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,93)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "blockNumber"), ("NetWare-Server-Alarm-MIB", "partitionNumber"))
if mibBuilder.loadTexts: couldNotRedirectBlk.setDescription('HotFix was unable to redirect a block.')
outOfHotFixBlks = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,94)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: outOfHotFixBlks.setDescription('The redirection area set aside on a partition is exhausted.')
fewRedirectionBlks = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,95)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "numberOfBlocks"))
if mibBuilder.loadTexts: fewRedirectionBlks.setDescription('There are only few disk blocks available for redirection.')
redirectInconsistNoFix = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,96)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "partitionNumber"))
if mibBuilder.loadTexts: redirectInconsistNoFix.setDescription('The inconsistencies in the redirection tables found in the hotfix area could not be fixed by the media manager.')
redirectInconsistFix = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,97)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "partitionNumber"))
if mibBuilder.loadTexts: redirectInconsistFix.setDescription('The inconsistencies in the redirection tables found in the hotfix area were fixed by the media manager.')
invalidResourceTagPassed = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,98)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: invalidResourceTagPassed.setDescription('A loaded NLM tried to register hardware options with an invalid resource tag.')
checkAddHardware = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,99)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: checkAddHardware.setDescription('The NetWare OS tried to allocate memory for a system API and failed.')
removeHardwareOptions = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,100)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: removeHardwareOptions.setDescription('An executing NLM called the OS function RemoveHardwareOptions with an invalid pointer.')
errUnloadKilledNlm = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,101)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: errUnloadKilledNlm.setDescription('An NLM being unloaded has exported variables that are in use by other NLMs.')
invldRrceTagPsedToCreatePrss = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,102)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: invldRrceTagPsedToCreatePrss.setDescription('The system tried to start a new NLM or create a process for an active NLM, but the NLM did not allocate a resource tag or used an invalid resource tag.')
createPrssReqtdStackTooSmall = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,103)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: createPrssReqtdStackTooSmall.setDescription('The system tried to load an NLM that allocated insufficient stack for itself.')
createPrssUnableToAllocPrssCntlBlk = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,104)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: createPrssUnableToAllocPrssCntlBlk.setDescription('The system tried to start a new NLM but there was not enough memory.')
filePreservationErrorDuringErase = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,105)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"), ("NetWare-Server-Alarm-MIB", "pathFileName"))
if mibBuilder.loadTexts: filePreservationErrorDuringErase.setDescription('An error prevented the preservation of a file during file deletion. The file is not salvageable.')
filePreservationErrorInsuffSpace = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,106)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"), ("NetWare-Server-Alarm-MIB", "pathFileName"))
if mibBuilder.loadTexts: filePreservationErrorInsuffSpace.setDescription('Insufficient directory table space or memory available during file deletion. The file is not salvageable.')
mlidResetLanBd = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,107)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "networkAddress"), ("NetWare-Server-Alarm-MIB", "macAddress"), ("NetWare-Server-Alarm-MIB", "socketNumber"))
if mibBuilder.loadTexts: mlidResetLanBd.setDescription('A bind command issued to an IPX LAN driver with a wrong network number caused the MLID to reset the LAN board.')
requestedRtrReset = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,108)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "networkAddress"), ("NetWare-Server-Alarm-MIB", "macAddress"), ("NetWare-Server-Alarm-MIB", "socketNumber"))
if mibBuilder.loadTexts: requestedRtrReset.setDescription('A workstation issued a router reset command to a server.')
volContainstheWrongDOSType = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,109)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"), ("NetWare-Server-Alarm-MIB", "dosType"), ("NetWare-Server-Alarm-MIB", "dosType1"))
if mibBuilder.loadTexts: volContainstheWrongDOSType.setDescription('The volume has a DOS TYPE different from that for which the server was configured.')
originalNameSpaceNotFound = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,110)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: originalNameSpaceNotFound.setDescription('Function GetOriginalNameSpace could not find a name space. DOS name space was assumed.')
rdTimeDataMigratorModuleChanged = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,111)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: rdTimeDataMigratorModuleChanged.setDescription('A real-time data migrator default support module was changed by the application.')
errCreateOpenTTSLogFile = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,112)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: errCreateOpenTTSLogFile.setDescription('The server could not open or create the TTS$LOG file. The volume may be out of disk space or the hard disk could have failed.')
errWriteOpenTTSLogFile = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,113)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: errWriteOpenTTSLogFile.setDescription('The server could not write to a TTS$LOG file. The volume may be out of disk space or the hard disk could have failed.')
ttsDownbyVolDismount = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,114)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: ttsDownbyVolDismount.setDescription('Since the SYS volume was dismounted TTS is no longer available.')
disableTTSbyUser = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,115)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "stationNumber"))
if mibBuilder.loadTexts: disableTTSbyUser.setDescription('A disable TTS command was issued from a workstation.')
ttsDisabledByOperator = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,116)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: ttsDisabledByOperator.setDescription('TTS disabled by operator.')
ttsDisErrReadTTSduringBackout = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,117)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: ttsDisErrReadTTSduringBackout.setDescription('TTS disabled due to error reading backout file.')
ttsDisErrWritingTTSduringBackout = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,118)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: ttsDisErrWritingTTSduringBackout.setDescription('TTS was disabled because there was an error writing to a file during transaction backout.')
ttsDisErrTooManyDefInfo = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,119)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: ttsDisErrTooManyDefInfo.setDescription('TTS was disabled because of too many defined volumes.')
ttsDisErrWritingVolDefInfo = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,120)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: ttsDisErrWritingVolDefInfo.setDescription('TTS was disabled due to an error writing volume definition information.')
ttsDisErrRdBlkFlRecGen = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,121)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: ttsDisErrRdBlkFlRecGen.setDescription('TTS was disabled due to error reading backout file during record generation')
ttsDisGrowMemTables = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,122)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: ttsDisGrowMemTables.setDescription('TTS was disabled because TTS tables were getting too big.')
ttsDisErrAllDiskSpace = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,123)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: ttsDisErrAllDiskSpace.setDescription('TTS was disabled because of an error allocating more disk space during backout.')
ttsDisDirErrOnBkFile = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,124)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: ttsDisDirErrOnBkFile.setDescription('TTS was disabled because of a directory error on TTS backout file.')
enableTTSByUser = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,125)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "stationNumber"))
if mibBuilder.loadTexts: enableTTSByUser.setDescription('TTS was enabled from a workstation.')
transactionAbortedForStation = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,126)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "stationNumber"), ("NetWare-Server-Alarm-MIB", "taskNumber"))
if mibBuilder.loadTexts: transactionAbortedForStation.setDescription('A transaction was not backed out due to a clear station command.')
ttsLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,127)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "numberOfTransactions"))
if mibBuilder.loadTexts: ttsLimitExceeded.setDescription('TTS has exceeded the maximum number of transactions.')
ttsNoMemForExpandingTxNodeTables = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,128)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "numberOfFailedMemoryAllocAttempts"))
if mibBuilder.loadTexts: ttsNoMemForExpandingTxNodeTables.setDescription('TTS ran out of memory expanding transaction node tables.')
auditEvent = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,129)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "auditEventNumber"), ("NetWare-Server-Alarm-MIB", "volumeNumber"))
if mibBuilder.loadTexts: auditEvent.setDescription('An audit request was made with an invalid volume number.')
auditAlertThresholdOverFlow = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,130)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: auditAlertThresholdOverFlow.setDescription('There was an audit threshold overflow.')
auditAlertInvalidConfigFile = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,131)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: auditAlertInvalidConfigFile.setDescription('Auditing disabled -- invalid configuration file.')
auditAlertNoMemory = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,132)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: auditAlertNoMemory.setDescription('Memory for auditing cannot be allocated.')
auditFileWriteError = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,133)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: auditFileWriteError.setDescription('Audit-file write error.')
auditFileFull = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,134)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: auditFileFull.setDescription('Audit file full.')
invalidConnTypetoAllocConn = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,135)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: invalidConnTypetoAllocConn.setDescription('An executing NLM tried to allocate a connection number but an invalid connection type was passed as a parameter.')
invalidRsrcTagPassedtoAllocConn = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,136)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: invalidRsrcTagPassedtoAllocConn.setDescription('An executing NLM tried to allocate a connection number but an invalid resource tag was passed as a parameter.')
outOfServerConn = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,137)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: outOfServerConn.setDescription('A request to allocate a connection number for a workstation could not be granted because the maximum number of connections had been allocated.')
connTerminated5MinNotice = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,138)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "stationNumber"))
if mibBuilder.loadTexts: connTerminated5MinNotice.setDescription('Server watchdog logged out the connection since the user did not log in for five minutes.')
usrAcctDisabledByAUsr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,139)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "accountName"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "stationNumber"), ("NetWare-Server-Alarm-MIB", "numberOfConnections"))
if mibBuilder.loadTexts: usrAcctDisabledByAUsr.setDescription('A user account was disabled by another user. The user whose account was disabled was logged in at the time.')
useOfUnEncryptedPwd = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,140)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "stationNumber"))
if mibBuilder.loadTexts: useOfUnEncryptedPwd.setDescription('An application or utility tried to log in or change a password using an unencrypted password.The server accepts only encrypted passwords.')
supAcctLockoutClrdByConsole = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,141)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: supAcctLockoutClrdByConsole.setDescription('An account locked by a supervisor is now cleared. The account was locked because someone tried to login with an incorrect password.')
systemTimeChangedByConsole = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,142)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"))
if mibBuilder.loadTexts: systemTimeChangedByConsole.setDescription('The system time was changed from the server console.')
systemTimeChangedByUser = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,143)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "stationNumber"), ("NetWare-Server-Alarm-MIB", "userName"))
if mibBuilder.loadTexts: systemTimeChangedByUser.setDescription('The system time was changed from a user console.')
volDismountedDueToDriveDeact = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,144)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: volDismountedDueToDriveDeact.setDescription('The volume dismounted due to driver unload, disk failure, or OS-initiated driver unload.')
rtrFalsehood = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,145)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "internalNetworkAddress"), ("NetWare-Server-Alarm-MIB", "macAddress"), ("NetWare-Server-Alarm-MIB", "internalNetworkAddress1"), ("NetWare-Server-Alarm-MIB", "macAddress1"), ("NetWare-Server-Alarm-MIB", "macAddress2"))
if mibBuilder.loadTexts: rtrFalsehood.setDescription('A router is falsely claiming that a particular network address has been changed to a different address.')
srvrAddrChanged = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,146)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "serverName1"), ("NetWare-Server-Alarm-MIB", "networkAddress"), ("NetWare-Server-Alarm-MIB", "macAddress"), ("NetWare-Server-Alarm-MIB", "socketNumber"), ("NetWare-Server-Alarm-MIB", "networkAddress1"), ("NetWare-Server-Alarm-MIB", "macAddress1"), ("NetWare-Server-Alarm-MIB", "socketNumber1"), ("NetWare-Server-Alarm-MIB", "macAddress2"))
if mibBuilder.loadTexts: srvrAddrChanged.setDescription('A particular server address has been changed.')
extendFileHasNoOwnerToCharge = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,147)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "connectionNumber"), ("NetWare-Server-Alarm-MIB", "pathFileName"))
if mibBuilder.loadTexts: extendFileHasNoOwnerToCharge.setDescription('A file occupying a certain percentage of disk space has no owner to charge.')
rtrConfigErr3 = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,148)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "macAddress"), ("NetWare-Server-Alarm-MIB", "networkAddress"), ("NetWare-Server-Alarm-MIB", "networkAddress1"))
if mibBuilder.loadTexts: rtrConfigErr3.setDescription('A router claims that a particular network address should actually be another address.')
rtrConfigErr2 = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,149)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "macAddress"), ("NetWare-Server-Alarm-MIB", "routerName"), ("NetWare-Server-Alarm-MIB", "networkAddress"), ("NetWare-Server-Alarm-MIB", "networkAddress1"))
if mibBuilder.loadTexts: rtrConfigErr2.setDescription('A router claims that a particular network address should actually be another address.')
dataMgrtrNotLoadedWhenRequested = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,150)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: dataMgrtrNotLoadedWhenRequested.setDescription('A read/write request was made to the real-time data migration module, but the module was not loaded.')
noSpecificSupportModulesLoaded = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,151)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: noSpecificSupportModulesLoaded.setDescription('A read/write request was made to the real-time data migration module, but the required data migration support module was not loaded.')
notEnoughRAMForComp = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,152)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: notEnoughRAMForComp.setDescription('Insufficient RAM to compress file.')
diskErrorCompression = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,153)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: diskErrorCompression.setDescription('Disk I/O error compressing file.')
compressErrorHoleCountMismatch = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,154)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "pathFileName"), ("NetWare-Server-Alarm-MIB", "volumeNumber"), ("NetWare-Server-Alarm-MIB", "fileSize"), ("NetWare-Server-Alarm-MIB", "fileMiscInfo"), ("NetWare-Server-Alarm-MIB", "fileMiscInfo1"))
if mibBuilder.loadTexts: compressErrorHoleCountMismatch.setDescription('There was an internal compression error on the sparse count found on the linked list maintained by the compression executables.')
unknownErrorCompression = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,155)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "errorNumber"))
if mibBuilder.loadTexts: unknownErrorCompression.setDescription('There was an unknown error during file compression.')
insufficientSpaceForDecompression = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,156)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "pathFileName"), ("NetWare-Server-Alarm-MIB", "stationNumber"))
if mibBuilder.loadTexts: insufficientSpaceForDecompression.setDescription('Insufficient disk space to decompress file.')
decompUnknownCompVersion = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,157)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "pathFileName"), ("NetWare-Server-Alarm-MIB", "stationNumber"))
if mibBuilder.loadTexts: decompUnknownCompVersion.setDescription('File being decompressed has unknown compression format.')
unknownErrorDecomp = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,158)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "errorNumber"))
if mibBuilder.loadTexts: unknownErrorDecomp.setDescription('Unknown error returned from file decompress.')
insufficientDecompError = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,159)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: insufficientDecompError.setDescription('Insufficient RAM to decompress file.')
compFileCorrupted = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,160)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: compFileCorrupted.setDescription('Compressed file is corrupt and unrecoverable.')
rejectedIncompleteNCP = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,161)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "stationNumber"), ("NetWare-Server-Alarm-MIB", "ncpFunctionNumber"), ("NetWare-Server-Alarm-MIB", "ncpSubFunctionNumber"))
if mibBuilder.loadTexts: rejectedIncompleteNCP.setDescription('A server received an incomplete NCP packet from a workstation and rejected the packet.')
stationUsedABadPacket = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,162)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "stationNumber"), ("NetWare-Server-Alarm-MIB", "ncpFunctionNumber"), ("NetWare-Server-Alarm-MIB", "ncpSubFunctionNumber"))
if mibBuilder.loadTexts: stationUsedABadPacket.setDescription('A server received an incomplete NCP packet from a workstation and processed it.')
rejectedNCPBadSubfunctionLngth = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,163)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "stationNumber"), ("NetWare-Server-Alarm-MIB", "ncpFunctionNumber"), ("NetWare-Server-Alarm-MIB", "ncpSubFunctionNumber"))
if mibBuilder.loadTexts: rejectedNCPBadSubfunctionLngth.setDescription('A server received an NCP with the length field improperly initialized and rejected it.')
processedNCPBadSubfunctionLngth = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,164)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "stationNumber"), ("NetWare-Server-Alarm-MIB", "ncpFunctionNumber"), ("NetWare-Server-Alarm-MIB", "ncpSubFunctionNumber"))
if mibBuilder.loadTexts: processedNCPBadSubfunctionLngth.setDescription('A server received an NCP with the length field improperly initialized and processed it.')
compFilePathCorrupted = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,165)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "pathFileName"))
if mibBuilder.loadTexts: compFilePathCorrupted.setDescription('Compressed file with path is corrupted and unrecoverable.')
compFileInUse = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,166)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "pathFileName"), ("NetWare-Server-Alarm-MIB", "stationNumber"))
if mibBuilder.loadTexts: compFileInUse.setDescription('Compressed file in use is corrupt and unrecoverable.')
nlmNoPriority = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,167)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: nlmNoPriority.setDescription('A loaded NLM is not allowing other low-priority threads to run.')
workToDo = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,168)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: workToDo.setDescription('A Work-to-do thread took more than a minute of CPU time.')
compErrTempFileErr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,169)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "pathFileName"), ("NetWare-Server-Alarm-MIB", "volumeNumber"), ("NetWare-Server-Alarm-MIB", "fileSize"), ("NetWare-Server-Alarm-MIB", "fileOffset"), ("NetWare-Server-Alarm-MIB", "fileValue"))
if mibBuilder.loadTexts: compErrTempFileErr.setDescription('There was an invalid byte in the temporary file created during file compression.')
compErrLngthTotMismatch = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,170)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "pathFileName"), ("NetWare-Server-Alarm-MIB", "volumeNumber"), ("NetWare-Server-Alarm-MIB", "fileSize"), ("NetWare-Server-Alarm-MIB", "fileMiscInfo"), ("NetWare-Server-Alarm-MIB", "fileMiscInfo1"))
if mibBuilder.loadTexts: compErrLngthTotMismatch.setDescription('This is an internal consistency check done by compression to guarantee the integrity of the data being compressed. During the file compression, an intermediate file is created that describes the compressed version of the file. The file contains code describing what should be encoded in the compressed version of the file. The totals from processing the original file do not match the totals from processing the intermediate file.')
compErrOffsetTotalsMismatch = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,171)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "pathFileName"), ("NetWare-Server-Alarm-MIB", "volumeNumber"), ("NetWare-Server-Alarm-MIB", "fileSize"), ("NetWare-Server-Alarm-MIB", "fileMiscInfo"), ("NetWare-Server-Alarm-MIB", "fileMiscInfo1"))
if mibBuilder.loadTexts: compErrOffsetTotalsMismatch.setDescription('This is an internal consistency check done by compression to guarantee the integrity of the data being compressed. During the file compression, an intermediate file is created that describes the compressed version of the file. The file contains code describing what should be encoded in the compressed version of the file. The totals from processing the original file do not match the totals from processing the intermediate file.')
compErrDataCodeCountMismatch = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,172)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "pathFileName"), ("NetWare-Server-Alarm-MIB", "volumeNumber"), ("NetWare-Server-Alarm-MIB", "fileSize"), ("NetWare-Server-Alarm-MIB", "fileMiscInfo"), ("NetWare-Server-Alarm-MIB", "fileMiscInfo1"))
if mibBuilder.loadTexts: compErrDataCodeCountMismatch.setDescription('This is an internal consistency check done by compression to guarantee the integrity of the data being compressed. During the file compression, an intermediate file is created that describes the compressed version of the file. The file contains code describing what should be encoded in the compressed version of the file. The totals from processing the original file do not match the totals from processing the intermediate file.')
compErrLthOffsetCodeCountMismatch = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,173)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "pathFileName"), ("NetWare-Server-Alarm-MIB", "volumeNumber"), ("NetWare-Server-Alarm-MIB", "fileSize"), ("NetWare-Server-Alarm-MIB", "fileMiscInfo"), ("NetWare-Server-Alarm-MIB", "fileMiscInfo1"))
if mibBuilder.loadTexts: compErrLthOffsetCodeCountMismatch.setDescription('This is an internal consistency check done by compression to guarantee the integrity of the data being compressed. During the file compression, an intermediate file is created that describes the compressed version of the file. The file contains code describing what should be encoded in the compressed version of the file. The totals from processing the original file do not match the totals from processing the intermediate file.')
compErrLgrLngthCodeCountMismatch = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,174)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "message"))
if mibBuilder.loadTexts: compErrLgrLngthCodeCountMismatch.setDescription('License File in error')
compErrReadZeroBytesInt = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,175)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeNumber"), ("NetWare-Server-Alarm-MIB", "fileSize"), ("NetWare-Server-Alarm-MIB", "pathFileName"), ("NetWare-Server-Alarm-MIB", "fileOffset"))
if mibBuilder.loadTexts: compErrReadZeroBytesInt.setDescription('The disk has returned 0 bytes for a compression read request and there is still more data to read.')
compErrTreeTooBig = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,176)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "pathFileName"), ("NetWare-Server-Alarm-MIB", "volumeNumber"), ("NetWare-Server-Alarm-MIB", "fileSize"))
if mibBuilder.loadTexts: compErrTreeTooBig.setDescription('This is an internal consistency check done by compression to guarantee the integrity of the data being compressed. During the file compression, an intermediate file is created that describes the compressed version of the file. The file contains code describing what should be encoded in the compressed version of the file. The totals from processing the original file do not match the totals from processing the intermediate file.')
compErrMatchSizeFail = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,177)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "pathFileName"), ("NetWare-Server-Alarm-MIB", "volumeNumber"), ("NetWare-Server-Alarm-MIB", "fileSize"), ("NetWare-Server-Alarm-MIB", "fileSize1"), ("NetWare-Server-Alarm-MIB", "fileSize2"))
if mibBuilder.loadTexts: compErrMatchSizeFail.setDescription('This is an internal consistency check done by compression to guarantee the integrity of the data being compressed. During the file compression, an intermediate file is created that describes the compressed version of the file. The file contains code describing what should be encoded in the compressed version of the file. The totals from processing the original file do not match the totals from processing the intermediate file.')
signatureInvalid = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,178)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "networkAddress"), ("NetWare-Server-Alarm-MIB", "macAddress"))
if mibBuilder.loadTexts: signatureInvalid.setDescription('NCP packet with invalid signature was received. Possible packet forgery.')
licenseInvalid = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,179)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "message"))
if mibBuilder.loadTexts: licenseInvalid.setDescription('The server license is invalid. Maximum connections reduced to one.')
deactHotFix = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,180)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: deactHotFix.setDescription('There was a media failure and hotfix could not fix it. The device was deactivated.')
unknownDecompressErrorWithName = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,181)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "errorNumber"), ("NetWare-Server-Alarm-MIB", "pathFileName"))
if mibBuilder.loadTexts: unknownDecompressErrorWithName.setDescription('A unknown error was returned from file decompression.')
insufficientRamToDecompWithName = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,182)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "pathFileName"))
if mibBuilder.loadTexts: insufficientRamToDecompWithName.setDescription('Insufficient RAM to decompress file.')
decompressUnderFreePercentage = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,183)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: decompressUnderFreePercentage.setDescription('Compressed files are not being committed as decompressed due to lack of disk space.')
negPktLargeBuffer = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,184)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "connectionNumber"), ("NetWare-Server-Alarm-MIB", "packetSize"), ("NetWare-Server-Alarm-MIB", "packetSize1"))
if mibBuilder.loadTexts: negPktLargeBuffer.setDescription('An NCP negotiation packet tried to negotiate a connection request packet that was larger than the driver could handle. The request was rejected by IPX.')
loginDisabledByConsole = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,185)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: loginDisabledByConsole.setDescription('A disable login command was issued at the server console.')
loginEnabledByConsole = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,186)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: loginEnabledByConsole.setDescription('An enable login command was issued at the server console.')
growableStackNotAllocated = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,187)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: growableStackNotAllocated.setDescription('A loaded NLM tried to create a stack and failed.')
insertDSMediaAck = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,188)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: insertDSMediaAck.setDescription('The insertion of a double-sided medium into a drive is acknowledged.')
insertMagazineAck = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,189)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: insertMagazineAck.setDescription('The insertion of a magazine into a drive is acknowledged.')
insertDSMediaAborted = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,190)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: insertDSMediaAborted.setDescription('Previously requested insert double-sided media request is withdrawn.')
insertMagazineAborted = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,191)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: insertMagazineAborted.setDescription('Previously requested insert magazine request is withdrawn.')
remDSMediaAck = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,192)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: remDSMediaAck.setDescription('Removal of a double-sided medium from a device is acknowledged.')
remMagazineAck = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,193)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: remMagazineAck.setDescription('Removal of a magazine from a device is acknowledged.')
remDSMediaAborted = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,194)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: remDSMediaAborted.setDescription('Previously requested remove double-sided media request aborted.')
remMagazineAborted = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,195)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: remMagazineAborted.setDescription('Previously requested remove magazine request aborted.')
insertMagazineInto = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,196)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "mediaLabel"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: insertMagazineInto.setDescription('The media manager requires a magazine to be inserted into the device.')
removeDSMediaFrom = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,197)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: removeDSMediaFrom.setDescription('The media manager requires a double-sided medium to be removed from a device.')
removeMagazineFrom = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,198)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "deviceName"))
if mibBuilder.loadTexts: removeMagazineFrom.setDescription('The media manager requires a magazine to be removed from a device.')
moduleDidNotReleaseResources = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,199)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "numberOfResources"), ("NetWare-Server-Alarm-MIB", "nlmName"), ("NetWare-Server-Alarm-MIB", "resourceName"), ("NetWare-Server-Alarm-MIB", "resourceDescription"))
if mibBuilder.loadTexts: moduleDidNotReleaseResources.setDescription('An NLM did not release resources.')
opnBinderyFailSinceVolNotMounted = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,200)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: opnBinderyFailSinceVolNotMounted.setDescription('Server failed to open the bindery. Request failed because the SYS volume was not mounted.')
binderyOpnReqtdByUsrFailed = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,201)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "stationNumber"))
if mibBuilder.loadTexts: binderyOpnReqtdByUsrFailed.setDescription('A user tried to open the bindery and failed since the SYS volume was not mounted.')
binderyOpnReqtdBySrvr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,202)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: binderyOpnReqtdBySrvr.setDescription('The server has opened the bindery.')
binderyOpnReqtdByUsR = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,203)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "stationNumber"))
if mibBuilder.loadTexts: binderyOpnReqtdByUsR.setDescription('The user tried to open the bindery and succeeded.')
binderyClosedBySrvr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,204)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: binderyClosedBySrvr.setDescription('The server has closed the bindery.')
binderyClosedByUsr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,205)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "stationNumber"))
if mibBuilder.loadTexts: binderyClosedByUsr.setDescription('The user has requested a bindery to be closed.')
intruderLockout = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,206)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "accountName"), ("NetWare-Server-Alarm-MIB", "networkAddress"), ("NetWare-Server-Alarm-MIB", "macAddress"))
if mibBuilder.loadTexts: intruderLockout.setDescription('User account temporarily disabled due to repeated login attempt with wrong password.')
dsOpenFailed = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,207)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: dsOpenFailed.setDescription('Directory services database did not open.')
dsOpenFailedInconsistentDatabase = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,208)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: dsOpenFailedInconsistentDatabase.setDescription('Directory services database did not open due to inconsistent database.')
dsopenSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,209)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: dsopenSucceeded.setDescription('The directory services database was successfully opened.')
dsCloseSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,210)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: dsCloseSucceeded.setDescription('The directory services database was successfully closed.')
skulkingError = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,211)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "errorNumber"))
if mibBuilder.loadTexts: skulkingError.setDescription('Skulking error.')
dsIntruderNoAddr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,212)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "accountName"))
if mibBuilder.loadTexts: dsIntruderNoAddr.setDescription("A user repeatedly tried to log in with an invalid password and the user's account was temporarily disabled by the supervisor. The address of the user was non-IPX.")
domainQuarantined = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,213)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "exceptionName"), ("NetWare-Server-Alarm-MIB", "domainName"), ("NetWare-Server-Alarm-MIB", "processName"), ("NetWare-Server-Alarm-MIB", "nlmName"), ("NetWare-Server-Alarm-MIB", "eipAddress"))
if mibBuilder.loadTexts: domainQuarantined.setDescription('There was a protection violation in one of the NLMs in the OSP domain during execution. The NLM is quarantined.')
commandProcess = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,214)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: commandProcess.setDescription('The command processor faulted while loading an NLM.')
remoteConnGranted = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,215)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "networkAddress"), ("NetWare-Server-Alarm-MIB", "macAddress"))
if mibBuilder.loadTexts: remoteConnGranted.setDescription('A request to use a workstation console as a file server console was granted.')
remoteConnCleared = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,216)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "networkAddress"), ("NetWare-Server-Alarm-MIB", "macAddress"))
if mibBuilder.loadTexts: remoteConnCleared.setDescription('A request to clear the use of a workstation console as a file server console was granted.')
remoteConnRefused = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,217)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "networkAddress"), ("NetWare-Server-Alarm-MIB", "macAddress"))
if mibBuilder.loadTexts: remoteConnRefused.setDescription('A request to use the workstation console as a file server console was refused.')
translatorUp = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,218)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: translatorUp.setDescription('The Trap NLM is loaded.')
translatorDown = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,219)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: translatorDown.setDescription('The Trap NLM is being unloaded.')
volAnyMounted = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,220)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: volAnyMounted.setDescription('The server mounted the indicated volume in response to a MOUNT command.')
volAnyDismounted = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,221)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"))
if mibBuilder.loadTexts: volAnyDismounted.setDescription('The server dismounted the indicated volume in response to a DISMOUNT command.')
serverDownatServer = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,222)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: serverDownatServer.setDescription('The server was downed at the server console.')
protocolBound = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,223)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "lanDriverName"), ("NetWare-Server-Alarm-MIB", "boardNumber"), ("NetWare-Server-Alarm-MIB", "protocolName"))
if mibBuilder.loadTexts: protocolBound.setDescription('A protocol stack has been bound to a LAN driver.')
protocolUnBound = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,224)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "lanDriverName"), ("NetWare-Server-Alarm-MIB", "boardNumber"), ("NetWare-Server-Alarm-MIB", "protocolName"))
if mibBuilder.loadTexts: protocolUnBound.setDescription('A protocol stack has been unbound from a LAN driver.')
moduleLoad = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,225)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "nlmName"))
if mibBuilder.loadTexts: moduleLoad.setDescription('An NLM has been loaded.')
moduleUnLoad = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,226)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "nlmName"))
if mibBuilder.loadTexts: moduleUnLoad.setDescription('An NLM has been unloaded.')
mlidRegister = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,227)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "boardNumber"), ("NetWare-Server-Alarm-MIB", "lanDriverName"))
if mibBuilder.loadTexts: mlidRegister.setDescription('MLID has registered a board.')
mlidUnRegister = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,228)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "boardNumber"), ("NetWare-Server-Alarm-MIB", "lanDriverName"))
if mibBuilder.loadTexts: mlidUnRegister.setDescription('MLID has de-registered a board.')
clearConnection = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,229)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "connectionNumber"))
if mibBuilder.loadTexts: clearConnection.setDescription('A user connection has been cleared.')
loginConnection = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,230)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "connectionNumber"))
if mibBuilder.loadTexts: loginConnection.setDescription('A user has logged in.')
nlmAlertCritical = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,231)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "nlmName"), ("NetWare-Server-Alarm-MIB", "nlmSeverity"), ("NetWare-Server-Alarm-MIB", "message"))
if mibBuilder.loadTexts: nlmAlertCritical.setDescription('This trap will handle all traps being generated by third-party NLMs and the traps generated by driver NLMs written by NOVELL or third party.')
logoutConnection = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,232)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "connectionNumber"))
if mibBuilder.loadTexts: logoutConnection.setDescription('A user has logged out.')
usrAcctDeletedByAUsrSingleConn = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,233)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "accountName"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "stationNumber"))
if mibBuilder.loadTexts: usrAcctDeletedByAUsrSingleConn.setDescription('A user account was deleted by another user. The deleted user was logged in at the time. ')
compErrReadZeroBytesOrig = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,234)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeNumber"), ("NetWare-Server-Alarm-MIB", "fileSize"), ("NetWare-Server-Alarm-MIB", "fileName"), ("NetWare-Server-Alarm-MIB", "fileOffset"))
if mibBuilder.loadTexts: compErrReadZeroBytesOrig.setDescription('The disk has returned 0 bytes for a compression read request and there is still more data to read.')
diskDeactivated = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,235)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "diskName"), ("NetWare-Server-Alarm-MIB", "reason"))
if mibBuilder.loadTexts: diskDeactivated.setDescription('The specified disk was deactivated. Any of the following is a possible cause: a: deactivated by a console command. b: disk drive failure. c: driver unload. d: file system failure. e: wrong medium. f: end-of-medium. g: end-of-medium MINOR. h: unload command. i: dismount command. j: down command. ')
diskMounted = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,236)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "diskName"))
if mibBuilder.loadTexts: diskMounted.setDescription("The system mounted the specified removable disk at the user's request.")
redirectBlockMismatch = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,237)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "partitionNumber"), ("NetWare-Server-Alarm-MIB", "numberOfPackets"))
if mibBuilder.loadTexts: redirectBlockMismatch.setDescription('The system detected a redirection block mismatch.')
shortTermMemoryLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,238)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "numberOfFailedMemoryAllocAttempts"))
if mibBuilder.loadTexts: shortTermMemoryLimitExceeded.setDescription('Short-term memory requests are failing.')
semipermanentMemoryExhausted = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,239)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: semipermanentMemoryExhausted.setDescription('Semi-permanent memory exhausted.')
diskDismounted = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,240)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "diskName"))
if mibBuilder.loadTexts: diskDismounted.setDescription("The system mounted the specified removable disk at the user's request.")
diskAdded = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,241)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "diskName"))
if mibBuilder.loadTexts: diskAdded.setDescription('The specified hard disk has been added to the operating system')
diskActivated = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,242)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "diskName"))
if mibBuilder.loadTexts: diskActivated.setDescription("The specified hard disk has been activated at the user's request.")
generalTTSfailures = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,243)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "message"))
if mibBuilder.loadTexts: generalTTSfailures.setDescription('TTS was disabled due to one of the following reasons: - disabled by operator, - error reading TTS file during backout, - error writing to file during backout, - too many defined volumes, - error writing volume information to TTS file, - error reading TTS file during record generation, - error growing TTS tables, - error allocating new space for the TTS backout file, - error writing directory information for the TTS backout file. ')
mirroredPartNotAllSynced = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,244)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: mirroredPartNotAllSynced.setDescription('The system has not mirrored all system partitions that are designated as mirrored partitions.')
reqtdRtrReset311 = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,245)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: reqtdRtrReset311.setDescription('A workstation issued a router reset command to a server.')
invalidSignatureString = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,246)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "networkAddress"), ("NetWare-Server-Alarm-MIB", "macAddress"))
if mibBuilder.loadTexts: invalidSignatureString.setDescription('The system detected an NCP packet with invalid signature.')
invalidDuplicateSignature = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,247)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "networkAddress"), ("NetWare-Server-Alarm-MIB", "macAddress"))
if mibBuilder.loadTexts: invalidDuplicateSignature.setDescription('The system detected a duplicate NCP packet that was different from the original packet.')
invalidPburstSignature = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,248)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"), ("NetWare-Server-Alarm-MIB", "networkAddress"), ("NetWare-Server-Alarm-MIB", "macAddress"))
if mibBuilder.loadTexts: invalidPburstSignature.setDescription('The system received an NCP packet burst request with an invalid security signature.')
failedToDeleteMigrateFile = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,249)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"), ("NetWare-Server-Alarm-MIB", "pathFileName"))
if mibBuilder.loadTexts: failedToDeleteMigrateFile.setDescription('The system tried to delete a migrated file but failed because it was unable to obtain directory table space or memory.')
unsignedRemoteConnectionRefused = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,250)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "networkAddress"), ("NetWare-Server-Alarm-MIB", "macAddress"))
if mibBuilder.loadTexts: unsignedRemoteConnectionRefused.setDescription('A request to use the workstation console as a file server console was refused. The packet did not have a signature.')
unsignedRemoteConnectionGranted = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,251)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "networkAddress"), ("NetWare-Server-Alarm-MIB", "macAddress"))
if mibBuilder.loadTexts: unsignedRemoteConnectionGranted.setDescription('A request to use the workstation console as a file server console was granted. The packet did not have a signature.')
responsePacketNotAllocated = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,252)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: responsePacketNotAllocated.setDescription('More responses were present from workstations than there were buffers to hold them. ')
wsNotLocated = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,253)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: wsNotLocated.setDescription('A response was received from a remote workstation, but it did not apply to this connection. ')
remoteConnectionTimedOut = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,254)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"))
if mibBuilder.loadTexts: remoteConnectionTimedOut.setDescription('The system watchdog timed out the remote connection.')
modemConnectionCleared = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,255)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: modemConnectionCleared.setDescription('Since the remote partner was gone, the modem connection was cleared. ')
remoteConnectionClearedNameKnown = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,256)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"))
if mibBuilder.loadTexts: remoteConnectionClearedNameKnown.setDescription('The remote connection permission granted earlier has been cleared.')
callBackNumberNotReceived = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,257)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: callBackNumberNotReceived.setDescription('A workstation tried to connect to a server through a modem but failed. ')
nlmUnableToOpenListFile = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,258)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: nlmUnableToOpenListFile.setDescription('The call-back option has been enabled, but the call-back list file, SYS:SYSTEM\\CALLBACK.LST, could not be opened.')
nlmUnableToReadListFile = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,259)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: nlmUnableToReadListFile.setDescription('The call-back option has been enabled, but the call-back list file, SYS:SYSTEM\\CALLBACK.LST, could not be read.')
unauthorizedCallBackNumber = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,260)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "callBackNumber"))
if mibBuilder.loadTexts: unauthorizedCallBackNumber.setDescription('The call-back option has been enabled, but the call-back list file, SYS:SYSTEM\\CALLBACK.LST, does not contain the number that was sent from the remote workstation. ')
modemClearedAndCallBackAttempted = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,261)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: modemClearedAndCallBackAttempted.setDescription('The connection with modem has been cleared. The server will now attempt to call back the number.')
attmptngToEstblshCallBckConnectn = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,262)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "callBackNumber"))
if mibBuilder.loadTexts: attmptngToEstblshCallBckConnectn.setDescription('The server is trying to call-back the number given to it during the modem connection process.')
remoteConnectionRefusedNameKnown = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,263)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"))
if mibBuilder.loadTexts: remoteConnectionRefusedNameKnown.setDescription('Request for a remote connection was refused. ')
remoteConnectionGrantedNameKnown = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,264)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "userName"))
if mibBuilder.loadTexts: remoteConnectionGrantedNameKnown.setDescription('Request for a remote connection was granted. ')
modemConnectionEstablished = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,265)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "baudRate"))
if mibBuilder.loadTexts: modemConnectionEstablished.setDescription('The modem connection has been established at a particular baud rate.')
dsAuditFileWriteError = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,266)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "objectName"))
if mibBuilder.loadTexts: dsAuditFileWriteError.setDescription('The operating system encountered an error when attempting to write to the audit file.')
dsAuditFileFull = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,267)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "objectName"))
if mibBuilder.loadTexts: dsAuditFileFull.setDescription('The operating system filled up the audit file when it wrote an audit record.')
dsAuditFileThresholdOverflow = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,268)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "objectName"))
if mibBuilder.loadTexts: dsAuditFileThresholdOverflow.setDescription('The operating system encountered a MINOR threshold level for the volume when writing an audit record.')
dsAuditMemoryAllocation = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,269)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: dsAuditMemoryAllocation.setDescription('The operating system ran out of memory when it started up auditing while mounting a volume.')
serverUp = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,270)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: serverUp.setDescription('NetWare Server up.')
volRestrictedSpace = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,271)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "volumeName"), ("NetWare-Server-Alarm-MIB", "volumePercentage"))
if mibBuilder.loadTexts: volRestrictedSpace.setDescription('EA restricted space limit was reached on a particualr volume')
cannotInitialize = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,272)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: cannotInitialize.setDescription('Time synchronization not initialized')
cannotStart = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,273)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: cannotStart.setDescription('Time synchronization not started')
noSAPSocketTag = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,274)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: noSAPSocketTag.setDescription('SAP socket tag not allocated')
noSAPSocket = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,275)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: noSAPSocket.setDescription('SAP socket not opened')
noSetableParameterTag = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,276)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: noSetableParameterTag.setDescription('Settable parameter tag not allocated')
noTimerTag = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,277)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: noTimerTag.setDescription('Time tag not allocated')
noAllocTag = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,278)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: noAllocTag.setDescription('Alloc tag not allocated')
noResourceTag = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,279)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: noResourceTag.setDescription('Resource Tag not allocated')
noProcessTag = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,280)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: noProcessTag.setDescription('Process Tag not allocated')
noEventTag = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,281)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: noEventTag.setDescription('Event tag not allocated')
noGlobalInfo = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,282)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: noGlobalInfo.setDescription('Global information not initialized')
noParseCommandLine = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,283)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: noParseCommandLine.setDescription('Command line arguments not parsed')
noTimeSyncNCPVariable = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,284)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: noTimeSyncNCPVariable.setDescription('Timesync NCP verb not hooked')
cantAllocateMainStack = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,285)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: cantAllocateMainStack.setDescription('Could not allocate main stack')
cantCreateMainProcess = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,286)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: cantCreateMainProcess.setDescription('Could not create main process')
syncRadiusLess = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,287)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "synchronizationRadius"))
if mibBuilder.loadTexts: syncRadiusLess.setDescription('Synchronization radius will prevent synchronization')
unrecognizedCommandLinePrmtr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,288)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "cmmndLnPrmtr"))
if mibBuilder.loadTexts: unrecognizedCommandLinePrmtr.setDescription('Unrecognized command line parameter')
unrecognizedCommandLineOption = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,289)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "cmmndLnPrmtr"))
if mibBuilder.loadTexts: unrecognizedCommandLineOption.setDescription('Unrecognized command line option')
serverPolled = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,290)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "serverName1"))
if mibBuilder.loadTexts: serverPolled.setDescription('Primary reference and single servers should not follow a secondary server')
singleSrvrIncompatible = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,291)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "serverName1"))
if mibBuilder.loadTexts: singleSrvrIncompatible.setDescription('SINGLE servers are incompatible with REFERENCE and PRIMARY servers.')
timeSyncLost = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,292)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "pollingLoops"))
if mibBuilder.loadTexts: timeSyncLost.setDescription('Time synchronization lost after successful polling loops')
timeSyncEstablished = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,293)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: timeSyncEstablished.setDescription('Time synchronization has been established')
connTerminated = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,294)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "connectionNumber"))
if mibBuilder.loadTexts: connTerminated.setDescription('Connection cleared and terminated')
connClearedByUsr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,295)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "connectionNumber"), ("NetWare-Server-Alarm-MIB", "stationNumber"), ("NetWare-Server-Alarm-MIB", "userName"))
if mibBuilder.loadTexts: connClearedByUsr.setDescription('Connection cleared by user')
loginDisabled = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,296)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "connectionNumber"), ("NetWare-Server-Alarm-MIB", "userName"))
if mibBuilder.loadTexts: loginDisabled.setDescription('Login disabled by user on a connection')
downFileServer = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,297)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "stationNumber"), ("NetWare-Server-Alarm-MIB", "userName"))
if mibBuilder.loadTexts: downFileServer.setDescription('Down file server requested by an user')
loginEnabled = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,298)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "connectionNumber"), ("NetWare-Server-Alarm-MIB", "userName"))
if mibBuilder.loadTexts: loginEnabled.setDescription('Login enabled by user')
errLogTransferErr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,299)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: errLogTransferErr.setDescription('Error transferring IOEngine error log to MSEngine')
faultInConsoleCommandHandler = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,300)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: faultInConsoleCommandHandler.setDescription('Fault in console command handler')
commLinkActivated = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,301)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: commLinkActivated.setDescription('Mirrored comm link activated')
commLinkFailure = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,302)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: commLinkFailure.setDescription('Mirrored comm link failure')
commLinkDeactivated = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,303)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: commLinkDeactivated.setDescription('Mirrored comm link de-activated')
srvrAttemptedToSync = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,304)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: srvrAttemptedToSync.setDescription('Server attempted to synchronize')
commLinkBrokeOK = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,305)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: commLinkBrokeOK.setDescription('Comm Link broke and re-established')
syncStartingAmSecondarySrvr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,306)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: syncStartingAmSecondarySrvr.setDescription('Secondary server starting synchronization')
badSrvrInitMsg = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,307)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: badSrvrInitMsg.setDescription('Invalid mirrored server initialization')
commLinkInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,308)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: commLinkInitFailed.setDescription('Comm Link init failed')
failedDuringSync = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,309)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "szReason"))
if mibBuilder.loadTexts: failedDuringSync.setDescription('Synchronization failure')
commDriverLoadedDuringActivate = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,310)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: commDriverLoadedDuringActivate.setDescription('Comm driver loaded during an activate server')
errWritingStatusDump = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,311)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: errWritingStatusDump.setDescription('Error writing status dump')
commDriverFailureOnPrimary = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,312)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: commDriverFailureOnPrimary.setDescription('Comm driver on primary server')
commDriverFailureOnSecondary = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,313)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: commDriverFailureOnSecondary.setDescription('Comm Link init failed')
errFinishingGeneratingStatusDump = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,314)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: errFinishingGeneratingStatusDump.setDescription('Error finishing generating status dump')
sFTIIWhatToDoReasonString = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,315)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: sFTIIWhatToDoReasonString.setDescription('SFTIII what to do with reason string')
sFTIIErrorUnexpected = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,316)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: sFTIIErrorUnexpected.setDescription('Unexpected SFTIII error')
syncErrorGeneratedFromCustomSrvr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,317)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: syncErrorGeneratedFromCustomSrvr.setDescription('Sync error generated by custom server')
srvrLinkHasPluggedPacket = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,318)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: srvrLinkHasPluggedPacket.setDescription('Server link has plugged packet')
srvrToBeRevived = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,319)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: srvrToBeRevived.setDescription('Mirrored Server will be revived')
srvrsAreSyncedThisIsThePrimary = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,320)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: srvrsAreSyncedThisIsThePrimary.setDescription('Mirrored servers are synchronized')
srvrCantRouteViaIPXToSecondary = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,321)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: srvrCantRouteViaIPXToSecondary.setDescription('Server does not know how to route via IPX')
srvrIPXRouteInfoToSecondary = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,322)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "boardNumber"), ("NetWare-Server-Alarm-MIB", "iHopsCount"), ("NetWare-Server-Alarm-MIB", "macAddress"))
if mibBuilder.loadTexts: srvrIPXRouteInfoToSecondary.setDescription('IPX route to secondary server')
errGivingRAMtoMSEngine = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,323)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: errGivingRAMtoMSEngine.setDescription('Error giving additional RAM to MSEngine')
moreRAMgivenToMSEngine = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,324)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "iRamStart"), ("NetWare-Server-Alarm-MIB", "iRamLength"))
if mibBuilder.loadTexts: moreRAMgivenToMSEngine.setDescription('More RAM given to MSEngine')
srvrsAreSyncedThisIsTheSecondary = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,325)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: srvrsAreSyncedThisIsTheSecondary.setDescription('Mirrored servers now synchronized')
srvrCantRouteViaIPXToPrimary = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,326)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: srvrCantRouteViaIPXToPrimary.setDescription('This server does not know how to route via IPX')
srvrIPXRouteInfoToPrimary = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,327)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "boardNumber"), ("NetWare-Server-Alarm-MIB", "iHopsCount"), ("NetWare-Server-Alarm-MIB", "macAddress"))
if mibBuilder.loadTexts: srvrIPXRouteInfoToPrimary.setDescription('IPX route to primary server')
priSrvrFailedButSecDown = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,328)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "szReason"))
if mibBuilder.loadTexts: priSrvrFailedButSecDown.setDescription('Primary server failed')
priSrvrFailedNewPri = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,329)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "szReason"))
if mibBuilder.loadTexts: priSrvrFailedNewPri.setDescription('Primary server failed')
numMemSegsExceedLimit = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,330)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: numMemSegsExceedLimit.setDescription('Number of memory segments exceeds limits')
numScreenExceedsLimit = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,331)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: numScreenExceedsLimit.setDescription('Number of screen modes exceeds limits')
iOVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,332)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: iOVersionMismatch.setDescription("Other server's IOEngine software version does not match")
srvrProtectLevelNoMatch = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,333)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: srvrProtectLevelNoMatch.setDescription("Server's protection level does not match")
srvrScreenAddressMismatch = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,334)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: srvrScreenAddressMismatch.setDescription("Server's screen address does not match")
iOEngineNotLoadedAtSameAddress = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,335)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "iRamStart"), ("NetWare-Server-Alarm-MIB", "iRamLength"))
if mibBuilder.loadTexts: iOEngineNotLoadedAtSameAddress.setDescription("Server's IOEngine not loaded at the same location")
bothSrvrHaveActiveMSEngines = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,336)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: bothSrvrHaveActiveMSEngines.setDescription('Both servers have active MSEngines')
noActiveMSEngineOnServers = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,337)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: noActiveMSEngineOnServers.setDescription('Neither server has an active MSEngine')
secSrvrMissingRAM = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,338)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "iRamStart"), ("NetWare-Server-Alarm-MIB", "iRamLength"))
if mibBuilder.loadTexts: secSrvrMissingRAM.setDescription('Secondary server is missing RAM')
bothSrvrHaveSameIPXAddr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,339)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: bothSrvrHaveSameIPXAddr.setDescription("Server's IOEngines have the same IPX internal network number")
iOEngIPXAddrMatchesMSEngine = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,340)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: iOEngIPXAddrMatchesMSEngine.setDescription("IOEngine IPX internal net number matches the MSEngine's IPX internal net number")
iOEnginesMismatchLANRxBufferSize = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,341)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "iRamStart"), ("NetWare-Server-Alarm-MIB", "iRamLength"))
if mibBuilder.loadTexts: iOEnginesMismatchLANRxBufferSize.setDescription('IOEngines have different lan receive buffer sizes')
iOEnginesHaveSameName = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,342)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: iOEnginesHaveSameName.setDescription('IOEngines have the same names')
noMemoryForIOEngineName = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,343)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: noMemoryForIOEngineName.setDescription("Insufficient memory to store other IOEngine's name")
srvrToSrvrLinkBeginSync = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,344)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: srvrToSrvrLinkBeginSync.setDescription('Mirrored server to server comm link connection beginning synchronization')
mSEngineActivated = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,345)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: mSEngineActivated.setDescription('MSEngine activated')
mSEngActivatedWillSyncWithOther = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,346)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: mSEngActivatedWillSyncWithOther.setDescription("MSEngine activated...will synchronize with other server if it's there")
iOtoMSCommBeingUnloaded = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,347)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: iOtoMSCommBeingUnloaded.setDescription('IOEngine to MSEngine communications being unloaded')
sFTIIIOutOfMsgCodes = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,348)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: sFTIIIOutOfMsgCodes.setDescription('Out of communications message codes')
secIOEngSupportModulesNotLoaded = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,349)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: secIOEngSupportModulesNotLoaded.setDescription("Secondary IOEngine doesn't have appropriate support modules loaded")
errXferDumpToSystem = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,350)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: errXferDumpToSystem.setDescription('Unable to transfer mirrored server status dumps')
failureCheckingPrimarySrvr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,351)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "szReason"))
if mibBuilder.loadTexts: failureCheckingPrimarySrvr.setDescription('Failure checking if the primary server is alive over the IPX internet')
errStarting2ndProcessor = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,352)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: errStarting2ndProcessor.setDescription('Error starting the 2nd processor')
srvrFailure = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,353)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: srvrFailure.setDescription('Server Failure message')
srvsSyncing = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,354)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: srvsSyncing.setDescription('Mirrored server synchronizing')
mSLBoardNumberConnEstablished = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,355)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "boardNumber"))
if mibBuilder.loadTexts: mSLBoardNumberConnEstablished.setDescription('MSL Board Number has established a connection')
secSrvrLANIsBetter = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,356)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: secSrvrLANIsBetter.setDescription("The secondary server's LAN more functional than primary server's")
iPXreturningStatusPackets = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,357)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "networkAddress"))
if mibBuilder.loadTexts: iPXreturningStatusPackets.setDescription('IPX Network is now returning status check packets')
iPXnotReturningStatCheckPackets = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,358)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "networkAddress"))
if mibBuilder.loadTexts: iPXnotReturningStatCheckPackets.setDescription('IPX Network is no longer returning status check packets')
iPXnotReturningStatPcktLANJammed = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,359)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "networkAddress"))
if mibBuilder.loadTexts: iPXnotReturningStatPcktLANJammed.setDescription('IPX Network is no longer returning status check packets and the LAN adapter is jammed transmitting packets')
failReasonByOtherSrvr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,360)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "serverName1"))
if mibBuilder.loadTexts: failReasonByOtherSrvr.setDescription('Failure reason as detected by other server')
iPXInternetIsJammed = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,361)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: iPXInternetIsJammed.setDescription('The IPX Internet is back up')
iPXTooSlowForSecSrvr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,362)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: iPXTooSlowForSecSrvr.setDescription("The IPX internet may be too slow to notify the secondary server if the MSL fails... increase the 'Secondary Take Over Delay Amount'")
otherSrvrTooManyHops = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,363)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: otherSrvrTooManyHops.setDescription("The IPX internet path to the other server has been detected as being greater than the 'Maximum Pseudo Hop Count'")
iPXappearsDown = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,364)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: iPXappearsDown.setDescription('The IPX Internet appears to be down')
iPXFoundRouteToOtherSrvr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,365)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: iPXFoundRouteToOtherSrvr.setDescription('IPX route to the other server has been discovered')
iPXNewRouteToSecSrvr = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,366)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "boardNumber"), ("NetWare-Server-Alarm-MIB", "iHopsCount"), ("NetWare-Server-Alarm-MIB", "macAddress"))
if mibBuilder.loadTexts: iPXNewRouteToSecSrvr.setDescription('New IPX route to other server')
iPXLostRoute = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,367)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: iPXLostRoute.setDescription('IPX route to the other server has been lost')
secSrvrGoingToDie = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,368)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "szReason"), ("NetWare-Server-Alarm-MIB", "iTimerTicks"))
if mibBuilder.loadTexts: secSrvrGoingToDie.setDescription('Secondary server will initiate error')
priSrvrDyingTimerReStart = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,369)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "szReason"), ("NetWare-Server-Alarm-MIB", "iTimerTicks"))
if mibBuilder.loadTexts: priSrvrDyingTimerReStart.setDescription('Primary server will initiate error')
priSrvrDying = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,370)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "szReason"), ("NetWare-Server-Alarm-MIB", "iTimerTicks"))
if mibBuilder.loadTexts: priSrvrDying.setDescription('Primary server will initiate error...dying')
noMemForOtherIOEngScreen = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,371)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: noMemForOtherIOEngScreen.setDescription('Allocate memory for other IOEngine screen')
timesyncErrorMsg = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,372)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"))
if mibBuilder.loadTexts: timesyncErrorMsg.setDescription('Timesync error')
dsAlertSetServerDown = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,373)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "serverName1"))
if mibBuilder.loadTexts: dsAlertSetServerDown.setDescription('Unable to communicate with server')
dsAlertSetServerUp = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,374)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "serverName1"))
if mibBuilder.loadTexts: dsAlertSetServerUp.setDescription('Re-established communication with server')
redirectTableMismatch = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,375)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "partitionNumber"), ("NetWare-Server-Alarm-MIB", "numberOfPackets"))
if mibBuilder.loadTexts: redirectTableMismatch.setDescription('The system detected a redirection error table mismatch.')
nlmAlertMajor = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,376)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "nlmName"), ("NetWare-Server-Alarm-MIB", "nlmSeverity"), ("NetWare-Server-Alarm-MIB", "message"))
if mibBuilder.loadTexts: nlmAlertMajor.setDescription('This trap will handle major traps being generated by third-party NLMs and the traps generated by driver NLMs written by NOVELL or third party.')
nlmAlertMinor = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,377)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "nlmName"), ("NetWare-Server-Alarm-MIB", "nlmSeverity"), ("NetWare-Server-Alarm-MIB", "message"))
if mibBuilder.loadTexts: nlmAlertMinor.setDescription('This trap will handle minor traps being generated by third-party NLMs and the traps generated by driver NLMs written by NOVELL or third party.')
nlmAlertInformational = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 10) + (0,378)).setObjects(("NetWare-Server-Alarm-MIB", "serverName"), ("NetWare-Server-Alarm-MIB", "trapTime"), ("NetWare-Server-Alarm-MIB", "nlmName"), ("NetWare-Server-Alarm-MIB", "nlmSeverity"), ("NetWare-Server-Alarm-MIB", "message"))
if mibBuilder.loadTexts: nlmAlertInformational.setDescription('This trap will handle info traps being generated by third-party NLMs and the traps generated by driver NLMs written by NOVELL or third party.')
mibBuilder.exportSymbols("NetWare-Server-Alarm-MIB", insertMagazineAck=insertMagazineAck, opnBinderyFailSinceVolNotMounted=opnBinderyFailSinceVolNotMounted, redirectInconsistNoFix=redirectInconsistNoFix, clrStnByConsole=clrStnByConsole, bothSrvrHaveSameIPXAddr=bothSrvrHaveSameIPXAddr, createPrssUnableToAllocPrssCntlBlk=createPrssUnableToAllocPrssCntlBlk, numberOfPackets=numberOfPackets, fileWritePreReaderrDSSrvr=fileWritePreReaderrDSSrvr, cacheMemAllocExceededMinLeftLimit=cacheMemAllocExceededMinLeftLimit, fileOffset=fileOffset, remDSMediaAborted=remDSMediaAborted, remirroringPart=remirroringPart, intruderLockout=intruderLockout, diskName=diskName, resourceName=resourceName, diskErrorCompression=diskErrorCompression, timeSyncEstablished=timeSyncEstablished, attmptngToEstblshCallBckConnectn=attmptngToEstblshCallBckConnectn, dataMgrtrNotLoadedWhenRequested=dataMgrtrNotLoadedWhenRequested, sFTIIErrorUnexpected=sFTIIErrorUnexpected, noSAPSocketTag=noSAPSocketTag, negPktLargeBuffer=negPktLargeBuffer, errExpandingDirDuetoWriteErr=errExpandingDirDuetoWriteErr, invalidConnTypetoAllocConn=invalidConnTypetoAllocConn, srvrIPXRouteInfoToPrimary=srvrIPXRouteInfoToPrimary, fileValue=fileValue, redirectInconsistFix=redirectInconsistFix, dsAlertSetServerUp=dsAlertSetServerUp, removeMediaFrom=removeMediaFrom, sFTIIIOutOfMsgCodes=sFTIIIOutOfMsgCodes, unrecognizedCommandLineOption=unrecognizedCommandLineOption, commDriverFailureOnPrimary=commDriverFailureOnPrimary, errWritingToFileUsr=errWritingToFileUsr, remoteConnectionGrantedNameKnown=remoteConnectionGrantedNameKnown, errLogTransferErr=errLogTransferErr, loginDisabledByUser=loginDisabledByUser, diskDeactivatedDeviceFailure=diskDeactivatedDeviceFailure, routerName=routerName, commLinkBrokeOK=commLinkBrokeOK, allMirroredPartAreSync=allMirroredPartAreSync, copyrightViolation=copyrightViolation, iHopsCount=iHopsCount, numberOfCacheBuffersGettingLow=numberOfCacheBuffersGettingLow, priSrvrFailedNewPri=priSrvrFailedNewPri, errWritingToFileDataStreamUsr=errWritingToFileDataStreamUsr, ttsNoMemForExpandingTxNodeTables=ttsNoMemForExpandingTxNodeTables, iPXnotReturningStatCheckPackets=iPXnotReturningStatCheckPackets, commLinkDeactivated=commLinkDeactivated, skulkingError=skulkingError, taskNumber=taskNumber, priSrvrFailedButSecDown=priSrvrFailedButSecDown, outOfHotFixBlks=outOfHotFixBlks, fileSize1=fileSize1, ttsDownbyVolDismount=ttsDownbyVolDismount, noTimerTag=noTimerTag, nlmAlertMajor=nlmAlertMajor, exceptionName=exceptionName, szReason=szReason, ttsDisErrWritingVolDefInfo=ttsDisErrWritingVolDefInfo, ncpSearchLimitExecBySrvr=ncpSearchLimitExecBySrvr, nlmAlertMinor=nlmAlertMinor, dsOpenFailed=dsOpenFailed, dsOpenFailedInconsistentDatabase=dsOpenFailedInconsistentDatabase, invalidResourceTagPassed=invalidResourceTagPassed, commLinkInitFailed=commLinkInitFailed, auditFileFull=auditFileFull, nlmUnableToOpenListFile=nlmUnableToOpenListFile, iPXnotReturningStatPcktLANJammed=iPXnotReturningStatPcktLANJammed, filePreservationErrorInsuffSpace=filePreservationErrorInsuffSpace, auditAlertThresholdOverFlow=auditAlertThresholdOverFlow, mlidResetLanBd=mlidResetLanBd, compErrTempFileErr=compErrTempFileErr, partitionsSync=partitionsSync, iPXreturningStatusPackets=iPXreturningStatusPackets, cantCreateMainProcess=cantCreateMainProcess, iOEngineNotLoadedAtSameAddress=iOEngineNotLoadedAtSameAddress, ttsDisErrWritingTTSduringBackout=ttsDisErrWritingTTSduringBackout, errOpeningRIPSocket=errOpeningRIPSocket, srvrScreenAddressMismatch=srvrScreenAddressMismatch, protocolName=protocolName, dsAuditMemoryAllocation=dsAuditMemoryAllocation, dsIntruderNoAddr=dsIntruderNoAddr, mSEngActivatedWillSyncWithOther=mSEngActivatedWillSyncWithOther, iPXInternetIsJammed=iPXInternetIsJammed, diskAdded=diskAdded, macAddress1=macAddress1, volAnyDismounted=volAnyDismounted, trapTime=trapTime, internalNetworkAddress1=internalNetworkAddress1, diskDeactivatedEOM=diskDeactivatedEOM, checkAddHardware=checkAddHardware, pollingLoops=pollingLoops, dupInternetAddr=dupInternetAddr, pathFileName=pathFileName, fileWritePreReaderrDSUsr=fileWritePreReaderrDSUsr, loginEnabled=loginEnabled, errFinishingGeneratingStatusDump=errFinishingGeneratingStatusDump, binderyOpnReqtdByUsrFailed=binderyOpnReqtdByUsrFailed, unknownErrorCompression=unknownErrorCompression, volAnyMounted=volAnyMounted, srvrAttemptedToSync=srvrAttemptedToSync, iPXappearsDown=iPXappearsDown, packetSize=packetSize, lanDriverName=lanDriverName, allocateDirEntryWriteError=allocateDirEntryWriteError, unsignedRemoteConnectionGranted=unsignedRemoteConnectionGranted, insertDSMediaInto=insertDSMediaInto, errorNumber=errorNumber, volRestrictedSpace=volRestrictedSpace, moduleLoad=moduleLoad, srvrIPXRouteInfoToSecondary=srvrIPXRouteInfoToSecondary, dsAlertSetServerDown=dsAlertSetServerDown, remoteConnectionClearedNameKnown=remoteConnectionClearedNameKnown, secSrvrLANIsBetter=secSrvrLANIsBetter, numberOfFailedRecordLockRequests=numberOfFailedRecordLockRequests, lanReceiveBuffLimitReached=lanReceiveBuffLimitReached, boardNumber=boardNumber, diskDeactivatedUsrRequest=diskDeactivatedUsrRequest, unrecognizedCommandLinePrmtr=unrecognizedCommandLinePrmtr, removeHardwareOptions=removeHardwareOptions, dsCloseSucceeded=dsCloseSucceeded, numberOfFailedFileLockRequests=numberOfFailedFileLockRequests, errReadingBothCopiesofDir=errReadingBothCopiesofDir, semipermanentMemoryExhausted=semipermanentMemoryExhausted, moduleDidNotReleaseResources=moduleDidNotReleaseResources, decompressUnderFreePercentage=decompressUnderFreePercentage, nlmNoPriority=nlmNoPriority, checksumInvalid=checksumInvalid, insufficientSpaceForDecompression=insufficientSpaceForDecompression, rejectedIncompleteNCP=rejectedIncompleteNCP, fileReaderrDSSrvr=fileReaderrDSSrvr, errExpandingNoDiskSpace=errExpandingNoDiskSpace, rtrClaimingSameInterAddr=rtrClaimingSameInterAddr, unknownDecompressErrorWithName=unknownDecompressErrorWithName, cmmndLnPrmtr=cmmndLnPrmtr, usrAcctDeletedByAUsrSingleConn=usrAcctDeletedByAUsrSingleConn, supAcctLockoutClrdByConsole=supAcctLockoutClrdByConsole, commDriverLoadedDuringActivate=commDriverLoadedDuringActivate, iOtoMSCommBeingUnloaded=iOtoMSCommBeingUnloaded, stationNumber=stationNumber, insufficientDecompError=insufficientDecompError, connTerminated=connTerminated, nlmName=nlmName, insertMagazineInto=insertMagazineInto, compFileCorrupted=compFileCorrupted, errOpeningSAPSocket=errOpeningSAPSocket, domainQuarantined=domainQuarantined, insertMediaAborted=insertMediaAborted, volumeNumber=volumeNumber, outOfServerConn=outOfServerConn, connectionNumber=connectionNumber, logoutConnection=logoutConnection, socketNumber1=socketNumber1, noResourceTag=noResourceTag, unableToCreateVOLERR=unableToCreateVOLERR, ttsDisDirErrOnBkFile=ttsDisDirErrOnBkFile, baudRate=baudRate, readFault=readFault, fileLength=fileLength, auditEvent=auditEvent, iOEngIPXAddrMatchesMSEngine=iOEngIPXAddrMatchesMSEngine, macAddress2=macAddress2, serverUp=serverUp, cantAllocateMainStack=cantAllocateMainStack, auditFileWriteError=auditFileWriteError, partitionNumber=partitionNumber, redirectBlk=redirectBlk, writeFault=writeFault, insertMediaAck=insertMediaAck, iOVersionMismatch=iOVersionMismatch, remMediaAck=remMediaAck, connClearedByUsr=connClearedByUsr, secIOEngSupportModulesNotLoaded=secIOEngSupportModulesNotLoaded, noParseCommandLine=noParseCommandLine, diskDeactivatedServerFailure=diskDeactivatedServerFailure, iRamStart=iRamStart, volDismountedDueToDriveDeact=volDismountedDueToDriveDeact, faultInConsoleCommandHandler=faultInConsoleCommandHandler, srvrsAreSyncedThisIsThePrimary=srvrsAreSyncedThisIsThePrimary, invalidDuplicateSignature=invalidDuplicateSignature, compErrReadZeroBytesInt=compErrReadZeroBytesInt, diskDeactivatedDriverUnload=diskDeactivatedDriverUnload, syncRadiusLess=syncRadiusLess, errExpandingNoMemSpace=errExpandingNoMemSpace, srvrLinkHasPluggedPacket=srvrLinkHasPluggedPacket, ttsDisErrReadTTSduringBackout=ttsDisErrReadTTSduringBackout, rtrConfigErr=rtrConfigErr, translatorDown=translatorDown, spuriousInt=spuriousInt, fileServerDowned=fileServerDowned, iOEnginesHaveSameName=iOEnginesHaveSameName, unknownErrorDecomp=unknownErrorDecomp, iPXTooSlowForSecSrvr=iPXTooSlowForSecSrvr, nlmSeverity=nlmSeverity, synchronizationRadius=synchronizationRadius, macAddress=macAddress, bothSrvrHaveActiveMSEngines=bothSrvrHaveActiveMSEngines, auditEventNumber=auditEventNumber, insertMagazineAborted=insertMagazineAborted, failedToDeleteMigrateFile=failedToDeleteMigrateFile, fileSize=fileSize, numMemSegsExceedLimit=numMemSegsExceedLimit, dosType=dosType, callBackNumber=callBackNumber, fileWritePreReaderrUsr=fileWritePreReaderrUsr, ttsDisErrTooManyDefInfo=ttsDisErrTooManyDefInfo, compErrLthOffsetCodeCountMismatch=compErrLthOffsetCodeCountMismatch, srvrToBeRevived=srvrToBeRevived, invalidRsrcTagPassedtoAllocConn=invalidRsrcTagPassedtoAllocConn, remDSMediaAck=remDSMediaAck, numScreenExceedsLimit=numScreenExceedsLimit, serverName=serverName, errWritingDirectoryBlk=errWritingDirectoryBlk, loginEnabledByUser=loginEnabledByUser, deviceName=deviceName, ipxReceivedIncomPacket=ipxReceivedIncomPacket, removeDSMediaFrom=removeDSMediaFrom, exception=exception, removeMagazineFrom=removeMagazineFrom, noSetableParameterTag=noSetableParameterTag, callBackNumberNotReceived=callBackNumberNotReceived, remoteConnCleared=remoteConnCleared, fileMiscInfo1=fileMiscInfo1, licenseInvalid=licenseInvalid, mirrorInconsistencies=mirrorInconsistencies, trapinfo=trapinfo, invalidScreenID=invalidScreenID, userName=userName, errWritingToFileDataStream=errWritingToFileDataStream, fileSrvrUsrDeleted=fileSrvrUsrDeleted, mlidUnRegister=mlidUnRegister, connTerminated5MinNotice=connTerminated5MinNotice, fewRedirectionBlks=fewRedirectionBlks, srvrsAreSyncedThisIsTheSecondary=srvrsAreSyncedThisIsTheSecondary, clrStnByUsr=clrStnByUsr, diskDeactivated=diskDeactivated, dsAuditFileFull=dsAuditFileFull, compErrReadZeroBytesOrig=compErrReadZeroBytesOrig, deactHotFix=deactHotFix, clearConnection=clearConnection, ttsLimitExceeded=ttsLimitExceeded, serverPolled=serverPolled, workToDo=workToDo, errGivingRAMtoMSEngine=errGivingRAMtoMSEngine, volOfDiskSpaceNoPurge=volOfDiskSpaceNoPurge, diskDeactivatedMediaDismount=diskDeactivatedMediaDismount, rtrConfigErr2=rtrConfigErr2, remMagazineAck=remMagazineAck, dirReachedItsLimit=dirReachedItsLimit, volumePercentage=volumePercentage, nwalarm_mib=nwalarm_mib, growableStackNotAllocated=growableStackNotAllocated, priSrvrDying=priSrvrDying, remoteConnectionRefusedNameKnown=remoteConnectionRefusedNameKnown)
mibBuilder.exportSymbols("NetWare-Server-Alarm-MIB", fileReaderrSrvrNofileName=fileReaderrSrvrNofileName, blockNumber=blockNumber, ttsDisabledByOperator=ttsDisabledByOperator, volOfDiskSpace=volOfDiskSpace, unsignedRemoteConnectionRefused=unsignedRemoteConnectionRefused, protocolBound=protocolBound, commLinkActivated=commLinkActivated, requestedRtrReset=requestedRtrReset, remoteConnRefused=remoteConnRefused, signatureInvalid=signatureInvalid, blockNumber1=blockNumber1, cannotStart=cannotStart, processedNCPBadSubfunctionLngth=processedNCPBadSubfunctionLngth, insertDSMediaAborted=insertDSMediaAborted, noSpecificSupportModulesLoaded=noSpecificSupportModulesLoaded, fileMiscInfo=fileMiscInfo, generalTTSfailures=generalTTSfailures, errWritingFatTables=errWritingFatTables, stationRecordLockThresholdReached=stationRecordLockThresholdReached, protocolUnBound=protocolUnBound, systemRecordLockThresholdReached=systemRecordLockThresholdReached, loginDisabledByConsole=loginDisabledByConsole, invalidPburstSignature=invalidPburstSignature, commandProcess=commandProcess, numberOfConnections=numberOfConnections, remoteConnectionTimedOut=remoteConnectionTimedOut, cacheMemAllocOutOfMem=cacheMemAllocOutOfMem, volumeName=volumeName, codeOffset=codeOffset, fileSize2=fileSize2, connTerminatedByWatchDog=connTerminatedByWatchDog, prssDidNotRelqhCntlFqtly=prssDidNotRelqhCntlFqtly, binderyClosedBySrvr=binderyClosedBySrvr, errUnloadKilledNlm=errUnloadKilledNlm, dosType1=dosType1, iOEnginesMismatchLANRxBufferSize=iOEnginesMismatchLANRxBufferSize, binderyClosedByUsr=binderyClosedByUsr, sFTIIWhatToDoReasonString=sFTIIWhatToDoReasonString, maximumPercent=maximumPercent, iPXNewRouteToSecSrvr=iPXNewRouteToSecSrvr, loginDisabled=loginDisabled, interruptNumber=interruptNumber, noEventTag=noEventTag, loginConnection=loginConnection, errWritingToTheExtendedDirSpace=errWritingToTheExtendedDirSpace, timeSyncLost=timeSyncLost, networkAddress=networkAddress, auditAlertInvalidConfigFile=auditAlertInvalidConfigFile, binderyOpnReqtdBySrvr=binderyOpnReqtdBySrvr, commLinkFailure=commLinkFailure, noTimeSyncNCPVariable=noTimeSyncNCPVariable, failedDuringSync=failedDuringSync, errWritingStatusDump=errWritingStatusDump, volOprDespiteDeviceDriveDeact=volOprDespiteDeviceDriveDeact, useOfUnEncryptedPwd=useOfUnEncryptedPwd, userName1=userName1, secSrvrMissingRAM=secSrvrMissingRAM, redirectBlockMismatch=redirectBlockMismatch, secSrvrGoingToDie=secSrvrGoingToDie, unauthorizedCallBackNumber=unauthorizedCallBackNumber, invalidSignatureString=invalidSignatureString, ttsDisGrowMemTables=ttsDisGrowMemTables, errXferDumpToSystem=errXferDumpToSystem, fileName=fileName, diskDeactivatedUnknownReason=diskDeactivatedUnknownReason, reason=reason, remMediaAborted=remMediaAborted, serverDownatServer=serverDownatServer, ncpSubFunctionNumber=ncpSubFunctionNumber, filePreservationErrorDuringErase=filePreservationErrorDuringErase, errWriteOpenTTSLogFile=errWriteOpenTTSLogFile, stationUsedABadPacket=stationUsedABadPacket, redirectTableMismatch=redirectTableMismatch, failureCheckingPrimarySrvr=failureCheckingPrimarySrvr, volContainstheWrongDOSType=volContainstheWrongDOSType, numberOfResources=numberOfResources, rtrFalsehood=rtrFalsehood, invalidResourceTag=invalidResourceTag, ttsDisErrAllDiskSpace=ttsDisErrAllDiskSpace, memoryAddress=memoryAddress, commDriverFailureOnSecondary=commDriverFailureOnSecondary, modemConnectionEstablished=modemConnectionEstablished, syncStartingAmSecondarySrvr=syncStartingAmSecondarySrvr, systemTimeChangedByConsole=systemTimeChangedByConsole, dsAuditFileWriteError=dsAuditFileWriteError, singleSrvrIncompatible=singleSrvrIncompatible, compErrLgrLngthCodeCountMismatch=compErrLgrLngthCodeCountMismatch, iTimerTicks=iTimerTicks, systemFileLockThresholdReached=systemFileLockThresholdReached, moduleDidNotReleaseOneResource=moduleDidNotReleaseOneResource, srvrAddrChanged=srvrAddrChanged, serverTime=serverTime, numberOfTransactions=numberOfTransactions, badSrvrInitMsg=badSrvrInitMsg, mirroredPartNotAllSynced=mirroredPartNotAllSynced, lanDriverLoopBack=lanDriverLoopBack, scndryPicLostInterrupt=scndryPicLostInterrupt, remMagazineAborted=remMagazineAborted, errStarting2ndProcessor=errStarting2ndProcessor, internalNetworkAddress=internalNetworkAddress, originalNameSpaceNotFound=originalNameSpaceNotFound, binderyOpnReqtdByUsR=binderyOpnReqtdByUsR, insertDSMediaAck=insertDSMediaAck, resourceDescription=resourceDescription, compErrTreeTooBig=compErrTreeTooBig, failReasonByOtherSrvr=failReasonByOtherSrvr, compErrMatchSizeFail=compErrMatchSizeFail, noSAPSocket=noSAPSocket, reqtdRtrReset311=reqtdRtrReset311, processName=processName, timesyncErrorMsg=timesyncErrorMsg, syncErrorGeneratedFromCustomSrvr=syncErrorGeneratedFromCustomSrvr, moduleUnLoad=moduleUnLoad, errWritingToFile=errWritingToFile, mSLBoardNumberConnEstablished=mSLBoardNumberConnEstablished, message=message, rtrConfigErr3=rtrConfigErr3, srvrFailure=srvrFailure, usrAcctDeletedByAUsr=usrAcctDeletedByAUsr, noGlobalInfo=noGlobalInfo, stationFileLockThresholdReached=stationFileLockThresholdReached, wsNotLocated=wsNotLocated, unableToWriteVOLERR=unableToWriteVOLERR, transactionAbortedForStation=transactionAbortedForStation, prmyPicLostInterrupt=prmyPicLostInterrupt, noAllocTag=noAllocTag, ttsDisErrRdBlkFlRecGen=ttsDisErrRdBlkFlRecGen, ipxUnbndRequest=ipxUnbndRequest, disableTTSbyUser=disableTTSbyUser, accountName=accountName, createPrssReqtdStackTooSmall=createPrssReqtdStackTooSmall, dsopenSucceeded=dsopenSucceeded, outOfShortTermMemoryRequestFailed=outOfShortTermMemoryRequestFailed, srvrToSrvrLinkBeginSync=srvrToSrvrLinkBeginSync, iPXLostRoute=iPXLostRoute, diskDismounted=diskDismounted, noMemoryForIOEngineName=noMemoryForIOEngineName, socketNumber=socketNumber, diskMounted=diskMounted, srvrCantRouteViaIPXToSecondary=srvrCantRouteViaIPXToSecondary, moreRAMgivenToMSEngine=moreRAMgivenToMSEngine, diskDeactivatedServerDown=diskDeactivatedServerDown, dsAuditFileThresholdOverflow=dsAuditFileThresholdOverflow, noProcessTag=noProcessTag, decompUnknownCompVersion=decompUnknownCompVersion, noActiveMSEngineOnServers=noActiveMSEngineOnServers, compFilePathCorrupted=compFilePathCorrupted, NetNumber=NetNumber, extendFileHasNoOwnerToCharge=extendFileHasNoOwnerToCharge, iPXFoundRouteToOtherSrvr=iPXFoundRouteToOtherSrvr, mirroredPartNotAllSync=mirroredPartNotAllSync, errCreateOpenTTSLogFile=errCreateOpenTTSLogFile, mibDoc=mibDoc, lanBdUnreachable=lanBdUnreachable, cannotInitialize=cannotInitialize, enableTTSByUser=enableTTSByUser, remoteConnGranted=remoteConnGranted, translatorUp=translatorUp, mlidRegister=mlidRegister, priSrvrDyingTimerReStart=priSrvrDyingTimerReStart, partitionsUnSync=partitionsUnSync, usrAcctDisabledByAUsr=usrAcctDisabledByAUsr, compErrLngthTotMismatch=compErrLngthTotMismatch, notEnoughRAMForComp=notEnoughRAMForComp, nlmAlertInformational=nlmAlertInformational, insufficientRamToDecompWithName=insufficientRamToDecompWithName, downFileServer=downFileServer, pathName=pathName, domainName=domainName, diskActivated=diskActivated, abortRemirrorPart=abortRemirrorPart, responsePacketNotAllocated=responsePacketNotAllocated, compFileInUse=compFileInUse, diskSpace=diskSpace, nlmUnableToReadListFile=nlmUnableToReadListFile, errorOpeningNetAcctData=errorOpeningNetAcctData, mediaLabel=mediaLabel, numberOfBlocks=numberOfBlocks, dirSizeGettingTooLrgeForMem=dirSizeGettingTooLrgeForMem, packetSize1=packetSize1, auditAlertNoMemory=auditAlertNoMemory, networkAddress1=networkAddress1, mSEngineActivated=mSEngineActivated, noMemForOtherIOEngScreen=noMemForOtherIOEngScreen, compErrOffsetTotalsMismatch=compErrOffsetTotalsMismatch, numberOfFailedMemoryAllocAttempts=numberOfFailedMemoryAllocAttempts, compressErrorHoleCountMismatch=compressErrorHoleCountMismatch, novell=novell, volAlmostOutOfDiskSpace=volAlmostOutOfDiskSpace, nlmAlertCritical=nlmAlertCritical, iRamLength=iRamLength, srvrProtectLevelNoMatch=srvrProtectLevelNoMatch, serverName1=serverName1, ncpSearchLimitExecByStation=ncpSearchLimitExecByStation, otherSrvrTooManyHops=otherSrvrTooManyHops, ncpFunctionNumber=ncpFunctionNumber, rdTimeDataMigratorModuleChanged=rdTimeDataMigratorModuleChanged, compErrDataCodeCountMismatch=compErrDataCodeCountMismatch, couldNotRedirectBlk=couldNotRedirectBlk, loginEnabledByConsole=loginEnabledByConsole, shortTermMemoryLimitExceeded=shortTermMemoryLimitExceeded, srvrCantRouteViaIPXToPrimary=srvrCantRouteViaIPXToPrimary, srvsSyncing=srvsSyncing, dataStreamNumber=dataStreamNumber, fileWritePreReaderrSrvr=fileWritePreReaderrSrvr, eipAddress=eipAddress, fileReaderrDSUsr=fileReaderrDSUsr, invldRrceTagPsedToCreatePrss=invldRrceTagPsedToCreatePrss, systemTimeChangedByUser=systemTimeChangedByUser, rejectedNCPBadSubfunctionLngth=rejectedNCPBadSubfunctionLngth, modemClearedAndCallBackAttempted=modemClearedAndCallBackAttempted, fileReaderrUsrNofileName=fileReaderrUsrNofileName, dirCopyReadErr=dirCopyReadErr, modemConnectionCleared=modemConnectionCleared, objectName=objectName)
