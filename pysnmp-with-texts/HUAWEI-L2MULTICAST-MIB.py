#
# PySNMP MIB module HUAWEI-L2MULTICAST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-L2MULTICAST-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:45:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
VlanIdOrAny, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIdOrAny")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, NotificationType, Bits, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, MibIdentifier, Unsigned32, ModuleIdentity, Gauge32, IpAddress, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "Bits", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "MibIdentifier", "Unsigned32", "ModuleIdentity", "Gauge32", "IpAddress", "ObjectIdentity", "TimeTicks")
DisplayString, MacAddress, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention", "RowStatus", "TruthValue")
hwL2MultiCastMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181))
if mibBuilder.loadTexts: hwL2MultiCastMIB.setLastUpdated('200812300000Z')
if mibBuilder.loadTexts: hwL2MultiCastMIB.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwL2MultiCastMIB.setContactInfo(' R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwL2MultiCastMIB.setDescription('The MIB module for IGMP Snooping feature. Internet Group Management Protocol (IGMP) is the protocol used by IPv4 end hosts to indicate their interest in receiving multicast traffic for certain multicast groups to neighboring multicast routers. IGMP Snooping is a switch protocol. A switch that implements IGMP Snooping listens to the IGMP messages exchanged between the hosts and router, then provides selective transmission of multicast traffic based on multicast mac destination address or multicast group address.')
class HWPortType(TextualConvention, Integer32):
    description = 'type of port : invalid(1):invalid type, pw(2) : pw type, switchport(3) : switchport type, dot1q(4): dot1q sub-interface type, termination(5): termination sub-interface type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("invalid", 1), ("pw", 2), ("switchport", 3), ("dot1q", 4), ("termination", 5))

hwIgspMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1))
hwIgspSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 1))
hwIgmpSnoopingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIgmpSnoopingEnabled.setStatus('current')
if mibBuilder.loadTexts: hwIgmpSnoopingEnabled.setDescription('IGMP snooping is enabled or disabled in the global view: 1: enabled 2: disabled The default value is 2. ')
hwSendQueryEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSendQueryEnabled.setStatus('current')
if mibBuilder.loadTexts: hwSendQueryEnabled.setDescription('The sending of query packets is enabled or disabled: 1: enabled 2: disabled The default value is 2. Note: Ensure that you query and configure this object after hwIgmpSnoopingEnabled is configured. ')
hwSendQuerySourceIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSendQuerySourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwSendQuerySourceIpAddr.setDescription('The source IP addresses of the Query messages sent by a device. The value ranges from 0.0.0.1 to 223.255.255.255. The default value is 192.168.0.1. ')
hwL2mcCacTrapInterval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2mcCacTrapInterval.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacTrapInterval.setDescription('The CAC trap interval. The default is zero.')
hwL2mcCfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2))
hwL2mcCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1), )
if mibBuilder.loadTexts: hwL2mcCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCfgTable.setDescription('This table describes the configurations of IGMP snooping in a VLAN or a VSI.')
hwL2mcCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1, 1), ).setIndexNames((0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcVlanIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcVsiName"))
if mibBuilder.loadTexts: hwL2mcCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCfgEntry.setDescription('An entry is created for each active VLAN or VSI in the device and deleted when the VLAN or VSI becomes inactive.')
hwL2mcVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1, 1, 1), VlanIdOrAny())
if mibBuilder.loadTexts: hwL2mcVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2mcVlanIndex.setDescription('The VLAN ID, which is the configuration index in a VLAN. If a VSI is specified, the value is 4095. The value ranges from 1 to 4095. ')
hwL2mcVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwL2mcVsiName.setStatus('current')
if mibBuilder.loadTexts: hwL2mcVsiName.setDescription('The name of a VSI. If a VLAN is specified, the value is 0.')
hwL2mcEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1, 1, 3), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcEnabled.setStatus('current')
if mibBuilder.loadTexts: hwL2mcEnabled.setDescription('Whether IGMP snooping is enabled in a VLAN or a VSI: 1:enabled 2:disabled The default value is 2. ')
hwL2mcRouterAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcRouterAgingTime.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterAgingTime.setDescription('The aging time of an interface on a router. The value ranges from 1 to 1000, in seconds. The default value is 180, which router port is created by Igmp Query message. And when it is created by PIM hello messge, the default value is the time of Holdtime in the message. ')
hwL2mcMaxQueryRespTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcMaxQueryRespTime.setStatus('current')
if mibBuilder.loadTexts: hwL2mcMaxQueryRespTime.setDescription('The maximum response time. The value ranges from 1 to 25, in seconds. The default value is 10, in seconds. ')
hwL2mcLastMemQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcLastMemQueryInterval.setStatus('current')
if mibBuilder.loadTexts: hwL2mcLastMemQueryInterval.setDescription('The last member query interval. The value ranges from 1 to 5, in seconds. The default value is 1, in seconds. ')
hwL2mcQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcQueryInterval.setStatus('current')
if mibBuilder.loadTexts: hwL2mcQueryInterval.setDescription('The query interval. The value ranges from 1 to 65535, in seconds. The default value is 60, in seconds. ')
hwL2mcRobustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcRobustCount.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRobustCount.setDescription('The robustness variable. The value ranges from 2 to 5. The default value is 2. ')
hwL2mcCheckRouterAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcCheckRouterAlert.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCheckRouterAlert.setDescription('Whether to check the router-alert of a packet. The default value is False. ')
hwL2mcSendRouterAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcSendRouterAlert.setStatus('current')
if mibBuilder.loadTexts: hwL2mcSendRouterAlert.setDescription('Whether to send the router-alert of a packet. The default value is true. ')
hwL2mcIgmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2), ("version3", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcIgmpVersion.setStatus('current')
if mibBuilder.loadTexts: hwL2mcIgmpVersion.setDescription('The version of the IGMP packets. The value ranges from 1 to 3. The default value is 2. ')
hwL2mcFwdMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcFwdMode.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFwdMode.setDescription('The forwarding mode: 1: IP 2: MAC The default value is 1. ')
hwL2mcPromptLeaveEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1, 1, 13), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcPromptLeaveEnable.setStatus('current')
if mibBuilder.loadTexts: hwL2mcPromptLeaveEnable.setDescription('Whether the prompt leave is enabled: 1: enabled 2: disabled The default value is 2. ')
hwL2mcPromptLeaveAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcPromptLeaveAclNum.setStatus('current')
if mibBuilder.loadTexts: hwL2mcPromptLeaveAclNum.setDescription('Whether the prompt leave complies with the ACL rules. The ACL number can be set. The ACL number ranges from 2000 to 3999. The default value is 0, indicating that no ACL number is set. ')
hwL2mcRouterPortLearningEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1, 1, 15), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcRouterPortLearningEnable.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortLearningEnable.setDescription('Whether interface learning is enabled or not in a VLAN: 1: enabled 2: disabled The default value is 1. ')
hwL2mcReportSuppressEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1, 1, 16), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcReportSuppressEnable.setStatus('current')
if mibBuilder.loadTexts: hwL2mcReportSuppressEnable.setDescription('Whether the suppression of the IGMP Report message (proxy) is enabled: 1: enabled 2: disabled The default value is 2. ')
hwL2mcIgmpQuerierEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1, 1, 17), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcIgmpQuerierEnable.setStatus('current')
if mibBuilder.loadTexts: hwL2mcIgmpQuerierEnable.setDescription('Whether the querier is enabled: 1: enabled 2: disabled The default value is 2. ')
hwL2mcIgmpSsmMappingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1, 1, 18), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcIgmpSsmMappingEnable.setStatus('current')
if mibBuilder.loadTexts: hwL2mcIgmpSsmMappingEnable.setDescription('Whether Ssm-Mapping is enabled: 1: enabled 2: disabled The default value is 2. ')
hwL2mcSsmAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 2999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcSsmAclNum.setStatus('current')
if mibBuilder.loadTexts: hwL2mcSsmAclNum.setDescription('That SSM complies with the ACL number. The ACL number ranges from 2000 to 2999. The default value is 0, indicating that no ACL number is set. ')
hwL2mcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 2, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRowStatus.setDescription('The row status.')
hwL2mcStatisticsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 3))
hwL2mcStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 3, 1), )
if mibBuilder.loadTexts: hwL2mcStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwL2mcStatisticsTable.setDescription('Table contains VLAN or VSI statistics information for IGMP Snooping.')
hwL2mcStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 3, 1, 1), ).setIndexNames((0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcStatsVlanIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcStatsVsiName"))
if mibBuilder.loadTexts: hwL2mcStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2mcStatisticsEntry.setDescription('An entry is created for each active VLAN or VSI in the device and deleted when the VLAN or VSI becomes inactive.')
hwL2mcStatsVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 3, 1, 1, 1), VlanIdOrAny())
if mibBuilder.loadTexts: hwL2mcStatsVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2mcStatsVlanIndex.setDescription('The VLAN ID, which is the configuration index in a VLAN. If a VSI is specified, the value is 4095. The value ranges from 1 to 4095. ')
hwL2mcStatsVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwL2mcStatsVsiName.setStatus('current')
if mibBuilder.loadTexts: hwL2mcStatsVsiName.setDescription('The name of a VSI. If a VLAN is specified, the value is 0.')
hwL2mcRecvIgmpV1ReportNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcRecvIgmpV1ReportNum.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRecvIgmpV1ReportNum.setDescription('The number of IGMPv1 Report messages received in a VLAN or a VSI.')
hwL2mcRecvIgmpV2ReportNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcRecvIgmpV2ReportNum.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRecvIgmpV2ReportNum.setDescription('The number of IGMPv2 Report messages received in a VLAN or a VSI.')
hwL2mcRecvIgmpV3ReportNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcRecvIgmpV3ReportNum.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRecvIgmpV3ReportNum.setDescription('The number of IGMPv3 Report messages received in a VLAN or a VSI.')
hwL2mcRecvIgmpLeaveNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcRecvIgmpLeaveNum.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRecvIgmpLeaveNum.setDescription('The number of IGMP Leave messages received in a VLAN or a VSI.')
hwL2mcRecvIgmpV1QueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcRecvIgmpV1QueryNum.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRecvIgmpV1QueryNum.setDescription('The number of IGMPv1 Query messages received in a VLAN or a VSI.')
hwL2mcRecvIgmpV2QueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcRecvIgmpV2QueryNum.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRecvIgmpV2QueryNum.setDescription('The number of IGMPv2 Query messages received in a VLAN or a VSI.')
hwL2mcRecvIgmpV3QueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcRecvIgmpV3QueryNum.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRecvIgmpV3QueryNum.setDescription('The number of IGMPv3 Query messages received in a VLAN or a VSI.')
hwL2mcRecvPimHelloNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcRecvPimHelloNum.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRecvPimHelloNum.setDescription('The number of PIM Hello messages received in a VLAN or a VSI.')
hwL2mcSendQueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcSendQueryNum.setStatus('current')
if mibBuilder.loadTexts: hwL2mcSendQueryNum.setDescription('The number of IGMP Query messages (the source address is 0) in a VLAN or a VSI.')
hwL2mcSendQuerySourceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcSendQuerySourceNum.setStatus('current')
if mibBuilder.loadTexts: hwL2mcSendQuerySourceNum.setDescription('The number of IGMP Query messages (the source address is not 0) in a VLAN or a VSI.')
hwL2mcProxyGenQueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcProxyGenQueryNum.setStatus('current')
if mibBuilder.loadTexts: hwL2mcProxyGenQueryNum.setDescription('The number of Query messages sent by the proxy in a VLAN or a VSI.')
hwL2mcProxyGroupQueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcProxyGroupQueryNum.setStatus('current')
if mibBuilder.loadTexts: hwL2mcProxyGroupQueryNum.setDescription('The number of Query messages sent by the proxy in a VLAN or a VSI to a specified group.')
hwL2mcProxyGroupSourceQueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcProxyGroupSourceQueryNum.setStatus('current')
if mibBuilder.loadTexts: hwL2mcProxyGroupSourceQueryNum.setDescription('The number of Query messages sent by the proxy in a VLAN or a VSI to a specified source group.')
hwL2mcIgmpPacketClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 3, 1, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2mcIgmpPacketClearStats.setStatus('current')
if mibBuilder.loadTexts: hwL2mcIgmpPacketClearStats.setDescription('Whether to clear the statistics of IGMP snooping. If the value is 1, it indicates that the statistics need to be cleared.')
hwL2mcFwdInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 4))
hwL2mcFwdTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 4, 1), )
if mibBuilder.loadTexts: hwL2mcFwdTable.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFwdTable.setDescription('Table contains l2 multicast forward information for IGMP Snooping.')
hwL2mcFwdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 4, 1, 1), ).setIndexNames((0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcFwdVlanIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcFwdVsiName"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcFwdGroupAddress"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcFwdSourceAddress"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcFwdPortType"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcFwdPortIfIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcFwdPortPeId"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcFwdPortCeId"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcFwdPeerAddress"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcFwdVcOrSiteId"))
if mibBuilder.loadTexts: hwL2mcFwdEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFwdEntry.setDescription('An entry is created for each active VLAN or VSI in the device create a forwarding table entry and delete when a forwarding table entry deleted.')
hwL2mcFwdVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 4, 1, 1, 1), VlanIdOrAny())
if mibBuilder.loadTexts: hwL2mcFwdVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFwdVlanIndex.setDescription('The VLAN ID, which is the configuration index in a VLAN. If a VSI is specified, the value is 4095. The value ranges from 1 to 4095. ')
hwL2mcFwdVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwL2mcFwdVsiName.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFwdVsiName.setDescription('The name of a VSI. If a VLAN is specified, the value is 0.')
hwL2mcFwdGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 4, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: hwL2mcFwdGroupAddress.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFwdGroupAddress.setDescription('The group address of a multicast group. In the case of MAC forwarding, the group address is the smallest of 32 IP addresses.')
hwL2mcFwdSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 4, 1, 1, 4), IpAddress())
if mibBuilder.loadTexts: hwL2mcFwdSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFwdSourceAddress.setDescription('The source IP address of a multicast group.')
hwL2mcFwdPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 4, 1, 1, 5), HWPortType())
if mibBuilder.loadTexts: hwL2mcFwdPortType.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFwdPortType.setDescription('The interface type: 1: Invalid 2: PW interface 3: L2 interface 4: Encapsulation sub-interface 5: Termination sub-interface ')
hwL2mcFwdPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 4, 1, 1, 6), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hwL2mcFwdPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFwdPortIfIndex.setDescription('The interface index. The value 0 indicates that the interface index is invalid.')
hwL2mcFwdPortPeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 4, 1, 1, 7), VlanIdOrAny())
if mibBuilder.loadTexts: hwL2mcFwdPortPeId.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFwdPortPeId.setDescription('The PE VID of an interface. The value ranges from 1 to 4095. The value 4095 indicates that the PE VID is invalid. ')
hwL2mcFwdPortCeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 4, 1, 1, 8), VlanIdOrAny())
if mibBuilder.loadTexts: hwL2mcFwdPortCeId.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFwdPortCeId.setDescription('The CE VID of an interface. The value ranges from 1 to 4095. The value 4095 indicates that the CE VID is invalid. ')
hwL2mcFwdPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 4, 1, 1, 9), IpAddress())
if mibBuilder.loadTexts: hwL2mcFwdPeerAddress.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFwdPeerAddress.setDescription('The peer IP address of a PW interface. The value 0.0.0.0 indicates that the IP address is invalid.')
hwL2mcFwdVcOrSiteId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 4, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hwL2mcFwdVcOrSiteId.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFwdVcOrSiteId.setDescription('The VC ID or SITE ID of a PW interface.')
hwL2mcFwdAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcFwdAddressType.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFwdAddressType.setDescription('The address type of an entry: 1: IP 2: MAC The default value is 1. ')
hwL2mcFwdHostFlag1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("staticDynamic", 3), ("invalid", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcFwdHostFlag1.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFwdHostFlag1.setDescription('The mode to create an interface on the host: 1: static 2: dynamic 3: static and dynamic 4: invalid ')
hwL2mcFwdHostFlag2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonMapping", 1), ("mapping", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcFwdHostFlag2.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFwdHostFlag2.setDescription('Whether an interface on the host is created through SSM-mapping: 1: non-mapping 2: mapping ')
hwL2mcFwdHostFlag3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("host", 1), ("router", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcFwdHostFlag3.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFwdHostFlag3.setDescription('The type of an interface created on a router: 1: Interface connected to the host 2: Router interface that replicates multicast data flows ')
hwL2mcFwdHostFlag4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("port", 1), ("static", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcFwdHostFlag4.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFwdHostFlag4.setDescription('Indicates (S, G) table created : 1: from port; 2: from static; 3: from both the default falue is 1 ')
hwL2mcGroupInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 5))
hwL2mcGroupInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 5, 1), )
if mibBuilder.loadTexts: hwL2mcGroupInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupInfoTable.setDescription('Table contains l2 multicast group information for IGMP Snooping.')
hwL2mcGroupInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 5, 1, 1), ).setIndexNames((0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcGroupVlanIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcGroupVsiName"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcGroupGroupAddress"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcGroupSourceAddress"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcPortType"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcGroupPortIfIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcGroupPortPeId"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcGroupPortCeId"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcGroupPeerAddress"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcGroupVcOrSiteId"))
if mibBuilder.loadTexts: hwL2mcGroupInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupInfoEntry.setDescription('An entry is created for each active VLAN or VSI in the device create a forwarding table entry and delete when a forwarding table entry deleted.')
hwL2mcGroupVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 5, 1, 1, 1), VlanIdOrAny())
if mibBuilder.loadTexts: hwL2mcGroupVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupVlanIndex.setDescription('The VLAN ID, which is the configuration index in a VLAN. If a VSI is specified, the value is 4095. The value ranges from 1 to 4095. ')
hwL2mcGroupVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwL2mcGroupVsiName.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupVsiName.setDescription('The name of a VSI. If a VLAN is specified, the value is 0.')
hwL2mcGroupGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 5, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: hwL2mcGroupGroupAddress.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupGroupAddress.setDescription('The IP address of a multicast group.')
hwL2mcGroupSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 5, 1, 1, 4), IpAddress())
if mibBuilder.loadTexts: hwL2mcGroupSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupSourceAddress.setDescription('The source IP address of a multicast group.')
hwL2mcPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 5, 1, 1, 5), HWPortType())
if mibBuilder.loadTexts: hwL2mcPortType.setStatus('current')
if mibBuilder.loadTexts: hwL2mcPortType.setDescription('The interface type: 1: Invalid 2: PW interface 3: L2 interface 4: Encapsulation sub-interface 5: Termination sub-interface ')
hwL2mcGroupPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 5, 1, 1, 6), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hwL2mcGroupPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupPortIfIndex.setDescription('The interface index. The value 0 indicates that the interface index is invalid.')
hwL2mcGroupPortPeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 5, 1, 1, 7), VlanIdOrAny())
if mibBuilder.loadTexts: hwL2mcGroupPortPeId.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupPortPeId.setDescription('The PE VID of an interface. The value ranges from 1 to 4095. The value 4095 indicates that the PE VID is invalid. ')
hwL2mcGroupPortCeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 5, 1, 1, 8), VlanIdOrAny())
if mibBuilder.loadTexts: hwL2mcGroupPortCeId.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupPortCeId.setDescription('The CE VID of an interface. The value ranges from 1 to 4095. The value 0 indicates that the PE VID is invalid. ')
hwL2mcGroupPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 5, 1, 1, 9), IpAddress())
if mibBuilder.loadTexts: hwL2mcGroupPeerAddress.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupPeerAddress.setDescription('The peer IP address of a PW interface. The value 0.0.0.0 indicates that the IP address is invalid.')
hwL2mcGroupVcOrSiteId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 5, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hwL2mcGroupVcOrSiteId.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupVcOrSiteId.setDescription('The VC ID or SITE ID of a PW interface.')
hwL2mcSourceUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcSourceUpTime.setStatus('current')
if mibBuilder.loadTexts: hwL2mcSourceUpTime.setDescription('How long the source group exists in the forwarding entry.')
hwL2mcSourceExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcSourceExpires.setStatus('current')
if mibBuilder.loadTexts: hwL2mcSourceExpires.setDescription('The timeout period of the source group in the forwarding entry, that is, the aging time of the source group.')
hwL2mcGroupUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcGroupUpTime.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupUpTime.setDescription('How long the group exists in the forwarding entry.')
hwL2mcGroupExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcGroupExpires.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupExpires.setDescription('When the group expires in the forwarding entry, that is, the aging time of the source group.')
hwL2mcGroupFilterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2), ("invalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcGroupFilterFlag.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupFilterFlag.setDescription('The filtering mode: 1: include 2: exclude 3: invalid ')
hwL2mcGroupHostFlag1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("staticDynamic", 3), ("invalid", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcGroupHostFlag1.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupHostFlag1.setDescription('The mode to create an interface on the host: 1: static 2: dynamic 3: static and dynamic 4: invalid ')
hwL2mcGroupHostFlag2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonMapping", 1), ("mapping", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcGroupHostFlag2.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupHostFlag2.setDescription('Whether an interface on the host is created through SSM-mapping: 1: non-mapping 2: mapping ')
hwL2mcGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 5, 1, 1, 100), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupRowStatus.setDescription('The row status.')
hwL2mcGroupCfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 6))
hwL2mcGroupCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 6, 1), )
if mibBuilder.loadTexts: hwL2mcGroupCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupCfgTable.setDescription('Table contains l2 multicast static group information for IGMP Snooping.')
hwL2mcGroupCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 6, 1, 1), ).setIndexNames((0, "HUAWEI-L2MULTICAST-MIB", "hwGroupCfgPortType"), (0, "HUAWEI-L2MULTICAST-MIB", "hwGroupCfgPortIfIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwGroupCfgPortPeId"), (0, "HUAWEI-L2MULTICAST-MIB", "hwGroupCfgPortCeId"), (0, "HUAWEI-L2MULTICAST-MIB", "hwGroupCfgPeerAddress"), (0, "HUAWEI-L2MULTICAST-MIB", "hwGroupCfgVcOrSiteId"), (0, "HUAWEI-L2MULTICAST-MIB", "hwGroupCfgVlanIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwGroupCfgVsiName"), (0, "HUAWEI-L2MULTICAST-MIB", "hwGroupCfgGroupAddress"), (0, "HUAWEI-L2MULTICAST-MIB", "hwGroupCfgSourceAddress"))
if mibBuilder.loadTexts: hwL2mcGroupCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupCfgEntry.setDescription('An entry is created for each active VLAN or VSI in the device create a static group entry and delete when a static group entry deleted.')
hwGroupCfgPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 6, 1, 1, 1), HWPortType())
if mibBuilder.loadTexts: hwGroupCfgPortType.setStatus('current')
if mibBuilder.loadTexts: hwGroupCfgPortType.setDescription('The interface type: 1: Invalid 2: PW interface 3: L2 interface 4: Encapsulation sub-interface 5: Termination sub-interface ')
hwGroupCfgPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 6, 1, 1, 2), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hwGroupCfgPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwGroupCfgPortIfIndex.setDescription('The interface index. The value 0 indicates that the interface index is invalid.')
hwGroupCfgPortPeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 6, 1, 1, 3), VlanIdOrAny())
if mibBuilder.loadTexts: hwGroupCfgPortPeId.setStatus('current')
if mibBuilder.loadTexts: hwGroupCfgPortPeId.setDescription('The PE VID of an interface. The value ranges from 1 to 4095. The value 4095 indicates that the PE VID is invalid. ')
hwGroupCfgPortCeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 6, 1, 1, 4), VlanIdOrAny())
if mibBuilder.loadTexts: hwGroupCfgPortCeId.setStatus('current')
if mibBuilder.loadTexts: hwGroupCfgPortCeId.setDescription('The CE VID of an interface. The value ranges from 1 to 4095. The value 0 indicates that the PE VID is invalid. ')
hwGroupCfgPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 6, 1, 1, 5), IpAddress())
if mibBuilder.loadTexts: hwGroupCfgPeerAddress.setStatus('current')
if mibBuilder.loadTexts: hwGroupCfgPeerAddress.setDescription('The peer IP address of a PW interface. The value 0.0.0.0 indicates that the IP address is invalid.')
hwGroupCfgVcOrSiteId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 6, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hwGroupCfgVcOrSiteId.setStatus('current')
if mibBuilder.loadTexts: hwGroupCfgVcOrSiteId.setDescription('The VC ID or SITE ID of a PW interface.')
hwGroupCfgVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 6, 1, 1, 7), VlanIdOrAny())
if mibBuilder.loadTexts: hwGroupCfgVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwGroupCfgVlanIndex.setDescription('The VLAN ID, which is the configuration index in a VLAN. If a VSI is specified, the value is 4095. The value ranges from 1 to 4095. ')
hwGroupCfgVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 6, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwGroupCfgVsiName.setStatus('current')
if mibBuilder.loadTexts: hwGroupCfgVsiName.setDescription('The name of a VSI. If a VLAN is specified, the value is 0.')
hwGroupCfgGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 6, 1, 1, 9), IpAddress())
if mibBuilder.loadTexts: hwGroupCfgGroupAddress.setStatus('current')
if mibBuilder.loadTexts: hwGroupCfgGroupAddress.setDescription('The group address of a multicast group. In the case of MAC forwarding, the group address is the smallest of 32 IP addresses.')
hwGroupCfgSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 6, 1, 1, 10), IpAddress())
if mibBuilder.loadTexts: hwGroupCfgSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hwGroupCfgSourceAddress.setDescription('The source IP address of a multicast group.')
hwGroupCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 6, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwGroupCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwGroupCfgRowStatus.setDescription('The row status.')
hwL2mcSsmSourceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 7))
hwL2mcSsmSourceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 7, 1), )
if mibBuilder.loadTexts: hwL2mcSsmSourceTable.setStatus('current')
if mibBuilder.loadTexts: hwL2mcSsmSourceTable.setDescription('This table contains the configuration of the source address list of SSM-Mapping.')
hwL2mcSsmSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 7, 1, 1), ).setIndexNames((0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcSsmSourceVlanIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcSsmSourceVsiName"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcSsmGroupAddress"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcSsmGroupLen"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcSsmSourceAddress"))
if mibBuilder.loadTexts: hwL2mcSsmSourceEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2mcSsmSourceEntry.setDescription('An entry is created for each active VLAN or VSI in the device add an entry for SSM-Mapping.')
hwL2mcSsmSourceVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 7, 1, 1, 1), VlanIdOrAny())
if mibBuilder.loadTexts: hwL2mcSsmSourceVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2mcSsmSourceVlanIndex.setDescription('The VLAN ID, which is the configuration index in a VLAN. If a VSI is specified, the value is 4095. The value ranges from 1 to 4095. ')
hwL2mcSsmSourceVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwL2mcSsmSourceVsiName.setStatus('current')
if mibBuilder.loadTexts: hwL2mcSsmSourceVsiName.setDescription('The name of a VSI. If a VLAN is specified, the value is 0.')
hwL2mcSsmGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 7, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: hwL2mcSsmGroupAddress.setStatus('current')
if mibBuilder.loadTexts: hwL2mcSsmGroupAddress.setDescription('The IP address of a multicast group. ')
hwL2mcSsmGroupLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 32)))
if mibBuilder.loadTexts: hwL2mcSsmGroupLen.setStatus('current')
if mibBuilder.loadTexts: hwL2mcSsmGroupLen.setDescription('The mask length of a multicast group.')
hwL2mcSsmSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 7, 1, 1, 5), IpAddress())
if mibBuilder.loadTexts: hwL2mcSsmSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hwL2mcSsmSourceAddress.setDescription('The source address of SSM-Mapping, which serves as an index of this table.')
hwL2mcSsmSourceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 7, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcSsmSourceRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2mcSsmSourceRowStatus.setDescription('The row status.')
hwL2mcPortGroupPolicyCfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 8))
hwL2mcPortGroupPolicyCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 8, 1), )
if mibBuilder.loadTexts: hwL2mcPortGroupPolicyCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwL2mcPortGroupPolicyCfgTable.setDescription('In this table, you can query or configure a group policy to filter entries on a port.')
hwL2mcPortGroupPolicyCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 8, 1, 1), ).setIndexNames((0, "HUAWEI-L2MULTICAST-MIB", "hwPortGroupPolicyPortType"), (0, "HUAWEI-L2MULTICAST-MIB", "hwPortGroupPolicyPortIfIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwPortGroupPolicyPortPeId"), (0, "HUAWEI-L2MULTICAST-MIB", "hwPortGroupPolicyPortCeId"), (0, "HUAWEI-L2MULTICAST-MIB", "hwPortGroupPolicyPeerAddress"), (0, "HUAWEI-L2MULTICAST-MIB", "hwPortGroupPolicyVcOrSiteId"), (0, "HUAWEI-L2MULTICAST-MIB", "hwPortGroupPolicyVlanIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwPortGroupPolicyVsiName"))
if mibBuilder.loadTexts: hwL2mcPortGroupPolicyCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2mcPortGroupPolicyCfgEntry.setDescription('An entry is created for each active VLAN or VSI in the device when a group policy added.')
hwPortGroupPolicyPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 8, 1, 1, 1), HWPortType())
if mibBuilder.loadTexts: hwPortGroupPolicyPortType.setStatus('current')
if mibBuilder.loadTexts: hwPortGroupPolicyPortType.setDescription('The interface type: 1: Invalid 2: PW interface 3: L2 interface 4: Encapsulation sub-interface 5: Termination sub-interface ')
hwPortGroupPolicyPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 8, 1, 1, 2), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hwPortGroupPolicyPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPortGroupPolicyPortIfIndex.setDescription('The interface index. The value 0 indicates that the interface index is invalid.')
hwPortGroupPolicyPortPeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 8, 1, 1, 3), VlanIdOrAny())
if mibBuilder.loadTexts: hwPortGroupPolicyPortPeId.setStatus('current')
if mibBuilder.loadTexts: hwPortGroupPolicyPortPeId.setDescription('The PE VID of an interface. The value ranges from 1 to 4095. The value 4095 indicates that the PE VID is invalid. ')
hwPortGroupPolicyPortCeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 8, 1, 1, 4), VlanIdOrAny())
if mibBuilder.loadTexts: hwPortGroupPolicyPortCeId.setStatus('current')
if mibBuilder.loadTexts: hwPortGroupPolicyPortCeId.setDescription('The CE VID of an interface. The value ranges from 1 to 4095. The value 4095 indicates that the PE VID is invalid. ')
hwPortGroupPolicyPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 8, 1, 1, 5), IpAddress())
if mibBuilder.loadTexts: hwPortGroupPolicyPeerAddress.setStatus('current')
if mibBuilder.loadTexts: hwPortGroupPolicyPeerAddress.setDescription('The peer IP address of a PW interface. The value 0.0.0.0 indicates that the IP address is invalid.')
hwPortGroupPolicyVcOrSiteId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 8, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hwPortGroupPolicyVcOrSiteId.setStatus('current')
if mibBuilder.loadTexts: hwPortGroupPolicyVcOrSiteId.setDescription('The VC ID or SITE ID of a PW interface.')
hwPortGroupPolicyVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 8, 1, 1, 7), VlanIdOrAny())
if mibBuilder.loadTexts: hwPortGroupPolicyVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwPortGroupPolicyVlanIndex.setDescription('The VLAN ID, which is the configuration index in a VLAN. If a VSI is specified, the value is 4095. The value ranges from 1 to 4095. ')
hwPortGroupPolicyVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 8, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwPortGroupPolicyVsiName.setStatus('current')
if mibBuilder.loadTexts: hwPortGroupPolicyVsiName.setDescription('The name of a VSI. If a VLAN is specified, the value is 0.')
hwPortGroupPolicyAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortGroupPolicyAclNum.setStatus('current')
if mibBuilder.loadTexts: hwPortGroupPolicyAclNum.setDescription('The number of a basic ACL. The ACL number ranges from 2000 to 3999. The default value is 0, indicating that the value is invalid. ')
hwPortGroupPolicyIgmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("versionAll", 0), ("version1", 1), ("version2", 2), ("version3", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortGroupPolicyIgmpVersion.setStatus('current')
if mibBuilder.loadTexts: hwPortGroupPolicyIgmpVersion.setDescription('The IGMP version. The value ranges from 0 to 3. The default is 0, indicating that no version is specified. ')
hwPortGroupPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 8, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortGroupPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwPortGroupPolicyRowStatus.setDescription('The row status.')
hwL2mcChnlCfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 9))
hwL2mcChnlCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 9, 1), )
if mibBuilder.loadTexts: hwL2mcChnlCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwL2mcChnlCfgTable.setDescription('This table describes the configurations of a channel.')
hwL2mcChnlCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 9, 1, 1), ).setIndexNames((0, "HUAWEI-L2MULTICAST-MIB", "hwChnlCfgVlanIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwChnlCfgVsiName"), (0, "HUAWEI-L2MULTICAST-MIB", "hwChnlCfgChnlName"))
if mibBuilder.loadTexts: hwL2mcChnlCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2mcChnlCfgEntry.setDescription('An entry of channel is created for each VLAN or VSI in the device create an channel.')
hwChnlCfgVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 9, 1, 1, 1), VlanIdOrAny())
if mibBuilder.loadTexts: hwChnlCfgVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwChnlCfgVlanIndex.setDescription('The VLAN ID, which is the configuration index in a VLAN. If a VSI is specified, the value is 0. If both hwChnlCfgVlanIndex and hwChnlCfgVSIName are invalid, the configuration is global. The value ranges from 1 to 4095. ')
hwChnlCfgVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwChnlCfgVsiName.setStatus('current')
if mibBuilder.loadTexts: hwChnlCfgVsiName.setDescription('The name of a VSI. If a VLAN is specified, the value is 0. If both hwChnlCfgVlanIndex and hwChnlCfgVSIName are invalid, the configuration is global.')
hwChnlCfgChnlName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwChnlCfgChnlName.setStatus('current')
if mibBuilder.loadTexts: hwChnlCfgChnlName.setDescription('The channel name.')
hwChnlCfgChnlType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ssm", 1), ("asm", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwChnlCfgChnlType.setStatus('current')
if mibBuilder.loadTexts: hwChnlCfgChnlType.setDescription('The channel type: 1: SSM 2: ASM ')
hwChnlCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 9, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwChnlCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwChnlCfgRowStatus.setDescription('The row status.')
hwL2mcLimitInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 10))
hwL2mcLimitTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 10, 1), )
if mibBuilder.loadTexts: hwL2mcLimitTable.setStatus('current')
if mibBuilder.loadTexts: hwL2mcLimitTable.setDescription('This table describes the configurations of IGMP snooping CAC in a VLAN or a VSI.')
hwL2mcLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 10, 1, 1), ).setIndexNames((0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcLimitVlanIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcLimitVsiName"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcLimitChnlName"))
if mibBuilder.loadTexts: hwL2mcLimitEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2mcLimitEntry.setDescription('An entry is created for each IGMP snooping CAC in a VLAN or a VSI.')
hwL2mcLimitVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 10, 1, 1, 1), VlanIdOrAny())
if mibBuilder.loadTexts: hwL2mcLimitVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2mcLimitVlanIndex.setDescription('The VLAN ID, which is the configuration index in a VLAN. If a VSI is specified, the value is 0. If both hwVlanLimitVlanIndex and hwVlanLimitVSIName are invalid, the configuration is global. The value ranges from 1 to 4095. ')
hwL2mcLimitVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 10, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwL2mcLimitVsiName.setStatus('current')
if mibBuilder.loadTexts: hwL2mcLimitVsiName.setDescription('The name of a VSI. If a VLAN is specified, the value is 0. If both hwVlanLimitVlanIndex and hwVlanLimitVSIName are invalid, the configuration is global.')
hwL2mcLimitChnlName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 10, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwL2mcLimitChnlName.setStatus('current')
if mibBuilder.loadTexts: hwL2mcLimitChnlName.setDescription('The channel name.')
hwL2mcLimitMaxEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcLimitMaxEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2mcLimitMaxEntry.setDescription('The maximum number of forwarding entries. The value 0 indicates that the number is invalid.')
hwL2mcLimitEntryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 10, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcLimitEntryCnt.setStatus('current')
if mibBuilder.loadTexts: hwL2mcLimitEntryCnt.setDescription('The number of current forwarding entries.')
hwL2mcLimitMaxBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4194304))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcLimitMaxBandWidth.setStatus('current')
if mibBuilder.loadTexts: hwL2mcLimitMaxBandWidth.setDescription('The maximum bandwidth. The value 0 indicates that the bandwidth is invalid.')
hwL2mcLimitBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 10, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcLimitBandWidth.setStatus('current')
if mibBuilder.loadTexts: hwL2mcLimitBandWidth.setDescription('The current bandwidth.')
hwL2mcLimitAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcLimitAcl.setStatus('current')
if mibBuilder.loadTexts: hwL2mcLimitAcl.setDescription('The number of ACL for the multicast groups that do not need to be configured with CAC limit. The ACL number ranges from 2000 to 3999. The default value is 0, indicating that the number is invalid. ')
hwL2mcLimitCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 10, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcLimitCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2mcLimitCfgRowStatus.setDescription('The row status.')
hwL2mcPortLimitInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 11))
hwL2mcPortLimitTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 11, 1), )
if mibBuilder.loadTexts: hwL2mcPortLimitTable.setStatus('current')
if mibBuilder.loadTexts: hwL2mcPortLimitTable.setDescription('This table describes the configurations of IGMP snooping CAC on an interface.')
hwL2mcPortLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 11, 1, 1), ).setIndexNames((0, "HUAWEI-L2MULTICAST-MIB", "hwPortLimitVlanIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwPortLimitVsiName"), (0, "HUAWEI-L2MULTICAST-MIB", "hwPortLimitPortType"), (0, "HUAWEI-L2MULTICAST-MIB", "hwPortLimitIfIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwPortLimitPeId"), (0, "HUAWEI-L2MULTICAST-MIB", "hwPortLimitCeId"), (0, "HUAWEI-L2MULTICAST-MIB", "hwPortLimitPeerAddress"), (0, "HUAWEI-L2MULTICAST-MIB", "hwPortLimitVcOrSiteId"), (0, "HUAWEI-L2MULTICAST-MIB", "hwPortLimitChnlName"))
if mibBuilder.loadTexts: hwL2mcPortLimitEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2mcPortLimitEntry.setDescription('An entry is created for each IGMP snooping CAC on an interface.')
hwPortLimitVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 11, 1, 1, 1), VlanIdOrAny())
if mibBuilder.loadTexts: hwPortLimitVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwPortLimitVlanIndex.setDescription('The VLAN ID, which is the configuration index in a VLAN. If a VSI is specified, the value is 4095. The value ranges from 1 to 4095. ')
hwPortLimitVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwPortLimitVsiName.setStatus('current')
if mibBuilder.loadTexts: hwPortLimitVsiName.setDescription('The name of a VSI. If a VLAN is specified, the value is 0.')
hwPortLimitPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 11, 1, 1, 3), HWPortType())
if mibBuilder.loadTexts: hwPortLimitPortType.setStatus('current')
if mibBuilder.loadTexts: hwPortLimitPortType.setDescription('The interface type: 1: Invalid 2: PW interface 3: L2 interface 4: Encapsulation sub-interface 5: Termination sub-interface ')
hwPortLimitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 11, 1, 1, 4), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hwPortLimitIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPortLimitIfIndex.setDescription('The interface index. The value 0 indicates that the interface index is invalid.')
hwPortLimitPeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 11, 1, 1, 5), VlanIdOrAny())
if mibBuilder.loadTexts: hwPortLimitPeId.setStatus('current')
if mibBuilder.loadTexts: hwPortLimitPeId.setDescription('The PE VID of an interface. The value ranges from 1 to 4095. The value 4095 indicates that the PE VID is invalid. ')
hwPortLimitCeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 11, 1, 1, 6), VlanIdOrAny())
if mibBuilder.loadTexts: hwPortLimitCeId.setStatus('current')
if mibBuilder.loadTexts: hwPortLimitCeId.setDescription('The CE VID of an interface. The value ranges from 1 to 4095. The value 4095 indicates that the PE VID is invalid. ')
hwPortLimitPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 11, 1, 1, 7), IpAddress())
if mibBuilder.loadTexts: hwPortLimitPeerAddress.setStatus('current')
if mibBuilder.loadTexts: hwPortLimitPeerAddress.setDescription('The peer IP address of a PW interface. The value 0.0.0.0 indicates that the IP address is invalid.')
hwPortLimitVcOrSiteId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 11, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hwPortLimitVcOrSiteId.setStatus('current')
if mibBuilder.loadTexts: hwPortLimitVcOrSiteId.setDescription('The VC ID or SITE ID of a PW interface.')
hwPortLimitChnlName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 11, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwPortLimitChnlName.setStatus('current')
if mibBuilder.loadTexts: hwPortLimitChnlName.setDescription('The channel name.')
hwPortLimitAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortLimitAcl.setStatus('current')
if mibBuilder.loadTexts: hwPortLimitAcl.setDescription('The number of ACL for the multicast groups that do not need to be configured with CAC limit. The ACL number ranges from 2000 to 3999. The default value is 0, indicating that the number is invalid. ')
hwPortLimitMaxEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortLimitMaxEntry.setStatus('current')
if mibBuilder.loadTexts: hwPortLimitMaxEntry.setDescription('The maximum number of forwarding entries. The value 0 indicates that the number is invalid.')
hwPortLimitEntryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 11, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortLimitEntryCnt.setStatus('current')
if mibBuilder.loadTexts: hwPortLimitEntryCnt.setDescription('The number of current forwarding entries.')
hwPortLimitMaxBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 11, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4194304))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortLimitMaxBandWidth.setStatus('current')
if mibBuilder.loadTexts: hwPortLimitMaxBandWidth.setDescription('The maximum bandwidth. The value 0 indicates that the bandwidth is invalid.')
hwPortLimitBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 11, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortLimitBandWidth.setStatus('current')
if mibBuilder.loadTexts: hwPortLimitBandWidth.setDescription('The current bandwidth.')
hwPortLimitCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 11, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortLimitCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwPortLimitCfgRowStatus.setDescription('The row status.')
hwL2mcFastChnlCfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 12))
hwL2mcFastChnlCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 12, 1), )
if mibBuilder.loadTexts: hwL2mcFastChnlCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFastChnlCfgTable.setDescription('Table contains l2 multicast fast forward information for IGMP Snooping.')
hwL2mcFastChnlCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 12, 1, 1), ).setIndexNames((0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcFastChnlCfgVlanIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcFastChnlCfgVsiName"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcFastChnlCfgGroupAddress"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcFastChnlCfgGroupLen"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcFastChnlCfgSourceAddress"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcFastChnlCfgSourceLen"))
if mibBuilder.loadTexts: hwL2mcFastChnlCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFastChnlCfgEntry.setDescription('An entry is created for each IGMP snooping fast channel.')
hwL2mcFastChnlCfgVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 12, 1, 1, 1), VlanIdOrAny())
if mibBuilder.loadTexts: hwL2mcFastChnlCfgVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFastChnlCfgVlanIndex.setDescription('The VLAN ID, which is the configuration index in a VLAN. If a VSI is specified, the value is 4095. The value ranges from 1 to 4095. ')
hwL2mcFastChnlCfgVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 12, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwL2mcFastChnlCfgVsiName.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFastChnlCfgVsiName.setDescription('The name of a VSI. If a VLAN is specified, the value is 0.')
hwL2mcFastChnlCfgGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 12, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: hwL2mcFastChnlCfgGroupAddress.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFastChnlCfgGroupAddress.setDescription('The group address of a multicast group. In the case of MAC forwarding, the group address is the smallest of 32 IP addresses.')
hwL2mcFastChnlCfgGroupLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 32)))
if mibBuilder.loadTexts: hwL2mcFastChnlCfgGroupLen.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFastChnlCfgGroupLen.setDescription('The mask length of a multicast group address.')
hwL2mcFastChnlCfgSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 12, 1, 1, 5), IpAddress())
if mibBuilder.loadTexts: hwL2mcFastChnlCfgSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFastChnlCfgSourceAddress.setDescription('The source IP address of a multicast group.')
hwL2mcFastChnlCfgSourceLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(8, 32), )))
if mibBuilder.loadTexts: hwL2mcFastChnlCfgSourceLen.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFastChnlCfgSourceLen.setDescription('The mask length of a multicast source address.')
hwL2mcFastChnlCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 12, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcFastChnlCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFastChnlCfgRowStatus.setDescription('The row status.')
hwL2mcRouterPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 13))
hwL2mcRouterPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 13, 1), )
if mibBuilder.loadTexts: hwL2mcRouterPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortInfoTable.setDescription('Table contains l2 multicast router port information for IGMP Snooping.')
hwL2mcRouterPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 13, 1, 1), ).setIndexNames((0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortVlanIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortVsiName"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortType"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortIfIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortPeId"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortCeId"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortPeerAddress"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortVcOrSiteId"))
if mibBuilder.loadTexts: hwL2mcRouterPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortInfoEntry.setDescription('An entry is created for each IGMP snooping router port on an interface.')
hwL2mcRouterPortVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 13, 1, 1, 1), VlanIdOrAny())
if mibBuilder.loadTexts: hwL2mcRouterPortVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortVlanIndex.setDescription('The VLAN ID, which is the configuration index in a VLAN. If a VSI is specified, the value is 4095. The value ranges from 1 to 4095. ')
hwL2mcRouterPortVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 13, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwL2mcRouterPortVsiName.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortVsiName.setDescription('The name of a VSI. If a VLAN is specified, the value is 0.')
hwL2mcRouterPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 13, 1, 1, 3), HWPortType())
if mibBuilder.loadTexts: hwL2mcRouterPortType.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortType.setDescription('The interface type: 1: Invalid 2: PW interface 3: L2 interface 4: Encapsulation sub-interface 5: Termination sub-interface ')
hwL2mcRouterPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 13, 1, 1, 4), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hwL2mcRouterPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortIfIndex.setDescription('The interface index. The value 0 indicates that the interface index is invalid.')
hwL2mcRouterPortPeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 13, 1, 1, 5), VlanIdOrAny())
if mibBuilder.loadTexts: hwL2mcRouterPortPeId.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortPeId.setDescription('The PE VID of an interface. The value ranges from 1 to 4095. The value 4095 indicates that the PE VID is invalid. ')
hwL2mcRouterPortCeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 13, 1, 1, 6), VlanIdOrAny())
if mibBuilder.loadTexts: hwL2mcRouterPortCeId.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortCeId.setDescription('The CE VID of an interface. The value ranges from 1 to 4095. The value 4095 indicates that the PE VID is invalid. ')
hwL2mcRouterPortPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 13, 1, 1, 7), IpAddress())
if mibBuilder.loadTexts: hwL2mcRouterPortPeerAddress.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortPeerAddress.setDescription('The peer IP address of a PW interface. The value 0.0.0.0 indicates that the IP address is invalid.')
hwL2mcRouterPortVcOrSiteId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 13, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hwL2mcRouterPortVcOrSiteId.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortVcOrSiteId.setDescription('The VC ID or SITE ID of a PW interface.')
hwL2mcRouterPortGroupUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 13, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcRouterPortGroupUpTime.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortGroupUpTime.setDescription('How long the group exists in the forwarding entry.')
hwL2mcRouterPortGroupExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 13, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcRouterPortGroupExpires.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortGroupExpires.setDescription('The timeout period of the router port, that is, the aging time of the router port.')
hwL2mcRouterPortGroupHostFlag1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 13, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("staticDynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2mcRouterPortGroupHostFlag1.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortGroupHostFlag1.setDescription('The mode to create an interface on the host: 1: static 2: dynamic 3: static and dynamic ')
hwL2mcRouterPortCfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 14))
hwL2mcRouterPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 14, 1), )
if mibBuilder.loadTexts: hwL2mcRouterPortCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortCfgTable.setDescription('Table contains l2 multicast configuration of router port for IGMP Snooping.')
hwL2mcRouterPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 14, 1, 1), ).setIndexNames((0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortCfgPortType"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortCfgPortIfIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortCfgPortPeId"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortCfgPortCeId"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortCfgPeerAddress"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortCfgVcOrSiteId"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortCfgVlanIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortCfgVsiName"))
if mibBuilder.loadTexts: hwL2mcRouterPortCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortCfgEntry.setDescription('An entry is created for each IGMP snooping static router port on an interface.')
hwL2mcRouterPortCfgPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 14, 1, 1, 1), HWPortType())
if mibBuilder.loadTexts: hwL2mcRouterPortCfgPortType.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortCfgPortType.setDescription('The interface type: 1: Invalid 2: PW interface 3: L2 interface 4: Encapsulation sub-interface 5: Termination sub-interface ')
hwL2mcRouterPortCfgPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 14, 1, 1, 2), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hwL2mcRouterPortCfgPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortCfgPortIfIndex.setDescription('The interface index. The value 0 indicates that the interface index is invalid.')
hwL2mcRouterPortCfgPortPeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 14, 1, 1, 3), VlanIdOrAny())
if mibBuilder.loadTexts: hwL2mcRouterPortCfgPortPeId.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortCfgPortPeId.setDescription('The PE VID of an interface. The value ranges from 1 to 4095. The value 4095 indicates that the PE VID is invalid. ')
hwL2mcRouterPortCfgPortCeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 14, 1, 1, 4), VlanIdOrAny())
if mibBuilder.loadTexts: hwL2mcRouterPortCfgPortCeId.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortCfgPortCeId.setDescription('The CE VID of an interface. The value ranges from 1 to 4095. The value 4095 indicates that the PE VID is invalid. ')
hwL2mcRouterPortCfgPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 14, 1, 1, 5), IpAddress())
if mibBuilder.loadTexts: hwL2mcRouterPortCfgPeerAddress.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortCfgPeerAddress.setDescription('The peer IP address of a PW interface. The value 0.0.0.0 indicates that the IP address is invalid.')
hwL2mcRouterPortCfgVcOrSiteId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 14, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hwL2mcRouterPortCfgVcOrSiteId.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortCfgVcOrSiteId.setDescription('The VC ID or SITE ID of a PW interface.')
hwL2mcRouterPortCfgVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 14, 1, 1, 7), VlanIdOrAny())
if mibBuilder.loadTexts: hwL2mcRouterPortCfgVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortCfgVlanIndex.setDescription('The VLAN ID, which is the configuration index in a VLAN. If a VSI is specified, the value is 4095. The value ranges from 1 to 4095. ')
hwL2mcRouterPortCfgVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 14, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwL2mcRouterPortCfgVsiName.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortCfgVsiName.setDescription('The name of a VSI. If a VLAN is specified, the value is 0.')
hwL2mcRouterPortCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 14, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2mcRouterPortCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortCfgRowStatus.setDescription('The row status.')
hwL2mcChnlGroupCfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 15))
hwL2mcChnlGroupCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 15, 1), )
if mibBuilder.loadTexts: hwL2mcChnlGroupCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwL2mcChnlGroupCfgTable.setDescription('This table describes the group configurations of a channel.')
hwL2mcChnlGroupCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 15, 1, 1), ).setIndexNames((0, "HUAWEI-L2MULTICAST-MIB", "hwChnlGroupCfgVlanIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwChnlGroupCfgVsiName"), (0, "HUAWEI-L2MULTICAST-MIB", "hwChnlCfgGroupChnlName"), (0, "HUAWEI-L2MULTICAST-MIB", "hwChnlGroupCfgGroupAddress"), (0, "HUAWEI-L2MULTICAST-MIB", "hwChnlGroupCfgGroupLen"), (0, "HUAWEI-L2MULTICAST-MIB", "hwChnlGroupCfgSourceAddress"), (0, "HUAWEI-L2MULTICAST-MIB", "hwChnlGroupCfgSourceLen"))
if mibBuilder.loadTexts: hwL2mcChnlGroupCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2mcChnlGroupCfgEntry.setDescription('An entry of channel is created for each VLAN or VSI in the device create an channel.')
hwChnlGroupCfgVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 15, 1, 1, 1), VlanIdOrAny())
if mibBuilder.loadTexts: hwChnlGroupCfgVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwChnlGroupCfgVlanIndex.setDescription('The VLAN ID, which is the configuration index in a VLAN. If a VSI is specified, the value is 4095. If both hwChnlCfgVlanIndex and hwChnlCfgVSIName are invalid, the configuration is global. The value ranges from 1 to 4095. ')
hwChnlGroupCfgVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 15, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwChnlGroupCfgVsiName.setStatus('current')
if mibBuilder.loadTexts: hwChnlGroupCfgVsiName.setDescription('The name of a VSI. If a VLAN is specified, the value is 0. If both hwChnlCfgVlanIndex and hwChnlCfgVSIName are invalid, the configuration is global.')
hwChnlCfgGroupChnlName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 15, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwChnlCfgGroupChnlName.setStatus('current')
if mibBuilder.loadTexts: hwChnlCfgGroupChnlName.setDescription('The channel name.')
hwChnlGroupCfgGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 15, 1, 1, 4), IpAddress())
if mibBuilder.loadTexts: hwChnlGroupCfgGroupAddress.setStatus('current')
if mibBuilder.loadTexts: hwChnlGroupCfgGroupAddress.setDescription('The group address of a multicast group. In the case of MAC forwarding, the group address is the smallest of 32 IP addresses.')
hwChnlGroupCfgGroupLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 32)))
if mibBuilder.loadTexts: hwChnlGroupCfgGroupLen.setStatus('current')
if mibBuilder.loadTexts: hwChnlGroupCfgGroupLen.setDescription('The mask length of a multicast group.')
hwChnlGroupCfgSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 15, 1, 1, 6), IpAddress())
if mibBuilder.loadTexts: hwChnlGroupCfgSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hwChnlGroupCfgSourceAddress.setDescription('The source IP address of a multicast group.')
hwChnlGroupCfgSourceLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 15, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(8, 32), )))
if mibBuilder.loadTexts: hwChnlGroupCfgSourceLen.setStatus('current')
if mibBuilder.loadTexts: hwChnlGroupCfgSourceLen.setDescription('The mask length of a multicast source address.')
hwChnlGroupCfgPerBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 15, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 131072))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwChnlGroupCfgPerBand.setStatus('current')
if mibBuilder.loadTexts: hwChnlGroupCfgPerBand.setDescription('The bandwidth of a multicast group.')
hwChnlGroupCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 15, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwChnlGroupCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwChnlGroupCfgRowStatus.setDescription('The row status.')
hwL2mcGroupPolicyCfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 16))
hwL2mcGroupPolicyCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 16, 1), )
if mibBuilder.loadTexts: hwL2mcGroupPolicyCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupPolicyCfgTable.setDescription('In this table, you can query or configure a group policy to filter entries on a port.')
hwL2mcGroupPolicyCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 16, 1, 1), ).setIndexNames((0, "HUAWEI-L2MULTICAST-MIB", "hwGroupPolicyVlanIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwGroupPolicyVsiName"))
if mibBuilder.loadTexts: hwL2mcGroupPolicyCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupPolicyCfgEntry.setDescription('An entry is created for each active VLAN or VSI in the device when a group policy added.')
hwGroupPolicyVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 16, 1, 1, 1), VlanIdOrAny())
if mibBuilder.loadTexts: hwGroupPolicyVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwGroupPolicyVlanIndex.setDescription('The VLAN ID, which is the configuration index in a VLAN. If a VSI is specified, the value is 4095. The value ranges from 1 to 4095. ')
hwGroupPolicyVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 16, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwGroupPolicyVsiName.setStatus('current')
if mibBuilder.loadTexts: hwGroupPolicyVsiName.setDescription('The name of a VSI. If a VLAN is specified, the value is 0.')
hwGroupPolicyAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwGroupPolicyAclNum.setStatus('current')
if mibBuilder.loadTexts: hwGroupPolicyAclNum.setDescription('The number of a basic ACL. The ACL number ranges from 2000 to 3999. The default value is 0, indicating that the value is invalid. ')
hwGroupPolicyIgmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("versionAll", 0), ("version1", 1), ("version2", 2), ("version3", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwGroupPolicyIgmpVersion.setStatus('current')
if mibBuilder.loadTexts: hwGroupPolicyIgmpVersion.setDescription('The IGMP version. The value ranges from 0 to 3. The default is 0, indicating that no version is specified. ')
hwGroupPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 16, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwGroupPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwGroupPolicyRowStatus.setDescription('The row status.')
hwL2mcChnlDenyCfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 17))
hwL2mcChnlDenyCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 17, 1), )
if mibBuilder.loadTexts: hwL2mcChnlDenyCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwL2mcChnlDenyCfgTable.setDescription('This table describes the configurations of deny unspecified group for each VLAN or VSI, or in global.')
hwL2mcChnlDenyCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 17, 1, 1), ).setIndexNames((0, "HUAWEI-L2MULTICAST-MIB", "hwChnlDenyCfgVlanIndex"), (0, "HUAWEI-L2MULTICAST-MIB", "hwChnlDenyCfgVsiName"))
if mibBuilder.loadTexts: hwL2mcChnlDenyCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2mcChnlDenyCfgEntry.setDescription('An entry of channel deny is created for each VLAN or VSI in the device create an channel.')
hwChnlDenyCfgVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 17, 1, 1, 1), VlanIdOrAny())
if mibBuilder.loadTexts: hwChnlDenyCfgVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwChnlDenyCfgVlanIndex.setDescription('The VLAN ID, which is the configuration index in a VLAN. If a VSI is specified, the value is 4095. If both hwChnlCfgVlanIndex and hwChnlCfgVSIName are invalid, the configuration is global. The value ranges from 1 to 4095. ')
hwChnlDenyCfgVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 17, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwChnlDenyCfgVsiName.setStatus('current')
if mibBuilder.loadTexts: hwChnlDenyCfgVsiName.setDescription('The name of a VSI. If a VLAN is specified, the value is 0. If both hwChnlCfgVlanIndex and hwChnlCfgVSIName are invalid, the configuration is global.')
hwChnlDenyCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwChnlDenyCfg.setStatus('current')
if mibBuilder.loadTexts: hwChnlDenyCfg.setDescription('Whether discard unspecified channel: 1: not discard 2: discard ')
hwChnlDenyCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 1, 17, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwChnlDenyCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwChnlDenyCfgRowStatus.setDescription('The row status.')
hwL2mcMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 100))
hwL2mcMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 100, 1))
hwL2mcMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 100, 2))
hwIgspMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 100, 1, 1)).setObjects(("HUAWEI-L2MULTICAST-MIB", "hwIgspSystemInfoGroup"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcCfgInfoGroup"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcStatisticsInfoGroup"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcFwdInfoGroup"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcGroupInfoGroup"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcGroupCfgInfoGroup"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcSsmSourceInfoGroup"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcPortGroupPolicyCfgInfoGroup"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcChnlCfgInfoGroup"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcLimitInfoGroup"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcPortLimitInfoGroup"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcFastChnlCfgInfoGroup"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortInfoGroup"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortCfgInfoGroup"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcChnlGroupCfgInfoGroup"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcGroupPolicyCfgInfoGroup"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcChnlDenyCfgInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIgspMibCompliance = hwIgspMibCompliance.setStatus('current')
if mibBuilder.loadTexts: hwIgspMibCompliance.setDescription('The compliance statement for device supporting IGMP Snooping.')
hwIgspSystemInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 100, 2, 1)).setObjects(("HUAWEI-L2MULTICAST-MIB", "hwIgmpSnoopingEnabled"), ("HUAWEI-L2MULTICAST-MIB", "hwSendQueryEnabled"), ("HUAWEI-L2MULTICAST-MIB", "hwSendQuerySourceIpAddr"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcCacTrapInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIgspSystemInfoGroup = hwIgspSystemInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwIgspSystemInfoGroup.setDescription('.')
hwL2mcCfgInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 100, 2, 2)).setObjects(("HUAWEI-L2MULTICAST-MIB", "hwL2mcEnabled"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterAgingTime"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcMaxQueryRespTime"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcLastMemQueryInterval"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcQueryInterval"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcRobustCount"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcCheckRouterAlert"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcSendRouterAlert"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcIgmpVersion"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcFwdMode"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcPromptLeaveEnable"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcPromptLeaveAclNum"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortLearningEnable"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcReportSuppressEnable"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcIgmpQuerierEnable"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcIgmpSsmMappingEnable"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcSsmAclNum"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2mcCfgInfoGroup = hwL2mcCfgInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCfgInfoGroup.setDescription('.')
hwL2mcStatisticsInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 100, 2, 3)).setObjects(("HUAWEI-L2MULTICAST-MIB", "hwL2mcRecvIgmpV1ReportNum"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcRecvIgmpV2ReportNum"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcRecvIgmpV3ReportNum"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcRecvIgmpLeaveNum"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcRecvIgmpV1QueryNum"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcRecvIgmpV2QueryNum"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcRecvIgmpV3QueryNum"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcRecvPimHelloNum"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcSendQueryNum"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcSendQuerySourceNum"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcProxyGenQueryNum"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcProxyGroupQueryNum"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcProxyGroupSourceQueryNum"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcIgmpPacketClearStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2mcStatisticsInfoGroup = hwL2mcStatisticsInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2mcStatisticsInfoGroup.setDescription('.')
hwL2mcFwdInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 100, 2, 4)).setObjects(("HUAWEI-L2MULTICAST-MIB", "hwL2mcFwdAddressType"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcFwdHostFlag1"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcFwdHostFlag2"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcFwdHostFlag3"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcFwdHostFlag4"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2mcFwdInfoGroup = hwL2mcFwdInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFwdInfoGroup.setDescription('.')
hwL2mcGroupInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 100, 2, 5)).setObjects(("HUAWEI-L2MULTICAST-MIB", "hwL2mcSourceUpTime"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcSourceExpires"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcGroupUpTime"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcGroupExpires"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcGroupFilterFlag"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcGroupHostFlag1"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcGroupHostFlag2"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2mcGroupInfoGroup = hwL2mcGroupInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupInfoGroup.setDescription('.')
hwL2mcGroupCfgInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 100, 2, 6)).setObjects(("HUAWEI-L2MULTICAST-MIB", "hwGroupCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2mcGroupCfgInfoGroup = hwL2mcGroupCfgInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupCfgInfoGroup.setDescription('.')
hwL2mcSsmSourceInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 100, 2, 7)).setObjects(("HUAWEI-L2MULTICAST-MIB", "hwL2mcSsmSourceRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2mcSsmSourceInfoGroup = hwL2mcSsmSourceInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2mcSsmSourceInfoGroup.setDescription('.')
hwL2mcPortGroupPolicyCfgInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 100, 2, 8)).setObjects(("HUAWEI-L2MULTICAST-MIB", "hwPortGroupPolicyAclNum"), ("HUAWEI-L2MULTICAST-MIB", "hwPortGroupPolicyIgmpVersion"), ("HUAWEI-L2MULTICAST-MIB", "hwPortGroupPolicyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2mcPortGroupPolicyCfgInfoGroup = hwL2mcPortGroupPolicyCfgInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2mcPortGroupPolicyCfgInfoGroup.setDescription('.')
hwL2mcChnlCfgInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 100, 2, 9)).setObjects(("HUAWEI-L2MULTICAST-MIB", "hwChnlCfgChnlType"), ("HUAWEI-L2MULTICAST-MIB", "hwChnlCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2mcChnlCfgInfoGroup = hwL2mcChnlCfgInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2mcChnlCfgInfoGroup.setDescription('.')
hwL2mcLimitInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 100, 2, 10)).setObjects(("HUAWEI-L2MULTICAST-MIB", "hwL2mcLimitMaxEntry"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcLimitEntryCnt"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcLimitMaxBandWidth"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcLimitBandWidth"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcLimitAcl"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcLimitCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2mcLimitInfoGroup = hwL2mcLimitInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2mcLimitInfoGroup.setDescription('.')
hwL2mcPortLimitInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 100, 2, 11)).setObjects(("HUAWEI-L2MULTICAST-MIB", "hwPortLimitAcl"), ("HUAWEI-L2MULTICAST-MIB", "hwPortLimitMaxEntry"), ("HUAWEI-L2MULTICAST-MIB", "hwPortLimitEntryCnt"), ("HUAWEI-L2MULTICAST-MIB", "hwPortLimitMaxBandWidth"), ("HUAWEI-L2MULTICAST-MIB", "hwPortLimitBandWidth"), ("HUAWEI-L2MULTICAST-MIB", "hwPortLimitCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2mcPortLimitInfoGroup = hwL2mcPortLimitInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2mcPortLimitInfoGroup.setDescription('.')
hwL2mcFastChnlCfgInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 100, 2, 12)).setObjects(("HUAWEI-L2MULTICAST-MIB", "hwL2mcFastChnlCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2mcFastChnlCfgInfoGroup = hwL2mcFastChnlCfgInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2mcFastChnlCfgInfoGroup.setDescription('.')
hwL2mcRouterPortInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 100, 2, 13)).setObjects(("HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortGroupUpTime"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortGroupExpires"), ("HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortGroupHostFlag1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2mcRouterPortInfoGroup = hwL2mcRouterPortInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortInfoGroup.setDescription('.')
hwL2mcRouterPortCfgInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 100, 2, 14)).setObjects(("HUAWEI-L2MULTICAST-MIB", "hwL2mcRouterPortCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2mcRouterPortCfgInfoGroup = hwL2mcRouterPortCfgInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2mcRouterPortCfgInfoGroup.setDescription('.')
hwL2mcChnlGroupCfgInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 100, 2, 15)).setObjects(("HUAWEI-L2MULTICAST-MIB", "hwChnlGroupCfgPerBand"), ("HUAWEI-L2MULTICAST-MIB", "hwChnlGroupCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2mcChnlGroupCfgInfoGroup = hwL2mcChnlGroupCfgInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2mcChnlGroupCfgInfoGroup.setDescription('.')
hwL2mcGroupPolicyCfgInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 100, 2, 16)).setObjects(("HUAWEI-L2MULTICAST-MIB", "hwGroupPolicyAclNum"), ("HUAWEI-L2MULTICAST-MIB", "hwGroupPolicyIgmpVersion"), ("HUAWEI-L2MULTICAST-MIB", "hwGroupPolicyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2mcGroupPolicyCfgInfoGroup = hwL2mcGroupPolicyCfgInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2mcGroupPolicyCfgInfoGroup.setDescription('.')
hwL2mcChnlDenyCfgInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 181, 100, 2, 17)).setObjects(("HUAWEI-L2MULTICAST-MIB", "hwChnlDenyCfg"), ("HUAWEI-L2MULTICAST-MIB", "hwChnlDenyCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2mcChnlDenyCfgInfoGroup = hwL2mcChnlDenyCfgInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2mcChnlDenyCfgInfoGroup.setDescription('.')
mibBuilder.exportSymbols("HUAWEI-L2MULTICAST-MIB", hwL2mcGroupInfo=hwL2mcGroupInfo, hwL2mcCacTrapInterval=hwL2mcCacTrapInterval, hwIgmpSnoopingEnabled=hwIgmpSnoopingEnabled, hwPortGroupPolicyRowStatus=hwPortGroupPolicyRowStatus, hwL2mcChnlCfgInfo=hwL2mcChnlCfgInfo, hwL2mcSsmSourceInfo=hwL2mcSsmSourceInfo, hwL2mcSendQueryNum=hwL2mcSendQueryNum, hwL2mcCheckRouterAlert=hwL2mcCheckRouterAlert, hwL2mcRobustCount=hwL2mcRobustCount, hwGroupCfgPortType=hwGroupCfgPortType, hwL2mcFastChnlCfgVlanIndex=hwL2mcFastChnlCfgVlanIndex, hwL2mcRouterPortCfgInfoGroup=hwL2mcRouterPortCfgInfoGroup, hwPortLimitPortType=hwPortLimitPortType, hwL2mcGroupCfgInfo=hwL2mcGroupCfgInfo, hwL2mcRecvIgmpV2QueryNum=hwL2mcRecvIgmpV2QueryNum, hwL2mcFastChnlCfgInfo=hwL2mcFastChnlCfgInfo, hwL2mcRecvIgmpV3ReportNum=hwL2mcRecvIgmpV3ReportNum, hwL2mcFwdEntry=hwL2mcFwdEntry, hwL2mcFwdVsiName=hwL2mcFwdVsiName, hwL2mcGroupInfoEntry=hwL2mcGroupInfoEntry, hwL2mcStatsVsiName=hwL2mcStatsVsiName, hwChnlGroupCfgRowStatus=hwChnlGroupCfgRowStatus, hwL2mcSsmSourceAddress=hwL2mcSsmSourceAddress, hwL2mcLimitInfo=hwL2mcLimitInfo, hwL2mcFastChnlCfgSourceLen=hwL2mcFastChnlCfgSourceLen, hwPortLimitAcl=hwPortLimitAcl, hwGroupCfgVsiName=hwGroupCfgVsiName, hwGroupCfgPortCeId=hwGroupCfgPortCeId, hwL2mcSourceExpires=hwL2mcSourceExpires, hwL2mcGroupInfoGroup=hwL2mcGroupInfoGroup, hwL2mcCfgTable=hwL2mcCfgTable, hwL2mcIgmpQuerierEnable=hwL2mcIgmpQuerierEnable, hwL2mcGroupPolicyCfgInfo=hwL2mcGroupPolicyCfgInfo, hwL2mcGroupHostFlag1=hwL2mcGroupHostFlag1, hwL2mcGroupCfgInfoGroup=hwL2mcGroupCfgInfoGroup, hwL2mcRouterPortGroupUpTime=hwL2mcRouterPortGroupUpTime, hwL2mcProxyGroupQueryNum=hwL2mcProxyGroupQueryNum, hwChnlCfgVsiName=hwChnlCfgVsiName, hwL2mcGroupVsiName=hwL2mcGroupVsiName, hwL2mcLimitMaxBandWidth=hwL2mcLimitMaxBandWidth, hwL2mcLimitCfgRowStatus=hwL2mcLimitCfgRowStatus, hwPortLimitMaxBandWidth=hwPortLimitMaxBandWidth, hwL2mcFastChnlCfgGroupAddress=hwL2mcFastChnlCfgGroupAddress, hwL2mcSsmGroupLen=hwL2mcSsmGroupLen, hwL2mcLimitTable=hwL2mcLimitTable, hwL2mcFwdHostFlag4=hwL2mcFwdHostFlag4, hwChnlDenyCfgVlanIndex=hwChnlDenyCfgVlanIndex, hwChnlDenyCfgRowStatus=hwChnlDenyCfgRowStatus, hwL2mcChnlGroupCfgInfoGroup=hwL2mcChnlGroupCfgInfoGroup, hwPortGroupPolicyPortCeId=hwPortGroupPolicyPortCeId, hwL2mcFwdSourceAddress=hwL2mcFwdSourceAddress, hwGroupPolicyIgmpVersion=hwGroupPolicyIgmpVersion, hwIgspSystemInfoGroup=hwIgspSystemInfoGroup, hwChnlGroupCfgGroupLen=hwChnlGroupCfgGroupLen, hwL2mcFwdVcOrSiteId=hwL2mcFwdVcOrSiteId, hwL2mcSsmSourceRowStatus=hwL2mcSsmSourceRowStatus, hwL2mcLimitAcl=hwL2mcLimitAcl, hwL2mcRouterPortCfgInfo=hwL2mcRouterPortCfgInfo, hwGroupCfgPortIfIndex=hwGroupCfgPortIfIndex, hwL2mcRecvIgmpLeaveNum=hwL2mcRecvIgmpLeaveNum, hwL2mcGroupGroupAddress=hwL2mcGroupGroupAddress, PYSNMP_MODULE_ID=hwL2MultiCastMIB, hwL2mcFastChnlCfgGroupLen=hwL2mcFastChnlCfgGroupLen, hwL2mcMibGroups=hwL2mcMibGroups, hwL2mcGroupRowStatus=hwL2mcGroupRowStatus, hwPortLimitCeId=hwPortLimitCeId, hwL2mcMibConformance=hwL2mcMibConformance, hwL2mcRouterPortCfgRowStatus=hwL2mcRouterPortCfgRowStatus, hwL2mcReportSuppressEnable=hwL2mcReportSuppressEnable, hwL2mcGroupHostFlag2=hwL2mcGroupHostFlag2, hwL2mcChnlGroupCfgInfo=hwL2mcChnlGroupCfgInfo, hwChnlCfgGroupChnlName=hwChnlCfgGroupChnlName, hwL2mcRouterPortCfgVsiName=hwL2mcRouterPortCfgVsiName, hwL2mcSsmGroupAddress=hwL2mcSsmGroupAddress, hwL2mcGroupInfoTable=hwL2mcGroupInfoTable, hwPortLimitVsiName=hwPortLimitVsiName, hwSendQuerySourceIpAddr=hwSendQuerySourceIpAddr, hwL2mcRouterPortCfgPortIfIndex=hwL2mcRouterPortCfgPortIfIndex, hwL2mcLimitVlanIndex=hwL2mcLimitVlanIndex, hwL2mcStatsVlanIndex=hwL2mcStatsVlanIndex, hwL2mcSsmSourceTable=hwL2mcSsmSourceTable, hwL2mcRouterPortCfgPeerAddress=hwL2mcRouterPortCfgPeerAddress, hwL2mcRouterPortGroupHostFlag1=hwL2mcRouterPortGroupHostFlag1, hwL2mcPromptLeaveEnable=hwL2mcPromptLeaveEnable, hwL2mcProxyGenQueryNum=hwL2mcProxyGenQueryNum, hwL2mcRouterPortGroupExpires=hwL2mcRouterPortGroupExpires, hwIgspMibCompliance=hwIgspMibCompliance, hwL2mcFwdPeerAddress=hwL2mcFwdPeerAddress, hwL2mcFwdTable=hwL2mcFwdTable, hwL2mcRouterPortInfoGroup=hwL2mcRouterPortInfoGroup, hwL2mcFwdPortCeId=hwL2mcFwdPortCeId, hwL2mcFwdHostFlag2=hwL2mcFwdHostFlag2, hwL2mcRouterPortCfgPortType=hwL2mcRouterPortCfgPortType, hwL2mcChnlDenyCfgInfo=hwL2mcChnlDenyCfgInfo, hwL2mcRouterPortLearningEnable=hwL2mcRouterPortLearningEnable, hwL2mcPortGroupPolicyCfgTable=hwL2mcPortGroupPolicyCfgTable, hwL2mcGroupPortCeId=hwL2mcGroupPortCeId, hwChnlGroupCfgPerBand=hwChnlGroupCfgPerBand, hwL2mcCfgEntry=hwL2mcCfgEntry, hwL2mcGroupSourceAddress=hwL2mcGroupSourceAddress, hwL2mcGroupPortIfIndex=hwL2mcGroupPortIfIndex, hwGroupCfgGroupAddress=hwGroupCfgGroupAddress, hwPortGroupPolicyPortPeId=hwPortGroupPolicyPortPeId, hwPortLimitMaxEntry=hwPortLimitMaxEntry, hwChnlCfgChnlType=hwChnlCfgChnlType, hwL2MultiCastMIB=hwL2MultiCastMIB, hwChnlGroupCfgSourceLen=hwChnlGroupCfgSourceLen, hwL2mcLimitMaxEntry=hwL2mcLimitMaxEntry, hwGroupCfgVlanIndex=hwGroupCfgVlanIndex, hwIgspSystemInfo=hwIgspSystemInfo, hwL2mcChnlCfgEntry=hwL2mcChnlCfgEntry, hwL2mcChnlDenyCfgTable=hwL2mcChnlDenyCfgTable, hwL2mcFastChnlCfgTable=hwL2mcFastChnlCfgTable, hwL2mcChnlGroupCfgTable=hwL2mcChnlGroupCfgTable, hwL2mcRouterPortIfIndex=hwL2mcRouterPortIfIndex, hwL2mcPortLimitInfoGroup=hwL2mcPortLimitInfoGroup, hwPortGroupPolicyVsiName=hwPortGroupPolicyVsiName, hwL2mcGroupPolicyCfgTable=hwL2mcGroupPolicyCfgTable, hwL2mcFwdHostFlag3=hwL2mcFwdHostFlag3, hwL2mcRouterAgingTime=hwL2mcRouterAgingTime, hwL2mcGroupExpires=hwL2mcGroupExpires, hwL2mcLastMemQueryInterval=hwL2mcLastMemQueryInterval, hwChnlGroupCfgVsiName=hwChnlGroupCfgVsiName, hwL2mcRecvPimHelloNum=hwL2mcRecvPimHelloNum, hwL2mcLimitChnlName=hwL2mcLimitChnlName, hwL2mcFwdPortType=hwL2mcFwdPortType, hwL2mcFwdMode=hwL2mcFwdMode, hwL2mcFwdVlanIndex=hwL2mcFwdVlanIndex, hwPortLimitCfgRowStatus=hwPortLimitCfgRowStatus, hwL2mcIgmpSsmMappingEnable=hwL2mcIgmpSsmMappingEnable, hwL2mcIgmpPacketClearStats=hwL2mcIgmpPacketClearStats, hwPortGroupPolicyVcOrSiteId=hwPortGroupPolicyVcOrSiteId, hwL2mcRouterPortCfgVcOrSiteId=hwL2mcRouterPortCfgVcOrSiteId, hwL2mcFwdAddressType=hwL2mcFwdAddressType, hwL2mcRecvIgmpV2ReportNum=hwL2mcRecvIgmpV2ReportNum, hwChnlCfgChnlName=hwChnlCfgChnlName, hwPortLimitPeerAddress=hwPortLimitPeerAddress, hwL2mcGroupFilterFlag=hwL2mcGroupFilterFlag, hwGroupCfgVcOrSiteId=hwGroupCfgVcOrSiteId, hwL2mcFastChnlCfgEntry=hwL2mcFastChnlCfgEntry, hwL2mcRouterPortVsiName=hwL2mcRouterPortVsiName, hwL2mcLimitInfoGroup=hwL2mcLimitInfoGroup, hwPortGroupPolicyPortIfIndex=hwPortGroupPolicyPortIfIndex, hwL2mcLimitEntry=hwL2mcLimitEntry, hwL2mcPortType=hwL2mcPortType, hwL2mcSsmAclNum=hwL2mcSsmAclNum, hwGroupPolicyAclNum=hwGroupPolicyAclNum, hwL2mcStatisticsEntry=hwL2mcStatisticsEntry, hwL2mcGroupPolicyCfgEntry=hwL2mcGroupPolicyCfgEntry, hwL2mcChnlDenyCfgEntry=hwL2mcChnlDenyCfgEntry, hwPortLimitChnlName=hwPortLimitChnlName, hwPortGroupPolicyVlanIndex=hwPortGroupPolicyVlanIndex, hwL2mcFastChnlCfgInfoGroup=hwL2mcFastChnlCfgInfoGroup, hwL2mcRouterPortCfgEntry=hwL2mcRouterPortCfgEntry, hwL2mcGroupPolicyCfgInfoGroup=hwL2mcGroupPolicyCfgInfoGroup, hwL2mcChnlCfgTable=hwL2mcChnlCfgTable, hwL2mcGroupCfgEntry=hwL2mcGroupCfgEntry, hwPortLimitIfIndex=hwPortLimitIfIndex, hwL2mcGroupUpTime=hwL2mcGroupUpTime, hwL2mcRouterPortInfoTable=hwL2mcRouterPortInfoTable, hwL2mcFwdInfoGroup=hwL2mcFwdInfoGroup, hwChnlGroupCfgVlanIndex=hwChnlGroupCfgVlanIndex, hwL2mcPortGroupPolicyCfgInfoGroup=hwL2mcPortGroupPolicyCfgInfoGroup, hwL2mcFwdPortIfIndex=hwL2mcFwdPortIfIndex, hwL2mcQueryInterval=hwL2mcQueryInterval, hwL2mcStatisticsInfo=hwL2mcStatisticsInfo, hwPortGroupPolicyPortType=hwPortGroupPolicyPortType, hwGroupCfgPeerAddress=hwGroupCfgPeerAddress, hwL2mcGroupPeerAddress=hwL2mcGroupPeerAddress, hwGroupCfgPortPeId=hwGroupCfgPortPeId, hwL2mcPortGroupPolicyCfgEntry=hwL2mcPortGroupPolicyCfgEntry, hwPortGroupPolicyAclNum=hwPortGroupPolicyAclNum, hwL2mcMaxQueryRespTime=hwL2mcMaxQueryRespTime, hwIgspMibObject=hwIgspMibObject, hwL2mcChnlCfgInfoGroup=hwL2mcChnlCfgInfoGroup, hwL2mcRouterPortInfo=hwL2mcRouterPortInfo, hwL2mcPortLimitTable=hwL2mcPortLimitTable, hwL2mcPortLimitEntry=hwL2mcPortLimitEntry, hwL2mcGroupVcOrSiteId=hwL2mcGroupVcOrSiteId, hwL2mcFwdPortPeId=hwL2mcFwdPortPeId, hwL2mcFastChnlCfgVsiName=hwL2mcFastChnlCfgVsiName, hwPortLimitVcOrSiteId=hwPortLimitVcOrSiteId, hwL2mcRouterPortType=hwL2mcRouterPortType, hwL2mcRouterPortCeId=hwL2mcRouterPortCeId, hwGroupPolicyVlanIndex=hwGroupPolicyVlanIndex, hwL2mcRouterPortCfgTable=hwL2mcRouterPortCfgTable, hwPortLimitBandWidth=hwPortLimitBandWidth, hwL2mcSsmSourceEntry=hwL2mcSsmSourceEntry, hwL2mcChnlDenyCfgInfoGroup=hwL2mcChnlDenyCfgInfoGroup, hwL2mcSendQuerySourceNum=hwL2mcSendQuerySourceNum, hwL2mcRecvIgmpV1QueryNum=hwL2mcRecvIgmpV1QueryNum, hwL2mcLimitBandWidth=hwL2mcLimitBandWidth, hwChnlDenyCfg=hwChnlDenyCfg, hwL2mcSourceUpTime=hwL2mcSourceUpTime, hwL2mcRouterPortPeerAddress=hwL2mcRouterPortPeerAddress, hwL2mcGroupVlanIndex=hwL2mcGroupVlanIndex, hwL2mcPromptLeaveAclNum=hwL2mcPromptLeaveAclNum, hwPortLimitPeId=hwPortLimitPeId, hwL2mcCfgInfoGroup=hwL2mcCfgInfoGroup, hwL2mcVsiName=hwL2mcVsiName, hwL2mcEnabled=hwL2mcEnabled, hwL2mcGroupCfgTable=hwL2mcGroupCfgTable, hwL2mcLimitVsiName=hwL2mcLimitVsiName, hwPortLimitEntryCnt=hwPortLimitEntryCnt, hwL2mcFwdHostFlag1=hwL2mcFwdHostFlag1, hwChnlGroupCfgGroupAddress=hwChnlGroupCfgGroupAddress, hwL2mcFwdGroupAddress=hwL2mcFwdGroupAddress, hwL2mcCfgInfo=hwL2mcCfgInfo, hwL2mcVlanIndex=hwL2mcVlanIndex, hwL2mcGroupPortPeId=hwL2mcGroupPortPeId, hwL2mcChnlGroupCfgEntry=hwL2mcChnlGroupCfgEntry, hwL2mcRecvIgmpV1ReportNum=hwL2mcRecvIgmpV1ReportNum, hwChnlGroupCfgSourceAddress=hwChnlGroupCfgSourceAddress, hwL2mcSendRouterAlert=hwL2mcSendRouterAlert, hwL2mcRecvIgmpV3QueryNum=hwL2mcRecvIgmpV3QueryNum, hwChnlCfgVlanIndex=hwChnlCfgVlanIndex, hwChnlCfgRowStatus=hwChnlCfgRowStatus, hwChnlDenyCfgVsiName=hwChnlDenyCfgVsiName, hwGroupPolicyVsiName=hwGroupPolicyVsiName, hwL2mcProxyGroupSourceQueryNum=hwL2mcProxyGroupSourceQueryNum, hwL2mcStatisticsTable=hwL2mcStatisticsTable, hwPortGroupPolicyIgmpVersion=hwPortGroupPolicyIgmpVersion, hwPortGroupPolicyPeerAddress=hwPortGroupPolicyPeerAddress, hwL2mcRouterPortCfgVlanIndex=hwL2mcRouterPortCfgVlanIndex, hwL2mcStatisticsInfoGroup=hwL2mcStatisticsInfoGroup, hwL2mcRouterPortCfgPortPeId=hwL2mcRouterPortCfgPortPeId, hwL2mcLimitEntryCnt=hwL2mcLimitEntryCnt, hwL2mcMibCompliances=hwL2mcMibCompliances, hwL2mcRouterPortInfoEntry=hwL2mcRouterPortInfoEntry, hwSendQueryEnabled=hwSendQueryEnabled, hwL2mcFwdInfo=hwL2mcFwdInfo, hwL2mcRouterPortCfgPortCeId=hwL2mcRouterPortCfgPortCeId, hwL2mcFastChnlCfgSourceAddress=hwL2mcFastChnlCfgSourceAddress, HWPortType=HWPortType, hwL2mcRouterPortPeId=hwL2mcRouterPortPeId, hwGroupCfgSourceAddress=hwGroupCfgSourceAddress, hwL2mcPortGroupPolicyCfgInfo=hwL2mcPortGroupPolicyCfgInfo, hwL2mcIgmpVersion=hwL2mcIgmpVersion, hwGroupCfgRowStatus=hwGroupCfgRowStatus, hwL2mcSsmSourceVlanIndex=hwL2mcSsmSourceVlanIndex, hwL2mcRouterPortVcOrSiteId=hwL2mcRouterPortVcOrSiteId, hwGroupPolicyRowStatus=hwGroupPolicyRowStatus, hwL2mcPortLimitInfo=hwL2mcPortLimitInfo, hwL2mcRouterPortVlanIndex=hwL2mcRouterPortVlanIndex, hwL2mcFastChnlCfgRowStatus=hwL2mcFastChnlCfgRowStatus, hwPortLimitVlanIndex=hwPortLimitVlanIndex, hwL2mcSsmSourceVsiName=hwL2mcSsmSourceVsiName, hwL2mcRowStatus=hwL2mcRowStatus, hwL2mcSsmSourceInfoGroup=hwL2mcSsmSourceInfoGroup)
