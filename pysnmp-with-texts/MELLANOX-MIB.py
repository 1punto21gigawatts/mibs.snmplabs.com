#
# PySNMP MIB module MELLANOX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MELLANOX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:11:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, TimeTicks, NotificationType, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, MibIdentifier, Unsigned32, enterprises, iso, Counter32, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "NotificationType", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "MibIdentifier", "Unsigned32", "enterprises", "iso", "Counter32", "Bits", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
mellanox = ModuleIdentity((1, 3, 6, 1, 4, 1, 33049))
mellanox.setRevisions(('2011-01-31 00:00', '2010-12-12 00:00', '2010-02-01 00:00', '2010-01-01 00:00', '2009-10-03 00:00', '2009-03-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mellanox.setRevisionsDescriptions(('Added IB groups (IBCAInfo, IBSwitchInfo, IBRouterInfo, IBPortInfo, and IBNotifications under IBObjects)', 'health daemon added', 'bxBridge product added', "Added the following objects to 'ibPorts' table: cntOperationalVLs, cntSupportedSpeeds, cntSupportedWidths, cntMaxSupportedMTUs, cntVLCapabilities, cntGUID, cntLID.", 'ibSwitch product added', 'Base version',))
if mibBuilder.loadTexts: mellanox.setLastUpdated('201101310000Z')
if mibBuilder.loadTexts: mellanox.setOrganization('Mellanox Technologies, Inc.')
if mibBuilder.loadTexts: mellanox.setContactInfo(' Mellanox Technologies, Inc. 350 Oakmead Parkway, Suite 100 Sunnyvale, CA 94085 Tel: 408-970-3400 Fax: 408-970-3403 E-mail: info@mellanox.com ')
if mibBuilder.loadTexts: mellanox.setDescription('Mellanox vendor MIB')
class IbGuid(TextualConvention, OctetString):
    reference = 'InfiniBand Architecture Release 1.2.1 Vol. 1 Section 4.1.'
    description = 'Globally Unique Identifier (GUID) is a number that uniquely identifies an IB device or component. It is a compliant EUI-64 identifier for channel adapter, routers, and switches. This 64-bit value is created by concatenating a 24-bit company ID value and a 40-bit extension. The IEEE Registration Authority assigns the company ID. The extension ID is assigned by the particular company. Therefore, each HCA, TCA, switch, and router shall be assigned an EUI-64 by the manufacturer.'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

mellanoxProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 1))
mellanoxMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2))
generalMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 1))
gmVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1))
gmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2))
ibSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 2))
ibVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1))
ibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 2, 2))
subnetMngr = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 3))
smVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 3, 1))
smNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 3, 2))
bxBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 4))
bxVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1))
bxNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 4, 2))
mlxIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 5))
mlxIBCAInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1))
mlxIBSwitchInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 5, 2))
mlxIBRouterInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 5, 3))
mlxIBPortInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4))
mlxIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5))
gmSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 1))
type = MibScalar((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: type.setStatus('current')
if mibBuilder.loadTexts: type.setDescription('System hardware type')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
if mibBuilder.loadTexts: serialNumber.setDescription('System serial number')
swVersion = MibScalar((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVersion.setStatus('current')
if mibBuilder.loadTexts: swVersion.setDescription('System software version string')
buildInfo = MibScalar((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: buildInfo.setStatus('current')
if mibBuilder.loadTexts: buildInfo.setDescription('System software build information')
nodeName = MibScalar((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeName.setStatus('current')
if mibBuilder.loadTexts: nodeName.setDescription('System node name')
procmgr = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 2))
procTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: procTable.setStatus('current')
if mibBuilder.loadTexts: procTable.setDescription('List of processes managed or monitored by FabricIT')
procEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "MELLANOX-MIB", "procIndex"))
if mibBuilder.loadTexts: procEntry.setStatus('current')
if mibBuilder.loadTexts: procEntry.setDescription('Entry for one process')
procIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: procIndex.setStatus('current')
if mibBuilder.loadTexts: procIndex.setDescription('Synthetic numeric unique ID of process')
procName = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procName.setStatus('current')
if mibBuilder.loadTexts: procName.setDescription('Unique name of process')
procStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procStatus.setStatus('current')
if mibBuilder.loadTexts: procStatus.setDescription('Current state of process')
procNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procNumFailures.setStatus('current')
if mibBuilder.loadTexts: procNumFailures.setDescription('Number of times process has crashed or exited unexpectedly')
storage = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 3))
fsTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 3, 1), )
if mibBuilder.loadTexts: fsTable.setStatus('current')
if mibBuilder.loadTexts: fsTable.setDescription('List of filesystems currently mounted')
fsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 3, 1, 1), ).setIndexNames((0, "MELLANOX-MIB", "fsIndex"))
if mibBuilder.loadTexts: fsEntry.setStatus('current')
if mibBuilder.loadTexts: fsEntry.setDescription('Entry for one mounted filesystem')
fsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fsIndex.setStatus('current')
if mibBuilder.loadTexts: fsIndex.setDescription('Synthetic numeric index for this filesystem')
fsMountPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsMountPoint.setStatus('current')
if mibBuilder.loadTexts: fsMountPoint.setDescription('Mount point for this filesystem')
fsSpaceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 3, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsSpaceTotal.setStatus('current')
if mibBuilder.loadTexts: fsSpaceTotal.setDescription('Total number of bytes in this filesystem')
fsSpaceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsSpaceUsed.setStatus('current')
if mibBuilder.loadTexts: fsSpaceUsed.setDescription('Number of bytes used in this filesystem')
fsSpaceFree = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsSpaceFree.setStatus('current')
if mibBuilder.loadTexts: fsSpaceFree.setDescription('Number of bytes free in this filesystem')
fsSpaceAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 3, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsSpaceAvail.setStatus('current')
if mibBuilder.loadTexts: fsSpaceAvail.setDescription('Number of bytes available in this filesystem')
cpus = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 4))
cpuTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 4, 1), )
if mibBuilder.loadTexts: cpuTable.setStatus('current')
if mibBuilder.loadTexts: cpuTable.setDescription('List of CPUs')
cpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 4, 1, 1), ).setIndexNames((0, "MELLANOX-MIB", "cpuIndex"))
if mibBuilder.loadTexts: cpuEntry.setStatus('current')
if mibBuilder.loadTexts: cpuEntry.setDescription('Entry for one CPU')
cpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cpuIndex.setStatus('current')
if mibBuilder.loadTexts: cpuIndex.setDescription('Index of CPU, starting from 0')
idleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 4, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idleTime.setStatus('current')
if mibBuilder.loadTexts: idleTime.setDescription('Time in milliseconds CPU has spent idle')
systemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 4, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTime.setStatus('current')
if mibBuilder.loadTexts: systemTime.setDescription('Time in milliseconds CPU has spent busy with system tasks')
userTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 4, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userTime.setStatus('current')
if mibBuilder.loadTexts: userTime.setDescription('Time in milliseconds CPU has spent busy with user tasks')
ibInventory = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 1))
invTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 1, 1), )
if mibBuilder.loadTexts: invTable.setStatus('current')
if mibBuilder.loadTexts: invTable.setDescription('List of device inventory information')
invEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 1, 1, 1), ).setIndexNames((0, "MELLANOX-MIB", "invIndex"))
if mibBuilder.loadTexts: invEntry.setStatus('current')
if mibBuilder.loadTexts: invEntry.setDescription('Entry for one piece of inventory')
invIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: invIndex.setStatus('current')
if mibBuilder.loadTexts: invIndex.setDescription('Synthetic numeric unique ID of inventory element')
invName = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invName.setStatus('current')
if mibBuilder.loadTexts: invName.setDescription('Unique name of one piece of inventory')
invType = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invType.setStatus('current')
if mibBuilder.loadTexts: invType.setDescription('Type of inventory element')
invPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invPartNum.setStatus('current')
if mibBuilder.loadTexts: invPartNum.setDescription('Part number of inventory element')
invSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invSerialNum.setStatus('current')
if mibBuilder.loadTexts: invSerialNum.setDescription('Serial number of inventory element')
invFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 1, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invFirmware.setStatus('current')
if mibBuilder.loadTexts: invFirmware.setDescription('Firmware version running on inventory element')
invHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 1, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invHealthStatus.setStatus('current')
if mibBuilder.loadTexts: invHealthStatus.setDescription('Module health status')
ibPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2))
cntTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1), )
if mibBuilder.loadTexts: cntTable.setStatus('current')
if mibBuilder.loadTexts: cntTable.setDescription('List of external port counters')
cntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1), ).setIndexNames((0, "MELLANOX-MIB", "cntIndex"))
if mibBuilder.loadTexts: cntEntry.setStatus('current')
if mibBuilder.loadTexts: cntEntry.setDescription('Entry for one port')
cntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntIndex.setStatus('current')
if mibBuilder.loadTexts: cntIndex.setDescription('Synthetic numeric unique ID of port')
cntName = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntName.setStatus('current')
if mibBuilder.loadTexts: cntName.setDescription('Module owning this port')
cntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntPort.setStatus('current')
if mibBuilder.loadTexts: cntPort.setDescription('Port number on owning module')
cntPhyState = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntPhyState.setStatus('current')
if mibBuilder.loadTexts: cntPhyState.setDescription('Physical state of this port')
cntLogState = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntLogState.setStatus('current')
if mibBuilder.loadTexts: cntLogState.setDescription('Logical state of this port')
cntRate = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRate.setStatus('current')
if mibBuilder.loadTexts: cntRate.setDescription('Port communication rate')
cntMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMTU.setStatus('current')
if mibBuilder.loadTexts: cntMTU.setDescription('Maximum block size on this port')
cntRcvData = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRcvData.setStatus('current')
if mibBuilder.loadTexts: cntRcvData.setDescription('Number of bytes received on this port')
cntRcvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRcvPkts.setStatus('current')
if mibBuilder.loadTexts: cntRcvPkts.setDescription('Number of frames received on this port')
cntXmitData = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntXmitData.setStatus('current')
if mibBuilder.loadTexts: cntXmitData.setDescription('Number of bytes sent on this port')
cntXmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntXmitPkts.setStatus('current')
if mibBuilder.loadTexts: cntXmitPkts.setDescription('Number of frames sent on this port')
cntRcvErr = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRcvErr.setStatus('current')
if mibBuilder.loadTexts: cntRcvErr.setDescription('Number of receive errors on this port')
cntXmitDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntXmitDiscard.setStatus('current')
if mibBuilder.loadTexts: cntXmitDiscard.setDescription('Number of send frames dropped on this port')
cntXmitWait = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntXmitWait.setStatus('current')
if mibBuilder.loadTexts: cntXmitWait.setDescription('Number of transmit waits on this port')
cntSymErr = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSymErr.setStatus('current')
if mibBuilder.loadTexts: cntSymErr.setDescription('Number of symbol errors received on this port')
cntVL15Drop = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntVL15Drop.setStatus('current')
if mibBuilder.loadTexts: cntVL15Drop.setDescription('Number of VL15 frames dropped on this port')
cntSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSpeed.setStatus('current')
if mibBuilder.loadTexts: cntSpeed.setDescription('Speed of each link on this port')
cntWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntWidth.setStatus('current')
if mibBuilder.loadTexts: cntWidth.setDescription('Number of parallel links on this port')
cntOperationalVLs = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntOperationalVLs.setStatus('current')
if mibBuilder.loadTexts: cntOperationalVLs.setDescription('Virtaul lanes on this port')
cntSupportedSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSupportedSpeeds.setStatus('current')
if mibBuilder.loadTexts: cntSupportedSpeeds.setDescription('Supported speeds of each link on this port')
cntSupportedWidths = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSupportedWidths.setStatus('current')
if mibBuilder.loadTexts: cntSupportedWidths.setDescription('Supported parallel links on this port')
cntMaxSupportedMTUs = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMaxSupportedMTUs.setStatus('current')
if mibBuilder.loadTexts: cntMaxSupportedMTUs.setDescription('Maximum supported block size on this port')
cntVLCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntVLCapabilities.setStatus('current')
if mibBuilder.loadTexts: cntVLCapabilities.setDescription('Virtual lanes capabilities on this port')
cntGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntGUID.setStatus('current')
if mibBuilder.loadTexts: cntGUID.setDescription('Global Unique ID of this port')
cntLID = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntLID.setStatus('current')
if mibBuilder.loadTexts: cntLID.setDescription('Local ID of this port')
bxInventory = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 1))
bxInvTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 1, 1), )
if mibBuilder.loadTexts: bxInvTable.setStatus('current')
if mibBuilder.loadTexts: bxInvTable.setDescription('List of device inventory information')
bxInvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 1, 1, 1), ).setIndexNames((0, "MELLANOX-MIB", "bxInvIndex"))
if mibBuilder.loadTexts: bxInvEntry.setStatus('current')
if mibBuilder.loadTexts: bxInvEntry.setDescription('Entry for one piece of inventory')
bxInvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: bxInvIndex.setStatus('current')
if mibBuilder.loadTexts: bxInvIndex.setDescription('Synthetic numeric unique ID of inventory element')
bxInvName = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxInvName.setStatus('current')
if mibBuilder.loadTexts: bxInvName.setDescription('Unique name of one piece of inventory')
bxInvType = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxInvType.setStatus('current')
if mibBuilder.loadTexts: bxInvType.setDescription('Type of inventory element')
bxInvPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxInvPartNum.setStatus('current')
if mibBuilder.loadTexts: bxInvPartNum.setDescription('Part number of inventory element')
bxInvSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxInvSerialNum.setStatus('current')
if mibBuilder.loadTexts: bxInvSerialNum.setDescription('Serial number of inventory element')
bxInvFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 1, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxInvFirmware.setStatus('current')
if mibBuilder.loadTexts: bxInvFirmware.setDescription('Firmware version running on inventory element')
bxIbPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2))
bxIbCntTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1), )
if mibBuilder.loadTexts: bxIbCntTable.setStatus('current')
if mibBuilder.loadTexts: bxIbCntTable.setDescription('List of InfiniBand port counters')
bxIbCntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1), ).setIndexNames((0, "MELLANOX-MIB", "bxIbCntIndex"))
if mibBuilder.loadTexts: bxIbCntEntry.setStatus('current')
if mibBuilder.loadTexts: bxIbCntEntry.setDescription('Entry for one InfiniBand port')
bxIbCntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: bxIbCntIndex.setStatus('current')
if mibBuilder.loadTexts: bxIbCntIndex.setDescription('Synthetic numeric unique ID of port')
bxIbCntName = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntName.setStatus('current')
if mibBuilder.loadTexts: bxIbCntName.setDescription('Name of this port')
bxIbCntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntPort.setStatus('current')
if mibBuilder.loadTexts: bxIbCntPort.setDescription('Port number on owning module')
bxIbCntLogState = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntLogState.setStatus('current')
if mibBuilder.loadTexts: bxIbCntLogState.setDescription('Logical state of this port')
bxIbCntPhyState = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntPhyState.setStatus('current')
if mibBuilder.loadTexts: bxIbCntPhyState.setDescription('Physical state of this port')
bxIbCntRate = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntRate.setStatus('current')
if mibBuilder.loadTexts: bxIbCntRate.setDescription('Port communication rate')
bxIbCntSupportedSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntSupportedSpeeds.setStatus('current')
if mibBuilder.loadTexts: bxIbCntSupportedSpeeds.setDescription('Supported speeds of each link on this port')
bxIbCntSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntSpeed.setStatus('current')
if mibBuilder.loadTexts: bxIbCntSpeed.setDescription('Speed of each link on this port')
bxIbCntSupportedWidths = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntSupportedWidths.setStatus('current')
if mibBuilder.loadTexts: bxIbCntSupportedWidths.setDescription('Supported parallel links on this port')
bxIbCntWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntWidth.setStatus('current')
if mibBuilder.loadTexts: bxIbCntWidth.setDescription('Number of parallel links on this port')
bxIbCntMaxSupportedMTUs = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntMaxSupportedMTUs.setStatus('current')
if mibBuilder.loadTexts: bxIbCntMaxSupportedMTUs.setDescription('Maximum supported block size on this port')
bxIbCntMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntMTU.setStatus('current')
if mibBuilder.loadTexts: bxIbCntMTU.setDescription('Maximum block size on this port')
bxIbCntVLCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntVLCapabilities.setStatus('current')
if mibBuilder.loadTexts: bxIbCntVLCapabilities.setDescription('Virtual lanes capabilities on this port')
bxIbCntOperationalVLs = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntOperationalVLs.setStatus('current')
if mibBuilder.loadTexts: bxIbCntOperationalVLs.setDescription('Virtaul lanes on this port')
bxIbCntGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntGUID.setStatus('current')
if mibBuilder.loadTexts: bxIbCntGUID.setDescription('Global Unique ID of this port')
bxIbCntLID = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntLID.setStatus('current')
if mibBuilder.loadTexts: bxIbCntLID.setDescription('Local ID of this port')
bxIbCntRcvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntRcvPkts.setStatus('current')
if mibBuilder.loadTexts: bxIbCntRcvPkts.setDescription('Number of frames received on this port')
bxIbCntRcvData = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntRcvData.setStatus('current')
if mibBuilder.loadTexts: bxIbCntRcvData.setDescription('Number of bytes received on this port')
bxIbCntRcvErr = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntRcvErr.setStatus('current')
if mibBuilder.loadTexts: bxIbCntRcvErr.setDescription('Number of receive errors on this port')
bxIbCntSymErr = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntSymErr.setStatus('current')
if mibBuilder.loadTexts: bxIbCntSymErr.setDescription('Number of symbol errors received on this port')
bxIbCntVL15Drop = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntVL15Drop.setStatus('current')
if mibBuilder.loadTexts: bxIbCntVL15Drop.setDescription('Number of VL15 frames dropped on this port')
bxIbCntXmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntXmitPkts.setStatus('current')
if mibBuilder.loadTexts: bxIbCntXmitPkts.setDescription('Number of frames sent on this port')
bxIbCntXmitData = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntXmitData.setStatus('current')
if mibBuilder.loadTexts: bxIbCntXmitData.setDescription('Number of bytes sent on this port')
bxIbCntXmitWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntXmitWaits.setStatus('current')
if mibBuilder.loadTexts: bxIbCntXmitWaits.setDescription('Number of transmit waits on this port')
bxIbCntXmitDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntXmitDiscards.setStatus('current')
if mibBuilder.loadTexts: bxIbCntXmitDiscards.setDescription('Number of send frames dropped on this port')
bxEthPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3))
bxEthCntTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1), )
if mibBuilder.loadTexts: bxEthCntTable.setStatus('current')
if mibBuilder.loadTexts: bxEthCntTable.setDescription('List of Ethernet port counters')
bxEthCntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1), ).setIndexNames((0, "MELLANOX-MIB", "bxEthCntIndex"))
if mibBuilder.loadTexts: bxEthCntEntry.setStatus('current')
if mibBuilder.loadTexts: bxEthCntEntry.setDescription('Entry for one Ethernet port')
bxEthCntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: bxEthCntIndex.setStatus('current')
if mibBuilder.loadTexts: bxEthCntIndex.setDescription('Synthetic numeric unique ID of port')
bxEthCntName = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntName.setStatus('current')
if mibBuilder.loadTexts: bxEthCntName.setDescription('Name of this port')
bxEthCntAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntAdminMode.setStatus('current')
if mibBuilder.loadTexts: bxEthCntAdminMode.setDescription('Administrative mode of this port')
bxEthCntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntStatus.setStatus('current')
if mibBuilder.loadTexts: bxEthCntStatus.setDescription('Status of this port')
bxEthCntSupportedSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntSupportedSpeeds.setStatus('current')
if mibBuilder.loadTexts: bxEthCntSupportedSpeeds.setDescription('Supported speeds of this port')
bxEthCntSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntSpeed.setStatus('current')
if mibBuilder.loadTexts: bxEthCntSpeed.setDescription('Speed of this port')
bxEthCntDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntDuplex.setStatus('current')
if mibBuilder.loadTexts: bxEthCntDuplex.setDescription('Duplex type of this port')
bxEthCntMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntMTU.setStatus('current')
if mibBuilder.loadTexts: bxEthCntMTU.setDescription('Maximum block size on this port')
bxEthCntFlowcontrolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntFlowcontrolStatus.setStatus('current')
if mibBuilder.loadTexts: bxEthCntFlowcontrolStatus.setDescription('Flowcontrol status of this port')
bxEthCntFlowcontrolMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntFlowcontrolMode.setStatus('current')
if mibBuilder.loadTexts: bxEthCntFlowcontrolMode.setDescription('Flowcontrol mode of this port')
bxEthCntFlowcontrolPriorities = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntFlowcontrolPriorities.setStatus('current')
if mibBuilder.loadTexts: bxEthCntFlowcontrolPriorities.setDescription('Flowcontrol priorities list of this port')
bxEthCntRcvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntRcvPkts.setStatus('current')
if mibBuilder.loadTexts: bxEthCntRcvPkts.setDescription('Number of frames received on this port')
bxEthCntRcvUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntRcvUcastPkts.setStatus('current')
if mibBuilder.loadTexts: bxEthCntRcvUcastPkts.setDescription('Number of unicast frames received on this port')
bxEthCntRcvMcatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntRcvMcatsPkts.setStatus('current')
if mibBuilder.loadTexts: bxEthCntRcvMcatsPkts.setDescription('Number of multicats frames received on this port')
bxEthCntRcvBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntRcvBcastPkts.setStatus('current')
if mibBuilder.loadTexts: bxEthCntRcvBcastPkts.setDescription('Number of broadcast frames received on this port')
bxEthCntRcvJumboPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntRcvJumboPkts.setStatus('current')
if mibBuilder.loadTexts: bxEthCntRcvJumboPkts.setDescription('Number of jumbo frames received on this port')
bxEthCntRcvData = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntRcvData.setStatus('current')
if mibBuilder.loadTexts: bxEthCntRcvData.setDescription('Number of bytes received on this port')
bxEthCntRcvErr = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntRcvErr.setStatus('current')
if mibBuilder.loadTexts: bxEthCntRcvErr.setDescription('Number of erroneous frames received on this port')
bxEthCntRcvNoBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntRcvNoBuffer.setStatus('current')
if mibBuilder.loadTexts: bxEthCntRcvNoBuffer.setDescription('Number of no buffer erroneous frames received on this port')
bxEthCntRcvRunt = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntRcvRunt.setStatus('current')
if mibBuilder.loadTexts: bxEthCntRcvRunt.setDescription('Number of runt frames received on this port')
bxEthCntRcvCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntRcvCRC.setStatus('current')
if mibBuilder.loadTexts: bxEthCntRcvCRC.setDescription('Number of crc erroneous frames received on this port')
bxEthCntXmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntXmitPkts.setStatus('current')
if mibBuilder.loadTexts: bxEthCntXmitPkts.setDescription('Number of frames sent on this port')
bxEthCntXmitUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntXmitUcastPkts.setStatus('current')
if mibBuilder.loadTexts: bxEthCntXmitUcastPkts.setDescription('Number of unicast frames sent on this port')
bxEthCntXmitMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntXmitMcastPkts.setStatus('current')
if mibBuilder.loadTexts: bxEthCntXmitMcastPkts.setDescription('Number of multicats frames sent on this port')
bxEthCntXmitBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntXmitBcastPkts.setStatus('current')
if mibBuilder.loadTexts: bxEthCntXmitBcastPkts.setDescription('Number of broadcast frames sent on this port')
bxEthCntXmitJumboPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntXmitJumboPkts.setStatus('current')
if mibBuilder.loadTexts: bxEthCntXmitJumboPkts.setDescription('Number of jumbo frames sent on this port')
bxEthCntXmitData = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntXmitData.setStatus('current')
if mibBuilder.loadTexts: bxEthCntXmitData.setDescription('Number of bytes sent on this port')
bxEthCntXmitErr = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntXmitErr.setStatus('current')
if mibBuilder.loadTexts: bxEthCntXmitErr.setDescription('Number of erroneous frames sent on this port')
bxFcPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4))
bxFcCntTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1), )
if mibBuilder.loadTexts: bxFcCntTable.setStatus('current')
if mibBuilder.loadTexts: bxFcCntTable.setDescription('List of Fibre Channel port counters')
bxFcCntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1), ).setIndexNames((0, "MELLANOX-MIB", "bxFcCntIndex"))
if mibBuilder.loadTexts: bxFcCntEntry.setStatus('current')
if mibBuilder.loadTexts: bxFcCntEntry.setDescription('Entry for one Fibre Channel port')
bxFcCntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: bxFcCntIndex.setStatus('current')
if mibBuilder.loadTexts: bxFcCntIndex.setDescription('Synthetic numeric unique ID of port')
bxFcCntName = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntName.setStatus('current')
if mibBuilder.loadTexts: bxFcCntName.setDescription('Name of this port')
bxFcCntAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntAdminMode.setStatus('current')
if mibBuilder.loadTexts: bxFcCntAdminMode.setDescription('Administrative mode of this port')
bxFcCntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntStatus.setStatus('current')
if mibBuilder.loadTexts: bxFcCntStatus.setDescription('Status of this port')
bxFcCntSupportedSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntSupportedSpeeds.setStatus('current')
if mibBuilder.loadTexts: bxFcCntSupportedSpeeds.setDescription('Supported speeds of this port')
bxFcCntSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntSpeed.setStatus('current')
if mibBuilder.loadTexts: bxFcCntSpeed.setDescription('Speed of this port')
bxFcCntWWPN = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntWWPN.setStatus('current')
if mibBuilder.loadTexts: bxFcCntWWPN.setDescription('WWN of this port')
bxFcCntFCID = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntFCID.setStatus('current')
if mibBuilder.loadTexts: bxFcCntFCID.setDescription('FC ID of this port')
bxFcCntRcvCreditsAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvCreditsAlloc.setStatus('current')
if mibBuilder.loadTexts: bxFcCntRcvCreditsAlloc.setDescription('Receive Buffer-to-Buffer credits allocation on this port')
bxFcCntXmitCreditsAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntXmitCreditsAlloc.setStatus('current')
if mibBuilder.loadTexts: bxFcCntXmitCreditsAlloc.setDescription('Transmit Buffer-to-Buffer credits allocation on this port')
bxFcCntRcvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvPkts.setStatus('current')
if mibBuilder.loadTexts: bxFcCntRcvPkts.setDescription('Number of frames received on this port')
bxFcCntRcvData = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvData.setStatus('current')
if mibBuilder.loadTexts: bxFcCntRcvData.setDescription('Number of bytes received on this port')
bxFcCntRcvDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvDiscards.setStatus('current')
if mibBuilder.loadTexts: bxFcCntRcvDiscards.setDescription('Number of discarded frames received on this port')
bxFcCntRcvErr = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvErr.setStatus('current')
if mibBuilder.loadTexts: bxFcCntRcvErr.setDescription('Number of erroneous frames received on this port')
bxFcCntRcvCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvCRC.setStatus('current')
if mibBuilder.loadTexts: bxFcCntRcvCRC.setDescription('Number of crc erroneous frames received on this port')
bxFcCntRcvUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvUnknown.setStatus('current')
if mibBuilder.loadTexts: bxFcCntRcvUnknown.setDescription('Number of unknown ordered set frames received on this port')
bxFcCntRcvLong = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvLong.setStatus('current')
if mibBuilder.loadTexts: bxFcCntRcvLong.setDescription('Number of frames longer than the maximum frame size received on this port')
bxFcCntRcvShort = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvShort.setStatus('current')
if mibBuilder.loadTexts: bxFcCntRcvShort.setDescription('Number of frames shorter than the minimum frame size received on this port')
bxFcCntRcvOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvOffline.setStatus('current')
if mibBuilder.loadTexts: bxFcCntRcvOffline.setDescription('Number of offline frames received on this port')
bxFcCntRcvLinkReset = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvLinkReset.setStatus('current')
if mibBuilder.loadTexts: bxFcCntRcvLinkReset.setDescription('Number of link reset frames received on this port')
bxFcCntRcvNonOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvNonOperational.setStatus('current')
if mibBuilder.loadTexts: bxFcCntRcvNonOperational.setDescription('Number of non operational frames received on this port')
bxFcCntRcvRemainCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvRemainCredits.setStatus('current')
if mibBuilder.loadTexts: bxFcCntRcvRemainCredits.setDescription('Remaining receive Buffer-to-Buffer credits on this port')
bxFcCntXmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntXmitPkts.setStatus('current')
if mibBuilder.loadTexts: bxFcCntXmitPkts.setDescription('Number of frames sent on this port')
bxFcCntXmitData = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntXmitData.setStatus('current')
if mibBuilder.loadTexts: bxFcCntXmitData.setDescription('Number of bytes sent on this port')
bxFcCntXmitDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntXmitDiscards.setStatus('current')
if mibBuilder.loadTexts: bxFcCntXmitDiscards.setDescription('Number of discarded frames sent on this port')
bxFcCntXmitErr = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntXmitErr.setStatus('current')
if mibBuilder.loadTexts: bxFcCntXmitErr.setDescription('Number of erroneous frames sent on this port')
bxFcCntXmitOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntXmitOffline.setStatus('current')
if mibBuilder.loadTexts: bxFcCntXmitOffline.setDescription('Number of offline frames sent on this port')
bxFcCntXmitLinkReset = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntXmitLinkReset.setStatus('current')
if mibBuilder.loadTexts: bxFcCntXmitLinkReset.setDescription('Number of link reset frames sent on this port')
bxFcCntXmitNonOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntXmitNonOperational.setStatus('current')
if mibBuilder.loadTexts: bxFcCntXmitNonOperational.setDescription('Number of non operational frames sent on this port')
bxFcCntXmitRemainCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntXmitRemainCredits.setStatus('current')
if mibBuilder.loadTexts: bxFcCntXmitRemainCredits.setDescription('Remaining transmit Buffer-to-Buffer credits on this port')
asicChipDown = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 2, 2, 1))
if mibBuilder.loadTexts: asicChipDown.setStatus('current')
if mibBuilder.loadTexts: asicChipDown.setDescription('ASIC is down, fatal error')
asicOverTempReset = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 2, 2, 2))
if mibBuilder.loadTexts: asicOverTempReset.setStatus('current')
if mibBuilder.loadTexts: asicOverTempReset.setDescription('reset happened due to over temperature of ASIC')
asicOverTemp = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 2, 2, 3))
if mibBuilder.loadTexts: asicOverTemp.setStatus('current')
if mibBuilder.loadTexts: asicOverTemp.setDescription('Temperature too high')
lowPower = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 2, 2, 4))
if mibBuilder.loadTexts: lowPower.setStatus('current')
if mibBuilder.loadTexts: lowPower.setDescription('FabricIT management appliance has insufficient power , please plug in more power cables ')
bxAsicChipDown = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 4, 2, 1))
if mibBuilder.loadTexts: bxAsicChipDown.setStatus('current')
if mibBuilder.loadTexts: bxAsicChipDown.setDescription('ASIC is down, fatal error')
bxAsicOverTempReset = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 4, 2, 2))
if mibBuilder.loadTexts: bxAsicOverTempReset.setStatus('current')
if mibBuilder.loadTexts: bxAsicOverTempReset.setDescription('reset happened due to over temperature of ASIC')
bxAsicOverTemp = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 4, 2, 3))
if mibBuilder.loadTexts: bxAsicOverTemp.setStatus('current')
if mibBuilder.loadTexts: bxAsicOverTemp.setDescription('Temperature too high')
internalBusError = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2, 1))
if mibBuilder.loadTexts: internalBusError.setStatus('current')
if mibBuilder.loadTexts: internalBusError.setDescription('I2C access failed more than 5 times')
ibSMup = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 3, 2, 1))
if mibBuilder.loadTexts: ibSMup.setStatus('current')
if mibBuilder.loadTexts: ibSMup.setDescription('Local Subnet Manager has started')
ibSMdown = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 3, 2, 2))
if mibBuilder.loadTexts: ibSMdown.setStatus('current')
if mibBuilder.loadTexts: ibSMdown.setDescription('Local Subnet Manager has stopped')
ibSMrestart = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 3, 2, 3))
if mibBuilder.loadTexts: ibSMrestart.setStatus('current')
if mibBuilder.loadTexts: ibSMrestart.setDescription('Local Subnet Manager been restarted')
procCrash = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2, 2))
if mibBuilder.loadTexts: procCrash.setStatus('current')
if mibBuilder.loadTexts: procCrash.setDescription('A process managed by FabricIT has terminated unexpectedly and left a core file')
cpuUtilHigh = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2, 3))
if mibBuilder.loadTexts: cpuUtilHigh.setStatus('current')
if mibBuilder.loadTexts: cpuUtilHigh.setDescription('The FabricIT management appliance CPU is very busy')
procUnexpectedExit = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2, 4))
if mibBuilder.loadTexts: procUnexpectedExit.setStatus('current')
if mibBuilder.loadTexts: procUnexpectedExit.setDescription('A process managed by FabricIT has terminated unexpectedly and no core file was found')
unexpectedShutdown = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2, 5))
if mibBuilder.loadTexts: unexpectedShutdown.setStatus('current')
if mibBuilder.loadTexts: unexpectedShutdown.setDescription('FabricIT management appliance shut down unexpectedly')
diskSpaceLow = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2, 6))
if mibBuilder.loadTexts: diskSpaceLow.setStatus('current')
if mibBuilder.loadTexts: diskSpaceLow.setDescription('FabricIT management appliance is running out of disk space')
systemHealthStatus = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2, 7))
if mibBuilder.loadTexts: systemHealthStatus.setStatus('current')
if mibBuilder.loadTexts: systemHealthStatus.setDescription('FabricIT management appliance health status')
lowPowerRecover = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2, 8))
if mibBuilder.loadTexts: lowPowerRecover.setStatus('current')
if mibBuilder.loadTexts: lowPowerRecover.setDescription('FabricIT management appliance has restored to normal power')
insufficientFans = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2, 9))
if mibBuilder.loadTexts: insufficientFans.setStatus('current')
if mibBuilder.loadTexts: insufficientFans.setDescription('FabricIT management appliance has insufficient number of working fans, please plug in additional fans')
insufficientFansRecover = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2, 10))
if mibBuilder.loadTexts: insufficientFansRecover.setStatus('current')
if mibBuilder.loadTexts: insufficientFansRecover.setDescription('FabricIT management appliance has a sufficient number of working fans')
mlxIBCAInfoTableNumCAs = MibScalar((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAInfoTableNumCAs.setStatus('current')
if mibBuilder.loadTexts: mlxIBCAInfoTableNumCAs.setDescription('Total number of channel adapters in the mlxIBCAInfoTable.')
mlxIBCAInfoTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2), )
if mibBuilder.loadTexts: mlxIBCAInfoTable.setStatus('current')
if mibBuilder.loadTexts: mlxIBCAInfoTable.setDescription('A table containing general information about the Channel Adapters in a system. Holes in this table are possible due to persistent numbering.')
mlxIBCAInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1), ).setIndexNames((0, "MELLANOX-MIB", "mlxIBCAIndex"))
if mibBuilder.loadTexts: mlxIBCAInfoEntry.setStatus('current')
if mibBuilder.loadTexts: mlxIBCAInfoEntry.setDescription('A conceptual row of the mlxIBCAInfoTable containing information about the general characteristics of each Channel Adapter.')
mlxIBCAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mlxIBCAIndex.setStatus('current')
if mibBuilder.loadTexts: mlxIBCAIndex.setDescription('Index that identifies a specific Channel Adapter in the system.')
mlxIBCADeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCADeviceName.setStatus('current')
if mibBuilder.loadTexts: mlxIBCADeviceName.setDescription('The device name of the Channel Adapter.')
mlxIBCAPCIDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAPCIDomain.setStatus('current')
if mibBuilder.loadTexts: mlxIBCAPCIDomain.setDescription('The PCI domain of the Channel Adapter. Same domain as indicated by lspci.')
mlxIBCAPCIBus = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAPCIBus.setStatus('current')
if mibBuilder.loadTexts: mlxIBCAPCIBus.setDescription('The PCI bus of the Channel Adapter. Same bus as indicated by lspci.')
mlxIBCAPCISlot = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAPCISlot.setStatus('current')
if mibBuilder.loadTexts: mlxIBCAPCISlot.setDescription('The PCI (logical) slot of the Channel Adapter. Same slot as indicated by lspci.')
mlxIBCAPCIFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAPCIFunction.setStatus('current')
if mibBuilder.loadTexts: mlxIBCAPCIFunction.setDescription('The PCI function of the Channel Adapter. Same function as indicated by lspci.')
mlxIBCAPCIPhysicalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAPCIPhysicalSlot.setStatus('current')
if mibBuilder.loadTexts: mlxIBCAPCIPhysicalSlot.setDescription('The PCI (physical) slot of the Channel Adapter. The number zero (0) indicates an embedded interface (on the system board). A value of -1 indicates an interface whose slot is unknown.')
mlxIBCAIrq = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAIrq.setStatus('current')
if mibBuilder.loadTexts: mlxIBCAIrq.setDescription('The interrupt request for the Channel Adapter.')
mlxIBCAModelString = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAModelString.setStatus('current')
if mibBuilder.loadTexts: mlxIBCAModelString.setDescription('The model string of the Channel Adapter.')
mlxIBCASerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCASerialNumber.setStatus('current')
if mibBuilder.loadTexts: mlxIBCASerialNumber.setDescription('The serial number of the Channel Adapter.')
mlxIBCAPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAPartNumber.setStatus('current')
if mibBuilder.loadTexts: mlxIBCAPartNumber.setDescription('The part number of the Channel Adapter.')
mlxIBCANodeGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 12), IbGuid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCANodeGUID.setReference('InfiniBand Architecture Release 1.2.1 Vol. 1 Section 17.2.5')
if mibBuilder.loadTexts: mlxIBCANodeGUID.setStatus('current')
if mibBuilder.loadTexts: mlxIBCANodeGUID.setDescription('The NodeGUID of the Channel Adapter. All ports on the same node shall report the same node GUID value. This provides a means for uniquely identifying a CA node within a subnet and helps to determine the co-location of the ports on that CA.')
mlxIBCASystemImageGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 13), IbGuid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCASystemImageGUID.setReference('InfiniBand Architecture Release 1.2.1 Vol. 1 Section 14.2.5.6 PortInfo')
if mibBuilder.loadTexts: mlxIBCASystemImageGUID.setStatus('current')
if mibBuilder.loadTexts: mlxIBCASystemImageGUID.setDescription('The SystemImageGUID of the Channel Adapter. This GUID associates this node with other nodes controlled by common supervisory code. Provides a means for system software to indicate the availability of multiple paths to the same destination via multiple nodes. Set to zero if indication of node association is not desired. The SystemImageGUID may be the NodeGUID of one of the associated nodes if that node is not field-replaceable.')
mlxIBCAFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: mlxIBCAFirmwareVersion.setDescription('The firmware version of the Channel Adapter.')
mlxIBCAHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: mlxIBCAHardwareVersion.setDescription('The hardware version of the Channel Adapter.')
mlxIBCAHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unhealthy", 0), ("healthy", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAHealthStatus.setStatus('current')
if mibBuilder.loadTexts: mlxIBCAHealthStatus.setDescription('The overall health status of the Channel Adapter.')
mlxIBCANumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCANumPorts.setReference('InfiniBand Architecture Release 1.2.1 Vol. 1 Section 17.2.1.3; Port Attributes and Functions')
if mibBuilder.loadTexts: mlxIBCANumPorts.setStatus('current')
if mibBuilder.loadTexts: mlxIBCANumPorts.setDescription('Number of physical IB data ports on this Channel Adapter. Ports are numbered starting from 1. If there is more than one port, the ports are numbered sequentially.')
mlxIBCAType = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("hca", 2), ("tca", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAType.setReference('InfiniBand Architecture Release 1.2.1 Vol. 1 Section 17.1')
if mibBuilder.loadTexts: mlxIBCAType.setStatus('current')
if mibBuilder.loadTexts: mlxIBCAType.setDescription('Type of Channel Adapter; either a Host Channel Adapter (HCA), or a Target Channel Adapter (TCA). The key difference between an HCA and a TCA is that the HCA supports the IBA Verbs layer, while a TCA uses an implementation dependent interface to the transport layer. If the type of CA cannot be determined, the unknown(1) value is returned.')
mlxIBSwitchInfoTableNumSwitches = MibScalar((1, 3, 6, 1, 4, 1, 33049, 2, 5, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBSwitchInfoTableNumSwitches.setStatus('current')
if mibBuilder.loadTexts: mlxIBSwitchInfoTableNumSwitches.setDescription('Total number of switches in the mlxIBSwitchInfoTable.')
mlxIBSwitchInfoTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 5, 2, 2), )
if mibBuilder.loadTexts: mlxIBSwitchInfoTable.setStatus('current')
if mibBuilder.loadTexts: mlxIBSwitchInfoTable.setDescription('A table containing general information about the switches in a system. Holes in this table are possible due to persistent numbering.')
mlxIBSwitchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 5, 2, 2, 1), ).setIndexNames((0, "MELLANOX-MIB", "mlxIBSwitchIndex"))
if mibBuilder.loadTexts: mlxIBSwitchInfoEntry.setStatus('current')
if mibBuilder.loadTexts: mlxIBSwitchInfoEntry.setDescription("A conceptual row of the mlxIBSwitchInfoTable containing information about the general characteristics of each switch. This is currently a placeholder until what's needed in IBSwitchInfo is defined.")
mlxIBSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mlxIBSwitchIndex.setStatus('current')
if mibBuilder.loadTexts: mlxIBSwitchIndex.setDescription('Index that identifies a specific switch in the system.')
mlxIBRouterInfoTableNumRouters = MibScalar((1, 3, 6, 1, 4, 1, 33049, 2, 5, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBRouterInfoTableNumRouters.setStatus('current')
if mibBuilder.loadTexts: mlxIBRouterInfoTableNumRouters.setDescription('Total number of routers in the mlxIBRouterInfoTable.')
mlxIBRouterInfoTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 5, 3, 2), )
if mibBuilder.loadTexts: mlxIBRouterInfoTable.setStatus('current')
if mibBuilder.loadTexts: mlxIBRouterInfoTable.setDescription('A table containing general information about the routers in a system. Holes in this table are possible due to persistent numbering.')
mlxIBRouterInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 5, 3, 2, 1), ).setIndexNames((0, "MELLANOX-MIB", "mlxIBRouterIndex"))
if mibBuilder.loadTexts: mlxIBRouterInfoEntry.setStatus('current')
if mibBuilder.loadTexts: mlxIBRouterInfoEntry.setDescription("A conceptual row of the mlxIBRouterInfoTable containing information about the general characteristics of each router. This is currently a placeholder until what's needed in IBRouterInfo is defined.")
mlxIBRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mlxIBRouterIndex.setStatus('current')
if mibBuilder.loadTexts: mlxIBRouterIndex.setDescription('Index that identifies a specific router in the system.')
mlxIBPortInfoTableNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBPortInfoTableNumPorts.setStatus('current')
if mibBuilder.loadTexts: mlxIBPortInfoTableNumPorts.setDescription('Total number of IB ports in the mlxIBPortInfoTable.')
mlxIBPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4, 2), )
if mibBuilder.loadTexts: mlxIBPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: mlxIBPortInfoTable.setDescription('A table containing general information about the IB ports in the system. Holes in this table are possible due to persistent numbering.')
mlxIBPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4, 2, 1), ).setIndexNames((0, "MELLANOX-MIB", "mlxIBPortIndex"))
if mibBuilder.loadTexts: mlxIBPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: mlxIBPortInfoEntry.setDescription('A conceptual row of the mlxIBPortInfoTable containing information about the general characteristics of an IB port in the system.')
mlxIBPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mlxIBPortIndex.setStatus('current')
if mibBuilder.loadTexts: mlxIBPortIndex.setDescription('Index that identifies the InfiniBand data port in the system. Note that if IB ports are included in MIB-2 ifTable, this can be the same as ifNumber so two different persistent numbering schemes are not needed with translation between the two.')
mlxIBPortLocalPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBPortLocalPortNumber.setStatus('current')
if mibBuilder.loadTexts: mlxIBPortLocalPortNumber.setDescription('Index that identifies the InfiniBand data port. IBA defines a range of valid data ports from 1 to N for CAs and router and 0 to N for switches, where N can have a maximum value of 254.')
mlxIBPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("down", 1), ("init", 2), ("armed", 3), ("active", 4), ("other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBPortState.setReference('InfiniBand Architecture Release 1.2.1 Vol. 1 Section 14.2.5.6; Table 146 PortInfo')
if mibBuilder.loadTexts: mlxIBPortState.setStatus('current')
if mibBuilder.loadTexts: mlxIBPortState.setDescription('The state of the link of this port. Enumerated as: 1 : Down (includes failed links) 2 : Initialize 3 : Armed 4 : Active 5 : Other (0, 5-15: Reserved)')
mlxIBPortPhysicalState = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sleep", 1), ("polling", 2), ("disabled", 3), ("portConfigTraining", 4), ("linkUp", 5), ("linkErrorRecovery", 6), ("phyTest", 7), ("other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBPortPhysicalState.setReference('InfiniBand Architecture Release 1.2.1 Vol. 1 Section 14.2.5.6; Table 146 PortInfo')
if mibBuilder.loadTexts: mlxIBPortPhysicalState.setStatus('current')
if mibBuilder.loadTexts: mlxIBPortPhysicalState.setDescription('Physical Port State. Enumerated as: 1 : Sleep 2 : Polling 3 : Disabled 4 : PortConfigurationTraining 5 : LinkUp 6 : LinkErrorRecovery 7 : PhyTest 8 : other (0, 8-15: Reserved)')
mlxIBPortGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4, 2, 1, 5), IbGuid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBPortGUID.setReference('InfiniBand Architecture Release 1.2.1 Vol. 1 Section 17.2.5')
if mibBuilder.loadTexts: mlxIBPortGUID.setStatus('current')
if mibBuilder.loadTexts: mlxIBPortGUID.setDescription('The GUID of this IB port. All ports on the same CA shall report a unique mlxIBPortGUID value. This provides a means for uniquely identifying a CA port within a subnet. One port within a node can return the NodeGUID as its PortGUID if the port is an integral part of the node and is not field-replaceable.')
mlxIBPortNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("channelAdapter", 1), ("switch", 2), ("router", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBPortNodeType.setReference('InfiniBand Architecture Release 1.2.1 Vol. 1 Section 14.2.5.6; Table 146 PortInfo')
if mibBuilder.loadTexts: mlxIBPortNodeType.setStatus('current')
if mibBuilder.loadTexts: mlxIBPortNodeType.setDescription('The node type for this port. Enumerated as: 1 : Channel Adapter 2 : Switch 3 : Router 4 : Other (0, 4-15: Reserved)')
mlxIBPortNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBPortNodeIndex.setStatus('current')
if mibBuilder.loadTexts: mlxIBPortNodeIndex.setDescription('Index of the IB node in the mlxIB<NodeType>Table which contains this port.')
mlxIBCAHealthStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 1)).setObjects(("MELLANOX-MIB", "mlxIBCAIndex"), ("MELLANOX-MIB", "mlxIBCAHealthStatus"), ("MELLANOX-MIB", "mlxIBCADeviceName"))
if mibBuilder.loadTexts: mlxIBCAHealthStatusChange.setStatus('current')
if mibBuilder.loadTexts: mlxIBCAHealthStatusChange.setDescription('The overall health status of the channel adapter has changed. SNMPv1 trap for this has mlxIBNotifications as the enterprise and 1 as the specific trap.')
mlxIBCAInsertion = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 2)).setObjects(("MELLANOX-MIB", "mlxIBCAIndex"))
if mibBuilder.loadTexts: mlxIBCAInsertion.setStatus('current')
if mibBuilder.loadTexts: mlxIBCAInsertion.setDescription('A channel adapter has been inserted in the system. Insertion of a CA means all its ports have also been inserted (separate port insertion events are not generated). SNMPv1 trap for this has mlxIBNotifications as the enterprise and 2 as the specific trap.')
mlxIBCARemoval = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 3)).setObjects(("MELLANOX-MIB", "mlxIBCAIndex"))
if mibBuilder.loadTexts: mlxIBCARemoval.setStatus('current')
if mibBuilder.loadTexts: mlxIBCARemoval.setDescription('A channel adapter has been removed from the system. Removal of a CA means all its ports have also been removed (separate port removal events are not generated). SNMPv1 trap for this has mlxIBNotifications as the enterprise and 3 as the specific trap.')
mlxIBSwitchInsertion = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 4)).setObjects(("MELLANOX-MIB", "mlxIBSwitchIndex"))
if mibBuilder.loadTexts: mlxIBSwitchInsertion.setStatus('current')
if mibBuilder.loadTexts: mlxIBSwitchInsertion.setDescription('A switch has been inserted in the system. Insertion of a switch means all its ports have also been inserted (separate port insertion events are not generated). SNMPv1 trap for this has mlxIBNotifications as the enterprise and 4 as the specific trap.')
mlxIBSwitchRemoval = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 5)).setObjects(("MELLANOX-MIB", "mlxIBSwitchIndex"))
if mibBuilder.loadTexts: mlxIBSwitchRemoval.setStatus('current')
if mibBuilder.loadTexts: mlxIBSwitchRemoval.setDescription('A switch has been removed from the system. Removal of a switch means all its ports have also been removed (separate port removal events are not generated). SNMPv1 trap for this has mlxIBNotifications as the enterprise and 5 as the specific trap.')
mlxIBRouterInsertion = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 6)).setObjects(("MELLANOX-MIB", "mlxIBRouterIndex"))
if mibBuilder.loadTexts: mlxIBRouterInsertion.setStatus('current')
if mibBuilder.loadTexts: mlxIBRouterInsertion.setDescription('A router has been inserted in the system. Insertion of a router means all its ports have also been inserted (separate port insertion events are not generated). SNMPv1 trap for this has mlxIBNotifications as the enterprise and 6 as the specific trap.')
mlxIBRouterRemoval = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 7)).setObjects(("MELLANOX-MIB", "mlxIBRouterIndex"))
if mibBuilder.loadTexts: mlxIBRouterRemoval.setStatus('current')
if mibBuilder.loadTexts: mlxIBRouterRemoval.setDescription('A router has been removed from the system. Removal of a router means all its ports have also been removed (separate port removal events are not generated). SNMPv1 trap for this has mlxIBNotifications as the enterprise and 7 as the specific trap.')
mlxIBPortStateChange = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 8)).setObjects(("MELLANOX-MIB", "mlxIBPortIndex"), ("MELLANOX-MIB", "mlxIBPortState"), ("MELLANOX-MIB", "mlxIBPortGUID"), ("MELLANOX-MIB", "mlxIBPortNodeType"), ("MELLANOX-MIB", "mlxIBPortNodeIndex"))
if mibBuilder.loadTexts: mlxIBPortStateChange.setStatus('current')
if mibBuilder.loadTexts: mlxIBPortStateChange.setDescription('The port state has changed. Refer to mlxIBPortState. SNMPv1 trap for this has mlxIBNotifications as the enterprise and 8 as the specific trap.')
mlxIBPortPhysicalStateChange = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 9)).setObjects(("MELLANOX-MIB", "mlxIBPortIndex"), ("MELLANOX-MIB", "mlxIBPortPhysicalState"), ("MELLANOX-MIB", "mlxIBPortGUID"), ("MELLANOX-MIB", "mlxIBPortNodeType"), ("MELLANOX-MIB", "mlxIBPortNodeIndex"))
if mibBuilder.loadTexts: mlxIBPortPhysicalStateChange.setStatus('current')
if mibBuilder.loadTexts: mlxIBPortPhysicalStateChange.setDescription('The physical port state has changed. Refer to mlxIBPortPhysicalState. SNMPv1 trap for this has mlxIBNotifications as the enterprise and 9 as the specific trap.')
mlxIBPortInsertion = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 10)).setObjects(("MELLANOX-MIB", "mlxIBPortIndex"))
if mibBuilder.loadTexts: mlxIBPortInsertion.setStatus('current')
if mibBuilder.loadTexts: mlxIBPortInsertion.setDescription('An IBA port has been inserted in the system. SNMPv1 trap for this has mlxIBNotifications as the enterprise and 10 as the specific trap.')
mlxIBPortRemoval = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 11)).setObjects(("MELLANOX-MIB", "mlxIBPortIndex"))
if mibBuilder.loadTexts: mlxIBPortRemoval.setStatus('current')
if mibBuilder.loadTexts: mlxIBPortRemoval.setDescription('An IB port has been removed from the system. SNMPv1 trap for this has mlxIBNotifications as the enterprise and 11 as the specific trap.')
mibBuilder.exportSymbols("MELLANOX-MIB", mlxIBCAHardwareVersion=mlxIBCAHardwareVersion, bxEthCntIndex=bxEthCntIndex, mlxIBCAInsertion=mlxIBCAInsertion, mlxIBPortPhysicalStateChange=mlxIBPortPhysicalStateChange, storage=storage, asicOverTempReset=asicOverTempReset, invType=invType, bxFcCntRcvLinkReset=bxFcCntRcvLinkReset, ibPorts=ibPorts, ibInventory=ibInventory, fsEntry=fsEntry, cntVLCapabilities=cntVLCapabilities, cpuTable=cpuTable, mlxIBCAIrq=mlxIBCAIrq, mlxIBCAModelString=mlxIBCAModelString, systemHealthStatus=systemHealthStatus, mlxIBCAIndex=mlxIBCAIndex, cntGUID=cntGUID, PYSNMP_MODULE_ID=mellanox, bxNotifications=bxNotifications, invPartNum=invPartNum, bxFcCntIndex=bxFcCntIndex, mlxIBPortNodeIndex=mlxIBPortNodeIndex, bxFcCntXmitPkts=bxFcCntXmitPkts, cntLID=cntLID, invSerialNum=invSerialNum, bxIbCntMaxSupportedMTUs=bxIbCntMaxSupportedMTUs, bxFcCntXmitDiscards=bxFcCntXmitDiscards, mlxIBCADeviceName=mlxIBCADeviceName, cntName=cntName, mellanox=mellanox, bxFcCntXmitCreditsAlloc=bxFcCntXmitCreditsAlloc, bxFcCntRcvCRC=bxFcCntRcvCRC, bxAsicChipDown=bxAsicChipDown, mlxIBRouterInfoTableNumRouters=mlxIBRouterInfoTableNumRouters, bxIbCntRcvErr=bxIbCntRcvErr, cpus=cpus, bxIbCntRcvPkts=bxIbCntRcvPkts, bxEthCntRcvData=bxEthCntRcvData, cntRcvPkts=cntRcvPkts, mlxIBPortNodeType=mlxIBPortNodeType, mlxIBSwitchInsertion=mlxIBSwitchInsertion, bxEthCntXmitUcastPkts=bxEthCntXmitUcastPkts, cpuUtilHigh=cpuUtilHigh, cntXmitData=cntXmitData, mlxIBPortState=mlxIBPortState, bxIbCntEntry=bxIbCntEntry, mlxIBCAPCISlot=mlxIBCAPCISlot, procCrash=procCrash, subnetMngr=subnetMngr, mlxIBRouterIndex=mlxIBRouterIndex, bxIbCntSpeed=bxIbCntSpeed, bxIbCntWidth=bxIbCntWidth, idleTime=idleTime, mlxIBCAInfoTable=mlxIBCAInfoTable, cntRate=cntRate, bxEthCntRcvPkts=bxEthCntRcvPkts, mlxIBCARemoval=mlxIBCARemoval, procName=procName, smNotifications=smNotifications, bxIbCntVL15Drop=bxIbCntVL15Drop, bxEthCntEntry=bxEthCntEntry, bxEthCntName=bxEthCntName, bxEthCntRcvUcastPkts=bxEthCntRcvUcastPkts, mlxIBCAPartNumber=mlxIBCAPartNumber, mlxIBCASystemImageGUID=mlxIBCASystemImageGUID, procIndex=procIndex, cntXmitDiscard=cntXmitDiscard, bxIbCntRcvData=bxIbCntRcvData, mlxIBPortInfoGroup=mlxIBPortInfoGroup, mlxIBCANodeGUID=mlxIBCANodeGUID, bxInvPartNum=bxInvPartNum, procStatus=procStatus, bxFcCntRcvLong=bxFcCntRcvLong, invHealthStatus=invHealthStatus, bxIbPorts=bxIbPorts, bxFcCntSpeed=bxFcCntSpeed, bxEthCntRcvJumboPkts=bxEthCntRcvJumboPkts, procmgr=procmgr, userTime=userTime, mlxIBSwitchIndex=mlxIBSwitchIndex, bxFcCntXmitLinkReset=bxFcCntXmitLinkReset, invTable=invTable, bxEthCntXmitJumboPkts=bxEthCntXmitJumboPkts, mlxIBSwitchInfoTable=mlxIBSwitchInfoTable, fsSpaceTotal=fsSpaceTotal, cntSupportedSpeeds=cntSupportedSpeeds, bxFcCntWWPN=bxFcCntWWPN, mlxIBSwitchInfoEntry=mlxIBSwitchInfoEntry, bxIbCntSupportedSpeeds=bxIbCntSupportedSpeeds, serialNumber=serialNumber, bxIbCntXmitData=bxIbCntXmitData, ibSMdown=ibSMdown, mlxIBRouterInsertion=mlxIBRouterInsertion, bxFcCntRcvErr=bxFcCntRcvErr, bxInvEntry=bxInvEntry, cntVL15Drop=cntVL15Drop, mlxIBCASerialNumber=mlxIBCASerialNumber, mlxIBSwitchInfoTableNumSwitches=mlxIBSwitchInfoTableNumSwitches, bxEthCntRcvBcastPkts=bxEthCntRcvBcastPkts, gmSystem=gmSystem, cntXmitPkts=cntXmitPkts, mlxIBPortInfoEntry=mlxIBPortInfoEntry, ibNotifications=ibNotifications, mlxIBRouterInfoGroup=mlxIBRouterInfoGroup, nodeName=nodeName, bxIbCntVLCapabilities=bxIbCntVLCapabilities, mlxIBPortStateChange=mlxIBPortStateChange, cpuIndex=cpuIndex, insufficientFansRecover=insufficientFansRecover, mlxIBCANumPorts=mlxIBCANumPorts, bxFcCntRcvRemainCredits=bxFcCntRcvRemainCredits, bxEthCntRcvNoBuffer=bxEthCntRcvNoBuffer, mlxIBPortPhysicalState=mlxIBPortPhysicalState, buildInfo=buildInfo, bxFcCntStatus=bxFcCntStatus, lowPower=lowPower, internalBusError=internalBusError, bxFcCntXmitRemainCredits=bxFcCntXmitRemainCredits, mlxIBCAPCIPhysicalSlot=mlxIBCAPCIPhysicalSlot, asicChipDown=asicChipDown, ibVariables=ibVariables, bxEthCntAdminMode=bxEthCntAdminMode, mellanoxProducts=mellanoxProducts, invFirmware=invFirmware, insufficientFans=insufficientFans, mlxIBPortInfoTableNumPorts=mlxIBPortInfoTableNumPorts, bxIbCntIndex=bxIbCntIndex, cpuEntry=cpuEntry, fsSpaceUsed=fsSpaceUsed, bxIbCntLID=bxIbCntLID, bxFcCntEntry=bxFcCntEntry, cntSymErr=cntSymErr, mlxIBCAInfoTableNumCAs=mlxIBCAInfoTableNumCAs, bxEthCntSpeed=bxEthCntSpeed, invEntry=invEntry, bxFcCntRcvUnknown=bxFcCntRcvUnknown, mlxIBCAPCIFunction=mlxIBCAPCIFunction, bxIbCntLogState=bxIbCntLogState, invName=invName, mellanoxMgmt=mellanoxMgmt, bxBridge=bxBridge, mlxIBCAInfoEntry=mlxIBCAInfoEntry, bxIbCntSupportedWidths=bxIbCntSupportedWidths, cntTable=cntTable, type=type, ibSMrestart=ibSMrestart, ibSMup=ibSMup, mlxIBNotifications=mlxIBNotifications, procTable=procTable, fsSpaceFree=fsSpaceFree, ibSwitch=ibSwitch, cntMTU=cntMTU, swVersion=swVersion, fsSpaceAvail=fsSpaceAvail, bxIbCntPhyState=bxIbCntPhyState, bxInvSerialNum=bxInvSerialNum, bxFcCntRcvCreditsAlloc=bxFcCntRcvCreditsAlloc, cntSupportedWidths=cntSupportedWidths, cntIndex=cntIndex, gmVariables=gmVariables, mlxIBPortIndex=mlxIBPortIndex, mlxIBPortGUID=mlxIBPortGUID, bxFcCntRcvData=bxFcCntRcvData, cntOperationalVLs=cntOperationalVLs, bxFcCntRcvNonOperational=bxFcCntRcvNonOperational, bxFcCntXmitErr=bxFcCntXmitErr, mlxIBRouterRemoval=mlxIBRouterRemoval, systemTime=systemTime, mlxIBPortLocalPortNumber=mlxIBPortLocalPortNumber, cntXmitWait=cntXmitWait, bxEthCntStatus=bxEthCntStatus, gmNotifications=gmNotifications, cntWidth=cntWidth, bxEthCntXmitErr=bxEthCntXmitErr, bxFcCntFCID=bxFcCntFCID, bxEthCntXmitData=bxEthCntXmitData, mlxIBCAHealthStatus=mlxIBCAHealthStatus, bxInvFirmware=bxInvFirmware, bxIbCntTable=bxIbCntTable, mlxIBCAHealthStatusChange=mlxIBCAHealthStatusChange, bxIbCntPort=bxIbCntPort, asicOverTemp=asicOverTemp, mlxIBCAPCIDomain=mlxIBCAPCIDomain, procUnexpectedExit=procUnexpectedExit, smVariables=smVariables, lowPowerRecover=lowPowerRecover, bxEthCntXmitBcastPkts=bxEthCntXmitBcastPkts, bxIbCntXmitWaits=bxIbCntXmitWaits, bxFcCntTable=bxFcCntTable, bxFcCntAdminMode=bxFcCntAdminMode, bxAsicOverTempReset=bxAsicOverTempReset, cntLogState=cntLogState, bxIbCntMTU=bxIbCntMTU, bxEthCntRcvMcatsPkts=bxEthCntRcvMcatsPkts, bxEthCntRcvCRC=bxEthCntRcvCRC, fsTable=fsTable, bxIbCntSymErr=bxIbCntSymErr, invIndex=invIndex, bxEthCntDuplex=bxEthCntDuplex, bxFcCntName=bxFcCntName, mlxIBCAType=mlxIBCAType, bxIbCntXmitPkts=bxIbCntXmitPkts, bxInvName=bxInvName, mlxIBPortRemoval=mlxIBPortRemoval, bxIbCntRate=bxIbCntRate, mlxIBRouterInfoEntry=mlxIBRouterInfoEntry, bxFcPorts=bxFcPorts, generalMgmt=generalMgmt, cntEntry=cntEntry, unexpectedShutdown=unexpectedShutdown, bxFcCntRcvShort=bxFcCntRcvShort, bxInvType=bxInvType, bxFcCntXmitOffline=bxFcCntXmitOffline, bxIbCntGUID=bxIbCntGUID, cntPhyState=cntPhyState, bxEthCntXmitPkts=bxEthCntXmitPkts, procNumFailures=procNumFailures, bxIbCntName=bxIbCntName, bxEthCntXmitMcastPkts=bxEthCntXmitMcastPkts, bxInvTable=bxInvTable, bxFcCntRcvPkts=bxFcCntRcvPkts, bxFcCntRcvDiscards=bxFcCntRcvDiscards, bxEthCntSupportedSpeeds=bxEthCntSupportedSpeeds, bxFcCntRcvOffline=bxFcCntRcvOffline, bxEthCntFlowcontrolStatus=bxEthCntFlowcontrolStatus, bxFcCntXmitData=bxFcCntXmitData, fsMountPoint=fsMountPoint, bxAsicOverTemp=bxAsicOverTemp, IbGuid=IbGuid, cntSpeed=cntSpeed, bxInvIndex=bxInvIndex, bxIbCntXmitDiscards=bxIbCntXmitDiscards, bxEthCntFlowcontrolPriorities=bxEthCntFlowcontrolPriorities, mlxIBCAInfoGroup=mlxIBCAInfoGroup, bxEthCntTable=bxEthCntTable, bxIbCntOperationalVLs=bxIbCntOperationalVLs, bxEthPorts=bxEthPorts, cntRcvData=cntRcvData, mlxIBPortInfoTable=mlxIBPortInfoTable, mlxIBObjects=mlxIBObjects, diskSpaceLow=diskSpaceLow, procEntry=procEntry, mlxIBSwitchRemoval=mlxIBSwitchRemoval, bxEthCntRcvRunt=bxEthCntRcvRunt, cntRcvErr=cntRcvErr, mlxIBCAPCIBus=mlxIBCAPCIBus, cntPort=cntPort, bxFcCntXmitNonOperational=bxFcCntXmitNonOperational, bxInventory=bxInventory, bxVariables=bxVariables, cntMaxSupportedMTUs=cntMaxSupportedMTUs, fsIndex=fsIndex, mlxIBRouterInfoTable=mlxIBRouterInfoTable)
mibBuilder.exportSymbols("MELLANOX-MIB", bxEthCntMTU=bxEthCntMTU, mlxIBCAFirmwareVersion=mlxIBCAFirmwareVersion, mlxIBSwitchInfoGroup=mlxIBSwitchInfoGroup, bxFcCntSupportedSpeeds=bxFcCntSupportedSpeeds, bxEthCntRcvErr=bxEthCntRcvErr, bxEthCntFlowcontrolMode=bxEthCntFlowcontrolMode, mlxIBPortInsertion=mlxIBPortInsertion)
