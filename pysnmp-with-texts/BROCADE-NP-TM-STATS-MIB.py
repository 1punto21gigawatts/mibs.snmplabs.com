#
# PySNMP MIB module BROCADE-NP-TM-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BROCADE-NP-TM-STATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:41:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
platform, = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "platform")
PortPriorityTC, = mibBuilder.importSymbols("FOUNDRY-SN-SWITCH-GROUP-MIB", "PortPriorityTC")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressPrefixLength, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, Counter64, ObjectIdentity, NotificationType, Gauge32, IpAddress, iso, Unsigned32, ModuleIdentity, Counter32, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "Counter64", "ObjectIdentity", "NotificationType", "Gauge32", "IpAddress", "iso", "Unsigned32", "ModuleIdentity", "Counter32", "MibIdentifier", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
brocadeNPTMStatsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2))
brocadeNPTMStatsMIB.setRevisions(('2013-04-25 00:00', '2013-02-22 00:00', '2013-02-11 00:00', '2012-07-04 00:00', '2012-05-18 00:00', '2012-04-25 00:00', '2011-11-18 00:00', '2011-09-28 00:00', '2010-09-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: brocadeNPTMStatsMIB.setRevisionsDescriptions(('Added table brcdNPCSRAMErrorTable, brcdNPLPMRAMErrorTable, notification brcdNPCSRAMErrorThresholdExceeded, and notification brcdNPLPMRAMErrorThresholdExceeded for CER/CES Data Integrity Protection Phase-2', 'Added the following new NP error traps: brcdNPMemoryParityErrorTrap brcdNPMemoryMiscErrorTrap brcdNPBuffOverFlowErrorTrap brcdNPBuffUnderFlowErrorTrap brcdNPECCSingleErrorTrap brcdNPECCMultipleErrorTrap', 'Added a new table brcdNPDebugStatTable ', 'Changes in this revision: - Added a new table brcdTMCpuAggrQStatsTable ', 'Added brcdNPIndex and brcdNPLockupRecoveryCount.', 'Added table brcdNPBufferErrorTable, notification snTrapNPIngressBufferErrorThresholdExceeded, and notification snTrapNPEgressBufferErrorThresholdExceeded for CER/CES Data Integrity Protection.', 'Changes in this revision: - Updated below mib table descriptions with LAG interface support: brcdNPQosStatTable brcdTMDestUcastQStatTable ', 'Changes in this revision: - Added below new tables brcdNPQosStatTable brcdTMDestUcastQStatTable ', 'Initial revision',))
if mibBuilder.loadTexts: brocadeNPTMStatsMIB.setLastUpdated('201304250000Z')
if mibBuilder.loadTexts: brocadeNPTMStatsMIB.setOrganization('Brocade Communications Systems, Inc.')
if mibBuilder.loadTexts: brocadeNPTMStatsMIB.setContactInfo('Technical Support Center 130 Holger Way, San Jose, CA 95134 Email: ipsupport@brocade.com Phone: 1-800-752-8061 URL: www.brocade.com')
if mibBuilder.loadTexts: brocadeNPTMStatsMIB.setDescription("The MIB module to describe Network Processor (NP) and Traffic Manager(TM) related statistics information. Supported Platforms: - supported on NI XMR/MLX platforms. Copyright 1996-2010 Brocade Communications Systems, Inc. All rights reserved. This Brocade Communications Systems SNMP Management Information Base Specification embodies Brocade Communications Systems' confidential and proprietary intellectual property. Brocade Communications Systems retains all title and ownership in the Specification, including any revisions. This Specification is supplied AS IS, and Brocade Communications Systems makes no warranty, either express or implied, as to the use, operation, condition, or performance of the specification, and any unintended consequence it may on the user environment.")
brcdNPTMMIBNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 0))
brcdNPTMMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1))
brcdNPStatisticsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1))
brcdTMStatisticsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2))
brcdNPGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 3))
brcdNPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1), )
if mibBuilder.loadTexts: brcdNPStatsTable.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsTable.setDescription('A list of brcdNPStats entries. This table contains information of various Network Processor(NP) counters supported by this system.')
brcdNPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1), ).setIndexNames((0, "BROCADE-NP-TM-STATS-MIB", "brcdNPStatsIfIndex"))
if mibBuilder.loadTexts: brcdNPStatsEntry.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsEntry.setDescription('An entry containing NP counter information applicable for a particular interface if the module is physically present.')
brcdNPStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: brcdNPStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsIfIndex.setDescription('Interface index as equivalent to ifIndex in MIB II. This is applicable only for the interfaces that are physically present and operationally up. ')
brcdNPStatsRxRawGoodPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxRawGoodPkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxRawGoodPkts.setDescription('Counter for good packets received from MAC. In equation, Rx Raw Good Packets = Rx Unicast Packets + Rx Multicast Packets + Rx Broadcast Packets = Rx IPv4 Packets + Rx IPv6 Packets + Rx Other Packets = Rx Forward Packets + Rx Discard Packets')
brcdNPStatsRxForwardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxForwardPkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxForwardPkts.setDescription(' Counter for forwarded packets by packet evaluation engine in the Ingress. In equation, Rx Forward Packets = Rx Sent to TM Packets + Rx RL drop packets .')
brcdNPStatsRxDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxDiscardPkts.setDescription('Counter for packets flagged for discard by packet evaluation engine. In equation, Rx Discard Packets = ACL drop + TTL drop + route-only drop + RPF drop + tag mismatch drop + VLAN blocking drop + segment filtering drop + drop by packet evaluation decisions + miscellaneous.')
brcdNPStatsRxMiscPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxMiscPkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxMiscPkts.setDescription('Counter for Miscellaneous Packets Received.')
brcdNPStatsRxUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxUnicastPkts.setDescription('Counter for unicast packets received.')
brcdNPStatsRxBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxBroadcastPkts.setDescription('Counter for broadcast packets received')
brcdNPStatsRxMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxMulticastPkts.setDescription('Counter for multicast packets received.')
brcdNPStatsRxSendToTMPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxSendToTMPkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxSendToTMPkts.setDescription('Counter for packets sent to TM. This value should be equal to difference of Rx forward packets and RL drops.')
brcdNPStatsRxBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxBadPkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxBadPkts.setDescription('Counter for bad packets in the receiver side. They represent the packets that have MAC to NP interface errors.')
brcdNPStatsRxLookupUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxLookupUnavailable.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxLookupUnavailable.setDescription('Number of packets that have been dropped due to unavailability of the CAM interface for packet lookups.')
brcdNPStatsRxACLDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxACLDrop.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxACLDrop.setDescription('Drop counter for ACL drop on the ingress path.')
brcdNPStatsRxPriority0And1Drop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxPriority0And1Drop.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxPriority0And1Drop.setDescription('Counter for packets dropped based on Priority 0,1 in the Ingress.')
brcdNPStatsRxPriority2And3Drop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxPriority2And3Drop.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxPriority2And3Drop.setDescription('Counter for packets dropped based on Priority 2,3 in the Ingress.')
brcdNPStatsRxPriority4And5Drop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxPriority4And5Drop.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxPriority4And5Drop.setDescription('Counter for packets dropped based on Priority 4,5 in the Ingress.')
brcdNPStatsRxPriority6And7Drop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxPriority6And7Drop.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxPriority6And7Drop.setDescription('Counter for packets dropped based on Priority 6,7 in the Ingress.')
brcdNPStatsRxSuppressRPFDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxSuppressRPFDrop.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxSuppressRPFDrop.setDescription('Counter for suppressed RPF drops on the ingress path due to ACL override.')
brcdNPStatsRxRPFDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxRPFDrop.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxRPFDrop.setDescription('Counter for RPF drop in the ingress.')
brcdNPStatsRxIPv4Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxIPv4Pkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxIPv4Pkts.setDescription('Raw packet count that have IPv4 Etype (0x0800) and IP version of 0x4.')
brcdNPStatsRxIPv6Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxIPv6Pkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxIPv6Pkts.setDescription('Raw packet count that have IPv6 Etype (0x86DD) and IP version of 0x6.')
brcdNPStatsRxRouteOnlyDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxRouteOnlyDrop.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxRouteOnlyDrop.setDescription('Counts packets that have been dropped due to Route-Only configuration during MAC-DA processing. ')
brcdNPStatsRxIPv6SuppressRPFDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxIPv6SuppressRPFDrop.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxIPv6SuppressRPFDrop.setDescription('Counter for IPv6 suppressed RFP drops on the ingress path due to ACL override.')
brcdNPStatsRxIPv6RPFDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxIPv6RPFDropCount.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxIPv6RPFDropCount.setDescription('Counter for IPv6 drop on the ingress.')
brcdNPStatsRxIPv4Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxIPv4Bytes.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxIPv4Bytes.setDescription('Raw packet Bytes (+FCS) that have IPv4 Etype (0x0800) and IP version equals 0x4. ')
brcdNPStatsRxIPv6Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxIPv6Bytes.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxIPv6Bytes.setDescription('Raw packet Bytes (+FCS) that have IPv6 Etype (0x86DD) and IP version equals 0x6. ')
brcdNPStatsRxPOSCtrlProtocolPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxPOSCtrlProtocolPkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxPOSCtrlProtocolPkts.setDescription('Number of control protocol packets received in POS mode. The object is supported only on POS interfaces. 0 is returned for others.')
brcdNPStatsRxPOSLinkDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxPOSLinkDrop.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxPOSLinkDrop.setDescription('Number of packets dropped due to link state in POS mode. The object is supported only on POS interfaces. 0 is returned for others. ')
brcdNPStatsRxRoutedPktsDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsRxRoutedPktsDrop.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsRxRoutedPktsDrop.setDescription('Number of received IPv4 or IPv6 routed packets that are dropped because the TTL is 0, or because routing is not enabled on the given virtual interface. ')
brcdNPStatsTxSentToMACPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsTxSentToMACPkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsTxSentToMACPkts.setDescription('Total number of packets sent to MAC for transmit.In equation, Tx Sent to MAC = Tx IPv4 Packets + Tx IPv6 Packets + Tx Others = Tx Raw Good Packets - Tx Source Port Suppression Drop - Tx ACL drop - Tx RL Drop - Tx Multicast TTL drop.')
brcdNPStatsTxRawGoodPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsTxRawGoodPkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsTxRawGoodPkts.setDescription('Total number of packets sent to egress processing logic that pass the initial length checks (min, max, offsets, bad packet etc.)In equation, Tx Raw Good Packets = Tx Receive From TM Packets - Tx Bad Packets = Tx Unicast Packets + Tx Broadcast Packets + Tx Multicast Packets + Tx Source Port Suppression Drop. ')
brcdNPStatsTxSrcPortSupressDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsTxSrcPortSupressDrop.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsTxSrcPortSupressDrop.setDescription('Number of packets dropped because of transmit source port suppression.')
brcdNPStatsTxBadPktsCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsTxBadPktsCnt.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsTxBadPktsCnt.setDescription('Total number of packets dropped in egress logic that fail the initial length checks (min, max, bad packet etc.).')
brcdNPStatsTxUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsTxUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsTxUnicastPkts.setDescription('Counter for unicast packets transmitted.')
brcdNPStatsTxBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsTxBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsTxBroadcastPkts.setDescription('Counter for broadcast packets transmitted.')
brcdNPStatsTxMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsTxMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsTxMulticastPkts.setDescription('Counter for multicast packets transmitted.')
brcdNPStatsTxReceiveFromTM = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsTxReceiveFromTM.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsTxReceiveFromTM.setDescription('Counter for packets received from TM.')
brcdNPStatsTxACLDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsTxACLDrop.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsTxACLDrop.setDescription('Number of packets that have been dropped by the outbound ACL logic.')
brcdNPStatsTxPFCMulticastDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsTxPFCMulticastDrop.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsTxPFCMulticastDrop.setDescription("Number of multicast FID packets that have been dropped by egress logic that map to the egress queue which is in paused state. Supported only on 'NI-MLX-10Gx8-D 8-port 10GbE Module', 'NI-MLX-10Gx8-M 8-port 10GbE (M) Module', 'NI-MLX-10Gx8-X 8-port 10GbE (X) Module', 'BR-MLX-40Gx4-M 4-port 40GbE Module', 'BR-MLX-10Gx20 20-port 1/10GbE Module', 'BR-MLX-100Gx2-CFP2 2-port 100GbE Module' and 'BR-MLX-10Gx4-M-IPSEC 4-port 10GbE Module'. 0 is returned for the rest of the cards.")
brcdNPStatsTxPFCMTUExceedDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsTxPFCMTUExceedDrop.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsTxPFCMTUExceedDrop.setDescription("Number of packets that have been dropped by egress logic that exceeds the MTU of the egress queue (they map to). Supported only on 'NI-MLX-10Gx8-D 8-port 10GbE Module', 'NI-MLX-10Gx8-M 8-port 10GbE (M) Module', 'NI-MLX-10Gx8-X 8-port 10GbE (X) Module', 'BR-MLX-40Gx4-M 4-port 40GbE Module', 'BR-MLX-10Gx20 20-port 1/10GbE Module', 'BR-MLX-100Gx2-CFP2 2-port 100GbE Module' and 'BR-MLX-10Gx4-M-IPSEC 4-port 10GbE Module'. 0 is returned for the rest of the cards.")
brcdNPStatsTxPFCQMAPErrorDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsTxPFCQMAPErrorDrop.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsTxPFCQMAPErrorDrop.setDescription("Number of packets that have been dropped by egress logic that does not map to any valid egress queue. This object is Supported only on 'NI-MLX-10Gx8-D 8-port 10GbE Module', 'NI-MLX-10Gx8-M 8-port 10GbE (M) Module', 'NI-MLX-10Gx8-X 8-port 10GbE (X) Module', 'BR-MLX-40Gx4-M 4-port 40GbE Module', 'BR-MLX-10Gx20 20-port 1/10GbE Module', 'BR-MLX-100Gx2-CFP2 2-port 100GbE Module' and 'BR-MLX-10Gx4-M-IPSEC 4-port 10GbE Module'. 0 is returned for the rest of the cards.")
brcdNPStatsTxIPv4Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsTxIPv4Pkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsTxIPv4Pkts.setDescription('Number of IPv4 packets transmitted out the port that have Etype 0x0800 and IPver version equals 0x4)')
brcdNPStatsTxIPv6Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsTxIPv6Pkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsTxIPv6Pkts.setDescription('Number of IPv6 packets transmitted out the port that have Etype 0x86DD and IPver version equals 0x6.')
brcdNPStatsTxIPv4Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsTxIPv4Bytes.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsTxIPv4Bytes.setDescription('Counts packet Bytes (+FCS) that have IPv4 Etype (0x0800) and IP version equals 0x4')
brcdNPStatsTxIPv6Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsTxIPv6Bytes.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsTxIPv6Bytes.setDescription('Counts packet Bytes (+FCS) that have IPv6 Etype (0x86DD) and IP version equals 0x6')
brcdNPStatsTxPOSCtrlProtocolPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsTxPOSCtrlProtocolPkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsTxPOSCtrlProtocolPkts.setDescription('Number of control protocol packets sent in POS mode. The object is supported only for POS interfaces. For others it returns 0.')
brcdNPStatsTxPOSLinkDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 1, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPStatsTxPOSLinkDrop.setStatus('current')
if mibBuilder.loadTexts: brcdNPStatsTxPOSLinkDrop.setDescription('Number of packets dropped due to link state in POS mode. The object is supported only for POS interfaces. For others it returns 0.')
brcdNPBufferErrorTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 3), )
if mibBuilder.loadTexts: brcdNPBufferErrorTable.setStatus('current')
if mibBuilder.loadTexts: brcdNPBufferErrorTable.setDescription('A list of brcdNPBufferError entries. This table contains information of various Network Processor(NP) error event counters supported by this system. The objects in this table are refreshed every second, based on request. This table is only supported on CES/CER.')
brcdNPBufferErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 3, 1), ).setIndexNames((0, "BROCADE-NP-TM-STATS-MIB", "brcdNPBufferErrorSlotId"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdNPBufferErrorDeviceId"))
if mibBuilder.loadTexts: brcdNPBufferErrorEntry.setStatus('current')
if mibBuilder.loadTexts: brcdNPBufferErrorEntry.setDescription('An entry containing buffer error event counter information applicable for a set of interfaces managed by a NP.')
brcdNPBufferErrorSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: brcdNPBufferErrorSlotId.setStatus('current')
if mibBuilder.loadTexts: brcdNPBufferErrorSlotId.setDescription('Slot ID of the module, which uniquely identifies it. The module must be physically present and operationally up. This is 1-based index.')
brcdNPBufferErrorDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: brcdNPBufferErrorDeviceId.setStatus('current')
if mibBuilder.loadTexts: brcdNPBufferErrorDeviceId.setDescription('The NP device ID, a number which uniquely identifies the network processor within a module in the system. This is 1-based index.')
brcdNPBufferErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPBufferErrorDescription.setStatus('current')
if mibBuilder.loadTexts: brcdNPBufferErrorDescription.setDescription('This object gives the range of ports serviced by the NP identified by brcdNPBufferErrorSlotId and brcdNPBufferDeviceId.')
brcdNPBufferErrorIngressCurrentEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPBufferErrorIngressCurrentEvents.setStatus('current')
if mibBuilder.loadTexts: brcdNPBufferErrorIngressCurrentEvents.setDescription('Counter for NP Ingress buffer error events recorded within a window.')
brcdNPBufferErrorIngressCumulativeEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPBufferErrorIngressCumulativeEvents.setStatus('current')
if mibBuilder.loadTexts: brcdNPBufferErrorIngressCumulativeEvents.setDescription('Counter for NP Ingress total buffer error events recorded.')
brcdNPBufferErrorEgressCurrentEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPBufferErrorEgressCurrentEvents.setStatus('current')
if mibBuilder.loadTexts: brcdNPBufferErrorEgressCurrentEvents.setDescription('Counter for NP Egress buffer error events recorded within a window.')
brcdNPBufferErrorEgressCumulativeEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPBufferErrorEgressCumulativeEvents.setStatus('current')
if mibBuilder.loadTexts: brcdNPBufferErrorEgressCumulativeEvents.setDescription('Counter for NP Egress total buffer error events recorded')
brcdNPCSRAMErrorTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 4), )
if mibBuilder.loadTexts: brcdNPCSRAMErrorTable.setStatus('current')
if mibBuilder.loadTexts: brcdNPCSRAMErrorTable.setDescription('A list of brcdNPCSRAMError entries. This table contains information of various Network Processor(NP) CSRAM error event counters supported by this system. The objects in this table are refreshed every second, based on request. This table is only supported on CES and CER.')
brcdNPCSRAMErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 4, 1), ).setIndexNames((0, "BROCADE-NP-TM-STATS-MIB", "brcdNPCSRAMErrorSlotId"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdNPCSRAMErrorDeviceId"))
if mibBuilder.loadTexts: brcdNPCSRAMErrorEntry.setStatus('current')
if mibBuilder.loadTexts: brcdNPCSRAMErrorEntry.setDescription('An entry containing CSRAM error event counter information applicable for a set of interfaces managed by a NP.')
brcdNPCSRAMErrorSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: brcdNPCSRAMErrorSlotId.setStatus('current')
if mibBuilder.loadTexts: brcdNPCSRAMErrorSlotId.setDescription('Slot-id of the module which uniquely identifies it in the system. The module should be physically present and should be UP. This is a 1-based index.')
brcdNPCSRAMErrorDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: brcdNPCSRAMErrorDeviceId.setStatus('current')
if mibBuilder.loadTexts: brcdNPCSRAMErrorDeviceId.setDescription('The NP device-id, a number which uniquely identifies the network processor within a module in the system. This is a 1-based index.')
brcdNPCSRAMErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPCSRAMErrorDescription.setStatus('current')
if mibBuilder.loadTexts: brcdNPCSRAMErrorDescription.setDescription('This object gives the range of ports serviced by the NP identified by brcdNPCSRAMErrorSlotId and brcdNPCSRAMErrorDeviceId.')
brcdNPCSRAMErrorCurrentEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPCSRAMErrorCurrentEvents.setStatus('current')
if mibBuilder.loadTexts: brcdNPCSRAMErrorCurrentEvents.setDescription('Counter for NP CSRAM errors recorded within a configured window.')
brcdNPCSRAMErrorCumulativeEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPCSRAMErrorCumulativeEvents.setStatus('current')
if mibBuilder.loadTexts: brcdNPCSRAMErrorCumulativeEvents.setDescription('Counter for total NP CSRAM errors recorded.')
brcdNPLPMRAMErrorTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 5), )
if mibBuilder.loadTexts: brcdNPLPMRAMErrorTable.setStatus('current')
if mibBuilder.loadTexts: brcdNPLPMRAMErrorTable.setDescription('A list of brcdNPLPMRAMError entries. This table contains information of various LPM RAM error event counters supported by the Network processor in this system. The objects in this table are refreshed every second, based on request. This table is only supported on CES and CER.')
brcdNPLPMRAMErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 5, 1), ).setIndexNames((0, "BROCADE-NP-TM-STATS-MIB", "brcdNPLPMRAMErrorIndex"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdNPLPMRAMErrorSlotId"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdNPLPMRAMErrorDeviceId"))
if mibBuilder.loadTexts: brcdNPLPMRAMErrorEntry.setStatus('current')
if mibBuilder.loadTexts: brcdNPLPMRAMErrorEntry.setDescription('An entry containing LPMRAM error event counter information applicable for a set of interfaces managed by a NP.')
brcdNPLPMRAMErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: brcdNPLPMRAMErrorIndex.setStatus('current')
if mibBuilder.loadTexts: brcdNPLPMRAMErrorIndex.setDescription('This object uniquely identifies a LPM within a network processor. CER devices use LPM-0, LPM-1 and LPM-2 memories, whereas CES devices use LPM-3 memory only. This is a 1-based index. Therefore, index value of 1 maps to LPM0, 2 maps to LPM1 and so on.')
brcdNPLPMRAMErrorSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: brcdNPLPMRAMErrorSlotId.setStatus('current')
if mibBuilder.loadTexts: brcdNPLPMRAMErrorSlotId.setDescription('Slot-id of the module which uniquely identifies it in the system. The module should be physically present and should be UP. This is a 1-based index.')
brcdNPLPMRAMErrorDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 5, 1, 3), Unsigned32())
if mibBuilder.loadTexts: brcdNPLPMRAMErrorDeviceId.setStatus('current')
if mibBuilder.loadTexts: brcdNPLPMRAMErrorDeviceId.setDescription('The NP device-id, a number which uniquely identifies the network processor within a module in the system. This is a 1-based index.')
brcdNPLPMRAMErrorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPLPMRAMErrorName.setStatus('current')
if mibBuilder.loadTexts: brcdNPLPMRAMErrorName.setDescription('This object gives a string representing the LPM identified by brcdNPLPMRAMErrorIndex.')
brcdNPLPMRAMErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPLPMRAMErrorDescription.setStatus('current')
if mibBuilder.loadTexts: brcdNPLPMRAMErrorDescription.setDescription('This object gives the range of ports serviced by the NP identified by brcdNPLPMRAMErrorSlotId and brcdNPLPMRAMErrorDeviceId.')
brcdNPLPMRAMErrorCurrentEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPLPMRAMErrorCurrentEvents.setStatus('current')
if mibBuilder.loadTexts: brcdNPLPMRAMErrorCurrentEvents.setDescription('Counter for the error events recorded within a configured window in the LPM identified by brcdNPLPMRAMErrorIndex, brcdNPLPMRAMErrorSlotId and brcdNPLPMRAMErrorDeviceId.')
brcdNPLPMRAMErrorCumulativeEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPLPMRAMErrorCumulativeEvents.setStatus('current')
if mibBuilder.loadTexts: brcdNPLPMRAMErrorCumulativeEvents.setDescription('Counter for the error events recorded within a configured window in the LPM identified by brcdNPLPMRAMErrorIndex, brcdNPLPMRAMErrorSlotId and brcdNPLPMRAMErrorDeviceId.')
brcdNPQosStatTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 2), )
if mibBuilder.loadTexts: brcdNPQosStatTable.setStatus('current')
if mibBuilder.loadTexts: brcdNPQosStatTable.setDescription('This table contains information of Qos counters for the specific interface per Qos priority. Please refer to the MIB reference guide for pre-requisites of this table.')
brcdNPQosStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 2, 1), ).setIndexNames((0, "BROCADE-NP-TM-STATS-MIB", "brcdNPQosStatIfIndex"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdNPQosStatQosPriority"))
if mibBuilder.loadTexts: brcdNPQosStatEntry.setStatus('current')
if mibBuilder.loadTexts: brcdNPQosStatEntry.setDescription('An entry containing Qos statistics information applicable for a particular interface. ')
brcdNPQosStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: brcdNPQosStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: brcdNPQosStatIfIndex.setDescription('ifIndex of the interface. All the interfaces of the LP modules that are physically present and operationally up will be included in this table. Starting from NetIron 5.3 release, all deployed LAG interfaces will also be included in this table.')
brcdNPQosStatQosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 2, 1, 2), PortPriorityTC())
if mibBuilder.loadTexts: brcdNPQosStatQosPriority.setStatus('current')
if mibBuilder.loadTexts: brcdNPQosStatQosPriority.setDescription('Qos priority associated with this entry. This is 1-based index. The priority0 maps to 1, priority1 maps to 2 etc. Priority value equal to nonPriority(128) is not applicable to this table.')
brcdNPQosStatIngressPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPQosStatIngressPkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPQosStatIngressPkts.setDescription('The number of packets that have arrived on the specified interface with a DSCP, EXP or PCP value equal to the value of the brcdNPQosStatQosPriority object.')
brcdNPQosStatIngressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPQosStatIngressBytes.setStatus('current')
if mibBuilder.loadTexts: brcdNPQosStatIngressBytes.setDescription('The number of bytes that have arrived on the specified interface with a DSCP, EXP or PCP value in the packet equal to the value of the brcdNPQosStatQosPriority object.')
brcdNPQosStatEgressPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPQosStatEgressPkts.setStatus('current')
if mibBuilder.loadTexts: brcdNPQosStatEgressPkts.setDescription('The number of packets leaving the device on the specified interface with an internal priority value equal to the value of the brcdNPQosStatQosPriority object. The internal priority is configuration dependent but generally is a function of DSCP, EXP or PCP.')
brcdNPQosStatEgressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPQosStatEgressBytes.setStatus('current')
if mibBuilder.loadTexts: brcdNPQosStatEgressBytes.setDescription('The number of bytes leaving the device on the specified interface with an internal priority value equal to the value of the brcdNPQosStatQosPriority object. The internal priority is configuration dependent but generally is a function of DSCP, EXP or PCP.')
brcdNPDebugStatTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6), )
if mibBuilder.loadTexts: brcdNPDebugStatTable.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatTable.setDescription('This table contains the debug statistics of Network Processors in the line cards.')
brcdNPDebugStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1), ).setIndexNames((0, "BROCADE-NP-TM-STATS-MIB", "brcdNPDebugStatSlotId"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdNPDebugStatNPDeviceId"))
if mibBuilder.loadTexts: brcdNPDebugStatEntry.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatEntry.setDescription('An entry containing debug statistics of a Network Processor ')
brcdNPDebugStatSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: brcdNPDebugStatSlotId.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatSlotId.setDescription('Slot ID of the LP module, which uniquely identifies a linecard. The LP module must be physically present and operationally up.')
brcdNPDebugStatNPDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 2), Unsigned32())
if mibBuilder.loadTexts: brcdNPDebugStatNPDeviceId.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatNPDeviceId.setDescription('The NP device ID, a number which uniquely identifies the network processor within a linecard in the system.')
brcdNPDebugStatDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatDescription.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatDescription.setDescription('This object gives the range of ports serviced by the brcdNPDebugStatNPDeviceId.')
brcdNPDebugStatL2SourceAddrLearnDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatL2SourceAddrLearnDrop.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatL2SourceAddrLearnDrop.setDescription('A count of all L2 source address learning drop packets.')
brcdNPDebugStatRateLimitVPLSLocalLearnDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatRateLimitVPLSLocalLearnDrop.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatRateLimitVPLSLocalLearnDrop.setDescription('A count of all rate limit VPLS local learning drop packets.')
brcdNPDebugStatUnkownMPLSDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatUnkownMPLSDrop.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatUnkownMPLSDrop.setDescription('A count of all unknow MPLS drop packets. It includes packets with Unknow Label to CPU (or) MPLS Label TTL <=1 (or) L2VPN Packet but PRAM type not equal to VLL or VPLS (or) MPLS transit label TTL <=1.')
brcdNPDebugStatDestAddrVCMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatDestAddrVCMiss.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatDestAddrVCMiss.setDescription('A count of all destination address VC lookup miss packets.')
brcdNPDebugStatRateLimitVPLSRemoteLearnDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatRateLimitVPLSRemoteLearnDrop.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatRateLimitVPLSRemoteLearnDrop.setDescription('A count of all rate limit VPLS remote learn drop packets.')
brcdNPDebugStatIPv4DestAddrVCMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatIPv4DestAddrVCMiss.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatIPv4DestAddrVCMiss.setDescription('A count of all IPv4 destination address VC lookup miss packets.')
brcdNPDebugStatIPv6DestAddrVCMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatIPv6DestAddrVCMiss.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatIPv6DestAddrVCMiss.setDescription('A count of all IPv6 destination address VC lookup miss packets.')
brcdNPDebugStatVPLSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatVPLSTx.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatVPLSTx.setDescription('A count of all VPLS destination address hit Tx processing packets.')
brcdNPDebugStatVLLTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatVLLTx.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatVLLTx.setDescription('A count of all VLL destination address hit Tx processing packets.')
brcdNPDebugStatUnknowL3VPNIngressDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatUnknowL3VPNIngressDrop.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatUnknowL3VPNIngressDrop.setDescription('A count of all unknown L3 VPN ingress drop packets. It includes outer IP checksum fail (or) TTL=0 (or) routing not enabled packets.')
brcdNPDebugStatIPv6VPNTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatIPv6VPNTx.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatIPv6VPNTx.setDescription('A count of all IPv6 VPN transmit processing packets.')
brcdNPDebugStatIPv4VPNTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatIPv4VPNTx.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatIPv4VPNTx.setDescription('A count of all IPv4 VPN transmit processing packets.')
brcdNPDebugStatGREIPv4RxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatGREIPv4RxCount.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatGREIPv4RxCount.setDescription('A count of all GRE encapsulated IPv4 payload packets proceeded for IP DPA processing.')
brcdNPDebugStatGREInvalidDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatGREInvalidDrop.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatGREInvalidDrop.setDescription('A count of all packets with invalid protocol type in GRE header.')
brcdNPDebugStat6to4RxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStat6to4RxCount.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStat6to4RxCount.setDescription('A count of all valid outer IPv4 header and source ingress check hit packets.')
brcdNPDebugStatGREEnfSourceIngressChkMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatGREEnfSourceIngressChkMiss.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatGREEnfSourceIngressChkMiss.setDescription('A count of all GRE outer IPv4 source ingress check miss packets.')
brcdNPDebugStat6to4EnfSourceIngressChkMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStat6to4EnfSourceIngressChkMiss.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStat6to4EnfSourceIngressChkMiss.setDescription('A count of all outer IPv4 source ingress check miss packets.')
brcdNPDebugStatGREMPLSRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatGREMPLSRxCount.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatGREMPLSRxCount.setDescription('A count of all GRE encapsulated MPLS payload packets proceeded for MPLS receive processing.')
brcdNPDebugStatGREIPv6RxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatGREIPv6RxCount.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatGREIPv6RxCount.setDescription('A count of all GRE encapsulated IPv6 payload packets proceeded for IP DPA processing.')
brcdNPDebugStatPBBRxDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatPBBRxDropCount.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatPBBRxDropCount.setDescription("A count of all PBB Rx drop packets.This counter is valid only for 2*100G, 8*10G, 4*40G, 'BR-MLX-10Gx20 20-port 1/10GbE Module', 'BR-MLX-100Gx2-CFP2 2-port 100GbE Module' and 'BR-MLX-10Gx4-M-IPSEC 4-port 10GbE Module' cards.")
brcdNPDebugStatPBBTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatPBBTxCount.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatPBBTxCount.setDescription("A count of all PBB Tx packets.This counter is valid only for 2*100G, 8*10G, 4*40G, 'BR-MLX-10Gx20 20-port 1/10GbE Module', 'BR-MLX-100Gx2-CFP2 2-port 100GbE Module' and 'BR-MLX-10Gx4-M-IPSEC 4-port 10GbE Module' cards.")
brcdNPDebugStatIPv4DestAddrVCDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatIPv4DestAddrVCDrop.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatIPv4DestAddrVCDrop.setDescription("A count of all IPv4 destination address VC drop packets. This counter is valid only for 2*100G, 8*10G, 4*40G, 'BR-MLX-10Gx20 20-port 1/10GbE Module', 'BR-MLX-100Gx2-CFP2 2-port 100GbE Module' and 'BR-MLX-10Gx4-M-IPSEC 4-port 10GbE Module' cards.")
brcdNPDebugStatIPv6DestAddrVCDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatIPv6DestAddrVCDrop.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatIPv6DestAddrVCDrop.setDescription("A count of all IPv6 destination address VC drop packets. This counter is valid only for 2*100G, 8*10G, 4*40G, 'BR-MLX-10Gx20 20-port 1/10GbE Module', 'BR-MLX-100Gx2-CFP2 2-port 100GbE Module' and 'BR-MLX-10Gx4-M-IPSEC 4-port 10GbE Module' cards.")
brcdNPDebugStatSourceAddrPortVLANMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatSourceAddrPortVLANMiss.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatSourceAddrPortVLANMiss.setDescription('A count of all source address port VLAN miss packets.')
brcdNPDebugStatVPLSSourceAddrPortVLANMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatVPLSSourceAddrPortVLANMiss.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatVPLSSourceAddrPortVLANMiss.setDescription('A count of all VPLS source address port VLAN miss packets.')
brcdNPDebugStatSourceAddrVCMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatSourceAddrVCMiss.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatSourceAddrVCMiss.setDescription('A count of all source address VC miss packets.')
brcdNPDebugStatIPv4HWFwdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatIPv4HWFwdCount.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatIPv4HWFwdCount.setDescription('A count of all valid IPv4 hardware forwarded packets.')
brcdNPDebugStatIPv6HWFwdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatIPv6HWFwdCount.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatIPv6HWFwdCount.setDescription('A count of all valid IPv6 hardware forwarded packets.')
brcdNPDebugStatMulticastRPFDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatMulticastRPFDropCount.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatMulticastRPFDropCount.setDescription('A count of all multicast RPF failed packets.')
brcdNPDebugStatMPLSLsrTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatMPLSLsrTxCount.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatMPLSLsrTxCount.setDescription('A count of valid transit LSR cross-connect packets.')
brcdNPDebugStatGREIPv4TxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatGREIPv4TxCount.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatGREIPv4TxCount.setDescription('A count of valid IPv4 payload with GRE encapsulation.')
brcdNPDebugStat6to4TxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStat6to4TxCount.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStat6to4TxCount.setDescription('A count of all valid 6to4 transmit packets.')
brcdNPDebugStatMPLSRSVPTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatMPLSRSVPTxCount.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatMPLSRSVPTxCount.setDescription('A count of all valid MPLS RSVP transmit packets.')
brcdNPDebugStatGREMPLSTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatGREMPLSTxCount.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatGREMPLSTxCount.setDescription('A count of all valid GRE encapsulated MPLS transmit packets.')
brcdNPDebugStatGREIPv6TxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 1, 6, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdNPDebugStatGREIPv6TxCount.setStatus('current')
if mibBuilder.loadTexts: brcdNPDebugStatGREIPv6TxCount.setDescription('A count of valid IPv6 payload with IPv4 GRE encapsulation.')
brcdTMStatisticsInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 1))
brcdTMPortMappingMaxPorts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMPortMappingMaxPorts.setStatus('current')
if mibBuilder.loadTexts: brcdTMPortMappingMaxPorts.setDescription('The maximum ports that can be supported by the TM on this system')
brcdTMPortMappingUsedPorts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMPortMappingUsedPorts.setStatus('current')
if mibBuilder.loadTexts: brcdTMPortMappingUsedPorts.setDescription('The currently used ports on this system')
brcdTMPortMappingAvailablePorts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMPortMappingAvailablePorts.setStatus('current')
if mibBuilder.loadTexts: brcdTMPortMappingAvailablePorts.setDescription('The available ports on this system')
brcdTMStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 2), )
if mibBuilder.loadTexts: brcdTMStatsTable.setStatus('current')
if mibBuilder.loadTexts: brcdTMStatsTable.setDescription('A list of brcdTMStats entries. This table contains information of various Traffic Manager(TM) counters supported by this system.')
brcdTMStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 2, 1), ).setIndexNames((0, "BROCADE-NP-TM-STATS-MIB", "brcdTMStatsSlotId"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdTMStatsTMDeviceId"))
if mibBuilder.loadTexts: brcdTMStatsEntry.setStatus('current')
if mibBuilder.loadTexts: brcdTMStatsEntry.setDescription('An entry containing TM counter information.')
brcdTMStatsSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: brcdTMStatsSlotId.setStatus('current')
if mibBuilder.loadTexts: brcdTMStatsSlotId.setDescription('Slot ID of the LP module, which uniquely identifies a linecard. The LP module must be physically present and operationally up.')
brcdTMStatsTMDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: brcdTMStatsTMDeviceId.setStatus('current')
if mibBuilder.loadTexts: brcdTMStatsTMDeviceId.setDescription('The TM device ID, a number which uniquely identifies the network processor TM within a linecard in the system.')
brcdTMStatsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMStatsDescription.setStatus('current')
if mibBuilder.loadTexts: brcdTMStatsDescription.setDescription('This object gives the range of ports serviced by the brcdTMStatsTMDeviceId.')
brcdTMStatsTotalIngressPktsCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMStatsTotalIngressPktsCnt.setStatus('current')
if mibBuilder.loadTexts: brcdTMStatsTotalIngressPktsCnt.setDescription('A count of all packets entering into this traffic manager.')
brcdTMStatsIngressEnqueuePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMStatsIngressEnqueuePkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMStatsIngressEnqueuePkts.setDescription('A count of all packets entering ingress queues on this traffic manager.')
brcdTMStatsEgressEnqueuePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMStatsEgressEnqueuePkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMStatsEgressEnqueuePkts.setDescription('A count of all packets entering egress queues and forwarded out on this traffic manager.')
brcdTMStatsIngressEnqueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMStatsIngressEnqueueBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMStatsIngressEnqueueBytes.setDescription("A count of all bytes entering ingress queues on this traffic manager. This counter is not supported on 'NI-MLX-10Gx8-D 8-port 10GbE (D) Module', 'NI-MLX-10Gx8-M 8-port 10GbE (M) Module', 'NI-MLX-10Gx8-X 8-port 10GbE (X) Module', 'BR-MLX-10Gx24-DM 24 -port-10GbE Module', 'BR-MLX-40Gx4-M 4-port 40GbE Module', 'BR-MLX-10Gx20 20-port 1/10GbE Module', 'BR-MLX-100Gx2-CFP2 2- port 100GbE Module' and 'BR-MLX-10Gx4-M-IPSEC 4-port 10GbE Module' cards. 0 is returned for these cards.")
brcdTMStatsEgressEnqueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMStatsEgressEnqueueBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMStatsEgressEnqueueBytes.setDescription("A count of all bytes entering egress queues and forwarded out on this traffic manager. This counter is not supported on 'NI-MLX-10Gx8-D 8-port 10GbE (D) Module', 'NI-MLX-10Gx8-M 8-port 10GbE (M) Module', 'NI-MLX-10Gx8-X 8-port 10GbE (X) Module', 'BR-MLX-10Gx24-DM 24-port-10GbE Module', 'BR-MLX-40Gx4-M 4-port 40GbE Module', 'BR-MLX-10Gx20 20-port 1/10GbE Module', 'BR-MLX- 100Gx2-CFP2 2-port 100GbE Module' and 'BR-MLX-10Gx4-M-IPSEC 4-port 10GbE Module' cards. 0 is returned for these cards.")
brcdTMStatsIngressDequeuePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMStatsIngressDequeuePkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMStatsIngressDequeuePkts.setDescription('A count of all packets dequeued from ingress queues and forwarded on this traffic manager.')
brcdTMStatsIngressDequeueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMStatsIngressDequeueBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMStatsIngressDequeueBytes.setDescription("A count of all bytes dequeued from ingress queues and forwarded on this traffic manager. This counter is not supported on 'NI-MLX-10Gx8-D 8-port 10GbE (D) Module', 'NI-MLX-10Gx8-M 8-port 10GbE (M) Module', 'NI-MLX-10Gx8-X 8-port 10GbE (X) Module' 'BR-MLX-10Gx24-DM 24-port-10GbE Module', 'BR-MLX-40Gx4-M 4-port 40GbE Module', 'BR-MLX-10Gx20 20-port 1/10GbE Module', 'BR-MLX- 100Gx2-CFP2 2-port 100GbE Module' and 'BR-MLX-10Gx4-M-IPSEC 4-port 10GbE Module' cards.")
brcdTMStatsIngressTotalQDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMStatsIngressTotalQDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMStatsIngressTotalQDiscardPkts.setDescription('A count of all packets failing to enter ingress queues on this traffic manager. This may be due to: (1) the queue reaching its maximum depth, WRED, or other reasons. (2) the network processor deciding to drop packets for reasons including: an unknown Layer-3 route, RPF, or segment filtering.')
brcdTMStatsIngressTotalQDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMStatsIngressTotalQDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMStatsIngressTotalQDiscardBytes.setDescription("A count of all bytes failing to enter ingress queues on this traffic manager. This may be due to: (1) the queue reaching its maximum depth, WRED, or other reasons. (2) the network processor deciding to drop packets for reasons including: an unknown Layer-3 route, RPF, or segment filtering. This counter is not supported on 'NI-MLX-10Gx8-D 8-port 10GbE (X) Module'NI-MLX-10Gx8-D 8-port 10GbE(D) Module', 'NI-MLX-10Gx8-M 8-port 10GbE (M) Module','BR-MLX-10Gx24-DM 24-port-10GbE Module', 'BR-MLX-10Gx24-DM 24-port-10GbE Module', 'BR-MLX-40Gx4-M 4-port 40GbE Module', 'BR-MLX-10Gx20 20-port 1/10GbE Module', 'BR-MLX- 100Gx2-CFP2 2-port 100GbE Module' and 'BR-MLX-10Gx4-M-IPSEC 4-port 10GbE Module' cards. 0 is returned for these cards.")
brcdTMStatsIngressOldestDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMStatsIngressOldestDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMStatsIngressOldestDiscardPkts.setDescription('A count of all packets entering ingress queues on this traffic manager, but deleted later due to buffer being full.')
brcdTMStatsIngressOldestDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMStatsIngressOldestDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMStatsIngressOldestDiscardBytes.setDescription("A count of all bytes entering ingress queues on this traffic manager, but deleted later due to buffer being full. This counter is not supported on 'NI-MLX-10Gx8-D 8-port 10GbE (D) Module', 'NI-MLX-10Gx8-M 8-port 10GbE (M) Module', 'NI-MLX-10Gx8-X 8-port 10GbE (X) Module', 'BR-MLX-10Gx24-DM 24-port-10GbE Module', 'BR-MLX-40Gx4-M 4-port 40GbE Module', 'BR-MLX-10Gx20 20-port 1/10GbE Module', 'BR-MLX-100Gx2-CFP2 2-port 100GbE Module' and 'BR-MLX-10Gx4-M-IPSEC 4-port 10GbE Module' cards. 0 is returned for these cards.")
brcdTMStatsEgressDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMStatsEgressDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMStatsEgressDiscardPkts.setDescription(' A count of all packets failing to enter egress queues on this traffic manager.')
brcdTMStatsEgressDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMStatsEgressDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMStatsEgressDiscardBytes.setDescription(" A count of all bytes failing to enter egress queues on this traffic manager. This counter is not supported on 'NI-MLX-10Gx8-D 8-port 10GbE (D) Module', 'NI-MLX-10Gx8-M 8-port 10GbE (M) Module', 'NI-MLX-10Gx8-X 8-port 10GbE (X) Module', 'BR-MLX-10Gx24-DM 24-port-10GbE Module', 'BR-MLX-40Gx4-M 4-port 40GbE Module', 'BR-MLX-10Gx20 20-port 1/10GbE Module', 'BR-MLX- 100Gx2-CFP2 2-port 100GbE Module' and 'BR-MLX-10Gx4-M-IPSEC 4-port 10GbE Module' cards. 0 is returned for these cards. ")
brcdTMUcastQStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 3), )
if mibBuilder.loadTexts: brcdTMUcastQStatsTable.setStatus('current')
if mibBuilder.loadTexts: brcdTMUcastQStatsTable.setDescription('A list of TM unicast queue stats entries. This table contains information of Traffic Manager(TM) unicast queue counters supported by this system.')
brcdTMUcastQStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 3, 1), ).setIndexNames((0, "BROCADE-NP-TM-STATS-MIB", "brcdTMUcastQStatsSlotId"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdTMUcastQStatsTMDeviceId"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdTMUcastQStatsDstIfIndex"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdTMUcastQStatsPriority"))
if mibBuilder.loadTexts: brcdTMUcastQStatsEntry.setStatus('current')
if mibBuilder.loadTexts: brcdTMUcastQStatsEntry.setDescription('An entry containing TM counter information.')
brcdTMUcastQStatsSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: brcdTMUcastQStatsSlotId.setStatus('current')
if mibBuilder.loadTexts: brcdTMUcastQStatsSlotId.setDescription('Slot ID of the LP module, which uniquely identifies a linecard. The LP module must be physically present and operationally up.')
brcdTMUcastQStatsTMDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: brcdTMUcastQStatsTMDeviceId.setStatus('current')
if mibBuilder.loadTexts: brcdTMUcastQStatsTMDeviceId.setDescription('The TM device ID, a number which uniquely identifies the network processor TM within a linecard in the system.')
brcdTMUcastQStatsDstIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 3, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: brcdTMUcastQStatsDstIfIndex.setStatus('current')
if mibBuilder.loadTexts: brcdTMUcastQStatsDstIfIndex.setDescription('The destination interface index. This is applicable only for the interface on the LP module that is physically present and operationally up')
brcdTMUcastQStatsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 3, 1, 4), PortPriorityTC())
if mibBuilder.loadTexts: brcdTMUcastQStatsPriority.setStatus('current')
if mibBuilder.loadTexts: brcdTMUcastQStatsPriority.setDescription('The priority of the packets that will be stored in this queue. This is 1-based index. When the tm-max-queues is set to 4, two consecutive priorities are stored in one unicast queue. In this case, the valid values for this index are 1, 3, 5 and 7.')
brcdTMUcastQStatsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMUcastQStatsDescription.setStatus('current')
if mibBuilder.loadTexts: brcdTMUcastQStatsDescription.setDescription('This object gives the range of ports serviced by the brcdTMUcastQStatsTMDeviceId and priorities serviced by this queue.')
brcdTMUcastQStatsEnquePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMUcastQStatsEnquePkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMUcastQStatsEnquePkts.setDescription('A count of all packets entering ingress queues on this traffic manager')
brcdTMUcastQStatsEnqueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMUcastQStatsEnqueBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMUcastQStatsEnqueBytes.setDescription('A count of all bytes entering ingress queues on this traffic manager')
brcdTMUcastQStatsDequePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMUcastQStatsDequePkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMUcastQStatsDequePkts.setDescription('A count of all packets dequeued from ingress queues and forwarded on this traffic Manager')
brcdTMUcastQStatsDequeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMUcastQStatsDequeBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMUcastQStatsDequeBytes.setDescription('A count of all bytes dequeued from ingress queues and forwarded on this traffic manager')
brcdTMUcastQStatsTotalQDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMUcastQStatsTotalQDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMUcastQStatsTotalQDiscardPkts.setDescription('A count of all packets failing to enter ingress queues on this traffic manager. This may be due to: * The queue reaching its maximum depth, WRED, or other reasons. * The network processor deciding to drop packets for reasons including: an unknown Layer-3 route, RPF, or segment filtering.')
brcdTMUcastQStatsTotalQDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMUcastQStatsTotalQDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMUcastQStatsTotalQDiscardBytes.setDescription('A count of all bytes failing to enter ingress queues on this traffic manager. This may be due to: * The queue reaching its maximum depth, WRED, or other reasons. * The network processor deciding to drop packets for reasons including: an unknown Layer-3 route, RPF, or segment filtering')
brcdTMUcastQStatsOldestDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMUcastQStatsOldestDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMUcastQStatsOldestDiscardPkts.setDescription('A count of all packets entering ingress queues on this traffic manager, but deleted afterwards due to buffer full.')
brcdTMUcastQStatsOldestDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMUcastQStatsOldestDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMUcastQStatsOldestDiscardBytes.setDescription('A count of all bytes entering ingress queues on this traffic manager, but deleted afterwards due to buffer full')
brcdTMUcastQStatsWREDDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMUcastQStatsWREDDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMUcastQStatsWREDDroppedPkts.setDescription('A count of all packets entering ingress queues on this traffic manager but dropped due to WRED.')
brcdTMUcastQStatsWREDDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMUcastQStatsWREDDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMUcastQStatsWREDDroppedBytes.setDescription('A count of all bytes entering ingress queues on this traffic manager but dropped due to WRED.')
brcdTMUcastQStatsMaxQDepthSinceLastRead = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMUcastQStatsMaxQDepthSinceLastRead.setStatus('current')
if mibBuilder.loadTexts: brcdTMUcastQStatsMaxQDepthSinceLastRead.setDescription('The maximum queue depth since last access to read.')
brcdTMUcastQStatsQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMUcastQStatsQSize.setStatus('current')
if mibBuilder.loadTexts: brcdTMUcastQStatsQSize.setDescription("This queue's current size")
brcdTMUcastQStatsCreditCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 3, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMUcastQStatsCreditCount.setStatus('current')
if mibBuilder.loadTexts: brcdTMUcastQStatsCreditCount.setDescription("This queue's current credit count")
brcdTMMcastQStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 4), )
if mibBuilder.loadTexts: brcdTMMcastQStatsTable.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastQStatsTable.setDescription('A list of TM Multicast queue stats entries. This table contains information of Traffic Manager(TM) Multicast queue counters supported by this system.')
brcdTMMcastQStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 4, 1), ).setIndexNames((0, "BROCADE-NP-TM-STATS-MIB", "brcdTMMcastQStatsSlotId"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdTMMcastQStatsTMDeviceId"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdTMMcastQStatsPriority"))
if mibBuilder.loadTexts: brcdTMMcastQStatsEntry.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastQStatsEntry.setDescription('An entry containing TM counter information.')
brcdTMMcastQStatsSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: brcdTMMcastQStatsSlotId.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastQStatsSlotId.setDescription('Slot ID of the LP module, which uniquely identifies a linecard. The LP module must be physically present and operationally up.')
brcdTMMcastQStatsTMDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: brcdTMMcastQStatsTMDeviceId.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastQStatsTMDeviceId.setDescription('The TM device ID, a number which uniquely identifies the network processor TM within a linecard in this system.')
brcdTMMcastQStatsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 7))).clone(namedValues=NamedValues(("priority1And2", 1), ("priority3And4", 3), ("priority5And6", 5), ("priority7And8", 7))))
if mibBuilder.loadTexts: brcdTMMcastQStatsPriority.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastQStatsPriority.setDescription('The priority of the packets that will be stored in this queue. Two consecutive priorities are stored in one multicast queue. There are 4 multicast queues per TM for 8 priorities.')
brcdTMMcastQStatsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastQStatsDescription.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastQStatsDescription.setDescription('This object gives the range of ports serviced by the brcdTMMcastQStatsTMDeviceId and priorities serviced by this queue.')
brcdTMMcastQStatsEnquePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastQStatsEnquePkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastQStatsEnquePkts.setDescription('A count of all packets entering ingress queues on this traffic manager')
brcdTMMcastQStatsEnqueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastQStatsEnqueBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastQStatsEnqueBytes.setDescription('A count of all bytes entering ingress queues on this traffic manager')
brcdTMMcastQStatsDequePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastQStatsDequePkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastQStatsDequePkts.setDescription('A count of all packets dequeued from ingress queues and forwarded on this traffic Manager')
brcdTMMcastQStatsDequeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastQStatsDequeBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastQStatsDequeBytes.setDescription('A count of all bytes dequeued from ingress queues and forwarded on this traffic manager')
brcdTMMcastQStatsTotalQDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastQStatsTotalQDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastQStatsTotalQDiscardPkts.setDescription('A count of all packets failing to enter ingress queues on this traffic manager. This may be due to: * The queue reaching its maximum depth, WRED, or other reasons. * The network processor deciding to drop packets for reasons including: an unknown Layer-3 route, RPF, or segment filtering.')
brcdTMMcastQStatsTotalQDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastQStatsTotalQDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastQStatsTotalQDiscardBytes.setDescription('A count of all bytes failing to enter ingress queues on this traffic manager. This may be due to: * The queue reaching its maximum depth, WRED, or other reasons. * The network processor deciding to drop packets for reasons including: an unknown Layer-3 route, RPF, or segment filtering')
brcdTMMcastQStatsOldestDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastQStatsOldestDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastQStatsOldestDiscardPkts.setDescription('A count of all packets entering ingress queues on this traffic manager, but deleted afterwards due to buffer full.')
brcdTMMcastQStatsOldestDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastQStatsOldestDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastQStatsOldestDiscardBytes.setDescription('A count of all bytes entering ingress queues on this traffic manager, but deleted afterwards due to buffer full')
brcdTMMcastQStatsWREDDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastQStatsWREDDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastQStatsWREDDroppedPkts.setDescription('A count of all packets entering ingress queues on this traffic manager but dropped due to WRED.')
brcdTMMcastQStatsWREDDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastQStatsWREDDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastQStatsWREDDroppedBytes.setDescription('A count of all bytes entering ingress queues on this traffic manager but dropped due to WRED.')
brcdTMMcastQStatsMaxQDepthSinceLastRead = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastQStatsMaxQDepthSinceLastRead.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastQStatsMaxQDepthSinceLastRead.setDescription('The maximum queue depth since last access to read.')
brcdTMMcastQStatsQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 4, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastQStatsQSize.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastQStatsQSize.setDescription("This queue's current size")
brcdTMMcastQStatsCreditCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 4, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastQStatsCreditCount.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastQStatsCreditCount.setDescription("This queue's current credit count")
brcdTMCpuQStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 5), )
if mibBuilder.loadTexts: brcdTMCpuQStatsTable.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQStatsTable.setDescription('A list of TM CPU queue stats entries. This table contains information of Traffic Manager(TM) CPU queue counters supported by this system.')
brcdTMCpuQStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 5, 1), ).setIndexNames((0, "BROCADE-NP-TM-STATS-MIB", "brcdTMCpuQStatsSlotId"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdTMCpuQStatsTMDeviceId"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdTMCpuQStatsType"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdTMCpuQStatsPriority"))
if mibBuilder.loadTexts: brcdTMCpuQStatsEntry.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQStatsEntry.setDescription('An entry containing TM counter information.')
brcdTMCpuQStatsSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: brcdTMCpuQStatsSlotId.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQStatsSlotId.setDescription('Slot ID of the LP module, which uniquely identifies a linecard. The LP module must be physically present and operationally up.')
brcdTMCpuQStatsTMDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: brcdTMCpuQStatsTMDeviceId.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQStatsTMDeviceId.setDescription('The TM device ID, a number which uniquely identifies the network processor TM within a linecard in the system.')
brcdTMCpuQStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cpuQ", 1), ("cpuCopyQ", 2), ("cpuManagementQ", 3), ("cpuProtocolQ", 4))))
if mibBuilder.loadTexts: brcdTMCpuQStatsType.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQStatsType.setDescription('The type of the CPU queue')
brcdTMCpuQStatsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 5, 1, 4), PortPriorityTC())
if mibBuilder.loadTexts: brcdTMCpuQStatsPriority.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQStatsPriority.setDescription('The priority of the packets that will be stored in this queue. This is 1-based index. The priority 0 maps to 1, priority 1 maps to 2 etc.')
brcdTMCpuQStatsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQStatsDescription.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQStatsDescription.setDescription('This object gives the range of ports serviced by the brcdTMCpuQStatsTMDeviceId.')
brcdTMCpuQStatsEnquePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQStatsEnquePkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQStatsEnquePkts.setDescription('A count of all packets entering ingress queues on this traffic manager')
brcdTMCpuQStatsEnqueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQStatsEnqueBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQStatsEnqueBytes.setDescription('A count of all bytes entering ingress queues on this traffic manager')
brcdTMCpuQStatsDequePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQStatsDequePkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQStatsDequePkts.setDescription('A count of all packets dequeued from ingress queues and forwarded on this traffic Manager')
brcdTMCpuQStatsDequeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQStatsDequeBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQStatsDequeBytes.setDescription('A count of all bytes dequeued from ingress queues and forwarded on this traffic manager')
brcdTMCpuQStatsTotalQDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQStatsTotalQDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQStatsTotalQDiscardPkts.setDescription('A count of all packets failing to enter ingress queues on this traffic manager. This may be due to: * The queue reaching its maximum depth, WRED, or other reasons. * The network processor deciding to drop packets for reasons including: an unknown Layer-3 route, RPF, or segment filtering.')
brcdTMCpuQStatsTotalQDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQStatsTotalQDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQStatsTotalQDiscardBytes.setDescription('A count of all bytes failing to enter ingress queues on this traffic manager. This may be due to: * The queue reaching its maximum depth, WRED, or other reasons. * The network processor deciding to drop packets for reasons including: an unknown Layer-3 route, RPF, or segment filtering')
brcdTMCpuQStatsOldestDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQStatsOldestDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQStatsOldestDiscardPkts.setDescription('A count of all packets entering ingress queues on this traffic manager, but deleted afterwards due to buffer full.')
brcdTMCpuQStatsOldestDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQStatsOldestDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQStatsOldestDiscardBytes.setDescription('A count of all bytes entering ingress queues on this traffic manager, but deleted afterwards due to buffer full')
brcdTMCpuQStatsWREDDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQStatsWREDDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQStatsWREDDroppedPkts.setDescription('A count of all packets entering ingress queues on this traffic manager but dropped due to WRED.')
brcdTMCpuQStatsWREDDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 5, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQStatsWREDDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQStatsWREDDroppedBytes.setDescription('A count of all bytes entering ingress queues on this traffic manager but dropped due to WRED.')
brcdTMCpuQStatsMaxQDepthSinceLastRead = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 5, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQStatsMaxQDepthSinceLastRead.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQStatsMaxQDepthSinceLastRead.setDescription('The maximum queue depth since last access to read.')
brcdTMCpuQStatsQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 5, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQStatsQSize.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQStatsQSize.setDescription("This queue's current size")
brcdTMCpuQStatsCreditCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 5, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQStatsCreditCount.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQStatsCreditCount.setDescription("This queue's current credit count")
brcdTMMcastStreamQStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 6), )
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsTable.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsTable.setDescription('A list of TM Multicast stream queue stats entries. This table contains information of Traffic Manager(TM) Multicast stream queue counters supported by this system.')
brcdTMMcastStreamQStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 6, 1), ).setIndexNames((0, "BROCADE-NP-TM-STATS-MIB", "brcdTMMcastStreamQStatsAddressType"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdTMMcastStreamQStatsSource"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdTMMcastStreamQStatsGroup"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdTMMcastStreamQStatsGroupPrefixLength"))
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsEntry.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsEntry.setDescription('An entry containing TM Multicast stream queue counter information.')
brcdTMMcastStreamQStatsAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 6, 1, 1), InetAddressType())
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsAddressType.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsAddressType.setDescription('A value indicating the address family of the address contained in brcdTMMcastStreamQStatsSource and brcdTMMcastStreamQStatsGroup. Legal values correspond to the subset of address families for which multicast forwarding is supported.')
brcdTMMcastStreamQStatsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 6, 1, 2), InetAddress())
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsSource.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsSource.setDescription('The Source IP address of the multicast stream.')
brcdTMMcastStreamQStatsGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 6, 1, 3), InetAddress())
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsGroup.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsGroup.setDescription('The Group IP address of the multicast stream.')
brcdTMMcastStreamQStatsGroupPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 6, 1, 4), InetAddressPrefixLength())
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsGroupPrefixLength.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsGroupPrefixLength.setDescription("The length in bits of the mask which, when combined with the corresponding value of brcdTMMcastStreamQStatsGroup, identifies the groups for which this entry contains queue statistics. The InetAddressType is given by brcdTMMcastStreamQStatsAddressType. For values 'ipv4' and 'ipv4z', this object must be in the range 4..32. For values 'ipv6' and 'ipv6z', this object must be in the range 8..128.")
brcdTMMcastStreamQStatsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 7))).clone(namedValues=NamedValues(("priority1And2", 1), ("priority3And4", 3), ("priority5And6", 5), ("priority7And8", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsPriority.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsPriority.setDescription('The priority of the packets that will be stored in this queue. Two consecutive priorities are stored in one multicast stream queue.')
brcdTMMcastStreamQStatsEnquePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsEnquePkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsEnquePkts.setDescription('A count of all packets entering ingress queues on this traffic manager')
brcdTMMcastStreamQStatsEnqueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsEnqueBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsEnqueBytes.setDescription('A count of all bytes entering ingress queues on this traffic manager')
brcdTMMcastStreamQStatsDequePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsDequePkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsDequePkts.setDescription('A count of all packets dequeued from ingress queues and forwarded on this traffic Manager')
brcdTMMcastStreamQStatsDequeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsDequeBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsDequeBytes.setDescription('A count of all bytes dequeued from ingress queues and forwarded on this traffic manager')
brcdTMMcastStreamQStatsTotalQDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsTotalQDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsTotalQDiscardPkts.setDescription('A count of all packets failing to enter ingress queues on this traffic manager. This may be due to: * The queue reaching its maximum depth, WRED, or other reasons. * The network processor deciding to drop packets for reasons including: an unknown Layer-3 route, RPF, or segment filtering.')
brcdTMMcastStreamQStatsTotalQDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 6, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsTotalQDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsTotalQDiscardBytes.setDescription('A count of all bytes failing to enter ingress queues on this traffic manager. This may be due to: * The queue reaching its maximum depth, WRED, or other reasons. * The network processor deciding to drop packets for reasons including: an unknown Layer-3 route, RPF, or segment filtering')
brcdTMMcastStreamQStatsOldestDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 6, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsOldestDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsOldestDiscardPkts.setDescription('A count of all packets entering ingress queues on this traffic manager, but deleted afterwards due to buffer full.')
brcdTMMcastStreamQStatsOldestDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 6, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsOldestDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsOldestDiscardBytes.setDescription('A count of all bytes entering ingress queues on this traffic manager, but deleted afterwards due to buffer full')
brcdTMMcastStreamQStatsWREDDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 6, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsWREDDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsWREDDroppedPkts.setDescription('A count of all packets entering ingress queues on this traffic manager but dropped due to WRED.')
brcdTMMcastStreamQStatsWREDDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 6, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsWREDDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsWREDDroppedBytes.setDescription('A count of all bytes entering ingress queues on this traffic manager but dropped due to WRED.')
brcdTMMcastStreamQStatsMaxQDepthSinceLastRead = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 6, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsMaxQDepthSinceLastRead.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsMaxQDepthSinceLastRead.setDescription('The maximum queue depth since last access to read.')
brcdTMMcastStreamQStatsQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 6, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsQSize.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsQSize.setDescription("This queue's current size")
brcdTMMcastStreamQStatsCreditCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 6, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsCreditCount.setStatus('current')
if mibBuilder.loadTexts: brcdTMMcastStreamQStatsCreditCount.setDescription("This queue's current credit count")
brcdTMCpuQInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 7), )
if mibBuilder.loadTexts: brcdTMCpuQInfoTable.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQInfoTable.setDescription('A list of TM CPU queue information entries. This table contains information of Traffic Manager(TM) CPU Queue information supported by this system.')
brcdTMCpuQInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 7, 1), ).setIndexNames((0, "BROCADE-NP-TM-STATS-MIB", "brcdTMCpuQInfoSlotId"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdTMCpuQInfoTMDeviceId"))
if mibBuilder.loadTexts: brcdTMCpuQInfoEntry.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQInfoEntry.setDescription('An entry containing TM counter information.')
brcdTMCpuQInfoSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: brcdTMCpuQInfoSlotId.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQInfoSlotId.setDescription('Slot ID of the LP module, which uniquely identifies a linecard. The LP module must be physically present and operationally up.')
brcdTMCpuQInfoTMDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: brcdTMCpuQInfoTMDeviceId.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQInfoTMDeviceId.setDescription('The TM device ID, a number which uniquely identifies the network processor TM within a linecard in this system.')
brcdTMCpuQInfoPriority0QSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority0QSize.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority0QSize.setDescription('The size of the CPU Queue for the priority 0')
brcdTMCpuQInfoPriority0CreditCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority0CreditCount.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority0CreditCount.setDescription('The credit count of the CPU Queue for the priority 0')
brcdTMCpuQInfoPriority1QSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority1QSize.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority1QSize.setDescription('The size of the CPU Queue for the priority 1')
brcdTMCpuQInfoPriority1CreditCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority1CreditCount.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority1CreditCount.setDescription('The credit count of the CPU Queue for the priority 1')
brcdTMCpuQInfoPriority2QSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 7, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority2QSize.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority2QSize.setDescription('The size of the CPU Queue for the priority 2')
brcdTMCpuQInfoPriority2CreditCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 7, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority2CreditCount.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority2CreditCount.setDescription('The credit count of the CPU Queue for the priority 2')
brcdTMCpuQInfoPriority3QSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 7, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority3QSize.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority3QSize.setDescription('The size of the CPU Queue for the priority 3')
brcdTMCpuQInfoPriority3CreditCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 7, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority3CreditCount.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority3CreditCount.setDescription('The credit count of the CPU Queue for the priority 3')
brcdTMCpuQInfoPriority4QSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 7, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority4QSize.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority4QSize.setDescription('The size of the CPU Queue for the priority 4')
brcdTMCpuQInfoPriority4CreditCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 7, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority4CreditCount.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority4CreditCount.setDescription('The credit count of the CPU Queue for the priority 4')
brcdTMCpuQInfoPriority5QSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 7, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority5QSize.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority5QSize.setDescription('The size of the CPU Queue for the priority 5')
brcdTMCpuQInfoPriority5CreditCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 7, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority5CreditCount.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority5CreditCount.setDescription('The credit count of the CPU Queue for the priority 5')
brcdTMCpuQInfoPriority6QSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 7, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority6QSize.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority6QSize.setDescription('The size of the CPU Queue for the priority 6')
brcdTMCpuQInfoPriority6CreditCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 7, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority6CreditCount.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority6CreditCount.setDescription('The credit count of the CPU Queue for the priority 6')
brcdTMCpuQInfoPriority7QSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 7, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority7QSize.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority7QSize.setDescription('The size of the CPU Queue for the priority 7')
brcdTMCpuQInfoPriority7CreditCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 7, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority7CreditCount.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuQInfoPriority7CreditCount.setDescription('The credit count of the CPU Queue for the priority 7')
brcdNPBufferErrorIngressThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 0, 1)).setObjects(("BROCADE-NP-TM-STATS-MIB", "brcdNPBufferErrorDescription"), ("BROCADE-NP-TM-STATS-MIB", "brcdNPBufferErrorIngressCurrentEvents"))
if mibBuilder.loadTexts: brcdNPBufferErrorIngressThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: brcdNPBufferErrorIngressThresholdExceeded.setDescription('The SNMP trap that is generated when the NP ingress buffer error event count within a window exceeds the configured threshold.')
brcdNPBufferErrorEgressThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 0, 2)).setObjects(("BROCADE-NP-TM-STATS-MIB", "brcdNPBufferErrorDescription"), ("BROCADE-NP-TM-STATS-MIB", "brcdNPBufferErrorEgressCurrentEvents"))
if mibBuilder.loadTexts: brcdNPBufferErrorEgressThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: brcdNPBufferErrorEgressThresholdExceeded.setDescription('The SNMP trap that is generated when the NP egress buffer error event count within a window exceeds the configured threshold.')
brcdNPCSRAMErrorThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 0, 3)).setObjects(("BROCADE-NP-TM-STATS-MIB", "brcdNPCSRAMErrorDescription"), ("BROCADE-NP-TM-STATS-MIB", "brcdNPCSRAMErrorCurrentEvents"))
if mibBuilder.loadTexts: brcdNPCSRAMErrorThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: brcdNPCSRAMErrorThresholdExceeded.setDescription('The SNMP trap that is generated when the NP CSRAM error event count within a window exceeds the configured threshold.')
brcdNPLPMRAMErrorThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 0, 4)).setObjects(("BROCADE-NP-TM-STATS-MIB", "brcdNPLPMRAMErrorName"), ("BROCADE-NP-TM-STATS-MIB", "brcdNPLPMRAMErrorDescription"), ("BROCADE-NP-TM-STATS-MIB", "brcdNPLPMRAMErrorCurrentEvents"))
if mibBuilder.loadTexts: brcdNPLPMRAMErrorThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: brcdNPLPMRAMErrorThresholdExceeded.setDescription('The SNMP trap that is generated when the NP LPM RAM error event count within a window exceeds the configured threshold.')
brcdNPNotificationSupportTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 0, 5), )
if mibBuilder.loadTexts: brcdNPNotificationSupportTable.setStatus('current')
if mibBuilder.loadTexts: brcdNPNotificationSupportTable.setDescription('A list of brcdNPNotificationSupport entries. The objects in this table are used by notifications defined in the brcdNPTMMIBNotification group.')
brcdNPNotificationSupportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 0, 5, 1), ).setIndexNames((0, "BROCADE-NP-TM-STATS-MIB", "brcdNPNotificationSupportSlotId"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdNPNotificationSupportDeviceId"))
if mibBuilder.loadTexts: brcdNPNotificationSupportEntry.setStatus('current')
if mibBuilder.loadTexts: brcdNPNotificationSupportEntry.setDescription('An entry consisting of objects used by notifications.')
brcdNPNotificationSupportSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 0, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: brcdNPNotificationSupportSlotId.setStatus('current')
if mibBuilder.loadTexts: brcdNPNotificationSupportSlotId.setDescription('Slot ID of the LP module, which uniquely identifies a linecard. The LP module must be physically present and operationally up.')
brcdNPNotificationSupportDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 0, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: brcdNPNotificationSupportDeviceId.setStatus('current')
if mibBuilder.loadTexts: brcdNPNotificationSupportDeviceId.setDescription('The NP device ID, a number which uniquely identifies the network processor within a linecard in the system.')
brcdNPNotificationSupportDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 0, 5, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: brcdNPNotificationSupportDescription.setStatus('current')
if mibBuilder.loadTexts: brcdNPNotificationSupportDescription.setDescription('This object can be used by the notifications to represent the range of ports serviced by the NP device.')
brcdNPNotificationSupportErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 0, 5, 1, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: brcdNPNotificationSupportErrorType.setStatus('current')
if mibBuilder.loadTexts: brcdNPNotificationSupportErrorType.setDescription('This object can be used by the traps to represent type or location of the error in the NP device.')
brcdNPMemoryParityErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 0, 6)).setObjects(("BROCADE-NP-TM-STATS-MIB", "brcdNPNotificationSupportDescription"), ("BROCADE-NP-TM-STATS-MIB", "brcdNPNotificationSupportErrorType"))
if mibBuilder.loadTexts: brcdNPMemoryParityErrorTrap.setStatus('current')
if mibBuilder.loadTexts: brcdNPMemoryParityErrorTrap.setDescription('The SNMP trap that is generated when a memory parity error occurs in a NP device.')
brcdNPMemoryMiscErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 0, 7)).setObjects(("BROCADE-NP-TM-STATS-MIB", "brcdNPNotificationSupportDescription"), ("BROCADE-NP-TM-STATS-MIB", "brcdNPNotificationSupportErrorType"))
if mibBuilder.loadTexts: brcdNPMemoryMiscErrorTrap.setStatus('current')
if mibBuilder.loadTexts: brcdNPMemoryMiscErrorTrap.setDescription('The SNMP trap that is generated when a miscellaneous memory error occurs in a NP device.')
brcdNPBuffOverFlowErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 0, 8)).setObjects(("BROCADE-NP-TM-STATS-MIB", "brcdNPNotificationSupportDescription"), ("BROCADE-NP-TM-STATS-MIB", "brcdNPNotificationSupportErrorType"))
if mibBuilder.loadTexts: brcdNPBuffOverFlowErrorTrap.setStatus('current')
if mibBuilder.loadTexts: brcdNPBuffOverFlowErrorTrap.setDescription('The SNMP trap that is generated when a buffer overflow error occurs in a NP device.')
brcdNPBuffUnderFlowErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 0, 9)).setObjects(("BROCADE-NP-TM-STATS-MIB", "brcdNPNotificationSupportDescription"), ("BROCADE-NP-TM-STATS-MIB", "brcdNPNotificationSupportErrorType"))
if mibBuilder.loadTexts: brcdNPBuffUnderFlowErrorTrap.setStatus('current')
if mibBuilder.loadTexts: brcdNPBuffUnderFlowErrorTrap.setDescription('The SNMP trap that is generated when a buffer underflow occurs in a NP device.')
brcdNPECCSingleErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 0, 10)).setObjects(("BROCADE-NP-TM-STATS-MIB", "brcdNPNotificationSupportDescription"), ("BROCADE-NP-TM-STATS-MIB", "brcdNPNotificationSupportErrorType"))
if mibBuilder.loadTexts: brcdNPECCSingleErrorTrap.setStatus('current')
if mibBuilder.loadTexts: brcdNPECCSingleErrorTrap.setDescription('The SNMP trap that is generated when a single ECC error occurs in a NP device.')
brcdNPECCMultipleErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 0, 11)).setObjects(("BROCADE-NP-TM-STATS-MIB", "brcdNPNotificationSupportDescription"), ("BROCADE-NP-TM-STATS-MIB", "brcdNPNotificationSupportErrorType"))
if mibBuilder.loadTexts: brcdNPECCMultipleErrorTrap.setStatus('current')
if mibBuilder.loadTexts: brcdNPECCMultipleErrorTrap.setDescription('The SNMP trap that is generated when multiple ECC error occurs in a NP device.')
brcdTMDestUcastQStatTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 8), )
if mibBuilder.loadTexts: brcdTMDestUcastQStatTable.setStatus('current')
if mibBuilder.loadTexts: brcdTMDestUcastQStatTable.setDescription('This table contains information of Traffic Manager(TM) unicast queue counters aggregated across all TMs per destination interface per priority. Entry with priority value equals to 128 includes per interface statistics aggregated across all priorities. Please refer to the MIB reference guide for pre-requisites of this table.')
brcdTMDestUcastQStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 8, 1), ).setIndexNames((0, "BROCADE-NP-TM-STATS-MIB", "brcdTMDestUcastQStatDestIfIndex"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdTMDestUcastQStatPriority"))
if mibBuilder.loadTexts: brcdTMDestUcastQStatEntry.setStatus('current')
if mibBuilder.loadTexts: brcdTMDestUcastQStatEntry.setDescription('An entry containing TM unicast queue counters aggregated across all TMs per a given destination interface per priority.')
brcdTMDestUcastQStatDestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 8, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: brcdTMDestUcastQStatDestIfIndex.setStatus('current')
if mibBuilder.loadTexts: brcdTMDestUcastQStatDestIfIndex.setDescription('ifIndex of the destination interface. All the interfaces of the LP modules that are physically present and operationally up will be included in this table. Starting from NetIron 5.3 release, all deployed LAG interfaces will also be included in this table.')
brcdTMDestUcastQStatPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 8, 1, 2), PortPriorityTC())
if mibBuilder.loadTexts: brcdTMDestUcastQStatPriority.setStatus('current')
if mibBuilder.loadTexts: brcdTMDestUcastQStatPriority.setDescription('The priority of the packets that will be stored in this queue. This is 1-based value. The priority0 maps to 1, priority1 maps to 2 etc. Priority value equal to nonPriority(128) indicates the aggregated counters for the given destination port. When the tm-max-queues is set to 4, two consecutive priorities are stored in one unicast queue. In this case, the valid values for this index are 1, 3, 5, 7 and 128.')
brcdTMDestUcastQStatEnquePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMDestUcastQStatEnquePkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMDestUcastQStatEnquePkts.setDescription('Total aggregated count of all packets entering ingress queue across all traffic managers.')
brcdTMDestUcastQStatEnqueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMDestUcastQStatEnqueBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMDestUcastQStatEnqueBytes.setDescription('Total aggregated count of all bytes entering ingress queue across all traffic managers.')
brcdTMDestUcastQStatDequePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMDestUcastQStatDequePkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMDestUcastQStatDequePkts.setDescription('Total aggregated count of all packets dequeued/transmitted from ingress queue across all traffic managers.')
brcdTMDestUcastQStatDequeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMDestUcastQStatDequeBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMDestUcastQStatDequeBytes.setDescription('Total aggregated count of all bytes dequeued/transmitted from ingress queue across all traffic managers.')
brcdTMDestUcastQStatTotalQDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMDestUcastQStatTotalQDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMDestUcastQStatTotalQDiscardPkts.setDescription('For a virtual output queue, total aggregated count across all TMs of packets that were discarded, either before enqueueing due to WRED or maximum queue depth reached, or after enqueueing but before dequeueing due to aging.')
brcdTMDestUcastQStatTotalQDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 8, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMDestUcastQStatTotalQDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMDestUcastQStatTotalQDiscardBytes.setDescription('For a virtual output queue, total aggregated count across all TMs of bytes that were discarded, either before enqueueing due to WRED or maximum queue depth reached, or after enqueueing but before dequeueing due to aging.')
brcdNPIndex = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 3, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: brcdNPIndex.setStatus('current')
if mibBuilder.loadTexts: brcdNPIndex.setDescription('Identifies the network processor within a module in the system.')
brcdNPLockupRecoveryCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 3, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: brcdNPLockupRecoveryCount.setStatus('current')
if mibBuilder.loadTexts: brcdNPLockupRecoveryCount.setDescription('Number of times the network processor undergone lockup and recovery.')
brcdTMCpuAggrQStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 9), )
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsTable.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsTable.setDescription('A list of TM Aggregate CPU queue stats entries. This table contains information of Aggregation of Traffic Manager(TM) CPU queue counters supported by this system.')
brcdTMCpuAggrQStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 9, 1), ).setIndexNames((0, "BROCADE-NP-TM-STATS-MIB", "brcdTMCpuQStatsSlotId"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdTMCpuQStatsTMDeviceId"), (0, "BROCADE-NP-TM-STATS-MIB", "brcdTMCpuQStatsPriority"))
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsEntry.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsEntry.setDescription('An entry containing Aggregation of TM CPU Queues counter information.')
brcdTMCpuAggrQStatsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 9, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsDescription.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsDescription.setDescription('This object gives the range of ports serviced by the brcdTMCpuQStatsTMDeviceId.')
brcdTMCpuAggrQStatsEnquePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsEnquePkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsEnquePkts.setDescription('An aggregate count of all packets entering ingress queues on this traffic manager')
brcdTMCpuAggrQStatsEnqueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 9, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsEnqueBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsEnqueBytes.setDescription('An aggregate count of all bytes entering ingress queues on this traffic manager')
brcdTMCpuAggrQStatsDequePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsDequePkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsDequePkts.setDescription('A aggregate count of all packets dequeued from ingress queues and forwarded on this traffic Manager')
brcdTMCpuAggrQStatsDequeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsDequeBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsDequeBytes.setDescription('A aggregate count of all bytes dequeued from ingress queues and forwarded on this traffic manager')
brcdTMCpuAggrQStatsTotalQDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsTotalQDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsTotalQDiscardPkts.setDescription('A aggregate count of all packets failing to enter ingress queues on this traffic manager. This may be due to: * The queue reaching its maximum depth, WRED, or other reasons. * The network processor deciding to drop packets for reasons including: an unknown Layer-3 route, RPF, or segment filtering.')
brcdTMCpuAggrQStatsTotalQDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 9, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsTotalQDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsTotalQDiscardBytes.setDescription('An aggregate count of all bytes failing to enter ingress queues on this traffic manager. This may be due to: * The queue reaching its maximum depth, WRED, or other reasons. * The network processor deciding to drop packets for reasons including: an unknown Layer-3 route, RPF, or segment filtering')
brcdTMCpuAggrQStatsOldestDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 9, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsOldestDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsOldestDiscardPkts.setDescription('An aggregate count of all packets entering ingress queues on this traffic manager, but deleted afterwards due to buffer full.')
brcdTMCpuAggrQStatsOldestDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 9, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsOldestDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsOldestDiscardBytes.setDescription('An aggregate count of all bytes entering ingress queues on this traffic manager, but deleted afterwards due to buffer full')
brcdTMCpuAggrQStatsWREDDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 9, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsWREDDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsWREDDroppedPkts.setDescription('An aggregate count of all packets entering ingress queues on this traffic manager but dropped due to WRED.')
brcdTMCpuAggrQStatsWREDDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 14, 2, 1, 2, 9, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsWREDDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: brcdTMCpuAggrQStatsWREDDroppedBytes.setDescription('An agggregate count of all bytes entering ingress queues on this traffic manager but dropped due to WRED.')
mibBuilder.exportSymbols("BROCADE-NP-TM-STATS-MIB", brcdNPCSRAMErrorThresholdExceeded=brcdNPCSRAMErrorThresholdExceeded, brcdTMUcastQStatsTotalQDiscardBytes=brcdTMUcastQStatsTotalQDiscardBytes, brcdTMCpuQStatsEntry=brcdTMCpuQStatsEntry, brcdTMUcastQStatsDequePkts=brcdTMUcastQStatsDequePkts, brcdTMCpuQStatsMaxQDepthSinceLastRead=brcdTMCpuQStatsMaxQDepthSinceLastRead, brcdNPBufferErrorEgressCumulativeEvents=brcdNPBufferErrorEgressCumulativeEvents, brcdTMCpuQInfoPriority4CreditCount=brcdTMCpuQInfoPriority4CreditCount, brcdTMStatsEgressEnqueuePkts=brcdTMStatsEgressEnqueuePkts, brcdNPBufferErrorEgressThresholdExceeded=brcdNPBufferErrorEgressThresholdExceeded, brcdTMUcastQStatsEntry=brcdTMUcastQStatsEntry, brcdNPStatsRxPriority0And1Drop=brcdNPStatsRxPriority0And1Drop, brcdTMCpuQStatsEnqueBytes=brcdTMCpuQStatsEnqueBytes, brcdNPLPMRAMErrorThresholdExceeded=brcdNPLPMRAMErrorThresholdExceeded, brcdTMCpuAggrQStatsTotalQDiscardPkts=brcdTMCpuAggrQStatsTotalQDiscardPkts, brcdNPNotificationSupportErrorType=brcdNPNotificationSupportErrorType, brcdTMCpuQInfoEntry=brcdTMCpuQInfoEntry, brcdNPLPMRAMErrorSlotId=brcdNPLPMRAMErrorSlotId, brcdTMCpuAggrQStatsOldestDiscardPkts=brcdTMCpuAggrQStatsOldestDiscardPkts, brcdTMUcastQStatsSlotId=brcdTMUcastQStatsSlotId, brcdTMUcastQStatsWREDDroppedBytes=brcdTMUcastQStatsWREDDroppedBytes, brcdTMCpuQInfoPriority5QSize=brcdTMCpuQInfoPriority5QSize, brcdNPStatsRxBadPkts=brcdNPStatsRxBadPkts, brcdNPDebugStatGREIPv4RxCount=brcdNPDebugStatGREIPv4RxCount, brcdNPCSRAMErrorTable=brcdNPCSRAMErrorTable, brcdNPBuffUnderFlowErrorTrap=brcdNPBuffUnderFlowErrorTrap, brcdTMMcastStreamQStatsPriority=brcdTMMcastStreamQStatsPriority, brcdTMCpuQInfoPriority5CreditCount=brcdTMCpuQInfoPriority5CreditCount, brcdNPStatsRxUnicastPkts=brcdNPStatsRxUnicastPkts, brcdNPCSRAMErrorSlotId=brcdNPCSRAMErrorSlotId, brcdTMCpuQStatsTotalQDiscardPkts=brcdTMCpuQStatsTotalQDiscardPkts, brcdTMMcastQStatsOldestDiscardPkts=brcdTMMcastQStatsOldestDiscardPkts, brcdTMCpuAggrQStatsDequePkts=brcdTMCpuAggrQStatsDequePkts, brcdNPDebugStatIPv6DestAddrVCMiss=brcdNPDebugStatIPv6DestAddrVCMiss, brcdNPDebugStatIPv4DestAddrVCDrop=brcdNPDebugStatIPv4DestAddrVCDrop, brcdTMPortMappingUsedPorts=brcdTMPortMappingUsedPorts, brcdTMUcastQStatsDequeBytes=brcdTMUcastQStatsDequeBytes, brcdNPStatsTxIPv6Pkts=brcdNPStatsTxIPv6Pkts, brcdTMStatsIngressEnqueueBytes=brcdTMStatsIngressEnqueueBytes, brcdTMCpuQInfoPriority3CreditCount=brcdTMCpuQInfoPriority3CreditCount, brcdTMCpuQInfoPriority6QSize=brcdTMCpuQInfoPriority6QSize, brcdNPQosStatIfIndex=brcdNPQosStatIfIndex, brcdNPStatsRxLookupUnavailable=brcdNPStatsRxLookupUnavailable, brcdTMDestUcastQStatEnquePkts=brcdTMDestUcastQStatEnquePkts, brcdNPStatsTxIPv4Pkts=brcdNPStatsTxIPv4Pkts, brcdTMUcastQStatsWREDDroppedPkts=brcdTMUcastQStatsWREDDroppedPkts, brcdNPLPMRAMErrorDeviceId=brcdNPLPMRAMErrorDeviceId, brcdNPDebugStatEntry=brcdNPDebugStatEntry, brcdNPDebugStatMPLSRSVPTxCount=brcdNPDebugStatMPLSRSVPTxCount, brcdTMStatsEgressEnqueueBytes=brcdTMStatsEgressEnqueueBytes, brcdTMMcastStreamQStatsAddressType=brcdTMMcastStreamQStatsAddressType, brcdTMCpuQInfoPriority6CreditCount=brcdTMCpuQInfoPriority6CreditCount, brcdTMUcastQStatsOldestDiscardPkts=brcdTMUcastQStatsOldestDiscardPkts, brcdNPDebugStatDescription=brcdNPDebugStatDescription, brcdNPLPMRAMErrorDescription=brcdNPLPMRAMErrorDescription, brcdTMMcastQStatsTotalQDiscardPkts=brcdTMMcastQStatsTotalQDiscardPkts, brocadeNPTMStatsMIB=brocadeNPTMStatsMIB, brcdNPDebugStatGREIPv6RxCount=brcdNPDebugStatGREIPv6RxCount, brcdNPDebugStatIPv4HWFwdCount=brcdNPDebugStatIPv4HWFwdCount, brcdNPStatsRxMiscPkts=brcdNPStatsRxMiscPkts, brcdNPLPMRAMErrorCumulativeEvents=brcdNPLPMRAMErrorCumulativeEvents, brcdTMStatsEgressDiscardPkts=brcdTMStatsEgressDiscardPkts, brcdTMStatsIngressOldestDiscardPkts=brcdTMStatsIngressOldestDiscardPkts, brcdTMMcastStreamQStatsDequePkts=brcdTMMcastStreamQStatsDequePkts, brcdTMUcastQStatsEnqueBytes=brcdTMUcastQStatsEnqueBytes, brcdNPQosStatEgressPkts=brcdNPQosStatEgressPkts, brcdTMDestUcastQStatDestIfIndex=brcdTMDestUcastQStatDestIfIndex, brcdTMCpuQStatsDescription=brcdTMCpuQStatsDescription, brcdTMCpuQInfoPriority1CreditCount=brcdTMCpuQInfoPriority1CreditCount, brcdNPStatsTxSrcPortSupressDrop=brcdNPStatsTxSrcPortSupressDrop, brcdNPStatsTxBadPktsCnt=brcdNPStatsTxBadPktsCnt, brcdNPTMMIBObjects=brcdNPTMMIBObjects, brcdNPStatsRxRouteOnlyDrop=brcdNPStatsRxRouteOnlyDrop, brcdTMMcastStreamQStatsMaxQDepthSinceLastRead=brcdTMMcastStreamQStatsMaxQDepthSinceLastRead, brcdNPStatsTxRawGoodPkts=brcdNPStatsTxRawGoodPkts, brcdNPBufferErrorIngressCurrentEvents=brcdNPBufferErrorIngressCurrentEvents, brcdTMStatsIngressDequeueBytes=brcdTMStatsIngressDequeueBytes, brcdTMCpuQInfoPriority0CreditCount=brcdTMCpuQInfoPriority0CreditCount, brcdNPStatsRxIPv6Pkts=brcdNPStatsRxIPv6Pkts, brcdNPBufferErrorEgressCurrentEvents=brcdNPBufferErrorEgressCurrentEvents, brcdTMMcastStreamQStatsEnquePkts=brcdTMMcastStreamQStatsEnquePkts, brcdTMCpuQStatsWREDDroppedPkts=brcdTMCpuQStatsWREDDroppedPkts, brcdNPBufferErrorIngressThresholdExceeded=brcdNPBufferErrorIngressThresholdExceeded, brcdTMCpuQStatsTotalQDiscardBytes=brcdTMCpuQStatsTotalQDiscardBytes, brcdTMMcastStreamQStatsTotalQDiscardBytes=brcdTMMcastStreamQStatsTotalQDiscardBytes, brcdNPECCMultipleErrorTrap=brcdNPECCMultipleErrorTrap, brcdTMDestUcastQStatEnqueBytes=brcdTMDestUcastQStatEnqueBytes, brcdNPDebugStatRateLimitVPLSLocalLearnDrop=brcdNPDebugStatRateLimitVPLSLocalLearnDrop, brcdTMMcastQStatsTotalQDiscardBytes=brcdTMMcastQStatsTotalQDiscardBytes, brcdNPDebugStatIPv4VPNTx=brcdNPDebugStatIPv4VPNTx, brcdTMCpuQStatsTable=brcdTMCpuQStatsTable, brcdTMStatsTMDeviceId=brcdTMStatsTMDeviceId, brcdTMUcastQStatsDescription=brcdTMUcastQStatsDescription, brcdNPDebugStatIPv6DestAddrVCDrop=brcdNPDebugStatIPv6DestAddrVCDrop, brcdNPStatsRxPOSCtrlProtocolPkts=brcdNPStatsRxPOSCtrlProtocolPkts, brcdNPDebugStat6to4TxCount=brcdNPDebugStat6to4TxCount, brcdTMMcastStreamQStatsEntry=brcdTMMcastStreamQStatsEntry, brcdTMMcastQStatsEnquePkts=brcdTMMcastQStatsEnquePkts, brcdNPStatsTxPFCQMAPErrorDrop=brcdNPStatsTxPFCQMAPErrorDrop, brcdTMMcastStreamQStatsSource=brcdTMMcastStreamQStatsSource, brcdNPNotificationSupportDescription=brcdNPNotificationSupportDescription, brcdTMStatsTable=brcdTMStatsTable, brcdNPStatsRxPriority4And5Drop=brcdNPStatsRxPriority4And5Drop, brcdNPDebugStatGREInvalidDrop=brcdNPDebugStatGREInvalidDrop, brcdTMUcastQStatsEnquePkts=brcdTMUcastQStatsEnquePkts, brcdTMCpuQInfoPriority0QSize=brcdTMCpuQInfoPriority0QSize, brcdNPDebugStatVPLSSourceAddrPortVLANMiss=brcdNPDebugStatVPLSSourceAddrPortVLANMiss, brcdNPMemoryParityErrorTrap=brcdNPMemoryParityErrorTrap, brcdTMCpuQStatsPriority=brcdTMCpuQStatsPriority, brcdNPCSRAMErrorDescription=brcdNPCSRAMErrorDescription, brcdTMCpuQStatsOldestDiscardPkts=brcdTMCpuQStatsOldestDiscardPkts, brcdTMDestUcastQStatTable=brcdTMDestUcastQStatTable, brcdTMCpuQStatsDequeBytes=brcdTMCpuQStatsDequeBytes, brcdNPDebugStatVPLSTx=brcdNPDebugStatVPLSTx, brcdNPDebugStat6to4EnfSourceIngressChkMiss=brcdNPDebugStat6to4EnfSourceIngressChkMiss, brcdTMMcastStreamQStatsGroup=brcdTMMcastStreamQStatsGroup, brcdNPQosStatQosPriority=brcdNPQosStatQosPriority, brcdNPStatsRxPOSLinkDrop=brcdNPStatsRxPOSLinkDrop, brcdNPQosStatIngressPkts=brcdNPQosStatIngressPkts, brcdNPQosStatEgressBytes=brcdNPQosStatEgressBytes, brcdTMUcastQStatsOldestDiscardBytes=brcdTMUcastQStatsOldestDiscardBytes, brcdTMCpuAggrQStatsEnqueBytes=brcdTMCpuAggrQStatsEnqueBytes, brcdTMMcastStreamQStatsOldestDiscardPkts=brcdTMMcastStreamQStatsOldestDiscardPkts, brcdTMStatisticsInfo=brcdTMStatisticsInfo, brcdNPBufferErrorDeviceId=brcdNPBufferErrorDeviceId, brcdNPQosStatEntry=brcdNPQosStatEntry, brcdNPDebugStatSourceAddrPortVLANMiss=brcdNPDebugStatSourceAddrPortVLANMiss, brcdTMCpuAggrQStatsEntry=brcdTMCpuAggrQStatsEntry, brcdTMCpuAggrQStatsDequeBytes=brcdTMCpuAggrQStatsDequeBytes, brcdTMMcastQStatsQSize=brcdTMMcastQStatsQSize, brcdNPDebugStatDestAddrVCMiss=brcdNPDebugStatDestAddrVCMiss, brcdTMCpuAggrQStatsWREDDroppedBytes=brcdTMCpuAggrQStatsWREDDroppedBytes, brcdNPStatsTxReceiveFromTM=brcdNPStatsTxReceiveFromTM, brcdTMUcastQStatsPriority=brcdTMUcastQStatsPriority, brcdTMMcastStreamQStatsWREDDroppedBytes=brcdTMMcastStreamQStatsWREDDroppedBytes, brcdTMMcastStreamQStatsQSize=brcdTMMcastStreamQStatsQSize, brcdTMCpuQStatsQSize=brcdTMCpuQStatsQSize, brcdNPStatsTable=brcdNPStatsTable, brcdTMMcastQStatsMaxQDepthSinceLastRead=brcdTMMcastQStatsMaxQDepthSinceLastRead, brcdTMMcastQStatsTable=brcdTMMcastQStatsTable, brcdTMMcastQStatsCreditCount=brcdTMMcastQStatsCreditCount, brcdNPStatsRxIPv6SuppressRPFDrop=brcdNPStatsRxIPv6SuppressRPFDrop, brcdTMMcastStreamQStatsTotalQDiscardPkts=brcdTMMcastStreamQStatsTotalQDiscardPkts, brcdTMMcastStreamQStatsCreditCount=brcdTMMcastStreamQStatsCreditCount, brcdNPStatsRxPriority2And3Drop=brcdNPStatsRxPriority2And3Drop, brcdNPDebugStatNPDeviceId=brcdNPDebugStatNPDeviceId, brcdTMStatsIngressOldestDiscardBytes=brcdTMStatsIngressOldestDiscardBytes, brcdTMMcastQStatsEnqueBytes=brcdTMMcastQStatsEnqueBytes, brcdNPStatsRxIPv4Pkts=brcdNPStatsRxIPv4Pkts, brcdTMCpuQInfoTMDeviceId=brcdTMCpuQInfoTMDeviceId, brcdTMStatsEgressDiscardBytes=brcdTMStatsEgressDiscardBytes, brcdTMMcastQStatsPriority=brcdTMMcastQStatsPriority, brcdTMMcastQStatsSlotId=brcdTMMcastQStatsSlotId, brcdTMStatsIngressTotalQDiscardBytes=brcdTMStatsIngressTotalQDiscardBytes, brcdTMDestUcastQStatPriority=brcdTMDestUcastQStatPriority, brcdNPStatsTxIPv6Bytes=brcdNPStatsTxIPv6Bytes, PYSNMP_MODULE_ID=brocadeNPTMStatsMIB, brcdTMMcastStreamQStatsGroupPrefixLength=brcdTMMcastStreamQStatsGroupPrefixLength, brcdTMDestUcastQStatTotalQDiscardPkts=brcdTMDestUcastQStatTotalQDiscardPkts, brcdTMCpuAggrQStatsEnquePkts=brcdTMCpuAggrQStatsEnquePkts, brcdNPLPMRAMErrorIndex=brcdNPLPMRAMErrorIndex, brcdTMCpuQStatsOldestDiscardBytes=brcdTMCpuQStatsOldestDiscardBytes, brcdNPStatsRxACLDrop=brcdNPStatsRxACLDrop, brcdTMUcastQStatsCreditCount=brcdTMUcastQStatsCreditCount, brcdTMCpuQInfoPriority2QSize=brcdTMCpuQInfoPriority2QSize, brcdTMUcastQStatsMaxQDepthSinceLastRead=brcdTMUcastQStatsMaxQDepthSinceLastRead, brcdNPNotificationSupportSlotId=brcdNPNotificationSupportSlotId, brcdNPBufferErrorTable=brcdNPBufferErrorTable, brcdNPStatsRxForwardPkts=brcdNPStatsRxForwardPkts, brcdNPDebugStatSourceAddrVCMiss=brcdNPDebugStatSourceAddrVCMiss, brcdTMStatsIngressTotalQDiscardPkts=brcdTMStatsIngressTotalQDiscardPkts, brcdNPCSRAMErrorEntry=brcdNPCSRAMErrorEntry, brcdTMMcastQStatsDequeBytes=brcdTMMcastQStatsDequeBytes, brcdNPStatsIfIndex=brcdNPStatsIfIndex, brcdTMCpuQStatsWREDDroppedBytes=brcdTMCpuQStatsWREDDroppedBytes, brcdNPStatsTxMulticastPkts=brcdNPStatsTxMulticastPkts, brcdTMCpuQStatsDequePkts=brcdTMCpuQStatsDequePkts, brcdNPDebugStatGREIPv4TxCount=brcdNPDebugStatGREIPv4TxCount, brcdNPDebugStatGREMPLSTxCount=brcdNPDebugStatGREMPLSTxCount, brcdNPStatsRxDiscardPkts=brcdNPStatsRxDiscardPkts, brcdNPStatsTxPFCMulticastDrop=brcdNPStatsTxPFCMulticastDrop, brcdTMCpuQInfoTable=brcdTMCpuQInfoTable, brcdNPMemoryMiscErrorTrap=brcdNPMemoryMiscErrorTrap, brcdNPECCSingleErrorTrap=brcdNPECCSingleErrorTrap, brcdNPStatsTxACLDrop=brcdNPStatsTxACLDrop, brcdNPDebugStat6to4RxCount=brcdNPDebugStat6to4RxCount, brcdTMDestUcastQStatTotalQDiscardBytes=brcdTMDestUcastQStatTotalQDiscardBytes, brcdNPDebugStatGREEnfSourceIngressChkMiss=brcdNPDebugStatGREEnfSourceIngressChkMiss, brcdTMStatisticsInfoGroup=brcdTMStatisticsInfoGroup, brcdTMMcastStreamQStatsOldestDiscardBytes=brcdTMMcastStreamQStatsOldestDiscardBytes, brcdTMCpuQInfoSlotId=brcdTMCpuQInfoSlotId, brcdTMCpuQInfoPriority7QSize=brcdTMCpuQInfoPriority7QSize, brcdTMMcastQStatsOldestDiscardBytes=brcdTMMcastQStatsOldestDiscardBytes, brcdNPBufferErrorEntry=brcdNPBufferErrorEntry, brcdTMCpuQInfoPriority2CreditCount=brcdTMCpuQInfoPriority2CreditCount, brcdNPLockupRecoveryCount=brcdNPLockupRecoveryCount, brcdNPNotificationSupportTable=brcdNPNotificationSupportTable, brcdTMUcastQStatsTMDeviceId=brcdTMUcastQStatsTMDeviceId, brcdNPDebugStatGREMPLSRxCount=brcdNPDebugStatGREMPLSRxCount, brcdTMCpuQStatsCreditCount=brcdTMCpuQStatsCreditCount, brcdTMUcastQStatsQSize=brcdTMUcastQStatsQSize, brcdTMCpuAggrQStatsDescription=brcdTMCpuAggrQStatsDescription, brcdNPStatisticsInfo=brcdNPStatisticsInfo, brcdTMMcastQStatsTMDeviceId=brcdTMMcastQStatsTMDeviceId, brcdNPStatsEntry=brcdNPStatsEntry, brcdNPQosStatTable=brcdNPQosStatTable, brcdNPDebugStatPBBRxDropCount=brcdNPDebugStatPBBRxDropCount, brcdNPDebugStatGREIPv6TxCount=brcdNPDebugStatGREIPv6TxCount, brcdNPStatsTxUnicastPkts=brcdNPStatsTxUnicastPkts, brcdNPBufferErrorIngressCumulativeEvents=brcdNPBufferErrorIngressCumulativeEvents, brcdTMCpuAggrQStatsWREDDroppedPkts=brcdTMCpuAggrQStatsWREDDroppedPkts, brcdTMCpuQStatsEnquePkts=brcdTMCpuQStatsEnquePkts, brcdNPQosStatIngressBytes=brcdNPQosStatIngressBytes, brcdNPDebugStatTable=brcdNPDebugStatTable, brcdTMPortMappingMaxPorts=brcdTMPortMappingMaxPorts, brcdNPDebugStatPBBTxCount=brcdNPDebugStatPBBTxCount, brcdNPStatsRxBroadcastPkts=brcdNPStatsRxBroadcastPkts, brcdNPStatsRxIPv6RPFDropCount=brcdNPStatsRxIPv6RPFDropCount, brcdNPDebugStatIPv6HWFwdCount=brcdNPDebugStatIPv6HWFwdCount, brcdTMStatsEntry=brcdTMStatsEntry, brcdTMUcastQStatsDstIfIndex=brcdTMUcastQStatsDstIfIndex, brcdNPStatsTxPFCMTUExceedDrop=brcdNPStatsTxPFCMTUExceedDrop, brcdTMMcastQStatsDescription=brcdTMMcastQStatsDescription, brcdTMDestUcastQStatDequePkts=brcdTMDestUcastQStatDequePkts, brcdTMDestUcastQStatDequeBytes=brcdTMDestUcastQStatDequeBytes, brcdTMMcastQStatsWREDDroppedBytes=brcdTMMcastQStatsWREDDroppedBytes, brcdNPCSRAMErrorDeviceId=brcdNPCSRAMErrorDeviceId, brcdTMStatsIngressDequeuePkts=brcdTMStatsIngressDequeuePkts, brcdNPStatsTxSentToMACPkts=brcdNPStatsTxSentToMACPkts, brcdTMCpuQInfoPriority1QSize=brcdTMCpuQInfoPriority1QSize, brcdTMUcastQStatsTable=brcdTMUcastQStatsTable, brcdNPStatsRxPriority6And7Drop=brcdNPStatsRxPriority6And7Drop, brcdNPCSRAMErrorCurrentEvents=brcdNPCSRAMErrorCurrentEvents, brcdTMMcastQStatsWREDDroppedPkts=brcdTMMcastQStatsWREDDroppedPkts, brcdNPDebugStatSlotId=brcdNPDebugStatSlotId, brcdTMStatsTotalIngressPktsCnt=brcdTMStatsTotalIngressPktsCnt, brcdTMCpuQStatsType=brcdTMCpuQStatsType, brcdTMMcastStreamQStatsWREDDroppedPkts=brcdTMMcastStreamQStatsWREDDroppedPkts, brcdTMUcastQStatsTotalQDiscardPkts=brcdTMUcastQStatsTotalQDiscardPkts, brcdNPLPMRAMErrorName=brcdNPLPMRAMErrorName, brcdNPLPMRAMErrorTable=brcdNPLPMRAMErrorTable, brcdTMCpuAggrQStatsOldestDiscardBytes=brcdTMCpuAggrQStatsOldestDiscardBytes, brcdNPStatsTxPOSCtrlProtocolPkts=brcdNPStatsTxPOSCtrlProtocolPkts, brcdNPCSRAMErrorCumulativeEvents=brcdNPCSRAMErrorCumulativeEvents, brcdNPStatsRxIPv4Bytes=brcdNPStatsRxIPv4Bytes, brcdNPStatsRxIPv6Bytes=brcdNPStatsRxIPv6Bytes, brcdTMMcastStreamQStatsEnqueBytes=brcdTMMcastStreamQStatsEnqueBytes, brcdNPStatsRxMulticastPkts=brcdNPStatsRxMulticastPkts, brcdTMCpuQInfoPriority3QSize=brcdTMCpuQInfoPriority3QSize, brcdTMCpuAggrQStatsTable=brcdTMCpuAggrQStatsTable, brcdTMDestUcastQStatEntry=brcdTMDestUcastQStatEntry, brcdNPLPMRAMErrorEntry=brcdNPLPMRAMErrorEntry, brcdTMCpuQStatsTMDeviceId=brcdTMCpuQStatsTMDeviceId, brcdTMCpuQStatsSlotId=brcdTMCpuQStatsSlotId, brcdNPDebugStatUnkownMPLSDrop=brcdNPDebugStatUnkownMPLSDrop)
mibBuilder.exportSymbols("BROCADE-NP-TM-STATS-MIB", brcdTMMcastStreamQStatsTable=brcdTMMcastStreamQStatsTable, brcdNPBufferErrorDescription=brcdNPBufferErrorDescription, brcdTMMcastQStatsEntry=brcdTMMcastQStatsEntry, brcdNPStatsTxPOSLinkDrop=brcdNPStatsTxPOSLinkDrop, brcdTMStatsDescription=brcdTMStatsDescription, brcdNPDebugStatRateLimitVPLSRemoteLearnDrop=brcdNPDebugStatRateLimitVPLSRemoteLearnDrop, brcdNPStatsRxSendToTMPkts=brcdNPStatsRxSendToTMPkts, brcdNPStatsRxRawGoodPkts=brcdNPStatsRxRawGoodPkts, brcdNPDebugStatVLLTx=brcdNPDebugStatVLLTx, brcdTMMcastQStatsDequePkts=brcdTMMcastQStatsDequePkts, brcdNPDebugStatIPv6VPNTx=brcdNPDebugStatIPv6VPNTx, brcdTMCpuAggrQStatsTotalQDiscardBytes=brcdTMCpuAggrQStatsTotalQDiscardBytes, brcdNPDebugStatIPv4DestAddrVCMiss=brcdNPDebugStatIPv4DestAddrVCMiss, brcdNPStatsRxRPFDrop=brcdNPStatsRxRPFDrop, brcdNPDebugStatMulticastRPFDropCount=brcdNPDebugStatMulticastRPFDropCount, brcdTMMcastStreamQStatsDequeBytes=brcdTMMcastStreamQStatsDequeBytes, brcdNPNotificationSupportDeviceId=brcdNPNotificationSupportDeviceId, brcdTMStatsSlotId=brcdTMStatsSlotId, brcdNPStatsTxIPv4Bytes=brcdNPStatsTxIPv4Bytes, brcdNPDebugStatL2SourceAddrLearnDrop=brcdNPDebugStatL2SourceAddrLearnDrop, brcdTMStatsIngressEnqueuePkts=brcdTMStatsIngressEnqueuePkts, brcdNPIndex=brcdNPIndex, brcdNPDebugStatMPLSLsrTxCount=brcdNPDebugStatMPLSLsrTxCount, brcdNPGlobal=brcdNPGlobal, brcdNPNotificationSupportEntry=brcdNPNotificationSupportEntry, brcdNPStatsRxRoutedPktsDrop=brcdNPStatsRxRoutedPktsDrop, brcdNPTMMIBNotification=brcdNPTMMIBNotification, brcdNPDebugStatUnknowL3VPNIngressDrop=brcdNPDebugStatUnknowL3VPNIngressDrop, brcdTMCpuQInfoPriority4QSize=brcdTMCpuQInfoPriority4QSize, brcdNPLPMRAMErrorCurrentEvents=brcdNPLPMRAMErrorCurrentEvents, brcdTMPortMappingAvailablePorts=brcdTMPortMappingAvailablePorts, brcdTMCpuQInfoPriority7CreditCount=brcdTMCpuQInfoPriority7CreditCount, brcdNPStatsTxBroadcastPkts=brcdNPStatsTxBroadcastPkts, brcdNPBuffOverFlowErrorTrap=brcdNPBuffOverFlowErrorTrap, brcdNPBufferErrorSlotId=brcdNPBufferErrorSlotId, brcdNPStatsRxSuppressRPFDrop=brcdNPStatsRxSuppressRPFDrop)
