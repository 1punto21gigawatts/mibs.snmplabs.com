#
# PySNMP MIB module APPIAN-PPORT-DS3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-PPORT-DS3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:23:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acChassisCurrentTime, acChassisRingId = mibBuilder.importSymbols("APPIAN-CHASSIS-MIB", "acChassisCurrentTime", "acChassisRingId")
AcNodeId, acPport, AcOpStatus, AcPortNumber, AcSlotNumber, AcAdminStatus = mibBuilder.importSymbols("APPIAN-SMI-MIB", "AcNodeId", "acPport", "AcOpStatus", "AcPortNumber", "AcSlotNumber", "AcAdminStatus")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
PerfIntervalCount, = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, ModuleIdentity, MibIdentifier, Integer32, iso, Unsigned32, NotificationType, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, Counter64, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "MibIdentifier", "Integer32", "iso", "Unsigned32", "NotificationType", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "Counter64", "IpAddress")
TruthValue, TimeStamp, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TimeStamp", "TextualConvention", "DisplayString")
acDs3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5))
if mibBuilder.loadTexts: acDs3.setLastUpdated('0003190000Z')
if mibBuilder.loadTexts: acDs3.setOrganization('Appian Communications, Inc.')
if mibBuilder.loadTexts: acDs3.setContactInfo('Brian Johnson')
if mibBuilder.loadTexts: acDs3.setDescription('The is the MIB module that describes DS3 interfaces and objects for Appian Communications OSAP2k platforms. The tables in this DS3 mib are NOT SHARED between OSAPs.')
acDs3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1), )
if mibBuilder.loadTexts: acDs3ConfigTable.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigTable.setDescription('The Appian DS3 Configuration table. This table is created by EMS/CLI.')
acDs3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-DS3-MIB", "acDs3ConfigNodeId"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3ConfigSlot"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3ConfigPort"))
if mibBuilder.loadTexts: acDs3ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigEntry.setDescription('An entry in the Appian DS3 Configuration table.')
acDs3ConfigNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3ConfigNodeId.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acDs3ConfigSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3ConfigSlot.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigSlot.setDescription('The physical slot number for the port.')
acDs3ConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3ConfigPort.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigPort.setDescription('The physical port number for the port.')
acDs3ConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 4), AcAdminStatus().clone('inactivate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigAdminStatus.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigAdminStatus.setDescription('Appian Administrative Status attribute used to set the provisioning state as either activate(1), inactivate(2) or delete(3). Refer to the Appian-SMI.mib file for additional information.')
acDs3ConfigOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 5), AcOpStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigOpStatus.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigOpStatus.setDescription('The operational or actual state of this DS3.')
acDs3ConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3Access", 1), ("ds3Network", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigType.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigType.setDescription('The field defines the type of DS3 port that this instance configures. The type can be either Access or Network.')
acDs3ConfigTimeElapsedInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigTimeElapsedInterval.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigTimeElapsedInterval.setDescription("The number of seconds that have elapsed since the beginning of the near end current error- measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
acDs3ConfigValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigValidIntervals.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigValidIntervals.setDescription('The number of previous near end intervals for which data was collected. The value will be 96 unless the interface was brought online within the last 24 hours, in which case the value will be the number of complete 15 minute near end intervals since the interface has been online. In the case where the agent is a proxy, it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
acDs3ConfigTimeElapsedDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigTimeElapsedDay.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigTimeElapsedDay.setDescription("The number of seconds that have elapsed since the beginning of the near end current day error- measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
acDs3ConfigValidDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigValidDays.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigValidDays.setDescription('The number of previous near end intervals for which data was collected. The value will be 30 unless the interface was brought online within the last 30 days, in which case the value will be the number of complete 24 hour near end days since the interface has been online. In the case where the agent is a proxy, it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
acDs3ConfigTimeElapsedFarEndInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigTimeElapsedFarEndInterval.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigTimeElapsedFarEndInterval.setDescription("The number of seconds that have elapsed since the beginning of the far end current error-measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
acDs3ConfigValidFarEndIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigValidFarEndIntervals.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigValidFarEndIntervals.setDescription('The number of previous far end intervals for which data was collected. The value will be 96 unless the interface was brought online within the last 24 hours, in which case the value will be the number of complete 15 minute far end intervals since the interface has been online.')
acDs3ConfigTimeElapsedFarEndDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigTimeElapsedFarEndDay.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigTimeElapsedFarEndDay.setDescription("The number of seconds that have elapsed since the beginning of the far end current day error- measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current day exceeds the maximum value, the agent will return the maximum value.")
acDs3ConfigValidFarEndDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigValidFarEndDays.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigValidFarEndDays.setDescription('The number of previous far end days for which data was collected. The value will be 30 unless the interface was brought online within the last 30 days, in which case the value will be the number of complete 24 hour far end days since the interface has been online. In the case where the agent is a proxy, it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
acDs3ConfigLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ds3other", 1), ("ds3M23", 2), ("ds3SYNTRAN", 3), ("ds3CbitParity", 4), ("ds3ClearChannel", 5))).clone('ds3CbitParity')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigLineType.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigLineType.setDescription('This variable indicates the variety of DS3 C-bit application implementing this interface. The type of interface affects the interpretation of the usage and error statistics. The rate of DS3 is 44.736 Mbps. The ds3ClearChannel value means that the C-bits are not used except for sending/ receiving AIS. The values, in sequence, describe: TITLE: SPECIFICATION: ds3M23 ANSI T1.107-1988 [9] ds3SYNTRAN ANSI T1.107-1988 [9] ds3CbitParity ANSI T1.107a-1990 [9a] ds3ClearChannel ANSI T1.102-1987 [8] ')
acDs3ConfigLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ds3Other", 1), ("ds3B3ZS", 2), ("e3HDB3", 3))).clone('ds3B3ZS')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigLineCoding.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigLineCoding.setDescription('This variable describes the variety of Zero Code Suppression used on this interface, which in turn affects a number of its characteristics. ds3B3ZS and e3HDB3 refer to the use of specified patterns of normal bits and bipolar violations which are used to replace sequences of zero bits of a specified length.')
acDs3ConfigSendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ds3SendNoCode", 1), ("ds3SendLineCode", 2), ("ds3SendPayloadCode", 3), ("ds3SendResetCode", 4), ("ds3SendTestPattern", 5))).clone('ds3SendNoCode')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigSendCode.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigSendCode.setDescription('This variable indicates what type of code is being sent across the DS3 interface by the device. Setting this variable causes the interface to begin sending the code requested. The values mean: ds3SendNoCode sending looped or normal data ds3SendLineCode sending a request for a line loopback ds3SendPayloadCode sending a request for a payload loopback (i.e., all DS1/E1s in a DS3 frame) ds3SendResetCode sending a loopback deactivation request ds3SendTestPattern sending a test pattern.')
acDs3ConfigCircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigCircuitIdentifier.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigCircuitIdentifier.setDescription("This variable contains the transmission vendor's circuit identifier, for the purpose of facilitating troubleshooting.")
acDs3ConfigLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ds3NoLoop", 1), ("ds3PayloadLoop", 2), ("ds3LineLoop", 3), ("ds3OtherLoop", 4), ("ds3InwardLoop", 5))).clone('ds3NoLoop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigLoopbackConfig.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigLoopbackConfig.setDescription("This variable represents the desired loopback configuration of the DS3 interface. The values mean: ds3NoLoop Not in the loopback state. A device that is not capable of performing a loopback on the interface shall always return this as its value. ds3PayloadLoop The received signal at this interface is looped through the device. Typically the received signal is looped back for retransmission after it has passed through the device's framing function. ds3LineLoop The received signal at this interface does not go through the device (minimum penetration) but is looped back out. ds3OtherLoop Loopbacks that are not defined here. ds3InwardLoop The sent signal at this interface is looped back through the device.")
acDs3ConfigLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigLineStatus.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigLineStatus.setDescription('This variable indicates the Line Status of the interface. It contains loopback state information and failure state information. The ds3LineStatus is a bit map represented as a sum, therefore, it can represent multiple failures and a loopback (see acDs3LoopbackConfig object for the type of loopback) simultaneously. The ds3NoAlarm must be set if and only if no other flag is set. If the ds3loopbackState bit is set, the loopback in effect can be determined from the ds3loopbackConfig object. The various bit positions are: 1 ds3NoAlarm No alarm present 2 ds3RcvRAIFailure Receiving Yellow/Remote Alarm Indication 4 ds3XmitRAIAlarm Transmitting Yellow/Remote Alarm Indication 8 ds3RcvAIS Receiving AIS failure state 16 ds3XmitAIS Transmitting AIS 32 ds3LOF Receiving LOF failure state 64 ds3LOS Receiving LOS failure state 128 ds3LoopbackState Looping the received signal 256 ds3RcvTestCode Receiving a Test Pattern 512 ds3OtherFailure any line status not defined here 1024 ds3UnavailSigState Near End in Unavailable Signal State 2048 ds3NetEquipOOS Carrier Equipment Out of Service')
acDs3ConfigTransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("throughTiming", 3))).clone('localTiming')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigTransmitClockSource.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigTransmitClockSource.setDescription('The source of Transmit Clock. loopTiming indicates that the recovered receive clock is used as the transmit clock. localTiming indicates that a local clock source is used or that an external clock is attached to the box containing the interface. throughTiming indicates that transmit clock is derived from the recovered receive clock of another DS3 interface.')
acDs3ConfigInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigInvalidIntervals.setDescription('The number of intervals in the range from 0 to acDs3ConfigValidIntervals for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
acDs3ConfigInvalidDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigInvalidDays.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigInvalidDays.setDescription('The number of days in the range from 0 to acDs3ConfigValidDays for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
acDs3ConfigInvalidFarEndIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigInvalidFarEndIntervals.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigInvalidFarEndIntervals.setDescription('The number of intervals in the range from 0 to acDs3ConfigValidFarEndIntervals for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
acDs3ConfigInvalidFarEndDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigInvalidFarEndDays.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigInvalidFarEndDays.setDescription('The number of days in the range from 0 to acDs3ConfigValidFarEndDays for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
acDs3ConfigLineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setUnits('meters').setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigLineLength.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigLineLength.setDescription('The length of the ds3 line in meters. This object provides information for line build out circuitry if it exists and can use this object to adjust the line build out.')
acDs3ConfigLineStatusLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 27), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigLineStatusLastChange.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigLineStatusLastChange.setDescription("The value of MIB II's sysUpTime object at the time this DS3 entered its current line status state. If the current state was entered prior to the last re-initialization of the proxy-agent, then this object contains a zero value.")
acDs3ConfigLineStatusChangeTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigLineStatusChangeTrapEnable.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigLineStatusChangeTrapEnable.setDescription('Indicates whether acDs3ConfigLineStatusChange traps should be generated for this interface.')
acDs3ConfigLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigLoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigLoopbackStatus.setDescription('This variable represents the current state of the loopback on the DS3 interface. It contains information about loopbacks established by a manager and remotely from the far end. The acDs3ConfigLoopbackStatus is a bit map represented as a sum, therefore is can represent multiple loopbacks simultaneously. The various bit positions are: 1 ds3NoLoopback 2 ds3NearEndPayloadLoopback 4 ds3NearEndLineLoopback 8 ds3NearEndOtherLoopback 16 ds3NearEndInwardLoopback 32 ds3FarEndPayloadLoopback 64 ds3FarEndLineLoopback')
acDs3ConfigChannelization = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledDs1", 2), ("enabledDs2", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigChannelization.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigChannelization.setDescription('Indicates whether this ds3/e3 is channelized or unchannelized. The value of enabledDs1 indicates that this is a DS3 channelized into DS1s. The value of enabledDs3 indicated that this is a DS3 channelized into DS2s. ')
acDs3ConfigDs1ForRemoteLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 29))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigDs1ForRemoteLoop.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigDs1ForRemoteLoop.setDescription('Indicates which ds1/e1 on this ds3/e3 will be indicated in the remote ds1 loopback request. A value of 0 means no DS1 will be looped. A value of 29 means all ds1s/e1s will be looped.')
acDs3ConfigFarEndEquipCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigFarEndEquipCode.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigFarEndEquipCode.setDescription('This is the Far End Equipment Identification code that describes the specific piece of equipment. It is sent within the Path Identification Message (C-bits) from the remote end.')
acDs3ConfigFarEndLocationIDCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigFarEndLocationIDCode.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigFarEndLocationIDCode.setDescription('This is the Far End Location Identification code that describes the specific location of the equipment. It is sent within the Path Identification Message (C-bits) from the remote end.')
acDs3ConfigFarEndFrameIDCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigFarEndFrameIDCode.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigFarEndFrameIDCode.setDescription('This is the Far End Frame Identification code that identifies where the equipment is located within a building at a given location. It is sent within the Path Identification Message (C-bits) from the remote end.')
acDs3ConfigFarEndUnitCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigFarEndUnitCode.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigFarEndUnitCode.setDescription('This is the Far End code that identifies the equipment location within a bay. It is sent within the Path Identification Message (C-bits) from the remote end.')
acDs3ConfigFarEndFacilityIDCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3ConfigFarEndFacilityIDCode.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigFarEndFacilityIDCode.setDescription('This code identifies a specific Far End DS3 path. It is sent within the Path Identification Message (C-bits) from the remote end.')
acDs3ConfigInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('DS-3/TDM Interface')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs3ConfigInterfaceName.setStatus('current')
if mibBuilder.loadTexts: acDs3ConfigInterfaceName.setDescription('A user configurable interface name which uniquely identifies this physical interface. The name can be up to 64 bytes in length.')
acDs3IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2), )
if mibBuilder.loadTexts: acDs3IntervalTable.setStatus('current')
if mibBuilder.loadTexts: acDs3IntervalTable.setDescription('The Appian DS3 Interval Table contains various statistics collected by the DS3 Interface over the previous 24 hours of operation as well as over the current period. The past 24 hours are broken into 96 completed 15 minute intervals. The first row in this table (identified by acDs3IntervalNumber=1) represents the current interval statistics. The next 96 rows of this table (represented by acDs3IntervalNubmer=2..97) represents one of the past 15 minute intervals. The final row (identified by acDs3IntervalNumber=98) is the total of all the past intervals (2..97). This table is created automatically.')
acDs3IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-DS3-MIB", "acDs3IntervalNodeId"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3IntervalSlot"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3IntervalPort"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3IntervalNumber"))
if mibBuilder.loadTexts: acDs3IntervalEntry.setStatus('current')
if mibBuilder.loadTexts: acDs3IntervalEntry.setDescription('An entry in the Appian DS3 Interval table.')
acDs3IntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3IntervalNodeId.setStatus('current')
if mibBuilder.loadTexts: acDs3IntervalNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acDs3IntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3IntervalSlot.setStatus('current')
if mibBuilder.loadTexts: acDs3IntervalSlot.setDescription('The physical slot number for the port.')
acDs3IntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3IntervalPort.setStatus('current')
if mibBuilder.loadTexts: acDs3IntervalPort.setDescription('The physical port number for the port.')
acDs3IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3IntervalNumber.setStatus('current')
if mibBuilder.loadTexts: acDs3IntervalNumber.setDescription('A number between 1 and 98, where 1 is the current 15 minute interval in progress, 2 is the most recently completed 15 minute interval and 97 is the 15 minutes interval completed 23 hours and 45 minutes prior to interval 2, and 98 is the total of all the completed intervals (2..97).')
acDs3IntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalValidStats.setStatus('current')
if mibBuilder.loadTexts: acDs3IntervalValidStats.setDescription('This variable indicates if the data for this interval is valid.')
acDs3IntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3IntervalResetStats.setStatus('current')
if mibBuilder.loadTexts: acDs3IntervalResetStats.setDescription('This variable allows the data from the current interval (acDs3IntervalIndex=1) to be reset. The acDs3IntervalValidFlag will be set to False after the reset for the current interval. This field has no effect on acDs3IntervalIndex=2..98. This field will always show a value of False when read.')
acDs3IntervalPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalPESs.setStatus('current')
if mibBuilder.loadTexts: acDs3IntervalPESs.setDescription('The counter associated with the number of P-bit Errored Seconds.')
acDs3IntervalPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalPSESs.setStatus('current')
if mibBuilder.loadTexts: acDs3IntervalPSESs.setDescription('The counter associated with the number of P-bit Severely Errored Seconds.')
acDs3IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalSEFSs.setStatus('current')
if mibBuilder.loadTexts: acDs3IntervalSEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds.')
acDs3IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acDs3IntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds. This object may decrease if the occurance of unavailable seconds occurs across an inteval boundary.')
acDs3IntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalLCVs.setStatus('current')
if mibBuilder.loadTexts: acDs3IntervalLCVs.setDescription('The counter associated with the number of Line Coding Violations.')
acDs3IntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalPCVs.setStatus('current')
if mibBuilder.loadTexts: acDs3IntervalPCVs.setDescription('The counter associated with the number of P-bit Coding Violations.')
acDs3IntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalLESs.setStatus('current')
if mibBuilder.loadTexts: acDs3IntervalLESs.setDescription('The number of Line Errored Seconds (BPVs or illegal zero sequences).')
acDs3IntervalCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalCCVs.setStatus('current')
if mibBuilder.loadTexts: acDs3IntervalCCVs.setDescription('The number of C-bit Coding Violations.')
acDs3IntervalCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalCESs.setStatus('current')
if mibBuilder.loadTexts: acDs3IntervalCESs.setDescription('The number of C-bit Errored Seconds.')
acDs3IntervalCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 2, 1, 16), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3IntervalCSESs.setStatus('current')
if mibBuilder.loadTexts: acDs3IntervalCSESs.setDescription('The number of C-bit Severely Errored Seconds.')
acDs3DayTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3), )
if mibBuilder.loadTexts: acDs3DayTable.setStatus('current')
if mibBuilder.loadTexts: acDs3DayTable.setDescription('The Appian DS3 Day Table contains various statistics collected by the DS3 Interface over the previous 30 days of operation as well as over the current day period. The first row in this table (identified by acDs3DayNumber=1) represents the current day statistics. The next 30 rows of this table (represented by acDs3DayNubmer=2..31) represents one of the 24 hour day intervals. This table is created automatically.')
acDs3DayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1), ).setIndexNames((0, "APPIAN-PPORT-DS3-MIB", "acDs3DayNodeId"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3DaySlot"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3DayPort"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3DayNumber"))
if mibBuilder.loadTexts: acDs3DayEntry.setStatus('current')
if mibBuilder.loadTexts: acDs3DayEntry.setDescription('An entry in the Appian DS3 Day table.')
acDs3DayNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3DayNodeId.setStatus('current')
if mibBuilder.loadTexts: acDs3DayNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acDs3DaySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3DaySlot.setStatus('current')
if mibBuilder.loadTexts: acDs3DaySlot.setDescription('The physical slot number for the port.')
acDs3DayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3DayPort.setStatus('current')
if mibBuilder.loadTexts: acDs3DayPort.setDescription('The physical port number for the port.')
acDs3DayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3DayNumber.setStatus('current')
if mibBuilder.loadTexts: acDs3DayNumber.setDescription('A number between 1 and 31, where 1 is the current 24 hour day interval in progress, 2 is the most recently completed 24 hour day interval and 31 is the 24 hour day interval completed 29 days prior to interval 2.')
acDs3DayValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DayValidStats.setStatus('current')
if mibBuilder.loadTexts: acDs3DayValidStats.setDescription('This variable indicates if the data for this interval is valid.')
acDs3DayResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3DayResetStats.setStatus('current')
if mibBuilder.loadTexts: acDs3DayResetStats.setDescription('This variable allows the data from the day (acDs3DayIndex=1) to be reset. The acDs3DayValidFlag will be set to False after the reset for the current day. This field has no effect on acDs3DayIndex=2..31. This field will always show a value of False when read.')
acDs3DayPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DayPESs.setStatus('current')
if mibBuilder.loadTexts: acDs3DayPESs.setDescription('The counter associated with the number of P-bit Errored Seconds.')
acDs3DayPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DayPSESs.setStatus('current')
if mibBuilder.loadTexts: acDs3DayPSESs.setDescription('The counter associated with the number of P-bit Severely Errored Seconds.')
acDs3DaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DaySEFSs.setStatus('current')
if mibBuilder.loadTexts: acDs3DaySEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds.')
acDs3DayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DayUASs.setStatus('current')
if mibBuilder.loadTexts: acDs3DayUASs.setDescription('The counter associated with the number of Unavailable Seconds. This object may decrease if the occurance of unavailable seconds occurs across an inteval boundary.')
acDs3DayLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DayLCVs.setStatus('current')
if mibBuilder.loadTexts: acDs3DayLCVs.setDescription('The counter associated with the number of Line Coding Violations.')
acDs3DayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DayPCVs.setStatus('current')
if mibBuilder.loadTexts: acDs3DayPCVs.setDescription('The counter associated with the number of P-bit Coding Violations.')
acDs3DayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DayLESs.setStatus('current')
if mibBuilder.loadTexts: acDs3DayLESs.setDescription('The number of Line Errored Seconds (BPVs or illegal zero sequences).')
acDs3DayCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DayCCVs.setStatus('current')
if mibBuilder.loadTexts: acDs3DayCCVs.setDescription('The number of C-bit Coding Violations.')
acDs3DayCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DayCESs.setStatus('current')
if mibBuilder.loadTexts: acDs3DayCESs.setDescription('The number of C-bit Errored Seconds.')
acDs3DayCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 3, 1, 16), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3DayCSESs.setStatus('current')
if mibBuilder.loadTexts: acDs3DayCSESs.setDescription('The number of C-bit Severely Errored Seconds.')
acDs3FarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4), )
if mibBuilder.loadTexts: acDs3FarEndIntervalTable.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndIntervalTable.setDescription('The Appian DS3 Far End Interval Table contains various statistics collected by each DS3 Interface over the previous 24 hours of operation as well as over the current period. The past 24 hours are broken into 96 completed 15 minute intervals. The first row in this table (identified by acDs3FarEndIntervalNumber=1) represents the current interval statistics. The next 96 rows in this table (represented by acDs3FarEndIntervalNumber=2..97) represents one of the past 15 minute intervals. The final row (identified by acDs3FarEndIntervalNumber=98) is the total of all the past intervals (2..97). This table is created automatically.')
acDs3FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1), ).setIndexNames((0, "APPIAN-PPORT-DS3-MIB", "acDs3FarEndIntervalNodeId"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3FarEndIntervalSlot"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3FarEndIntervalPort"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3FarEndIntervalNumber"))
if mibBuilder.loadTexts: acDs3FarEndIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndIntervalEntry.setDescription('An entry in the DS3 Far End Interval table.')
acDs3FarEndIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3FarEndIntervalNodeId.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndIntervalNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acDs3FarEndIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3FarEndIntervalSlot.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndIntervalSlot.setDescription('The physical slot number for the port.')
acDs3FarEndIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3FarEndIntervalPort.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndIntervalPort.setDescription('The physical port number for the port.')
acDs3FarEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3FarEndIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndIntervalNumber.setDescription('A number between 1 and 96, where 1 is the current 15 minute interval in progress, 2 is the most recently completed 15 minute interval and 97 is the 15 minutes interval completed 23 hours and 45 minutes prior to interval 2, and 98 is the total of all completed intervals (2..97).')
acDs3FarEndIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3FarEndIntervalValidStats.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndIntervalValidStats.setDescription('This variable indicates if the data for this interval is valid.')
acDs3FarEndIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3FarEndIntervalResetStats.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndIntervalResetStats.setDescription('This variable allows the data for the current interval (acDs3FarEndIntervalIndex=1) to be reset. The acSdx3FarEndIntervalValidFlag will be set to False after the reset for the current interval. This field has no effect on acDs3FarEndIntervalIndex 2..98. This field will always show a vluae of false when read.')
acDs3FarEndIntervalCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3FarEndIntervalCESs.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndIntervalCESs.setDescription('The counter associated with the number of Far End C-bit Errored Seconds encountered by a DS3 interface. In the case where the agent is a proxy and data is not available, return noSuchInstance.')
acDs3FarEndIntervalCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3FarEndIntervalCSESs.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndIntervalCSESs.setDescription('The counter associated with the number of Far End C-bit Severely Errored Seconds.')
acDs3FarEndIntervalCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3FarEndIntervalCCVs.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndIntervalCCVs.setDescription('The counter associated with the number of Far End C-bit Coding Violations reported via the far end block error count.')
acDs3FarEndIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 4, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3FarEndIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndIntervalUASs.setDescription('The counter associated with the number of Far End unavailable seconds.')
acDs3FarEndDayTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5), )
if mibBuilder.loadTexts: acDs3FarEndDayTable.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndDayTable.setDescription('The Appian DS3 Far End Day Table contains various statistics collected by each DS3 Interface over the previous 30 days of operation as well as over the current period. The first row in this table (identified by acDs3FarEndDayNumber=1) represents the current day statistics. The next 30 rows in this table (represented by acDs3FarEndDayNumber=2..31) represents one of the past 24 hour days. This table is created automatically.')
acDs3FarEndDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1), ).setIndexNames((0, "APPIAN-PPORT-DS3-MIB", "acDs3FarEndDayNodeId"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3FarEndDaySlot"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3FarEndDayPort"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3FarEndDayNumber"))
if mibBuilder.loadTexts: acDs3FarEndDayEntry.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndDayEntry.setDescription('An entry in the DS3 Far End Day table.')
acDs3FarEndDayNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3FarEndDayNodeId.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndDayNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acDs3FarEndDaySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3FarEndDaySlot.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndDaySlot.setDescription('The physical port number for the port.')
acDs3FarEndDayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3FarEndDayPort.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndDayPort.setDescription('The physical port number for the port.')
acDs3FarEndDayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3FarEndDayNumber.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndDayNumber.setDescription('A number between 1 and 31, where 1 is the current 24 hour day interval in progress, 2 is the most recently completed 24 hour day and 31 is the 24 hour day 29 days prior to interval 2.')
acDs3FarEndDayValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3FarEndDayValidStats.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndDayValidStats.setDescription('This variable indicates if the data for this interval is valid.')
acDs3FarEndDayResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3FarEndDayResetStats.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndDayResetStats.setDescription('This variable allows the data for the current interval (acDs3FarEndDayIndex=1) to be reset. The acDs3FarEndDayValidFlag will be set to False after the reset for the current day. This field has no effect on acDs3FarEndDayIndex 2..31. This field will always show a vluae of false when read.')
acDs3FarEndDayCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3FarEndDayCESs.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndDayCESs.setDescription('The counter associated with the number of Far End C-bit Errored Seconds encountered by a DS3 interface. In the case where the agent is a proxy and data is not available, return noSuchInstance.')
acDs3FarEndDayCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3FarEndDayCSESs.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndDayCSESs.setDescription('The counter associated with the number of Far End C-bit Severely Errored Seconds.')
acDs3FarEndDayCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3FarEndDayCCVs.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndDayCCVs.setDescription('The counter associated with the number of Far End C-bit Coding Violations reported via the far end block error count.')
acDs3FarEndDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 5, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs3FarEndDayUASs.setStatus('current')
if mibBuilder.loadTexts: acDs3FarEndDayUASs.setDescription('The counter associated with the number of Far End unavailable seconds.')
acDs3ThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6), )
if mibBuilder.loadTexts: acDs3ThresholdTable.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdTable.setDescription('The Appian DS3 Threshold Table allows the user to configure the threshold values for each of the statistics found in the interval table base on the 15 minute interval on the day. This table is created automatically.')
acDs3ThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1), ).setIndexNames((0, "APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), (0, "APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdEntry.setDescription('An entry in the Appian DS1 Threshold table.')
acDs3ThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3ThresholdNodeId.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acDs3ThresholdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3ThresholdSlot.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdSlot.setDescription('The physical slot number for the port.')
acDs3ThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs3ThresholdPort.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdPort.setDescription('The physical port number for the port.')
acDs3ThresholdNEIntervalPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalPESs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalPESs.setDescription('The threshold value for near end interval number of P-Bit Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdNEIntervalPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalPSESs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalPSESs.setDescription('The threshold value for the near end interval number of P-Bit Severely Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdNEIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalSEFSs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalSEFSs.setDescription('The threshold for the near end interval number of Severely Errored Framing Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdNEIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalUASs.setDescription('The threshold for the near end interval number of Unavailable Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdNEIntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalLCVs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalLCVs.setDescription('The threshold for the near end interval number of Line Coding Violations. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdNEIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalPCVs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalPCVs.setDescription('The threshold for the near end interval number of Path Coding Violations. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdNEIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalLESs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalLESs.setDescription('The threshold value for the near end interval number of Line Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdNEIntervalCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalCCVs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalCCVs.setDescription('The threshold for the near end interval number of C-Bit Coding Violations. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdNEIntervalCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalCESs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalCESs.setDescription('The threshold for the near end interval number of C-Bit Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdNEIntervalCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalCSESs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdNEIntervalCSESs.setDescription('The threshold for the near end interval number of C-Bit Severely Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdNEDayPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEDayPESs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdNEDayPESs.setDescription('The threshold value for near end day number of P-Bit Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdNEDayPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEDayPSESs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdNEDayPSESs.setDescription('The threshold for the near end day number of P-Bit Severely Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdNEDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEDaySEFSs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdNEDaySEFSs.setDescription('The threshold value for the near end day number of Severely Errored Framing Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdNEDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEDayUASs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdNEDayUASs.setDescription('The threshold value for the near end day number of Unavailable Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdNEDayLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEDayLCVs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdNEDayLCVs.setDescription('The threshold for the near end day number of Line Coding Violations. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdNEDayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEDayPCVs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdNEDayPCVs.setDescription('The threshold value for the near end day number of Path Coding Violations. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdNEDayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEDayLESs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdNEDayLESs.setDescription('The threshold for the near end day number of Line Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdNEDayCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEDayCCVs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdNEDayCCVs.setDescription('The threshold for the near end day number of C-Bit Coding Violations. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdNEDayCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEDayCESs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdNEDayCESs.setDescription('The threshold for the near end day number of C-Bit Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdNEDayCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdNEDayCSESs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdNEDayCSESs.setDescription('The threshold for the near end day number of C-Bit Severely Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdFEIntervalCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdFEIntervalCESs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdFEIntervalCESs.setDescription('The threshold for the far end interval counter associated with the number of Far End C-bit Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdFEIntervalCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdFEIntervalCSESs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdFEIntervalCSESs.setDescription('The threshold for the far end interval counter associated with the number of Far End C-bit Severely Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdFEIntervalCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdFEIntervalCCVs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdFEIntervalCCVs.setDescription('The threshold for the far end interval counter associated with the number of Far End C-bit Coding Violations reported via the far end block error count. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdFEIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdFEIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdFEIntervalUASs.setDescription('The threshold for the far end interval counter associated with the number of Far End unavailable seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdFEDayCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdFEDayCESs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdFEDayCESs.setDescription('The threshold for the far end day counter associated with the number of Far End C-bit Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdFEDayCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdFEDayCSESs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdFEDayCSESs.setDescription('The threshold for the far end day counter associated with the number of Far End C-bit Severely Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdFEDayCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdFEDayCCVs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdFEDayCCVs.setDescription('The threshold for the far end day counter associated with the number of Far End C-bit Coding Violations reported via the far end block error count. A value of 0 disables the threshold mechanism for this attribute.')
acDs3ThresholdFEDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 6, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs3ThresholdFEDayUASs.setStatus('current')
if mibBuilder.loadTexts: acDs3ThresholdFEDayUASs.setDescription('The threshold for the far end day counter associated with the number of Far End unavailable seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs3Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0))
acDs3LineStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigPort"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigLineStatus"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigLineStatusLastChange"))
if mibBuilder.loadTexts: acDs3LineStatusChange.setStatus('current')
if mibBuilder.loadTexts: acDs3LineStatusChange.setDescription('An acLogcialDs3LineStatusChange trap is sent when the value of an instance acDs3ConfigLineStatus changes. It can be utilized by an NMS to trigger polls.')
acDs3StatsResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 2)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigPort"))
if mibBuilder.loadTexts: acDs3StatsResetTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3StatsResetTrap.setDescription('The Ds3 statistics for this interface have been reset to zero (0) which may effect long term trending functions monitoring this interface.')
acDs3CfgErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 3)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigPort"))
if mibBuilder.loadTexts: acDs3CfgErrorTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3CfgErrorTrap.setDescription('A configuration request to the Ds3 configuration table for an interface has been detected as invalid or corrupt.')
acDs3LinkDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 4)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigPort"))
if mibBuilder.loadTexts: acDs3LinkDownTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3LinkDownTrap.setDescription('The link for this ds3 interface has obtained sync.')
acDs3LinkUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 5)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ConfigPort"))
if mibBuilder.loadTexts: acDs3LinkUpTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3LinkUpTrap.setDescription('The link for this ds3 interface has lost sync.')
acDs3ExceededThresholdNEIntervalPESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 6)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalPESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalPESsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdNEIntervalPSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 7)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalPSESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalPSESsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdNEIntervalSEFSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 8)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalSEFSsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalSEFSsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdNEIntervalUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 9)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalUASsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalUASsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdNEIntervalLCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 10)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalLCVsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalLCVsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdNEIntervalPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 11)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalPCVsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalPCVsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdNEIntervalLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 12)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalLESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalLESsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdNEIntervalCCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 13)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalCCVsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalCCVsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdNEIntervalCESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 14)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalCESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalCESsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdNEIntervalCSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 15)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalCSESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdNEIntervalCSESsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdNEDayPESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 16)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayPESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayPESsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdNEDayPSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 17)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayPSESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayPSESsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdNEDaySEFSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 18)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDaySEFSsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDaySEFSsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdNEDayUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 19)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayUASsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayUASsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdNEDayLCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 20)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayLCVsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayLCVsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdNEDayPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 21)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayPCVsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayPCVsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdNEDayLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 22)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayLESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayLESsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdNEDayCCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 23)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayCCVsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayCCVsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdNEDayCESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 24)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayCESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayCESsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdNEDayCSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 25)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayCSESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdNEDayCSESsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdFEIntervalCESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 26)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdFEIntervalCESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdFEIntervalCESsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdFEIntervalCSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 27)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdFEIntervalCSESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdFEIntervalCSESsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdFEIntervalCCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 28)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdFEIntervalCCVsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdFEIntervalCCVsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdFEIntervalUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 29)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdFEIntervalUASsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdFEIntervalUASsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdFEDayCESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 30)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdFEDayCESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdFEDayCESsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdFEDayCSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 31)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdFEDayCSESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdFEDayCSESsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdFEDayCCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 32)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdFEDayCCVsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdFEDayCCVsTrap.setDescription('The threshold specified has been exceeded on this interface.')
acDs3ExceededThresholdFEDayUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 5, 0, 33)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdNodeId"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdSlot"), ("APPIAN-PPORT-DS3-MIB", "acDs3ThresholdPort"))
if mibBuilder.loadTexts: acDs3ExceededThresholdFEDayUASsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs3ExceededThresholdFEDayUASsTrap.setDescription('The threshold specified has been exceeded on this interface.')
mibBuilder.exportSymbols("APPIAN-PPORT-DS3-MIB", acDs3ConfigInvalidIntervals=acDs3ConfigInvalidIntervals, acDs3ExceededThresholdNEIntervalCSESsTrap=acDs3ExceededThresholdNEIntervalCSESsTrap, acDs3IntervalPort=acDs3IntervalPort, acDs3IntervalCSESs=acDs3IntervalCSESs, acDs3ConfigOpStatus=acDs3ConfigOpStatus, acDs3ConfigTimeElapsedFarEndDay=acDs3ConfigTimeElapsedFarEndDay, acDs3DayPCVs=acDs3DayPCVs, acDs3ThresholdNEIntervalCSESs=acDs3ThresholdNEIntervalCSESs, acDs3ThresholdFEDayCSESs=acDs3ThresholdFEDayCSESs, acDs3ThresholdSlot=acDs3ThresholdSlot, acDs3DayEntry=acDs3DayEntry, acDs3FarEndIntervalNumber=acDs3FarEndIntervalNumber, acDs3ConfigCircuitIdentifier=acDs3ConfigCircuitIdentifier, acDs3ExceededThresholdNEIntervalPESsTrap=acDs3ExceededThresholdNEIntervalPESsTrap, acDs3IntervalLESs=acDs3IntervalLESs, acDs3ConfigLoopbackConfig=acDs3ConfigLoopbackConfig, acDs3ConfigFarEndFrameIDCode=acDs3ConfigFarEndFrameIDCode, acDs3ExceededThresholdFEDayCESsTrap=acDs3ExceededThresholdFEDayCESsTrap, acDs3ConfigValidFarEndDays=acDs3ConfigValidFarEndDays, acDs3ExceededThresholdNEDayCCVsTrap=acDs3ExceededThresholdNEDayCCVsTrap, acDs3IntervalLCVs=acDs3IntervalLCVs, acDs3FarEndIntervalCCVs=acDs3FarEndIntervalCCVs, acDs3ConfigTimeElapsedFarEndInterval=acDs3ConfigTimeElapsedFarEndInterval, acDs3ConfigSendCode=acDs3ConfigSendCode, acDs3ThresholdNEIntervalPCVs=acDs3ThresholdNEIntervalPCVs, acDs3CfgErrorTrap=acDs3CfgErrorTrap, acDs3ThresholdEntry=acDs3ThresholdEntry, acDs3ConfigNodeId=acDs3ConfigNodeId, acDs3ExceededThresholdNEIntervalLCVsTrap=acDs3ExceededThresholdNEIntervalLCVsTrap, acDs3ExceededThresholdNEDayUASsTrap=acDs3ExceededThresholdNEDayUASsTrap, acDs3DayUASs=acDs3DayUASs, acDs3IntervalValidStats=acDs3IntervalValidStats, acDs3DayTable=acDs3DayTable, acDs3FarEndDayCSESs=acDs3FarEndDayCSESs, acDs3ThresholdNEIntervalLESs=acDs3ThresholdNEIntervalLESs, acDs3ThresholdNEIntervalCCVs=acDs3ThresholdNEIntervalCCVs, acDs3ExceededThresholdNEIntervalCCVsTrap=acDs3ExceededThresholdNEIntervalCCVsTrap, acDs3DaySlot=acDs3DaySlot, acDs3FarEndDayCCVs=acDs3FarEndDayCCVs, acDs3FarEndIntervalPort=acDs3FarEndIntervalPort, acDs3ConfigValidIntervals=acDs3ConfigValidIntervals, acDs3ThresholdNEIntervalPSESs=acDs3ThresholdNEIntervalPSESs, acDs3DayResetStats=acDs3DayResetStats, acDs3ConfigValidDays=acDs3ConfigValidDays, acDs3ConfigChannelization=acDs3ConfigChannelization, acDs3IntervalNumber=acDs3IntervalNumber, acDs3ThresholdNEDayLCVs=acDs3ThresholdNEDayLCVs, acDs3ThresholdNEDayCSESs=acDs3ThresholdNEDayCSESs, acDs3ThresholdFEDayCCVs=acDs3ThresholdFEDayCCVs, acDs3ExceededThresholdFEIntervalUASsTrap=acDs3ExceededThresholdFEIntervalUASsTrap, acDs3FarEndIntervalSlot=acDs3FarEndIntervalSlot, acDs3FarEndDayNumber=acDs3FarEndDayNumber, acDs3ExceededThresholdNEIntervalUASsTrap=acDs3ExceededThresholdNEIntervalUASsTrap, acDs3DayCESs=acDs3DayCESs, acDs3ThresholdFEIntervalCSESs=acDs3ThresholdFEIntervalCSESs, acDs3FarEndDayTable=acDs3FarEndDayTable, acDs3=acDs3, acDs3ThresholdFEIntervalCESs=acDs3ThresholdFEIntervalCESs, acDs3ThresholdNEDayPCVs=acDs3ThresholdNEDayPCVs, acDs3ExceededThresholdNEIntervalPCVsTrap=acDs3ExceededThresholdNEIntervalPCVsTrap, acDs3ThresholdNEDayLESs=acDs3ThresholdNEDayLESs, acDs3ConfigFarEndLocationIDCode=acDs3ConfigFarEndLocationIDCode, acDs3ThresholdNEDayCCVs=acDs3ThresholdNEDayCCVs, acDs3ConfigLineStatusChangeTrapEnable=acDs3ConfigLineStatusChangeTrapEnable, acDs3FarEndIntervalNodeId=acDs3FarEndIntervalNodeId, PYSNMP_MODULE_ID=acDs3, acDs3IntervalUASs=acDs3IntervalUASs, acDs3ThresholdNEIntervalSEFSs=acDs3ThresholdNEIntervalSEFSs, acDs3ThresholdFEIntervalUASs=acDs3ThresholdFEIntervalUASs, acDs3ExceededThresholdNEDayLESsTrap=acDs3ExceededThresholdNEDayLESsTrap, acDs3ExceededThresholdNEDayPCVsTrap=acDs3ExceededThresholdNEDayPCVsTrap, acDs3ExceededThresholdNEIntervalSEFSsTrap=acDs3ExceededThresholdNEIntervalSEFSsTrap, acDs3ThresholdFEDayCESs=acDs3ThresholdFEDayCESs, acDs3FarEndDayCESs=acDs3FarEndDayCESs, acDs3FarEndIntervalCESs=acDs3FarEndIntervalCESs, acDs3FarEndIntervalEntry=acDs3FarEndIntervalEntry, acDs3ThresholdNEIntervalPESs=acDs3ThresholdNEIntervalPESs, acDs3ConfigLineLength=acDs3ConfigLineLength, acDs3ConfigLineStatus=acDs3ConfigLineStatus, acDs3ConfigTimeElapsedDay=acDs3ConfigTimeElapsedDay, acDs3IntervalPCVs=acDs3IntervalPCVs, acDs3FarEndIntervalValidStats=acDs3FarEndIntervalValidStats, acDs3DayLCVs=acDs3DayLCVs, acDs3ThresholdNEIntervalLCVs=acDs3ThresholdNEIntervalLCVs, acDs3ConfigValidFarEndIntervals=acDs3ConfigValidFarEndIntervals, acDs3ConfigEntry=acDs3ConfigEntry, acDs3ExceededThresholdFEDayCCVsTrap=acDs3ExceededThresholdFEDayCCVsTrap, acDs3ConfigFarEndUnitCode=acDs3ConfigFarEndUnitCode, acDs3DayPESs=acDs3DayPESs, acDs3ConfigFarEndEquipCode=acDs3ConfigFarEndEquipCode, acDs3ThresholdNodeId=acDs3ThresholdNodeId, acDs3ExceededThresholdNEIntervalPSESsTrap=acDs3ExceededThresholdNEIntervalPSESsTrap, acDs3ExceededThresholdNEDayCESsTrap=acDs3ExceededThresholdNEDayCESsTrap, acDs3ExceededThresholdFEIntervalCCVsTrap=acDs3ExceededThresholdFEIntervalCCVsTrap, acDs3FarEndDayNodeId=acDs3FarEndDayNodeId, acDs3IntervalResetStats=acDs3IntervalResetStats, acDs3FarEndIntervalResetStats=acDs3FarEndIntervalResetStats, acDs3FarEndDayResetStats=acDs3FarEndDayResetStats, acDs3ExceededThresholdNEIntervalCESsTrap=acDs3ExceededThresholdNEIntervalCESsTrap, acDs3FarEndIntervalCSESs=acDs3FarEndIntervalCSESs, acDs3ThresholdNEDayCESs=acDs3ThresholdNEDayCESs, acDs3ConfigLoopbackStatus=acDs3ConfigLoopbackStatus, acDs3ThresholdNEDayUASs=acDs3ThresholdNEDayUASs, acDs3ThresholdNEIntervalUASs=acDs3ThresholdNEIntervalUASs, acDs3FarEndDayEntry=acDs3FarEndDayEntry, acDs3ThresholdPort=acDs3ThresholdPort, acDs3ExceededThresholdNEDaySEFSsTrap=acDs3ExceededThresholdNEDaySEFSsTrap, acDs3DayLESs=acDs3DayLESs, acDs3IntervalSlot=acDs3IntervalSlot, acDs3ExceededThresholdNEDayPSESsTrap=acDs3ExceededThresholdNEDayPSESsTrap, acDs3ConfigFarEndFacilityIDCode=acDs3ConfigFarEndFacilityIDCode, acDs3DayNumber=acDs3DayNumber, acDs3DayPSESs=acDs3DayPSESs, acDs3ConfigLineType=acDs3ConfigLineType, acDs3StatsResetTrap=acDs3StatsResetTrap, acDs3ExceededThresholdNEDayPESsTrap=acDs3ExceededThresholdNEDayPESsTrap, acDs3ConfigDs1ForRemoteLoop=acDs3ConfigDs1ForRemoteLoop, acDs3DayNodeId=acDs3DayNodeId, acDs3FarEndDayValidStats=acDs3FarEndDayValidStats, acDs3LinkDownTrap=acDs3LinkDownTrap, acDs3ThresholdFEDayUASs=acDs3ThresholdFEDayUASs, acDs3ConfigTimeElapsedInterval=acDs3ConfigTimeElapsedInterval, acDs3ExceededThresholdFEIntervalCSESsTrap=acDs3ExceededThresholdFEIntervalCSESsTrap, acDs3FarEndDayPort=acDs3FarEndDayPort, acDs3ConfigInvalidFarEndIntervals=acDs3ConfigInvalidFarEndIntervals, acDs3IntervalEntry=acDs3IntervalEntry, acDs3ThresholdNEDayPESs=acDs3ThresholdNEDayPESs, acDs3IntervalPESs=acDs3IntervalPESs, acDs3IntervalCCVs=acDs3IntervalCCVs, acDs3DaySEFSs=acDs3DaySEFSs, acDs3ConfigType=acDs3ConfigType, acDs3LinkUpTrap=acDs3LinkUpTrap, acDs3ExceededThresholdNEDayCSESsTrap=acDs3ExceededThresholdNEDayCSESsTrap, acDs3ThresholdNEDaySEFSs=acDs3ThresholdNEDaySEFSs, acDs3FarEndDayUASs=acDs3FarEndDayUASs, acDs3IntervalCESs=acDs3IntervalCESs, acDs3IntervalNodeId=acDs3IntervalNodeId, acDs3FarEndIntervalUASs=acDs3FarEndIntervalUASs, acDs3Traps=acDs3Traps, acDs3ConfigPort=acDs3ConfigPort, acDs3DayPort=acDs3DayPort, acDs3ConfigTable=acDs3ConfigTable, acDs3IntervalPSESs=acDs3IntervalPSESs, acDs3ConfigTransmitClockSource=acDs3ConfigTransmitClockSource, acDs3ExceededThresholdFEIntervalCESsTrap=acDs3ExceededThresholdFEIntervalCESsTrap, acDs3ConfigLineCoding=acDs3ConfigLineCoding, acDs3ThresholdNEDayPSESs=acDs3ThresholdNEDayPSESs, acDs3ConfigAdminStatus=acDs3ConfigAdminStatus, acDs3DayValidStats=acDs3DayValidStats, acDs3DayCSESs=acDs3DayCSESs, acDs3FarEndDaySlot=acDs3FarEndDaySlot, acDs3ConfigInterfaceName=acDs3ConfigInterfaceName, acDs3ThresholdTable=acDs3ThresholdTable, acDs3ThresholdNEIntervalCESs=acDs3ThresholdNEIntervalCESs, acDs3IntervalTable=acDs3IntervalTable, acDs3ExceededThresholdFEDayCSESsTrap=acDs3ExceededThresholdFEDayCSESsTrap, acDs3ConfigLineStatusLastChange=acDs3ConfigLineStatusLastChange, acDs3ExceededThresholdNEIntervalLESsTrap=acDs3ExceededThresholdNEIntervalLESsTrap, acDs3ExceededThresholdFEDayUASsTrap=acDs3ExceededThresholdFEDayUASsTrap, acDs3LineStatusChange=acDs3LineStatusChange, acDs3ConfigInvalidFarEndDays=acDs3ConfigInvalidFarEndDays, acDs3FarEndIntervalTable=acDs3FarEndIntervalTable, acDs3DayCCVs=acDs3DayCCVs, acDs3ThresholdFEIntervalCCVs=acDs3ThresholdFEIntervalCCVs, acDs3ExceededThresholdNEDayLCVsTrap=acDs3ExceededThresholdNEDayLCVsTrap, acDs3IntervalSEFSs=acDs3IntervalSEFSs, acDs3ConfigSlot=acDs3ConfigSlot, acDs3ConfigInvalidDays=acDs3ConfigInvalidDays)
