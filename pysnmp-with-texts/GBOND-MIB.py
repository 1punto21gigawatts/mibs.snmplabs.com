#
# PySNMP MIB module GBOND-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GBOND-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:18:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
HCPerfIntervalCount, HCPerfIntervalThreshold, HCPerfInvalidIntervals, HCPerfTotalCount, HCPerfValidIntervals, HCPerfTimeElapsed, HCPerfCurrentCount = mibBuilder.importSymbols("HC-PerfHist-TC-MIB", "HCPerfIntervalCount", "HCPerfIntervalThreshold", "HCPerfInvalidIntervals", "HCPerfTotalCount", "HCPerfValidIntervals", "HCPerfTimeElapsed", "HCPerfCurrentCount")
IANAgBondScheme, IANAgBondSchemeList = mibBuilder.importSymbols("IANA-GBOND-TC-MIB", "IANAgBondScheme", "IANAgBondSchemeList")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Unsigned32, ObjectIdentity, Gauge32, Counter32, Integer32, Counter64, MibIdentifier, Bits, iso, mib_2, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Unsigned32", "ObjectIdentity", "Gauge32", "Counter32", "Integer32", "Counter64", "MibIdentifier", "Bits", "iso", "mib-2", "NotificationType")
DisplayString, PhysAddress, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "RowStatus", "TextualConvention", "TruthValue")
gBondMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 211))
gBondMIB.setRevisions(('2013-02-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: gBondMIB.setRevisionsDescriptions(('Initial version, published as RFC 6765.',))
if mibBuilder.loadTexts: gBondMIB.setLastUpdated('201302200000Z')
if mibBuilder.loadTexts: gBondMIB.setOrganization('IETF ADSL MIB Working Group')
if mibBuilder.loadTexts: gBondMIB.setContactInfo('WG charter: http://datatracker.ietf.org/wg/adslmib/charter/ Mailing Lists: General Discussion: adslmib@ietf.org To Subscribe: adslmib-request@ietf.org In Body: subscribe your_email_address Chair: Menachem Dodge Postal: ECI Telecom, Ltd. 30 Hasivim St. Petach-Tikva 4951169 Israel Phone: +972-3-926-8421 EMail: menachemdodge1@gmail.com Editor: Edward Beili Postal: Actelis Networks, Inc. 25 Bazel St., P.O.B. 10173 Petach-Tikva 49103 Israel Phone: +972-3-924-3491 EMail: edward.beili@actelis.com Editor: Moti Morgenstern Postal: ECI Telecom 30 Hasivim St. Petach-Tikva 4951169 Israel Phone: +972-3-926-6258 EMail: moti.morgenstern@ecitele.com')
if mibBuilder.loadTexts: gBondMIB.setDescription("The objects in this MIB module are used to manage the multi-pair bonded xDSL interfaces, as defined in ITU-T Recommendations G.998.1, G.998.2, and G.998.3. This MIB module MUST be used in conjunction with a bonding scheme-specific MIB module, that is, G9981-MIB, G9982-MIB, or G9983-MIB. The following references are used throughout this MIB module: [G.998.1] refers to: ITU-T Recommendation G.998.1: 'ATM-based multi-pair bonding', January 2005. [G.998.2] refers to: ITU-T Recommendation G.998.2: 'Ethernet-based multi-pair bonding', January 2005. [G.998.3] refers to: ITU-T Recommendation G.998.3: 'Multi-pair bonding using time-division inverse multiplexing', January 2005. [TR-159] refers to: Broadband Forum Technical Report: 'Management Framework for xDSL Bonding', December 2008. Naming Conventions: BCE - Bonding Channel Entity BTU - Bonding Terminating Unit BTU-C - Bonding Terminating Unit, CO side BTU-R - Bonding Terminating Unit, Remote Terminal (CPE) side CO - Central Office CPE - Customer Premises Equipment GBS - Generic Bonding Sub-layer PM - Performance Monitoring SNR - Signal to Noise Ratio TCA - Threshold Crossing Alert Copyright (c) 2013 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info).")
gBondObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 1))
gBondConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 2))
gBondPort = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 1, 1))
gBondBce = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 1, 2))
class GBondPm1DayIntervalThreshold(TextualConvention, Unsigned32):
    description = 'This textual convention defines a range of values that may be set in a fault threshold alarm control for a 1-day Performance Monitoring interval. As the number of seconds in a 1-day interval numbers at most 86400, objects of this type may have a range of 0...86400, where the value of 0 disables the alarm.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 86400)

gBondPortNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 1, 1, 0))
gBondLowUpRateCrossing = NotificationType((1, 3, 6, 1, 2, 1, 211, 1, 1, 0, 1)).setObjects(("GBOND-MIB", "gBondPortStatUpDataRate"), ("GBOND-MIB", "gBondPortConfThreshLowUpRate"))
if mibBuilder.loadTexts: gBondLowUpRateCrossing.setStatus('current')
if mibBuilder.loadTexts: gBondLowUpRateCrossing.setDescription("This notification indicates that the G.Bond port's upstream data rate has reached/dropped below or exceeded the low upstream rate threshold, specified by gBondPortConfThreshLowUpRate. This notification MAY be sent for the -O subtype ports while the port is 'up', on the crossing event in both directions: from normal (rate is above the threshold) to low (rate equals the threshold or is below it) and from low to normal. This notification is not applicable to the -R subtypes. It is RECOMMENDED that a small debouncing period of 2.5 sec, between the detection of the condition and notification, be implemented to prevent simultaneous LinkUp/LinkDown and gBondLowUpRateCrossing notifications from being sent. The adaptive nature of the G.Bond technology allows the port to adapt itself to the changes in the copper environment; e.g., an impulse noise, alien crosstalk, or a micro-interruption may temporarily drop one or more BCEs in the aggregation group, causing a rate degradation of the aggregated G.Bond link. The dropped BCEs would then try to re-initialize, possibly at a lower rate than before, adjusting the rate to provide the required target SNR margin. Generation of this notification is controlled by the gBondPortConfLowRateCrossingEnable object. This object maps to the TR-159 notification nGroupLowUpRateCrossing.")
if mibBuilder.loadTexts: gBondLowUpRateCrossing.setReference('[TR-159], Section 5.5.1.24')
gBondLowDnRateCrossing = NotificationType((1, 3, 6, 1, 2, 1, 211, 1, 1, 0, 2)).setObjects(("GBOND-MIB", "gBondPortStatDnDataRate"), ("GBOND-MIB", "gBondPortConfThreshLowDnRate"))
if mibBuilder.loadTexts: gBondLowDnRateCrossing.setStatus('current')
if mibBuilder.loadTexts: gBondLowDnRateCrossing.setDescription("This notification indicates that the G.Bond port's downstream data rate has reached/dropped below or exceeded the low downstream rate threshold, specified by gBondPortConfThreshLowDnRate. This notification MAY be sent for the -O subtype ports while the port is 'up', on the crossing event in both directions: from normal (rate is above the threshold) to low (rate equals the threshold or is below it) and from low to normal. This notification is not applicable to the -R subtypes. It is RECOMMENDED that a small debouncing period of 2.5 sec, between the detection of the condition and notification, be implemented to prevent simultaneous LinkUp/LinkDown and gBondLowDnRateCrossing notifications from being sent. The adaptive nature of the G.Bond technology allows the port to adapt itself to the changes in the copper environment; e.g., an impulse noise, alien crosstalk, or a micro-interruption may temporarily drop one or more BCEs in the aggregation group, causing a rate degradation of the aggregated G.Bond link. The dropped BCEs would then try to re-initialize, possibly at a lower rate than before, adjusting the rate to provide the required target SNR margin. Generation of this notification is controlled by the gBondPortConfLowRateCrossingEnable object. This object maps to the TR-159 notification nGroupLowDownRateCrossing.")
if mibBuilder.loadTexts: gBondLowDnRateCrossing.setReference('[TR-159], Section 5.5.1.25')
gBondPmTca15MinESCrossing = NotificationType((1, 3, 6, 1, 2, 1, 211, 1, 1, 0, 3)).setObjects(("GBOND-MIB", "gBondPortPmCur15MinES"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh15MinES"))
if mibBuilder.loadTexts: gBondPmTca15MinESCrossing.setStatus('current')
if mibBuilder.loadTexts: gBondPmTca15MinESCrossing.setDescription('This notification indicates that the Errored Seconds threshold, specified by gBondPortPmTcaProfileThresh15MinES, has been reached or exceeded for the GBS port. Generation of this notification is controlled by the gBondPortConfPmTcaEnable and gBondPortPmTcaProfileThresh15MinES objects. This object maps to the TR-159 notification nGroupPerfTca15MinES.')
if mibBuilder.loadTexts: gBondPmTca15MinESCrossing.setReference('[TR-159], Section 5.5.1.42')
gBondPmTca15MinSESCrossing = NotificationType((1, 3, 6, 1, 2, 1, 211, 1, 1, 0, 4)).setObjects(("GBOND-MIB", "gBondPortPmCur15MinSES"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh15MinSES"))
if mibBuilder.loadTexts: gBondPmTca15MinSESCrossing.setStatus('current')
if mibBuilder.loadTexts: gBondPmTca15MinSESCrossing.setDescription('This notification indicates that the Severely Errored Seconds threshold, specified by gBondPortPmTcaProfileThresh15MinSES, has been reached or exceeded for the GBS port. Generation of this notification is controlled by the gBondPortConfPmTcaEnable and gBondPortPmTcaProfileThresh15MinSES objects. This object maps to the TR-159 notification nGroupPerfTca15MinSES.')
if mibBuilder.loadTexts: gBondPmTca15MinSESCrossing.setReference('[TR-159], Section 5.5.1.43')
gBondPmTca15MinUASCrossing = NotificationType((1, 3, 6, 1, 2, 1, 211, 1, 1, 0, 5)).setObjects(("GBOND-MIB", "gBondPortPmCur15MinUAS"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh15MinUAS"))
if mibBuilder.loadTexts: gBondPmTca15MinUASCrossing.setStatus('current')
if mibBuilder.loadTexts: gBondPmTca15MinUASCrossing.setDescription('This notification indicates that the Unavailable Seconds threshold, specified by gBondPortPmTcaProfileThresh15MinUAS, has been reached or exceeded for the GBS port. Generation of this notification is controlled by the gBondPortConfPmTcaEnable and gBondPortPmTcaProfileThresh15MinUAS objects. This object maps to the TR-159 notification nGroupPerfTca15MinUAS.')
if mibBuilder.loadTexts: gBondPmTca15MinUASCrossing.setReference('[TR-159], Section 5.5.1.44')
gBondPmTca1DayESCrossing = NotificationType((1, 3, 6, 1, 2, 1, 211, 1, 1, 0, 6)).setObjects(("GBOND-MIB", "gBondPortPmCur1DayES"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh1DayES"))
if mibBuilder.loadTexts: gBondPmTca1DayESCrossing.setStatus('current')
if mibBuilder.loadTexts: gBondPmTca1DayESCrossing.setDescription('This notification indicates that the Errored Seconds threshold, specified by gBondPortPmTcaProfileThresh1DayES, has been reached or exceeded for the GBS port. Generation of this notification is controlled by the gBondPortConfPmTcaEnable and gBondPortPmTcaProfileThresh1DayES objects. This object maps to the TR-159 notification nGroupPerfTca1DayES.')
if mibBuilder.loadTexts: gBondPmTca1DayESCrossing.setReference('[TR-159], Section 5.5.1.54')
gBondPmTca1DaySESCrossing = NotificationType((1, 3, 6, 1, 2, 1, 211, 1, 1, 0, 7)).setObjects(("GBOND-MIB", "gBondPortPmCur1DaySES"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh1DaySES"))
if mibBuilder.loadTexts: gBondPmTca1DaySESCrossing.setStatus('current')
if mibBuilder.loadTexts: gBondPmTca1DaySESCrossing.setDescription('This notification indicates that the Severely Errored Seconds threshold, specified by gBondPortPmTcaProfileThresh1DaySES, has been reached or exceeded for the GBS port. Generation of this notification is controlled by the gBondPortConfPmTcaEnable and gBondPortPmTcaProfileThresh1DaySES objects. This object maps to the TR-159 notification nGroupPerfTca1DaySES.')
if mibBuilder.loadTexts: gBondPmTca1DaySESCrossing.setReference('[TR-159], Section 5.5.1.55')
gBondPmTca1DayUASCrossing = NotificationType((1, 3, 6, 1, 2, 1, 211, 1, 1, 0, 8)).setObjects(("GBOND-MIB", "gBondPortPmCur1DayUAS"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh1DayUAS"))
if mibBuilder.loadTexts: gBondPmTca1DayUASCrossing.setStatus('current')
if mibBuilder.loadTexts: gBondPmTca1DayUASCrossing.setDescription('This notification indicates that the Unavailable Seconds threshold, specified by gBondPortPmTcaProfileThresh1DayUAS, has been reached or exceeded for the GBS port. Generation of this notification is controlled by the gBondPortConfPmTcaEnable and gBondPortPmTcaProfileThresh1DayUAS objects. This object maps to the TR-159 notification nGroupPerfTca1DayUAS.')
if mibBuilder.loadTexts: gBondPmTca1DayUASCrossing.setReference('[TR-159], Section 5.5.1.56')
gBondPortConfTable = MibTable((1, 3, 6, 1, 2, 1, 211, 1, 1, 1), )
if mibBuilder.loadTexts: gBondPortConfTable.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfTable.setDescription('Table for configuration of G.Bond GBS ports. Entries in this table MUST be maintained in a persistent manner.')
gBondPortConfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gBondPortConfEntry.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfEntry.setDescription('An entry in the G.Bond Port Configuration table. Each entry represents a G.Bond port indexed by the ifIndex. Note that a G.Bond GBS port runs on top of a single or multiple BCE port(s), which are also indexed by the ifIndex.')
gBondPortConfAdminScheme = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 1), IANAgBondScheme()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondPortConfAdminScheme.setReference('[TR-159], Section 5.5.1.6; RFC 2863, IF-MIB, ifAdminStatus')
if mibBuilder.loadTexts: gBondPortConfAdminScheme.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfAdminScheme.setDescription("A desired bonding scheme for a G.Bond GBS port. The following values instruct the port to use the corresponding bonding scheme if supported: none(0) - instructs the port not to use bonding (only on a single-BCE G.998.2 GBS) g9981(1) - instructs the port to use G.998.1 bonding g9982(2) - instructs the port to use G.998.2 bonding g9983(3) - instructs the port to use G.998.3 bonding Changing of the gBondPortConfAdminScheme object MUST be performed when the link is administratively 'down', as indicated by the ifAdminStatus object in the IF-MIB. Attempts to change this object MUST be rejected (in the case of SNMP, with the error inconsistentValue), if the link is 'up' or initializing. Attempts to change this object to an unsupported bonding scheme (see gBondPortCapSchemesSupported) SHALL be rejected (in the case of SNMP, with the error wrongValue). Setting this object to the value of 'none' must be rejected for GBS ports with multiple BCEs (with the error inconsistentValue). This object maps to the TR-159 attribute aGroupAdminBondScheme.")
gBondPortConfPeerAdminScheme = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 2), IANAgBondScheme()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondPortConfPeerAdminScheme.setReference('[TR-159], Section 5.5.1.7; RFC 2863, IF-MIB, ifAdminStatus')
if mibBuilder.loadTexts: gBondPortConfPeerAdminScheme.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfPeerAdminScheme.setDescription("A desired bonding scheme for a peer (link partner) G.Bond port (GBS). The following values instruct the peer port to use the corresponding bonding scheme if supported: none(0) - instructs the port not to use bonding (only on a single-BCE G.998.2 GBS) g9981(1) - instructs the port to use G.998.1 bonding g9982(2) - instructs the port to use G.998.2 bonding g9983(3) - instructs the port to use G.998.3 bonding Changing of this object MUST be performed when the link is administratively 'down', as indicated by the ifAdminStatus object in the IF-MIB. Attempts to change this object MUST be rejected (in the case of SNMP, with the error inconsistentValue), if the link is 'up' or initializing. Attempts to change this object to an unsupported bonding scheme (see gBondPortCapPeerSchemesSupported) SHALL be rejected (in the case of SNMP, with the error wrongValue). Setting this object to the value of 'none' must be rejected for GBS ports with multiple BCEs (with the error inconsistentValue). This object maps to the TR-159 attribute aGroupPeerAdminBondScheme.")
gBondPortConfDiscoveryCode = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 3), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondPortConfDiscoveryCode.setReference('[TR-159], Section 5.5.1.20; [802.3], Sections 61.2.2.8.3, 61.2.2.8.4, 45.2.6.6.1, 45.2.6.8, 61A.2; RFC 2863, IF-MIB, ifAdminStatus')
if mibBuilder.loadTexts: gBondPortConfDiscoveryCode.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfDiscoveryCode.setDescription("A discovery code of the G.Bond port (GBS). A unique 6-octet-long code used by the Discovery function. This object MUST be instantiated for the -O subtype GBS before write operations on the gBondBceConfRemoteDiscoveryCode (Set_if_Clear and Clear_if_Same) are performed by BCEs associated with the GBS. The initial value of this object for -R subtype ports after reset is all zeroes. For -R subtype ports, the value of this object cannot be changed directly. This value may be changed as a result of a write operation on the gBondBceConfRemoteDiscoveryCode object of a remote BCE of -O subtype, connected to one of the local BCEs associated with the GBS. Discovery MUST be performed when the link is administratively 'down', as indicated by the ifAdminStatus object in the IF-MIB. Attempts to change this object MUST be rejected (in the case of SNMP, with the error inconsistentValue), if the link is 'up' or initializing. This object maps to the TR-159 attribute aGroupDiscoveryCode.")
gBondPortConfTargetUpDataRate = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10000000), ))).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondPortConfTargetUpDataRate.setReference('[TR-159], Section 5.5.1.17; RFC 2863, IF-MIB, ifAdminStatus')
if mibBuilder.loadTexts: gBondPortConfTargetUpDataRate.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfTargetUpDataRate.setDescription("A desired G.Bond port data rate in the upstream direction, in Kbps, to be achieved during initialization, under restrictions placed upon the member BCEs by their respective configuration settings. This object represents a sum of individual BCE upstream data rates, modified to compensate for fragmentation and encapsulation overhead (e.g., for an Ethernet service, the target data rate of 10 Mbps SHALL allow lossless transmission of full-duplex 10-Mbps Ethernet frame stream with minimal inter-frame gap). Note that the target upstream data rate may not be achieved during initialization (e.g., due to unavailability of required BCEs) or the initial bandwidth could deteriorate, so that the actual upstream data rate (gBondPortStatUpDataRate) could be less than gBondPortConfTargetUpDataRate. The value is limited above by 10 Gbps, to accommodate very high speed bonded xDSL interfaces (e.g., 32 x 100 Mbps). The value between 1 and 10000000 indicates that the total upstream data rate of the G.Bond port after initialization SHALL be equal to the target data rate or less, if the target upstream data rate cannot be achieved under the restrictions configured for BCEs. In cases where the copper environment allows a higher upstream data rate to be achieved than that specified by this object, the excess capability SHALL be either converted to an additional SNR margin or reclaimed by minimizing transmit power. The value of 0 means that the target data rate is not fixed and SHALL be set to the maximum attainable rate during initialization (best effort), under specified spectral restrictions and with a desired SNR margin per BCE. This object is read-write for the -O subtype G.Bond ports. It is irrelevant for the -R subtypes -- attempts to read or change this object for such ports MUST be rejected (in the case of SNMP, with the error inconsistentValue). Changing of the target upstream data rate MUST be performed when the link is administratively 'down', as indicated by the ifAdminStatus object in the IF-MIB. Attempts to change this object MUST be rejected (in the case of SNMP, with the error inconsistentValue), if the link is 'up' or initializing. This object maps to the TR-159 attribute aGroupTargetUpRate.")
gBondPortConfTargetDnDataRate = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10000000), ))).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondPortConfTargetDnDataRate.setReference('[TR-159], Section 5.5.1.18; RFC 2863, IF-MIB, ifAdminStatus')
if mibBuilder.loadTexts: gBondPortConfTargetDnDataRate.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfTargetDnDataRate.setDescription("A desired G.Bond port data rate in the downstream direction, in Kbps, to be achieved during initialization, under restrictions placed upon the member BCEs by their respective configuration settings. This object represents a sum of individual BCE downstream data rates, modified to compensate for fragmentation and encapsulation overhead (e.g., for an Ethernet service, the target data rate of 10 Mbps SHALL allow lossless transmission of full-duplex 10-Mbps Ethernet frame stream with minimal inter-frame gap). Note that the target downstream data rate may not be achieved during initialization (e.g., due to unavailability of required BCEs) or the initial bandwidth could deteriorate, so that the actual downstream data rate (gBondPortStatDnDataRate) could be less than gBondPortConfTargetDnDataRate. The value is limited above by 10 Gbps, to accommodate very high speed bonded xDSL interfaces (e.g., 32 x 100 Mbps). The value between 1 and 10000000 indicates that the total downstream data rate of the G.Bond port after initialization SHALL be equal to the target data rate or less, if the target downstream data rate cannot be achieved under the restrictions configured for BCEs. In cases where the copper environment allows a higher downstream data rate to be achieved than that specified by this object, the excess capability SHALL be either converted to an additional SNR margin or reclaimed by minimizing transmit power. The value of 0 means that the target data rate is not fixed and SHALL be set to the maximum attainable rate during initialization (best effort), under specified spectral restrictions and with a desired SNR margin per BCE. This object is read-write for the -O subtype G.Bond ports. It is irrelevant for the -R subtypes -- attempts to read or change this object for such ports MUST be rejected (in the case of SNMP, with the error inconsistentValue). Changing of the target downstream data rate MUST be performed when the link is administratively 'down', as indicated by the ifAdminStatus object in the IF-MIB. Attempts to change this object MUST be rejected (in the case of SNMP, with the error inconsistentValue), if the link is 'up' or initializing. This object maps to the TR-159 attribute aGroupTargetDownRate.")
gBondPortConfThreshLowUpRate = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondPortConfThreshLowUpRate.setReference('[TR-159], Section 5.5.1.21')
if mibBuilder.loadTexts: gBondPortConfThreshLowUpRate.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfThreshLowUpRate.setDescription('This object configures the G.Bond port low upstream rate crossing alarm threshold. When the current value of gBondPortStatUpDataRate for this port reaches/drops below or exceeds this threshold, a gBondLowUpRateCrossing notification MAY be generated if enabled by gBondPortConfLowRateCrossingEnable. This object is read-write for the -O subtype G.Bond ports. It is irrelevant for the -R subtypes -- attempts to read or change this object for such ports MUST be rejected (in the case of SNMP, with the error inconsistentValue). This object maps to the TR-159 attribute aGroupthreshLowUpRate.')
gBondPortConfThreshLowDnRate = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondPortConfThreshLowDnRate.setReference('[TR-159], Section 5.5.1.22')
if mibBuilder.loadTexts: gBondPortConfThreshLowDnRate.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfThreshLowDnRate.setDescription('This object configures the G.Bond port low downstream rate crossing alarm threshold. When the current value of gBondPortStatDnDataRate for this port reaches/drops below or exceeds this threshold, a gBondLowDnRateCrossing notification MAY be generated if enabled by gBondPortConfLowRateCrossingEnable. This object is read-write for the -O subtype G.Bond ports. It is irrelevant for the -R subtypes -- attempts to read or change this object for such ports MUST be rejected (in the case of SNMP, with the error inconsistentValue). This object maps to the TR-159 attribute aGroupThreshLowDownRate.')
gBondPortConfLowRateCrossingEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondPortConfLowRateCrossingEnable.setReference('[TR-159], Section 5.5.1.23')
if mibBuilder.loadTexts: gBondPortConfLowRateCrossingEnable.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfLowRateCrossingEnable.setDescription('Indicates whether gBondLowUpRateCrossing and gBondLowDnRateCrossing notifications should be generated for this interface. A value of true(1) indicates that the notifications are enabled. A value of false(2) indicates that the notifications are disabled. This object is read-write for the -O subtype G.Bond ports. It is irrelevant for the -R subtypes -- attempts to read or change this object for such ports MUST be rejected (in the case of SNMP, with the error inconsistentValue). This object maps to the TR-159 attribute aGroupLowRateCrossingEnable.')
gBondPortConfPmTcaConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondPortConfPmTcaConfProfile.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfPmTcaConfProfile.setDescription('The value of this object is the index of the row in the GBS Port Alarm Configuration Profile table for Performance Monitoring Threshold Crossing Alerts -- the gBondPortAlarmConfProfileTable, which applies to this GBS port.')
gBondPortConfPmTcaEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondPortConfPmTcaEnable.setReference('[TR-159], Section 5.5.1.38')
if mibBuilder.loadTexts: gBondPortConfPmTcaEnable.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfPmTcaEnable.setDescription('Indicates whether the gBondPerfTca*Crossing set of notifications should be generated for this interface. A value of true(1) indicates that the notifications are enabled. A value of false(2) indicates that the notifications are disabled. This object maps to the TR-159 attribute aGroupPerfTcaEnable.')
gBondPortCapTable = MibTable((1, 3, 6, 1, 2, 1, 211, 1, 1, 2), )
if mibBuilder.loadTexts: gBondPortCapTable.setStatus('current')
if mibBuilder.loadTexts: gBondPortCapTable.setDescription('Table for capabilities of G.Bond ports. Entries in this table MUST be maintained in a persistent manner.')
gBondPortCapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gBondPortCapEntry.setStatus('current')
if mibBuilder.loadTexts: gBondPortCapEntry.setDescription('An entry in the G.Bond Port Capability table. Each entry represents a G.Bond port indexed by the ifIndex. Note that a G.Bond GBS port runs on top of a single or multiple BCE port(s), which are also indexed by the ifIndex.')
gBondPortCapSchemesSupported = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 2, 1, 1), IANAgBondSchemeList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortCapSchemesSupported.setReference('[TR-159], Section 5.5.1.2')
if mibBuilder.loadTexts: gBondPortCapSchemesSupported.setStatus('current')
if mibBuilder.loadTexts: gBondPortCapSchemesSupported.setDescription('Bonding capability of the G.Bond port (GBS). This is a read-only bitmap of the possible bonding schemes supported by the GBS. The various bit positions are: none(0) - GBS is capable of bonding bypass on a single-BCE G.998.2 GBS g9981(1) - GBS is capable of G.998.1 bonding g9982(2) - GBS is capable of G.998.2 bonding g9983(3) - GBS is capable of G.998.3 bonding Note that for ports supporting multiple bonding schemes, the actual administrative scheme is set via gBondPortConfAdminScheme object. The current operating bonding scheme is reflected in the gBondPortStatOperScheme object. This object maps to the TR-159 attribute aGroupBondSchemesSupported.')
gBondPortCapPeerSchemesSupported = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 2, 1, 2), IANAgBondSchemeList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortCapPeerSchemesSupported.setReference('[TR-159], Section 5.5.1.3')
if mibBuilder.loadTexts: gBondPortCapPeerSchemesSupported.setStatus('current')
if mibBuilder.loadTexts: gBondPortCapPeerSchemesSupported.setDescription('Bonding capability of the peer G.Bond port (GBS). This is a read-only bitmap of the possible bonding schemes supported by the link partner GBS. The various bit positions are: none(0) - peer GBS does not support bonding, or the peer unit could not be reached, or peer GBS is capable of bonding bypass on a single-BCE G.998.2 GBS g9981(1) - peer GBS is capable of G.998.1 bonding g9982(2) - peer GBS is capable of G.998.2 bonding g9983(3) - peer GBS is capable of G.998.3 bonding Note that for ports supporting multiple bonding schemes, the actual administrative scheme is set via the gBondPortConfPeerAdminScheme object. The current operating bonding scheme is reflected in the gBondPortStatPeerOperScheme object. This object maps to the TR-159 attribute aGroupPeerBondSchemesSupported.')
gBondPortCapCapacity = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortCapCapacity.setReference('[TR-159], Section 5.5.1.12')
if mibBuilder.loadTexts: gBondPortCapCapacity.setStatus('current')
if mibBuilder.loadTexts: gBondPortCapCapacity.setDescription('Number of BCEs that can be aggregated by the local GBS. The number of BCEs currently assigned to a particular G.Bond port (gBondPortStatNumBCEs) is never greater than gBondPortCapCapacity. This object maps to the TR-159 attribute aGroupCapacity.')
gBondPortCapPeerCapacity = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 32), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortCapPeerCapacity.setReference('[TR-159], Section 5.5.1.13')
if mibBuilder.loadTexts: gBondPortCapPeerCapacity.setStatus('current')
if mibBuilder.loadTexts: gBondPortCapPeerCapacity.setDescription('Number of BCEs that can be aggregated by the peer GBS port. A value of 0 is returned when peer Bonding capacity is unknown (peer cannot be reached). This object maps to the TR-159 attribute aGroupPeerCapacity.')
gBondPortStatTable = MibTable((1, 3, 6, 1, 2, 1, 211, 1, 1, 3), )
if mibBuilder.loadTexts: gBondPortStatTable.setStatus('current')
if mibBuilder.loadTexts: gBondPortStatTable.setDescription('This table provides overall status information of G.Bond ports, complementing the generic status information from the ifTable of the IF-MIB. Additional status information about connected BCEs is available from the relevant line MIBs. This table contains live data from the equipment. As such, it is NOT persistent.')
gBondPortStatEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gBondPortStatEntry.setStatus('current')
if mibBuilder.loadTexts: gBondPortStatEntry.setDescription('An entry in the G.Bond Port Status table. Each entry represents a G.Bond port indexed by the ifIndex. Note that a G.Bond GBS port runs on top of a single or multiple BCE port(s), which are also indexed by the ifIndex.')
gBondPortStatOperScheme = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 3, 1, 1), IANAgBondScheme()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortStatOperScheme.setReference('[TR-159], Section 5.5.1.4')
if mibBuilder.loadTexts: gBondPortStatOperScheme.setStatus('current')
if mibBuilder.loadTexts: gBondPortStatOperScheme.setDescription('Current operating bonding scheme of a G.Bond port. The possible values are: none(0) - bonding bypass on a single-BCE G.998.2 GBS g9981(1) - G.998.1 bonding g9982(2) - G.998.2 bonding g9983(3) - G.998.3 bonding This object maps to the TR-159 attribute aGroupOperBondScheme.')
gBondPortStatPeerOperScheme = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 3, 1, 2), IANAgBondScheme()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortStatPeerOperScheme.setReference('[TR-159], Section 5.5.1.5')
if mibBuilder.loadTexts: gBondPortStatPeerOperScheme.setStatus('current')
if mibBuilder.loadTexts: gBondPortStatPeerOperScheme.setDescription('Current operating bonding scheme of a G.Bond port link partner. The possible values are: unknown(0) - peer cannot be reached due to the link state or bonding bypass on a single-BCE G.998.2 GBS g9981(1) - G.998.1 bonding g9982(2) - G.998.2 bonding g9983(3) - G.998.3 bonding This object maps to the TR-159 attribute aGroupPeerOperBondScheme.')
gBondPortStatUpDataRate = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 3, 1, 3), Gauge32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortStatUpDataRate.setReference('[TR-159], Section 5.5.1.15')
if mibBuilder.loadTexts: gBondPortStatUpDataRate.setStatus('current')
if mibBuilder.loadTexts: gBondPortStatUpDataRate.setDescription('A current G.Bond port operational data rate in the upstream direction, in bps. This object represents an estimation of the sum of individual BCE upstream data rates, modified to compensate for fragmentation and encapsulation overhead (e.g., for an Ethernet service, the target data rate of 10 Mbps SHALL allow lossless transmission of full-duplex 10-Mbps Ethernet frame stream with minimal inter-frame gap). Note that for symmetrical interfaces, gBondPortStatUpDataRate == gBondPortStatDnDataRate == ifSpeed. This object maps to the TR-159 attribute aGroupUpRate.')
gBondPortStatDnDataRate = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 3, 1, 4), Gauge32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortStatDnDataRate.setReference('[TR-159], Section 5.5.1.16')
if mibBuilder.loadTexts: gBondPortStatDnDataRate.setStatus('current')
if mibBuilder.loadTexts: gBondPortStatDnDataRate.setDescription('A current G.Bond port operational data rate in the downstream direction, in bps. This object represents an estimation of the sum of individual BCE downstream data rates, modified to compensate for fragmentation and encapsulation overhead (e.g., for an Ethernet service, the target data rate of 10 Mbps SHALL allow lossless transmission of full-duplex 10-Mbps Ethernet frame stream with minimal inter-frame gap). Note that for symmetrical interfaces, gBondPortStatUpDataRate == gBondPortStatDnDataRate == ifSpeed. This object maps to the TR-159 attribute aGroupDownRate.')
gBondPortStatFltStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 3, 1, 5), Bits().clone(namedValues=NamedValues(("noPeer", 0), ("peerPowerLoss", 1), ("peerBondSchemeMismatch", 2), ("bceSubTypeMismatch", 3), ("lowRate", 4), ("init", 5), ("ready", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortStatFltStatus.setReference('[TR-159], Section 5.5.1.9; RFC 2863, IF-MIB, ifOperStatus')
if mibBuilder.loadTexts: gBondPortStatFltStatus.setStatus('current')
if mibBuilder.loadTexts: gBondPortStatFltStatus.setDescription("G.Bond (GBS) port fault status. This is a bitmap of possible conditions. The various bit positions are: noPeer - Peer GBS cannot be reached (e.g., no BCEs attached, all BCEs are 'down', etc.). peerPowerLoss - Peer GBS has indicated impending unit failure due to loss of local power ('Dying Gasp'). peerBondSchemeMismatch - Operating bonding scheme of a peer GBS is different from the local one. bceSubTypeMismatch - Local BCEs in the aggregation group are not of the same sub-type, e.g., some BCEs in the local device are -O while others are -R subtype. lowRate - gBondUpRate/gBondDnRate of the port has reached or dropped below gBondPortConfThreshLowUpRate/ gBondPortConfThreshLowDnRate. init - The link is initializing, as a result of ifAdminStatus being set to 'up' for a particular BCE or a GBS to which the BCE is connected. ready - At least one BCE in the aggregation group is detecting handshake tones. This object is intended to supplement the ifOperStatus object in the IF-MIB. This object maps to the TR-159 attribute aGroupStatus.")
gBondPortStatSide = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("subscriber", 1), ("office", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortStatSide.setReference('[TR-159], Section 5.5.1.11')
if mibBuilder.loadTexts: gBondPortStatSide.setStatus('current')
if mibBuilder.loadTexts: gBondPortStatSide.setDescription("G.Bond port mode of operation (subtype). The value of 'subscriber' indicates that the port is designated as '-R' subtype (all BCEs assigned to this port are of subtype '-R'). The value of 'office' indicates that the port is designated as '-O' subtype (all BCEs assigned to this port are of subtype '-O'). The value of 'unknown' indicates that the port has no assigned BCEs yet or that the assigned BCEs are not of the same side (subTypeBCEMismatch). This object maps to the TR-159 attribute aGroupEnd.")
gBondPortStatNumBCEs = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortStatNumBCEs.setReference('[TR-159], Section 5.5.1.14')
if mibBuilder.loadTexts: gBondPortStatNumBCEs.setStatus('current')
if mibBuilder.loadTexts: gBondPortStatNumBCEs.setDescription('Number of BCEs that are currently aggregated by the local GBS (assigned to the G.Bond port using the ifStackTable). This number is never greater than gBondPortCapCapacity. This object SHALL be automatically incremented or decremented when a BCE is added or deleted to/from the G.Bond port using the ifStackTable. This object maps to the TR-159 attribute aGroupNumChannels.')
gBondPortPM = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 1, 1, 4))
gBondPortPmCurTable = MibTable((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1), )
if mibBuilder.loadTexts: gBondPortPmCurTable.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCurTable.setDescription('This table contains current Performance Monitoring (PM) information for a GBS port. This table contains live data from the equipment and as such is NOT persistent.')
gBondPortPmCurEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gBondPortPmCurEntry.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCurEntry.setDescription('An entry in the G.Bond Port PM table. Each entry represents a G.Bond port indexed by the ifIndex. Note that a G.Bond GBS port runs on top of a single or multiple BCE port(s), which are also indexed by the ifIndex.')
gBondPortPmCurES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 1), HCPerfTotalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCurES.setReference('[TR-159], Section 5.5.1.29')
if mibBuilder.loadTexts: gBondPortPmCurES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCurES.setDescription('A count of Errored Seconds (ES) on the GBS since the BTU was last restarted. An Errored Second for a G.998.x interface is defined as a count of 1-second intervals during which one or more GBS errors are declared. The errors are specific for each bonding scheme, e.g., - lost cells for the ATM bonding - lost or discarded (due to an error or a buffer overflow) fragments for the Ethernet bonding - CRC-4, CRC-6, or CRC-8 errors for the TDIM bonding This object is inhibited during Unavailable Seconds (UAS). This object maps to the TR-159 attribute aGroupPerfES.')
gBondPortPmCurSES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 2), HCPerfTotalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCurSES.setReference('[TR-159], Section 5.5.1.30')
if mibBuilder.loadTexts: gBondPortPmCurSES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCurSES.setDescription('A count of Severely Errored Seconds (SES) on the GBS since the BTU was last restarted. A Severely Errored Second for a G.998.x interface is defined as a count of 1-second intervals during which GBS errors cause at least 1% traffic loss of the nominal bonded link rate or at least 12 ms for the TDM traffic. The exact definition is specific for each bonding scheme, e.g., - 234 lost cells for the ATM bonding with 10-Mbps nominal link rate - 60 lost/discarded fragments for the Ethernet bonding with 10-Mbps nominal link rate and fixed 192-byte-long fragment size - 6 or more CRC-4 errors, one or more CRC-6 errors, or one or more CRC-8 errors for the TDM bonding This object is inhibited during Unavailable Seconds (UAS). This object maps to the TR-159 attribute aGroupPerfSES.')
gBondPortPmCurUAS = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 3), HCPerfTotalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCurUAS.setReference('[TR-159], Section 5.5.1.31')
if mibBuilder.loadTexts: gBondPortPmCurUAS.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCurUAS.setDescription('A count of Unavailable Seconds (UAS) on the GBS since the BTU was last restarted. An Unavailable Second for a G.998.x interface is defined as a count of 1-second intervals during which the bonded link is unavailable. The G.998.x link becomes unavailable at the onset of 10 contiguous SESs. The 10 SESs are included in the unavailable time. Once unavailable, the G.998.x line becomes available at the onset of 10 contiguous seconds with no SESs. The 10 seconds with no SESs are excluded from the unavailable time. This object maps to the TR-159 attribute aGroupPerfUAS.')
gBondPortPmCur15MinValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 4), HCPerfValidIntervals()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur15MinValidIntervals.setReference('[TR-159], Section 5.5.1.32')
if mibBuilder.loadTexts: gBondPortPmCur15MinValidIntervals.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur15MinValidIntervals.setDescription('A number of 15-minute intervals for which data was collected. The value of this object will be 96 or the maximum number of 15-minute history intervals collected by the implementation, unless the measurement was (re)started recently, in which case the value will be the number of complete 15-minute intervals for which there are at least some data. In certain cases, it is possible that some intervals are unavailable. In this case, this object reports the maximum interval number for which data is available. This object maps to the TR-159 attribute aGroupPerf15MinValidIntervals.')
gBondPortPmCur15MinInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 5), HCPerfInvalidIntervals()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur15MinInvalidIntervals.setReference('[TR-159], Section 5.5.1.33')
if mibBuilder.loadTexts: gBondPortPmCur15MinInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur15MinInvalidIntervals.setDescription('A number of 15-minute intervals for which data was not always available. The value will typically be zero, except in cases where the data for some intervals are not available. This object maps to the TR-159 attribute aGroupPerf15MinInvalidIntervals.')
gBondPortPmCur15MinTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 6), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur15MinTimeElapsed.setReference('[TR-159], Section 5.5.1.34')
if mibBuilder.loadTexts: gBondPortPmCur15MinTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur15MinTimeElapsed.setDescription('A count of seconds that have elapsed since the beginning of the current 15-minute performance interval. This object maps to the TR-159 attribute aGroupPerfCurr15MinTimeElapsed.')
gBondPortPmCur15MinES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 7), HCPerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur15MinES.setReference('[TR-159], Section 5.5.1.35')
if mibBuilder.loadTexts: gBondPortPmCur15MinES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur15MinES.setDescription('A count of Errored Seconds (ES) on the GBS in the current 15-minute performance interval. This object maps to the TR-159 attribute aGroupPerfCurr15MinES.')
gBondPortPmCur15MinSES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 8), HCPerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur15MinSES.setReference('[TR-159], Section 5.5.1.36')
if mibBuilder.loadTexts: gBondPortPmCur15MinSES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur15MinSES.setDescription('A count of Severely Errored Seconds (SES) on the GBS in the current 15-minute performance interval. This object maps to the TR-159 attribute aGroupPerfCurr15MinSES.')
gBondPortPmCur15MinUAS = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 9), HCPerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur15MinUAS.setReference('[TR-159], Section 5.5.1.37')
if mibBuilder.loadTexts: gBondPortPmCur15MinUAS.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur15MinUAS.setDescription('A count of Unavailable Seconds (UAS) on the GBS in the current 15-minute performance interval. This object maps to the TR-159 attribute aGroupPerfCurr15MinUAS.')
gBondPortPmCur1DayValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setUnits('days').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur1DayValidIntervals.setReference('[TR-159], Section 5.5.1.45')
if mibBuilder.loadTexts: gBondPortPmCur1DayValidIntervals.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur1DayValidIntervals.setDescription('A number of 1-day intervals for which data was collected. The value of this object will be 7 or the maximum number of 1-day history intervals collected by the implementation, unless the measurement was (re)started recently, in which case the value will be the number of complete 1-day intervals for which there are at least some data. In certain cases, it is possible that some intervals are unavailable. In this case, this object reports the maximum interval number for which data is available. This object maps to the TR-159 attribute aGroupPerf1DayValidIntervals.')
gBondPortPmCur1DayInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setUnits('days').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur1DayInvalidIntervals.setReference('[TR-159], Section 5.5.1.46')
if mibBuilder.loadTexts: gBondPortPmCur1DayInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur1DayInvalidIntervals.setDescription('A number of 1-day intervals for which data was not always available. The value will typically be zero, except in cases where the data for some intervals are not available. This object maps to the TR-159 attribute aGroupPerf1DayInvalidIntervals.')
gBondPortPmCur1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 12), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur1DayTimeElapsed.setReference('[TR-159], Section 5.5.1.47')
if mibBuilder.loadTexts: gBondPortPmCur1DayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur1DayTimeElapsed.setDescription('A count of seconds that have elapsed since the beginning of the current 1-day performance interval. This object maps to the TR-159 attribute aGroupPerfCurr1DayTimeElapsed.')
gBondPortPmCur1DayES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 13), HCPerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur1DayES.setReference('[TR-159], Section 5.5.1.48')
if mibBuilder.loadTexts: gBondPortPmCur1DayES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur1DayES.setDescription('A count of Errored Seconds (ES) on the GBS in the current 1-day performance interval. This object maps to the TR-159 attribute aGroupPerfCurr1DayES.')
gBondPortPmCur1DaySES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 14), HCPerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur1DaySES.setReference('[TR-159], Section 5.5.1.49')
if mibBuilder.loadTexts: gBondPortPmCur1DaySES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur1DaySES.setDescription('A count of Severely Errored Seconds (SES) on the GBS in the current 1-day performance interval. This object maps to the TR-159 attribute aGroupPerfCurr1DaySES.')
gBondPortPmCur1DayUAS = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 15), HCPerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur1DayUAS.setReference('[TR-159], Section 5.5.1.50')
if mibBuilder.loadTexts: gBondPortPmCur1DayUAS.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur1DayUAS.setDescription('A count of Unavailable Seconds (UAS) on the GBS in the current 1-day performance interval. This object maps to the TR-159 attribute aGroupPerfCurr1DayUAS.')
gBondPortPm15MinTable = MibTable((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 2), )
if mibBuilder.loadTexts: gBondPortPm15MinTable.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm15MinTable.setDescription('This table contains historical 15-minute buckets of Performance Monitoring information for a GBS port (a row for each 15-minute interval, up to 96 intervals). Entries in this table MUST be maintained in a persistent manner.')
gBondPortPm15MinEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "GBOND-MIB", "gBondPortPm15MinIntervalIndex"))
if mibBuilder.loadTexts: gBondPortPm15MinEntry.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm15MinEntry.setDescription('An entry in the G.Bond Port historical 15-minute PM table. Each entry represents Performance Monitoring data for a GBS port, indexed by the ifIndex, collected during a particular 15-minute interval, indexed by the gBondPortPm15MinIntervalIndex.')
gBondPortPm15MinIntervalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: gBondPortPm15MinIntervalIndex.setReference('[TR-159], Section 5.5.1.57')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalIndex.setDescription('Performance data interval number. 1 is the most recent previous interval; interval 96 is 24 hours ago. Intervals 2..96 are OPTIONAL. This object maps to the TR-159 attribute aGroupPerf15MinIntervalNumber.')
gBondPortPm15MinIntervalMoniTime = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 2, 1, 2), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPm15MinIntervalMoniTime.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalMoniTime.setDescription('A count of seconds over which the performance data was actually monitored. This value will be the same as the interval duration (900 seconds), except in a situation where performance data could not be collected for any reason.')
gBondPortPm15MinIntervalES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 2, 1, 3), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPm15MinIntervalES.setReference('[TR-159], Section 5.5.1.59')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalES.setDescription('A count of Errored Seconds (ES) on the GBS in the 15-minute performance history interval. This object maps to the TR-159 attribute aGroupPerf15MinIntervalES.')
gBondPortPm15MinIntervalSES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 2, 1, 4), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPm15MinIntervalSES.setReference('[TR-159], Section 5.5.1.60')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalSES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalSES.setDescription('A count of Severely Errored Seconds (SES) on the GBS in the 15-minute performance history interval. This object maps to the TR-159 attribute aGroupPerf15MinIntervalSES.')
gBondPortPm15MinIntervalUAS = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 2, 1, 5), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPm15MinIntervalUAS.setReference('[TR-159], Section 5.5.1.61')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalUAS.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalUAS.setDescription('A count of Unavailable Seconds (UAS) on the GBS in the current 15-minute performance interval. This object maps to the TR-159 attribute aGroupPerf15MinIntervalUAS.')
gBondPortPm15MinIntervalValid = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPm15MinIntervalValid.setReference('[TR-159], Section 5.5.1.58')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalValid.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalValid.setDescription('A read-only object indicating whether or not this history bucket contains valid data. A valid bucket is reported as true(1) and an invalid bucket as false(2). If this history bucket is invalid, the BTU-C MUST NOT produce notifications based upon the value of the counters in this bucket. Note that an implementation may decide not to store invalid history buckets in its database. In such a case, this object is not required, as only valid history buckets are available while invalid history buckets are simply not in the database. This object maps to the TR-159 attribute aGroupPerf15MinIntervalValid.')
gBondPortPm1DayTable = MibTable((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 3), )
if mibBuilder.loadTexts: gBondPortPm1DayTable.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm1DayTable.setDescription('This table contains historical 1-day buckets of Performance Monitoring information for a GBS port (a row for each 1-day interval, up to 7 intervals). Entries in this table MUST be maintained in a persistent manner.')
gBondPortPm1DayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "GBOND-MIB", "gBondPortPm1DayIntervalIndex"))
if mibBuilder.loadTexts: gBondPortPm1DayEntry.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm1DayEntry.setDescription('An entry in the G.Bond Port historical 1-day PM table. Each entry represents Performance Monitoring data for a GBS port, indexed by the ifIndex, collected during a particular 1-day interval, indexed by the gBondPortPm1DayIntervalIndex.')
gBondPortPm1DayIntervalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)))
if mibBuilder.loadTexts: gBondPortPm1DayIntervalIndex.setReference('[TR-159], Section 5.5.1.62')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalIndex.setDescription('Performance data interval number. 1 is the most recent previous interval; interval 7 is 7 days ago. Intervals 2..7 are OPTIONAL. This object maps to the TR-159 attribute aGroupPerf1DayIntervalNumber.')
gBondPortPm1DayIntervalMoniTime = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 3, 1, 2), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPm1DayIntervalMoniTime.setReference('[TR-159], Section 5.5.1.64')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalMoniTime.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalMoniTime.setDescription('A count of seconds over which the performance data was actually monitored. This value will be the same as the interval duration (86400 seconds), except in a situation where performance data could not be collected for any reason. This object maps to the TR-159 attribute aGroupPerf1DayIntervalMoniSecs.')
gBondPortPm1DayIntervalES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 3, 1, 3), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPm1DayIntervalES.setReference('[TR-159], Section 5.5.1.65')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalES.setDescription('A count of Errored Seconds (ES) on the GBS in the 1-day performance history interval. This object maps to the TR-159 attribute aGroupPerf1DayIntervalES.')
gBondPortPm1DayIntervalSES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 3, 1, 4), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPm1DayIntervalSES.setReference('[TR-159], Section 5.5.1.66')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalSES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalSES.setDescription('A count of Severely Errored Seconds (SES) on the GBS in the 1-day performance history interval. This object maps to the TR-159 attribute aGroupPerf1DayIntervalSES.')
gBondPortPm1DayIntervalUAS = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 3, 1, 5), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPm1DayIntervalUAS.setReference('[TR-159], Section 5.5.1.67')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalUAS.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalUAS.setDescription('A count of Unavailable Seconds (UAS) on the GBS in the current 1-day performance interval. This object maps to the TR-159 attribute aGroupPerf1DayIntervalUAS.')
gBondPortPm1DayIntervalValid = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPm1DayIntervalValid.setReference('[TR-159], Section 5.5.1.63')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalValid.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalValid.setDescription('A read-only object indicating whether or not this history bucket contains valid data. A valid bucket is reported as true(1) and an invalid bucket as false(2). If this history bucket is invalid, the BTU-C MUST NOT produce notifications based upon the value of the counters in this bucket. Note that an implementation may decide not to store invalid history buckets in its database. In such a case, this object is not required, as only valid history buckets are available while invalid history buckets are simply not in the database. This object maps to the TR-159 attribute aGroupPerf1DayIntervalValid.')
gBondPortPmTcaProfileTable = MibTable((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 4), )
if mibBuilder.loadTexts: gBondPortPmTcaProfileTable.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmTcaProfileTable.setDescription('This table supports definitions of Performance Monitoring (PM) Threshold Crossing Alert (TCA) configuration profiles for GBS ports. Entries in this table MUST be maintained in a persistent manner.')
gBondPortPmTcaProfileEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 4, 1), ).setIndexNames((0, "GBOND-MIB", "gBondPortPmTcaProfileName"))
if mibBuilder.loadTexts: gBondPortPmTcaProfileEntry.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmTcaProfileEntry.setDescription("An entry in the GBS PM TCA Configuration table. Each entry corresponds to a single TCA configuration profile. Each profile contains a set of parameters for setting alarm thresholds for various performance attributes monitored at GBS ports. Profiles may be created/deleted using the row creation/deletion mechanism via gBondPortPmTcaProfileRowStatus. If an active entry is referenced via gBondPortConfPmTcaConfProfile, the entry MUST remain active until all references are removed. A default profile with an index of 'DEFVAL' will always exist, and its parameters will be set to vendor-specific values unless otherwise specified in this document.")
gBondPortPmTcaProfileName = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: gBondPortPmTcaProfileName.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmTcaProfileName.setDescription('This object is a unique index (name) associated with this GBS PM TCA profile.')
gBondPortPmTcaProfileThresh15MinES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 4, 1, 2), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh15MinES.setReference('[TR-159], Section 5.5.1.39')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh15MinES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh15MinES.setDescription('A desired threshold for the number of Errored Seconds (ES) within any given 15-minute performance data collection interval. If the number of ESs in a particular 15-minute collection interval reaches or exceeds this value, a gBondPmTca15MinESCrossing notification MAY be generated if enabled by gBondPortConfPmTcaEnable. At most one notification can be sent per interval. Setting this attribute to zero (default) effectively disables the gBondPmTca15MinESCrossing notification. This object maps to the TR-159 attribute aGroupPerfThreshold15MinES.')
gBondPortPmTcaProfileThresh15MinSES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 4, 1, 3), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh15MinSES.setReference('[TR-159], Section 5.5.1.40')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh15MinSES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh15MinSES.setDescription('A desired threshold for the number of Severely Errored Seconds (SES) within any given 15-minute performance data collection interval. If the number of SESs in a particular 15-minute collection interval reaches or exceeds this value, a gBondPmTca15MinSESCrossing notification MAY be generated if enabled by gBondPortConfPmTcaEnable. At most one notification can be sent per interval. Setting this attribute to zero (default) effectively disables the gBondPmTca15MinSESCrossing notification. This object maps to the TR-159 attribute aGroupPerfThreshold15MinSES.')
gBondPortPmTcaProfileThresh15MinUAS = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 4, 1, 4), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh15MinUAS.setReference('[TR-159], Section 5.5.1.41')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh15MinUAS.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh15MinUAS.setDescription('A desired threshold for the number of Unavailable Seconds (UAS) within any given 15-minute performance data collection interval. If the number of UASs in a particular 15-minute collection interval reaches or exceeds this value, a gBondPmTca15MinUASCrossing notification MAY be generated if enabled by gBondPortConfPmTcaEnable. At most one notification can be sent per interval. Setting this attribute to zero (default) effectively disables the gBondPmTca15MinUASCrossing notification. This object maps to the TR-159 attribute aGroupPerfThreshold15MinUAS.')
gBondPortPmTcaProfileThresh1DayES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 4, 1, 5), GBondPm1DayIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh1DayES.setReference('[TR-159], Section 5.5.1.51')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh1DayES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh1DayES.setDescription('A desired threshold for the number of Errored Seconds (ES) within any given 1-day performance data collection interval. If the number of ESs in a particular 1-day collection interval reaches or exceeds this value, a gBondPmTca1DayESCrossing notification MAY be generated if enabled by gBondPortConfPmTcaEnable. At most one notification can be sent per interval. Setting this attribute to zero (default) effectively disables the gBondPmTca1DayESCrossing notification. This object maps to the TR-159 attribute aGroupPerfThreshold1DayES.')
gBondPortPmTcaProfileThresh1DaySES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 4, 1, 6), GBondPm1DayIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh1DaySES.setReference('[TR-159], Section 5.5.1.52')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh1DaySES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh1DaySES.setDescription('A desired threshold for the number of Severely Errored Seconds (SES) within any given 1-day performance data collection interval. If the number of SESs in a particular 1-day collection interval reaches or exceeds this value, a gBondPmTca1DaySESCrossing notification MAY be generated if enabled by gBondPortConfPmTcaEnable. At most one notification can be sent per interval. Setting this attribute to zero (default) effectively disables the gBondPmTca1DaySESCrossing notification. This object maps to the TR-159 attribute aGroupPerfThreshold1DaySES.')
gBondPortPmTcaProfileThresh1DayUAS = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 4, 1, 7), GBondPm1DayIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh1DayUAS.setReference('[TR-159], Section 5.5.1.53')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh1DayUAS.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh1DayUAS.setDescription('A desired threshold for the number of Unavailable Seconds (UAS) within any given 1-day performance data collection interval. If the number of UASs in a particular 1-day collection interval reaches or exceeds this value, a gBondPmTca1DayUASCrossing notification MAY be generated if enabled by gBondPortConfPmTcaEnable. At most one notification can be sent per interval. Setting this attribute to zero (default) effectively disables the gBondPmTca1DayUASCrossing notification. This object maps to the TR-159 attribute aGroupPerfThreshold1DayUAS.')
gBondPortPmTcaProfileRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 4, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gBondPortPmTcaProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmTcaProfileRowStatus.setDescription("This object controls the creation, modification, or deletion of the associated entry in the gBondPortPmTcaProfileTable per the semantics of RowStatus. If an 'active' entry is referenced via gBondPortConfPmTcaConfProfile instance(s), the entry MUST remain 'active'. An 'active' entry SHALL NOT be modified. In order to modify an existing entry, it MUST be taken out of service (by setting this object to 'notInService'), modified, and set to 'active' again.")
gBondBceConfTable = MibTable((1, 3, 6, 1, 2, 1, 211, 1, 2, 1), )
if mibBuilder.loadTexts: gBondBceConfTable.setStatus('current')
if mibBuilder.loadTexts: gBondBceConfTable.setDescription('Table for configuration of G.Bond common aspects for the Bonding Channel Entity (BCE) ports (modems/channels). Entries in this table MUST be maintained in a persistent manner.')
gBondBceConfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gBondBceConfEntry.setStatus('current')
if mibBuilder.loadTexts: gBondBceConfEntry.setDescription('An entry in the G.Bond BCE Configuration table. Each entry represents common aspects of a G.Bond BCE port indexed by the ifIndex. Note that a G.Bond BCE port can be stacked below a single GBS port, also indexed by the ifIndex, possibly together with other BCE ports if bonding is enabled.')
gBondBceConfRemoteDiscoveryCode = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 2, 1, 1, 1), PhysAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(6, 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondBceConfRemoteDiscoveryCode.setReference('[TR-159], Section 5.5.6.7')
if mibBuilder.loadTexts: gBondBceConfRemoteDiscoveryCode.setStatus('current')
if mibBuilder.loadTexts: gBondBceConfRemoteDiscoveryCode.setDescription("A remote discovery code of the BCE port at the CO. A 6-octet-long discovery code of the peer GBS connected via the BCE. Reading this object results in a Discovery Get operation. Setting this object to all zeroes results in a Discovery Clear_if_Same operation (the value of gBondPortConfDiscoveryCode at the peer GBS SHALL be the same as gBondPortConfDiscoveryCode of the local GBS associated with the BCE for the operation to succeed). Writing a non-zero value to this object results in a Discovery Set_if_Clear operation. A zero-length octet string SHALL be returned on an attempt to read this object when bonding is not enabled. This object is irrelevant in BCE-R port subtypes (CPE side): in this case, a zero-length octet string SHALL be returned on an attempt to read this object. An attempt to change this object MUST be rejected (in the case of SNMP, with the error inconsistentValue). Discovery MUST be performed when the link is 'down'. Attempts to change this object MUST be rejected (in the case of SNMP, with the error inconsistentValue), If the link is 'up' or initializing. This object maps to the TR-159 attribute aLineRemoteDiscoveryCode.")
gBondGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 2, 1))
gBondCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 2, 2))
gBondBasicGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 211, 2, 1, 1)).setObjects(("GBOND-MIB", "gBondPortStatOperScheme"), ("GBOND-MIB", "gBondPortStatUpDataRate"), ("GBOND-MIB", "gBondPortStatDnDataRate"), ("GBOND-MIB", "gBondPortConfTargetUpDataRate"), ("GBOND-MIB", "gBondPortConfTargetDnDataRate"), ("GBOND-MIB", "gBondPortCapSchemesSupported"), ("GBOND-MIB", "gBondPortCapCapacity"), ("GBOND-MIB", "gBondPortStatNumBCEs"), ("GBOND-MIB", "gBondPortStatSide"), ("GBOND-MIB", "gBondPortStatFltStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondBasicGroup = gBondBasicGroup.setStatus('current')
if mibBuilder.loadTexts: gBondBasicGroup.setDescription('A collection of objects representing management information common to all types of G.Bond ports.')
gBondDiscoveryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 211, 2, 1, 2)).setObjects(("GBOND-MIB", "gBondPortStatPeerOperScheme"), ("GBOND-MIB", "gBondPortCapPeerSchemesSupported"), ("GBOND-MIB", "gBondPortCapPeerCapacity"), ("GBOND-MIB", "gBondPortConfDiscoveryCode"), ("GBOND-MIB", "gBondBceConfRemoteDiscoveryCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondDiscoveryGroup = gBondDiscoveryGroup.setStatus('current')
if mibBuilder.loadTexts: gBondDiscoveryGroup.setDescription('A collection of objects supporting OPTIONAL G.Bond discovery in G.Bond ports.')
gBondMultiSchemeGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 211, 2, 1, 3)).setObjects(("GBOND-MIB", "gBondPortConfAdminScheme"), ("GBOND-MIB", "gBondPortConfPeerAdminScheme"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondMultiSchemeGroup = gBondMultiSchemeGroup.setStatus('current')
if mibBuilder.loadTexts: gBondMultiSchemeGroup.setDescription('A collection of objects providing OPTIONAL management information for G.Bond ports supporting multiple bonding schemes.')
gBondTcaConfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 211, 2, 1, 4)).setObjects(("GBOND-MIB", "gBondPortConfThreshLowUpRate"), ("GBOND-MIB", "gBondPortConfThreshLowDnRate"), ("GBOND-MIB", "gBondPortConfLowRateCrossingEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondTcaConfGroup = gBondTcaConfGroup.setStatus('current')
if mibBuilder.loadTexts: gBondTcaConfGroup.setDescription('A collection of objects required for configuration of alarm thresholds and notifications in G.Bond ports.')
gBondTcaNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 211, 2, 1, 5)).setObjects(("GBOND-MIB", "gBondLowUpRateCrossing"), ("GBOND-MIB", "gBondLowDnRateCrossing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondTcaNotificationGroup = gBondTcaNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: gBondTcaNotificationGroup.setDescription('This group supports notifications of significant conditions (non-PM threshold crossing alerts) associated with G.Bond ports.')
gBondPmCurGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 211, 2, 1, 6)).setObjects(("GBOND-MIB", "gBondPortPmCurES"), ("GBOND-MIB", "gBondPortPmCurSES"), ("GBOND-MIB", "gBondPortPmCurUAS"), ("GBOND-MIB", "gBondPortPmCur15MinValidIntervals"), ("GBOND-MIB", "gBondPortPmCur15MinInvalidIntervals"), ("GBOND-MIB", "gBondPortPmCur15MinTimeElapsed"), ("GBOND-MIB", "gBondPortPmCur15MinES"), ("GBOND-MIB", "gBondPortPmCur15MinSES"), ("GBOND-MIB", "gBondPortPmCur15MinUAS"), ("GBOND-MIB", "gBondPortPmCur1DayValidIntervals"), ("GBOND-MIB", "gBondPortPmCur1DayInvalidIntervals"), ("GBOND-MIB", "gBondPortPmCur1DayTimeElapsed"), ("GBOND-MIB", "gBondPortPmCur1DayES"), ("GBOND-MIB", "gBondPortPmCur1DaySES"), ("GBOND-MIB", "gBondPortPmCur1DayUAS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondPmCurGroup = gBondPmCurGroup.setStatus('current')
if mibBuilder.loadTexts: gBondPmCurGroup.setDescription('A collection of objects supporting OPTIONAL current Performance Monitoring information for G.Bond ports.')
gBondPm15MinGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 211, 2, 1, 7)).setObjects(("GBOND-MIB", "gBondPortPm15MinIntervalMoniTime"), ("GBOND-MIB", "gBondPortPm15MinIntervalES"), ("GBOND-MIB", "gBondPortPm15MinIntervalSES"), ("GBOND-MIB", "gBondPortPm15MinIntervalUAS"), ("GBOND-MIB", "gBondPortPm15MinIntervalValid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondPm15MinGroup = gBondPm15MinGroup.setStatus('current')
if mibBuilder.loadTexts: gBondPm15MinGroup.setDescription('A collection of objects supporting OPTIONAL historical Performance Monitoring information for G.Bond ports, during previous 15-minute intervals.')
gBondPm1DayGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 211, 2, 1, 8)).setObjects(("GBOND-MIB", "gBondPortPm1DayIntervalMoniTime"), ("GBOND-MIB", "gBondPortPm1DayIntervalES"), ("GBOND-MIB", "gBondPortPm1DayIntervalSES"), ("GBOND-MIB", "gBondPortPm1DayIntervalUAS"), ("GBOND-MIB", "gBondPortPm1DayIntervalValid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondPm1DayGroup = gBondPm1DayGroup.setStatus('current')
if mibBuilder.loadTexts: gBondPm1DayGroup.setDescription('A collection of objects supporting OPTIONAL historical Performance Monitoring information for G.Bond ports, during previous 1-day intervals.')
gBondPmTcaConfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 211, 2, 1, 9)).setObjects(("GBOND-MIB", "gBondPortConfPmTcaConfProfile"), ("GBOND-MIB", "gBondPortConfPmTcaEnable"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh15MinES"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh15MinSES"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh15MinUAS"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh1DayES"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh1DaySES"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh1DayUAS"), ("GBOND-MIB", "gBondPortPmTcaProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondPmTcaConfGroup = gBondPmTcaConfGroup.setStatus('current')
if mibBuilder.loadTexts: gBondPmTcaConfGroup.setDescription('A collection of objects required for configuration of Performance Monitoring Threshold Crossing Alert notifications in G.Bond ports.')
gBondPmTcaNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 211, 2, 1, 10)).setObjects(("GBOND-MIB", "gBondPmTca15MinESCrossing"), ("GBOND-MIB", "gBondPmTca15MinSESCrossing"), ("GBOND-MIB", "gBondPmTca15MinUASCrossing"), ("GBOND-MIB", "gBondPmTca1DayESCrossing"), ("GBOND-MIB", "gBondPmTca1DaySESCrossing"), ("GBOND-MIB", "gBondPmTca1DayUASCrossing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondPmTcaNotificationGroup = gBondPmTcaNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: gBondPmTcaNotificationGroup.setDescription('This group supports notifications of Performance Monitoring Threshold Crossing Alerts associated with G.Bond ports.')
gBondCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 211, 2, 2, 1)).setObjects(("GBOND-MIB", "gBondBasicGroup"), ("GBOND-MIB", "gBondTcaConfGroup"), ("GBOND-MIB", "gBondTcaNotificationGroup"), ("GBOND-MIB", "gBondDiscoveryGroup"), ("GBOND-MIB", "gBondMultiSchemeGroup"), ("GBOND-MIB", "gBondPmCurGroup"), ("GBOND-MIB", "gBondPm15MinGroup"), ("GBOND-MIB", "gBondPm1DayGroup"), ("GBOND-MIB", "gBondPmTcaConfGroup"), ("GBOND-MIB", "gBondPmTcaNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondCompliance = gBondCompliance.setStatus('current')
if mibBuilder.loadTexts: gBondCompliance.setDescription('The compliance statement for G.Bond interfaces. Compliance with the following external compliance statements is REQUIRED: MIB Module Compliance Statement ---------- -------------------- IF-MIB ifCompliance3 Compliance with the following external compliance statements is OPTIONAL for implementations supporting bonding with flexible cross-connect between the GBS and BCE ports: MIB Module Compliance Statement ---------- -------------------- IF-INVERTED-STACK-MIB ifInvCompliance IF-CAP-STACK-MIB ifCapStackCompliance')
mibBuilder.exportSymbols("GBOND-MIB", gBondPortConfDiscoveryCode=gBondPortConfDiscoveryCode, gBondGroups=gBondGroups, gBondPortPmCur1DaySES=gBondPortPmCur1DaySES, gBondPortPM=gBondPortPM, gBondPortConfEntry=gBondPortConfEntry, gBondPortConfTargetDnDataRate=gBondPortConfTargetDnDataRate, gBondPortPmCurUAS=gBondPortPmCurUAS, gBondPortPmTcaProfileThresh15MinSES=gBondPortPmTcaProfileThresh15MinSES, gBondPortConfPeerAdminScheme=gBondPortConfPeerAdminScheme, gBondPort=gBondPort, gBondPortPm1DayIntervalSES=gBondPortPm1DayIntervalSES, gBondPortStatOperScheme=gBondPortStatOperScheme, gBondPortNotifications=gBondPortNotifications, gBondPortStatUpDataRate=gBondPortStatUpDataRate, gBondPortPm1DayIntervalIndex=gBondPortPm1DayIntervalIndex, gBondPortPmCurTable=gBondPortPmCurTable, gBondPortPm1DayEntry=gBondPortPm1DayEntry, gBondPortPm15MinTable=gBondPortPm15MinTable, gBondPortPmCurEntry=gBondPortPmCurEntry, gBondPortPmCur15MinTimeElapsed=gBondPortPmCur15MinTimeElapsed, gBondPortPm15MinIntervalUAS=gBondPortPm15MinIntervalUAS, GBondPm1DayIntervalThreshold=GBondPm1DayIntervalThreshold, gBondPortPmCur15MinSES=gBondPortPmCur15MinSES, gBondTcaNotificationGroup=gBondTcaNotificationGroup, gBondPortCapPeerSchemesSupported=gBondPortCapPeerSchemesSupported, gBondPortStatPeerOperScheme=gBondPortStatPeerOperScheme, gBondCompliance=gBondCompliance, gBondObjects=gBondObjects, gBondPortStatTable=gBondPortStatTable, gBondDiscoveryGroup=gBondDiscoveryGroup, gBondPortConfLowRateCrossingEnable=gBondPortConfLowRateCrossingEnable, gBondPortPmCur15MinES=gBondPortPmCur15MinES, gBondPortPmCur1DayES=gBondPortPmCur1DayES, gBondPortPm15MinIntervalIndex=gBondPortPm15MinIntervalIndex, gBondPortConfTargetUpDataRate=gBondPortConfTargetUpDataRate, gBondPortCapTable=gBondPortCapTable, gBondPortPmCurES=gBondPortPmCurES, gBondPortPmCur1DayUAS=gBondPortPmCur1DayUAS, gBondTcaConfGroup=gBondTcaConfGroup, gBondPortStatDnDataRate=gBondPortStatDnDataRate, gBondBceConfEntry=gBondBceConfEntry, gBondPortPmTcaProfileThresh1DayUAS=gBondPortPmTcaProfileThresh1DayUAS, gBondPortStatSide=gBondPortStatSide, gBondPmTcaNotificationGroup=gBondPmTcaNotificationGroup, gBondPortPmCur1DayTimeElapsed=gBondPortPmCur1DayTimeElapsed, gBondPmTca1DayUASCrossing=gBondPmTca1DayUASCrossing, gBondPm15MinGroup=gBondPm15MinGroup, gBondPmTca15MinESCrossing=gBondPmTca15MinESCrossing, gBondPortCapSchemesSupported=gBondPortCapSchemesSupported, gBondPortCapPeerCapacity=gBondPortCapPeerCapacity, gBondPmCurGroup=gBondPmCurGroup, gBondPortPm1DayIntervalMoniTime=gBondPortPm1DayIntervalMoniTime, gBondPortPmTcaProfileEntry=gBondPortPmTcaProfileEntry, gBondPortPmTcaProfileThresh1DayES=gBondPortPmTcaProfileThresh1DayES, gBondPortPmTcaProfileName=gBondPortPmTcaProfileName, PYSNMP_MODULE_ID=gBondMIB, gBondCompliances=gBondCompliances, gBondPortConfThreshLowDnRate=gBondPortConfThreshLowDnRate, gBondPortPmCur15MinInvalidIntervals=gBondPortPmCur15MinInvalidIntervals, gBondPortConfThreshLowUpRate=gBondPortConfThreshLowUpRate, gBondPortPmCur15MinValidIntervals=gBondPortPmCur15MinValidIntervals, gBondPortConfPmTcaEnable=gBondPortConfPmTcaEnable, gBondPortPmCur1DayValidIntervals=gBondPortPmCur1DayValidIntervals, gBondPortPm15MinIntervalMoniTime=gBondPortPm15MinIntervalMoniTime, gBondPortConfPmTcaConfProfile=gBondPortConfPmTcaConfProfile, gBondPortStatFltStatus=gBondPortStatFltStatus, gBondBceConfRemoteDiscoveryCode=gBondBceConfRemoteDiscoveryCode, gBondPortPm15MinIntervalES=gBondPortPm15MinIntervalES, gBondBceConfTable=gBondBceConfTable, gBondConformance=gBondConformance, gBondMIB=gBondMIB, gBondPortPm1DayIntervalValid=gBondPortPm1DayIntervalValid, gBondBce=gBondBce, gBondPortPmCur15MinUAS=gBondPortPmCur15MinUAS, gBondBasicGroup=gBondBasicGroup, gBondPortPm1DayIntervalES=gBondPortPm1DayIntervalES, gBondPortPm1DayIntervalUAS=gBondPortPm1DayIntervalUAS, gBondPortPmCur1DayInvalidIntervals=gBondPortPmCur1DayInvalidIntervals, gBondPmTca15MinSESCrossing=gBondPmTca15MinSESCrossing, gBondPortPm15MinIntervalValid=gBondPortPm15MinIntervalValid, gBondPmTcaConfGroup=gBondPmTcaConfGroup, gBondPm1DayGroup=gBondPm1DayGroup, gBondPmTca15MinUASCrossing=gBondPmTca15MinUASCrossing, gBondPortStatNumBCEs=gBondPortStatNumBCEs, gBondMultiSchemeGroup=gBondMultiSchemeGroup, gBondPmTca1DayESCrossing=gBondPmTca1DayESCrossing, gBondPortConfAdminScheme=gBondPortConfAdminScheme, gBondPortPm15MinEntry=gBondPortPm15MinEntry, gBondPortPm15MinIntervalSES=gBondPortPm15MinIntervalSES, gBondPortPmTcaProfileThresh1DaySES=gBondPortPmTcaProfileThresh1DaySES, gBondPortPmCurSES=gBondPortPmCurSES, gBondPortPmTcaProfileTable=gBondPortPmTcaProfileTable, gBondPortPmTcaProfileRowStatus=gBondPortPmTcaProfileRowStatus, gBondPortPm1DayTable=gBondPortPm1DayTable, gBondPmTca1DaySESCrossing=gBondPmTca1DaySESCrossing, gBondPortPmTcaProfileThresh15MinUAS=gBondPortPmTcaProfileThresh15MinUAS, gBondLowDnRateCrossing=gBondLowDnRateCrossing, gBondPortStatEntry=gBondPortStatEntry, gBondLowUpRateCrossing=gBondLowUpRateCrossing, gBondPortConfTable=gBondPortConfTable, gBondPortCapCapacity=gBondPortCapCapacity, gBondPortCapEntry=gBondPortCapEntry, gBondPortPmTcaProfileThresh15MinES=gBondPortPmTcaProfileThresh15MinES)
