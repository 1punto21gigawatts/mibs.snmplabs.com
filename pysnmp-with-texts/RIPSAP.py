#
# PySNMP MIB module RIPSAP (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RIPSAP
# Produced by pysmi-0.3.4 at Wed May  1 14:57:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, NotificationType, iso, ObjectIdentity, Gauge32, ModuleIdentity, Bits, Integer32, Counter64, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "NotificationType", "iso", "ObjectIdentity", "Gauge32", "ModuleIdentity", "Bits", "Integer32", "Counter64", "TimeTicks")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
novell = MibIdentifier((1, 3, 6, 1, 4, 1, 23))
mibDoc = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2))
ripsap = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 20))
ripsapSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 20, 1))
ripsapCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 20, 2))
class NetNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

ripSysTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 20, 1, 1), )
if mibBuilder.loadTexts: ripSysTable.setStatus('mandatory')
if mibBuilder.loadTexts: ripSysTable.setDescription('The RIP system table.')
ripSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 20, 1, 1, 1), ).setIndexNames((0, "RIPSAP", "ripSysInstance"))
if mibBuilder.loadTexts: ripSysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ripSysEntry.setDescription('Each entry corresponds to one instance of RIP running on the system.')
ripSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: ripSysInstance.setDescription('The unique identifier of the instance of RIP to which this row corresponds. This value links the instance of RIP to an instance of IPX running on the system (i.e. the value of ripSysInstance should be the same as a value of ipxSysInstance). This value may be written only when creating a new entry in the table.')
ripSysState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripSysState.setStatus('mandatory')
if mibBuilder.loadTexts: ripSysState.setDescription('Indicates the operational state of this instance of RIP.')
ripSysIncorrectPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripSysIncorrectPackets.setStatus('mandatory')
if mibBuilder.loadTexts: ripSysIncorrectPackets.setDescription('The number of times that an incorrectly formatted RIP packet was received.')
sapSysTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 20, 1, 2), )
if mibBuilder.loadTexts: sapSysTable.setStatus('mandatory')
if mibBuilder.loadTexts: sapSysTable.setDescription('The SAP system table.')
sapSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 20, 1, 2, 1), ).setIndexNames((0, "RIPSAP", "sapSysInstance"))
if mibBuilder.loadTexts: sapSysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sapSysEntry.setDescription('Each entry corresponds to one instance of SAP running on the system.')
sapSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: sapSysInstance.setDescription('The unique identifier of the instance of SAP to which this row corresponds. This value links the instance of SAP to an instance of IPX running on the system (i.e. the value of SApSysInstance should be the same as a value of ipxSysInstance). This value may be written only when creating a new entry in the table.')
sapSysState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapSysState.setStatus('mandatory')
if mibBuilder.loadTexts: sapSysState.setDescription('Indicates the operational state of this instance of SAP.')
sapSysIncorrectPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapSysIncorrectPackets.setStatus('mandatory')
if mibBuilder.loadTexts: sapSysIncorrectPackets.setDescription('The number of times that an incorrectly formatted SAP packet was received.')
ripCircTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1), )
if mibBuilder.loadTexts: ripCircTable.setStatus('mandatory')
if mibBuilder.loadTexts: ripCircTable.setDescription('The RIP Circuit table.')
ripCircEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1, 1), ).setIndexNames((0, "RIPSAP", "ripCircSysInstance"), (0, "RIPSAP", "ripCircIndex"))
if mibBuilder.loadTexts: ripCircEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ripCircEntry.setDescription('Each entry corresponds to one circuit known to the system.')
ripCircSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripCircSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: ripCircSysInstance.setDescription('The unique identifier of the instance of RIP and IPX (via ipxSysInstance) to which this entry corresponds. This value may be written only when creating a new entry in the table.')
ripCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ripCircIndex.setDescription('The identifier of this circuit, unique within the instance of RIP. This value corresponds to the circuit identifier found in ipxCircIndex. This value may be written only when creating a new entry in the table.')
ripCircState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("auto-on", 3), ("auto-off", 4))).clone('auto-off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripCircState.setStatus('mandatory')
if mibBuilder.loadTexts: ripCircState.setDescription('Indicates whether RIP information may be sent/received over this circuit.')
ripCircPace = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripCircPace.setStatus('mandatory')
if mibBuilder.loadTexts: ripCircPace.setDescription('The maximum pace, in packets per second, at which RIP packets may be sent on this circuit.')
ripCircUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1, 1, 5), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripCircUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: ripCircUpdate.setDescription('The RIP periodic update interval, in seconds.')
ripCircAgeMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1, 1, 6), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripCircAgeMultiplier.setStatus('mandatory')
if mibBuilder.loadTexts: ripCircAgeMultiplier.setDescription('The holding multiplier for information received in RIP periodic updates.')
ripCircPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripCircPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: ripCircPacketSize.setDescription('The RIP packet size used on this circuit.')
ripCircOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCircOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: ripCircOutPackets.setDescription('The number of RIP packets sent on this circuit.')
ripCircInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCircInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: ripCircInPackets.setDescription('The number of RIP packets received on this circuit.')
sapCircTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2), )
if mibBuilder.loadTexts: sapCircTable.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircTable.setDescription('The SAP Circuit table.')
sapCircEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1), ).setIndexNames((0, "RIPSAP", "sapCircSysInstance"), (0, "RIPSAP", "sapCircIndex"))
if mibBuilder.loadTexts: sapCircEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircEntry.setDescription('Each entry corresponds to one circuit known to the system.')
sapCircSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircSysInstance.setDescription('The unique identifier of the instance of SAP and IPX (via ipxSysInstance) to which this entry corresponds. This value may be written only when creating a new entry in the table.')
sapCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircIndex.setDescription('The identifier of this circuit, unique within the instance of SAP. This value corresponds to the circuit identifier found in ipxCircIndex. This value may be written only when creating a new entry in the table.')
sapCircState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("auto-on", 3), ("auto-off", 4))).clone('auto-off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircState.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircState.setDescription('Indicates whether SAP information may be sent/received over this circuit.')
sapCircPace = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircPace.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircPace.setDescription('The maximum pace, in packets per second, at which SAP packets may be sent on this circuit.')
sapCircUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1, 5), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircUpdate.setDescription('The SAP periodic update interval, in seconds.')
sapCircAgeMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1, 6), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircAgeMultiplier.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircAgeMultiplier.setDescription('The holding multiplier for information received in SAP periodic updates.')
sapCircPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircPacketSize.setDescription('The SAP packet size used on this circuit.')
sapCircGetNearestServerReply = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircGetNearestServerReply.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircGetNearestServerReply.setDescription('Indicates whether to respond to SAP get nearest server requests received on this circuit.')
sapCircOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCircOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircOutPackets.setDescription('The number of SAP packets sent on this circuit.')
sapCircInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCircInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircInPackets.setDescription('The number of SAP packets received on this circuit.')
mibBuilder.exportSymbols("RIPSAP", ripCircOutPackets=ripCircOutPackets, ripCircIndex=ripCircIndex, ripCircAgeMultiplier=ripCircAgeMultiplier, ripCircUpdate=ripCircUpdate, ripSysState=ripSysState, ripsap=ripsap, ripCircEntry=ripCircEntry, ripSysInstance=ripSysInstance, ripSysIncorrectPackets=ripSysIncorrectPackets, sapSysTable=sapSysTable, ripsapCircuit=ripsapCircuit, sapCircEntry=sapCircEntry, sapCircPace=sapCircPace, sapCircUpdate=sapCircUpdate, NetNumber=NetNumber, sapCircOutPackets=sapCircOutPackets, ripSysEntry=ripSysEntry, ripCircPacketSize=ripCircPacketSize, ripCircSysInstance=ripCircSysInstance, sapCircGetNearestServerReply=sapCircGetNearestServerReply, sapSysInstance=sapSysInstance, sapCircState=sapCircState, sapCircAgeMultiplier=sapCircAgeMultiplier, ripCircPace=ripCircPace, ripSysTable=ripSysTable, mibDoc=mibDoc, novell=novell, sapCircInPackets=sapCircInPackets, ripsapSystem=ripsapSystem, sapCircSysInstance=sapCircSysInstance, sapCircTable=sapCircTable, sapCircIndex=sapCircIndex, ripCircInPackets=ripCircInPackets, ripCircState=ripCircState, sapSysIncorrectPackets=sapSysIncorrectPackets, ripCircTable=ripCircTable, sapCircPacketSize=sapCircPacketSize, sapSysState=sapSysState, sapSysEntry=sapSysEntry)
