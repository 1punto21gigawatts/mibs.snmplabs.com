#
# PySNMP MIB module KEEPALIVED-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/KEEPALIVED-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:04:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetPortNumber, InetAddressPrefixLength, InetAddress, InetAddressType, InetScopeType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddressPrefixLength", "InetAddress", "InetAddressType", "InetScopeType")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, IpAddress, Gauge32, Counter64, ObjectIdentity, enterprises, NotificationType, iso, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier, Unsigned32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "Gauge32", "Counter64", "ObjectIdentity", "enterprises", "NotificationType", "iso", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier", "Unsigned32", "Bits")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
keepalived = ModuleIdentity((1, 3, 6, 1, 4, 1, 9586, 100, 5))
keepalived.setRevisions(('2009-04-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: keepalived.setRevisionsDescriptions(('Initial revision',))
if mibBuilder.loadTexts: keepalived.setLastUpdated('200904080000Z')
if mibBuilder.loadTexts: keepalived.setOrganization('Keepalived')
if mibBuilder.loadTexts: keepalived.setContactInfo('http://www.keepalived.org')
if mibBuilder.loadTexts: keepalived.setDescription('This MIB describes objects used by keepalived, both for VRRP and health checker.')
debian = MibIdentifier((1, 3, 6, 1, 4, 1, 9586))
project = MibIdentifier((1, 3, 6, 1, 4, 1, 9586, 100))
class VrrpState(TextualConvention, Integer32):
    description = 'Represents a VRRP state.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("init", 0), ("backup", 1), ("master", 2), ("fault", 3), ("unknown", 4))

pysmi_global = MibIdentifier((1, 3, 6, 1, 4, 1, 9586, 100, 5, 1)).setLabel("global")
vrrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2))
check = MibIdentifier((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3))
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9586, 100, 5, 4))
version = MibScalar((1, 3, 6, 1, 4, 1, 9586, 100, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: version.setStatus('current')
if mibBuilder.loadTexts: version.setDescription('Version of keepalived')
routerId = MibScalar((1, 3, 6, 1, 4, 1, 9586, 100, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerId.setStatus('current')
if mibBuilder.loadTexts: routerId.setDescription('Router ID')
mail = MibIdentifier((1, 3, 6, 1, 4, 1, 9586, 100, 5, 1, 3))
smtpServerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9586, 100, 5, 1, 3, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpServerAddressType.setStatus('current')
if mibBuilder.loadTexts: smtpServerAddressType.setDescription('Address type for SMTP server.')
smtpServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 9586, 100, 5, 1, 3, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpServerAddress.setStatus('current')
if mibBuilder.loadTexts: smtpServerAddress.setDescription('Address of SMTP server.')
smtpServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9586, 100, 5, 1, 3, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpServerTimeout.setStatus('current')
if mibBuilder.loadTexts: smtpServerTimeout.setDescription('SMTP server connection timeout.')
emailFrom = MibScalar((1, 3, 6, 1, 4, 1, 9586, 100, 5, 1, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emailFrom.setStatus('current')
if mibBuilder.loadTexts: emailFrom.setDescription('Email address for the From field.')
emailTable = MibTable((1, 3, 6, 1, 4, 1, 9586, 100, 5, 1, 3, 5), )
if mibBuilder.loadTexts: emailTable.setStatus('current')
if mibBuilder.loadTexts: emailTable.setDescription('Table of email notification addresses.')
emailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9586, 100, 5, 1, 3, 5, 1), ).setIndexNames((0, "KEEPALIVED-MIB", "emailIndex"))
if mibBuilder.loadTexts: emailEntry.setStatus('current')
if mibBuilder.loadTexts: emailEntry.setDescription('Email address to be notified with an alert.')
emailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: emailIndex.setStatus('current')
if mibBuilder.loadTexts: emailIndex.setDescription('Index for the email address.')
emailAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 1, 3, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emailAddress.setStatus('current')
if mibBuilder.loadTexts: emailAddress.setDescription('Email address to be notified when an alert is raised.')
trapEnable = MibScalar((1, 3, 6, 1, 4, 1, 9586, 100, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapEnable.setStatus('current')
if mibBuilder.loadTexts: trapEnable.setDescription('Indicate whether traps should be sent for various events.')
linkBeat = MibScalar((1, 3, 6, 1, 4, 1, 9586, 100, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("netlink", 1), ("polling", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkBeat.setStatus('current')
if mibBuilder.loadTexts: linkBeat.setDescription('Indicate which method is used to check if a link is up or down. netlink(1) means that the kernel will push a link state change while polling(2) means that the status of the link is checked periodically.')
vrrpSyncGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 1), )
if mibBuilder.loadTexts: vrrpSyncGroupTable.setStatus('current')
if mibBuilder.loadTexts: vrrpSyncGroupTable.setDescription('Table of sync groups')
vrrpSyncGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 1, 1), ).setIndexNames((0, "KEEPALIVED-MIB", "vrrpSyncGroupIndex"))
if mibBuilder.loadTexts: vrrpSyncGroupEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpSyncGroupEntry.setDescription('Information describing a sync group')
vrrpSyncGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vrrpSyncGroupIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpSyncGroupIndex.setDescription('Index of the synchronisation group.')
vrrpSyncGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpSyncGroupName.setStatus('current')
if mibBuilder.loadTexts: vrrpSyncGroupName.setDescription('Name of the synchronisation group.')
vrrpSyncGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 1, 1, 3), VrrpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpSyncGroupState.setStatus('current')
if mibBuilder.loadTexts: vrrpSyncGroupState.setDescription('Current state of the synchronisation group.')
vrrpSyncGroupSmtpAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpSyncGroupSmtpAlert.setStatus('current')
if mibBuilder.loadTexts: vrrpSyncGroupSmtpAlert.setDescription('Will SMTP alert be sent for this synchronisation group?')
vrrpSyncGroupNotifyExec = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpSyncGroupNotifyExec.setStatus('current')
if mibBuilder.loadTexts: vrrpSyncGroupNotifyExec.setDescription('Will we execute notification script for this group?')
vrrpSyncGroupScriptMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpSyncGroupScriptMaster.setStatus('current')
if mibBuilder.loadTexts: vrrpSyncGroupScriptMaster.setDescription('Script to execute when the group becomes master.')
vrrpSyncGroupScriptBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpSyncGroupScriptBackup.setStatus('current')
if mibBuilder.loadTexts: vrrpSyncGroupScriptBackup.setDescription('Script to execute when the group becomes backup.')
vrrpSyncGroupScriptFault = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpSyncGroupScriptFault.setStatus('current')
if mibBuilder.loadTexts: vrrpSyncGroupScriptFault.setDescription('Script to execute when the group is in fault state.')
vrrpSyncGroupScript = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpSyncGroupScript.setStatus('current')
if mibBuilder.loadTexts: vrrpSyncGroupScript.setDescription('Script to execute whenever a state change occurs.')
vrrpSyncGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 2), )
if mibBuilder.loadTexts: vrrpSyncGroupMemberTable.setStatus('current')
if mibBuilder.loadTexts: vrrpSyncGroupMemberTable.setDescription('Table of instances contained in sync groups')
vrrpSyncGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 2, 1), ).setIndexNames((0, "KEEPALIVED-MIB", "vrrpSyncGroupIndex"), (0, "KEEPALIVED-MIB", "vrrpSyncGroupMemberInstanceIndex"))
if mibBuilder.loadTexts: vrrpSyncGroupMemberEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpSyncGroupMemberEntry.setDescription('Information describing a member of a sync group')
vrrpSyncGroupMemberInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vrrpSyncGroupMemberInstanceIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpSyncGroupMemberInstanceIndex.setDescription('Index of an instance in a synchronisation group. There is no relation with this index and the index of the corresponding instance in vrrpInstanceTable. Use the name to find out the corresponding instance.')
vrrpSyncGroupMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpSyncGroupMemberName.setStatus('current')
if mibBuilder.loadTexts: vrrpSyncGroupMemberName.setDescription('Name of the instance contained in the synchronisation group.')
vrrpInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3), )
if mibBuilder.loadTexts: vrrpInstanceTable.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceTable.setDescription('Table of VRRP instances')
vrrpInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1), ).setIndexNames((0, "KEEPALIVED-MIB", "vrrpInstanceIndex"))
if mibBuilder.loadTexts: vrrpInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceEntry.setDescription('Information describing a sync group')
vrrpInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("static", 0))))
if mibBuilder.loadTexts: vrrpInstanceIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceIndex.setDescription('Index of the VRRP instance. Instance 0 is for static IP and static routes.')
vrrpInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstanceName.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceName.setDescription('Name of the VRRP instance.')
vrrpInstanceVirtualRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstanceVirtualRouterId.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceVirtualRouterId.setDescription('Virtual Router ID (VRID) for this VRRP instance.')
vrrpInstanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 4), VrrpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstanceState.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceState.setDescription('Current state of this VRRP instance.')
vrrpInstanceInitialState = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 5), VrrpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstanceInitialState.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceInitialState.setDescription('Initial state of this VRRP instance.')
vrrpInstanceWantedState = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 6), VrrpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstanceWantedState.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceWantedState.setDescription('State wanted by the operator for this VRRP instance.')
vrrpInstanceBasePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpInstanceBasePriority.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceBasePriority.setDescription('Base priority (as defined in the configuration file) for this VRRP instance. This value can be modified to force the virtual router instance to become backup or master. ')
vrrpInstanceEffectivePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstanceEffectivePriority.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceEffectivePriority.setDescription('Effective priority for this VRRP instance. Status of interfaces and script results are used to compute this value from the base priority.')
vrrpInstanceVipsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allSet", 1), ("notAllSet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstanceVipsStatus.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceVipsStatus.setDescription('Are all VIP of this VRRP instance enabled?')
vrrpInstancePrimaryInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstancePrimaryInterface.setStatus('current')
if mibBuilder.loadTexts: vrrpInstancePrimaryInterface.setDescription('Primary interface of this VRRP instance.')
vrrpInstanceTrackPrimaryIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tracked", 1), ("notTracked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstanceTrackPrimaryIf.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceTrackPrimaryIf.setDescription('Do we track the status of the primary interface?')
vrrpInstanceAdvertisementsInt = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 12), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstanceAdvertisementsInt.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceAdvertisementsInt.setDescription('Delay in seconds between two VRRP advertisements.')
vrrpInstancePreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("preempt", 1), ("noPreempt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpInstancePreempt.setStatus('current')
if mibBuilder.loadTexts: vrrpInstancePreempt.setDescription('Will a higher priority advertisement preempt a lower instance?')
vrrpInstancePreemptDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 14), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstancePreemptDelay.setStatus('current')
if mibBuilder.loadTexts: vrrpInstancePreemptDelay.setDescription('Delay after startup until preemption can happen. 0 means that there is no delay.')
vrrpInstanceAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("password", 1), ("ah", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstanceAuthType.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceAuthType.setDescription('Authentication method to authenticate other peers.')
vrrpInstanceLvsSyncDaemon = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstanceLvsSyncDaemon.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceLvsSyncDaemon.setDescription('Is LVS sync daemon enabled for this VRRP instance?')
vrrpInstanceLvsSyncInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstanceLvsSyncInterface.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceLvsSyncInterface.setDescription('If LVS sync daemon is enabled, which interface to use for syncing?')
vrrpInstanceSyncGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstanceSyncGroup.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceSyncGroup.setDescription('Name of the synchronisation group this VRRP instance belongs, if any.')
vrrpInstanceGarpDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 19), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstanceGarpDelay.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceGarpDelay.setDescription('Delay to launch gratuitous ARP (GARP).')
vrrpInstanceSmtpAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstanceSmtpAlert.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceSmtpAlert.setDescription('Will SMTP alert be sent for this VRRP instance?')
vrrpInstanceNotifyExec = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstanceNotifyExec.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceNotifyExec.setDescription('Will we execute notification script for this instance?')
vrrpInstanceScriptMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstanceScriptMaster.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceScriptMaster.setDescription('Script to execute when the instance becomes master.')
vrrpInstanceScriptBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstanceScriptBackup.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceScriptBackup.setDescription('Script to execute when the instance becomes backup.')
vrrpInstanceScriptFault = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstanceScriptFault.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceScriptFault.setDescription('Script to execute when the instance is in fault state.')
vrrpInstanceScriptStop = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstanceScriptStop.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceScriptStop.setDescription('Script to execute when the instance is stopped.')
vrrpInstanceScript = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 3, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInstanceScript.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceScript.setDescription('Script to execute whenever a state change occurs.')
vrrpTrackedInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 4), )
if mibBuilder.loadTexts: vrrpTrackedInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: vrrpTrackedInterfaceTable.setDescription('Table of tracked interfaces for each VRRP instance.')
vrrpTrackedInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 4, 1), ).setIndexNames((0, "KEEPALIVED-MIB", "vrrpInstanceIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vrrpTrackedInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpTrackedInterfaceEntry.setDescription('Information describing a tracked interface')
vrrpTrackedInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpTrackedInterfaceName.setStatus('current')
if mibBuilder.loadTexts: vrrpTrackedInterfaceName.setDescription('Name of the tracked interface.')
vrrpTrackedInterfaceWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpTrackedInterfaceWeight.setStatus('current')
if mibBuilder.loadTexts: vrrpTrackedInterfaceWeight.setDescription('Weight of the tracked interface.')
vrrpTrackedScriptTable = MibTable((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 5), )
if mibBuilder.loadTexts: vrrpTrackedScriptTable.setStatus('current')
if mibBuilder.loadTexts: vrrpTrackedScriptTable.setDescription('Table of tracked interfaces for each VRRP instance.')
vrrpTrackedScriptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 5, 1), ).setIndexNames((0, "KEEPALIVED-MIB", "vrrpInstanceIndex"), (0, "KEEPALIVED-MIB", "vrrpTrackedScriptIndex"))
if mibBuilder.loadTexts: vrrpTrackedScriptEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpTrackedScriptEntry.setDescription('Information describing a tracked script')
vrrpTrackedScriptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vrrpTrackedScriptIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpTrackedScriptIndex.setDescription('Index of the tracked script in the set of tracked scripts for the given VRRP instance. This index has no relation with the index of vrrpScriptTable.')
vrrpTrackedScriptName = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpTrackedScriptName.setStatus('current')
if mibBuilder.loadTexts: vrrpTrackedScriptName.setDescription('Name of the tracked interface.')
vrrpTrackedScriptWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpTrackedScriptWeight.setStatus('current')
if mibBuilder.loadTexts: vrrpTrackedScriptWeight.setDescription('Weight of the tracked interface.')
vrrpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 6), )
if mibBuilder.loadTexts: vrrpAddressTable.setStatus('current')
if mibBuilder.loadTexts: vrrpAddressTable.setDescription('Table of static and virtual addresses')
vrrpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 6, 1), ).setIndexNames((0, "KEEPALIVED-MIB", "vrrpInstanceIndex"), (0, "KEEPALIVED-MIB", "vrrpAddressIndex"))
if mibBuilder.loadTexts: vrrpAddressEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpAddressEntry.setDescription('Information describing an address. This can be a static address or a virtual address. In case of static address, the VRRP instance index is 0.')
vrrpAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vrrpAddressIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpAddressIndex.setDescription('Address index.')
vrrpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 6, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpAddressType.setStatus('current')
if mibBuilder.loadTexts: vrrpAddressType.setDescription('A value that represents a type of Internet address.')
vrrpAddressValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 6, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpAddressValue.setStatus('current')
if mibBuilder.loadTexts: vrrpAddressValue.setDescription('Actual IP address.')
vrrpAddressBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 6, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpAddressBroadcast.setStatus('current')
if mibBuilder.loadTexts: vrrpAddressBroadcast.setDescription('Broadcast address associated with the IP address.')
vrrpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 6, 1, 5), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpAddressMask.setStatus('current')
if mibBuilder.loadTexts: vrrpAddressMask.setDescription('Address mask.')
vrrpAddressScope = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 6, 1, 6), InetScopeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpAddressScope.setStatus('current')
if mibBuilder.loadTexts: vrrpAddressScope.setDescription('Address scope.')
vrrpAddressIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 6, 1, 7), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpAddressIfIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpAddressIfIndex.setDescription('Index of the interface to which the IP address is linked to.')
vrrpAddressIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 6, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpAddressIfName.setStatus('current')
if mibBuilder.loadTexts: vrrpAddressIfName.setDescription('Name of the interface to which the IP address is linked to.')
vrrpAddressIfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 6, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpAddressIfAlias.setStatus('current')
if mibBuilder.loadTexts: vrrpAddressIfAlias.setDescription('Alias name of the interface.')
vrrpAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("unset", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpAddressStatus.setStatus('current')
if mibBuilder.loadTexts: vrrpAddressStatus.setDescription('Is the IP address set?')
vrrpAddressAdvertising = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("advertised", 1), ("notAdvertised", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpAddressAdvertising.setStatus('current')
if mibBuilder.loadTexts: vrrpAddressAdvertising.setDescription('Status of VRRP advertising for this IP address.')
vrrpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 7), )
if mibBuilder.loadTexts: vrrpRouteTable.setStatus('current')
if mibBuilder.loadTexts: vrrpRouteTable.setDescription('Table of static and virtual routes.')
vrrpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 7, 1), ).setIndexNames((0, "KEEPALIVED-MIB", "vrrpInstanceIndex"), (0, "KEEPALIVED-MIB", "vrrpRouteIndex"))
if mibBuilder.loadTexts: vrrpRouteEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpRouteEntry.setDescription('Information describing a route. In case of a static route, the instance index is 0.')
vrrpRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vrrpRouteIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpRouteIndex.setDescription('Route index.')
vrrpRouteAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 7, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpRouteAddressType.setStatus('current')
if mibBuilder.loadTexts: vrrpRouteAddressType.setDescription('Route type of internet address.')
vrrpRouteDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 7, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpRouteDestination.setStatus('current')
if mibBuilder.loadTexts: vrrpRouteDestination.setDescription('Route destination.')
vrrpRouteDestinationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 7, 1, 4), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpRouteDestinationMask.setStatus('current')
if mibBuilder.loadTexts: vrrpRouteDestinationMask.setDescription('Route destination mask.')
vrrpRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 7, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpRouteGateway.setStatus('current')
if mibBuilder.loadTexts: vrrpRouteGateway.setDescription('Gateway for the given destination.')
vrrpRouteSecondaryGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 7, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpRouteSecondaryGateway.setStatus('current')
if mibBuilder.loadTexts: vrrpRouteSecondaryGateway.setDescription('An optional second gateway for the given destination.')
vrrpRouteSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 7, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpRouteSource.setStatus('current')
if mibBuilder.loadTexts: vrrpRouteSource.setDescription('Which source IP address to use with this route.')
vrrpRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 7, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpRouteMetric.setStatus('current')
if mibBuilder.loadTexts: vrrpRouteMetric.setDescription('Metric of this route.')
vrrpRouteScope = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 7, 1, 9), InetScopeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpRouteScope.setStatus('current')
if mibBuilder.loadTexts: vrrpRouteScope.setDescription('Scope of this route.')
vrrpRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("ecmp", 2), ("blackhole", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpRouteType.setStatus('current')
if mibBuilder.loadTexts: vrrpRouteType.setDescription('Kind of route.')
vrrpRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 7, 1, 11), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpRouteIfIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpRouteIfIndex.setDescription('Interface attached to this route.')
vrrpRouteIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 7, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpRouteIfName.setStatus('current')
if mibBuilder.loadTexts: vrrpRouteIfName.setDescription('Name of the interface of attached to this route.')
vrrpRouteRoutingTable = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 7, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpRouteRoutingTable.setStatus('current')
if mibBuilder.loadTexts: vrrpRouteRoutingTable.setDescription('Routing table where to route should be inserted.')
vrrpRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("unset", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpRouteStatus.setStatus('current')
if mibBuilder.loadTexts: vrrpRouteStatus.setDescription('Is this route set in the kernel?')
vrrpScriptTable = MibTable((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 8), )
if mibBuilder.loadTexts: vrrpScriptTable.setStatus('current')
if mibBuilder.loadTexts: vrrpScriptTable.setDescription('Table of VRRP scripts')
vrrpScriptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 8, 1), ).setIndexNames((0, "KEEPALIVED-MIB", "vrrpScriptIndex"))
if mibBuilder.loadTexts: vrrpScriptEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpScriptEntry.setDescription('Information describing a VRRP script')
vrrpScriptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vrrpScriptIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpScriptIndex.setDescription('Script index.')
vrrpScriptName = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpScriptName.setStatus('current')
if mibBuilder.loadTexts: vrrpScriptName.setDescription('Symbolic name of the script.')
vrrpScriptCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpScriptCommand.setStatus('current')
if mibBuilder.loadTexts: vrrpScriptCommand.setDescription('Command executed when running the script.')
vrrpScriptInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 8, 1, 4), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpScriptInterval.setStatus('current')
if mibBuilder.loadTexts: vrrpScriptInterval.setDescription('Interval between two runs of the script.')
vrrpScriptWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpScriptWeight.setStatus('current')
if mibBuilder.loadTexts: vrrpScriptWeight.setDescription('Weight of the script if successful.')
vrrpScriptResult = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("init", 1), ("bad", 2), ("good", 3), ("initgood", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpScriptResult.setStatus('current')
if mibBuilder.loadTexts: vrrpScriptResult.setDescription('Current status of the script.')
vrrpScriptRise = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 8, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpScriptRise.setStatus('current')
if mibBuilder.loadTexts: vrrpScriptRise.setDescription('How many times the script should succeed before OK.')
vrrpScriptFall = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpScriptFall.setStatus('current')
if mibBuilder.loadTexts: vrrpScriptFall.setDescription('How many times the script should fail before KO.')
vrrpTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 9))
vrrpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 9, 0))
vrrpTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 9, 1))
vrrpSyncGroupStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 9, 0, 1)).setObjects(("KEEPALIVED-MIB", "vrrpSyncGroupName"), ("KEEPALIVED-MIB", "vrrpSyncGroupState"))
if mibBuilder.loadTexts: vrrpSyncGroupStateChange.setStatus('current')
if mibBuilder.loadTexts: vrrpSyncGroupStateChange.setDescription('This trap signifies that the state of the whole vrrp sync group changed.')
vrrpInstanceStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9586, 100, 5, 2, 9, 0, 2)).setObjects(("KEEPALIVED-MIB", "vrrpInstanceName"), ("KEEPALIVED-MIB", "vrrpInstanceState"), ("KEEPALIVED-MIB", "vrrpInstanceInitialState"))
if mibBuilder.loadTexts: vrrpInstanceStateChange.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceStateChange.setDescription('This trap signifies that the state of a vrrp instance changed.')
virtualServerGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 1), )
if mibBuilder.loadTexts: virtualServerGroupTable.setStatus('current')
if mibBuilder.loadTexts: virtualServerGroupTable.setDescription('Table of virtual server groups.')
virtualServerGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 1, 1), ).setIndexNames((0, "KEEPALIVED-MIB", "virtualServerGroupIndex"))
if mibBuilder.loadTexts: virtualServerGroupEntry.setStatus('current')
if mibBuilder.loadTexts: virtualServerGroupEntry.setDescription('Information describing a virtual server group.')
virtualServerGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: virtualServerGroupIndex.setStatus('current')
if mibBuilder.loadTexts: virtualServerGroupIndex.setDescription('Index of the virtual server group.')
virtualServerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerGroupName.setStatus('current')
if mibBuilder.loadTexts: virtualServerGroupName.setDescription('Name of the virtual server group.')
virtualServerGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 2), )
if mibBuilder.loadTexts: virtualServerGroupMemberTable.setStatus('current')
if mibBuilder.loadTexts: virtualServerGroupMemberTable.setDescription('Table of members of a virtual server group.')
virtualServerGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 2, 1), ).setIndexNames((0, "KEEPALIVED-MIB", "virtualServerGroupIndex"), (0, "KEEPALIVED-MIB", "virtualServerGroupMemberIndex"))
if mibBuilder.loadTexts: virtualServerGroupMemberEntry.setStatus('current')
if mibBuilder.loadTexts: virtualServerGroupMemberEntry.setDescription('Description of a member of a virtual server group.')
virtualServerGroupMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: virtualServerGroupMemberIndex.setStatus('current')
if mibBuilder.loadTexts: virtualServerGroupMemberIndex.setDescription('Index of the member into virtual server group.')
virtualServerGroupMemberType = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fwmark", 1), ("ip", 2), ("iprange", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerGroupMemberType.setStatus('current')
if mibBuilder.loadTexts: virtualServerGroupMemberType.setDescription('Kind of entry: firewall mark, address with port or range of addresses with port.')
virtualServerGroupMemberFwMark = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerGroupMemberFwMark.setStatus('current')
if mibBuilder.loadTexts: virtualServerGroupMemberFwMark.setDescription('Firewall mark for this member. If the kind of this member is not fwmark(1), then this entry should not exist for the current row.')
virtualServerGroupMemberAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerGroupMemberAddrType.setStatus('current')
if mibBuilder.loadTexts: virtualServerGroupMemberAddrType.setDescription('Type of IP address for this member. If the kind of this member is neither address(2) or range(3), then this entry should not exist for the current row.')
virtualServerGroupMemberAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerGroupMemberAddress.setStatus('current')
if mibBuilder.loadTexts: virtualServerGroupMemberAddress.setDescription('IP address of this member. If the kind of this member is not address(2), then this entry should not exist for the current row.')
virtualServerGroupMemberAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 2, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerGroupMemberAddr1.setStatus('current')
if mibBuilder.loadTexts: virtualServerGroupMemberAddr1.setDescription('First IP address of the range for this member. If the kind of this member is not range(3), then this entry should not exist for the current row.')
virtualServerGroupMemberAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerGroupMemberAddr2.setStatus('current')
if mibBuilder.loadTexts: virtualServerGroupMemberAddr2.setDescription('Second IP address of the range for this member. If the kind of this member is not range(3), then this entry should not exist for the current row.')
virtualServerGroupMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 2, 1, 8), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerGroupMemberPort.setStatus('current')
if mibBuilder.loadTexts: virtualServerGroupMemberPort.setDescription('V port for this member. If the kind of this member is neither address(2) nor range(3), then this entry should not exist for the current row.')
virtualServerTable = MibTable((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3), )
if mibBuilder.loadTexts: virtualServerTable.setStatus('current')
if mibBuilder.loadTexts: virtualServerTable.setDescription('Table of virtual servers.')
virtualServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1), ).setIndexNames((0, "KEEPALIVED-MIB", "virtualServerIndex"))
if mibBuilder.loadTexts: virtualServerEntry.setStatus('current')
if mibBuilder.loadTexts: virtualServerEntry.setDescription('Information describing a virtual server.')
virtualServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: virtualServerIndex.setStatus('current')
if mibBuilder.loadTexts: virtualServerIndex.setDescription('Index of the virtual server.')
virtualServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fwmark", 1), ("ip", 2), ("group", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerType.setStatus('current')
if mibBuilder.loadTexts: virtualServerType.setDescription('Type of virtual server. A virtual server can either be defined from a firewall mark, an IP and a port or from a virtual server group.')
virtualServerNameOfGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerNameOfGroup.setStatus('current')
if mibBuilder.loadTexts: virtualServerNameOfGroup.setDescription('If the virtual is defined from a group, this is the name of the group.')
virtualServerFwMark = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerFwMark.setStatus('current')
if mibBuilder.loadTexts: virtualServerFwMark.setDescription('If the virtual server is defined from a firewall mark, this is the value of the mark. Otherwise, this column should not exist in the current row.')
virtualServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerAddrType.setStatus('current')
if mibBuilder.loadTexts: virtualServerAddrType.setDescription('If the virtual server is defined from an IP, this is the address family. Otherwise, this column should not exist in the current row.')
virtualServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerAddress.setStatus('current')
if mibBuilder.loadTexts: virtualServerAddress.setDescription('If the virtual server is defined from an IP address, this is the value of the IP. Otherwise, this column should not exist in the current row.')
virtualServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerPort.setStatus('current')
if mibBuilder.loadTexts: virtualServerPort.setDescription('If the virtual server is defined from an IP, this is the value of the port to listen for requests. Otherwise, this column should not exist in the current row.')
virtualServerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerProtocol.setStatus('current')
if mibBuilder.loadTexts: virtualServerProtocol.setDescription('Which transport protocol should be used for this virtual server.')
virtualServerLoadBalancingAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99))).clone(namedValues=NamedValues(("rr", 1), ("wrr", 2), ("lc", 3), ("wlc", 4), ("lblc", 5), ("lblcr", 6), ("dh", 7), ("sh", 8), ("sed", 9), ("nq", 10), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerLoadBalancingAlgo.setStatus('current')
if mibBuilder.loadTexts: virtualServerLoadBalancingAlgo.setDescription('Which load balancing algorithm (or scheduler) should be used for this virtual server.')
virtualServerLoadBalancingKind = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nat", 1), ("dr", 2), ("tun", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerLoadBalancingKind.setStatus('current')
if mibBuilder.loadTexts: virtualServerLoadBalancingKind.setDescription('Forwarding method to use for this virtual server.')
virtualServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alive", 1), ("dead", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerStatus.setStatus('current')
if mibBuilder.loadTexts: virtualServerStatus.setDescription('Current status of this virtual server.')
virtualServerVirtualHost = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerVirtualHost.setStatus('current')
if mibBuilder.loadTexts: virtualServerVirtualHost.setDescription('Virtualhost of this server for HTTP like requests.')
virtualServerPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerPersist.setStatus('current')
if mibBuilder.loadTexts: virtualServerPersist.setDescription('Is the virtual service persistence enabled?')
virtualServerPersistTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 14), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerPersistTimeout.setStatus('current')
if mibBuilder.loadTexts: virtualServerPersistTimeout.setDescription('If this virtual service is persistence, what is the timeout.')
virtualServerPersistGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 15), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerPersistGranularity.setStatus('current')
if mibBuilder.loadTexts: virtualServerPersistGranularity.setDescription('Netmask specifying the granularity of the persistence mechanism.')
virtualServerDelayLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 16), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerDelayLoop.setStatus('current')
if mibBuilder.loadTexts: virtualServerDelayLoop.setDescription('Delay in seconds between two checks.')
virtualServerHaSuspend = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerHaSuspend.setStatus('current')
if mibBuilder.loadTexts: virtualServerHaSuspend.setDescription('If set to true(1), checks will be suspended if the IP of the virtual server is currently not set.')
virtualServerAlpha = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerAlpha.setStatus('current')
if mibBuilder.loadTexts: virtualServerAlpha.setDescription('Is alpha mode enabled?')
virtualServerOmega = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerOmega.setStatus('current')
if mibBuilder.loadTexts: virtualServerOmega.setDescription('Is omega mode enabled?')
virtualServerRealServersTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerRealServersTotal.setStatus('current')
if mibBuilder.loadTexts: virtualServerRealServersTotal.setDescription('Total number of real servers for this virtual server.')
virtualServerRealServersUp = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerRealServersUp.setStatus('current')
if mibBuilder.loadTexts: virtualServerRealServersUp.setDescription('Real servers actually up for this virtual server.')
virtualServerQuorum = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerQuorum.setStatus('current')
if mibBuilder.loadTexts: virtualServerQuorum.setDescription('Quorum to get amond real servers to consider this virtual server up.')
virtualServerQuorumStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("met", 1), ("notMet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerQuorumStatus.setStatus('current')
if mibBuilder.loadTexts: virtualServerQuorumStatus.setDescription('Current status of the quorum for this virtual server.')
virtualServerQuorumUp = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerQuorumUp.setStatus('current')
if mibBuilder.loadTexts: virtualServerQuorumUp.setDescription('Command to execute when the quorum is met.')
virtualServerQuorumDown = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerQuorumDown.setStatus('current')
if mibBuilder.loadTexts: virtualServerQuorumDown.setDescription('Command to execute when the quorum is not met.')
virtualServerHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerHysteresis.setStatus('current')
if mibBuilder.loadTexts: virtualServerHysteresis.setDescription('Hysteresis with respect to quorum count.')
virtualServerStatsConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 27), Gauge32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerStatsConns.setStatus('current')
if mibBuilder.loadTexts: virtualServerStatsConns.setDescription('Total number of connections scheduled for this virtual server.')
virtualServerStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 28), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerStatsInPkts.setStatus('current')
if mibBuilder.loadTexts: virtualServerStatsInPkts.setDescription('Total number of incoming packets for this virtual server.')
virtualServerStatsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 29), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerStatsOutPkts.setStatus('current')
if mibBuilder.loadTexts: virtualServerStatsOutPkts.setDescription('Total number of outgoing packets for this virtual server.')
virtualServerStatsInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 30), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerStatsInBytes.setStatus('current')
if mibBuilder.loadTexts: virtualServerStatsInBytes.setDescription('Total number of incoming bytes for this virtual server.')
virtualServerStatsOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 31), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerStatsOutBytes.setStatus('current')
if mibBuilder.loadTexts: virtualServerStatsOutBytes.setDescription('Total number of outgoing bytes for this virtual server.')
virtualServerRateCps = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 32), Gauge32()).setUnits('connections/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerRateCps.setStatus('current')
if mibBuilder.loadTexts: virtualServerRateCps.setDescription('Current connection rate for this virtual server.')
virtualServerRateInPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 33), Gauge32()).setUnits('packets/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerRateInPPS.setStatus('current')
if mibBuilder.loadTexts: virtualServerRateInPPS.setDescription('Current in packet rate for this virtual server.')
virtualServerRateOutPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 34), Gauge32()).setUnits('packets/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerRateOutPPS.setStatus('current')
if mibBuilder.loadTexts: virtualServerRateOutPPS.setDescription('Current out packet rate for this virtual server.')
virtualServerRateInBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 35), Gauge32()).setUnits('bytes/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerRateInBPS.setStatus('current')
if mibBuilder.loadTexts: virtualServerRateInBPS.setDescription('Current incoming rate for this virtual server.')
virtualServerRateOutBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 3, 1, 36), Gauge32()).setUnits('bytes/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualServerRateOutBPS.setStatus('current')
if mibBuilder.loadTexts: virtualServerRateOutBPS.setDescription('Current outgoing rate for this virtual server.')
realServerTable = MibTable((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4), )
if mibBuilder.loadTexts: realServerTable.setStatus('current')
if mibBuilder.loadTexts: realServerTable.setDescription('Table of real servers. This includes regular real servers and sorry servers.')
realServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1), ).setIndexNames((0, "KEEPALIVED-MIB", "virtualServerIndex"), (0, "KEEPALIVED-MIB", "realServerIndex"))
if mibBuilder.loadTexts: realServerEntry.setStatus('current')
if mibBuilder.loadTexts: realServerEntry.setDescription('Information describing a real server.')
realServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: realServerIndex.setStatus('current')
if mibBuilder.loadTexts: realServerIndex.setDescription('Index of the real server.')
realServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular", 1), ("sorry", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerType.setStatus('current')
if mibBuilder.loadTexts: realServerType.setDescription('Type of real server: either a regular real server or a sorry server.')
realServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerAddrType.setStatus('current')
if mibBuilder.loadTexts: realServerAddrType.setDescription('Address family for this real server.')
realServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerAddress.setStatus('current')
if mibBuilder.loadTexts: realServerAddress.setDescription('IP address of this real server.')
realServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 5), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerPort.setStatus('current')
if mibBuilder.loadTexts: realServerPort.setDescription('Port of the service.')
realServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alive", 1), ("dead", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerStatus.setStatus('current')
if mibBuilder.loadTexts: realServerStatus.setDescription('Status of this real server.')
realServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realServerWeight.setStatus('current')
if mibBuilder.loadTexts: realServerWeight.setDescription('Weight of this real server. This value can be set to 0 to disable the real server.')
realServerUpperConnectionLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerUpperConnectionLimit.setStatus('current')
if mibBuilder.loadTexts: realServerUpperConnectionLimit.setDescription('Maximum number of connections for this real server.')
realServerLowerConnectionLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerLowerConnectionLimit.setStatus('current')
if mibBuilder.loadTexts: realServerLowerConnectionLimit.setDescription('Minimum number of connections for this real server.')
realServerActionWhenDown = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("remove", 1), ("inhibit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerActionWhenDown.setStatus('current')
if mibBuilder.loadTexts: realServerActionWhenDown.setDescription('What action is performed when this server is down. Its weight can be set to 0 (inhibit) or it can be removed from the pool.')
realServerNotifyUp = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerNotifyUp.setStatus('current')
if mibBuilder.loadTexts: realServerNotifyUp.setDescription('Command to execute when this server becomes alive.')
realServerNotifyDown = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerNotifyDown.setStatus('current')
if mibBuilder.loadTexts: realServerNotifyDown.setDescription('Command to execute when this server becomes dead.')
realServerFailedChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerFailedChecks.setStatus('current')
if mibBuilder.loadTexts: realServerFailedChecks.setDescription('How many failed checks for this real server.')
realServerStatsConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 14), Gauge32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerStatsConns.setStatus('current')
if mibBuilder.loadTexts: realServerStatsConns.setDescription('Total number of connections scheduled for this real server.')
realServerStatsActiveConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 15), Gauge32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerStatsActiveConns.setStatus('current')
if mibBuilder.loadTexts: realServerStatsActiveConns.setDescription('Current active connections for this real server.')
realServerStatsInactiveConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 16), Gauge32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerStatsInactiveConns.setStatus('current')
if mibBuilder.loadTexts: realServerStatsInactiveConns.setDescription('Current inactive connections for this real server.')
realServerStatsPersistentConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 17), Gauge32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerStatsPersistentConns.setStatus('current')
if mibBuilder.loadTexts: realServerStatsPersistentConns.setDescription('Current persistent connections for this real server.')
realServerStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 18), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerStatsInPkts.setStatus('current')
if mibBuilder.loadTexts: realServerStatsInPkts.setDescription('Total number of incoming packets for this real server.')
realServerStatsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 19), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerStatsOutPkts.setStatus('current')
if mibBuilder.loadTexts: realServerStatsOutPkts.setDescription('Total number of outgoing packets for this real server.')
realServerStatsInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 20), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerStatsInBytes.setStatus('current')
if mibBuilder.loadTexts: realServerStatsInBytes.setDescription('Total number of incoming bytes for this real server.')
realServerStatsOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 21), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerStatsOutBytes.setStatus('current')
if mibBuilder.loadTexts: realServerStatsOutBytes.setDescription('Total number of outgoing bytes for this real server.')
realServerRateCps = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 22), Gauge32()).setUnits('connections/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerRateCps.setStatus('current')
if mibBuilder.loadTexts: realServerRateCps.setDescription('Current connection rate for this real server.')
realServerRateInPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 23), Gauge32()).setUnits('packets/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerRateInPPS.setStatus('current')
if mibBuilder.loadTexts: realServerRateInPPS.setDescription('Current in packet rate for this real server.')
realServerRateOutPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 24), Gauge32()).setUnits('packets/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerRateOutPPS.setStatus('current')
if mibBuilder.loadTexts: realServerRateOutPPS.setDescription('Current out packet rate for this real server.')
realServerRateInBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 25), Gauge32()).setUnits('bytes/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerRateInBPS.setStatus('current')
if mibBuilder.loadTexts: realServerRateInBPS.setDescription('Current incoming rate for this real server.')
realServerRateOutBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 4, 1, 26), Gauge32()).setUnits('bytes/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerRateOutBPS.setStatus('current')
if mibBuilder.loadTexts: realServerRateOutBPS.setDescription('Current outgoing rate for this real server.')
checkTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 5))
checkTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 5, 0))
checkTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 5, 1))
realServerStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 5, 0, 1)).setObjects(("KEEPALIVED-MIB", "realServerAddrType"), ("KEEPALIVED-MIB", "realServerAddress"), ("KEEPALIVED-MIB", "realServerPort"), ("KEEPALIVED-MIB", "realServerStatus"), ("KEEPALIVED-MIB", "virtualServerType"), ("KEEPALIVED-MIB", "virtualServerProtocol"), ("KEEPALIVED-MIB", "virtualServerRealServersUp"), ("KEEPALIVED-MIB", "virtualServerRealServersTotal"))
if mibBuilder.loadTexts: realServerStateChange.setStatus('current')
if mibBuilder.loadTexts: realServerStateChange.setDescription('This trap signifies that the state of a real server has changed. Additional varbinds will be added depending on the value of virtualServerType: virtualServerNameOfGroup, virtualServerFwMark, virtualServerAddrType, virtualServerAddress, virtualServerPort.')
virtualServerQuorumStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9586, 100, 5, 3, 5, 0, 2)).setObjects(("KEEPALIVED-MIB", "virtualServerType"), ("KEEPALIVED-MIB", "virtualServerProtocol"), ("KEEPALIVED-MIB", "virtualServerQuorumStatus"), ("KEEPALIVED-MIB", "virtualServerQuorum"), ("KEEPALIVED-MIB", "virtualServerRealServersUp"), ("KEEPALIVED-MIB", "virtualServerRealServersTotal"))
if mibBuilder.loadTexts: virtualServerQuorumStateChange.setStatus('current')
if mibBuilder.loadTexts: virtualServerQuorumStateChange.setDescription('This trap signifies that the quorum of a virtual server has changed. Additional varbinds will be added depending on the value of virtualServerType: virtualServerNameOfGroup, virtualServerFwMark, virtualServerAddrType, virtualServerAddress, virtualServerPort.')
compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9586, 100, 5, 4, 1))
groups = MibIdentifier((1, 3, 6, 1, 4, 1, 9586, 100, 5, 4, 2))
globalCompliances = ModuleCompliance((1, 3, 6, 1, 4, 1, 9586, 100, 5, 4, 1, 1)).setObjects(("KEEPALIVED-MIB", "globalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    globalCompliances = globalCompliances.setStatus('current')
if mibBuilder.loadTexts: globalCompliances.setDescription('Compliance statement for global data')
vrrpCompliances = ModuleCompliance((1, 3, 6, 1, 4, 1, 9586, 100, 5, 4, 1, 2)).setObjects(("KEEPALIVED-MIB", "vrrpScriptGroup"), ("KEEPALIVED-MIB", "vrrpSyncGroup"), ("KEEPALIVED-MIB", "vrrpInstanceGroup"), ("KEEPALIVED-MIB", "vrrpTrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vrrpCompliances = vrrpCompliances.setStatus('current')
if mibBuilder.loadTexts: vrrpCompliances.setDescription('The VRRP compliance statement')
checkCompliances = ModuleCompliance((1, 3, 6, 1, 4, 1, 9586, 100, 5, 4, 1, 3)).setObjects(("KEEPALIVED-MIB", "virtualServerGroupGroup"), ("KEEPALIVED-MIB", "virtualServerGroup"), ("KEEPALIVED-MIB", "realServerGroup"), ("KEEPALIVED-MIB", "checkTrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    checkCompliances = checkCompliances.setStatus('current')
if mibBuilder.loadTexts: checkCompliances.setDescription('The check compliance statement')
globalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9586, 100, 5, 4, 2, 1)).setObjects(("KEEPALIVED-MIB", "version"), ("KEEPALIVED-MIB", "routerId"), ("KEEPALIVED-MIB", "smtpServerAddressType"), ("KEEPALIVED-MIB", "smtpServerAddress"), ("KEEPALIVED-MIB", "smtpServerTimeout"), ("KEEPALIVED-MIB", "emailFrom"), ("KEEPALIVED-MIB", "emailAddress"), ("KEEPALIVED-MIB", "trapEnable"), ("KEEPALIVED-MIB", "linkBeat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    globalGroup = globalGroup.setStatus('current')
if mibBuilder.loadTexts: globalGroup.setDescription('Conformance group for global data.')
vrrpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9586, 100, 5, 4, 2, 2))
vrrpSyncGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9586, 100, 5, 4, 2, 2, 1)).setObjects(("KEEPALIVED-MIB", "vrrpSyncGroupName"), ("KEEPALIVED-MIB", "vrrpSyncGroupState"), ("KEEPALIVED-MIB", "vrrpSyncGroupSmtpAlert"), ("KEEPALIVED-MIB", "vrrpSyncGroupNotifyExec"), ("KEEPALIVED-MIB", "vrrpSyncGroupScriptMaster"), ("KEEPALIVED-MIB", "vrrpSyncGroupScriptBackup"), ("KEEPALIVED-MIB", "vrrpSyncGroupScriptFault"), ("KEEPALIVED-MIB", "vrrpSyncGroupScript"), ("KEEPALIVED-MIB", "vrrpSyncGroupMemberName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vrrpSyncGroup = vrrpSyncGroup.setStatus('current')
if mibBuilder.loadTexts: vrrpSyncGroup.setDescription('Conformance group for synchronisation groups.')
vrrpInstanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9586, 100, 5, 4, 2, 2, 2)).setObjects(("KEEPALIVED-MIB", "vrrpInstanceName"), ("KEEPALIVED-MIB", "vrrpInstanceVirtualRouterId"), ("KEEPALIVED-MIB", "vrrpInstanceState"), ("KEEPALIVED-MIB", "vrrpInstanceInitialState"), ("KEEPALIVED-MIB", "vrrpInstanceWantedState"), ("KEEPALIVED-MIB", "vrrpInstanceBasePriority"), ("KEEPALIVED-MIB", "vrrpInstanceEffectivePriority"), ("KEEPALIVED-MIB", "vrrpInstanceVipsStatus"), ("KEEPALIVED-MIB", "vrrpInstancePrimaryInterface"), ("KEEPALIVED-MIB", "vrrpInstanceTrackPrimaryIf"), ("KEEPALIVED-MIB", "vrrpInstanceAdvertisementsInt"), ("KEEPALIVED-MIB", "vrrpInstancePreempt"), ("KEEPALIVED-MIB", "vrrpInstancePreemptDelay"), ("KEEPALIVED-MIB", "vrrpInstanceAuthType"), ("KEEPALIVED-MIB", "vrrpInstanceLvsSyncDaemon"), ("KEEPALIVED-MIB", "vrrpInstanceLvsSyncInterface"), ("KEEPALIVED-MIB", "vrrpInstanceSyncGroup"), ("KEEPALIVED-MIB", "vrrpInstanceGarpDelay"), ("KEEPALIVED-MIB", "vrrpInstanceSmtpAlert"), ("KEEPALIVED-MIB", "vrrpInstanceNotifyExec"), ("KEEPALIVED-MIB", "vrrpInstanceScriptMaster"), ("KEEPALIVED-MIB", "vrrpInstanceScriptBackup"), ("KEEPALIVED-MIB", "vrrpInstanceScriptFault"), ("KEEPALIVED-MIB", "vrrpInstanceScriptStop"), ("KEEPALIVED-MIB", "vrrpInstanceScript"), ("KEEPALIVED-MIB", "vrrpTrackedInterfaceName"), ("KEEPALIVED-MIB", "vrrpTrackedInterfaceWeight"), ("KEEPALIVED-MIB", "vrrpTrackedScriptName"), ("KEEPALIVED-MIB", "vrrpTrackedScriptWeight"), ("KEEPALIVED-MIB", "vrrpAddressType"), ("KEEPALIVED-MIB", "vrrpAddressValue"), ("KEEPALIVED-MIB", "vrrpAddressBroadcast"), ("KEEPALIVED-MIB", "vrrpAddressMask"), ("KEEPALIVED-MIB", "vrrpAddressScope"), ("KEEPALIVED-MIB", "vrrpAddressIfIndex"), ("KEEPALIVED-MIB", "vrrpAddressIfName"), ("KEEPALIVED-MIB", "vrrpAddressIfAlias"), ("KEEPALIVED-MIB", "vrrpAddressStatus"), ("KEEPALIVED-MIB", "vrrpAddressAdvertising"), ("KEEPALIVED-MIB", "vrrpRouteAddressType"), ("KEEPALIVED-MIB", "vrrpRouteDestination"), ("KEEPALIVED-MIB", "vrrpRouteDestinationMask"), ("KEEPALIVED-MIB", "vrrpRouteGateway"), ("KEEPALIVED-MIB", "vrrpRouteSecondaryGateway"), ("KEEPALIVED-MIB", "vrrpRouteSource"), ("KEEPALIVED-MIB", "vrrpRouteMetric"), ("KEEPALIVED-MIB", "vrrpRouteScope"), ("KEEPALIVED-MIB", "vrrpRouteType"), ("KEEPALIVED-MIB", "vrrpRouteIfIndex"), ("KEEPALIVED-MIB", "vrrpRouteIfName"), ("KEEPALIVED-MIB", "vrrpRouteRoutingTable"), ("KEEPALIVED-MIB", "vrrpRouteStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vrrpInstanceGroup = vrrpInstanceGroup.setStatus('current')
if mibBuilder.loadTexts: vrrpInstanceGroup.setDescription('Conformance group for VRRP instances.')
vrrpScriptGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9586, 100, 5, 4, 2, 2, 3)).setObjects(("KEEPALIVED-MIB", "vrrpScriptName"), ("KEEPALIVED-MIB", "vrrpScriptCommand"), ("KEEPALIVED-MIB", "vrrpScriptInterval"), ("KEEPALIVED-MIB", "vrrpScriptWeight"), ("KEEPALIVED-MIB", "vrrpScriptResult"), ("KEEPALIVED-MIB", "vrrpScriptRise"), ("KEEPALIVED-MIB", "vrrpScriptFall"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vrrpScriptGroup = vrrpScriptGroup.setStatus('current')
if mibBuilder.loadTexts: vrrpScriptGroup.setDescription('Conformance group for VRRP scripts.')
vrrpTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9586, 100, 5, 4, 2, 2, 4)).setObjects(("KEEPALIVED-MIB", "vrrpSyncGroupStateChange"), ("KEEPALIVED-MIB", "vrrpInstanceStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vrrpTrapsGroup = vrrpTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: vrrpTrapsGroup.setDescription('Conformance group for VRRP traps.')
checkGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9586, 100, 5, 4, 2, 3))
virtualServerGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9586, 100, 5, 4, 2, 3, 1)).setObjects(("KEEPALIVED-MIB", "virtualServerGroupName"), ("KEEPALIVED-MIB", "virtualServerGroupMemberType"), ("KEEPALIVED-MIB", "virtualServerGroupMemberFwMark"), ("KEEPALIVED-MIB", "virtualServerGroupMemberAddrType"), ("KEEPALIVED-MIB", "virtualServerGroupMemberAddress"), ("KEEPALIVED-MIB", "virtualServerGroupMemberAddr1"), ("KEEPALIVED-MIB", "virtualServerGroupMemberAddr2"), ("KEEPALIVED-MIB", "virtualServerGroupMemberPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    virtualServerGroupGroup = virtualServerGroupGroup.setStatus('current')
if mibBuilder.loadTexts: virtualServerGroupGroup.setDescription('Conformance group for virtual server groups.')
virtualServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9586, 100, 5, 4, 2, 3, 2)).setObjects(("KEEPALIVED-MIB", "virtualServerType"), ("KEEPALIVED-MIB", "virtualServerNameOfGroup"), ("KEEPALIVED-MIB", "virtualServerFwMark"), ("KEEPALIVED-MIB", "virtualServerAddrType"), ("KEEPALIVED-MIB", "virtualServerAddress"), ("KEEPALIVED-MIB", "virtualServerPort"), ("KEEPALIVED-MIB", "virtualServerProtocol"), ("KEEPALIVED-MIB", "virtualServerLoadBalancingAlgo"), ("KEEPALIVED-MIB", "virtualServerLoadBalancingKind"), ("KEEPALIVED-MIB", "virtualServerStatus"), ("KEEPALIVED-MIB", "virtualServerVirtualHost"), ("KEEPALIVED-MIB", "virtualServerPersist"), ("KEEPALIVED-MIB", "virtualServerPersistTimeout"), ("KEEPALIVED-MIB", "virtualServerPersistGranularity"), ("KEEPALIVED-MIB", "virtualServerDelayLoop"), ("KEEPALIVED-MIB", "virtualServerHaSuspend"), ("KEEPALIVED-MIB", "virtualServerAlpha"), ("KEEPALIVED-MIB", "virtualServerOmega"), ("KEEPALIVED-MIB", "virtualServerRealServersTotal"), ("KEEPALIVED-MIB", "virtualServerRealServersUp"), ("KEEPALIVED-MIB", "virtualServerQuorum"), ("KEEPALIVED-MIB", "virtualServerQuorumStatus"), ("KEEPALIVED-MIB", "virtualServerQuorumUp"), ("KEEPALIVED-MIB", "virtualServerQuorumDown"), ("KEEPALIVED-MIB", "virtualServerHysteresis"), ("KEEPALIVED-MIB", "virtualServerStatsConns"), ("KEEPALIVED-MIB", "virtualServerStatsInPkts"), ("KEEPALIVED-MIB", "virtualServerStatsOutPkts"), ("KEEPALIVED-MIB", "virtualServerStatsInBytes"), ("KEEPALIVED-MIB", "virtualServerStatsOutBytes"), ("KEEPALIVED-MIB", "virtualServerRateCps"), ("KEEPALIVED-MIB", "virtualServerRateInPPS"), ("KEEPALIVED-MIB", "virtualServerRateOutPPS"), ("KEEPALIVED-MIB", "virtualServerRateInBPS"), ("KEEPALIVED-MIB", "virtualServerRateOutBPS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    virtualServerGroup = virtualServerGroup.setStatus('current')
if mibBuilder.loadTexts: virtualServerGroup.setDescription('Conformance group for virtual servers.')
realServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9586, 100, 5, 4, 2, 3, 3)).setObjects(("KEEPALIVED-MIB", "realServerType"), ("KEEPALIVED-MIB", "realServerAddrType"), ("KEEPALIVED-MIB", "realServerAddress"), ("KEEPALIVED-MIB", "realServerPort"), ("KEEPALIVED-MIB", "realServerStatus"), ("KEEPALIVED-MIB", "realServerWeight"), ("KEEPALIVED-MIB", "realServerUpperConnectionLimit"), ("KEEPALIVED-MIB", "realServerLowerConnectionLimit"), ("KEEPALIVED-MIB", "realServerActionWhenDown"), ("KEEPALIVED-MIB", "realServerNotifyUp"), ("KEEPALIVED-MIB", "realServerNotifyDown"), ("KEEPALIVED-MIB", "realServerFailedChecks"), ("KEEPALIVED-MIB", "realServerStatsConns"), ("KEEPALIVED-MIB", "realServerStatsActiveConns"), ("KEEPALIVED-MIB", "realServerStatsInactiveConns"), ("KEEPALIVED-MIB", "realServerStatsPersistentConns"), ("KEEPALIVED-MIB", "realServerStatsInPkts"), ("KEEPALIVED-MIB", "realServerStatsOutPkts"), ("KEEPALIVED-MIB", "realServerStatsInBytes"), ("KEEPALIVED-MIB", "realServerStatsOutBytes"), ("KEEPALIVED-MIB", "realServerRateCps"), ("KEEPALIVED-MIB", "realServerRateInPPS"), ("KEEPALIVED-MIB", "realServerRateOutPPS"), ("KEEPALIVED-MIB", "realServerRateInBPS"), ("KEEPALIVED-MIB", "realServerRateOutBPS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    realServerGroup = realServerGroup.setStatus('current')
if mibBuilder.loadTexts: realServerGroup.setDescription('Conformance group for real servers.')
checkTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9586, 100, 5, 4, 2, 3, 4)).setObjects(("KEEPALIVED-MIB", "realServerStateChange"), ("KEEPALIVED-MIB", "virtualServerQuorumStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    checkTrapsGroup = checkTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: checkTrapsGroup.setDescription('Conformance group for check traps.')
mibBuilder.exportSymbols("KEEPALIVED-MIB", vrrpInstanceVirtualRouterId=vrrpInstanceVirtualRouterId, virtualServerGroupMemberAddr2=virtualServerGroupMemberAddr2, vrrpTrackedInterfaceName=vrrpTrackedInterfaceName, realServerStatsInPkts=realServerStatsInPkts, smtpServerTimeout=smtpServerTimeout, PYSNMP_MODULE_ID=keepalived, virtualServerType=virtualServerType, realServerLowerConnectionLimit=realServerLowerConnectionLimit, routerId=routerId, virtualServerGroupMemberTable=virtualServerGroupMemberTable, vrrpAddressIfAlias=vrrpAddressIfAlias, check=check, vrrpInstanceAuthType=vrrpInstanceAuthType, virtualServerPort=virtualServerPort, virtualServerDelayLoop=virtualServerDelayLoop, vrrpInstanceStateChange=vrrpInstanceStateChange, realServerGroup=realServerGroup, vrrpScriptFall=vrrpScriptFall, realServerEntry=realServerEntry, realServerActionWhenDown=realServerActionWhenDown, emailIndex=emailIndex, groups=groups, vrrpScriptResult=vrrpScriptResult, vrrpInstanceGroup=vrrpInstanceGroup, vrrpInstanceSyncGroup=vrrpInstanceSyncGroup, virtualServerLoadBalancingAlgo=virtualServerLoadBalancingAlgo, vrrpScriptWeight=vrrpScriptWeight, vrrpSyncGroupMemberTable=vrrpSyncGroupMemberTable, virtualServerGroupMemberPort=virtualServerGroupMemberPort, virtualServerRateOutBPS=virtualServerRateOutBPS, vrrpInstanceTable=vrrpInstanceTable, checkTrapControl=checkTrapControl, vrrpInstanceTrackPrimaryIf=vrrpInstanceTrackPrimaryIf, checkTrapsGroup=checkTrapsGroup, vrrpRouteStatus=vrrpRouteStatus, vrrpTraps=vrrpTraps, virtualServerPersist=virtualServerPersist, virtualServerRateOutPPS=virtualServerRateOutPPS, pysmi_global=pysmi_global, compliances=compliances, vrrpTrackedScriptName=vrrpTrackedScriptName, realServerStateChange=realServerStateChange, virtualServerGroupMemberAddr1=virtualServerGroupMemberAddr1, vrrpSyncGroupScriptBackup=vrrpSyncGroupScriptBackup, virtualServerQuorumDown=virtualServerQuorumDown, vrrpSyncGroupEntry=vrrpSyncGroupEntry, vrrpInstanceScriptMaster=vrrpInstanceScriptMaster, vrrpScriptGroup=vrrpScriptGroup, vrrpSyncGroupName=vrrpSyncGroupName, virtualServerStatsOutPkts=virtualServerStatsOutPkts, vrrpRouteMetric=vrrpRouteMetric, realServerStatsActiveConns=realServerStatsActiveConns, vrrpRouteSecondaryGateway=vrrpRouteSecondaryGateway, realServerStatsPersistentConns=realServerStatsPersistentConns, vrrpScriptName=vrrpScriptName, vrrpInstanceInitialState=vrrpInstanceInitialState, vrrpRouteDestination=vrrpRouteDestination, vrrpScriptEntry=vrrpScriptEntry, vrrpInstanceSmtpAlert=vrrpInstanceSmtpAlert, vrrpAddressType=vrrpAddressType, virtualServerQuorumStatus=virtualServerQuorumStatus, realServerType=realServerType, virtualServerQuorumStateChange=virtualServerQuorumStateChange, vrrpRouteIfName=vrrpRouteIfName, virtualServerGroupMemberFwMark=virtualServerGroupMemberFwMark, virtualServerStatsInBytes=virtualServerStatsInBytes, vrrpSyncGroupNotifyExec=vrrpSyncGroupNotifyExec, vrrpInstanceLvsSyncDaemon=vrrpInstanceLvsSyncDaemon, vrrpAddressIndex=vrrpAddressIndex, vrrpRouteIfIndex=vrrpRouteIfIndex, realServerStatsOutPkts=realServerStatsOutPkts, vrrpAddressTable=vrrpAddressTable, realServerTable=realServerTable, realServerFailedChecks=realServerFailedChecks, checkCompliances=checkCompliances, vrrpSyncGroupTable=vrrpSyncGroupTable, vrrpInstancePreempt=vrrpInstancePreempt, vrrpSyncGroupStateChange=vrrpSyncGroupStateChange, virtualServerGroupMemberType=virtualServerGroupMemberType, virtualServerOmega=virtualServerOmega, virtualServerRealServersTotal=virtualServerRealServersTotal, virtualServerStatsInPkts=virtualServerStatsInPkts, realServerRateOutPPS=realServerRateOutPPS, virtualServerGroupGroup=virtualServerGroupGroup, vrrpAddressBroadcast=vrrpAddressBroadcast, vrrpInstanceState=vrrpInstanceState, vrrpInstanceName=vrrpInstanceName, vrrpSyncGroupSmtpAlert=vrrpSyncGroupSmtpAlert, realServerWeight=realServerWeight, vrrpScriptRise=vrrpScriptRise, virtualServerGroupTable=virtualServerGroupTable, virtualServerPersistGranularity=virtualServerPersistGranularity, vrrpAddressScope=vrrpAddressScope, vrrpScriptIndex=vrrpScriptIndex, keepalived=keepalived, trapEnable=trapEnable, virtualServerAddress=virtualServerAddress, emailAddress=emailAddress, vrrpRouteGateway=vrrpRouteGateway, emailFrom=emailFrom, linkBeat=linkBeat, virtualServerAddrType=virtualServerAddrType, vrrpSyncGroupScriptFault=vrrpSyncGroupScriptFault, checkTraps=checkTraps, vrrpInstanceNotifyExec=vrrpInstanceNotifyExec, vrrpAddressMask=vrrpAddressMask, vrrpAddressAdvertising=vrrpAddressAdvertising, virtualServerEntry=virtualServerEntry, vrrpInstanceBasePriority=vrrpInstanceBasePriority, vrrpTrackedInterfaceWeight=vrrpTrackedInterfaceWeight, virtualServerQuorumUp=virtualServerQuorumUp, vrrpTrapControl=vrrpTrapControl, vrrpSyncGroupState=vrrpSyncGroupState, vrrpTrap=vrrpTrap, vrrpSyncGroupIndex=vrrpSyncGroupIndex, virtualServerRealServersUp=virtualServerRealServersUp, project=project, vrrpRouteRoutingTable=vrrpRouteRoutingTable, smtpServerAddressType=smtpServerAddressType, vrrpAddressEntry=vrrpAddressEntry, debian=debian, vrrpRouteSource=vrrpRouteSource, vrrpTrackedScriptIndex=vrrpTrackedScriptIndex, vrrpSyncGroupMemberEntry=vrrpSyncGroupMemberEntry, virtualServerGroupMemberAddrType=virtualServerGroupMemberAddrType, virtualServerNameOfGroup=virtualServerNameOfGroup, virtualServerRateInBPS=virtualServerRateInBPS, globalGroup=globalGroup, virtualServerVirtualHost=virtualServerVirtualHost, vrrpTrackedScriptWeight=vrrpTrackedScriptWeight, virtualServerStatus=virtualServerStatus, virtualServerQuorum=virtualServerQuorum, realServerUpperConnectionLimit=realServerUpperConnectionLimit, globalCompliances=globalCompliances, vrrpScriptCommand=vrrpScriptCommand, vrrpInstanceScriptBackup=vrrpInstanceScriptBackup, vrrpAddressIfIndex=vrrpAddressIfIndex, virtualServerGroupMemberEntry=virtualServerGroupMemberEntry, vrrpInstanceVipsStatus=vrrpInstanceVipsStatus, realServerStatsOutBytes=realServerStatsOutBytes, vrrpTrackedScriptTable=vrrpTrackedScriptTable, vrrpInstanceAdvertisementsInt=vrrpInstanceAdvertisementsInt, realServerNotifyDown=realServerNotifyDown, realServerStatsConns=realServerStatsConns, virtualServerRateCps=virtualServerRateCps, realServerIndex=realServerIndex, vrrpRouteTable=vrrpRouteTable, smtpServerAddress=smtpServerAddress, virtualServerIndex=virtualServerIndex, realServerRateCps=realServerRateCps, vrrpSyncGroupScript=vrrpSyncGroupScript, vrrpSyncGroupMemberName=vrrpSyncGroupMemberName, virtualServerProtocol=virtualServerProtocol, virtualServerLoadBalancingKind=virtualServerLoadBalancingKind, vrrpInstanceIndex=vrrpInstanceIndex, vrrpRouteType=vrrpRouteType, vrrpCompliances=vrrpCompliances, vrrpTrackedInterfaceTable=vrrpTrackedInterfaceTable, virtualServerHysteresis=virtualServerHysteresis, vrrpRouteDestinationMask=vrrpRouteDestinationMask, vrrpInstanceEffectivePriority=vrrpInstanceEffectivePriority, virtualServerGroupMemberAddress=virtualServerGroupMemberAddress, virtualServerPersistTimeout=virtualServerPersistTimeout, vrrpRouteScope=vrrpRouteScope, vrrpTrackedScriptEntry=vrrpTrackedScriptEntry, vrrpSyncGroup=vrrpSyncGroup, vrrpAddressValue=vrrpAddressValue, checkGroups=checkGroups, realServerStatsInBytes=realServerStatsInBytes, VrrpState=VrrpState, vrrpInstanceLvsSyncInterface=vrrpInstanceLvsSyncInterface, vrrpAddressStatus=vrrpAddressStatus, vrrpInstanceGarpDelay=vrrpInstanceGarpDelay, emailTable=emailTable, vrrpSyncGroupScriptMaster=vrrpSyncGroupScriptMaster, virtualServerGroup=virtualServerGroup, vrrpInstanceScript=vrrpInstanceScript, virtualServerGroupMemberIndex=virtualServerGroupMemberIndex, virtualServerGroupIndex=virtualServerGroupIndex, vrrpSyncGroupMemberInstanceIndex=vrrpSyncGroupMemberInstanceIndex, vrrpTrackedInterfaceEntry=vrrpTrackedInterfaceEntry, virtualServerRateInPPS=virtualServerRateInPPS, virtualServerFwMark=virtualServerFwMark, vrrpRouteAddressType=vrrpRouteAddressType, virtualServerHaSuspend=virtualServerHaSuspend, checkTrap=checkTrap, virtualServerStatsOutBytes=virtualServerStatsOutBytes, realServerNotifyUp=realServerNotifyUp, realServerRateInBPS=realServerRateInBPS, realServerStatus=realServerStatus, vrrpScriptInterval=vrrpScriptInterval, emailEntry=emailEntry, vrrpInstancePrimaryInterface=vrrpInstancePrimaryInterface, virtualServerGroupEntry=virtualServerGroupEntry, realServerAddress=realServerAddress, virtualServerAlpha=virtualServerAlpha, realServerRateOutBPS=realServerRateOutBPS, vrrpRouteIndex=vrrpRouteIndex, vrrp=vrrp, vrrpGroups=vrrpGroups, vrrpAddressIfName=vrrpAddressIfName, version=version, realServerStatsInactiveConns=realServerStatsInactiveConns, vrrpInstanceWantedState=vrrpInstanceWantedState, realServerPort=realServerPort, mail=mail, vrrpInstanceScriptFault=vrrpInstanceScriptFault, virtualServerStatsConns=virtualServerStatsConns, vrrpRouteEntry=vrrpRouteEntry, realServerAddrType=realServerAddrType, virtualServerGroupName=virtualServerGroupName, vrrpTrapsGroup=vrrpTrapsGroup, virtualServerTable=virtualServerTable, vrrpInstancePreemptDelay=vrrpInstancePreemptDelay, vrrpInstanceScriptStop=vrrpInstanceScriptStop, conformance=conformance, realServerRateInPPS=realServerRateInPPS, vrrpScriptTable=vrrpScriptTable, vrrpInstanceEntry=vrrpInstanceEntry)
