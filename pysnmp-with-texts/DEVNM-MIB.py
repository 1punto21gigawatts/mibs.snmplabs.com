#
# PySNMP MIB module DEVNM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DEVNM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:41:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
device, = mibBuilder.importSymbols("ANIROOT-MIB", "device")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, Unsigned32, MibIdentifier, Bits, IpAddress, Counter32, ModuleIdentity, TimeTicks, Integer32, NotificationType, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "Unsigned32", "MibIdentifier", "Bits", "IpAddress", "Counter32", "ModuleIdentity", "TimeTicks", "Integer32", "NotificationType", "ObjectIdentity", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
aniDevNetworkManager = ModuleIdentity((1, 3, 6, 1, 4, 1, 4325, 2, 7))
if mibBuilder.loadTexts: aniDevNetworkManager.setLastUpdated('0105091130Z')
if mibBuilder.loadTexts: aniDevNetworkManager.setOrganization('Aperto Networks')
if mibBuilder.loadTexts: aniDevNetworkManager.setContactInfo(' Postal: Aperto Networks Inc 1637 S Main Street Milpitas, California 95035 Tel: +1 408 719 9977 ')
if mibBuilder.loadTexts: aniDevNetworkManager.setDescription('The aniDevNetworkMgrAccessTable provides one level of security for access to the device by network management stations. Access is also constrained by community strings. Currently, creation and deletion of rows to this table through SNMP Agent is not allowed. ')
aniDevNumManagingHosts = MibScalar((1, 3, 6, 1, 4, 1, 4325, 2, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniDevNumManagingHosts.setStatus('current')
if mibBuilder.loadTexts: aniDevNumManagingHosts.setDescription('This object gives the number of Managing Hosts configured. ')
aniDevNetworkMgrAccessTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 2, 7, 2), )
if mibBuilder.loadTexts: aniDevNetworkMgrAccessTable.setStatus('current')
if mibBuilder.loadTexts: aniDevNetworkMgrAccessTable.setDescription('This table controls access to SNMP objects by network management stations. If the table is empty, access to SNMP objects is unrestricted. ')
aniDevNetworkMgrAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 2, 7, 2, 1), ).setIndexNames((0, "DEVNM-MIB", "aniDevNMAccessIndex"))
if mibBuilder.loadTexts: aniDevNetworkMgrAccessEntry.setStatus('current')
if mibBuilder.loadTexts: aniDevNetworkMgrAccessEntry.setDescription('Controls access to SNMP objects by a particular network management station. For each entry in this table, the contents are not readable unless the management station has read-write permission. ')
aniDevNMAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: aniDevNMAccessIndex.setStatus('current')
if mibBuilder.loadTexts: aniDevNMAccessIndex.setDescription('Index used to order the table entries. ')
aniDevNMAccessIp = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 7, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevNMAccessIp.setStatus('current')
if mibBuilder.loadTexts: aniDevNMAccessIp.setDescription('The IP address of the network management station. The address 0.0.0.0 is defined to mean any NMS. If traps are enabled for this entry, then the value must be the address of a specific device. ')
aniDevNMReadAccessCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)).clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevNMReadAccessCommunity.setStatus('current')
if mibBuilder.loadTexts: aniDevNMReadAccessCommunity.setDescription('The Read access community string to be matched for access by this entry. ')
aniDevNMWriteAccessCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 7, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)).clone('private')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevNMWriteAccessCommunity.setStatus('current')
if mibBuilder.loadTexts: aniDevNMWriteAccessCommunity.setDescription('The Write access community string to be matched for access by this entry. ')
aniDevNMAccessControl = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("read", 1), ("readWrite", 2), ("roWithTraps", 3), ("rwWithTraps", 4), ("trapsOnly", 5))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevNMAccessControl.setStatus('current')
if mibBuilder.loadTexts: aniDevNMAccessControl.setDescription('Specifies the managing host access right to this device. ')
mibBuilder.exportSymbols("DEVNM-MIB", aniDevNetworkMgrAccessEntry=aniDevNetworkMgrAccessEntry, aniDevNMAccessIp=aniDevNMAccessIp, PYSNMP_MODULE_ID=aniDevNetworkManager, aniDevNumManagingHosts=aniDevNumManagingHosts, aniDevNetworkManager=aniDevNetworkManager, aniDevNetworkMgrAccessTable=aniDevNetworkMgrAccessTable, aniDevNMReadAccessCommunity=aniDevNMReadAccessCommunity, aniDevNMAccessControl=aniDevNMAccessControl, aniDevNMWriteAccessCommunity=aniDevNMWriteAccessCommunity, aniDevNMAccessIndex=aniDevNMAccessIndex)
