#
# PySNMP MIB module BIANCA-BRICK-PPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-PPP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:37:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, MibIdentifier, iso, ObjectIdentity, Unsigned32, ModuleIdentity, Integer32, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "iso", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "Integer32", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "TimeTicks", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
ppp = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 3))
dialmap = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 4))
class BitValue(Integer32):
    pass

class Date(Integer32):
    pass

biboPPPTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 3, 1), )
if mibBuilder.loadTexts: biboPPPTable.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPTable.setDescription("The biboPPPTable contains configuration information for the PPP interfaces. Each time a new entry is made here, a corresponding entry is made in the ifTable. Creating entries: Entries are created by assigning a value to the biboPPPType object. Deleting entries: Entries are removed by setting an entry's biboPPPEncapsulation object to 'delete'.")
biboPPPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1), ).setIndexNames((0, "BIANCA-BRICK-PPP-MIB", "biboPPPType"))
if mibBuilder.loadTexts: biboPPPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPEntry.setDescription('')
biboPPPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPIfIndex.setDescription('Correlating PPP interface index. This value is assigned automatically by the system.')
biboPPPType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("isdn-dialup", 1), ("leased", 2), ("isdn-dialin-only", 3), ("multiuser", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPType.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPType.setDescription("The type of link. A new dialup link is created when this field is set to the value isdn-dialup(1), dialin-only(3) or multiuser(5). The maximum number of dialup links is limited by system memory. Each dialup link should have at least one corresponding entry in the biboDialTable to configure the remote ISDN telephone number(s). A leased line link, can not be created by setting this field to leased(2), but is automatically established when the IsdnChType field is set to either 'leased-dte' or 'leased-dce' (which doesn't make a difference for PPP, but must be set correctly for other encapsulation methods). Naturally, when the IsdnChType field is set to any other value, the biboPPPTable entry is removed. In both cases, a new entry in the biboPPPTable creates corre- corresponding entries in the ifTable (a new interface) and in the biboPPPStatTable (PPP statistics). Setting this object to multiuser(5), up to biboPPPMaxConn matching incoming connections (see biboPPPAuthentication, biboPPPAuthSecret, biboPPPAuthIdent) from different dialin partners will be accepted.")
biboPPPEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("ppp", 1), ("x25", 2), ("x25-ppp", 3), ("ip-lapb", 4), ("delete", 5), ("ip-hdlc", 6), ("mpr-lapb", 7), ("mpr-hdlc", 8), ("frame-relay", 9), ("x31-bchan", 10), ("x75-ppp", 11), ("x75btx-ppp", 12), ("x25-nosig", 13), ("x25-ppp-opt", 14), ("x25-pad", 15), ("x25-noconfig", 16), ("x25-noconfig-nosig", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPEncapsulation.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPEncapsulation.setDescription("The layer 2 encapsulation of the link. The use of ppp(1) as described in RFC 1661 is the preferred encapsulation for point-to-point links. The encapsulation is set to x25(2) for X.25-only links and to x25-ppp(3) for concurrent use of X.25 and PPP. Mpr-lapb(7) and mpr-hdlc(8) are popular proprietary encapsulations. They both use the ethertype number for protocol multiplexing. The former is used when error correction or data compression (v42bis) is desired. The latter (mpr-hdlc) is compatible to Cisco's HDLC encapsulation. On IP-only links it is also possible to use the ISO LAPB protocol (ip-lapb(4)), also known as X.75, or raw hdlc framing (ip-hdlc(6)). The x75-ppp encapsulation provides a proprietary solution for using PPP encapsulation over X.75 (LAPB) framing, x75btx-ppp provides PPP over T.70 and LAPB framing including a BTX protocol header to access BTX services over ISDN links. The x25-nosig(13) encapsulation is used to establish X.25 connections over dialup links without specific signalling on the D-channel (pure data call). The x25-ppp-opt encapsulation provides a special kind of the x25-ppp encapsulation. Dialin partner will be authenticated either outband to establish an X.25 connection via ISDN or optional inband by using the point-to-point protocol (PPP). Concurrent use of X.25 and PPP encapsulation is excluded. The x25-noconfig(16) and x25-noconfig-nosig(17) encapsulations provide a solution fr establishing X.25 connections via ISDN. The dial number will be derived from X.25 destination address by using special rules. V42bis data compression can be enabled on LAPB links only, because v42bis requires an error free connection. Dialup links can be removed by setting this field to delete(5). This has no effect on permanent links.")
biboPPPKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPKeepalive.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPKeepalive.setDescription('When set to on(1), keepalive packets are sent in regular intervals during the connection. Keepalive packets can not be sent using the ip-lapb or x25 encapsulation.')
biboPPPTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPTimeout.setDescription('The number of milliseconds waiting before retransmitting a PPP configure packet.')
biboPPPCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("v42bis", 2), ("stac", 3), ("ms-stac", 4), ("mppc", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPCompression.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPCompression.setDescription('The throughput can be enhanced up to factor three using the V42bis compression method or the Stac LZS compression algorithm. V42bis is currently supported with the ip-lapb and mpr-lapb encapsulation. Stac LZS compression algorithm is provided using PPP encapsulated links, stac(3) indicates support of Sequence checking, ms-stac(4) indicates support of Extended mode which is prefered by Microsoft. Both check modes are implemented according RFC 1974. When set to mppc(5), the Microsoft Point-to-Point Compression (MPPC) Protocol according RFC 2118 is negotiated. MPPC uses an LZ based algorithm with a sliding window history buffer.')
biboPPPAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3), ("both", 4), ("radius", 5), ("ms-chap", 6), ("all", 7), ("ms-chapv2", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPAuthentication.setDescription("The type of authentication used on the point-to-point link as described in RFC 1334. The authentication protocol supports pap(2) (Password Authentication Protocol), chap(3) (Challenge Handshake Authentication Protocol), or both(4). When set to both(4), the link must be successfully authenticated by either CHAP or PAP. The type ms-chap(6) and ms-chapv2(8) are Microsofts proprietary CHAP authentication procedures (using MD4 and DES encryption instead of MD5 encryption algorithm), all(7) includes PAP, CHAP and MS-CHAP. Another way to authenticate dial-in users is by using RADIUS (remote authentication dial in user service). Users can authenticate themselves either using PAP or CHAP (excluding MS-CHAP). In general the system creates PPP interfaces with this authentication itself, but it's also possible to take advance of the RADIUS dial-in services with pre-configured interfaces. See biboAdmRadiusServer for further details.")
biboPPPAuthIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPAuthIdent.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPAuthIdent.setDescription("The remote authentication identification string. The local authentication identification string is taken from the contents of the sysName field, up to the appearance of the first dot (e.g., the remote name would be `brick' if the content of the sysName field was `brick.bintec.de').")
biboPPPAuthSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPAuthSecret.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPAuthSecret.setDescription('The authentication secret, which is used symmetrically for both local and remote sides of the PPP link.')
biboPPPIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic-server", 2), ("dynamic-client", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPIpAddress.setDescription('The IP control protocol as described in RFC1332 has a means of negotiating IP-addresses. When this option is set to dynamic-server(2), an available IP-address found in biboPPPIpAddrTable is assigned as the remote IP-address and a temporary route is created during the uptime of the interface. When set to dynamic-client(3), the remote system is asked to tell us our own IP-address. A host route will be created during the uptime of the interface. In most cases this option will be set automatically by the network address translation option. In static(1) mode, address-negotiation is not forced.')
biboPPPRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPRetryTime.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPRetryTime.setDescription('Time in seconds to wait before retrying a call; currently not used.')
biboPPPBlockTime = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPBlockTime.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPBlockTime.setDescription('Time in seconds to wait after a connection failure (e.g. the number of biboPPPMaxRetries calls failed). When set to zero, the interface state is never set to blocked.')
biboPPPMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPMaxRetries.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPMaxRetries.setDescription('The number of dialup retries before changing to the blocked state.')
biboPPPShortHold = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPShortHold.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPShortHold.setDescription('The time in seconds to wait, once the channel is silent, (that is, no data is being received or transmitted) before terminating the link. When set to zero the short hold mode is disabled, when set to -1 the short hold mode is disabled and the link will be reconnected when connection was lost.')
biboPPPInitConn = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPInitConn.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPInitConn.setDescription(' The number of channels to initially set up for this interface.')
biboPPPMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPMaxConn.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPMaxConn.setDescription('The maximum number of channels bundled for this interface.')
biboPPPMinConn = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPMinConn.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPMinConn.setDescription('The minimum number of channels bundled for this interface.')
biboPPPCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("expected", 3), ("ppp-offered", 4), ("delayed", 5), ("ppp-callback-optional", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPCallback.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPCallback.setDescription("If this object is enabled(1), and the call is recognized by the dialed number then calls are never accepted, and a callback is forced for incoming calls at once. The callback can be delayed for biboPPPRetryTime seconds by setting this entry to delayed(5). If the call is recognized by inband authentication (PAP or CHAP) then the actual connection is closed and a callback is performed at once. Setting this value to ppp-offered(4) allows a called peer to call back the calling site if offered by PPP negotiation. For PABX dialout a dialprefix is added to the number, if offered by the calling site (see isdnStkTable). If this object is set to expected(3), only one initial outgoing call is made expecting a callback. If this object is set to ppp-callback-optional(6), the CBCP option 'no callback' is also offered to the Windows client so that the user can decide wether he wants to be called back or not.")
biboPPPLayer1Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("data-64k", 1), ("data-56k", 2), ("modem", 3), ("dovb", 4), ("v110-1200", 5), ("v110-2400", 6), ("v110-4800", 7), ("v110-9600", 8), ("v110-14400", 9), ("v110-19200", 10), ("v110-38400", 11), ("modem-profile-1", 12), ("modem-profile-2", 13), ("modem-profile-3", 14), ("modem-profile-4", 15), ("modem-profile-5", 16), ("modem-profile-6", 17), ("modem-profile-7", 18), ("modem-profile-8", 19), ("pptp-pns", 20), ("pppoe", 21), ("aodi", 22), ("pptp-pac", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPLayer1Protocol.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLayer1Protocol.setDescription('This entry is used to select the layer 1 protocol settings for this partner. Normally the correct entry is hdlc-64.')
biboPPPLoginString = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPLoginString.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLoginString.setDescription('A textual string containing a login sequence (script) composed of fields in the format [expect send], comparable to chat scripts commonly used on other sytems. This script is required i.e. to establish an asynchronus PPP dialup connection to CompuServe.')
biboPPPVJHeaderComp = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPVJHeaderComp.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPVJHeaderComp.setDescription('This entry is used to enable Van Jacobsen TCP/IP header compression, which reduces the size of TCP/IP packet headers and increases the efficiency of line utilization.')
biboPPPLayer2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("dte", 2), ("dce", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPLayer2Mode.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLayer2Mode.setDescription('This object specifies the layer 2 mode to be used for a connection. It is only relevant, if the Encapsulation involves an LAPB protocol. This is the case for x25, x25-ppp, ip-lapb, lapb, x31-bchan, x75-ppp, x75btx-ppp, x25-nosig. The Default value of this object is auto. For dialup connection, the layer 2 mode will than be DTE, on the calling side and DCE on the called side. For permanent connections, the layer 2 mode is set at lower layers (for example isdnChType in the isdnChTable). When this object is set to dte or dce, the layer 2 mode will always be DTE or DCE, regardless of the call direction or the settings at the lower layer.')
biboPPPDynShortHold = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPDynShortHold.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPDynShortHold.setDescription("Optimizes idle time disconnects depending on the charging information received during the connection. This value specifies the minimum inactivity time (channel is silent) in percents of the current charging interval length and is only used for outgoing connections. Incoming connections are disconnected after idle time according to the value biboPPPShortHold. Please note that this only works if your ISDN port has the AOCD service enabled (advice of charging during the call). For instance in Germany this is an extra paid service. (Even the 'Komfortanschluss' does only include AOCE [advice of charge at the end of the call], so AOCD has to be ordered and paid extra.)")
biboPPPLocalIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPLocalIdent.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLocalIdent.setDescription('This is the local identification string used for PPP authentication(PAP/CHAP). If this entry is empty the variable biboAdmLocalPPPIdent will be used.')
biboPPPDNSNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("dynamic-client", 3), ("dynamic-server", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPDNSNegotiation.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPDNSNegotiation.setDescription('The IP control protocol extensions as described in RFC 1877 has a means of negotiating primary and secondary Domain Name System (DNS) server addresses. When this option is disabled(1), no DNS negotiation will be performed. If enabled(2), DNS negotiation behavier depends on biboPPPIpAddress switch (client or server mode). Setting to dynamic-client(3), the remote system is asked to tell us the IP-address(es) of primary and/or secondary DNS. Setting to dynamic_server(4), primary and/or secondary DNS IP-address(es) found in biboAdmNameServer or biboAdmNameServ2, if asked, will be send to remote.')
biboPPPEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("mppe-40", 2), ("mppe-128", 3), ("des-56", 4), ("triple-des-168", 5), ("blowfish-168", 6), ("mppe-56", 7), ("mppev2-40", 8), ("mppev2-56", 9), ("mppev2-128", 10), ("blowfish-56", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPEncryption.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPEncryption.setDescription("This field specifies the data encryption scheme for en(de)crypting PPP encapsulated multi-protocol datagrams. Setting to mppe-40(2), mppe-128(3) or mppe-56(7) the Microsoft Point to Point Encryption Protocol (MPPE) will be enabled, using a 40 bit, 128 bit respectively 56 bit session key for initializing encryption tables. Setting to mppev2-40(8), mppev2-56(9) or mppev2-128(10) the Microsoft Point to Point Encryption Protocol (MPPE) 'stateless mode' will be enabled, using a 40 bit, 56 bit respectively 128 bit session key.")
biboPPPLQMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPLQMonitoring.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLQMonitoring.setDescription('This parameter enables (2) or disables (1) PPP Link Quality Monitoring (LQM) according RFC 1989. When set to on(2) LQM is added to the list of parameters used in LCP negotiation. If LQM is acknowledged by peer link quality reports will be generated and send periodically.')
biboPPPIpPoolId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPIpPoolId.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPIpPoolId.setDescription('Pool ID value to select an IP address pool for dynamic IP address assignment via IPCP. See also PPPIpAssignTable for further details.')
biboPPPSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 1, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPSessionTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPSessionTimeout.setDescription('Maximum number of seconds before termination the established PPP session, regardless there is any data throughput on the corresponding link(s). When set to 0, there no limit for the duration of the PPP session.')
biboPPPStatTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 3, 2), )
if mibBuilder.loadTexts: biboPPPStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPStatTable.setDescription('The biboPPPStatTable contains statistical connection- specific information. Only the system can add or delete entries to this table. Creating entries: Entries are created by the system each time a new PPP interface is created in the biboPPPTable. Deleting entries: Entries are removed by the system when the corresponding PPP interface is removed.')
biboPPPStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1), ).setIndexNames((0, "BIANCA-BRICK-PPP-MIB", "biboPPPConnIfIndex"))
if mibBuilder.loadTexts: biboPPPStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPStatEntry.setDescription('')
biboPPPConnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPConnIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPConnIfIndex.setDescription('Correlating PPP interface index.')
biboPPPConnActive = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPConnActive.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPConnActive.setDescription('The actual number of bundled channels.')
biboPPPConnProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPConnProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPConnProtocols.setDescription('The bitwise ORed protocols successfully negotiated on this connection; currently the following protocols are supported: tcp/ip(1), ipx(2), bridge(4), bpdu(8), x25(16). These protocol values are most likely to change in future software releases.')
biboPPPConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("incoming", 2), ("outgoing", 3), ("connected", 4), ("dataxfer", 5), ("disconnect", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPConnState.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPConnState.setDescription('The physical state of the link. This field is obsolete and will not be supported in a future release.')
biboPPPConnDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPConnDuration.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPConnDuration.setDescription('The current link duration on this interface in seconds.')
biboPPPConnUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPConnUnits.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPConnUnits.setDescription('The current costs on this interface for all member links.')
biboPPPConnTransmitOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPConnTransmitOctets.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPConnTransmitOctets.setDescription("The octets transmitted on this interface since its last change to the 'up' state.")
biboPPPConnReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPConnReceivedOctets.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPConnReceivedOctets.setDescription("The octets received since its last change to the `up' state.")
biboPPPConnOutgoingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPConnOutgoingCalls.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPConnOutgoingCalls.setDescription("The number of outgoing calls on this interface since its last change to the 'up' state.")
biboPPPConnOutgoingFails = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPConnOutgoingFails.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPConnOutgoingFails.setDescription("The number of outgoing call failures on this interface since its last change to the 'up' state.")
biboPPPConnIncomingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPConnIncomingCalls.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPConnIncomingCalls.setDescription('The number of incoming calls on this interface since its last change to the up state.')
biboPPPConnIncomingFails = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPConnIncomingFails.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPConnIncomingFails.setDescription('The number of incoming call failures on this interface since its last change to the up state.')
biboPPPTotalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPTotalDuration.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPTotalDuration.setDescription('The total link duration in seconds.')
biboPPPTotalUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPTotalUnits.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPTotalUnits.setDescription('The total costs on this interface for all member links.')
biboPPPTotalTransmitOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPTotalTransmitOctets.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPTotalTransmitOctets.setDescription('The total amount of octets transmitted.')
biboPPPTotalReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPTotalReceivedOctets.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPTotalReceivedOctets.setDescription('The total amount of octets received.')
biboPPPTotalOutgoingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPTotalOutgoingCalls.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPTotalOutgoingCalls.setDescription('The total number of outgoing calls.')
biboPPPTotalOutgoingFails = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPTotalOutgoingFails.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPTotalOutgoingFails.setDescription('The total number of outgoing call failures.')
biboPPPTotalIncomingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPTotalIncomingCalls.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPTotalIncomingCalls.setDescription('The total number of incoming calls.')
biboPPPTotalIncomingFails = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPTotalIncomingFails.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPTotalIncomingFails.setDescription('The total number of incoming call failures.')
biboPPPThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPThroughput.setDescription('The actual thoughput of the interface; updated every 5 seconds.')
biboPPPCompressionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPCompressionMode.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPCompressionMode.setDescription('This object describes wether data compression is active for this interface. 42bis or Stac LZS compression algorithm can be enabled in the biboPPPTable.')
biboPPPChargeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPChargeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPChargeInterval.setDescription('Describes the measured interval between charging info elements received from the ISDN network.')
biboPPPIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPIdleTime.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPIdleTime.setDescription('The currently measured connection inactivity time (channel is silent).')
biboPPPConnCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPConnCharge.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPConnCharge.setDescription('The current charge on this interface as 1/1000 of the respective currency.')
biboPPPTotalCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPTotalCharge.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPTotalCharge.setDescription('The total charge on this interface as 1/1000 of the respective currency.')
pppSessionTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 3, 10), )
if mibBuilder.loadTexts: pppSessionTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppSessionTable.setDescription('The pppSessionTable contains statistical information for the PPP protocol. Only the system can add or delete entries to this table. Creating entries: Entries are created by the system each time a new PPP connection is created. Deleting entries: Entries are removed by the system when the corresponding PPP connection is terminated.')
pppSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 3, 10, 1), ).setIndexNames((0, "BIANCA-BRICK-PPP-MIB", "pppSessionIfIndex"))
if mibBuilder.loadTexts: pppSessionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppSessionEntry.setDescription('')
pppSessionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppSessionIfIndex.setDescription('Correlating PPP interface index.')
pppSessionMlp = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("negotiated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionMlp.setStatus('mandatory')
if mibBuilder.loadTexts: pppSessionMlp.setDescription('Indicates negotiation of Multilink PPP.')
pppSessionMru = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionMru.setStatus('mandatory')
if mibBuilder.loadTexts: pppSessionMru.setDescription("Peer's MRU/MRRU LCP option.")
pppSessionLcpCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("lcp", 2), ("cbcp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionLcpCallback.setStatus('mandatory')
if mibBuilder.loadTexts: pppSessionLcpCallback.setDescription('Callback option inside LCP negotiation.')
pppSessionAuthProt = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3), ("ms-chapv1", 4), ("ms-chapv2", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionAuthProt.setStatus('mandatory')
if mibBuilder.loadTexts: pppSessionAuthProt.setDescription('The negotiated PPP authentication protocol.')
pppSessionCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("stac", 2), ("ms-stac", 3), ("mppc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionCompression.setStatus('mandatory')
if mibBuilder.loadTexts: pppSessionCompression.setDescription('The negotiated CCP compression mode.')
pppSessionEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("mppe-40", 2), ("mppe-128", 3), ("des-56", 4), ("triple-des-168", 5), ("blowfish-168", 6), ("mppe-56", 7), ("mppev2-40", 8), ("mppev2-56", 9), ("mppev2-128", 10), ("blowfish-56", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionEncryption.setStatus('mandatory')
if mibBuilder.loadTexts: pppSessionEncryption.setDescription('The negotiated CCP encryption mode.')
pppSessionCbcpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("no-callback", 2), ("user-specified", 3), ("pre-specified", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionCbcpMode.setStatus('mandatory')
if mibBuilder.loadTexts: pppSessionCbcpMode.setDescription('The negotiated Callback Control Protocol (CBCP) mode.')
pppSessionCbcpDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionCbcpDelay.setStatus('mandatory')
if mibBuilder.loadTexts: pppSessionCbcpDelay.setDescription('The negotiated (CBCP) callback delay in seconds.')
pppSessionLocIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 10, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionLocIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: pppSessionLocIpAddr.setDescription('The negotiated local IP Address.')
pppSessionRemIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 10, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionRemIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: pppSessionRemIpAddr.setDescription('The negotiated remote IP Address.')
pppSessionDNS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 10, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionDNS1.setStatus('mandatory')
if mibBuilder.loadTexts: pppSessionDNS1.setDescription('The negotiated first name server IP address.')
pppSessionDNS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 10, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionDNS2.setStatus('mandatory')
if mibBuilder.loadTexts: pppSessionDNS2.setDescription('The negotiated second name server IP address.')
pppSessionWINS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 10, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionWINS1.setStatus('mandatory')
if mibBuilder.loadTexts: pppSessionWINS1.setDescription('The negotiated first NetBIOS name server (WINS) IP address.')
pppSessionWINS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 10, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionWINS2.setStatus('mandatory')
if mibBuilder.loadTexts: pppSessionWINS2.setDescription('The negotiated second NetBIOS name server (WINS) IP address.')
pppSessionVJHeaderComp = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("negotiated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionVJHeaderComp.setStatus('mandatory')
if mibBuilder.loadTexts: pppSessionVJHeaderComp.setDescription('The negotiation of Van Jacobsen TCP/IP header compression option (IPCP).')
pppSessionIpxcpNodeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 10, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionIpxcpNodeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pppSessionIpxcpNodeNumber.setDescription('Unique IPX Node Id dynamically assigned the client.')
pppSessionBacpFavoredPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 10, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("remote", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionBacpFavoredPeer.setStatus('mandatory')
if mibBuilder.loadTexts: pppSessionBacpFavoredPeer.setDescription('The result of the BACP Favored-Peer negotiation.')
biboPPPLinkTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 3, 3), )
if mibBuilder.loadTexts: biboPPPLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkTable.setDescription('The biboPPPLinkTable contains statistical information for each current PPP link on the system. Only the system can add or delete entries to this table. Creating entries: Entries are created by the system each time a new PPP interface is created in the biboPPPTable. Deleting entries: Entries are removed by the system when the corresponding PPP interface is removed.')
biboPPPLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 3, 3, 1), ).setIndexNames((0, "BIANCA-BRICK-PPP-MIB", "biboPPPLinkIfIndex"))
if mibBuilder.loadTexts: biboPPPLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkEntry.setDescription('')
biboPPPLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPLinkIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkIfIndex.setDescription('Correlating PPP interface index.')
biboPPPLinkEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 3, 1, 2), Date()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPLinkEstablished.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkEstablished.setDescription('Time when the link was established.')
biboPPPLinkDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming-dce", 1), ("outgoing-dte", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPLinkDirection.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkDirection.setDescription('Direction of link, incoming(1) or outgoing(2). In case of permanent links, the meaning is dce(1) or dte(2).')
biboPPPLinkProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPLinkProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkProtocols.setDescription('The bitwise ORed protocols successfully negotiated on this link; currently the following protocols are supported: tcp/ip(1), ipx(2), bridge(4), bpdu(8), x25(16). These protocol values are most likely to change in future software releases.')
biboPPPLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("starting", 3), ("loopbacked", 4), ("dialing", 5), ("retry-wait", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkState.setDescription('The actual state of each link in a bundle. The link is fully operational in the up(1) state, and not operational in the down(2) state. The starting(3) state is an inter- mediate state when the link is physically established but PPP or other link negotation has not finished yet. The loopbacked(4) state is entered when the PPP keepalive mechanism detects a loopbacked link. The dialing(5) state shows that a dialup link is in its link establishment phase, dialing. If there is no answer to the call, the link enters the retry-wait(6) state for biboPPPRetryTime seconds. After waiting that time either a call retry will occur, or the ifOperStatus will enter the blocked state, depending on the amount of retries already done (biboPPPLinkRetries) and the value of the biboPPPMaxRetries field.')
biboPPPLinkUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPLinkUnits.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkUnits.setDescription('The costs for this link in units.')
biboPPPLinkRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPLinkRetries.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkRetries.setDescription('The amount of retries taken to establish the link.')
biboPPPLinkKeepaliveSent = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPLinkKeepaliveSent.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkKeepaliveSent.setDescription('The amount of keepalive packets sent on the link.')
biboPPPLinkKeepalivePending = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPLinkKeepalivePending.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkKeepalivePending.setDescription('The amount of keepalive answer packets waiting for since the last occurance of an echo reply packet.')
biboPPPLinkDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPLinkDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkDeviceIndex.setDescription('The underlying link device index.')
biboPPPLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPLinkSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkSpeed.setDescription('The speed of the link.')
biboPPPLinkStkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPLinkStkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkStkNumber.setDescription('The stack number of the dialup link, correlating to the isdnStkNumber field in the isdnCallTable.')
biboPPPLinkCallType = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("undef", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPLinkCallType.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkCallType.setDescription('The call type of the dialup link, correlating to the isdnCallType field in the isdnCallTable.')
biboPPPLinkCallReference = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPLinkCallReference.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkCallReference.setDescription('The call reference of the dialup link, correlating to the isdnCallReference field in the isdnCallTable.')
biboPPPLinkCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPLinkCharge.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkCharge.setDescription('The costs for this link as 1/1000 of the respective currency.')
biboPPPLinkAccm = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 3, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPLinkAccm.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkAccm.setDescription('.')
biboPPPLinkLqm = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("negotiated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPLinkLqm.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkLqm.setDescription('Indicates the successful negotiation of the Link Quality Protocol (LQM).')
biboPPPLinkLcpComp = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("addr", 2), ("prot", 3), ("both", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPLinkLcpComp.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkLcpComp.setDescription('Address- and Protocol-Field compression.')
biboPPPLinkLocDiscr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 3, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPLinkLocDiscr.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkLocDiscr.setDescription('Local LCP multilink endpoint discriminator.')
biboPPPLinkRemDiscr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 3, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPLinkRemDiscr.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPLinkRemDiscr.setDescription("Peer's LCP multilink endpoint discriminator.")
pppLqmTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 3, 6), )
if mibBuilder.loadTexts: pppLqmTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmTable.setDescription('The pppLqmTable contains statistical information for each current PPP link on the system. Only the system can add or delete entries to this table. Creating entries: Entries are created by the system each time a new PPP link was established and LQM negotiated successful. Deleting entries: Entries are removed by the system when the corresponding PPP link is disconnected.')
pppLqmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1), ).setIndexNames((0, "BIANCA-BRICK-PPP-MIB", "pppLqmIfIndex"))
if mibBuilder.loadTexts: pppLqmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmEntry.setDescription('')
pppLqmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmIfIndex.setDescription('Correlating PPP interface index.')
pppLqmCallReference = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmCallReference.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmCallReference.setDescription('The call reference of the dialup link, correlating to the isdnCallReference field in the isdnCallTable.')
pppLqmReportingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmReportingPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmReportingPeriod.setDescription('The LQMReportingPeriod field indicates the maximum time in hundredths of seconds between transmission of Link Quality Reports (LQR). The peer may transmit packets at a faster rate than that which was negotiated.')
pppLqmOutLQRs = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmOutLQRs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmOutLQRs.setDescription('Number of transmitted Link Quality Reports (LQR) on this link.')
pppLqmOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmOutPackets.setDescription('Number of transmitted Packets on this link.')
pppLqmOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmOutOctets.setDescription('Number of transmitted Octets on this link, including framing data.')
pppLqmInLQRs = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmInLQRs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmInLQRs.setDescription('Number of Link Quality Reports (LQR) received on this link.')
pppLqmInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmInPackets.setDescription('Number of Packets reveived on this link.')
pppLqmInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmInOctets.setDescription('Number of Octets reveived on this link, including framing data.')
pppLqmInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmInDiscards.setDescription('Number of Packets received on this link, but discarded.')
pppLqmInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmInErrors.setDescription('Number of errorneous Packets received on this link.')
pppLqmPeerOutLQRs = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmPeerOutLQRs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmPeerOutLQRs.setDescription('Number of Link Quality Reports (LQR) transmitted by remote on this link.')
pppLqmPeerOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmPeerOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmPeerOutPackets.setDescription('Number of Packets transmitted by remote on this link.')
pppLqmPeerOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmPeerOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmPeerOutOctets.setDescription('Number of Octets transmitted by remote on this link, including framing data.')
pppLqmPeerInLQRs = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmPeerInLQRs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmPeerInLQRs.setDescription('Number of Link Quality Reports (LQR) received by remote on this link.')
pppLqmPeerInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmPeerInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmPeerInPackets.setDescription('Number of Packets reveived by remote on this link.')
pppLqmPeerInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmPeerInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmPeerInOctets.setDescription('Number of Octets reveived by remote on this link, including framing data.')
pppLqmPeerInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmPeerInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmPeerInDiscards.setDescription('Number of Packets received by remote on this link, but discarded.')
pppLqmPeerInErrors = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmPeerInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmPeerInErrors.setDescription('Number of errorneous Packets received by remote on this link.')
pppLqmLostOutLQRs = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmLostOutLQRs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmLostOutLQRs.setDescription('Number of lost Link Quality Reports (LQR) transmitted on this link.')
pppLqmLostOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmLostOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmLostOutPackets.setDescription('Number of lost Packets transmitted on this link.')
pppLqmLostOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmLostOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmLostOutOctets.setDescription('Number of lost Octets transmitted on this link.')
pppLqmLostPeerOutLQRs = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmLostPeerOutLQRs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmLostPeerOutLQRs.setDescription('Number of lost Link Quality Reports (LQR) transmitted by remote on this link.')
pppLqmLostPeerOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmLostPeerOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmLostPeerOutPkts.setDescription('Number of lost Packets transmitted by remote on this link.')
pppLqmLostPeerOutOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmLostPeerOutOcts.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmLostPeerOutOcts.setDescription('Number of lost Octets transmitted by remote on this link.')
biboPPPIpAssignTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 3, 4), )
if mibBuilder.loadTexts: biboPPPIpAssignTable.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPIpAssignTable.setDescription("The biboPPPIpAssignTable contains IP addresses used when dynamically assigning IP addresses; i.e. when the biboPPPIpAddress field is set to `dynamic'. Creating entries: Entries are created by assigning a value (IP address) to the biboPPPIpAssignAddress object. Deleting entries: An entry (address) can be removed by assigning the value `delete' to its biboPPPIpAssignState.")
biboPPPIpAssignEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 3, 4, 1), ).setIndexNames((0, "BIANCA-BRICK-PPP-MIB", "biboPPPIpAssignAddress"))
if mibBuilder.loadTexts: biboPPPIpAssignEntry.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPIpAssignEntry.setDescription('Pool of IP addresses for dynamic IP address assignment via IPCP. See the biboPPPIpAddress field for further explanation.')
biboPPPIpAssignAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 4, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPIpAssignAddress.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPIpAssignAddress.setDescription('First IP address of this range.')
biboPPPIpAssignState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unused", 1), ("assigned", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPIpAssignState.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPIpAssignState.setDescription('If an entry is currently in use, the state is set to as- signed(1). Otherwise it is set to unused(2). You may also delete this entry by changing it to delete(3).')
biboPPPIpAssignPoolId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPIpAssignPoolId.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPIpAssignPoolId.setDescription('Pool ID value.')
biboPPPIpAssignRange = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPIpAssignRange.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPIpAssignRange.setDescription('Number of IP addresses that will be assigned starting from biboPPPIpAssignAddress. A range of 0 will disable this entry')
pppIpInUseTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 3, 7), )
if mibBuilder.loadTexts: pppIpInUseTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpInUseTable.setDescription('The pppIpUseTable contains dynamically assigned IP addresses.')
pppIpInUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 3, 7, 1), ).setIndexNames((0, "BIANCA-BRICK-PPP-MIB", "pppIpInUseAddress"))
if mibBuilder.loadTexts: pppIpInUseEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpInUseEntry.setDescription('')
pppIpInUseAddress = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 3, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIpInUseAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpInUseAddress.setDescription('assigned IP address')
pppIpInUsePoolId = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIpInUsePoolId.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpInUsePoolId.setDescription('Unique IP address pool ID')
pppIpInUseIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 3, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIpInUseIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpInUseIfIndex.setDescription('Unique interface index')
pppIpInUseIdent = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 3, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIpInUseIdent.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpInUseIdent.setDescription('The remote authentication identification string.')
pppIpInUseState = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("assigned", 1), ("reserved", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIpInUseState.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpInUseState.setDescription('If an IP address is currently assigned, the state of this entry is set to assigned(1). Otherwise, after disconnect, it is set to reserved(2) until the same peer reconnects or this entry expires (see pppIpInUseAge).')
pppIpInUseAge = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 3, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIpInUseAge.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpInUseAge.setDescription('This object specifies the age of the entry after creation or after changing into state reserved(2). After expiration the IP address (see pppIpInUseAddress) is no longer reserved for peer specified by pppIpInUseIdent and this entry will be deleted.')
biboPPPProfileTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 3, 5), )
if mibBuilder.loadTexts: biboPPPProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPProfileTable.setDescription('The biboPPPProfileTable contains PPP default parameters used for PPP negotiation with unknown dialin partners. For PPP connections, PPP profiles are asigned to incoming connections via the isdnDispatchTable. Currently no entries can be created or deleted by user.')
biboPPPProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 3, 5, 1), ).setIndexNames((0, "BIANCA-BRICK-PPP-MIB", "biboPPPProfileName"))
if mibBuilder.loadTexts: biboPPPProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPProfileEntry.setDescription('')
biboPPPProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("profile-1", 1), ("profile-2", 2), ("profile-3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPPPProfileName.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPProfileName.setDescription('The name of the PPP profile. Three profiles are available.')
biboPPPProfileAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3), ("both", 4), ("ms-chap", 6), ("all", 7), ("ms-chapv2", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPProfileAuthProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPProfileAuthProtocol.setDescription('The type of authentication used on the point-to-point link as described in RFC 1334. See biboPPPAuthentication for further details.')
biboPPPProfileAuthRadius = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inband", 2), ("outband", 3), ("both", 4), ("radius-only", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPProfileAuthRadius.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPProfileAuthRadius.setDescription('This entry is used to configure possible RADIUS authentication on incoming calls. The default value is inband(2), only inband RADIUS requests (PAP, CHAP) are sent to the defined RADIUS server. Outband requests (CALLERID) are sent in outband(3) mode. If set to both(3), both requests are sent. To disable RADIUS requests in the profile set this value to none(1). To disable authentication attempts via the local data base set this value to radius-only(5).')
biboPPPProfileLQMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPProfileLQMonitoring.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPProfileLQMonitoring.setDescription('This parameter enables (2) or disables (1) PPP Link Quality Monitoring (LQM) according RFC 1989. When set to on(2) LQM is added to the list of parameters acknowledged in LCP negotiation. Link quality reports (LQR) will be generated and send periodically.')
biboPPPProfilePPPoEDevIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPProfilePPPoEDevIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPProfilePPPoEDevIfIndex.setDescription('Specifies the device to be used for PPP over Ethernet (PPPoE) according RFC 2516.')
biboPPPProfileCallbackNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("cbcp-optional", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPPPProfileCallbackNegotiation.setStatus('mandatory')
if mibBuilder.loadTexts: biboPPPProfileCallbackNegotiation.setDescription("Specifies wether callback negotiation (LCP/CBCP) is allowed or not. If set to disabled(1), no callback negotiation will be performed or accepted. If set to enabled(2), PPP callback negotation will be accepted on demand. If this object is set to cbcp-optional(3), the CBCP option 'no callback' is also offered to the Windows client so that the user can decide wether he wants to be called back or not.")
pppExtIfTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 3, 9), )
if mibBuilder.loadTexts: pppExtIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfTable.setDescription("The pppExtIfTable contains extended configuration and information related to the PPP interfaces on the system. Entries are optional for each interface and can be added or deleted by the user. Deleting entries: Entries are removed by setting an entry's pppExtIfBodMode object to 'delete'.")
pppExtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1), ).setIndexNames((0, "BIANCA-BRICK-PPP-MIB", "pppExtIfIndex"))
if mibBuilder.loadTexts: pppExtIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfEntry.setDescription('')
pppExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfIndex.setDescription('Correlating PPP interface index.')
pppExtIfBodMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("backup", 2), ("bod-active", 3), ("bod-passive", 4), ("bap-active", 5), ("bap-passive", 6), ("delete", 7), ("bap-both", 8), ("bap-first", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfBodMode.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfBodMode.setDescription('Enables bandwidth on demand (BOD) mode for leased line and dialup interfaces when setting to bod-active (3) respectively bod-passive (4) or backup only mode for leased line connections like X.21. When set to disabled (1), neither bandwidth on demand (as specified by the pppExtIfTable) or backup mode is enabled. Four modes (bap-active (5), bap-passive (6), bap-both(7) and bap-first (8)) are available for BAP (Bandwidth Allocation Protocol) support to specify wether BAP Call-Requests and BAP Callback-Requests should be initiated and/or accepted.')
pppExtIfAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("equal", 1), ("proportional", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfAlgorithm.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfAlgorithm.setDescription('The algorithm to use for weighting line utilization. Line utilization is determined by calculating the average load for each interface. When set to equal (1) all samples taken over the time interval (defined in pppExtIfInterval) will be given equal weight, when set to proportional (2) the weighting disproportional to the age of the sample.')
pppExtIfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfInterval.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfInterval.setDescription('The time interval (in seconds) to use for sampling and calculating of the average throughput of the interface. See also: pppExtIfLoad.')
pppExtIfLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppExtIfLoad.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfLoad.setDescription('The actual throughput (in percent) of the total bandwidth of this interface (load). This value is updated once every second.')
pppExtIfMlpFragmentation = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("proportional", 1), ("equal", 2), ("interleave", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfMlpFragmentation.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfMlpFragmentation.setDescription('The multilink PPP fragmentation mode. When set to proportional (1) packets will be divided into fragments proportional to the transmission rate of each link, when set to equal (2) packets will be divided into multiple equal fragments (equal to MlpFragSize) such that the number sent on each link is proportional to the transmission rate. When set to interleave (3), large datagrams will be fragmentated (maximum size determined by MlpFragSize) to reduce transmission delay of high-priority traffic on slower links.')
pppExtIfMlpFragSize = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfMlpFragSize.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfMlpFragSize.setDescription('The multilink PPP fragment size. If MlpFragmentation is set to proportional (1) this value specifies the minimum size of the fragment in bytes. If MlpFragmentation is set to equal (2) this value specifies the maximum fragment size in bytes.')
pppExtIfPPPoEService = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfPPPoEService.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfPPPoEService.setDescription('The PPPoE (PPP over Ethernet, RFC 2516) service name which indicates the requested service during PPPoE discovery stage. Examples of the use of the service name are to indicate an ISP name or a class or a quality of service.')
pppExtIfPPPoEAcServer = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfPPPoEAcServer.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfPPPoEAcServer.setDescription('The PPPoE (PPP over Ethernet, RFC 2516) AC-Server name which determines the access concentrator during PPPoE discovery stage.')
pppExtIfEncKeyNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("authentication", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfEncKeyNegotiation.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfEncKeyNegotiation.setDescription("This variable defines the specification of shared secrets (encryption keys) between the sender and receiver of encrypted data. If set to static (1), the keys specified in 'pppExtIfEncTxKey' and 'pppExtIfEncRxKey' will be used, if set to authentication (2), the key derivation is based on PPP authentication via CHAP or MS-CHAP.")
pppExtIfEncTxKey = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfEncTxKey.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfEncTxKey.setDescription("Static (encryption) key used for transmission of encrypted data via PPP. It's size depends on the used encryption algorithm and the corresponding key length, e.g. 'des_56' or 'blowfish_168'.")
pppExtIfEncRxKey = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfEncRxKey.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfEncRxKey.setDescription("Static (decryption) key used for decryption of encrypted data received on PPP connections. It's size depends on the used encryption algorithm and the corresponding key length, e.g. 'des_56' or 'blowfish_168'.")
pppExtIfGearUpThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfGearUpThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfGearUpThreshold.setDescription('Gear up threshold for invoking current bandwidth. The measured throughput (in percent of the total bandwidth) of this interface (see pppExtIfLoad) is compared with this value once per second. If exceeded longer than 5 seconds an additional B-channel will be requested.')
pppExtIfGearDownThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfGearDownThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfGearDownThreshold.setDescription('Gear down threshold for decreasing current bandwidth. The expected throughput (in percent of the total bandwidth) of this interface (see pppExtIfLoad) after dropping a B-channel is compared with this threshold value once per second. If the needed bandwidth falls below this threshold longer than 10 seconds, exactly one B-channel will be dropped.')
pppExtIfAodiDChanQlen = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfAodiDChanQlen.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfAodiDChanQlen.setDescription('Upper threshold for the amount of data (in octets) waiting to be sent across the 9.6Kbit/sec D-channel. If exceeded, additional bandwidth will be invoked at once.')
pppExtIfAodiGearDownTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfAodiGearDownTxRate.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfAodiGearDownTxRate.setDescription('Lower threshold for the amount of data in bits per second to be sent across the 64Kbit/sec B-channel. If the measured throughput becomes smaller than this value over a period of pppExtIfGearDownPersistance seconds, the remaining B-channel will be dropped.')
pppExtIfGearUpPersistance = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfGearUpPersistance.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfGearUpPersistance.setDescription('Gear up persistence interval for invoking current bandwidth. The measured throughput (in percent of the total bandwidth) of this interface (see pppExtIfLoad) is compared with the current value of the variable pppExtIfGearUpThreshold once per second. If exceeded longer than pppExtIfGearUpPersistance seconds an additional B-channel will be requested.')
pppExtIfGearDownPersistance = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfGearDownPersistance.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfGearDownPersistance.setDescription('Gear down persistence interval for decreasing current bandwidth. The measured throughput (in percent of the total bandwidth) of this interface (see pppExtIfLoad) is compared with the current value of pppExtIfGearDownThreshold once per second. If exceeded longer than pppExtIfGearDownPersistance seconds, exactly one B-channel will be dropped.')
pppExtIfL1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfL1Speed.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfL1Speed.setDescription("This object contains the interface's nominal bandwidth in bits per second. Please note that this parameter may not represent the real available transmission rate. The current purpose is only informational for example for PPTP or PPPoE interfaces where no accurate information from the underlaying network is available.")
pppExtIfCurrentRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 36000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfCurrentRetryTime.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfCurrentRetryTime.setDescription('Current time in seconds to wait before retrying a call when the smart retry algorithm is implemented.')
pppExtIfMaxRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 36000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfMaxRetryTime.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfMaxRetryTime.setDescription('Maximum time in seconds to wait before retrying a call when the smart retry algorithm is implemented. When set to zero this algorithm is disabled.')
pppExtIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfMtu.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfMtu.setDescription('Determines size of the largest datagram which can be sent on the interface, specified in octets (see ifMtu). When set to zero (default), the value of the variable ifMtu depends on the received LCP MRU/MRRU option.')
pppExtIfMru = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfMru.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfMru.setDescription('The maximum length for the PPP information field, including padding, but not including the protocol field, is termed the Maximum Receive Unit (MRU).')
pppExtIfAuthMutual = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 3, 9, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppExtIfAuthMutual.setStatus('mandatory')
if mibBuilder.loadTexts: pppExtIfAuthMutual.setDescription('This object enables mutual PPP authentication between the peers.')
biboDialTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 4, 1), )
if mibBuilder.loadTexts: biboDialTable.setStatus('mandatory')
if mibBuilder.loadTexts: biboDialTable.setDescription("The biboDialTable contains configuration information for incoming and outgoing ISDN telephone numbers. Creating entries: Entries are created by assigning a value to the biboDialIfIndex object. Deleting entries: An entry can be removed by assigning the value `delete' to its biboDialType object.")
biboDialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 4, 1, 1), ).setIndexNames((0, "BIANCA-BRICK-PPP-MIB", "biboDialIfIndex"))
if mibBuilder.loadTexts: biboDialEntry.setStatus('mandatory')
if mibBuilder.loadTexts: biboDialEntry.setDescription('')
biboDialIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboDialIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: biboDialIfIndex.setDescription('The correlating PPP interface index.')
biboDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isdn", 1), ("isdn-spv", 2), ("delete", 3), ("ppp-callback", 4), ("ppp-negotiated", 5), ("x25-dialout", 6), ("ip", 7), ("x25", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboDialType.setStatus('mandatory')
if mibBuilder.loadTexts: biboDialType.setDescription('The dialup type can be set to plain isdn(1), isdn-spv(2) semi-permanent links used by the German 1TR6 D-channel protocol, or to delete(3) to delete a biboDialTable entry. The types ppp-callback(4) and ppp-negotiated(5) are used for the LCP callback option.')
biboDialDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboDialDirection.setStatus('mandatory')
if mibBuilder.loadTexts: biboDialDirection.setDescription('The allowed dial direction is either incoming(1), outgoing(2), or both(3) calls. No call is ever set up when set to incoming(1). Incoming calls will not be identified when set to outoing(2). Furthermore, once PPP authentication succeeds and there is at least one incoming number defined but for which none matches, the call will not be accepted for security reasons.')
biboDialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboDialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: biboDialNumber.setDescription("The defined dialing number. Used for either dialing or comparing to incoming calls or both, depending on the content of the biboDialDirection field. The wildcards '*', '?', '[', ']', '{', '}' may be used.")
biboDialSubaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 4, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboDialSubaddress.setStatus('mandatory')
if mibBuilder.loadTexts: biboDialSubaddress.setDescription('The defined dial subaddress, if any. Also, see the biboDialNumber field.')
biboDialClosedUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboDialClosedUserGroup.setStatus('mandatory')
if mibBuilder.loadTexts: biboDialClosedUserGroup.setDescription('The defined closed user group, if any. Also, see the biboDialNumber field.')
biboDialStkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 4, 1, 1, 7), BitValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboDialStkMask.setStatus('mandatory')
if mibBuilder.loadTexts: biboDialStkMask.setDescription('The defined stack mask. Each value of IsdnStkNumber represents a bit in this bitmask. A mask of 0 disables dialup completely, while a mask of -1 enables dialup on all available ISDN stacks.')
biboDialScreening = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("user", 1), ("user-verified", 2), ("user-failed", 3), ("network", 4), ("dont-care", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboDialScreening.setStatus('mandatory')
if mibBuilder.loadTexts: biboDialScreening.setDescription("The screening indicator of the biboDialNumber. The biboDialScreening field can be used to gauge the `trustworthiness' of the biboDialNumber field. (See isdnCallScreening) Indicators are ordered from highest to lowest as follows: indicator: CPN assigned: verification: `network' by network none `user-verified' by user verification successful `user' by user none `user-failed' by user verification failed Set this field to `dont-care' to accept all calls. Otherwise calls are accepted only if the screening indicator matches or is higher than the set value.")
biboDialCallingSubaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 4, 1, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboDialCallingSubaddress.setStatus('mandatory')
if mibBuilder.loadTexts: biboDialCallingSubaddress.setDescription('The defined calling dial subaddress, if any. Also, see the biboDialNumber field.')
biboDialTypeOfCallingSubAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nsap", 1), ("user-specified", 2), ("reserved", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboDialTypeOfCallingSubAdd.setStatus('mandatory')
if mibBuilder.loadTexts: biboDialTypeOfCallingSubAdd.setDescription('The type of calling party subaddress.')
biboDialTypeOfCalledSubAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nsap", 1), ("user-specified", 2), ("reserved", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboDialTypeOfCalledSubAdd.setStatus('mandatory')
if mibBuilder.loadTexts: biboDialTypeOfCalledSubAdd.setDescription('The type of called party subaddress.')
mibBuilder.exportSymbols("BIANCA-BRICK-PPP-MIB", pppExtIfAodiDChanQlen=pppExtIfAodiDChanQlen, biboDialTable=biboDialTable, pppSessionDNS1=pppSessionDNS1, biboPPPLinkTable=biboPPPLinkTable, pppLqmLostOutOctets=pppLqmLostOutOctets, biboPPPIpAssignPoolId=biboPPPIpAssignPoolId, bintec=bintec, pppSessionLocIpAddr=pppSessionLocIpAddr, biboPPPConnIfIndex=biboPPPConnIfIndex, biboPPPConnIncomingCalls=biboPPPConnIncomingCalls, biboPPPLinkEntry=biboPPPLinkEntry, biboPPPIfIndex=biboPPPIfIndex, biboPPPMinConn=biboPPPMinConn, pppLqmPeerInLQRs=pppLqmPeerInLQRs, pppLqmLostOutLQRs=pppLqmLostOutLQRs, pppSessionCompression=pppSessionCompression, pppExtIfLoad=pppExtIfLoad, biboPPPLinkKeepalivePending=biboPPPLinkKeepalivePending, biboPPPVJHeaderComp=biboPPPVJHeaderComp, biboPPPProfileCallbackNegotiation=biboPPPProfileCallbackNegotiation, dialmap=dialmap, biboPPPTotalIncomingCalls=biboPPPTotalIncomingCalls, biboDialCallingSubaddress=biboDialCallingSubaddress, biboPPPConnOutgoingFails=biboPPPConnOutgoingFails, biboPPPEncapsulation=biboPPPEncapsulation, biboDialNumber=biboDialNumber, biboPPPLinkKeepaliveSent=biboPPPLinkKeepaliveSent, biboPPPRetryTime=biboPPPRetryTime, dod=dod, pppLqmPeerInOctets=pppLqmPeerInOctets, pppExtIfPPPoEService=pppExtIfPPPoEService, biboPPPConnReceivedOctets=biboPPPConnReceivedOctets, biboPPPMaxRetries=biboPPPMaxRetries, biboPPPLinkState=biboPPPLinkState, biboPPPTotalTransmitOctets=biboPPPTotalTransmitOctets, biboPPPLinkIfIndex=biboPPPLinkIfIndex, pppLqmOutLQRs=pppLqmOutLQRs, pppLqmPeerInErrors=pppLqmPeerInErrors, pppIpInUseTable=pppIpInUseTable, biboPPPType=biboPPPType, pppLqmInOctets=pppLqmInOctets, pppSessionEntry=pppSessionEntry, pppIpInUseIfIndex=pppIpInUseIfIndex, biboPPPCallback=biboPPPCallback, biboPPPProfileAuthRadius=biboPPPProfileAuthRadius, biboDialScreening=biboDialScreening, pppSessionRemIpAddr=pppSessionRemIpAddr, ppp=ppp, biboPPPTotalCharge=biboPPPTotalCharge, biboPPPConnOutgoingCalls=biboPPPConnOutgoingCalls, biboPPPLinkLqm=biboPPPLinkLqm, biboPPPLinkCallType=biboPPPLinkCallType, biboPPPStatEntry=biboPPPStatEntry, private=private, pppSessionCbcpMode=pppSessionCbcpMode, biboDialDirection=biboDialDirection, biboPPPProfileAuthProtocol=biboPPPProfileAuthProtocol, pppLqmEntry=pppLqmEntry, pppExtIfEncTxKey=pppExtIfEncTxKey, biboPPPLinkCallReference=biboPPPLinkCallReference, biboPPPProfileEntry=biboPPPProfileEntry, biboPPPIpAddress=biboPPPIpAddress, biboPPPLinkLocDiscr=biboPPPLinkLocDiscr, pppSessionVJHeaderComp=pppSessionVJHeaderComp, pppExtIfTable=pppExtIfTable, pppExtIfGearUpThreshold=pppExtIfGearUpThreshold, biboPPPLinkLcpComp=biboPPPLinkLcpComp, biboPPPIpAssignEntry=biboPPPIpAssignEntry, internet=internet, pppIpInUseState=pppIpInUseState, biboPPPMaxConn=biboPPPMaxConn, pppLqmLostPeerOutOcts=pppLqmLostPeerOutOcts, pppLqmInErrors=pppLqmInErrors, biboPPPTotalUnits=biboPPPTotalUnits, pppExtIfAodiGearDownTxRate=pppExtIfAodiGearDownTxRate, pppExtIfAlgorithm=pppExtIfAlgorithm, pppLqmInPackets=pppLqmInPackets, pppLqmPeerOutLQRs=pppLqmPeerOutLQRs, biboPPPTotalReceivedOctets=biboPPPTotalReceivedOctets, biboPPPLocalIdent=biboPPPLocalIdent, biboPPPSessionTimeout=biboPPPSessionTimeout, pppSessionMlp=pppSessionMlp, biboPPPLinkCharge=biboPPPLinkCharge, pppSessionIfIndex=pppSessionIfIndex, biboPPPLinkSpeed=biboPPPLinkSpeed, pppLqmPeerOutOctets=pppLqmPeerOutOctets, biboPPPStatTable=biboPPPStatTable, pppSessionLcpCallback=pppSessionLcpCallback, pppLqmInDiscards=pppLqmInDiscards, pppLqmLostPeerOutLQRs=pppLqmLostPeerOutLQRs, pppIpInUseAge=pppIpInUseAge, pppExtIfAuthMutual=pppExtIfAuthMutual, biboDialStkMask=biboDialStkMask, biboPPPIpAssignRange=biboPPPIpAssignRange, pppLqmReportingPeriod=pppLqmReportingPeriod, pppExtIfIndex=pppExtIfIndex, pppExtIfBodMode=pppExtIfBodMode, pppLqmIfIndex=pppLqmIfIndex, biboDialClosedUserGroup=biboDialClosedUserGroup, biboPPPLayer2Mode=biboPPPLayer2Mode, pppSessionWINS2=pppSessionWINS2, biboPPPLinkRetries=biboPPPLinkRetries, biboPPPConnActive=biboPPPConnActive, enterprises=enterprises, pppExtIfEncKeyNegotiation=pppExtIfEncKeyNegotiation, pppLqmCallReference=pppLqmCallReference, pppExtIfEntry=pppExtIfEntry, pppExtIfMlpFragmentation=pppExtIfMlpFragmentation, pppExtIfMlpFragSize=pppExtIfMlpFragSize, pppLqmPeerInDiscards=pppLqmPeerInDiscards, biboPPPConnCharge=biboPPPConnCharge, pppLqmLostOutPackets=pppLqmLostOutPackets, pppLqmPeerInPackets=pppLqmPeerInPackets, pppLqmOutOctets=pppLqmOutOctets, pppIpInUsePoolId=pppIpInUsePoolId, biboPPPConnUnits=biboPPPConnUnits, biboDialIfIndex=biboDialIfIndex, pppExtIfGearDownPersistance=pppExtIfGearDownPersistance, biboPPPConnDuration=biboPPPConnDuration, pppLqmOutPackets=pppLqmOutPackets, pppSessionIpxcpNodeNumber=pppSessionIpxcpNodeNumber, biboPPPEntry=biboPPPEntry, pppLqmPeerOutPackets=pppLqmPeerOutPackets, biboPPPAuthentication=biboPPPAuthentication, biboPPPIdleTime=biboPPPIdleTime, pppExtIfGearUpPersistance=pppExtIfGearUpPersistance, pppExtIfEncRxKey=pppExtIfEncRxKey, biboPPPLinkEstablished=biboPPPLinkEstablished, pppExtIfMru=pppExtIfMru, biboPPPEncryption=biboPPPEncryption, pppSessionDNS2=pppSessionDNS2, bibo=bibo, biboPPPLinkAccm=biboPPPLinkAccm, biboPPPProfilePPPoEDevIfIndex=biboPPPProfilePPPoEDevIfIndex, biboPPPIpAssignTable=biboPPPIpAssignTable, pppSessionBacpFavoredPeer=pppSessionBacpFavoredPeer, biboPPPConnProtocols=biboPPPConnProtocols, Date=Date, biboPPPTotalDuration=biboPPPTotalDuration, pppSessionMru=pppSessionMru, biboPPPLinkProtocols=biboPPPLinkProtocols, biboPPPTable=biboPPPTable, biboPPPInitConn=biboPPPInitConn, biboPPPDynShortHold=biboPPPDynShortHold, pppLqmInLQRs=pppLqmInLQRs, pppExtIfL1Speed=pppExtIfL1Speed, pppSessionCbcpDelay=pppSessionCbcpDelay, pppIpInUseEntry=pppIpInUseEntry, biboPPPConnState=biboPPPConnState, biboPPPTotalOutgoingFails=biboPPPTotalOutgoingFails, biboPPPLinkDirection=biboPPPLinkDirection, biboPPPIpAssignAddress=biboPPPIpAssignAddress, biboPPPKeepalive=biboPPPKeepalive, biboPPPLinkUnits=biboPPPLinkUnits, biboPPPTotalOutgoingCalls=biboPPPTotalOutgoingCalls, biboPPPCompressionMode=biboPPPCompressionMode, pppExtIfCurrentRetryTime=pppExtIfCurrentRetryTime, biboPPPThroughput=biboPPPThroughput, biboPPPCompression=biboPPPCompression, pppExtIfGearDownThreshold=pppExtIfGearDownThreshold, biboPPPProfileName=biboPPPProfileName, BitValue=BitValue, biboPPPLinkDeviceIndex=biboPPPLinkDeviceIndex, biboPPPLoginString=biboPPPLoginString, biboPPPConnTransmitOctets=biboPPPConnTransmitOctets, biboPPPIpPoolId=biboPPPIpPoolId, biboPPPTimeout=biboPPPTimeout, biboPPPAuthIdent=biboPPPAuthIdent, biboDialEntry=biboDialEntry, biboPPPLQMonitoring=biboPPPLQMonitoring, biboDialSubaddress=biboDialSubaddress, pppExtIfMaxRetryTime=pppExtIfMaxRetryTime, biboDialTypeOfCalledSubAdd=biboDialTypeOfCalledSubAdd, biboDialTypeOfCallingSubAdd=biboDialTypeOfCallingSubAdd, biboPPPDNSNegotiation=biboPPPDNSNegotiation, pppIpInUseIdent=pppIpInUseIdent, pppSessionEncryption=pppSessionEncryption, biboPPPShortHold=biboPPPShortHold, biboPPPConnIncomingFails=biboPPPConnIncomingFails, pppLqmTable=pppLqmTable, biboPPPChargeInterval=biboPPPChargeInterval, biboPPPLinkStkNumber=biboPPPLinkStkNumber, biboPPPLayer1Protocol=biboPPPLayer1Protocol, biboPPPAuthSecret=biboPPPAuthSecret, pppIpInUseAddress=pppIpInUseAddress, pppExtIfMtu=pppExtIfMtu, pppExtIfInterval=pppExtIfInterval, biboPPPProfileLQMonitoring=biboPPPProfileLQMonitoring, pppExtIfPPPoEAcServer=pppExtIfPPPoEAcServer, pppSessionAuthProt=pppSessionAuthProt, biboPPPLinkRemDiscr=biboPPPLinkRemDiscr, org=org, pppLqmLostPeerOutPkts=pppLqmLostPeerOutPkts, pppSessionWINS1=pppSessionWINS1, pppSessionTable=pppSessionTable, biboPPPIpAssignState=biboPPPIpAssignState, biboDialType=biboDialType, biboPPPProfileTable=biboPPPProfileTable, biboPPPTotalIncomingFails=biboPPPTotalIncomingFails, biboPPPBlockTime=biboPPPBlockTime)
