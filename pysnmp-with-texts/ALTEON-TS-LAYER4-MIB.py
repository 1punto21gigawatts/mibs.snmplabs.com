#
# PySNMP MIB module ALTEON-TS-LAYER4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALTEON-TS-LAYER4-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:21:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
switch, = mibBuilder.importSymbols("ALTEON-ROOT-MIB", "switch")
information, stats, operCmds = mibBuilder.importSymbols("ALTEON-TIGON-SWITCH-MIB", "information", "stats", "operCmds")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Counter32, Counter64, MibIdentifier, TimeTicks, Bits, ObjectIdentity, Gauge32, NotificationType, iso, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "Counter64", "MibIdentifier", "TimeTicks", "Bits", "ObjectIdentity", "Gauge32", "NotificationType", "iso", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
serverloadbalance = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5))
filtering = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10))
globalSLB = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11))
dynamicSLB = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12))
slbfailover = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16))
slbUrl = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27))
slbUrlRedir = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1))
slbUrlBalance = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2))
rtspUrlRedir = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3))
slbRurl = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52))
slbRurlGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 1))
slbWaphc = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62))
slbWap = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 63))
synAttackDetCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 82))
gslbGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1))
gslbDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2))
gslbSites = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3))
gslbLookup = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4))
slbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2))
filterStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 6))
gslbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7))
gslbMaintStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 8))
urlStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10))
tcpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 11))
ftpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 14))
rurlStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18))
rtspStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 19))
tcpLimitStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 23))
nasaStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24))
dnsSlbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 25))
slb_info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2)).setLabel("slb-info")
slbOper = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 4))
slbRealServerMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: slbRealServerMaxSize.setDescription('The maximum number of entries in SLB RealServerTable.')
slbCurCfgRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2), )
if mibBuilder.loadTexts: slbCurCfgRealServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerTable.setDescription('The table of Real Server configuration in the current_config.')
slbCurCfgRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgRealServerIndex"))
if mibBuilder.loadTexts: slbCurCfgRealServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerEntry.setDescription('Information about a particular Real Server configuration.')
slbCurCfgRealServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerIndex.setDescription('The real server number')
slbCurCfgRealServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerIpAddr.setDescription('IP address of the real server identified by the instance of the slbRealServerIndex.')
slbCurCfgRealServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerWeight.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerWeight.setDescription('The server weight.')
slbCurCfgRealServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerMaxConns.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerMaxConns.setDescription('The maximum number of connections that are allowed.')
slbCurCfgRealServerTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerTimeOut.setDescription('The maximum number of minutes an inactive connection remains open.')
slbCurCfgRealServerBackUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerBackUp.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerBackUp.setDescription('The backup server number for this server.')
slbCurCfgRealServerPingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerPingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerPingInterval.setDescription('The interval between keep-alive (ping) attempts in number of seconds. Zero means disabling ping attempt.')
slbCurCfgRealServerFailRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerFailRetry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerFailRetry.setDescription('The number of failed attempts to declare this server DOWN.')
slbCurCfgRealServerSuccRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerSuccRetry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerSuccRetry.setDescription('The number of successful attempts to declare a server UP.')
slbCurCfgRealServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerState.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerState.setDescription('Enable or disable this server.')
slbCurCfgRealServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local-server", 1), ("remote-server", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerType.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerType.setDescription('The server type. It participates in global server load balancing when it is configured as remote-server.')
slbCurCfgRealServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerName.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerName.setDescription('The name of the real server.')
slbCurCfgRealServerUrlBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerUrlBmap.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerUrlBmap.setDescription('The URL Pathes selected for URL load balancing for by the real server. The selected URL Pathes are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ URL Path 9 || || || ||___ URL Path 8 || |____ URL Path 7 || . . . ||_________ URL Path 2 |__________ URL Path 1 where x : 1 - The represented URL Path is selected 0 - The represented URL Path is not selected')
slbCurCfgRealServerCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerCookie.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerCookie.setDescription("The real server that will handle client requests that doesn't contain an URL cookie if Cookie loadbalance is enabled.")
slbCurCfgRealServerExcludeStr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerExcludeStr.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerExcludeStr.setDescription("The real server will handle requests that don't match the loadbalance string if it is enabled.")
slbCurCfgRealServerSubmac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerSubmac.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerSubmac.setDescription('The real server config to enable/disable MAC SA substitution for L4 traffic. If disabled (the default) we will NOT substitute the MAC SA of client-to-server frames. If enabled, we will substitute the MAC SA.')
slbCurCfgRealServerProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerProxy.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerProxy.setDescription('The real server config to enable/disable client proxy operation.')
slbNewCfgRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3), )
if mibBuilder.loadTexts: slbNewCfgRealServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerTable.setDescription('The table of Real Server configuration in the new_config.')
slbNewCfgRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgRealServerIndex"))
if mibBuilder.loadTexts: slbNewCfgRealServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerEntry.setDescription('Information about a particular Real Server configuration.')
slbNewCfgRealServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgRealServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerIndex.setDescription('The real server number')
slbNewCfgRealServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerIpAddr.setDescription('IP address of the real server identified by the instance of slbRealServerIndex.')
slbNewCfgRealServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerWeight.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerWeight.setDescription('The server weight.')
slbNewCfgRealServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerMaxConns.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerMaxConns.setDescription('The maximum number of connections that are allowed.')
slbNewCfgRealServerTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerTimeOut.setDescription('The maximum number of minutes an inactive connection remains open.')
slbNewCfgRealServerBackUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerBackUp.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerBackUp.setDescription('The backup server number for this server.')
slbNewCfgRealServerPingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerPingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerPingInterval.setDescription('The interval between keep-alive (ping) attempts in number of seconds. Zero means disabling ping attempt.')
slbNewCfgRealServerFailRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerFailRetry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerFailRetry.setDescription('The number of failed attempts to declare this server DOWN.')
slbNewCfgRealServerSuccRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerSuccRetry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerSuccRetry.setDescription('The number of successful attempts to declare a server UP.')
slbNewCfgRealServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerState.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerState.setDescription('Enable or disable this server.')
slbNewCfgRealServerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerDelete.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
slbNewCfgRealServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local-server", 1), ("remote-server", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerType.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerType.setDescription('The server type. It participates in global server load balancing when it is configured as remote-server.')
slbNewCfgRealServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerName.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerName.setDescription('The name of the real server.')
slbNewCfgRealServerUrlBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgRealServerUrlBmap.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerUrlBmap.setDescription('The URL Pathes selected for URL load balancing for by the real server. The selected URL Pathes are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ URL Path 9 || || || ||___ URL Path 8 || |____ URL Path 7 || . . . ||_________ URL Path 2 |__________ URL Path 1 where x : 1 - The represented URL Path is selected 0 - The represented URL Path is not selected')
slbNewCfgRealServerAddUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerAddUrl.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerAddUrl.setDescription('The URL Path (slbCurCfgUrlLbPathIndex) to be added to the real server. A zero is returned when read.')
slbNewCfgRealServerRemUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerRemUrl.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerRemUrl.setDescription('The URL Path (slbCurCfgUrlLbPathIndex) to be removed from the real server. A zero is returned when read.')
slbNewCfgRealServerCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerCookie.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerCookie.setDescription("Enable or disable real server to handle client requests that don't contain a cookie if cookie loadbalance is enabled.")
slbNewCfgRealServerExcludeStr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerExcludeStr.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerExcludeStr.setDescription('Enable or disable exclusionary matching string on real server.')
slbNewCfgRealServerSubmac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerSubmac.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerSubmac.setDescription('The real server config to enable/disable MAC SA substitution for L4 traffic. If disabled (the default) we will NOT substitute the MAC SA of client-to-server frames. If enabled, we will substitute the MAC SA.')
slbNewCfgRealServerProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerProxy.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerProxy.setDescription('The real server config to enable/disable client proxy operation.')
slbRealServPortTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServPortTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: slbRealServPortTableMaxSize.setDescription('The maximum number of entries in SLB RealServPortTable.')
slbCurCfgRealServPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 48), )
if mibBuilder.loadTexts: slbCurCfgRealServPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServPortTable.setDescription('The table of real server service ports.')
slbCurCfgRealServPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 48, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgRealServIndex"), (0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgRealServPortIndex"))
if mibBuilder.loadTexts: slbCurCfgRealServPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServPortEntry.setDescription('A row in the real server service ports table.')
slbCurCfgRealServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 48, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServIndex.setDescription('The number of the real server.')
slbCurCfgRealServPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 48, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServPortIndex.setDescription('The port index. This has no external meaning')
slbCurCfgRealServRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 48, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServRealPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServRealPort.setDescription('The layer4 real service port number.')
slbNewCfgRealServPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 49), )
if mibBuilder.loadTexts: slbNewCfgRealServPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServPortTable.setDescription('The table of real server service ports.')
slbNewCfgRealServPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 49, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgRealServIndex"), (0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgRealServPortIndex"))
if mibBuilder.loadTexts: slbNewCfgRealServPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServPortEntry.setDescription('A row in the real server service ports table.')
slbNewCfgRealServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 49, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgRealServIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServIndex.setDescription('The number of the real server.')
slbNewCfgRealServPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 49, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgRealServPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServPortIndex.setDescription('The port index. This has no external meaning')
slbNewCfgRealServRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 49, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServRealPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServRealPort.setDescription('The layer4 real service port number.')
slbNewCfgRealServPortDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 49, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServPortDelete.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServPortDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
slbVirtServerTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVirtServerTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: slbVirtServerTableMaxSize.setDescription('The maximum number of entries in SLB VirtServerTable.')
slbCurCfgVirtServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5), )
if mibBuilder.loadTexts: slbCurCfgVirtServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerTable.setDescription('The table of virtual Servers.')
slbCurCfgVirtualServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgVirtServerIndex"))
if mibBuilder.loadTexts: slbCurCfgVirtualServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtualServerEntry.setDescription('A row in the virtual server table.')
slbCurCfgVirtServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerIndex.setDescription('Virtual Server Number')
slbCurCfgVirtServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerIpAddress.setDescription('IP address of the virtual server.')
slbCurCfgVirtServerLayer3Only = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("layer3Only", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerLayer3Only.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerLayer3Only.setDescription('Enable or disable layer3 only balancing.')
slbCurCfgVirtServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerState.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerState.setDescription('Enable or disable the virtual server.')
slbCurCfgVirtServerDname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerDname.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerDname.setDescription('The domain name of the virtual server.')
slbCurCfgVirtServerCname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerCname.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerCname.setDescription('The cookie name of the virtual server used for cookie load balance.')
slbCurCfgVirtServerCoffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerCoffset.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerCoffset.setDescription('The starting byte offset of the cookie value.')
slbCurCfgVirtServerClength = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerClength.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerClength.setDescription('The number of bytes to extract from the cookie value.')
slbCurCfgVirtServerUriCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerUriCookie.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerUriCookie.setDescription('Enable or disable cookie search in URI')
slbCurCfgVirtServerFtpParsing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerFtpParsing.setStatus('obsolete')
if mibBuilder.loadTexts: slbCurCfgVirtServerFtpParsing.setDescription('Enable or Disable the ftp parsing for the virtual server.')
slbCurCfgVirtServerUrlHashLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerUrlHashLen.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerUrlHashLen.setDescription('The number of bytes used to hash onto server. A zero means URL hashing disabled.')
slbCurCfgVirtServerHttpHdrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerHttpHdrName.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerHttpHdrName.setDescription('The HTTP header name of the virtual server.')
slbCurCfgVirtServerBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerBwmContract.setDescription('The default BW contract of virtual server.')
slbCurCfgVirtServerResponseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerResponseCount.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerResponseCount.setDescription('The number of cookie search response count.')
slbCurCfgVirtServerCExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerCExpire.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerCExpire.setDescription('The cookie expire of the virtual server used for insert cookie load balance depending on the mode it has the following format <MM/dd/yy[@hh:mm]> absolute mode or <days[:hours[:minutes]]> for relative mode.')
slbNewCfgVirtServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6), )
if mibBuilder.loadTexts: slbNewCfgVirtServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerTable.setDescription('The table of virtual Servers.')
slbNewCfgVirtualServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgVirtServerIndex"))
if mibBuilder.loadTexts: slbNewCfgVirtualServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtualServerEntry.setDescription('A row in the virtual server table.')
slbNewCfgVirtServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerIndex.setDescription('The Virtual Server Number')
slbNewCfgVirtServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerIpAddress.setDescription('IP address of the virtual server.')
slbNewCfgVirtServerLayer3Only = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("layer3Only", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerLayer3Only.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerLayer3Only.setDescription('Enable or disable layer3 only balancing.')
slbNewCfgVirtServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerState.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerState.setDescription('Enable or disable the virtual server.')
slbNewCfgVirtServerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerDelete.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
slbNewCfgVirtServerDname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerDname.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerDname.setDescription('The domain name of the virtual server.')
slbNewCfgVirtServerCname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerCname.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerCname.setDescription('The cookie name of the virtual server used for cookie load balance.')
slbNewCfgVirtServerCoffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerCoffset.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerCoffset.setDescription('The starting byte offset of the cookie value.')
slbNewCfgVirtServerClength = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerClength.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerClength.setDescription('The number of bytes to extract from the cookie value.')
slbNewCfgVirtServerUriCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerUriCookie.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerUriCookie.setDescription('Enable or disable cookie search in URI')
slbNewCfgVirtServerFtpParsing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerFtpParsing.setStatus('obsolete')
if mibBuilder.loadTexts: slbNewCfgVirtServerFtpParsing.setDescription('Enable or Disable the ftp parsing for the virtual server.')
slbNewCfgVirtServerUrlHashLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerUrlHashLen.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerUrlHashLen.setDescription('The number of bytes used to hash onto server, A zero means URL hashing disabled.')
slbNewCfgVirtServerHttpHdrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerHttpHdrName.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerHttpHdrName.setDescription('The HTTP header name of the virtual server.')
slbNewCfgVirtServerBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerBwmContract.setDescription('The default BW contract number of the virtual server.')
slbNewCfgVirtServerResponseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerResponseCount.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerResponseCount.setDescription('The number of cookie search response count.')
slbNewCfgVirtServerCExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerCExpire.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerCExpire.setDescription('The cookie expire of the virtual server used for insert cookie load balance depending on the mode it has the following format <MM/dd/yy[@hh:mm]> absolute mode or <days[:hours[:minutes]]> for relative mode.')
slbVirtServicesTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVirtServicesTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: slbVirtServicesTableMaxSize.setDescription('The maximum number of entries in SLB Virtual Services Table.')
slbCurCfgVirtServicesTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7), )
if mibBuilder.loadTexts: slbCurCfgVirtServicesTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServicesTable.setDescription('The table of virtual services.')
slbCurCfgVirtServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgVirtServIndex"), (0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgVirtServiceIndex"))
if mibBuilder.loadTexts: slbCurCfgVirtServicesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServicesEntry.setDescription('A row in the virtual services table.')
slbCurCfgVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServIndex.setDescription('The number of the virtual server.')
slbCurCfgVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceIndex.setDescription('The service index. This has no external meaning')
slbCurCfgVirtServiceVirtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceVirtPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceVirtPort.setDescription('The layer4 virtual port number of the service.')
slbCurCfgVirtServiceRealGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceRealGroup.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceRealGroup.setDescription('The real server group number for this service.')
slbCurCfgVirtServiceRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceRealPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceRealPort.setDescription('The layer4 real port number of the service.')
slbCurCfgVirtServiceUDPBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3), ("stateless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceUDPBalance.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceUDPBalance.setDescription('Enable, disable or stateless the UDP balancing for the virtual port.')
slbCurCfgVirtServicePBind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3), ("sessid", 4), ("cookie", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServicePBind.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServicePBind.setDescription('Enable or disable persistent bindings for the virtual port.')
slbCurCfgVirtServiceHname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceHname.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceHname.setDescription('The host name of the virtual service.')
slbCurCfgVirtServiceHttpSlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("disabled", 1), ("urlslb", 2), ("urlhash", 3), ("cookie", 4), ("host", 5), ("browser", 6), ("others", 7), ("headerhash", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpSlb.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpSlb.setDescription('Select HTTP server loadbalancing for the virtual port.')
slbCurCfgVirtServiceHttpSlbOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("and", 1), ("or", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpSlbOption.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpSlbOption.setDescription('Select HTTP server loadbalancing option for the virtual port.')
slbCurCfgVirtServiceHttpSlb2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("disabled", 1), ("urlslb", 2), ("urlhash", 3), ("cookie", 4), ("host", 5), ("browser", 6), ("others", 7), ("headerhash", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpSlb2.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpSlb2.setDescription('Select HTTP server loadbalancing for the virtual port.')
slbCurCfgVirtServiceBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceBwmContract.setDescription('The BWM contract number for this service.')
slbCurCfgVirtServiceDirServerRtn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceDirServerRtn.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceDirServerRtn.setDescription('Enable or disable direct server return feature. To translate only MAC addresses in performing server load balancing when enabled. This allow servers to return directly to client since IP addresses have not been changed.')
slbCurCfgVirtServiceRtspUrlParse = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("disabled", 2), ("hash", 3), ("patternMatch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceRtspUrlParse.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceRtspUrlParse.setDescription('Enable or disable RTSP URL hashing.')
slbCurCfgVirtServiceDBind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceDBind.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceDBind.setDescription('Enable or disable Delayed Binding.')
slbCurCfgVirtServiceCookieMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rewrite", 1), ("passive", 2), ("insert", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceCookieMode.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceCookieMode.setDescription('Select cookie persistance mode.')
slbCurCfgVirtServiceFtpParsing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceFtpParsing.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceFtpParsing.setDescription('Enable or Disable the ftp parsing for the virtual service.')
slbCurCfgVirtServiceRemapUDPFrags = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceRemapUDPFrags.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceRemapUDPFrags.setDescription('Enable or disable remapping UDP server fragments')
slbCurCfgVirtServiceDnsSlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceDnsSlb.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceDnsSlb.setDescription('Enable or disable DNS query load balancing.')
slbNewCfgVirtServicesTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8), )
if mibBuilder.loadTexts: slbNewCfgVirtServicesTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServicesTable.setDescription('The table of virtual Services.')
slbNewCfgVirtServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgVirtServIndex"), (0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgVirtServiceIndex"))
if mibBuilder.loadTexts: slbNewCfgVirtServicesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServicesEntry.setDescription('A row in the virtual services table.')
slbNewCfgVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServIndex.setDescription('The number of the virtual server.')
slbNewCfgVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServiceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceIndex.setDescription('The service index. This has no external meaning')
slbNewCfgVirtServiceVirtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceVirtPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceVirtPort.setDescription('The layer4 virtual port number of the service.')
slbNewCfgVirtServiceRealGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceRealGroup.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceRealGroup.setDescription('The real server group number for this service.')
slbNewCfgVirtServiceRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceRealPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceRealPort.setDescription('The layer4 real port number of the service.')
slbNewCfgVirtServiceUDPBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3), ("stateless", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceUDPBalance.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceUDPBalance.setDescription('Enable, disable or stateless the UDP balancing for the virtual port.')
slbNewCfgVirtServicePBind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3), ("sessid", 4), ("cookie", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServicePBind.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServicePBind.setDescription('Enable or disable persistent bindings for the virtual port.')
slbNewCfgVirtServiceHname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceHname.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceHname.setDescription('The host name of the virtual service.')
slbNewCfgVirtServiceHttpSlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("disabled", 1), ("urlslb", 2), ("urlhash", 3), ("cookie", 4), ("host", 5), ("browser", 6), ("others", 7), ("headerhash", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpSlb.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpSlb.setDescription('Select HTTP server loadbalancing for the virtual port.')
slbNewCfgVirtServiceHttpSlbOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("and", 1), ("or", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpSlbOption.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpSlbOption.setDescription('Select HTTP server loadbalancing for the virtual port.')
slbNewCfgVirtServiceHttpSlb2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("disabled", 1), ("urlslb", 2), ("urlhash", 3), ("cookie", 4), ("host", 5), ("browser", 6), ("others", 7), ("headerhash", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpSlb2.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpSlb2.setDescription('Select HTTP server loadbalancing for the virtual port.')
slbNewCfgVirtServiceBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceBwmContract.setDescription('The BWM contract number for this service.')
slbNewCfgVirtServiceDirServerRtn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceDirServerRtn.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceDirServerRtn.setDescription('Enable or disable direct server return feature. To translate only MAC addresses in performing server load balancing when enabled. This allow servers to return directly to client since IP addresses have not been changed.')
slbNewCfgVirtServiceDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceDelete.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
slbNewCfgVirtServiceRtspUrlParse = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("disabled", 2), ("hash", 3), ("patternMatch", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceRtspUrlParse.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceRtspUrlParse.setDescription('Enable or disable RTSP URL hashing.')
slbNewCfgVirtServiceDBind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceDBind.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceDBind.setDescription('Enable or disable Delayed Binding.')
slbNewCfgVirtServiceCookieMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rewrite", 1), ("passive", 2), ("insert", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceCookieMode.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceCookieMode.setDescription('Select cookie persistance mode.')
slbNewCfgVirtServiceFtpParsing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceFtpParsing.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceFtpParsing.setDescription('Enable or Disable the ftp parsing for the virtual service.')
slbNewCfgVirtServiceRemapUDPFrags = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceRemapUDPFrags.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceRemapUDPFrags.setDescription('Enable or disable remapping UDP server fragments')
slbNewCfgVirtServiceDnsSlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceDnsSlb.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceDnsSlb.setDescription('Enable or disable DNS query load balancing.')
slbUrlBwmTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbUrlBwmTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: slbUrlBwmTableMaxSize.setDescription('The maximum number of entries in SLB URL BWM Table.')
slbCurCfgUrlBwmTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 50), )
if mibBuilder.loadTexts: slbCurCfgUrlBwmTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlBwmTable.setDescription('The table of URL based BWM for Virtual Services.')
slbCurCfgUrlBwmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 50, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgUrlBwmVirtServIndex"), (0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgUrlBwmVirtServiceIndex"), (0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgUrlBwmUrlId"))
if mibBuilder.loadTexts: slbCurCfgUrlBwmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlBwmEntry.setDescription('A row in the URL based BWM virtual services table.')
slbCurCfgUrlBwmVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 50, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlBwmVirtServIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlBwmVirtServIndex.setDescription('The number of the virtual server.')
slbCurCfgUrlBwmVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 50, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlBwmVirtServiceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlBwmVirtServiceIndex.setDescription('The service index. This has no external meaning')
slbCurCfgUrlBwmUrlId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 50, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlBwmUrlId.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlBwmUrlId.setDescription('The URL Path Identifier.')
slbCurCfgUrlBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 50, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlBwmContract.setDescription('The BW contract number.')
slbNewCfgUrlBwmTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 51), )
if mibBuilder.loadTexts: slbNewCfgUrlBwmTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlBwmTable.setDescription('The table of URL based BWM for Virtual Services.')
slbNewCfgUrlBwmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 51, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgUrlBwmVirtServIndex"), (0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgUrlBwmVirtServiceIndex"), (0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgUrlBwmUrlId"))
if mibBuilder.loadTexts: slbNewCfgUrlBwmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlBwmEntry.setDescription('A row in the URL based BWM virtual services table.')
slbNewCfgUrlBwmVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 51, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlBwmVirtServIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlBwmVirtServIndex.setDescription('The number of the virtual server.')
slbNewCfgUrlBwmVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 51, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlBwmVirtServiceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlBwmVirtServiceIndex.setDescription('The service index. This has no external meaning')
slbNewCfgUrlBwmUrlId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 51, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlBwmUrlId.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlBwmUrlId.setDescription('The URL Path Identifier.')
slbNewCfgUrlBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 51, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlBwmContract.setDescription('The BW contract number.')
slbNewCfgUrlBwmDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 51, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlBwmDelete.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlBwmDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
slbGroupTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbGroupTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: slbGroupTableMaxSize.setDescription('The maximum number of entries in slbCurCfgGroupTable.')
slbCurCfgGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10), )
if mibBuilder.loadTexts: slbCurCfgGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupTable.setDescription('The table of groups')
slbCurCfgGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgGroupIndex"))
if mibBuilder.loadTexts: slbCurCfgGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupEntry.setDescription('A row in the slbCurCfgGroupTable ')
slbCurCfgGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupIndex.setDescription('The group number for which the information pertains.')
slbCurCfgGroupRealServers = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupRealServers.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupRealServers.setDescription('The Real servers in the group. The servers are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... | || |_ server 9 | || | ||___ server 8 | |____ server 7 | . . . |__________ server 1 where x : 1 - The represented server belongs to the group 0 - The represented server does not belong to the group')
slbCurCfgGroupMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("roundRobin", 1), ("leastConnections", 2), ("minMisses", 3), ("hash", 4), ("response", 5), ("bandwidth", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupMetric.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupMetric.setDescription('The metric used to select next server in group.')
slbCurCfgGroupBackupServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupBackupServer.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupBackupServer.setDescription('The backup real server for this group.')
slbCurCfgGroupHealthCheckUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupHealthCheckUrl.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupHealthCheckUrl.setDescription('The specific content which is examined during health checks. The content depends on the type of health check.')
slbCurCfgGroupHealthCheckLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 2), ("http", 3), ("dns", 4), ("smtp", 5), ("pop3", 6), ("nntp", 7), ("ftp", 8), ("imap", 9), ("radius", 10), ("sslh", 11), ("script1", 12), ("script2", 13), ("script3", 14), ("script4", 15), ("script5", 16), ("script6", 17), ("script7", 18), ("script8", 19), ("script9", 20), ("script10", 21), ("script11", 22), ("script12", 23), ("script13", 24), ("script14", 25), ("script15", 26), ("script16", 27), ("link", 28), ("wsp", 29), ("wtls", 30), ("ldap", 31), ("udpdns", 32), ("arp", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupHealthCheckLayer.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupHealthCheckLayer.setDescription('The OSI layer at which servers are health checked.')
slbCurCfgGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupName.setDescription('The name of the real server group.')
slbCurCfgGroupRealThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupRealThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupRealThreshold.setDescription('The server failure syslog threshold of the real server group.')
slbCurCfgGroupBackupGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupBackupGroup.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupBackupGroup.setDescription('The backup real server group for this group.')
slbCurCfgGroupVipHealthCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupVipHealthCheck.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupVipHealthCheck.setDescription('Enable or disable VIP health checking in DSR mode.')
slbNewCfgGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11), )
if mibBuilder.loadTexts: slbNewCfgGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupTable.setDescription('The table of groups')
slbNewCfgGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgGroupIndex"))
if mibBuilder.loadTexts: slbNewCfgGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupEntry.setDescription('A row in the slbNewCfgGroupTable ')
slbNewCfgGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupIndex.setDescription('The group number for which the information pertains.')
slbNewCfgGroupRealServers = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgGroupRealServers.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupRealServers.setDescription('The Real servers in the group. The servers are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... | || |_ server 9 | || | ||___ server 8 | |____ server 7 | . . . |__________ server 1 where x : 1 - The represented server belongs to the group 0 - The represented server does not belong to the group')
slbNewCfgGroupAddServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupAddServer.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupAddServer.setDescription('The real server to be added to the group. When read, 0 is returned.')
slbNewCfgGroupRemoveServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupRemoveServer.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupRemoveServer.setDescription('The real server to be removed from the group. When read, 0 is returned.')
slbNewCfgGroupMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("roundRobin", 1), ("leastConnections", 2), ("minMisses", 3), ("hash", 4), ("response", 5), ("bandwidth", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupMetric.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupMetric.setDescription('The metric used to select next server in group.')
slbNewCfgGroupBackupServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupBackupServer.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupBackupServer.setDescription('The backup real server for this group.')
slbNewCfgGroupDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupDelete.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupDelete.setDescription('By setting the value to delete(2), the entire group is deleted.')
slbNewCfgGroupHealthCheckUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupHealthCheckUrl.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupHealthCheckUrl.setDescription('The specific content which is examined during health checks. The content depends on the type of health check.')
slbNewCfgGroupHealthCheckLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 2), ("http", 3), ("dns", 4), ("smtp", 5), ("pop3", 6), ("nntp", 7), ("ftp", 8), ("imap", 9), ("radius", 10), ("sslh", 11), ("script1", 12), ("script2", 13), ("script3", 14), ("script4", 15), ("script5", 16), ("script6", 17), ("script7", 18), ("script8", 19), ("script9", 20), ("script10", 21), ("script11", 22), ("script12", 23), ("script13", 24), ("script14", 25), ("script15", 26), ("script16", 27), ("link", 28), ("wsp", 29), ("wtls", 30), ("ldap", 31), ("udpdns", 32), ("arp", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupHealthCheckLayer.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupHealthCheckLayer.setDescription('The OSI layer at which servers are health checked.')
slbNewCfgGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupName.setDescription('The name of the real server group.')
slbNewCfgGroupRealThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupRealThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupRealThreshold.setDescription('The server failure syslog threshold of the real server group.')
slbNewCfgGroupBackupGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupBackupGroup.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupBackupGroup.setDescription('The backup real server group for this group.')
slbNewCfgGroupVipHealthCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupVipHealthCheck.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupVipHealthCheck.setDescription('Enable or disable VIP health checking in DSR mode.')
slbPortTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbPortTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: slbPortTableMaxSize.setDescription('The maximum number of entries in SLB Port Table.')
slbCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12), )
if mibBuilder.loadTexts: slbCurCfgPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPortTable.setDescription('The table of ports and their SLB states')
slbCurCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgPortIndex"))
if mibBuilder.loadTexts: slbCurCfgPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPortEntry.setDescription('A row in the slbPortTable ')
slbCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPortIndex.setDescription('The port number for which the SLB information pertains.')
slbCurCfgPortProxyIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortProxyIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPortProxyIpAddr.setDescription('The proxy IP address of the interface.')
slbCurCfgPortSlbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("client", 2), ("server", 3), ("client-server", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbState.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPortSlbState.setDescription('The SLB state of the port. none(1) - not SLB port client(2) - SLB client port server(3) - SLB server port client-server(4) - SLB client and server port')
slbCurCfgPortSlbHotStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbHotStandby.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPortSlbHotStandby.setDescription('Enable or disable hot standby processing on the switch port.')
slbCurCfgPortSlbInterSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbInterSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPortSlbInterSwitch.setDescription('Enable or disable inter-switch processing on the switch port.')
slbCurCfgPortSlbPipState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbPipState.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPortSlbPipState.setDescription('Enable or disable use of proxy IP address on the switch port.')
slbCurCfgPortSlbRtsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbRtsState.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPortSlbRtsState.setDescription('Enable or disable RTS processing on the switch port.')
slbCurCfgPortSlbIdslbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbIdslbState.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPortSlbIdslbState.setDescription('Enable or disable Intrusion Detection server load balancing.')
slbCurCfgPortSlbNasaState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbNasaState.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPortSlbNasaState.setDescription('Enable or disable NASA base processing.')
slbNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13), )
if mibBuilder.loadTexts: slbNewCfgPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPortTable.setDescription('The table of ports and their SLB states')
slbNewCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgPortIndex"))
if mibBuilder.loadTexts: slbNewCfgPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPortEntry.setDescription('A row in the slbPortTable ')
slbNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPortIndex.setDescription('The port number for which the SLB information pertains.')
slbNewCfgPortProxyIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortProxyIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPortProxyIpAddr.setDescription('The proxy IP address of the interface.')
slbNewCfgPortSlbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("client", 2), ("server", 3), ("client-server", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbState.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPortSlbState.setDescription('The SLB state of the port. none(1) - not SLB port client(2) - SLB client port server(3) - SLB server port client-server(4) - SLB client and server port')
slbNewCfgPortSlbHotStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbHotStandby.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPortSlbHotStandby.setDescription('Enable or disable hot standby processing on the switch port.')
slbNewCfgPortSlbInterSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbInterSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPortSlbInterSwitch.setDescription('Enable or disable inter-switch processing on the switch port.')
slbNewCfgPortSlbPipState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbPipState.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPortSlbPipState.setDescription('Enable or disable use of proxy IP address on the switch port.')
slbNewCfgPortSlbRtsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbRtsState.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPortSlbRtsState.setDescription('Enable or disable RTS processing on the switch port.')
slbNewCfgPortDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortDelete.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPortDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
slbNewCfgPortSlbIdslbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbIdslbState.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPortSlbIdslbState.setDescription('Enable or disable Intrusion Detection server load balancing.')
slbNewCfgPortSlbNasaState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbNasaState.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPortSlbNasaState.setDescription('Enable or disable NASA base processing.')
slbCurCfgImask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgImask.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgImask.setDescription('The virtual and real IP address mask - corresponding to the imask command of the slb configuration menu.')
slbNewCfgImask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgImask.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgImask.setDescription('The virtual and real IP address mask - corresponding to the imask command of the slb configuration menu.')
slbCurCfgMnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgMnet.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgMnet.setDescription('The management network - corresponding to the mnet command of the slb configuration menu.')
slbNewCfgMnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgMnet.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgMnet.setDescription('The management network - corresponding to the mnet command of the slb configuration menu.')
slbCurCfgMmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgMmask.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgMmask.setDescription('The management subnet mask - corresponding to the mmask command of the slb configuration menu.')
slbNewCfgMmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgMmask.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgMmask.setDescription('The management subnet mask - corresponding to the mmask command of the slb configuration menu.')
slbCurCfgRadiusAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRadiusAuthenString.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRadiusAuthenString.setDescription('The RADIUS authentication string. The string is used for generating encrypted authentication string for RADIUS health check.')
slbNewCfgRadiusAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRadiusAuthenString.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRadiusAuthenString.setDescription('The RADIUS authentication string. The string is used for generating encrypted authentication string for RADIUS health check.')
slbCurCfgDirectMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgDirectMode.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgDirectMode.setDescription('Enable or disable direct access mode. It allows direct access to real servers and any combination of virtual and real servers when set to enabled(1).')
slbNewCfgDirectMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgDirectMode.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgDirectMode.setDescription('Enable or disable direct access mode. It allows direct access to real servers and any combination of virtual and real servers when set to enabled(1).')
slbCurCfgPmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 28), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPmask.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPmask.setDescription('The persistent mask - corresponding to the pmask command of the slb configuration menu.')
slbNewCfgPmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPmask.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPmask.setDescription('The persistent mask - corresponding to the pmask command of the slb configuration menu.')
slbCurCfgGrace = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGrace.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGrace.setDescription('Enable or disable graceful server failure. It allows to keep the connection to the failure real servers when set to enabled(1).')
slbNewCfgGrace = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGrace.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGrace.setDescription('Enable or disable graceful server failure. It allows to keep the connection to the failure real servers when set to enabled(1).')
slbCurCfgWapTpcp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 63, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWapTpcp.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgWapTpcp.setDescription('Enable or disable WAP load balancing. ')
slbNewCfgWapTpcp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 63, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWapTpcp.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgWapTpcp.setDescription('Enable or disable WAP load balancing. ')
slbCurCfgWapDebug = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 63, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWapDebug.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgWapDebug.setDescription('WAP Debug level.')
slbNewCfgWapDebug = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 63, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWapDebug.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgWapDebug.setDescription('WAP Debug level.')
slbPeerTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbPeerTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: slbPeerTableMaxSize.setDescription('The maximum number of entries in SLB Peer Table.')
slbCurCfgPeerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 32), )
if mibBuilder.loadTexts: slbCurCfgPeerTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPeerTable.setDescription('The table of Synch Peer Switch configuration in the current_config.')
slbCurCfgPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 32, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgPeerIndex"))
if mibBuilder.loadTexts: slbCurCfgPeerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPeerEntry.setDescription('Information about Synch Peer Switch configuration.')
slbCurCfgPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 32, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPeerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPeerIndex.setDescription('The index for synch peer switchs.')
slbCurCfgPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 32, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPeerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPeerIpAddr.setDescription('The IP address of the peer switch.')
slbCurCfgPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 32, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPeerState.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPeerState.setDescription('Enable or disable the peer switch.')
slbNewCfgPeerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33), )
if mibBuilder.loadTexts: slbNewCfgPeerTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPeerTable.setDescription('The table of Synch Peer Switch configuration in the new_config.')
slbNewCfgPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgPeerIndex"))
if mibBuilder.loadTexts: slbNewCfgPeerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPeerEntry.setDescription('Information about synch peer switch configuration.')
slbNewCfgPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgPeerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPeerIndex.setDescription('The index number for synch peer switchs.')
slbNewCfgPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPeerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPeerIpAddr.setDescription('The IP address of the peer switch.')
slbNewCfgPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPeerState.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPeerState.setDescription('Enable or disable the peer switch.')
slbNewCfgPeerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPeerDelete.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPeerDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
slbCurCfgSyncFilt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncFilt.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgSyncFilt.setDescription('Enable or disable synch filter configuration.')
slbNewCfgSyncFilt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncFilt.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgSyncFilt.setDescription('Enable or disable synch filter configuration.')
slbCurCfgSyncPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgSyncPort.setDescription('Enable or disable synch port configuration.')
slbNewCfgSyncPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgSyncPort.setDescription('Enable or disable synch port configuration.')
slbCurCfgSyncVrrp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncVrrp.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgSyncVrrp.setDescription('Enable or disable synch VRRP Priorities.')
slbNewCfgSyncVrrp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncVrrp.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgSyncVrrp.setDescription('Enable or disable synch VRRP Priorities.')
slbCurCfgSyncPip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncPip.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgSyncPip.setDescription('Enable or disable synch proxy IP addresses.')
slbNewCfgSyncPip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncPip.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgSyncPip.setDescription('Enable or disable synch proxy IP addresses.')
slbCurCfgSyncSfo = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncSfo.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgSyncSfo.setDescription('Enable or disable synch stateful failover.')
slbNewCfgSyncSfo = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncSfo.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgSyncSfo.setDescription('Enable or disable synch stateful failover.')
slbCurCfgSyncSfoUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncSfoUpdatePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgSyncSfoUpdatePeriod.setDescription('The stateful failover update period in seconds.')
slbNewCfgSyncSfoUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncSfoUpdatePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgSyncSfoUpdatePeriod.setDescription('The stateful failover update period in seconds.')
slbCurCfgSyncBwm = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncBwm.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgSyncBwm.setDescription('Enable or disable syncing BWM configuration.')
slbNewCfgSyncBwm = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncBwm.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgSyncBwm.setDescription('Enable or disable syncing BWM configuration.')
slbCurCfgVirtMatrixArch = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtMatrixArch.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtMatrixArch.setDescription('Enable or disable Virtual Matrix Architecture.')
slbNewCfgVirtMatrixArch = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtMatrixArch.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtMatrixArch.setDescription('Enable or disable Virtual Matrix Architecture.')
slbCurCfgFastage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFastage.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgFastage.setDescription('Session table fast-age (1 sec) period bit shift.')
slbNewCfgFastage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgFastage.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgFastage.setDescription('Session table fast-age (1 sec) period bit shift.')
slbCurCfgSlowage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSlowage.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgSlowage.setDescription('Session table slow-age (2 min) period bit shift.')
slbNewCfgSlowage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSlowage.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgSlowage.setDescription('Session table slow-age (2 min) period bit shift.')
slbCurCfgTpcp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgTpcp.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgTpcp.setDescription('Enable or disable Transparent Proxy Cache Protocol.')
slbNewCfgTpcp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgTpcp.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgTpcp.setDescription('Enable or disable Transparent Proxy Cache Protocol.')
slbCurCfgMetricInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgMetricInterval.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgMetricInterval.setDescription('The interval of response and bandwidth metric updates.')
slbNewCfgMetricInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgMetricInterval.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgMetricInterval.setDescription('The interval of response and bandwidth metric updates.')
slbCurCfgRealGroupIdslb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealGroupIdslb.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealGroupIdslb.setDescription('The real server group number for IDSLB.')
slbNewCfgRealGroupIdslb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealGroupIdslb.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealGroupIdslb.setDescription('The real server group number for IDSLB.')
slbCurCfgLdapVersion = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version2", 1), ("version3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgLdapVersion.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgLdapVersion.setDescription('The version number for LDAP.')
slbNewCfgLdapVersion = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version2", 1), ("version3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgLdapVersion.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgLdapVersion.setDescription('The Version number of LDAP.')
slbCurCfgIsdInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgIsdInterval.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgIsdInterval.setDescription('The interval of ISD health checks.')
slbNewCfgIsdInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgIsdInterval.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgIsdInterval.setDescription('The interval of ISD health checks.')
slbCurCfgIsdRetry = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgIsdRetry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgIsdRetry.setDescription('The number of failed attemps to declare ISD down.')
slbNewCfgIsdRetry = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgIsdRetry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgIsdRetry.setDescription('The number of failed attemps to declare ISD down.')
slbCurCfgIsdRestr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgIsdRestr.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgIsdRestr.setDescription('The number of successful attemps to declare ISD up.')
slbNewCfgIsdRestr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgIsdRestr.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgIsdRestr.setDescription('The number of successful attemps to declare ISD up.')
slbCurCfgIsdNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgIsdNumber.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgIsdNumber.setDescription('The number of real servers used for ISDs.')
slbNewCfgIsdNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgIsdNumber.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgIsdNumber.setDescription('The number of real servers used for ISDs.')
slbCurCfgTcpTimeWindow = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgTcpTimeWindow.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgTcpTimeWindow.setDescription('The time window for TCP rate limiting.')
slbNewCfgTcpTimeWindow = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgTcpTimeWindow.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgTcpTimeWindow.setDescription('The time window for TCP rate limiting.')
slbCurCfgTcpHoldDuration = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgTcpHoldDuration.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgTcpHoldDuration.setDescription('The hold down duration for TCP rate limiting.')
slbNewCfgTcpHoldDuration = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgTcpHoldDuration.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgTcpHoldDuration.setDescription('The hold down duration for TCP rate limiting.')
slbCurCfgAllowHttpHc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgAllowHttpHc.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgAllowHttpHc.setDescription('Enable or disable allow HTTP health check on any port. If disabled the non-HTTP virtual services will use TCP Health Checks, if enabled the HTTP Content Health Check will be sent to any port except HTTPS (443) if properly configured.')
slbNewCfgAllowHttpHc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgAllowHttpHc.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgAllowHttpHc.setDescription('Enable or disable allow HTTP health check on any port. If disabled the non-HTTP virtual services will use TCP Health Checks, if enabled the HTTP Content Health Check will be sent to any port except HTTPS (443) if properly configured.')
slbCurCfgFailOverTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1), )
if mibBuilder.loadTexts: slbCurCfgFailOverTable.setStatus('obsolete')
if mibBuilder.loadTexts: slbCurCfgFailOverTable.setDescription('The table of current switch fail-over configuration.')
slbCurCfgFailOverTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgFailOverIndex"))
if mibBuilder.loadTexts: slbCurCfgFailOverTblEntry.setStatus('obsolete')
if mibBuilder.loadTexts: slbCurCfgFailOverTblEntry.setDescription('A row in the current switch fail-over configuration table.')
slbCurCfgFailOverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverIndex.setStatus('obsolete')
if mibBuilder.loadTexts: slbCurCfgFailOverIndex.setDescription('The index of current switch fail-over configuration table.')
slbCurCfgFailOverPrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverPrimaryIp.setStatus('obsolete')
if mibBuilder.loadTexts: slbCurCfgFailOverPrimaryIp.setDescription('The IP address of the Primary switch.')
slbCurCfgFailOverSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverSecondaryIp.setStatus('obsolete')
if mibBuilder.loadTexts: slbCurCfgFailOverSecondaryIp.setDescription('The IP address of the Secondary switch.')
slbCurCfgFailOverSilenceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverSilenceInterval.setStatus('obsolete')
if mibBuilder.loadTexts: slbCurCfgFailOverSilenceInterval.setDescription('Number of seconds before a silent peer is assumed down.')
slbCurCfgFailOverState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverState.setStatus('obsolete')
if mibBuilder.loadTexts: slbCurCfgFailOverState.setDescription('Enable or disable slb switch failover feature.')
slbCurCfgFailOverRouteSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverRouteSupply.setStatus('obsolete')
if mibBuilder.loadTexts: slbCurCfgFailOverRouteSupply.setDescription('Enable or disable to supply network routes update when switch is a standby switch.')
slbNewCfgFailOverTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2), )
if mibBuilder.loadTexts: slbNewCfgFailOverTable.setStatus('obsolete')
if mibBuilder.loadTexts: slbNewCfgFailOverTable.setDescription('The table of new switch fail-over configuration.')
slbNewCfgFailOverTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgFailOverIndex"))
if mibBuilder.loadTexts: slbNewCfgFailOverTblEntry.setStatus('obsolete')
if mibBuilder.loadTexts: slbNewCfgFailOverTblEntry.setDescription('A row in the new switch fail-over configuration table.')
slbNewCfgFailOverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgFailOverIndex.setStatus('obsolete')
if mibBuilder.loadTexts: slbNewCfgFailOverIndex.setDescription('The index of new switch fail-over configuration table.')
slbNewCfgFailOverPrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgFailOverPrimaryIp.setStatus('obsolete')
if mibBuilder.loadTexts: slbNewCfgFailOverPrimaryIp.setDescription('The IP address of the Primary switch.')
slbNewCfgFailOverSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgFailOverSecondaryIp.setStatus('obsolete')
if mibBuilder.loadTexts: slbNewCfgFailOverSecondaryIp.setDescription('The IP address of the Secondary switch.')
slbNewCfgFailOverSilenceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgFailOverSilenceInterval.setStatus('obsolete')
if mibBuilder.loadTexts: slbNewCfgFailOverSilenceInterval.setDescription('Number of seconds before a silent peer is assumed down.')
slbNewCfgFailOverState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgFailOverState.setStatus('obsolete')
if mibBuilder.loadTexts: slbNewCfgFailOverState.setDescription('Enable or disable slb switch failover feature.')
slbNewCfgFailOverRouteSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgFailOverRouteSupply.setStatus('obsolete')
if mibBuilder.loadTexts: slbNewCfgFailOverRouteSupply.setDescription('Enable or disable to supply network routes update when switch is a standby switch.')
slbCurCfgGlobalControl = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGlobalControl.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGlobalControl.setDescription('The global state of Server Load Balancing.')
slbNewCfgGlobalControl = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGlobalControl.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGlobalControl.setDescription('The global state of Server Load Balancing.')
slbCurCfgUrlExpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 1), )
if mibBuilder.loadTexts: slbCurCfgUrlExpTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlExpTable.setDescription('The table of URL expressions in the current_config.')
slbCurCfgUrlExpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgUrlExpIndex"))
if mibBuilder.loadTexts: slbCurCfgUrlExpTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlExpTableEntry.setDescription('Information about a expression for URL parsing.')
slbCurCfgUrlExpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlExpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlExpIndex.setDescription('The URL expressions table index.')
slbCurCfgUrlExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlExpression.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlExpression.setDescription('The expressions for URL parsing.')
slbNewCfgUrlExpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 2), )
if mibBuilder.loadTexts: slbNewCfgUrlExpTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlExpTable.setDescription('The table of URL expressions in the new_config.')
slbNewCfgUrlExpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 2, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgUrlExpIndex"))
if mibBuilder.loadTexts: slbNewCfgUrlExpTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlExpTableEntry.setDescription('Information about a expression for URL parsing.')
slbNewCfgUrlExpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlExpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlExpIndex.setDescription('The URL expressions table index.')
slbNewCfgUrlExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlExpression.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlExpression.setDescription('The expressions for URL parsing.')
slbNewCfgUrlExpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlExpDelete.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlExpDelete.setDescription('Action object to delete an URL expression. When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than delete(2) has no effect on the state of the row.')
slbCurCfgUrlRedirNonGetOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirNonGetOrigSrv.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlRedirNonGetOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the origin server when HTTP non-GETs are detected. enabled(1) - Allow redirect traffic to the origin server disabled(2)- redirect to a group of servers')
slbNewCfgUrlRedirNonGetOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirNonGetOrigSrv.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlRedirNonGetOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the origin server when HTTP non-GETs are detected. enabled(1) - Allow redirect traffic to the origin server disabled(2)- redirect to a group of servers')
slbCurCfgUrlRedirCookieOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirCookieOrigSrv.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlRedirCookieOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the origin server when user cookies are detected. enabled(1) - Allow redirect traffic to the origin server disabled(2)- redirect to a group of servers')
slbNewCfgUrlRedirCookieOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirCookieOrigSrv.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlRedirCookieOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the origin server when user cookies are detected. enabled(1) - Allow redirect traffic to the origin server disabled(2)- redirect to a group of servers')
slbCurCfgUrlRedirNoCacheOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirNoCacheOrigSrv.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlRedirNoCacheOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the origin server when no-cache header are detected. enabled(1) - Allow redirect traffic to the origin server disabled(2)- redirect to a group of servers')
slbNewCfgUrlRedirNoCacheOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirNoCacheOrigSrv.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlRedirNoCacheOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the origin server when no-cache header are detected. enabled(1) - Allow redirect traffic to the origin server disabled(2)- redirect to a group of servers')
slbCurCfgUrlRedirUriHashLength = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirUriHashLength.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlRedirUriHashLength.setDescription('Specify the number of bytes in the URI will be used to hash onto server')
slbNewCfgUrlRedirUriHashLength = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirUriHashLength.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlRedirUriHashLength.setDescription('Specify the number of bytes in the URI will be used to hash onto server')
slbCurCfgUrlRedirHeader = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeader.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeader.setDescription('This is for controlling if the switch should redirect packet to the cache server based on HTTP header. enabled(1) - Redirect web traffic based on HTTP header disabled(2)- Redirect web traffic based on URI')
slbNewCfgUrlRedirHeader = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeader.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeader.setDescription('This is for controlling if the switch should redirect packet to the cache server based on HTTP header. enabled(1) - Redirect web traffic based on HTTP header disabled(2)- Redirect web traffic based on URI')
slbCurCfgUrlRedirHeaderName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeaderName.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeaderName.setDescription('The HTTP header name')
slbNewCfgUrlRedirHeaderName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeaderName.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeaderName.setDescription('The HTTP header name')
slbUrlExpTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbUrlExpTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: slbUrlExpTableMaxSize.setDescription('The maximum number of entries in SLB Url Expression table.')
slbCurCfgUrlLbPathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 1), )
if mibBuilder.loadTexts: slbCurCfgUrlLbPathTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathTable.setDescription('The table of URL path for URL load balancing in the current_config.')
slbCurCfgUrlLbPathTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgUrlLbPathIndex"))
if mibBuilder.loadTexts: slbCurCfgUrlLbPathTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathTableEntry.setDescription('Information about an URL path for URL load balancing.')
slbCurCfgUrlLbPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathIndex.setDescription('The URL path table index.')
slbCurCfgUrlLbPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathString.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathString.setDescription('The URL path for URL load balancing.')
slbCurCfgUrlLbBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlLbBwmContract.setDescription('The BW contract for the path.')
slbNewCfgUrlLbPathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2), )
if mibBuilder.loadTexts: slbNewCfgUrlLbPathTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathTable.setDescription('The table of URL path for URL load balancing in the new_config.')
slbNewCfgUrlLbPathTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgUrlLbPathIndex"))
if mibBuilder.loadTexts: slbNewCfgUrlLbPathTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathTableEntry.setDescription('Information about an URL path for URL load balancing.')
slbNewCfgUrlLbPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathIndex.setDescription('The URL path table index.')
slbNewCfgUrlLbPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathString.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathString.setDescription('The URL path for URL load balancing.')
slbNewCfgUrlLbBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlLbBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlLbBwmContract.setDescription('The BW contract for the load path.')
slbNewCfgUrlLbPathDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathDelete.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathDelete.setDescription('Action object to delete an URL Path. When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than delete(2) has no effect on the state of the row.')
slbCurCfgUrlLbErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbErrorMsg.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlLbErrorMsg.setDescription("Customize error message to send back to client when switch cannot bind client's request to servers.")
slbNewCfgUrlLbErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlLbErrorMsg.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlLbErrorMsg.setDescription("Customize error message to send back to client when switch cannot bind client's request to servers.")
slbUrlLbPathTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbUrlLbPathTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: slbUrlLbPathTableMaxSize.setDescription('The maximum number of entries in SLB URL load balance table.')
rtspUrlExpTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspUrlExpTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: rtspUrlExpTableMaxSize.setDescription('The maximum number of entries in RTSP URL expression table.')
rtspCurCfgUrlExpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3, 2), )
if mibBuilder.loadTexts: rtspCurCfgUrlExpTable.setStatus('mandatory')
if mibBuilder.loadTexts: rtspCurCfgUrlExpTable.setDescription('The table of RTSP URL expressions.')
rtspCurCfgUrlExpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3, 2, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "rtspCurCfgUrlExpIndex"))
if mibBuilder.loadTexts: rtspCurCfgUrlExpTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rtspCurCfgUrlExpTableEntry.setDescription('Information about a expression in the RTSP URL Redirection table.')
rtspCurCfgUrlExpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspCurCfgUrlExpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rtspCurCfgUrlExpIndex.setDescription('The RTSP URL expression table index.')
rtspCurCfgUrlExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspCurCfgUrlExpression.setStatus('mandatory')
if mibBuilder.loadTexts: rtspCurCfgUrlExpression.setDescription('The expressions for RTSP URL redirection.')
rtspNewCfgUrlExpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3, 3), )
if mibBuilder.loadTexts: rtspNewCfgUrlExpTable.setStatus('mandatory')
if mibBuilder.loadTexts: rtspNewCfgUrlExpTable.setDescription('The table of RTSP URL expressions.')
rtspNewCfgUrlExpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3, 3, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "rtspNewCfgUrlExpIndex"))
if mibBuilder.loadTexts: rtspNewCfgUrlExpTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rtspNewCfgUrlExpTableEntry.setDescription('Information about a expression in the RTSP URL Redirection table.')
rtspNewCfgUrlExpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspNewCfgUrlExpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rtspNewCfgUrlExpIndex.setDescription('The RTSP URL expression table index.')
rtspNewCfgUrlExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtspNewCfgUrlExpression.setStatus('mandatory')
if mibBuilder.loadTexts: rtspNewCfgUrlExpression.setDescription('The expression for RTSP URL redirection.')
rtspNewCfgUrlExpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtspNewCfgUrlExpDelete.setStatus('mandatory')
if mibBuilder.loadTexts: rtspNewCfgUrlExpDelete.setDescription('Action object to delete an RTSP URL expression. When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than delete(2) has no effect on the state of the row.')
slbCurCfgRurlGenDeny = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRurlGenDeny.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRurlGenDeny.setDescription('This is for controlling if the switch should deny packets from passing through to L2 in the event that the switch runs out of buffer resources.')
slbNewCfgRurlGenDeny = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRurlGenDeny.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRurlGenDeny.setDescription('This is for controlling if the switch should deny packets from passing through to L2 in the event that the switch runs out of buffer resources.')
slbRurlDportTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRurlDportTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: slbRurlDportTableMaxSize.setDescription('The maximum number of entries in RURL destination port table.')
slbCurCfgRurlDportTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 3), )
if mibBuilder.loadTexts: slbCurCfgRurlDportTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRurlDportTable.setDescription('The table of RURL destination port ranges in current_config.')
slbCurCfgRurlDportTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 3, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgRurlDportIndex"))
if mibBuilder.loadTexts: slbCurCfgRurlDportTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRurlDportTableEntry.setDescription('Information about a destination port range for RURL parsing.')
slbCurCfgRurlDportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRurlDportIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRurlDportIndex.setDescription('The RURL destination port table index.')
slbCurCfgRurlDportLowPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRurlDportLowPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRurlDportLowPort.setDescription('The first destination port in the port range.')
slbCurCfgRurlDportHighPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRurlDportHighPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRurlDportHighPort.setDescription('The last destination port in the port range.')
slbNewCfgRurlDportTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 4), )
if mibBuilder.loadTexts: slbNewCfgRurlDportTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRurlDportTable.setDescription('The table of RURL destination port ranges in new_config.')
slbNewCfgRurlDportTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 4, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgRurlDportIndex"))
if mibBuilder.loadTexts: slbNewCfgRurlDportTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRurlDportTableEntry.setDescription('Information about a destination port range for RURL parsing.')
slbNewCfgRurlDportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRurlDportIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRurlDportIndex.setDescription('The RURL destination port table index.')
slbNewCfgRurlDportLowPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRurlDportLowPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRurlDportLowPort.setDescription('The first destination port in the port range.')
slbNewCfgRurlDportHighPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRurlDportHighPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRurlDportHighPort.setDescription('The last destination port in the port range.')
slbNewCfgRurlDportDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRurlDportDelete.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRurlDportDelete.setDescription('Action object to delete an destination port/range. When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than delete(2) has no effect on the state of the row.')
slbCurCfgWaphcWSPPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcWSPPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgWaphcWSPPort.setDescription('The WSP port number to health check.')
slbNewCfgWaphcWSPPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcWSPPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgWaphcWSPPort.setDescription('The WSP port number to health check.')
slbCurCfgWaphcOffset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcOffset.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgWaphcOffset.setDescription('The offset in received WSP packet.')
slbNewCfgWaphcOffset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcOffset.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgWaphcOffset.setDescription('The offset in received WSP packet.')
slbCurCfgWaphcSndContent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcSndContent.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgWaphcSndContent.setDescription('The content to be sent to the WAP gateway.')
slbNewCfgWaphcSndContent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcSndContent.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgWaphcSndContent.setDescription('The content to be sent to the WAP gateway.')
slbCurCfgWaphcRcvContent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcRcvContent.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgWaphcRcvContent.setDescription('The content to be received from the WAP gateway.')
slbNewCfgWaphcRcvContent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcRcvContent.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgWaphcRcvContent.setDescription('The content to be received from the WAP gateway.')
slbCurCfgWaphcWTLSPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcWTLSPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgWaphcWTLSPort.setDescription('The WTLS port number to health check.')
slbNewCfgWaphcWTLSPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcWTLSPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgWaphcWTLSPort.setDescription('The WTLS port number to health check.')
synAttackCurCfgInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 82, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: synAttackCurCfgInterval.setStatus('mandatory')
if mibBuilder.loadTexts: synAttackCurCfgInterval.setDescription('The interval specified in seconds determines how frequently the switch checks for SYN attacks.')
synAttackNewCfgInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 82, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: synAttackNewCfgInterval.setStatus('mandatory')
if mibBuilder.loadTexts: synAttackNewCfgInterval.setDescription('The interval specified in seconds determines how frequently the switch checks for SYN attacks.')
synAttackCurCfgThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 82, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: synAttackCurCfgThreshhold.setStatus('mandatory')
if mibBuilder.loadTexts: synAttackCurCfgThreshhold.setDescription('The threshhold indicating the number of new half-open sessions per second.')
synAttackNewCfgThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 82, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: synAttackNewCfgThreshhold.setStatus('mandatory')
if mibBuilder.loadTexts: synAttackNewCfgThreshhold.setDescription('The threshhold indicating the number of new half-open sessions per second.')
fltCfgTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCfgTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: fltCfgTableMaxSize.setDescription('The maximum number of filtering table entries.')
fltCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2), )
if mibBuilder.loadTexts: fltCurCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgTable.setDescription('The filtering table in the current configuration block.')
fltCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "fltCurCfgIndx"))
if mibBuilder.loadTexts: fltCurCfgTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgTableEntry.setDescription('A row in the filtering table.')
fltCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgIndx.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgIndx.setDescription('The filteriang table index.')
fltCurCfgSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgSrcIp.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgSrcIp.setDescription('The source IP address to be filtered.')
fltCurCfgSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgSrcIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgSrcIpMask.setDescription('The source IP sub-net mask for filtering.')
fltCurCfgDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgDstIp.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgDstIp.setDescription('The destination IP address to be filtered.')
fltCurCfgDstIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgDstIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgDstIpMask.setDescription('The destination IP sub-net mask for filtering.')
fltCurCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgProtocol.setDescription('The protocol to be filtered.')
fltCurCfgRangeHighSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRangeHighSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgRangeHighSrcPort.setDescription("The higher source TCP/UDP port number to be filtered. It applies only when protocol defined in fltCurCfgProtocol is UDP or TCP. '0' means no filtering.")
fltCurCfgRangeLowSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRangeLowSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgRangeLowSrcPort.setDescription("The lower source TCP/UDP port number to be filtered. It applies only when protocol defined in fltCurCfgProtocol is UDP or TCP. '0' means no filtering.")
fltCurCfgRangeLowDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRangeLowDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgRangeLowDstPort.setDescription("The lower destination TCP/UDP port number to be filtered. It applies only when protocol defined in fltCurCfgProtocol is UDP or TCP. '0' means no filtering.")
fltCurCfgRangeHighDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRangeHighDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgRangeHighDstPort.setDescription("The higher destination TCP/UDP port number to be filtered. It applies only when protocol defined in fltCurCfgProtocol is UDP or TCP. '0' means no filtering.")
fltCurCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2), ("redirect", 3), ("nat", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAction.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAction.setDescription('The action for the filtering rule.')
fltCurCfgRedirPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRedirPort.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgRedirPort.setDescription('The real server port number used for redirection.')
fltCurCfgRedirGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRedirGroup.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgRedirGroup.setDescription('The real server group to be redirected to.')
fltCurCfgLog = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgLog.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgLog.setDescription('Enable or disable logging.')
fltCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgState.setDescription('The state of this filtering rule.')
fltCurCfgNat = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("destination-address", 1), ("source-address", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgNat.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgNat.setDescription('The selection of destination or source for network address translation.')
fltCurCfgCache = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgCache.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgCache.setDescription('Enable or disable caching sessions that match filter.')
fltCurCfgInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invert-on", 1), ("invert-off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgInvert.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgInvert.setDescription('Turn the invert logic on or off for the filter entry.')
fltCurCfgClientProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgClientProxy.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgClientProxy.setDescription('Enable or disable client proxy.')
fltCurCfgTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgTcpAck.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgTcpAck.setDescription('Enable or disable filtering on matching TCP ACK and RST flag.')
fltCurCfgUrlRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgUrlRedir.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgUrlRedir.setDescription('Enable or disable URL redirection. The URL expressions are defined in slbCurCfgUrlTable.')
fltCurCfgSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 22), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgSrcMac.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgSrcMac.setDescription('The source MAC address to be filtered.')
fltCurCfgDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 23), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgDstMac.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgDstMac.setDescription('The Destination MAC address to be filtered.')
fltCurCfgFtpNatActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgFtpNatActive.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgFtpNatActive.setDescription('Enable or disable FTP NAT for active ftp only.')
fltCurCfgAclTcpUrg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpUrg.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclTcpUrg.setDescription('Enable or disable TCP URG packet.')
fltCurCfgAclTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpAck.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclTcpAck.setDescription('Enable or disable TCP ACK packet.')
fltCurCfgAclTcpPsh = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpPsh.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclTcpPsh.setDescription('Enable or disable TCP PSH packet.')
fltCurCfgAclTcpRst = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpRst.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclTcpRst.setDescription('Enable or disable TCP RST packet.')
fltCurCfgAclTcpSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpSyn.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclTcpSyn.setDescription('Enable or disable TCP SYN packet.')
fltCurCfgAclTcpFin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpFin.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclTcpFin.setDescription('Enable or disable TCP FIN packet.')
fltCurCfgAclIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIcmp.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclIcmp.setDescription("ICMP type to be filtered. A ICMP type of 255 indicates 'any'")
fltCurCfgAclIpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIpOption.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclIpOption.setDescription('Enable or disable IP option matching.')
fltCurCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgBwmContract.setDescription('Filt default BW contract number.')
fltCurCfgAclIpTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIpTos.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclIpTos.setDescription('The IP TOS value to be filtered.')
fltCurCfgAclIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIpTosMask.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclIpTosMask.setDescription('The IP TOS mask for filtering.')
fltCurCfgAclIpTosNew = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIpTosNew.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclIpTosNew.setDescription('The new IP TOS value to over-write when filtering fired.')
fltCurCfgFwlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgFwlb.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgFwlb.setDescription('Enable or disable filtering on firewall redirect hash method.')
fltCurCfgNatTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgNatTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgNatTimeout.setDescription('The NAT session timeout. The timeout value should be an even number between (4..30)')
fltCurCfgRurl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRurl.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgRurl.setDescription('Enable or disable RURL parsing.')
fltCurCfgLinklb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgLinklb.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgLinklb.setDescription('Enable or disable WAN link load balancing.')
fltCurCfgWapRadiusSnoop = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgWapRadiusSnoop.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgWapRadiusSnoop.setDescription('Enable or disable WAP RADIUS snooping.')
fltCurCfgSrcIpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgSrcIpMac.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgSrcIpMac.setDescription('Set a flag indicating whether filtering should be based on the source IP address or the source MAC address field.')
fltCurCfgDstIpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgDstIpMac.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgDstIpMac.setDescription('Set a flag indicating whether filtering should be based on the destination IP address or the destination MAC address field.')
fltCurCfgIdslbHash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sip", 1), ("dip", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgIdslbHash.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgIdslbHash.setDescription('Set hash parameter for intrusion detection server load balancing.')
fltCurCfgVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgVlan.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgVlan.setDescription('Set the VLAN assoicated with the filter.')
fltCurCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgName.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgName.setDescription('The name of the filter.')
fltCurCfgTcpRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgTcpRateLimit.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgTcpRateLimit.setDescription('Enable or disable TCP connection rate limiting.')
fltCurCfgTcpRateMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgTcpRateMaxConn.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgTcpRateMaxConn.setDescription('Set maximum connections (number of connections in units of 10) for TCP connection rate limiting.')
fltCurCfgHash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("sip", 2), ("dip", 3), ("both", 4), ("sipsport", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgHash.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgHash.setDescription('Set hash parameter for the filter.')
fltCurCfgNasa = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgNasa.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgNasa.setDescription('Enable or disable NASA redirect to ISD.')
fltCurCfgLayer7DenyState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgLayer7DenyState.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgLayer7DenyState.setDescription('Enable or disable layer 7 deny filtering.')
fltCurCfgLayer7DenyUrlBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 52), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgLayer7DenyUrlBmap.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgLayer7DenyUrlBmap.setDescription('The URL strings selected for Layer 7 deny filters. The selected URL strings are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ URL Path 9 || || || ||___ URL Path 8 || |____ URL Path 7 || . . . ||_________ URL Path 2 |__________ URL Path 1 where x : 1 - The represented URL string is selected 0 - The represented URL string is not selected')
fltNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3), )
if mibBuilder.loadTexts: fltNewCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgTable.setDescription('The filtering table in the new configuration block.')
fltNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "fltNewCfgIndx"))
if mibBuilder.loadTexts: fltNewCfgTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgTableEntry.setDescription('A row in the filtering table.')
fltNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgIndx.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgIndx.setDescription('The filtering table index.')
fltNewCfgSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgSrcIp.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgSrcIp.setDescription('The source IP address to be filtered.')
fltNewCfgSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgSrcIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgSrcIpMask.setDescription('The source IP sub-net mask for filtering.')
fltNewCfgDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgDstIp.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgDstIp.setDescription('The destination IP address to be filtered.')
fltNewCfgDstIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgDstIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgDstIpMask.setDescription('The destination IP sub-net mask for filtering.')
fltNewCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgProtocol.setDescription('The protocol to be filtered.')
fltNewCfgRangeHighSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRangeHighSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgRangeHighSrcPort.setDescription("The higher source TCP/UDP port number to be filtered. It applies only when protocol defined in fltNewCfgProtocol is UDP or TCP. '0' means no filtering.")
fltNewCfgRangeLowSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRangeLowSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgRangeLowSrcPort.setDescription("The lower source TCP/UDP port number to be filtered. It applies only when protocol defined in fltNewCfgProtocol is UDP or TCP. '0' means no filtering.")
fltNewCfgRangeLowDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRangeLowDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgRangeLowDstPort.setDescription("The lower destination TCP/UDP port number to be filtered. It applies only when protocol defined in fltNewCfgProtocol is UDP or TCP. '0' means no filtering.")
fltNewCfgRangeHighDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRangeHighDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgRangeHighDstPort.setDescription("The higher destination TCP/UDP port number to be filtered. It applies only when protocol defined in fltNewCfgProtocol is UDP or TCP. '0' means no filtering.")
fltNewCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2), ("redirect", 3), ("nat", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAction.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAction.setDescription('The action for the filtering rule.')
fltNewCfgRedirPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRedirPort.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgRedirPort.setDescription('The real server port number used for redirection.')
fltNewCfgRedirGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRedirGroup.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgRedirGroup.setDescription('The real server group to be redirected to.')
fltNewCfgLog = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgLog.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgLog.setDescription('Enable or disable logging.')
fltNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgState.setDescription('The state of this filtering rule.')
fltNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgDelete.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
fltNewCfgNat = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("destination-address", 1), ("source-address", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgNat.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgNat.setDescription('The selection of destination or source for network address translation.')
fltNewCfgCache = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgCache.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgCache.setDescription('Enable or disable caching sessions that match filter.')
fltNewCfgInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invert-on", 1), ("invert-off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgInvert.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgInvert.setDescription('Turn the invert logic on or off for the filter entry.')
fltNewCfgClientProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgClientProxy.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgClientProxy.setDescription('Enable or disable client proxy.')
fltNewCfgTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgTcpAck.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgTcpAck.setDescription('Enable or disable filtering on matching TCP ACK and RST flag.')
fltNewCfgUrlRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgUrlRedir.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgUrlRedir.setDescription('Enable or disable URL redirection. The URL expressions are defined in slbNewCfgUrlTable.')
fltNewCfgSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 23), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgSrcMac.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgSrcMac.setDescription('The source MAC address to be filtered.')
fltNewCfgDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 24), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgDstMac.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgDstMac.setDescription('The Destination MAC address to be filtered.')
fltNewCfgFtpNatActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgFtpNatActive.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgFtpNatActive.setDescription('Enable or disable FTP NAT for active ftp.')
fltNewCfgAclTcpUrg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpUrg.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclTcpUrg.setDescription('Enable or disable TCP URG packet.')
fltNewCfgAclTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpAck.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclTcpAck.setDescription('Enable or disable TCP ACK packet.')
fltNewCfgAclTcpPsh = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpPsh.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclTcpPsh.setDescription('Enable or disable TCP PSH packet.')
fltNewCfgAclTcpRst = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpRst.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclTcpRst.setDescription('Enable or disable TCP RST packet.')
fltNewCfgAclTcpSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpSyn.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclTcpSyn.setDescription('Enable or disable TCP SYN packet.')
fltNewCfgAclTcpFin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpFin.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclTcpFin.setDescription('Enable or disable TCP FIN packet.')
fltNewCfgAclIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclIcmp.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclIcmp.setDescription("ICMP type to be filtered. A ICMP type of 255 indicates 'any'")
fltNewCfgAclIpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclIpOption.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclIpOption.setDescription('Enable or disable IP option matching.')
fltNewCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgBwmContract.setDescription('Filt default BW contract number.')
fltNewCfgAclIpTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclIpTos.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclIpTos.setDescription('The IP TOS value to be filtered.')
fltNewCfgAclIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclIpTosMask.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclIpTosMask.setDescription('The IP TOS mask for filtering.')
fltNewCfgAclIpTosNew = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclIpTosNew.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclIpTosNew.setDescription('The new IP TOS value to over-write when filtering fired.')
fltNewCfgFwlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgFwlb.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgFwlb.setDescription('Enable or disable filtering on firewall redirect hash method.')
fltNewCfgNatTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgNatTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgNatTimeout.setDescription('The NAT session timeout. The timeout value should be an even number between (4..30)')
fltNewCfgRurl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRurl.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgRurl.setDescription('Enable or disable RURL parsing.')
fltNewCfgLinklb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgLinklb.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgLinklb.setDescription('Enable or disable WAN link load balancing.')
fltNewCfgWapRadiusSnoop = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgWapRadiusSnoop.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgWapRadiusSnoop.setDescription('Enable or disable WAP RADIUS snooping.')
fltNewCfgSrcIpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgSrcIpMac.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgSrcIpMac.setDescription('Set a flag indicating whether filtering should be based on the source IP address or the source MAC address field.')
fltNewCfgDstIpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgDstIpMac.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgDstIpMac.setDescription('Set a flag indicating whether filtering should be based on the destination IP address or the destination MAC address field.')
fltNewCfgIdslbHash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sip", 1), ("dip", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgIdslbHash.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgIdslbHash.setDescription('Set hash parameter for intrusion detection server load balancing.')
fltNewCfgVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgVlan.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgVlan.setDescription('Set the VLAN assoicated with the filter.')
fltNewCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgName.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgName.setDescription('The name of the filter.')
fltNewCfgTcpRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgTcpRateLimit.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgTcpRateLimit.setDescription('Enable or disable TCP connection rate limiting.')
fltNewCfgTcpRateMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgTcpRateMaxConn.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgTcpRateMaxConn.setDescription('Set maximum connections (number of connections in units of 10) for TCP connection rate limiting.')
fltNewCfgHash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("sip", 2), ("dip", 3), ("both", 4), ("sipsport", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgHash.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgHash.setDescription('Set hash parameter for the filter.')
fltNewCfgNasa = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgNasa.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgNasa.setDescription('Enable or disable NASA redirect to ISD.')
fltNewCfgLayer7DenyState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgLayer7DenyState.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgLayer7DenyState.setDescription('Enable or disable layer 7 deny filtering.')
fltNewCfgLayer7DenyUrlBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 53), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgLayer7DenyUrlBmap.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgLayer7DenyUrlBmap.setDescription('The URL strings selected for Layer 7 deny filters. The selected URL strings are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ URL Path 9 || || || ||___ URL Path 8 || |____ URL Path 7 || . . . ||_________ URL Path 2 |__________ URL Path 1 where x : 1 - The represented URL string is selected 0 - The represented URL string is not selected')
fltNewCfgLayer7DenyAddUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgLayer7DenyAddUrl.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgLayer7DenyAddUrl.setDescription('The URL Path (slbCurCfgUrlLbPathIndex) to be added to the Layer 7 deny filter. A zero is returned when read.')
fltNewCfgLayer7DenyRemUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgLayer7DenyRemUrl.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgLayer7DenyRemUrl.setDescription('The URL Path (slbCurCfgUrlLbPathIndex) to be removed from the Layer 7 deny filter. A zero is returned when read.')
fltCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 4), )
if mibBuilder.loadTexts: fltCurCfgPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgPortTable.setDescription('The filtering port table in the current configuration block.')
fltCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 4, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "fltCurCfgPortIndx"))
if mibBuilder.loadTexts: fltCurCfgPortTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgPortTableEntry.setDescription('A row in the filtering port table.')
fltCurCfgPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgPortIndx.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgPortIndx.setDescription('The port index.')
fltCurCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgPortState.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgPortState.setDescription('Enable or disable filtering.')
fltCurCfgPortFiltBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgPortFiltBmap.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgPortFiltBmap.setDescription('The filtering rules applied to the port. The filtering rules are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ filter 9 || || || ||___ filter 8 || |____ filter 7 || . . . ||_________ filter 2 |__________ filter 1 (as index to fltCurCfgTable) where x : 1 - The represented filter rule applied to the port 0 - The represented filter rule not applied to the port ')
fltNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5), )
if mibBuilder.loadTexts: fltNewCfgPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgPortTable.setDescription('The filtering port table in the new configuration block.')
fltNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "fltNewCfgPortIndx"))
if mibBuilder.loadTexts: fltNewCfgPortTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgPortTableEntry.setDescription('A row in the filtering port table.')
fltNewCfgPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgPortIndx.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgPortIndx.setDescription('The port index.')
fltNewCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgPortState.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgPortState.setDescription('Enable or disable filtering.')
fltNewCfgPortFiltBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgPortFiltBmap.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgPortFiltBmap.setDescription('The filtering rules applied to the port. The filtering rules are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ filter 9 || || || ||___ filter 8 || |____ filter 7 || . . . ||_________ filter 2 |__________ filter 1 (as index to fltNewCfgTable) where x : 1 - The represented filter rule applied to the port 0 - The represented filter rule not applied to the port ')
fltNewCfgPortAddFiltRule = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgPortAddFiltRule.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgPortAddFiltRule.setDescription("This is an action object to add filtering rule to a port. The value specified with this object is the index to the fltNewCfgTable for which filtering rule to be added to the port. The range of the valid index is between 1 and fltCurCfgTableMaxSize. When read, the value '0' is returned always.")
fltNewCfgPortRemFiltRule = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgPortRemFiltRule.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgPortRemFiltRule.setDescription("This is an action object to remove filtering rule from a port. The value specified with this object is the index to the fltNewCfgTable for which filtering rule to be removed from the port. The range of the valid index is between 1 and fltCurCfgTableMaxSize. When read, the value '0' is returned always.")
fltCurCfgUrlBwmTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 6), )
if mibBuilder.loadTexts: fltCurCfgUrlBwmTable.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgUrlBwmTable.setDescription('The table of URL based BWM for filtering.')
fltCurCfgUrlBwmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 6, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "fltCurCfgUrlBwmFltIndex"), (0, "ALTEON-TS-LAYER4-MIB", "fltCurCfgUrlBwmUrlId"))
if mibBuilder.loadTexts: fltCurCfgUrlBwmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgUrlBwmEntry.setDescription('A row in the URL based BWM filtering table.')
fltCurCfgUrlBwmFltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgUrlBwmFltIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgUrlBwmFltIndex.setDescription('The number of the filter.')
fltCurCfgUrlBwmUrlId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgUrlBwmUrlId.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgUrlBwmUrlId.setDescription('The URL Path Identifier.')
fltCurCfgUrlBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgUrlBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgUrlBwmContract.setDescription('The BW contract.')
fltNewCfgUrlBwmTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 7), )
if mibBuilder.loadTexts: fltNewCfgUrlBwmTable.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgUrlBwmTable.setDescription('The table of URL based BWM for filtering.')
fltNewCfgUrlBwmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 7, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "fltNewCfgUrlBwmFltIndex"), (0, "ALTEON-TS-LAYER4-MIB", "fltNewCfgUrlBwmUrlId"))
if mibBuilder.loadTexts: fltNewCfgUrlBwmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgUrlBwmEntry.setDescription('A row in the URL based BWM filtering table.')
fltNewCfgUrlBwmFltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgUrlBwmFltIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgUrlBwmFltIndex.setDescription('The number of the filter.')
fltNewCfgUrlBwmUrlId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgUrlBwmUrlId.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgUrlBwmUrlId.setDescription('The URL Path Identifier.')
fltNewCfgUrlBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgUrlBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgUrlBwmContract.setDescription('The BW traffic contract.')
fltNewCfgUrlBwmDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgUrlBwmDelete.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgUrlBwmDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
fltUrlBwmTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltUrlBwmTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: fltUrlBwmTableMaxSize.setDescription('The maximum number of URL based BWM entries.')
gslbCurCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenState.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenState.setDescription('Turn on or off Distributed Server Load Balance.')
gslbNewCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenState.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenState.setDescription('Turn on or off Distributed Server Load Balance.')
gslbCurCfgGenDnsHandoff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenDnsHandoff.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenDnsHandoff.setDescription('Enable/Disable DNS handoffs in the current_configuration block.')
gslbNewCfgGenDnsHandoff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenDnsHandoff.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenDnsHandoff.setDescription('Enable/Disable DNS handoffs in the new_configuration block.')
gslbCurCfgGenDnsTTL = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenDnsTTL.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenDnsTTL.setDescription('Time to live value in minute of DNS resource records in the current_configuration block.')
gslbNewCfgGenDnsTTL = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenDnsTTL.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenDnsTTL.setDescription('Time to live value in minute of DNS resource records in the new_configuration block.')
gslbCurCfgGenHttpRedirect = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenHttpRedirect.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenHttpRedirect.setDescription('Enable/Disable DNS handoffs in the current_configuration block.')
gslbNewCfgGenHttpRedirect = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenHttpRedirect.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenHttpRedirect.setDescription('Enable/Disable DNS handoffs in the new_configuration block.')
gslbCurCfgGenRemSiteUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenRemSiteUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenRemSiteUpdateInterval.setDescription('The time interval in minute for updating remote site status in the current_configuration block.')
gslbNewCfgGenRemSiteUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenRemSiteUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenRemSiteUpdateInterval.setDescription('The time interval in minute for updating remote site status in the new_configuration block.')
gslbCurCfgGenDnsLocalPref = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenDnsLocalPref.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenDnsLocalPref.setDescription('Enable/Disable DNS responses with only local addresses.')
gslbNewCfgGenDnsLocalPref = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenDnsLocalPref.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenDnsLocalPref.setDescription('Enable/Disable DNS responses with only local addresses.')
gslbCurCfgGenMinco = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenMinco.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenMinco.setDescription('Minmum number of site connections in the current_configuration block.')
gslbNewCfgGenMinco = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenMinco.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenMinco.setDescription('Minmum number of site connections in the new_configuration block.')
gslbCurCfgGenOne = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenOne.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenOne.setDescription('Enable/Disable DNS responses with only one address.')
gslbNewCfgGenOne = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenOne.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenOne.setDescription('Enable/Disable DNS responses with only one address.')
gslbCurCfgGenUsern = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenUsern.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenUsern.setDescription('Enable/Disable HTTP redirect to real server name.')
gslbNewCfgGenUsern = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenUsern.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenUsern.setDescription('Enable/Disable HTTP redirect to real server name.')
gslbCurCfgGenGeo = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenGeo.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenGeo.setDescription('Enable/Disable geographic awareness.')
gslbNewCfgGenGeo = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenGeo.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenGeo.setDescription('Enable/Disable geographic awareness.')
gslbCurCfgGenAlways = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenAlways.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenAlways.setDescription('Enable/Disable DNS responses with at least one address.')
gslbNewCfgGenAlways = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenAlways.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenAlways.setDescription('Enable/Disable DNS responses with at least one address.')
gslbCurCfgGenWeight = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenWeight.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenWeight.setDescription('Sets the local weight. The higher the weight value, the more connections that will be directed to the local site.')
gslbNewCfgGenWeight = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenWeight.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenWeight.setDescription('Sets the local weight. The higher the weight value, the more connections that will be directed to the local site.')
gslbCurCfgGenLookups = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenLookups.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenLookups.setDescription('Enable or disable network preference lookups.')
gslbNewCfgGenLookups = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenLookups.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenLookups.setDescription('Enable or disable network preference lookups.')
gslbCurCfgGenLookupDname = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenLookupDname.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenLookupDname.setDescription('Domain name for internal lookup table')
gslbNewCfgGenLookupDname = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenLookupDname.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenLookupDname.setDescription('Domain name for internal lookup table')
gslbNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5))
gslbCurCfgGenExternal = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenExternal.setStatus('obsolete')
if mibBuilder.loadTexts: gslbCurCfgGenExternal.setDescription('Enable or disable external lookups.')
gslbNewCfgGenExternal = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenExternal.setStatus('obsolete')
if mibBuilder.loadTexts: gslbNewCfgGenExternal.setDescription('Enable or disable external lookups.')
gslbCurCfgGenEip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenEip.setStatus('obsolete')
if mibBuilder.loadTexts: gslbCurCfgGenEip.setDescription('External lookup IP address')
gslbNewCfgGenEip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenEip.setStatus('obsolete')
if mibBuilder.loadTexts: gslbNewCfgGenEip.setDescription('External lookup IP address')
gslbCurCfgGenLookupPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8100, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenLookupPort.setStatus('obsolete')
if mibBuilder.loadTexts: gslbCurCfgGenLookupPort.setDescription('External lookup UDP port number')
gslbNewCfgGenLookupPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8100, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenLookupPort.setStatus('obsolete')
if mibBuilder.loadTexts: gslbNewCfgGenLookupPort.setDescription('External lookup UDP port number')
gslbCurCfgGenLookupTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenLookupTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: gslbCurCfgGenLookupTimeout.setDescription('External lookup Timeout Interval')
gslbNewCfgGenLookupTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenLookupTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: gslbNewCfgGenLookupTimeout.setDescription('External lookup Timeout Interval')
gslbNetworkTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNetworkTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNetworkTableMaxSize.setDescription('The maximum number of GSLB Internet network preference entries.')
gslbCurCfgNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2), )
if mibBuilder.loadTexts: gslbCurCfgNetworkTable.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgNetworkTable.setDescription('The table of Internet network preference in the current_config.')
gslbCurCfgNetworkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "gslbCurCfgNetworkIndx"))
if mibBuilder.loadTexts: gslbCurCfgNetworkTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgNetworkTableEntry.setDescription('The table about a network preference entry configuration.')
gslbCurCfgNetworkIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgNetworkIndx.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgNetworkIndx.setDescription('The current Internet network preference table index.')
gslbCurCfgNetworkSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgNetworkSourceIp.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgNetworkSourceIp.setDescription('The Source IP address of the network table.')
gslbCurCfgNetworkNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgNetworkNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgNetworkNetMask.setDescription('The Net mask of the network table.')
gslbCurCfgNetworkVip1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgNetworkVip1.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgNetworkVip1.setDescription('The Vip1 of the network table.')
gslbCurCfgNetworkVip2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgNetworkVip2.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgNetworkVip2.setDescription('The Vip2 of the network table.')
gslbNewCfgNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3), )
if mibBuilder.loadTexts: gslbNewCfgNetworkTable.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgNetworkTable.setDescription('The table of Internet network preference in the new_config.')
gslbNewCfgNetworkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "gslbNewCfgNetworkIndx"))
if mibBuilder.loadTexts: gslbNewCfgNetworkTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgNetworkTableEntry.setDescription('The table about a network preference entry configuration.')
gslbNewCfgNetworkIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewCfgNetworkIndx.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgNetworkIndx.setDescription('The new Internet network preference table index.')
gslbNewCfgNetworkSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgNetworkSourceIp.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgNetworkSourceIp.setDescription('The Source IP address of the network table.')
gslbNewCfgNetworkNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgNetworkNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgNetworkNetMask.setDescription('The Net mask of the network table.')
gslbNewCfgNetworkVip1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgNetworkVip1.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgNetworkVip1.setDescription('The Vip1 of the network table.')
gslbNewCfgNetworkVip2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgNetworkVip2.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgNetworkVip2.setDescription('The Vip2 of the network table.')
gslbNewCfgNetworkDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgNetworkDelete.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgNetworkDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
dnsCurCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgPrimaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: dnsCurCfgPrimaryIpAddr.setDescription('The DNS primary IP address in the current_configuration block.')
dnsNewCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgPrimaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: dnsNewCfgPrimaryIpAddr.setDescription('The DNS primary IP address in the new_configuration block.')
dnsCurCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgSecondaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: dnsCurCfgSecondaryIpAddr.setDescription('The DNS primary IP address in the current_configuration block.')
dnsNewCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgSecondaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: dnsNewCfgSecondaryIpAddr.setDescription('The DNS primary IP address in the new_configuration block.')
dnsCurCfgDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: dnsCurCfgDomainName.setDescription('The DNS doamin name in the current_configuration block.')
dnsNewCfgDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: dnsNewCfgDomainName.setDescription('The DNS doamin name in the new_configuration block.')
gslbRemSiteTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbRemSiteTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: gslbRemSiteTableMaxSize.setDescription('The maximum number of GSLB remote sites.')
gslbCurCfgRemSiteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2), )
if mibBuilder.loadTexts: gslbCurCfgRemSiteTable.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgRemSiteTable.setDescription('The GSLB remote sites table in the current configuration block.')
gslbCurCfgRemSiteTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "gslbCurCfgRemSiteIndx"))
if mibBuilder.loadTexts: gslbCurCfgRemSiteTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgRemSiteTableEntry.setDescription('A row in the GSLB remote sites table.')
gslbCurCfgRemSiteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteIndx.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgRemSiteIndx.setDescription('The GSLB remote sites table index.')
gslbCurCfgRemSitePrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSitePrimaryIp.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgRemSitePrimaryIp.setDescription('The primary IP address of the remote site in the current_configuration block.')
gslbCurCfgRemSiteSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteSecondaryIp.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgRemSiteSecondaryIp.setDescription('The secondary IP address of the remote site in the current_configuration block.')
gslbCurCfgRemSiteState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteState.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgRemSiteState.setDescription('Enable/Disable GSLB for the remote site in the current_configuration block.')
gslbCurCfgRemSiteUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgRemSiteUpdate.setDescription('Enable/Disable GSLB for the remote site status update in the current_configuration block.')
gslbCurCfgRemSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteName.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgRemSiteName.setDescription('The name of the GSLB remote site.')
gslbNewCfgRemSiteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3), )
if mibBuilder.loadTexts: gslbNewCfgRemSiteTable.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgRemSiteTable.setDescription('The GSLB remote sites table in the current configuration block.')
gslbNewCfgRemSiteTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "gslbNewCfgRemSiteIndx"))
if mibBuilder.loadTexts: gslbNewCfgRemSiteTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgRemSiteTableEntry.setDescription('A row in the GSLB remote sites table.')
gslbNewCfgRemSiteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewCfgRemSiteIndx.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgRemSiteIndx.setDescription('The GSLB remote sites table index.')
gslbNewCfgRemSitePrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRemSitePrimaryIp.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgRemSitePrimaryIp.setDescription('The primary IP address of the remote site in the new_configuration block.')
gslbNewCfgRemSiteSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRemSiteSecondaryIp.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgRemSiteSecondaryIp.setDescription('The secondary IP address of the remote site in the new_configuration block.')
gslbNewCfgRemSiteState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRemSiteState.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgRemSiteState.setDescription('Enable/Disable GSLB for the remote site in the new_configuration block.')
gslbNewCfgRemSiteUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRemSiteUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgRemSiteUpdate.setDescription('Enable/Disable GSLB for the remote site status update in the new_configuration block.')
gslbNewCfgRemSiteDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRemSiteDelete.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgRemSiteDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
gslbNewCfgRemSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRemSiteName.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgRemSiteName.setDescription('The name of the GSLB remote site.')
dynSLBRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12, 1), )
if mibBuilder.loadTexts: dynSLBRealServerTable.setStatus('obsolete')
if mibBuilder.loadTexts: dynSLBRealServerTable.setDescription('The table of Real Servers.')
dynSLBRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "dynSLBRealServerIpAddr"), (0, "ALTEON-TS-LAYER4-MIB", "dynSLBRealServerPortNum"))
if mibBuilder.loadTexts: dynSLBRealServerEntry.setStatus('obsolete')
if mibBuilder.loadTexts: dynSLBRealServerEntry.setDescription('A row in the Real Server table.')
dynSLBRealServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynSLBRealServerIpAddr.setStatus('obsolete')
if mibBuilder.loadTexts: dynSLBRealServerIpAddr.setDescription('IP address of the Real Server.')
dynSLBRealServerPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynSLBRealServerPortNum.setStatus('obsolete')
if mibBuilder.loadTexts: dynSLBRealServerPortNum.setDescription('The switch port that the Real Server is connected to.')
dynSLBRealServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynSLBRealServerWeight.setStatus('obsolete')
if mibBuilder.loadTexts: dynSLBRealServerWeight.setDescription('The Real Server weight. The higher the server weight means the Real Server is allowed to receive more traffic load.')
slbStatRServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5), )
if mibBuilder.loadTexts: slbStatRServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatRServerTable.setDescription('The real server statistics table.')
slbStatRServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbStatRServerIndex"))
if mibBuilder.loadTexts: slbStatRServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatRServerEntry.setDescription('The statistics of a particular real server.')
slbStatRServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatRServerIndex.setDescription('The real server number that identifies the server.')
slbStatRServerCurrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerCurrSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatRServerCurrSessions.setDescription('The number of sessions that are currently handled by the real server.')
slbStatRServerTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerTotalSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatRServerTotalSessions.setDescription('The total number of sessions that are handled by the real server.')
slbStatRServerFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerFailures.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatRServerFailures.setDescription('The total number of times that the real server is claimed down.')
slbStatRServerHighestSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerHighestSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatRServerHighestSessions.setDescription('The highest sessions that have been handled by the real server.')
slbStatRServerHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerHCOctets.setStatus('obsolete')
if mibBuilder.loadTexts: slbStatRServerHCOctets.setDescription('The total number of octets received and transmitted out of the real server.')
slbStatRServerHCOctetsLow32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerHCOctetsLow32.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatRServerHCOctetsLow32.setDescription('The lower 32 bit value of octets received and transmitted out of the real server.')
slbStatRServerHCOctetsHigh32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerHCOctetsHigh32.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatRServerHCOctetsHigh32.setDescription('The higher 32 bit value of octets received and transmitted out of the real server.')
slbStatGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6), )
if mibBuilder.loadTexts: slbStatGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatGroupTable.setDescription('The real server group statistics table.')
slbStatGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbStatGroupIndex"))
if mibBuilder.loadTexts: slbStatGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatGroupEntry.setDescription('The statistics of a particular real server group.')
slbStatGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatGroupIndex.setDescription('The real server group number that identifies the group.')
slbStatGroupCurrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupCurrSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatGroupCurrSessions.setDescription('The number of sessions that are currently handled by the real server group.')
slbStatGroupTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupTotalSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatGroupTotalSessions.setDescription('The total number of sessions that are handled by the real server group.')
slbStatGroupHighestSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupHighestSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatGroupHighestSessions.setDescription('The highest sessions that have been handled by the real server group.')
slbStatGroupHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupHCOctets.setStatus('obsolete')
if mibBuilder.loadTexts: slbStatGroupHCOctets.setDescription('The total number of octets received and transmitted out of the real server group.')
slbStatGroupHCOctetsLow32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupHCOctetsLow32.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatGroupHCOctetsLow32.setDescription('The lower 32 bit value of octets received and transmitted out of the real server group.')
slbStatGroupHCOctetsHigh32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupHCOctetsHigh32.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatGroupHCOctetsHigh32.setDescription('The higher 32 bit value of octets received and transmitted out of the real server group.')
slbStatVServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7), )
if mibBuilder.loadTexts: slbStatVServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerTable.setDescription('The virtual server statistics table.')
slbStatVServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbStatVServerIndex"))
if mibBuilder.loadTexts: slbStatVServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerEntry.setDescription('The statistics of a particular virtual server group.')
slbStatVServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerIndex.setDescription('The virtual server number that identifies the server.')
slbStatVServerCurrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerCurrSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerCurrSessions.setDescription('The number of sessions that are currently handled by the virtual server.')
slbStatVServerTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerTotalSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerTotalSessions.setDescription('The total number of sessions that are handled by the virtual server.')
slbStatVServerHighestSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHighestSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerHighestSessions.setDescription('The highest sessions that have been handled by the virtual server.')
slbStatVServerHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHCOctets.setStatus('obsolete')
if mibBuilder.loadTexts: slbStatVServerHCOctets.setDescription('The total number of octets received and transmitted out of the virtual server.')
slbStatVServerHCOctetsLow32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHCOctetsLow32.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerHCOctetsLow32.setDescription('The lower 32 bit value of octets received and transmitted out of the virtual server.')
slbStatVServerHCOctetsHigh32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHCOctetsHigh32.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerHCOctetsHigh32.setDescription('The higher 32 bit value of octets received and transmitted out of the virtual server.')
slbStatVServerHeaderHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHeaderHits.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerHeaderHits.setDescription('The current HTTP header hits.')
slbStatVServerHeaderMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHeaderMisses.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerHeaderMisses.setDescription('The current HTTP header misses.')
slbStatVServerHeaderTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHeaderTotalSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerHeaderTotalSessions.setDescription('The total HTTP header sessions.')
slbStatVServerCookieRewrites = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerCookieRewrites.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerCookieRewrites.setDescription('The total Cookie Rewrites.')
slbStatVServerCookieInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerCookieInserts.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerCookieInserts.setDescription('The total Cookie Inserts.')
slbStatPortMaintTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1), )
if mibBuilder.loadTexts: slbStatPortMaintTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintTable.setDescription('The table of SLB port maintenance statistics.')
slbStatPortMaintEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbStatPortMaintPortIndex"))
if mibBuilder.loadTexts: slbStatPortMaintEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintEntry.setDescription('A row in the SLB port maintenance statistcs table.')
slbStatPortMaintPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintPortIndex.setDescription('The port number for which the statistics apply.')
slbStatPortMaintCurBindings = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintCurBindings.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintCurBindings.setDescription('The current number of bindings on the port.')
slbStatPortMaintBindingFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintBindingFails.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintBindingFails.setDescription('The total number of Binding failures on the port. A Binding Failure occurs when a port runs out of binding table entries.')
slbStatPortMaintNonTcpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintNonTcpFrames.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintNonTcpFrames.setDescription('The total number of non-TCP/IP frames dropped on the port.')
slbStatPortMaintTcpFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintTcpFragments.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintTcpFragments.setDescription('The total number of TCP fragments dropped on the port.')
slbStatPortMaintUdpDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintUdpDatagrams.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintUdpDatagrams.setDescription('The total number of UDP datagrams dropped on the port.')
slbStatPortMaintIncorrectVIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintIncorrectVIPs.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintIncorrectVIPs.setDescription('The total number of frames with incorrect VIPs that are dropped on the port.')
slbStatPortMaintIncorrectVports = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintIncorrectVports.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintIncorrectVports.setDescription('The total number of frames with incorrect Virtual Port that are dropped on the port.')
slbStatPortMaintRealServerNoAvails = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintRealServerNoAvails.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintRealServerNoAvails.setDescription('The total number of frames that are dropped on the port because no real server is available.')
slbStatPortMaintFilteredDeniedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintFilteredDeniedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintFilteredDeniedFrames.setDescription('The total number of frames that are denied on the port by the filter.')
slbStatPortMaintCurBindings4Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintCurBindings4Seconds.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintCurBindings4Seconds.setDescription('The 4 second average current number of bindings on the port.')
slbStatPortMaintCurBindings64Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintCurBindings64Seconds.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintCurBindings64Seconds.setDescription('The 64 second average current number of bindings on the port.')
slbStatPortMaintVMAdiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintVMAdiscards.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintVMAdiscards.setDescription('The total number of internal VMA frames dropped by the port.')
slbStatPortRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2), )
if mibBuilder.loadTexts: slbStatPortRealServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortRealServerTable.setDescription('The port-server statistics table. This table shows the statistics of real servers that are connectted to switch ports.')
slbStatPortRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbStatPortRealServerPortIndex"), (0, "ALTEON-TS-LAYER4-MIB", "slbStatPortRealServerServerIndex"))
if mibBuilder.loadTexts: slbStatPortRealServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortRealServerEntry.setDescription('A row in the port-server statistics table.')
slbStatPortRealServerPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortRealServerPortIndex.setDescription('The port number that identifies the switch port.')
slbStatPortRealServerServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortRealServerServerIndex.setDescription('The real server number that identifies the server.')
slbStatPortRealServerCurrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerCurrSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortRealServerCurrSessions.setDescription('The current sessions for the real server.')
slbStatPortRealServerTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerTotalSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortRealServerTotalSessions.setDescription('The total number of sessions for the real server.')
slbStatPortRealServerHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerHCOctets.setStatus('obsolete')
if mibBuilder.loadTexts: slbStatPortRealServerHCOctets.setDescription('The total number of octets received and transmitted out of the real server on a particular port.')
slbStatPortRealServerHCOctetsLow32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerHCOctetsLow32.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortRealServerHCOctetsLow32.setDescription('The lower 32 bit value of the total octets received and transmitted out of the real server on a particular port.')
slbStatPortRealServerHCOctetsHigh32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerHCOctetsHigh32.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortRealServerHCOctetsHigh32.setDescription('The higher 32 bit value of the total octets received and transmitted out of the real server on a particular port.')
slbMaintStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8))
slbIncorrectVirtServs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbIncorrectVirtServs.setStatus('mandatory')
if mibBuilder.loadTexts: slbIncorrectVirtServs.setDescription('Incorrect Virtual Servers specified for Server Load Balancing.')
slbIncorrectVports = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbIncorrectVports.setStatus('mandatory')
if mibBuilder.loadTexts: slbIncorrectVports.setDescription('Incorrect Virtual ports specified for Server Load Balancing.')
slbNoRealServs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNoRealServs.setStatus('mandatory')
if mibBuilder.loadTexts: slbNoRealServs.setDescription('No Real Servers specified for Server Load Balancing.')
wapMaintStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4))
radiusAcctReqsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1))
tpcpAddSessReqsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 2))
tpcpDeleteSessReqsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 3))
radiusAcctReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctReqs.setStatus('mandatory')
if mibBuilder.loadTexts: radiusAcctReqs.setDescription('Radius Account Request.')
radiusAcctWrapReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctWrapReqs.setStatus('mandatory')
if mibBuilder.loadTexts: radiusAcctWrapReqs.setDescription('Radius Account Wrap Request.')
radiusAcctStartReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctStartReqs.setStatus('mandatory')
if mibBuilder.loadTexts: radiusAcctStartReqs.setDescription('Radius Account Start Request.')
radiusAcctUpdateReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctUpdateReqs.setStatus('mandatory')
if mibBuilder.loadTexts: radiusAcctUpdateReqs.setDescription('Radius Account Update Request.')
radiusAcctStopReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctStopReqs.setStatus('mandatory')
if mibBuilder.loadTexts: radiusAcctStopReqs.setDescription('Radius Account stop Request.')
radiusAcctBadReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctBadReqs.setStatus('mandatory')
if mibBuilder.loadTexts: radiusAcctBadReqs.setDescription('Radius Account Bad Request.')
radiusAcctAddSessionReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctAddSessionReqs.setStatus('mandatory')
if mibBuilder.loadTexts: radiusAcctAddSessionReqs.setDescription('Radius Account add session Request.')
radiusAcctDeleteSessionReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctDeleteSessionReqs.setStatus('mandatory')
if mibBuilder.loadTexts: radiusAcctDeleteSessionReqs.setDescription('Radius Account delete session Request.')
radiusAcctReqFailsQFull = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctReqFailsQFull.setStatus('mandatory')
if mibBuilder.loadTexts: radiusAcctReqFailsQFull.setDescription('Radius Account request fails Queue Full.')
radiusAcctReqFailsSPDead = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctReqFailsSPDead.setStatus('mandatory')
if mibBuilder.loadTexts: radiusAcctReqFailsSPDead.setDescription('Radius Account request fails SP Dead.')
radiusAcctReqFailsDMAFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctReqFailsDMAFails.setStatus('mandatory')
if mibBuilder.loadTexts: radiusAcctReqFailsDMAFails.setDescription('Radius Account request fails DMA fails.')
radiusAcctMaxEntriesInUse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctMaxEntriesInUse.setStatus('mandatory')
if mibBuilder.loadTexts: radiusAcctMaxEntriesInUse.setDescription('Radius Account Maximum Entries in use.')
tpcpAddSessReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpAddSessReqs.setStatus('mandatory')
if mibBuilder.loadTexts: tpcpAddSessReqs.setDescription('WAP add Session requests.')
tpcpAddSessReqsFailsQFull = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpAddSessReqsFailsQFull.setStatus('mandatory')
if mibBuilder.loadTexts: tpcpAddSessReqsFailsQFull.setDescription('WAP add Session Fails as the Queue is Full.')
tpcpAddSessReqsFailsSPDead = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpAddSessReqsFailsSPDead.setStatus('mandatory')
if mibBuilder.loadTexts: tpcpAddSessReqsFailsSPDead.setDescription('WAP add Session Fails as the SP is dead.')
tpcpAddSessReqsEntriesInUse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpAddSessReqsEntriesInUse.setStatus('mandatory')
if mibBuilder.loadTexts: tpcpAddSessReqsEntriesInUse.setDescription('WAP add Session Entries currently in use.')
tpcpAddSessReqsMaxEntriesInUse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpAddSessReqsMaxEntriesInUse.setStatus('mandatory')
if mibBuilder.loadTexts: tpcpAddSessReqsMaxEntriesInUse.setDescription('The allowable maximum number of WAP add Session Entries.')
tpcpDeleteSessReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpDeleteSessReqs.setStatus('mandatory')
if mibBuilder.loadTexts: tpcpDeleteSessReqs.setDescription('TPCP Delete Session Requests.')
tpcpDeleteSessReqsFailsQFull = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpDeleteSessReqsFailsQFull.setStatus('mandatory')
if mibBuilder.loadTexts: tpcpDeleteSessReqsFailsQFull.setDescription('TPCP Delete Session Fails as the Queue is Full.')
tpcpDeleteSessReqsFailsSPDead = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpDeleteSessReqsFailsSPDead.setStatus('mandatory')
if mibBuilder.loadTexts: tpcpDeleteSessReqsFailsSPDead.setDescription('TPCP Delete Session Fails as the SP is dead.')
tpcpDeleteSessReqsEntriesInUse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpDeleteSessReqsEntriesInUse.setStatus('mandatory')
if mibBuilder.loadTexts: tpcpDeleteSessReqsEntriesInUse.setDescription('TPCP Delete Session Entries currently in use.')
tpcpDeleteSessReqsMaxEntriesInUse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpDeleteSessReqsMaxEntriesInUse.setStatus('mandatory')
if mibBuilder.loadTexts: tpcpDeleteSessReqsMaxEntriesInUse.setDescription('The allowable maximum number of TPCP delete Session Entries.')
wapRequestToWrongSP = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wapRequestToWrongSP.setStatus('mandatory')
if mibBuilder.loadTexts: wapRequestToWrongSP.setDescription('The WAP delete Session Entries sent to wrong SP.')
slbStatMaintBackupServActs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintBackupServActs.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatMaintBackupServActs.setDescription('The total number of times that backup servers become active due to failure of primary servers.')
slbStatMaintOverflowServActs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintOverflowServActs.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatMaintOverflowServActs.setDescription('The total number of times that backup servers become active due to primary servers reach overflow situation.')
fltStatTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 6, 1), )
if mibBuilder.loadTexts: fltStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: fltStatTable.setDescription('The filter statistics table.')
fltStatTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 6, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "fltStatFltIndex"))
if mibBuilder.loadTexts: fltStatTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fltStatTableEntry.setDescription('A row in filter statistics table.')
fltStatFltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltStatFltIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fltStatFltIndex.setDescription('The number that identifies the filter.')
fltStatFltFirings = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltStatFltFirings.setStatus('mandatory')
if mibBuilder.loadTexts: fltStatFltFirings.setDescription('The number of instances that the received packet matches the filter rule.')
gslbStatRemRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7, 1), )
if mibBuilder.loadTexts: gslbStatRemRealServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: gslbStatRemRealServerTable.setDescription('The GSLB remote real server statistics table.')
gslbStatRemRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "gslbStatRemRealServerIndex"))
if mibBuilder.loadTexts: gslbStatRemRealServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gslbStatRemRealServerEntry.setDescription('A row in the remote real server statistics table.')
gslbStatRemRealServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRemRealServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gslbStatRemRealServerIndex.setDescription('The server number that identifies the remote real server.')
gslbStatRemRealServerDnsHandoffs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRemRealServerDnsHandoffs.setStatus('mandatory')
if mibBuilder.loadTexts: gslbStatRemRealServerDnsHandoffs.setDescription('The number of DNS hanfoffs by the remote real server.')
gslbStatRemRealServerHttpRedirs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRemRealServerHttpRedirs.setStatus('mandatory')
if mibBuilder.loadTexts: gslbStatRemRealServerHttpRedirs.setDescription('The number of HTTP redirections by the remote real server.')
gslbStatMaintInGoodSiteUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintInGoodSiteUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: gslbStatMaintInGoodSiteUpdates.setDescription('The number of good remote site updates which are received.')
gslbStatMaintInBadSiteUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintInBadSiteUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: gslbStatMaintInBadSiteUpdates.setDescription('The number of bad remote site updates which are received.')
urlRedirStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1))
urlStatRedRedirs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedRedirs.setStatus('mandatory')
if mibBuilder.loadTexts: urlStatRedRedirs.setDescription('The number of instances that the received packet matches the specified URL expressions and redirected to specified group of real servers.')
urlStatRedOrigSrvs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedOrigSrvs.setStatus('mandatory')
if mibBuilder.loadTexts: urlStatRedOrigSrvs.setDescription('The number of instances that the received packet is sent to the origin server due to mis-match with the specified URL expressions or detecting of HTTP non-GETs,user cookies, and no-cache as users configuration.')
urlStatRedNonGets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedNonGets.setStatus('mandatory')
if mibBuilder.loadTexts: urlStatRedNonGets.setDescription('The number of instances that the received packet contains none GETs(POST ,HEAD ,PUT..) methods.')
urlStatRedCookie = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedCookie.setStatus('mandatory')
if mibBuilder.loadTexts: urlStatRedCookie.setDescription("The number of instances that the received packet contains a 'Cookie: ' header.")
urlStatRedNoCache = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedNoCache.setStatus('mandatory')
if mibBuilder.loadTexts: urlStatRedNoCache.setDescription('The number of instances that the received packet contains a no-cache header value.')
urlSlbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 2))
urlStatSlbPathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 2, 1), )
if mibBuilder.loadTexts: urlStatSlbPathTable.setStatus('mandatory')
if mibBuilder.loadTexts: urlStatSlbPathTable.setDescription('The statistics table of instances that URL pathes matched.')
urlStatSlbPathTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 2, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgUrlLbPathIndex"))
if mibBuilder.loadTexts: urlStatSlbPathTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: urlStatSlbPathTableEntry.setDescription('Information about the number of instances that are load-balanced due to match of a particular URL path.')
urlStatSlbPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatSlbPathIndex.setStatus('mandatory')
if mibBuilder.loadTexts: urlStatSlbPathIndex.setDescription('The URL path table index.')
urlStatSlbPathHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatSlbPathHits.setStatus('mandatory')
if mibBuilder.loadTexts: urlStatSlbPathHits.setDescription('The number of instances that are load-balanced due to match of the particular URL path.')
tcpStatCurConns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 11, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatCurConns.setStatus('mandatory')
if mibBuilder.loadTexts: tcpStatCurConns.setDescription('The number of outstanding TCP current connections have been established.')
tcpStatHalfOpens = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 11, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatHalfOpens.setStatus('mandatory')
if mibBuilder.loadTexts: tcpStatHalfOpens.setDescription('The number of outstanding TCP connections have been half opened. This statistics is valid only when URL parsing has been truned on. It is incremented when the switch respond to TCP SYN packet and decremented upon receiving TCP SYN ACK packet from the requester.')
ftpSlbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 14, 1))
ftpSlbStatTotal = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 14, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSlbStatTotal.setStatus('mandatory')
if mibBuilder.loadTexts: ftpSlbStatTotal.setDescription('The total number of ftp control sesssion for SLB received after FTP parsing turn on.')
ftpNatStatTotal = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpNatStatTotal.setStatus('mandatory')
if mibBuilder.loadTexts: ftpNatStatTotal.setDescription('The total number of FTP control session for NAT received after active FTP is turn on.')
rurlErrorStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 1))
rurlErrorStatConnect = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlErrorStatConnect.setStatus('mandatory')
if mibBuilder.loadTexts: rurlErrorStatConnect.setDescription('Total number of session connect errors to the iSD.')
rurlErrorStatPack = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlErrorStatPack.setStatus('mandatory')
if mibBuilder.loadTexts: rurlErrorStatPack.setDescription('Total number of errors associated with packaging the RURL data frame received from the iSD.')
rurlErrorStatUnpack = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlErrorStatUnpack.setStatus('mandatory')
if mibBuilder.loadTexts: rurlErrorStatUnpack.setDescription('Total number of errors associated with unpackaging the RURL data frame received from the iSD.')
rurlErrorStatDma = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlErrorStatDma.setStatus('mandatory')
if mibBuilder.loadTexts: rurlErrorStatDma.setDescription('Total number of DMA write errors.')
rurlErrorStatBuf = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlErrorStatBuf.setStatus('mandatory')
if mibBuilder.loadTexts: rurlErrorStatBuf.setDescription('Total number of errors associated with no available buffers to to store the RURL redirection information.')
rurlErrorStatBufWrap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlErrorStatBufWrap.setStatus('mandatory')
if mibBuilder.loadTexts: rurlErrorStatBufWrap.setDescription('Total number of errors associated with buffer wrap copies.')
rurlErrorStatProto = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlErrorStatProto.setStatus('mandatory')
if mibBuilder.loadTexts: rurlErrorStatProto.setDescription('Total number of errors associated with packets containing an invalid protocol type. Expected protocol types are TCP and UDP.')
rurlInfoStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2))
rurlInfoStatClientWrap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatClientWrap.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatClientWrap.setDescription('Total number of client packets processed using frame wrap buffers.')
rurlInfoStatServerWrap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatServerWrap.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatServerWrap.setDescription('Total number of server packets processed using frame wrap buffers.')
rurlInfoStatBufWrap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatBufWrap.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatBufWrap.setDescription('Total number of packets processed using RURL wrap copy mechanism.')
rurlInfoStatFreeRingCalls = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatFreeRingCalls.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatFreeRingCalls.setDescription('Total number of RURL sequence buffer frees.')
rurlInfoStatClientResets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatClientResets.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatClientResets.setDescription('Total number of client resets by the switch.')
rurlInfoStatServerResets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatServerResets.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatServerResets.setDescription('Total number of server resets by the switch.')
rurlInfoStatFramePassThru = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatFramePassThru.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatFramePassThru.setDescription('Total number of packets dropped to L2 processing due to the switch running out of resources.')
rurlInfoStatParseFiltMiss = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatParseFiltMiss.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatParseFiltMiss.setDescription('Total number of packets leaking from RURL parsing to URL parsing.')
rurlInfoStatExceedBufLen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatExceedBufLen.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatExceedBufLen.setDescription('Total number of occurences where the client request bytes exceed the maximum buffer size allocated by the switch.')
rurlInfoStatExceedFrameDepth = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatExceedFrameDepth.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatExceedFrameDepth.setDescription('Total number of occurences where the client request bytes exceed the maximum buffer depth allocated by the switch.')
rurlInfoStatZeroContentLen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatZeroContentLen.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatZeroContentLen.setDescription('Total number of occurences where the Content-Length of the HTTP request is zero.')
rurlInfoStatNonTypicalOffsets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatNonTypicalOffsets.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatNonTypicalOffsets.setDescription('Total number of occurences where the RURL header offsets are non-typical.')
rurlInfoStatFINRSTSessSetup = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatFINRSTSessSetup.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatFINRSTSessSetup.setDescription('Total number of occurences where a FIN or RST packet is used to establish a new session in the switch.')
rurlInfoStatPSHSessSetup = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatPSHSessSetup.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatPSHSessSetup.setDescription('Total number of occurences where a PSH packet is used to establish a new session in the switch.')
rurlInfoStatNonSYNSessSetup = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatNonSYNSessSetup.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatNonSYNSessSetup.setDescription('Total number of occurences where a non-SYN packet is used to establish a new session in the switch.')
rurlInfoStatL7BindCalls = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatL7BindCalls.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatL7BindCalls.setDescription('Total number of requests to bind a session.')
rurlInfoStatSessSetups = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatSessSetups.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatSessSetups.setDescription('Total number of RURL session setups encountered.')
rurlInfoStatMiscProcess = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatMiscProcess.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatMiscProcess.setDescription('Total number of sessions falling through the filter processing.')
rurlInfoStatClientPktsIn = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatClientPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatClientPktsIn.setDescription('Total number of client packets processed by the RURL filter.')
rurlInfoStatClientSYNsIn = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatClientSYNsIn.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatClientSYNsIn.setDescription('Total number of client SYN packets processed by the RURL filter.')
rurlInfoStatClientReTXSYNsSeen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatClientReTXSYNsSeen.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatClientReTXSYNsSeen.setDescription('Total number of client retransmitted SYN packets processed by the RURL filter.')
rurlInfoStatClientSYNACKsSent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatClientSYNACKsSent.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatClientSYNACKsSent.setDescription('Total number of switch-to-client SYN/ACK packets processed by the RURL filter.')
rurlInfoStatClientACKsIn = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatClientACKsIn.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatClientACKsIn.setDescription('Total number of client ACK packets processed by the RURL filter.')
rurlInfoStatClientDataIn = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatClientDataIn.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatClientDataIn.setDescription('Total number of client PSH packets processed by the RURL filter.')
rurlInfoStatClientDataRetx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatClientDataRetx.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatClientDataRetx.setDescription('Total number of client data retransmit packets processed by the RURL filter.')
rurlInfoStatServerSYNsSent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatServerSYNsSent.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatServerSYNsSent.setDescription('Total number of SYN packets sent to the server by the switch.')
rurlInfoStatServerSYNACKsIn = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatServerSYNACKsIn.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatServerSYNACKsIn.setDescription('Total number of swtich-to-server SYN/ACK packets processed by the RURL filter.')
rurlInfoStatServerACKsSent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatServerACKsSent.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatServerACKsSent.setDescription('Total number of ACK packets sent to the server by the switch.')
rurlInfoStatServerACKsIn = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatServerACKsIn.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatServerACKsIn.setDescription('Total number of server-to-switch ACK packets processed by the RURL filters.')
rurlInfoStatServerSYNsRetx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatServerSYNsRetx.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatServerSYNsRetx.setDescription('Total number of retransmitted SYN packets sent to the server by the switch that resulted in an error.')
rurlInfoStatServerSYNsRetxErrors = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatServerSYNsRetxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatServerSYNsRetxErrors.setDescription('Total number of ACK packets sent to the server by the switch.')
rurlInfoStatL7SessionReuse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatL7SessionReuse.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatL7SessionReuse.setDescription('Total number of SYN requests that matched a session lookup due to an accidental reuse of a session table entry. This is typically a result of port wrap/reuse on a client generally running performance testing.')
rurlInfoStatConnSpliced = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatConnSpliced.setStatus('mandatory')
if mibBuilder.loadTexts: rurlInfoStatConnSpliced.setDescription('Total number of connections successfully spliced by the switch.')
rurlMaintStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3))
rurlMaintStatOrgServerHits = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatOrgServerHits.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatOrgServerHits.setDescription('Total number of session setups to the end server.')
rurlMaintStatHTTPRedirs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatHTTPRedirs.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatHTTPRedirs.setDescription('Total number of HTTP redirect responses to the client.')
rurlMaintStatServerReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatServerReqs.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatServerReqs.setDescription('Total number of request packets sent from the switch to the iSD.')
rurlMaintStatServerAcks = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatServerAcks.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatServerAcks.setDescription('Total number of response packets sent from the iSD to the switch.')
rurlMaintStatSessCnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatSessCnt.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatSessCnt.setDescription('Total number of session connections to the iSD made by the switch.')
rurlMaintStatLastFrameCnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatLastFrameCnt.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatLastFrameCnt.setDescription("Total number of 'last frame' packets sent from the iSD to the switch.")
rurlMaintStatConnectRxmit = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatConnectRxmit.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatConnectRxmit.setDescription('Total number of client retransmissions encountered.')
rurlMaintStatResetRxmit = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatResetRxmit.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatResetRxmit.setDescription('Total number of client resets due to excessive retransmissions.')
rurlMaintStatCurRdirIPEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatCurRdirIPEntries.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatCurRdirIPEntries.setDescription('Current IP redirection table entries.')
rurlMaintStatHighRdirIPEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatHighRdirIPEntries.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatHighRdirIPEntries.setDescription('Highest IP redirection table entries.')
rurlMaintStatCurRdirPORTEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatCurRdirPORTEntries.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatCurRdirPORTEntries.setDescription('Current PORT redirection table entries.')
rurlMaintStatHighRdirPORTEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatHighRdirPORTEntries.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatHighRdirPORTEntries.setDescription('Highest PORT redirection table entries.')
rurlMaintStatCurRdirIPPORTEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatCurRdirIPPORTEntries.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatCurRdirIPPORTEntries.setDescription('Current IP/PORT redirection table entries.')
rurlMaintStatHighRdirIPPORTEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatHighRdirIPPORTEntries.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatHighRdirIPPORTEntries.setDescription('Highest IP/PORT redirection table entries.')
rurlMaintStatCurRSEQBufEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatCurRSEQBufEntries.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatCurRSEQBufEntries.setDescription('Current RURL sequence table entries.')
rurlMaintStatHighRSEQBufEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatHighRSEQBufEntries.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatHighRSEQBufEntries.setDescription('Highest RURL sequence table entries.')
rurlMaintStatCurRBUFBufEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatCurRBUFBufEntries.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatCurRBUFBufEntries.setDescription('Current RURL frame buffer entries.')
rurlMaintStatHighRBUFBufEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatHighRBUFBufEntries.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatHighRBUFBufEntries.setDescription('Highest RURL frame buffer entries.')
rurlMaintStatRSEQBufAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatRSEQBufAllocs.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatRSEQBufAllocs.setDescription('Total number of successful RURL sequence buffer Allocs.')
rurlMaintStatRSEQBufFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatRSEQBufFrees.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatRSEQBufFrees.setDescription('Total number of successful RURL sequence buffer Frees.')
rurlMaintStatRSEQFailBufAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatRSEQFailBufAllocs.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatRSEQFailBufAllocs.setDescription('Total number of failed RURL sequence buffer Allocs.')
rurlMaintStatRSEQFailBufFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatRSEQFailBufFrees.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatRSEQFailBufFrees.setDescription('Total number of failed RURL sequence buffer Frees.')
rurlMaintStatRBUFBufAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatRBUFBufAllocs.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatRBUFBufAllocs.setDescription('Total number of successful RURL frame buffer Allocs.')
rurlMaintStatRBUFBufFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatRBUFBufFrees.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatRBUFBufFrees.setDescription('Total number of successful RURL frame buffer Frees.')
rurlMaintStatRBUFFailBufAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatRBUFFailBufAllocs.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatRBUFFailBufAllocs.setDescription('Total number of failed RURL frame buffer Allocs.')
rurlMaintStatRBUFFailBufFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatRBUFFailBufFrees.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatRBUFFailBufFrees.setDescription('Total number of failed RURL frame buffer Frees.')
rurlMaintStatRBUFRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatRBUFRetransmit.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatRBUFRetransmit.setDescription('Total number of retransmissions of an existing RURL frame buffer.')
rurlMaintStatRBUFChanged = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatRBUFChanged.setStatus('mandatory')
if mibBuilder.loadTexts: rurlMaintStatRBUFChanged.setDescription('Total number of retransmissions of an existing RURL frame buffer that has changed in length.')
rtspStatControlConns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 19, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspStatControlConns.setStatus('mandatory')
if mibBuilder.loadTexts: rtspStatControlConns.setDescription('Total number of active RTSP control connections.')
rtspStatUDPStreams = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 19, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspStatUDPStreams.setStatus('mandatory')
if mibBuilder.loadTexts: rtspStatUDPStreams.setDescription('Total number of active UDP streams.')
rtspStatRedirects = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 19, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspStatRedirects.setStatus('mandatory')
if mibBuilder.loadTexts: rtspStatRedirects.setDescription('Total number of switch redirects.')
rtspStatConnDenied = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 19, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspStatConnDenied.setStatus('mandatory')
if mibBuilder.loadTexts: rtspStatConnDenied.setDescription('Total connections denied due to RTSP connection limit.')
rtspStatAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 19, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspStatAllocFails.setStatus('mandatory')
if mibBuilder.loadTexts: rtspStatAllocFails.setDescription('Total cases of heap memory allocation failures.')
tcpLimitStatHoldDowns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 23, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpLimitStatHoldDowns.setStatus('mandatory')
if mibBuilder.loadTexts: tcpLimitStatHoldDowns.setDescription('Total number of client hold downs triggered.')
tcpLimitStatClientEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 23, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpLimitStatClientEntries.setStatus('mandatory')
if mibBuilder.loadTexts: tcpLimitStatClientEntries.setDescription('Current number of TCP rate limiting per-client state entries.')
nasaStatSpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1), )
if mibBuilder.loadTexts: nasaStatSpTable.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpTable.setDescription('The table of NASA statistics at SP.')
nasaStatSpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "nasaStatSpPortIndex"))
if mibBuilder.loadTexts: nasaStatSpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpEntry.setDescription('A row in the NASA base port statistcs table.')
nasaStatSpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpPortIndex.setDescription('The port number for which the statistics apply.')
nasaStatSpCtlTunnelIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpCtlTunnelIn.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpCtlTunnelIn.setDescription('The number of packet in for control tunnel on the port.')
nasaStatSpCtlTunnelInvalidPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpCtlTunnelInvalidPkt.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpCtlTunnelInvalidPkt.setDescription('The number of invalid packet in for control tunnel on the port.')
nasaStatSpReqSessCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpReqSessCnt.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpReqSessCnt.setDescription('The number of session request message in for control tunnel on the port.')
nasaStatSpSessAddCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpSessAddCnt.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpSessAddCnt.setDescription('The number of session add mesage for control tunnel on the port.')
nasaStatSpSessDelCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpSessDelCnt.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpSessDelCnt.setDescription('The number of session delete message for control tunnel on the port.')
nasaStatSpSessUpdCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpSessUpdCnt.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpSessUpdCnt.setDescription('The number of session update message for control tunnel on the port.')
nasaStatSpSessRdCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpSessRdCnt.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpSessRdCnt.setDescription('The number of session read message for control tunnel on the port.')
nasaStatSpSessCharCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpSessCharCnt.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpSessCharCnt.setDescription('The number of session characteristics message for control tunnel on the port.')
nasaStatSpReqSessNoIsd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpReqSessNoIsd.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpReqSessNoIsd.setDescription('The number of session request message no isd for control tunnel on the port.')
nasaStatSpCtlTunnelToMp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpCtlTunnelToMp.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpCtlTunnelToMp.setDescription('The number of packet sent to MP for control tunnel on the port.')
nasaStatSpBcastTunnelCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpBcastTunnelCnt.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpBcastTunnelCnt.setDescription('The number of packet in for broadcast tunnel on the port.')
nasaStatSpBcastTunnelToMp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpBcastTunnelToMp.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpBcastTunnelToMp.setDescription('The number of packet sent to MP for broadcast tunnel on the port.')
nasaStatSpBcastTunnelToIsd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpBcastTunnelToIsd.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpBcastTunnelToIsd.setDescription('The number of packet sent to ISD for broadcast tunnel on the port.')
nasaStatSpRurlTunnelCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpRurlTunnelCnt.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpRurlTunnelCnt.setDescription('The number of RURL tunnel count on the port.')
nasaStatSpIpDatagramCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpIpDatagramCnt.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpIpDatagramCnt.setDescription('The number of IP datagram tunnel count on the port.')
nasaStatSpCliRedirectCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpCliRedirectCnt.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpCliRedirectCnt.setDescription('The number of client redirect tunnel count on the port.')
nasaStatSpInvalidVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpInvalidVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpInvalidVersion.setDescription('The number of invalid NA/SA version packet in on the port.')
nasaStatSpAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpAckTx.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpAckTx.setDescription('The number of ack packet sent at link level on the port.')
nasaStatSpAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpAckRx.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpAckRx.setDescription('The number of ack packet received at link level on the port.')
nasaStatSpAckAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpAckAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpAckAlloc.setDescription('The number of ack packet allocated at link level on the port.')
nasaStatSpAckFree = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpAckFree.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpAckFree.setDescription('The number of ack packet freed at link level on the port.')
nasaStatSpAllocAckFail = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpAllocAckFail.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpAllocAckFail.setDescription('The number of allocated ack packet failed at link level on the port.')
nasaStatSpAllocFrmFail = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpAllocFrmFail.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpAllocFrmFail.setDescription('The number of allocated data packet failed at link level on the port.')
nasaStatSpRexmitFail = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpRexmitFail.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpRexmitFail.setDescription('The number of re-transmit failed at link level on the port.')
nasaStatSpInvalidIsd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpInvalidIsd.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpInvalidIsd.setDescription('The number of packet form unknown ISD at link level on the port.')
nasaStatSpInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpInvalidPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatSpInvalidPkts.setDescription('The number of invalid packet at link level on the port.')
nasaMpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2))
nasaStatMpTotalRx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpTotalRx.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatMpTotalRx.setDescription('The number of messages received on MP side.')
nasaStatMpTotalTx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpTotalTx.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatMpTotalTx.setDescription('The number of messages transmitted on MP side.')
nasaStatMpBadCksum = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpBadCksum.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatMpBadCksum.setDescription('The number of messages received with bad checksum on MP side.')
nasaStatMpInvalidRx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpInvalidRx.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatMpInvalidRx.setDescription('The number of invalid messages received on MP side.')
nasaStatMpPingRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpPingRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatMpPingRequests.setDescription('The number of broadcast pings received on MP side.')
nasaStatMpPingResponses = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpPingResponses.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatMpPingResponses.setDescription('The number broadcast ping responses transmitted on MP side.')
nasaStatMpRegRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpRegRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatMpRegRequests.setDescription('The number registration requests received on MP side.')
nasaStatMpCapResponses = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpCapResponses.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatMpCapResponses.setDescription('The number of capability responses transmitted on MP side.')
nasaStatMpRegConfirmations = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpRegConfirmations.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatMpRegConfirmations.setDescription('The number of registration confirmations received on MP side.')
nasaStatMpUnregRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpUnregRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatMpUnregRequests.setDescription('The number of unregistration requests received on MP side.')
nasaStatMpHealthRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpHealthRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatMpHealthRequests.setDescription('The number of heartbeat requests transmitted on MP side.')
nasaStatMpHealthResponses = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpHealthResponses.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatMpHealthResponses.setDescription('The number of heartbeat responses received on MP side.')
nasaStatMpCmdRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpCmdRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatMpCmdRequests.setDescription('The number NASA CLI cmd requests received on MP side.')
nasaStatMpCmdResponses = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpCmdResponses.setStatus('mandatory')
if mibBuilder.loadTexts: nasaStatMpCmdResponses.setDescription('The number NASA CLI cmd responses received on MP side.')
dnsSlbStatTCPQueries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 25, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSlbStatTCPQueries.setStatus('mandatory')
if mibBuilder.loadTexts: dnsSlbStatTCPQueries.setDescription('Total number of TCP DNS queries.')
dnsSlbStatUDPQueries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 25, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSlbStatUDPQueries.setStatus('mandatory')
if mibBuilder.loadTexts: dnsSlbStatUDPQueries.setDescription('Total number of UDP DNS queries.')
dnsSlbStatInvalidQueries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 25, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSlbStatInvalidQueries.setStatus('mandatory')
if mibBuilder.loadTexts: dnsSlbStatInvalidQueries.setDescription('Total number of invalid DNS queries.')
dnsSlbStatMultipleQueries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 25, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSlbStatMultipleQueries.setStatus('mandatory')
if mibBuilder.loadTexts: dnsSlbStatMultipleQueries.setDescription('Total number of multiple DNS queries.')
dnsSlbStatDnameParseErrors = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 25, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSlbStatDnameParseErrors.setStatus('mandatory')
if mibBuilder.loadTexts: dnsSlbStatDnameParseErrors.setDescription('Total number of domain name parse errors.')
dnsSlbStatFailedMatches = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 25, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSlbStatFailedMatches.setStatus('mandatory')
if mibBuilder.loadTexts: dnsSlbStatFailedMatches.setDescription('Total number of failed real server name matches.')
dnsSlbStatInternalErrors = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 25, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSlbStatInternalErrors.setStatus('mandatory')
if mibBuilder.loadTexts: dnsSlbStatInternalErrors.setDescription('Total number of DNS parsing internal errors.')
slbFailOverInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1), )
if mibBuilder.loadTexts: slbFailOverInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbFailOverInfoTable.setDescription('The table of switch fail-over run-time status.')
slbFailOverInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbFailOverInfoIndex"))
if mibBuilder.loadTexts: slbFailOverInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbFailOverInfoEntry.setDescription('A row in the switch fail-over information table.')
slbFailOverInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbFailOverInfoIndex.setDescription('The index of switch fail-over information table.')
slbFailOverInfoPrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoPrimaryIp.setStatus('mandatory')
if mibBuilder.loadTexts: slbFailOverInfoPrimaryIp.setDescription('IP address of the primary switch.')
slbFailOverInfoPrimaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoPrimaryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: slbFailOverInfoPrimaryStatus.setDescription('The current operational status of the primary switch.')
slbFailOverInfoPrimaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoPrimaryState.setStatus('mandatory')
if mibBuilder.loadTexts: slbFailOverInfoPrimaryState.setDescription('The current operational state of the primary switch.')
slbFailOverInfoSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoSecondaryIp.setStatus('mandatory')
if mibBuilder.loadTexts: slbFailOverInfoSecondaryIp.setDescription('IP address of the secondary switch.')
slbFailOverInfoSecondaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoSecondaryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: slbFailOverInfoSecondaryStatus.setDescription('The current operational status of the secondary switch.')
slbFailOverInfoSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoSecondaryState.setStatus('mandatory')
if mibBuilder.loadTexts: slbFailOverInfoSecondaryState.setDescription('The current operational state of the secondary switch.')
slbRealServerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2), )
if mibBuilder.loadTexts: slbRealServerInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbRealServerInfoTable.setDescription('The table of real server run-time information.')
slbRealServerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbRealServerInfoIndex"))
if mibBuilder.loadTexts: slbRealServerInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbRealServerInfoEntry.setDescription('A row in the real server information table.')
slbRealServerInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbRealServerInfoIndex.setDescription('The real server index')
slbRealServerInfoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: slbRealServerInfoIpAddr.setDescription('IP address of the real server.')
slbRealServerMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: slbRealServerMacAddr.setDescription('The MAC address of the real server.')
slbRealServerInfoSwitchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoSwitchPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbRealServerInfoSwitchPort.setDescription('The switch port that the real server is connected to.')
slbRealServerInfoHealthLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("layer3", 2), ("layer4", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoHealthLayer.setStatus('mandatory')
if mibBuilder.loadTexts: slbRealServerInfoHealthLayer.setDescription('The OSI layer at whitch real server functionality is verified.')
slbRealServerInfoOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("overflow", 1), ("no-overflow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: slbRealServerInfoOverflow.setDescription('The overflow state of the real server.')
slbRealServerInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("running", 2), ("failed", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoState.setStatus('mandatory')
if mibBuilder.loadTexts: slbRealServerInfoState.setDescription('The state of the real server.')
nasaIsdInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 3), )
if mibBuilder.loadTexts: nasaIsdInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: nasaIsdInfoTable.setDescription('The table of NASA ISD run-time information.')
nasaIsdInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 3, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "nasaIsdInfoIndex"))
if mibBuilder.loadTexts: nasaIsdInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nasaIsdInfoEntry.setDescription('A row in the real server information table.')
nasaIsdInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaIsdInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nasaIsdInfoIndex.setDescription('The ISD index')
nasaIsdInfoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaIsdInfoIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nasaIsdInfoIpAddr.setDescription('IP address of the ISD.')
nasaIsdMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 3, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaIsdMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nasaIsdMacAddr.setDescription('The MAC address of the ISD.')
nasaIsdInfoSwitchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaIsdInfoSwitchPort.setStatus('mandatory')
if mibBuilder.loadTexts: nasaIsdInfoSwitchPort.setDescription('The switch port that the ISD is connected to.')
nasaIsdInfoGdi = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaIsdInfoGdi.setStatus('mandatory')
if mibBuilder.loadTexts: nasaIsdInfoGdi.setDescription('VLAN ID of the ISD.')
nasaIsdInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("isd-invalid", 1), ("isd-unregistered", 2), ("isd-access", 3), ("isd-up", 4), ("isd-down", 5), ("isd-mip", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaIsdInfoState.setStatus('mandatory')
if mibBuilder.loadTexts: nasaIsdInfoState.setDescription('The current state of the ISD.')
nasaIsdInfoStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaIsdInfoStateChange.setStatus('mandatory')
if mibBuilder.loadTexts: nasaIsdInfoStateChange.setDescription('The number of ISD state transitions from up to down.')
operSlbPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 1), )
if mibBuilder.loadTexts: operSlbPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: operSlbPortTable.setDescription('The table of ports that the Oper commands apply to.')
operSlbPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "operSlbPortIndex"))
if mibBuilder.loadTexts: operSlbPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: operSlbPortEntry.setDescription('A row in the operSlbPortTable ')
operSlbPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operSlbPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: operSlbPortIndex.setDescription('The switch port number.')
operSlbPortClrSessionTab = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operSlbPortClrSessionTab.setStatus('mandatory')
if mibBuilder.loadTexts: operSlbPortClrSessionTab.setDescription('This an action object to clear session buinding table for the specified port. ok(1) is returned when read.')
slbOperRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 4, 1), )
if mibBuilder.loadTexts: slbOperRealServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbOperRealServerTable.setDescription('The table of real servers.')
slbOperRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 4, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbOperRealServerIndex"))
if mibBuilder.loadTexts: slbOperRealServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbOperRealServerEntry.setDescription('A row in the slbOperRealServerTable ')
slbOperRealServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbOperRealServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbOperRealServerIndex.setDescription('The index for the real server.')
slbOperRealServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("cookiepersistent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbOperRealServerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: slbOperRealServerStatus.setDescription("This an action object which is used to temporarily enable/disable a real server. The real server will be returned to its configured operational mode when the switch is reset. Setting the value to 'cookiepersistant' allows cookie persistent HTTP 1.0 sessions when the real server is offline.")
slbOperConfigSync = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("sync", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbOperConfigSync.setStatus('mandatory')
if mibBuilder.loadTexts: slbOperConfigSync.setDescription("When set to a value of 'sync(2)' it synchronizes the SLB, filter and VRRP configuration on a peer switch. To take effect, peers must be configured on the switches and the administrator password on the switches must be identical. 'ok(1)' is returned when the object os read.")
mibBuilder.exportSymbols("ALTEON-TS-LAYER4-MIB", fltNewCfgSrcIp=fltNewCfgSrcIp, gslbCurCfgRemSiteIndx=gslbCurCfgRemSiteIndx, slbNewCfgGroupRealServers=slbNewCfgGroupRealServers, gslbCurCfgNetworkTable=gslbCurCfgNetworkTable, gslbNewCfgNetworkTable=gslbNewCfgNetworkTable, slbCurCfgRealServerWeight=slbCurCfgRealServerWeight, rurlInfoStatFINRSTSessSetup=rurlInfoStatFINRSTSessSetup, slbNewCfgUrlExpTable=slbNewCfgUrlExpTable, radiusAcctBadReqs=radiusAcctBadReqs, rurlMaintStatRSEQBufAllocs=rurlMaintStatRSEQBufAllocs, slbNewCfgRealServerCookie=slbNewCfgRealServerCookie, slbCurCfgRealServerPingInterval=slbCurCfgRealServerPingInterval, fltCurCfgAclTcpRst=fltCurCfgAclTcpRst, fltNewCfgSrcMac=fltNewCfgSrcMac, gslbCurCfgGenExternal=gslbCurCfgGenExternal, slbCurCfgUrlRedirCookieOrigSrv=slbCurCfgUrlRedirCookieOrigSrv, slbCurCfgSyncSfo=slbCurCfgSyncSfo, slbNewCfgVirtServiceDirServerRtn=slbNewCfgVirtServiceDirServerRtn, slbCurCfgImask=slbCurCfgImask, slbCurCfgGroupMetric=slbCurCfgGroupMetric, rurlMaintStatRBUFRetransmit=rurlMaintStatRBUFRetransmit, slbNewCfgGroupRemoveServer=slbNewCfgGroupRemoveServer, rurlErrorStatBuf=rurlErrorStatBuf, tpcpAddSessReqsFailsQFull=tpcpAddSessReqsFailsQFull, rurlInfoStatServerSYNsRetxErrors=rurlInfoStatServerSYNsRetxErrors, slbStatGroupCurrSessions=slbStatGroupCurrSessions, nasaStatSpPortIndex=nasaStatSpPortIndex, slbRealServerInfoTable=slbRealServerInfoTable, slbNewCfgVirtServicesTable=slbNewCfgVirtServicesTable, slbStatPortMaintNonTcpFrames=slbStatPortMaintNonTcpFrames, slbCurCfgRealServerProxy=slbCurCfgRealServerProxy, rurlInfoStatL7SessionReuse=rurlInfoStatL7SessionReuse, slbUrlLbPathTableMaxSize=slbUrlLbPathTableMaxSize, rurlMaintStatHighRdirPORTEntries=rurlMaintStatHighRdirPORTEntries, gslbStatRemRealServerDnsHandoffs=gslbStatRemRealServerDnsHandoffs, fltNewCfgUrlBwmDelete=fltNewCfgUrlBwmDelete, slbNewCfgVirtServerBwmContract=slbNewCfgVirtServerBwmContract, gslbNewCfgRemSiteTableEntry=gslbNewCfgRemSiteTableEntry, slbIncorrectVirtServs=slbIncorrectVirtServs, slbCurCfgVirtServerResponseCount=slbCurCfgVirtServerResponseCount, slbCurCfgRadiusAuthenString=slbCurCfgRadiusAuthenString, slbCurCfgGroupRealThreshold=slbCurCfgGroupRealThreshold, fltCurCfgRangeLowSrcPort=fltCurCfgRangeLowSrcPort, fltCurCfgDstIpMac=fltCurCfgDstIpMac, slbStatPortRealServerPortIndex=slbStatPortRealServerPortIndex, gslbStatMaintInGoodSiteUpdates=gslbStatMaintInGoodSiteUpdates, slbNewCfgWaphcSndContent=slbNewCfgWaphcSndContent, fltNewCfgAction=fltNewCfgAction, urlStatRedOrigSrvs=urlStatRedOrigSrvs, slbNewCfgVirtServerCoffset=slbNewCfgVirtServerCoffset, slbNewCfgRealServerType=slbNewCfgRealServerType, fltCurCfgCache=fltCurCfgCache, slbNewCfgUrlExpTableEntry=slbNewCfgUrlExpTableEntry, fltCurCfgState=fltCurCfgState, fltCurCfgSrcIpMask=fltCurCfgSrcIpMask, slbStatGroupEntry=slbStatGroupEntry, slbCurCfgPortSlbPipState=slbCurCfgPortSlbPipState, rurlMaintStatResetRxmit=rurlMaintStatResetRxmit, fltNewCfgAclTcpRst=fltNewCfgAclTcpRst, rtspUrlExpTableMaxSize=rtspUrlExpTableMaxSize, slbNewCfgPortTable=slbNewCfgPortTable, slbNewCfgVirtServiceHttpSlbOption=slbNewCfgVirtServiceHttpSlbOption, fltCurCfgAclIpOption=fltCurCfgAclIpOption, slbCurCfgGroupBackupGroup=slbCurCfgGroupBackupGroup, slbNewCfgPortEntry=slbNewCfgPortEntry, slbRealServerInfoSwitchPort=slbRealServerInfoSwitchPort, slbCurCfgRealServRealPort=slbCurCfgRealServRealPort, slbCurCfgVirtServerDname=slbCurCfgVirtServerDname, slbOper=slbOper, slbCurCfgUrlRedirHeader=slbCurCfgUrlRedirHeader, slbNewCfgSyncPort=slbNewCfgSyncPort, gslbCurCfgRemSiteTable=gslbCurCfgRemSiteTable, fltCurCfgPortFiltBmap=fltCurCfgPortFiltBmap, rtspCurCfgUrlExpTableEntry=rtspCurCfgUrlExpTableEntry, fltCurCfgLog=fltCurCfgLog, rurlErrorStatProto=rurlErrorStatProto, slbStatGroupHCOctetsLow32=slbStatGroupHCOctetsLow32, dnsSlbStatInternalErrors=dnsSlbStatInternalErrors, nasaIsdInfoTable=nasaIsdInfoTable, slbNewCfgVirtServerUrlHashLen=slbNewCfgVirtServerUrlHashLen, slbFailOverInfoSecondaryStatus=slbFailOverInfoSecondaryStatus, slbCurCfgPortProxyIpAddr=slbCurCfgPortProxyIpAddr, fltNewCfgProtocol=fltNewCfgProtocol, slbCurCfgWaphcSndContent=slbCurCfgWaphcSndContent, slbCurCfgVirtServiceFtpParsing=slbCurCfgVirtServiceFtpParsing, slbCurCfgSyncPort=slbCurCfgSyncPort, slbCurCfgRealServerEntry=slbCurCfgRealServerEntry, slbCurCfgRealServerSuccRetry=slbCurCfgRealServerSuccRetry, slbCurCfgFailOverRouteSupply=slbCurCfgFailOverRouteSupply, slbStatVServerHeaderTotalSessions=slbStatVServerHeaderTotalSessions, slbNewCfgUrlExpDelete=slbNewCfgUrlExpDelete, slbNewCfgMmask=slbNewCfgMmask, slbNewCfgGroupVipHealthCheck=slbNewCfgGroupVipHealthCheck, slbNewCfgUrlRedirHeader=slbNewCfgUrlRedirHeader, slbNewCfgWapTpcp=slbNewCfgWapTpcp, slbCurCfgFailOverTable=slbCurCfgFailOverTable, slbNewCfgUrlLbPathTableEntry=slbNewCfgUrlLbPathTableEntry, fltCurCfgTcpAck=fltCurCfgTcpAck, rurlStats=rurlStats, slbNewCfgGroupEntry=slbNewCfgGroupEntry, fltNewCfgUrlRedir=fltNewCfgUrlRedir, fltNewCfgAclIcmp=fltNewCfgAclIcmp, slbCurCfgVirtServerCoffset=slbCurCfgVirtServerCoffset, slbNewCfgVirtServerHttpHdrName=slbNewCfgVirtServerHttpHdrName, slbCurCfgGroupIndex=slbCurCfgGroupIndex, nasaStatSpInvalidPkts=nasaStatSpInvalidPkts, slbCurCfgPortSlbNasaState=slbCurCfgPortSlbNasaState, fltNewCfgAclIpTosMask=fltNewCfgAclIpTosMask, nasaStatSpReqSessCnt=nasaStatSpReqSessCnt, slbCurCfgVirtServiceUDPBalance=slbCurCfgVirtServiceUDPBalance, fltCurCfgPortState=fltCurCfgPortState, slbCurCfgVirtServicePBind=slbCurCfgVirtServicePBind, gslbNetwork=gslbNetwork, fltCurCfgRangeHighSrcPort=fltCurCfgRangeHighSrcPort, rtspStatConnDenied=rtspStatConnDenied, tpcpAddSessReqsFailsSPDead=tpcpAddSessReqsFailsSPDead, wapRequestToWrongSP=wapRequestToWrongSP, nasaStatMpRegRequests=nasaStatMpRegRequests, gslbNewCfgNetworkSourceIp=gslbNewCfgNetworkSourceIp, gslbNewCfgGenHttpRedirect=gslbNewCfgGenHttpRedirect, rurlInfoStatFreeRingCalls=rurlInfoStatFreeRingCalls, slbNewCfgRurlDportLowPort=slbNewCfgRurlDportLowPort, gslbCurCfgNetworkVip1=gslbCurCfgNetworkVip1, slbRealServerInfoEntry=slbRealServerInfoEntry, slbNewCfgRealServerAddUrl=slbNewCfgRealServerAddUrl, slbStatMaintBackupServActs=slbStatMaintBackupServActs, gslbNewCfgGenUsern=gslbNewCfgGenUsern, slbNewCfgRurlDportTableEntry=slbNewCfgRurlDportTableEntry, urlStatSlbPathTable=urlStatSlbPathTable, slbStatVServerHCOctets=slbStatVServerHCOctets, rurlInfoStatZeroContentLen=rurlInfoStatZeroContentLen, slbCurCfgRealServerTable=slbCurCfgRealServerTable, gslbNewCfgGenDnsLocalPref=gslbNewCfgGenDnsLocalPref, slbUrlRedir=slbUrlRedir, fltCurCfgPortTableEntry=fltCurCfgPortTableEntry, slbCurCfgIsdRetry=slbCurCfgIsdRetry, slbCurCfgUrlRedirUriHashLength=slbCurCfgUrlRedirUriHashLength, fltNewCfgAclIpTosNew=fltNewCfgAclIpTosNew, nasaStatMpCapResponses=nasaStatMpCapResponses, rtspNewCfgUrlExpression=rtspNewCfgUrlExpression, fltNewCfgUrlBwmUrlId=fltNewCfgUrlBwmUrlId, slbNewCfgPortSlbHotStandby=slbNewCfgPortSlbHotStandby, slbNewCfgIsdRestr=slbNewCfgIsdRestr, fltNewCfgState=fltNewCfgState, rurlInfoStatExceedBufLen=rurlInfoStatExceedBufLen, rurlInfoStatClientReTXSYNsSeen=rurlInfoStatClientReTXSYNsSeen, slbNewCfgVirtServerDname=slbNewCfgVirtServerDname, fltNewCfgDstIp=fltNewCfgDstIp, slbNewCfgWaphcRcvContent=slbNewCfgWaphcRcvContent, gslbStatMaintInBadSiteUpdates=gslbStatMaintInBadSiteUpdates, nasaStatSpSessCharCnt=nasaStatSpSessCharCnt, slbStatPortMaintEntry=slbStatPortMaintEntry, slbOperRealServerIndex=slbOperRealServerIndex, dnsSlbStatUDPQueries=dnsSlbStatUDPQueries, fltNewCfgName=fltNewCfgName, fltNewCfgPortRemFiltRule=fltNewCfgPortRemFiltRule, nasaStatSpCliRedirectCnt=nasaStatSpCliRedirectCnt, dynSLBRealServerTable=dynSLBRealServerTable, nasaStatMpCmdRequests=nasaStatMpCmdRequests, slbCurCfgFailOverState=slbCurCfgFailOverState, slbUrlBwmTableMaxSize=slbUrlBwmTableMaxSize, gslbCurCfgNetworkIndx=gslbCurCfgNetworkIndx, urlStatSlbPathIndex=urlStatSlbPathIndex, gslbCurCfgGenEip=gslbCurCfgGenEip, rurlMaintStatRBUFBufAllocs=rurlMaintStatRBUFBufAllocs, tpcpAddSessReqs=tpcpAddSessReqs, nasaStats=nasaStats, slbNewCfgUrlLbPathIndex=slbNewCfgUrlLbPathIndex, radiusAcctWrapReqs=radiusAcctWrapReqs, rurlErrorStatDma=rurlErrorStatDma, nasaStatSpInvalidIsd=nasaStatSpInvalidIsd, slbRurl=slbRurl, slbWaphc=slbWaphc, urlStatRedNoCache=urlStatRedNoCache, nasaStatSpTable=nasaStatSpTable, fltNewCfgCache=fltNewCfgCache, fltCurCfgUrlBwmFltIndex=fltCurCfgUrlBwmFltIndex, slbNewCfgRealServerSuccRetry=slbNewCfgRealServerSuccRetry, slbNewCfgIsdNumber=slbNewCfgIsdNumber, slbVirtServerTableMaxSize=slbVirtServerTableMaxSize, rurlMaintStatHighRdirIPEntries=rurlMaintStatHighRdirIPEntries, urlStatRedNonGets=urlStatRedNonGets, rurlInfoStatPSHSessSetup=rurlInfoStatPSHSessSetup, globalSLB=globalSLB, slbNewCfgVirtServerCname=slbNewCfgVirtServerCname, slbNewCfgSyncVrrp=slbNewCfgSyncVrrp, slbStatVServerTotalSessions=slbStatVServerTotalSessions, nasaIsdInfoIpAddr=nasaIsdInfoIpAddr, slbCurCfgVirtServerUriCookie=slbCurCfgVirtServerUriCookie, slbNewCfgVirtServerUriCookie=slbNewCfgVirtServerUriCookie, slbCurCfgWaphcOffset=slbCurCfgWaphcOffset, gslbNewCfgGenDnsTTL=gslbNewCfgGenDnsTTL, gslbCurCfgGenMinco=gslbCurCfgGenMinco, gslbCurCfgGenWeight=gslbCurCfgGenWeight, dynSLBRealServerPortNum=dynSLBRealServerPortNum, rurlMaintStatRBUFChanged=rurlMaintStatRBUFChanged, slbCurCfgVirtServerIpAddress=slbCurCfgVirtServerIpAddress, slbFailOverInfoSecondaryState=slbFailOverInfoSecondaryState, dynamicSLB=dynamicSLB, fltCurCfgAclTcpAck=fltCurCfgAclTcpAck, urlStatRedCookie=urlStatRedCookie, rtspStatUDPStreams=rtspStatUDPStreams, fltCurCfgSrcMac=fltCurCfgSrcMac, rtspNewCfgUrlExpTable=rtspNewCfgUrlExpTable, slbCurCfgGroupHealthCheckUrl=slbCurCfgGroupHealthCheckUrl, slbNewCfgRealServerFailRetry=slbNewCfgRealServerFailRetry, tcpLimitStatHoldDowns=tcpLimitStatHoldDowns, slbNewCfgUrlLbPathString=slbNewCfgUrlLbPathString, gslbGeneral=gslbGeneral, slbRealServerMacAddr=slbRealServerMacAddr, slbStatPortMaintVMAdiscards=slbStatPortMaintVMAdiscards, slbStatPortMaintBindingFails=slbStatPortMaintBindingFails, fltCfgTableMaxSize=fltCfgTableMaxSize, slbStatPortRealServerEntry=slbStatPortRealServerEntry, slbNewCfgVirtServiceBwmContract=slbNewCfgVirtServiceBwmContract, nasaStatSpSessUpdCnt=nasaStatSpSessUpdCnt, rurlInfoStatClientSYNACKsSent=rurlInfoStatClientSYNACKsSent, slbNewCfgVirtServerClength=slbNewCfgVirtServerClength, filterStats=filterStats, slbNewCfgVirtServiceDBind=slbNewCfgVirtServiceDBind, slbStatGroupTable=slbStatGroupTable, slbStatVServerCookieInserts=slbStatVServerCookieInserts, slbNewCfgRurlDportIndex=slbNewCfgRurlDportIndex, slbNewCfgVirtServicePBind=slbNewCfgVirtServicePBind, operSlbPortTable=operSlbPortTable, rurlMaintStatCurRdirPORTEntries=rurlMaintStatCurRdirPORTEntries, slbPeerTableMaxSize=slbPeerTableMaxSize, nasaStatSpRexmitFail=nasaStatSpRexmitFail, slbNewCfgVirtServiceHttpSlb=slbNewCfgVirtServiceHttpSlb, tcpLimitStats=tcpLimitStats, slbNewCfgUrlBwmVirtServIndex=slbNewCfgUrlBwmVirtServIndex, nasaStatSpAckAlloc=nasaStatSpAckAlloc, rurlErrorStatUnpack=rurlErrorStatUnpack, slbNewCfgFastage=slbNewCfgFastage, slbCurCfgDirectMode=slbCurCfgDirectMode, slbStatGroupHCOctets=slbStatGroupHCOctets, rtspStatAllocFails=rtspStatAllocFails, nasaMpStats=nasaMpStats, gslbCurCfgGenDnsLocalPref=gslbCurCfgGenDnsLocalPref, gslbNewCfgGenDnsHandoff=gslbNewCfgGenDnsHandoff, rurlInfoStatFramePassThru=rurlInfoStatFramePassThru, slbNewCfgRealServerMaxConns=slbNewCfgRealServerMaxConns, fltNewCfgDstMac=fltNewCfgDstMac, slbStatPortMaintRealServerNoAvails=slbStatPortMaintRealServerNoAvails, slbFailOverInfoPrimaryIp=slbFailOverInfoPrimaryIp, rurlMaintStatConnectRxmit=rurlMaintStatConnectRxmit, gslbNewCfgGenLookups=gslbNewCfgGenLookups, radiusAcctStartReqs=radiusAcctStartReqs, fltNewCfgDelete=fltNewCfgDelete, radiusAcctDeleteSessionReqs=radiusAcctDeleteSessionReqs, nasaIsdInfoIndex=nasaIsdInfoIndex, slbNewCfgSyncSfoUpdatePeriod=slbNewCfgSyncSfoUpdatePeriod, gslbRemSiteTableMaxSize=gslbRemSiteTableMaxSize, ftpSlbStatTotal=ftpSlbStatTotal)
mibBuilder.exportSymbols("ALTEON-TS-LAYER4-MIB", slbCurCfgSyncSfoUpdatePeriod=slbCurCfgSyncSfoUpdatePeriod, dnsCurCfgSecondaryIpAddr=dnsCurCfgSecondaryIpAddr, fltCurCfgDstIpMask=fltCurCfgDstIpMask, dnsNewCfgDomainName=dnsNewCfgDomainName, fltNewCfgLayer7DenyRemUrl=fltNewCfgLayer7DenyRemUrl, radiusAcctReqFailsQFull=radiusAcctReqFailsQFull, slbCurCfgPeerTable=slbCurCfgPeerTable, slbCurCfgIsdInterval=slbCurCfgIsdInterval, fltCurCfgRedirGroup=fltCurCfgRedirGroup, slbCurCfgUrlLbPathIndex=slbCurCfgUrlLbPathIndex, slbCurCfgVirtualServerEntry=slbCurCfgVirtualServerEntry, slbNewCfgRealServPortIndex=slbNewCfgRealServPortIndex, radiusAcctReqFailsDMAFails=radiusAcctReqFailsDMAFails, ftpNatStatTotal=ftpNatStatTotal, nasaStatSpCtlTunnelInvalidPkt=nasaStatSpCtlTunnelInvalidPkt, slbOperConfigSync=slbOperConfigSync, slbNewCfgRealServPortTable=slbNewCfgRealServPortTable, slbCurCfgWaphcWSPPort=slbCurCfgWaphcWSPPort, rurlInfoStatServerSYNsSent=rurlInfoStatServerSYNsSent, gslbCurCfgGenLookupTimeout=gslbCurCfgGenLookupTimeout, gslbNewCfgRemSiteTable=gslbNewCfgRemSiteTable, gslbStatRemRealServerIndex=gslbStatRemRealServerIndex, slbNewCfgVirtServiceHttpSlb2=slbNewCfgVirtServiceHttpSlb2, tcpStatCurConns=tcpStatCurConns, slbCurCfgPortIndex=slbCurCfgPortIndex, slbStatVServerHeaderHits=slbStatVServerHeaderHits, urlRedirStats=urlRedirStats, slbFailOverInfoPrimaryStatus=slbFailOverInfoPrimaryStatus, slbCurCfgTcpHoldDuration=slbCurCfgTcpHoldDuration, nasaStatMpHealthResponses=nasaStatMpHealthResponses, fltCurCfgDstIp=fltCurCfgDstIp, fltNewCfgClientProxy=fltNewCfgClientProxy, gslbCurCfgGenOne=gslbCurCfgGenOne, fltNewCfgRurl=fltNewCfgRurl, gslbCurCfgGenHttpRedirect=gslbCurCfgGenHttpRedirect, slbNewCfgVirtServerLayer3Only=slbNewCfgVirtServerLayer3Only, fltCurCfgRurl=fltCurCfgRurl, slbNewCfgWapDebug=slbNewCfgWapDebug, fltCurCfgWapRadiusSnoop=fltCurCfgWapRadiusSnoop, fltCurCfgNasa=fltCurCfgNasa, slbStatVServerHCOctetsHigh32=slbStatVServerHCOctetsHigh32, fltStatFltFirings=fltStatFltFirings, gslbNewCfgRemSitePrimaryIp=gslbNewCfgRemSitePrimaryIp, rtspCurCfgUrlExpression=rtspCurCfgUrlExpression, slbStatPortMaintCurBindings=slbStatPortMaintCurBindings, slbStatPortMaintPortIndex=slbStatPortMaintPortIndex, rurlMaintStatOrgServerHits=rurlMaintStatOrgServerHits, slbOperRealServerTable=slbOperRealServerTable, nasaStatSpSessDelCnt=nasaStatSpSessDelCnt, fltCurCfgPortIndx=fltCurCfgPortIndx, fltCurCfgAclIpTosNew=fltCurCfgAclIpTosNew, gslbCurCfgRemSiteUpdate=gslbCurCfgRemSiteUpdate, fltCurCfgIdslbHash=fltCurCfgIdslbHash, gslbCurCfgGenRemSiteUpdateInterval=gslbCurCfgGenRemSiteUpdateInterval, slbNewCfgPortProxyIpAddr=slbNewCfgPortProxyIpAddr, slbStatRServerCurrSessions=slbStatRServerCurrSessions, nasaStatSpIpDatagramCnt=nasaStatSpIpDatagramCnt, synAttackNewCfgInterval=synAttackNewCfgInterval, gslbNewCfgRemSiteSecondaryIp=gslbNewCfgRemSiteSecondaryIp, slbNewCfgRealServerExcludeStr=slbNewCfgRealServerExcludeStr, tpcpAddSessReqsMaxEntriesInUse=tpcpAddSessReqsMaxEntriesInUse, nasaStatSpSessAddCnt=nasaStatSpSessAddCnt, slbCurCfgRurlDportLowPort=slbCurCfgRurlDportLowPort, slbStatRServerEntry=slbStatRServerEntry, fltNewCfgDstIpMask=fltNewCfgDstIpMask, slbNewCfgUrlBwmUrlId=slbNewCfgUrlBwmUrlId, slbCurCfgVirtServicesTable=slbCurCfgVirtServicesTable, slbCurCfgVirtServiceRemapUDPFrags=slbCurCfgVirtServiceRemapUDPFrags, slbCurCfgVirtServerLayer3Only=slbCurCfgVirtServerLayer3Only, slbCurCfgVirtServerCExpire=slbCurCfgVirtServerCExpire, fltCurCfgUrlBwmUrlId=fltCurCfgUrlBwmUrlId, gslbNewCfgRemSiteDelete=gslbNewCfgRemSiteDelete, nasaStatMpInvalidRx=nasaStatMpInvalidRx, slbCurCfgPeerIpAddr=slbCurCfgPeerIpAddr, fltCurCfgFwlb=fltCurCfgFwlb, slbStatRServerTotalSessions=slbStatRServerTotalSessions, slbStatPortMaintIncorrectVIPs=slbStatPortMaintIncorrectVIPs, slbCurCfgVirtServerCname=slbCurCfgVirtServerCname, slbNewCfgUrlLbPathDelete=slbNewCfgUrlLbPathDelete, slbNewCfgRurlDportHighPort=slbNewCfgRurlDportHighPort, slbNewCfgRurlGenDeny=slbNewCfgRurlGenDeny, slbStatPortMaintCurBindings4Seconds=slbStatPortMaintCurBindings4Seconds, gslbCurCfgNetworkSourceIp=gslbCurCfgNetworkSourceIp, gslbNetworkTableMaxSize=gslbNetworkTableMaxSize, nasaStatMpPingRequests=nasaStatMpPingRequests, slbStatPortMaintTable=slbStatPortMaintTable, slbNewCfgGroupHealthCheckUrl=slbNewCfgGroupHealthCheckUrl, slbStatMaintOverflowServActs=slbStatMaintOverflowServActs, slbNewCfgGroupTable=slbNewCfgGroupTable, slbNewCfgPortSlbPipState=slbNewCfgPortSlbPipState, slbNewCfgRealServRealPort=slbNewCfgRealServRealPort, fltStatTable=fltStatTable, gslbStatRemRealServerTable=gslbStatRemRealServerTable, fltNewCfgRangeLowSrcPort=fltNewCfgRangeLowSrcPort, rurlInfoStatClientACKsIn=rurlInfoStatClientACKsIn, slbNewCfgUrlRedirNonGetOrigSrv=slbNewCfgUrlRedirNonGetOrigSrv, slbStatVServerHCOctetsLow32=slbStatVServerHCOctetsLow32, fltNewCfgAclIpTos=fltNewCfgAclIpTos, gslbCurCfgRemSiteName=gslbCurCfgRemSiteName, slbCurCfgVirtServerTable=slbCurCfgVirtServerTable, slbCurCfgSlowage=slbCurCfgSlowage, slbNewCfgUrlBwmEntry=slbNewCfgUrlBwmEntry, slbCurCfgFailOverPrimaryIp=slbCurCfgFailOverPrimaryIp, slbVirtServicesTableMaxSize=slbVirtServicesTableMaxSize, slbStatGroupHCOctetsHigh32=slbStatGroupHCOctetsHigh32, fltCurCfgName=fltCurCfgName, slbNewCfgUrlLbPathTable=slbNewCfgUrlLbPathTable, gslbCurCfgGenLookups=gslbCurCfgGenLookups, slbCurCfgUrlBwmEntry=slbCurCfgUrlBwmEntry, slbNewCfgRealServerTable=slbNewCfgRealServerTable, slbNewCfgVirtServiceRemapUDPFrags=slbNewCfgVirtServiceRemapUDPFrags, slbCurCfgPortSlbInterSwitch=slbCurCfgPortSlbInterSwitch, fltNewCfgIndx=fltNewCfgIndx, slbCurCfgLdapVersion=slbCurCfgLdapVersion, slbRealServPortTableMaxSize=slbRealServPortTableMaxSize, fltCurCfgLayer7DenyUrlBmap=fltCurCfgLayer7DenyUrlBmap, wapMaintStats=wapMaintStats, nasaStatSpBcastTunnelToIsd=nasaStatSpBcastTunnelToIsd, fltNewCfgAclTcpSyn=fltNewCfgAclTcpSyn, slbStatGroupTotalSessions=slbStatGroupTotalSessions, gslbCurCfgRemSiteState=gslbCurCfgRemSiteState, slbNewCfgSyncFilt=slbNewCfgSyncFilt, fltCurCfgAction=fltCurCfgAction, slbStatVServerEntry=slbStatVServerEntry, slbNewCfgVirtServiceDnsSlb=slbNewCfgVirtServiceDnsSlb, slbStats=slbStats, slbCurCfgVirtServiceVirtPort=slbCurCfgVirtServiceVirtPort, slbCurCfgFailOverTblEntry=slbCurCfgFailOverTblEntry, slbNewCfgFailOverRouteSupply=slbNewCfgFailOverRouteSupply, slbNewCfgFailOverSecondaryIp=slbNewCfgFailOverSecondaryIp, slbCurCfgRealGroupIdslb=slbCurCfgRealGroupIdslb, fltCurCfgLinklb=fltCurCfgLinklb, slbIncorrectVports=slbIncorrectVports, nasaStatSpBcastTunnelCnt=nasaStatSpBcastTunnelCnt, rurlMaintStatRBUFFailBufAllocs=rurlMaintStatRBUFFailBufAllocs, dnsSlbStatFailedMatches=dnsSlbStatFailedMatches, slbUrlExpTableMaxSize=slbUrlExpTableMaxSize, slbStatPortMaintFilteredDeniedFrames=slbStatPortMaintFilteredDeniedFrames, slbCurCfgUrlExpTableEntry=slbCurCfgUrlExpTableEntry, fltNewCfgPortTableEntry=fltNewCfgPortTableEntry, gslbLookup=gslbLookup, gslbNewCfgNetworkIndx=gslbNewCfgNetworkIndx, rurlMaintStatCurRdirIPPORTEntries=rurlMaintStatCurRdirIPPORTEntries, rurlErrorStats=rurlErrorStats, slbCurCfgRealServerUrlBmap=slbCurCfgRealServerUrlBmap, slbNewCfgPeerEntry=slbNewCfgPeerEntry, fltNewCfgLinklb=fltNewCfgLinklb, fltNewCfgBwmContract=fltNewCfgBwmContract, radiusAcctMaxEntriesInUse=radiusAcctMaxEntriesInUse, fltNewCfgUrlBwmTable=fltNewCfgUrlBwmTable, slbNewCfgPortIndex=slbNewCfgPortIndex, slbCurCfgRurlDportTableEntry=slbCurCfgRurlDportTableEntry, rurlMaintStats=rurlMaintStats, nasaIsdMacAddr=nasaIsdMacAddr, slbStatPortRealServerTable=slbStatPortRealServerTable, slbCurCfgRurlDportIndex=slbCurCfgRurlDportIndex, slbCurCfgVirtServerBwmContract=slbCurCfgVirtServerBwmContract, slbNewCfgVirtServiceIndex=slbNewCfgVirtServiceIndex, slbNewCfgUrlRedirCookieOrigSrv=slbNewCfgUrlRedirCookieOrigSrv, slbCurCfgRealServPortIndex=slbCurCfgRealServPortIndex, slbCurCfgWaphcWTLSPort=slbCurCfgWaphcWTLSPort, dynSLBRealServerWeight=dynSLBRealServerWeight, rurlInfoStatMiscProcess=rurlInfoStatMiscProcess, rurlInfoStatServerSYNsRetx=rurlInfoStatServerSYNsRetx, slbCurCfgGroupVipHealthCheck=slbCurCfgGroupVipHealthCheck, slbCurCfgFastage=slbCurCfgFastage, rurlMaintStatCurRdirIPEntries=rurlMaintStatCurRdirIPEntries, slbNewCfgPortSlbInterSwitch=slbNewCfgPortSlbInterSwitch, fltCurCfgVlan=fltCurCfgVlan, gslbSites=gslbSites, slbCurCfgVirtServiceHname=slbCurCfgVirtServiceHname, slbCurCfgUrlBwmVirtServiceIndex=slbCurCfgUrlBwmVirtServiceIndex, slbCurCfgUrlExpIndex=slbCurCfgUrlExpIndex, fltCurCfgSrcIpMac=fltCurCfgSrcIpMac, slbCurCfgRealServerType=slbCurCfgRealServerType, rurlMaintStatHighRSEQBufEntries=rurlMaintStatHighRSEQBufEntries, slbNewCfgPeerTable=slbNewCfgPeerTable, fltNewCfgLayer7DenyState=fltNewCfgLayer7DenyState, slbStatPortRealServerHCOctets=slbStatPortRealServerHCOctets, slbRealServerInfoState=slbRealServerInfoState, rtspNewCfgUrlExpIndex=rtspNewCfgUrlExpIndex, slbCurCfgVirtServIndex=slbCurCfgVirtServIndex, slbNewCfgGroupAddServer=slbNewCfgGroupAddServer, gslbCurCfgGenState=gslbCurCfgGenState, slbfailover=slbfailover, rurlInfoStatClientSYNsIn=rurlInfoStatClientSYNsIn, slbNewCfgGroupIndex=slbNewCfgGroupIndex, dnsNewCfgPrimaryIpAddr=dnsNewCfgPrimaryIpAddr, fltCurCfgUrlRedir=fltCurCfgUrlRedir, fltCurCfgUrlBwmEntry=fltCurCfgUrlBwmEntry, slbNewCfgVirtualServerEntry=slbNewCfgVirtualServerEntry, rurlInfoStatServerACKsSent=rurlInfoStatServerACKsSent, nasaStatSpSessRdCnt=nasaStatSpSessRdCnt, slbCurCfgVirtServerState=slbCurCfgVirtServerState, slbCurCfgUrlLbPathTable=slbCurCfgUrlLbPathTable, rurlMaintStatLastFrameCnt=rurlMaintStatLastFrameCnt, slbCurCfgRealServerBackUp=slbCurCfgRealServerBackUp, slbNewCfgUrlBwmVirtServiceIndex=slbNewCfgUrlBwmVirtServiceIndex, fltCurCfgAclTcpPsh=fltCurCfgAclTcpPsh, rurlMaintStatHTTPRedirs=rurlMaintStatHTTPRedirs, slbCurCfgPeerState=slbCurCfgPeerState, slbCurCfgFailOverSecondaryIp=slbCurCfgFailOverSecondaryIp, slbNewCfgTcpHoldDuration=slbNewCfgTcpHoldDuration, slbNewCfgVirtMatrixArch=slbNewCfgVirtMatrixArch, slbFailOverInfoIndex=slbFailOverInfoIndex, slbCurCfgGroupBackupServer=slbCurCfgGroupBackupServer, slbCurCfgGrace=slbCurCfgGrace, slbNewCfgVirtServerCExpire=slbNewCfgVirtServerCExpire, nasaStatMpRegConfirmations=nasaStatMpRegConfirmations, fltCurCfgBwmContract=fltCurCfgBwmContract, rurlInfoStatExceedFrameDepth=rurlInfoStatExceedFrameDepth, slbNewCfgVirtServiceVirtPort=slbNewCfgVirtServiceVirtPort, slbCurCfgGroupEntry=slbCurCfgGroupEntry, slbCurCfgRealServerState=slbCurCfgRealServerState, slbCurCfgPeerEntry=slbCurCfgPeerEntry, rurlMaintStatRBUFFailBufFrees=rurlMaintStatRBUFFailBufFrees, slbNewCfgGroupRealThreshold=slbNewCfgGroupRealThreshold, slbRealServerInfoIpAddr=slbRealServerInfoIpAddr, slbNewCfgSyncBwm=slbNewCfgSyncBwm, slbCurCfgUrlRedirHeaderName=slbCurCfgUrlRedirHeaderName, fltCurCfgPortTable=fltCurCfgPortTable, slbRealServerInfoOverflow=slbRealServerInfoOverflow, slbNewCfgTcpTimeWindow=slbNewCfgTcpTimeWindow, fltNewCfgNasa=fltNewCfgNasa, gslbCurCfgNetworkNetMask=gslbCurCfgNetworkNetMask, slbCurCfgIsdRestr=slbCurCfgIsdRestr, fltCurCfgAclTcpFin=fltCurCfgAclTcpFin, slbStatVServerCurrSessions=slbStatVServerCurrSessions, slbNewCfgTpcp=slbNewCfgTpcp, slbNewCfgRealServIndex=slbNewCfgRealServIndex, gslbCurCfgGenDnsHandoff=gslbCurCfgGenDnsHandoff, slbNewCfgVirtServiceCookieMode=slbNewCfgVirtServiceCookieMode, tpcpDeleteSessReqs=tpcpDeleteSessReqs, nasaStatSpCtlTunnelIn=nasaStatSpCtlTunnelIn, gslbNewCfgNetworkDelete=gslbNewCfgNetworkDelete, slbUrl=slbUrl, slbCurCfgRealServerMaxConns=slbCurCfgRealServerMaxConns, slbCurCfgFailOverIndex=slbCurCfgFailOverIndex, gslbNewCfgRemSiteName=gslbNewCfgRemSiteName, slbNewCfgRealServerIpAddr=slbNewCfgRealServerIpAddr, rurlMaintStatHighRdirIPPORTEntries=rurlMaintStatHighRdirIPPORTEntries, slbCurCfgUrlLbPathTableEntry=slbCurCfgUrlLbPathTableEntry, slbNewCfgVirtServerDelete=slbNewCfgVirtServerDelete, fltCurCfgRangeLowDstPort=fltCurCfgRangeLowDstPort, slbNewCfgGroupName=slbNewCfgGroupName, nasaStatSpCtlTunnelToMp=nasaStatSpCtlTunnelToMp, tpcpAddSessReqsEntriesInUse=tpcpAddSessReqsEntriesInUse, slbCurCfgVirtServiceHttpSlb2=slbCurCfgVirtServiceHttpSlb2, slbNewCfgLdapVersion=slbNewCfgLdapVersion, rtspStatControlConns=rtspStatControlConns, slbCurCfgRurlDportTable=slbCurCfgRurlDportTable, slbNewCfgGroupMetric=slbNewCfgGroupMetric, nasaStatMpUnregRequests=nasaStatMpUnregRequests, slbNewCfgGrace=slbNewCfgGrace)
mibBuilder.exportSymbols("ALTEON-TS-LAYER4-MIB", slbCurCfgUrlLbErrorMsg=slbCurCfgUrlLbErrorMsg, slbCurCfgVirtServiceHttpSlb=slbCurCfgVirtServiceHttpSlb, slbCurCfgUrlRedirNonGetOrigSrv=slbCurCfgUrlRedirNonGetOrigSrv, slbStatVServerHighestSessions=slbStatVServerHighestSessions, slbNewCfgVirtServerIpAddress=slbNewCfgVirtServerIpAddress, slbNewCfgPortSlbNasaState=slbNewCfgPortSlbNasaState, radiusAcctStopReqs=radiusAcctStopReqs, dnsSlbStats=dnsSlbStats, tcpStatHalfOpens=tcpStatHalfOpens, rurlInfoStatClientWrap=rurlInfoStatClientWrap, slbCurCfgPeerIndex=slbCurCfgPeerIndex, slbRurlDportTableMaxSize=slbRurlDportTableMaxSize, slbNewCfgRealServerWeight=slbNewCfgRealServerWeight, slbCurCfgSyncPip=slbCurCfgSyncPip, ftpSlbStats=ftpSlbStats, slbStatVServerTable=slbStatVServerTable, nasaStatSpEntry=nasaStatSpEntry, slbNewCfgPortDelete=slbNewCfgPortDelete, slbNewCfgRealGroupIdslb=slbNewCfgRealGroupIdslb, gslbStatRemRealServerHttpRedirs=gslbStatRemRealServerHttpRedirs, gslbDNS=gslbDNS, urlSlbStats=urlSlbStats, slbStatPortMaintIncorrectVports=slbStatPortMaintIncorrectVports, rtspNewCfgUrlExpTableEntry=rtspNewCfgUrlExpTableEntry, slbCurCfgMnet=slbCurCfgMnet, fltNewCfgTable=fltNewCfgTable, slbCurCfgPortEntry=slbCurCfgPortEntry, synAttackCurCfgThreshhold=synAttackCurCfgThreshhold, fltNewCfgSrcIpMask=fltNewCfgSrcIpMask, fltCurCfgTcpRateMaxConn=fltCurCfgTcpRateMaxConn, slbCurCfgRurlGenDeny=slbCurCfgRurlGenDeny, tpcpDeleteSessReqsMaxEntriesInUse=tpcpDeleteSessReqsMaxEntriesInUse, slbCurCfgVirtServiceBwmContract=slbCurCfgVirtServiceBwmContract, fltNewCfgPortAddFiltRule=fltNewCfgPortAddFiltRule, slbNewCfgPeerIndex=slbNewCfgPeerIndex, gslbCurCfgGenUsern=gslbCurCfgGenUsern, nasaStatMpTotalTx=nasaStatMpTotalTx, slbWap=slbWap, slbNewCfgUrlExpIndex=slbNewCfgUrlExpIndex, dnsSlbStatDnameParseErrors=dnsSlbStatDnameParseErrors, rurlMaintStatRSEQFailBufAllocs=rurlMaintStatRSEQFailBufAllocs, gslbCurCfgRemSiteTableEntry=gslbCurCfgRemSiteTableEntry, slbNewCfgPortSlbRtsState=slbNewCfgPortSlbRtsState, filtering=filtering, fltNewCfgRedirPort=fltNewCfgRedirPort, slbCurCfgSyncBwm=slbCurCfgSyncBwm, rurlMaintStatRSEQFailBufFrees=rurlMaintStatRSEQFailBufFrees, slbNewCfgFailOverPrimaryIp=slbNewCfgFailOverPrimaryIp, fltNewCfgRedirGroup=fltNewCfgRedirGroup, nasaStatSpReqSessNoIsd=nasaStatSpReqSessNoIsd, fltNewCfgAclTcpPsh=fltNewCfgAclTcpPsh, slbNewCfgVirtServerIndex=slbNewCfgVirtServerIndex, rtspStats=rtspStats, rurlInfoStatNonTypicalOffsets=rurlInfoStatNonTypicalOffsets, fltNewCfgDstIpMac=fltNewCfgDstIpMac, slbCurCfgMmask=slbCurCfgMmask, slbOperRealServerStatus=slbOperRealServerStatus, slbNewCfgWaphcWTLSPort=slbNewCfgWaphcWTLSPort, nasaStatSpInvalidVersion=nasaStatSpInvalidVersion, slbNewCfgGroupBackupServer=slbNewCfgGroupBackupServer, fltNewCfgTableEntry=fltNewCfgTableEntry, slbNewCfgUrlRedirHeaderName=slbNewCfgUrlRedirHeaderName, fltNewCfgPortTable=fltNewCfgPortTable, slbNewCfgVirtServiceRealGroup=slbNewCfgVirtServiceRealGroup, slbStatVServerHeaderMisses=slbStatVServerHeaderMisses, slbCurCfgRealServerSubmac=slbCurCfgRealServerSubmac, rurlMaintStatRBUFBufFrees=rurlMaintStatRBUFBufFrees, tpcpDeleteSessReqsStats=tpcpDeleteSessReqsStats, slbCurCfgWaphcRcvContent=slbCurCfgWaphcRcvContent, slbNewCfgWaphcWSPPort=slbNewCfgWaphcWSPPort, slbNewCfgUrlLbBwmContract=slbNewCfgUrlLbBwmContract, gslbNewCfgNetworkTableEntry=gslbNewCfgNetworkTableEntry, slbNewCfgRealServerPingInterval=slbNewCfgRealServerPingInterval, fltNewCfgFtpNatActive=fltNewCfgFtpNatActive, slbNewCfgFailOverIndex=slbNewCfgFailOverIndex, slbNewCfgVirtServiceHname=slbNewCfgVirtServiceHname, slbCurCfgUrlExpression=slbCurCfgUrlExpression, slbCurCfgRealServerName=slbCurCfgRealServerName, slbNewCfgWaphcOffset=slbNewCfgWaphcOffset, slbNewCfgRadiusAuthenString=slbNewCfgRadiusAuthenString, slbNewCfgRealServerEntry=slbNewCfgRealServerEntry, slbNewCfgImask=slbNewCfgImask, slbCurCfgRealServerCookie=slbCurCfgRealServerCookie, slbNewCfgUrlBwmContract=slbNewCfgUrlBwmContract, nasaIsdInfoGdi=nasaIsdInfoGdi, slbNewCfgRealServerBackUp=slbNewCfgRealServerBackUp, slbCurCfgVirtServiceDnsSlb=slbCurCfgVirtServiceDnsSlb, fltNewCfgUrlBwmContract=fltNewCfgUrlBwmContract, slbStatPortMaintCurBindings64Seconds=slbStatPortMaintCurBindings64Seconds, gslbNewCfgNetworkVip1=gslbNewCfgNetworkVip1, fltCurCfgClientProxy=fltCurCfgClientProxy, slbCurCfgGroupHealthCheckLayer=slbCurCfgGroupHealthCheckLayer, slb_info=slb_info, fltUrlBwmTableMaxSize=fltUrlBwmTableMaxSize, fltCurCfgIndx=fltCurCfgIndx, slbStatGroupIndex=slbStatGroupIndex, slbNewCfgFailOverTblEntry=slbNewCfgFailOverTblEntry, synAttackCurCfgInterval=synAttackCurCfgInterval, slbNewCfgGroupDelete=slbNewCfgGroupDelete, slbNewCfgVirtServerState=slbNewCfgVirtServerState, slbNewCfgRurlDportDelete=slbNewCfgRurlDportDelete, rurlInfoStatConnSpliced=rurlInfoStatConnSpliced, slbNewCfgUrlBwmDelete=slbNewCfgUrlBwmDelete, synAttackDetCfg=synAttackDetCfg, dynSLBRealServerEntry=dynSLBRealServerEntry, nasaStatSpBcastTunnelToMp=nasaStatSpBcastTunnelToMp, slbCurCfgVirtServerUrlHashLen=slbCurCfgVirtServerUrlHashLen, gslbNewCfgGenRemSiteUpdateInterval=gslbNewCfgGenRemSiteUpdateInterval, slbUrlBalance=slbUrlBalance, slbCurCfgVirtMatrixArch=slbCurCfgVirtMatrixArch, rurlInfoStatClientPktsIn=rurlInfoStatClientPktsIn, slbCurCfgUrlExpTable=slbCurCfgUrlExpTable, rurlMaintStatSessCnt=rurlMaintStatSessCnt, slbCurCfgRealServerIndex=slbCurCfgRealServerIndex, gslbNewCfgGenExternal=gslbNewCfgGenExternal, slbCurCfgGroupRealServers=slbCurCfgGroupRealServers, slbStatRServerTable=slbStatRServerTable, slbNewCfgVirtServerResponseCount=slbNewCfgVirtServerResponseCount, fltStatFltIndex=fltStatFltIndex, slbCurCfgWapDebug=slbCurCfgWapDebug, radiusAcctReqs=radiusAcctReqs, nasaStatSpAckFree=nasaStatSpAckFree, operSlbPortClrSessionTab=operSlbPortClrSessionTab, slbCurCfgVirtServerFtpParsing=slbCurCfgVirtServerFtpParsing, fltNewCfgIdslbHash=fltNewCfgIdslbHash, slbStatPortRealServerHCOctetsHigh32=slbStatPortRealServerHCOctetsHigh32, rurlMaintStatServerAcks=rurlMaintStatServerAcks, slbNewCfgVirtServIndex=slbNewCfgVirtServIndex, fltNewCfgUrlBwmFltIndex=fltNewCfgUrlBwmFltIndex, slbNewCfgPortSlbIdslbState=slbNewCfgPortSlbIdslbState, slbCurCfgUrlBwmVirtServIndex=slbCurCfgUrlBwmVirtServIndex, fltNewCfgLayer7DenyAddUrl=fltNewCfgLayer7DenyAddUrl, slbRealServerMaxSize=slbRealServerMaxSize, slbStatRServerHCOctetsLow32=slbStatRServerHCOctetsLow32, slbCurCfgRealServerFailRetry=slbCurCfgRealServerFailRetry, gslbNewCfgGenLookupTimeout=gslbNewCfgGenLookupTimeout, slbStatRServerFailures=slbStatRServerFailures, gslbNewCfgGenWeight=gslbNewCfgGenWeight, fltNewCfgWapRadiusSnoop=fltNewCfgWapRadiusSnoop, slbRealServerInfoHealthLayer=slbRealServerInfoHealthLayer, dnsSlbStatMultipleQueries=dnsSlbStatMultipleQueries, rurlMaintStatServerReqs=rurlMaintStatServerReqs, slbCurCfgVirtServerIndex=slbCurCfgVirtServerIndex, gslbCurCfgGenAlways=gslbCurCfgGenAlways, slbNewCfgMetricInterval=slbNewCfgMetricInterval, gslbNewCfgGenEip=gslbNewCfgGenEip, slbStatPortMaintUdpDatagrams=slbStatPortMaintUdpDatagrams, slbNewCfgPmask=slbNewCfgPmask, slbCurCfgPortSlbRtsState=slbCurCfgPortSlbRtsState, slbCurCfgWapTpcp=slbCurCfgWapTpcp, fltStatTableEntry=fltStatTableEntry, slbFailOverInfoSecondaryIp=slbFailOverInfoSecondaryIp, gslbCurCfgRemSitePrimaryIp=gslbCurCfgRemSitePrimaryIp, slbNewCfgSyncSfo=slbNewCfgSyncSfo, slbNewCfgIsdRetry=slbNewCfgIsdRetry, tpcpAddSessReqsStats=tpcpAddSessReqsStats, gslbNewCfgGenState=gslbNewCfgGenState, gslbCurCfgRemSiteSecondaryIp=gslbCurCfgRemSiteSecondaryIp, slbNewCfgRurlDportTable=slbNewCfgRurlDportTable, slbStatPortRealServerTotalSessions=slbStatPortRealServerTotalSessions, rurlMaintStatCurRSEQBufEntries=rurlMaintStatCurRSEQBufEntries, slbGroupTableMaxSize=slbGroupTableMaxSize, slbCurCfgGroupTable=slbCurCfgGroupTable, slbCurCfgTpcp=slbCurCfgTpcp, gslbNewCfgGenAlways=gslbNewCfgGenAlways, rurlInfoStatNonSYNSessSetup=rurlInfoStatNonSYNSessSetup, slbCurCfgPortTable=slbCurCfgPortTable, radiusAcctReqFailsSPDead=radiusAcctReqFailsSPDead, rurlInfoStatBufWrap=rurlInfoStatBufWrap, slbNewCfgRealServerProxy=slbNewCfgRealServerProxy, slbCurCfgFailOverSilenceInterval=slbCurCfgFailOverSilenceInterval, slbCurCfgSyncVrrp=slbCurCfgSyncVrrp, fltNewCfgPortIndx=fltNewCfgPortIndx, nasaIsdInfoStateChange=nasaIsdInfoStateChange, rurlInfoStatClientDataIn=rurlInfoStatClientDataIn, slbStatRServerHighestSessions=slbStatRServerHighestSessions, slbCurCfgPortSlbHotStandby=slbCurCfgPortSlbHotStandby, nasaStatMpBadCksum=nasaStatMpBadCksum, slbMaintStats=slbMaintStats, slbNewCfgRealServerSubmac=slbNewCfgRealServerSubmac, fltNewCfgAclTcpFin=fltNewCfgAclTcpFin, radiusAcctUpdateReqs=radiusAcctUpdateReqs, radiusAcctReqsStats=radiusAcctReqsStats, fltCurCfgUrlBwmContract=fltCurCfgUrlBwmContract, slbCurCfgRealServIndex=slbCurCfgRealServIndex, slbNewCfgSlowage=slbNewCfgSlowage, slbCurCfgIsdNumber=slbCurCfgIsdNumber, fltNewCfgTcpAck=fltNewCfgTcpAck, urlStatRedRedirs=urlStatRedRedirs, serverloadbalance=serverloadbalance, slbNewCfgRealServerUrlBmap=slbNewCfgRealServerUrlBmap, fltNewCfgPortState=fltNewCfgPortState, fltCurCfgDstMac=fltCurCfgDstMac, synAttackNewCfgThreshhold=synAttackNewCfgThreshhold, nasaStatSpAllocAckFail=nasaStatSpAllocAckFail, slbNewCfgRealServerDelete=slbNewCfgRealServerDelete, slbNewCfgGroupBackupGroup=slbNewCfgGroupBackupGroup, rurlInfoStatServerACKsIn=rurlInfoStatServerACKsIn, slbStatVServerIndex=slbStatVServerIndex, slbStatPortRealServerCurrSessions=slbStatPortRealServerCurrSessions, fltCurCfgAclIcmp=fltCurCfgAclIcmp, rurlInfoStatServerWrap=rurlInfoStatServerWrap, slbCurCfgRealServPortEntry=slbCurCfgRealServPortEntry, slbNewCfgMnet=slbNewCfgMnet, slbRurlGeneral=slbRurlGeneral, operSlbPortEntry=operSlbPortEntry, slbCurCfgGlobalControl=slbCurCfgGlobalControl, slbNewCfgVirtServiceRealPort=slbNewCfgVirtServiceRealPort, slbCurCfgMetricInterval=slbCurCfgMetricInterval, fltCurCfgRangeHighDstPort=fltCurCfgRangeHighDstPort, slbCurCfgPortSlbIdslbState=slbCurCfgPortSlbIdslbState, slbCurCfgRealServerExcludeStr=slbCurCfgRealServerExcludeStr, gslbNewCfgGenOne=gslbNewCfgGenOne, slbCurCfgVirtServiceRealGroup=slbCurCfgVirtServiceRealGroup, slbNewCfgRealServerTimeOut=slbNewCfgRealServerTimeOut, gslbNewCfgRemSiteIndx=gslbNewCfgRemSiteIndx, slbStatRServerHCOctetsHigh32=slbStatRServerHCOctetsHigh32, slbNewCfgVirtServerTable=slbNewCfgVirtServerTable, slbNewCfgAllowHttpHc=slbNewCfgAllowHttpHc, gslbCurCfgGenLookupDname=gslbCurCfgGenLookupDname, rurlMaintStatHighRBUFBufEntries=rurlMaintStatHighRBUFBufEntries, slbPortTableMaxSize=slbPortTableMaxSize, gslbNewCfgGenMinco=gslbNewCfgGenMinco, slbCurCfgGroupName=slbCurCfgGroupName, slbNewCfgUrlRedirUriHashLength=slbNewCfgUrlRedirUriHashLength, tpcpDeleteSessReqsFailsQFull=tpcpDeleteSessReqsFailsQFull, operSlbPortIndex=operSlbPortIndex, slbOperRealServerEntry=slbOperRealServerEntry, nasaIsdInfoState=nasaIsdInfoState, nasaStatSpAckRx=nasaStatSpAckRx, slbNewCfgRealServerIndex=slbNewCfgRealServerIndex, slbNewCfgPortSlbState=slbNewCfgPortSlbState, slbStatRServerIndex=slbStatRServerIndex, slbFailOverInfoEntry=slbFailOverInfoEntry, slbCurCfgPmask=slbCurCfgPmask, slbNewCfgDirectMode=slbNewCfgDirectMode, slbNewCfgFailOverState=slbNewCfgFailOverState, slbCurCfgUrlLbBwmContract=slbCurCfgUrlLbBwmContract, slbCurCfgVirtServiceRtspUrlParse=slbCurCfgVirtServiceRtspUrlParse, slbNewCfgUrlLbErrorMsg=slbNewCfgUrlLbErrorMsg, gslbMaintStats=gslbMaintStats, slbCurCfgVirtServerHttpHdrName=slbCurCfgVirtServerHttpHdrName, slbNewCfgRealServerRemUrl=slbNewCfgRealServerRemUrl, fltCurCfgLayer7DenyState=fltCurCfgLayer7DenyState, slbNewCfgUrlRedirNoCacheOrigSrv=slbNewCfgUrlRedirNoCacheOrigSrv, dnsSlbStatTCPQueries=dnsSlbStatTCPQueries, fltNewCfgNatTimeout=fltNewCfgNatTimeout, gslbNewCfgGenGeo=gslbNewCfgGenGeo, fltCurCfgAclIpTos=fltCurCfgAclIpTos, slbCurCfgUrlRedirNoCacheOrigSrv=slbCurCfgUrlRedirNoCacheOrigSrv, tcpLimitStatClientEntries=tcpLimitStatClientEntries, dnsNewCfgSecondaryIpAddr=dnsNewCfgSecondaryIpAddr, fltNewCfgFwlb=fltNewCfgFwlb, rurlInfoStatL7BindCalls=rurlInfoStatL7BindCalls)
mibBuilder.exportSymbols("ALTEON-TS-LAYER4-MIB", gslbNewCfgRemSiteState=gslbNewCfgRemSiteState, fltCurCfgRedirPort=fltCurCfgRedirPort, rtspUrlRedir=rtspUrlRedir, slbNewCfgRealServPortDelete=slbNewCfgRealServPortDelete, slbNewCfgGlobalControl=slbNewCfgGlobalControl, fltNewCfgAclIpOption=fltNewCfgAclIpOption, rurlErrorStatConnect=rurlErrorStatConnect, rurlInfoStatParseFiltMiss=rurlInfoStatParseFiltMiss, slbFailOverInfoPrimaryState=slbFailOverInfoPrimaryState, fltNewCfgTcpRateMaxConn=fltNewCfgTcpRateMaxConn, slbCurCfgVirtServerClength=slbCurCfgVirtServerClength, slbNewCfgPeerDelete=slbNewCfgPeerDelete, radiusAcctAddSessionReqs=radiusAcctAddSessionReqs, fltCurCfgNatTimeout=fltCurCfgNatTimeout, fltNewCfgHash=fltNewCfgHash, fltCurCfgTcpRateLimit=fltCurCfgTcpRateLimit, slbStatPortRealServerServerIndex=slbStatPortRealServerServerIndex, slbCurCfgRealServerIpAddr=slbCurCfgRealServerIpAddr, fltNewCfgNat=fltNewCfgNat, gslbStats=gslbStats, slbCurCfgTcpTimeWindow=slbCurCfgTcpTimeWindow, fltCurCfgNat=fltCurCfgNat, slbCurCfgVirtServiceRealPort=slbCurCfgVirtServiceRealPort, rurlMaintStatRSEQBufFrees=rurlMaintStatRSEQBufFrees, slbCurCfgUrlBwmUrlId=slbCurCfgUrlBwmUrlId, slbNewCfgRealServPortEntry=slbNewCfgRealServPortEntry, slbNewCfgRealServerState=slbNewCfgRealServerState, fltCurCfgInvert=fltCurCfgInvert, slbStatPortMaintTcpFragments=slbStatPortMaintTcpFragments, urlStatSlbPathHits=urlStatSlbPathHits, nasaStatSpAckTx=nasaStatSpAckTx, fltNewCfgTcpRateLimit=fltNewCfgTcpRateLimit, rurlInfoStatClientResets=rurlInfoStatClientResets, tpcpDeleteSessReqsEntriesInUse=tpcpDeleteSessReqsEntriesInUse, rurlErrorStatBufWrap=rurlErrorStatBufWrap, rurlMaintStatCurRBUFBufEntries=rurlMaintStatCurRBUFBufEntries, tpcpDeleteSessReqsFailsSPDead=tpcpDeleteSessReqsFailsSPDead, gslbCurCfgGenDnsTTL=gslbCurCfgGenDnsTTL, slbNewCfgGroupHealthCheckLayer=slbNewCfgGroupHealthCheckLayer, dnsCurCfgDomainName=dnsCurCfgDomainName, fltNewCfgRangeHighSrcPort=fltNewCfgRangeHighSrcPort, slbNewCfgVirtServiceDelete=slbNewCfgVirtServiceDelete, fltCurCfgTable=fltCurCfgTable, nasaStatSpAllocFrmFail=nasaStatSpAllocFrmFail, fltNewCfgInvert=fltNewCfgInvert, slbNewCfgVirtServicesEntry=slbNewCfgVirtServicesEntry, slbCurCfgRurlDportHighPort=slbCurCfgRurlDportHighPort, fltNewCfgPortFiltBmap=fltNewCfgPortFiltBmap, slbCurCfgUrlBwmTable=slbCurCfgUrlBwmTable, slbCurCfgRealServPortTable=slbCurCfgRealServPortTable, fltCurCfgHash=fltCurCfgHash, fltCurCfgProtocol=fltCurCfgProtocol, slbNewCfgVirtServerFtpParsing=slbNewCfgVirtServerFtpParsing, slbCurCfgVirtServiceIndex=slbCurCfgVirtServiceIndex, slbNewCfgVirtServiceRtspUrlParse=slbNewCfgVirtServiceRtspUrlParse, nasaIsdInfoSwitchPort=nasaIsdInfoSwitchPort, fltNewCfgRangeHighDstPort=fltNewCfgRangeHighDstPort, fltNewCfgAclTcpAck=fltNewCfgAclTcpAck, gslbNewCfgNetworkNetMask=gslbNewCfgNetworkNetMask, fltCurCfgAclTcpSyn=fltCurCfgAclTcpSyn, fltCurCfgAclIpTosMask=fltCurCfgAclIpTosMask, fltNewCfgLayer7DenyUrlBmap=fltNewCfgLayer7DenyUrlBmap, slbCurCfgUrlBwmContract=slbCurCfgUrlBwmContract, fltCurCfgTableEntry=fltCurCfgTableEntry, slbNoRealServs=slbNoRealServs, nasaStatMpTotalRx=nasaStatMpTotalRx, rurlInfoStatSessSetups=rurlInfoStatSessSetups, nasaStatMpHealthRequests=nasaStatMpHealthRequests, slbFailOverInfoTable=slbFailOverInfoTable, slbCurCfgPortSlbState=slbCurCfgPortSlbState, gslbNewCfgNetworkVip2=gslbNewCfgNetworkVip2, rurlInfoStatServerSYNACKsIn=rurlInfoStatServerSYNACKsIn, fltNewCfgVlan=fltNewCfgVlan, slbStatGroupHighestSessions=slbStatGroupHighestSessions, slbStatVServerCookieRewrites=slbStatVServerCookieRewrites, slbCurCfgRealServerTimeOut=slbCurCfgRealServerTimeOut, gslbStatRemRealServerEntry=gslbStatRemRealServerEntry, fltNewCfgRangeLowDstPort=fltNewCfgRangeLowDstPort, dnsCurCfgPrimaryIpAddr=dnsCurCfgPrimaryIpAddr, slbCurCfgVirtServiceCookieMode=slbCurCfgVirtServiceCookieMode, rtspNewCfgUrlExpDelete=rtspNewCfgUrlExpDelete, slbRealServerInfoIndex=slbRealServerInfoIndex, fltNewCfgUrlBwmEntry=fltNewCfgUrlBwmEntry, slbCurCfgSyncFilt=slbCurCfgSyncFilt, dnsSlbStatInvalidQueries=dnsSlbStatInvalidQueries, slbNewCfgRealServerName=slbNewCfgRealServerName, fltCurCfgSrcIp=fltCurCfgSrcIp, slbNewCfgIsdInterval=slbNewCfgIsdInterval, gslbCurCfgNetworkTableEntry=gslbCurCfgNetworkTableEntry, nasaStatMpCmdResponses=nasaStatMpCmdResponses, rtspStatRedirects=rtspStatRedirects, gslbCurCfgGenGeo=gslbCurCfgGenGeo, slbCurCfgVirtServiceHttpSlbOption=slbCurCfgVirtServiceHttpSlbOption, gslbCurCfgGenLookupPort=gslbCurCfgGenLookupPort, fltNewCfgLog=fltNewCfgLog, slbNewCfgUrlExpression=slbNewCfgUrlExpression, gslbNewCfgGenLookupPort=gslbNewCfgGenLookupPort, slbNewCfgFailOverSilenceInterval=slbNewCfgFailOverSilenceInterval, nasaStatSpRurlTunnelCnt=nasaStatSpRurlTunnelCnt, urlStatSlbPathTableEntry=urlStatSlbPathTableEntry, slbStatRServerHCOctets=slbStatRServerHCOctets, gslbNewCfgRemSiteUpdate=gslbNewCfgRemSiteUpdate, slbNewCfgVirtServiceUDPBalance=slbNewCfgVirtServiceUDPBalance, rurlInfoStatClientDataRetx=rurlInfoStatClientDataRetx, dynSLBRealServerIpAddr=dynSLBRealServerIpAddr, slbNewCfgSyncPip=slbNewCfgSyncPip, urlStats=urlStats, fltCurCfgFtpNatActive=fltCurCfgFtpNatActive, fltNewCfgAclTcpUrg=fltNewCfgAclTcpUrg, slbNewCfgUrlBwmTable=slbNewCfgUrlBwmTable, rurlInfoStats=rurlInfoStats, fltNewCfgSrcIpMac=fltNewCfgSrcIpMac, slbStatPortRealServerHCOctetsLow32=slbStatPortRealServerHCOctetsLow32, slbCurCfgVirtServiceDirServerRtn=slbCurCfgVirtServiceDirServerRtn, slbNewCfgFailOverTable=slbNewCfgFailOverTable, gslbCurCfgNetworkVip2=gslbCurCfgNetworkVip2, nasaStatMpPingResponses=nasaStatMpPingResponses, rtspCurCfgUrlExpIndex=rtspCurCfgUrlExpIndex, slbNewCfgVirtServiceFtpParsing=slbNewCfgVirtServiceFtpParsing, ftpStats=ftpStats, rurlErrorStatPack=rurlErrorStatPack, rtspCurCfgUrlExpTable=rtspCurCfgUrlExpTable, tcpStats=tcpStats, slbCurCfgUrlLbPathString=slbCurCfgUrlLbPathString, slbCurCfgVirtServicesEntry=slbCurCfgVirtServicesEntry, slbNewCfgPeerState=slbNewCfgPeerState, fltCurCfgUrlBwmTable=fltCurCfgUrlBwmTable, rurlInfoStatServerResets=rurlInfoStatServerResets, slbNewCfgPeerIpAddr=slbNewCfgPeerIpAddr, nasaIsdInfoEntry=nasaIsdInfoEntry, slbCurCfgAllowHttpHc=slbCurCfgAllowHttpHc, fltCurCfgAclTcpUrg=fltCurCfgAclTcpUrg, slbCurCfgVirtServiceDBind=slbCurCfgVirtServiceDBind, gslbNewCfgGenLookupDname=gslbNewCfgGenLookupDname)
