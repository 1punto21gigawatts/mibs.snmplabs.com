#
# PySNMP MIB module NOMADIX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NOMADIX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:23:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, MibIdentifier, IpAddress, NotificationType, ModuleIdentity, Integer32, Gauge32, iso, Unsigned32, TimeTicks, Bits, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "MibIdentifier", "IpAddress", "NotificationType", "ModuleIdentity", "Integer32", "Gauge32", "iso", "Unsigned32", "TimeTicks", "Bits", "enterprises")
RowStatus, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "MacAddress", "TextualConvention")
nomadix = ModuleIdentity((1, 3, 6, 1, 4, 1, 3309))
if mibBuilder.loadTexts: nomadix.setLastUpdated('200501270000Z')
if mibBuilder.loadTexts: nomadix.setOrganization('Nomadix, Inc')
if mibBuilder.loadTexts: nomadix.setContactInfo('Nomadix, Inc 1100 Business Center Circle Suite 100 Newbury Park, CA 91320 +1 818 597 1500 info@nomadix.com')
if mibBuilder.loadTexts: nomadix.setDescription('MIB definition for Nomadix AG-2000w wireless gateway.')
class DisplayString(OctetString):
    pass

products = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1))
ag = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3))
aaa = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2))
accessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 4))
bandwidthManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 5))
billRecMirror = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6))
dat = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 8))
dhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10))
dns = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 12))
greTunneling = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 13))
hpr = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 14))
icc = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16))
inat = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 17))
licenseKeys = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 18))
location = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 19))
passthrough = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 24))
portLoc = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 28))
smtp = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 30))
snmpagent = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 32))
subsettings = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 33))
subnets = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 34))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35))
time = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 36))
urlFiltering = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 37))
radiusProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 38))
realmBasedRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39))
sessionlimit = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 40))
macFiltering = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 41))
tunneling = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 42))
wireless = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43))
pppoeClient = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 44))
dyndns = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 50))
localWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 52))
ipsec = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54))
ndxTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 0))
aaaOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaOn.setStatus('current')
if mibBuilder.loadTexts: aaaOn.setDescription('Set to 1 to enable AAA, 0 to disable.')
aaaXmlOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaXmlOn.setStatus('current')
if mibBuilder.loadTexts: aaaXmlOn.setDescription('Set to 1 to enable AAA XML Interface, 0 to disable. Note: If trying to set this value returns an error, please check to see if you have a valid license for this feature.')
aaaXmlSender1Ip = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaXmlSender1Ip.setStatus('current')
if mibBuilder.loadTexts: aaaXmlSender1Ip.setDescription('IP address of the first server that will send/process XML commands for subscriber management.')
aaaXmlSender2Ip = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaXmlSender2Ip.setStatus('current')
if mibBuilder.loadTexts: aaaXmlSender2Ip.setDescription('IP address of the second server that will send/process XML commands for subscriber management.')
aaaMessageNewUserTermsOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaMessageNewUserTermsOn.setStatus('current')
if mibBuilder.loadTexts: aaaMessageNewUserTermsOn.setDescription('Set to 1 to enable New User Terms of Agreement, 0 to disable.')
aaaMessageNewUserTerms = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(400, 400)).setFixedLength(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaMessageNewUserTerms.setStatus('current')
if mibBuilder.loadTexts: aaaMessageNewUserTerms.setDescription('New User Terms of Agreement.')
aaaPrintBillingCommandOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaPrintBillingCommandOn.setStatus('current')
if mibBuilder.loadTexts: aaaPrintBillingCommandOn.setDescription('Set to 1 to enable Print Billing Command, 0 to disable.')
aaaPassthroughPortOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaPassthroughPortOn.setStatus('current')
if mibBuilder.loadTexts: aaaPassthroughPortOn.setDescription('Set to 1 to enable AAA Passthrough Port, 0 to disable.')
aaaPassthroughPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaPassthroughPortNumber.setStatus('current')
if mibBuilder.loadTexts: aaaPassthroughPortNumber.setDescription('The port number which is set as passthrough. Must be different from 80, 2111 and 1111.')
aaaDot1xOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaDot1xOn.setStatus('current')
if mibBuilder.loadTexts: aaaDot1xOn.setDescription('Set to 1 to enable AAA 802.1x Authentication, 0 to disable. Note: 802.1x requires that AAA, RADIUS Authentication and WEP be enabled.')
aaaOSencodingOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaOSencodingOn.setStatus('current')
if mibBuilder.loadTexts: aaaOSencodingOn.setDescription('Set to 1 to enable OS parameter encoding when using Portal Page and EWS, 0 to disable.')
aaaAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("internalAuthorization", 0), ("externalAuthorization", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAuthMode.setStatus('current')
if mibBuilder.loadTexts: aaaAuthMode.setDescription('Set to 0 to use Internal Authorization mode, 1 to use External Authorization mode. Note: If trying to set this value returns an error, please check to see if you have a valid license for this feature.')
aaaInternalAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 10))
aaaSslOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSslOn.setStatus('current')
if mibBuilder.loadTexts: aaaSslOn.setDescription('Set to 1 to enable SSL support, 0 to disable. Please reboot if you change this value.')
aaaSslHostName = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSslHostName.setStatus('current')
if mibBuilder.loadTexts: aaaSslHostName.setDescription('Specify the certificate DNS name used by SSL')
aaaPortalPageOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaPortalPageOn.setStatus('current')
if mibBuilder.loadTexts: aaaPortalPageOn.setDescription('Set to 1 to enable portal page redirection, 0 to disable.')
aaaPortalPageUrl = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaPortalPageUrl.setStatus('current')
if mibBuilder.loadTexts: aaaPortalPageUrl.setDescription('Specify the URL of the portal page web server')
aaaUsernameOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaUsernameOn.setStatus('current')
if mibBuilder.loadTexts: aaaUsernameOn.setDescription('Set to 1 to enable username/password, 0 to disable.')
aaaNewSubscriberOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaNewSubscriberOn.setStatus('current')
if mibBuilder.loadTexts: aaaNewSubscriberOn.setDescription('Set to 1 to allow new subscribers, 0 to disable.')
aaaReloginOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaReloginOn.setStatus('current')
if mibBuilder.loadTexts: aaaReloginOn.setDescription('Set to 1 to make subscribers relogin after a timeout, 0 to disable.')
aaaCreditCardOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaCreditCardOn.setStatus('current')
if mibBuilder.loadTexts: aaaCreditCardOn.setDescription('Set to 1 to enable credit card, 0 to disable. Note: If trying to set this value returns an error, please check to see if you have a valid license for this feature.')
aaaCreditCardUrl = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 10, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaCreditCardUrl.setStatus('current')
if mibBuilder.loadTexts: aaaCreditCardUrl.setDescription('Specify the URL of the Credit Card Service Server')
aaaCreditCardIp = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 10, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaCreditCardIp.setStatus('current')
if mibBuilder.loadTexts: aaaCreditCardIp.setDescription('The IP address of the Credit Card Service Server')
aaaMerchantId = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 10, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaMerchantId.setStatus('current')
if mibBuilder.loadTexts: aaaMerchantId.setDescription('Specify Merchant ID used for Credit Card Service')
aaaSmartClientOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 10, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSmartClientOn.setStatus('current')
if mibBuilder.loadTexts: aaaSmartClientOn.setDescription('Set to 1 to enable Smart client support, 0 to disable. Note: If trying to set this value returns an error, please check to see if you have a valid license for this feature.')
aaaPortalParameterPassing = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 10, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaPortalParameterPassing.setStatus('current')
if mibBuilder.loadTexts: aaaPortalParameterPassing.setDescription('Set to 1 to enable portal parameter passing, 0 to disable.')
aaaPortalPostUrl = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 10, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaPortalPostUrl.setStatus('current')
if mibBuilder.loadTexts: aaaPortalPostUrl.setDescription('Specify the URL of the portal XML POST URL')
aaaPortalXMLPort = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 10, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaPortalXMLPort.setStatus('current')
if mibBuilder.loadTexts: aaaPortalXMLPort.setDescription('Portal XML POST port number.')
aaaSupportGISClients = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 10, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSupportGISClients.setStatus('current')
if mibBuilder.loadTexts: aaaSupportGISClients.setDescription('Set to 1 to enable support of GIS clients, 0 to disable.')
aaaIWSLoginPageBlocking = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 10, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaIWSLoginPageBlocking.setStatus('current')
if mibBuilder.loadTexts: aaaIWSLoginPageBlocking.setDescription('Set to 1 to enable blocking of Internal Web Server Login Page , 2 to disable.')
aaaCreditCardServerTypeSelection = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 10, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("chainfusion", 1), ("authorize-net", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaCreditCardServerTypeSelection.setStatus('current')
if mibBuilder.loadTexts: aaaCreditCardServerTypeSelection.setDescription('Setting this value to (1) will select Chainfusion. Setting this value to (2) will select Authorize.net.')
aaaChainfusionCCTransTime = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 10, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaChainfusionCCTransTime.setStatus('current')
if mibBuilder.loadTexts: aaaChainfusionCCTransTime.setDescription('The maximum amount of time allowed for a Chainfusion credit card transaction to complete (in minutes).')
aaaExternalAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 11))
aaaSecretKey = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 11, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSecretKey.setStatus('current')
if mibBuilder.loadTexts: aaaSecretKey.setDescription('Specify the secret key shared by the NSE and the external server')
aaaExternalIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 11, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaExternalIPAddress.setStatus('current')
if mibBuilder.loadTexts: aaaExternalIPAddress.setDescription('Specify external authorization server IP Address.')
aaaAuthorizationUrl = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 11, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAuthorizationUrl.setStatus('current')
if mibBuilder.loadTexts: aaaAuthorizationUrl.setDescription('Specify external authorization server URL.')
aaaLoggingOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaLoggingOn.setStatus('current')
if mibBuilder.loadTexts: aaaLoggingOn.setDescription('Setting this value to (1) will enable logging (via standard SYSLOG) of AAA messages. Setting this value to (0) will disable AAA logging.')
aaaLogNumber = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaLogNumber.setStatus('current')
if mibBuilder.loadTexts: aaaLogNumber.setDescription('The log number (0-7 of standard SYSLOG) for AAA logging.')
aaaLogFilter = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaLogFilter.setStatus('current')
if mibBuilder.loadTexts: aaaLogFilter.setDescription('Select the filter level for AAA Logs Available settings: Emergency(0), Alert(1), Critical(2), Error(3), Warning(4), Notice(5), Info(6), Debug(7)')
aaaLogServerIp = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaLogServerIp.setStatus('current')
if mibBuilder.loadTexts: aaaLogServerIp.setDescription('IP address of the SYSLOG server to receive AAA messages.')
aaaSaveToFile = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSaveToFile.setStatus('current')
if mibBuilder.loadTexts: aaaSaveToFile.setDescription('Setting this value to (1) will enable saving of AAA logs to file. Setting this value to (0) will disable storing of AAA logs in a file.')
aaaBillingOption = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15))
aaaBilloptIntroMsg = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBilloptIntroMsg.setStatus('current')
if mibBuilder.loadTexts: aaaBilloptIntroMsg.setDescription('Specify the billing provisioning page intro message')
aaaBilloptOfferMsg = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBilloptOfferMsg.setStatus('current')
if mibBuilder.loadTexts: aaaBilloptOfferMsg.setDescription('Specify the billing provisioning page offer message')
aaaBilloptPolicyMsg = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBilloptPolicyMsg.setStatus('current')
if mibBuilder.loadTexts: aaaBilloptPolicyMsg.setDescription('Specify the billing provisioning page policy message')
aaaBilloptMinTimeUnitMinute = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBilloptMinTimeUnitMinute.setStatus('current')
if mibBuilder.loadTexts: aaaBilloptMinTimeUnitMinute.setDescription('Set the minimum unit (minutes) of time the subscriber can purchase')
aaaBilloptMinTimeUnitHour = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBilloptMinTimeUnitHour.setStatus('current')
if mibBuilder.loadTexts: aaaBilloptMinTimeUnitHour.setDescription('Set the minimum unit (hours) of time the subscriber can purchase')
aaaBilloptMinTimeUnitDay = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBilloptMinTimeUnitDay.setStatus('current')
if mibBuilder.loadTexts: aaaBilloptMinTimeUnitDay.setDescription('Set the minimum unit (days) of time the subscriber can purchase')
aaaBilloptMinTimeUnitWeek = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBilloptMinTimeUnitWeek.setStatus('current')
if mibBuilder.loadTexts: aaaBilloptMinTimeUnitWeek.setDescription('Set the minimum unit (weeks) of time the subscriber can purchase')
aaaBilloptMinTimeUnitMonth = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBilloptMinTimeUnitMonth.setStatus('current')
if mibBuilder.loadTexts: aaaBilloptMinTimeUnitMonth.setDescription('Set the minimum unit (months) of time the subscriber can purchase')
aaaBilloptMaxTimeUnitMinute = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBilloptMaxTimeUnitMinute.setStatus('current')
if mibBuilder.loadTexts: aaaBilloptMaxTimeUnitMinute.setDescription('Set the maximum unit (minutes) of time the subscriber can purchase')
aaaBilloptMaxTimeUnitHour = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBilloptMaxTimeUnitHour.setStatus('current')
if mibBuilder.loadTexts: aaaBilloptMaxTimeUnitHour.setDescription('Set the maximum unit (hours) of time the subscriber can purchase')
aaaBilloptMaxTimeUnitDay = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBilloptMaxTimeUnitDay.setStatus('current')
if mibBuilder.loadTexts: aaaBilloptMaxTimeUnitDay.setDescription('Set the maximum unit (days) of time the subscriber can purchase')
aaaBilloptMaxTimeUnitWeek = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBilloptMaxTimeUnitWeek.setStatus('current')
if mibBuilder.loadTexts: aaaBilloptMaxTimeUnitWeek.setDescription('Set the maximum unit (weeks) of time the subscriber can purchase')
aaaBilloptMaxTimeUnitMonth = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBilloptMaxTimeUnitMonth.setStatus('current')
if mibBuilder.loadTexts: aaaBilloptMaxTimeUnitMonth.setDescription('Set the maximum unit (months) of time the subscriber can purchase')
aaaBilloptFreeAccessTime = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBilloptFreeAccessTime.setStatus('current')
if mibBuilder.loadTexts: aaaBilloptFreeAccessTime.setDescription('Set default free access time for zero $ billing.')
aaaBilloptMaxSubLifetime = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBilloptMaxSubLifetime.setStatus('current')
if mibBuilder.loadTexts: aaaBilloptMaxSubLifetime.setDescription('Set maximum subscriber lifetime for zero $ billing.')
aaaTaxRate = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaTaxRate.setStatus('current')
if mibBuilder.loadTexts: aaaTaxRate.setDescription('Tax rate, which is to be assessed on all amounts billed by the access gateway. The rate may range from 0 (which means no tax) to 99.99 percent')
aaaBillingPlans = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19))
aaaBillingPlan0 = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 1))
aaaBillingPlan1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 2))
aaaBillingPlan2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 3))
aaaBillingPlan3 = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 4))
aaaBillingPlan4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 5))
aaaBillingPlan5 = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 6))
aaaBillingPlanOn0 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanOn0.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanOn0.setDescription('Set to 1 to enable billing Plan 0, 0 to disable')
aaaBillingPlanAssigned0 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanAssigned0.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanAssigned0.setDescription('Set to 1 to assign parameters to billing Plan 0, 0 to disable')
aaaBillingPlanXoverY0 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanXoverY0.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanXoverY0.setDescription('Set to 1 to assign Plan 0 as XoverY plan, 0 to disable. Please note: to use XoverY billing plan you MUST set the variables aaaBillingPlanCost0, aaaBillingPlanDuration0, and aaaBillingPlanValidity0, to non-zero values prior to enabling the plan (setting aaaBillingPlanXoverY0 = 1). Failure to do so will result in an error on the aaaBillingPlanXoverY0 SNMP Set operation.')
aaaBillingPlanLabel0 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanLabel0.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanLabel0.setDescription('Label for billing Plan 0')
aaaBillingPlanDesc0 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 140))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanDesc0.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanDesc0.setDescription('Service Description for billing Plan 0')
aaaBillingPlanPricingMin0 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingMin0.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingMin0.setDescription('Rate Per Minute for billing Plan 0 for Normal Plans')
aaaBillingPlanPricingHour0 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingHour0.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingHour0.setDescription('Rate Per hour for billing Plan 0 for Normal Plans')
aaaBillingPlanPricingDay0 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingDay0.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingDay0.setDescription('Rate Per day for billing Plan 0 for Normal Plans')
aaaBillingPlanPricingWeek0 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingWeek0.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingWeek0.setDescription('Rate Per week for billing Plan 0 for Normal Plans')
aaaBillingPlanPricingMonth0 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingMonth0.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingMonth0.setDescription('Rate Per Month for billing Plan 0 for Normal Plans')
aaaBillingPlanBandwidthUp0 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanBandwidthUp0.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanBandwidthUp0.setDescription('Bandwidth Up for billing Plan 0')
aaaBillingPlanBandwidthDown0 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanBandwidthDown0.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanBandwidthDown0.setDescription('Bandwidth Down for billing Plan 0')
aaaBillingPlanDHCPPool0 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("private", 0), ("public", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanDHCPPool0.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanDHCPPool0.setDescription('DHCP Pool for billing Plan 0: set to 0 for private pool, set to 1 for public pool')
aaaBillingPlanRateShow0 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("minute", 0), ("hour", 1), ("day", 2), ("week", 3), ("month", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanRateShow0.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanRateShow0.setDescription('Rate Show for billing Plan 0: Set to 0 if the time unit used is set to minutes, 1 if hours, 2 if days, 3 if weeks, and 4 if months.')
aaaBillingPlanCost0 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanCost0.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanCost0.setDescription('Cost of the XoverY billing Plan 0')
aaaBillingPlanDuration0 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanDuration0.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanDuration0.setDescription('Duration (X) of the XoverY billing Plan 0')
aaaBillingPlanValidity0 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanValidity0.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanValidity0.setDescription('Validity (Y) of the XoverY billing Plan 0')
aaaBillingPlanValidityRateShow0 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("day", 2), ("week", 3), ("month", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanValidityRateShow0.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanValidityRateShow0.setDescription('Validity Rate Show for XoverY billing Plan 0: Set to 2 if the time unit used is set to days, 3 if weeks, and 4 if months.')
aaaBillingPlanOn1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanOn1.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanOn1.setDescription('Set to 1 to enable billing Plan 1, 0 to disable')
aaaBillingPlanAssigned1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanAssigned1.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanAssigned1.setDescription('Set to 1 to assign parameters to billing Plan 1, 0 to disable')
aaaBillingPlanXoverY1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanXoverY1.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanXoverY1.setDescription('Set to 1 to assign Plan 1 as XoverY plan, 0 to disable. Please note: to use XoverY billing plan you MUST set the variables aaaBillingPlanCost1, aaaBillingPlanDuration1, and aaaBillingPlanValidity1, to non-zero values prior to enabling the plan (setting aaaBillingPlanXoverY1 = 1). Failure to do so will result in an error on the aaaBillingPlanXoverY1 SNMP Set operation.')
aaaBillingPlanLabel1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanLabel1.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanLabel1.setDescription('Label for billing Plan 1')
aaaBillingPlanDesc1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 140))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanDesc1.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanDesc1.setDescription('Service Description for billing Plan 1')
aaaBillingPlanPricingMin1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingMin1.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingMin1.setDescription('Rate Per Minute for billing Plan 1 for Normal Plans')
aaaBillingPlanPricingHour1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingHour1.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingHour1.setDescription('Rate Per hour for billing Plan 1 for Normal Plans')
aaaBillingPlanPricingDay1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingDay1.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingDay1.setDescription('Rate Per day for billing Plan 1 for Normal Plans')
aaaBillingPlanPricingWeek1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingWeek1.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingWeek1.setDescription('Rate Per week for billing Plan 1 for Normal Plans')
aaaBillingPlanPricingMonth1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingMonth1.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingMonth1.setDescription('Rate Per Month for billing Plan 1 for Normal Plans')
aaaBillingPlanBandwidthUp1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanBandwidthUp1.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanBandwidthUp1.setDescription('Bandwidth Up for billing Plan 1')
aaaBillingPlanBandwidthDown1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanBandwidthDown1.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanBandwidthDown1.setDescription('Bandwidth Down for billing Plan 1')
aaaBillingPlanDHCPPool1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("private", 0), ("public", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanDHCPPool1.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanDHCPPool1.setDescription('DHCP Pool for billing Plan 1: set to 0 for private pool, set to 1 for public pool')
aaaBillingPlanRateShow1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("minute", 0), ("hour", 1), ("day", 2), ("week", 3), ("month", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanRateShow1.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanRateShow1.setDescription('Rate Show for billing Plan 1: Set to 0 if the time unit used is set to minutes, 1 if hours, 2 if days, 3 if weeks, and 4 if months.')
aaaBillingPlanCost1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanCost1.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanCost1.setDescription('Cost of the XoverY Plan 1')
aaaBillingPlanDuration1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 2, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanDuration1.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanDuration1.setDescription('Duration (X) of the XoverY Plan 1')
aaaBillingPlanValidity1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 2, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanValidity1.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanValidity1.setDescription('Validity (Y) of the XoverY Plan 1')
aaaBillingPlanValidityRateShow1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("day", 2), ("week", 3), ("month", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanValidityRateShow1.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanValidityRateShow1.setDescription('Validity Rate Show for XoverY Plan 1: Set to 2 if the time unit used is set to days, 3 if weeks, and 4 if months.')
aaaBillingPlanOn2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanOn2.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanOn2.setDescription('Set to 1 to enable billing Plan 2, 0 to disable')
aaaBillingPlanAssigned2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanAssigned2.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanAssigned2.setDescription('Set to 1 to assign parameters to billing Plan 2, 0 to disable')
aaaBillingPlanXoverY2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanXoverY2.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanXoverY2.setDescription('Set to 1 to assign Plan 2 as XoverY plan, 0 to disable. Please note: to use XoverY billing plan you MUST set the variables aaaBillingPlanCost2, aaaBillingPlanDuration2, and aaaBillingPlanValidity2, to non-zero values prior to enabling the plan (setting aaaBillingPlanXoverY2 = 1). Failure to do so will result in an error on the aaaBillingPlanXoverY2 SNMP Set operation.')
aaaBillingPlanLabel2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanLabel2.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanLabel2.setDescription('Label for billing Plan 2')
aaaBillingPlanDesc2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 140))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanDesc2.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanDesc2.setDescription('Service Description for billing Plan 2')
aaaBillingPlanPricingMin2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingMin2.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingMin2.setDescription('Rate Per Minute for billing Plan 2 for Normal Plans')
aaaBillingPlanPricingHour2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingHour2.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingHour2.setDescription('Rate Per hour for billing Plan 2 for Normal Plans')
aaaBillingPlanPricingDay2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingDay2.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingDay2.setDescription('Rate Per day for billing Plan 2 for Normal Plans')
aaaBillingPlanPricingWeek2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingWeek2.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingWeek2.setDescription('Rate Per week for billing Plan 2 for Normal Plans')
aaaBillingPlanPricingMonth2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 3, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingMonth2.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingMonth2.setDescription('Rate Per Month for billing Plan 2 for Normal Plans')
aaaBillingPlanBandwidthUp2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanBandwidthUp2.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanBandwidthUp2.setDescription('Bandwidth Up for billing Plan 2')
aaaBillingPlanBandwidthDown2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanBandwidthDown2.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanBandwidthDown2.setDescription('Bandwidth Down for billing Plan 2')
aaaBillingPlanDHCPPool2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("private", 0), ("public", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanDHCPPool2.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanDHCPPool2.setDescription('DHCP Pool for billing Plan 2: set to 0 for private pool, set to 1 for public pool')
aaaBillingPlanRateShow2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("minute", 0), ("hour", 1), ("day", 2), ("week", 3), ("month", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanRateShow2.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanRateShow2.setDescription('Rate Show for billing Plan 2: Set to 0 if the time unit used is set to minutes, 1 if hours, 2 if days, 3 if weeks, and 4 if months.')
aaaBillingPlanCost2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 3, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanCost2.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanCost2.setDescription('Cost of the XoverY billing Plan 2')
aaaBillingPlanDuration2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanDuration2.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanDuration2.setDescription('Duration (X) of the XoverY billing Plan 2')
aaaBillingPlanValidity2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 3, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanValidity2.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanValidity2.setDescription('Validity (Y) of the XoverY billing Plan 2')
aaaBillingPlanValidityRateShow2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("day", 2), ("week", 3), ("month", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanValidityRateShow2.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanValidityRateShow2.setDescription('Validity Rate Show for XoverY billing Plan 2: Set to 2 if the time unit used is set to days, 3 if weeks, and 4 if months.')
aaaBillingPlanOn3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanOn3.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanOn3.setDescription('Set to 1 to enable billing Plan 3, 0 to disable')
aaaBillingPlanAssigned3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanAssigned3.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanAssigned3.setDescription('Set to 1 to assign parameters to billing Plan 3, 0 to disable')
aaaBillingPlanXoverY3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanXoverY3.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanXoverY3.setDescription('Set to 1 to assign Plan 3 as XoverY plan, 0 to disable. Please note: to use XoverY billing plan you MUST set the variables aaaBillingPlanCost3, aaaBillingPlanDuration3, and aaaBillingPlanValidity3, to non-zero values prior to enabling the plan (setting aaaBillingPlanXoverY3 = 1). Failure to do so will result in an error on the aaaBillingPlanXoverY3 SNMP Set operation.')
aaaBillingPlanLabel3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanLabel3.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanLabel3.setDescription('Label for billing Plan 3')
aaaBillingPlanDesc3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 140))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanDesc3.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanDesc3.setDescription('Service Description for billing Plan 3')
aaaBillingPlanPricingMin3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingMin3.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingMin3.setDescription('Rate Per Minute for billing Plan 3 for Normal Plans')
aaaBillingPlanPricingHour3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingHour3.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingHour3.setDescription('Rate Per hour for billing Plan 3 for Normal Plans')
aaaBillingPlanPricingDay3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 4, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingDay3.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingDay3.setDescription('Rate Per day for billing Plan 3 for Normal Plans')
aaaBillingPlanPricingWeek3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 4, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingWeek3.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingWeek3.setDescription('Rate Per week for billing Plan 3 for Normal Plans')
aaaBillingPlanPricingMonth3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 4, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingMonth3.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingMonth3.setDescription('Rate Per Month for billing Plan 3 for Normal Plans')
aaaBillingPlanBandwidthUp3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanBandwidthUp3.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanBandwidthUp3.setDescription('Bandwidth Up for billing Plan 3')
aaaBillingPlanBandwidthDown3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanBandwidthDown3.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanBandwidthDown3.setDescription('Bandwidth Down for billing Plan 3')
aaaBillingPlanDHCPPool3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("private", 0), ("public", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanDHCPPool3.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanDHCPPool3.setDescription('DHCP Pool for billing Plan 3: set to 0 for private pool, set to 1 for public pool')
aaaBillingPlanRateShow3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("minute", 0), ("hour", 1), ("day", 2), ("week", 3), ("month", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanRateShow3.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanRateShow3.setDescription('Rate Show for billing Plan 3: Set to 0 if the time unit used is set to minutes, 1 if hours, 2 if days, 3 if weeks, and 4 if months.')
aaaBillingPlanCost3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 4, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanCost3.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanCost3.setDescription('Cost of the XoverY billing Plan 3')
aaaBillingPlanDuration3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 4, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanDuration3.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanDuration3.setDescription('Duration (X) of the XoverY billing Plan 3')
aaaBillingPlanValidity3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 4, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanValidity3.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanValidity3.setDescription('Validity (Y) of the XoverY billing Plan 3')
aaaBillingPlanValidityRateShow3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("day", 2), ("week", 3), ("month", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanValidityRateShow3.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanValidityRateShow3.setDescription('Validity Rate Show for XoverY billing Plan 3: Set to 2 if the time unit used is set to days, 3 if weeks, and 4 if months.')
aaaBillingPlanOn4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanOn4.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanOn4.setDescription('Set to 1 to enable billing Plan 4, 0 to disable')
aaaBillingPlanAssigned4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanAssigned4.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanAssigned4.setDescription('Set to 1 to assign parameters to billing Plan 4, 0 to disable')
aaaBillingPlanXoverY4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanXoverY4.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanXoverY4.setDescription('Set to 1 to assign Plan 4 as XoverY plan, 0 to disable. Please note: to use XoverY billing plan you MUST set the variables aaaBillingPlanCost4, aaaBillingPlanDuration4, and aaaBillingPlanValidity4, to non-zero values prior to enabling the plan (setting aaaBillingPlanXoverY4 = 1). Failure to do so will result in an error on the aaaBillingPlanXoverY4 SNMP Set operation.')
aaaBillingPlanLabel4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanLabel4.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanLabel4.setDescription('Label for billing Plan 4')
aaaBillingPlanDesc4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 140))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanDesc4.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanDesc4.setDescription('Service Description for billing Plan 4')
aaaBillingPlanPricingMin4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 5, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingMin4.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingMin4.setDescription('Rate Per Minute for billing Plan 4 for Normal Plans')
aaaBillingPlanPricingHour4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingHour4.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingHour4.setDescription('Rate Per hour for billing Plan 4 for Normal Plans')
aaaBillingPlanPricingDay4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 5, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingDay4.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingDay4.setDescription('Rate Per day for billing Plan 4 for Normal Plans')
aaaBillingPlanPricingWeek4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 5, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingWeek4.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingWeek4.setDescription('Rate Per week for billing Plan 4 for Normal Plans')
aaaBillingPlanPricingMonth4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 5, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingMonth4.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingMonth4.setDescription('Rate Per Month for billing Plan 4 for Normal Plans')
aaaBillingPlanBandwidthUp4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanBandwidthUp4.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanBandwidthUp4.setDescription('Bandwidth Up for billing Plan 4')
aaaBillingPlanBandwidthDown4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanBandwidthDown4.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanBandwidthDown4.setDescription('Bandwidth Down for billing Plan 4')
aaaBillingPlanDHCPPool4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("private", 0), ("public", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanDHCPPool4.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanDHCPPool4.setDescription('DHCP Pool for billing Plan 4: set to 0 for private pool, set to 1 for public pool')
aaaBillingPlanRateShow4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("minute", 0), ("hour", 1), ("day", 2), ("week", 3), ("month", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanRateShow4.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanRateShow4.setDescription('Rate Show for billing Plan 4: Set to 0 if the time unit used is set to minutes, 1 if hours, 2 if days, 3 if weeks, and 4 if months.')
aaaBillingPlanCost4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 5, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanCost4.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanCost4.setDescription('Cost of the XoverY billing Plan 4')
aaaBillingPlanDuration4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 5, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanDuration4.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanDuration4.setDescription('Duration (X) of the XoverY billing Plan 4')
aaaBillingPlanValidity4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 5, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanValidity4.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanValidity4.setDescription('Validity (Y) of the XoverY billing Plan 4')
aaaBillingPlanValidityRateShow4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 5, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("day", 2), ("week", 3), ("month", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanValidityRateShow4.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanValidityRateShow4.setDescription('Validity Rate Show for XoverY billing Plan 4: Set to 2 if the time unit used is set to days, 3 if weeks, and 4 if months.')
aaaBillingPlanOn5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanOn5.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanOn5.setDescription('Set to 1 to enable billing Plan 5, 0 to disable')
aaaBillingPlanAssigned5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanAssigned5.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanAssigned5.setDescription('Set to 1 to assign parameters to billing Plan 5, 0 to disable')
aaaBillingPlanXoverY5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanXoverY5.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanXoverY5.setDescription('Set to 1 to assign Plan 5 as XoverY plan, 0 to disable. Please note: to use XoverY billing plan you MUST set the variables aaaBillingPlanCost5, aaaBillingPlanDuration5, and aaaBillingPlanValidity5, to non-zero values prior to enabling the plan (setting aaaBillingPlanXoverY5 = 1). Failure to do so will result in an error on the aaaBillingPlanXoverY5 SNMP Set operation.')
aaaBillingPlanLabel5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanLabel5.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanLabel5.setDescription('Label for billing Plan 5')
aaaBillingPlanDesc5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 6, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 140))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanDesc5.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanDesc5.setDescription('Service Description for billing Plan 5')
aaaBillingPlanPricingMin5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 6, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingMin5.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingMin5.setDescription('Rate Per Minute for billing Plan 5 for Normal Plans')
aaaBillingPlanPricingHour5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 6, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingHour5.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingHour5.setDescription('Rate Per hour for billing Plan 5 for Normal Plans')
aaaBillingPlanPricingDay5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 6, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingDay5.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingDay5.setDescription('Rate Per day for billing Plan 5 for Normal Plans')
aaaBillingPlanPricingWeek5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 6, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingWeek5.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingWeek5.setDescription('Rate Per week for billing Plan 5 for Normal Plans')
aaaBillingPlanPricingMonth5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 6, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanPricingMonth5.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanPricingMonth5.setDescription('Rate Per Month for billing Plan 5 for Normal Plans')
aaaBillingPlanBandwidthUp5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanBandwidthUp5.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanBandwidthUp5.setDescription('Bandwidth Up for billing Plan 5')
aaaBillingPlanBandwidthDown5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanBandwidthDown5.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanBandwidthDown5.setDescription('Bandwidth Down for billing Plan 5')
aaaBillingPlanDHCPPool5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 6, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("private", 0), ("public", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanDHCPPool5.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanDHCPPool5.setDescription('DHCP Pool for billing Plan 5: set to 0 for private pool, set to 1 for public pool')
aaaBillingPlanRateShow5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 6, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("minute", 0), ("hour", 1), ("day", 2), ("week", 3), ("month", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanRateShow5.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanRateShow5.setDescription('Rate Show for billing Plan 5: Set to 0 if the time unit used is set to minutes, 1 if hours, 2 if days, 3 if weeks, and 4 if months.')
aaaBillingPlanCost5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 6, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanCost5.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanCost5.setDescription('Cost of the XoverY billing Plan 5')
aaaBillingPlanDuration5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 6, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanDuration5.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanDuration5.setDescription('Duration (X) of the XoverY billing Plan 5')
aaaBillingPlanValidity5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 6, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanValidity5.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanValidity5.setDescription('Validity (Y) of the XoverY billing Plan 5')
aaaBillingPlanValidityRateShow5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 15, 19, 6, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("day", 2), ("week", 3), ("month", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaBillingPlanValidityRateShow5.setStatus('current')
if mibBuilder.loadTexts: aaaBillingPlanValidityRateShow5.setDescription('Validity Rate Show for XoverY billing Plan 5: Set to 2 if the time unit used is set to days, 3 if weeks, and 4 if months.')
aaaSubLoginUI = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16))
aaaWebServiceMsg = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaWebServiceMsg.setStatus('current')
if mibBuilder.loadTexts: aaaWebServiceMsg.setDescription('Specify the service selection message')
aaaWebExistingUserMsg = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaWebExistingUserMsg.setStatus('current')
if mibBuilder.loadTexts: aaaWebExistingUserMsg.setDescription('Specify the message for an existing user')
aaaWebNewUsernameMsg = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaWebNewUsernameMsg.setStatus('current')
if mibBuilder.loadTexts: aaaWebNewUsernameMsg.setDescription('Specify the new username message')
aaaWebContactMsg = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaWebContactMsg.setStatus('current')
if mibBuilder.loadTexts: aaaWebContactMsg.setDescription('Specify the contact message')
aaaWebMicrosUsernameMsg = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaWebMicrosUsernameMsg.setStatus('current')
if mibBuilder.loadTexts: aaaWebMicrosUsernameMsg.setDescription('Specify the PMS username message for MICROS PMS (Maximum length: 140 characters)')
aaaWebJavascriptOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaWebJavascriptOn.setStatus('current')
if mibBuilder.loadTexts: aaaWebJavascriptOn.setDescription('Set to 1 to enable Javascript, 0 to disable.')
aaaWebRememberMeOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaWebRememberMeOn.setStatus('current')
if mibBuilder.loadTexts: aaaWebRememberMeOn.setDescription('Set to 1 to enable Remember Me browser cookie, 0 to disable.')
aaaRememberMeMsg = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRememberMeMsg.setStatus('current')
if mibBuilder.loadTexts: aaaRememberMeMsg.setDescription('Specify the Remember Me message')
aaaRememberMeDays = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRememberMeDays.setStatus('current')
if mibBuilder.loadTexts: aaaRememberMeDays.setDescription('Set the number of days to retain the Remember Me browser cookie')
aaaCurrency = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaCurrency.setStatus('current')
if mibBuilder.loadTexts: aaaCurrency.setDescription('Specify the currency symbol')
aaaAmountDecimals = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAmountDecimals.setStatus('current')
if mibBuilder.loadTexts: aaaAmountDecimals.setDescription('Set the number of decimals in the currency')
aaaWebImage = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 98))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaWebImage.setStatus('current')
if mibBuilder.loadTexts: aaaWebImage.setDescription('Specify the image file name. Must be rebooted to take effect.')
aaaWebPageBgcolor = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaWebPageBgcolor.setStatus('current')
if mibBuilder.loadTexts: aaaWebPageBgcolor.setDescription('Specify the background color')
aaaWebTabBgcolor = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 98))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaWebTabBgcolor.setStatus('current')
if mibBuilder.loadTexts: aaaWebTabBgcolor.setDescription('Specify the background color for the table')
aaaWebTitleFont = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 98))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaWebTitleFont.setStatus('current')
if mibBuilder.loadTexts: aaaWebTitleFont.setDescription('Specify the title font')
aaaWebItemFont = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 98))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaWebItemFont.setStatus('current')
if mibBuilder.loadTexts: aaaWebItemFont.setDescription('Specify the line item font')
aaaErrorAccessBlocked = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaErrorAccessBlocked.setStatus('current')
if mibBuilder.loadTexts: aaaErrorAccessBlocked.setDescription('AG blocked subscriber access')
aaaErrorAccessPassword = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaErrorAccessPassword.setStatus('current')
if mibBuilder.loadTexts: aaaErrorAccessPassword.setDescription('Access to this document requires a password')
aaaErrorHasOccurred = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaErrorHasOccurred.setStatus('current')
if mibBuilder.loadTexts: aaaErrorHasOccurred.setDescription('An error has occurred')
aaaErrorISPChallenge = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaErrorISPChallenge.setStatus('current')
if mibBuilder.loadTexts: aaaErrorISPChallenge.setDescription('You received a challenge from your Internet Service Provider')
aaaErrorMinMaxValues = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaErrorMinMaxValues.setStatus('current')
if mibBuilder.loadTexts: aaaErrorMinMaxValues.setDescription('This field must contain a number between these two values')
aaaErrorNoBillingOpts = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaErrorNoBillingOpts.setStatus('current')
if mibBuilder.loadTexts: aaaErrorNoBillingOpts.setDescription('No Billing options are available')
aaaErrorNotAvailable = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaErrorNotAvailable.setStatus('current')
if mibBuilder.loadTexts: aaaErrorNotAvailable.setDescription('Internet Service is not available right now. Try again later')
aaaErrorPasswordMatch = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaErrorPasswordMatch.setStatus('current')
if mibBuilder.loadTexts: aaaErrorPasswordMatch.setDescription('The password fields you have entered do not match. Please try again')
aaaErrorPasswordWrong = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaErrorPasswordWrong.setStatus('current')
if mibBuilder.loadTexts: aaaErrorPasswordWrong.setDescription('The password field you have entered is not correct. Please try again')
aaaErrorRoomBilling = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaErrorRoomBilling.setStatus('current')
if mibBuilder.loadTexts: aaaErrorRoomBilling.setDescription('Error in Room Billing')
aaaErrorTooManyUsers = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaErrorTooManyUsers.setStatus('current')
if mibBuilder.loadTexts: aaaErrorTooManyUsers.setDescription('Too many subscribers are already logged in. Please try again later')
aaaErrorTryAgain = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaErrorTryAgain.setStatus('current')
if mibBuilder.loadTexts: aaaErrorTryAgain.setDescription('Try again')
aaaErrorUserIdMissing = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaErrorUserIdMissing.setStatus('current')
if mibBuilder.loadTexts: aaaErrorUserIdMissing.setDescription('The User ID you have entered cannot be found. Please try another')
aaaErrorUserIdTaken = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaErrorUserIdTaken.setStatus('current')
if mibBuilder.loadTexts: aaaErrorUserIdTaken.setDescription('The User ID you have entered is already taken. Please try another')
aaaErrorWeAreSorry = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaErrorWeAreSorry.setStatus('current')
if mibBuilder.loadTexts: aaaErrorWeAreSorry.setDescription('We are sorry')
aaaErrorWholeNumber = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaErrorWholeNumber.setStatus('current')
if mibBuilder.loadTexts: aaaErrorWholeNumber.setDescription('This field must contain a whole number value, with no decimals')
aaaErrorYourAccount = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaErrorYourAccount.setStatus('current')
if mibBuilder.loadTexts: aaaErrorYourAccount.setDescription('Your account was not found. Please check your Username and Password')
aaaMessageBillingMode = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaMessageBillingMode.setStatus('current')
if mibBuilder.loadTexts: aaaMessageBillingMode.setDescription('Please select the Billing Mode')
aaaMessagebyCreditCard = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaMessagebyCreditCard.setStatus('current')
if mibBuilder.loadTexts: aaaMessagebyCreditCard.setDescription('Bill by Credit Card')
aaaMessagebyHotelRoom = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaMessagebyHotelRoom.setStatus('current')
if mibBuilder.loadTexts: aaaMessagebyHotelRoom.setDescription('Bill by Hotel Room')
aaaMessageChooseUsername = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaMessageChooseUsername.setStatus('current')
if mibBuilder.loadTexts: aaaMessageChooseUsername.setDescription('Choose a User ID (optional)')
aaaMessageChoosePasswd1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaMessageChoosePasswd1.setStatus('current')
if mibBuilder.loadTexts: aaaMessageChoosePasswd1.setDescription('Choose a Password (optional)')
aaaMessageChoosePasswd2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaMessageChoosePasswd2.setStatus('current')
if mibBuilder.loadTexts: aaaMessageChoosePasswd2.setDescription('Retype the Password (if entered above)')
aaaMessageFreeInternet = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaMessageFreeInternet.setStatus('current')
if mibBuilder.loadTexts: aaaMessageFreeInternet.setDescription('Free access to the Internet')
aaaMessageNewUserLogin = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaMessageNewUserLogin.setStatus('current')
if mibBuilder.loadTexts: aaaMessageNewUserLogin.setDescription('Are you a new user? Click this button')
aaaMessageOldUserLogin = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaMessageOldUserLogin.setStatus('current')
if mibBuilder.loadTexts: aaaMessageOldUserLogin.setDescription('Are you an existing user?')
aaaMessagePurchaseOK1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaMessagePurchaseOK1.setStatus('current')
if mibBuilder.loadTexts: aaaMessagePurchaseOK1.setDescription('If this is not correct, please go back to the previous page')
aaaMessagePurchaseOK2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaMessagePurchaseOK2.setStatus('current')
if mibBuilder.loadTexts: aaaMessagePurchaseOK2.setDescription('and make the necessary changes')
aaaMessagePurchaseSelect = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaMessagePurchaseSelect.setStatus('current')
if mibBuilder.loadTexts: aaaMessagePurchaseSelect.setDescription('Please select purchase time')
aaaMessageRequestFailed = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaMessageRequestFailed.setStatus('current')
if mibBuilder.loadTexts: aaaMessageRequestFailed.setDescription('Your request was declined')
aaaMessageRequestGranted = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaMessageRequestGranted.setStatus('current')
if mibBuilder.loadTexts: aaaMessageRequestGranted.setDescription('Your request was successful')
aaaMessageThankYou = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaMessageThankYou.setStatus('current')
if mibBuilder.loadTexts: aaaMessageThankYou.setDescription('Thank you for your business')
aaaMessageVerifying = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaMessageVerifying.setStatus('current')
if mibBuilder.loadTexts: aaaMessageVerifying.setDescription('We are verifying your account. Please wait')
aaaMessageYourHotel = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaMessageYourHotel.setStatus('current')
if mibBuilder.loadTexts: aaaMessageYourHotel.setDescription('You will be billed directly by your hotel')
aaaMessageYourPurchase = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaMessageYourPurchase.setStatus('current')
if mibBuilder.loadTexts: aaaMessageYourPurchase.setDescription('You will be purchasing Internet access with these options')
aaaPartnerImageOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaPartnerImageOn.setStatus('current')
if mibBuilder.loadTexts: aaaPartnerImageOn.setDescription('Setting this value to (1) will enable Partner Image splashscreen. Setting this value to (0) will disable this feature. Note: You must reboot for changes to take effect.')
aaaPartnerImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 16, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaPartnerImageFileName.setStatus('current')
if mibBuilder.loadTexts: aaaPartnerImageFileName.setDescription('File Name of the Partner Image. Note: You must reboot for changes to take effect.')
aaaSubPostSession = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 17))
aaaSubGoodbyePage = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 17, 1))
aaaSubGPEnable = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSubGPEnable.setStatus('current')
if mibBuilder.loadTexts: aaaSubGPEnable.setDescription('Enables IWS Goodbye Page')
aaaSubGPIPAddressOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSubGPIPAddressOn.setStatus('current')
if mibBuilder.loadTexts: aaaSubGPIPAddressOn.setDescription('Show IP Address on IWS Goodbye Page ')
aaaSubGPAuthenTypeOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSubGPAuthenTypeOn.setStatus('current')
if mibBuilder.loadTexts: aaaSubGPAuthenTypeOn.setDescription('Show Authen Type on IWS Goodbye Page ')
aaaSubGPStartTimeOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSubGPStartTimeOn.setStatus('current')
if mibBuilder.loadTexts: aaaSubGPStartTimeOn.setDescription('Show Start Time on IWS Goodbye Page ')
aaaSubGPStopTimeOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSubGPStopTimeOn.setStatus('current')
if mibBuilder.loadTexts: aaaSubGPStopTimeOn.setDescription('Show Stop Time on IWS Goodbye Page ')
aaaSubGPByteSentOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSubGPByteSentOn.setStatus('current')
if mibBuilder.loadTexts: aaaSubGPByteSentOn.setDescription('Show Byte Sent on IWS Goodbye Page ')
aaaSubGPByteReceivedOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSubGPByteReceivedOn.setStatus('current')
if mibBuilder.loadTexts: aaaSubGPByteReceivedOn.setDescription('Show Byte Received on IWS Goodbye Page ')
aaaSubGPHyperlinkOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSubGPHyperlinkOn.setStatus('current')
if mibBuilder.loadTexts: aaaSubGPHyperlinkOn.setDescription('Show Hyperlink on IWS Goodbye Page ')
aaaSubGPHyperlink = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 17, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSubGPHyperlink.setStatus('current')
if mibBuilder.loadTexts: aaaSubGPHyperlink.setDescription('Show Jump To Hyperlink on IWS Goodbye Page ')
aaaSubGPSessionSummaryLabel = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 17, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSubGPSessionSummaryLabel.setStatus('current')
if mibBuilder.loadTexts: aaaSubGPSessionSummaryLabel.setDescription('Goodbye Page Session Summary Label')
aaaSubGPSubIPAddressLabel = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 17, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSubGPSubIPAddressLabel.setStatus('current')
if mibBuilder.loadTexts: aaaSubGPSubIPAddressLabel.setDescription('Goodbye Page Subscriber IP Address Label')
aaaSubGPAuthenTypeLabel = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 17, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSubGPAuthenTypeLabel.setStatus('current')
if mibBuilder.loadTexts: aaaSubGPAuthenTypeLabel.setDescription('Goodbye Page Subscriber Authen Type Label')
aaaSubGPStartTimeLabel = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 17, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSubGPStartTimeLabel.setStatus('current')
if mibBuilder.loadTexts: aaaSubGPStartTimeLabel.setDescription('Goodbye Page Start Time Label')
aaaSubGPStopTimeLabel = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 17, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSubGPStopTimeLabel.setStatus('current')
if mibBuilder.loadTexts: aaaSubGPStopTimeLabel.setDescription('Goodbye Page Stop Time Label')
aaaSubGPByteSentLabel = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 17, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSubGPByteSentLabel.setStatus('current')
if mibBuilder.loadTexts: aaaSubGPByteSentLabel.setDescription('Goodbye Page Byte Sent Label')
aaaSubGPByteReceivedLabel = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 17, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSubGPByteReceivedLabel.setStatus('current')
if mibBuilder.loadTexts: aaaSubGPByteReceivedLabel.setDescription('Goodbye Page Byte Received Label')
aaaSubGPHypertextURLLabel = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 17, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSubGPHypertextURLLabel.setStatus('current')
if mibBuilder.loadTexts: aaaSubGPHypertextURLLabel.setDescription('Goodbye Page Hypertext URL Label')
aaaSubscriber = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18))
aaaSubCurrTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 1), )
if mibBuilder.loadTexts: aaaSubCurrTable.setStatus('current')
if mibBuilder.loadTexts: aaaSubCurrTable.setDescription('List of current subscribers.')
aaaSubCurrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 1, 1), ).setIndexNames((0, "NOMADIX-MIB", "subIndex"))
if mibBuilder.loadTexts: aaaSubCurrTableEntry.setStatus('current')
if mibBuilder.loadTexts: aaaSubCurrTableEntry.setDescription('A subscriber entry.')
subIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subIndex.setStatus('current')
if mibBuilder.loadTexts: subIndex.setDescription('Subscriber Index.')
subMac = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subMac.setStatus('current')
if mibBuilder.loadTexts: subMac.setDescription('Physical Address of the Subscriber.')
subIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subIp.setStatus('current')
if mibBuilder.loadTexts: subIp.setDescription('IP Address of the Subscriber.')
subPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subPort.setStatus('current')
if mibBuilder.loadTexts: subPort.setDescription('Port of the Subscriber.')
subName = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subName.setStatus('current')
if mibBuilder.loadTexts: subName.setDescription('Name of the Subscriber.')
subBwUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subBwUp.setStatus('current')
if mibBuilder.loadTexts: subBwUp.setDescription('Uploading Bandwidth granted to the Subscriber.')
subBwDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subBwDown.setStatus('current')
if mibBuilder.loadTexts: subBwDown.setDescription('Downloading Bandwidth granted to the Subscriber.')
subAaaState = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subAaaState.setStatus('current')
if mibBuilder.loadTexts: subAaaState.setDescription('The AAA state of the Subscriber.')
subExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subExpiration.setStatus('current')
if mibBuilder.loadTexts: subExpiration.setDescription('Expiration Info of the Subscriber.')
subIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: subIdleTimeout.setDescription('Time before the subscriber gets logged off due to inactivity.')
subBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subBytesSent.setStatus('current')
if mibBuilder.loadTexts: subBytesSent.setDescription('Bytes sent by the Subscriber, units are MBytes')
subBytesRec = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subBytesRec.setStatus('current')
if mibBuilder.loadTexts: subBytesRec.setDescription('Bytes received by the Subscriber, units are MBytes')
subBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subBytesTotal.setStatus('current')
if mibBuilder.loadTexts: subBytesTotal.setDescription('Total Bytes sent and received by the Subscriber, units are MBytes.')
subProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subProxy.setStatus('current')
if mibBuilder.loadTexts: subProxy.setDescription('Indicates if the subscriber is proxied or not.')
subSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subSsid.setStatus('current')
if mibBuilder.loadTexts: subSsid.setDescription('For wireless subscribers this entry shows their SSID.')
subStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 1, 1, 16), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subStatus.setStatus('current')
if mibBuilder.loadTexts: subStatus.setDescription('Status of the Subscriber Current table entry. ')
aaaAuthSubTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 2), )
if mibBuilder.loadTexts: aaaAuthSubTable.setStatus('current')
if mibBuilder.loadTexts: aaaAuthSubTable.setDescription('List of authorized subscribers.')
aaaAuthSubTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 2, 1), ).setIndexNames((0, "NOMADIX-MIB", "authSubIndex"))
if mibBuilder.loadTexts: aaaAuthSubTableEntry.setStatus('current')
if mibBuilder.loadTexts: aaaAuthSubTableEntry.setDescription('A subscriber entry.')
authSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authSubIndex.setStatus('current')
if mibBuilder.loadTexts: authSubIndex.setDescription('Subscriber Index.')
authSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("subscriber", 0), ("device", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSubType.setStatus('current')
if mibBuilder.loadTexts: authSubType.setDescription('Set to 0 if adding a subscriber, to 1 if adding a device.')
authSubDhcpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("private", 0), ("public", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSubDhcpAddrType.setStatus('current')
if mibBuilder.loadTexts: authSubDhcpAddrType.setDescription('Set to 0 for private pool, set to 1 for public pool. Note: only used if subscriber is configured for DHCP.')
authSubDevicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSubDevicePort.setStatus('current')
if mibBuilder.loadTexts: authSubDevicePort.setDescription('802.1Q Device Port. Note: only if device and Port-Location is 802.1Q two-ways.')
authSubMac = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSubMac.setStatus('current')
if mibBuilder.loadTexts: authSubMac.setDescription('Physical Address of the subscriber entered in one of the formats: 001122334455, 00-11-22-33-44-55 or 00:11:22:33:44:55. Default value is 00:00:00:00:00:00 if the authSubName is set and authSubMac was not entered yet.')
authSubIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSubIp.setStatus('current')
if mibBuilder.loadTexts: authSubIp.setDescription('IP Address of the subscriber.')
authSubName = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 96))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSubName.setStatus('current')
if mibBuilder.loadTexts: authSubName.setDescription('Name of the subscriber.')
authSubPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSubPassword.setStatus('current')
if mibBuilder.loadTexts: authSubPassword.setDescription('Password of the subscriber.')
authSubCountDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSubCountDown.setStatus('current')
if mibBuilder.loadTexts: authSubCountDown.setDescription('Set to 1 to enable count-down after login for a subscriber, 0 to disable. Note: username and password should have been entered before, in order to enable this option. Also, expiration time must be entered after enabling this option, in order for it to work properly.')
authSubExpTimeHrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSubExpTimeHrs.setStatus('current')
if mibBuilder.loadTexts: authSubExpTimeHrs.setDescription('Expiration time (hours) of the subscriber.')
authSubExpTimeMins = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSubExpTimeMins.setStatus('current')
if mibBuilder.loadTexts: authSubExpTimeMins.setDescription('Expiration time (mins) of the subscriber.')
authSubAmtPaid = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSubAmtPaid.setStatus('current')
if mibBuilder.loadTexts: authSubAmtPaid.setDescription('Amount paid by the subscriber shown in formats: dd.cc or dd. Default is 0.00. Entering dd will result in dd.00. d=dollar, c=cent.')
authSubAmtLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authSubAmtLeft.setStatus('current')
if mibBuilder.loadTexts: authSubAmtLeft.setDescription('Currency amount left when subscriber who has purchased access moves to a free plan. Formats same as in authSubAmtPaid.')
authSubUser1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSubUser1.setStatus('current')
if mibBuilder.loadTexts: authSubUser1.setDescription('Optional field. Used for simple notations about the subscriber.')
authSubUser2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSubUser2.setStatus('current')
if mibBuilder.loadTexts: authSubUser2.setDescription('Optional field. Used for simple notations about the subscriber.')
authSubBwUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSubBwUp.setStatus('current')
if mibBuilder.loadTexts: authSubBwUp.setDescription('Uploading Bandwidth granted to the subscriber. Variable in the range from 0 to the max value found in bwmUpWanLinkSpeed. (in kbps)')
authSubBwDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSubBwDown.setStatus('current')
if mibBuilder.loadTexts: authSubBwDown.setDescription('Downloading Bandwidth granted to the subscriber. Variable in the range from 0 to the max value found in bwmDownWanLinkSpeed. (in kbps)')
authSubConfirmation = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authSubConfirmation.setStatus('current')
if mibBuilder.loadTexts: authSubConfirmation.setDescription('Confirmation number issued by credit card server.')
authSubStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 2, 1, 19), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSubStatus.setStatus('current')
if mibBuilder.loadTexts: authSubStatus.setDescription('Status of the Authorized Subscriber table entry.')
aaaLoginPageFailover = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 25))
aaaLoginPageFailoverOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaLoginPageFailoverOn.setStatus('current')
if mibBuilder.loadTexts: aaaLoginPageFailoverOn.setDescription('Enables Login Page Failover')
aaaLpfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 25, 2), )
if mibBuilder.loadTexts: aaaLpfStatusTable.setStatus('current')
if mibBuilder.loadTexts: aaaLpfStatusTable.setDescription('List of External Login Page servers currently being tracked.')
aaaLpfStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 25, 2, 1), ).setIndexNames((0, "NOMADIX-MIB", "lpfEntryIndex"))
if mibBuilder.loadTexts: aaaLpfStatusTableEntry.setStatus('current')
if mibBuilder.loadTexts: aaaLpfStatusTableEntry.setDescription('An External Login Page server entry.')
lpfEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 25, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpfEntryIndex.setStatus('current')
if mibBuilder.loadTexts: lpfEntryIndex.setDescription('External Login Page server index.')
lpfEntryNickname = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 25, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpfEntryNickname.setStatus('current')
if mibBuilder.loadTexts: lpfEntryNickname.setDescription('Symbolic Name of the Login Page server.')
lpfEntryOnlineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 25, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpfEntryOnlineStatus.setStatus('current')
if mibBuilder.loadTexts: lpfEntryOnlineStatus.setDescription('Status of an External Login Page server.')
radHistSysloggingOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radHistSysloggingOn.setStatus('current')
if mibBuilder.loadTexts: radHistSysloggingOn.setDescription('Setting this value to (1) will enable logging (via standard SYSLOG) of RADIUS packets. Setting this value to (0) will disable RADIUS history logging. (NOTE: Which types of RADIUS packets will be logged is specified using other parameters.)')
radHistSyslogNumber = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radHistSyslogNumber.setStatus('current')
if mibBuilder.loadTexts: radHistSyslogNumber.setDescription('The log number (0-7 of standard SYSLOG) for AAA logging.')
radHistSyslogFilter = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radHistSyslogFilter.setStatus('current')
if mibBuilder.loadTexts: radHistSyslogFilter.setDescription('Select the filter level for RADIUS History Logs Available settings: Emergency(0), Alert(1), Critical(2), Error(3), Warning(4), Notice(5), Info(6), Debug(7)')
radHistSyslogServerIp = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radHistSyslogServerIp.setStatus('current')
if mibBuilder.loadTexts: radHistSyslogServerIp.setDescription('IP address of the SYSLOG server to receive AAA messages.')
radHistSyslogSaveToFile = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radHistSyslogSaveToFile.setStatus('current')
if mibBuilder.loadTexts: radHistSyslogSaveToFile.setDescription('Setting this value to (1) will enable saving of RADIUS History logs to file. Setting this value to (0) will disable storing of AAA logs in a file.')
radProxyAcctHistLog = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radProxyAcctHistLog.setStatus('current')
if mibBuilder.loadTexts: radProxyAcctHistLog.setDescription(' Setting this value to (1) enables the logging of RADIUS Proxy Accounting packets to a logfile on the system flash. Setting it to zero disables such logging and purges the history logfile.')
radProxyAcctHistSyslog = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 18, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radProxyAcctHistSyslog.setStatus('current')
if mibBuilder.loadTexts: radProxyAcctHistSyslog.setDescription(' If RADIUS History Syslogging is enabled, then setting this value to (1) causes RADIUS Proxy accounting packets to be included in that syslogging. Setting it to zero causes these packets not to be included.')
aaaRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19))
aaaRadiusRoutingMode = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("realm-based", 1), ("fixed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusRoutingMode.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusRoutingMode.setDescription('Set to 0 to disable radius client operation. Set to 1 to enable realm-based routing of RADIUS requests. Set to 2 to route all RADIUS requests to the default RADIUS service profile. Note: If trying to set this value returns an error, please check to see if you have a valid license for this feature.')
aaaRadiusDefProf = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusDefProf.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusDefProf.setDescription('Set the default RADIUS service profile to be used for otherwise un-routeable RADIUS requests. Mandatory if the routing mode is set to fixed. There must be a profile defined with the specified name.')
aaaRadiusCacheOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusCacheOn.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusCacheOn.setDescription('Set to 1 to enable radius profile caching, 0 to disable.')
aaaRadiusDefaultIdle = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusDefaultIdle.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusDefaultIdle.setDescription('Set default timeout for radius subscribers.')
aaaRadiusNasIdOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusNasIdOn.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusNasIdOn.setDescription('Set to 1 to Send NAS ID, 0 to disable.')
aaaRadiusNasId = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusNasId.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusNasId.setDescription('Set the NAS Identifier.')
aaaRadiusNasIpOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusNasIpOn.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusNasIpOn.setDescription('Set to 1 to Send NAS IP, 0 to disable.')
aaaRadiusNasPortOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusNasPortOn.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusNasPortOn.setDescription('Set to 1 to Send NAS Port Type, 0 to disable.')
aaaRadiusNasPortType = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusNasPortType.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusNasPortType.setDescription('Set the NAS Port Type.')
aaaRadiusFipOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusFipOn.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusFipOn.setDescription('Set to 1 to Send Frame IP, 0 to disable.')
aaaRadiusRedUrlOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusRedUrlOn.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusRedUrlOn.setDescription('Set to 1 to support URL redirection, 0 to disable.')
aaaRadiusGoodbyeUrlOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusGoodbyeUrlOn.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusGoodbyeUrlOn.setDescription('Set to 1 to support Goodbye URL redirection, 0 to disable.')
aaaRadiusForgotPasswordUrlOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusForgotPasswordUrlOn.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusForgotPasswordUrlOn.setDescription('Set to 1 to support forgot password URL redirection, 0 to disable.')
aaaRadiusForgotPasswordUrl = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 238))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusForgotPasswordUrl.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusForgotPasswordUrl.setDescription('URL of the RADIUS Forgot Password')
aaaRadiusSubnetAttrOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusSubnetAttrOn.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusSubnetAttrOn.setDescription('Set to 1 to support subnet attribute, 0 to disable.')
aaaRadiusNetVlanOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusNetVlanOn.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusNetVlanOn.setDescription('Set to 1 to enable, 0 to disable RADIUS based WAN VLAN. Note: enabling RADIUS based WAN VLAN will automatically disable SSID based WAN VLAN.')
aaaRadiusNetVlanDefaultOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusNetVlanDefaultOn.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusNetVlanDefaultOn.setDescription('Set to 1 to enable default 802.1q tag for system traffic, 0 to disable.')
aaaRadiusNetVlanDefaultTag = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusNetVlanDefaultTag.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusNetVlanDefaultTag.setDescription('Set the default 802.1q tag for system traffic.')
aaaRadiusLocalAuthPort = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusLocalAuthPort.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusLocalAuthPort.setDescription('Local UDP port for communicating with authentication servers. Must be either 0 or in the range 1024-5000.')
aaaRadiusLocalAcctPort = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusLocalAcctPort.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusLocalAcctPort.setDescription('Local UDP port for communicating with accounting servers. Must be either 0 or in the range 1024-5000.')
aaaRadiusLoginRefresh = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusLoginRefresh.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusLoginRefresh.setDescription('Login refresh time for RADIUS subscribers')
aaaRadiusTerminationActionOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 2, 19, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusTerminationActionOn.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusTerminationActionOn.setDescription('Set to 1 to support Termination-Action attribute, 0 to disable.')
blockTelnetAccessOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: blockTelnetAccessOn.setStatus('current')
if mibBuilder.loadTexts: blockTelnetAccessOn.setDescription('Set to 1 to enable blocking of all Telnet access, 0 to disable. Note: if set to 1, Telnet access will not be allowed, even from addresses in the access control IP Table.')
blockWebAccessOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: blockWebAccessOn.setStatus('current')
if mibBuilder.loadTexts: blockWebAccessOn.setDescription('Set to 1 to enable blocking of all Web access, 0 to disable. Note: if set to 1, Web access will not be allowed, even from addresses in the access control IP Table.')
blockFtpAccessOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: blockFtpAccessOn.setStatus('current')
if mibBuilder.loadTexts: blockFtpAccessOn.setDescription('Set to 1 to enable blocking of all FTP access, 0 to disable. Note: if set to 1, FTP access will not be allowed, even from addresses in the access control IP Table.')
accessControlOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlOn.setStatus('current')
if mibBuilder.loadTexts: accessControlOn.setDescription('Set to 1 to enable Source IP Access Control, 0 to disable. Note: If trying to set this value returns an error, please check to see if you have a valid license for this feature.')
accessControlIpTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 4, 5), )
if mibBuilder.loadTexts: accessControlIpTable.setStatus('current')
if mibBuilder.loadTexts: accessControlIpTable.setDescription('Table of Access Control IPs')
accessControlIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 4, 5, 1), ).setIndexNames((0, "NOMADIX-MIB", "acIndex"))
if mibBuilder.loadTexts: accessControlIpEntry.setStatus('current')
if mibBuilder.loadTexts: accessControlIpEntry.setDescription(' Access Control table entry ')
acIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acIndex.setStatus('current')
if mibBuilder.loadTexts: acIndex.setDescription(' access control table index ')
acStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 4, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acStartAddress.setStatus('current')
if mibBuilder.loadTexts: acStartAddress.setDescription('Access Control range Starting IP address ')
acEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 4, 5, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acEndAddress.setStatus('current')
if mibBuilder.loadTexts: acEndAddress.setDescription('Access Control range end IP address ')
acStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 4, 5, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acStatus.setStatus('current')
if mibBuilder.loadTexts: acStatus.setDescription('Status of the Access Control IP Table entry.')
blockSFTPAccessOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: blockSFTPAccessOn.setStatus('current')
if mibBuilder.loadTexts: blockSFTPAccessOn.setDescription('Set to 1 to enable blocking of all SFTP access, 0 to disable. Note: if set to 1, SFTP access will not be allowed, even from addresses in the access control IP Table.')
blockSSHShellAccessOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: blockSSHShellAccessOn.setStatus('current')
if mibBuilder.loadTexts: blockSSHShellAccessOn.setDescription('Set to 1 to enable blocking of all SSH Shell access, 0 to disable. Note: if set to 1, SSH Shell access will not be allowed, even from addresses in the access control IP Table.')
bandwidthManagementOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthManagementOn.setStatus('current')
if mibBuilder.loadTexts: bandwidthManagementOn.setDescription('Set to 1 to enable Bandwidth Management, 0 to disable. Note: If trying to set this value returns an error, please check to see if you have a valid license for this feature. Note: You must reboot for changes to take effect.')
bwmUpWanLinkSpeed = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmUpWanLinkSpeed.setStatus('current')
if mibBuilder.loadTexts: bwmUpWanLinkSpeed.setDescription("Uplink Bandwidth through the Network's WAN Link to control using Bandwidth Management. Note: You must reboot for changes to take effect.")
bwmDownWanLinkSpeed = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmDownWanLinkSpeed.setStatus('current')
if mibBuilder.loadTexts: bwmDownWanLinkSpeed.setDescription("Downlink Bandwidth through the Network's WAN link to control using Bandwidth Management. Note: You must reboot for changes to take effect.")
brmMirrorOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmMirrorOn.setStatus('current')
if mibBuilder.loadTexts: brmMirrorOn.setDescription('Setting this value to (1) will cause Bill Record Mirroring to be enabled by this unit. Setting this value to (0) will disable Bill Record Mirroring. Note: If trying to set this value returns an error, please check to see if you have a valid license for this feature.')
brmPropertyId = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmPropertyId.setStatus('current')
if mibBuilder.loadTexts: brmPropertyId.setDescription('Id of the Property the unit is installed in')
brmNseId = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brmNseId.setStatus('current')
if mibBuilder.loadTexts: brmNseId.setDescription('Id of this unit')
brmServerIpPrimary = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmServerIpPrimary.setStatus('current')
if mibBuilder.loadTexts: brmServerIpPrimary.setDescription('IP Address of the Primary Mirroring Server')
brmServerUrlPrimary = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 238))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmServerUrlPrimary.setStatus('current')
if mibBuilder.loadTexts: brmServerUrlPrimary.setDescription('URL of the Primary Mirroring Server')
brmServerSecretPrimary = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmServerSecretPrimary.setStatus('current')
if mibBuilder.loadTexts: brmServerSecretPrimary.setDescription('Secret Key of the Primary Mirroring Server')
brmServerPortPrimary = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmServerPortPrimary.setStatus('current')
if mibBuilder.loadTexts: brmServerPortPrimary.setDescription('Port Number of the Primary Mirroring Server')
brmServerIpSecondary = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmServerIpSecondary.setStatus('current')
if mibBuilder.loadTexts: brmServerIpSecondary.setDescription('IP Address of the Secondary Mirroring Server')
brmServerUrlSecondary = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 238))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmServerUrlSecondary.setStatus('current')
if mibBuilder.loadTexts: brmServerUrlSecondary.setDescription('URL of the Secondary Mirroring Server')
brmServerSecretSecondary = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmServerSecretSecondary.setStatus('current')
if mibBuilder.loadTexts: brmServerSecretSecondary.setDescription('Secret Key of the Secondary Mirroring Server')
brmServerPortSecondary = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmServerPortSecondary.setStatus('current')
if mibBuilder.loadTexts: brmServerPortSecondary.setDescription('Port Number of the Secondary Mirroring Server')
brmServerCCIpOne = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmServerCCIpOne.setStatus('current')
if mibBuilder.loadTexts: brmServerCCIpOne.setDescription('IP Address of the First Carbon Copy Server')
brmServerCCUrlOne = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 238))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmServerCCUrlOne.setStatus('current')
if mibBuilder.loadTexts: brmServerCCUrlOne.setDescription('URL of the First Carbon Copy Server')
brmServerCCSecretOne = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmServerCCSecretOne.setStatus('current')
if mibBuilder.loadTexts: brmServerCCSecretOne.setDescription('Secret Key of the First Carbon Copy Server')
brmServerCCPortOne = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmServerCCPortOne.setStatus('current')
if mibBuilder.loadTexts: brmServerCCPortOne.setDescription('Port Number of the First Carbon Copy Server')
brmServerCCIpTwo = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmServerCCIpTwo.setStatus('current')
if mibBuilder.loadTexts: brmServerCCIpTwo.setDescription('IP Address of the Second Carbon Copy Server')
brmServerCCUrlTwo = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 238))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmServerCCUrlTwo.setStatus('current')
if mibBuilder.loadTexts: brmServerCCUrlTwo.setDescription('URL of the Second Carbon Copy Server')
brmServerCCSecretTwo = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmServerCCSecretTwo.setStatus('current')
if mibBuilder.loadTexts: brmServerCCSecretTwo.setDescription('Secret Key of the Second Carbon Copy Server')
brmServerCCPortTwo = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmServerCCPortTwo.setStatus('current')
if mibBuilder.loadTexts: brmServerCCPortTwo.setDescription('Port Number of the Second Carbon Copy Server')
brmServerCCIpThree = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmServerCCIpThree.setStatus('current')
if mibBuilder.loadTexts: brmServerCCIpThree.setDescription('IP Address of the Third Carbon Copy Server')
brmServerCCUrlThree = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 238))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmServerCCUrlThree.setStatus('current')
if mibBuilder.loadTexts: brmServerCCUrlThree.setDescription('URL of the Third Carbon Copy Server')
brmServerCCSecretThree = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmServerCCSecretThree.setStatus('current')
if mibBuilder.loadTexts: brmServerCCSecretThree.setDescription('Secret Key of the Third Carbon Copy Server')
brmServerCCPortThree = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmServerCCPortThree.setStatus('current')
if mibBuilder.loadTexts: brmServerCCPortThree.setDescription('Port Number of the Third Carbon Copy Server')
brmRetransMethod = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alternate", 1), ("notAlternate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmRetransMethod.setStatus('current')
if mibBuilder.loadTexts: brmRetransMethod.setDescription('Retransmit Method. Set to (1) for Alternate (round robin) Set to (2) for Do Not Alternate (fail-over)')
brmRetransAttempts = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmRetransAttempts.setStatus('current')
if mibBuilder.loadTexts: brmRetransAttempts.setDescription('Number of Retransmit Attempts')
brmRetransDelay = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 6, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brmRetransDelay.setStatus('current')
if mibBuilder.loadTexts: brmRetransDelay.setDescription('Retransmit Delay')
datSessionTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 8, 1), )
if mibBuilder.loadTexts: datSessionTable.setStatus('current')
if mibBuilder.loadTexts: datSessionTable.setDescription('Current DAT sessions.')
datSessionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 8, 1, 1), ).setIndexNames((0, "NOMADIX-MIB", "datNetPort"))
if mibBuilder.loadTexts: datSessionTableEntry.setStatus('current')
if mibBuilder.loadTexts: datSessionTableEntry.setDescription('DAT session Entry')
datSubIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 8, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: datSubIp.setStatus('current')
if mibBuilder.loadTexts: datSubIp.setDescription('IP Address of the Subscriber')
datSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: datSubPort.setStatus('current')
if mibBuilder.loadTexts: datSubPort.setDescription('Port of the TCP session')
datSubMac = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: datSubMac.setStatus('current')
if mibBuilder.loadTexts: datSubMac.setDescription('MAC Address of the Subscriber')
datNetIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 8, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: datNetIp.setStatus('current')
if mibBuilder.loadTexts: datNetIp.setDescription('IP address DAT mapped the TCP session to')
datNetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: datNetPort.setStatus('current')
if mibBuilder.loadTexts: datNetPort.setDescription('Port that DAT mapped the TCP session to')
datDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 8, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: datDestIp.setStatus('current')
if mibBuilder.loadTexts: datDestIp.setDescription('IP address of the destination')
datDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 8, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: datDestPort.setStatus('current')
if mibBuilder.loadTexts: datDestPort.setDescription('Port of destination')
datProto = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 8, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: datProto.setStatus('current')
if mibBuilder.loadTexts: datProto.setDescription('Transport Protocol (ICMP, TCP, UDP, etc.)')
datSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 8, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: datSessState.setStatus('current')
if mibBuilder.loadTexts: datSessState.setDescription('Session State')
datTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 8, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: datTimeout.setStatus('current')
if mibBuilder.loadTexts: datTimeout.setDescription('DAT timeout')
dhcpDisable = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpDisable.setStatus('current')
if mibBuilder.loadTexts: dhcpDisable.setDescription('Set to true to disable DHCP services. This variable returns false when one of the DHCP services is enabled through either dhcpIpUpsell, dhcpServerEnable or dhcpRelayEnable. Note: You must reboot for changes to take effect.')
dhcpIpUpsell = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpIpUpsell.setStatus('current')
if mibBuilder.loadTexts: dhcpIpUpsell.setDescription('Set to 0 to disable public IP Upsell service, 1 to enable public IP Upsell. Requires SUBNET to be enabled. Make sure you have a valid license for this feature; otherwise, an error will be returned when trying to set. Please reboot for the changes to take effect.')
dhcpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 3))
dhcpServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerEnable.setDescription('Set to 0 to disable DHCP service, 1 to enable DHCP server. Note: You must reboot for changes to take effect.')
dhcpServerSubnetBased = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerSubnetBased.setStatus('current')
if mibBuilder.loadTexts: dhcpServerSubnetBased.setDescription('Set to 0 to disable subnet-based DHCP service, 1 to enable subnet-based DHCP service. Note: You must reboot for changes to take effect.')
dhcpServerTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 3, 4), )
if mibBuilder.loadTexts: dhcpServerTable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerTable.setDescription('Currently active DHCP pools.')
dhcpPoolTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 3, 4, 1), ).setIndexNames((0, "NOMADIX-MIB", "poolIndex"))
if mibBuilder.loadTexts: dhcpPoolTableEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolTableEntry.setDescription('Table of DHCP pools')
poolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolIndex.setStatus('current')
if mibBuilder.loadTexts: poolIndex.setDescription(' Lease Table Index')
serverIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 3, 4, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverIp.setStatus('current')
if mibBuilder.loadTexts: serverIp.setDescription('IP Address to bind to the internal DHCP Server. Note: You must reboot for changes to take effect.')
netMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 3, 4, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMask.setStatus('current')
if mibBuilder.loadTexts: netMask.setDescription('DHCP Server subnet mask. Note: You must reboot for changes to take effect.')
poolStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 3, 4, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poolStartIp.setStatus('current')
if mibBuilder.loadTexts: poolStartIp.setDescription('Starting IP address of DHCP lease pool. Note: You must reboot for changes to take effect.')
poolStopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 3, 4, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poolStopIp.setStatus('current')
if mibBuilder.loadTexts: poolStopIp.setDescription('Ending IP address of DHCP lease pool. Note: You must reboot for changes to take effect.')
leaseMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 3, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: leaseMinutes.setStatus('current')
if mibBuilder.loadTexts: leaseMinutes.setDescription('DHCP lease duration in minutes. Note: You must reboot for changes to take effect.')
publicPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: publicPool.setStatus('current')
if mibBuilder.loadTexts: publicPool.setDescription('public IP pool')
ipUpSell = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 3, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipUpSell.setStatus('current')
if mibBuilder.loadTexts: ipUpSell.setDescription('IP pool used for IP Upsell')
defaultPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 3, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultPool.setStatus('current')
if mibBuilder.loadTexts: defaultPool.setDescription('IP pool is the default pool')
poolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 3, 4, 1, 20), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poolStatus.setStatus('current')
if mibBuilder.loadTexts: poolStatus.setDescription('Status of the DHCP pool table entry.')
dhcpLeaseTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 3, 6), )
if mibBuilder.loadTexts: dhcpLeaseTable.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseTable.setDescription('Currently active DHCP leases.')
dhcpLeaseTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 3, 6, 1), ).setIndexNames((0, "NOMADIX-MIB", "leaseIndex"))
if mibBuilder.loadTexts: dhcpLeaseTableEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseTableEntry.setDescription('Table of DHCP Leases')
leaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: leaseIndex.setStatus('current')
if mibBuilder.loadTexts: leaseIndex.setDescription(' Lease Table Index')
leaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 3, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: leaseAddress.setStatus('current')
if mibBuilder.loadTexts: leaseAddress.setDescription('IP Address')
leaseCLID = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 3, 6, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: leaseCLID.setStatus('current')
if mibBuilder.loadTexts: leaseCLID.setDescription('Client ID of subscriber to whom lease is assigned')
leaseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("available", 0), ("reserved", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: leaseStatus.setStatus('current')
if mibBuilder.loadTexts: leaseStatus.setDescription('Status of the lease (available or reserved)')
dhcpRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 10))
dhcpRelayEnable = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayEnable.setDescription('Set to 0 to disable DHCP Relay service, 1 to enable DHCP Relay service. Note: You must reboot for changes to take effect.')
dhcpRelayAgentIP = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 10, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayAgentIP.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayAgentIP.setDescription('IP Address of the Relay Agent. Note: You must reboot for changes to take effect.')
dhcpRelayServerIP = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 10, 10, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayServerIP.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayServerIP.setDescription('IP Address to which the Relay Agent will forward subscriber DHCP requests. Note: You must reboot for changes to take effect.')
dnsHostName = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 12, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsHostName.setStatus('current')
if mibBuilder.loadTexts: dnsHostName.setDescription('DNS Hostname. Note: You must reboot for changes to take effect.')
dnsDomain = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 12, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsDomain.setStatus('current')
if mibBuilder.loadTexts: dnsDomain.setDescription('DNS domain. Note: In order to set this value, DHCP Client must be disabled. Note: You must reboot for changes to take effect.')
dnsPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 12, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsPrimaryServer.setStatus('current')
if mibBuilder.loadTexts: dnsPrimaryServer.setDescription('Primary DNS Server. Note: In order to set this value, both DHCP Client and PPPoE Client must be disabled. Note: You must reboot for changes to take effect.')
dnsSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 12, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsSecondaryServer.setStatus('current')
if mibBuilder.loadTexts: dnsSecondaryServer.setDescription('Secondary DNS Server. Note: In order to set this value, both DHCP Client and PPPoE Client must be disabled. Note: You must reboot for changes to take effect.')
dnsTertiaryServer = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 12, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsTertiaryServer.setStatus('current')
if mibBuilder.loadTexts: dnsTertiaryServer.setDescription('Tertiary DNS Server. Note: You must reboot for changes to take effect.')
dynDnsEnable = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 50, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynDnsEnable.setStatus('current')
if mibBuilder.loadTexts: dynDnsEnable.setDescription('Set to 0 to disable Dynamic DNS, 1 to enable Dynamic DNS')
dynDnsProtocol = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 50, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dynDnsOrgProto", 0), ("dynDnsOrgProtoSecure", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynDnsProtocol.setStatus('current')
if mibBuilder.loadTexts: dynDnsProtocol.setDescription('Set to 0 to set protocol to dyndns.org, or set protocol to 1 to set it to dyndns.org (secure) protocol')
dynDnsServer = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 50, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynDnsServer.setStatus('current')
if mibBuilder.loadTexts: dynDnsServer.setDescription("Server name given by dynamic DNS provider. Please specify only domain name, without http://, '/', etc")
dynDnsPort = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 50, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dynDnsPort80", 0), ("dynDnsPort8245", 1), ("dynDnsPort443", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynDnsPort.setStatus('current')
if mibBuilder.loadTexts: dynDnsPort.setDescription('Set port on which to connect to dynamic dns provider. NOTE: port 443 may only be chosen if protocol is dynDnsOrgProtoSecure (dyndns.org (secure)). For non-secure version of dyndns.org protocol: set to 0 for port 80; set to 1 for port 8245. For secure version: set port to 443')
dynDnsHostname = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 50, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynDnsHostname.setStatus('current')
if mibBuilder.loadTexts: dynDnsHostname.setDescription("Hostname which ip address of the NSE will be mapped to. Please specify only domain name, without http://, '/', etc")
dynDnsUsername = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 50, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynDnsUsername.setStatus('current')
if mibBuilder.loadTexts: dynDnsUsername.setDescription('Username associated with dynamic dns account')
dynDnsPassword = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 50, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynDnsPassword.setStatus('current')
if mibBuilder.loadTexts: dynDnsPassword.setDescription('Password associated with dynamic dns account.')
dynDnsForceUpdate = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 50, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynDnsForceUpdate.setStatus('current')
if mibBuilder.loadTexts: dynDnsForceUpdate.setDescription('When set to 1 will perform a forced dynamic DNS update. When set to false will have no effect. Will always return 0 on get. IMPORTANT: some Dynamic DNS Providers (e.g. dyndns.org) consider unnecessary updates (i.e. updates with unchanged IP addresses) abusive. Such updates may result in hostname / username being blocked.')
greTunnelingEnable = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greTunnelingEnable.setStatus('current')
if mibBuilder.loadTexts: greTunnelingEnable.setDescription('Set to 0 to disable GRE Tunneling service, 1 to enable GRE Tunneling service. Note: you must reboot for changes to take effect.')
greVpnConcentratorIp = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 13, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greVpnConcentratorIp.setStatus('current')
if mibBuilder.loadTexts: greVpnConcentratorIp.setDescription('IP Address of the VPN Concentrator Server. Note: you must reboot for changes to take effect.')
greInterfaceIp = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 13, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greInterfaceIp.setStatus('current')
if mibBuilder.loadTexts: greInterfaceIp.setDescription('IP Address of the GRE Interface on this device. Note: you must reboot for changes to take effect.')
greInterfaceNetmask = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 13, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greInterfaceNetmask.setStatus('current')
if mibBuilder.loadTexts: greInterfaceNetmask.setDescription('The Subnet Mask for the GRE Interface on this device. Note: you must reboot for changes to take effect.')
greInterfaceGateway = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 13, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greInterfaceGateway.setStatus('current')
if mibBuilder.loadTexts: greInterfaceGateway.setDescription('The Gateway for the GRE Interface on this device. Note: you must reboot for changes to take effect.')
hprOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hprOn.setStatus('current')
if mibBuilder.loadTexts: hprOn.setDescription('Setting this value to (1) will cause home page redirection to be performed by this unit. Setting this value to (0) will discontinue HPR. Note: If trying to set this value returns an error, please check to see if you have a valid license for this feature.')
hprUrl = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 14, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hprUrl.setStatus('current')
if mibBuilder.loadTexts: hprUrl.setDescription('The fully qualified WWW URL at which to redirect Home Page Requests.')
hprParameterPassing = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hprParameterPassing.setStatus('current')
if mibBuilder.loadTexts: hprParameterPassing.setDescription('Setting this value to (1) will cause inclusion of parameters with the passed URL during HPR. Setting this value to (0) will discontinue parameter passing.')
hprRedirectionFrequency = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 14, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hprRedirectionFrequency.setStatus('current')
if mibBuilder.loadTexts: hprRedirectionFrequency.setDescription('The time interval, specified in minutes, after which the next redirection will take place.')
iccOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccOn.setStatus('current')
if mibBuilder.loadTexts: iccOn.setDescription('Set to (1) to enable the ICC. Set to (0) to disable. Note: If trying to set this value returns an error, please check to see if you have a valid license for this feature.')
iccTitle = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccTitle.setStatus('current')
if mibBuilder.loadTexts: iccTitle.setDescription('The title to appear on the ICC console window')
iccLogoutOption = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("redisplay", 0), ("logout", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccLogoutOption.setStatus('current')
if mibBuilder.loadTexts: iccLogoutOption.setDescription('What should the ICC do when a subscriber closes it? 0 to Redisplay, 2 to logout and return the user to a *Pending* state (valid only with RADIUS)')
iccLanguageOption = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("english", 0), ("chinese", 1), ("french", 2), ("german", 3), ("japanese", 4), ("spanish", 5), ("other", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccLanguageOption.setStatus('current')
if mibBuilder.loadTexts: iccLanguageOption.setDescription('What language would you like to be displayed on the ICC? Available settings: 0=English, 1=Chinese, 2=French, 3=German, 4=Japanese, 5=Spanish, 6=Other. If *other* is selected, please make a selection for iccCharSetOption.')
iccTimerOption = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("remaining", 0), ("elapsed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccTimerOption.setStatus('current')
if mibBuilder.loadTexts: iccTimerOption.setDescription('Set to (1) for ICC Elapsed Time. Set to (0) for Time Remaining. Note: If trying to set this value returns an error, please check to see if you have a valid license for this feature.')
iccCharSetOption = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("default", 0), ("western-iso-8859-1", 1), ("chinese-big5", 2), ("chinese-euc-cn", 3), ("chinese-euc-tw", 4), ("chinese-gb2312", 5), ("japanese-euc-jp", 6), ("japanese-iso-2022-jp", 7), ("japanese-shift-jis", 8), ("korean-euc-kr", 9), ("korean-iso-2022-kr", 10), ("korean-ks-c-5601", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccCharSetOption.setStatus('current')
if mibBuilder.loadTexts: iccCharSetOption.setDescription('This value indicates specific character set to be displayed. In order to set this value, iccLanguageOption should be first set to *other*. Available settings: 0=default, 1=western-iso-8859-1, 2=chinese-big5, 3=chinese-euc-cn, 4=chinese-euc-tw, 5=chinese-gb2312, 6=japanese-euc-jp, 7=japanese-iso-2022-jp, 8=japanese-shift-jis, 9=korean-euc-kr, 10=korean-iso-2022-kr, 11=korean-ks-c-5601.')
iccButtons = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10))
iccISPLogoButton = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 5))
iccButton2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 6))
iccButton3 = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 7))
iccButton4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 8))
iccButton5 = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 9))
iccButton6 = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 10))
iccButton7 = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 11))
iccButton8 = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 12))
iccButton9 = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 13))
iccISPLogoButtonName = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 37))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccISPLogoButtonName.setStatus('current')
if mibBuilder.loadTexts: iccISPLogoButtonName.setDescription(' ISP Logo Button Name')
iccISPLogoButtonURL = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccISPLogoButtonURL.setStatus('current')
if mibBuilder.loadTexts: iccISPLogoButtonURL.setDescription(' ISP Logo Button URL')
iccISPLogoButtonImgName = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccISPLogoButtonImgName.setStatus('current')
if mibBuilder.loadTexts: iccISPLogoButtonImgName.setDescription(' ISP Logo Button Image Name')
iccButtonName2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 37))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonName2.setStatus('current')
if mibBuilder.loadTexts: iccButtonName2.setDescription(' ICC Button 2 Name')
iccButtonURL2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonURL2.setStatus('current')
if mibBuilder.loadTexts: iccButtonURL2.setDescription(' ICC Button 2 URL')
iccButtonImgName2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonImgName2.setStatus('current')
if mibBuilder.loadTexts: iccButtonImgName2.setDescription(' ICC Button 2 Image Name')
iccButtonName3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 37))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonName3.setStatus('current')
if mibBuilder.loadTexts: iccButtonName3.setDescription(' ICC Button 3 Name')
iccButtonURL3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonURL3.setStatus('current')
if mibBuilder.loadTexts: iccButtonURL3.setDescription(' ICC Button 3 URL')
iccButtonImgName3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonImgName3.setStatus('current')
if mibBuilder.loadTexts: iccButtonImgName3.setDescription(' ICC Button 3 Image Name')
iccButtonName4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 37))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonName4.setStatus('current')
if mibBuilder.loadTexts: iccButtonName4.setDescription(' ICC Button 4 Name')
iccButtonURL4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonURL4.setStatus('current')
if mibBuilder.loadTexts: iccButtonURL4.setDescription(' ICC Button 4 URL')
iccButtonImgName4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonImgName4.setStatus('current')
if mibBuilder.loadTexts: iccButtonImgName4.setDescription(' ICC Button 4 Image Name')
iccButtonName5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 37))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonName5.setStatus('current')
if mibBuilder.loadTexts: iccButtonName5.setDescription(' ICC Button 5 Name')
iccButtonURL5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonURL5.setStatus('current')
if mibBuilder.loadTexts: iccButtonURL5.setDescription(' ICC Button 5 URL')
iccButtonImgName5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonImgName5.setStatus('current')
if mibBuilder.loadTexts: iccButtonImgName5.setDescription(' ICC Button 5 Image Name')
iccButtonName6 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 37))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonName6.setStatus('current')
if mibBuilder.loadTexts: iccButtonName6.setDescription(' ICC Button 6 Name')
iccButtonURL6 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonURL6.setStatus('current')
if mibBuilder.loadTexts: iccButtonURL6.setDescription(' ICC Button 6 URL')
iccButtonImgName6 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonImgName6.setStatus('current')
if mibBuilder.loadTexts: iccButtonImgName6.setDescription(' ICC Button 6 Image Name')
iccButtonName7 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 11, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 37))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonName7.setStatus('current')
if mibBuilder.loadTexts: iccButtonName7.setDescription(' ICC Button 7 Name')
iccButtonURL7 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonURL7.setStatus('current')
if mibBuilder.loadTexts: iccButtonURL7.setDescription(' ICC Button 7 URL')
iccButtonImgName7 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 11, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonImgName7.setStatus('current')
if mibBuilder.loadTexts: iccButtonImgName7.setDescription(' ICC Button 7 Image Name')
iccButtonName8 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 12, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 37))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonName8.setStatus('current')
if mibBuilder.loadTexts: iccButtonName8.setDescription(' ICC Button 8 Name')
iccButtonURL8 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 12, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonURL8.setStatus('current')
if mibBuilder.loadTexts: iccButtonURL8.setDescription(' ICC Button 8 URL')
iccButtonImgName8 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 12, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonImgName8.setStatus('current')
if mibBuilder.loadTexts: iccButtonImgName8.setDescription(' ICC Button 8 Image Name')
iccButtonName9 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 13, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 37))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonName9.setStatus('current')
if mibBuilder.loadTexts: iccButtonName9.setDescription(' ICC Button 9 Name')
iccButtonURL9 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 13, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonURL9.setStatus('current')
if mibBuilder.loadTexts: iccButtonURL9.setDescription(' ICC Button 9 URL')
iccButtonImgName9 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 10, 13, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccButtonImgName9.setStatus('current')
if mibBuilder.loadTexts: iccButtonImgName9.setDescription(' ICC Button 9 Image Name')
iccBanners = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14))
iccBanner1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 14))
iccBanner2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 15))
iccBanner3 = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 16))
iccBanner4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 17))
iccBanner5 = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 18))
iccBannerName1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerName1.setStatus('current')
if mibBuilder.loadTexts: iccBannerName1.setDescription(' ICC Banner Name 1')
iccBannerURL1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 14, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerURL1.setStatus('current')
if mibBuilder.loadTexts: iccBannerURL1.setDescription('ICC Banner 1 URL')
iccBannerImgName1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 14, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerImgName1.setStatus('current')
if mibBuilder.loadTexts: iccBannerImgName1.setDescription('ICC Banner 1 Image Name')
iccBannerDuration1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 14, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerDuration1.setStatus('current')
if mibBuilder.loadTexts: iccBannerDuration1.setDescription('ICC Banner 1 Duration in seconds. Minimum allowed value is 30.')
iccBannerStartTime1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 14, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerStartTime1.setStatus('current')
if mibBuilder.loadTexts: iccBannerStartTime1.setDescription('Start Time (Optional) {Hour}:{Min}{AM/PM}')
iccBannerStopTime1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 14, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerStopTime1.setStatus('current')
if mibBuilder.loadTexts: iccBannerStopTime1.setDescription('Stop Time (Optional) {Hour}:{Min}{AM/PM}')
iccBannerName2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 15, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerName2.setStatus('current')
if mibBuilder.loadTexts: iccBannerName2.setDescription(' ICC Banner Name 2')
iccBannerURL2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 15, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerURL2.setStatus('current')
if mibBuilder.loadTexts: iccBannerURL2.setDescription('ICC Banner 2 URL')
iccBannerImgName2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 15, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerImgName2.setStatus('current')
if mibBuilder.loadTexts: iccBannerImgName2.setDescription('ICC Banner 2 Image Name')
iccBannerDuration2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 15, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerDuration2.setStatus('current')
if mibBuilder.loadTexts: iccBannerDuration2.setDescription('ICC Banner 2 Duration in seconds. Minimum allowed value is 30.')
iccBannerStartTime2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 15, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerStartTime2.setStatus('current')
if mibBuilder.loadTexts: iccBannerStartTime2.setDescription('Start Time (Optional) {Hour}:{Min}{AM/PM}')
iccBannerStopTime2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 15, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerStopTime2.setStatus('current')
if mibBuilder.loadTexts: iccBannerStopTime2.setDescription('Stop Time (Optional) {Hour}:{Min}{AM/PM}')
iccBannerName3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 16, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerName3.setStatus('current')
if mibBuilder.loadTexts: iccBannerName3.setDescription(' ICC Banner Name 3')
iccBannerURL3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 16, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerURL3.setStatus('current')
if mibBuilder.loadTexts: iccBannerURL3.setDescription('ICC Banner 3 URL')
iccBannerImgName3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 16, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerImgName3.setStatus('current')
if mibBuilder.loadTexts: iccBannerImgName3.setDescription('ICC Banner 3 Image Name')
iccBannerDuration3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 16, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerDuration3.setStatus('current')
if mibBuilder.loadTexts: iccBannerDuration3.setDescription('ICC Banner 3 Duration in seconds. Minimum allowed value is 30.')
iccBannerStartTime3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 16, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerStartTime3.setStatus('current')
if mibBuilder.loadTexts: iccBannerStartTime3.setDescription('Start Time (Optional) {Hour}:{Min}{AM/PM}')
iccBannerStopTime3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 16, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerStopTime3.setStatus('current')
if mibBuilder.loadTexts: iccBannerStopTime3.setDescription('Stop Time (Optional) {Hour}:{Min}{AM/PM}')
iccBannerName4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 17, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerName4.setStatus('current')
if mibBuilder.loadTexts: iccBannerName4.setDescription(' ICC Banner Name 4')
iccBannerURL4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 17, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerURL4.setStatus('current')
if mibBuilder.loadTexts: iccBannerURL4.setDescription('ICC Banner 4 URL')
iccBannerImgName4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 17, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerImgName4.setStatus('current')
if mibBuilder.loadTexts: iccBannerImgName4.setDescription('ICC Banner 4 Image Name')
iccBannerDuration4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 17, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerDuration4.setStatus('current')
if mibBuilder.loadTexts: iccBannerDuration4.setDescription('ICC Banner 4 Duration in seconds. Minimum allowed value is 30.')
iccBannerStartTime4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 17, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerStartTime4.setStatus('current')
if mibBuilder.loadTexts: iccBannerStartTime4.setDescription('Start Time (Optional) {Hour}:{Min}{AM/PM}')
iccBannerStopTime4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 17, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerStopTime4.setStatus('current')
if mibBuilder.loadTexts: iccBannerStopTime4.setDescription('Stop Time (Optional) {Hour}:{Min}{AM/PM}')
iccBannerName5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 18, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerName5.setStatus('current')
if mibBuilder.loadTexts: iccBannerName5.setDescription(' ICC Banner Name 5')
iccBannerURL5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 18, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerURL5.setStatus('current')
if mibBuilder.loadTexts: iccBannerURL5.setDescription('ICC Banner 5 URL')
iccBannerImgName5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 18, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerImgName5.setStatus('current')
if mibBuilder.loadTexts: iccBannerImgName5.setDescription('ICC Banner 5 Image Name')
iccBannerDuration5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 18, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerDuration5.setStatus('current')
if mibBuilder.loadTexts: iccBannerDuration5.setDescription('ICC Banner 5 Duration in seconds. Minimum allowed value is 30.')
iccBannerStartTime5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 18, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerStartTime5.setStatus('current')
if mibBuilder.loadTexts: iccBannerStartTime5.setDescription('Start Time (Optional) {Hour}:{Min}{AM/PM}')
iccBannerStopTime5 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 16, 14, 18, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iccBannerStopTime5.setStatus('current')
if mibBuilder.loadTexts: iccBannerStopTime5.setDescription('Stop Time (Optional) {Hour}:{Min}{AM/PM}')
inatOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inatOn.setStatus('current')
if mibBuilder.loadTexts: inatOn.setDescription('Set to 1 to enable iNAT, 0 to disable. Valid License is required ')
pptpOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pptpOn.setStatus('current')
if mibBuilder.loadTexts: pptpOn.setDescription('Set to 1 to enable PPTP, 0 to disable. Valid License is required')
pptpidOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pptpidOn.setStatus('current')
if mibBuilder.loadTexts: pptpidOn.setDescription('Set to 1 to enable PPTP ID support, 0 to disable. Valid PPTP License is required Note: You must reboot for changes to take effect.')
ipsecOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecOn.setStatus('current')
if mibBuilder.loadTexts: ipsecOn.setDescription('Set to 1 to enable subscriber IPSec passthru, 0 to disable. Valid License is required. (NOTE: This is not to be confused with the MIB variable ipsecVpnOn, which pertains to IPSec traffic between the NSE and remote hosts).')
inatIpTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 17, 5), )
if mibBuilder.loadTexts: inatIpTable.setStatus('current')
if mibBuilder.loadTexts: inatIpTable.setDescription('Table of iNAT IPs')
inatIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 17, 5, 1), ).setIndexNames((0, "NOMADIX-MIB", "inatIndex"))
if mibBuilder.loadTexts: inatIpEntry.setStatus('current')
if mibBuilder.loadTexts: inatIpEntry.setDescription(' iNAT table entry ')
inatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 17, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatIndex.setStatus('current')
if mibBuilder.loadTexts: inatIndex.setDescription(' iNAT table index ')
inatStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 17, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inatStartAddress.setStatus('current')
if mibBuilder.loadTexts: inatStartAddress.setDescription('iNAT range Starting IP address ')
inatEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 17, 5, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inatEndAddress.setStatus('current')
if mibBuilder.loadTexts: inatEndAddress.setDescription('iNAT range end IP address ')
inatEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 17, 5, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inatEntryStatus.setStatus('current')
if mibBuilder.loadTexts: inatEntryStatus.setDescription('Status of the iNAT table entry.')
lkKey = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 18, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lkKey.setStatus('current')
if mibBuilder.loadTexts: lkKey.setDescription('License key.')
lkModelNo = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 18, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lkModelNo.setStatus('current')
if mibBuilder.loadTexts: lkModelNo.setDescription('Model number.')
lkMaxNumSubs = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 18, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lkMaxNumSubs.setStatus('current')
if mibBuilder.loadTexts: lkMaxNumSubs.setDescription('Maximum number of subscribers.')
lkFeatureList = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 18, 4), )
if mibBuilder.loadTexts: lkFeatureList.setStatus('current')
if mibBuilder.loadTexts: lkFeatureList.setDescription('List of features using the license key.')
lkFeatureListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 18, 4, 1), ).setIndexNames((0, "NOMADIX-MIB", "lkFeatureIndex"))
if mibBuilder.loadTexts: lkFeatureListEntry.setStatus('current')
if mibBuilder.loadTexts: lkFeatureListEntry.setDescription('Feature entry.')
lkFeatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 18, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lkFeatureIndex.setStatus('current')
if mibBuilder.loadTexts: lkFeatureIndex.setDescription(' license key table index')
lkFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 18, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lkFeatureName.setStatus('current')
if mibBuilder.loadTexts: lkFeatureName.setDescription('Feature name.')
lkFeatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 18, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notPurchased", 0), ("purchased", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lkFeatureStatus.setStatus('current')
if mibBuilder.loadTexts: lkFeatureStatus.setDescription('License status.')
locationCompanyName = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 19, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationCompanyName.setStatus('current')
if mibBuilder.loadTexts: locationCompanyName.setDescription("Name of the administrator's company.")
locationSiteName = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 19, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationSiteName.setStatus('current')
if mibBuilder.loadTexts: locationSiteName.setDescription('Name of the deployment site.')
locationAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 19, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationAddress1.setStatus('current')
if mibBuilder.loadTexts: locationAddress1.setDescription('Physical location - address (line 1).')
locationAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 19, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationAddress2.setStatus('current')
if mibBuilder.loadTexts: locationAddress2.setDescription('Physical location - address (line 2).')
locationCity = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 19, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationCity.setStatus('current')
if mibBuilder.loadTexts: locationCity.setDescription('Physical location - city.')
locationState = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 19, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationState.setStatus('current')
if mibBuilder.loadTexts: locationState.setDescription('Physical location - state.')
locationZip = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 19, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationZip.setStatus('current')
if mibBuilder.loadTexts: locationZip.setDescription('Physical location - zip.')
locationCountry = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 19, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationCountry.setStatus('current')
if mibBuilder.loadTexts: locationCountry.setDescription('Physical location - country.')
locationEmail = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 19, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationEmail.setStatus('current')
if mibBuilder.loadTexts: locationEmail.setDescription("Administrator's e-mail address.")
locationVenueType = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 19, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("apartment", 1), ("bar-coffeeshop-restaurant", 2), ("convention-center", 3), ("corporate-guest-access", 4), ("education", 5), ("hospitality", 6), ("marina-camp-ground", 7), ("public-space", 8), ("public-transport", 9), ("other", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationVenueType.setStatus('current')
if mibBuilder.loadTexts: locationVenueType.setDescription('This value indicates Venue Type chosen: (1) Apartment (2) Bar/Coffeeshop/Restaurant (3) Convention Center (4) Corporate Guest Access (5) Education (6) Hospitality (7) Marina/camp ground (8) Public Space (9) Public transport (10) Other')
locationNetworkIp = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 19, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationNetworkIp.setStatus('current')
if mibBuilder.loadTexts: locationNetworkIp.setDescription('The IP Address for the Network side interface. Note: in order to set this value, locationNetIntfCfgMode must be set to static. Note: you must reboot for changes to take effect.')
locationNetmask = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 19, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationNetmask.setStatus('current')
if mibBuilder.loadTexts: locationNetmask.setDescription('The Subnet Mask for the network side interface. Note: in order to set this value, locationNetIntfCfgMode must be set to static. Note: you must reboot for changes to take effect.')
locationGateway = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 19, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationGateway.setStatus('current')
if mibBuilder.loadTexts: locationGateway.setDescription('The IP Address of the default gateway. Note: in order to set this value, locationNetIntfCfgMode must be set to static. Note: you must reboot for changes to take effect.')
locationNetIntfCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 19, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("static", 0), ("dhcpClient", 1), ("pppoeClient", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationNetIntfCfgMode.setStatus('current')
if mibBuilder.loadTexts: locationNetIntfCfgMode.setDescription('Setting this value to (0) will use statically configured IP address. Setting to (1) will enable DHCP Client for the system. Setting to (2) will enable PPPoE Client for the system. Note: you must reboot for changes to take effect.')
locationIsoCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 19, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationIsoCountryCode.setStatus('current')
if mibBuilder.loadTexts: locationIsoCountryCode.setDescription('ISO Country Code')
locationPhoneCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 19, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationPhoneCountryCode.setStatus('current')
if mibBuilder.loadTexts: locationPhoneCountryCode.setDescription('Phone Country Code')
locationCallingAreaCode = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 19, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationCallingAreaCode.setStatus('current')
if mibBuilder.loadTexts: locationCallingAreaCode.setDescription('Calling Area Code')
locationNetworkSsidZone = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 19, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationNetworkSsidZone.setStatus('current')
if mibBuilder.loadTexts: locationNetworkSsidZone.setDescription('Network SSID/ZONE')
passthroughOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passthroughOn.setStatus('current')
if mibBuilder.loadTexts: passthroughOn.setDescription('Setting this value to (1) will enable Passthrough Addresses feature. Setting this value to (0) will disable it. Note: If trying to set this value returns an error, please check to see if you have a valid license for this feature.')
passthroughIPTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 24, 2), )
if mibBuilder.loadTexts: passthroughIPTable.setStatus('current')
if mibBuilder.loadTexts: passthroughIPTable.setDescription(' Host passthrough table for IP addresses ')
passthroughIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 24, 2, 1), ).setIndexNames((0, "NOMADIX-MIB", "passthroughAddIndex"))
if mibBuilder.loadTexts: passthroughIPEntry.setStatus('current')
if mibBuilder.loadTexts: passthroughIPEntry.setDescription(' passthrough table entry ')
passthroughAddIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 24, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: passthroughAddIndex.setStatus('current')
if mibBuilder.loadTexts: passthroughAddIndex.setDescription(' Passthrough Address Table Index')
passthroughaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 24, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passthroughaddress.setStatus('current')
if mibBuilder.loadTexts: passthroughaddress.setDescription(' The packets destined for this IP address are passed through without authentication, authorization.')
statusIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 24, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statusIP.setStatus('current')
if mibBuilder.loadTexts: statusIP.setDescription('Status of the Passthrough IP table entry.')
passthroughDNSTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 24, 3), )
if mibBuilder.loadTexts: passthroughDNSTable.setStatus('current')
if mibBuilder.loadTexts: passthroughDNSTable.setDescription(' Host passthrough table for DNS names ')
passthroughDNSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 24, 3, 1), ).setIndexNames((0, "NOMADIX-MIB", "passthroughNameIndex"))
if mibBuilder.loadTexts: passthroughDNSEntry.setStatus('current')
if mibBuilder.loadTexts: passthroughDNSEntry.setDescription(' passthrough table entry ')
passthroughNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 24, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: passthroughNameIndex.setStatus('current')
if mibBuilder.loadTexts: passthroughNameIndex.setDescription(' Passthrough Name Table Index')
passthroughname = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 24, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passthroughname.setStatus('current')
if mibBuilder.loadTexts: passthroughname.setDescription(' The packets destined for this DNS name are passed through without authentication, authorization.')
statusDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 24, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statusDNS.setStatus('current')
if mibBuilder.loadTexts: statusDNS.setDescription('Status of the Passthrough DNS table entry.')
portLocInRoomPortMappingOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 28, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLocInRoomPortMappingOn.setStatus('current')
if mibBuilder.loadTexts: portLocInRoomPortMappingOn.setDescription('Setting this value to (1) will enable In Room Port Mapping feature. Setting this value to (0) will disable this feature. Note: If trying to set this value returns an error, please check to see if you have a valid license for this feature.')
portLocInRoomPortMappingUsername = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 28, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLocInRoomPortMappingUsername.setStatus('current')
if mibBuilder.loadTexts: portLocInRoomPortMappingUsername.setDescription('Username needed when performing In Room Port Mapping. (Maximum length: 17 characters)')
portLocInRoomPortMappingPassword = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 28, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLocInRoomPortMappingPassword.setStatus('current')
if mibBuilder.loadTexts: portLocInRoomPortMappingPassword.setDescription('Password needed when performing In Room Port Mapping.')
portLocConcentratorType = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 28, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("no", 0), ("vlan1", 1), ("vlan2", 2), ("expresso", 3), ("lucent", 4), ("mdulite", 5), ("rfc1493", 6), ("riverdelta", 7), ("elastic", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLocConcentratorType.setStatus('current')
if mibBuilder.loadTexts: portLocConcentratorType.setDescription('Setting this value to (0) will indicate that no concentrator will be used. Entering (1) will mean the device which understands 802.1Q VLAN IDs one-way will be used, while (2) will indicate the device which understands 802.1Q VLAN IDs two-ways. Entering (3) to (8) will indicate that one of the following access concentrators will be exploited: (3) Tut Systems Expresso, (4) Lucent DSL Terminator, (5) Tut MDU Lite Systems, (6) any RFC1493 Compliant System, (7) RiverDelta 1000B, (8) Elastic Networks.')
portLocConcentratorTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 28, 10), )
if mibBuilder.loadTexts: portLocConcentratorTable.setStatus('current')
if mibBuilder.loadTexts: portLocConcentratorTable.setDescription('List of IP addresses, SNMP community names, and uplink ports for each concentrator.')
portLocConcentratorTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 28, 10, 1), ).setIndexNames((0, "NOMADIX-MIB", "portLocConcIndex"))
if mibBuilder.loadTexts: portLocConcentratorTableEntry.setStatus('current')
if mibBuilder.loadTexts: portLocConcentratorTableEntry.setDescription('Concentrator table entry.')
portLocConcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 28, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLocConcIndex.setStatus('current')
if mibBuilder.loadTexts: portLocConcIndex.setDescription('Port-location Concentrator Table Index.')
portLocAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 28, 10, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLocAddress.setStatus('current')
if mibBuilder.loadTexts: portLocAddress.setDescription('IP Address of the concentrator.')
portLocCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 28, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 139))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLocCommunity.setStatus('current')
if mibBuilder.loadTexts: portLocCommunity.setDescription('SNMP community name of the concentrator.')
portLocUplinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 28, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLocUplinkPort.setStatus('current')
if mibBuilder.loadTexts: portLocUplinkPort.setDescription('Uplink port of the concentrator.')
portLocTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 28, 12), )
if mibBuilder.loadTexts: portLocTable.setStatus('current')
if mibBuilder.loadTexts: portLocTable.setDescription(' Port-location Table maps ports to rooms')
portLocTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 28, 12, 1), ).setIndexNames((0, "NOMADIX-MIB", "portLocIndex"))
if mibBuilder.loadTexts: portLocTableEntry.setStatus('current')
if mibBuilder.loadTexts: portLocTableEntry.setDescription(' One entry of the port-location table')
portLocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 28, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLocIndex.setStatus('current')
if mibBuilder.loadTexts: portLocIndex.setDescription(' Port-location Table Index')
portLocLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 28, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 139))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLocLocation.setStatus('current')
if mibBuilder.loadTexts: portLocLocation.setDescription(' Location description of the entry')
portLocPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 28, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLocPort.setStatus('current')
if mibBuilder.loadTexts: portLocPort.setDescription(' Port of the concentrator this room is connected to')
portLocModemMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 28, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLocModemMAC.setStatus('current')
if mibBuilder.loadTexts: portLocModemMAC.setDescription(' MAC Address of the Modem this room has (valid for Riverdelta and similar concentrators only)')
portLocDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 28, 12, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 139))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLocDescription.setStatus('current')
if mibBuilder.loadTexts: portLocDescription.setDescription(' Description of the Location/Port')
portLocState = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 28, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noCharge", 0), ("charge", 1), ("blocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLocState.setStatus('current')
if mibBuilder.loadTexts: portLocState.setDescription(' Billing/Access State of the port-location')
radProxyServices = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 38, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radProxyServices.setStatus('current')
if mibBuilder.loadTexts: radProxyServices.setDescription(' Setting this value to (1) enables RADIUS proxy services. Setting it to zero disables RADIUS proxy services.')
radProxyAuthSvrPort = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 38, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radProxyAuthSvrPort.setStatus('current')
if mibBuilder.loadTexts: radProxyAuthSvrPort.setDescription(' The UDP port number on which RADIUS authentication requests will be received. Setting this value to (0) disables RADIUS authentication proxy services.')
radProxyAcctSvrPort = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 38, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radProxyAcctSvrPort.setStatus('current')
if mibBuilder.loadTexts: radProxyAcctSvrPort.setDescription(' The UDP port number on which RADIUS accounting requests will be received. Setting this value to (0) disables RADIUS accounting proxy services.')
radProxyLocalServcomPort = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 38, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radProxyLocalServcomPort.setStatus('current')
if mibBuilder.loadTexts: radProxyLocalServcomPort.setDescription('Local UDP port for communicating with downstream servers. Must be either 0 or in the range 1024-5000.')
radProxyUpstreamNas = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 38, 4))
radProxyUpstreamNasTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 38, 4, 1), )
if mibBuilder.loadTexts: radProxyUpstreamNasTable.setStatus('current')
if mibBuilder.loadTexts: radProxyUpstreamNasTable.setDescription('List of Upstream NASes.')
radProxyUpstreamNasTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 38, 4, 1, 1), ).setIndexNames((0, "NOMADIX-MIB", "nasIndex"))
if mibBuilder.loadTexts: radProxyUpstreamNasTableEntry.setStatus('current')
if mibBuilder.loadTexts: radProxyUpstreamNasTableEntry.setDescription('An upstream NAS entry.')
nasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 38, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasIndex.setStatus('current')
if mibBuilder.loadTexts: nasIndex.setDescription('Upstream NAS Index')
nasEntryActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 38, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nasEntryActive.setStatus('current')
if mibBuilder.loadTexts: nasEntryActive.setDescription("Indicates whether or not this NAS is active. Requests from inactive NASes won't be processed")
nasIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 38, 4, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nasIpAddress.setStatus('current')
if mibBuilder.loadTexts: nasIpAddress.setDescription('IP Address of the upstream NAS.')
nasAuthSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 38, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 130))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nasAuthSec.setStatus('current')
if mibBuilder.loadTexts: nasAuthSec.setDescription('The secret key, shared with the upstream NAS, used for authentication packets.')
nasAcctSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 38, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 130))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nasAcctSec.setStatus('current')
if mibBuilder.loadTexts: nasAcctSec.setDescription('The secret key, shared with the upstream NAS, used for accounting packets.')
nasDefProf = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 38, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nasDefProf.setStatus('current')
if mibBuilder.loadTexts: nasDefProf.setDescription('(Optional) The name of the RADIUS service profile to handle requests from this upstream NAS if realm-basd routing fails. If not present, such packets will be discarded.')
nasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 38, 4, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nasStatus.setStatus('current')
if mibBuilder.loadTexts: nasStatus.setDescription('Status of the upstream NAS table entry.')
rBserviceProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1))
serviceProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1), )
if mibBuilder.loadTexts: serviceProfileTable.setStatus('current')
if mibBuilder.loadTexts: serviceProfileTable.setDescription('List of service profiles')
serviceProfileTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1), ).setIndexNames((0, "NOMADIX-MIB", "profIndex"))
if mibBuilder.loadTexts: serviceProfileTableEntry.setStatus('current')
if mibBuilder.loadTexts: serviceProfileTableEntry.setDescription('An entry in the list of service profiles.')
profIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profIndex.setStatus('current')
if mibBuilder.loadTexts: profIndex.setDescription('Service Profile Index')
profName = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profName.setStatus('current')
if mibBuilder.loadTexts: profName.setDescription('The name of this service profile. Must be unique.')
radAuthOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radAuthOn.setStatus('current')
if mibBuilder.loadTexts: radAuthOn.setDescription('Set to 1 to enable radius authentication for this profile, 0 to disable.')
radAuthProto = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("rad-auth-proto-pap", 0), ("rad-auth-proto-chap", 1), ("rad-auth-proto-mschap-v1", 2), ("rad-auth-proto-mschap-v2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radAuthProto.setStatus('current')
if mibBuilder.loadTexts: radAuthProto.setDescription('Radius authentication protocol: rad-auth-proto-pap(0) - PAP rad-auth-proto-chap(1) - CHAP-MD5 rad-auth-proto-mschap-v1(2) - MS-CHAP v1 rad-auth-proto-mschap-v2(3) - MS-CHAP v2')
radAuthSrv1Ip = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radAuthSrv1Ip.setStatus('current')
if mibBuilder.loadTexts: radAuthSrv1Ip.setDescription('IP address of the Primary Radius Authentication Server for this profile.')
radAuthSrv1Port = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radAuthSrv1Port.setStatus('current')
if mibBuilder.loadTexts: radAuthSrv1Port.setDescription('Port of the Primary Radius Authentication Server for this profile.')
radAuthSrv1Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 130))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radAuthSrv1Sec.setStatus('current')
if mibBuilder.loadTexts: radAuthSrv1Sec.setDescription('Secret Key of the Primary Radius Authentication Server for this profile.')
radAuthSrv2Ip = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radAuthSrv2Ip.setStatus('current')
if mibBuilder.loadTexts: radAuthSrv2Ip.setDescription('IP address of the Secondary Radius Authentication Server for this profile.')
radAuthSrv2Port = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radAuthSrv2Port.setStatus('current')
if mibBuilder.loadTexts: radAuthSrv2Port.setDescription('Port of the Secondary Radius Authentication Server for this profile.')
radAuthSrv2Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 130))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radAuthSrv2Sec.setStatus('current')
if mibBuilder.loadTexts: radAuthSrv2Sec.setDescription('Secret Key of the Secondary Radius Authentication Server for this profile.')
radAcctOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radAcctOn.setStatus('current')
if mibBuilder.loadTexts: radAcctOn.setDescription('Set to 1 to enable radius accounting for this profile, 0 to disable.')
radAcctSrv1Ip = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radAcctSrv1Ip.setStatus('current')
if mibBuilder.loadTexts: radAcctSrv1Ip.setDescription('IP address of the Primary Radius Accounting Server for this profile.')
radAcctSrv1Port = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radAcctSrv1Port.setStatus('current')
if mibBuilder.loadTexts: radAcctSrv1Port.setDescription('Port of the Primary Radius Accounting Server for this profile.')
radAcctSrv1Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 130))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radAcctSrv1Sec.setStatus('current')
if mibBuilder.loadTexts: radAcctSrv1Sec.setDescription('Secret Key of the Primary Radius Accounting Server for this profile.')
radAcctSrv2Ip = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radAcctSrv2Ip.setStatus('current')
if mibBuilder.loadTexts: radAcctSrv2Ip.setDescription('IP address of the Secondary Radius Accounting Server for this profile.')
radAcctSrv2Port = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radAcctSrv2Port.setStatus('current')
if mibBuilder.loadTexts: radAcctSrv2Port.setDescription('Port of the Secondary Radius Accounting Server for this profile.')
radAcctSrv2Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 130))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radAcctSrv2Sec.setStatus('current')
if mibBuilder.loadTexts: radAcctSrv2Sec.setDescription('Secret Key of the Secondary Radius Accounting Server for this profile.')
radRetrMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("failover", 0), ("round-robin", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radRetrMethod.setStatus('current')
if mibBuilder.loadTexts: radRetrMethod.setDescription('Set to 0 if the retransmission method is failover, 1 if round-robin.')
radRetrFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radRetrFreq.setStatus('current')
if mibBuilder.loadTexts: radRetrFreq.setDescription('Set the frequency of retransmission (per second).')
radRetrAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radRetrAttempts.setStatus('current')
if mibBuilder.loadTexts: radRetrAttempts.setDescription('Set the number of retransmissions.')
profStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 1, 1, 1, 21), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profStatus.setStatus('current')
if mibBuilder.loadTexts: profStatus.setDescription('Status of the service profile table entry.')
rBtunnelProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 3))
tunnelProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 3, 1), )
if mibBuilder.loadTexts: tunnelProfileTable.setStatus('current')
if mibBuilder.loadTexts: tunnelProfileTable.setDescription('List of tunnel profiles')
tunnelProfileTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 3, 1, 1), ).setIndexNames((0, "NOMADIX-MIB", "tunProfIndex"))
if mibBuilder.loadTexts: tunnelProfileTableEntry.setStatus('current')
if mibBuilder.loadTexts: tunnelProfileTableEntry.setDescription('An entry in the list of tunnel profiles.')
tunProfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunProfIndex.setStatus('current')
if mibBuilder.loadTexts: tunProfIndex.setDescription('Tunnel Profile Index')
tunProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunProfName.setStatus('current')
if mibBuilder.loadTexts: tunProfName.setDescription('The name of this tunnel profile. Must be unique.')
tunPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunPassword.setStatus('current')
if mibBuilder.loadTexts: tunPassword.setDescription('The tunnel password.')
tunPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 3, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunPeerIp.setStatus('current')
if mibBuilder.loadTexts: tunPeerIp.setDescription('IP address of the tunnel peer for this tunnel.')
tunProfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 3, 1, 1, 20), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunProfStatus.setStatus('current')
if mibBuilder.loadTexts: tunProfStatus.setDescription('Status of the tunnel profile table entry.')
rBroutes = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 2))
realmBasedRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 2, 1), )
if mibBuilder.loadTexts: realmBasedRoutingTable.setStatus('current')
if mibBuilder.loadTexts: realmBasedRoutingTable.setDescription('List of realm-based routes')
realmBasedRoutingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 2, 1, 1), ).setIndexNames((0, "NOMADIX-MIB", "realmIndex"))
if mibBuilder.loadTexts: realmBasedRoutingTableEntry.setStatus('current')
if mibBuilder.loadTexts: realmBasedRoutingTableEntry.setDescription('An entry in the list of realm-based routes.')
realmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realmIndex.setStatus('current')
if mibBuilder.loadTexts: realmIndex.setDescription('realm-based route Index')
realmEntryActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realmEntryActive.setStatus('current')
if mibBuilder.loadTexts: realmEntryActive.setDescription('Indicates whether or not this route is active.')
realmWildcard = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realmWildcard.setStatus('current')
if mibBuilder.loadTexts: realmWildcard.setDescription('Indicates whether or not this route will match all realm-names or a single, specific realm-name.')
realmName = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realmName.setStatus('current')
if mibBuilder.loadTexts: realmName.setDescription('If this route is for a specific realm, this is the name of that realm.')
realmMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("prefixOnly", 0), ("suffixOnly", 1), ("prefixOrSuffix", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realmMatchType.setStatus('current')
if mibBuilder.loadTexts: realmMatchType.setDescription('Indicates whether this policy pertains to prefix realms, suffix realms, or to both.')
realmProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realmProfile.setStatus('current')
if mibBuilder.loadTexts: realmProfile.setDescription('The RADIUS service profile to which this policy will route.')
realmTunProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realmTunProfile.setStatus('current')
if mibBuilder.loadTexts: realmTunProfile.setDescription('The tunnel profile to which this policy will route.')
realmStrip = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dontStrip", 0), ("strip", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realmStrip.setStatus('current')
if mibBuilder.loadTexts: realmStrip.setDescription('Indicates whether or not realm-names should be stripped from user names before sending the username to a RADIUS server.')
realmTunStrip = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dontStrip", 0), ("strip", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realmTunStrip.setStatus('current')
if mibBuilder.loadTexts: realmTunStrip.setDescription('Indicates whether or not realm-names should be stripped from user names before sending the username to a tunnel server (LNS).')
realmTunLocHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 2, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realmTunLocHostName.setStatus('current')
if mibBuilder.loadTexts: realmTunLocHostName.setDescription('Local host name fopr purposes of tunnels, whether profile-triggerred or RADIUS-triggerred ')
realmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 39, 2, 1, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realmStatus.setStatus('current')
if mibBuilder.loadTexts: realmStatus.setDescription('Status of the realm-based routing table entry.')
sessionLimitEnable = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 40, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLimitEnable.setStatus('current')
if mibBuilder.loadTexts: sessionLimitEnable.setDescription('Enable/Disable sesstion rate limiting capability')
sessionLimitMeanRate = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 40, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLimitMeanRate.setStatus('current')
if mibBuilder.loadTexts: sessionLimitMeanRate.setDescription(' This value indicates the session rate limiting mean rate. THE VALUE MUST BE LESS THAN the session rate limiting burst size.')
sessionLimitBurstSize = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 40, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLimitBurstSize.setStatus('current')
if mibBuilder.loadTexts: sessionLimitBurstSize.setDescription(' This value indicates the session rate burst size. THE VALUE MUST BE LARGER THAN the session rate limiting mean rate')
sessionLimitTimeInterval = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 40, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLimitTimeInterval.setStatus('current')
if mibBuilder.loadTexts: sessionLimitTimeInterval.setDescription(' This value indicates the session rate time interval.')
sessionLimitFilterOffendersEnable = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 40, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLimitFilterOffendersEnable.setStatus('current')
if mibBuilder.loadTexts: sessionLimitFilterOffendersEnable.setDescription('Enable/Disable adding users who exceed prescribed rate to MAC Filtering')
smtpRedirect = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpRedirect.setStatus('current')
if mibBuilder.loadTexts: smtpRedirect.setDescription(' Setting this value to (1) enables SMTP redirection for misconfigured subscribers. Setting this value to (0) disables SMTP redirection for misconfigured subscribers. (NOTE: Setting it to (0) also sets it to (0) for properly configureds).')
smtpServerIP = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 30, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerIP.setStatus('current')
if mibBuilder.loadTexts: smtpServerIP.setDescription(' The IP address of the SMTP server to redirect all SMTP messages to.')
smtpPcRedirect = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 30, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpPcRedirect.setStatus('current')
if mibBuilder.loadTexts: smtpPcRedirect.setDescription(' Setting this value to (1) enables SMTP redirection for properly configured subscribers. Setting this value to (0) disables SMTP redirection for properly configured subscribers. (NOTE: Setting it to (1) also sets it to (1) for mis-configureds).')
smtpUsername = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 30, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpUsername.setStatus('current')
if mibBuilder.loadTexts: smtpUsername.setDescription(' For SMTP servers which support login authentication, enter valid username for an account on that server. NOTE: Length of username should be shortest allowed by SMTP server. Clients with shorter username may not be able to send e-mail. ')
smtpPassword = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 30, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpPassword.setStatus('current')
if mibBuilder.loadTexts: smtpPassword.setDescription(' For SMTP servers which support login authentication, enter valid password for an account on that server. NOTE: Length of username should be shortest allowed by SMTP server. Clients with shorter password may not be able to send e-mail. ')
smtpServerDNS = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 30, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 238))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerDNS.setStatus('current')
if mibBuilder.loadTexts: smtpServerDNS.setDescription(' The DNS name of the SMTP server to redirect all SMTP messages to. If this field is set, then smtpServerIP will also be updated to reflect the resolved IP address of the DNS name.')
snmpdOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 32, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpdOn.setStatus('current')
if mibBuilder.loadTexts: snmpdOn.setDescription('Set to 1 to enable SNMP, 0 to disable. Note: If trying to set this value returns an error, please check to see if you have a valid license for this feature. Note: You must reboot for changes to take effect.')
systemContact = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 32, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 238))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemContact.setStatus('current')
if mibBuilder.loadTexts: systemContact.setDescription('System contact person. Note: You must reboot for changes to take effect.')
systemLocation = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 32, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 238))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLocation.setStatus('current')
if mibBuilder.loadTexts: systemLocation.setDescription('Physical location of this device. Note: You must reboot for changes to take effect.')
getCommunity = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 32, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 238))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: getCommunity.setStatus('current')
if mibBuilder.loadTexts: getCommunity.setDescription('Get community string. Note: You must reboot for changes to take effect.')
setCommunity = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 32, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 238))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCommunity.setStatus('current')
if mibBuilder.loadTexts: setCommunity.setDescription('Set community string. Note: You must reboot for changes to take effect.')
trapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 32, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 238))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapCommunity.setStatus('current')
if mibBuilder.loadTexts: trapCommunity.setDescription('Trap community string. Note: You must reboot for changes to take effect.')
trapIP = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 32, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP.setStatus('current')
if mibBuilder.loadTexts: trapIP.setDescription('IP address of host to which to send traps. Note: You must reboot for changes to take effect.')
subnetTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 34, 1), )
if mibBuilder.loadTexts: subnetTable.setStatus('current')
if mibBuilder.loadTexts: subnetTable.setDescription('Currently active public subnets.')
subnetTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 34, 1, 1), ).setIndexNames((0, "NOMADIX-MIB", "subnetIndex"))
if mibBuilder.loadTexts: subnetTableEntry.setStatus('current')
if mibBuilder.loadTexts: subnetTableEntry.setDescription('Table of Public Subnets')
subnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 34, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetIndex.setStatus('current')
if mibBuilder.loadTexts: subnetIndex.setDescription(' Subnet Table Index')
subnet = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 34, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnet.setStatus('current')
if mibBuilder.loadTexts: subnet.setDescription(' Subnet')
mask = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 34, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mask.setStatus('current')
if mibBuilder.loadTexts: mask.setDescription(' Subnet mask')
subnetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 34, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetStatus.setStatus('current')
if mibBuilder.loadTexts: subnetStatus.setDescription('Status of the public subnet table entry.')
subIdleLogoutTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 33, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subIdleLogoutTimeout.setStatus('current')
if mibBuilder.loadTexts: subIdleLogoutTimeout.setDescription('Time (in seconds), after which subscriber is logged out. Does not apply to subscribers logged in via RADIUS. Valid values are from 300 to 86400 seconds')
subToSubCommBlock = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 33, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subToSubCommBlock.setStatus('current')
if mibBuilder.loadTexts: subToSubCommBlock.setDescription('When enabled, this feature will prevent wireless subscribers from communicating with one another. When communications blocking is disabled, subscribers will be allowed to communicate')
systemLoggingOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLoggingOn.setStatus('current')
if mibBuilder.loadTexts: systemLoggingOn.setDescription('Setting this value to (1) will enable logging (via standard SYSLOG) of system messages. Setting this value to (0) will disable system logging.')
systemLogNumber = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogNumber.setStatus('current')
if mibBuilder.loadTexts: systemLogNumber.setDescription('The log number (0-7 of standard SYSLOG) for system logging.')
systemLogFilter = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogFilter.setStatus('current')
if mibBuilder.loadTexts: systemLogFilter.setDescription('Select the filter level for SYSTEM Logs Available settings: Emergency(0), Alert(1), Critical(2), Error(3), Warning(4), Notice(5), Info(6), Debug(7)')
systemLogServerIp = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogServerIp.setStatus('current')
if mibBuilder.loadTexts: systemLogServerIp.setDescription('IP address of the SYSLOG server to receive system messages.')
systemSaveToFile = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSaveToFile.setStatus('current')
if mibBuilder.loadTexts: systemSaveToFile.setDescription('Setting this value to (1) will enable saving of SYSTEM logs to file. Setting this value to (0) will disable storing of SYSTEM logs in a file.')
systemReportLoggingOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReportLoggingOn.setStatus('current')
if mibBuilder.loadTexts: systemReportLoggingOn.setDescription('Setting this value to (1) will enable logging (via standard SYSLOG) of SYSTEM REPORT messages. Setting this value to (0) will disable SYSTEM REPORT logging.')
systemReportLogNumber = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReportLogNumber.setStatus('current')
if mibBuilder.loadTexts: systemReportLogNumber.setDescription('The log number (0-7 of standard SYSLOG) for SYSTEM REPORT logging.')
systemReportLogServerIp = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReportLogServerIp.setStatus('current')
if mibBuilder.loadTexts: systemReportLogServerIp.setDescription('IP address of the SYSLOG server to receive SYSTEM REPORT log messages.')
systemReportLogInterval = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReportLogInterval.setStatus('current')
if mibBuilder.loadTexts: systemReportLogInterval.setDescription('Interval (in minutes) with which SYSTEM REPORT log messages are sent')
systemVersion = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVersion.setStatus('current')
if mibBuilder.loadTexts: systemVersion.setDescription('Version of the unit, includes model and software version.')
systemNseId = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNseId.setStatus('current')
if mibBuilder.loadTexts: systemNseId.setDescription('ID of the unit.')
systemReboot = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReboot.setStatus('current')
if mibBuilder.loadTexts: systemReboot.setDescription('Setting this value to (1) will cause the operating system to reboot.')
systemBridgeMode = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemBridgeMode.setStatus('current')
if mibBuilder.loadTexts: systemBridgeMode.setDescription('Setting this value to (1) will enable bridge mode. Setting this value to (0) will disable bridge mode. Note: If trying to set this value returns an error, please check to see if you have a valid license for this feature.')
systemConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("export", 2), ("import", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConfigFile.setStatus('current')
if mibBuilder.loadTexts: systemConfigFile.setDescription('Setting this value to (1) will restore the factory configuration settings. Setting this value to (2) will export the current configuration to an archive file. Setting this value to (3) will restore settings from the most recent archive file, if one exists.')
systemConfigFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noError", 0), ("errorCurrentNotChanged", 1), ("errorCurrentMaybeCorrupted", 2), ("errorCurrentNotArchived", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemConfigFileStatus.setStatus('current')
if mibBuilder.loadTexts: systemConfigFileStatus.setDescription('This value indicates the status of systemConfigFile set query. (0) - no error occurred, (1) - error occurred, current settings were not changed, (2) - error occurred, current settings may have been corrupted, (3) - error occurred, current settings were not archived.')
systemAdminConcurrencyOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemAdminConcurrencyOn.setStatus('current')
if mibBuilder.loadTexts: systemAdminConcurrencyOn.setDescription('Setting this value to (1) will enable Admin Interface Concurrency enforcement. Setting this value to (0) will disable Concurrency enforcement. Note: If trying to set this value returns an error, please check to see if you have a valid license for this feature.')
systemUptime = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUptime.setStatus('current')
if mibBuilder.loadTexts: systemUptime.setDescription('Uptime of the unit')
systemHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 18), )
if mibBuilder.loadTexts: systemHistoryTable.setStatus('current')
if mibBuilder.loadTexts: systemHistoryTable.setDescription('List of last 500 access/reboot history entries.')
systemHistoryTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 18, 1), ).setIndexNames((0, "NOMADIX-MIB", "systemHistoryIndex"))
if mibBuilder.loadTexts: systemHistoryTableEntry.setStatus('current')
if mibBuilder.loadTexts: systemHistoryTableEntry.setDescription('Access/reboot history table entry.')
systemHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: systemHistoryIndex.setDescription('Access/reboot history table index.')
systemHistoryTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 18, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHistoryTimestamp.setStatus('current')
if mibBuilder.loadTexts: systemHistoryTimestamp.setDescription('Time when access occurred.')
systemHistoryLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 18, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHistoryLogin.setStatus('current')
if mibBuilder.loadTexts: systemHistoryLogin.setDescription('Login name of the user who generated access.')
systemHistoryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 18, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHistoryAddress.setStatus('current')
if mibBuilder.loadTexts: systemHistoryAddress.setDescription('IP Address of the machine from which access was made.')
systemHistoryMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 18, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 429))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHistoryMessage.setStatus('current')
if mibBuilder.loadTexts: systemHistoryMessage.setDescription('Type of access occurred.')
systemSyslogTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 19), )
if mibBuilder.loadTexts: systemSyslogTable.setStatus('current')
if mibBuilder.loadTexts: systemSyslogTable.setDescription('List of last 1000 syslog entries.')
systemSyslogTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 19, 1), ).setIndexNames((0, "NOMADIX-MIB", "systemSyslogIndex"))
if mibBuilder.loadTexts: systemSyslogTableEntry.setStatus('current')
if mibBuilder.loadTexts: systemSyslogTableEntry.setDescription('Syslog history table entry.')
systemSyslogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSyslogIndex.setStatus('current')
if mibBuilder.loadTexts: systemSyslogIndex.setDescription('Syslog history table index.')
systemSyslogTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 19, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSyslogTimestamp.setStatus('current')
if mibBuilder.loadTexts: systemSyslogTimestamp.setDescription('Time when syslog occurred.')
systemSyslogVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 19, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSyslogVersion.setStatus('current')
if mibBuilder.loadTexts: systemSyslogVersion.setDescription('Version of the sending machine.')
systemSyslogAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 19, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSyslogAddress.setStatus('current')
if mibBuilder.loadTexts: systemSyslogAddress.setDescription('IP Address of the machine which send the syslog.')
systemSyslogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 19, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 429))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSyslogMessage.setStatus('current')
if mibBuilder.loadTexts: systemSyslogMessage.setDescription('Type of syslog.')
systemStaticPortMappingTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 20), )
if mibBuilder.loadTexts: systemStaticPortMappingTable.setStatus('current')
if mibBuilder.loadTexts: systemStaticPortMappingTable.setDescription('List of Static Port-mapping Table entries.')
systemStaticPortMappingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 20, 1), ).setIndexNames((0, "NOMADIX-MIB", "systemStaticPortMappingIndex"))
if mibBuilder.loadTexts: systemStaticPortMappingTableEntry.setStatus('current')
if mibBuilder.loadTexts: systemStaticPortMappingTableEntry.setDescription('Static Port Mapping table entry.')
systemStaticPortMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStaticPortMappingIndex.setStatus('current')
if mibBuilder.loadTexts: systemStaticPortMappingIndex.setDescription('Access/reboot history table index.')
systemStaticPortMappingMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 20, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemStaticPortMappingMAC.setStatus('current')
if mibBuilder.loadTexts: systemStaticPortMappingMAC.setDescription('Physical Address of the subscriber/device entered in one of the formats: 001122334455, 00-11-22-33-44-55 or 00:11:22:33:44:55. Default value is 00:00:00:00:00:00 .')
systemStaticPortMappingInternalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 20, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemStaticPortMappingInternalIP.setStatus('current')
if mibBuilder.loadTexts: systemStaticPortMappingInternalIP.setDescription('IP Address of the subscriber/device.')
systemStaticPortMappingInternalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemStaticPortMappingInternalPort.setStatus('current')
if mibBuilder.loadTexts: systemStaticPortMappingInternalPort.setDescription('Internal Port (of the subscriber/device)')
systemStaticPortMappingExternalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 20, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemStaticPortMappingExternalIP.setStatus('current')
if mibBuilder.loadTexts: systemStaticPortMappingExternalIP.setDescription('IP Address of the NSE subscriber side (DAT IP).')
systemStaticPortMappingExternalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 20, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemStaticPortMappingExternalPort.setStatus('current')
if mibBuilder.loadTexts: systemStaticPortMappingExternalPort.setDescription('External Port (of the NSE)')
systemStaticPortMappingRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 20, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemStaticPortMappingRemoteIP.setStatus('current')
if mibBuilder.loadTexts: systemStaticPortMappingRemoteIP.setDescription('(OPTIONAL) IP Address of the network side machine.')
systemStaticPortMappingRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 20, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemStaticPortMappingRemotePort.setStatus('current')
if mibBuilder.loadTexts: systemStaticPortMappingRemotePort.setDescription('(OPTIONAL) Remote Port (of the network side machine)')
systemStaticPortMappingProto = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 20, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("udp", 0), ("tcp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemStaticPortMappingProto.setStatus('current')
if mibBuilder.loadTexts: systemStaticPortMappingProto.setDescription('Transport Protocol (TCP, UDP)')
systemStaticPortMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 20, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemStaticPortMappingStatus.setStatus('current')
if mibBuilder.loadTexts: systemStaticPortMappingStatus.setDescription('Status of the Static Port-mapping table entry.')
blockIcmpFromPending = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 35, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: blockIcmpFromPending.setStatus('current')
if mibBuilder.loadTexts: blockIcmpFromPending.setDescription('Set to 1 to enable blocking ICMP packets from pending subscribers.')
timeCurrentDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 36, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeCurrentDateAndTime.setStatus('current')
if mibBuilder.loadTexts: timeCurrentDateAndTime.setDescription('Current date and time.')
timeOffsetSign = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 36, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("plus", 0), ("minus", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeOffsetSign.setStatus('current')
if mibBuilder.loadTexts: timeOffsetSign.setDescription('Offset sign for time offset (+/- hh:mm) from UTC. Note: you must reboot for changes to take effect.')
timeOffsetHours = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 36, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeOffsetHours.setStatus('current')
if mibBuilder.loadTexts: timeOffsetHours.setDescription('Hours offset for time offset (+/- hh:mm) from UTC. Note: you must reboot for changes to take effect.')
timeOffsetMinutes = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 36, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeOffsetMinutes.setStatus('current')
if mibBuilder.loadTexts: timeOffsetMinutes.setDescription('Minutes offset for time offset (+/- hh:mm) from UTC. Note: you must reboot for changes to take effect.')
timeServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 36, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServerTimeout.setStatus('current')
if mibBuilder.loadTexts: timeServerTimeout.setDescription('Time server timeout in seconds. Note: you must reboot for changes to take effect.')
timeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 36, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 238))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServer1.setStatus('current')
if mibBuilder.loadTexts: timeServer1.setDescription('IP address or DNS name of the first time server. Note: you must reboot for changes to take effect.')
timeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 36, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 238))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServer2.setStatus('current')
if mibBuilder.loadTexts: timeServer2.setDescription('IP address or DNS name of the second time server. Note: you must reboot for changes to take effect.')
timeServer3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 36, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 238))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServer3.setStatus('current')
if mibBuilder.loadTexts: timeServer3.setDescription('IP address or DNS name of the third time server. Note: you must reboot for changes to take effect.')
timeServer4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 36, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 238))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServer4.setStatus('current')
if mibBuilder.loadTexts: timeServer4.setDescription('IP address or DNS name of the fourth time server. Note: you must reboot for changes to take effect.')
urlFilteringOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 37, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: urlFilteringOn.setStatus('current')
if mibBuilder.loadTexts: urlFilteringOn.setDescription('Setting this value to (1) will enable URL Filtering feature. Setting this value to (0) will disable it.')
urlFilteringIPTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 37, 2), )
if mibBuilder.loadTexts: urlFilteringIPTable.setStatus('current')
if mibBuilder.loadTexts: urlFilteringIPTable.setDescription('Table of IP addresses that will be filtered.')
urlFilteringIPTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 37, 2, 1), ).setIndexNames((0, "NOMADIX-MIB", "urlFilteringIPTableIndex"))
if mibBuilder.loadTexts: urlFilteringIPTableEntry.setStatus('current')
if mibBuilder.loadTexts: urlFilteringIPTableEntry.setDescription('URL Filtering IP table entry.')
urlFilteringIPTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 37, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlFilteringIPTableIndex.setStatus('current')
if mibBuilder.loadTexts: urlFilteringIPTableIndex.setDescription(' URL Filtering IP Table Index')
urlFilteringIPTableAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 37, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: urlFilteringIPTableAddress.setStatus('current')
if mibBuilder.loadTexts: urlFilteringIPTableAddress.setDescription('IP address traffic to which will be blocked.')
urlFilteringIPTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 37, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: urlFilteringIPTableStatus.setStatus('current')
if mibBuilder.loadTexts: urlFilteringIPTableStatus.setDescription('Status of the urlFilteringIPTable entry.')
urlFilteringDNSTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 37, 3), )
if mibBuilder.loadTexts: urlFilteringDNSTable.setStatus('current')
if mibBuilder.loadTexts: urlFilteringDNSTable.setDescription('Table of DNS names or Domain names that will be filtered.')
urlFilteringDNSTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 37, 3, 1), ).setIndexNames((0, "NOMADIX-MIB", "urlFilteringDNSTableIndex"))
if mibBuilder.loadTexts: urlFilteringDNSTableEntry.setStatus('current')
if mibBuilder.loadTexts: urlFilteringDNSTableEntry.setDescription('URL Filtering DNS table entry.')
urlFilteringDNSTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 37, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlFilteringDNSTableIndex.setStatus('current')
if mibBuilder.loadTexts: urlFilteringDNSTableIndex.setDescription(' URL Filtering DNS Table Index')
urlFilteringDNSTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 37, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: urlFilteringDNSTableName.setStatus('current')
if mibBuilder.loadTexts: urlFilteringDNSTableName.setDescription('DNS name or Domain name traffic to which will be blocked.')
urlFilteringDNSTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 37, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: urlFilteringDNSTableStatus.setStatus('current')
if mibBuilder.loadTexts: urlFilteringDNSTableStatus.setDescription('Status of the URL Filtering DNS table entry.')
macFilteringOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 41, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFilteringOn.setStatus('current')
if mibBuilder.loadTexts: macFilteringOn.setDescription('Setting this value to (1) will enable the MAC Filtering feature. Setting this value to (0) will disable it.')
macFilteringTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 41, 4), )
if mibBuilder.loadTexts: macFilteringTable.setStatus('current')
if mibBuilder.loadTexts: macFilteringTable.setDescription('Table of MAC addresses that will be filtered.')
macFilteringTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 41, 4, 1), ).setIndexNames((0, "NOMADIX-MIB", "macFilteringTableIndex"))
if mibBuilder.loadTexts: macFilteringTableEntry.setStatus('current')
if mibBuilder.loadTexts: macFilteringTableEntry.setDescription('MAC Filtering IP table entry.')
macFilteringTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 41, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFilteringTableIndex.setStatus('current')
if mibBuilder.loadTexts: macFilteringTableIndex.setDescription(' MAC Filtering Table Index')
macFilteringTableAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 41, 4, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFilteringTableAddress.setStatus('current')
if mibBuilder.loadTexts: macFilteringTableAddress.setDescription('MAC address traffic to be filtered.')
macFilteringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 41, 4, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFilteringStatus.setStatus('current')
if mibBuilder.loadTexts: macFilteringStatus.setDescription('Status of the MAC Filter Table Entry.')
tunnelingOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 42, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelingOn.setStatus('current')
if mibBuilder.loadTexts: tunnelingOn.setDescription('Setting this value to (1) will enable tunneling. Setting this value to (0) will disable it.')
wirelessSsid = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSsid.setStatus('current')
if mibBuilder.loadTexts: wirelessSsid.setDescription('Default SSID of the AG. Note: you must reboot for changes to take effect.')
wirelessSsidBroadcastOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSsidBroadcastOn.setStatus('current')
if mibBuilder.loadTexts: wirelessSsidBroadcastOn.setDescription('Setting this value to (1) will enable Default SSID Broadcast. Setting this value to (0) will disable it. Note: you must reboot for changes to take effect.')
wirelessChannel = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 14), ValueRangeConstraint(36, 36), ValueRangeConstraint(40, 40), ValueRangeConstraint(44, 44), ValueRangeConstraint(48, 48), ValueRangeConstraint(52, 52), ValueRangeConstraint(56, 56), ValueRangeConstraint(60, 60), ValueRangeConstraint(64, 64), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessChannel.setStatus('current')
if mibBuilder.loadTexts: wirelessChannel.setDescription('Channel number for the wireless interface. Setting it to zero will enable auto channel configuration. Note: not all of the channels might be available depending on the regulatory domain and type of wireless interface (b/g or a). Note: you must reboot for changes to take effect.')
wirelessRate = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("auto", 0), ("rate-1Mbits", 1), ("rate-2Mbits", 2), ("rate-5andhalfMbits", 3), ("rate-6Mbits", 4), ("rate-9Mbits", 5), ("rate-11Mbits", 6), ("rate-12Mbits", 7), ("rate-18Mbits", 8), ("rate-24Mbits", 9), ("rate-36Mbits", 10), ("rate-48Mbits", 11), ("rate-54Mbits", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRate.setStatus('current')
if mibBuilder.loadTexts: wirelessRate.setDescription('Data rate for the wireless interface. Note: not all of the rates might be available depending on type of wireless interface (b/g or a). Note: you must reboot for changes to take effect.')
wirelessPower = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("full", 0), ("half", 1), ("quarter", 2), ("eighth", 3), ("min", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessPower.setStatus('current')
if mibBuilder.loadTexts: wirelessPower.setDescription('Level of transmit power for the wireless interface. Note: you must reboot for changes to take effect.')
wirelessFragLength = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessFragLength.setStatus('current')
if mibBuilder.loadTexts: wirelessFragLength.setDescription('Fragment length. Note: you must reboot for changes to take effect.')
wirelessRtsLength = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRtsLength.setStatus('current')
if mibBuilder.loadTexts: wirelessRtsLength.setDescription('RTS length. Note: you must reboot for changes to take effect.')
wirelessBeaconInterval = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessBeaconInterval.setStatus('current')
if mibBuilder.loadTexts: wirelessBeaconInterval.setDescription('Beacon interval. Note: you must reboot for changes to take effect.')
wirelessDtim = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessDtim.setStatus('current')
if mibBuilder.loadTexts: wirelessDtim.setDescription('Delivery Traffic Indication Message (DTIM). Note: you must reboot for changes to take effect.')
wirelessShortPreambleOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessShortPreambleOn.setStatus('current')
if mibBuilder.loadTexts: wirelessShortPreambleOn.setDescription('Setting this value to (1) will enable short preamble. Setting this value to (0) will disable it. Note: you must reboot for changes to take effect.')
wirelessMssid = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 11))
wirelessMssidVlanOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMssidVlanOn.setStatus('current')
if mibBuilder.loadTexts: wirelessMssidVlanOn.setDescription('Set to 1 to enable, 0 to disable SSID based WAN VLAN. Note: enabling SSID based WAN VLAN will automatically disable RADIUS based WAN VLAN.')
wirelessMssidVlanDefaultOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMssidVlanDefaultOn.setStatus('current')
if mibBuilder.loadTexts: wirelessMssidVlanDefaultOn.setDescription('Set to 1 to enable default 802.1q tag for system traffic, 0 to disable.')
wirelessMssidVlanDefaultTag = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMssidVlanDefaultTag.setStatus('current')
if mibBuilder.loadTexts: wirelessMssidVlanDefaultTag.setDescription('Set the default 802.1q tag for system traffic.')
wirelessMssidTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 11, 4), )
if mibBuilder.loadTexts: wirelessMssidTable.setStatus('current')
if mibBuilder.loadTexts: wirelessMssidTable.setDescription('List of multiple SSID settings.')
wirelessMssidTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 11, 4, 1), ).setIndexNames((0, "NOMADIX-MIB", "mssidIndex"))
if mibBuilder.loadTexts: wirelessMssidTableEntry.setStatus('current')
if mibBuilder.loadTexts: wirelessMssidTableEntry.setDescription('SSID entry.')
mssidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 11, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssidIndex.setStatus('current')
if mibBuilder.loadTexts: mssidIndex.setDescription('SSID index.')
mssidName = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 11, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mssidName.setStatus('current')
if mibBuilder.loadTexts: mssidName.setDescription('SSID name. Note: you must reboot for changes to take effect.')
mssidVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mssidVlan.setStatus('current')
if mibBuilder.loadTexts: mssidVlan.setDescription('SSID VLAN. Note: you must reboot for changes to take effect.')
mssidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 11, 4, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mssidStatus.setStatus('current')
if mibBuilder.loadTexts: mssidStatus.setDescription('Status of the Multiple SSID table entry.')
wirelessWep = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 12))
wirelessWepOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessWepOn.setStatus('current')
if mibBuilder.loadTexts: wirelessWepOn.setDescription('Setting this value to (1) will enable WEP. Setting this value to (0) will disable it. Note: you must reboot for changes to take effect.')
wirelessWepClients = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 12, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessWepClients.setStatus('current')
if mibBuilder.loadTexts: wirelessWepClients.setDescription('Type of clients supported by AG.')
wirelessWepAuthType = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("open", 0), ("shared", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessWepAuthType.setStatus('current')
if mibBuilder.loadTexts: wirelessWepAuthType.setDescription('Setting this value to (0) will set 802.11 authentication type to open. Setting this value to (1) will set it to shared. Note: you must reboot for changes to take effect.')
wirelessWepNon1xAllowedOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessWepNon1xAllowedOn.setStatus('current')
if mibBuilder.loadTexts: wirelessWepNon1xAllowedOn.setDescription('Setting this value to (1) will allow access for non-802.1x clients. Setting this value to (0) will disallow it. Note: you must reboot for changes to take effect.')
wirelessWepKeyType = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hex", 0), ("ascii", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessWepKeyType.setStatus('current')
if mibBuilder.loadTexts: wirelessWepKeyType.setDescription('Type of the WEP key: Hexadecimal digits or ASCII characters. Note: you must reboot for changes to take effect.')
wirelessWepDefaultKey = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 12, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("key-1", 1), ("key-2", 2), ("key-3", 3), ("key-4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessWepDefaultKey.setStatus('current')
if mibBuilder.loadTexts: wirelessWepDefaultKey.setDescription('Default WEP Key. Index of a WEP key which will be used to encrypt all transmitted and received frames for the stations which do not have a private key associated with them. Note: you must reboot for changes to take effect.')
wirelessWepKey1 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 12, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessWepKey1.setStatus('current')
if mibBuilder.loadTexts: wirelessWepKey1.setDescription('WEP Key 1. Note: make sure that key length is correct depending on the key type: Ascii 64-bit key - 5 characters long Ascii 128-bit key - 13 characters long Ascii 152-bit key - 16 characters long Hex 64-bit key - 10 hex digits long Hex 128-bit key - 26 hex digits long Hex 152-bit key - 32 hex digits long Note: you must reboot for changes to take effect.')
wirelessWepKey2 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 12, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessWepKey2.setStatus('current')
if mibBuilder.loadTexts: wirelessWepKey2.setDescription('WEP Key 2. Note: make sure that key length is correct depending on the key type: Ascii 64-bit key - 5 characters long Ascii 128-bit key - 13 characters long Ascii 152-bit key - 16 characters long Hex 64-bit key - 10 hex digits long Hex 128-bit key - 26 hex digits long Hex 152-bit key - 32 hex digits long Note: you must reboot for changes to take effect.')
wirelessWepKey3 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 12, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessWepKey3.setStatus('current')
if mibBuilder.loadTexts: wirelessWepKey3.setDescription('WEP Key 3. Note: make sure that key length is correct depending on the key type: Ascii 64-bit key - 5 characters long Ascii 128-bit key - 13 characters long Ascii 152-bit key - 16 characters long Hex 64-bit key - 10 hex digits long Hex 128-bit key - 26 hex digits long Hex 152-bit key - 32 hex digits long Note: you must reboot for changes to take effect.')
wirelessWepKey4 = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 43, 12, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessWepKey4.setStatus('current')
if mibBuilder.loadTexts: wirelessWepKey4.setDescription('WEP Key 4. Note: make sure that key length is correct depending on the key type: Ascii 64-bit key - 5 characters long Ascii 128-bit key - 13 characters long Ascii 152-bit key - 16 characters long Hex 64-bit key - 10 hex digits long Hex 128-bit key - 26 hex digits long Hex 152-bit key - 32 hex digits long Note: you must reboot for changes to take effect.')
failedLogin = NotificationType((1, 3, 6, 1, 4, 1, 3309, 1, 3, 0, 8))
if mibBuilder.loadTexts: failedLogin.setStatus('current')
if mibBuilder.loadTexts: failedLogin.setDescription('Failed Login attempt')
subCapacityReached = NotificationType((1, 3, 6, 1, 4, 1, 3309, 1, 3, 0, 9))
if mibBuilder.loadTexts: subCapacityReached.setStatus('current')
if mibBuilder.loadTexts: subCapacityReached.setDescription('Subscriber Capacity Reached')
nseReboot = NotificationType((1, 3, 6, 1, 4, 1, 3309, 1, 3, 0, 10))
if mibBuilder.loadTexts: nseReboot.setStatus('current')
if mibBuilder.loadTexts: nseReboot.setDescription('The unit has rebooted')
nseRadCapacityReached = NotificationType((1, 3, 6, 1, 4, 1, 3309, 1, 3, 0, 15))
if mibBuilder.loadTexts: nseRadCapacityReached.setStatus('current')
if mibBuilder.loadTexts: nseRadCapacityReached.setDescription('This trap is generated when the limit of Radius caching file is reached.')
pppoeSvcName = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 44, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeSvcName.setStatus('current')
if mibBuilder.loadTexts: pppoeSvcName.setDescription('Servicename that will be requested of the PPPoE client. Blank means any service is acceptable.')
pppEchoReqIntvl = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 44, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppEchoReqIntvl.setStatus('current')
if mibBuilder.loadTexts: pppEchoReqIntvl.setDescription('Frequency in seconds that LCP echo requests will be sent to the server.')
pppEchoMaxNonresp = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 44, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppEchoMaxNonresp.setStatus('current')
if mibBuilder.loadTexts: pppEchoMaxNonresp.setDescription('Maximum number of echo requests that can go unresponded to before the PPP link is considered to be down.')
pppAuthUsername = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 44, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppAuthUsername.setStatus('current')
if mibBuilder.loadTexts: pppAuthUsername.setDescription('Username to be used during authentication phase of establishing PPP link. Used for PAP or CHAP.')
pppAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 44, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppAuthPassword.setStatus('current')
if mibBuilder.loadTexts: pppAuthPassword.setDescription('Password/Secret to be used during authentication phase of establishing PPP link. Used for PAP or CHAP.')
pppIpCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 44, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dynamic", 0), ("static", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppIpCfgMode.setStatus('current')
if mibBuilder.loadTexts: pppIpCfgMode.setDescription('Decides whether to request an IP address from the server (dynamic) or inform the server of the desired IP address (static)')
pppStaticIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 44, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppStaticIpAddr.setStatus('current')
if mibBuilder.loadTexts: pppStaticIpAddr.setDescription('If pppIpCfgMode is set to static, this is the IP address that will be used.')
pppMaxTcpMss = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 44, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppMaxTcpMss.setStatus('current')
if mibBuilder.loadTexts: pppMaxTcpMss.setDescription('Specifies the maximum TCP MSS option value to use for subscriber TCP connections across the PPP network interface. The actual value used may be less than the configured value if necessary based on the MTU of the PPP interface. Values above 1952 are not allowed.')
localWebPages = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 52, 4))
localWebImages = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 52, 8))
localWebPagesTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 52, 4, 1), )
if mibBuilder.loadTexts: localWebPagesTable.setStatus('current')
if mibBuilder.loadTexts: localWebPagesTable.setDescription('Table of local Web page names.')
localWebPagesTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 52, 4, 1, 1), ).setIndexNames((0, "NOMADIX-MIB", "localWebPagesTableIndex"))
if mibBuilder.loadTexts: localWebPagesTableEntry.setStatus('current')
if mibBuilder.loadTexts: localWebPagesTableEntry.setDescription('Local Web Pages table entry.')
localWebPagesTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 52, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: localWebPagesTableIndex.setStatus('current')
if mibBuilder.loadTexts: localWebPagesTableIndex.setDescription(' Local Web Pages Table Index.')
localWebPagesTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 52, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localWebPagesTableName.setStatus('current')
if mibBuilder.loadTexts: localWebPagesTableName.setDescription('Local Web Pages entries.')
localWebPagesTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 52, 4, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localWebPagesTableStatus.setStatus('current')
if mibBuilder.loadTexts: localWebPagesTableStatus.setDescription('Status of the Local Web pages table entry.')
localWebImagesTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 52, 8, 1), )
if mibBuilder.loadTexts: localWebImagesTable.setStatus('current')
if mibBuilder.loadTexts: localWebImagesTable.setDescription('Table of local Web image names.')
localWebImagesTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 52, 8, 1, 1), ).setIndexNames((0, "NOMADIX-MIB", "localWebImagesTableIndex"))
if mibBuilder.loadTexts: localWebImagesTableEntry.setStatus('current')
if mibBuilder.loadTexts: localWebImagesTableEntry.setDescription('Local Web Images table entry.')
localWebImagesTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 52, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: localWebImagesTableIndex.setStatus('current')
if mibBuilder.loadTexts: localWebImagesTableIndex.setDescription(' Local Web Images Index')
localWebImagesTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 52, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 237))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localWebImagesTableName.setStatus('current')
if mibBuilder.loadTexts: localWebImagesTableName.setDescription('Local Web Image entries.')
localWebImagesTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 52, 8, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localWebImagesTableStatus.setStatus('current')
if mibBuilder.loadTexts: localWebImagesTableStatus.setDescription('Status of local Web images table entry.')
ipsecVpnOn = MibScalar((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecVpnOn.setStatus('current')
if mibBuilder.loadTexts: ipsecVpnOn.setDescription(' Setting this value to (1) enables IPSec over the network interface. Setting it to zero disables it. Valid license is required. When this variable is changed, system must be rebooted for the change to take effect. (NOTE: This is not to be confused with the MIB variable ipsecOn, which pertains to the passthru of IPSec traffic to/from a subscriber host.)')
ipsecPeers = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 4))
ipsecPolicies = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5))
ipsecSaStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 6))
ipsecPeerTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 4, 1), )
if mibBuilder.loadTexts: ipsecPeerTable.setStatus('current')
if mibBuilder.loadTexts: ipsecPeerTable.setDescription('List of IPSec peers.')
ipsecPeerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 4, 1, 1), ).setIndexNames((0, "NOMADIX-MIB", "ipsecPeerIndex"))
if mibBuilder.loadTexts: ipsecPeerTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipsecPeerTableEntry.setDescription('Parameters for a specific IPSec peer.')
ipsecPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecPeerIndex.setStatus('current')
if mibBuilder.loadTexts: ipsecPeerIndex.setDescription('IPSec Peer Index')
ipsecPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 4, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: ipsecPeerIpAddr.setDescription('IP Address of the IPSec peer.')
ipsecPeerAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("preSharedKey", 0), ("x509Certificate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerAuthMethod.setStatus('current')
if mibBuilder.loadTexts: ipsecPeerAuthMethod.setDescription('Method to be used to authenticate and be authenticated by IPSec peer')
ipsecPeerSharedKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerSharedKey.setStatus('current')
if mibBuilder.loadTexts: ipsecPeerSharedKey.setDescription('The key to be used if ipsecPeerAuthMethod is preSharedKey.')
ipsecPeerPrivkeyFile = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerPrivkeyFile.setStatus('current')
if mibBuilder.loadTexts: ipsecPeerPrivkeyFile.setDescription('The filename (within the /flash/ipseccrt directory) of the file containing the private key to be used for X509 authentication. Only needed if ipsecPeerAuthMethod is x509Certificate')
ipsecPeerCertFile = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerCertFile.setStatus('current')
if mibBuilder.loadTexts: ipsecPeerCertFile.setDescription('The filename (within the /flash/ipseccrt directory) of the file containing the X.509 certificate to be used for X509 authentication. Only needed if ipsecPeerAuthMethod is x509Certificate')
ipsecPeerEncDesOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAllowed", 0), ("allowed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerEncDesOk.setStatus('current')
if mibBuilder.loadTexts: ipsecPeerEncDesOk.setDescription('Indicates whether DES encryption is allowed to be used on the IKE channel between the NSE and this peer.')
ipsecPeerEnc3DesOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAllowed", 0), ("allowed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerEnc3DesOk.setStatus('current')
if mibBuilder.loadTexts: ipsecPeerEnc3DesOk.setDescription('Indicates whether 3DES encryption is allowed to be used on the IKE channel between the NSE and this peer.')
ipsecPeerHashMd5Ok = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAllowed", 0), ("allowed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerHashMd5Ok.setStatus('current')
if mibBuilder.loadTexts: ipsecPeerHashMd5Ok.setDescription('Indicates whether MD5 hashing is allowed to be used on the IKE channel between the NSE and this peer.')
ipsecPeerHashShaOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAllowed", 0), ("allowed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerHashShaOk.setStatus('current')
if mibBuilder.loadTexts: ipsecPeerHashShaOk.setDescription('Indicates whether SHA hashing is allowed to be used on the IKE channel between the NSE and this peer.')
ipsecPeerKeyStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("key768-bit", 0), ("key1024-bit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerKeyStrength.setStatus('current')
if mibBuilder.loadTexts: ipsecPeerKeyStrength.setDescription('The key strength to be used on the IKE channel between the NSE and this peer')
ipsecPeerLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 4, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerLifetime.setStatus('current')
if mibBuilder.loadTexts: ipsecPeerLifetime.setDescription('The lifetime (in seconds) of the IKE channel between the NSE and this peer, before it needs to be torn down and re-established.')
ipsecPeerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 4, 1, 1, 20), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPeerStatus.setStatus('current')
if mibBuilder.loadTexts: ipsecPeerStatus.setDescription('Status of the IPSec peer table entry.')
ipsecPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1), )
if mibBuilder.loadTexts: ipsecPolicyTable.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyTable.setDescription('List of IPSec security policies.')
ipsecPolicyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1), ).setIndexNames((0, "NOMADIX-MIB", "ipsecPolicyIndex"))
if mibBuilder.loadTexts: ipsecPolicyTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyTableEntry.setDescription('Parameters for a specific IPSec security policy.')
ipsecPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyIndex.setDescription('IPSec Policy Index')
ipsecPolicyPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyPeerIp.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyPeerIp.setDescription('IP Address of the IPSec peer for this policy. There must be an entry in the peer table for this peer')
ipsecPolicyProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyProtocol.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyProtocol.setDescription('The IP protocol number (e.g. 6 for TCP) of the protocol this policy pertains to. a zero means it pertains to ANY protocol.')
ipsecPolicyRemIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyRemIp.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyRemIp.setDescription('IP Address of the remote host/subnet to which this policy pertains.')
ipsecPolicyRemSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyRemSubnet.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyRemSubnet.setDescription('Subnet mask of the remote subnet to which this policy pertains.')
ipsecPolicyRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyRemPort.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyRemPort.setDescription('The remote TCP/UDP port number to which this policy pertains. A zero means it pertains to ANY port number. This field is only used if the protocol number is 6 (TCP) or 17 (UDP).')
ipsecPolicyUseNetIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyUseNetIp.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyUseNetIp.setDescription("Indicates whether or not this policy pertains to traffic originated by and/or destined to the NSE's network interface IP address. Otherwise it would pertain to a device on the subscriber network.")
ipsecPolicyLocIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyLocIp.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyLocIp.setDescription('If ipsecPolicyUseNetIp is no, this is the IP Address of the subscriber-side host/subnet to which this policy pertains.')
ipsecPolicyLocSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyLocSubnet.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyLocSubnet.setDescription('If ipsecPolicyUseNetIp is no, this is the Subnet mask of the subscriber-side subnet to which this policy pertains.')
ipsecPolicyLocPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyLocPort.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyLocPort.setDescription('The local TCP/UDP port number to which this policy pertains. A zero means it pertains to ANY port number. This field is only used if the protocol number is 6 (TCP) or 17 (UDP).')
ipsecPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("discard", 0), ("bypass", 1), ("esp", 2), ("ah", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyType.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyType.setDescription('The type of IPSec security policy this is, i.e., what type of action to take on packets that fit the traffic selectors.')
ipsecPolicyDirType = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("inOnly", 0), ("outOnly", 1), ("inAndOut", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyDirType.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyDirType.setDescription('The traffic direction to which this policy pertains. Used only for discard or bypass policies (ESP and AH tunnels always pertain to both directions)')
ipsecPolicyEncDesOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAllowed", 0), ("allowed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyEncDesOk.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyEncDesOk.setDescription('Indicates whether DES encryption is allowed to be used on the security association based on this policy. Pertains only to ESP tunnels.')
ipsecPolicyEnc3desOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAllowed", 0), ("allowed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyEnc3desOk.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyEnc3desOk.setDescription('Indicates whether 3DES encryption is allowed to be used on the security association based on this policy. Pertains only to ESP tunnels.')
ipsecPolicyEncNullOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAllowed", 0), ("allowed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyEncNullOk.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyEncNullOk.setDescription('Indicates whether NULL encryption (i.e., not encrypted) is allowed to be used on the security association based on this policy. Pertains only to ESP tunnels.')
ipsecPolicyAuthMd5Ok = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAllowed", 0), ("allowed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyAuthMd5Ok.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyAuthMd5Ok.setDescription('Indicates whether MD5 authentication is allowed to be used on the security association based on this policy. Pertains to both ESP and AH tunnels.')
ipsecPolicyAuthShaOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAllowed", 0), ("allowed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyAuthShaOk.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyAuthShaOk.setDescription('Indicates whether SHA authentication is allowed to be used on the security association based on this policy. Pertains to both ESP and AH tunnels.')
ipsecPolicyAuthNullOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAllowed", 0), ("allowed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyAuthNullOk.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyAuthNullOk.setDescription('Indicates whether no authentication is allowed to be used on the security association based on this policy. Pertains only to ESP tunnels.')
ipsecPolicyPfsStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pfsNone", 0), ("pfs768", 1), ("pfs1024", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyPfsStrength.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyPfsStrength.setDescription('Indicates whether perfect forward secrecy is to be used on the security association based on this policy, and if so what lever of keying strength to use. Pertains to either ESP or AH tunnels.')
ipsecPolicyMaxLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyMaxLifetime.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyMaxLifetime.setDescription('The maximum lifetime (in seconds) a security association based on this policy may stay up before it must either be torn down or renewed. A zero means there is no maximum.')
ipsecPolicyMaxLifesize = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyMaxLifesize.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyMaxLifesize.setDescription('The maximum amount of data (in bytes) that may pass thru a tunnel based on this policy before it must either be torn down or renewed. A zero means there is no maximum.')
ipsecPolicyAutoRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyAutoRenew.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyAutoRenew.setDescription('Indicates whether the security association based on this policy should be automatically renewed or not. Used only if either ipsecPolicyMaxLifesize or ipsecPolicyMaxLifetime is non-zero.')
ipsecPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 5, 1, 1, 40), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPolicyStatus.setStatus('current')
if mibBuilder.loadTexts: ipsecPolicyStatus.setDescription('Status of the IPSec policy table entry.')
ipsecSaStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 6, 1), )
if mibBuilder.loadTexts: ipsecSaStatusTable.setStatus('current')
if mibBuilder.loadTexts: ipsecSaStatusTable.setDescription('List of the status of security associations corresponding to configured IPSec security policies.')
ipsecSaStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 6, 1, 1), ).setIndexNames((0, "NOMADIX-MIB", "ipsecSaStatusIndex"))
if mibBuilder.loadTexts: ipsecSaStatusTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipsecSaStatusTableEntry.setDescription('Information about the status of an IPSec security association.')
ipsecSaStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaStatusIndex.setStatus('current')
if mibBuilder.loadTexts: ipsecSaStatusIndex.setDescription('IPSec Security Association Status Index')
ipsecSaStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ipsecUp", 0), ("ipsecDisabled", 1), ("notConfiguredInStack", 2), ("noIkeChannelToPeer", 3), ("notNegotiatedWithPeer", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaStatusState.setStatus('current')
if mibBuilder.loadTexts: ipsecSaStatusState.setDescription('Indicates the state ofwhether the security association corresponding to the configured security policy is presently up or down.')
ipsecSaStatusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3309, 1, 3, 54, 6, 1, 1, 20), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecSaStatusStatus.setStatus('current')
if mibBuilder.loadTexts: ipsecSaStatusStatus.setDescription('Status of the IPSec security association table entry.')
mibBuilder.exportSymbols("NOMADIX-MIB", wirelessShortPreambleOn=wirelessShortPreambleOn, aaaLogServerIp=aaaLogServerIp, brmServerCCUrlOne=brmServerCCUrlOne, ipsecSaStatusStatus=ipsecSaStatusStatus, subnet=subnet, inatIpTable=inatIpTable, iccBannerImgName3=iccBannerImgName3, passthroughaddress=passthroughaddress, systemStaticPortMappingInternalIP=systemStaticPortMappingInternalIP, wirelessWepNon1xAllowedOn=wirelessWepNon1xAllowedOn, dhcpRelayServerIP=dhcpRelayServerIP, iccBannerDuration2=iccBannerDuration2, radProxyServices=radProxyServices, lkFeatureName=lkFeatureName, netMask=netMask, aaaPassthroughPortNumber=aaaPassthroughPortNumber, iccButtonName7=iccButtonName7, aaaPortalPostUrl=aaaPortalPostUrl, aaaBillingPlanDHCPPool4=aaaBillingPlanDHCPPool4, aaaBillingPlan4=aaaBillingPlan4, iccButtonName5=iccButtonName5, aaaBillingPlanBandwidthDown4=aaaBillingPlanBandwidthDown4, aaaBilloptMaxTimeUnitMonth=aaaBilloptMaxTimeUnitMonth, systemStaticPortMappingExternalIP=systemStaticPortMappingExternalIP, iccButtonImgName8=iccButtonImgName8, localWebPagesTableEntry=localWebPagesTableEntry, lkFeatureIndex=lkFeatureIndex, icc=icc, wirelessWepKeyType=wirelessWepKeyType, iccBannerStartTime2=iccBannerStartTime2, iccButtonName6=iccButtonName6, radProxyUpstreamNasTable=radProxyUpstreamNasTable, realmStatus=realmStatus, aaaErrorAccessBlocked=aaaErrorAccessBlocked, locationCallingAreaCode=locationCallingAreaCode, portLocConcentratorTableEntry=portLocConcentratorTableEntry, mssidStatus=mssidStatus, ipsecPolicyEncNullOk=ipsecPolicyEncNullOk, ipsecPolicyPeerIp=ipsecPolicyPeerIp, nasIndex=nasIndex, aaaBillingPlanBandwidthUp5=aaaBillingPlanBandwidthUp5, aaaBillingPlanLabel5=aaaBillingPlanLabel5, aaaBillingPlanValidity0=aaaBillingPlanValidity0, subName=subName, iccButtonName9=iccButtonName9, wirelessPower=wirelessPower, radProxyUpstreamNas=radProxyUpstreamNas, aaaBillingPlan2=aaaBillingPlan2, aaaBillingPlanPricingMin0=aaaBillingPlanPricingMin0, pppEchoReqIntvl=pppEchoReqIntvl, aaaBillingPlan5=aaaBillingPlan5, iccBannerName4=iccBannerName4, subBytesRec=subBytesRec, aaaBillingPlanValidityRateShow2=aaaBillingPlanValidityRateShow2, iccBanner5=iccBanner5, aaaWebServiceMsg=aaaWebServiceMsg, leaseAddress=leaseAddress, locationCountry=locationCountry, locationNetworkSsidZone=locationNetworkSsidZone, radAuthSrv2Port=radAuthSrv2Port, urlFilteringIPTableIndex=urlFilteringIPTableIndex, authSubDhcpAddrType=authSubDhcpAddrType, portLocTableEntry=portLocTableEntry, systemStaticPortMappingTableEntry=systemStaticPortMappingTableEntry, sessionLimitBurstSize=sessionLimitBurstSize, authSubName=authSubName, aaaXmlSender2Ip=aaaXmlSender2Ip, aaaRememberMeMsg=aaaRememberMeMsg, lpfEntryIndex=lpfEntryIndex, systemStaticPortMappingRemoteIP=systemStaticPortMappingRemoteIP, portLocTable=portLocTable, systemHistoryTimestamp=systemHistoryTimestamp, radAuthSrv1Ip=radAuthSrv1Ip, realmBasedRoutingTable=realmBasedRoutingTable, ipsecPolicyRemPort=ipsecPolicyRemPort, aaaSubLoginUI=aaaSubLoginUI, snmpdOn=snmpdOn, wirelessWepAuthType=wirelessWepAuthType, dhcpLeaseTable=dhcpLeaseTable, aaaBillingPlanRateShow1=aaaBillingPlanRateShow1, iccButton2=iccButton2, ipsecPolicies=ipsecPolicies, brmServerUrlSecondary=brmServerUrlSecondary, brmPropertyId=brmPropertyId, aaaBillingPlanValidity4=aaaBillingPlanValidity4, aaaWebTabBgcolor=aaaWebTabBgcolor, subBytesSent=subBytesSent, brmServerUrlPrimary=brmServerUrlPrimary, greInterfaceNetmask=greInterfaceNetmask, locationCity=locationCity, datNetPort=datNetPort, aaaSubGPAuthenTypeOn=aaaSubGPAuthenTypeOn, trapIP=trapIP, systemSyslogIndex=systemSyslogIndex, aaaPassthroughPortOn=aaaPassthroughPortOn, aaaBillingPlanRateShow3=aaaBillingPlanRateShow3, subCapacityReached=subCapacityReached, aaaSubCurrTable=aaaSubCurrTable, aaaRadiusDefaultIdle=aaaRadiusDefaultIdle, wirelessWepDefaultKey=wirelessWepDefaultKey, aaaLogNumber=aaaLogNumber, aaaBillingPlanPricingDay3=aaaBillingPlanPricingDay3, realmTunProfile=realmTunProfile, timeOffsetHours=timeOffsetHours, dynDnsPassword=dynDnsPassword, inatStartAddress=inatStartAddress, nasStatus=nasStatus, aaaExternalIPAddress=aaaExternalIPAddress, brmServerCCIpTwo=brmServerCCIpTwo, wirelessWepKey4=wirelessWepKey4, aaaPartnerImageFileName=aaaPartnerImageFileName, authSubDevicePort=authSubDevicePort, localWebImages=localWebImages, aaaErrorUserIdMissing=aaaErrorUserIdMissing, subBytesTotal=subBytesTotal, iccCharSetOption=iccCharSetOption, aaaBillingPlanLabel0=aaaBillingPlanLabel0, aaaBillingPlanPricingMonth1=aaaBillingPlanPricingMonth1, tunProfName=tunProfName, radiusProxy=radiusProxy, iccButton4=iccButton4, iccButton7=iccButton7, pptpOn=pptpOn, aaaBillingPlanCost0=aaaBillingPlanCost0, aaaBilloptMinTimeUnitMinute=aaaBilloptMinTimeUnitMinute, aaaRadiusNetVlanOn=aaaRadiusNetVlanOn, profStatus=profStatus, aaaWebPageBgcolor=aaaWebPageBgcolor, aaaSubGPSessionSummaryLabel=aaaSubGPSessionSummaryLabel, datSessionTableEntry=datSessionTableEntry, leaseMinutes=leaseMinutes, aaaMessageRequestFailed=aaaMessageRequestFailed, iccLanguageOption=iccLanguageOption, getCommunity=getCommunity, systemNseId=systemNseId, aaaErrorISPChallenge=aaaErrorISPChallenge, ipsecPeerSharedKey=ipsecPeerSharedKey, aaaRadiusTerminationActionOn=aaaRadiusTerminationActionOn, ipsecPeerStatus=ipsecPeerStatus, aaaBillingPlanValidityRateShow0=aaaBillingPlanValidityRateShow0, aaaMessageBillingMode=aaaMessageBillingMode, aaaBillingPlanAssigned4=aaaBillingPlanAssigned4, aaaBilloptMaxTimeUnitMinute=aaaBilloptMaxTimeUnitMinute, aaaBillingPlanPricingDay4=aaaBillingPlanPricingDay4, iccButtonURL8=iccButtonURL8, aaaRadiusNasIpOn=aaaRadiusNasIpOn, aaaBillingPlanAssigned5=aaaBillingPlanAssigned5, ndxTraps=ndxTraps, greInterfaceGateway=greInterfaceGateway, aaaWebContactMsg=aaaWebContactMsg, systemVersion=systemVersion, aaaBillingPlanPricingDay1=aaaBillingPlanPricingDay1, systemSyslogMessage=systemSyslogMessage, aaaBillingPlanPricingHour4=aaaBillingPlanPricingHour4, wirelessMssidTable=wirelessMssidTable, ipsecPeers=ipsecPeers, dynDnsPort=dynDnsPort, passthroughDNSTable=passthroughDNSTable, ipsecPolicyRemSubnet=ipsecPolicyRemSubnet, iccButtonURL6=iccButtonURL6, radHistSyslogNumber=radHistSyslogNumber, leaseCLID=leaseCLID, dynDnsForceUpdate=dynDnsForceUpdate, aaaBillingOption=aaaBillingOption, acEndAddress=acEndAddress, authSubBwDown=authSubBwDown, pppAuthUsername=pppAuthUsername, locationEmail=locationEmail, aaaBillingPlanRateShow0=aaaBillingPlanRateShow0, aaaBillingPlanXoverY1=aaaBillingPlanXoverY1, aaaSubGoodbyePage=aaaSubGoodbyePage, iccOn=iccOn, aaaErrorTooManyUsers=aaaErrorTooManyUsers, aaaBillingPlanDesc2=aaaBillingPlanDesc2, aaaNewSubscriberOn=aaaNewSubscriberOn, ipsecPolicyPfsStrength=ipsecPolicyPfsStrength, localWebImagesTableEntry=localWebImagesTableEntry, iccBannerDuration4=iccBannerDuration4, ipsecOn=ipsecOn, iccButtonImgName5=iccButtonImgName5, rBserviceProfiles=rBserviceProfiles, systemStaticPortMappingStatus=systemStaticPortMappingStatus, radHistSyslogFilter=radHistSyslogFilter, ipsecPolicyEnc3desOk=ipsecPolicyEnc3desOk, iccBanner4=iccBanner4, realmMatchType=realmMatchType, aaaUsernameOn=aaaUsernameOn, aaaBillingPlanValidityRateShow1=aaaBillingPlanValidityRateShow1, lkFeatureList=lkFeatureList, radProxyAcctSvrPort=radProxyAcctSvrPort, dynDnsHostname=dynDnsHostname, iccBannerStopTime3=iccBannerStopTime3, pppIpCfgMode=pppIpCfgMode, dynDnsEnable=dynDnsEnable, dynDnsServer=dynDnsServer, authSubBwUp=authSubBwUp, brmServerCCSecretOne=brmServerCCSecretOne, aaaSubscriber=aaaSubscriber, iccButtonImgName4=iccButtonImgName4, iccButtonURL9=iccButtonURL9, wirelessWepKey1=wirelessWepKey1, radAcctSrv2Ip=radAcctSrv2Ip, aaaErrorWholeNumber=aaaErrorWholeNumber, radHistSysloggingOn=radHistSysloggingOn, portLocIndex=portLocIndex, localWebPages=localWebPages, aaaBillingPlanPricingMonth3=aaaBillingPlanPricingMonth3, systemHistoryLogin=systemHistoryLogin, ipsecPolicyIndex=ipsecPolicyIndex, subIdleLogoutTimeout=subIdleLogoutTimeout, ipsecPeerKeyStrength=ipsecPeerKeyStrength, ipsecPolicyType=ipsecPolicyType, dhcpServerSubnetBased=dhcpServerSubnetBased, ipsecPolicyEncDesOk=ipsecPolicyEncDesOk, aaaSubPostSession=aaaSubPostSession, passthroughOn=passthroughOn, DisplayString=DisplayString, authSubCountDown=authSubCountDown, iccBannerDuration3=iccBannerDuration3, aaaBillingPlanOn4=aaaBillingPlanOn4, aaaRadiusNasIdOn=aaaRadiusNasIdOn, iccISPLogoButtonImgName=iccISPLogoButtonImgName, lkFeatureListEntry=lkFeatureListEntry, aaaCreditCardUrl=aaaCreditCardUrl, systemHistoryMessage=systemHistoryMessage, aaaMessageChoosePasswd2=aaaMessageChoosePasswd2, brmRetransMethod=brmRetransMethod, sessionLimitMeanRate=sessionLimitMeanRate, urlFilteringIPTableAddress=urlFilteringIPTableAddress, publicPool=publicPool, lkModelNo=lkModelNo, aaaBillingPlanDHCPPool1=aaaBillingPlanDHCPPool1, iccButton6=iccButton6, ipsecPolicyLocIp=ipsecPolicyLocIp, aaaSaveToFile=aaaSaveToFile, localWebImagesTableIndex=localWebImagesTableIndex, aaaBillingPlanValidityRateShow3=aaaBillingPlanValidityRateShow3, iccBannerName1=iccBannerName1, nseReboot=nseReboot, aaaRadius=aaaRadius, iccButtonImgName2=iccButtonImgName2, tunnelProfileTableEntry=tunnelProfileTableEntry, systemReportLogNumber=systemReportLogNumber, authSubPassword=authSubPassword, aaaMessageYourHotel=aaaMessageYourHotel, aaaMessageRequestGranted=aaaMessageRequestGranted, aaaBillingPlanPricingHour0=aaaBillingPlanPricingHour0, wirelessMssidVlanDefaultOn=wirelessMssidVlanDefaultOn, wirelessMssidVlanDefaultTag=wirelessMssidVlanDefaultTag, ipsecPolicyAuthShaOk=ipsecPolicyAuthShaOk, aaaXmlSender1Ip=aaaXmlSender1Ip, authSubIndex=authSubIndex, aaaBillingPlanBandwidthDown2=aaaBillingPlanBandwidthDown2, ipsecPolicyProtocol=ipsecPolicyProtocol)
mibBuilder.exportSymbols("NOMADIX-MIB", greVpnConcentratorIp=greVpnConcentratorIp, ipsecVpnOn=ipsecVpnOn, wirelessWep=wirelessWep, realmTunStrip=realmTunStrip, urlFilteringDNSTableName=urlFilteringDNSTableName, radRetrAttempts=radRetrAttempts, aaaPortalPageUrl=aaaPortalPageUrl, systemReportLogServerIp=systemReportLogServerIp, aaaBillingPlanValidity2=aaaBillingPlanValidity2, aaaMessageNewUserTermsOn=aaaMessageNewUserTermsOn, systemHistoryTable=systemHistoryTable, hprOn=hprOn, iccButtonURL4=iccButtonURL4, portLocPort=portLocPort, aaaOn=aaaOn, realmWildcard=realmWildcard, pppAuthPassword=pppAuthPassword, ipsecSaStatusTable=ipsecSaStatusTable, brmServerCCIpThree=brmServerCCIpThree, systemStaticPortMappingInternalPort=systemStaticPortMappingInternalPort, aaaBillingPlanCost5=aaaBillingPlanCost5, aaaIWSLoginPageBlocking=aaaIWSLoginPageBlocking, aaaSupportGISClients=aaaSupportGISClients, realmStrip=realmStrip, dhcpServerEnable=dhcpServerEnable, aaaBillingPlanAssigned3=aaaBillingPlanAssigned3, localWeb=localWeb, portLocConcentratorType=portLocConcentratorType, blockFtpAccessOn=blockFtpAccessOn, datSessionTable=datSessionTable, iccButtonName3=iccButtonName3, aaaSslOn=aaaSslOn, locationNetmask=locationNetmask, accessControlIpTable=accessControlIpTable, bandwidthManagementOn=bandwidthManagementOn, aaaMessageNewUserTerms=aaaMessageNewUserTerms, aaaBillingPlanPricingWeek5=aaaBillingPlanPricingWeek5, iccButtonName8=iccButtonName8, macFilteringTableEntry=macFilteringTableEntry, pppStaticIpAddr=pppStaticIpAddr, failedLogin=failedLogin, passthroughAddIndex=passthroughAddIndex, dns=dns, ipsecSaStatusTableEntry=ipsecSaStatusTableEntry, aaaBillingPlanOn0=aaaBillingPlanOn0, subAaaState=subAaaState, nasDefProf=nasDefProf, mask=mask, aaaErrorPasswordWrong=aaaErrorPasswordWrong, aaaRadiusNasId=aaaRadiusNasId, aaaBillingPlanBandwidthDown1=aaaBillingPlanBandwidthDown1, aaaBillingPlanDHCPPool2=aaaBillingPlanDHCPPool2, iccButtonImgName7=iccButtonImgName7, tunPassword=tunPassword, systemSyslogAddress=systemSyslogAddress, dhcpPoolTableEntry=dhcpPoolTableEntry, systemStaticPortMappingRemotePort=systemStaticPortMappingRemotePort, smtpPcRedirect=smtpPcRedirect, portLocInRoomPortMappingUsername=portLocInRoomPortMappingUsername, aaaBillingPlanCost4=aaaBillingPlanCost4, aaaBillingPlanDuration1=aaaBillingPlanDuration1, radRetrFreq=radRetrFreq, aaaBillingPlanAssigned0=aaaBillingPlanAssigned0, iccBannerName5=iccBannerName5, aaaRadiusSubnetAttrOn=aaaRadiusSubnetAttrOn, hprRedirectionFrequency=hprRedirectionFrequency, systemStaticPortMappingIndex=systemStaticPortMappingIndex, wirelessMssidTableEntry=wirelessMssidTableEntry, realmBasedRouter=realmBasedRouter, aaaBilloptMaxTimeUnitDay=aaaBilloptMaxTimeUnitDay, aaaBillingPlanValidity3=aaaBillingPlanValidity3, brmServerCCSecretThree=brmServerCCSecretThree, systemLogNumber=systemLogNumber, ipsecPolicyUseNetIp=ipsecPolicyUseNetIp, systemLogFilter=systemLogFilter, ipsecSaStatus=ipsecSaStatus, inat=inat, portLocModemMAC=portLocModemMAC, authSubExpTimeMins=authSubExpTimeMins, localWebImagesTableStatus=localWebImagesTableStatus, aaaBillingPlanPricingHour1=aaaBillingPlanPricingHour1, radAuthSrv1Sec=radAuthSrv1Sec, locationNetworkIp=locationNetworkIp, brmServerIpPrimary=brmServerIpPrimary, inatIndex=inatIndex, portLocConcIndex=portLocConcIndex, aaaBillingPlanDesc3=aaaBillingPlanDesc3, dnsTertiaryServer=dnsTertiaryServer, realmName=realmName, radProxyAuthSvrPort=radProxyAuthSvrPort, bwmUpWanLinkSpeed=bwmUpWanLinkSpeed, iccBannerURL3=iccBannerURL3, datTimeout=datTimeout, defaultPool=defaultPool, leaseIndex=leaseIndex, timeOffsetMinutes=timeOffsetMinutes, aaaBillingPlanBandwidthDown0=aaaBillingPlanBandwidthDown0, aaaBilloptPolicyMsg=aaaBilloptPolicyMsg, subnetStatus=subnetStatus, aaaBillingPlanDHCPPool3=aaaBillingPlanDHCPPool3, dnsHostName=dnsHostName, aaaRadiusFipOn=aaaRadiusFipOn, systemUptime=systemUptime, wirelessWepKey3=wirelessWepKey3, subProxy=subProxy, smtpRedirect=smtpRedirect, localWebPagesTable=localWebPagesTable, aaaBillingPlanBandwidthDown5=aaaBillingPlanBandwidthDown5, locationZip=locationZip, aaaBillingPlanBandwidthUp0=aaaBillingPlanBandwidthUp0, portLocLocation=portLocLocation, aaaErrorMinMaxValues=aaaErrorMinMaxValues, radHistSyslogSaveToFile=radHistSyslogSaveToFile, dhcpServer=dhcpServer, nomadix=nomadix, aaaErrorHasOccurred=aaaErrorHasOccurred, aaaBillingPlanPricingWeek2=aaaBillingPlanPricingWeek2, location=location, datDestPort=datDestPort, aaaBillingPlanCost3=aaaBillingPlanCost3, aaaRadiusForgotPasswordUrlOn=aaaRadiusForgotPasswordUrlOn, hprParameterPassing=hprParameterPassing, ipsecPolicyLocSubnet=ipsecPolicyLocSubnet, aaaBillingPlanBandwidthUp3=aaaBillingPlanBandwidthUp3, acStatus=acStatus, aaaBillingPlanPricingMin3=aaaBillingPlanPricingMin3, timeServer4=timeServer4, dhcpDisable=dhcpDisable, aaaBillingPlanXoverY5=aaaBillingPlanXoverY5, aaaBilloptMinTimeUnitWeek=aaaBilloptMinTimeUnitWeek, aaaBillingPlanValidityRateShow4=aaaBillingPlanValidityRateShow4, system=system, nasAuthSec=nasAuthSec, aaaWebRememberMeOn=aaaWebRememberMeOn, subnets=subnets, blockSSHShellAccessOn=blockSSHShellAccessOn, aaaRadiusNetVlanDefaultOn=aaaRadiusNetVlanDefaultOn, aaaSubGPAuthenTypeLabel=aaaSubGPAuthenTypeLabel, ipsec=ipsec, sessionlimit=sessionlimit, aaaBillingPlanXoverY2=aaaBillingPlanXoverY2, aaaSubGPByteReceivedOn=aaaSubGPByteReceivedOn, passthroughIPTable=passthroughIPTable, aaaSslHostName=aaaSslHostName, radProxyUpstreamNasTableEntry=radProxyUpstreamNasTableEntry, aaaChainfusionCCTransTime=aaaChainfusionCCTransTime, aaaLoggingOn=aaaLoggingOn, portLocAddress=portLocAddress, aaaBillingPlanXoverY3=aaaBillingPlanXoverY3, brmServerPortSecondary=brmServerPortSecondary, aaaRadiusLoginRefresh=aaaRadiusLoginRefresh, ipsecSaStatusIndex=ipsecSaStatusIndex, datDestIp=datDestIp, aaaBillingPlan3=aaaBillingPlan3, aaaBillingPlanDesc1=aaaBillingPlanDesc1, aaaSubGPSubIPAddressLabel=aaaSubGPSubIPAddressLabel, brmServerCCPortTwo=brmServerCCPortTwo, aaaInternalAuth=aaaInternalAuth, iccBannerDuration1=iccBannerDuration1, locationVenueType=locationVenueType, aaaLoginPageFailoverOn=aaaLoginPageFailoverOn, radAuthSrv2Sec=radAuthSrv2Sec, aaaLoginPageFailover=aaaLoginPageFailover, aaaWebItemFont=aaaWebItemFont, aaaSubGPIPAddressOn=aaaSubGPIPAddressOn, aaaSubGPHyperlinkOn=aaaSubGPHyperlinkOn, iccBanner2=iccBanner2, smtp=smtp, systemConfigFile=systemConfigFile, aaaSubGPByteReceivedLabel=aaaSubGPByteReceivedLabel, systemAdminConcurrencyOn=systemAdminConcurrencyOn, subnetTableEntry=subnetTableEntry, macFilteringTable=macFilteringTable, dhcpIpUpsell=dhcpIpUpsell, systemSyslogTimestamp=systemSyslogTimestamp, radAcctOn=radAcctOn, serviceProfileTable=serviceProfileTable, aaaAuthSubTableEntry=aaaAuthSubTableEntry, brmRetransAttempts=brmRetransAttempts, aaa=aaa, ipsecPolicyRemIp=ipsecPolicyRemIp, radProxyAcctHistLog=radProxyAcctHistLog, iccButton8=iccButton8, subnetTable=subnetTable, aaaWebExistingUserMsg=aaaWebExistingUserMsg, passthroughNameIndex=passthroughNameIndex, aaaBillingPlan1=aaaBillingPlan1, aaaBillingPlanRateShow2=aaaBillingPlanRateShow2, dnsPrimaryServer=dnsPrimaryServer, iccISPLogoButtonURL=iccISPLogoButtonURL, systemContact=systemContact, aaaBillingPlanOn5=aaaBillingPlanOn5, aaaBillingPlanDesc4=aaaBillingPlanDesc4, dhcp=dhcp, timeServer2=timeServer2, iccBannerStartTime4=iccBannerStartTime4, serverIp=serverIp, iccBannerImgName5=iccBannerImgName5, hprUrl=hprUrl, systemSyslogTable=systemSyslogTable, ipsecPolicyTableEntry=ipsecPolicyTableEntry, aaaBillingPlanAssigned2=aaaBillingPlanAssigned2, smtpPassword=smtpPassword, aaaMessageChoosePasswd1=aaaMessageChoosePasswd1, subnetIndex=subnetIndex, iccButtonName2=iccButtonName2, iccBannerName2=iccBannerName2, aaaBillingPlanPricingMonth5=aaaBillingPlanPricingMonth5, ag=ag, ipsecPolicyLocPort=ipsecPolicyLocPort, brmServerCCSecretTwo=brmServerCCSecretTwo, iccButtonURL7=iccButtonURL7, ipsecPolicyDirType=ipsecPolicyDirType, wirelessFragLength=wirelessFragLength, timeCurrentDateAndTime=timeCurrentDateAndTime, mssidIndex=mssidIndex, aaaBillingPlanOn2=aaaBillingPlanOn2, realmEntryActive=realmEntryActive, urlFilteringIPTable=urlFilteringIPTable, macFiltering=macFiltering, authSubUser2=authSubUser2, aaaCreditCardOn=aaaCreditCardOn, aaaOSencodingOn=aaaOSencodingOn, aaaBillingPlanLabel4=aaaBillingPlanLabel4, aaaBillingPlanPricingMin1=aaaBillingPlanPricingMin1, iccButtonImgName9=iccButtonImgName9, systemBridgeMode=systemBridgeMode, ipsecPolicyMaxLifesize=ipsecPolicyMaxLifesize, subSsid=subSsid, authSubMac=authSubMac, pppoeSvcName=pppoeSvcName, aaaMessageVerifying=aaaMessageVerifying, aaaBilloptOfferMsg=aaaBilloptOfferMsg, aaaBillingPlanXoverY0=aaaBillingPlanXoverY0, aaaErrorUserIdTaken=aaaErrorUserIdTaken, poolStopIp=poolStopIp, inatIpEntry=inatIpEntry, dynDnsProtocol=dynDnsProtocol, dat=dat, authSubIp=authSubIp, greTunnelingEnable=greTunnelingEnable, aaaBilloptIntroMsg=aaaBilloptIntroMsg, aaaErrorAccessPassword=aaaErrorAccessPassword, aaaBilloptMaxTimeUnitWeek=aaaBilloptMaxTimeUnitWeek, aaaMessagePurchaseOK2=aaaMessagePurchaseOK2, wirelessDtim=wirelessDtim, iccButtonURL3=iccButtonURL3, aaaXmlOn=aaaXmlOn, dhcpRelayAgentIP=dhcpRelayAgentIP, aaaPortalXMLPort=aaaPortalXMLPort, iccButton9=iccButton9, iccButtons=iccButtons, dhcpServerTable=dhcpServerTable, systemLoggingOn=systemLoggingOn)
mibBuilder.exportSymbols("NOMADIX-MIB", wireless=wireless, authSubConfirmation=authSubConfirmation, iccBanner1=iccBanner1, radRetrMethod=radRetrMethod, PYSNMP_MODULE_ID=nomadix, aaaBillingPlanDHCPPool0=aaaBillingPlanDHCPPool0, urlFilteringOn=urlFilteringOn, passthroughDNSEntry=passthroughDNSEntry, products=products, aaaPartnerImageOn=aaaPartnerImageOn, aaaRadiusNasPortOn=aaaRadiusNasPortOn, dnsSecondaryServer=dnsSecondaryServer, sessionLimitTimeInterval=sessionLimitTimeInterval, iccBannerStartTime5=iccBannerStartTime5, bwmDownWanLinkSpeed=bwmDownWanLinkSpeed, aaaMessagePurchaseSelect=aaaMessagePurchaseSelect, aaaBillingPlanXoverY4=aaaBillingPlanXoverY4, aaaBillingPlanPricingMin5=aaaBillingPlanPricingMin5, poolIndex=poolIndex, aaaBillingPlanDuration3=aaaBillingPlanDuration3, smtpServerDNS=smtpServerDNS, acStartAddress=acStartAddress, iccButton3=iccButton3, datSessState=datSessState, aaaMessageThankYou=aaaMessageThankYou, aaaAmountDecimals=aaaAmountDecimals, aaaBillingPlanPricingWeek3=aaaBillingPlanPricingWeek3, locationState=locationState, profName=profName, urlFilteringDNSTable=urlFilteringDNSTable, hpr=hpr, aaaBillingPlanDuration2=aaaBillingPlanDuration2, aaaDot1xOn=aaaDot1xOn, aaaBillingPlanBandwidthUp2=aaaBillingPlanBandwidthUp2, aaaSubGPStartTimeLabel=aaaSubGPStartTimeLabel, aaaBillingPlanPricingHour5=aaaBillingPlanPricingHour5, wirelessSsidBroadcastOn=wirelessSsidBroadcastOn, radAcctSrv2Port=radAcctSrv2Port, aaaBillingPlanPricingDay2=aaaBillingPlanPricingDay2, aaaErrorPasswordMatch=aaaErrorPasswordMatch, aaaErrorWeAreSorry=aaaErrorWeAreSorry, aaaBillingPlanPricingDay0=aaaBillingPlanPricingDay0, bandwidthManagement=bandwidthManagement, aaaBillingPlanBandwidthUp1=aaaBillingPlanBandwidthUp1, iccBannerImgName4=iccBannerImgName4, aaaSmartClientOn=aaaSmartClientOn, radAuthSrv1Port=radAuthSrv1Port, systemStaticPortMappingExternalPort=systemStaticPortMappingExternalPort, iccBannerName3=iccBannerName3, dynDnsUsername=dynDnsUsername, aaaRadiusGoodbyeUrlOn=aaaRadiusGoodbyeUrlOn, ipsecPeerLifetime=ipsecPeerLifetime, aaaSubGPStopTimeLabel=aaaSubGPStopTimeLabel, brmServerPortPrimary=brmServerPortPrimary, aaaCreditCardServerTypeSelection=aaaCreditCardServerTypeSelection, aaaBillingPlanRateShow4=aaaBillingPlanRateShow4, iccBannerStartTime3=iccBannerStartTime3, nseRadCapacityReached=nseRadCapacityReached, brmNseId=brmNseId, subPort=subPort, aaaRadiusNasPortType=aaaRadiusNasPortType, aaaWebJavascriptOn=aaaWebJavascriptOn, aaaMessageYourPurchase=aaaMessageYourPurchase, aaaMessageNewUserLogin=aaaMessageNewUserLogin, aaaBillingPlanDuration4=aaaBillingPlanDuration4, portLocInRoomPortMappingPassword=portLocInRoomPortMappingPassword, accessControlIpEntry=accessControlIpEntry, aaaBillingPlanRateShow5=aaaBillingPlanRateShow5, radAcctSrv2Sec=radAcctSrv2Sec, iccButton5=iccButton5, ipsecPolicyAuthMd5Ok=ipsecPolicyAuthMd5Ok, authSubType=authSubType, aaaBillingPlanValidityRateShow5=aaaBillingPlanValidityRateShow5, locationGateway=locationGateway, dyndns=dyndns, ipsecPeerTableEntry=ipsecPeerTableEntry, aaaBilloptMaxSubLifetime=aaaBilloptMaxSubLifetime, aaaBilloptFreeAccessTime=aaaBilloptFreeAccessTime, brmServerCCPortThree=brmServerCCPortThree, subMac=subMac, brmServerCCUrlThree=brmServerCCUrlThree, aaaRadiusLocalAuthPort=aaaRadiusLocalAuthPort, aaaMessagebyCreditCard=aaaMessagebyCreditCard, authSubStatus=authSubStatus, greTunneling=greTunneling, macFilteringTableIndex=macFilteringTableIndex, portLocUplinkPort=portLocUplinkPort, aaaBillingPlanDHCPPool5=aaaBillingPlanDHCPPool5, tunneling=tunneling, sessionLimitEnable=sessionLimitEnable, systemSyslogTableEntry=systemSyslogTableEntry, dhcpLeaseTableEntry=dhcpLeaseTableEntry, aaaBillingPlanDuration5=aaaBillingPlanDuration5, wirelessMssidVlanOn=wirelessMssidVlanOn, aaaBillingPlanPricingMonth0=aaaBillingPlanPricingMonth0, passthroughIPEntry=passthroughIPEntry, aaaErrorYourAccount=aaaErrorYourAccount, subIndex=subIndex, blockWebAccessOn=blockWebAccessOn, aaaMessageOldUserLogin=aaaMessageOldUserLogin, systemSaveToFile=systemSaveToFile, aaaRadiusNetVlanDefaultTag=aaaRadiusNetVlanDefaultTag, pptpidOn=pptpidOn, tunProfStatus=tunProfStatus, localWebImagesTable=localWebImagesTable, aaaSubGPStartTimeOn=aaaSubGPStartTimeOn, portLocState=portLocState, aaaBillingPlanAssigned1=aaaBillingPlanAssigned1, aaaBillingPlanBandwidthDown3=aaaBillingPlanBandwidthDown3, tunProfIndex=tunProfIndex, greInterfaceIp=greInterfaceIp, setCommunity=setCommunity, locationPhoneCountryCode=locationPhoneCountryCode, iccBannerURL2=iccBannerURL2, subIdleTimeout=subIdleTimeout, aaaBilloptMinTimeUnitHour=aaaBilloptMinTimeUnitHour, authSubAmtLeft=authSubAmtLeft, timeServer1=timeServer1, radAcctSrv1Sec=radAcctSrv1Sec, ipsecPolicyStatus=ipsecPolicyStatus, realmIndex=realmIndex, pppEchoMaxNonresp=pppEchoMaxNonresp, iccBannerImgName1=iccBannerImgName1, wirelessRtsLength=wirelessRtsLength, wirelessSsid=wirelessSsid, aaaSubGPEnable=aaaSubGPEnable, authSubAmtPaid=authSubAmtPaid, aaaErrorNoBillingOpts=aaaErrorNoBillingOpts, iccButtonImgName6=iccButtonImgName6, urlFilteringIPTableStatus=urlFilteringIPTableStatus, systemReboot=systemReboot, ipsecPeerEnc3DesOk=ipsecPeerEnc3DesOk, ipsecPeerAuthMethod=ipsecPeerAuthMethod, tunnelProfileTable=tunnelProfileTable, radAcctSrv1Port=radAcctSrv1Port, datSubMac=datSubMac, sessionLimitFilterOffendersEnable=sessionLimitFilterOffendersEnable, iccBannerStartTime1=iccBannerStartTime1, acIndex=acIndex, aaaRadiusRoutingMode=aaaRadiusRoutingMode, aaaBilloptMaxTimeUnitHour=aaaBilloptMaxTimeUnitHour, aaaMessagebyHotelRoom=aaaMessagebyHotelRoom, brmRetransDelay=brmRetransDelay, ipsecPeerHashShaOk=ipsecPeerHashShaOk, localWebPagesTableName=localWebPagesTableName, systemStaticPortMappingMAC=systemStaticPortMappingMAC, brmServerCCPortOne=brmServerCCPortOne, wirelessBeaconInterval=wirelessBeaconInterval, aaaBillingPlanLabel2=aaaBillingPlanLabel2, urlFilteringIPTableEntry=urlFilteringIPTableEntry, aaaAuthorizationUrl=aaaAuthorizationUrl, locationAddress1=locationAddress1, subToSubCommBlock=subToSubCommBlock, time=time, aaaBillingPlanPricingWeek0=aaaBillingPlanPricingWeek0, systemConfigFileStatus=systemConfigFileStatus, localWebPagesTableIndex=localWebPagesTableIndex, radAuthProto=radAuthProto, rBtunnelProfiles=rBtunnelProfiles, smtpUsername=smtpUsername, systemSyslogVersion=systemSyslogVersion, aaaBillingPlanPricingDay5=aaaBillingPlanPricingDay5, ipsecPeerHashMd5Ok=ipsecPeerHashMd5Ok, aaaBillingPlanLabel1=aaaBillingPlanLabel1, brmServerSecretSecondary=brmServerSecretSecondary, ipsecSaStatusState=ipsecSaStatusState, brmMirrorOn=brmMirrorOn, serviceProfileTableEntry=serviceProfileTableEntry, portLocCommunity=portLocCommunity, dhcpRelay=dhcpRelay, macFilteringStatus=macFilteringStatus, iccLogoutOption=iccLogoutOption, portLoc=portLoc, aaaErrorRoomBilling=aaaErrorRoomBilling, snmpagent=snmpagent, timeServerTimeout=timeServerTimeout, aaaCreditCardIp=aaaCreditCardIp, poolStatus=poolStatus, radAcctSrv1Ip=radAcctSrv1Ip, radAuthOn=radAuthOn, iccBannerStopTime2=iccBannerStopTime2, systemHistoryAddress=systemHistoryAddress, radProxyAcctHistSyslog=radProxyAcctHistSyslog, systemLocation=systemLocation, systemHistoryTableEntry=systemHistoryTableEntry, passthroughname=passthroughname, macFilteringTableAddress=macFilteringTableAddress, aaaLogFilter=aaaLogFilter, aaaBillingPlanPricingMin2=aaaBillingPlanPricingMin2, inatOn=inatOn, iccBannerStopTime1=iccBannerStopTime1, aaaErrorTryAgain=aaaErrorTryAgain, nasAcctSec=nasAcctSec, realmTunLocHostName=realmTunLocHostName, wirelessWepKey2=wirelessWepKey2, ipsecPolicyTable=ipsecPolicyTable, aaaRadiusForgotPasswordUrl=aaaRadiusForgotPasswordUrl, portLocDescription=portLocDescription, aaaBilloptMinTimeUnitDay=aaaBilloptMinTimeUnitDay, aaaBilloptMinTimeUnitMonth=aaaBilloptMinTimeUnitMonth, subExpiration=subExpiration, nasEntryActive=nasEntryActive, lpfEntryOnlineStatus=lpfEntryOnlineStatus, locationIsoCountryCode=locationIsoCountryCode, ipsecPeerEncDesOk=ipsecPeerEncDesOk, aaaLpfStatusTableEntry=aaaLpfStatusTableEntry, nasIpAddress=nasIpAddress, urlFilteringDNSTableEntry=urlFilteringDNSTableEntry, brmServerCCIpOne=brmServerCCIpOne, datSubIp=datSubIp, aaaAuthMode=aaaAuthMode, wirelessWepOn=wirelessWepOn, localWebImagesTableName=localWebImagesTableName, aaaSubGPByteSentOn=aaaSubGPByteSentOn, blockSFTPAccessOn=blockSFTPAccessOn, iccButtonURL2=iccButtonURL2, iccTitle=iccTitle, aaaExternalAuth=aaaExternalAuth, radAuthSrv2Ip=radAuthSrv2Ip, aaaRadiusRedUrlOn=aaaRadiusRedUrlOn, tunPeerIp=tunPeerIp, mssidVlan=mssidVlan, aaaBillingPlanDesc0=aaaBillingPlanDesc0, aaaMessagePurchaseOK1=aaaMessagePurchaseOK1, aaaCurrency=aaaCurrency, urlFilteringDNSTableIndex=urlFilteringDNSTableIndex, aaaBillingPlanCost1=aaaBillingPlanCost1, iccBannerURL5=iccBannerURL5, subBwUp=subBwUp, subsettings=subsettings, aaaMessageFreeInternet=aaaMessageFreeInternet, brmServerSecretPrimary=brmServerSecretPrimary, ipsecPeerPrivkeyFile=ipsecPeerPrivkeyFile, lkMaxNumSubs=lkMaxNumSubs, aaaBillingPlanValidity1=aaaBillingPlanValidity1, dhcpRelayEnable=dhcpRelayEnable, systemStaticPortMappingProto=systemStaticPortMappingProto, aaaBillingPlanPricingHour3=aaaBillingPlanPricingHour3, aaaMessageChooseUsername=aaaMessageChooseUsername, iccISPLogoButtonName=iccISPLogoButtonName, ipsecPolicyMaxLifetime=ipsecPolicyMaxLifetime, iccBanner3=iccBanner3, locationAddress2=locationAddress2, aaaBillingPlanPricingMonth4=aaaBillingPlanPricingMonth4, aaaWebMicrosUsernameMsg=aaaWebMicrosUsernameMsg, datNetIp=datNetIp, subBwDown=subBwDown, aaaRadiusDefProf=aaaRadiusDefProf, ipsecPeerCertFile=ipsecPeerCertFile, aaaSecretKey=aaaSecretKey, billRecMirror=billRecMirror, portLocConcentratorTable=portLocConcentratorTable, passthrough=passthrough, aaaReloginOn=aaaReloginOn)
mibBuilder.exportSymbols("NOMADIX-MIB", accessControl=accessControl, aaaRememberMeDays=aaaRememberMeDays, portLocInRoomPortMappingOn=portLocInRoomPortMappingOn, iccBannerStopTime4=iccBannerStopTime4, aaaBillingPlanPricingMonth2=aaaBillingPlanPricingMonth2, wirelessRate=wirelessRate, ipsecPeerIndex=ipsecPeerIndex, brmServerIpSecondary=brmServerIpSecondary, trapCommunity=trapCommunity, statusIP=statusIP, macFilteringOn=macFilteringOn, profIndex=profIndex, statusDNS=statusDNS, subStatus=subStatus, iccBannerStopTime5=iccBannerStopTime5, aaaBillingPlanOn3=aaaBillingPlanOn3, accessControlOn=accessControlOn, aaaBillingPlanPricingMin4=aaaBillingPlanPricingMin4, aaaBillingPlanPricingWeek1=aaaBillingPlanPricingWeek1, urlFiltering=urlFiltering, locationSiteName=locationSiteName, aaaBillingPlanValidity5=aaaBillingPlanValidity5, ipsecPeerTable=ipsecPeerTable, dnsDomain=dnsDomain, pppoeClient=pppoeClient, authSubExpTimeHrs=authSubExpTimeHrs, aaaRadiusCacheOn=aaaRadiusCacheOn, aaaBillingPlanDuration0=aaaBillingPlanDuration0, aaaBillingPlanLabel3=aaaBillingPlanLabel3, aaaWebNewUsernameMsg=aaaWebNewUsernameMsg, systemHistoryIndex=systemHistoryIndex, wirelessMssid=wirelessMssid, aaaBillingPlanPricingHour2=aaaBillingPlanPricingHour2, iccBannerURL4=iccBannerURL4, aaaSubGPHypertextURLLabel=aaaSubGPHypertextURLLabel, tunnelingOn=tunnelingOn, blockIcmpFromPending=blockIcmpFromPending, localWebPagesTableStatus=localWebPagesTableStatus, aaaPortalParameterPassing=aaaPortalParameterPassing, urlFilteringDNSTableStatus=urlFilteringDNSTableStatus, brmServerCCUrlTwo=brmServerCCUrlTwo, iccISPLogoButton=iccISPLogoButton, datProto=datProto, licenseKeys=licenseKeys, iccButtonName4=iccButtonName4, aaaErrorNotAvailable=aaaErrorNotAvailable, iccButtonURL5=iccButtonURL5, systemReportLoggingOn=systemReportLoggingOn, timeServer3=timeServer3, poolStartIp=poolStartIp, aaaLpfStatusTable=aaaLpfStatusTable, aaaSubGPByteSentLabel=aaaSubGPByteSentLabel, systemReportLogInterval=systemReportLogInterval, systemStaticPortMappingTable=systemStaticPortMappingTable, aaaWebTitleFont=aaaWebTitleFont, mssidName=mssidName, leaseStatus=leaseStatus, locationNetIntfCfgMode=locationNetIntfCfgMode, aaaPrintBillingCommandOn=aaaPrintBillingCommandOn, aaaBillingPlanCost2=aaaBillingPlanCost2, aaaBillingPlanBandwidthUp4=aaaBillingPlanBandwidthUp4, lpfEntryNickname=lpfEntryNickname, inatEndAddress=inatEndAddress, subIp=subIp, iccBannerDuration5=iccBannerDuration5, wirelessChannel=wirelessChannel, timeOffsetSign=timeOffsetSign, inatEntryStatus=inatEntryStatus, iccBanners=iccBanners, systemLogServerIp=systemLogServerIp, pppMaxTcpMss=pppMaxTcpMss, aaaBillingPlanOn1=aaaBillingPlanOn1, datSubPort=datSubPort, rBroutes=rBroutes, smtpServerIP=smtpServerIP, aaaPortalPageOn=aaaPortalPageOn, aaaTaxRate=aaaTaxRate, aaaWebImage=aaaWebImage, ipsecPolicyAuthNullOk=ipsecPolicyAuthNullOk, radProxyLocalServcomPort=radProxyLocalServcomPort, iccBannerImgName2=iccBannerImgName2, aaaBillingPlan0=aaaBillingPlan0, aaaMerchantId=aaaMerchantId, aaaSubGPHyperlink=aaaSubGPHyperlink, ipsecPeerIpAddr=ipsecPeerIpAddr, authSubUser1=authSubUser1, aaaRadiusLocalAcctPort=aaaRadiusLocalAcctPort, lkKey=lkKey, lkFeatureStatus=lkFeatureStatus, iccBannerURL1=iccBannerURL1, aaaBillingPlanDesc5=aaaBillingPlanDesc5, aaaSubCurrTableEntry=aaaSubCurrTableEntry, blockTelnetAccessOn=blockTelnetAccessOn, iccTimerOption=iccTimerOption, realmBasedRoutingTableEntry=realmBasedRoutingTableEntry, locationCompanyName=locationCompanyName, ipsecPolicyAutoRenew=ipsecPolicyAutoRenew, wirelessWepClients=wirelessWepClients, realmProfile=realmProfile, aaaBillingPlans=aaaBillingPlans, aaaSubGPStopTimeOn=aaaSubGPStopTimeOn, radHistSyslogServerIp=radHistSyslogServerIp, aaaBillingPlanPricingWeek4=aaaBillingPlanPricingWeek4, iccButtonImgName3=iccButtonImgName3, ipUpSell=ipUpSell, aaaAuthSubTable=aaaAuthSubTable)
