#
# PySNMP MIB module HUAWEI-AAA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-AAA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:42:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
huaweiMgmt, = mibBuilder.importSymbols("HUAWEI-MIB", "huaweiMgmt")
Ipv6Address, Ipv6AddressPrefix, Ipv6AddressIfIdentifier = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address", "Ipv6AddressPrefix", "Ipv6AddressIfIdentifier")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Integer32, TimeTicks, NotificationType, ModuleIdentity, Gauge32, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, MibIdentifier, Counter32, ObjectIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "NotificationType", "ModuleIdentity", "Gauge32", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "MibIdentifier", "Counter32", "ObjectIdentity", "IpAddress")
RowStatus, DateAndTime, MacAddress, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DateAndTime", "MacAddress", "TruthValue", "TextualConvention", "DisplayString")
hwAaa = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 2))
hwAaa.setRevisions(('2015-06-10 12:50', '2015-04-23 16:55', '2015-04-17 12:50', '2015-03-10 12:50', '2014-12-26 16:17', '2014-09-06 16:17', '2014-09-03 10:50', '2014-08-20 10:50', '2014-08-06 10:50', '2014-07-14 10:50', '2014-03-06 10:50', '2013-12-17 10:30', '2013-12-13 17:25', '2013-10-15 17:25', '2013-08-08 20:12', '2013-07-19 18:00', '2013-07-04 17:09', '2013-06-27 17:19', '2013-04-17 09:19', '2013-04-03 22:22', '2013-03-15 11:11', '2013-09-14 15:18', '2013-11-28 16:51', '2014-03-18 10:51', '2014-03-24 10:51', '2014-04-17 10:26', '2014-04-17 10:27', '2014-07-08 15:44', '2014-08-12 17:25', '2014-08-27 15:44', '2014-08-27 15:44', '2014-09-21 15:44', '2014-12-27 15:44', '2014-12-31 15:44', '2014-12-26 16:17', '2015-01-23 10:25', '2015-03-20 13:14', '2015-03-26 09:35', '2015-07-07 20:36', '2015-07-16 17:11', '2015-07-28 16:41', '2015-07-28 20:55', '2015-07-28 21:00', '2015-07-31 09:17', '2015-08-08 09:35', '2015-08-26 16:05', '2015-09-11 11:38',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwAaa.setRevisionsDescriptions(('Add userAuthenticationFreeRuleExtTable , modify userAuthenticationFreeRuleTable', 'Add hwAAAInboundVPNAccessUserStatTable hwAAAInboundVPNAccessUserStatTable', 'Add hwAAADomainInboundQoSProfile hwAAADomainOutboundQoSProfile', 'Add hwDhcpUserOnlineFailCount', 'Modify hwLocalUserAccessType Syntax Type . [Integer32 -> Unsigned32] ', 'Add hwUserGroupThresholdAlarm, hwUserGroupThresholdResume, hwUserGroupNumThreshold and hwUserGroupUsedNum', 'Modify hwDomainAccessLimitNum OBJECT-TYPE and hwftpdirction OBJECT-TYPE', 'Add hwEDSGLicenseExpireAlarm and hwEDSGLicenseExpireResume', 'Modify node hwOfflineReason', 'Add hwLocalAuthorize and hwRemoteAuthorize', 'Add hwUserGroupThresholdAlarm, hwUserGroupThresholdResume, hwUserGroupNumThreshold and hwUserGroupUsedNum', 'Modify hwUserDomainName, hwUserAuthenState, hwUserAcctState, hwUserAuthorState and hwOnlineFailReason in hwAAAOnlineFailRecordTable', 'Add hwLoginFailedTimes and hwStatisticPeriod and hwAdminLoginFailed and hwAdminLoginFailedClear', 'Add hwHistoricMaxOnlineLocalNum and hwHistoricMaxOnlineRemoteNum', 'Add hwWlanInterfaceName ', 'Add hwAccessResourceInsufficientInbound and hwAccessResourceInsufficientOutbound', 'extend the scope of hwAuthenMethod ', 'extend the scope of hwAuthenMethod ', 'extend the scope of hwAuthenMethod ', 'Add hwLocalUserIfAllowWeakPassword.', 'The MIB contains objects of module AAA.', 'The MIB contains objects of module AAA.', 'The MIB contains objects of module AAA.', 'The MIB contains objects of module AAA.', 'The MIB contains objects of module AAA.', 'Add hwTotalLacOnlineNum and hwTotalLnsOnlineNum', 'Add hwAAARateTable', 'Add hwLocalAuthorize and hwRemoteAuthorize', 'Add hwAccessDeviceName and hwAccessDeviceMACAddress', 'Add hwLocalUserPwPolicyAdmin', 'Add hwLocalUserPwPolicyAcc', 'Add hwAAADomainIPPoolTable', 'Add hwAAAAccessUserResourceOrCpuAlarm and hwAAAAccessUserResourceOrCpuResume', 'Add hwAAACpuUsage and hwAAAUserResourceUsage', 'Add hwAAATimerExpireMajorLevelThreshold, hwAAATimerExpireMajorLevelResumeThreshold, hwAAATimerExpireCriticalLevelThreshold and hwAAATimerExpireCriticalLevelResumeThreshold', 'Add userAuthenProfile, userAuthenticationFreeRule, hwDot1xAccessProfile, hwMACAuthenAccessProfile and hwPortalAccessProfile', 'Modify hwLocalUserPasswordLifetimeMin and hwLocalUserPasswordLifetimeMax in hwLocalUserEntry', 'Add userAuthenProfileDefaultDomain, userAuthenProfileForceDomain, userAuthenProfileDomainNameDelimiter, userAuthenProfileDomainNameLocation, userAuthenProfileDomainNameParseDirection and userAuthenProfilePermitDomain in userAuthenProfileEntry', 'Add hwMacMovedQuietUserSpec, hwMacMovedUserPercentage, hwLowerMacMovedUserPercentage, hwUpperMacMovedUserPercentage, hwMacMovedQuietMaxUserAlarm and hwMacMovedQuietUserClearAlarm ', 'Modify hwLocalUserAccessLimitNum in hwLocalUserEntry', 'Modify hwMACAuthenAccessProfileTriggerPktType in HwMACAuthenAccessProfileEntry', 'Modify hwUserGroupCarCir,hwUserGroupCarPir,hwUserGroupCarCbs,hwUserGroupCarPbs,hwUserGroupCarInBoundCir,hwUserGroupCarInBoundPir,hwUserGroupCarInBoundCbs,hwUserGroupCarInBoundPbs in hwUserGroupEntry', 'Modify hwDot1xAccessProfileEthTrunkHandShakePeriod,userAuthenProfileAuthenFailAgingTime,userAuthenProfilePreAuthenAgingTime,userAuthenProfileAuthenFailReAuthenTimer', 'Modify hwAccessSSID,hwAccessDomain,hwAccessUserName', 'Add hwAAAChasisIPv6AddressThreshold,hwAAASlotIPv6AddressThreshold,hwAAAChasisIPv6AddressThresholdAlarm,hwAAAChasisIPv6AddressThresholdResume,hwAAASlotIPv6AddressThresholdAlarm and hwAAASlotIPv6AddressThresholdResume', 'Add userAuthenProfileAuthenFailAuthorResponseSuccess in userAuthenProfileEntry; Modify userAuthenProfilePreAuthenUserGroupName,userAuthenProfileAuthenFailAuthorUserGroupName,userAuthenProfileAuthenServerDownUserGroupName in userAuthenProfileEntry', 'Add hwAAASessionGroupUpperLimitThreshold, hwAAASessionGroupUpperLimitResume, hwAAASessionGroupLowerLimitThreshold, hwAAASessionGroupLowerLimitAlarm, hwAAASessionGroupLowerLimitResume, hwAAASessionUpperLimitThreshold, hwAAAOnlineSessoinUpperLimitAlarm, hwAAAOnlineSessoinUpperLimitResume, hwAAASessionLowerLimitThreshold, hwAAAOnlineSessoinLowerLimitAlarm, hwAAAOnlineSessoinLowerLimitResume, hwAAASlotOnlineUserNumAlarm,hwAAASlotOnlineUserNumResume',))
if mibBuilder.loadTexts: hwAaa.setLastUpdated('201506101250Z')
if mibBuilder.loadTexts: hwAaa.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwAaa.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com")
if mibBuilder.loadTexts: hwAaa.setDescription('Modify hwAccessSSID hwAccessDomain hwAccessUserName hwPortalAccessProfileDetectPeriod')
hwAAAMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1))
hwAuthenSchemeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 1), )
if mibBuilder.loadTexts: hwAuthenSchemeTable.setStatus('current')
if mibBuilder.loadTexts: hwAuthenSchemeTable.setDescription('The authentication scheme table.')
hwAuthenSchemeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 1, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwAuthenSchemeName"))
if mibBuilder.loadTexts: hwAuthenSchemeEntry.setStatus('current')
if mibBuilder.loadTexts: hwAuthenSchemeEntry.setDescription('The authentication scheme entry.')
hwAuthenSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAuthenSchemeName.setStatus('current')
if mibBuilder.loadTexts: hwAuthenSchemeName.setDescription('The authentication scheme name.')
hwAuthenMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("local", 1), ("noauth", 2), ("radius", 3), ("localRadius", 4), ("radiusLocal", 5), ("radiusNoauth", 6), ("tacacs", 7), ("tacacsLocal", 8), ("localTacacs", 9), ("tacacsNoauth", 10), ("localNoauth", 11), ("radiusTacacs", 12), ("tacacsRadius", 13), ("localRadiusNoauth", 14), ("localTacacsNoauth", 15), ("radiusLocalNoauth", 16), ("radiusTacacsNoauth", 17), ("tacacsLocalNoauth", 18), ("tacacsRadiusNoauth", 19), ("localRadiusTacacs", 20), ("radiusLocalTacacs", 21), ("localTacacsRadius", 22), ("radiusTacacsLocal", 23), ("tacacsLocalRadius", 24), ("tacacsRadiusLocal", 25), ("localRadiusTacacsNoauth", 26), ("localTacacsRadiusNoauth", 27), ("radiusLocalTacacsNoauth", 28), ("radiusTacacsLocalNoauth", 29), ("tacacsLocalRadiusNoauth", 30), ("tacacsRadiusLocalNoauth", 31), ("radiusProxy", 32)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAuthenMethod.setStatus('current')
if mibBuilder.loadTexts: hwAuthenMethod.setDescription('The authentication method.')
hwAuthenRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAuthenRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwAuthenRowStatus.setDescription('The row administration status, only supporting add or delete.')
hwAuthenFailPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAuthenFailPolicy.setStatus('current')
if mibBuilder.loadTexts: hwAuthenFailPolicy.setDescription('The authentication fail policy, online(1):keeping user online, offline(2):making user offline. ')
hwAuthenFailDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAuthenFailDomain.setStatus('current')
if mibBuilder.loadTexts: hwAuthenFailDomain.setDescription('The authentication fail domain.')
hwAcctSchemeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 2), )
if mibBuilder.loadTexts: hwAcctSchemeTable.setStatus('current')
if mibBuilder.loadTexts: hwAcctSchemeTable.setDescription('The account scheme table.')
hwAcctSchemeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 2, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwAcctSchemeName"))
if mibBuilder.loadTexts: hwAcctSchemeEntry.setStatus('current')
if mibBuilder.loadTexts: hwAcctSchemeEntry.setDescription('The account scheme entry.')
hwAcctSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAcctSchemeName.setStatus('current')
if mibBuilder.loadTexts: hwAcctSchemeName.setDescription('The account scheme name.')
hwAccMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5))).clone(namedValues=NamedValues(("noacct", 2), ("radius", 3), ("hwtacacs", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAccMethod.setStatus('current')
if mibBuilder.loadTexts: hwAccMethod.setDescription('The account method.')
hwAcctStartFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("offline", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAcctStartFail.setStatus('current')
if mibBuilder.loadTexts: hwAcctStartFail.setDescription('The account start fail to use scheme.')
hwAcctOnlineFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("offline", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAcctOnlineFail.setStatus('current')
if mibBuilder.loadTexts: hwAcctOnlineFail.setDescription('The account realties fail to use scheme.')
hwAccRealTimeInter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 2, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAccRealTimeInter.setStatus('current')
if mibBuilder.loadTexts: hwAccRealTimeInter.setDescription('The realties account interval.')
hwAcctRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAcctRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwAcctRowStatus.setDescription('The row administrate status, only supporting add or delete.')
hwAcctRealTimeIntervalUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("minute", 1), ("second", 2), ("none", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAcctRealTimeIntervalUnit.setStatus('current')
if mibBuilder.loadTexts: hwAcctRealTimeIntervalUnit.setDescription('The value of this object indicates the unit for real time accounting.')
hwDomainTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4), )
if mibBuilder.loadTexts: hwDomainTable.setStatus('current')
if mibBuilder.loadTexts: hwDomainTable.setDescription('The domain table.')
hwDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwDomainName"))
if mibBuilder.loadTexts: hwDomainEntry.setStatus('current')
if mibBuilder.loadTexts: hwDomainEntry.setDescription('The domain table entry.')
hwDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainName.setStatus('current')
if mibBuilder.loadTexts: hwDomainName.setDescription('The domain name.')
hwDomainAuthenSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDomainAuthenSchemeName.setStatus('current')
if mibBuilder.loadTexts: hwDomainAuthenSchemeName.setDescription('The authentication scheme name.')
hwDomainAcctSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDomainAcctSchemeName.setStatus('current')
if mibBuilder.loadTexts: hwDomainAcctSchemeName.setDescription('The account scheme name.')
hwDomainRadiusGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDomainRadiusGroupName.setStatus('current')
if mibBuilder.loadTexts: hwDomainRadiusGroupName.setDescription('The group name of radius group table.')
hwDomainAccessLimitNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 283648))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDomainAccessLimitNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainAccessLimitNum.setDescription('The access limit number of domain.')
hwDomainIfSrcRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainIfSrcRoute.setStatus('current')
if mibBuilder.loadTexts: hwDomainIfSrcRoute.setDescription('The route of source interface.')
hwDomainNextHopIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDomainNextHopIP.setStatus('current')
if mibBuilder.loadTexts: hwDomainNextHopIP.setDescription('The next hop of source IP address route.')
hwDomainIdleCutTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDomainIdleCutTime.setStatus('current')
if mibBuilder.loadTexts: hwDomainIdleCutTime.setDescription('The cut time of idle interval.')
hwDomainIdleCutFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 768000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDomainIdleCutFlow.setStatus('current')
if mibBuilder.loadTexts: hwDomainIdleCutFlow.setDescription('The flow of idle interval, in Kbytes/min, 0 indicates idle-cut is not performed, -1 indicates idle-cut is performed with 0 idle-rate.')
hwDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDomainRowStatus.setDescription('The row administrate status, supporting add, delete, active or inactive.')
hwDomainType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("device", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDomainType.setStatus('current')
if mibBuilder.loadTexts: hwDomainType.setDescription('The domain type.')
hwDomainServiceSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDomainServiceSchemeName.setStatus('current')
if mibBuilder.loadTexts: hwDomainServiceSchemeName.setDescription('The service scheme name.')
hwDomainIdleCutType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("inbound", 2), ("outbound", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDomainIdleCutType.setStatus('current')
if mibBuilder.loadTexts: hwDomainIdleCutType.setDescription('The type of idle-cut, default type is 1.')
hwdomainipv6nexthop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdomainipv6nexthop.setStatus('current')
if mibBuilder.loadTexts: hwdomainipv6nexthop.setDescription('The next hop of IPv6 policy route.')
hwDomainForcePushUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDomainForcePushUrl.setStatus('current')
if mibBuilder.loadTexts: hwDomainForcePushUrl.setDescription('The url to push.')
hwDomainForcePushUrlTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDomainForcePushUrlTemplate.setStatus('current')
if mibBuilder.loadTexts: hwDomainForcePushUrlTemplate.setDescription('The url-template to push.')
hwStateBlockFirstTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStateBlockFirstTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: hwStateBlockFirstTimeRangeName.setDescription('The first time-range name of domain block.')
hwStateBlockSecondTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStateBlockSecondTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: hwStateBlockSecondTimeRangeName.setDescription('The second time-range name of domain block.')
hwStateBlockThirdTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStateBlockThirdTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: hwStateBlockThirdTimeRangeName.setDescription('The third time-range name of domain block.')
hwStateBlockForthTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStateBlockForthTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: hwStateBlockForthTimeRangeName.setDescription('The forth time-range name of domain block.')
hwDomainFlowStatistic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDomainFlowStatistic.setStatus('current')
if mibBuilder.loadTexts: hwDomainFlowStatistic.setDescription('flow Statistic enable.')
hwDomainExtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5), )
if mibBuilder.loadTexts: hwDomainExtTable.setStatus('current')
if mibBuilder.loadTexts: hwDomainExtTable.setDescription('The domain extend table.')
hwDomainExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwDomainName"))
if mibBuilder.loadTexts: hwDomainExtEntry.setStatus('current')
if mibBuilder.loadTexts: hwDomainExtEntry.setDescription('The domain extend entry.')
hwDomainPPPURL = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDomainPPPURL.setStatus('current')
if mibBuilder.loadTexts: hwDomainPPPURL.setDescription('The URL of portal.')
hwIfDomainActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfDomainActive.setStatus('current')
if mibBuilder.loadTexts: hwIfDomainActive.setDescription('Whether domain is usable.')
hwPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPriority.setStatus('current')
if mibBuilder.loadTexts: hwPriority.setDescription('The priority of up user.')
hwWebServerURL = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWebServerURL.setStatus('current')
if mibBuilder.loadTexts: hwWebServerURL.setDescription('The URL of force web server.')
hwIPPoolOneName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPPoolOneName.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolOneName.setDescription('The IP pool name.')
hwIPPoolTwoName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPPoolTwoName.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolTwoName.setDescription('The IP pool name.')
hwIPPoolThreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPPoolThreeName.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolThreeName.setDescription('The IP pool name.')
hwTwoLevelAcctRadiusGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwTwoLevelAcctRadiusGroupName.setStatus('current')
if mibBuilder.loadTexts: hwTwoLevelAcctRadiusGroupName.setDescription('The radius group name.')
hwVPDNGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1000), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVPDNGroupIndex.setStatus('current')
if mibBuilder.loadTexts: hwVPDNGroupIndex.setDescription('The VPDN group name.')
hwUclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUclIndex.setStatus('current')
if mibBuilder.loadTexts: hwUclIndex.setDescription('UCL index')
hwIfPPPoeURL = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfPPPoeURL.setStatus('current')
if mibBuilder.loadTexts: hwIfPPPoeURL.setDescription('Whether support offering URL for PPP0E user.')
hwUclGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUclGroupName.setStatus('current')
if mibBuilder.loadTexts: hwUclGroupName.setDescription('The user access control group name.')
hwVpdnGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVpdnGroupName.setStatus('current')
if mibBuilder.loadTexts: hwVpdnGroupName.setDescription('The VPDN group name.')
hwDomainVrf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDomainVrf.setStatus('current')
if mibBuilder.loadTexts: hwDomainVrf.setDescription('The domain VPN instance name.')
hwDomainGre = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDomainGre.setStatus('current')
if mibBuilder.loadTexts: hwDomainGre.setDescription('The GRE group name')
hwDomainRenewIPTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDomainRenewIPTag.setStatus('current')
if mibBuilder.loadTexts: hwDomainRenewIPTag.setDescription('if reallocate IP address')
hwPortalURL = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortalURL.setStatus('current')
if mibBuilder.loadTexts: hwPortalURL.setDescription('Portal server URL for user')
hwPortalServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 20), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortalServerIP.setStatus('current')
if mibBuilder.loadTexts: hwPortalServerIP.setDescription('Portal server IP address')
hwRedirectTimesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRedirectTimesLimit.setStatus('current')
if mibBuilder.loadTexts: hwRedirectTimesLimit.setDescription('Max times to redirect ')
hwDot1xTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xTemplate.setStatus('current')
if mibBuilder.loadTexts: hwDot1xTemplate.setDescription('This object indicates the template used for the authentication of 802.1X users in a domain.')
hwWebServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 23), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWebServerIP.setStatus('current')
if mibBuilder.loadTexts: hwWebServerIP.setDescription('IPadress of force web server')
hwWebServerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWebServerMode.setStatus('current')
if mibBuilder.loadTexts: hwWebServerMode.setDescription('MODE of force web server')
hwPoolWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPoolWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: hwPoolWarningThreshold.setDescription('This object indicates the alarm threshold for the address pool bound to a domain. If the value is 255, it is invalid.')
hwTacGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTacGroupName.setStatus('current')
if mibBuilder.loadTexts: hwTacGroupName.setDescription('Domain TACACS group name')
hwServicePolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwServicePolicyName.setStatus('current')
if mibBuilder.loadTexts: hwServicePolicyName.setDescription('Domain service policy name')
hwCopsGroupSSGType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCopsGroupSSGType.setStatus('current')
if mibBuilder.loadTexts: hwCopsGroupSSGType.setDescription('Domain COPS group name')
hwDomainAuthorSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDomainAuthorSchemeName.setStatus('current')
if mibBuilder.loadTexts: hwDomainAuthorSchemeName.setDescription('Domain Author Scheme')
hwNtvUserProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNtvUserProfileName.setStatus('obsolete')
if mibBuilder.loadTexts: hwNtvUserProfileName.setDescription('Domain IPTV user profile')
hwDomainQoSProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDomainQoSProfile.setStatus('current')
if mibBuilder.loadTexts: hwDomainQoSProfile.setDescription('Domain Qos profile')
hwDomainZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDomainZone.setStatus('current')
if mibBuilder.loadTexts: hwDomainZone.setDescription('Domain FWZone')
hwIfL2tpRadiusForce = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 33), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIfL2tpRadiusForce.setStatus('current')
if mibBuilder.loadTexts: hwIfL2tpRadiusForce.setDescription('if force l2tp by radius')
hwDownPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDownPriority.setStatus('current')
if mibBuilder.loadTexts: hwDownPriority.setDescription('user down priority 0~7, trust-dscp(8), trust-8021p-inner(9), trust-8021p-outer(10), trust-exp-inner(11), trust-exp-outer(12), unchangeable(15)')
hwPPPForceAuthtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("pap", 0), ("chap", 1), ("mschapv1", 2), ("mschapv2", 3), ("none", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPPPForceAuthtype.setStatus('current')
if mibBuilder.loadTexts: hwPPPForceAuthtype.setDescription('Set force authentication type for PPP ')
hwDnsIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 36), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDnsIPAddress.setStatus('current')
if mibBuilder.loadTexts: hwDnsIPAddress.setDescription('IPadress of DNS')
hwAdminUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAdminUserPriority.setStatus('current')
if mibBuilder.loadTexts: hwAdminUserPriority.setDescription('Priority of admin user. If the value is -1, it indicates that there is no authority.')
hwShapingTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwShapingTemplate.setStatus('current')
if mibBuilder.loadTexts: hwShapingTemplate.setDescription('Shaping template')
hwDomainDPIPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDomainDPIPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwDomainDPIPolicyName.setDescription('DPI policy name')
hwCopsGroupSIGType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCopsGroupSIGType.setStatus('current')
if mibBuilder.loadTexts: hwCopsGroupSIGType.setDescription('Domain COPS group name')
hwCopsGroupCIPNType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCopsGroupCIPNType.setStatus('current')
if mibBuilder.loadTexts: hwCopsGroupCIPNType.setDescription('Domain COPS group name')
hwPCReduceCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPCReduceCir.setStatus('current')
if mibBuilder.loadTexts: hwPCReduceCir.setDescription('reduce cir')
hwValAcctType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("default", 1), ("radius", 2), ("cops", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwValAcctType.setStatus('current')
if mibBuilder.loadTexts: hwValAcctType.setDescription(' value added service accounting type')
hwValRadiusServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwValRadiusServer.setStatus('current')
if mibBuilder.loadTexts: hwValRadiusServer.setDescription(' radius server')
hwValCopsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwValCopsServer.setStatus('current')
if mibBuilder.loadTexts: hwValCopsServer.setDescription('cops server')
hwPCReducePir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPCReducePir.setStatus('current')
if mibBuilder.loadTexts: hwPCReducePir.setDescription('reduce PIR')
hwDomainInboundL2tpQoSProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDomainInboundL2tpQoSProfile.setStatus('current')
if mibBuilder.loadTexts: hwDomainInboundL2tpQoSProfile.setDescription('Configure inbound L2TP QOS Profile ')
hwDomainOutboundL2tpQoSProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDomainOutboundL2tpQoSProfile.setStatus('current')
if mibBuilder.loadTexts: hwDomainOutboundL2tpQoSProfile.setDescription('Configure outbound L2TP QOS Profile ')
hwIfMulticastForward = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 50), TruthValue().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMulticastForward.setStatus('current')
if mibBuilder.loadTexts: hwIfMulticastForward.setDescription('If multicast forward ')
hwMulticastVirtualSchedulRezCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(128, 1000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMulticastVirtualSchedulRezCir.setStatus('current')
if mibBuilder.loadTexts: hwMulticastVirtualSchedulRezCir.setDescription('Multicast virtual schedule reserve Cir ')
hwMulticastVirtualSchedulRezPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(128, 1000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMulticastVirtualSchedulRezPir.setStatus('current')
if mibBuilder.loadTexts: hwMulticastVirtualSchedulRezPir.setDescription('Multicast virtual schedule reserve PIR ')
hwMaxMulticastListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMaxMulticastListNum.setStatus('current')
if mibBuilder.loadTexts: hwMaxMulticastListNum.setDescription('Max list num ')
hwMultiProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMultiProfile.setStatus('current')
if mibBuilder.loadTexts: hwMultiProfile.setDescription('Multicast profile ')
hwDomainServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("stb", 0), ("hsi", 1))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDomainServiceType.setStatus('current')
if mibBuilder.loadTexts: hwDomainServiceType.setDescription('Service type,0 for HSI,1 for not HSI. ')
hwWebServerUrlParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 56), TruthValue().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWebServerUrlParameter.setStatus('current')
if mibBuilder.loadTexts: hwWebServerUrlParameter.setDescription('If Web Server URL Parameter is enabling ')
hwWebServerRedirectKeyMscgName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWebServerRedirectKeyMscgName.setStatus('current')
if mibBuilder.loadTexts: hwWebServerRedirectKeyMscgName.setDescription('Configure Web Server Redirect Key MscgName ')
hwPoratalServerUrlParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 58), TruthValue().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPoratalServerUrlParameter.setStatus('current')
if mibBuilder.loadTexts: hwPoratalServerUrlParameter.setDescription('If Portal Server UrlParameter is enabling ')
hwPoratalServerFirstUrlKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 59), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPoratalServerFirstUrlKeyName.setStatus('current')
if mibBuilder.loadTexts: hwPoratalServerFirstUrlKeyName.setDescription('The Portal Server Rollback first URL key-name ')
hwPoratalServerFirstUrlKeyDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 60), TruthValue().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPoratalServerFirstUrlKeyDefaultName.setStatus('current')
if mibBuilder.loadTexts: hwPoratalServerFirstUrlKeyDefaultName.setDescription('If the Portal Server Rollback first URL default name ')
hwDnsSecondIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 61), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDnsSecondIPAddress.setStatus('current')
if mibBuilder.loadTexts: hwDnsSecondIPAddress.setDescription('The Second IP address of DNS')
hwDomainIgmpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 62), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDomainIgmpEnable.setStatus('current')
if mibBuilder.loadTexts: hwDomainIgmpEnable.setDescription('IGMP ENABLE')
hwIPv6PoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 63), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PoolName.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolName.setDescription('The name of IPv6 address pool. The format to set value is : operator+pool index list. operator: 1-Add, 2-Delete')
hwIPv6PrefixshareFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shared", 1), ("unshared", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PrefixshareFlag.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PrefixshareFlag.setDescription('The flag indicating whether the prefix is shared.')
hwUserBasicServiceIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwUserBasicServiceIPType.setStatus('current')
if mibBuilder.loadTexts: hwUserBasicServiceIPType.setDescription("The basic service type. UCHAR[0]-IPv4, UCHAR[1]-IPv6, UCHAR[2]-IPv6-PD. '0'-without such basic service, '1'-with such basic service.")
hwPriDnsIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 66), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPriDnsIPv6Address.setStatus('current')
if mibBuilder.loadTexts: hwPriDnsIPv6Address.setDescription('The IPv6 primary DNS address.')
hwSecDnsIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 67), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSecDnsIPv6Address.setStatus('current')
if mibBuilder.loadTexts: hwSecDnsIPv6Address.setDescription('The IPv6 secondary DNS address.')
hwDualStackAccountingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("seperate", 1), ("identical", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDualStackAccountingType.setStatus('current')
if mibBuilder.loadTexts: hwDualStackAccountingType.setDescription('The flag whether to accouting stream separately for dual user.')
hwIPv6PoolWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PoolWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolWarningThreshold.setDescription('The IPv6 warning threshold. Default value is 0, indicating no warning.')
hwIPv6CPWaitDHCPv6Delay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6CPWaitDHCPv6Delay.setStatus('current')
if mibBuilder.loadTexts: hwIPv6CPWaitDHCPv6Delay.setDescription('The time(seconds) of waiting for DHCPv6 packet after IPv6CP. Default value is 60 seconds')
hwIPv6ManagedAddressFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ndra", 1), ("dhcpv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6ManagedAddressFlag.setStatus('current')
if mibBuilder.loadTexts: hwIPv6ManagedAddressFlag.setDescription('The address configuration method for PPP and L2TP user.')
hwIPv6CPIFIDAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 72), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6CPIFIDAvailable.setStatus('current')
if mibBuilder.loadTexts: hwIPv6CPIFIDAvailable.setDescription('The flag indicating whether PPP and L2TP user will use the interface-id of ipv6cp negotiation in DHCPv6 address allocation.')
hwIPv6OtherFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ndra", 1), ("dhcpv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6OtherFlag.setStatus('current')
if mibBuilder.loadTexts: hwIPv6OtherFlag.setDescription('The method PPP and L2TP user get configuration parameters.')
hwIPv6CPAssignIFID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 74), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6CPAssignIFID.setStatus('current')
if mibBuilder.loadTexts: hwIPv6CPAssignIFID.setDescription('The flag indicating whether BRAS assign interface-id on IPv6CP negotiation.')
hwMultiIPv6ProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 75), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMultiIPv6ProfileName.setStatus('current')
if mibBuilder.loadTexts: hwMultiIPv6ProfileName.setDescription('The name of multicast profile.')
hwWebServerURLSlave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 76), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWebServerURLSlave.setStatus('current')
if mibBuilder.loadTexts: hwWebServerURLSlave.setDescription('The URL of slave force web server.')
hwWebServerIPSlave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 77), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWebServerIPSlave.setStatus('current')
if mibBuilder.loadTexts: hwWebServerIPSlave.setDescription('IPadress of slave force web server.')
hwBindAuthWebIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 78), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBindAuthWebIP.setStatus('current')
if mibBuilder.loadTexts: hwBindAuthWebIP.setDescription('IPadress of bind authentication web server.')
hwBindAuthWebVrf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBindAuthWebVrf.setStatus('current')
if mibBuilder.loadTexts: hwBindAuthWebVrf.setDescription('The VPN instance name of bind authentication web server.')
hwBindAuthWebIPSlave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 80), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBindAuthWebIPSlave.setStatus('current')
if mibBuilder.loadTexts: hwBindAuthWebIPSlave.setDescription('IPadress of slave bind authentication web server.')
hwBindAuthWebVrfSlave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 81), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBindAuthWebVrfSlave.setStatus('current')
if mibBuilder.loadTexts: hwBindAuthWebVrfSlave.setDescription('The VPN instance name of slave bind authentication web server.')
hwExtVpdnGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 82), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwExtVpdnGroupName.setStatus('current')
if mibBuilder.loadTexts: hwExtVpdnGroupName.setDescription('The extended VPDN group name.')
hwDomainUserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 83), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDomainUserGroupName.setStatus('current')
if mibBuilder.loadTexts: hwDomainUserGroupName.setDescription('The user group name.')
hwAFTRName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 84), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAFTRName.setStatus('current')
if mibBuilder.loadTexts: hwAFTRName.setDescription('The AFTR name.')
hwDomainDhcpOpt64SepAndSeg = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 85), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDomainDhcpOpt64SepAndSeg.setStatus('current')
if mibBuilder.loadTexts: hwDomainDhcpOpt64SepAndSeg.setDescription('Option64 parse separator and segment number.')
hwDomainDhcpServerAck = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 5, 1, 86), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDomainDhcpServerAck.setStatus('current')
if mibBuilder.loadTexts: hwDomainDhcpServerAck.setDescription("Whether to deal dhcp server's ack packet when user online.")
hwDomainStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6), )
if mibBuilder.loadTexts: hwDomainStatTable.setStatus('current')
if mibBuilder.loadTexts: hwDomainStatTable.setDescription('Domain Stat Table ')
hwDomainStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwDomainName"))
if mibBuilder.loadTexts: hwDomainStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwDomainStatEntry.setDescription('Domain Stat Entry')
hwDomainAccessedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainAccessedNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainAccessedNum.setDescription('Accessed Num')
hwDomainOnlineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainOnlineNum.setDescription('Online num')
hwDomainOnlinePPPUser = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainOnlinePPPUser.setStatus('current')
if mibBuilder.loadTexts: hwDomainOnlinePPPUser.setDescription('Online PPP user num')
hwDomainFlowDnByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainFlowDnByte.setStatus('current')
if mibBuilder.loadTexts: hwDomainFlowDnByte.setDescription('Flow Down Byte')
hwDomainFlowDnPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainFlowDnPkt.setStatus('current')
if mibBuilder.loadTexts: hwDomainFlowDnPkt.setDescription('Flow Down Packet')
hwDomainFlowUpByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainFlowUpByte.setStatus('current')
if mibBuilder.loadTexts: hwDomainFlowUpByte.setDescription('Flow Up Byte')
hwDomainFlowUpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainFlowUpPkt.setStatus('current')
if mibBuilder.loadTexts: hwDomainFlowUpPkt.setDescription('Flow Up Packet')
hwDomainIPTotalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainIPTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainIPTotalNum.setDescription('Total IP addresses number configured in this domain')
hwDomainIPUsedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainIPUsedNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainIPUsedNum.setDescription('Used IP addresses number')
hwDomainIPConflictNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainIPConflictNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainIPConflictNum.setDescription('Conflicted IP addresses number')
hwDomainIPExcludeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainIPExcludeNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainIPExcludeNum.setDescription('Excluded IP addresses number')
hwDomainIPIdleNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainIPIdleNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainIPIdleNum.setDescription('Idle IP addresses number')
hwDomainIPUsedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainIPUsedPercent.setStatus('current')
if mibBuilder.loadTexts: hwDomainIPUsedPercent.setDescription('IP address used percent')
hwDomainPPPoENum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainPPPoENum.setStatus('current')
if mibBuilder.loadTexts: hwDomainPPPoENum.setDescription('PPPoE user number')
hwDomainAuthenRequestsRcvNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainAuthenRequestsRcvNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainAuthenRequestsRcvNum.setDescription('hwDomainAuthenRequestsRcvNum')
hwDomainAuthenAcceptsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainAuthenAcceptsNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainAuthenAcceptsNum.setDescription('hwDomainAuthenAcceptsNum')
hwDomainAuthenRejectsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainAuthenRejectsNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainAuthenRejectsNum.setDescription('hwDomainAuthenRejectsNum')
hwDomainAcctRequestsRcvNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainAcctRequestsRcvNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainAcctRequestsRcvNum.setDescription('hwDomainAcctRequestsRcvNum')
hwDomainAcctRspSuccessNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainAcctRspSuccessNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainAcctRspSuccessNum.setDescription('hwDomainAcctRspSuccessNum')
hwDomainAcctRspFailuresNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainAcctRspFailuresNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainAcctRspFailuresNum.setDescription('hwDomainAcctRspFailuresNum')
hwDomainIPv6AddressTotalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainIPv6AddressTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainIPv6AddressTotalNum.setDescription('The total IPv6 address number of domain.')
hwDomainIPv6AddressUsedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainIPv6AddressUsedNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainIPv6AddressUsedNum.setDescription('The used IPv6 address number of domain.')
hwDomainIPv6AddressFreeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainIPv6AddressFreeNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainIPv6AddressFreeNum.setDescription('The free IPv6 address number of domain.')
hwDomainIPv6AddressConflictNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainIPv6AddressConflictNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainIPv6AddressConflictNum.setDescription('The conflict IPv6 address number of domain.')
hwDomainIPv6AddressExcludeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainIPv6AddressExcludeNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainIPv6AddressExcludeNum.setDescription('The excluded IPv6 address number of domain.')
hwDomainIPv6AddressUsedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainIPv6AddressUsedPercent.setStatus('current')
if mibBuilder.loadTexts: hwDomainIPv6AddressUsedPercent.setDescription('The percent of used IPv6 addressof domain.')
hwDomainNDRAPrefixTotalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainNDRAPrefixTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainNDRAPrefixTotalNum.setDescription('The total NDRA prefix number of domain.')
hwDomainNDRAPrefixUsedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainNDRAPrefixUsedNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainNDRAPrefixUsedNum.setDescription('The used NDRA prefix number of domain.')
hwDomainNDRAPrefixFreeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainNDRAPrefixFreeNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainNDRAPrefixFreeNum.setDescription('The free NDRA prefix number of domain.')
hwDomainNDRAPrefixConflictNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainNDRAPrefixConflictNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainNDRAPrefixConflictNum.setDescription('The conflict NDRA prefix number of domain.')
hwDomainNDRAPrefixExcludeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainNDRAPrefixExcludeNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainNDRAPrefixExcludeNum.setDescription('The excluded NDRA prefix number of domain.')
hwDomainNDRAPrefixUsedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainNDRAPrefixUsedPercent.setStatus('current')
if mibBuilder.loadTexts: hwDomainNDRAPrefixUsedPercent.setDescription('The percent of used IPv6 NDRA prefix of domain.')
hwDomainPDPrefixTotalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainPDPrefixTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainPDPrefixTotalNum.setDescription('The total PD prefix number of domain.')
hwDomainPDPrefixUsedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainPDPrefixUsedNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainPDPrefixUsedNum.setDescription('The used PD prefix number of domain.')
hwDomainPDPrefixFreeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainPDPrefixFreeNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainPDPrefixFreeNum.setDescription('The free PD prefix number of domain.')
hwDomainPDPrefixConflictNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainPDPrefixConflictNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainPDPrefixConflictNum.setDescription('The conflict PD prefix number of domain.')
hwDomainPDPrefixExcludeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainPDPrefixExcludeNum.setStatus('current')
if mibBuilder.loadTexts: hwDomainPDPrefixExcludeNum.setDescription('The excluded PD prefix number of domain.')
hwDomainPDPrefixUsedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainPDPrefixUsedPercent.setStatus('current')
if mibBuilder.loadTexts: hwDomainPDPrefixUsedPercent.setDescription('The percent of used IPv6 PD prefix of domain.')
hwDomainIPv6FlowDnByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainIPv6FlowDnByte.setStatus('current')
if mibBuilder.loadTexts: hwDomainIPv6FlowDnByte.setDescription('The IPv6 flow down byte in a domain.')
hwDomainIPv6FlowDnPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainIPv6FlowDnPkt.setStatus('current')
if mibBuilder.loadTexts: hwDomainIPv6FlowDnPkt.setDescription('The IPv6 flow down packet in a domain.')
hwDomainIPv6FlowUpByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainIPv6FlowUpByte.setStatus('current')
if mibBuilder.loadTexts: hwDomainIPv6FlowUpByte.setDescription('The IPv6 flow up byte in a domain.')
hwDomainIPv6FlowUpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 6, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainIPv6FlowUpPkt.setStatus('current')
if mibBuilder.loadTexts: hwDomainIPv6FlowUpPkt.setDescription('The IPv6 flow up packet in a domain.')
hwLocalUserTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 10), )
if mibBuilder.loadTexts: hwLocalUserTable.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserTable.setDescription('Local user table')
hwLocalUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 10, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwLocalUserName"))
if mibBuilder.loadTexts: hwLocalUserEntry.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserEntry.setDescription('Local user Entry')
hwLocalUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLocalUserName.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserName.setDescription('Local user name')
hwLocalUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLocalUserPassword.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserPassword.setDescription("local user's password")
hwLocalUserAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLocalUserAccessType.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserAccessType.setDescription("Local user's type 0xFFFFFFFF all 0x00000001 PPP 0x00000002 VLAN WEB 0x00000004 VLAN, 0x00000010 CABLE MODEM 0x00000020 802.1X, 0x00000040 telnet, 0x00000080 terminals 0x00000100 ftp, 0x00000200 SSH, 0x00000400 x25pa")
hwLocalUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLocalUserPriority.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserPriority.setDescription("Local user's priority ")
hwftpdirction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwftpdirction.setStatus('current')
if mibBuilder.loadTexts: hwftpdirction.setDescription('ftp directory')
hwQosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQosProfileName.setStatus('current')
if mibBuilder.loadTexts: hwQosProfileName.setDescription('qos profile')
hwLocalUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 10, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLocalUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserRowStatus.setDescription('row admin status')
hwLocalUserIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 10, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLocalUserIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserIpAddress.setDescription('user IP address')
hwLocalUserVpnInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 10, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLocalUserVpnInstance.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserVpnInstance.setDescription('VPN Instance name')
hwLocalUserAccessLimitNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 10, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLocalUserAccessLimitNum.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserAccessLimitNum.setDescription('The maximum number of access limit')
hwLocalUserPasswordLifetimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 10, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLocalUserPasswordLifetimeMin.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserPasswordLifetimeMin.setDescription("The minimum seconds of local user's password")
hwLocalUserPasswordLifetimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 10, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLocalUserPasswordLifetimeMax.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserPasswordLifetimeMax.setDescription("The maximum days of local user's password")
hwLocalUserIfAllowWeakPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 10, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notallow", 1), ("allow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLocalUserIfAllowWeakPassword.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserIfAllowWeakPassword.setDescription('Whether to allow setting weak password. The default value is 1. It is recommended that the password consist of at least 2 types of characters, including lowercase letters, uppercase letters, numerals and special characters.')
hwLocalUserPasswordSetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 10, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLocalUserPasswordSetTime.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserPasswordSetTime.setDescription('Local user password set time.')
hwLocalUserPasswordExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 10, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLocalUserPasswordExpireTime.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserPasswordExpireTime.setDescription('Local user password expire time.')
hwLocalUserPasswordIsExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notExpired", 0), ("expired", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLocalUserPasswordIsExpired.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserPasswordIsExpired.setDescription('Local user password is expired.')
hwLocalUserPasswordIsOrginal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notOrginal", 0), ("orginal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLocalUserPasswordIsOrginal.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserPasswordIsOrginal.setDescription('Local user password is orginal.')
hwLocalUserExtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 11), )
if mibBuilder.loadTexts: hwLocalUserExtTable.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserExtTable.setDescription('local user extend table')
hwLocalUserExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 11, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwLocalUserName"))
if mibBuilder.loadTexts: hwLocalUserExtEntry.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserExtEntry.setDescription(" Local user table is used to save the relevant information of the local user. The index item is node hwLocalUserName, which can only be entered during the creation, and can not be modified thereafter. When its access number is 0, it can not be deleted. Operation constraint description: 1. The present user online is not allowed to be deleted. 2. When adding new record, the username must contain a field name. The format of username is 'user@domain' ")
hwLocalUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("block", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLocalUserState.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserState.setDescription('user status')
hwLocalUserNoCallBackVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 11, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLocalUserNoCallBackVerify.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserNoCallBackVerify.setDescription('if verify for callback')
hwLocalUserCallBackDialStr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLocalUserCallBackDialStr.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserCallBackDialStr.setDescription('call back number')
hwLocalUserBlockFailTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLocalUserBlockFailTimes.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserBlockFailTimes.setDescription('Blocking state, set the number of requests to allow the user authentication error. and the value of this object is invalid, 0 is displayed.')
hwLocalUserBlockInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLocalUserBlockInterval.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserBlockInterval.setDescription('Blocking state, set the user authentication request to allow time between blocking,unit:minute. and the value of this object is invalid, 0 is displayed.')
hwLocalUserUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 11, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLocalUserUserGroup.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserUserGroup.setDescription('Local user group')
hwLocalUserDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 11, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLocalUserDeviceType.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserDeviceType.setDescription('Access user device type')
hwLocalUserExpireDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 11, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLocalUserExpireDate.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserExpireDate.setDescription('The expiration date of a local account')
hwLocalUserIdleTimeoutSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLocalUserIdleTimeoutSecond.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserIdleTimeoutSecond.setDescription('The timeout period for disconnection of the user')
hwLocalUserTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 11, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLocalUserTimeRange.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserTimeRange.setDescription('The time-range of user')
hwAAASetting = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13))
hwAAASettingEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1))
hwRoamChar = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRoamChar.setStatus('current')
if mibBuilder.loadTexts: hwRoamChar.setDescription("Roam char, include '/',':','*','\\','<','>','|' ")
hwGlobalControl = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwGlobalControl.setStatus('current')
if mibBuilder.loadTexts: hwGlobalControl.setDescription('If use default configuration. ')
hwSystemRecord = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSystemRecord.setStatus('current')
if mibBuilder.loadTexts: hwSystemRecord.setDescription('System record')
hwOutboundRecord = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwOutboundRecord.setStatus('current')
if mibBuilder.loadTexts: hwOutboundRecord.setDescription('outbound record')
hwCmdRecord = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCmdRecord.setStatus('current')
if mibBuilder.loadTexts: hwCmdRecord.setDescription('command record')
hwPPPUserOfflineStandardize = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPPPUserOfflineStandardize.setStatus('current')
if mibBuilder.loadTexts: hwPPPUserOfflineStandardize.setDescription(" This object indicates whether to report the standard cause of user logout to the RADIUS server when the user is abnormally logged out due to 'ppp-echo-fail'. ")
hwDomainNameParseDirection = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("lefttoright", 0), ("righttoleft", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDomainNameParseDirection.setStatus('current')
if mibBuilder.loadTexts: hwDomainNameParseDirection.setDescription(' This object indicates the domain name resolution sequence: lefttoright(0), righttoleft(1) ')
hwDomainNameLocation = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("beforedelimiter", 0), ("afterdelimiter", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDomainNameLocation.setStatus('current')
if mibBuilder.loadTexts: hwDomainNameLocation.setDescription(' This object indicates the position of the domain name: beforedelimiter(0), afterdelimiter(1) ')
hwAccessSpeedNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAccessSpeedNumber.setStatus('current')
if mibBuilder.loadTexts: hwAccessSpeedNumber.setDescription(' Access Speed Number ')
hwAccessSpeedPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAccessSpeedPeriod.setStatus('current')
if mibBuilder.loadTexts: hwAccessSpeedPeriod.setDescription(' Access Speed Period ')
hwRealmNameChar = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRealmNameChar.setStatus('current')
if mibBuilder.loadTexts: hwRealmNameChar.setDescription(" Realm-name-delimiter. include @,|,:,',<,>,/,\\,% ")
hwRealmParseDirection = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("lefttoright", 0), ("righttoleft", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRealmParseDirection.setStatus('current')
if mibBuilder.loadTexts: hwRealmParseDirection.setDescription(' lefttoright(0), righttoleft(1) .default is 0. ')
hwIPOXpassword = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPOXpassword.setStatus('current')
if mibBuilder.loadTexts: hwIPOXpassword.setDescription(" IPOX user's password ")
hwAccessDelayTransitionStep = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262144))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAccessDelayTransitionStep.setStatus('current')
if mibBuilder.loadTexts: hwAccessDelayTransitionStep.setDescription('Access relay step, ')
hwAccessDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2550))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAccessDelayTime.setStatus('current')
if mibBuilder.loadTexts: hwAccessDelayTime.setDescription('Maximum access delay time, ')
hwAccessDelayMinTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2550))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAccessDelayMinTime.setStatus('current')
if mibBuilder.loadTexts: hwAccessDelayMinTime.setDescription('Minimum access delay time, ')
hwParsePriority = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("domainfirst", 0), ("realmfirst", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwParsePriority.setStatus('current')
if mibBuilder.loadTexts: hwParsePriority.setDescription('Parse priority ,default is 0 ')
hwRealmNameLocation = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("beforedelimiter", 0), ("afterdelimiter", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRealmNameLocation.setStatus('current')
if mibBuilder.loadTexts: hwRealmNameLocation.setDescription(' beforedelimiter(0), afterdelimiter(1).default is 0. ')
hwIPOXUsernameOption82 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("first", 1), ("second", 2), ("third", 3), ("fourth", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPOXUsernameOption82.setStatus('current')
if mibBuilder.loadTexts: hwIPOXUsernameOption82.setDescription('IPOX user name generate type, default is 0. ')
hwIPOXUsernameIP = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("first", 1), ("second", 2), ("third", 3), ("fourth", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPOXUsernameIP.setStatus('current')
if mibBuilder.loadTexts: hwIPOXUsernameIP.setDescription('IPOX user name generate type, default is 0. ')
hwIPOXUsernameSysname = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("first", 1), ("second", 2), ("third", 3), ("fourth", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPOXUsernameSysname.setStatus('current')
if mibBuilder.loadTexts: hwIPOXUsernameSysname.setDescription('IPOX user name generate type, default is 0. ')
hwIPOXUsernameMAC = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("first", 1), ("second", 2), ("third", 3), ("fourth", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPOXUsernameMAC.setStatus('current')
if mibBuilder.loadTexts: hwIPOXUsernameMAC.setDescription('IPOX user name generate type ,default is 0. ')
hwDefaultUserName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDefaultUserName.setStatus('current')
if mibBuilder.loadTexts: hwDefaultUserName.setDescription('Configure default user name type')
hwNasSerial = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwNasSerial.setStatus('current')
if mibBuilder.loadTexts: hwNasSerial.setDescription('Configure NAS serial number')
hwAAAPasswordRepeatNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAAAPasswordRepeatNumber.setStatus('current')
if mibBuilder.loadTexts: hwAAAPasswordRepeatNumber.setDescription("Check to times of password can't repeat")
hwAAAPasswordRemindDay = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAAAPasswordRemindDay.setStatus('current')
if mibBuilder.loadTexts: hwAAAPasswordRemindDay.setDescription('Remind days before password expired')
hwOnlineUserNumLowerLimitThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 99), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwOnlineUserNumLowerLimitThreshold.setStatus('current')
if mibBuilder.loadTexts: hwOnlineUserNumLowerLimitThreshold.setDescription('The online user lower limit warning threshold')
hwOnlineUserNumUpperLimitThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwOnlineUserNumUpperLimitThreshold.setStatus('current')
if mibBuilder.loadTexts: hwOnlineUserNumUpperLimitThreshold.setDescription('The online user upper limit warning threshold')
hwTriggerLoose = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 31), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1440), ValueRangeConstraint(4294967295, 4294967295), )).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwTriggerLoose.setStatus('current')
if mibBuilder.loadTexts: hwTriggerLoose.setDescription('Access trigger loose time')
hwOfflineSpeedNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwOfflineSpeedNumber.setStatus('current')
if mibBuilder.loadTexts: hwOfflineSpeedNumber.setDescription(' Offline Speed Number ')
hwIPOXpasswordKeyType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("simple", 1), ("cipher", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPOXpasswordKeyType.setStatus('current')
if mibBuilder.loadTexts: hwIPOXpasswordKeyType.setDescription("IPOX user's password type.")
hwReauthorizeEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwReauthorizeEnable.setStatus('current')
if mibBuilder.loadTexts: hwReauthorizeEnable.setDescription(" This object indicates whether to allow administrator to modify user's user-group by command line : enable(1), disable(2) ")
hwDomainNameDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDomainNameDelimiter.setStatus('current')
if mibBuilder.loadTexts: hwDomainNameDelimiter.setDescription(" Domain-name-delimiter. include \\ / : < > | @ ' % It can not be same with hwDomainNameSecurityDelimiter. ")
hwDomainNameSecurityDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDomainNameSecurityDelimiter.setStatus('current')
if mibBuilder.loadTexts: hwDomainNameSecurityDelimiter.setDescription(" Domain-name-security-delimiter. include \\ / : < > | @ ' % It can not be same with hwDomainNameDelimiter. ")
hwGlobalAuthEventAuthFailResponseFail = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwGlobalAuthEventAuthFailResponseFail.setStatus('current')
if mibBuilder.loadTexts: hwGlobalAuthEventAuthFailResponseFail.setDescription('Description.')
hwGlobalAuthEventAuthFailVlan = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwGlobalAuthEventAuthFailVlan.setStatus('current')
if mibBuilder.loadTexts: hwGlobalAuthEventAuthFailVlan.setDescription('Description.')
hwGlobalAuthEventAuthenServerDownResponseFail = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwGlobalAuthEventAuthenServerDownResponseFail.setStatus('current')
if mibBuilder.loadTexts: hwGlobalAuthEventAuthenServerDownResponseFail.setDescription('Description.')
hwGlobalAuthEventAuthenServerDownVlan = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwGlobalAuthEventAuthenServerDownVlan.setStatus('current')
if mibBuilder.loadTexts: hwGlobalAuthEventAuthenServerDownVlan.setDescription('Description.')
hwGlobalAuthEventClientNoResponseVlan = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwGlobalAuthEventClientNoResponseVlan.setStatus('current')
if mibBuilder.loadTexts: hwGlobalAuthEventClientNoResponseVlan.setDescription('Description.')
hwGlobalAuthEventPreAuthVlan = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwGlobalAuthEventPreAuthVlan.setStatus('current')
if mibBuilder.loadTexts: hwGlobalAuthEventPreAuthVlan.setDescription('Description.')
hwGlobalAuthEventAuthFailUserGroup = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 43), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwGlobalAuthEventAuthFailUserGroup.setStatus('current')
if mibBuilder.loadTexts: hwGlobalAuthEventAuthFailUserGroup.setDescription('Description.')
hwGlobalAuthEventAuthenServerDownUserGroup = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 44), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwGlobalAuthEventAuthenServerDownUserGroup.setStatus('current')
if mibBuilder.loadTexts: hwGlobalAuthEventAuthenServerDownUserGroup.setDescription('Description.')
hwGlobalAuthEventClientNoResponseUserGroup = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwGlobalAuthEventClientNoResponseUserGroup.setStatus('current')
if mibBuilder.loadTexts: hwGlobalAuthEventClientNoResponseUserGroup.setDescription('Description.')
hwGlobalAuthEventPreAuthUserGroup = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 46), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwGlobalAuthEventPreAuthUserGroup.setStatus('current')
if mibBuilder.loadTexts: hwGlobalAuthEventPreAuthUserGroup.setDescription('Description.')
hwAuthorModifyMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("overlay", 0), ("modify", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAuthorModifyMode.setStatus('current')
if mibBuilder.loadTexts: hwAuthorModifyMode.setDescription(' The update mode for user authorization information: overlay(0), modify(1) ')
hwLocalRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLocalRetryInterval.setStatus('current')
if mibBuilder.loadTexts: hwLocalRetryInterval.setDescription(' The retry interval of a local account. ')
hwLocalRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLocalRetryTime.setStatus('current')
if mibBuilder.loadTexts: hwLocalRetryTime.setDescription(' The consecutive authentication failure count. ')
hwLocalBlockTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLocalBlockTime.setStatus('current')
if mibBuilder.loadTexts: hwLocalBlockTime.setDescription(' The local account locking duration. ')
hwRemoteRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRemoteRetryInterval.setStatus('current')
if mibBuilder.loadTexts: hwRemoteRetryInterval.setDescription(' The authentication retry interval. ')
hwRemoteRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRemoteRetryTime.setStatus('current')
if mibBuilder.loadTexts: hwRemoteRetryTime.setDescription(' The maximum number of consecutive authentication failures. ')
hwRemoteBlockTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRemoteBlockTime.setStatus('current')
if mibBuilder.loadTexts: hwRemoteBlockTime.setDescription(' The account locking period. ')
hwBlockDisable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 13, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("localuser", 0), ("remoteuser", 1), ("localremoteuser", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBlockDisable.setStatus('current')
if mibBuilder.loadTexts: hwBlockDisable.setDescription(' Disable the account locking function for user: localuser(0), remoteuser(1), localremoteuser(2) ')
hwAAAStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14))
hwAAAStatEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1))
hwTotalOnlineNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalOnlineNum.setDescription('the number of access all users')
hwTotalPPPoeOnlineNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalPPPoeOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalPPPoeOnlineNum.setDescription('the number of access all PPPoE users')
hwTotalPPPoAOnlineNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalPPPoAOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalPPPoAOnlineNum.setDescription('the number of access all PPPoA users')
hwTotalftpOnlineNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalftpOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalftpOnlineNum.setDescription('the number of access all ftp user')
hwTotalsshOnlineNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalsshOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalsshOnlineNum.setDescription('the number of access all SSH users')
hwTotaltelnetOnlineNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotaltelnetOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwTotaltelnetOnlineNum.setDescription('the number of access all telnet users')
hwTotalVLANOnlineNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalVLANOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalVLANOnlineNum.setDescription('the number of access all VLAN users')
hwHistoricMaxOnlineNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwHistoricMaxOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwHistoricMaxOnlineNum.setDescription('the number of historic max online users')
hwResetHistoricMaxOnlineNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("reset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwResetHistoricMaxOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwResetHistoricMaxOnlineNum.setDescription('reset the number of historic max online users')
hwResetOfflineReasonStatistic = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("reset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwResetOfflineReasonStatistic.setStatus('current')
if mibBuilder.loadTexts: hwResetOfflineReasonStatistic.setDescription('reset the number of offline reason')
hwResetOnlineFailReasonStatistic = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("reset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwResetOnlineFailReasonStatistic.setStatus('current')
if mibBuilder.loadTexts: hwResetOnlineFailReasonStatistic.setDescription('reset the number of online fail reason statistic')
hwMaxPPPoeOnlineNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMaxPPPoeOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwMaxPPPoeOnlineNum.setDescription('the max number of access PPPoE users')
hwTotalPortalServerUserNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalPortalServerUserNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalPortalServerUserNum.setDescription('the number of access all Portal users')
hwMaxPortalServerUserNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMaxPortalServerUserNum.setStatus('current')
if mibBuilder.loadTexts: hwMaxPortalServerUserNum.setDescription('the max number of access Portal users')
hwTotalIPv4OnlineNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalIPv4OnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalIPv4OnlineNum.setDescription('The number of access all IPv4 users')
hwTotalIPv6OnlineNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalIPv6OnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalIPv6OnlineNum.setDescription('The number of access all IPv6 users')
hwTotalDualStackOnlineNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalDualStackOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalDualStackOnlineNum.setDescription('The number of access all dual stack users')
hwTotalIPv4FlowDnByte = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalIPv4FlowDnByte.setStatus('current')
if mibBuilder.loadTexts: hwTotalIPv4FlowDnByte.setDescription('Total IPv4 flow down byte')
hwTotalIPv4FlowDnPkt = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalIPv4FlowDnPkt.setStatus('current')
if mibBuilder.loadTexts: hwTotalIPv4FlowDnPkt.setDescription('Total IPv4 flow down packe')
hwTotalIPv4FlowUpByte = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalIPv4FlowUpByte.setStatus('current')
if mibBuilder.loadTexts: hwTotalIPv4FlowUpByte.setDescription('Total IPv4 flow up byte')
hwTotalIPv4FlowUpPkt = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalIPv4FlowUpPkt.setStatus('current')
if mibBuilder.loadTexts: hwTotalIPv4FlowUpPkt.setDescription('Total IPv4 flow up packet')
hwTotalIPv6FlowDnByte = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalIPv6FlowDnByte.setStatus('current')
if mibBuilder.loadTexts: hwTotalIPv6FlowDnByte.setDescription('Total IPv6 flow down byte')
hwTotalIPv6FlowDnPkt = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalIPv6FlowDnPkt.setStatus('current')
if mibBuilder.loadTexts: hwTotalIPv6FlowDnPkt.setDescription('Total IPv6 flow down packe')
hwTotalIPv6FlowUpByte = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalIPv6FlowUpByte.setStatus('current')
if mibBuilder.loadTexts: hwTotalIPv6FlowUpByte.setDescription('Total IPv6 flow up byte')
hwTotalIPv6FlowUpPkt = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalIPv6FlowUpPkt.setStatus('current')
if mibBuilder.loadTexts: hwTotalIPv6FlowUpPkt.setDescription('Total IPv6 flow up packet')
hwHistoricMaxOnlineAcctReadyNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwHistoricMaxOnlineAcctReadyNum.setStatus('current')
if mibBuilder.loadTexts: hwHistoricMaxOnlineAcctReadyNum.setDescription('the number of historic max acct ready online users')
hwPubicLacUserNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPubicLacUserNum.setStatus('current')
if mibBuilder.loadTexts: hwPubicLacUserNum.setDescription('the number of lac users at public network ')
hwHistoricMaxOnlineLocalNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwHistoricMaxOnlineLocalNum.setStatus('current')
if mibBuilder.loadTexts: hwHistoricMaxOnlineLocalNum.setDescription('the number of historic max local online users')
hwHistoricMaxOnlineRemoteNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwHistoricMaxOnlineRemoteNum.setStatus('current')
if mibBuilder.loadTexts: hwHistoricMaxOnlineRemoteNum.setDescription('the number of historic max rui remote online users')
hwTotalLacOnlineNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalLacOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalLacOnlineNum.setDescription('the number of lac online users')
hwTotalLnsOnlineNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalLnsOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalLnsOnlineNum.setDescription('the number of lns online users')
hwTotalWlsOnlineNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalWlsOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalWlsOnlineNum.setDescription('the number of wireless online users')
hwTotalWrdOnlineNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalWrdOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalWrdOnlineNum.setDescription('the number of wire online users')
hwDhcpUserOnlineFailCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 14, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpUserOnlineFailCount.setStatus('current')
if mibBuilder.loadTexts: hwDhcpUserOnlineFailCount.setDescription('the number of dhcp online fail users')
hwAccessTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15), )
if mibBuilder.loadTexts: hwAccessTable.setStatus('current')
if mibBuilder.loadTexts: hwAccessTable.setDescription('access table')
hwAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwAccessIndex"))
if mibBuilder.loadTexts: hwAccessEntry.setStatus('current')
if mibBuilder.loadTexts: hwAccessEntry.setDescription('access entry The access table is used to query the property of online users. The index item node is hwAccessIndex. Notice: Read operation is not allowed for all the items in this table. 1. The index of hwAccessTable also uses hwAccessIndex, get operation only supports the standard get operation with hwAccessIndex as its index. 2. To prevent too much interaction, get next operation does use the standard operation that uses hwAccessIndex as its index. ')
hwAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessIndex.setStatus('current')
if mibBuilder.loadTexts: hwAccessIndex.setDescription('unqualified index')
hwAccessUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessUserName.setStatus('current')
if mibBuilder.loadTexts: hwAccessUserName.setDescription('access user name')
hwAccessPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("all", 1), ("ppp", 2), ("vlan", 3), ("vlanweb", 4), ("vlanportal", 5), ("vlan8021x", 6), ("telnet", 7), ("ftp", 8), ("ssh", 9), ("igmp", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessPortType.setStatus('current')
if mibBuilder.loadTexts: hwAccessPortType.setDescription('access port type 1:all 2:PPP 3:VLAN 4:WEB of VLAN 5:Portal of VLAN 6:802.1X 7:telnet 8:ftp 9:SSH 10:igmp')
hwAccessPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessPriority.setStatus('current')
if mibBuilder.loadTexts: hwAccessPriority.setDescription('access up priority')
hwAccessSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessSlotNo.setStatus('current')
if mibBuilder.loadTexts: hwAccessSlotNo.setDescription('slot No.')
hwAccessSubSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessSubSlotNo.setStatus('current')
if mibBuilder.loadTexts: hwAccessSubSlotNo.setDescription('subslot No.')
hwAccessPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessPortNo.setStatus('current')
if mibBuilder.loadTexts: hwAccessPortNo.setDescription('port No.')
hwAccessVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessVLANID.setStatus('current')
if mibBuilder.loadTexts: hwAccessVLANID.setDescription('VLAN id')
hwAccessPVC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessPVC.setStatus('current')
if mibBuilder.loadTexts: hwAccessPVC.setDescription('VPI VPC')
hwAccessAuthenMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("local", 1), ("noauth", 2), ("radius", 3), ("localRadius", 4), ("radiusLocal", 5), ("radiusNoauth", 6), ("tacacs", 7), ("localTacacs", 8), ("tacacsLocal", 9), ("tacacsNone", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessAuthenMethod.setStatus('current')
if mibBuilder.loadTexts: hwAccessAuthenMethod.setDescription('authentication method')
hwAccessAcctMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("local", 1), ("radius", 2), ("noacct", 3), ("localradiusboth", 4), ("hwtacacs", 5), ("localhwtacacsboth", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessAcctMethod.setStatus('current')
if mibBuilder.loadTexts: hwAccessAcctMethod.setDescription('account method')
hwAccessIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessIPAddress.setStatus('current')
if mibBuilder.loadTexts: hwAccessIPAddress.setDescription('IP address')
hwAccessVRF = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessVRF.setStatus('current')
if mibBuilder.loadTexts: hwAccessVRF.setDescription('VRF name')
hwAccessMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 17), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessMACAddress.setStatus('current')
if mibBuilder.loadTexts: hwAccessMACAddress.setDescription('Mac address')
hwAccessIfIdleCut = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessIfIdleCut.setStatus('current')
if mibBuilder.loadTexts: hwAccessIfIdleCut.setDescription('if idle cut')
hwAccessIdleCutTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessIdleCutTime.setStatus('current')
if mibBuilder.loadTexts: hwAccessIdleCutTime.setDescription('idle cut time')
hwAccessIdleCutFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessIdleCutFlow.setStatus('current')
if mibBuilder.loadTexts: hwAccessIdleCutFlow.setDescription('idle cut flow')
hwAccessTimeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessTimeLimit.setStatus('current')
if mibBuilder.loadTexts: hwAccessTimeLimit.setDescription('session time')
hwAccessTotalFlow64Limit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessTotalFlow64Limit.setStatus('current')
if mibBuilder.loadTexts: hwAccessTotalFlow64Limit.setDescription('remain flow(64bit)')
hwAccessStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessStartTime.setStatus('current')
if mibBuilder.loadTexts: hwAccessStartTime.setDescription('start time')
hwAccessCARIfUpActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessCARIfUpActive.setStatus('current')
if mibBuilder.loadTexts: hwAccessCARIfUpActive.setDescription('up car control')
hwAccessCARIfDnActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessCARIfDnActive.setStatus('current')
if mibBuilder.loadTexts: hwAccessCARIfDnActive.setDescription('down car control')
hwAccessUpFlow64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessUpFlow64.setStatus('current')
if mibBuilder.loadTexts: hwAccessUpFlow64.setDescription('up flow(64Byte)')
hwAccessDnFlow64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessDnFlow64.setStatus('current')
if mibBuilder.loadTexts: hwAccessDnFlow64.setDescription('down flow(64Byte)')
hwAccessUpPacket64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessUpPacket64.setStatus('current')
if mibBuilder.loadTexts: hwAccessUpPacket64.setDescription('up packet')
hwAccessDnPacket64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessDnPacket64.setStatus('current')
if mibBuilder.loadTexts: hwAccessDnPacket64.setDescription('down packet')
hwAccessCARUpCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessCARUpCIR.setStatus('current')
if mibBuilder.loadTexts: hwAccessCARUpCIR.setDescription('up committed information rate(Kbps)')
hwAccessCARUpPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessCARUpPIR.setStatus('current')
if mibBuilder.loadTexts: hwAccessCARUpPIR.setDescription('up peak information rate(Kbps)')
hwAccessCARUpCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 47), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessCARUpCBS.setStatus('current')
if mibBuilder.loadTexts: hwAccessCARUpCBS.setDescription('up committed burst size(byte)')
hwAccessCARUpPBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessCARUpPBS.setStatus('current')
if mibBuilder.loadTexts: hwAccessCARUpPBS.setDescription('up peak burst size(byte)')
hwAccessCARDnCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessCARDnCIR.setStatus('current')
if mibBuilder.loadTexts: hwAccessCARDnCIR.setDescription('down committed information rate(Kbps)')
hwAccessCARDnPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessCARDnPIR.setStatus('current')
if mibBuilder.loadTexts: hwAccessCARDnPIR.setDescription('down peak information rate(Kbps)')
hwAccessCARDnCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 51), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessCARDnCBS.setStatus('current')
if mibBuilder.loadTexts: hwAccessCARDnCBS.setDescription('down committed burst size(byte)')
hwAccessCARDnPBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 52), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessCARDnPBS.setStatus('current')
if mibBuilder.loadTexts: hwAccessCARDnPBS.setDescription('down peak burst size(byte)')
hwAccessDownPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessDownPriority.setStatus('current')
if mibBuilder.loadTexts: hwAccessDownPriority.setDescription('access down priority')
hwAccessQosProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAccessQosProfile.setStatus('current')
if mibBuilder.loadTexts: hwAccessQosProfile.setDescription('QOS profile')
hwAccessInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessInterface.setStatus('current')
if mibBuilder.loadTexts: hwAccessInterface.setDescription('user access interface')
hwAccessIPv6IFID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 58), Ipv6AddressIfIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessIPv6IFID.setStatus('current')
if mibBuilder.loadTexts: hwAccessIPv6IFID.setDescription("The user's interface ID when IPv6CP negotiation.")
hwAccessIPv6WanAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 59), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessIPv6WanAddress.setStatus('current')
if mibBuilder.loadTexts: hwAccessIPv6WanAddress.setDescription("The user's WAN address.")
hwAccessIPv6WanPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 60), Ipv6AddressPrefix()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessIPv6WanPrefix.setStatus('current')
if mibBuilder.loadTexts: hwAccessIPv6WanPrefix.setDescription("The user's WAN prefix.")
hwAccessIPv6LanPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 61), Ipv6AddressPrefix()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessIPv6LanPrefix.setStatus('current')
if mibBuilder.loadTexts: hwAccessIPv6LanPrefix.setDescription("The user's LAN prefix.")
hwAccessIPv6LanPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessIPv6LanPrefixLen.setStatus('current')
if mibBuilder.loadTexts: hwAccessIPv6LanPrefixLen.setDescription("The user's LAN prefix length.")
hwAccessBasicIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 63), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessBasicIPType.setStatus('current')
if mibBuilder.loadTexts: hwAccessBasicIPType.setDescription("The basic service type. UCHAR[0]-IPv4, UCHAR[1]-IPv6, UCHAR[2]-IPv6-PD. '0'-without such basic service, '1'-with such basic service.")
hwAccessIPv6WaitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessIPv6WaitDelay.setStatus('current')
if mibBuilder.loadTexts: hwAccessIPv6WaitDelay.setDescription('The time of waiting for DHCPv6 packet after IPv6CP negotiation.')
hwAccessIPv6ManagedAddressFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ndra", 1), ("dhcpv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessIPv6ManagedAddressFlag.setStatus('current')
if mibBuilder.loadTexts: hwAccessIPv6ManagedAddressFlag.setDescription('The address configuration method for PPP and L2TP user.')
hwAccessIPv6CPIFIDAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 66), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessIPv6CPIFIDAvailable.setStatus('current')
if mibBuilder.loadTexts: hwAccessIPv6CPIFIDAvailable.setDescription('The flag indicating whether PPP and L2TP user will use the interface-id of ipv6cp negotiation in DHCPv6 address allocation.')
hwAccessIPv6OtherFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ndra", 1), ("dhcpv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessIPv6OtherFlag.setStatus('current')
if mibBuilder.loadTexts: hwAccessIPv6OtherFlag.setDescription('The method PPP and L2TP user get configuration parameters.')
hwAccessIPv6CPAssignIFID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 68), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessIPv6CPAssignIFID.setStatus('current')
if mibBuilder.loadTexts: hwAccessIPv6CPAssignIFID.setDescription("The flag indicating whether to accept user's interface-id when ipv6cp negotiation.")
hwAccessLineID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessLineID.setStatus('current')
if mibBuilder.loadTexts: hwAccessLineID.setDescription('The access-line-id information.')
hwAccessIPv6UpFlow64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessIPv6UpFlow64.setStatus('current')
if mibBuilder.loadTexts: hwAccessIPv6UpFlow64.setDescription("The user's up flow.")
hwAccessIPv6DnFlow64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessIPv6DnFlow64.setStatus('current')
if mibBuilder.loadTexts: hwAccessIPv6DnFlow64.setDescription("The user's down flow.")
hwAccessIPv6UpPacket64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessIPv6UpPacket64.setStatus('current')
if mibBuilder.loadTexts: hwAccessIPv6UpPacket64.setDescription("The user's up flow packet.")
hwAccessIPv6DnPacket64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessIPv6DnPacket64.setStatus('current')
if mibBuilder.loadTexts: hwAccessIPv6DnPacket64.setDescription("The user's down flow packet.")
hwAccessDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 74), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessDeviceName.setStatus('current')
if mibBuilder.loadTexts: hwAccessDeviceName.setDescription('access device name')
hwAccessDeviceMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 75), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessDeviceMACAddress.setStatus('current')
if mibBuilder.loadTexts: hwAccessDeviceMACAddress.setDescription('Access device Mac address')
hwAccessDevicePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 76), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessDevicePortName.setStatus('current')
if mibBuilder.loadTexts: hwAccessDevicePortName.setDescription('Interface Name of Access device.')
hwAccessAPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 15, 1, 77), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294836225))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessAPID.setStatus('current')
if mibBuilder.loadTexts: hwAccessAPID.setDescription('Access wiless device AP Id')
hwAccessExtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16), )
if mibBuilder.loadTexts: hwAccessExtTable.setStatus('current')
if mibBuilder.loadTexts: hwAccessExtTable.setDescription('access extend table')
hwAccessExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwAccessIndex"))
if mibBuilder.loadTexts: hwAccessExtEntry.setStatus('current')
if mibBuilder.loadTexts: hwAccessExtEntry.setDescription('access extend entry')
hwAccessUCLGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessUCLGroup.setStatus('current')
if mibBuilder.loadTexts: hwAccessUCLGroup.setDescription('user group.')
hwAuthenticationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAuthenticationState.setStatus('current')
if mibBuilder.loadTexts: hwAuthenticationState.setDescription(' This object indicates the status of the authentication state machine. ')
hwAuthorizationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAuthorizationState.setStatus('current')
if mibBuilder.loadTexts: hwAuthorizationState.setDescription(' This object indicates the status of the authorization state machine. ')
hwAccountingState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccountingState.setStatus('current')
if mibBuilder.loadTexts: hwAccountingState.setDescription(' This object indicates the status of the accounting state machine. ')
hwAccessDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessDomainName.setStatus('current')
if mibBuilder.loadTexts: hwAccessDomainName.setDescription(' This object indicates the user domain. ')
hwIdleTimeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIdleTimeLength.setStatus('current')
if mibBuilder.loadTexts: hwIdleTimeLength.setDescription(' This object indicates the idle start time. ')
hwAcctSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAcctSessionID.setStatus('current')
if mibBuilder.loadTexts: hwAcctSessionID.setDescription(' This object indicates the accounting session ID. ')
hwAccessStartAcctTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessStartAcctTime.setStatus('current')
if mibBuilder.loadTexts: hwAccessStartAcctTime.setDescription(' This object indicates the start time of accounting. ')
hwAccessNormalServerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessNormalServerGroup.setStatus('current')
if mibBuilder.loadTexts: hwAccessNormalServerGroup.setDescription(" This object indicates the name of the common authentication and accounting RADIUS server group. If the value is '--', it indicates that no name is configured. ")
hwAccessDomainAcctCopySeverGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessDomainAcctCopySeverGroup.setStatus('current')
if mibBuilder.loadTexts: hwAccessDomainAcctCopySeverGroup.setDescription(" This object indicates the name of the accounting copy RADIUS server group in a domain. If the value is '--', it indicates that no name is configured. ")
hwAccessPVlanAcctCopyServerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessPVlanAcctCopyServerGroup.setStatus('current')
if mibBuilder.loadTexts: hwAccessPVlanAcctCopyServerGroup.setDescription(" This object indicates the name of the accounting copy RADIUS server group on an interface. If the value is '--', it indicates that no name is configured. ")
hwAccessCurAuthenPlace = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("local", 1), ("radius", 2), ("tacacs", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessCurAuthenPlace.setStatus('current')
if mibBuilder.loadTexts: hwAccessCurAuthenPlace.setDescription(' This object indicates current authentication place. ')
hwAccessActionFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 0), ("newuserauth", 1), ("reauth", 2), ("logout", 3), ("leaving", 4), ("authmodify", 5), ("connectup", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessActionFlag.setStatus('current')
if mibBuilder.loadTexts: hwAccessActionFlag.setDescription(' Action flag ')
hwAccessAuthtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("ppp", 1), ("dot1x", 2), ("web", 3), ("bind", 4), ("fast", 5), ("wlan", 6), ("admin", 7), ("tunnel", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessAuthtype.setStatus('current')
if mibBuilder.loadTexts: hwAccessAuthtype.setDescription(' This object indicates the user authentication type. ')
hwAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("telnet", 1), ("terminal", 2), ("ssh", 3), ("ftp", 4), ("x25pad", 5), ("ppp", 6), ("pppoe", 7), ("pppoeovlan", 8), ("pppoa", 9), ("pppoeoa", 10), ("pppolns", 11), ("ordinaryvlan", 12), ("eap", 13), ("pnp", 14), ("ip", 15), ("staticvlan", 16), ("layer2leasedline", 17), ("layer2leasedlineuser", 18), ("layer3leasedline", 19), ("pppoeleasedline", 20), ("nmsleasedline", 21), ("proxyleasedline", 22), ("relayleasedline", 23), ("e1pos", 24), ("lactunnel", 25), ("lnstunnel", 26), ("mip", 27), ("deviceuser", 28), ("pppoeor", 29), ("pppoeovlanor", 30), ("ordinaryvlanor", 31), ("http", 32), ("web", 33), ("wlan", 34), ("mac", 35), ("vm", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessType.setStatus('current')
if mibBuilder.loadTexts: hwAccessType.setDescription('The access type. ')
hwAccessOnlineTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessOnlineTime.setStatus('current')
if mibBuilder.loadTexts: hwAccessOnlineTime.setDescription(' The user total online time. ')
hwAccessDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAccessDomain.setStatus('current')
if mibBuilder.loadTexts: hwAccessDomain.setDescription('The user domain')
hwAccessGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessGateway.setStatus('current')
if mibBuilder.loadTexts: hwAccessGateway.setDescription('The user access gateway')
hwAccessSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAccessSSID.setStatus('current')
if mibBuilder.loadTexts: hwAccessSSID.setDescription('The user access SSID')
hwAccessAPMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 22), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessAPMAC.setStatus('current')
if mibBuilder.loadTexts: hwAccessAPMAC.setDescription('The user access APMAC')
hwAccessCurAccountingPlace = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("radius", 2), ("tacacs", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessCurAccountingPlace.setStatus('current')
if mibBuilder.loadTexts: hwAccessCurAccountingPlace.setDescription('The user accounting method.')
hwAccessCurAuthorPlace = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("ifauthen", 3), ("tacacs", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessCurAuthorPlace.setStatus('current')
if mibBuilder.loadTexts: hwAccessCurAuthorPlace.setDescription('The user authorization method.')
hwAccessUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAccessUserGroup.setStatus('current')
if mibBuilder.loadTexts: hwAccessUserGroup.setDescription('The user group')
hwAccessResourceInsufficientInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessResourceInsufficientInbound.setStatus('current')
if mibBuilder.loadTexts: hwAccessResourceInsufficientInbound.setDescription('Inbound result of insufficient resource')
hwAccessResourceInsufficientOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 16, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessResourceInsufficientOutbound.setStatus('current')
if mibBuilder.loadTexts: hwAccessResourceInsufficientOutbound.setDescription('Outbound result of insufficient resource')
hwAcctSchemeExtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 19), )
if mibBuilder.loadTexts: hwAcctSchemeExtTable.setStatus('current')
if mibBuilder.loadTexts: hwAcctSchemeExtTable.setDescription('account Scheme Ext Table.')
hwAcctSchemeExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 19, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwAcctSchemeName"))
if mibBuilder.loadTexts: hwAcctSchemeExtEntry.setStatus('current')
if mibBuilder.loadTexts: hwAcctSchemeExtEntry.setDescription('account Scheme Ext entry.')
hwIfRealtimeAcct = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 19, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfRealtimeAcct.setStatus('current')
if mibBuilder.loadTexts: hwIfRealtimeAcct.setDescription(' if need realties account.')
hwRealtimeFailMaxnum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRealtimeFailMaxnum.setStatus('current')
if mibBuilder.loadTexts: hwRealtimeFailMaxnum.setDescription(' Permit time of realties account fail.')
hwStartFailOnlineIfSendInterim = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 19, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwStartFailOnlineIfSendInterim.setStatus('current')
if mibBuilder.loadTexts: hwStartFailOnlineIfSendInterim.setDescription(' if send interim accounting packet after accounting start fail ')
hwBillPoolTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 21))
hwBillsPoolVolume = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBillsPoolVolume.setStatus('current')
if mibBuilder.loadTexts: hwBillsPoolVolume.setDescription(' This object indicates the capacity of the bill pool. ')
hwBillsPoolNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 21, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBillsPoolNum.setStatus('current')
if mibBuilder.loadTexts: hwBillsPoolNum.setDescription(' This object indicates the number of current bills. ')
hwBillsPoolAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 21, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBillsPoolAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: hwBillsPoolAlarmThreshold.setDescription(' This object indicates the alarm threshold,default is 75. ')
hwBillsPoolBackupMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 21, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nobackup", 1), ("tftpmode", 2), ("hdmode", 3), ("cfcardmode", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBillsPoolBackupMode.setStatus('current')
if mibBuilder.loadTexts: hwBillsPoolBackupMode.setDescription(' This object indicates the backup mode,default is 4. ')
hwBillsPoolBackupInterval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 21, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBillsPoolBackupInterval.setStatus('current')
if mibBuilder.loadTexts: hwBillsPoolBackupInterval.setDescription(' This object indicates the interval for regular backup,default is 1440. ')
hwBillsPoolBackupNow = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 21, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBillsPoolBackupNow.setStatus('current')
if mibBuilder.loadTexts: hwBillsPoolBackupNow.setDescription(' This object indicates the instruction for immediate backup,default is 1. ')
hwBillsPoolReset = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 21, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBillsPoolReset.setStatus('current')
if mibBuilder.loadTexts: hwBillsPoolReset.setDescription(' This object indicates that all bills in the bill pool are cleared. The resetting operation is dangerous,default is 1. ')
hwBillTFTPTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 22))
hwBillsTFTPSrvIP = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 22, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBillsTFTPSrvIP.setStatus('current')
if mibBuilder.loadTexts: hwBillsTFTPSrvIP.setDescription(' This object indicates the IP address of the TFTP server. The value is 0 when the system is initialized. ')
hwBillsTFTPMainFileName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 22, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBillsTFTPMainFileName.setStatus('current')
if mibBuilder.loadTexts: hwBillsTFTPMainFileName.setDescription('The tftp main file name of Bills.')
hwUclGrpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 25), )
if mibBuilder.loadTexts: hwUclGrpTable.setStatus('current')
if mibBuilder.loadTexts: hwUclGrpTable.setDescription('User Group Table')
hwUclGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 25, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwUclGrpName"))
if mibBuilder.loadTexts: hwUclGrpEntry.setStatus('current')
if mibBuilder.loadTexts: hwUclGrpEntry.setDescription('User Group Entry')
hwUclGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 25, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUclGrpName.setStatus('current')
if mibBuilder.loadTexts: hwUclGrpName.setDescription('User Group name')
hwUclGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 25, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwUclGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwUclGrpRowStatus.setDescription('row admin status,only Add or Del')
hwIPAccessTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 27), )
if mibBuilder.loadTexts: hwIPAccessTable.setStatus('current')
if mibBuilder.loadTexts: hwIPAccessTable.setDescription('IP access Table')
hwIPAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 27, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwIPAccessIPaddress"), (0, "HUAWEI-AAA-MIB", "hwIPAccessVRF"))
if mibBuilder.loadTexts: hwIPAccessEntry.setStatus('current')
if mibBuilder.loadTexts: hwIPAccessEntry.setDescription('IP Query Access Entry ')
hwIPAccessIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 27, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPAccessIPaddress.setStatus('current')
if mibBuilder.loadTexts: hwIPAccessIPaddress.setDescription('User IP Address')
hwIPAccessCID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 27, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPAccessCID.setStatus('current')
if mibBuilder.loadTexts: hwIPAccessCID.setDescription('User Access Index')
hwIPAccessVRF = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 27, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPAccessVRF.setStatus('current')
if mibBuilder.loadTexts: hwIPAccessVRF.setDescription('User Access VRF')
hwAAAMibTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2))
hwAAATrapOid = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1))
hwDomainIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1152))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwDomainIndex.setStatus('current')
if mibBuilder.loadTexts: hwDomainIndex.setDescription('Domain Index')
hwHdFreeamount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwHdFreeamount.setStatus('current')
if mibBuilder.loadTexts: hwHdFreeamount.setDescription('Hard disk Free Amount')
hwHdWarningThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwHdWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: hwHdWarningThreshold.setDescription('Hard disk warning threshold')
hwUserSlot = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUserSlot.setStatus('current')
if mibBuilder.loadTexts: hwUserSlot.setDescription('Slot')
hwUserSlotMaxNumThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUserSlotMaxNumThreshold.setStatus('current')
if mibBuilder.loadTexts: hwUserSlotMaxNumThreshold.setDescription('hwUserSlotMaxNumThreshold')
hwOnlineUserNumThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwOnlineUserNumThreshold.setStatus('current')
if mibBuilder.loadTexts: hwOnlineUserNumThreshold.setDescription('hwOnlineUserNumThreshold')
hwMaxUserThresholdType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMaxUserThresholdType.setStatus('current')
if mibBuilder.loadTexts: hwMaxUserThresholdType.setDescription('hwMaxUserThresholdType')
hwRbpChangeName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 33))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwRbpChangeName.setStatus('current')
if mibBuilder.loadTexts: hwRbpChangeName.setDescription('hwRbpChangeName')
hwRbpOldState = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("init", 0), ("master", 1), ("backup", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwRbpOldState.setStatus('current')
if mibBuilder.loadTexts: hwRbpOldState.setDescription('hwRbpOldState')
hwRbpNewState = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("init", 0), ("master", 1), ("backup", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwRbpNewState.setStatus('current')
if mibBuilder.loadTexts: hwRbpNewState.setDescription('hwRbpNewState')
hwRbpChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 33))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwRbpChangeReason.setStatus('current')
if mibBuilder.loadTexts: hwRbpChangeReason.setDescription('hwRbpChangeReason')
hwRbsName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 33))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwRbsName.setStatus('current')
if mibBuilder.loadTexts: hwRbsName.setDescription('hwRbsName')
hwRbsDownReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 65))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwRbsDownReason.setStatus('current')
if mibBuilder.loadTexts: hwRbsDownReason.setDescription('hwRbsDownReason')
hwPolicyRouteThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 14), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwPolicyRouteThreshold.setStatus('current')
if mibBuilder.loadTexts: hwPolicyRouteThreshold.setDescription('hwPolicyRouteThreshold')
hwPolicyRoute = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwPolicyRoute.setStatus('current')
if mibBuilder.loadTexts: hwPolicyRoute.setDescription('hwPolicyRoute')
hwRemoteDownloadAclUsedValue = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 16), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwRemoteDownloadAclUsedValue.setStatus('current')
if mibBuilder.loadTexts: hwRemoteDownloadAclUsedValue.setDescription('The used number of remote download ACL.')
hwRemoteDownloadAclThresholdValue = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 17), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwRemoteDownloadAclThresholdValue.setStatus('current')
if mibBuilder.loadTexts: hwRemoteDownloadAclThresholdValue.setDescription('The threshold value of remote download ACL.')
hwLoginFailedTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 18), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwLoginFailedTimes.setStatus('current')
if mibBuilder.loadTexts: hwLoginFailedTimes.setDescription('Login failed times in the statistic period')
hwStatisticPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 19), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStatisticPeriod.setStatus('current')
if mibBuilder.loadTexts: hwStatisticPeriod.setDescription('Statistic period to count login failed times')
hwUserGroupNumThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 20), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUserGroupNumThreshold.setStatus('current')
if mibBuilder.loadTexts: hwUserGroupNumThreshold.setDescription('The threshold value of user-group index.')
hwUserGroupUsedNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 21), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUserGroupUsedNum.setStatus('current')
if mibBuilder.loadTexts: hwUserGroupUsedNum.setDescription('The used number of user-group index.')
hwAAACpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 22), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAAACpuUsage.setStatus('current')
if mibBuilder.loadTexts: hwAAACpuUsage.setDescription('Cpu usage.')
hwAAAUserResourceUsage = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 23), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAAAUserResourceUsage.setStatus('current')
if mibBuilder.loadTexts: hwAAAUserResourceUsage.setDescription('User resource usage.')
hwAAASessionGroupUpperLimitThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAAASessionGroupUpperLimitThreshold.setStatus('current')
if mibBuilder.loadTexts: hwAAASessionGroupUpperLimitThreshold.setDescription('The session-group users upper limit warning threshold')
hwAAASessionGroupLowerLimitThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 99), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAAASessionGroupLowerLimitThreshold.setStatus('current')
if mibBuilder.loadTexts: hwAAASessionGroupLowerLimitThreshold.setDescription('The session-group users lower limit warning threshold')
hwAAASessionUpperLimitThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAAASessionUpperLimitThreshold.setStatus('current')
if mibBuilder.loadTexts: hwAAASessionUpperLimitThreshold.setDescription('The online sessions upper limit warning threshold')
hwAAASessionLowerLimitThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 99), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAAASessionLowerLimitThreshold.setStatus('current')
if mibBuilder.loadTexts: hwAAASessionLowerLimitThreshold.setDescription('The online sessions lower limit warning threshold')
hwAAATimerExpireMajorLevelThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAAATimerExpireMajorLevelThreshold.setStatus('current')
if mibBuilder.loadTexts: hwAAATimerExpireMajorLevelThreshold.setDescription('Major alarm threshold for resources occupied by real-time accounting services')
hwAAATimerExpireMajorLevelResumeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAAATimerExpireMajorLevelResumeThreshold.setStatus('current')
if mibBuilder.loadTexts: hwAAATimerExpireMajorLevelResumeThreshold.setDescription('Major alarm clear threshold for resources occupied by real-time accounting services')
hwAAATimerExpireCriticalLevelThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAAATimerExpireCriticalLevelThreshold.setStatus('current')
if mibBuilder.loadTexts: hwAAATimerExpireCriticalLevelThreshold.setDescription('Critical alarm threshold for resources occupied by real-time accounting services')
hwAAATimerExpireCriticalLevelResumeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAAATimerExpireCriticalLevelResumeThreshold.setStatus('current')
if mibBuilder.loadTexts: hwAAATimerExpireCriticalLevelResumeThreshold.setDescription('Critical alarm clear threshold for resources occupied by real-time accounting services')
hwMacMovedQuietUserSpec = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 32), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMacMovedQuietUserSpec.setStatus('current')
if mibBuilder.loadTexts: hwMacMovedQuietUserSpec.setDescription('The mac moved quiet user spec .')
hwMacMovedUserPercentage = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 33), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMacMovedUserPercentage.setStatus('current')
if mibBuilder.loadTexts: hwMacMovedUserPercentage.setDescription('The mac moved quiet user percentage .')
hwLowerMacMovedUserPercentage = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 34), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwLowerMacMovedUserPercentage.setStatus('current')
if mibBuilder.loadTexts: hwLowerMacMovedUserPercentage.setDescription('The configuration of mac moved quiet user lower percentage.')
hwUpperMacMovedUserPercentage = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 35), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUpperMacMovedUserPercentage.setStatus('current')
if mibBuilder.loadTexts: hwUpperMacMovedUserPercentage.setDescription('The configuration of mac moved quiet user upper percentage.')
hwAAAChasisIPv6AddressThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAAAChasisIPv6AddressThreshold.setStatus('current')
if mibBuilder.loadTexts: hwAAAChasisIPv6AddressThreshold.setDescription('The number of IPv6 addresses on the device reached the threshold.')
hwAAASlotIPv6AddressThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAAASlotIPv6AddressThreshold.setStatus('current')
if mibBuilder.loadTexts: hwAAASlotIPv6AddressThreshold.setDescription('The number of IPv6 addresses on the slot reached the threshold.')
hwAAATrapsDefine = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2))
hwAAATraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0))
hwUserIPAllocAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 1)).setObjects(("HUAWEI-AAA-MIB", "hwDomainIndex"), ("HUAWEI-AAA-MIB", "hwDomainName"), ("HUAWEI-AAA-MIB", "hwPoolWarningThreshold"))
if mibBuilder.loadTexts: hwUserIPAllocAlarm.setStatus('current')
if mibBuilder.loadTexts: hwUserIPAllocAlarm.setDescription(' 1 Notice/Trap name: Reach IP address Allocable Threshold 2 Notice/Trap generation cause: reach the threshold set at domain 3 Repair suggestions: Check whether to renew configuring the BAS IP pool Add new IP pool to this domain . ')
hwUserSlotMaxNum = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 2)).setObjects(("HUAWEI-AAA-MIB", "hwUserSlot"), ("HUAWEI-AAA-MIB", "hwUserSlotMaxNumThreshold"))
if mibBuilder.loadTexts: hwUserSlotMaxNum.setStatus('current')
if mibBuilder.loadTexts: hwUserSlotMaxNum.setDescription(' 1 Notice/Trap name: Reach the slot user threshold 2 Notice/Trap generation cause: the number of the online user in this slot reaches the threshold 3 Repair suggestions: please change to another board which can support more users. ')
hwOnlineUserNumAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 3)).setObjects(("HUAWEI-AAA-MIB", "hwOnlineUserNumThreshold"))
if mibBuilder.loadTexts: hwOnlineUserNumAlarm.setStatus('current')
if mibBuilder.loadTexts: hwOnlineUserNumAlarm.setDescription(' 1 Notice/Trap name: Reach the max online user 2 Notice/Trap generation cause: the online user number reach the limit 3 Repair suggestions: upgrade your machine, or change to another board which can support more user ')
hwSetUserQosProfileFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 4)).setObjects(("HUAWEI-AAA-MIB", "hwAccessIndex"), ("HUAWEI-AAA-MIB", "hwAccessUserName"), ("HUAWEI-AAA-MIB", "hwAccessQosProfile"))
if mibBuilder.loadTexts: hwSetUserQosProfileFail.setStatus('current')
if mibBuilder.loadTexts: hwSetUserQosProfileFail.setDescription(" 1 Notice/Trap name: Set User's QOS Profile Fail 2 Notice/Trap generation cause: Set User's QOS Profile Fail 3 Repair suggestions: Check The Valid of Profile Name or User ")
hwUserMaxNum = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 5)).setObjects(("HUAWEI-AAA-MIB", "hwMaxUserThresholdType"), ("HUAWEI-AAA-MIB", "hwUserSlot"), ("HUAWEI-AAA-MIB", "hwUserSlotMaxNumThreshold"))
if mibBuilder.loadTexts: hwUserMaxNum.setStatus('current')
if mibBuilder.loadTexts: hwUserMaxNum.setDescription(' 1 Notice/Trap name: Reach the machine user threshold 2 Notice/Trap generation cause: the number of the online user in this machine reaches the threshold 3 Repair suggestions: please change to another machine which can support more user or change the cofiguration of the threshold. ')
hwRbpStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 6)).setObjects(("HUAWEI-AAA-MIB", "hwRbpChangeName"), ("HUAWEI-AAA-MIB", "hwRbpOldState"), ("HUAWEI-AAA-MIB", "hwRbpNewState"), ("HUAWEI-AAA-MIB", "hwRbpChangeReason"))
if mibBuilder.loadTexts: hwRbpStateChange.setStatus('current')
if mibBuilder.loadTexts: hwRbpStateChange.setDescription(' 1 Notice/Trap name: Rbp state changed 2 Notice/Trap generation cause: Rbp state changed 3 Repair suggestions: If the change is unexpected, please check the links between master and backup devices according to the change reason. ')
hwRbsDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 7)).setObjects(("HUAWEI-AAA-MIB", "hwRbsName"), ("HUAWEI-AAA-MIB", "hwRbsDownReason"))
if mibBuilder.loadTexts: hwRbsDown.setStatus('current')
if mibBuilder.loadTexts: hwRbsDown.setDescription(' 1 Notice/Trap name: Rbs down 2 Notice/Trap generation cause: Tcp closed because of pucHwRbsDownReason 3 Repair suggestions: Check the links according to down reasons. ')
hwRbsUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 8)).setObjects(("HUAWEI-AAA-MIB", "hwRbsName"))
if mibBuilder.loadTexts: hwRbsUp.setStatus('current')
if mibBuilder.loadTexts: hwRbsUp.setDescription(' 1 Notice/Trap name: Rbs up 2 Notice/Trap generation cause: Tcp connected 3 Repair suggestions: Match info of hwRbsDown. ')
hwUserIPv6AddressAllocAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 9)).setObjects(("HUAWEI-AAA-MIB", "hwDomainIndex"), ("HUAWEI-AAA-MIB", "hwDomainName"), ("HUAWEI-AAA-MIB", "hwIPv6PoolWarningThreshold"))
if mibBuilder.loadTexts: hwUserIPv6AddressAllocAlarm.setStatus('current')
if mibBuilder.loadTexts: hwUserIPv6AddressAllocAlarm.setDescription(' 1 Notice/Trap name: Reach IPv6 address Allocable Threshold 2 Notice/Trap generation cause: reach the threshold set at domain 3 Repair suggestions: Check whether to renew configuring the BAS IPv6 address pool Add new IPv6 address pool to this domain . ')
hwUserNDRAPrefixAllocAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 10)).setObjects(("HUAWEI-AAA-MIB", "hwDomainIndex"), ("HUAWEI-AAA-MIB", "hwDomainName"), ("HUAWEI-AAA-MIB", "hwIPv6PoolWarningThreshold"))
if mibBuilder.loadTexts: hwUserNDRAPrefixAllocAlarm.setStatus('current')
if mibBuilder.loadTexts: hwUserNDRAPrefixAllocAlarm.setDescription(' 1 Notice/Trap name: Reach IPv6 NDRA Prefix Allocable Threshold 2 Notice/Trap generation cause: reach the threshold set at domain 3 Repair suggestions: Check whether to renew configuring the BAS IPv6 NDRA prefix pool Add new IPv6 NDRA prefix pool to this domain . ')
hwUserDelegationPrefixAllocAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 11)).setObjects(("HUAWEI-AAA-MIB", "hwDomainIndex"), ("HUAWEI-AAA-MIB", "hwDomainName"), ("HUAWEI-AAA-MIB", "hwIPv6PoolWarningThreshold"))
if mibBuilder.loadTexts: hwUserDelegationPrefixAllocAlarm.setStatus('current')
if mibBuilder.loadTexts: hwUserDelegationPrefixAllocAlarm.setDescription(' 1 Notice/Trap name: Reach IPv6 DHCPv6-PD Prefix Allocable Threshold 2 Notice/Trap generation cause: reach the threshold set at domain 3 Repair suggestions: Check whether to renew configuring the BAS IPv6 DHCPv6-PD prefix pool Add new IPv6 DHCPv6-PD prefix pool to this domain . ')
hwUserIPAllocAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 12)).setObjects(("HUAWEI-AAA-MIB", "hwDomainIndex"), ("HUAWEI-AAA-MIB", "hwDomainName"), ("HUAWEI-AAA-MIB", "hwPoolWarningThreshold"))
if mibBuilder.loadTexts: hwUserIPAllocAlarmResume.setStatus('current')
if mibBuilder.loadTexts: hwUserIPAllocAlarmResume.setDescription(' 1 Notice/Trap name: Overallocated IP Address Recovery 2 Notice/Trap generation cause: Recover from a state where IP address allocable threshold are reached. 3 Repair suggestions: NA. ')
hwUserIPv6AddressAllocAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 13)).setObjects(("HUAWEI-AAA-MIB", "hwDomainIndex"), ("HUAWEI-AAA-MIB", "hwDomainName"), ("HUAWEI-AAA-MIB", "hwIPv6PoolWarningThreshold"))
if mibBuilder.loadTexts: hwUserIPv6AddressAllocAlarmResume.setStatus('current')
if mibBuilder.loadTexts: hwUserIPv6AddressAllocAlarmResume.setDescription(' 1 Notice/Trap name: Overallocated IPv6 Address Recovery 2 Notice/Trap generation cause: Recover From a state where IPv6 address allocable threshold are reached. 3 Repair suggestions: NA. ')
hwUserNDRAPrefixAllocAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 14)).setObjects(("HUAWEI-AAA-MIB", "hwDomainIndex"), ("HUAWEI-AAA-MIB", "hwDomainName"), ("HUAWEI-AAA-MIB", "hwIPv6PoolWarningThreshold"))
if mibBuilder.loadTexts: hwUserNDRAPrefixAllocAlarmResume.setStatus('current')
if mibBuilder.loadTexts: hwUserNDRAPrefixAllocAlarmResume.setDescription(' 1 Notice/Trap name: Overallocated NDRA Prefix Recovery 2 Notice/Trap generation cause: Recover from a state where NDRA prefix allocable threshold are reached. 3 Repair suggestions: NA. ')
hwUserDelegationPrefixAllocAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 15)).setObjects(("HUAWEI-AAA-MIB", "hwDomainIndex"), ("HUAWEI-AAA-MIB", "hwDomainName"), ("HUAWEI-AAA-MIB", "hwIPv6PoolWarningThreshold"))
if mibBuilder.loadTexts: hwUserDelegationPrefixAllocAlarmResume.setStatus('current')
if mibBuilder.loadTexts: hwUserDelegationPrefixAllocAlarmResume.setDescription(' 1 Notice/Trap name: Overallocated IPv6 DHCPv6-PD Prefix Recovery 2 Notice/Trap generation cause: Recover from a state where IPv6 DHCPv6-PD Prefix allocable threshold are reached. 3 Repair suggestions: NA. ')
hwOnlineUserNumUpperLimitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 16)).setObjects(("HUAWEI-AAA-MIB", "hwOnlineUserNumUpperLimitThreshold"))
if mibBuilder.loadTexts: hwOnlineUserNumUpperLimitAlarm.setStatus('current')
if mibBuilder.loadTexts: hwOnlineUserNumUpperLimitAlarm.setDescription(' 1 Notice/Trap name: Reach max online user number Threshold 2 Notice/Trap generation cause: the online user number reach the upper limit. 3 Repair suggestions: Check your machine. ')
hwOnlineUserNumUpperLimitResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 17)).setObjects(("HUAWEI-AAA-MIB", "hwOnlineUserNumUpperLimitThreshold"))
if mibBuilder.loadTexts: hwOnlineUserNumUpperLimitResume.setStatus('current')
if mibBuilder.loadTexts: hwOnlineUserNumUpperLimitResume.setDescription(' 1 Notice/Trap name: Overallocated max online user Recovery 2 Notice/Trap generation cause: Recover from a state where the online user number allocable threshold are reached. 3 Repair suggestions: NA. ')
hwOnlineUserNumLowerLimitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 18)).setObjects(("HUAWEI-AAA-MIB", "hwOnlineUserNumLowerLimitThreshold"))
if mibBuilder.loadTexts: hwOnlineUserNumLowerLimitAlarm.setStatus('current')
if mibBuilder.loadTexts: hwOnlineUserNumLowerLimitAlarm.setDescription(' 1 Notice/Trap name: Reach min online user number Threshold 2 Notice/Trap generation cause: the online user number reach the lower limit. 3 Repair suggestions: Check your machine. ')
hwOnlineUserNumLowerLimitResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 19)).setObjects(("HUAWEI-AAA-MIB", "hwOnlineUserNumLowerLimitThreshold"))
if mibBuilder.loadTexts: hwOnlineUserNumLowerLimitResume.setStatus('current')
if mibBuilder.loadTexts: hwOnlineUserNumLowerLimitResume.setDescription(' 1 Notice/Trap name: Overallocated IP Recovery 2 Notice/Trap generation cause: Recover from a state where the ip address allocable upper limit threshold are reached. 3 Repair suggestions: NA. ')
hwIPLowerlimitWarningAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 20)).setObjects(("HUAWEI-AAA-MIB", "hwDomainIndex"), ("HUAWEI-AAA-MIB", "hwDomainName"), ("HUAWEI-AAA-MIB", "hwPoolLowerLimitWarningThreshold"))
if mibBuilder.loadTexts: hwIPLowerlimitWarningAlarm.setStatus('current')
if mibBuilder.loadTexts: hwIPLowerlimitWarningAlarm.setDescription(' 1 Notice/Trap name: Reach IP address Allocable lower limit Threshold 2 Notice/Trap generation cause: release the lower limit threshold set at domain 3 Repair suggestions: Check the domain. ')
hwIPLowerlimitWarningResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 21)).setObjects(("HUAWEI-AAA-MIB", "hwDomainIndex"), ("HUAWEI-AAA-MIB", "hwDomainName"), ("HUAWEI-AAA-MIB", "hwPoolLowerLimitWarningThreshold"))
if mibBuilder.loadTexts: hwIPLowerlimitWarningResume.setStatus('current')
if mibBuilder.loadTexts: hwIPLowerlimitWarningResume.setDescription(' 1 Notice/Trap name: IP Address Recovery 2 Notice/Trap generation cause: Recover from a state where IP address allocable lower limit threshold are reached. 3 Repair suggestions: NA. ')
hwIPv6AddressLowerlimitWarningAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 22)).setObjects(("HUAWEI-AAA-MIB", "hwDomainIndex"), ("HUAWEI-AAA-MIB", "hwDomainName"), ("HUAWEI-AAA-MIB", "hwIPv6PoolLowerLimitWarningThreshold"))
if mibBuilder.loadTexts: hwIPv6AddressLowerlimitWarningAlarm.setStatus('current')
if mibBuilder.loadTexts: hwIPv6AddressLowerlimitWarningAlarm.setDescription(' 1 Notice/Trap name: Reach IPv6 address Allocable lower limit Threshold 2 Notice/Trap generation cause: release the lower limit threshold set at domain 3 Repair suggestions: Check the domain. ')
hwIPv6AddressLowerlimitWarningResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 23)).setObjects(("HUAWEI-AAA-MIB", "hwDomainIndex"), ("HUAWEI-AAA-MIB", "hwDomainName"), ("HUAWEI-AAA-MIB", "hwIPv6PoolLowerLimitWarningThreshold"))
if mibBuilder.loadTexts: hwIPv6AddressLowerlimitWarningResume.setStatus('current')
if mibBuilder.loadTexts: hwIPv6AddressLowerlimitWarningResume.setDescription(' 1 Notice/Trap name: IPv6 Address Recovery 2 Notice/Trap generation cause: Recover from a state where IPv6 address allocable lower limit threshold are reached. 3 Repair suggestions: NA. ')
hwIPv6NDRAPrefixLowerlimitWarningAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 24)).setObjects(("HUAWEI-AAA-MIB", "hwDomainIndex"), ("HUAWEI-AAA-MIB", "hwDomainName"), ("HUAWEI-AAA-MIB", "hwIPv6PoolLowerLimitWarningThreshold"))
if mibBuilder.loadTexts: hwIPv6NDRAPrefixLowerlimitWarningAlarm.setStatus('current')
if mibBuilder.loadTexts: hwIPv6NDRAPrefixLowerlimitWarningAlarm.setDescription(' 1 Notice/Trap name: Reach IPv6 NDRA Prefix Allocable lower limit Threshold 2 Notice/Trap generation cause: release the lower limit threshold set at domain 3 Repair suggestions: Check the domain. ')
hwIPv6NDRAPrefixLowerlimitWarningResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 25)).setObjects(("HUAWEI-AAA-MIB", "hwDomainIndex"), ("HUAWEI-AAA-MIB", "hwDomainName"), ("HUAWEI-AAA-MIB", "hwIPv6PoolLowerLimitWarningThreshold"))
if mibBuilder.loadTexts: hwIPv6NDRAPrefixLowerlimitWarningResume.setStatus('current')
if mibBuilder.loadTexts: hwIPv6NDRAPrefixLowerlimitWarningResume.setDescription(' 1 Notice/Trap name: IPv6 NDRA Prefix Recovery 2 Notice/Trap generation cause: Recover from a state where IPv6 NDRA Prefix allocable lower limit threshold are reached. 3 Repair suggestions: NA. ')
hwIPv6PDPrefixLowerlimitWarningAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 26)).setObjects(("HUAWEI-AAA-MIB", "hwDomainIndex"), ("HUAWEI-AAA-MIB", "hwDomainName"), ("HUAWEI-AAA-MIB", "hwIPv6PoolLowerLimitWarningThreshold"))
if mibBuilder.loadTexts: hwIPv6PDPrefixLowerlimitWarningAlarm.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PDPrefixLowerlimitWarningAlarm.setDescription(' 1 Notice/Trap name: Reach IPv6 PD Prefix Allocable lower limit Threshold 2 Notice/Trap generation cause: release the lower limit threshold set at domain 3 Repair suggestions: Check the domain. ')
hwIPv6PDPrefixLowerlimitWarningResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 27)).setObjects(("HUAWEI-AAA-MIB", "hwDomainIndex"), ("HUAWEI-AAA-MIB", "hwDomainName"), ("HUAWEI-AAA-MIB", "hwIPv6PoolLowerLimitWarningThreshold"))
if mibBuilder.loadTexts: hwIPv6PDPrefixLowerlimitWarningResume.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PDPrefixLowerlimitWarningResume.setDescription(' 1 Notice/Trap name: IPv6 PD Prefix Recovery 2 Notice/Trap generation cause: Recover from a state where IPv6 PD Prefix allocable lower limit threshold are reached. 3 Repair suggestions: NA. ')
hwPolicyRouteSlotMaxNum = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 28)).setObjects(("HUAWEI-AAA-MIB", "hwAccessSlotNo"), ("HUAWEI-AAA-MIB", "hwPolicyRouteThreshold"), ("HUAWEI-AAA-MIB", "hwAccessIndex"), ("HUAWEI-AAA-MIB", "hwPolicyRoute"))
if mibBuilder.loadTexts: hwPolicyRouteSlotMaxNum.setStatus('current')
if mibBuilder.loadTexts: hwPolicyRouteSlotMaxNum.setDescription(' 1 Notice/Trap name: Policy route reach max value by slot 2 Notice/Trap generation cause: Policy route have reached the max value. 3 Repair suggestions: NA. ')
hwRemoteDownloadAclThresholdAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 29)).setObjects(("HUAWEI-AAA-MIB", "hwRemoteDownloadAclUsedValue"), ("HUAWEI-AAA-MIB", "hwRemoteDownloadAclThresholdValue"))
if mibBuilder.loadTexts: hwRemoteDownloadAclThresholdAlarm.setStatus('current')
if mibBuilder.loadTexts: hwRemoteDownloadAclThresholdAlarm.setDescription(' 1 Notice/Trap name: The number of remote traffic classifier reached the threshold. 2 Notice/Trap generation cause: The number of remote traffic classifier reached the threshold. 3 Repair suggestions: NA. ')
hwRemoteDownloadAclThresholdResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 30)).setObjects(("HUAWEI-AAA-MIB", "hwRemoteDownloadAclUsedValue"), ("HUAWEI-AAA-MIB", "hwRemoteDownloadAclThresholdValue"))
if mibBuilder.loadTexts: hwRemoteDownloadAclThresholdResume.setStatus('current')
if mibBuilder.loadTexts: hwRemoteDownloadAclThresholdResume.setDescription(' 1 Notice/Trap name: The number of remote traffic classifier below the threshold. 2 Notice/Trap generation cause: The number of remote traffic classifier below the threshold. 3 Repair suggestions: NA. ')
hwAdminLoginFailed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 31)).setObjects(("HUAWEI-AAA-MIB", "hwLoginFailedTimes"), ("HUAWEI-AAA-MIB", "hwStatisticPeriod"))
if mibBuilder.loadTexts: hwAdminLoginFailed.setStatus('current')
if mibBuilder.loadTexts: hwAdminLoginFailed.setDescription(' 1 Notice/Trap name: Administrator type users login failed too frequently 2 Notice/Trap generation cause: Administrator type users login failed times in the period reached the threshold 3 Repair suggestions: Login with valid account, block suspicious ip, enhance system security. ')
hwAdminLoginFailedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 32)).setObjects(("HUAWEI-AAA-MIB", "hwLoginFailedTimes"), ("HUAWEI-AAA-MIB", "hwStatisticPeriod"))
if mibBuilder.loadTexts: hwAdminLoginFailedClear.setStatus('current')
if mibBuilder.loadTexts: hwAdminLoginFailedClear.setDescription(' 1 Notice/Trap name: Administrator type users login failed not frequently 2 Notice/Trap generation cause: Administrator type users login failed times in the period is less than the threshold 3 Repair suggestions: NA ')
hwUserGroupThresholdAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 33)).setObjects(("HUAWEI-AAA-MIB", "hwUserGroupNumThreshold"), ("HUAWEI-AAA-MIB", "hwUserGroupUsedNum"))
if mibBuilder.loadTexts: hwUserGroupThresholdAlarm.setStatus('current')
if mibBuilder.loadTexts: hwUserGroupThresholdAlarm.setDescription(' 1 Notice/Trap name: The number of user groups reached the threshold. 2 Notice/Trap generation cause: The number of user groups reached the threshold. 3 Repair suggestions: NA. ')
hwUserGroupThresholdResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 34)).setObjects(("HUAWEI-AAA-MIB", "hwUserGroupNumThreshold"), ("HUAWEI-AAA-MIB", "hwUserGroupUsedNum"))
if mibBuilder.loadTexts: hwUserGroupThresholdResume.setStatus('current')
if mibBuilder.loadTexts: hwUserGroupThresholdResume.setDescription(' 1 Notice/Trap name: The number of user groups fell below 90% of a specified alarm threshold. 2 Notice/Trap generation cause: The number of user groups fell below 90% of a specified alarm threshold. 3 Repair suggestions: NA. ')
hwEDSGLicenseExpireAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 35))
if mibBuilder.loadTexts: hwEDSGLicenseExpireAlarm.setStatus('current')
if mibBuilder.loadTexts: hwEDSGLicenseExpireAlarm.setDescription(' 1 Notice/Trap name: The license for the OTT service capacity has expired. 2 Notice/Trap generation cause: The license for the OTT service capacity has expired. 3 Repair suggestions: A new license needs to be purchased. ')
hwEDSGLicenseExpireResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 36))
if mibBuilder.loadTexts: hwEDSGLicenseExpireResume.setStatus('current')
if mibBuilder.loadTexts: hwEDSGLicenseExpireResume.setDescription(' 1 Notice/Trap name: The license for the OTT service capacity has been reactivated. 2 Notice/Trap generation cause: The license for the OTT service capacity has been reactivated. 3 Repair suggestions: NA. ')
hwAAAAccessUserResourceOrCpuAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 37)).setObjects(("HUAWEI-AAA-MIB", "hwUserSlot"), ("HUAWEI-AAA-MIB", "hwAAACpuUsage"), ("HUAWEI-AAA-MIB", "hwAAAUserResourceUsage"))
if mibBuilder.loadTexts: hwAAAAccessUserResourceOrCpuAlarm.setStatus('current')
if mibBuilder.loadTexts: hwAAAAccessUserResourceOrCpuAlarm.setDescription(' 1 Notice/Trap name: The resource of users or cpu usage on the device reached the upper threshold. 2 Notice/Trap generation cause: The resource of users or cpu usage on the device reached the upper threshold. 3 Repair suggestions: NA. ')
hwAAAAccessUserResourceOrCpuResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 38)).setObjects(("HUAWEI-AAA-MIB", "hwUserSlot"), ("HUAWEI-AAA-MIB", "hwAAACpuUsage"), ("HUAWEI-AAA-MIB", "hwAAAUserResourceUsage"))
if mibBuilder.loadTexts: hwAAAAccessUserResourceOrCpuResume.setStatus('current')
if mibBuilder.loadTexts: hwAAAAccessUserResourceOrCpuResume.setDescription(' 1 Notice/Trap name: The resource of users or cpu usage on the device fell below the lower threshold. 2 Notice/Trap generation cause: The resource of users or cpu usage on the device fell below the lower threshold. 3 Repair suggestions: NA. ')
hwAAASessionGroupUpperLimitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 39)).setObjects(("HUAWEI-AAA-MIB", "hwAAASessionGroupUpperLimitThreshold"))
if mibBuilder.loadTexts: hwAAASessionGroupUpperLimitAlarm.setStatus('current')
if mibBuilder.loadTexts: hwAAASessionGroupUpperLimitAlarm.setDescription(' 1 Notice/Trap name: Reach Session-group Upper Limit 2 Notice/Trap generation cause: The number of session-group users reached the upper limit of the device. 3 Repair suggestions: Check your machine. ')
hwAAASessionGroupUpperLimitResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 40)).setObjects(("HUAWEI-AAA-MIB", "hwAAASessionGroupUpperLimitThreshold"))
if mibBuilder.loadTexts: hwAAASessionGroupUpperLimitResume.setStatus('current')
if mibBuilder.loadTexts: hwAAASessionGroupUpperLimitResume.setDescription(' 1 Notice/Trap name: Session-group Upper Limit Recovery 2 Notice/Trap generation cause: The number of session-group users fell below the upper limit of the device. 3 Repair suggestions: NA ')
hwAAASessionGroupLowerLimitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 41)).setObjects(("HUAWEI-AAA-MIB", "hwAAASessionGroupLowerLimitThreshold"))
if mibBuilder.loadTexts: hwAAASessionGroupLowerLimitAlarm.setStatus('current')
if mibBuilder.loadTexts: hwAAASessionGroupLowerLimitAlarm.setDescription(' 1 Notice/Trap name: Fell Below Session-group Lower Limit 2 Notice/Trap generation cause: The number of session-group users fell below the lower limit of the device . 3 Repair suggestions: Check your machine. ')
hwAAASessionGroupLowerLimitResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 42)).setObjects(("HUAWEI-AAA-MIB", "hwAAASessionGroupLowerLimitThreshold"))
if mibBuilder.loadTexts: hwAAASessionGroupLowerLimitResume.setStatus('current')
if mibBuilder.loadTexts: hwAAASessionGroupLowerLimitResume.setDescription(' 1 Notice/Trap name: Session-group Lower Limit Recovery 2 Notice/Trap generation cause: The number of session-group users on the device reached the lower limit of the device. 3 Repair suggestions: NA ')
hwAAAOnlineSessoinUpperLimitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 43)).setObjects(("HUAWEI-AAA-MIB", "hwAAASessionUpperLimitThreshold"))
if mibBuilder.loadTexts: hwAAAOnlineSessoinUpperLimitAlarm.setStatus('current')
if mibBuilder.loadTexts: hwAAAOnlineSessoinUpperLimitAlarm.setDescription(' 1 Notice/Trap name: Reach Online Sessions Upper Limit 2 Notice/Trap generation cause: The number of session reached the upper limit of the device. 3 Repair suggestions: Check your machine. ')
hwAAAOnlineSessoinUpperLimitResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 44)).setObjects(("HUAWEI-AAA-MIB", "hwAAASessionUpperLimitThreshold"))
if mibBuilder.loadTexts: hwAAAOnlineSessoinUpperLimitResume.setStatus('current')
if mibBuilder.loadTexts: hwAAAOnlineSessoinUpperLimitResume.setDescription(' 1 Notice/Trap name: Online Sessions Upper Limit Recovery 2 Notice/Trap generation cause: The number of sessions fell below the upper limit of the device.. 3 Repair suggestions: NA ')
hwAAAOnlineSessoinLowerLimitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 45)).setObjects(("HUAWEI-AAA-MIB", "hwAAASessionLowerLimitThreshold"))
if mibBuilder.loadTexts: hwAAAOnlineSessoinLowerLimitAlarm.setStatus('current')
if mibBuilder.loadTexts: hwAAAOnlineSessoinLowerLimitAlarm.setDescription(' 1 Notice/Trap name: Fell Below Online Sessions Lower Limit 2 Notice/Trap generation cause: The number of sessions fell below the lower limit of the device. 3 Repair suggestions: Check your machine. ')
hwAAAOnlineSessoinLowerLimitResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 46)).setObjects(("HUAWEI-AAA-MIB", "hwAAASessionLowerLimitThreshold"))
if mibBuilder.loadTexts: hwAAAOnlineSessoinLowerLimitResume.setStatus('current')
if mibBuilder.loadTexts: hwAAAOnlineSessoinLowerLimitResume.setDescription(' 1 Notice/Trap name: Online Sessions Lower Limit Recovery 2 Notice/Trap generation cause: The number of sessions reached the lower limit of the device. 3 Repair suggestions: NA ')
hwAAASlotOnlineUserNumAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 47)).setObjects(("HUAWEI-AAA-MIB", "hwUserSlot"), ("HUAWEI-AAA-MIB", "hwUserSlotMaxNumThreshold"))
if mibBuilder.loadTexts: hwAAASlotOnlineUserNumAlarm.setStatus('current')
if mibBuilder.loadTexts: hwAAASlotOnlineUserNumAlarm.setDescription(' 1 Notice/Trap name: Reach Slot Online Users Upper Limit 2 Notice/Trap generation cause: The number of users reached the upper limit of the board. 3 Repair suggestions: Please change to another board which can support more sessions. ')
hwAAASlotOnlineUserNumResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 48)).setObjects(("HUAWEI-AAA-MIB", "hwUserSlot"), ("HUAWEI-AAA-MIB", "hwUserSlotMaxNumThreshold"))
if mibBuilder.loadTexts: hwAAASlotOnlineUserNumResume.setStatus('current')
if mibBuilder.loadTexts: hwAAASlotOnlineUserNumResume.setDescription(' 1 Notice/Trap name: Slot Online Users Upper Limit Recovery 2 Notice/Trap generation cause: The number of users fell below the upper limit of the board. 3 Repair suggestions: NA ')
hwAAATimerExpireMajorLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 49)).setObjects(("HUAWEI-AAA-MIB", "hwAAATimerExpireMajorLevelThreshold"))
if mibBuilder.loadTexts: hwAAATimerExpireMajorLevelAlarm.setStatus('current')
if mibBuilder.loadTexts: hwAAATimerExpireMajorLevelAlarm.setDescription(' 1 Notice/Trap name: The resource occupied by real-time accounting services reached the major alarm threshold. 2 Notice/Trap generation cause: The resource occupied by real-time accounting services reached the major alarm threshold. 3 Repair suggestions: NA. ')
hwAAATimerExpireMajorLevelResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 50)).setObjects(("HUAWEI-AAA-MIB", "hwAAATimerExpireMajorLevelResumeThreshold"))
if mibBuilder.loadTexts: hwAAATimerExpireMajorLevelResume.setStatus('current')
if mibBuilder.loadTexts: hwAAATimerExpireMajorLevelResume.setDescription(' 1 Notice/Trap name: The resource occupied by real-time accounting services reached the major alarm clear threshold. 2 Notice/Trap generation cause: The resource occupied by real-time accounting services reached the major alarm clear threshold. 3 Repair suggestions: NA. ')
hwAAATimerExpireCriticalLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 51)).setObjects(("HUAWEI-AAA-MIB", "hwAAATimerExpireCriticalLevelThreshold"))
if mibBuilder.loadTexts: hwAAATimerExpireCriticalLevelAlarm.setStatus('current')
if mibBuilder.loadTexts: hwAAATimerExpireCriticalLevelAlarm.setDescription(' 1 Notice/Trap name: The resource occupied by real-time accounting services reached the critical alarm threshold. 2 Notice/Trap generation cause: The resource occupied by real-time accounting services reached the critical alarm threshold. 3 Repair suggestions: NA. ')
hwAAATimerExpireCriticalLevelResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 52)).setObjects(("HUAWEI-AAA-MIB", "hwAAATimerExpireCriticalLevelResumeThreshold"))
if mibBuilder.loadTexts: hwAAATimerExpireCriticalLevelResume.setStatus('current')
if mibBuilder.loadTexts: hwAAATimerExpireCriticalLevelResume.setDescription(' 1 Notice/Trap name: The resource occupied by real-time accounting services reached the critical alarm clear threshold. 2 Notice/Trap generation cause: The resource occupied by real-time accounting services reached the critical alarm clear threshold. 3 Repair suggestions: NA. ')
hwMacMovedQuietMaxUserAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 53)).setObjects(("HUAWEI-AAA-MIB", "hwMacMovedQuietUserSpec"), ("HUAWEI-AAA-MIB", "hwMacMovedUserPercentage"), ("HUAWEI-AAA-MIB", "hwLowerMacMovedUserPercentage"), ("HUAWEI-AAA-MIB", "hwUpperMacMovedUserPercentage"))
if mibBuilder.loadTexts: hwMacMovedQuietMaxUserAlarm.setStatus('current')
if mibBuilder.loadTexts: hwMacMovedQuietMaxUserAlarm.setDescription(' 1Notice/Trap name: The mac moved quiet user percentage has reached the mac move quiet user alarm threshold. 2 Notice/Trap generation cause: The mac moved quiet user percentage has reached the mac move quiet user alarm threshold. 3 Repair suggestions: NA. ')
hwMacMovedQuietUserClearAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 54)).setObjects(("HUAWEI-AAA-MIB", "hwMacMovedQuietUserSpec"), ("HUAWEI-AAA-MIB", "hwMacMovedUserPercentage"), ("HUAWEI-AAA-MIB", "hwLowerMacMovedUserPercentage"), ("HUAWEI-AAA-MIB", "hwUpperMacMovedUserPercentage"))
if mibBuilder.loadTexts: hwMacMovedQuietUserClearAlarm.setStatus('current')
if mibBuilder.loadTexts: hwMacMovedQuietUserClearAlarm.setDescription(' 1Notice/Trap name: The mac moved quiet user percentage has reached mac moved quiet user alarm clear threshold. 2 Notice/Trap generation cause: The mac moved quiet user percentage has reached mac moved quiet user alarm clear threshold. 3 Repair suggestions: NA. ')
hwAAAChasisIPv6AddressThresholdAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 55)).setObjects(("HUAWEI-AAA-MIB", "hwAAAChasisIPv6AddressThreshold"))
if mibBuilder.loadTexts: hwAAAChasisIPv6AddressThresholdAlarm.setStatus('current')
if mibBuilder.loadTexts: hwAAAChasisIPv6AddressThresholdAlarm.setDescription(' 1 Notice/Trap name: The number of IPv6 addresses reached the upper limit of the device. 2 Notice/Trap generation cause: The number of IPv6 addresses reached the upper limit of the device. 3 Repair suggestions: NA. ')
hwAAAChasisIPv6AddressThresholdResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 56)).setObjects(("HUAWEI-AAA-MIB", "hwAAAChasisIPv6AddressThreshold"))
if mibBuilder.loadTexts: hwAAAChasisIPv6AddressThresholdResume.setStatus('current')
if mibBuilder.loadTexts: hwAAAChasisIPv6AddressThresholdResume.setDescription(' 1 Notice/Trap name: The number of IPv6 addresses fell below the lower limit of the device. 2 Notice/Trap generation cause: The number of IPv6 addresses fell below the lower limit of the device. 3 Repair suggestions: NA. ')
hwAAASlotIPv6AddressThresholdAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 57)).setObjects(("HUAWEI-AAA-MIB", "hwUserSlot"), ("HUAWEI-AAA-MIB", "hwAAASlotIPv6AddressThreshold"))
if mibBuilder.loadTexts: hwAAASlotIPv6AddressThresholdAlarm.setStatus('current')
if mibBuilder.loadTexts: hwAAASlotIPv6AddressThresholdAlarm.setDescription(' 1 Notice/Trap name: The number of IPv6 addresses on the slot reached the upper limit of the device. 2 Notice/Trap generation cause: The number of IPv6 addresses on the slot reached the upper limit of the device. 3 Repair suggestions: NA. ')
hwAAASlotIPv6AddressThresholdResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 2, 0, 58)).setObjects(("HUAWEI-AAA-MIB", "hwUserSlot"), ("HUAWEI-AAA-MIB", "hwAAASlotIPv6AddressThreshold"))
if mibBuilder.loadTexts: hwAAASlotIPv6AddressThresholdResume.setStatus('current')
if mibBuilder.loadTexts: hwAAASlotIPv6AddressThresholdResume.setDescription(' 1 Notice/Trap name: The number of IPv6 addresses on the slot fell below the lower limit of the device. 2 Notice/Trap generation cause: The number of IPv6 addresses on the slot fell below the lower limit of the device. 3 Repair suggestions: NA. ')
hwLAMTrapsDefine = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 3))
hwLAMTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 3, 0))
hwHarddiskoverflow = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 3, 0, 1)).setObjects(("HUAWEI-AAA-MIB", "hwHdFreeamount"), ("HUAWEI-AAA-MIB", "hwHdWarningThreshold"))
if mibBuilder.loadTexts: hwHarddiskoverflow.setStatus('current')
if mibBuilder.loadTexts: hwHarddiskoverflow.setDescription(' 1 Notice/Trap name: Reach IP address Allocable Threshold 2 Notice/Trap generation cause: reach the threshold set at domain 3 Repair suggestions: Check whether to renew configuring the BAS IP pool Add new IP pool to this domain . ')
hwHarddiskReachThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 3, 0, 2)).setObjects(("HUAWEI-AAA-MIB", "hwHdFreeamount"), ("HUAWEI-AAA-MIB", "hwHdWarningThreshold"))
if mibBuilder.loadTexts: hwHarddiskReachThreshold.setStatus('current')
if mibBuilder.loadTexts: hwHarddiskReachThreshold.setDescription(' 1 Notice/Trap name: Reach IP address Allocable Threshold 2 Notice/Trap generation cause: reach the threshold set at domain 3 Repair suggestions: Check whether to renew configuring the BAS IP pool Add new IP pool to this domain . ')
hwHarddiskOK = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 3, 0, 3)).setObjects(("HUAWEI-AAA-MIB", "hwHdFreeamount"), ("HUAWEI-AAA-MIB", "hwHdWarningThreshold"))
if mibBuilder.loadTexts: hwHarddiskOK.setStatus('current')
if mibBuilder.loadTexts: hwHarddiskOK.setDescription(' 1 Notice/Trap name: Reach IP address Allocable Threshold 2 Notice/Trap generation cause: reach the threshold set at domain 3 Repair suggestions: Check whether to renew configuring the BAS IP pool Add new IP pool to this domain . ')
hwCachetoFTPFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 3, 0, 4)).setObjects(("HUAWEI-AAA-MIB", "hwHdFreeamount"), ("HUAWEI-AAA-MIB", "hwHdWarningThreshold"))
if mibBuilder.loadTexts: hwCachetoFTPFail.setStatus('current')
if mibBuilder.loadTexts: hwCachetoFTPFail.setDescription(' 1 Notice/Trap name: Reach IP address Allocable Threshold 2 Notice/Trap generation cause: reach the threshold set at domain 3 Repair suggestions: Check whether to renew configuring the BAS IP pool Add new IP pool to this domain . ')
hwHDtoFTPFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 2, 2, 3, 0, 5)).setObjects(("HUAWEI-AAA-MIB", "hwHdFreeamount"), ("HUAWEI-AAA-MIB", "hwHdWarningThreshold"))
if mibBuilder.loadTexts: hwHDtoFTPFail.setStatus('current')
if mibBuilder.loadTexts: hwHDtoFTPFail.setDescription(' 1 Notice/Trap name: Reach IP address Allocable Threshold 2 Notice/Trap generation cause: reach the threshold set at domain 3 Repair suggestions: Check whether to renew configuring the BAS IP pool Add new IP pool to this domain . ')
hwCutAccessUserTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 28))
hwCutStartUserID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 28, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCutStartUserID.setStatus('current')
if mibBuilder.loadTexts: hwCutStartUserID.setDescription('Start User CID')
hwCutEndUserID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 28, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCutEndUserID.setStatus('current')
if mibBuilder.loadTexts: hwCutEndUserID.setDescription('End User CID')
hwCutIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 28, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCutIPaddress.setStatus('current')
if mibBuilder.loadTexts: hwCutIPaddress.setDescription('User IP Address')
hwCutMacAddres = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 28, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCutMacAddres.setStatus('current')
if mibBuilder.loadTexts: hwCutMacAddres.setDescription('User MAC Address')
hwCutUserName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 28, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 253))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCutUserName.setStatus('current')
if mibBuilder.loadTexts: hwCutUserName.setDescription('User Access Name')
hwCutUserAttri = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 28, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 0), ("noauth", 1), ("local", 2), ("radiusauth", 3), ("hwtacacs", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCutUserAttri.setStatus('current')
if mibBuilder.loadTexts: hwCutUserAttri.setDescription('User Authentication attribute')
hwCutDomain = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 28, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCutDomain.setStatus('current')
if mibBuilder.loadTexts: hwCutDomain.setDescription('domain name')
hwCutIPPoolName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 28, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCutIPPoolName.setStatus('current')
if mibBuilder.loadTexts: hwCutIPPoolName.setDescription('IP Pool Name')
hwCutIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 28, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCutIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwCutIfIndex.setDescription('IFNET Index')
hwCutVlanID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 28, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 268308478))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCutVlanID.setStatus('current')
if mibBuilder.loadTexts: hwCutVlanID.setDescription('VLAN ID')
hwCutVPI = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 28, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCutVPI.setStatus('current')
if mibBuilder.loadTexts: hwCutVPI.setDescription('VPI VPI')
hwCutVCI = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 28, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCutVCI.setStatus('current')
if mibBuilder.loadTexts: hwCutVCI.setDescription('VCI VCI')
hwCutVRF = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 28, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCutVRF.setStatus('current')
if mibBuilder.loadTexts: hwCutVRF.setDescription('User VRF')
hwCutAccessInterface = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 28, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCutAccessInterface.setStatus('current')
if mibBuilder.loadTexts: hwCutAccessInterface.setDescription('The user access interface')
hwCutUserSSID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 28, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCutUserSSID.setStatus('current')
if mibBuilder.loadTexts: hwCutUserSSID.setDescription('The user access SSID')
hwCutAccessSlot = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 28, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCutAccessSlot.setStatus('current')
if mibBuilder.loadTexts: hwCutAccessSlot.setDescription('The user access slot')
hwCutUserGroup = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 28, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCutUserGroup.setStatus('current')
if mibBuilder.loadTexts: hwCutUserGroup.setDescription('The user group')
hwAAACallRate = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 29))
hwAAAUserPPP = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 29, 1))
hwTotalConnectNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 29, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalConnectNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalConnectNum.setDescription('the number of all access users')
hwTotalSuccessNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 29, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalSuccessNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalSuccessNum.setDescription('the number of all success access ppp users')
hwTotalLCPFailNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 29, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalLCPFailNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalLCPFailNum.setDescription('the number of all fail access ppp users during LCP')
hwTotalAuthenFailNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 29, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalAuthenFailNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalAuthenFailNum.setDescription('the number of all authenfail access ppp users')
hwTotalNCPFailNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 29, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalNCPFailNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalNCPFailNum.setDescription('the number of all authenfail access ppp users')
hwTotalIPAllocFailNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 29, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalIPAllocFailNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalIPAllocFailNum.setDescription('the number of all authenfail access ppp users')
hwTotalOtherPPPFailNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 29, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalOtherPPPFailNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalOtherPPPFailNum.setDescription('the number of all authenfail access ppp user')
hwAAAUserWebandFast = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 29, 2))
hwTotalWebConnectNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 29, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalWebConnectNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalWebConnectNum.setDescription('the number of access all web and fast user')
hwTotalSuccessWebConnectNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 29, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalSuccessWebConnectNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalSuccessWebConnectNum.setDescription('the number of all success access web and fast user')
hwAAAUserDot1X = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 29, 3))
hwTotalDot1XConnectNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 29, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalDot1XConnectNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalDot1XConnectNum.setDescription('the number of access all dot1x user')
hwTotalSuccessDot1XConnectNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 29, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalSuccessDot1XConnectNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalSuccessDot1XConnectNum.setDescription('the number of all success access dot1x user')
hwAAAUserBind = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 29, 4))
hwTotalBindConnectNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 29, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalBindConnectNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalBindConnectNum.setDescription('the number of access all bind user')
hwTotalSuccessBindConnectNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 29, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTotalSuccessBindConnectNum.setStatus('current')
if mibBuilder.loadTexts: hwTotalSuccessBindConnectNum.setDescription('the number of all success access bind user')
hwAuthorSchemeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 8), )
if mibBuilder.loadTexts: hwAuthorSchemeTable.setStatus('current')
if mibBuilder.loadTexts: hwAuthorSchemeTable.setDescription('authorization Scheme Table')
hwAuthorSchemeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 8, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwAuthorSchemeName"))
if mibBuilder.loadTexts: hwAuthorSchemeEntry.setStatus('current')
if mibBuilder.loadTexts: hwAuthorSchemeEntry.setDescription('authorization Scheme Entry')
hwAuthorSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAuthorSchemeName.setStatus('current')
if mibBuilder.loadTexts: hwAuthorSchemeName.setDescription('authorization Scheme name')
hwAuthorMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("hwtacacs", 3), ("ifauthenticated", 4), ("hwtacacsnone", 5), ("hwtacacslocal", 6), ("hwtacacsifauthenticated", 7), ("localnone", 8), ("localhwtacacs", 9), ("localifauthenticated", 10), ("ifauthenticatednone", 11), ("ifauthenticatedlocal", 12), ("ifauthenticatedhwtacacs", 13), ("localhwtacacsnone", 14), ("localifauthenticatednone", 15), ("hwtacacslocalnone", 16), ("hwtacacsifauthenticatednone", 17), ("ifauthenticatedlocalnone", 18), ("ifauthenticatedhwtacacsnone", 19), ("localhwtacacsifauthenticated", 20), ("localifauthenticatedhwtacacs", 21), ("hwtacaslocalifauthenticated", 22), ("hwtacacsifauthenticatedlocal", 23), ("ifauthenticatedlocalhwtacacs", 24), ("ifauthenticatedhwtacacslocal", 25), ("localhwtacacsifauthenticatednone", 26), ("localifauthenticatedhwtacacsnone", 27), ("hwtacaslocalifauthenticatednone", 28), ("hwtacacsifauthenticatedlocalnone", 29), ("ifauthenticatedlocalhwtacacsnone", 30), ("ifauthenticatedhwtacacslocalnone", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAuthorMethod.setStatus('current')
if mibBuilder.loadTexts: hwAuthorMethod.setDescription('authorization Scheme ')
hwAuthorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAuthorRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwAuthorRowStatus.setDescription('row admin status, only Add or Delete')
hwRecordSchemeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 30), )
if mibBuilder.loadTexts: hwRecordSchemeTable.setStatus('current')
if mibBuilder.loadTexts: hwRecordSchemeTable.setDescription('record Scheme Table')
hwRecordSchemeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 30, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwRecordSchemeName"))
if mibBuilder.loadTexts: hwRecordSchemeEntry.setStatus('current')
if mibBuilder.loadTexts: hwRecordSchemeEntry.setDescription('record Scheme Entry')
hwRecordSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 30, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRecordSchemeName.setStatus('current')
if mibBuilder.loadTexts: hwRecordSchemeName.setDescription('record scheme name')
hwRecordTacGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 30, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRecordTacGroupName.setStatus('current')
if mibBuilder.loadTexts: hwRecordTacGroupName.setDescription('TACACS group name')
hwRecordRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 30, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRecordRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwRecordRowStatus.setDescription('row admin status, only Add or Delete')
hwMACAccessTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 31), )
if mibBuilder.loadTexts: hwMACAccessTable.setStatus('current')
if mibBuilder.loadTexts: hwMACAccessTable.setDescription('Mac access table')
hwMACAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 31, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwMACAccessMACAddress"))
if mibBuilder.loadTexts: hwMACAccessEntry.setStatus('current')
if mibBuilder.loadTexts: hwMACAccessEntry.setDescription('MAC Query Access Entry ')
hwMACAccessMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 31, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMACAccessMACAddress.setStatus('current')
if mibBuilder.loadTexts: hwMACAccessMACAddress.setDescription('User MAC Address')
hwMACAccessCID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 31, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMACAccessCID.setStatus('current')
if mibBuilder.loadTexts: hwMACAccessCID.setDescription('User Access Index')
hwSlotConnectNumTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 32), )
if mibBuilder.loadTexts: hwSlotConnectNumTable.setStatus('current')
if mibBuilder.loadTexts: hwSlotConnectNumTable.setDescription('slot connect number table')
hwSlotConnectNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 32, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwSlotConnectNumSlot"))
if mibBuilder.loadTexts: hwSlotConnectNumEntry.setStatus('current')
if mibBuilder.loadTexts: hwSlotConnectNumEntry.setDescription('Slot Query Online Number Entry ')
hwSlotConnectNumSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotConnectNumSlot.setStatus('current')
if mibBuilder.loadTexts: hwSlotConnectNumSlot.setDescription('User Slot')
hwSlotConnectNumOnlineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 32, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotConnectNumOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwSlotConnectNumOnlineNum.setDescription('Online number')
hwSlotConnectNumMaxOnlineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 32, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotConnectNumMaxOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwSlotConnectNumMaxOnlineNum.setDescription('Max Online number')
hwSlotConnectNumMaxOnlineAcctReadyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 32, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotConnectNumMaxOnlineAcctReadyNum.setStatus('current')
if mibBuilder.loadTexts: hwSlotConnectNumMaxOnlineAcctReadyNum.setDescription('Max slot acct ready online number')
hwSlotCardConnectNumTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 33), )
if mibBuilder.loadTexts: hwSlotCardConnectNumTable.setStatus('current')
if mibBuilder.loadTexts: hwSlotCardConnectNumTable.setDescription('slot card connect number table')
hwSlotCardConnectNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 33, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwSlotCardConnectNumSlot"), (0, "HUAWEI-AAA-MIB", "hwSlotCardConnectNumCard"))
if mibBuilder.loadTexts: hwSlotCardConnectNumEntry.setStatus('current')
if mibBuilder.loadTexts: hwSlotCardConnectNumEntry.setDescription('Slot Card Query Online Number Entry ')
hwSlotCardConnectNumSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotCardConnectNumSlot.setStatus('current')
if mibBuilder.loadTexts: hwSlotCardConnectNumSlot.setDescription('User Slot')
hwSlotCardConnectNumCard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 33, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotCardConnectNumCard.setStatus('current')
if mibBuilder.loadTexts: hwSlotCardConnectNumCard.setDescription('User Card')
hwSlotCardConnectNumOnlineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 33, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotCardConnectNumOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwSlotCardConnectNumOnlineNum.setDescription('Online user number')
hwSlotCardConnectNumIPv4OnlineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 33, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotCardConnectNumIPv4OnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwSlotCardConnectNumIPv4OnlineNum.setDescription('Online Ipv4 user number')
hwSlotCardConnectNumIPv6OnlineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 33, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotCardConnectNumIPv6OnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwSlotCardConnectNumIPv6OnlineNum.setDescription('Online Ipv6 user number')
hwSlotCardConnectNumDualOnlineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 33, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotCardConnectNumDualOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hwSlotCardConnectNumDualOnlineNum.setDescription('Online Dual-stack user number')
hwSlotCardConnectNumNoAuthNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 33, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotCardConnectNumNoAuthNum.setStatus('current')
if mibBuilder.loadTexts: hwSlotCardConnectNumNoAuthNum.setDescription('Online no authentication user number')
hwSlotCardConnectNumPPPAuthNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 33, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotCardConnectNumPPPAuthNum.setStatus('current')
if mibBuilder.loadTexts: hwSlotCardConnectNumPPPAuthNum.setDescription('Online PPP authentication user number')
hwSlotCardConnectNum8021xAuthNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 33, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotCardConnectNum8021xAuthNum.setStatus('current')
if mibBuilder.loadTexts: hwSlotCardConnectNum8021xAuthNum.setDescription('Online 802.1x authentication user number')
hwSlotCardConnectNumWebAuthNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 33, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotCardConnectNumWebAuthNum.setStatus('current')
if mibBuilder.loadTexts: hwSlotCardConnectNumWebAuthNum.setDescription('Online web authentication user number')
hwSlotCardConnectNumBindAuthNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 33, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotCardConnectNumBindAuthNum.setStatus('current')
if mibBuilder.loadTexts: hwSlotCardConnectNumBindAuthNum.setDescription('Online bind authentication user number')
hwSlotCardConnectNumFastAuthNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 33, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotCardConnectNumFastAuthNum.setStatus('current')
if mibBuilder.loadTexts: hwSlotCardConnectNumFastAuthNum.setDescription('Online fast authentication user number')
hwSlotCardConnectNumWlanAuthNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 33, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotCardConnectNumWlanAuthNum.setStatus('current')
if mibBuilder.loadTexts: hwSlotCardConnectNumWlanAuthNum.setDescription('Online wlan authentication user number')
hwSlotCardConnectNumAdminAuthNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 33, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotCardConnectNumAdminAuthNum.setStatus('current')
if mibBuilder.loadTexts: hwSlotCardConnectNumAdminAuthNum.setDescription('Online admin authentication user number')
hwSlotCardConnectNumTunnelAuthNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 33, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotCardConnectNumTunnelAuthNum.setStatus('current')
if mibBuilder.loadTexts: hwSlotCardConnectNumTunnelAuthNum.setDescription('Online tunnel authentication user number')
hwSlotCardConnectNumMIPAuthNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 33, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotCardConnectNumMIPAuthNum.setStatus('current')
if mibBuilder.loadTexts: hwSlotCardConnectNumMIPAuthNum.setDescription('Online MIP authentication user number')
hwOfflineReasonStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 34), )
if mibBuilder.loadTexts: hwOfflineReasonStatTable.setStatus('current')
if mibBuilder.loadTexts: hwOfflineReasonStatTable.setDescription('offline reason statistic table')
hwOfflineReasonStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 34, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwOfflineReason"))
if mibBuilder.loadTexts: hwOfflineReasonStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwOfflineReasonStatEntry.setDescription('Offline and online fail reason statistic Entry ')
hwOfflineReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOfflineReason.setStatus('current')
if mibBuilder.loadTexts: hwOfflineReason.setDescription('Offline reason ')
hwOfflineReasonStatistic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 34, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOfflineReasonStatistic.setStatus('current')
if mibBuilder.loadTexts: hwOfflineReasonStatistic.setDescription('The offline reason statistic ')
hwOnlineFailReasonStatistic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 34, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOnlineFailReasonStatistic.setStatus('current')
if mibBuilder.loadTexts: hwOnlineFailReasonStatistic.setDescription('The online fail reason statistic ')
hwMulticastListTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 35), )
if mibBuilder.loadTexts: hwMulticastListTable.setStatus('current')
if mibBuilder.loadTexts: hwMulticastListTable.setDescription('The multicast list table ')
hwMulticastListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 35, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwMulticastListIndex"))
if mibBuilder.loadTexts: hwMulticastListEntry.setStatus('current')
if mibBuilder.loadTexts: hwMulticastListEntry.setDescription('multicast list ')
hwMulticastListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMulticastListIndex.setStatus('current')
if mibBuilder.loadTexts: hwMulticastListIndex.setDescription('Multicast list index ')
hwMulticastListName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 35, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMulticastListName.setStatus('current')
if mibBuilder.loadTexts: hwMulticastListName.setDescription('Multicast list name ')
hwMulticastListSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 35, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMulticastListSourceIp.setStatus('current')
if mibBuilder.loadTexts: hwMulticastListSourceIp.setDescription('Multicast list source IP address ')
hwMulticastListSourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 35, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMulticastListSourceIpMask.setStatus('current')
if mibBuilder.loadTexts: hwMulticastListSourceIpMask.setDescription('Multicast list source IP mask ')
hwMulticastListGroupIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 35, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMulticastListGroupIp.setStatus('current')
if mibBuilder.loadTexts: hwMulticastListGroupIp.setDescription('Multicast list group IP address ')
hwMulticastListGroupIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 35, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMulticastListGroupIpMask.setStatus('current')
if mibBuilder.loadTexts: hwMulticastListGroupIpMask.setDescription('Multicast list group IP mask ')
hwMulticastListVpnInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 35, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMulticastListVpnInstance.setStatus('current')
if mibBuilder.loadTexts: hwMulticastListVpnInstance.setDescription('Multicast list VPN instance ')
hwMulticastListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 35, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMulticastListRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMulticastListRowStatus.setDescription('row admin status,only Add or Delete ')
hwMulticastProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 36), )
if mibBuilder.loadTexts: hwMulticastProfileTable.setStatus('current')
if mibBuilder.loadTexts: hwMulticastProfileTable.setDescription('The multicast profile table ')
hwMulticastProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 36, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwMulticastProfileIndex"))
if mibBuilder.loadTexts: hwMulticastProfileEntry.setStatus('current')
if mibBuilder.loadTexts: hwMulticastProfileEntry.setDescription('multicast profile ')
hwMulticastProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 36, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMulticastProfileIndex.setStatus('current')
if mibBuilder.loadTexts: hwMulticastProfileIndex.setDescription('Multicast profile index ')
hwMulticastProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 36, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMulticastProfileName.setStatus('current')
if mibBuilder.loadTexts: hwMulticastProfileName.setDescription('Multicast profile name ')
hwMulticastProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 36, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMulticastProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMulticastProfileRowStatus.setDescription('row admin status, only Add or Delete ')
hwMulticastProfileExtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 37), )
if mibBuilder.loadTexts: hwMulticastProfileExtTable.setStatus('current')
if mibBuilder.loadTexts: hwMulticastProfileExtTable.setDescription('The multicast profile ext table')
hwMulticastProfileExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 37, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwMulticastProfileIndex"), (0, "HUAWEI-AAA-MIB", "hwMulticastListIndex"))
if mibBuilder.loadTexts: hwMulticastProfileExtEntry.setStatus('current')
if mibBuilder.loadTexts: hwMulticastProfileExtEntry.setDescription('multicast profile extern table ')
hwMulticastListBindName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 37, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMulticastListBindName.setStatus('current')
if mibBuilder.loadTexts: hwMulticastListBindName.setDescription('Multicast list name ')
hwMulticastProfileExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 37, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMulticastProfileExtRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMulticastProfileExtRowStatus.setDescription('row admin status,only Add or Del ')
hwServiceSchemeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 38), )
if mibBuilder.loadTexts: hwServiceSchemeTable.setStatus('current')
if mibBuilder.loadTexts: hwServiceSchemeTable.setDescription('The table of this service scheme ')
hwServiceSchemeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 38, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwServiceSchemeName"))
if mibBuilder.loadTexts: hwServiceSchemeEntry.setStatus('current')
if mibBuilder.loadTexts: hwServiceSchemeEntry.setDescription('Service scheme entry. ')
hwServiceSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 38, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwServiceSchemeName.setStatus('current')
if mibBuilder.loadTexts: hwServiceSchemeName.setDescription('Service scheme name.')
hwServiceSchemeNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 38, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwServiceSchemeNextHopIp.setStatus('current')
if mibBuilder.loadTexts: hwServiceSchemeNextHopIp.setDescription('The next hop of source IP address route.')
hwServiceSchemeUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 38, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwServiceSchemeUserPriority.setStatus('current')
if mibBuilder.loadTexts: hwServiceSchemeUserPriority.setDescription('The priority of up user.')
hwServiceSchemeIdleCutTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 38, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwServiceSchemeIdleCutTime.setStatus('current')
if mibBuilder.loadTexts: hwServiceSchemeIdleCutTime.setDescription('The cut time of idle interval.')
hwServiceSchemeIdleCutFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 38, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 768000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwServiceSchemeIdleCutFlow.setStatus('current')
if mibBuilder.loadTexts: hwServiceSchemeIdleCutFlow.setDescription('The flow of idle interval, in Kbytes/min.')
hwServiceSchemeDnsFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 38, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwServiceSchemeDnsFirst.setStatus('current')
if mibBuilder.loadTexts: hwServiceSchemeDnsFirst.setDescription('The first DNS server.')
hwServiceSchemeDnsSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 38, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwServiceSchemeDnsSecond.setStatus('current')
if mibBuilder.loadTexts: hwServiceSchemeDnsSecond.setDescription('The second DNS server.')
hwSrvSchemeAdminUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 38, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSrvSchemeAdminUserPriority.setStatus('current')
if mibBuilder.loadTexts: hwSrvSchemeAdminUserPriority.setDescription('Priority of admin user.')
hwSrvSchemeIpPoolOneName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 38, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSrvSchemeIpPoolOneName.setStatus('current')
if mibBuilder.loadTexts: hwSrvSchemeIpPoolOneName.setDescription('The IP pool name.')
hwSrvSchemeIpPoolTwoName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 38, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSrvSchemeIpPoolTwoName.setStatus('current')
if mibBuilder.loadTexts: hwSrvSchemeIpPoolTwoName.setDescription('The IP pool name.')
hwSrvSchemeIpPoolThreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 38, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSrvSchemeIpPoolThreeName.setStatus('current')
if mibBuilder.loadTexts: hwSrvSchemeIpPoolThreeName.setDescription('The IP pool name.')
hwServiceSchemeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 38, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwServiceSchemeRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwServiceSchemeRowStatus.setDescription('The row administration status, only supporting add or delete.')
hwServiceSchemeIdleCutType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 38, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("both", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwServiceSchemeIdleCutType.setStatus('current')
if mibBuilder.loadTexts: hwServiceSchemeIdleCutType.setDescription('The type of idle-cut, default type is 4.')
hwServiceSchemeIdleCutFlowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 38, 1, 53), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwServiceSchemeIdleCutFlowValue.setStatus('current')
if mibBuilder.loadTexts: hwServiceSchemeIdleCutFlowValue.setDescription('The flow of idle , in Kbytes.')
hwLocalAuthorize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 38, 1, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLocalAuthorize.setStatus('current')
if mibBuilder.loadTexts: hwLocalAuthorize.setDescription('LocalAuthorize type:ucl-group vlan car acl priority.')
hwRemoteAuthorize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 38, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRemoteAuthorize.setStatus('current')
if mibBuilder.loadTexts: hwRemoteAuthorize.setDescription('RemoteAuthorize type:ucl-group car acl priority.')
hwDhcpOpt121RouteTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 39), )
if mibBuilder.loadTexts: hwDhcpOpt121RouteTable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpOpt121RouteTable.setDescription('The dhcp option121 routing table.')
hwDhcpOpt121RouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 39, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwDomainName"), (0, "HUAWEI-AAA-MIB", "hwDhcpOpt121RouteDestIp"), (0, "HUAWEI-AAA-MIB", "hwDhcpOpt121RouteMask"), (0, "HUAWEI-AAA-MIB", "hwDhcpOpt121RouteNextHop"))
if mibBuilder.loadTexts: hwDhcpOpt121RouteEntry.setStatus('current')
if mibBuilder.loadTexts: hwDhcpOpt121RouteEntry.setDescription('The dhcp option121 routing entry.')
hwDhcpOpt121RouteDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 39, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpOpt121RouteDestIp.setStatus('current')
if mibBuilder.loadTexts: hwDhcpOpt121RouteDestIp.setDescription('The destination ip of dhcp option121 route.')
hwDhcpOpt121RouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 39, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpOpt121RouteMask.setStatus('current')
if mibBuilder.loadTexts: hwDhcpOpt121RouteMask.setDescription('The mask of dhcp option121 route.')
hwDhcpOpt121RouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 39, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpOpt121RouteNextHop.setStatus('current')
if mibBuilder.loadTexts: hwDhcpOpt121RouteNextHop.setDescription('The next hop of dhcp option121 route.')
hwDhcpOpt121RouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 39, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpOpt121RouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDhcpOpt121RouteRowStatus.setDescription('The row administration status, only supporting add or delete.')
hwAccessDelayPerSlotTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 40), )
if mibBuilder.loadTexts: hwAccessDelayPerSlotTable.setStatus('current')
if mibBuilder.loadTexts: hwAccessDelayPerSlotTable.setDescription('hwAccessDelayPerSlotTable')
hwAccessDelayPerSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 40, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwAccessDelayPerSlotSlot"))
if mibBuilder.loadTexts: hwAccessDelayPerSlotEntry.setStatus('current')
if mibBuilder.loadTexts: hwAccessDelayPerSlotEntry.setDescription('HwAccessDelayPerSlotEntry')
hwAccessDelayPerSlotSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 40, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccessDelayPerSlotSlot.setStatus('current')
if mibBuilder.loadTexts: hwAccessDelayPerSlotSlot.setDescription('hwAccessDelayPerSlotSlot')
hwAccessDelayPerSlotTransitionStep = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 40, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 262144))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAccessDelayPerSlotTransitionStep.setStatus('current')
if mibBuilder.loadTexts: hwAccessDelayPerSlotTransitionStep.setDescription('hwAccessDelayPerSlotTransitionStep')
hwAccessDelayPerSlotMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 40, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2550))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAccessDelayPerSlotMaxTime.setStatus('current')
if mibBuilder.loadTexts: hwAccessDelayPerSlotMaxTime.setDescription('hwAccessDelayPerSlotMaxTime')
hwAccessDelayPerSlotMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 40, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2550))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAccessDelayPerSlotMinTime.setStatus('current')
if mibBuilder.loadTexts: hwAccessDelayPerSlotMinTime.setDescription('hwAccessDelayPerSlotMinTime')
hwAccessDelayPerSlotRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 40, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAccessDelayPerSlotRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwAccessDelayPerSlotRowStatus.setDescription('hwDhcpOpt121RouteRowStatus')
hwVpnAccessUserStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 41), )
if mibBuilder.loadTexts: hwVpnAccessUserStatTable.setStatus('current')
if mibBuilder.loadTexts: hwVpnAccessUserStatTable.setDescription('hwVpnAccessUserStatTable')
hwVpnAccessUserStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 41, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwUserType"), (0, "HUAWEI-AAA-MIB", "hwVpnAccessUserStatVpnName"))
if mibBuilder.loadTexts: hwVpnAccessUserStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwVpnAccessUserStatEntry.setDescription('HwAccessDelayPerSlotEntry')
hwUserType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 41, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("pppoe", 1), ("pppoa", 2), ("dhcp", 3), ("lns", 4), ("lac", 5), ("ipv4", 6), ("ipv6", 7), ("dualStack", 8), ("all", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserType.setStatus('current')
if mibBuilder.loadTexts: hwUserType.setDescription('user type 1:pppoe 2:pppoa 3:dhcp 4:lns 5:lac 6:ipv4 7:ipv6 8:dualStack 9:all')
hwVpnAccessUserStatVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 41, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnAccessUserStatVpnName.setStatus('current')
if mibBuilder.loadTexts: hwVpnAccessUserStatVpnName.setDescription('hwVpnAccessUserStatVpnName')
hwVpnAccessUserStatUserStat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 41, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnAccessUserStatUserStat.setStatus('current')
if mibBuilder.loadTexts: hwVpnAccessUserStatUserStat.setDescription('hwVpnAccessUserStatUserStat')
hwInterfaceAccessUserStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 42), )
if mibBuilder.loadTexts: hwInterfaceAccessUserStatTable.setStatus('current')
if mibBuilder.loadTexts: hwInterfaceAccessUserStatTable.setDescription('hwInterfaceAccessUserStatTable')
hwInterfaceAccessUserStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 42, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwUserType"), (0, "HUAWEI-AAA-MIB", "hwInterfaceAccessUserStatInterfaceIndex"))
if mibBuilder.loadTexts: hwInterfaceAccessUserStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwInterfaceAccessUserStatEntry.setDescription('HwInterfaceAccessUserStatEntry')
hwInterfaceAccessUserStatInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 42, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwInterfaceAccessUserStatInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hwInterfaceAccessUserStatInterfaceIndex.setDescription('hwInterfaceAccessUserStatInterfaceIndex')
hwInterfaceAccessUserStatUserStat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 42, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwInterfaceAccessUserStatUserStat.setStatus('current')
if mibBuilder.loadTexts: hwInterfaceAccessUserStatUserStat.setDescription('hwInterfaceAccessUserStatUserStat')
hwDomainAccessUserStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 43), )
if mibBuilder.loadTexts: hwDomainAccessUserStatTable.setStatus('current')
if mibBuilder.loadTexts: hwDomainAccessUserStatTable.setDescription('hwDomainAccessUserStatTable')
hwDomainAccessUserStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 43, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwUserType"), (0, "HUAWEI-AAA-MIB", "hwDomainName"))
if mibBuilder.loadTexts: hwDomainAccessUserStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwDomainAccessUserStatEntry.setDescription('HwDomainAccessUserStatEntry')
hwDomainAccessUserStatUserStat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 43, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainAccessUserStatUserStat.setStatus('current')
if mibBuilder.loadTexts: hwDomainAccessUserStatUserStat.setDescription('hwDomainAccessUserStatUserStat')
hwSlotAccessUserStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 44), )
if mibBuilder.loadTexts: hwSlotAccessUserStatTable.setStatus('current')
if mibBuilder.loadTexts: hwSlotAccessUserStatTable.setDescription('hwInterfaceAccessUserStatTable')
hwSlotAccessUserStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 44, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwUserType"), (0, "HUAWEI-AAA-MIB", "hwSlotAccessUserStatSlot"))
if mibBuilder.loadTexts: hwSlotAccessUserStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwSlotAccessUserStatEntry.setDescription('HwSlotAccessUserStatEntry')
hwSlotAccessUserStatSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 44, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotAccessUserStatSlot.setStatus('current')
if mibBuilder.loadTexts: hwSlotAccessUserStatSlot.setDescription('hwSlotAccessUserStatSlot')
hwSlotAccessUserStatUserStat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 44, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotAccessUserStatUserStat.setStatus('current')
if mibBuilder.loadTexts: hwSlotAccessUserStatUserStat.setDescription('hwSlotAccessUserStatUserStat')
hwDomainIncludePoolGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 45), )
if mibBuilder.loadTexts: hwDomainIncludePoolGroupTable.setStatus('current')
if mibBuilder.loadTexts: hwDomainIncludePoolGroupTable.setDescription('Configure a pool group in the specified domain.')
hwDomainIncludePoolGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 45, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwDomainName"), (0, "HUAWEI-AAA-MIB", "hwDomainIncludeIPPoolGroupName"))
if mibBuilder.loadTexts: hwDomainIncludePoolGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hwDomainIncludePoolGroupEntry.setDescription('Configure a pool group in the specified domain.')
hwDomainIncludeIPPoolGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 45, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainIncludeIPPoolGroupName.setStatus('current')
if mibBuilder.loadTexts: hwDomainIncludeIPPoolGroupName.setDescription('The pool group name.')
hwDomainIncludeIPPoolGroupRowStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 45, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDomainIncludeIPPoolGroupRowStates.setStatus('current')
if mibBuilder.loadTexts: hwDomainIncludeIPPoolGroupRowStates.setDescription('The row administration status, only supporting add or delete.')
hwDomainIPPoolMoveToTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 46), )
if mibBuilder.loadTexts: hwDomainIPPoolMoveToTable.setStatus('current')
if mibBuilder.loadTexts: hwDomainIPPoolMoveToTable.setDescription('Change the priority of pool group in the specified domain.')
hwDomainIPPoolMoveToEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 46, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwDomainName"), (0, "HUAWEI-AAA-MIB", "hwDomainIncludeIPPoolName"))
if mibBuilder.loadTexts: hwDomainIPPoolMoveToEntry.setStatus('current')
if mibBuilder.loadTexts: hwDomainIPPoolMoveToEntry.setDescription('Change the priority of pool group in the specified domain.')
hwDomainIncludeIPPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 46, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDomainIncludeIPPoolName.setStatus('current')
if mibBuilder.loadTexts: hwDomainIncludeIPPoolName.setDescription('The pool group name.')
hwDomainIncludeIPPoolMoveto = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 46, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDomainIncludeIPPoolMoveto.setStatus('current')
if mibBuilder.loadTexts: hwDomainIncludeIPPoolMoveto.setDescription('The position of the pool group.')
hwDomainExt2Table = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 47), )
if mibBuilder.loadTexts: hwDomainExt2Table.setStatus('current')
if mibBuilder.loadTexts: hwDomainExt2Table.setDescription('The domain extend table.')
hwDomainExt2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 47, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwDomainName"))
if mibBuilder.loadTexts: hwDomainExt2Entry.setStatus('current')
if mibBuilder.loadTexts: hwDomainExt2Entry.setDescription('The domain extend entry.')
hwRedKeyUserMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 47, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRedKeyUserMac.setStatus('current')
if mibBuilder.loadTexts: hwRedKeyUserMac.setDescription('Configure Web Server Redirect Key UserMacAdress.')
hwIfUserMacSimple = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 47, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfUserMacSimple.setStatus('current')
if mibBuilder.loadTexts: hwIfUserMacSimple.setDescription('if encrypt Web Server Redirect Key UserMacAdress ')
hwPoolLowerLimitWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 47, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 99), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPoolLowerLimitWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: hwPoolLowerLimitWarningThreshold.setDescription('The IP lower limit warning threshold.')
hwIPv6PoolLowerLimitWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 47, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 99), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPv6PoolLowerLimitWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolLowerLimitWarningThreshold.setDescription('The IPv6 lower limit warning threshold.')
hwAAADomainInboundQoSProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 47, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAAADomainInboundQoSProfile.setStatus('current')
if mibBuilder.loadTexts: hwAAADomainInboundQoSProfile.setDescription('Configure inbound QOS Profile ')
hwAAADomainOutboundQoSProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 47, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAAADomainOutboundQoSProfile.setStatus('current')
if mibBuilder.loadTexts: hwAAADomainOutboundQoSProfile.setDescription('Configure outbound QOS Profile ')
hwAAADomainInboundVPNInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 47, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAAADomainInboundVPNInstance.setStatus('current')
if mibBuilder.loadTexts: hwAAADomainInboundVPNInstance.setDescription('The domain inbound VPN instance name ')
hwAAAOnlineFailRecordTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48), )
if mibBuilder.loadTexts: hwAAAOnlineFailRecordTable.setStatus('current')
if mibBuilder.loadTexts: hwAAAOnlineFailRecordTable.setDescription('The online fail record table.')
hwAAAOnlineFailRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwAAAOnlineFailIndex"))
if mibBuilder.loadTexts: hwAAAOnlineFailRecordEntry.setStatus('current')
if mibBuilder.loadTexts: hwAAAOnlineFailRecordEntry.setDescription('The online fail record entry.')
hwAAAOnlineFailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAAAOnlineFailIndex.setStatus('current')
if mibBuilder.loadTexts: hwAAAOnlineFailIndex.setDescription('The index of online fail record.')
hwUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserName.setStatus('current')
if mibBuilder.loadTexts: hwUserName.setDescription('The user name.')
hwUserDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserDomainName.setStatus('current')
if mibBuilder.loadTexts: hwUserDomainName.setDescription('The domain name.')
hwUserMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserMAC.setStatus('current')
if mibBuilder.loadTexts: hwUserMAC.setDescription('The user MAC address.')
hwUserAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserAccessType.setStatus('current')
if mibBuilder.loadTexts: hwUserAccessType.setDescription('The user access type.')
hwUserInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserInterface.setStatus('current')
if mibBuilder.loadTexts: hwUserInterface.setDescription('The user interface.')
hwUserAccessPVC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserAccessPVC.setStatus('current')
if mibBuilder.loadTexts: hwUserAccessPVC.setDescription('The user PVC.')
hwUserAccessPeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserAccessPeVlan.setStatus('current')
if mibBuilder.loadTexts: hwUserAccessPeVlan.setDescription('The user pevlan.')
hwUserAccessCeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserAccessCeVlan.setStatus('current')
if mibBuilder.loadTexts: hwUserAccessCeVlan.setDescription('The user cevlan.')
hwUserIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserIPAddress.setStatus('current')
if mibBuilder.loadTexts: hwUserIPAddress.setDescription('The user ip address.')
hwUserIPv6NDRAPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1, 11), Ipv6AddressPrefix()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserIPv6NDRAPrefix.setStatus('current')
if mibBuilder.loadTexts: hwUserIPv6NDRAPrefix.setDescription('The user ipv6 NDRA prefix.')
hwUserIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1, 12), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserIPv6Address.setStatus('current')
if mibBuilder.loadTexts: hwUserIPv6Address.setDescription('The user ipv6 address.')
hwUserIPv6PDPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1, 13), Ipv6AddressPrefix()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserIPv6PDPrefix.setStatus('current')
if mibBuilder.loadTexts: hwUserIPv6PDPrefix.setDescription('The user ipv6 PD prefix.')
hwUserIPv6PDPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserIPv6PDPrefixLength.setStatus('current')
if mibBuilder.loadTexts: hwUserIPv6PDPrefixLength.setDescription('The user ipv6 PD prefix length.')
hwUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserID.setStatus('current')
if mibBuilder.loadTexts: hwUserID.setDescription('The user index.')
hwUserAuthenState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("authIdle", 0), ("authWait", 1), ("authed", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserAuthenState.setStatus('current')
if mibBuilder.loadTexts: hwUserAuthenState.setDescription('The user authentication state.')
hwUserAcctState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 12, 255))).clone(namedValues=NamedValues(("acctIdle", 3), ("acctReady", 4), ("acctStartWait", 5), ("acctAccting", 6), ("acctLeavingFlowQuery", 7), ("acctStopWait", 8), ("acctSendForceStopWait", 12), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserAcctState.setStatus('current')
if mibBuilder.loadTexts: hwUserAcctState.setDescription('The user accounting state.')
hwUserAuthorState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 10, 11, 255))).clone(namedValues=NamedValues(("authorIdle", 9), ("authorUserAckWait", 10), ("authorServerAckWait", 11), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserAuthorState.setStatus('current')
if mibBuilder.loadTexts: hwUserAuthorState.setDescription('The user authorizatoin state.')
hwUserLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserLoginTime.setStatus('current')
if mibBuilder.loadTexts: hwUserLoginTime.setDescription('The user login time.')
hwOnlineFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOnlineFailReason.setStatus('current')
if mibBuilder.loadTexts: hwOnlineFailReason.setDescription('The online fail reason.')
hwReplyMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 48, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwReplyMessage.setStatus('current')
if mibBuilder.loadTexts: hwReplyMessage.setDescription('The reply message.')
hwUserLogTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 49))
hwUserLogEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 49, 1))
hwUserLogAccess = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 49, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserLogAccess.setStatus('current')
if mibBuilder.loadTexts: hwUserLogAccess.setDescription('User log access')
hwUserLogIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 49, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserLogIPAddress.setStatus('current')
if mibBuilder.loadTexts: hwUserLogIPAddress.setDescription('User log server IP address')
hwUserLogPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 49, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserLogPort.setStatus('current')
if mibBuilder.loadTexts: hwUserLogPort.setDescription('User log server port')
hwUserLogVersion = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 49, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserLogVersion.setStatus('current')
if mibBuilder.loadTexts: hwUserLogVersion.setDescription('User log server version')
hwShowUserLogStatistic = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 49, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwShowUserLogStatistic.setStatus('current')
if mibBuilder.loadTexts: hwShowUserLogStatistic.setDescription('Show user log statistic')
hwResetUserLogStatistic = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 49, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("reset", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwResetUserLogStatistic.setStatus('current')
if mibBuilder.loadTexts: hwResetUserLogStatistic.setDescription('Reset user log statistic')
hwReauthorizeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 50), )
if mibBuilder.loadTexts: hwReauthorizeTable.setStatus('current')
if mibBuilder.loadTexts: hwReauthorizeTable.setDescription("Change user's user-group by username.")
hwReauthorizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 50, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwReauthorizeUsername"))
if mibBuilder.loadTexts: hwReauthorizeEntry.setStatus('current')
if mibBuilder.loadTexts: hwReauthorizeEntry.setDescription("Change user's user-group by username.")
hwReauthorizeUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 50, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwReauthorizeUsername.setStatus('current')
if mibBuilder.loadTexts: hwReauthorizeUsername.setDescription("The user's username.")
hwReauthorizeUsergroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 50, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwReauthorizeUsergroup.setStatus('current')
if mibBuilder.loadTexts: hwReauthorizeUsergroup.setDescription("The user's user-group.")
hwUserGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51), )
if mibBuilder.loadTexts: hwUserGroupTable.setStatus('current')
if mibBuilder.loadTexts: hwUserGroupTable.setDescription('The user group table.')
hwUserGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwUserGroupIndex"))
if mibBuilder.loadTexts: hwUserGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hwUserGroupEntry.setDescription('The user group entry.')
hwUserGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUserGroupIndex.setStatus('current')
if mibBuilder.loadTexts: hwUserGroupIndex.setDescription('User group index.')
hwUserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwUserGroupName.setStatus('current')
if mibBuilder.loadTexts: hwUserGroupName.setDescription('User group name.')
hwAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclId.setStatus('current')
if mibBuilder.loadTexts: hwAclId.setDescription('Specify acl id.')
hwQoSProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQoSProfileName.setStatus('current')
if mibBuilder.loadTexts: hwQoSProfileName.setDescription('Specify QoS Profile.')
hwInterIsolateFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwInterIsolateFlag.setStatus('current')
if mibBuilder.loadTexts: hwInterIsolateFlag.setDescription('Specify Inter Isolate Flag.')
hwInnerIsolateFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwInnerIsolateFlag.setStatus('current')
if mibBuilder.loadTexts: hwInnerIsolateFlag.setDescription('Specify Inner Isolate Flag.')
hwUserGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwUserGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwUserGroupRowStatus.setDescription('RowStatus.')
hwUserVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwUserVlan.setStatus('current')
if mibBuilder.loadTexts: hwUserVlan.setDescription('Specify User Vlan.')
hw8021pRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hw8021pRemark.setStatus('current')
if mibBuilder.loadTexts: hw8021pRemark.setDescription('Specify 8021p Remark.')
hwDscpRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDscpRemark.setStatus('current')
if mibBuilder.loadTexts: hwDscpRemark.setDescription('Specify Dscp Remark.')
hwExpRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwExpRemark.setStatus('current')
if mibBuilder.loadTexts: hwExpRemark.setDescription('Specify Exp Remark.')
hwLpRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLpRemark.setStatus('current')
if mibBuilder.loadTexts: hwLpRemark.setDescription('Specify Lp Remark.')
hwUserGroupCarCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserGroupCarCir.setStatus('current')
if mibBuilder.loadTexts: hwUserGroupCarCir.setDescription('User group commited information rate.')
hwUserGroupCarPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserGroupCarPir.setStatus('current')
if mibBuilder.loadTexts: hwUserGroupCarPir.setDescription('User group peak information rate .')
hwUserGroupCarCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserGroupCarCbs.setStatus('current')
if mibBuilder.loadTexts: hwUserGroupCarCbs.setDescription('User group commited burst size.')
hwUserGroupCarPbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserGroupCarPbs.setStatus('current')
if mibBuilder.loadTexts: hwUserGroupCarPbs.setDescription('User group peak burst size .')
hwUserGroupEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserGroupEnable.setStatus('current')
if mibBuilder.loadTexts: hwUserGroupEnable.setDescription('Description.')
hwUserGroupCarInBoundCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserGroupCarInBoundCir.setStatus('current')
if mibBuilder.loadTexts: hwUserGroupCarInBoundCir.setDescription('User group commited information rate.')
hwUserGroupCarInBoundPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserGroupCarInBoundPir.setStatus('current')
if mibBuilder.loadTexts: hwUserGroupCarInBoundPir.setDescription('User group peak information rate .')
hwUserGroupCarInBoundCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserGroupCarInBoundCbs.setStatus('current')
if mibBuilder.loadTexts: hwUserGroupCarInBoundCbs.setDescription('User group commited burst size.')
hwUserGroupCarInBoundPbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserGroupCarInBoundPbs.setStatus('current')
if mibBuilder.loadTexts: hwUserGroupCarInBoundPbs.setDescription('User group peak burst size .')
hwUserGroupUserVlanPool = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 51, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwUserGroupUserVlanPool.setStatus('current')
if mibBuilder.loadTexts: hwUserGroupUserVlanPool.setDescription('Specify Vlan Pool.')
hwAAAOfflineRecordTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 52), )
if mibBuilder.loadTexts: hwAAAOfflineRecordTable.setStatus('current')
if mibBuilder.loadTexts: hwAAAOfflineRecordTable.setDescription('The offline record table.')
hwAAAOfflineRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 52, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwAAAOfflineIndex"))
if mibBuilder.loadTexts: hwAAAOfflineRecordEntry.setStatus('current')
if mibBuilder.loadTexts: hwAAAOfflineRecordEntry.setDescription('The offline record entry.')
hwAAAOfflineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 52, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAAAOfflineIndex.setStatus('current')
if mibBuilder.loadTexts: hwAAAOfflineIndex.setDescription('The index of offline record.')
hwOfflineRecordUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 52, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOfflineRecordUserName.setStatus('current')
if mibBuilder.loadTexts: hwOfflineRecordUserName.setDescription('The user name.')
hwOfflineRecordDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 52, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOfflineRecordDomainName.setStatus('current')
if mibBuilder.loadTexts: hwOfflineRecordDomainName.setDescription('The domain name.')
hwOfflineRecordUserMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 52, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOfflineRecordUserMAC.setStatus('current')
if mibBuilder.loadTexts: hwOfflineRecordUserMAC.setDescription('The user MAC address.')
hwOfflineRecordAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 52, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOfflineRecordAccessType.setStatus('current')
if mibBuilder.loadTexts: hwOfflineRecordAccessType.setDescription('The user access type.')
hwOfflineRecordInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 52, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOfflineRecordInterface.setStatus('current')
if mibBuilder.loadTexts: hwOfflineRecordInterface.setDescription('The user interface.')
hwOfflineRecordAccessPeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 52, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOfflineRecordAccessPeVlan.setStatus('current')
if mibBuilder.loadTexts: hwOfflineRecordAccessPeVlan.setDescription('The user pevlan.')
hwOfflineRecordAccessCeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 52, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOfflineRecordAccessCeVlan.setStatus('current')
if mibBuilder.loadTexts: hwOfflineRecordAccessCeVlan.setDescription('The user cevlan.')
hwOfflineRecordIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 52, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOfflineRecordIPAddress.setStatus('current')
if mibBuilder.loadTexts: hwOfflineRecordIPAddress.setDescription('The user ip address.')
hwOfflineRecordUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 52, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOfflineRecordUserID.setStatus('current')
if mibBuilder.loadTexts: hwOfflineRecordUserID.setDescription('The user index.')
hwOfflineRecordUserLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 52, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOfflineRecordUserLoginTime.setStatus('current')
if mibBuilder.loadTexts: hwOfflineRecordUserLoginTime.setDescription('The user login time.')
hwOfflineRecordUserLogoutTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 52, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOfflineRecordUserLogoutTime.setStatus('current')
if mibBuilder.loadTexts: hwOfflineRecordUserLogoutTime.setDescription('The user logout time.')
hwOfflineRecordOfflineReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 52, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOfflineRecordOfflineReason.setStatus('current')
if mibBuilder.loadTexts: hwOfflineRecordOfflineReason.setDescription('The offline reason.')
hwGlobalDhcpOpt64SepAndSeg = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwGlobalDhcpOpt64SepAndSeg.setStatus('current')
if mibBuilder.loadTexts: hwGlobalDhcpOpt64SepAndSeg.setDescription('The global option64 parse separator and segment number.')
hwGlobalDhcpServerAck = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 54), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwGlobalDhcpServerAck.setStatus('current')
if mibBuilder.loadTexts: hwGlobalDhcpServerAck.setDescription("The global whether to deal dhcp server's ack packet when user online.")
hwAuthEventCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 55), )
if mibBuilder.loadTexts: hwAuthEventCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwAuthEventCfgTable.setDescription('Description.')
hwAuthEventCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 55, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwAuthEventPortIndex"))
if mibBuilder.loadTexts: hwAuthEventCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwAuthEventCfgEntry.setDescription('Description.')
hwAuthEventPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 55, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAuthEventPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwAuthEventPortIndex.setDescription('Description.')
hwAuthEventAuthFailResponseFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 55, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disabel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAuthEventAuthFailResponseFail.setStatus('current')
if mibBuilder.loadTexts: hwAuthEventAuthFailResponseFail.setDescription('Description.')
hwAuthEventAuthFailVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 55, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAuthEventAuthFailVlan.setStatus('current')
if mibBuilder.loadTexts: hwAuthEventAuthFailVlan.setDescription('Description.')
hwAuthEventAuthenServerDownResponseFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 55, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAuthEventAuthenServerDownResponseFail.setStatus('current')
if mibBuilder.loadTexts: hwAuthEventAuthenServerDownResponseFail.setDescription('Description.')
hwAuthEventAuthenServerDownVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 55, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAuthEventAuthenServerDownVlan.setStatus('current')
if mibBuilder.loadTexts: hwAuthEventAuthenServerDownVlan.setDescription('Description.')
hwAuthEventClientNoResponseVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 55, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAuthEventClientNoResponseVlan.setStatus('current')
if mibBuilder.loadTexts: hwAuthEventClientNoResponseVlan.setDescription('Description.')
hwAuthEventPreAuthVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 55, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAuthEventPreAuthVlan.setStatus('current')
if mibBuilder.loadTexts: hwAuthEventPreAuthVlan.setDescription('Description.')
hwAuthEventAuthFailUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 55, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAuthEventAuthFailUserGroup.setStatus('current')
if mibBuilder.loadTexts: hwAuthEventAuthFailUserGroup.setDescription('Description.')
hwAuthEventAuthenServerDownUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 55, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAuthEventAuthenServerDownUserGroup.setStatus('current')
if mibBuilder.loadTexts: hwAuthEventAuthenServerDownUserGroup.setDescription('Description.')
hwAuthEventClientNoResponseUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 55, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAuthEventClientNoResponseUserGroup.setStatus('current')
if mibBuilder.loadTexts: hwAuthEventClientNoResponseUserGroup.setDescription('Description.')
hwAuthEventPreAuthUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 55, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAuthEventPreAuthUserGroup.setStatus('current')
if mibBuilder.loadTexts: hwAuthEventPreAuthUserGroup.setDescription('Description.')
hwWlanInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 56), )
if mibBuilder.loadTexts: hwWlanInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hwWlanInterfaceTable.setDescription('Description.')
hwWlanInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 56, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwWlanInterfaceIndex"))
if mibBuilder.loadTexts: hwWlanInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hwWlanInterfaceEntry.setDescription('Description.')
hwWlanInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 56, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWlanInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hwWlanInterfaceIndex.setDescription('The index of wlan interface.')
hwWlanInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 56, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanInterfaceName.setStatus('current')
if mibBuilder.loadTexts: hwWlanInterfaceName.setDescription('The name of wlan interface.')
hwWlanInterfaceDomainNameDelimiter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 56, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanInterfaceDomainNameDelimiter.setStatus('current')
if mibBuilder.loadTexts: hwWlanInterfaceDomainNameDelimiter.setDescription(" Domain name delimiter of interface. include \\ / : < > | @ ' % It can not be same with hwWlanInterfaceDomainNameSecurityDelimiter. ")
hwWlanInterfaceDomainNameSecurityDelimiter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 56, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanInterfaceDomainNameSecurityDelimiter.setStatus('current')
if mibBuilder.loadTexts: hwWlanInterfaceDomainNameSecurityDelimiter.setDescription(" Domain name delimiter of interface. include \\ / : < > | @ ' % It can not be same with hwWlanInterfaceDomainNameDelimiter. ")
hwWlanInterfaceDomainNameParseDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 56, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("lefttoright", 0), ("righttoleft", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanInterfaceDomainNameParseDirection.setStatus('current')
if mibBuilder.loadTexts: hwWlanInterfaceDomainNameParseDirection.setDescription(' The domain name resolution sequence of interface: lefttoright(0), righttoleft(1) ')
hwWlanInterfaceDomainNameLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 56, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("beforedelimiter", 0), ("afterdelimiter", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanInterfaceDomainNameLocation.setStatus('current')
if mibBuilder.loadTexts: hwWlanInterfaceDomainNameLocation.setDescription(' The domain name position of interface: beforedelimiter(0), afterdelimiter(1) ')
hwAuthorCmdTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 57), )
if mibBuilder.loadTexts: hwAuthorCmdTable.setStatus('current')
if mibBuilder.loadTexts: hwAuthorCmdTable.setDescription('Description.')
hwAuthorCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 57, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwAuthorSchemeName"), (0, "HUAWEI-AAA-MIB", "hwAuthorCmdLevel"))
if mibBuilder.loadTexts: hwAuthorCmdEntry.setStatus('current')
if mibBuilder.loadTexts: hwAuthorCmdEntry.setDescription('Description.')
hwAuthorCmdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 57, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAuthorCmdLevel.setStatus('current')
if mibBuilder.loadTexts: hwAuthorCmdLevel.setDescription('authorization cmd level')
hwAuthorCmdMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 57, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("hwtacacs", 0), ("hwtacacsnone", 1), ("hwtacacslocal", 2), ("hwtacacslocalnone", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAuthorCmdMode.setStatus('current')
if mibBuilder.loadTexts: hwAuthorCmdMode.setDescription('authorization cmd method ')
hwAuthorCmdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 57, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAuthorCmdRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwAuthorCmdRowStatus.setDescription('The authorization cmd method status, only supporting add or delete.')
hwAAARateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 58), )
if mibBuilder.loadTexts: hwAAARateTable.setStatus('current')
if mibBuilder.loadTexts: hwAAARateTable.setDescription('Tariff package table.')
hwAAARateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 58, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwAAARateDirection"), (0, "HUAWEI-AAA-MIB", "hwAAARateType"))
if mibBuilder.loadTexts: hwAAARateEntry.setStatus('current')
if mibBuilder.loadTexts: hwAAARateEntry.setDescription('Tariff package entry.')
hwAAARateDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 58, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAAARateDirection.setStatus('current')
if mibBuilder.loadTexts: hwAAARateDirection.setDescription('Tariff direction.')
hwAAARateType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 58, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAAARateType.setStatus('current')
if mibBuilder.loadTexts: hwAAARateType.setDescription('Tariff package type.')
hwAAARateRealPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 58, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAAARateRealPeak.setStatus('current')
if mibBuilder.loadTexts: hwAAARateRealPeak.setDescription('The highest average rate.')
hwAAARateRealAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 58, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAAARateRealAverage.setStatus('current')
if mibBuilder.loadTexts: hwAAARateRealAverage.setDescription('The actual average rate.')
hwAAARateRealUsedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 58, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAAARateRealUsedCount.setStatus('current')
if mibBuilder.loadTexts: hwAAARateRealUsedCount.setDescription('The number of users.')
hwAAARateRealPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 58, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAAARateRealPercent.setStatus('current')
if mibBuilder.loadTexts: hwAAARateRealPercent.setDescription('Users rate accounted for the total bandwidth ratio, ratio range of 0-100.')
hwLocalUserPwPolicyAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 59))
hwLocalUserPwPolicyAdminEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 59, 1))
hwAdminEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 59, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAdminEnable.setStatus('current')
if mibBuilder.loadTexts: hwAdminEnable.setDescription('Is Local user pw-policy enable.')
hwAdminExpire = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 59, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAdminExpire.setStatus('current')
if mibBuilder.loadTexts: hwAdminExpire.setDescription('Pw expire time.')
hwAdminPwHistroyRecordNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 59, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAdminPwHistroyRecordNum.setStatus('current')
if mibBuilder.loadTexts: hwAdminPwHistroyRecordNum.setDescription('Pw Histroy Record Num.')
hwAdminAlertBefore = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 59, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAdminAlertBefore.setStatus('current')
if mibBuilder.loadTexts: hwAdminAlertBefore.setDescription('Alert time before pw expire.')
hwAdminAlertOrginal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 59, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAdminAlertOrginal.setStatus('current')
if mibBuilder.loadTexts: hwAdminAlertOrginal.setDescription('Is original pw changed.')
hwLocalUserPwPolicyAcc = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 60))
hwLocalUserPwPolicyAccEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 60, 1))
hwAccEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 60, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAccEnable.setStatus('current')
if mibBuilder.loadTexts: hwAccEnable.setDescription('Is Local user pwpolicy enable.')
hwAccPwHistroyRecordNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 60, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAccPwHistroyRecordNum.setStatus('current')
if mibBuilder.loadTexts: hwAccPwHistroyRecordNum.setDescription('Pw Histroy Record Num.')
hwAAADomainIPPoolTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 61), )
if mibBuilder.loadTexts: hwAAADomainIPPoolTable.setStatus('current')
if mibBuilder.loadTexts: hwAAADomainIPPoolTable.setDescription('The pool of domain table.')
hwAAADomainIPPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 61, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwDomainName"), (0, "HUAWEI-AAA-MIB", "hwAAADomainIPPoolName"))
if mibBuilder.loadTexts: hwAAADomainIPPoolEntry.setStatus('current')
if mibBuilder.loadTexts: hwAAADomainIPPoolEntry.setDescription('The pool of domain entry.')
hwAAADomainIPPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 61, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAAADomainIPPoolName.setStatus('current')
if mibBuilder.loadTexts: hwAAADomainIPPoolName.setDescription('The pool name.')
hwAAADomainIPPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 61, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAAADomainIPPoolIndex.setStatus('current')
if mibBuilder.loadTexts: hwAAADomainIPPoolIndex.setDescription('The IP pool index.')
hwAAADomainIPPoolConstantIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 61, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAAADomainIPPoolConstantIndex.setStatus('current')
if mibBuilder.loadTexts: hwAAADomainIPPoolConstantIndex.setDescription('The IP pool constant index.')
hwAAADomainIPPoolPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 61, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAAADomainIPPoolPosition.setStatus('current')
if mibBuilder.loadTexts: hwAAADomainIPPoolPosition.setDescription('The IP pool position in domain.')
hwAAADomainIPPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 61, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAAADomainIPPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwAAADomainIPPoolRowStatus.setDescription('The row administration status, only supporting add or delete.')
userAuthenProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62), )
if mibBuilder.loadTexts: userAuthenProfileTable.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileTable.setDescription('The authentication profile table.')
userAuthenProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "userAuthenProfileName"))
if mibBuilder.loadTexts: userAuthenProfileEntry.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileEntry.setDescription('The authentication profile entry.')
userAuthenProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userAuthenProfileName.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileName.setDescription('The authentication profile name.')
userAuthenProfileDot1xAccessProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileDot1xAccessProfileName.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileDot1xAccessProfileName.setDescription('The dot1x access profile name.')
userAuthenProfileMacAuthenAccessProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileMacAuthenAccessProfileName.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileMacAuthenAccessProfileName.setDescription('The mac-authen access profile name.')
userAuthenProfilePortalAccessProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfilePortalAccessProfileName.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfilePortalAccessProfileName.setDescription('The portal access profile name.')
userAuthenProfileSingleAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileSingleAccess.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileSingleAccess.setDescription('The portal access profile name.')
userAuthenProfilePreAuthenServiceSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfilePreAuthenServiceSchemeName.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfilePreAuthenServiceSchemeName.setDescription('The pre-authen service scheme name.')
userAuthenProfilePreAuthenUserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfilePreAuthenUserGroupName.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfilePreAuthenUserGroupName.setDescription('The pre-authen user group or ucl group name. This object is shared by a user group and ucl group name. The value for a user group name rangs from 1 to 64, and the value for a ucl group name ranges from 1 to 31.')
userAuthenProfilePreAuthenVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfilePreAuthenVLAN.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfilePreAuthenVLAN.setDescription('The pre-authen VLAN.')
userAuthenProfileAuthenFailAuthorServiceSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileAuthenFailAuthorServiceSchemeName.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileAuthenFailAuthorServiceSchemeName.setDescription('The authen-fail service scheme name.')
userAuthenProfileAuthenFailAuthorUserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileAuthenFailAuthorUserGroupName.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileAuthenFailAuthorUserGroupName.setDescription('The authen-fail user group or ucl group name. This object is shared by a user group and ucl group name. The value for a user group name rangs from 1 to 64, and the value for a ucl group name ranges from 1 to 31.')
userAuthenProfileAuthenFailAuthorVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileAuthenFailAuthorVLAN.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileAuthenFailAuthorVLAN.setDescription('The authen-fail VLAN.')
userAuthenProfileAuthenServerDownServiceSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileAuthenServerDownServiceSchemeName.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileAuthenServerDownServiceSchemeName.setDescription('The authen-server-down service scheme name.')
userAuthenProfileAuthenServerDownUserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileAuthenServerDownUserGroupName.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileAuthenServerDownUserGroupName.setDescription('The authen-server-down user group or ucl group name. This object is shared by a user group and ucl group name. The value for a user group name rangs from 1 to 64, and the value for a ucl group name ranges from 1 to 31.')
userAuthenProfileAuthenServerDownVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileAuthenServerDownVLAN.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileAuthenServerDownVLAN.setDescription('The authen-server-down VLAN.')
userAuthenProfileAuthenServerDownResponseSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 15), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileAuthenServerDownResponseSuccess.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileAuthenServerDownResponseSuccess.setDescription('The authen-server-down response success.')
userAuthenProfileAuthenServerUpReauthen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 16), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileAuthenServerUpReauthen.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileAuthenServerUpReauthen.setDescription('The authen-server-up reauthentication.')
userAuthenProfileMacAuthenFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileMacAuthenFirst.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileMacAuthenFirst.setDescription('The mac-authen first switch.')
userAuthenProfileMACBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 18), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileMACBypass.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileMACBypass.setDescription('The mac bypass switch.')
userAuthenProfileDot1xForceDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileDot1xForceDomain.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileDot1xForceDomain.setDescription('The force domain for dot1x.')
userAuthenProfileMACAuthenForceDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileMACAuthenForceDomain.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileMACAuthenForceDomain.setDescription('The force domain for MAC authen.')
userAuthenProfilePortalForceDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfilePortalForceDomain.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfilePortalForceDomain.setDescription('The force domain for portal.')
userAuthenProfileDot1xDefaultDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileDot1xDefaultDomain.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileDot1xDefaultDomain.setDescription('The default domain for dot1x.')
userAuthenProfileMACAuthenDefaultDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileMACAuthenDefaultDomain.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileMACAuthenDefaultDomain.setDescription('The default domain for MAC authen.')
userAuthenProfilePortalDefaultDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfilePortalDefaultDomain.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfilePortalDefaultDomain.setDescription('The default domain for portal.')
userAuthenProfileDefaultDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileDefaultDomain.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileDefaultDomain.setDescription('The default domain.')
userAuthenProfileForceDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileForceDomain.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileForceDomain.setDescription('The force domain.')
userAuthenProfileDomainNameDelimiter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileDomainNameDelimiter.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileDomainNameDelimiter.setDescription('Domain name delimiter.')
userAuthenProfileDomainNameLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("domainnamepositionahead", 0), ("domainnamepositionbehind", 1), ("domainnamepositioninvalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileDomainNameLocation.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileDomainNameLocation.setDescription('Domain name location.')
userAuthenProfileDomainNameParseDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("domainparselefttoright", 0), ("domainparserighttoleft", 1), ("domainparseinvalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileDomainNameParseDirection.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileDomainNameParseDirection.setDescription('Domain name parse direction.')
userAuthenProfileSecurityNameDelimiter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileSecurityNameDelimiter.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileSecurityNameDelimiter.setDescription('The security name delimiter.')
userAuthenProfilePreAuthenReAuthenTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(30, 7200), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfilePreAuthenReAuthenTimer.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfilePreAuthenReAuthenTimer.setDescription('The reauthenticate time for pre-authen.')
userAuthenProfileAuthenFailReAuthenTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(30, 7200), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileAuthenFailReAuthenTimer.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileAuthenFailReAuthenTimer.setDescription('The reauthenticate time for authen-fail.')
userAuthenProfilePreAuthenAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 4294860), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfilePreAuthenAgingTime.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfilePreAuthenAgingTime.setDescription('The aging time for pre-authen.')
userAuthenProfileAuthenFailAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 4294860), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileAuthenFailAgingTime.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileAuthenFailAgingTime.setDescription('The aging time for authen-fail.')
userAuthenProfileFreeRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileFreeRuleName.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileFreeRuleName.setDescription('The free rule name.')
userAuthenProfileAuthenSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 36), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileAuthenSchemeName.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileAuthenSchemeName.setDescription('The authentication scheme name.')
userAuthenProfileAuthorSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileAuthorSchemeName.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileAuthorSchemeName.setDescription('The authorization scheme name.')
userAuthenProfileAcctSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 38), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileAcctSchemeName.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileAcctSchemeName.setDescription('The accouting scheme name.')
userAuthenProfileServiceSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 39), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileServiceSchemeName.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileServiceSchemeName.setDescription('The service scheme name.')
userAuthenProfileUserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 40), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileUserGroupName.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileUserGroupName.setDescription('The user group name.')
userAuthenProfileRadiusServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 41), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileRadiusServerName.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileRadiusServerName.setDescription('The radius server name.')
userAuthenProfileHwtacacsServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 42), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileHwtacacsServerName.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileHwtacacsServerName.setDescription('The hwtacacs server name.')
userAuthenProfileAuthenticationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("singleterminal", 0), ("singlevoicewithdata", 1), ("multishare", 2), ("multiterminal", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileAuthenticationMode.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileAuthenticationMode.setDescription('The authentication mode.')
userAuthenProfileMaxUser = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 44), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileMaxUser.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileMaxUser.setDescription('The max user number.')
userAuthenProfileArpDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 45), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileArpDetect.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileArpDetect.setDescription('The arp detect switch.')
userAuthenProfileArpDetectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 7200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileArpDetectTimer.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileArpDetectTimer.setDescription('The arp detect period.')
userAuthenProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 47), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileRowStatus.setDescription('The row administration status, only supporting add or delete.')
userAuthenProfilePermitDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 48), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 259))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfilePermitDomain.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfilePermitDomain.setDescription('The permit domain.')
userAuthenProfileAuthenticationMaxUser = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileAuthenticationMaxUser.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileAuthenticationMaxUser.setDescription('Wlan ess max user.')
userAuthenProfileAuthenFailAuthorResponseSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 62, 1, 50), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenProfileAuthenFailAuthorResponseSuccess.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileAuthenFailAuthorResponseSuccess.setDescription('The authen-fail response success.')
userAuthenticationFreeRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 63), )
if mibBuilder.loadTexts: userAuthenticationFreeRuleTable.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleTable.setDescription('The authentication free rule table.')
userAuthenticationFreeRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 63, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "userAuthenticationFreeRuleName"))
if mibBuilder.loadTexts: userAuthenticationFreeRuleEntry.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleEntry.setDescription('The authentication free rule entry.')
userAuthenticationFreeRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 63, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userAuthenticationFreeRuleName.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleName.setDescription('The authentication free rule name.')
userAuthenticationFreeRuleACLNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 63, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(6000, 6031), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenticationFreeRuleACLNumber.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleACLNumber.setDescription('The ACL number.')
userAuthenticationFreeRuleIPv6ACLNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 63, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3000, 3031), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenticationFreeRuleIPv6ACLNumber.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleIPv6ACLNumber.setDescription('The ACL number for ipv6.')
userAuthenticationFreeRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 63, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthenticationFreeRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleRowStatus.setDescription('The row administration status, only supporting add or delete.')
hwDot1xAccessProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64), )
if mibBuilder.loadTexts: hwDot1xAccessProfileTable.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileTable.setDescription('The dot1x access profile table.')
hwDot1xAccessProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwDot1xAccessProfileName"))
if mibBuilder.loadTexts: hwDot1xAccessProfileEntry.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileEntry.setDescription('The dot1x access profile entry.')
hwDot1xAccessProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xAccessProfileName.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileName.setDescription('The dot1x access profile name.')
hwDot1xAccessProfileGuestAuthorServiceSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xAccessProfileGuestAuthorServiceSchemeName.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileGuestAuthorServiceSchemeName.setDescription('The guest service scheme name.')
hwDot1xAccessProfileGuestAuthorUserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xAccessProfileGuestAuthorUserGroupName.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileGuestAuthorUserGroupName.setDescription('The guest user group name.')
hwDot1xAccessProfileGuestAuthorVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xAccessProfileGuestAuthorVLAN.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileGuestAuthorVLAN.setDescription('The guest VLAN.')
hwDot1xAccessProfileHandshakeSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xAccessProfileHandshakeSwitch.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileHandshakeSwitch.setDescription('The handshake switch.')
hwDot1xAccessProfileHandShakePktType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 20))).clone(namedValues=NamedValues(("default", 1), ("srpsha1", 20)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xAccessProfileHandShakePktType.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileHandShakePktType.setDescription('The handshake packet type.')
hwDot1xAccessProfileHandshakeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 7200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xAccessProfileHandshakeInterval.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileHandshakeInterval.setDescription('The handshake period.')
hwDot1xAccessProfileIfEAPEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xAccessProfileIfEAPEnd.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileIfEAPEnd.setDescription('The EAP end.')
hwDot1xAccessProfileEAPEndMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("chap", 1), ("pap", 2), ("eap", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xAccessProfileEAPEndMethod.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileEAPEndMethod.setDescription('The authentication method.')
hwDot1xAccessProfileEAPNotifyPktEAPCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xAccessProfileEAPNotifyPktEAPCode.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileEAPNotifyPktEAPCode.setDescription('The EAP packet type.')
hwDot1xAccessProfileEAPNotifyPktEAPType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xAccessProfileEAPNotifyPktEAPType.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileEAPNotifyPktEAPType.setDescription('The EAP packet data type.')
hwDot1xAccessProfileReAuthenEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xAccessProfileReAuthenEnable.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileReAuthenEnable.setDescription('Enable reauthenticate.')
hwDot1xAccessProfileReauthenticationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 7200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xAccessProfileReauthenticationTimeout.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileReauthenticationTimeout.setDescription('The reauthenticate time.')
hwDot1xAccessProfileClientTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xAccessProfileClientTimeout.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileClientTimeout.setDescription('The client timeout.')
hwDot1xAccessProfileServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xAccessProfileServerTimeout.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileServerTimeout.setDescription('The server timeout.')
hwDot1xAccessProfileTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xAccessProfileTxPeriod.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileTxPeriod.setDescription('The tx period.')
hwDot1xAccessProfileMaxRetryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xAccessProfileMaxRetryValue.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileMaxRetryValue.setDescription('The max retry value.')
hwDot1xAccessProfileSpeedLimitAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 18), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xAccessProfileSpeedLimitAuto.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileSpeedLimitAuto.setDescription('Enable speed limit automatically.')
hwDot1xAccessProfileTriggerPktType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("arp", 1), ("dhcp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xAccessProfileTriggerPktType.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileTriggerPktType.setDescription('The max retry value.')
hwDot1xAccessProfileUnicastTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 20), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xAccessProfileUnicastTrigger.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileUnicastTrigger.setDescription('The unicast trigger switch.')
hwDot1xAccessProfileURL = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xAccessProfileURL.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileURL.setDescription('The url.')
hwDot1xAccessProfileEthTrunkHandShakePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 7200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xAccessProfileEthTrunkHandShakePeriod.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileEthTrunkHandShakePeriod.setDescription('The handshake period for Eth-Trunk port.')
hwDot1xAccessProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 64, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xAccessProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileRowStatus.setDescription('The row administration status, only supporting add or delete.')
hwMACAuthenAccessProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 65), )
if mibBuilder.loadTexts: hwMACAuthenAccessProfileTable.setStatus('current')
if mibBuilder.loadTexts: hwMACAuthenAccessProfileTable.setDescription('The MAC-authen access profile table.')
hwMACAuthenAccessProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 65, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwMACAuthenAccessProfileName"))
if mibBuilder.loadTexts: hwMACAuthenAccessProfileEntry.setStatus('current')
if mibBuilder.loadTexts: hwMACAuthenAccessProfileEntry.setDescription('The MAC-authen access profile entry.')
hwMACAuthenAccessProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 65, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMACAuthenAccessProfileName.setStatus('current')
if mibBuilder.loadTexts: hwMACAuthenAccessProfileName.setDescription('The MAC-authen access profile name.')
hwMACAuthenAccessProfileReAuthenEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 65, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACAuthenAccessProfileReAuthenEnable.setStatus('current')
if mibBuilder.loadTexts: hwMACAuthenAccessProfileReAuthenEnable.setDescription('The reauthenticate switch.')
hwMACAuthenAccessProfileReauthenticationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 65, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 7200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACAuthenAccessProfileReauthenticationTimeout.setStatus('current')
if mibBuilder.loadTexts: hwMACAuthenAccessProfileReauthenticationTimeout.setDescription('The reauthenticate period.')
hwMACAuthenAccessProfileServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 65, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACAuthenAccessProfileServerTimeout.setStatus('current')
if mibBuilder.loadTexts: hwMACAuthenAccessProfileServerTimeout.setDescription('The server timeout period.')
hwMACAuthenAccessProfileUserNameFixedUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 65, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACAuthenAccessProfileUserNameFixedUserName.setStatus('current')
if mibBuilder.loadTexts: hwMACAuthenAccessProfileUserNameFixedUserName.setDescription('The fixed username.')
hwMACAuthenAccessProfileFixedPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 65, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACAuthenAccessProfileFixedPassword.setStatus('current')
if mibBuilder.loadTexts: hwMACAuthenAccessProfileFixedPassword.setDescription('The fixed password.')
hwMACAuthenAccessProfileMACAddressFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 65, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("macAddressWithoutHyphen", 1), ("macAddressWithHyphen", 2), ("fixed", 3), ("option", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACAuthenAccessProfileMACAddressFormat.setStatus('current')
if mibBuilder.loadTexts: hwMACAuthenAccessProfileMACAddressFormat.setDescription('The MAC address format.')
hwMACAuthenAccessProfileMACAddressPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 65, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACAuthenAccessProfileMACAddressPassword.setStatus('current')
if mibBuilder.loadTexts: hwMACAuthenAccessProfileMACAddressPassword.setDescription('The MAC address password.')
hwMACAuthenAccessProfileUserNameDHCPOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 65, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 82))).clone(namedValues=NamedValues(("default", 0), ("dhcpoption", 82)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACAuthenAccessProfileUserNameDHCPOption.setStatus('current')
if mibBuilder.loadTexts: hwMACAuthenAccessProfileUserNameDHCPOption.setDescription('The DHCP option.')
hwMACAuthenAccessProfileUserNameDHCPOSubOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 65, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("optionsubinvalid", 0), ("optionsubcircuitid", 1), ("optionremoteid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACAuthenAccessProfileUserNameDHCPOSubOption.setStatus('current')
if mibBuilder.loadTexts: hwMACAuthenAccessProfileUserNameDHCPOSubOption.setDescription('The DHCP suboption.')
hwMACAuthenAccessProfileTriggerPktType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 65, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACAuthenAccessProfileTriggerPktType.setStatus('current')
if mibBuilder.loadTexts: hwMACAuthenAccessProfileTriggerPktType.setDescription('The trigger packet type. 0xFF all 0x02 arp 0x04 dhcp 0x08 nd 0x10 dhcpv6')
hwMACAuthenAccessProfileTriggerDHCPOptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 65, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 82))).clone(namedValues=NamedValues(("default", 0), ("optioncode", 82)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACAuthenAccessProfileTriggerDHCPOptionType.setStatus('current')
if mibBuilder.loadTexts: hwMACAuthenAccessProfileTriggerDHCPOptionType.setDescription('The DHCP suboption.')
hwMACAuthenAccessProfileDHCPRelaseOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 65, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACAuthenAccessProfileDHCPRelaseOffline.setStatus('current')
if mibBuilder.loadTexts: hwMACAuthenAccessProfileDHCPRelaseOffline.setDescription('The dhcp release offline switch .')
hwMACAuthenAccessProfileDHCPRenewReAuthen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 65, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACAuthenAccessProfileDHCPRenewReAuthen.setStatus('current')
if mibBuilder.loadTexts: hwMACAuthenAccessProfileDHCPRenewReAuthen.setDescription('The dhcp renew reauthenticate switch.')
hwMACAuthenAccessProfilePermitAuthenMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 65, 1, 15), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACAuthenAccessProfilePermitAuthenMAC.setStatus('current')
if mibBuilder.loadTexts: hwMACAuthenAccessProfilePermitAuthenMAC.setDescription('The permit mac address.')
hwMACAuthenAccessProfilePermitAuthenMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 65, 1, 16), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACAuthenAccessProfilePermitAuthenMACMask.setStatus('current')
if mibBuilder.loadTexts: hwMACAuthenAccessProfilePermitAuthenMACMask.setDescription('The mask of permit mac address.')
hwMACAuthenAccessProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 65, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMACAuthenAccessProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMACAuthenAccessProfileRowStatus.setDescription('The row administration status, only supporting add or delete.')
hwPortalAccessProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 66), )
if mibBuilder.loadTexts: hwPortalAccessProfileTable.setStatus('current')
if mibBuilder.loadTexts: hwPortalAccessProfileTable.setDescription('The portal access profile table.')
hwPortalAccessProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 66, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwPortalAccessProfileName"))
if mibBuilder.loadTexts: hwPortalAccessProfileEntry.setStatus('current')
if mibBuilder.loadTexts: hwPortalAccessProfileEntry.setDescription('The portal access profile entry.')
hwPortalAccessProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 66, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalAccessProfileName.setStatus('current')
if mibBuilder.loadTexts: hwPortalAccessProfileName.setDescription('The portal access profile name.')
hwPortalAccessProfileDetectPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 66, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(30, 7200), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortalAccessProfileDetectPeriod.setStatus('current')
if mibBuilder.loadTexts: hwPortalAccessProfileDetectPeriod.setDescription('The detect period.')
hwPortalAccessProfilePortalServerDownServiceSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 66, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortalAccessProfilePortalServerDownServiceSchemeName.setStatus('current')
if mibBuilder.loadTexts: hwPortalAccessProfilePortalServerDownServiceSchemeName.setDescription('The portal server down service scheme.')
hwPortalAccessProfilePortalServerDownUserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 66, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortalAccessProfilePortalServerDownUserGroupName.setStatus('current')
if mibBuilder.loadTexts: hwPortalAccessProfilePortalServerDownUserGroupName.setDescription('The portal server down user group.')
hwPortalAccessProfilePortalServerUpReAuthen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 66, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortalAccessProfilePortalServerUpReAuthen.setStatus('current')
if mibBuilder.loadTexts: hwPortalAccessProfilePortalServerUpReAuthen.setDescription('The portal server up reauthenticate.')
hwPortalAccessProfileAlarmUserLowNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 66, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortalAccessProfileAlarmUserLowNum.setStatus('current')
if mibBuilder.loadTexts: hwPortalAccessProfileAlarmUserLowNum.setDescription('The minum alarm user number.')
hwPortalAccessProfileAlarmUserHighNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 66, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortalAccessProfileAlarmUserHighNum.setStatus('current')
if mibBuilder.loadTexts: hwPortalAccessProfileAlarmUserHighNum.setDescription('The maxium alarm user number.')
hwPortalAccessProfileAuthenNetWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 66, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortalAccessProfileAuthenNetWork.setStatus('current')
if mibBuilder.loadTexts: hwPortalAccessProfileAuthenNetWork.setDescription('The ip address of authentication network.')
hwPortalAccessProfileAuthenNetWorkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 66, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortalAccessProfileAuthenNetWorkMask.setStatus('current')
if mibBuilder.loadTexts: hwPortalAccessProfileAuthenNetWorkMask.setDescription('The mask of ip address of authentication network.')
hwPortalAccessProfilePortalServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 66, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortalAccessProfilePortalServerName.setStatus('current')
if mibBuilder.loadTexts: hwPortalAccessProfilePortalServerName.setDescription('The portal server name.')
hwPortalAccessProfilePortalAccessDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 66, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("invalid", 0), ("direct", 2), ("layer3", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortalAccessProfilePortalAccessDirect.setStatus('current')
if mibBuilder.loadTexts: hwPortalAccessProfilePortalAccessDirect.setDescription('The type of portal authentication.')
hwPortalAccessProfileLocalServerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 66, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortalAccessProfileLocalServerEnable.setStatus('current')
if mibBuilder.loadTexts: hwPortalAccessProfileLocalServerEnable.setDescription('The local portal server switch.')
hwPortalAccessProfileLocalServerAnonymous = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 66, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortalAccessProfileLocalServerAnonymous.setStatus('current')
if mibBuilder.loadTexts: hwPortalAccessProfileLocalServerAnonymous.setDescription('The local portal server anonymous switch.')
hwPortalAccessProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 66, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortalAccessProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwPortalAccessProfileRowStatus.setDescription('The row administration status, only supporting add or delete.')
hwPortalAccessProfilePortalBackupServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 66, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortalAccessProfilePortalBackupServerName.setStatus('current')
if mibBuilder.loadTexts: hwPortalAccessProfilePortalBackupServerName.setDescription('The portal backup server name.')
hwAAAInboundVPNAccessUserStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 67), )
if mibBuilder.loadTexts: hwAAAInboundVPNAccessUserStatTable.setStatus('current')
if mibBuilder.loadTexts: hwAAAInboundVPNAccessUserStatTable.setDescription('hwAAAInboundVPNAccessUserStatTable')
hwAAAInboundVPNAccessUserStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 67, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "hwAAAInboundVPNUserType"), (0, "HUAWEI-AAA-MIB", "hwAAAInboundVPNName"))
if mibBuilder.loadTexts: hwAAAInboundVPNAccessUserStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwAAAInboundVPNAccessUserStatEntry.setDescription('hwAAAInboundVPNAccessUserStatEntry')
hwAAAInboundVPNUserType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 67, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("pppoe", 1), ("pppoa", 2), ("dhcp", 3), ("lns", 4), ("lac", 5), ("ipv4", 6), ("ipv6", 7), ("dualStack", 8), ("all", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAAAInboundVPNUserType.setStatus('current')
if mibBuilder.loadTexts: hwAAAInboundVPNUserType.setDescription('user type 1:pppoe 2:pppoa 3:dhcp 4:lns 5:lac 6:ipv4 7:ipv6 8:dualStack 9:all')
hwAAAInboundVPNName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 67, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAAAInboundVPNName.setStatus('current')
if mibBuilder.loadTexts: hwAAAInboundVPNName.setDescription('hwAAAInboundVPNName')
hwAAAInboundVPNAccessUserStat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 67, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAAAInboundVPNAccessUserStat.setStatus('current')
if mibBuilder.loadTexts: hwAAAInboundVPNAccessUserStat.setDescription('hwAAAInboundVPNAccessUserStat')
userAuthenticationFreeRuleExtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 68), )
if mibBuilder.loadTexts: userAuthenticationFreeRuleExtTable.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleExtTable.setDescription('The authentication free rule extend table.')
userAuthenticationFreeRuleExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 68, 1), ).setIndexNames((0, "HUAWEI-AAA-MIB", "userAuthenticationFreeRuleName"), (0, "HUAWEI-AAA-MIB", "userAuthenticationFreeRuleNumber"))
if mibBuilder.loadTexts: userAuthenticationFreeRuleExtEntry.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleExtEntry.setDescription('The authentication free rule extend entry.')
userAuthenticationFreeRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 68, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 129))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userAuthenticationFreeRuleNumber.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleNumber.setDescription('The free rule id.')
userAuthenticationFreeRuleSourceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 68, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userAuthenticationFreeRuleSourceMode.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleSourceMode.setDescription('The free rule source mode.')
userAuthenticationFreeRuleSourceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 68, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userAuthenticationFreeRuleSourceVlan.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleSourceVlan.setDescription('The free rule source vlan.')
userAuthenticationFreeRuleSourceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 68, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userAuthenticationFreeRuleSourceInterface.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleSourceInterface.setDescription('The free rule source interface.')
userAuthenticationFreeRuleSourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 68, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userAuthenticationFreeRuleSourceIP.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleSourceIP.setDescription('The free rule source ip address.')
userAuthenticationFreeRuleSourceIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 68, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userAuthenticationFreeRuleSourceIPMask.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleSourceIPMask.setDescription('The mask of free rule source ip address.')
userAuthenticationFreeRuleSourceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 68, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userAuthenticationFreeRuleSourceMac.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleSourceMac.setDescription('The free rule source mac address.')
userAuthenticationFreeRuleDestinationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 68, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userAuthenticationFreeRuleDestinationMode.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleDestinationMode.setDescription('The free rule destination mode.')
userAuthenticationFreeRuleDestinationIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 68, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userAuthenticationFreeRuleDestinationIP.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleDestinationIP.setDescription('The free rule destination ip address.')
userAuthenticationFreeRuleDestinationIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 68, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userAuthenticationFreeRuleDestinationIPMask.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleDestinationIPMask.setDescription('The mask of free rule destination ip address.')
userAuthenticationFreeRuleDestinationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 68, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userAuthenticationFreeRuleDestinationProtocol.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleDestinationProtocol.setDescription('The free rule destination protocol.')
userAuthenticationFreeRuleDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 68, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userAuthenticationFreeRuleDestinationPort.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleDestinationPort.setDescription('The free rule destination port.')
userAuthenticationFreeRuleDestinationUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 68, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userAuthenticationFreeRuleDestinationUserGroup.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleDestinationUserGroup.setDescription('The free rule destination user group.')
userAuthenticationFreeRuleExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 2, 1, 68, 1, 14), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userAuthenticationFreeRuleExtRowStatus.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleExtRowStatus.setDescription('The row administration status, only supporting add or delete.')
hwAaaConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5))
hwAaaCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 1))
hwAaaCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 1, 1)).setObjects(("HUAWEI-AAA-MIB", "hwAuthenSchemeGroup"), ("HUAWEI-AAA-MIB", "hwAcctSchemeGroup"), ("HUAWEI-AAA-MIB", "hwDomainGroup"), ("HUAWEI-AAA-MIB", "hwDomainExtGroup"), ("HUAWEI-AAA-MIB", "hwDomainStatGroup"), ("HUAWEI-AAA-MIB", "hwAuthorSchemeGroup"), ("HUAWEI-AAA-MIB", "hwLocalUserGroup"), ("HUAWEI-AAA-MIB", "hwLocalUserExtGroup"), ("HUAWEI-AAA-MIB", "hwAaaSettingGroup"), ("HUAWEI-AAA-MIB", "hwAaaStatGroup"), ("HUAWEI-AAA-MIB", "hwAccessGroup"), ("HUAWEI-AAA-MIB", "hwAccessExtGroup"), ("HUAWEI-AAA-MIB", "hwAcctSchemeExtGroup"), ("HUAWEI-AAA-MIB", "hwBillPoolGroup"), ("HUAWEI-AAA-MIB", "hwBillTFTPGroup"), ("HUAWEI-AAA-MIB", "hwUclGrpGroup"), ("HUAWEI-AAA-MIB", "hwIpAccessGroup"), ("HUAWEI-AAA-MIB", "hwCutAccessUserGroup"), ("HUAWEI-AAA-MIB", "hwAaaUserPppGroup"), ("HUAWEI-AAA-MIB", "hwAaaUserWebandFastGroup"), ("HUAWEI-AAA-MIB", "hwAaaUserDot1XGroup"), ("HUAWEI-AAA-MIB", "hwAaaUserBindGroup"), ("HUAWEI-AAA-MIB", "hwRecordSchemeGroup"), ("HUAWEI-AAA-MIB", "hwMACAccessGroup"), ("HUAWEI-AAA-MIB", "hwSlotConnectNumGroup"), ("HUAWEI-AAA-MIB", "hwOfflineReasonStatGroup"), ("HUAWEI-AAA-MIB", "hwMulticastListGroup"), ("HUAWEI-AAA-MIB", "hwMulticastProfileGroup"), ("HUAWEI-AAA-MIB", "hwMulticastProfileExtGroup"), ("HUAWEI-AAA-MIB", "hwAaaTrapOidGroup"), ("HUAWEI-AAA-MIB", "hwAaaTrapsNotificationsGroup"), ("HUAWEI-AAA-MIB", "hwLamTrapsNotificationsGroup"), ("HUAWEI-AAA-MIB", "hwObsoleteGroup"), ("HUAWEI-AAA-MIB", "hwServiceSchemeGroup"), ("HUAWEI-AAA-MIB", "hwDhcpOpt121RouteGroup"), ("HUAWEI-AAA-MIB", "hwAccessDelayPerSlotGroup"), ("HUAWEI-AAA-MIB", "hwVpnAccessUserStatGroup"), ("HUAWEI-AAA-MIB", "hwInterfaceAccessUserStatGroup"), ("HUAWEI-AAA-MIB", "hwDomainAccessUserStatGroup"), ("HUAWEI-AAA-MIB", "hwSlotAccessUserStatGroup"), ("HUAWEI-AAA-MIB", "hwReauthorizeGroup"), ("HUAWEI-AAA-MIB", "hwUserLogGroup"), ("HUAWEI-AAA-MIB", "hwGlobalDhcpOpt64SepAndSegGroup"), ("HUAWEI-AAA-MIB", "hwGlobalDhcpServerAckGroup"), ("HUAWEI-AAA-MIB", "hwWlanInterfaceGroup"), ("HUAWEI-AAA-MIB", "hwAuthorCmdGroup"), ("HUAWEI-AAA-MIB", "hwAAARateGroup"), ("HUAWEI-AAA-MIB", "hwLocalUserPwPolicyAdminGroup"), ("HUAWEI-AAA-MIB", "hwLocalUserPwPolicyAccGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAaaCompliance = hwAaaCompliance.setStatus('current')
if mibBuilder.loadTexts: hwAaaCompliance.setDescription('The compliance statement for systems supporting this module.')
hwAaaObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2))
hwAuthenSchemeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 1)).setObjects(("HUAWEI-AAA-MIB", "hwAuthenSchemeName"), ("HUAWEI-AAA-MIB", "hwAuthenMethod"), ("HUAWEI-AAA-MIB", "hwAuthenRowStatus"), ("HUAWEI-AAA-MIB", "hwAuthenFailPolicy"), ("HUAWEI-AAA-MIB", "hwAuthenFailDomain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAuthenSchemeGroup = hwAuthenSchemeGroup.setStatus('current')
if mibBuilder.loadTexts: hwAuthenSchemeGroup.setDescription('The authentication scheme configuration.')
hwAcctSchemeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 2)).setObjects(("HUAWEI-AAA-MIB", "hwAcctSchemeName"), ("HUAWEI-AAA-MIB", "hwAccMethod"), ("HUAWEI-AAA-MIB", "hwAcctStartFail"), ("HUAWEI-AAA-MIB", "hwAcctOnlineFail"), ("HUAWEI-AAA-MIB", "hwAccRealTimeInter"), ("HUAWEI-AAA-MIB", "hwAcctRowStatus"), ("HUAWEI-AAA-MIB", "hwAcctRealTimeIntervalUnit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAcctSchemeGroup = hwAcctSchemeGroup.setStatus('current')
if mibBuilder.loadTexts: hwAcctSchemeGroup.setDescription('The account scheme configuration.')
hwDomainGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 3)).setObjects(("HUAWEI-AAA-MIB", "hwDomainName"), ("HUAWEI-AAA-MIB", "hwDomainAuthenSchemeName"), ("HUAWEI-AAA-MIB", "hwDomainAcctSchemeName"), ("HUAWEI-AAA-MIB", "hwDomainRadiusGroupName"), ("HUAWEI-AAA-MIB", "hwDomainAccessLimitNum"), ("HUAWEI-AAA-MIB", "hwDomainIfSrcRoute"), ("HUAWEI-AAA-MIB", "hwDomainNextHopIP"), ("HUAWEI-AAA-MIB", "hwDomainIdleCutTime"), ("HUAWEI-AAA-MIB", "hwDomainIdleCutFlow"), ("HUAWEI-AAA-MIB", "hwDomainRowStatus"), ("HUAWEI-AAA-MIB", "hwDomainType"), ("HUAWEI-AAA-MIB", "hwDomainServiceSchemeName"), ("HUAWEI-AAA-MIB", "hwDomainIdleCutType"), ("HUAWEI-AAA-MIB", "hwDomainForcePushUrl"), ("HUAWEI-AAA-MIB", "hwDomainForcePushUrlTemplate"), ("HUAWEI-AAA-MIB", "hwStateBlockFirstTimeRangeName"), ("HUAWEI-AAA-MIB", "hwStateBlockSecondTimeRangeName"), ("HUAWEI-AAA-MIB", "hwStateBlockThirdTimeRangeName"), ("HUAWEI-AAA-MIB", "hwStateBlockForthTimeRangeName"), ("HUAWEI-AAA-MIB", "hwDomainFlowStatistic"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDomainGroup = hwDomainGroup.setStatus('current')
if mibBuilder.loadTexts: hwDomainGroup.setDescription('The domain group configuration.')
hwDomainExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 4)).setObjects(("HUAWEI-AAA-MIB", "hwDomainPPPURL"), ("HUAWEI-AAA-MIB", "hwIfDomainActive"), ("HUAWEI-AAA-MIB", "hwPriority"), ("HUAWEI-AAA-MIB", "hwWebServerURL"), ("HUAWEI-AAA-MIB", "hwIPPoolOneName"), ("HUAWEI-AAA-MIB", "hwIPPoolTwoName"), ("HUAWEI-AAA-MIB", "hwIPPoolThreeName"), ("HUAWEI-AAA-MIB", "hwTwoLevelAcctRadiusGroupName"), ("HUAWEI-AAA-MIB", "hwVPDNGroupIndex"), ("HUAWEI-AAA-MIB", "hwUclIndex"), ("HUAWEI-AAA-MIB", "hwIfPPPoeURL"), ("HUAWEI-AAA-MIB", "hwUclGroupName"), ("HUAWEI-AAA-MIB", "hwVpdnGroupName"), ("HUAWEI-AAA-MIB", "hwDomainVrf"), ("HUAWEI-AAA-MIB", "hwDomainGre"), ("HUAWEI-AAA-MIB", "hwDomainRenewIPTag"), ("HUAWEI-AAA-MIB", "hwPortalURL"), ("HUAWEI-AAA-MIB", "hwPortalServerIP"), ("HUAWEI-AAA-MIB", "hwRedirectTimesLimit"), ("HUAWEI-AAA-MIB", "hwDot1xTemplate"), ("HUAWEI-AAA-MIB", "hwWebServerIP"), ("HUAWEI-AAA-MIB", "hwWebServerMode"), ("HUAWEI-AAA-MIB", "hwPoolWarningThreshold"), ("HUAWEI-AAA-MIB", "hwTacGroupName"), ("HUAWEI-AAA-MIB", "hwServicePolicyName"), ("HUAWEI-AAA-MIB", "hwCopsGroupSSGType"), ("HUAWEI-AAA-MIB", "hwDomainAuthorSchemeName"), ("HUAWEI-AAA-MIB", "hwDomainQoSProfile"), ("HUAWEI-AAA-MIB", "hwDomainZone"), ("HUAWEI-AAA-MIB", "hwIfL2tpRadiusForce"), ("HUAWEI-AAA-MIB", "hwDownPriority"), ("HUAWEI-AAA-MIB", "hwPPPForceAuthtype"), ("HUAWEI-AAA-MIB", "hwDnsIPAddress"), ("HUAWEI-AAA-MIB", "hwAdminUserPriority"), ("HUAWEI-AAA-MIB", "hwShapingTemplate"), ("HUAWEI-AAA-MIB", "hwDomainDPIPolicyName"), ("HUAWEI-AAA-MIB", "hwCopsGroupSIGType"), ("HUAWEI-AAA-MIB", "hwCopsGroupCIPNType"), ("HUAWEI-AAA-MIB", "hwPCReduceCir"), ("HUAWEI-AAA-MIB", "hwValAcctType"), ("HUAWEI-AAA-MIB", "hwValRadiusServer"), ("HUAWEI-AAA-MIB", "hwValCopsServer"), ("HUAWEI-AAA-MIB", "hwPCReducePir"), ("HUAWEI-AAA-MIB", "hwDomainInboundL2tpQoSProfile"), ("HUAWEI-AAA-MIB", "hwDomainOutboundL2tpQoSProfile"), ("HUAWEI-AAA-MIB", "hwIfMulticastForward"), ("HUAWEI-AAA-MIB", "hwMulticastVirtualSchedulRezCir"), ("HUAWEI-AAA-MIB", "hwMulticastVirtualSchedulRezPir"), ("HUAWEI-AAA-MIB", "hwMaxMulticastListNum"), ("HUAWEI-AAA-MIB", "hwMultiProfile"), ("HUAWEI-AAA-MIB", "hwDomainServiceType"), ("HUAWEI-AAA-MIB", "hwWebServerUrlParameter"), ("HUAWEI-AAA-MIB", "hwWebServerRedirectKeyMscgName"), ("HUAWEI-AAA-MIB", "hwPoratalServerUrlParameter"), ("HUAWEI-AAA-MIB", "hwPoratalServerFirstUrlKeyName"), ("HUAWEI-AAA-MIB", "hwPoratalServerFirstUrlKeyDefaultName"), ("HUAWEI-AAA-MIB", "hwDnsSecondIPAddress"), ("HUAWEI-AAA-MIB", "hwIPv6PoolName"), ("HUAWEI-AAA-MIB", "hwIPv6PrefixshareFlag"), ("HUAWEI-AAA-MIB", "hwUserBasicServiceIPType"), ("HUAWEI-AAA-MIB", "hwPriDnsIPv6Address"), ("HUAWEI-AAA-MIB", "hwSecDnsIPv6Address"), ("HUAWEI-AAA-MIB", "hwDualStackAccountingType"), ("HUAWEI-AAA-MIB", "hwIPv6PoolWarningThreshold"), ("HUAWEI-AAA-MIB", "hwIPv6CPWaitDHCPv6Delay"), ("HUAWEI-AAA-MIB", "hwIPv6ManagedAddressFlag"), ("HUAWEI-AAA-MIB", "hwIPv6CPIFIDAvailable"), ("HUAWEI-AAA-MIB", "hwIPv6OtherFlag"), ("HUAWEI-AAA-MIB", "hwIPv6CPAssignIFID"), ("HUAWEI-AAA-MIB", "hwMultiIPv6ProfileName"), ("HUAWEI-AAA-MIB", "hwWebServerURLSlave"), ("HUAWEI-AAA-MIB", "hwWebServerIPSlave"), ("HUAWEI-AAA-MIB", "hwBindAuthWebIP"), ("HUAWEI-AAA-MIB", "hwBindAuthWebVrf"), ("HUAWEI-AAA-MIB", "hwBindAuthWebIPSlave"), ("HUAWEI-AAA-MIB", "hwBindAuthWebVrfSlave"), ("HUAWEI-AAA-MIB", "hwExtVpdnGroupName"), ("HUAWEI-AAA-MIB", "hwDomainUserGroupName"), ("HUAWEI-AAA-MIB", "hwAFTRName"), ("HUAWEI-AAA-MIB", "hwDomainDhcpOpt64SepAndSeg"), ("HUAWEI-AAA-MIB", "hwDomainDhcpServerAck"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDomainExtGroup = hwDomainExtGroup.setStatus('current')
if mibBuilder.loadTexts: hwDomainExtGroup.setDescription('The domain extent table group configuration.')
hwDomainStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 5)).setObjects(("HUAWEI-AAA-MIB", "hwDomainAccessedNum"), ("HUAWEI-AAA-MIB", "hwDomainOnlineNum"), ("HUAWEI-AAA-MIB", "hwDomainOnlinePPPUser"), ("HUAWEI-AAA-MIB", "hwDomainFlowDnByte"), ("HUAWEI-AAA-MIB", "hwDomainFlowDnPkt"), ("HUAWEI-AAA-MIB", "hwDomainFlowUpByte"), ("HUAWEI-AAA-MIB", "hwDomainFlowUpPkt"), ("HUAWEI-AAA-MIB", "hwDomainIPTotalNum"), ("HUAWEI-AAA-MIB", "hwDomainIPUsedNum"), ("HUAWEI-AAA-MIB", "hwDomainIPConflictNum"), ("HUAWEI-AAA-MIB", "hwDomainIPExcludeNum"), ("HUAWEI-AAA-MIB", "hwDomainIPIdleNum"), ("HUAWEI-AAA-MIB", "hwDomainIPUsedPercent"), ("HUAWEI-AAA-MIB", "hwDomainPPPoENum"), ("HUAWEI-AAA-MIB", "hwDomainIPv6AddressTotalNum"), ("HUAWEI-AAA-MIB", "hwDomainIPv6AddressUsedNum"), ("HUAWEI-AAA-MIB", "hwDomainIPv6AddressFreeNum"), ("HUAWEI-AAA-MIB", "hwDomainIPv6AddressConflictNum"), ("HUAWEI-AAA-MIB", "hwDomainIPv6AddressExcludeNum"), ("HUAWEI-AAA-MIB", "hwDomainIPv6AddressUsedPercent"), ("HUAWEI-AAA-MIB", "hwDomainNDRAPrefixTotalNum"), ("HUAWEI-AAA-MIB", "hwDomainNDRAPrefixUsedNum"), ("HUAWEI-AAA-MIB", "hwDomainNDRAPrefixFreeNum"), ("HUAWEI-AAA-MIB", "hwDomainNDRAPrefixConflictNum"), ("HUAWEI-AAA-MIB", "hwDomainNDRAPrefixExcludeNum"), ("HUAWEI-AAA-MIB", "hwDomainNDRAPrefixUsedPercent"), ("HUAWEI-AAA-MIB", "hwDomainPDPrefixTotalNum"), ("HUAWEI-AAA-MIB", "hwDomainPDPrefixUsedNum"), ("HUAWEI-AAA-MIB", "hwDomainPDPrefixFreeNum"), ("HUAWEI-AAA-MIB", "hwDomainPDPrefixConflictNum"), ("HUAWEI-AAA-MIB", "hwDomainPDPrefixExcludeNum"), ("HUAWEI-AAA-MIB", "hwDomainPDPrefixUsedPercent"), ("HUAWEI-AAA-MIB", "hwDomainIPv6FlowDnByte"), ("HUAWEI-AAA-MIB", "hwDomainIPv6FlowDnPkt"), ("HUAWEI-AAA-MIB", "hwDomainIPv6FlowUpByte"), ("HUAWEI-AAA-MIB", "hwDomainIPv6FlowUpPkt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDomainStatGroup = hwDomainStatGroup.setStatus('current')
if mibBuilder.loadTexts: hwDomainStatGroup.setDescription('The domain statistics group configuration.')
hwAuthorSchemeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 6)).setObjects(("HUAWEI-AAA-MIB", "hwAuthorSchemeName"), ("HUAWEI-AAA-MIB", "hwAuthorMethod"), ("HUAWEI-AAA-MIB", "hwAuthorRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAuthorSchemeGroup = hwAuthorSchemeGroup.setStatus('current')
if mibBuilder.loadTexts: hwAuthorSchemeGroup.setDescription('The authorization scheme group configuration.')
hwLocalUserGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 7)).setObjects(("HUAWEI-AAA-MIB", "hwLocalUserName"), ("HUAWEI-AAA-MIB", "hwLocalUserPassword"), ("HUAWEI-AAA-MIB", "hwLocalUserAccessType"), ("HUAWEI-AAA-MIB", "hwLocalUserPriority"), ("HUAWEI-AAA-MIB", "hwftpdirction"), ("HUAWEI-AAA-MIB", "hwQosProfileName"), ("HUAWEI-AAA-MIB", "hwLocalUserRowStatus"), ("HUAWEI-AAA-MIB", "hwLocalUserIpAddress"), ("HUAWEI-AAA-MIB", "hwLocalUserVpnInstance"), ("HUAWEI-AAA-MIB", "hwLocalUserAccessLimitNum"), ("HUAWEI-AAA-MIB", "hwLocalUserPasswordLifetimeMin"), ("HUAWEI-AAA-MIB", "hwLocalUserPasswordLifetimeMax"), ("HUAWEI-AAA-MIB", "hwLocalUserIfAllowWeakPassword"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLocalUserGroup = hwLocalUserGroup.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserGroup.setDescription('The local user group configuration.')
hwLocalUserExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 8)).setObjects(("HUAWEI-AAA-MIB", "hwLocalUserState"), ("HUAWEI-AAA-MIB", "hwLocalUserNoCallBackVerify"), ("HUAWEI-AAA-MIB", "hwLocalUserCallBackDialStr"), ("HUAWEI-AAA-MIB", "hwLocalUserBlockFailTimes"), ("HUAWEI-AAA-MIB", "hwLocalUserBlockInterval"), ("HUAWEI-AAA-MIB", "hwLocalUserUserGroup"), ("HUAWEI-AAA-MIB", "hwLocalUserDeviceType"), ("HUAWEI-AAA-MIB", "hwLocalUserExpireDate"), ("HUAWEI-AAA-MIB", "hwLocalUserIdleTimeoutSecond"), ("HUAWEI-AAA-MIB", "hwLocalUserTimeRange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLocalUserExtGroup = hwLocalUserExtGroup.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserExtGroup.setDescription('The local user extent group configuration.')
hwAaaSettingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 9)).setObjects(("HUAWEI-AAA-MIB", "hwRoamChar"), ("HUAWEI-AAA-MIB", "hwGlobalControl"), ("HUAWEI-AAA-MIB", "hwSystemRecord"), ("HUAWEI-AAA-MIB", "hwOutboundRecord"), ("HUAWEI-AAA-MIB", "hwCmdRecord"), ("HUAWEI-AAA-MIB", "hwPPPUserOfflineStandardize"), ("HUAWEI-AAA-MIB", "hwDomainNameParseDirection"), ("HUAWEI-AAA-MIB", "hwDomainNameLocation"), ("HUAWEI-AAA-MIB", "hwAccessSpeedNumber"), ("HUAWEI-AAA-MIB", "hwAccessSpeedPeriod"), ("HUAWEI-AAA-MIB", "hwRealmNameChar"), ("HUAWEI-AAA-MIB", "hwRealmParseDirection"), ("HUAWEI-AAA-MIB", "hwIPOXpassword"), ("HUAWEI-AAA-MIB", "hwAccessDelayTransitionStep"), ("HUAWEI-AAA-MIB", "hwAccessDelayTime"), ("HUAWEI-AAA-MIB", "hwAccessDelayMinTime"), ("HUAWEI-AAA-MIB", "hwParsePriority"), ("HUAWEI-AAA-MIB", "hwRealmNameLocation"), ("HUAWEI-AAA-MIB", "hwIPOXUsernameOption82"), ("HUAWEI-AAA-MIB", "hwIPOXUsernameIP"), ("HUAWEI-AAA-MIB", "hwIPOXUsernameSysname"), ("HUAWEI-AAA-MIB", "hwIPOXUsernameMAC"), ("HUAWEI-AAA-MIB", "hwDefaultUserName"), ("HUAWEI-AAA-MIB", "hwNasSerial"), ("HUAWEI-AAA-MIB", "hwAAAPasswordRepeatNumber"), ("HUAWEI-AAA-MIB", "hwAAAPasswordRemindDay"), ("HUAWEI-AAA-MIB", "hwOnlineUserNumLowerLimitThreshold"), ("HUAWEI-AAA-MIB", "hwOnlineUserNumUpperLimitThreshold"), ("HUAWEI-AAA-MIB", "hwIPOXpasswordKeyType"), ("HUAWEI-AAA-MIB", "hwReauthorizeEnable"), ("HUAWEI-AAA-MIB", "hwDomainNameDelimiter"), ("HUAWEI-AAA-MIB", "hwDomainNameSecurityDelimiter"), ("HUAWEI-AAA-MIB", "hwGlobalAuthEventAuthFailResponseFail"), ("HUAWEI-AAA-MIB", "hwGlobalAuthEventAuthFailVlan"), ("HUAWEI-AAA-MIB", "hwGlobalAuthEventAuthenServerDownResponseFail"), ("HUAWEI-AAA-MIB", "hwGlobalAuthEventAuthenServerDownVlan"), ("HUAWEI-AAA-MIB", "hwGlobalAuthEventClientNoResponseVlan"), ("HUAWEI-AAA-MIB", "hwGlobalAuthEventPreAuthVlan"), ("HUAWEI-AAA-MIB", "hwGlobalAuthEventAuthFailUserGroup"), ("HUAWEI-AAA-MIB", "hwGlobalAuthEventAuthenServerDownUserGroup"), ("HUAWEI-AAA-MIB", "hwGlobalAuthEventClientNoResponseUserGroup"), ("HUAWEI-AAA-MIB", "hwGlobalAuthEventPreAuthUserGroup"), ("HUAWEI-AAA-MIB", "hwTriggerLoose"), ("HUAWEI-AAA-MIB", "hwOfflineSpeedNumber"), ("HUAWEI-AAA-MIB", "hwAuthorModifyMode"), ("HUAWEI-AAA-MIB", "hwLocalRetryInterval"), ("HUAWEI-AAA-MIB", "hwLocalRetryTime"), ("HUAWEI-AAA-MIB", "hwLocalBlockTime"), ("HUAWEI-AAA-MIB", "hwRemoteRetryInterval"), ("HUAWEI-AAA-MIB", "hwRemoteRetryTime"), ("HUAWEI-AAA-MIB", "hwRemoteBlockTime"), ("HUAWEI-AAA-MIB", "hwBlockDisable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAaaSettingGroup = hwAaaSettingGroup.setStatus('current')
if mibBuilder.loadTexts: hwAaaSettingGroup.setDescription('The AAA setting group configuration.')
hwAaaStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 10)).setObjects(("HUAWEI-AAA-MIB", "hwTotalOnlineNum"), ("HUAWEI-AAA-MIB", "hwTotalPPPoeOnlineNum"), ("HUAWEI-AAA-MIB", "hwTotalPPPoAOnlineNum"), ("HUAWEI-AAA-MIB", "hwTotalftpOnlineNum"), ("HUAWEI-AAA-MIB", "hwTotalsshOnlineNum"), ("HUAWEI-AAA-MIB", "hwTotaltelnetOnlineNum"), ("HUAWEI-AAA-MIB", "hwTotalVLANOnlineNum"), ("HUAWEI-AAA-MIB", "hwHistoricMaxOnlineNum"), ("HUAWEI-AAA-MIB", "hwResetHistoricMaxOnlineNum"), ("HUAWEI-AAA-MIB", "hwResetOfflineReasonStatistic"), ("HUAWEI-AAA-MIB", "hwResetOnlineFailReasonStatistic"), ("HUAWEI-AAA-MIB", "hwMaxPPPoeOnlineNum"), ("HUAWEI-AAA-MIB", "hwTotalPortalServerUserNum"), ("HUAWEI-AAA-MIB", "hwMaxPortalServerUserNum"), ("HUAWEI-AAA-MIB", "hwTotalIPv4OnlineNum"), ("HUAWEI-AAA-MIB", "hwTotalIPv6OnlineNum"), ("HUAWEI-AAA-MIB", "hwTotalDualStackOnlineNum"), ("HUAWEI-AAA-MIB", "hwTotalIPv4FlowDnByte"), ("HUAWEI-AAA-MIB", "hwTotalIPv4FlowDnPkt"), ("HUAWEI-AAA-MIB", "hwTotalIPv4FlowUpByte"), ("HUAWEI-AAA-MIB", "hwTotalIPv4FlowUpPkt"), ("HUAWEI-AAA-MIB", "hwTotalIPv6FlowDnByte"), ("HUAWEI-AAA-MIB", "hwTotalIPv6FlowDnPkt"), ("HUAWEI-AAA-MIB", "hwTotalIPv6FlowUpByte"), ("HUAWEI-AAA-MIB", "hwTotalIPv6FlowUpPkt"), ("HUAWEI-AAA-MIB", "hwHistoricMaxOnlineAcctReadyNum"), ("HUAWEI-AAA-MIB", "hwPubicLacUserNum"), ("HUAWEI-AAA-MIB", "hwHistoricMaxOnlineLocalNum"), ("HUAWEI-AAA-MIB", "hwHistoricMaxOnlineRemoteNum"), ("HUAWEI-AAA-MIB", "hwTotalLacOnlineNum"), ("HUAWEI-AAA-MIB", "hwTotalLnsOnlineNum"), ("HUAWEI-AAA-MIB", "hwTotalWlsOnlineNum"), ("HUAWEI-AAA-MIB", "hwTotalWrdOnlineNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAaaStatGroup = hwAaaStatGroup.setStatus('current')
if mibBuilder.loadTexts: hwAaaStatGroup.setDescription('The AAA statistics group configuration.')
hwAccessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 11)).setObjects(("HUAWEI-AAA-MIB", "hwAccessIndex"), ("HUAWEI-AAA-MIB", "hwAccessUserName"), ("HUAWEI-AAA-MIB", "hwAccessPortType"), ("HUAWEI-AAA-MIB", "hwAccessPriority"), ("HUAWEI-AAA-MIB", "hwAccessSlotNo"), ("HUAWEI-AAA-MIB", "hwAccessSubSlotNo"), ("HUAWEI-AAA-MIB", "hwAccessPortNo"), ("HUAWEI-AAA-MIB", "hwAccessVLANID"), ("HUAWEI-AAA-MIB", "hwAccessPVC"), ("HUAWEI-AAA-MIB", "hwAccessAuthenMethod"), ("HUAWEI-AAA-MIB", "hwAccessAcctMethod"), ("HUAWEI-AAA-MIB", "hwAccessIPAddress"), ("HUAWEI-AAA-MIB", "hwAccessVRF"), ("HUAWEI-AAA-MIB", "hwAccessMACAddress"), ("HUAWEI-AAA-MIB", "hwAccessIfIdleCut"), ("HUAWEI-AAA-MIB", "hwAccessIdleCutTime"), ("HUAWEI-AAA-MIB", "hwAccessIdleCutFlow"), ("HUAWEI-AAA-MIB", "hwAccessTimeLimit"), ("HUAWEI-AAA-MIB", "hwAccessTotalFlow64Limit"), ("HUAWEI-AAA-MIB", "hwAccessStartTime"), ("HUAWEI-AAA-MIB", "hwAccessCARIfUpActive"), ("HUAWEI-AAA-MIB", "hwAccessCARIfDnActive"), ("HUAWEI-AAA-MIB", "hwAccessUpFlow64"), ("HUAWEI-AAA-MIB", "hwAccessDnFlow64"), ("HUAWEI-AAA-MIB", "hwAccessUpPacket64"), ("HUAWEI-AAA-MIB", "hwAccessDnPacket64"), ("HUAWEI-AAA-MIB", "hwAccessCARUpCIR"), ("HUAWEI-AAA-MIB", "hwAccessCARUpPIR"), ("HUAWEI-AAA-MIB", "hwAccessCARUpCBS"), ("HUAWEI-AAA-MIB", "hwAccessCARUpPBS"), ("HUAWEI-AAA-MIB", "hwAccessCARDnCIR"), ("HUAWEI-AAA-MIB", "hwAccessCARDnPIR"), ("HUAWEI-AAA-MIB", "hwAccessCARDnCBS"), ("HUAWEI-AAA-MIB", "hwAccessCARDnPBS"), ("HUAWEI-AAA-MIB", "hwAccessDownPriority"), ("HUAWEI-AAA-MIB", "hwAccessQosProfile"), ("HUAWEI-AAA-MIB", "hwAccessInterface"), ("HUAWEI-AAA-MIB", "hwAccessIPv6IFID"), ("HUAWEI-AAA-MIB", "hwAccessIPv6WanAddress"), ("HUAWEI-AAA-MIB", "hwAccessIPv6WanPrefix"), ("HUAWEI-AAA-MIB", "hwAccessIPv6LanPrefix"), ("HUAWEI-AAA-MIB", "hwAccessIPv6LanPrefixLen"), ("HUAWEI-AAA-MIB", "hwAccessBasicIPType"), ("HUAWEI-AAA-MIB", "hwAccessIPv6WaitDelay"), ("HUAWEI-AAA-MIB", "hwAccessIPv6ManagedAddressFlag"), ("HUAWEI-AAA-MIB", "hwAccessIPv6CPIFIDAvailable"), ("HUAWEI-AAA-MIB", "hwAccessIPv6OtherFlag"), ("HUAWEI-AAA-MIB", "hwAccessIPv6CPAssignIFID"), ("HUAWEI-AAA-MIB", "hwAccessLineID"), ("HUAWEI-AAA-MIB", "hwAccessIPv6UpFlow64"), ("HUAWEI-AAA-MIB", "hwAccessIPv6DnFlow64"), ("HUAWEI-AAA-MIB", "hwAccessIPv6UpPacket64"), ("HUAWEI-AAA-MIB", "hwAccessIPv6DnPacket64"), ("HUAWEI-AAA-MIB", "hwAccessDeviceName"), ("HUAWEI-AAA-MIB", "hwAccessDeviceMACAddress"), ("HUAWEI-AAA-MIB", "hwAccessDevicePortName"), ("HUAWEI-AAA-MIB", "hwAccessAPID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAccessGroup = hwAccessGroup.setStatus('current')
if mibBuilder.loadTexts: hwAccessGroup.setDescription('The access group configuration.')
hwAccessExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 12)).setObjects(("HUAWEI-AAA-MIB", "hwAccessUCLGroup"), ("HUAWEI-AAA-MIB", "hwAuthenticationState"), ("HUAWEI-AAA-MIB", "hwAuthorizationState"), ("HUAWEI-AAA-MIB", "hwAccountingState"), ("HUAWEI-AAA-MIB", "hwAccessDomainName"), ("HUAWEI-AAA-MIB", "hwIdleTimeLength"), ("HUAWEI-AAA-MIB", "hwAcctSessionID"), ("HUAWEI-AAA-MIB", "hwAccessStartAcctTime"), ("HUAWEI-AAA-MIB", "hwAccessNormalServerGroup"), ("HUAWEI-AAA-MIB", "hwAccessDomainAcctCopySeverGroup"), ("HUAWEI-AAA-MIB", "hwAccessPVlanAcctCopyServerGroup"), ("HUAWEI-AAA-MIB", "hwAccessCurAuthenPlace"), ("HUAWEI-AAA-MIB", "hwAccessActionFlag"), ("HUAWEI-AAA-MIB", "hwAccessAuthtype"), ("HUAWEI-AAA-MIB", "hwAccessType"), ("HUAWEI-AAA-MIB", "hwAccessOnlineTime"), ("HUAWEI-AAA-MIB", "hwAccessGateway"), ("HUAWEI-AAA-MIB", "hwAccessSSID"), ("HUAWEI-AAA-MIB", "hwAccessAPMAC"), ("HUAWEI-AAA-MIB", "hwAccessDomain"), ("HUAWEI-AAA-MIB", "hwAccessCurAccountingPlace"), ("HUAWEI-AAA-MIB", "hwAccessCurAuthorPlace"), ("HUAWEI-AAA-MIB", "hwAccessUserGroup"), ("HUAWEI-AAA-MIB", "hwAccessResourceInsufficientInbound"), ("HUAWEI-AAA-MIB", "hwAccessResourceInsufficientOutbound"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAccessExtGroup = hwAccessExtGroup.setStatus('current')
if mibBuilder.loadTexts: hwAccessExtGroup.setDescription('The access extent group configuration.')
hwAcctSchemeExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 13)).setObjects(("HUAWEI-AAA-MIB", "hwIfRealtimeAcct"), ("HUAWEI-AAA-MIB", "hwRealtimeFailMaxnum"), ("HUAWEI-AAA-MIB", "hwStartFailOnlineIfSendInterim"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAcctSchemeExtGroup = hwAcctSchemeExtGroup.setStatus('current')
if mibBuilder.loadTexts: hwAcctSchemeExtGroup.setDescription('The account scheme extent group configuration.')
hwBillPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 14)).setObjects(("HUAWEI-AAA-MIB", "hwBillsPoolVolume"), ("HUAWEI-AAA-MIB", "hwBillsPoolNum"), ("HUAWEI-AAA-MIB", "hwBillsPoolAlarmThreshold"), ("HUAWEI-AAA-MIB", "hwBillsPoolBackupMode"), ("HUAWEI-AAA-MIB", "hwBillsPoolBackupInterval"), ("HUAWEI-AAA-MIB", "hwBillsPoolBackupNow"), ("HUAWEI-AAA-MIB", "hwBillsPoolReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBillPoolGroup = hwBillPoolGroup.setStatus('current')
if mibBuilder.loadTexts: hwBillPoolGroup.setDescription('The bill pool group configuration.')
hwBillTFTPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 15)).setObjects(("HUAWEI-AAA-MIB", "hwBillsTFTPSrvIP"), ("HUAWEI-AAA-MIB", "hwBillsTFTPMainFileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBillTFTPGroup = hwBillTFTPGroup.setStatus('current')
if mibBuilder.loadTexts: hwBillTFTPGroup.setDescription('The bill tftp group configuration.')
hwUclGrpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 16)).setObjects(("HUAWEI-AAA-MIB", "hwUclGrpName"), ("HUAWEI-AAA-MIB", "hwUclGrpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwUclGrpGroup = hwUclGrpGroup.setStatus('current')
if mibBuilder.loadTexts: hwUclGrpGroup.setDescription('The user group configuration.')
hwIpAccessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 17)).setObjects(("HUAWEI-AAA-MIB", "hwIPAccessIPaddress"), ("HUAWEI-AAA-MIB", "hwIPAccessCID"), ("HUAWEI-AAA-MIB", "hwIPAccessVRF"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpAccessGroup = hwIpAccessGroup.setStatus('current')
if mibBuilder.loadTexts: hwIpAccessGroup.setDescription('The IP access group configuration.')
hwCutAccessUserGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 18)).setObjects(("HUAWEI-AAA-MIB", "hwCutStartUserID"), ("HUAWEI-AAA-MIB", "hwCutEndUserID"), ("HUAWEI-AAA-MIB", "hwCutIPaddress"), ("HUAWEI-AAA-MIB", "hwCutMacAddres"), ("HUAWEI-AAA-MIB", "hwCutUserName"), ("HUAWEI-AAA-MIB", "hwCutUserAttri"), ("HUAWEI-AAA-MIB", "hwCutDomain"), ("HUAWEI-AAA-MIB", "hwCutIPPoolName"), ("HUAWEI-AAA-MIB", "hwCutIfIndex"), ("HUAWEI-AAA-MIB", "hwCutVlanID"), ("HUAWEI-AAA-MIB", "hwCutVPI"), ("HUAWEI-AAA-MIB", "hwCutVCI"), ("HUAWEI-AAA-MIB", "hwCutVRF"), ("HUAWEI-AAA-MIB", "hwCutAccessInterface"), ("HUAWEI-AAA-MIB", "hwCutUserSSID"), ("HUAWEI-AAA-MIB", "hwCutAccessSlot"), ("HUAWEI-AAA-MIB", "hwCutUserGroup"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCutAccessUserGroup = hwCutAccessUserGroup.setStatus('current')
if mibBuilder.loadTexts: hwCutAccessUserGroup.setDescription('The cut access user scheme group configuration.')
hwAaaUserPppGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 19)).setObjects(("HUAWEI-AAA-MIB", "hwTotalConnectNum"), ("HUAWEI-AAA-MIB", "hwTotalSuccessNum"), ("HUAWEI-AAA-MIB", "hwTotalLCPFailNum"), ("HUAWEI-AAA-MIB", "hwTotalAuthenFailNum"), ("HUAWEI-AAA-MIB", "hwTotalNCPFailNum"), ("HUAWEI-AAA-MIB", "hwTotalIPAllocFailNum"), ("HUAWEI-AAA-MIB", "hwTotalOtherPPPFailNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAaaUserPppGroup = hwAaaUserPppGroup.setStatus('current')
if mibBuilder.loadTexts: hwAaaUserPppGroup.setDescription('The AAA user ppp group configuration.')
hwAaaUserWebandFastGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 20)).setObjects(("HUAWEI-AAA-MIB", "hwTotalWebConnectNum"), ("HUAWEI-AAA-MIB", "hwTotalSuccessWebConnectNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAaaUserWebandFastGroup = hwAaaUserWebandFastGroup.setStatus('current')
if mibBuilder.loadTexts: hwAaaUserWebandFastGroup.setDescription('The AAA user web and fast group configuration.')
hwAaaUserDot1XGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 21)).setObjects(("HUAWEI-AAA-MIB", "hwTotalDot1XConnectNum"), ("HUAWEI-AAA-MIB", "hwTotalSuccessDot1XConnectNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAaaUserDot1XGroup = hwAaaUserDot1XGroup.setStatus('current')
if mibBuilder.loadTexts: hwAaaUserDot1XGroup.setDescription('The AAA user dot1x group configuration.')
hwAaaUserBindGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 22)).setObjects(("HUAWEI-AAA-MIB", "hwTotalBindConnectNum"), ("HUAWEI-AAA-MIB", "hwTotalSuccessBindConnectNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAaaUserBindGroup = hwAaaUserBindGroup.setStatus('current')
if mibBuilder.loadTexts: hwAaaUserBindGroup.setDescription('The AAA user bind group configuration.')
hwRecordSchemeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 23)).setObjects(("HUAWEI-AAA-MIB", "hwRecordSchemeName"), ("HUAWEI-AAA-MIB", "hwRecordTacGroupName"), ("HUAWEI-AAA-MIB", "hwRecordRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRecordSchemeGroup = hwRecordSchemeGroup.setStatus('current')
if mibBuilder.loadTexts: hwRecordSchemeGroup.setDescription('The record scheme group configuration.')
hwMACAccessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 24)).setObjects(("HUAWEI-AAA-MIB", "hwMACAccessMACAddress"), ("HUAWEI-AAA-MIB", "hwMACAccessCID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMACAccessGroup = hwMACAccessGroup.setStatus('current')
if mibBuilder.loadTexts: hwMACAccessGroup.setDescription('The MAC access group configuration.')
hwSlotConnectNumGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 25)).setObjects(("HUAWEI-AAA-MIB", "hwSlotConnectNumSlot"), ("HUAWEI-AAA-MIB", "hwSlotConnectNumOnlineNum"), ("HUAWEI-AAA-MIB", "hwSlotConnectNumMaxOnlineNum"), ("HUAWEI-AAA-MIB", "hwSlotConnectNumMaxOnlineAcctReadyNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSlotConnectNumGroup = hwSlotConnectNumGroup.setStatus('current')
if mibBuilder.loadTexts: hwSlotConnectNumGroup.setDescription('The slot connect number group configuration.')
hwOfflineReasonStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 26)).setObjects(("HUAWEI-AAA-MIB", "hwOfflineReason"), ("HUAWEI-AAA-MIB", "hwOfflineReasonStatistic"), ("HUAWEI-AAA-MIB", "hwOnlineFailReasonStatistic"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOfflineReasonStatGroup = hwOfflineReasonStatGroup.setStatus('current')
if mibBuilder.loadTexts: hwOfflineReasonStatGroup.setDescription('The offline reason statistics group configuration.')
hwMulticastListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 27)).setObjects(("HUAWEI-AAA-MIB", "hwMulticastListIndex"), ("HUAWEI-AAA-MIB", "hwMulticastListName"), ("HUAWEI-AAA-MIB", "hwMulticastListSourceIp"), ("HUAWEI-AAA-MIB", "hwMulticastListSourceIpMask"), ("HUAWEI-AAA-MIB", "hwMulticastListGroupIp"), ("HUAWEI-AAA-MIB", "hwMulticastListGroupIpMask"), ("HUAWEI-AAA-MIB", "hwMulticastListVpnInstance"), ("HUAWEI-AAA-MIB", "hwMulticastListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMulticastListGroup = hwMulticastListGroup.setStatus('current')
if mibBuilder.loadTexts: hwMulticastListGroup.setDescription('The multicast list group configuration.')
hwMulticastProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 28)).setObjects(("HUAWEI-AAA-MIB", "hwMulticastProfileIndex"), ("HUAWEI-AAA-MIB", "hwMulticastProfileName"), ("HUAWEI-AAA-MIB", "hwMulticastProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMulticastProfileGroup = hwMulticastProfileGroup.setStatus('current')
if mibBuilder.loadTexts: hwMulticastProfileGroup.setDescription('The multicast profile group configuration.')
hwMulticastProfileExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 29)).setObjects(("HUAWEI-AAA-MIB", "hwMulticastListBindName"), ("HUAWEI-AAA-MIB", "hwMulticastProfileExtRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMulticastProfileExtGroup = hwMulticastProfileExtGroup.setStatus('current')
if mibBuilder.loadTexts: hwMulticastProfileExtGroup.setDescription('The multicast profile extent group configuration.')
hwAaaTrapOidGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 30)).setObjects(("HUAWEI-AAA-MIB", "hwDomainIndex"), ("HUAWEI-AAA-MIB", "hwHdFreeamount"), ("HUAWEI-AAA-MIB", "hwHdWarningThreshold"), ("HUAWEI-AAA-MIB", "hwUserSlot"), ("HUAWEI-AAA-MIB", "hwUserSlotMaxNumThreshold"), ("HUAWEI-AAA-MIB", "hwOnlineUserNumThreshold"), ("HUAWEI-AAA-MIB", "hwPolicyRoute"), ("HUAWEI-AAA-MIB", "hwPolicyRouteThreshold"), ("HUAWEI-AAA-MIB", "hwRbsDownReason"), ("HUAWEI-AAA-MIB", "hwRbpOldState"), ("HUAWEI-AAA-MIB", "hwRbpChangeName"), ("HUAWEI-AAA-MIB", "hwMaxUserThresholdType"), ("HUAWEI-AAA-MIB", "hwRbpNewState"), ("HUAWEI-AAA-MIB", "hwRbsName"), ("HUAWEI-AAA-MIB", "hwRbpChangeReason"), ("HUAWEI-AAA-MIB", "hwRemoteDownloadAclUsedValue"), ("HUAWEI-AAA-MIB", "hwRemoteDownloadAclThresholdValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAaaTrapOidGroup = hwAaaTrapOidGroup.setStatus('current')
if mibBuilder.loadTexts: hwAaaTrapOidGroup.setDescription('The AAA trap old group configuration.')
hwAaaTrapsNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 31)).setObjects(("HUAWEI-AAA-MIB", "hwUserIPAllocAlarm"), ("HUAWEI-AAA-MIB", "hwUserIPv6AddressAllocAlarm"), ("HUAWEI-AAA-MIB", "hwUserNDRAPrefixAllocAlarm"), ("HUAWEI-AAA-MIB", "hwUserDelegationPrefixAllocAlarm"), ("HUAWEI-AAA-MIB", "hwUserSlotMaxNum"), ("HUAWEI-AAA-MIB", "hwOnlineUserNumAlarm"), ("HUAWEI-AAA-MIB", "hwSetUserQosProfileFail"), ("HUAWEI-AAA-MIB", "hwUserMaxNum"), ("HUAWEI-AAA-MIB", "hwRbpStateChange"), ("HUAWEI-AAA-MIB", "hwRbsDown"), ("HUAWEI-AAA-MIB", "hwRbsUp"), ("HUAWEI-AAA-MIB", "hwUserIPAllocAlarmResume"), ("HUAWEI-AAA-MIB", "hwUserIPv6AddressAllocAlarmResume"), ("HUAWEI-AAA-MIB", "hwUserNDRAPrefixAllocAlarmResume"), ("HUAWEI-AAA-MIB", "hwUserDelegationPrefixAllocAlarmResume"), ("HUAWEI-AAA-MIB", "hwOnlineUserNumUpperLimitAlarm"), ("HUAWEI-AAA-MIB", "hwOnlineUserNumUpperLimitResume"), ("HUAWEI-AAA-MIB", "hwOnlineUserNumLowerLimitAlarm"), ("HUAWEI-AAA-MIB", "hwOnlineUserNumLowerLimitResume"), ("HUAWEI-AAA-MIB", "hwIPLowerlimitWarningAlarm"), ("HUAWEI-AAA-MIB", "hwIPLowerlimitWarningResume"), ("HUAWEI-AAA-MIB", "hwIPv6AddressLowerlimitWarningAlarm"), ("HUAWEI-AAA-MIB", "hwIPv6AddressLowerlimitWarningResume"), ("HUAWEI-AAA-MIB", "hwIPv6NDRAPrefixLowerlimitWarningAlarm"), ("HUAWEI-AAA-MIB", "hwIPv6NDRAPrefixLowerlimitWarningResume"), ("HUAWEI-AAA-MIB", "hwIPv6PDPrefixLowerlimitWarningAlarm"), ("HUAWEI-AAA-MIB", "hwIPv6PDPrefixLowerlimitWarningResume"), ("HUAWEI-AAA-MIB", "hwPolicyRouteSlotMaxNum"), ("HUAWEI-AAA-MIB", "hwRemoteDownloadAclThresholdAlarm"), ("HUAWEI-AAA-MIB", "hwRemoteDownloadAclThresholdResume"), ("HUAWEI-AAA-MIB", "hwAdminLoginFailed"), ("HUAWEI-AAA-MIB", "hwAdminLoginFailedClear"), ("HUAWEI-AAA-MIB", "hwUserGroupThresholdAlarm"), ("HUAWEI-AAA-MIB", "hwUserGroupThresholdResume"), ("HUAWEI-AAA-MIB", "hwEDSGLicenseExpireAlarm"), ("HUAWEI-AAA-MIB", "hwEDSGLicenseExpireResume"), ("HUAWEI-AAA-MIB", "hwAAAAccessUserResourceOrCpuAlarm"), ("HUAWEI-AAA-MIB", "hwAAAAccessUserResourceOrCpuResume"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAaaTrapsNotificationsGroup = hwAaaTrapsNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: hwAaaTrapsNotificationsGroup.setDescription('The AAA traps.')
hwLamTrapsNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 32)).setObjects(("HUAWEI-AAA-MIB", "hwHarddiskoverflow"), ("HUAWEI-AAA-MIB", "hwHarddiskReachThreshold"), ("HUAWEI-AAA-MIB", "hwHarddiskOK"), ("HUAWEI-AAA-MIB", "hwCachetoFTPFail"), ("HUAWEI-AAA-MIB", "hwHDtoFTPFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLamTrapsNotificationsGroup = hwLamTrapsNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: hwLamTrapsNotificationsGroup.setDescription('The lam traps.')
hwObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 33)).setObjects(("HUAWEI-AAA-MIB", "hwNtvUserProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwObsoleteGroup = hwObsoleteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hwObsoleteGroup.setDescription('The obsolete group configuration.')
hwServiceSchemeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 34)).setObjects(("HUAWEI-AAA-MIB", "hwServiceSchemeNextHopIp"), ("HUAWEI-AAA-MIB", "hwServiceSchemeUserPriority"), ("HUAWEI-AAA-MIB", "hwServiceSchemeIdleCutTime"), ("HUAWEI-AAA-MIB", "hwServiceSchemeIdleCutFlow"), ("HUAWEI-AAA-MIB", "hwServiceSchemeDnsFirst"), ("HUAWEI-AAA-MIB", "hwServiceSchemeDnsSecond"), ("HUAWEI-AAA-MIB", "hwSrvSchemeAdminUserPriority"), ("HUAWEI-AAA-MIB", "hwSrvSchemeIpPoolOneName"), ("HUAWEI-AAA-MIB", "hwSrvSchemeIpPoolTwoName"), ("HUAWEI-AAA-MIB", "hwSrvSchemeIpPoolThreeName"), ("HUAWEI-AAA-MIB", "hwServiceSchemeRowStatus"), ("HUAWEI-AAA-MIB", "hwServiceSchemeIdleCutType"), ("HUAWEI-AAA-MIB", "hwServiceSchemeIdleCutFlowValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwServiceSchemeGroup = hwServiceSchemeGroup.setStatus('current')
if mibBuilder.loadTexts: hwServiceSchemeGroup.setDescription('The service scheme group configuration.')
hwDhcpOpt121RouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 35)).setObjects(("HUAWEI-AAA-MIB", "hwDhcpOpt121RouteDestIp"), ("HUAWEI-AAA-MIB", "hwDhcpOpt121RouteMask"), ("HUAWEI-AAA-MIB", "hwDhcpOpt121RouteNextHop"), ("HUAWEI-AAA-MIB", "hwDhcpOpt121RouteRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDhcpOpt121RouteGroup = hwDhcpOpt121RouteGroup.setStatus('current')
if mibBuilder.loadTexts: hwDhcpOpt121RouteGroup.setDescription('The dhcp option121 route group configuration.')
hwAccessDelayPerSlotGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 36)).setObjects(("HUAWEI-AAA-MIB", "hwAccessDelayPerSlotSlot"), ("HUAWEI-AAA-MIB", "hwAccessDelayPerSlotTransitionStep"), ("HUAWEI-AAA-MIB", "hwAccessDelayPerSlotMaxTime"), ("HUAWEI-AAA-MIB", "hwAccessDelayPerSlotMinTime"), ("HUAWEI-AAA-MIB", "hwAccessDelayPerSlotRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAccessDelayPerSlotGroup = hwAccessDelayPerSlotGroup.setStatus('current')
if mibBuilder.loadTexts: hwAccessDelayPerSlotGroup.setDescription('The access delay per slot group configuration.')
hwVpnAccessUserStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 37)).setObjects(("HUAWEI-AAA-MIB", "hwUserType"), ("HUAWEI-AAA-MIB", "hwVpnAccessUserStatVpnName"), ("HUAWEI-AAA-MIB", "hwVpnAccessUserStatUserStat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVpnAccessUserStatGroup = hwVpnAccessUserStatGroup.setStatus('current')
if mibBuilder.loadTexts: hwVpnAccessUserStatGroup.setDescription('The vpn access user stat configuration.')
hwInterfaceAccessUserStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 38)).setObjects(("HUAWEI-AAA-MIB", "hwInterfaceAccessUserStatInterfaceIndex"), ("HUAWEI-AAA-MIB", "hwInterfaceAccessUserStatUserStat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwInterfaceAccessUserStatGroup = hwInterfaceAccessUserStatGroup.setStatus('current')
if mibBuilder.loadTexts: hwInterfaceAccessUserStatGroup.setDescription('The interface access user stat configuration.')
hwDomainAccessUserStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 39)).setObjects(("HUAWEI-AAA-MIB", "hwDomainAccessUserStatUserStat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDomainAccessUserStatGroup = hwDomainAccessUserStatGroup.setStatus('current')
if mibBuilder.loadTexts: hwDomainAccessUserStatGroup.setDescription('The domain access user stat configuration.')
hwSlotAccessUserStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 40)).setObjects(("HUAWEI-AAA-MIB", "hwSlotAccessUserStatSlot"), ("HUAWEI-AAA-MIB", "hwSlotAccessUserStatUserStat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSlotAccessUserStatGroup = hwSlotAccessUserStatGroup.setStatus('current')
if mibBuilder.loadTexts: hwSlotAccessUserStatGroup.setDescription('The slot access user stat configuration.')
hwDomainIncludePoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 45)).setObjects(("HUAWEI-AAA-MIB", "hwDomainIncludeIPPoolGroupName"), ("HUAWEI-AAA-MIB", "hwDomainIncludeIPPoolGroupRowStates"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDomainIncludePoolGroup = hwDomainIncludePoolGroup.setStatus('current')
if mibBuilder.loadTexts: hwDomainIncludePoolGroup.setDescription('Configure a pool group in the specified domain.')
hwDomainIPPoolMoveTo = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 46)).setObjects(("HUAWEI-AAA-MIB", "hwDomainIncludeIPPoolName"), ("HUAWEI-AAA-MIB", "hwDomainIncludeIPPoolMoveto"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDomainIPPoolMoveTo = hwDomainIPPoolMoveTo.setStatus('current')
if mibBuilder.loadTexts: hwDomainIPPoolMoveTo.setDescription('Change the priority of pool group in the specified domain.')
hwUserLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 47)).setObjects(("HUAWEI-AAA-MIB", "hwUserLogAccess"), ("HUAWEI-AAA-MIB", "hwUserLogIPAddress"), ("HUAWEI-AAA-MIB", "hwUserLogPort"), ("HUAWEI-AAA-MIB", "hwUserLogVersion"), ("HUAWEI-AAA-MIB", "hwShowUserLogStatistic"), ("HUAWEI-AAA-MIB", "hwResetUserLogStatistic"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwUserLogGroup = hwUserLogGroup.setStatus('current')
if mibBuilder.loadTexts: hwUserLogGroup.setDescription('The user log configuration')
hwGlobalDhcpOpt64SepAndSegGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 48)).setObjects(("HUAWEI-AAA-MIB", "hwGlobalDhcpOpt64SepAndSeg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwGlobalDhcpOpt64SepAndSegGroup = hwGlobalDhcpOpt64SepAndSegGroup.setStatus('current')
if mibBuilder.loadTexts: hwGlobalDhcpOpt64SepAndSegGroup.setDescription('The global option64 parse separator configuration')
hwGlobalDhcpServerAckGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 49)).setObjects(("HUAWEI-AAA-MIB", "hwGlobalDhcpServerAck"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwGlobalDhcpServerAckGroup = hwGlobalDhcpServerAckGroup.setStatus('current')
if mibBuilder.loadTexts: hwGlobalDhcpServerAckGroup.setDescription("The global whether to deal dhcp server's ack packet configuration")
hwReauthorizeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 50)).setObjects(("HUAWEI-AAA-MIB", "hwReauthorizeUsername"), ("HUAWEI-AAA-MIB", "hwReauthorizeUsergroup"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwReauthorizeGroup = hwReauthorizeGroup.setStatus('current')
if mibBuilder.loadTexts: hwReauthorizeGroup.setDescription("Change user's user-group by username.")
hwWlanInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 56)).setObjects(("HUAWEI-AAA-MIB", "hwWlanInterfaceIndex"), ("HUAWEI-AAA-MIB", "hwWlanInterfaceName"), ("HUAWEI-AAA-MIB", "hwWlanInterfaceDomainNameDelimiter"), ("HUAWEI-AAA-MIB", "hwWlanInterfaceDomainNameSecurityDelimiter"), ("HUAWEI-AAA-MIB", "hwWlanInterfaceDomainNameParseDirection"), ("HUAWEI-AAA-MIB", "hwWlanInterfaceDomainNameLocation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanInterfaceGroup = hwWlanInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: hwWlanInterfaceGroup.setDescription('The domain configuration in interface.')
hwAuthorCmdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 57)).setObjects(("HUAWEI-AAA-MIB", "hwAuthorCmdLevel"), ("HUAWEI-AAA-MIB", "hwAuthorCmdMode"), ("HUAWEI-AAA-MIB", "hwAuthorCmdRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAuthorCmdGroup = hwAuthorCmdGroup.setStatus('current')
if mibBuilder.loadTexts: hwAuthorCmdGroup.setDescription('The authorization-cmd configuration.')
hwAAARateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 58)).setObjects(("HUAWEI-AAA-MIB", "hwAAARateDirection"), ("HUAWEI-AAA-MIB", "hwAAARateType"), ("HUAWEI-AAA-MIB", "hwAAARateRealPeak"), ("HUAWEI-AAA-MIB", "hwAAARateRealAverage"), ("HUAWEI-AAA-MIB", "hwAAARateRealUsedCount"), ("HUAWEI-AAA-MIB", "hwAAARateRealPercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAAARateGroup = hwAAARateGroup.setStatus('current')
if mibBuilder.loadTexts: hwAAARateGroup.setDescription('Tariff package information statistics.')
hwLocalUserPwPolicyAdminGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 59)).setObjects(("HUAWEI-AAA-MIB", "hwAdminEnable"), ("HUAWEI-AAA-MIB", "hwAdminExpire"), ("HUAWEI-AAA-MIB", "hwAdminPwHistroyRecordNum"), ("HUAWEI-AAA-MIB", "hwAdminAlertBefore"), ("HUAWEI-AAA-MIB", "hwAdminAlertOrginal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLocalUserPwPolicyAdminGroup = hwLocalUserPwPolicyAdminGroup.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserPwPolicyAdminGroup.setDescription('Administrator password policy.')
hwLocalUserPwPolicyAccGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 60)).setObjects(("HUAWEI-AAA-MIB", "hwAccEnable"), ("HUAWEI-AAA-MIB", "hwAccPwHistroyRecordNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLocalUserPwPolicyAccGroup = hwLocalUserPwPolicyAccGroup.setStatus('current')
if mibBuilder.loadTexts: hwLocalUserPwPolicyAccGroup.setDescription('Access-user password policy.')
hwAAADomainIPPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 61)).setObjects(("HUAWEI-AAA-MIB", "hwAAADomainIPPoolName"), ("HUAWEI-AAA-MIB", "hwAAADomainIPPoolIndex"), ("HUAWEI-AAA-MIB", "hwAAADomainIPPoolConstantIndex"), ("HUAWEI-AAA-MIB", "hwAAADomainIPPoolPosition"), ("HUAWEI-AAA-MIB", "hwAAADomainIPPoolRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAAADomainIPPoolGroup = hwAAADomainIPPoolGroup.setStatus('current')
if mibBuilder.loadTexts: hwAAADomainIPPoolGroup.setDescription('The IP pool of domain.')
userAuthenProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 62)).setObjects(("HUAWEI-AAA-MIB", "userAuthenProfileName"), ("HUAWEI-AAA-MIB", "userAuthenProfileDot1xAccessProfileName"), ("HUAWEI-AAA-MIB", "userAuthenProfileMacAuthenAccessProfileName"), ("HUAWEI-AAA-MIB", "userAuthenProfilePortalAccessProfileName"), ("HUAWEI-AAA-MIB", "userAuthenProfileSingleAccess"), ("HUAWEI-AAA-MIB", "userAuthenProfilePreAuthenServiceSchemeName"), ("HUAWEI-AAA-MIB", "userAuthenProfilePreAuthenUserGroupName"), ("HUAWEI-AAA-MIB", "userAuthenProfilePreAuthenVLAN"), ("HUAWEI-AAA-MIB", "userAuthenProfileAuthenFailAuthorServiceSchemeName"), ("HUAWEI-AAA-MIB", "userAuthenProfileAuthenFailAuthorUserGroupName"), ("HUAWEI-AAA-MIB", "userAuthenProfileAuthenFailAuthorVLAN"), ("HUAWEI-AAA-MIB", "userAuthenProfileAuthenServerDownServiceSchemeName"), ("HUAWEI-AAA-MIB", "userAuthenProfileAuthenServerDownUserGroupName"), ("HUAWEI-AAA-MIB", "userAuthenProfileAuthenServerDownVLAN"), ("HUAWEI-AAA-MIB", "userAuthenProfileAuthenServerDownResponseSuccess"), ("HUAWEI-AAA-MIB", "userAuthenProfileAuthenServerUpReauthen"), ("HUAWEI-AAA-MIB", "userAuthenProfileMacAuthenFirst"), ("HUAWEI-AAA-MIB", "userAuthenProfileMACBypass"), ("HUAWEI-AAA-MIB", "userAuthenProfileDot1xForceDomain"), ("HUAWEI-AAA-MIB", "userAuthenProfileMACAuthenForceDomain"), ("HUAWEI-AAA-MIB", "userAuthenProfilePortalForceDomain"), ("HUAWEI-AAA-MIB", "userAuthenProfileDot1xDefaultDomain"), ("HUAWEI-AAA-MIB", "userAuthenProfileMACAuthenDefaultDomain"), ("HUAWEI-AAA-MIB", "userAuthenProfilePortalDefaultDomain"), ("HUAWEI-AAA-MIB", "userAuthenProfileSecurityNameDelimiter"), ("HUAWEI-AAA-MIB", "userAuthenProfilePreAuthenReAuthenTimer"), ("HUAWEI-AAA-MIB", "userAuthenProfileAuthenFailReAuthenTimer"), ("HUAWEI-AAA-MIB", "userAuthenProfilePreAuthenAgingTime"), ("HUAWEI-AAA-MIB", "userAuthenProfileAuthenFailAgingTime"), ("HUAWEI-AAA-MIB", "userAuthenProfileFreeRuleName"), ("HUAWEI-AAA-MIB", "userAuthenProfileAuthenSchemeName"), ("HUAWEI-AAA-MIB", "userAuthenProfileAuthorSchemeName"), ("HUAWEI-AAA-MIB", "userAuthenProfileAcctSchemeName"), ("HUAWEI-AAA-MIB", "userAuthenProfileServiceSchemeName"), ("HUAWEI-AAA-MIB", "userAuthenProfileUserGroupName"), ("HUAWEI-AAA-MIB", "userAuthenProfileRadiusServerName"), ("HUAWEI-AAA-MIB", "userAuthenProfileHwtacacsServerName"), ("HUAWEI-AAA-MIB", "userAuthenProfileAuthenticationMode"), ("HUAWEI-AAA-MIB", "userAuthenProfileMaxUser"), ("HUAWEI-AAA-MIB", "userAuthenProfileAuthenFailAuthorResponseSuccess"), ("HUAWEI-AAA-MIB", "userAuthenProfileArpDetect"), ("HUAWEI-AAA-MIB", "userAuthenProfileArpDetectTimer"), ("HUAWEI-AAA-MIB", "userAuthenProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    userAuthenProfileGroup = userAuthenProfileGroup.setStatus('current')
if mibBuilder.loadTexts: userAuthenProfileGroup.setDescription('The authentication profile.')
userAuthenticationFreeRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 63)).setObjects(("HUAWEI-AAA-MIB", "userAuthenticationFreeRuleName"), ("HUAWEI-AAA-MIB", "userAuthenticationFreeRuleACLNumber"), ("HUAWEI-AAA-MIB", "userAuthenticationFreeRuleIPv6ACLNumber"), ("HUAWEI-AAA-MIB", "userAuthenticationFreeRuleNumber"), ("HUAWEI-AAA-MIB", "userAuthenticationFreeRuleSourceMode"), ("HUAWEI-AAA-MIB", "userAuthenticationFreeRuleSourceVlan"), ("HUAWEI-AAA-MIB", "userAuthenticationFreeRuleSourceInterface"), ("HUAWEI-AAA-MIB", "userAuthenticationFreeRuleSourceIP"), ("HUAWEI-AAA-MIB", "userAuthenticationFreeRuleSourceIPMask"), ("HUAWEI-AAA-MIB", "userAuthenticationFreeRuleSourceMac"), ("HUAWEI-AAA-MIB", "userAuthenticationFreeRuleDestinationMode"), ("HUAWEI-AAA-MIB", "userAuthenticationFreeRuleDestinationIP"), ("HUAWEI-AAA-MIB", "userAuthenticationFreeRuleDestinationIPMask"), ("HUAWEI-AAA-MIB", "userAuthenticationFreeRuleDestinationProtocol"), ("HUAWEI-AAA-MIB", "userAuthenticationFreeRuleDestinationPort"), ("HUAWEI-AAA-MIB", "userAuthenticationFreeRuleDestinationUserGroup"), ("HUAWEI-AAA-MIB", "userAuthenticationFreeRuleRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    userAuthenticationFreeRuleGroup = userAuthenticationFreeRuleGroup.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFreeRuleGroup.setDescription('The authentication free rule.')
hwDot1xAccessProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 64)).setObjects(("HUAWEI-AAA-MIB", "hwDot1xAccessProfileName"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileGuestAuthorServiceSchemeName"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileGuestAuthorUserGroupName"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileGuestAuthorVLAN"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileHandshakeSwitch"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileHandShakePktType"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileHandshakeInterval"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileIfEAPEnd"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileEAPEndMethod"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileEAPNotifyPktEAPCode"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileEAPNotifyPktEAPType"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileReAuthenEnable"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileReauthenticationTimeout"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileClientTimeout"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileServerTimeout"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileTxPeriod"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileMaxRetryValue"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileSpeedLimitAuto"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileTriggerPktType"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileUnicastTrigger"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileURL"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileEthTrunkHandShakePeriod"), ("HUAWEI-AAA-MIB", "hwDot1xAccessProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDot1xAccessProfileGroup = hwDot1xAccessProfileGroup.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAccessProfileGroup.setDescription('The dot1x access profile.')
hwMACAuthenAccessProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 65)).setObjects(("HUAWEI-AAA-MIB", "hwMACAuthenAccessProfileName"), ("HUAWEI-AAA-MIB", "hwMACAuthenAccessProfileReAuthenEnable"), ("HUAWEI-AAA-MIB", "hwMACAuthenAccessProfileReauthenticationTimeout"), ("HUAWEI-AAA-MIB", "hwMACAuthenAccessProfileServerTimeout"), ("HUAWEI-AAA-MIB", "hwMACAuthenAccessProfileUserNameFixedUserName"), ("HUAWEI-AAA-MIB", "hwMACAuthenAccessProfileFixedPassword"), ("HUAWEI-AAA-MIB", "hwMACAuthenAccessProfileMACAddressFormat"), ("HUAWEI-AAA-MIB", "hwMACAuthenAccessProfileMACAddressPassword"), ("HUAWEI-AAA-MIB", "hwMACAuthenAccessProfileUserNameDHCPOption"), ("HUAWEI-AAA-MIB", "hwMACAuthenAccessProfileUserNameDHCPOSubOption"), ("HUAWEI-AAA-MIB", "hwMACAuthenAccessProfileTriggerPktType"), ("HUAWEI-AAA-MIB", "hwMACAuthenAccessProfileTriggerDHCPOptionType"), ("HUAWEI-AAA-MIB", "hwMACAuthenAccessProfileDHCPRelaseOffline"), ("HUAWEI-AAA-MIB", "hwMACAuthenAccessProfileDHCPRenewReAuthen"), ("HUAWEI-AAA-MIB", "hwMACAuthenAccessProfilePermitAuthenMAC"), ("HUAWEI-AAA-MIB", "hwMACAuthenAccessProfilePermitAuthenMACMask"), ("HUAWEI-AAA-MIB", "hwMACAuthenAccessProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMACAuthenAccessProfileGroup = hwMACAuthenAccessProfileGroup.setStatus('current')
if mibBuilder.loadTexts: hwMACAuthenAccessProfileGroup.setDescription('The mac-authen access profile.')
hwPortalAccessProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 2, 5, 2, 66)).setObjects(("HUAWEI-AAA-MIB", "hwPortalAccessProfileName"), ("HUAWEI-AAA-MIB", "hwPortalAccessProfileDetectPeriod"), ("HUAWEI-AAA-MIB", "hwPortalAccessProfilePortalServerDownServiceSchemeName"), ("HUAWEI-AAA-MIB", "hwPortalAccessProfilePortalServerDownUserGroupName"), ("HUAWEI-AAA-MIB", "hwPortalAccessProfilePortalServerUpReAuthen"), ("HUAWEI-AAA-MIB", "hwPortalAccessProfileAlarmUserLowNum"), ("HUAWEI-AAA-MIB", "hwPortalAccessProfileAlarmUserHighNum"), ("HUAWEI-AAA-MIB", "hwPortalAccessProfileAuthenNetWork"), ("HUAWEI-AAA-MIB", "hwPortalAccessProfileAuthenNetWorkMask"), ("HUAWEI-AAA-MIB", "hwPortalAccessProfilePortalServerName"), ("HUAWEI-AAA-MIB", "hwPortalAccessProfilePortalAccessDirect"), ("HUAWEI-AAA-MIB", "hwPortalAccessProfileLocalServerEnable"), ("HUAWEI-AAA-MIB", "hwPortalAccessProfileRowStatus"), ("HUAWEI-AAA-MIB", "hwPortalAccessProfilePortalBackupServerName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPortalAccessProfileGroup = hwPortalAccessProfileGroup.setStatus('current')
if mibBuilder.loadTexts: hwPortalAccessProfileGroup.setDescription('The portal access profile.')
mibBuilder.exportSymbols("HUAWEI-AAA-MIB", hwLocalUserDeviceType=hwLocalUserDeviceType, hwAccessMACAddress=hwAccessMACAddress, hwStateBlockSecondTimeRangeName=hwStateBlockSecondTimeRangeName, hwAAAAccessUserResourceOrCpuResume=hwAAAAccessUserResourceOrCpuResume, hwUserIPv6PDPrefix=hwUserIPv6PDPrefix, userAuthenticationFreeRuleExtRowStatus=userAuthenticationFreeRuleExtRowStatus, hwAuthenSchemeTable=hwAuthenSchemeTable, userAuthenProfileAuthenServerDownUserGroupName=userAuthenProfileAuthenServerDownUserGroupName, hwDot1xAccessProfileSpeedLimitAuto=hwDot1xAccessProfileSpeedLimitAuto, hwUserType=hwUserType, hwDomainIPv6FlowUpPkt=hwDomainIPv6FlowUpPkt, hwRemoteDownloadAclThresholdResume=hwRemoteDownloadAclThresholdResume, hwLocalUserGroup=hwLocalUserGroup, hwMACAuthenAccessProfileTriggerPktType=hwMACAuthenAccessProfileTriggerPktType, hwUserLogAccess=hwUserLogAccess, hwIPOXUsernameMAC=hwIPOXUsernameMAC, hwRemoteBlockTime=hwRemoteBlockTime, hwAAAInboundVPNAccessUserStat=hwAAAInboundVPNAccessUserStat, hwBillsPoolBackupMode=hwBillsPoolBackupMode, hwServiceSchemeName=hwServiceSchemeName, hwTotalSuccessNum=hwTotalSuccessNum, hwMACAccessTable=hwMACAccessTable, hwAAARateDirection=hwAAARateDirection, hwMaxMulticastListNum=hwMaxMulticastListNum, hwAAADomainIPPoolConstantIndex=hwAAADomainIPPoolConstantIndex, hwMulticastListBindName=hwMulticastListBindName, hwHistoricMaxOnlineLocalNum=hwHistoricMaxOnlineLocalNum, hwDot1xAccessProfileEthTrunkHandShakePeriod=hwDot1xAccessProfileEthTrunkHandShakePeriod, hwDot1xAccessProfileUnicastTrigger=hwDot1xAccessProfileUnicastTrigger, hwServiceSchemeIdleCutTime=hwServiceSchemeIdleCutTime, hwDhcpOpt121RouteNextHop=hwDhcpOpt121RouteNextHop, hwCutAccessUserGroup=hwCutAccessUserGroup, hwLocalUserUserGroup=hwLocalUserUserGroup, hwAAASessionGroupLowerLimitThreshold=hwAAASessionGroupLowerLimitThreshold, hwAccessCARIfUpActive=hwAccessCARIfUpActive, hwInterfaceAccessUserStatEntry=hwInterfaceAccessUserStatEntry, hwAccessIPv6UpFlow64=hwAccessIPv6UpFlow64, userAuthenProfileDomainNameParseDirection=userAuthenProfileDomainNameParseDirection, hwAaaUserBindGroup=hwAaaUserBindGroup, hwDomainPDPrefixTotalNum=hwDomainPDPrefixTotalNum, userAuthenProfileMacAuthenAccessProfileName=userAuthenProfileMacAuthenAccessProfileName, hwAccessDelayMinTime=hwAccessDelayMinTime, hwUclGroupName=hwUclGroupName, hwDomainAuthorSchemeName=hwDomainAuthorSchemeName, hwRealtimeFailMaxnum=hwRealtimeFailMaxnum, hwOfflineRecordAccessCeVlan=hwOfflineRecordAccessCeVlan, hwDomainQoSProfile=hwDomainQoSProfile, hwLowerMacMovedUserPercentage=hwLowerMacMovedUserPercentage, hwMaxPPPoeOnlineNum=hwMaxPPPoeOnlineNum, hwAAAOfflineRecordTable=hwAAAOfflineRecordTable, hwBillsPoolAlarmThreshold=hwBillsPoolAlarmThreshold, hwAccessGroup=hwAccessGroup, hwBillsPoolVolume=hwBillsPoolVolume, hwIPAccessCID=hwIPAccessCID, hwDomainPDPrefixFreeNum=hwDomainPDPrefixFreeNum, hwAFTRName=hwAFTRName, hwIPOXUsernameSysname=hwIPOXUsernameSysname, hwOfflineRecordIPAddress=hwOfflineRecordIPAddress, hwAAADomainIPPoolName=hwAAADomainIPPoolName, hwAuthEventCfgTable=hwAuthEventCfgTable, hwAcctSchemeTable=hwAcctSchemeTable, hwRecordSchemeTable=hwRecordSchemeTable, hwAccessVLANID=hwAccessVLANID, hwAuthorCmdGroup=hwAuthorCmdGroup, hwMulticastProfileIndex=hwMulticastProfileIndex, hwCutAccessSlot=hwCutAccessSlot, hwDomainRadiusGroupName=hwDomainRadiusGroupName, hwAuthorModifyMode=hwAuthorModifyMode, hwAuthEventPortIndex=hwAuthEventPortIndex, hwAccessIPv6DnFlow64=hwAccessIPv6DnFlow64, hwUserGroupUserVlanPool=hwUserGroupUserVlanPool, hwMACAuthenAccessProfileRowStatus=hwMACAuthenAccessProfileRowStatus, hwPortalServerIP=hwPortalServerIP, hwDomainIPv6AddressUsedPercent=hwDomainIPv6AddressUsedPercent, hwRemoteRetryInterval=hwRemoteRetryInterval, hwMACAuthenAccessProfileMACAddressFormat=hwMACAuthenAccessProfileMACAddressFormat, hwAuthorCmdTable=hwAuthorCmdTable, hwAuthEventAuthFailUserGroup=hwAuthEventAuthFailUserGroup, hwDhcpUserOnlineFailCount=hwDhcpUserOnlineFailCount, hwBillsPoolBackupNow=hwBillsPoolBackupNow, userAuthenticationFreeRuleDestinationPort=userAuthenticationFreeRuleDestinationPort, hwLocalUserState=hwLocalUserState, hwBillPoolGroup=hwBillPoolGroup, hwDomainPDPrefixExcludeNum=hwDomainPDPrefixExcludeNum, hwOnlineFailReasonStatistic=hwOnlineFailReasonStatistic, hwGlobalAuthEventClientNoResponseVlan=hwGlobalAuthEventClientNoResponseVlan, hwDhcpOpt121RouteRowStatus=hwDhcpOpt121RouteRowStatus, userAuthenProfilePreAuthenServiceSchemeName=userAuthenProfilePreAuthenServiceSchemeName, hwAAAOnlineSessoinUpperLimitResume=hwAAAOnlineSessoinUpperLimitResume, hwStateBlockThirdTimeRangeName=hwStateBlockThirdTimeRangeName, hwLocalUserPasswordExpireTime=hwLocalUserPasswordExpireTime, hwCutUserSSID=hwCutUserSSID, hwTotalsshOnlineNum=hwTotalsshOnlineNum, hwReauthorizeGroup=hwReauthorizeGroup, hwRbpStateChange=hwRbpStateChange, hwAAAUserWebandFast=hwAAAUserWebandFast, hwTotalIPv4FlowUpByte=hwTotalIPv4FlowUpByte, hwTotalIPAllocFailNum=hwTotalIPAllocFailNum, hwGlobalAuthEventAuthFailVlan=hwGlobalAuthEventAuthFailVlan, hwDomainIgmpEnable=hwDomainIgmpEnable, hwPortalAccessProfilePortalBackupServerName=hwPortalAccessProfilePortalBackupServerName, hwDscpRemark=hwDscpRemark, hwAccessTable=hwAccessTable, hwRemoteDownloadAclThresholdValue=hwRemoteDownloadAclThresholdValue, hwAccessDelayPerSlotMinTime=hwAccessDelayPerSlotMinTime, hwAAAInboundVPNUserType=hwAAAInboundVPNUserType, userAuthenProfilePreAuthenVLAN=userAuthenProfilePreAuthenVLAN, userAuthenProfileMACBypass=userAuthenProfileMACBypass, hwReauthorizeEntry=hwReauthorizeEntry, hwMulticastListSourceIp=hwMulticastListSourceIp, hwAccessIPv6WaitDelay=hwAccessIPv6WaitDelay, hwUclIndex=hwUclIndex, hwAaaSettingGroup=hwAaaSettingGroup, hwIPAccessEntry=hwIPAccessEntry, hwUserLogGroup=hwUserLogGroup, hwDomainIPv6AddressTotalNum=hwDomainIPv6AddressTotalNum, userAuthenticationFreeRuleDestinationMode=userAuthenticationFreeRuleDestinationMode, hwDomainUserGroupName=hwDomainUserGroupName, userAuthenProfileAuthenServerDownServiceSchemeName=userAuthenProfileAuthenServerDownServiceSchemeName, hwUserGroupEnable=hwUserGroupEnable, PYSNMP_MODULE_ID=hwAaa, hwPortalAccessProfileDetectPeriod=hwPortalAccessProfileDetectPeriod, hwSlotCardConnectNumFastAuthNum=hwSlotCardConnectNumFastAuthNum, hwAuthEventAuthenServerDownResponseFail=hwAuthEventAuthenServerDownResponseFail, hwRecordSchemeEntry=hwRecordSchemeEntry, hwDomainGre=hwDomainGre, hwAccessEntry=hwAccessEntry, hwAccessDomainName=hwAccessDomainName, hw8021pRemark=hw8021pRemark, hwLocalUserPasswordIsExpired=hwLocalUserPasswordIsExpired, hwAccessCurAuthorPlace=hwAccessCurAuthorPlace, hwVpnAccessUserStatGroup=hwVpnAccessUserStatGroup, hwIfL2tpRadiusForce=hwIfL2tpRadiusForce, hwSlotCardConnectNumMIPAuthNum=hwSlotCardConnectNumMIPAuthNum, hwMACAuthenAccessProfileName=hwMACAuthenAccessProfileName, hwIPv6AddressLowerlimitWarningAlarm=hwIPv6AddressLowerlimitWarningAlarm, hwDomainOnlinePPPUser=hwDomainOnlinePPPUser, hwDomainIPv6FlowDnPkt=hwDomainIPv6FlowDnPkt, hwSlotCardConnectNumTable=hwSlotCardConnectNumTable, hwDot1xAccessProfileName=hwDot1xAccessProfileName, hwDomainNDRAPrefixUsedPercent=hwDomainNDRAPrefixUsedPercent, hwCachetoFTPFail=hwCachetoFTPFail, hwDot1xAccessProfileServerTimeout=hwDot1xAccessProfileServerTimeout, hwUserAccessType=hwUserAccessType, hwOfflineRecordUserMAC=hwOfflineRecordUserMAC, hwRealmParseDirection=hwRealmParseDirection, hwMulticastListSourceIpMask=hwMulticastListSourceIpMask, hwAdminAlertBefore=hwAdminAlertBefore, hwIPOXpasswordKeyType=hwIPOXpasswordKeyType, hwDomainIPv6AddressConflictNum=hwDomainIPv6AddressConflictNum, hwSlotConnectNumMaxOnlineNum=hwSlotConnectNumMaxOnlineNum, hwDomainAccessUserStatEntry=hwDomainAccessUserStatEntry, hwTotalVLANOnlineNum=hwTotalVLANOnlineNum, hwDomainPDPrefixUsedNum=hwDomainPDPrefixUsedNum, hwSystemRecord=hwSystemRecord, hwTriggerLoose=hwTriggerLoose, hwVpnAccessUserStatEntry=hwVpnAccessUserStatEntry, hwTotalWrdOnlineNum=hwTotalWrdOnlineNum, hwOfflineRecordAccessType=hwOfflineRecordAccessType, hwUserMaxNum=hwUserMaxNum, hwDomainAcctRspFailuresNum=hwDomainAcctRspFailuresNum, hwAccessPVC=hwAccessPVC, hwCopsGroupSIGType=hwCopsGroupSIGType, hwAccessAcctMethod=hwAccessAcctMethod, hwAAAMibTrap=hwAAAMibTrap, hwGlobalAuthEventAuthenServerDownResponseFail=hwGlobalAuthEventAuthenServerDownResponseFail, hwDomainIdleCutFlow=hwDomainIdleCutFlow, hwDomainOnlineNum=hwDomainOnlineNum, hwUserName=hwUserName, hwDot1xAccessProfileGuestAuthorServiceSchemeName=hwDot1xAccessProfileGuestAuthorServiceSchemeName, hwIfMulticastForward=hwIfMulticastForward, hwMACAuthenAccessProfileDHCPRelaseOffline=hwMACAuthenAccessProfileDHCPRelaseOffline, hwAAASessionLowerLimitThreshold=hwAAASessionLowerLimitThreshold, hwDhcpOpt121RouteDestIp=hwDhcpOpt121RouteDestIp, hwAccessQosProfile=hwAccessQosProfile, hwSlotCardConnectNumOnlineNum=hwSlotCardConnectNumOnlineNum, hwAAAOnlineSessoinLowerLimitResume=hwAAAOnlineSessoinLowerLimitResume, hwVpnAccessUserStatVpnName=hwVpnAccessUserStatVpnName, hwUserLogEntry=hwUserLogEntry, hwTacGroupName=hwTacGroupName, hwDomainNDRAPrefixTotalNum=hwDomainNDRAPrefixTotalNum, hwAccessDelayPerSlotTable=hwAccessDelayPerSlotTable, hwUserGroupName=hwUserGroupName, hwOfflineRecordUserID=hwOfflineRecordUserID, hwIPOXUsernameIP=hwIPOXUsernameIP, userAuthenProfileFreeRuleName=userAuthenProfileFreeRuleName, hwAccessDevicePortName=hwAccessDevicePortName, hwIPv6AddressLowerlimitWarningResume=hwIPv6AddressLowerlimitWarningResume, hwAcctSchemeEntry=hwAcctSchemeEntry, hwDomainRenewIPTag=hwDomainRenewIPTag, hwDot1xAccessProfileClientTimeout=hwDot1xAccessProfileClientTimeout, userAuthenticationFreeRuleSourceIPMask=userAuthenticationFreeRuleSourceIPMask, hwAAASessionGroupLowerLimitAlarm=hwAAASessionGroupLowerLimitAlarm, hwAAATimerExpireCriticalLevelResumeThreshold=hwAAATimerExpireCriticalLevelResumeThreshold, hwIPv6PDPrefixLowerlimitWarningResume=hwIPv6PDPrefixLowerlimitWarningResume, userAuthenProfileMacAuthenFirst=userAuthenProfileMacAuthenFirst, hwAclId=hwAclId, hwUserGroupCarPbs=hwUserGroupCarPbs, hwLocalAuthorize=hwLocalAuthorize, hwIpAccessGroup=hwIpAccessGroup, hwAAADomainInboundVPNInstance=hwAAADomainInboundVPNInstance, hwIPv6OtherFlag=hwIPv6OtherFlag, hwReplyMessage=hwReplyMessage, userAuthenticationFreeRuleACLNumber=userAuthenticationFreeRuleACLNumber, userAuthenProfileGroup=userAuthenProfileGroup, hwUpperMacMovedUserPercentage=hwUpperMacMovedUserPercentage, hwLocalUserIfAllowWeakPassword=hwLocalUserIfAllowWeakPassword, hwPriority=hwPriority, hwBillsPoolBackupInterval=hwBillsPoolBackupInterval, hwAAADomainIPPoolGroup=hwAAADomainIPPoolGroup, hwRedirectTimesLimit=hwRedirectTimesLimit, hwAaaTrapsNotificationsGroup=hwAaaTrapsNotificationsGroup, userAuthenProfileDomainNameDelimiter=userAuthenProfileDomainNameDelimiter, hwDomainDhcpServerAck=hwDomainDhcpServerAck, hwPoratalServerFirstUrlKeyName=hwPoratalServerFirstUrlKeyName, hwShapingTemplate=hwShapingTemplate, hwDomainStatTable=hwDomainStatTable, hwDot1xAccessProfileHandshakeInterval=hwDot1xAccessProfileHandshakeInterval, hwWlanInterfaceDomainNameSecurityDelimiter=hwWlanInterfaceDomainNameSecurityDelimiter, hwUserGroupCarCir=hwUserGroupCarCir, hwRecordSchemeName=hwRecordSchemeName, hwWebServerRedirectKeyMscgName=hwWebServerRedirectKeyMscgName, hwAuthorizationState=hwAuthorizationState, hwDomainExt2Entry=hwDomainExt2Entry, hwDomainIncludePoolGroup=hwDomainIncludePoolGroup, hwDomainAccessUserStatUserStat=hwDomainAccessUserStatUserStat, hwReauthorizeEnable=hwReauthorizeEnable, hwAccessUpPacket64=hwAccessUpPacket64, hwResetHistoricMaxOnlineNum=hwResetHistoricMaxOnlineNum, hwSrvSchemeIpPoolOneName=hwSrvSchemeIpPoolOneName, hwPPPUserOfflineStandardize=hwPPPUserOfflineStandardize, hwAaaUserWebandFastGroup=hwAaaUserWebandFastGroup, hwAdminEnable=hwAdminEnable, hwDot1xAccessProfileGroup=hwDot1xAccessProfileGroup, hwDomainForcePushUrl=hwDomainForcePushUrl, hwTotalIPv4OnlineNum=hwTotalIPv4OnlineNum, hwMACAuthenAccessProfileUserNameDHCPOption=hwMACAuthenAccessProfileUserNameDHCPOption, hwDomainAuthenRejectsNum=hwDomainAuthenRejectsNum, hwMulticastProfileExtEntry=hwMulticastProfileExtEntry, hwDomainIdleCutTime=hwDomainIdleCutTime, hwAccessDelayPerSlotMaxTime=hwAccessDelayPerSlotMaxTime, hwNasSerial=hwNasSerial, hwDomainNameLocation=hwDomainNameLocation, hwRbsUp=hwRbsUp, userAuthenProfileAuthenSchemeName=userAuthenProfileAuthenSchemeName, hwMACAccessEntry=hwMACAccessEntry, userAuthenProfileArpDetectTimer=userAuthenProfileArpDetectTimer, userAuthenticationFreeRuleRowStatus=userAuthenticationFreeRuleRowStatus, hwDomainIPv6AddressFreeNum=hwDomainIPv6AddressFreeNum, hwAuthenticationState=hwAuthenticationState, hwDomainIPv6FlowUpByte=hwDomainIPv6FlowUpByte, hwUclGrpRowStatus=hwUclGrpRowStatus, hwRbpOldState=hwRbpOldState, userAuthenProfileSingleAccess=userAuthenProfileSingleAccess)
mibBuilder.exportSymbols("HUAWEI-AAA-MIB", hwGlobalAuthEventAuthenServerDownVlan=hwGlobalAuthEventAuthenServerDownVlan, hwTotalIPv6OnlineNum=hwTotalIPv6OnlineNum, hwAccessPortNo=hwAccessPortNo, hwInnerIsolateFlag=hwInnerIsolateFlag, hwOfflineRecordUserLogoutTime=hwOfflineRecordUserLogoutTime, hwPriDnsIPv6Address=hwPriDnsIPv6Address, hwAAASlotIPv6AddressThresholdAlarm=hwAAASlotIPv6AddressThresholdAlarm, hwIPv6PoolWarningThreshold=hwIPv6PoolWarningThreshold, hwUserDomainName=hwUserDomainName, hwAccessResourceInsufficientOutbound=hwAccessResourceInsufficientOutbound, userAuthenticationFreeRuleTable=userAuthenticationFreeRuleTable, hwAccessDelayPerSlotGroup=hwAccessDelayPerSlotGroup, hwAAASessionGroupLowerLimitResume=hwAAASessionGroupLowerLimitResume, hwPortalAccessProfileRowStatus=hwPortalAccessProfileRowStatus, hwAcctSchemeExtTable=hwAcctSchemeExtTable, hwDot1xAccessProfileReauthenticationTimeout=hwDot1xAccessProfileReauthenticationTimeout, userAuthenticationFreeRuleDestinationUserGroup=userAuthenticationFreeRuleDestinationUserGroup, hwInterfaceAccessUserStatUserStat=hwInterfaceAccessUserStatUserStat, hwAaaObjectGroups=hwAaaObjectGroups, hwOnlineUserNumUpperLimitAlarm=hwOnlineUserNumUpperLimitAlarm, hwAccessResourceInsufficientInbound=hwAccessResourceInsufficientInbound, hwAccessDeviceName=hwAccessDeviceName, hwLocalUserTimeRange=hwLocalUserTimeRange, hwWlanInterfaceGroup=hwWlanInterfaceGroup, hwAccessStartAcctTime=hwAccessStartAcctTime, hwAAADomainIPPoolTable=hwAAADomainIPPoolTable, hwAAADomainIPPoolPosition=hwAAADomainIPPoolPosition, userAuthenticationFreeRuleDestinationProtocol=userAuthenticationFreeRuleDestinationProtocol, hwDomainIPUsedNum=hwDomainIPUsedNum, hwBillsTFTPSrvIP=hwBillsTFTPSrvIP, hwLocalUserCallBackDialStr=hwLocalUserCallBackDialStr, hwAdminPwHistroyRecordNum=hwAdminPwHistroyRecordNum, hwDot1xAccessProfileURL=hwDot1xAccessProfileURL, hwAaaStatGroup=hwAaaStatGroup, hwWebServerIPSlave=hwWebServerIPSlave, hwAAAStatEntry=hwAAAStatEntry, hwUserGroupUsedNum=hwUserGroupUsedNum, userAuthenProfileAuthenFailAuthorResponseSuccess=userAuthenProfileAuthenFailAuthorResponseSuccess, hwSrvSchemeIpPoolTwoName=hwSrvSchemeIpPoolTwoName, hwLocalUserBlockInterval=hwLocalUserBlockInterval, hwMulticastListGroup=hwMulticastListGroup, hwIPv6PDPrefixLowerlimitWarningAlarm=hwIPv6PDPrefixLowerlimitWarningAlarm, userAuthenticationFreeRuleName=userAuthenticationFreeRuleName, userAuthenProfileAuthenFailAuthorUserGroupName=userAuthenProfileAuthenFailAuthorUserGroupName, hwAAADomainIPPoolRowStatus=hwAAADomainIPPoolRowStatus, hwAccessVRF=hwAccessVRF, hwRbpNewState=hwRbpNewState, hwMulticastListName=hwMulticastListName, hwDot1xAccessProfileTriggerPktType=hwDot1xAccessProfileTriggerPktType, hwLocalUserPriority=hwLocalUserPriority, hwDomainOutboundL2tpQoSProfile=hwDomainOutboundL2tpQoSProfile, hwOnlineUserNumUpperLimitThreshold=hwOnlineUserNumUpperLimitThreshold, userAuthenProfileAuthenticationMaxUser=userAuthenProfileAuthenticationMaxUser, hwAuthenSchemeName=hwAuthenSchemeName, hwAAAMibObjects=hwAAAMibObjects, hwTotalIPv4FlowUpPkt=hwTotalIPv4FlowUpPkt, hwAAATimerExpireCriticalLevelResume=hwAAATimerExpireCriticalLevelResume, hwDot1xAccessProfileTxPeriod=hwDot1xAccessProfileTxPeriod, hwDomainVrf=hwDomainVrf, hwAAAOfflineRecordEntry=hwAAAOfflineRecordEntry, hwHistoricMaxOnlineRemoteNum=hwHistoricMaxOnlineRemoteNum, hwCutUserAttri=hwCutUserAttri, hwDomainNDRAPrefixConflictNum=hwDomainNDRAPrefixConflictNum, hwPortalAccessProfilePortalServerDownUserGroupName=hwPortalAccessProfilePortalServerDownUserGroupName, hwStateBlockFirstTimeRangeName=hwStateBlockFirstTimeRangeName, hwDomainRowStatus=hwDomainRowStatus, hwUserIPAddress=hwUserIPAddress, hwReauthorizeUsergroup=hwReauthorizeUsergroup, hwGlobalDhcpOpt64SepAndSegGroup=hwGlobalDhcpOpt64SepAndSegGroup, hwAAATimerExpireMajorLevelResumeThreshold=hwAAATimerExpireMajorLevelResumeThreshold, hwPortalAccessProfileAlarmUserHighNum=hwPortalAccessProfileAlarmUserHighNum, hwLocalUserExpireDate=hwLocalUserExpireDate, hwBindAuthWebVrf=hwBindAuthWebVrf, hwAAAAccessUserResourceOrCpuAlarm=hwAAAAccessUserResourceOrCpuAlarm, hwAccountingState=hwAccountingState, hwVpnAccessUserStatUserStat=hwVpnAccessUserStatUserStat, hwIPOXUsernameOption82=hwIPOXUsernameOption82, hwUserAcctState=hwUserAcctState, hwAuthorCmdRowStatus=hwAuthorCmdRowStatus, hwRemoteDownloadAclUsedValue=hwRemoteDownloadAclUsedValue, hwIPv6NDRAPrefixLowerlimitWarningResume=hwIPv6NDRAPrefixLowerlimitWarningResume, hwDomainForcePushUrlTemplate=hwDomainForcePushUrlTemplate, hwDhcpOpt121RouteEntry=hwDhcpOpt121RouteEntry, hwBlockDisable=hwBlockDisable, hwDomainNextHopIP=hwDomainNextHopIP, hwServiceSchemeDnsSecond=hwServiceSchemeDnsSecond, hwAAASessionUpperLimitThreshold=hwAAASessionUpperLimitThreshold, hwAccessIPv6LanPrefix=hwAccessIPv6LanPrefix, hwWlanInterfaceDomainNameDelimiter=hwWlanInterfaceDomainNameDelimiter, hwUserInterface=hwUserInterface, hwIPv6PoolName=hwIPv6PoolName, hwTotalIPv6FlowUpByte=hwTotalIPv6FlowUpByte, hwGlobalAuthEventAuthenServerDownUserGroup=hwGlobalAuthEventAuthenServerDownUserGroup, hwUserGroupRowStatus=hwUserGroupRowStatus, hwIPPoolThreeName=hwIPPoolThreeName, hwAccessTimeLimit=hwAccessTimeLimit, hwAdminLoginFailedClear=hwAdminLoginFailedClear, hwAuthorSchemeEntry=hwAuthorSchemeEntry, hwPortalAccessProfileAlarmUserLowNum=hwPortalAccessProfileAlarmUserLowNum, hwWebServerMode=hwWebServerMode, hwSrvSchemeAdminUserPriority=hwSrvSchemeAdminUserPriority, hwUserIPv6Address=hwUserIPv6Address, hwUserGroupNumThreshold=hwUserGroupNumThreshold, hwMulticastProfileGroup=hwMulticastProfileGroup, hwAAASessionGroupUpperLimitResume=hwAAASessionGroupUpperLimitResume, hwWlanInterfaceEntry=hwWlanInterfaceEntry, hwLAMTraps=hwLAMTraps, hwSlotConnectNumEntry=hwSlotConnectNumEntry, hwIPOXpassword=hwIPOXpassword, hwLocalUserPwPolicyAdminEntry=hwLocalUserPwPolicyAdminEntry, hwOutboundRecord=hwOutboundRecord, userAuthenProfileAuthorSchemeName=userAuthenProfileAuthorSchemeName, hwAccessIPv6OtherFlag=hwAccessIPv6OtherFlag, hwRbsName=hwRbsName, hwDomainPPPoENum=hwDomainPPPoENum, hwDomainNameDelimiter=hwDomainNameDelimiter, hwCutDomain=hwCutDomain, hwVpdnGroupName=hwVpdnGroupName, hwPortalAccessProfileLocalServerAnonymous=hwPortalAccessProfileLocalServerAnonymous, hwMACAuthenAccessProfileServerTimeout=hwMACAuthenAccessProfileServerTimeout, hwValAcctType=hwValAcctType, hwAAASlotIPv6AddressThreshold=hwAAASlotIPv6AddressThreshold, hwMulticastProfileExtTable=hwMulticastProfileExtTable, hwSlotCardConnectNumNoAuthNum=hwSlotCardConnectNumNoAuthNum, hwTotalPPPoAOnlineNum=hwTotalPPPoAOnlineNum, hwAccessInterface=hwAccessInterface, hwUserVlan=hwUserVlan, hwBillsPoolNum=hwBillsPoolNum, hwPoolLowerLimitWarningThreshold=hwPoolLowerLimitWarningThreshold, hwDomainDPIPolicyName=hwDomainDPIPolicyName, hwWlanInterfaceTable=hwWlanInterfaceTable, hwTotalIPv6FlowDnPkt=hwTotalIPv6FlowDnPkt, hwExtVpdnGroupName=hwExtVpdnGroupName, hwMACAuthenAccessProfileTable=hwMACAuthenAccessProfileTable, hwDomainServiceSchemeName=hwDomainServiceSchemeName, hwAccessGateway=hwAccessGateway, hwMulticastListVpnInstance=hwMulticastListVpnInstance, hwUserIPv6NDRAPrefix=hwUserIPv6NDRAPrefix, userAuthenticationFreeRuleDestinationIP=userAuthenticationFreeRuleDestinationIP, hwAccessUCLGroup=hwAccessUCLGroup, hwMulticastVirtualSchedulRezPir=hwMulticastVirtualSchedulRezPir, hwAAAUserDot1X=hwAAAUserDot1X, hwAuthorCmdEntry=hwAuthorCmdEntry, hwMulticastListGroupIpMask=hwMulticastListGroupIpMask, hwAAASessionGroupUpperLimitThreshold=hwAAASessionGroupUpperLimitThreshold, hwBillPoolTable=hwBillPoolTable, hwAuthEventAuthFailVlan=hwAuthEventAuthFailVlan, hwIPLowerlimitWarningAlarm=hwIPLowerlimitWarningAlarm, hwAAAChasisIPv6AddressThresholdAlarm=hwAAAChasisIPv6AddressThresholdAlarm, hwRemoteDownloadAclThresholdAlarm=hwRemoteDownloadAclThresholdAlarm, hwSlotConnectNumSlot=hwSlotConnectNumSlot, hwLocalUserPasswordSetTime=hwLocalUserPasswordSetTime, hwUserGroupCarCbs=hwUserGroupCarCbs, hwDomainServiceType=hwDomainServiceType, hwPortalURL=hwPortalURL, hwDomainPDPrefixUsedPercent=hwDomainPDPrefixUsedPercent, userAuthenProfileRadiusServerName=userAuthenProfileRadiusServerName, hwSlotAccessUserStatUserStat=hwSlotAccessUserStatUserStat, hwDomainIPUsedPercent=hwDomainIPUsedPercent, hwIPLowerlimitWarningResume=hwIPLowerlimitWarningResume, userAuthenticationFreeRuleSourceMac=userAuthenticationFreeRuleSourceMac, hwReauthorizeTable=hwReauthorizeTable, hwTotalIPv6FlowDnByte=hwTotalIPv6FlowDnByte, hwInterfaceAccessUserStatGroup=hwInterfaceAccessUserStatGroup, hwAccessCARUpPIR=hwAccessCARUpPIR, userAuthenProfileDot1xDefaultDomain=userAuthenProfileDot1xDefaultDomain, hwOnlineUserNumLowerLimitThreshold=hwOnlineUserNumLowerLimitThreshold, hwAaaConformance=hwAaaConformance, hwMulticastListEntry=hwMulticastListEntry, hwLocalUserPwPolicyAccGroup=hwLocalUserPwPolicyAccGroup, hwLocalUserNoCallBackVerify=hwLocalUserNoCallBackVerify, hwAccessNormalServerGroup=hwAccessNormalServerGroup, hwSlotCardConnectNumCard=hwSlotCardConnectNumCard, hwAdminExpire=hwAdminExpire, hwAccessCurAccountingPlace=hwAccessCurAccountingPlace, hwPoolWarningThreshold=hwPoolWarningThreshold, hwMacMovedQuietUserSpec=hwMacMovedQuietUserSpec, hwQosProfileName=hwQosProfileName, hwAAATimerExpireMajorLevelAlarm=hwAAATimerExpireMajorLevelAlarm, hwHarddiskReachThreshold=hwHarddiskReachThreshold, hwUserGroupCarInBoundPir=hwUserGroupCarInBoundPir, userAuthenProfileAuthenFailAgingTime=userAuthenProfileAuthenFailAgingTime, userAuthenticationFreeRuleIPv6ACLNumber=userAuthenticationFreeRuleIPv6ACLNumber, userAuthenProfileDot1xAccessProfileName=userAuthenProfileDot1xAccessProfileName, hwAAASlotIPv6AddressThresholdResume=hwAAASlotIPv6AddressThresholdResume, hwDomainNDRAPrefixFreeNum=hwDomainNDRAPrefixFreeNum, hwParsePriority=hwParsePriority, hwLocalUserAccessLimitNum=hwLocalUserAccessLimitNum, hwAAATimerExpireCriticalLevelAlarm=hwAAATimerExpireCriticalLevelAlarm, hwHDtoFTPFail=hwHDtoFTPFail, userAuthenProfileDot1xForceDomain=userAuthenProfileDot1xForceDomain, hwAccessCARDnPIR=hwAccessCARDnPIR, hwUclGrpName=hwUclGrpName, hwDomainFlowStatistic=hwDomainFlowStatistic, userAuthenProfileEntry=userAuthenProfileEntry, hwDomainTable=hwDomainTable, hwAccessIPv6CPAssignIFID=hwAccessIPv6CPAssignIFID, hwMulticastProfileExtRowStatus=hwMulticastProfileExtRowStatus, hwTotalPortalServerUserNum=hwTotalPortalServerUserNum, hwDomainIPTotalNum=hwDomainIPTotalNum, hwCutUserName=hwCutUserName, hwSlotCardConnectNumIPv6OnlineNum=hwSlotCardConnectNumIPv6OnlineNum, userAuthenticationFreeRuleSourceIP=userAuthenticationFreeRuleSourceIP, hwAAARateRealUsedCount=hwAAARateRealUsedCount, hwRbpChangeReason=hwRbpChangeReason, hwUserSlotMaxNumThreshold=hwUserSlotMaxNumThreshold, hwWlanInterfaceDomainNameLocation=hwWlanInterfaceDomainNameLocation, hwServiceSchemeIdleCutFlow=hwServiceSchemeIdleCutFlow, hwAuthenFailDomain=hwAuthenFailDomain, hwDomainIPExcludeNum=hwDomainIPExcludeNum, hwDot1xAccessProfileEAPNotifyPktEAPCode=hwDot1xAccessProfileEAPNotifyPktEAPCode, hwAccessIdleCutTime=hwAccessIdleCutTime, hwAccessOnlineTime=hwAccessOnlineTime, hwMacMovedQuietUserClearAlarm=hwMacMovedQuietUserClearAlarm, hwAcctSchemeName=hwAcctSchemeName, hwLocalUserEntry=hwLocalUserEntry, hwAccessExtGroup=hwAccessExtGroup, hwAccessSlotNo=hwAccessSlotNo, userAuthenProfilePortalForceDomain=userAuthenProfilePortalForceDomain, hwHdWarningThreshold=hwHdWarningThreshold, hwTotalSuccessWebConnectNum=hwTotalSuccessWebConnectNum, hwMACAuthenAccessProfileEntry=hwMACAuthenAccessProfileEntry, hwMACAuthenAccessProfileUserNameDHCPOSubOption=hwMACAuthenAccessProfileUserNameDHCPOSubOption, hwPortalAccessProfileEntry=hwPortalAccessProfileEntry, hwCutEndUserID=hwCutEndUserID, hwMACAuthenAccessProfilePermitAuthenMACMask=hwMACAuthenAccessProfilePermitAuthenMACMask, hwDomainFlowDnByte=hwDomainFlowDnByte, hwGlobalDhcpOpt64SepAndSeg=hwGlobalDhcpOpt64SepAndSeg, hwAuthEventAuthenServerDownVlan=hwAuthEventAuthenServerDownVlan, hwLocalUserExtEntry=hwLocalUserExtEntry, hwTotalLacOnlineNum=hwTotalLacOnlineNum, hwDot1xAccessProfileHandshakeSwitch=hwDot1xAccessProfileHandshakeSwitch, hwUserBasicServiceIPType=hwUserBasicServiceIPType, hwDomainNameSecurityDelimiter=hwDomainNameSecurityDelimiter, hwDomainIndex=hwDomainIndex, userAuthenProfileDefaultDomain=userAuthenProfileDefaultDomain, hwLocalBlockTime=hwLocalBlockTime, hwAAAInboundVPNAccessUserStatTable=hwAAAInboundVPNAccessUserStatTable, hwAccessSubSlotNo=hwAccessSubSlotNo, hwOfflineRecordUserName=hwOfflineRecordUserName, hwLocalUserRowStatus=hwLocalUserRowStatus, hwAuthorSchemeName=hwAuthorSchemeName, hwInterfaceAccessUserStatTable=hwInterfaceAccessUserStatTable, hwShowUserLogStatistic=hwShowUserLogStatistic, hwDomainExt2Table=hwDomainExt2Table, hwSlotCardConnectNumBindAuthNum=hwSlotCardConnectNumBindAuthNum, hwAccessIdleCutFlow=hwAccessIdleCutFlow, hwAAAStat=hwAAAStat, hwUserAccessCeVlan=hwUserAccessCeVlan, hwLocalUserExtGroup=hwLocalUserExtGroup, userAuthenticationFreeRuleDestinationIPMask=userAuthenticationFreeRuleDestinationIPMask, hwTotalWlsOnlineNum=hwTotalWlsOnlineNum, hwGlobalAuthEventAuthFailResponseFail=hwGlobalAuthEventAuthFailResponseFail, hwDownPriority=hwDownPriority)
mibBuilder.exportSymbols("HUAWEI-AAA-MIB", hwCutAccessUserTable=hwCutAccessUserTable, hwAAATimerExpireMajorLevelResume=hwAAATimerExpireMajorLevelResume, hwDomainAccessedNum=hwDomainAccessedNum, hwSlotCardConnectNumPPPAuthNum=hwSlotCardConnectNumPPPAuthNum, hwMACAuthenAccessProfileUserNameFixedUserName=hwMACAuthenAccessProfileUserNameFixedUserName, hwDomainIPv6AddressUsedNum=hwDomainIPv6AddressUsedNum, hwUserGroupThresholdResume=hwUserGroupThresholdResume, hwPolicyRouteThreshold=hwPolicyRouteThreshold, hwDomainAcctSchemeName=hwDomainAcctSchemeName, hwSlotConnectNumMaxOnlineAcctReadyNum=hwSlotConnectNumMaxOnlineAcctReadyNum, hwResetOnlineFailReasonStatistic=hwResetOnlineFailReasonStatistic, hwOnlineUserNumLowerLimitResume=hwOnlineUserNumLowerLimitResume, hwSetUserQosProfileFail=hwSetUserQosProfileFail, hwTotalIPv4FlowDnByte=hwTotalIPv4FlowDnByte, hwDomainIPIdleNum=hwDomainIPIdleNum, hwDnsIPAddress=hwDnsIPAddress, hwServiceSchemeIdleCutType=hwServiceSchemeIdleCutType, hwMACAuthenAccessProfileFixedPassword=hwMACAuthenAccessProfileFixedPassword, hwAaaTrapOidGroup=hwAaaTrapOidGroup, hwSlotConnectNumGroup=hwSlotConnectNumGroup, hwPortalAccessProfileGroup=hwPortalAccessProfileGroup, userAuthenticationFreeRuleSourceMode=userAuthenticationFreeRuleSourceMode, hwMaxPortalServerUserNum=hwMaxPortalServerUserNum, hwPCReducePir=hwPCReducePir, hwAccessCARUpCBS=hwAccessCARUpCBS, hwLocalUserName=hwLocalUserName, hwAcctSchemeExtEntry=hwAcctSchemeExtEntry, hwAAATimerExpireMajorLevelThreshold=hwAAATimerExpireMajorLevelThreshold, hwMACAccessCID=hwMACAccessCID, hwUserIPAllocAlarmResume=hwUserIPAllocAlarmResume, hwTotalDot1XConnectNum=hwTotalDot1XConnectNum, hwPPPForceAuthtype=hwPPPForceAuthtype, hwUserIPv6AddressAllocAlarm=hwUserIPv6AddressAllocAlarm, userAuthenProfileAcctSchemeName=userAuthenProfileAcctSchemeName, hwLocalUserPassword=hwLocalUserPassword, hwWlanInterfaceIndex=hwWlanInterfaceIndex, hwLocalUserPasswordLifetimeMax=hwLocalUserPasswordLifetimeMax, hwAccessExtTable=hwAccessExtTable, hwAaaCompliances=hwAaaCompliances, hwAaaUserDot1XGroup=hwAaaUserDot1XGroup, userAuthenProfileServiceSchemeName=userAuthenProfileServiceSchemeName, hwTotalOnlineNum=hwTotalOnlineNum, hwDot1xAccessProfileMaxRetryValue=hwDot1xAccessProfileMaxRetryValue, hwAccessIPv6WanAddress=hwAccessIPv6WanAddress, userAuthenProfileSecurityNameDelimiter=userAuthenProfileSecurityNameDelimiter, hwServiceSchemeRowStatus=hwServiceSchemeRowStatus, hwDomainAuthenAcceptsNum=hwDomainAuthenAcceptsNum, hwAccessSpeedPeriod=hwAccessSpeedPeriod, hwGlobalAuthEventClientNoResponseUserGroup=hwGlobalAuthEventClientNoResponseUserGroup, hwOnlineUserNumAlarm=hwOnlineUserNumAlarm, hwOfflineReasonStatEntry=hwOfflineReasonStatEntry, hwSrvSchemeIpPoolThreeName=hwSrvSchemeIpPoolThreeName, hwUserLogIPAddress=hwUserLogIPAddress, hwSlotCardConnectNumTunnelAuthNum=hwSlotCardConnectNumTunnelAuthNum, hwAAAUserPPP=hwAAAUserPPP, hwAaa=hwAaa, hwDot1xAccessProfileReAuthenEnable=hwDot1xAccessProfileReAuthenEnable, hwAccessIndex=hwAccessIndex, hwLoginFailedTimes=hwLoginFailedTimes, hwUserIPv6PDPrefixLength=hwUserIPv6PDPrefixLength, hwPortalAccessProfilePortalServerName=hwPortalAccessProfilePortalServerName, hwIfUserMacSimple=hwIfUserMacSimple, hwServiceSchemeEntry=hwServiceSchemeEntry, hwDomainIncludeIPPoolGroupName=hwDomainIncludeIPPoolGroupName, hwDot1xAccessProfileIfEAPEnd=hwDot1xAccessProfileIfEAPEnd, userAuthenProfilePreAuthenAgingTime=userAuthenProfilePreAuthenAgingTime, hwVPDNGroupIndex=hwVPDNGroupIndex, hwRbsDownReason=hwRbsDownReason, hwLocalUserVpnInstance=hwLocalUserVpnInstance, hwCutMacAddres=hwCutMacAddres, hwDnsSecondIPAddress=hwDnsSecondIPAddress, hwPolicyRouteSlotMaxNum=hwPolicyRouteSlotMaxNum, hwCutVCI=hwCutVCI, hwMACAuthenAccessProfileReAuthenEnable=hwMACAuthenAccessProfileReAuthenEnable, hwAAADomainIPPoolIndex=hwAAADomainIPPoolIndex, hwOnlineFailReason=hwOnlineFailReason, hwServiceSchemeNextHopIp=hwServiceSchemeNextHopIp, hwAAACallRate=hwAAACallRate, hwdomainipv6nexthop=hwdomainipv6nexthop, hwRecordRowStatus=hwRecordRowStatus, hwAAAPasswordRemindDay=hwAAAPasswordRemindDay, hwAAAOnlineFailIndex=hwAAAOnlineFailIndex, hwUserAccessPVC=hwUserAccessPVC, hwAuthEventPreAuthUserGroup=hwAuthEventPreAuthUserGroup, hwDomainAuthenRequestsRcvNum=hwDomainAuthenRequestsRcvNum, hwMultiProfile=hwMultiProfile, hwAAATrapsDefine=hwAAATrapsDefine, hwAAASlotOnlineUserNumAlarm=hwAAASlotOnlineUserNumAlarm, hwSlotConnectNumTable=hwSlotConnectNumTable, hwSlotCardConnectNumIPv4OnlineNum=hwSlotCardConnectNumIPv4OnlineNum, hwSlotCardConnectNum8021xAuthNum=hwSlotCardConnectNum8021xAuthNum, hwInterfaceAccessUserStatInterfaceIndex=hwInterfaceAccessUserStatInterfaceIndex, hwUserGroupEntry=hwUserGroupEntry, hwMACAuthenAccessProfileGroup=hwMACAuthenAccessProfileGroup, hwSecDnsIPv6Address=hwSecDnsIPv6Address, hwMACAccessGroup=hwMACAccessGroup, hwBillTFTPGroup=hwBillTFTPGroup, hwAAAOnlineSessoinLowerLimitAlarm=hwAAAOnlineSessoinLowerLimitAlarm, userAuthenProfileName=userAuthenProfileName, hwDhcpOpt121RouteMask=hwDhcpOpt121RouteMask, hwUclGrpEntry=hwUclGrpEntry, hwEDSGLicenseExpireResume=hwEDSGLicenseExpireResume, hwDomainInboundL2tpQoSProfile=hwDomainInboundL2tpQoSProfile, hwIPAccessVRF=hwIPAccessVRF, hwValCopsServer=hwValCopsServer, hwOfflineRecordDomainName=hwOfflineRecordDomainName, hwIPv6PrefixshareFlag=hwIPv6PrefixshareFlag, hwWebServerURLSlave=hwWebServerURLSlave, hwDomainIPPoolMoveTo=hwDomainIPPoolMoveTo, hwSlotAccessUserStatEntry=hwSlotAccessUserStatEntry, hwIPv6CPAssignIFID=hwIPv6CPAssignIFID, hwDomainIPConflictNum=hwDomainIPConflictNum, hwTwoLevelAcctRadiusGroupName=hwTwoLevelAcctRadiusGroupName, hwAAAInboundVPNAccessUserStatEntry=hwAAAInboundVPNAccessUserStatEntry, hwAAADomainInboundQoSProfile=hwAAADomainInboundQoSProfile, hwTotalLnsOnlineNum=hwTotalLnsOnlineNum, hwUclGrpGroup=hwUclGrpGroup, hwAdminAlertOrginal=hwAdminAlertOrginal, hwValRadiusServer=hwValRadiusServer, hwAccessIfIdleCut=hwAccessIfIdleCut, hwAccessBasicIPType=hwAccessBasicIPType, hwUserGroupIndex=hwUserGroupIndex, hwAuthenSchemeGroup=hwAuthenSchemeGroup, hwDomainIPPoolMoveToTable=hwDomainIPPoolMoveToTable, hwMACAuthenAccessProfileReauthenticationTimeout=hwMACAuthenAccessProfileReauthenticationTimeout, hwCutStartUserID=hwCutStartUserID, hwAccessCARDnCBS=hwAccessCARDnCBS, hwAAACpuUsage=hwAAACpuUsage, hwUserLoginTime=hwUserLoginTime, hwGlobalAuthEventAuthFailUserGroup=hwGlobalAuthEventAuthFailUserGroup, hwUserGroupCarPir=hwUserGroupCarPir, hwExpRemark=hwExpRemark, userAuthenProfilePreAuthenReAuthenTimer=userAuthenProfilePreAuthenReAuthenTimer, hwAAADomainOutboundQoSProfile=hwAAADomainOutboundQoSProfile, hwPortalAccessProfileLocalServerEnable=hwPortalAccessProfileLocalServerEnable, hwLocalUserPwPolicyAdminGroup=hwLocalUserPwPolicyAdminGroup, hwAaaUserPppGroup=hwAaaUserPppGroup, hwAuthenSchemeEntry=hwAuthenSchemeEntry, hwAccessUpFlow64=hwAccessUpFlow64, hwLocalRetryTime=hwLocalRetryTime, hwAAARateRealAverage=hwAAARateRealAverage, hwTotaltelnetOnlineNum=hwTotaltelnetOnlineNum, hwMulticastListRowStatus=hwMulticastListRowStatus, hwDot1xAccessProfileEntry=hwDot1xAccessProfileEntry, hwPortalAccessProfileAuthenNetWork=hwPortalAccessProfileAuthenNetWork, hwAccessDeviceMACAddress=hwAccessDeviceMACAddress, hwAccessCARDnCIR=hwAccessCARDnCIR, hwDomainIncludePoolGroupEntry=hwDomainIncludePoolGroupEntry, hwAAASetting=hwAAASetting, hwAccessIPv6CPIFIDAvailable=hwAccessIPv6CPIFIDAvailable, hwAccessLineID=hwAccessLineID, hwAccessPVlanAcctCopyServerGroup=hwAccessPVlanAcctCopyServerGroup, hwSlotCardConnectNumAdminAuthNum=hwSlotCardConnectNumAdminAuthNum, hwAAAPasswordRepeatNumber=hwAAAPasswordRepeatNumber, hwUserLogPort=hwUserLogPort, hwLocalUserTable=hwLocalUserTable, hwAuthEventCfgEntry=hwAuthEventCfgEntry, hwDot1xAccessProfileHandShakePktType=hwDot1xAccessProfileHandShakePktType, hwDomainIncludeIPPoolMoveto=hwDomainIncludeIPPoolMoveto, hwIfDomainActive=hwIfDomainActive, userAuthenProfileDomainNameLocation=userAuthenProfileDomainNameLocation, hwLocalUserAccessType=hwLocalUserAccessType, hwRemoteRetryTime=hwRemoteRetryTime, hwBillTFTPTable=hwBillTFTPTable, hwSlotCardConnectNumWlanAuthNum=hwSlotCardConnectNumWlanAuthNum, hwDomainIncludePoolGroupTable=hwDomainIncludePoolGroupTable, hwDomainNDRAPrefixUsedNum=hwDomainNDRAPrefixUsedNum, hwLocalRetryInterval=hwLocalRetryInterval, userAuthenProfileRowStatus=userAuthenProfileRowStatus, hwRbpChangeName=hwRbpChangeName, userAuthenProfileForceDomain=userAuthenProfileForceDomain, hwDomainAccessUserStatTable=hwDomainAccessUserStatTable, hwAAARateRealPeak=hwAAARateRealPeak, hwAdminUserPriority=hwAdminUserPriority, hwCopsGroupSSGType=hwCopsGroupSSGType, hwAccessDnPacket64=hwAccessDnPacket64, hwDot1xAccessProfileEAPNotifyPktEAPType=hwDot1xAccessProfileEAPNotifyPktEAPType, userAuthenticationFreeRuleEntry=userAuthenticationFreeRuleEntry, userAuthenProfileMACAuthenForceDomain=userAuthenProfileMACAuthenForceDomain, hwMACAccessMACAddress=hwMACAccessMACAddress, hwIfPPPoeURL=hwIfPPPoeURL, hwWebServerUrlParameter=hwWebServerUrlParameter, hwAccRealTimeInter=hwAccRealTimeInter, hwAccessType=hwAccessType, hwDomainAcctRequestsRcvNum=hwDomainAcctRequestsRcvNum, hwSlotCardConnectNumEntry=hwSlotCardConnectNumEntry, hwWlanInterfaceDomainNameParseDirection=hwWlanInterfaceDomainNameParseDirection, hwDomainIncludeIPPoolGroupRowStates=hwDomainIncludeIPPoolGroupRowStates, hwTotalBindConnectNum=hwTotalBindConnectNum, hwRoamChar=hwRoamChar, hwDomainNDRAPrefixExcludeNum=hwDomainNDRAPrefixExcludeNum, hwUserNDRAPrefixAllocAlarm=hwUserNDRAPrefixAllocAlarm, hwUserSlot=hwUserSlot, hwCutVlanID=hwCutVlanID, hwMulticastProfileRowStatus=hwMulticastProfileRowStatus, hwAccessTotalFlow64Limit=hwAccessTotalFlow64Limit, hwServiceSchemeDnsFirst=hwServiceSchemeDnsFirst, hwAccessIPv6DnPacket64=hwAccessIPv6DnPacket64, hwPCReduceCir=hwPCReduceCir, hwAccessCurAuthenPlace=hwAccessCurAuthenPlace, hwUserDelegationPrefixAllocAlarm=hwUserDelegationPrefixAllocAlarm, userAuthenProfileAuthenFailReAuthenTimer=userAuthenProfileAuthenFailReAuthenTimer, hwCutUserGroup=hwCutUserGroup, hwDot1xTemplate=hwDot1xTemplate, hwAuthorRowStatus=hwAuthorRowStatus, hwSlotConnectNumOnlineNum=hwSlotConnectNumOnlineNum, hwOfflineRecordUserLoginTime=hwOfflineRecordUserLoginTime, hwSlotCardConnectNumDualOnlineNum=hwSlotCardConnectNumDualOnlineNum, hwAuthorCmdMode=hwAuthorCmdMode, userAuthenProfileAuthenServerUpReauthen=userAuthenProfileAuthenServerUpReauthen, hwMulticastListTable=hwMulticastListTable, hwTotalIPv4FlowDnPkt=hwTotalIPv4FlowDnPkt, hwUserGroupTable=hwUserGroupTable, hwTotalftpOnlineNum=hwTotalftpOnlineNum, hwBindAuthWebVrfSlave=hwBindAuthWebVrfSlave, hwMulticastProfileEntry=hwMulticastProfileEntry, hwOfflineRecordAccessPeVlan=hwOfflineRecordAccessPeVlan, hwUserLogVersion=hwUserLogVersion, hwIPv6CPIFIDAvailable=hwIPv6CPIFIDAvailable, hwRedKeyUserMac=hwRedKeyUserMac, hwTotalSuccessDot1XConnectNum=hwTotalSuccessDot1XConnectNum, hwUserGroupCarInBoundCir=hwUserGroupCarInBoundCir, userAuthenProfileTable=userAuthenProfileTable, hwTotalNCPFailNum=hwTotalNCPFailNum, hwLocalUserExtTable=hwLocalUserExtTable, hwMacMovedQuietMaxUserAlarm=hwMacMovedQuietMaxUserAlarm, hwAAAOnlineFailRecordEntry=hwAAAOnlineFailRecordEntry, hwCutAccessInterface=hwCutAccessInterface, hwAaaCompliance=hwAaaCompliance, hwDomainNameParseDirection=hwDomainNameParseDirection, hwAAAChasisIPv6AddressThresholdResume=hwAAAChasisIPv6AddressThresholdResume, hwAuthorCmdLevel=hwAuthorCmdLevel, hwAAARateRealPercent=hwAAARateRealPercent, userAuthenProfileAuthenFailAuthorServiceSchemeName=userAuthenProfileAuthenFailAuthorServiceSchemeName, hwMulticastProfileTable=hwMulticastProfileTable, hwMulticastVirtualSchedulRezCir=hwMulticastVirtualSchedulRezCir, hwMACAuthenAccessProfileTriggerDHCPOptionType=hwMACAuthenAccessProfileTriggerDHCPOptionType, hwAccessCARDnPBS=hwAccessCARDnPBS, hwSlotAccessUserStatSlot=hwSlotAccessUserStatSlot, hwAAASlotOnlineUserNumResume=hwAAASlotOnlineUserNumResume, userAuthenticationFreeRuleExtEntry=userAuthenticationFreeRuleExtEntry, hwAccessPortType=hwAccessPortType, userAuthenProfileArpDetect=userAuthenProfileArpDetect, hwEDSGLicenseExpireAlarm=hwEDSGLicenseExpireAlarm, hwHistoricMaxOnlineNum=hwHistoricMaxOnlineNum, hwUserIPAllocAlarm=hwUserIPAllocAlarm, hwAccessDelayPerSlotSlot=hwAccessDelayPerSlotSlot, hwMaxUserThresholdType=hwMaxUserThresholdType, hwLocalUserPwPolicyAdmin=hwLocalUserPwPolicyAdmin, hwAccMethod=hwAccMethod, hwOfflineReasonStatistic=hwOfflineReasonStatistic, hwSlotAccessUserStatGroup=hwSlotAccessUserStatGroup, hwMulticastProfileName=hwMulticastProfileName, hwAcctOnlineFail=hwAcctOnlineFail)
mibBuilder.exportSymbols("HUAWEI-AAA-MIB", hwTotalIPv6FlowUpPkt=hwTotalIPv6FlowUpPkt, hwDomainExtGroup=hwDomainExtGroup, hwServiceSchemeIdleCutFlowValue=hwServiceSchemeIdleCutFlowValue, hwAAAOnlineFailRecordTable=hwAAAOnlineFailRecordTable, hwDomainPPPURL=hwDomainPPPURL, hwAcctSchemeExtGroup=hwAcctSchemeExtGroup, userAuthenticationFreeRuleNumber=userAuthenticationFreeRuleNumber, hwMulticastProfileExtGroup=hwMulticastProfileExtGroup, hwAccessSpeedNumber=hwAccessSpeedNumber, hwAccessExtEntry=hwAccessExtEntry, hwAcctStartFail=hwAcctStartFail, hwIPAccessIPaddress=hwIPAccessIPaddress, hwUserAccessPeVlan=hwUserAccessPeVlan, hwAccessCARUpCIR=hwAccessCARUpCIR, hwAccessIPv6WanPrefix=hwAccessIPv6WanPrefix, hwMACAuthenAccessProfilePermitAuthenMAC=hwMACAuthenAccessProfilePermitAuthenMAC, hwAuthEventAuthenServerDownUserGroup=hwAuthEventAuthenServerDownUserGroup, hwOnlineUserNumLowerLimitAlarm=hwOnlineUserNumLowerLimitAlarm, hwLocalUserIdleTimeoutSecond=hwLocalUserIdleTimeoutSecond, hwUserIPv6AddressAllocAlarmResume=hwUserIPv6AddressAllocAlarmResume, hwUserAuthorState=hwUserAuthorState, hwAAADomainIPPoolEntry=hwAAADomainIPPoolEntry, hwLpRemark=hwLpRemark, hwMACAuthenAccessProfileDHCPRenewReAuthen=hwMACAuthenAccessProfileDHCPRenewReAuthen, hwLamTrapsNotificationsGroup=hwLamTrapsNotificationsGroup, hwUserLogTable=hwUserLogTable, hwOfflineRecordInterface=hwOfflineRecordInterface, hwPortalAccessProfileName=hwPortalAccessProfileName, hwVpnAccessUserStatTable=hwVpnAccessUserStatTable, hwUserGroupCarInBoundPbs=hwUserGroupCarInBoundPbs, hwAccessCARUpPBS=hwAccessCARUpPBS, hwCopsGroupCIPNType=hwCopsGroupCIPNType, hwWebServerURL=hwWebServerURL, hwDomainFlowDnPkt=hwDomainFlowDnPkt, hwMulticastListGroupIp=hwMulticastListGroupIp, hwDot1xAccessProfileEAPEndMethod=hwDot1xAccessProfileEAPEndMethod, userAuthenProfilePortalAccessProfileName=userAuthenProfilePortalAccessProfileName, hwOnlineUserNumThreshold=hwOnlineUserNumThreshold, hwDomainFlowUpByte=hwDomainFlowUpByte, hwMultiIPv6ProfileName=hwMultiIPv6ProfileName, hwUserGroupCarInBoundCbs=hwUserGroupCarInBoundCbs, hwOfflineReason=hwOfflineReason, hwAccessSSID=hwAccessSSID, hwDomainAccessLimitNum=hwDomainAccessLimitNum, hwCutIPPoolName=hwCutIPPoolName, hwDomainName=hwDomainName, userAuthenProfileAuthenServerDownVLAN=userAuthenProfileAuthenServerDownVLAN, hwAccessCARIfDnActive=hwAccessCARIfDnActive, hwRbsDown=hwRbsDown, hwStartFailOnlineIfSendInterim=hwStartFailOnlineIfSendInterim, hwDomainIncludeIPPoolName=hwDomainIncludeIPPoolName, hwAAAInboundVPNName=hwAAAInboundVPNName, hwOfflineReasonStatTable=hwOfflineReasonStatTable, hwAAAOfflineIndex=hwAAAOfflineIndex, hwDomainAccessUserStatGroup=hwDomainAccessUserStatGroup, hwServicePolicyName=hwServicePolicyName, hwLocalUserBlockFailTimes=hwLocalUserBlockFailTimes, hwIfRealtimeAcct=hwIfRealtimeAcct, hwWebServerIP=hwWebServerIP, hwDomainIdleCutType=hwDomainIdleCutType, hwUclGrpTable=hwUclGrpTable, hwCutIfIndex=hwCutIfIndex, hwRemoteAuthorize=hwRemoteAuthorize, hwAcctRealTimeIntervalUnit=hwAcctRealTimeIntervalUnit, hwPoratalServerUrlParameter=hwPoratalServerUrlParameter, hwAuthorSchemeTable=hwAuthorSchemeTable, hwDomainStatGroup=hwDomainStatGroup, hwAccessDownPriority=hwAccessDownPriority, hwLocalUserIpAddress=hwLocalUserIpAddress, hwAuthorSchemeGroup=hwAuthorSchemeGroup, hwDomainDhcpOpt64SepAndSeg=hwDomainDhcpOpt64SepAndSeg, hwResetOfflineReasonStatistic=hwResetOfflineReasonStatistic, hwAccessActionFlag=hwAccessActionFlag, hwPortalAccessProfilePortalServerDownServiceSchemeName=hwPortalAccessProfilePortalServerDownServiceSchemeName, hwGlobalDhcpServerAckGroup=hwGlobalDhcpServerAckGroup, hwftpdirction=hwftpdirction, hwAAARateEntry=hwAAARateEntry, hwHarddiskoverflow=hwHarddiskoverflow, hwRealmNameLocation=hwRealmNameLocation, hwDefaultUserName=hwDefaultUserName, hwBillsPoolReset=hwBillsPoolReset, hwUserSlotMaxNum=hwUserSlotMaxNum, hwUserGroupThresholdAlarm=hwUserGroupThresholdAlarm, hwTotalWebConnectNum=hwTotalWebConnectNum, hwDomainExtEntry=hwDomainExtEntry, hwInterIsolateFlag=hwInterIsolateFlag, hwAccessDelayPerSlotTransitionStep=hwAccessDelayPerSlotTransitionStep, hwBillsTFTPMainFileName=hwBillsTFTPMainFileName, hwDomainPDPrefixConflictNum=hwDomainPDPrefixConflictNum, hwPortalAccessProfilePortalServerUpReAuthen=hwPortalAccessProfilePortalServerUpReAuthen, hwTotalPPPoeOnlineNum=hwTotalPPPoeOnlineNum, hwAAATimerExpireCriticalLevelThreshold=hwAAATimerExpireCriticalLevelThreshold, hwReauthorizeUsername=hwReauthorizeUsername, hwDualStackAccountingType=hwDualStackAccountingType, hwAAATrapOid=hwAAATrapOid, hwLAMTrapsDefine=hwLAMTrapsDefine, hwAAATraps=hwAAATraps, hwAuthEventClientNoResponseVlan=hwAuthEventClientNoResponseVlan, hwDot1xAccessProfileRowStatus=hwDot1xAccessProfileRowStatus, hwAccessAPMAC=hwAccessAPMAC, hwCutVRF=hwCutVRF, hwAAAUserResourceUsage=hwAAAUserResourceUsage, hwQoSProfileName=hwQoSProfileName, hwResetUserLogStatistic=hwResetUserLogStatistic, hwIPPoolOneName=hwIPPoolOneName, hwIPv6PoolLowerLimitWarningThreshold=hwIPv6PoolLowerLimitWarningThreshold, hwGlobalDhcpServerAck=hwGlobalDhcpServerAck, hwAcctSchemeGroup=hwAcctSchemeGroup, hwDomainAuthenSchemeName=hwDomainAuthenSchemeName, hwPubicLacUserNum=hwPubicLacUserNum, hwLocalUserPasswordLifetimeMin=hwLocalUserPasswordLifetimeMin, hwTotalOtherPPPFailNum=hwTotalOtherPPPFailNum, hwMacMovedUserPercentage=hwMacMovedUserPercentage, hwGlobalAuthEventPreAuthVlan=hwGlobalAuthEventPreAuthVlan, hwSlotCardConnectNumSlot=hwSlotCardConnectNumSlot, hwCutIPaddress=hwCutIPaddress, hwBindAuthWebIP=hwBindAuthWebIP, hwAccessIPv6LanPrefixLen=hwAccessIPv6LanPrefixLen, hwOfflineReasonStatGroup=hwOfflineReasonStatGroup, hwNtvUserProfileName=hwNtvUserProfileName, hwLocalUserPasswordIsOrginal=hwLocalUserPasswordIsOrginal, hwObsoleteGroup=hwObsoleteGroup, hwOfflineSpeedNumber=hwOfflineSpeedNumber, hwAccessAuthenMethod=hwAccessAuthenMethod, hwOnlineUserNumUpperLimitResume=hwOnlineUserNumUpperLimitResume, hwHarddiskOK=hwHarddiskOK, userAuthenProfilePreAuthenUserGroupName=userAuthenProfilePreAuthenUserGroupName, hwIPv6CPWaitDHCPv6Delay=hwIPv6CPWaitDHCPv6Delay, hwAAARateTable=hwAAARateTable, hwDot1xAccessProfileGuestAuthorUserGroupName=hwDot1xAccessProfileGuestAuthorUserGroupName, hwAAARateType=hwAAARateType, hwDomainExtTable=hwDomainExtTable, hwAccEnable=hwAccEnable, hwServiceSchemeUserPriority=hwServiceSchemeUserPriority, hwAcctSessionID=hwAcctSessionID, hwDomainEntry=hwDomainEntry, hwAuthEventAuthFailResponseFail=hwAuthEventAuthFailResponseFail, hwMACAuthenAccessProfileMACAddressPassword=hwMACAuthenAccessProfileMACAddressPassword, hwAcctRowStatus=hwAcctRowStatus, hwPolicyRoute=hwPolicyRoute, hwOfflineRecordOfflineReason=hwOfflineRecordOfflineReason, hwTotalSuccessBindConnectNum=hwTotalSuccessBindConnectNum, userAuthenProfileHwtacacsServerName=userAuthenProfileHwtacacsServerName, hwAccessIPv6ManagedAddressFlag=hwAccessIPv6ManagedAddressFlag, hwTotalAuthenFailNum=hwTotalAuthenFailNum, hwDomainFlowUpPkt=hwDomainFlowUpPkt, hwUserNDRAPrefixAllocAlarmResume=hwUserNDRAPrefixAllocAlarmResume, hwCmdRecord=hwCmdRecord, hwStateBlockForthTimeRangeName=hwStateBlockForthTimeRangeName, hwHdFreeamount=hwHdFreeamount, hwUserDelegationPrefixAllocAlarmResume=hwUserDelegationPrefixAllocAlarmResume, hwAuthorMethod=hwAuthorMethod, userAuthenProfilePortalDefaultDomain=userAuthenProfilePortalDefaultDomain, hwPoratalServerFirstUrlKeyDefaultName=hwPoratalServerFirstUrlKeyDefaultName, hwAccessDomainAcctCopySeverGroup=hwAccessDomainAcctCopySeverGroup, hwSlotAccessUserStatTable=hwSlotAccessUserStatTable, hwAccessAuthtype=hwAccessAuthtype, hwDomainStatEntry=hwDomainStatEntry, hwAuthEventPreAuthVlan=hwAuthEventPreAuthVlan, hwDot1xAccessProfileGuestAuthorVLAN=hwDot1xAccessProfileGuestAuthorVLAN, hwPortalAccessProfileTable=hwPortalAccessProfileTable, hwUserAuthenState=hwUserAuthenState, hwAAASettingEntry=hwAAASettingEntry, hwWlanInterfaceName=hwWlanInterfaceName, hwAuthenMethod=hwAuthenMethod, hwDomainIfSrcRoute=hwDomainIfSrcRoute, hwDomainAcctRspSuccessNum=hwDomainAcctRspSuccessNum, userAuthenProfileMACAuthenDefaultDomain=userAuthenProfileMACAuthenDefaultDomain, hwCutVPI=hwCutVPI, userAuthenProfileUserGroupName=userAuthenProfileUserGroupName, userAuthenProfileMaxUser=userAuthenProfileMaxUser, hwAccessDelayPerSlotRowStatus=hwAccessDelayPerSlotRowStatus, hwAccessDnFlow64=hwAccessDnFlow64, hwIdleTimeLength=hwIdleTimeLength, userAuthenticationFreeRuleSourceInterface=userAuthenticationFreeRuleSourceInterface, hwAccessDomain=hwAccessDomain, hwPortalAccessProfilePortalAccessDirect=hwPortalAccessProfilePortalAccessDirect, hwAuthenFailPolicy=hwAuthenFailPolicy, userAuthenProfileAuthenFailAuthorVLAN=userAuthenProfileAuthenFailAuthorVLAN, hwAccessPriority=hwAccessPriority, hwAAAUserBind=hwAAAUserBind, hwAuthenRowStatus=hwAuthenRowStatus, userAuthenProfilePermitDomain=userAuthenProfilePermitDomain, hwLocalUserPwPolicyAcc=hwLocalUserPwPolicyAcc, userAuthenProfileAuthenServerDownResponseSuccess=userAuthenProfileAuthenServerDownResponseSuccess, userAuthenticationFreeRuleExtTable=userAuthenticationFreeRuleExtTable, hwAccessDelayTransitionStep=hwAccessDelayTransitionStep, hwIPPoolTwoName=hwIPPoolTwoName, hwAuthEventClientNoResponseUserGroup=hwAuthEventClientNoResponseUserGroup, hwPortalAccessProfileAuthenNetWorkMask=hwPortalAccessProfileAuthenNetWorkMask, hwTotalDualStackOnlineNum=hwTotalDualStackOnlineNum, hwAccessStartTime=hwAccessStartTime, hwAAAOnlineSessoinUpperLimitAlarm=hwAAAOnlineSessoinUpperLimitAlarm, hwRealmNameChar=hwRealmNameChar, hwRecordTacGroupName=hwRecordTacGroupName, hwDot1xAccessProfileTable=hwDot1xAccessProfileTable, hwMulticastListIndex=hwMulticastListIndex, hwDomainType=hwDomainType, hwDomainIPv6FlowDnByte=hwDomainIPv6FlowDnByte, hwServiceSchemeTable=hwServiceSchemeTable, hwHistoricMaxOnlineAcctReadyNum=hwHistoricMaxOnlineAcctReadyNum, hwAccessDelayTime=hwAccessDelayTime, hwAccessUserName=hwAccessUserName, hwDhcpOpt121RouteTable=hwDhcpOpt121RouteTable, hwAccessUserGroup=hwAccessUserGroup, hwIPv6NDRAPrefixLowerlimitWarningAlarm=hwIPv6NDRAPrefixLowerlimitWarningAlarm, hwDomainGroup=hwDomainGroup, hwAccessAPID=hwAccessAPID, hwAccessDelayPerSlotEntry=hwAccessDelayPerSlotEntry, hwGlobalAuthEventPreAuthUserGroup=hwGlobalAuthEventPreAuthUserGroup, hwAccessIPv6IFID=hwAccessIPv6IFID, hwAccPwHistroyRecordNum=hwAccPwHistroyRecordNum, hwDomainIPPoolMoveToEntry=hwDomainIPPoolMoveToEntry, hwTotalConnectNum=hwTotalConnectNum, hwAAASessionGroupUpperLimitAlarm=hwAAASessionGroupUpperLimitAlarm, hwSlotCardConnectNumWebAuthNum=hwSlotCardConnectNumWebAuthNum, userAuthenProfileAuthenticationMode=userAuthenProfileAuthenticationMode, hwAAAChasisIPv6AddressThreshold=hwAAAChasisIPv6AddressThreshold, userAuthenticationFreeRuleSourceVlan=userAuthenticationFreeRuleSourceVlan, hwRecordSchemeGroup=hwRecordSchemeGroup, hwStatisticPeriod=hwStatisticPeriod, hwLocalUserPwPolicyAccEntry=hwLocalUserPwPolicyAccEntry, hwServiceSchemeGroup=hwServiceSchemeGroup, hwAAARateGroup=hwAAARateGroup, hwUserMAC=hwUserMAC, hwBindAuthWebIPSlave=hwBindAuthWebIPSlave, hwAccessIPv6UpPacket64=hwAccessIPv6UpPacket64, hwDomainIPv6AddressExcludeNum=hwDomainIPv6AddressExcludeNum, hwAccessIPAddress=hwAccessIPAddress, hwDhcpOpt121RouteGroup=hwDhcpOpt121RouteGroup, hwDomainZone=hwDomainZone, hwAdminLoginFailed=hwAdminLoginFailed, hwIPAccessTable=hwIPAccessTable, hwUserID=hwUserID, hwGlobalControl=hwGlobalControl, hwTotalLCPFailNum=hwTotalLCPFailNum, hwIPv6ManagedAddressFlag=hwIPv6ManagedAddressFlag, userAuthenticationFreeRuleGroup=userAuthenticationFreeRuleGroup)
