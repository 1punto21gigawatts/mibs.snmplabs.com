#
# PySNMP MIB module HH3C-IPSEC-MONITOR-V2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-IPSEC-MONITOR-V2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:27:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, Gauge32, iso, Counter32, Bits, Integer32, MibIdentifier, ModuleIdentity, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "iso", "Counter32", "Bits", "Integer32", "MibIdentifier", "ModuleIdentity", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "TimeTicks")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
hh3cIPsecMonitorV2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 126))
hh3cIPsecMonitorV2.setRevisions(('2012-06-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cIPsecMonitorV2.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hh3cIPsecMonitorV2.setLastUpdated('201206270000Z')
if mibBuilder.loadTexts: hh3cIPsecMonitorV2.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cIPsecMonitorV2.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: hh3cIPsecMonitorV2.setDescription('The MIB is designed to get statistic information of IPsec tunnels. With this MIB, we can get information of a certain tunnel or all tunnels.')
class Hh3cIPsecDiffHellmanGrpV2(TextualConvention, Integer32):
    description = 'The Diffie Hellman Group used in the IKE and IPsec negotiations. invalidGroup(2147483647) is defined as invalid value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 14, 24, 2147483647))
    namedValues = NamedValues(("none", 0), ("dhGroup1", 1), ("dhGroup2", 2), ("dhGroup5", 5), ("dhGroup14", 14), ("dhGroup24", 24), ("invalidGroup", 2147483647))

class Hh3cIPsecEncapModeV2(TextualConvention, Integer32):
    description = 'The encapsulation mode used by an IPsec Phase-2 Tunnel. invalidMode(2147483647) is defined as invalid value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))
    namedValues = NamedValues(("tunnel", 1), ("transport", 2), ("invalidMode", 2147483647))

class Hh3cIPsecEncryptAlgoV2(TextualConvention, Integer32):
    description = 'The encryption algorithm used in the IKE and IPsec negotiations. invalidAlg(2147483647) is defined as invalid value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 2147483647))
    namedValues = NamedValues(("none", 0), ("desCbc", 1), ("ideaCbc", 2), ("blowfishCbc", 3), ("rc5R16B64Cbc", 4), ("tripleDesCbc", 5), ("castCbc", 6), ("aesCbc", 7), ("nsaCbc", 8), ("aesCbc128", 9), ("aesCbc192", 10), ("aesCbc256", 11), ("aesCtr", 12), ("aesCamelliaCbc", 13), ("rc4", 14), ("invalidAlg", 2147483647))

class Hh3cIPsecAuthAlgoV2(TextualConvention, Integer32):
    description = 'The authentication algorithm used in the IKE negotiations. invalidAlg(2147483647) is defined as invalid value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 2147483647))
    namedValues = NamedValues(("none", 0), ("md5", 1), ("sha1", 2), ("sha256", 3), ("sha384", 4), ("sha512", 5), ("invalidAlg", 2147483647))

class Hh3cIPsecSaProtocolV2(TextualConvention, Integer32):
    description = 'The protocol of security association.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4))
    namedValues = NamedValues(("reserved", 0), ("ah", 2), ("esp", 3), ("ipcomp", 4))

class Hh3cIPsecIDTypeV2(TextualConvention, Integer32):
    description = 'The type of IPsec Identity.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("reserved", 0), ("ipv4Addr", 1), ("fqdn", 2), ("userFqdn", 3), ("ipv4AddrSubnet", 4), ("ipv6Addr", 5), ("ipv6AddrSubnet", 6), ("ipv4AddrRange", 7), ("ipv6AddrRange", 8), ("derAsn1Dn", 9), ("derAsn1Gn", 10), ("keyId", 11))

class Hh3cIPsecTrafficTypeV2(TextualConvention, Integer32):
    description = 'The type of the data flow.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("ipv4Addr", 1), ("ipv4AddrSubnet", 4), ("ipv6Addr", 5), ("ipv6AddrSubnet", 6), ("ipv4AddrRange", 7), ("ipv6AddrRange", 8))

class Hh3cIPsecNegoTypeV2(TextualConvention, Integer32):
    description = 'The type of key used by an IPsec Phase-2 Tunnel. invalidType(2147483647) is defined as invalid value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))
    namedValues = NamedValues(("ike", 1), ("manual", 2), ("invalidType", 2147483647))

class Hh3cIPsecTunnelStateV2(TextualConvention, Integer32):
    description = 'The state of IPsec tunnel.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("timeout", 2))

hh3cIPsecObjectsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1))
hh3cIPsecScalarObjectsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 1))
hh3cIPsecMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecMIBVersion.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecMIBVersion.setDescription('Version string of this MIB.')
hh3cIPsecTunnelV2Table = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2), )
if mibBuilder.loadTexts: hh3cIPsecTunnelV2Table.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunnelV2Table.setDescription('The IPsec Phase-2 Tunnel Table. There is one entry in this table for each active IPsec Phase-2 Tunnel.')
hh3cIPsecTunnelV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1), ).setIndexNames((0, "HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunIndexV2"))
if mibBuilder.loadTexts: hh3cIPsecTunnelV2Entry.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunnelV2Entry.setDescription('Information about hh3cIPsecTunnelV2Table.')
hh3cIPsecTunIndexV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIPsecTunIndexV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunIndexV2.setDescription('The index of IPsec Phase-2 Tunnel Table. The value of the index is a number which begins at one and is incremented with each tunnel that is created. The value of this object will wrap at 2147483647.')
hh3cIPsecTunIfIndexV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunIfIndexV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunIfIndexV2.setDescription('The interface index( the ifIndex of ifTable ).')
hh3cIPsecTunIKETunnelIndexV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunIKETunnelIndexV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunIKETunnelIndexV2.setDescription('The index of the associated IPsec Phase-1 IKE Tunnel (IKETunIndex in the IKETunnelTable). 2147483647 is defined as invalid value. ')
hh3cIPsecTunIKETunLocalIDTypeV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 4), Hh3cIPsecIDTypeV2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunIKETunLocalIDTypeV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunIKETunLocalIDTypeV2.setDescription('The type of the local peer identity for the associated IPsec Phase-1 IKE Tunnel (IKETunLocalType in the IKETunnelTable).')
hh3cIPsecTunIKETunLocalIDVal1V2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunIKETunLocalIDVal1V2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunIKETunLocalIDVal1V2.setDescription('The value of the local peer identity for the associated IPsec Phase-1 IKE Tunnel (IKETunLocalValue1 in the IKETunnelTable). If the local peer type is ipv4Addr/ipv6Addr, this is the IP address used to identify the local peer. If the local peer type is ipv4AddrSubnet/ipv6AddrSubnet, this is the subnet address. If the local peer type is ipv4AddrRange/ipv6AddrRange, this is the beginning IP address of the range. If the local peer type is fqdn/userFqdn, this is the host name used to identify the local peer. If the local peer type is derAsn1Dn, this is the binary DER encoding of an ASN.1 X.500 Distinguished Name [X.501] of the principal whose certificates are being exchanged to establish the SA. If the local peer type is derAsn1Gn, this is the binary DER encoding of an ASN.1 X.500 GeneralName [X.509] of the principal whose certificates are being exchanged to establish the SA. If the local peer type is keyId, this is an opaque byte stream which may be used to pass vendor-specific information necessary to identify which pre-shared key should be used to authenticate Aggressive mode negotiations.')
hh3cIPsecTunIKETunLocalIDVal2V2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunIKETunLocalIDVal2V2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunIKETunLocalIDVal2V2.setDescription("The second specification of the local peer's IP address for the associated IPsec Phase-1 IKE Tunnel (IKETunLocalValue2 in the IKETunnelTable). If the local peer type is ipv4AddrSubnet/ipv6AddrSubnet, this is the subnet mask. If the local peer type is ipv4AddrRange/ipv6AddrRange, this is the ending IP address of the range. If the local peer type is others, this is a zero-length string.")
hh3cIPsecTunIKETunRemoteIDTypeV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 7), Hh3cIPsecIDTypeV2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunIKETunRemoteIDTypeV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunIKETunRemoteIDTypeV2.setDescription('The type of the remote peer identity for the associated IPsec Phase-1 IKE Tunnel (IKETunRemoteType in the IKETunnelTable).')
hh3cIPsecTunIKETunRemoteIDVal1V2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunIKETunRemoteIDVal1V2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunIKETunRemoteIDVal1V2.setDescription('The value of the remote peer identity for the associated IPsec Phase-1 IKE Tunnel (IKETunRemoteValue1 in the IKETunnelTable). If the remote peer type is ipv4Addr/ipv6Addr, this is the IP address used to identify the remote peer. If the remote peer type is ipv4AddrSubnet/ipv6AddrSubnet, this is the subnet address. If the remote peer type is ipv4AddrRange/ipv6AddrRange, this is the beginning IP address of the range. If the remote peer type is fqdn/userFqdn, this is the host name used to identify the remote peer. If the remote peer type is derAsn1Dn, this is the binary DER encoding of an ASN.1 X.500 Distinguished Name [X.501] of the principal whose certificates are being exchanged to establish the SA. If the remote peer type is derAsn1Gn, this is the binary DER encoding of an ASN.1 X.500 GeneralName [X.509] of the principal whose certificates are being exchanged to establish the SA. If the remote peer type is keyId, this is an opaque byte stream which may be used to pass vendor-specific information necessary to identify which pre-shared key should be used to authenticate Aggressive mode negotiations.')
hh3cIPsecTunIKETunRemoteIDVal2V2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunIKETunRemoteIDVal2V2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunIKETunRemoteIDVal2V2.setDescription("The second specification of the remote peer's IP address for the associated IPsec Phase-1 IKE Tunnel(IKETunRemoteValue2 in the IKETunnelTable). If the remote peer type is ipv4AddrSubnet/ipv6AddrSubnet, this is the subnet mask. If the remote peer type is ipv4AddrRange/ipv6AddrRange, this is the ending IP address of the range. If the remote peer type is others, this is a zero-length string.")
hh3cIPsecTunLocalAddrTypeV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunLocalAddrTypeV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunLocalAddrTypeV2.setDescription('The type of the IP address for the local peer of the IPsec Phase-2 Tunnel.')
hh3cIPsecTunLocalAddrV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunLocalAddrV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunLocalAddrV2.setDescription('The IP address of the local peer for the IPsec Phase-2 Tunnel.')
hh3cIPsecTunRemoteAddrTypeV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunRemoteAddrTypeV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunRemoteAddrTypeV2.setDescription('The type of the IP address for the remote peer of the IPsec Phase-2 Tunnel.')
hh3cIPsecTunRemoteAddrV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunRemoteAddrV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunRemoteAddrV2.setDescription('The IP address of the remote peer for the IPsec Phase-2 Tunnel.')
hh3cIPsecTunKeyTypeV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 14), Hh3cIPsecNegoTypeV2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunKeyTypeV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunKeyTypeV2.setDescription('The key negotiate mode used by the IPsec Phase-2 Tunnel.')
hh3cIPsecTunEncapModeV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 15), Hh3cIPsecEncapModeV2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunEncapModeV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunEncapModeV2.setDescription('The encapsulation mode used by the IPsec Phase-2 Tunnel.')
hh3cIPsecTunInitiatorV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("none", 2147483647)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunInitiatorV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunInitiatorV2.setDescription('The initiator of this IPsec tunnel. Value none is used for manual IPsec tunnel, for there is no initiator or responder in this method.')
hh3cIPsecTunLifeSizeV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunLifeSizeV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunLifeSizeV2.setDescription('The negotiated LifeSize of the IPsec Phase-2 Tunnel in kilobytes. 0 is defined as invalid value.')
hh3cIPsecTunLifeTimeV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunLifeTimeV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunLifeTimeV2.setDescription('The negotiated LifeTime of the IPsec Phase-2 Tunnel in seconds. 2147483647 is defined as invalid value.')
hh3cIPsecTunRemainTimeV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunRemainTimeV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunRemainTimeV2.setDescription('The remain time of SA in seconds. 2147483647 is defined as invalid value.')
hh3cIPsecTunActiveTimeV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunActiveTimeV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunActiveTimeV2.setDescription('The duration the IPsec Phase-2 Tunnel has been active in hundredths of seconds. 2147483647 is defined as invalid value.')
hh3cIPsecTunRemainSizeV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunRemainSizeV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunRemainSizeV2.setDescription('The remain LifeSize of SA in kilobytes. 0 is defined as invalid value.')
hh3cIPsecTunTotalRefreshesV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunTotalRefreshesV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunTotalRefreshesV2.setDescription('The total number of security association refreshing performed.')
hh3cIPsecTunCurrentSaInstancesV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunCurrentSaInstancesV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunCurrentSaInstancesV2.setDescription('The number of security associations which are currently active or expiring.')
hh3cIPsecTunInSaEncryptAlgoV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 24), Hh3cIPsecEncryptAlgoV2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunInSaEncryptAlgoV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunInSaEncryptAlgoV2.setDescription('The encryption algorithm used by the inbound security association of the IPsec Phase-2 Tunnel.')
hh3cIPsecTunInSaAhAuthAlgoV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 25), Hh3cIPsecAuthAlgoV2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunInSaAhAuthAlgoV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunInSaAhAuthAlgoV2.setDescription('The authentication algorithm used by the inbound authentication header (AH) security association of the IPsec Phase-2 Tunnel.')
hh3cIPsecTunInSaEspAuthAlgoV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 26), Hh3cIPsecAuthAlgoV2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunInSaEspAuthAlgoV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunInSaEspAuthAlgoV2.setDescription('The authentication algorithm used by the inbound encapsulation security protocol(ESP) security association of the IPsec Phase-2 Tunnel.')
hh3cIPsecTunDiffHellmanGrpV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 27), Hh3cIPsecDiffHellmanGrpV2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunDiffHellmanGrpV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunDiffHellmanGrpV2.setDescription('The Diffie Hellman Group used by the security association of the IPsec Phase-2 Tunnel.')
hh3cIPsecTunOutSaEncryptAlgoV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 28), Hh3cIPsecEncryptAlgoV2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunOutSaEncryptAlgoV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunOutSaEncryptAlgoV2.setDescription('The encryption algorithm used by the outbound security association of the IPsec Phase-2 Tunnel.')
hh3cIPsecTunOutSaAhAuthAlgoV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 29), Hh3cIPsecAuthAlgoV2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunOutSaAhAuthAlgoV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunOutSaAhAuthAlgoV2.setDescription('The authentication algorithm used by the outbound authentication header (AH) security association of the IPsec Phase-2 Tunnel.')
hh3cIPsecTunOutSaEspAuthAlgoV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 30), Hh3cIPsecAuthAlgoV2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunOutSaEspAuthAlgoV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunOutSaEspAuthAlgoV2.setDescription('The authentication algorithm used by the outbound encapsulation security protocol(ESP) security association of the IPsec Phase-2 Tunnel.')
hh3cIPsecTunPolicyNameV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunPolicyNameV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunPolicyNameV2.setDescription('The policy name used by this IPsec tunnel.')
hh3cIPsecTunPolicyNumV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunPolicyNumV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunPolicyNumV2.setDescription('The sequence number of policy used by this IPsec tunnel.')
hh3cIPsecTunStatusV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initial", 1), ("ready", 2), ("rekeyed", 3), ("closed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunStatusV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunStatusV2.setDescription('The status of the IPsec Tunnel.')
hh3cIPsecTunnelStatV2Table = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 3), )
if mibBuilder.loadTexts: hh3cIPsecTunnelStatV2Table.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunnelStatV2Table.setDescription('The IPsec Phase-2 Tunnel Statistics Table. ')
hh3cIPsecTunnelStatV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 3, 1), ).setIndexNames((0, "HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunIndexV2"))
if mibBuilder.loadTexts: hh3cIPsecTunnelStatV2Entry.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunnelStatV2Entry.setDescription('Information about hh3cIPsecTunnelStatV2Table.')
hh3cIPsecTunInOctetsV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunInOctetsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunInOctetsV2.setDescription('The total number of octets received by this IPsec Phase-2 Tunnel. This value is accumulated BEFORE determining whether or not the packet should be decompressed.')
hh3cIPsecTunInDecompOctetsV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunInDecompOctetsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunInDecompOctetsV2.setDescription('The total number of decompressed octets received by this IPsec Phase-2 Tunnel. This value is accumulated AFTER the packet is decompressed.')
hh3cIPsecTunInPktsV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunInPktsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunInPktsV2.setDescription('The total number of packets received by this IPsec Phase-2 Tunnel.')
hh3cIPsecTunInDropPktsV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunInDropPktsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunInDropPktsV2.setDescription('The total number of packets dropped during receiving process by this IPsec Phase-2 Tunnel.')
hh3cIPsecTunInReplayDropPktsV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunInReplayDropPktsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunInReplayDropPktsV2.setDescription('The total number of packets dropped during receiving process due to Anti-Replay process by this IPsec Phase-2 Tunnel.')
hh3cIPsecTunInAuthFailsV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunInAuthFailsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunInAuthFailsV2.setDescription("The total number of inbound authentication's which ended in failure by this IPsec Phase-2 Tunnel.")
hh3cIPsecTunInDecryptFailsV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunInDecryptFailsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunInDecryptFailsV2.setDescription("The total number of inbound decryption's which ended in failure by this IPsec Phase-2 Tunnel.")
hh3cIPsecTunOutOctetsV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunOutOctetsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunOutOctetsV2.setDescription('The total number of octets sent by this IPsec Phase-2 Tunnel. This value is accumulated AFTER determining whether or not the packet should be compressed.')
hh3cIPsecTunOutUncompOctetsV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunOutUncompOctetsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunOutUncompOctetsV2.setDescription('The total number of uncompressed octets sent by this IPsec Phase-2 Tunnel. This value is accumulated BEFORE the packet is compressed.')
hh3cIPsecTunOutPktsV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunOutPktsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunOutPktsV2.setDescription('The total number of packets sent by this IPsec Phase-2 Tunnel.')
hh3cIPsecTunOutDropPktsV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunOutDropPktsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunOutDropPktsV2.setDescription('The total number of packets dropped during sending process by this IPsec Phase-2 Tunnel.')
hh3cIPsecTunOutEncryptFailsV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunOutEncryptFailsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunOutEncryptFailsV2.setDescription("The total number of outbound encryption's which ended in failure by this IPsec Phase-2 Tunnel.")
hh3cIPsecTunNoMemoryDropPktsV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunNoMemoryDropPktsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunNoMemoryDropPktsV2.setDescription('The total number of packets dropped due to no enough memory by this IPsec Phase-2 Tunnel.')
hh3cIPsecTunQueueFullDropPktsV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunQueueFullDropPktsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunQueueFullDropPktsV2.setDescription('The total number of packets dropped due to queue full by this IPsec Phase-2 Tunnel.')
hh3cIPsecTunInvalidLenDropPktsV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunInvalidLenDropPktsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunInvalidLenDropPktsV2.setDescription('The total number of packets dropped due to invalid length packet by this IPsec Phase-2 Tunnel.')
hh3cIPsecTunTooLongDropPktsV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunTooLongDropPktsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunTooLongDropPktsV2.setDescription('The total number of packets dropped due to too long packet by this IPsec Phase-2 Tunnel.')
hh3cIPsecTunInvalidSaDropPktsV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTunInvalidSaDropPktsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunInvalidSaDropPktsV2.setDescription('The total number of packets dropped due to invalid SA by this IPsec Phase-2 Tunnel.')
hh3cIPsecSaV2Table = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 4), )
if mibBuilder.loadTexts: hh3cIPsecSaV2Table.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecSaV2Table.setDescription('The IPsec Phase-2 Security Protection Index Table. This table contains an entry for each active and expiring security association.')
hh3cIPsecSaV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 4, 1), ).setIndexNames((0, "HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunIndexV2"), (0, "HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecSaIndexV2"))
if mibBuilder.loadTexts: hh3cIPsecSaV2Entry.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecSaV2Entry.setDescription('Information about hh3cIPsecSaV2Table.')
hh3cIPsecSaIndexV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIPsecSaIndexV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecSaIndexV2.setDescription('The number of the Sa associated with the Phase-2 Tunnel Table. The value of this index is a number which begins at one and is incremented with each Sa associated with an IPsec Phase-2 Tunnel. The value of this object will wrap at 2,147,483,647.')
hh3cIPsecSaDirectionV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecSaDirectionV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecSaDirectionV2.setDescription('The direction of the SA.')
hh3cIPsecSaSpiValueV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecSaSpiValueV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecSaSpiValueV2.setDescription('The value of the SPI.')
hh3cIPsecSaSecProtocolV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 4, 1, 4), Hh3cIPsecSaProtocolV2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecSaSecProtocolV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecSaSecProtocolV2.setDescription('The security protocol of the SA.')
hh3cIPsecSaEncryptAlgoV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 4, 1, 5), Hh3cIPsecEncryptAlgoV2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecSaEncryptAlgoV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecSaEncryptAlgoV2.setDescription('The encryption algorithm used by the security association of the IPsec Phase-2 Tunnel.')
hh3cIPsecSaAuthAlgoV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 4, 1, 6), Hh3cIPsecAuthAlgoV2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecSaAuthAlgoV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecSaAuthAlgoV2.setDescription('The authentication algorithm used by the SA.')
hh3cIPsecSaStatusV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("expiring", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecSaStatusV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecSaStatusV2.setDescription('The status of the SA.')
hh3cIPsecTrafficV2Table = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 5), )
if mibBuilder.loadTexts: hh3cIPsecTrafficV2Table.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrafficV2Table.setDescription('The IPsec Phase-2 Tunnel Traffic Table. ')
hh3cIPsecTrafficV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 5, 1), ).setIndexNames((0, "HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunIndexV2"))
if mibBuilder.loadTexts: hh3cIPsecTrafficV2Entry.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrafficV2Entry.setDescription('Information about hh3cIPsecTrafficV2Table.')
hh3cIPsecTrafficLocalTypeV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 5, 1, 1), Hh3cIPsecTrafficTypeV2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTrafficLocalTypeV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrafficLocalTypeV2.setDescription("The type of the local peer's traffic. Possible values are: 1) A single IP address 2) An IP address range 3) An IP subnet")
hh3cIPsecTrafficLocalAddr1TypeV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 5, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTrafficLocalAddr1TypeV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrafficLocalAddr1TypeV2.setDescription("The type of the first IP address specification for the local peer's traffic.")
hh3cIPsecTrafficLocalAddr1V2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 5, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTrafficLocalAddr1V2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrafficLocalAddr1V2.setDescription("The first IP address specification of the local peer's traffic. If the local peer's traffic type is single IP address, this is the IP address. If the local peer's traffic type is IP subnet, this is the subnet address. If the local peer's traffic type is IP address range, this is the beginning IP address of the range.")
hh3cIPsecTrafficLocalAddr2TypeV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 5, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTrafficLocalAddr2TypeV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrafficLocalAddr2TypeV2.setDescription("The type of the second IP address specification for the local peer's traffic.")
hh3cIPsecTrafficLocalAddr2V2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 5, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTrafficLocalAddr2V2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrafficLocalAddr2V2.setDescription("The second IP address specification of the local peer's traffic. If the local peer's traffic type is single IP address, this is the IP address. If the local peer's traffic type is IP subnet, this is the subnet mask. If the local peer's traffic type is IP address range, this is the ending IP address of the range.")
hh3cIPsecTrafficLocalProtocol1V2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTrafficLocalProtocol1V2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrafficLocalProtocol1V2.setDescription("The first protocol number specification of the local peer's traffic. If the protocol type of the local peer's traffic is single protocol, this is the protocol number. If the protocol type of the local peer's traffic is protocol range, this is the beginning protocol number of the range.")
hh3cIPsecTrafficLocalProtocol2V2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTrafficLocalProtocol2V2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrafficLocalProtocol2V2.setDescription("The second protocol number specification of the local peer's traffic. If the protocol type of the local peer's traffic is single protocol, this is the protocol number. If the protocol type of the local peer's traffic is protocol range, this is the ending protocol number of the range.")
hh3cIPsecTrafficLocalPort1V2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTrafficLocalPort1V2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrafficLocalPort1V2.setDescription("The first port number specification of the local peer's traffic. If the port type of the local peer's traffic is single port, this is the port number. If the port type of the local peer's traffic is port range, this is the beginning port number of the range.")
hh3cIPsecTrafficLocalPort2V2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTrafficLocalPort2V2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrafficLocalPort2V2.setDescription("The second port number specification of the local peer's traffic. If the port type of the local peer's traffic is single port, this is the port number. If the port type of the local peer's traffic is port range, this is the ending port number of the range.")
hh3cIPsecTrafficRemoteTypeV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 5, 1, 10), Hh3cIPsecTrafficTypeV2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTrafficRemoteTypeV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrafficRemoteTypeV2.setDescription("The type of the remote peer's traffic. Possible values are: 1) A single IP address 2) An IP address range 3) An IP subnet")
hh3cIPsecTrafficRemAddr1TypeV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 5, 1, 11), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTrafficRemAddr1TypeV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrafficRemAddr1TypeV2.setDescription("The type of the first IP address specification for the remote peer's traffic.")
hh3cIPsecTrafficRemAddr1V2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 5, 1, 12), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTrafficRemAddr1V2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrafficRemAddr1V2.setDescription("The first IP address specification of the remote peer's traffic. If the remote traffic type is single IP address, this is the IP address. If the remote traffic type is IP subnet, this is the subnet address. If the remote traffic type is IP address range, this is the beginning IP address of the range.")
hh3cIPsecTrafficRemAddr2TypeV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 5, 1, 13), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTrafficRemAddr2TypeV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrafficRemAddr2TypeV2.setDescription("The type of the second IP address specification for the remote peer's traffic.")
hh3cIPsecTrafficRemAddr2V2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 5, 1, 14), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTrafficRemAddr2V2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrafficRemAddr2V2.setDescription("The second IP address specification of the remote peer's traffic. If the remote traffic type is single IP address, this is the IP address. If the remote traffic type is IP subnet, this is the subnet mask. If the remote traffic type is IP address range, this is the ending IP address of the range.")
hh3cIPsecTrafficRemoPro1V2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTrafficRemoPro1V2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrafficRemoPro1V2.setDescription("The first protocol number specification of the remote peer's traffic. If the protocol type of the remote peer's traffic is single protocol, this is the protocol number. If the protocol type of the remote peer's traffic is protocol range, this is the beginning protocol number of the range.")
hh3cIPsecTrafficRemoPro2V2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTrafficRemoPro2V2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrafficRemoPro2V2.setDescription("The second protocol number specification of the remote peer's traffic. If the protocol type of the remote peer's traffic is single protocol, this is the protocol number. If the protocol type of the remote peer's traffic is protocol range, this is the ending protocol number of the range.")
hh3cIPsecTrafficRemPort1V2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTrafficRemPort1V2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrafficRemPort1V2.setDescription("The first port number specification of the remote peer's traffic. If the port type of the remote peer's traffic is single port, this is the port number. If the port type of the remote peer's traffic is port range, this is the beginning port number of the range.")
hh3cIPsecTrafficRemPort2V2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecTrafficRemPort2V2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrafficRemPort2V2.setDescription("The second port number specification of the remote peer's traffic. If the port type of the remote peer's traffic is single port, this is the port number. If the port type of the remote peer's traffic is port range, this is the ending port number of the range.")
hh3cIPsecGlobalStatsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 6))
hh3cIPsecGlobalActiveTunnelsV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecGlobalActiveTunnelsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecGlobalActiveTunnelsV2.setDescription('The total number of currently active IPsec Phase-2 Tunnels.')
hh3cIPsecGlobalActiveSasV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecGlobalActiveSasV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecGlobalActiveSasV2.setDescription('The total number of currently active or expiring IPsec Phase-2 SA.')
hh3cIPsecGlobalInOctetsV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 6, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecGlobalInOctetsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecGlobalInOctetsV2.setDescription('The total number of octets received by all current and previous IPsec Phase-2 Tunnels. This value is accumulated BEFORE determining whether or not the packet should be decompressed.')
hh3cIPsecGlobalInDecompOctetsV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 6, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecGlobalInDecompOctetsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecGlobalInDecompOctetsV2.setDescription('The total number of decompressed octets received by all current and previous IPsec Phase-2 Tunnels. This value is accumulated AFTER the packet is decompressed.')
hh3cIPsecGlobalInPktsV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 6, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecGlobalInPktsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecGlobalInPktsV2.setDescription('The total number of packets received by all current and previous IPsec Phase-2 Tunnels.')
hh3cIPsecGlobalInDropsV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 6, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecGlobalInDropsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecGlobalInDropsV2.setDescription('The total number of packets dropped during receiving process by all current and previous IPsec Phase-2 Tunnels. ')
hh3cIPsecGlobalInReplayDropsV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 6, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecGlobalInReplayDropsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecGlobalInReplayDropsV2.setDescription('The total number of packets dropped during receiving process due to Anti-Replay process by all current and previous IPsec Phase-2 Tunnels.')
hh3cIPsecGlobalInAuthFailsV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 6, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecGlobalInAuthFailsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecGlobalInAuthFailsV2.setDescription("The total number of inbound authentication's which ended in failure by all current and previous IPsec Phase-2 Tunnels.")
hh3cIPsecGlobalInDecryptFailsV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 6, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecGlobalInDecryptFailsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecGlobalInDecryptFailsV2.setDescription("The total number of inbound decryption's which ended in failure by all current and previous IPsec Phase-2 Tunnels.")
hh3cIPsecGlobalOutOctetsV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 6, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecGlobalOutOctetsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecGlobalOutOctetsV2.setDescription('The total number of octets sent by all current and previous IPsec Phase-2 Tunnels. This value is accumulated AFTER determining whether or not the packet should be compressed.')
hh3cIPsecGlobalOutUncompOctetsV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 6, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecGlobalOutUncompOctetsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecGlobalOutUncompOctetsV2.setDescription('The total number of uncompressed octets sent by all current and previous IPsec Phase-2 Tunnels. This value is accumulated BEFORE the packet is compressed.')
hh3cIPsecGlobalOutPktsV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 6, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecGlobalOutPktsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecGlobalOutPktsV2.setDescription('The total number of packets sent by all current and previous IPsec Phase-2 Tunnels.')
hh3cIPsecGlobalOutDropsV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 6, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecGlobalOutDropsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecGlobalOutDropsV2.setDescription('The total number of packets dropped during sending process by all current and previous IPsec Phase-2 Tunnels.')
hh3cIPsecGlobalOutEncryptFailsV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 6, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecGlobalOutEncryptFailsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecGlobalOutEncryptFailsV2.setDescription("The total number of outbound encryption's which ended in failure by all current and previous IPsec Phase-2 Tunnels.")
hh3cIPsecGlobalNoMemoryDropsV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 6, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecGlobalNoMemoryDropsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecGlobalNoMemoryDropsV2.setDescription('The total number of packets dropped due to no enough memory by all current and previous IPsec Phase-2 Tunnels.')
hh3cIPsecGlobalNoFindSaDropsV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 6, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecGlobalNoFindSaDropsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecGlobalNoFindSaDropsV2.setDescription('The total number of packets dropped due to not find SA by all current and previous IPsec Phase-2 Tunnels.')
hh3cIPsecGlobalQueueFullDropsV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 6, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecGlobalQueueFullDropsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecGlobalQueueFullDropsV2.setDescription('The total number of packets dropped due to queue full by all current and previous IPsec Phase-2 Tunnels.')
hh3cIPsecGlobalInvalidLenDropsV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 6, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecGlobalInvalidLenDropsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecGlobalInvalidLenDropsV2.setDescription('The total number of packets dropped due to invalid packet length by all current and previous IPsec Phase-2 Tunnels.')
hh3cIPsecGlobalTooLongDropsV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 6, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecGlobalTooLongDropsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecGlobalTooLongDropsV2.setDescription('The total number of packets dropped due to too long packet by all current and previous IPsec Phase-2 Tunnels.')
hh3cIPsecGlobalInvalidSaDropsV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 6, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIPsecGlobalInvalidSaDropsV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecGlobalInvalidSaDropsV2.setDescription('The total number of packets dropped due to invalid SA by all current and previous IPsec Phase-2 Tunnels.')
hh3cIPsecTrapObjectV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 7))
hh3cIPsecPolicyNameV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 7, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIPsecPolicyNameV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecPolicyNameV2.setDescription('The IPsec policy name with a trap.')
hh3cIPsecPolicySeqNumV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 7, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIPsecPolicySeqNumV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecPolicySeqNumV2.setDescription('The IPsec policy sequence number with a trap.')
hh3cIPsecPolicySizeV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 7, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIPsecPolicySizeV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecPolicySizeV2.setDescription('The number of IPsec policies with a trap.')
hh3cIPsecTrapCntlV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 8))
hh3cIPsecTrapGlobalCntlV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 8, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIPsecTrapGlobalCntlV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrapGlobalCntlV2.setDescription('Indicates whether all IPsec traps should be generated.')
hh3cIPsecTunnelStartTrapCntlV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 8, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIPsecTunnelStartTrapCntlV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunnelStartTrapCntlV2.setDescription('Indicates whether hh3cIPsecTunnelStartV2 traps should be generated.')
hh3cIPsecTunnelStopTrapCntlV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 8, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIPsecTunnelStopTrapCntlV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunnelStopTrapCntlV2.setDescription('Indicates whether hh3cIPsecTunnelStopV2 traps should be generated.')
hh3cIPsecNoSaTrapCntlV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 8, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIPsecNoSaTrapCntlV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecNoSaTrapCntlV2.setDescription('Indicates whether hh3cIPsecNoSaFailureV2 traps should be generated.')
hh3cIPsecAuthFailureTrapCntlV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 8, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIPsecAuthFailureTrapCntlV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecAuthFailureTrapCntlV2.setDescription('Indicates whether hh3cIPsecAuthFailFailureV2 traps should be generated.')
hh3cIPsecEncryFailureTrapCntlV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 8, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIPsecEncryFailureTrapCntlV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecEncryFailureTrapCntlV2.setDescription('Indicates whether hh3cIPsecEncryFailFailureV2 traps should be generated.')
hh3cIPsecDecryFailureTrapCntlV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 8, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIPsecDecryFailureTrapCntlV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecDecryFailureTrapCntlV2.setDescription('Indicates whether hh3cIPsecDecryFailFailureV2 traps should be generated.')
hh3cIPsecInvalidSaTrapCntlV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 8, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIPsecInvalidSaTrapCntlV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecInvalidSaTrapCntlV2.setDescription('Indicates whether hh3cIPsecInvalidSaFailureV2 traps should be generated.')
hh3cIPsecPolicyAddTrapCntlV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 8, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIPsecPolicyAddTrapCntlV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecPolicyAddTrapCntlV2.setDescription('Indicates whether hh3cIPsecPolicyAddV2 traps should be generated.')
hh3cIPsecPolicyDelTrapCntlV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 8, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIPsecPolicyDelTrapCntlV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecPolicyDelTrapCntlV2.setDescription('Indicates whether hh3cIPsecPolicyDelV2 traps should be generated.')
hh3cIPsecPolicyAttachTrapCntlV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 8, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIPsecPolicyAttachTrapCntlV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecPolicyAttachTrapCntlV2.setDescription('Indicates whether hh3cIPsecPolicyAttachV2 traps should be generated.')
hh3cIPsecPolicyDetachTrapCntlV2 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 8, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIPsecPolicyDetachTrapCntlV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecPolicyDetachTrapCntlV2.setDescription('Indicates whether hh3cIPsecPolicyDetachV2 traps should be generated.')
hh3cIPsecTrapV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 9))
hh3cIPsecNotificationsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 9, 0))
hh3cIPsecTunnelStartV2 = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 9, 0, 1)).setObjects(("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunIndexV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunLocalAddrTypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunLocalAddrV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunRemoteAddrTypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunRemoteAddrV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunLifeTimeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunLifeSizeV2"))
if mibBuilder.loadTexts: hh3cIPsecTunnelStartV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunnelStartV2.setDescription('This notification is generated when an IPsec Phase-2 Tunnel is created.')
hh3cIPsecTunnelStopV2 = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 9, 0, 2)).setObjects(("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunIndexV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunLocalAddrTypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunLocalAddrV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunRemoteAddrTypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunRemoteAddrV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunActiveTimeV2"))
if mibBuilder.loadTexts: hh3cIPsecTunnelStopV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunnelStopV2.setDescription('This notification is generated when an IPsec Phase-2 Tunnel is deleted.')
hh3cIPsecNoSaFailureV2 = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 9, 0, 3)).setObjects(("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunIndexV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunLocalAddrTypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunLocalAddrV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunRemoteAddrTypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunRemoteAddrV2"))
if mibBuilder.loadTexts: hh3cIPsecNoSaFailureV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecNoSaFailureV2.setDescription('This notification is generated when an IPsec Phase-2 non-existent SA error occurs.')
hh3cIPsecAuthFailFailureV2 = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 9, 0, 4)).setObjects(("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunIndexV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunLocalAddrTypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunLocalAddrV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunRemoteAddrTypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunRemoteAddrV2"))
if mibBuilder.loadTexts: hh3cIPsecAuthFailFailureV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecAuthFailFailureV2.setDescription('This notification is generated when the IPsec phase-2 authentication failure occurs.')
hh3cIPsecEncryFailFailureV2 = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 9, 0, 5)).setObjects(("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunIndexV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunLocalAddrTypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunLocalAddrV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunRemoteAddrTypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunRemoteAddrV2"))
if mibBuilder.loadTexts: hh3cIPsecEncryFailFailureV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecEncryFailFailureV2.setDescription('This notification is generated when the IPsec phase-2 tunnel has an encrypting failure.')
hh3cIPsecDecryFailFailureV2 = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 9, 0, 6)).setObjects(("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunIndexV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunLocalAddrTypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunLocalAddrV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunRemoteAddrTypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunRemoteAddrV2"))
if mibBuilder.loadTexts: hh3cIPsecDecryFailFailureV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecDecryFailFailureV2.setDescription('This notification is generated when the IPsec phase-2 tunnel has a decrypting failure.')
hh3cIPsecInvalidSaFailureV2 = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 9, 0, 7)).setObjects(("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunIndexV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecSaIndexV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunLocalAddrTypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunLocalAddrV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunRemoteAddrTypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunRemoteAddrV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecSaSpiValueV2"))
if mibBuilder.loadTexts: hh3cIPsecInvalidSaFailureV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecInvalidSaFailureV2.setDescription('This notification is generated when the IPsec phase-2 invalid SA failure occurs.')
hh3cIPsecPolicyAddV2 = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 9, 0, 8)).setObjects(("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecPolicyNameV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecPolicySeqNumV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecPolicySizeV2"))
if mibBuilder.loadTexts: hh3cIPsecPolicyAddV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecPolicyAddV2.setDescription('This notification is generated when an IPsec policy is added.')
hh3cIPsecPolicyDelV2 = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 9, 0, 9)).setObjects(("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecPolicyNameV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecPolicySeqNumV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecPolicySizeV2"))
if mibBuilder.loadTexts: hh3cIPsecPolicyDelV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecPolicyDelV2.setDescription('This notification is generated when an IPsec policy is deleted.')
hh3cIPsecPolicyAttachV2 = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 9, 0, 10)).setObjects(("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecPolicyNameV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecPolicySizeV2"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIPsecPolicyAttachV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecPolicyAttachV2.setDescription('This notification is generated when an IPsec policy is attached with one interface.')
hh3cIPsecPolicyDetachV2 = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 126, 1, 9, 0, 11)).setObjects(("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecPolicyNameV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecPolicySizeV2"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIPsecPolicyDetachV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecPolicyDetachV2.setDescription('This notification is generated when an IPsec policy is detached with one interface.')
hh3cIPsecConformanceV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 126, 2))
hh3cIPsecCompliancesV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 126, 2, 1))
hh3cIPsecGroupsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 126, 2, 2))
hh3cIPsecComplianceV2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 25506, 2, 126, 2, 1, 1)).setObjects(("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecScalarObjectsGroupV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunnelTableGroupV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunnelStatGroupV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecSaGroupV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrafficTableGroupV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecGlobalStatsGroupV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrapObjectGroupV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrapCntlGroupV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrapGroupV2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cIPsecComplianceV2 = hh3cIPsecComplianceV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecComplianceV2.setDescription(' ')
hh3cIPsecScalarObjectsGroupV2 = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 126, 2, 2, 1)).setObjects(("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecMIBVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cIPsecScalarObjectsGroupV2 = hh3cIPsecScalarObjectsGroupV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecScalarObjectsGroupV2.setDescription('The group contains all of scalar objects of the MIB.')
hh3cIPsecTunnelTableGroupV2 = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 126, 2, 2, 2)).setObjects(("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunIfIndexV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunIKETunnelIndexV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunIKETunLocalIDTypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunIKETunLocalIDVal1V2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunIKETunLocalIDVal2V2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunIKETunRemoteIDTypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunIKETunRemoteIDVal1V2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunIKETunRemoteIDVal2V2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunLocalAddrTypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunLocalAddrV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunRemoteAddrTypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunRemoteAddrV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunKeyTypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunEncapModeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunInitiatorV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunLifeSizeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunLifeTimeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunRemainTimeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunActiveTimeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunRemainSizeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunTotalRefreshesV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunCurrentSaInstancesV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunInSaEncryptAlgoV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunInSaAhAuthAlgoV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunInSaEspAuthAlgoV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunDiffHellmanGrpV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunOutSaEncryptAlgoV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunOutSaAhAuthAlgoV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunOutSaEspAuthAlgoV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunPolicyNameV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunPolicyNumV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunStatusV2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cIPsecTunnelTableGroupV2 = hh3cIPsecTunnelTableGroupV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunnelTableGroupV2.setDescription("The group contains the IPsec tunnel's property information.")
hh3cIPsecTunnelStatGroupV2 = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 126, 2, 2, 3)).setObjects(("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunInOctetsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunInDecompOctetsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunInPktsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunInDropPktsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunInReplayDropPktsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunInAuthFailsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunInDecryptFailsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunOutOctetsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunOutUncompOctetsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunOutPktsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunOutDropPktsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunOutEncryptFailsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunNoMemoryDropPktsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunQueueFullDropPktsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunInvalidLenDropPktsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunTooLongDropPktsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunInvalidSaDropPktsV2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cIPsecTunnelStatGroupV2 = hh3cIPsecTunnelStatGroupV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTunnelStatGroupV2.setDescription("The group contains the IPsec tunnel's statistic information.")
hh3cIPsecSaGroupV2 = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 126, 2, 2, 4)).setObjects(("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecSaDirectionV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecSaSpiValueV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecSaSecProtocolV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecSaEncryptAlgoV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecSaAuthAlgoV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecSaStatusV2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cIPsecSaGroupV2 = hh3cIPsecSaGroupV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecSaGroupV2.setDescription("The group contains the SA's property information.")
hh3cIPsecTrafficTableGroupV2 = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 126, 2, 2, 5)).setObjects(("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrafficLocalTypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrafficLocalAddr1TypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrafficLocalAddr1V2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrafficLocalAddr2TypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrafficLocalAddr2V2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrafficLocalProtocol1V2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrafficLocalProtocol2V2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrafficLocalPort1V2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrafficLocalPort2V2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrafficRemoteTypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrafficRemAddr1TypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrafficRemAddr1V2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrafficRemAddr2TypeV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrafficRemAddr2V2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrafficRemoPro1V2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrafficRemoPro2V2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrafficRemPort1V2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrafficRemPort2V2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cIPsecTrafficTableGroupV2 = hh3cIPsecTrafficTableGroupV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrafficTableGroupV2.setDescription('The group contains the property information of the data flow protected by IPsec tunnel.')
hh3cIPsecGlobalStatsGroupV2 = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 126, 2, 2, 6)).setObjects(("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecGlobalActiveTunnelsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecGlobalActiveSasV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecGlobalInOctetsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecGlobalInDecompOctetsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecGlobalInPktsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecGlobalInDropsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecGlobalInReplayDropsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecGlobalInAuthFailsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecGlobalInDecryptFailsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecGlobalOutOctetsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecGlobalOutUncompOctetsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecGlobalOutPktsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecGlobalOutDropsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecGlobalOutEncryptFailsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecGlobalNoMemoryDropsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecGlobalNoFindSaDropsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecGlobalQueueFullDropsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecGlobalInvalidLenDropsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecGlobalTooLongDropsV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecGlobalInvalidSaDropsV2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cIPsecGlobalStatsGroupV2 = hh3cIPsecGlobalStatsGroupV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecGlobalStatsGroupV2.setDescription("The group contains all of the IPsec tunnel's statistic information.")
hh3cIPsecTrapObjectGroupV2 = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 126, 2, 2, 7)).setObjects(("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecPolicyNameV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecPolicySeqNumV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecPolicySizeV2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cIPsecTrapObjectGroupV2 = hh3cIPsecTrapObjectGroupV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrapObjectGroupV2.setDescription('The group contains all of trap objects of IPsec tunnels.')
hh3cIPsecTrapCntlGroupV2 = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 126, 2, 2, 8)).setObjects(("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTrapGlobalCntlV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunnelStartTrapCntlV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunnelStopTrapCntlV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecNoSaTrapCntlV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecAuthFailureTrapCntlV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecEncryFailureTrapCntlV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecDecryFailureTrapCntlV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecInvalidSaTrapCntlV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecPolicyAddTrapCntlV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecPolicyDelTrapCntlV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecPolicyAttachTrapCntlV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecPolicyDetachTrapCntlV2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cIPsecTrapCntlGroupV2 = hh3cIPsecTrapCntlGroupV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrapCntlGroupV2.setDescription('The group contains all of trap switches of IPsec tunnels.')
hh3cIPsecTrapGroupV2 = NotificationGroup((1, 3, 6, 1, 4, 1, 25506, 2, 126, 2, 2, 9)).setObjects(("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunnelStartV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecTunnelStopV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecNoSaFailureV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecAuthFailFailureV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecEncryFailFailureV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecDecryFailFailureV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecInvalidSaFailureV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecPolicyAddV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecPolicyDelV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecPolicyAttachV2"), ("HH3C-IPSEC-MONITOR-V2-MIB", "hh3cIPsecPolicyDetachV2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cIPsecTrapGroupV2 = hh3cIPsecTrapGroupV2.setStatus('current')
if mibBuilder.loadTexts: hh3cIPsecTrapGroupV2.setDescription('The group contains all of trap of IPsec tunnels.')
mibBuilder.exportSymbols("HH3C-IPSEC-MONITOR-V2-MIB", hh3cIPsecTunPolicyNumV2=hh3cIPsecTunPolicyNumV2, hh3cIPsecTrafficRemAddr1TypeV2=hh3cIPsecTrafficRemAddr1TypeV2, hh3cIPsecSaV2Table=hh3cIPsecSaV2Table, hh3cIPsecTrapObjectV2=hh3cIPsecTrapObjectV2, hh3cIPsecTunIKETunRemoteIDVal2V2=hh3cIPsecTunIKETunRemoteIDVal2V2, hh3cIPsecTrafficRemAddr2TypeV2=hh3cIPsecTrafficRemAddr2TypeV2, hh3cIPsecTunnelStartV2=hh3cIPsecTunnelStartV2, hh3cIPsecTrafficRemPort2V2=hh3cIPsecTrafficRemPort2V2, hh3cIPsecMonitorV2=hh3cIPsecMonitorV2, hh3cIPsecTunInReplayDropPktsV2=hh3cIPsecTunInReplayDropPktsV2, hh3cIPsecTrafficLocalProtocol1V2=hh3cIPsecTrafficLocalProtocol1V2, PYSNMP_MODULE_ID=hh3cIPsecMonitorV2, hh3cIPsecPolicySizeV2=hh3cIPsecPolicySizeV2, hh3cIPsecTunInDecompOctetsV2=hh3cIPsecTunInDecompOctetsV2, hh3cIPsecNotificationsV2=hh3cIPsecNotificationsV2, hh3cIPsecTunRemoteAddrV2=hh3cIPsecTunRemoteAddrV2, hh3cIPsecTrapObjectGroupV2=hh3cIPsecTrapObjectGroupV2, hh3cIPsecAuthFailFailureV2=hh3cIPsecAuthFailFailureV2, hh3cIPsecTunInPktsV2=hh3cIPsecTunInPktsV2, Hh3cIPsecDiffHellmanGrpV2=Hh3cIPsecDiffHellmanGrpV2, hh3cIPsecTunRemainSizeV2=hh3cIPsecTunRemainSizeV2, hh3cIPsecTrafficLocalPort2V2=hh3cIPsecTrafficLocalPort2V2, hh3cIPsecTrafficLocalAddr2TypeV2=hh3cIPsecTrafficLocalAddr2TypeV2, hh3cIPsecSaEncryptAlgoV2=hh3cIPsecSaEncryptAlgoV2, hh3cIPsecTrafficRemAddr1V2=hh3cIPsecTrafficRemAddr1V2, hh3cIPsecTunCurrentSaInstancesV2=hh3cIPsecTunCurrentSaInstancesV2, hh3cIPsecDecryFailureTrapCntlV2=hh3cIPsecDecryFailureTrapCntlV2, hh3cIPsecAuthFailureTrapCntlV2=hh3cIPsecAuthFailureTrapCntlV2, hh3cIPsecTunTooLongDropPktsV2=hh3cIPsecTunTooLongDropPktsV2, hh3cIPsecComplianceV2=hh3cIPsecComplianceV2, hh3cIPsecTunOutSaEspAuthAlgoV2=hh3cIPsecTunOutSaEspAuthAlgoV2, hh3cIPsecInvalidSaTrapCntlV2=hh3cIPsecInvalidSaTrapCntlV2, hh3cIPsecTunnelTableGroupV2=hh3cIPsecTunnelTableGroupV2, hh3cIPsecTunOutSaEncryptAlgoV2=hh3cIPsecTunOutSaEncryptAlgoV2, hh3cIPsecTrafficV2Entry=hh3cIPsecTrafficV2Entry, hh3cIPsecTrafficLocalAddr2V2=hh3cIPsecTrafficLocalAddr2V2, hh3cIPsecObjectsV2=hh3cIPsecObjectsV2, hh3cIPsecTunOutOctetsV2=hh3cIPsecTunOutOctetsV2, hh3cIPsecScalarObjectsV2=hh3cIPsecScalarObjectsV2, hh3cIPsecTunIKETunRemoteIDVal1V2=hh3cIPsecTunIKETunRemoteIDVal1V2, hh3cIPsecTunInSaEncryptAlgoV2=hh3cIPsecTunInSaEncryptAlgoV2, hh3cIPsecTrafficLocalProtocol2V2=hh3cIPsecTrafficLocalProtocol2V2, hh3cIPsecGlobalOutEncryptFailsV2=hh3cIPsecGlobalOutEncryptFailsV2, hh3cIPsecGlobalActiveTunnelsV2=hh3cIPsecGlobalActiveTunnelsV2, hh3cIPsecGlobalOutUncompOctetsV2=hh3cIPsecGlobalOutUncompOctetsV2, hh3cIPsecTunInSaAhAuthAlgoV2=hh3cIPsecTunInSaAhAuthAlgoV2, hh3cIPsecTunInOctetsV2=hh3cIPsecTunInOctetsV2, hh3cIPsecGlobalStatsGroupV2=hh3cIPsecGlobalStatsGroupV2, hh3cIPsecGlobalInAuthFailsV2=hh3cIPsecGlobalInAuthFailsV2, hh3cIPsecTunInDropPktsV2=hh3cIPsecTunInDropPktsV2, hh3cIPsecTunnelStatGroupV2=hh3cIPsecTunnelStatGroupV2, hh3cIPsecTunKeyTypeV2=hh3cIPsecTunKeyTypeV2, hh3cIPsecTunnelStartTrapCntlV2=hh3cIPsecTunnelStartTrapCntlV2, hh3cIPsecTunOutEncryptFailsV2=hh3cIPsecTunOutEncryptFailsV2, Hh3cIPsecTunnelStateV2=Hh3cIPsecTunnelStateV2, hh3cIPsecTrapGroupV2=hh3cIPsecTrapGroupV2, hh3cIPsecTrafficRemPort1V2=hh3cIPsecTrafficRemPort1V2, Hh3cIPsecIDTypeV2=Hh3cIPsecIDTypeV2, Hh3cIPsecEncapModeV2=Hh3cIPsecEncapModeV2, hh3cIPsecGlobalQueueFullDropsV2=hh3cIPsecGlobalQueueFullDropsV2, hh3cIPsecTunInDecryptFailsV2=hh3cIPsecTunInDecryptFailsV2, hh3cIPsecConformanceV2=hh3cIPsecConformanceV2, hh3cIPsecTrafficRemoPro1V2=hh3cIPsecTrafficRemoPro1V2, hh3cIPsecTunOutUncompOctetsV2=hh3cIPsecTunOutUncompOctetsV2, hh3cIPsecTunActiveTimeV2=hh3cIPsecTunActiveTimeV2, hh3cIPsecTunLocalAddrV2=hh3cIPsecTunLocalAddrV2, hh3cIPsecMIBVersion=hh3cIPsecMIBVersion, hh3cIPsecPolicySeqNumV2=hh3cIPsecPolicySeqNumV2, hh3cIPsecPolicyAddTrapCntlV2=hh3cIPsecPolicyAddTrapCntlV2, hh3cIPsecTrafficRemAddr2V2=hh3cIPsecTrafficRemAddr2V2, hh3cIPsecTrafficLocalAddr1V2=hh3cIPsecTrafficLocalAddr1V2, hh3cIPsecTunLifeTimeV2=hh3cIPsecTunLifeTimeV2, hh3cIPsecSaIndexV2=hh3cIPsecSaIndexV2, hh3cIPsecGlobalInReplayDropsV2=hh3cIPsecGlobalInReplayDropsV2, hh3cIPsecTunInvalidSaDropPktsV2=hh3cIPsecTunInvalidSaDropPktsV2, hh3cIPsecTunDiffHellmanGrpV2=hh3cIPsecTunDiffHellmanGrpV2, hh3cIPsecTunIKETunLocalIDVal1V2=hh3cIPsecTunIKETunLocalIDVal1V2, hh3cIPsecGlobalNoFindSaDropsV2=hh3cIPsecGlobalNoFindSaDropsV2, hh3cIPsecTrafficLocalPort1V2=hh3cIPsecTrafficLocalPort1V2, hh3cIPsecTunOutSaAhAuthAlgoV2=hh3cIPsecTunOutSaAhAuthAlgoV2, hh3cIPsecDecryFailFailureV2=hh3cIPsecDecryFailFailureV2, hh3cIPsecTunStatusV2=hh3cIPsecTunStatusV2, hh3cIPsecSaAuthAlgoV2=hh3cIPsecSaAuthAlgoV2, hh3cIPsecTrapCntlV2=hh3cIPsecTrapCntlV2, hh3cIPsecTunEncapModeV2=hh3cIPsecTunEncapModeV2, hh3cIPsecGlobalInvalidSaDropsV2=hh3cIPsecGlobalInvalidSaDropsV2, Hh3cIPsecTrafficTypeV2=Hh3cIPsecTrafficTypeV2, hh3cIPsecTunQueueFullDropPktsV2=hh3cIPsecTunQueueFullDropPktsV2, hh3cIPsecSaSecProtocolV2=hh3cIPsecSaSecProtocolV2, hh3cIPsecGlobalNoMemoryDropsV2=hh3cIPsecGlobalNoMemoryDropsV2, hh3cIPsecEncryFailFailureV2=hh3cIPsecEncryFailFailureV2, Hh3cIPsecSaProtocolV2=Hh3cIPsecSaProtocolV2, hh3cIPsecTunIKETunLocalIDTypeV2=hh3cIPsecTunIKETunLocalIDTypeV2, hh3cIPsecTrapCntlGroupV2=hh3cIPsecTrapCntlGroupV2, hh3cIPsecTunnelStopV2=hh3cIPsecTunnelStopV2, hh3cIPsecSaStatusV2=hh3cIPsecSaStatusV2, hh3cIPsecTunIKETunnelIndexV2=hh3cIPsecTunIKETunnelIndexV2, Hh3cIPsecNegoTypeV2=Hh3cIPsecNegoTypeV2, hh3cIPsecTrapV2=hh3cIPsecTrapV2, hh3cIPsecGlobalTooLongDropsV2=hh3cIPsecGlobalTooLongDropsV2, hh3cIPsecTunnelV2Table=hh3cIPsecTunnelV2Table, hh3cIPsecPolicyAddV2=hh3cIPsecPolicyAddV2, hh3cIPsecTrafficTableGroupV2=hh3cIPsecTrafficTableGroupV2, hh3cIPsecTunNoMemoryDropPktsV2=hh3cIPsecTunNoMemoryDropPktsV2, hh3cIPsecTunPolicyNameV2=hh3cIPsecTunPolicyNameV2, hh3cIPsecTunOutPktsV2=hh3cIPsecTunOutPktsV2, hh3cIPsecGlobalOutDropsV2=hh3cIPsecGlobalOutDropsV2, hh3cIPsecPolicyDetachV2=hh3cIPsecPolicyDetachV2, hh3cIPsecGlobalInDecryptFailsV2=hh3cIPsecGlobalInDecryptFailsV2, hh3cIPsecTunIKETunRemoteIDTypeV2=hh3cIPsecTunIKETunRemoteIDTypeV2, hh3cIPsecNoSaFailureV2=hh3cIPsecNoSaFailureV2, hh3cIPsecPolicyDelV2=hh3cIPsecPolicyDelV2, hh3cIPsecTunOutDropPktsV2=hh3cIPsecTunOutDropPktsV2, hh3cIPsecCompliancesV2=hh3cIPsecCompliancesV2, hh3cIPsecTrafficLocalTypeV2=hh3cIPsecTrafficLocalTypeV2, hh3cIPsecTunInitiatorV2=hh3cIPsecTunInitiatorV2, hh3cIPsecTunInvalidLenDropPktsV2=hh3cIPsecTunInvalidLenDropPktsV2, hh3cIPsecTunIKETunLocalIDVal2V2=hh3cIPsecTunIKETunLocalIDVal2V2, hh3cIPsecPolicyDelTrapCntlV2=hh3cIPsecPolicyDelTrapCntlV2, hh3cIPsecTrafficLocalAddr1TypeV2=hh3cIPsecTrafficLocalAddr1TypeV2, hh3cIPsecTunnelStopTrapCntlV2=hh3cIPsecTunnelStopTrapCntlV2, hh3cIPsecGlobalActiveSasV2=hh3cIPsecGlobalActiveSasV2, hh3cIPsecSaGroupV2=hh3cIPsecSaGroupV2, hh3cIPsecInvalidSaFailureV2=hh3cIPsecInvalidSaFailureV2, hh3cIPsecTunRemainTimeV2=hh3cIPsecTunRemainTimeV2, hh3cIPsecTrafficRemoteTypeV2=hh3cIPsecTrafficRemoteTypeV2, Hh3cIPsecEncryptAlgoV2=Hh3cIPsecEncryptAlgoV2, hh3cIPsecSaDirectionV2=hh3cIPsecSaDirectionV2, hh3cIPsecGlobalInDropsV2=hh3cIPsecGlobalInDropsV2, Hh3cIPsecAuthAlgoV2=Hh3cIPsecAuthAlgoV2, hh3cIPsecNoSaTrapCntlV2=hh3cIPsecNoSaTrapCntlV2, hh3cIPsecScalarObjectsGroupV2=hh3cIPsecScalarObjectsGroupV2, hh3cIPsecGlobalInOctetsV2=hh3cIPsecGlobalInOctetsV2, hh3cIPsecPolicyNameV2=hh3cIPsecPolicyNameV2, hh3cIPsecPolicyAttachV2=hh3cIPsecPolicyAttachV2, hh3cIPsecTunLifeSizeV2=hh3cIPsecTunLifeSizeV2, hh3cIPsecGlobalOutPktsV2=hh3cIPsecGlobalOutPktsV2, hh3cIPsecGroupsV2=hh3cIPsecGroupsV2, hh3cIPsecTunnelStatV2Table=hh3cIPsecTunnelStatV2Table, hh3cIPsecTunTotalRefreshesV2=hh3cIPsecTunTotalRefreshesV2, hh3cIPsecTrapGlobalCntlV2=hh3cIPsecTrapGlobalCntlV2, hh3cIPsecPolicyDetachTrapCntlV2=hh3cIPsecPolicyDetachTrapCntlV2, hh3cIPsecGlobalOutOctetsV2=hh3cIPsecGlobalOutOctetsV2, hh3cIPsecSaSpiValueV2=hh3cIPsecSaSpiValueV2, hh3cIPsecSaV2Entry=hh3cIPsecSaV2Entry, hh3cIPsecEncryFailureTrapCntlV2=hh3cIPsecEncryFailureTrapCntlV2, hh3cIPsecGlobalInDecompOctetsV2=hh3cIPsecGlobalInDecompOctetsV2, hh3cIPsecTunRemoteAddrTypeV2=hh3cIPsecTunRemoteAddrTypeV2, hh3cIPsecTrafficRemoPro2V2=hh3cIPsecTrafficRemoPro2V2, hh3cIPsecTunnelV2Entry=hh3cIPsecTunnelV2Entry, hh3cIPsecTunIfIndexV2=hh3cIPsecTunIfIndexV2, hh3cIPsecTrafficV2Table=hh3cIPsecTrafficV2Table, hh3cIPsecTunInAuthFailsV2=hh3cIPsecTunInAuthFailsV2, hh3cIPsecTunnelStatV2Entry=hh3cIPsecTunnelStatV2Entry, hh3cIPsecTunInSaEspAuthAlgoV2=hh3cIPsecTunInSaEspAuthAlgoV2, hh3cIPsecGlobalStatsV2=hh3cIPsecGlobalStatsV2, hh3cIPsecGlobalInPktsV2=hh3cIPsecGlobalInPktsV2, hh3cIPsecTunIndexV2=hh3cIPsecTunIndexV2, hh3cIPsecTunLocalAddrTypeV2=hh3cIPsecTunLocalAddrTypeV2, hh3cIPsecPolicyAttachTrapCntlV2=hh3cIPsecPolicyAttachTrapCntlV2, hh3cIPsecGlobalInvalidLenDropsV2=hh3cIPsecGlobalInvalidLenDropsV2)
